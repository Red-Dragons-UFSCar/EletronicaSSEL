
Rx_M4_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014e94  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000470  08015138  08015138  00016138  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080155a8  080155a8  000172e8  2**0
                  CONTENTS
  4 .ARM          00000008  080155a8  080155a8  000165a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080155b0  080155b0  000172e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080155b0  080155b0  000165b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080155b4  080155b4  000165b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002e8  24000000  080155b8  00017000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000024c0  240002e8  080158a0  000172e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  240027a8  080158a0  000177a8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000172e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00029bf0  00000000  00000000  00017316  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000566a  00000000  00000000  00040f06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001f60  00000000  00000000  00046570  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001817  00000000  00000000  000484d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00042939  00000000  00000000  00049ce7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002d9f3  00000000  00000000  0008c620  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001a2d4e  00000000  00000000  000ba013  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0025cd61  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009424  00000000  00000000  0025cda4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004e  00000000  00000000  002661c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240002e8 	.word	0x240002e8
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0801511c 	.word	0x0801511c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240002ec 	.word	0x240002ec
 80002dc:	0801511c 	.word	0x0801511c

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96a 	b.w	800067c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	460c      	mov	r4, r1
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d14e      	bne.n	800046a <__udivmoddi4+0xaa>
 80003cc:	4694      	mov	ip, r2
 80003ce:	458c      	cmp	ip, r1
 80003d0:	4686      	mov	lr, r0
 80003d2:	fab2 f282 	clz	r2, r2
 80003d6:	d962      	bls.n	800049e <__udivmoddi4+0xde>
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0320 	rsb	r3, r2, #32
 80003de:	4091      	lsls	r1, r2
 80003e0:	fa20 f303 	lsr.w	r3, r0, r3
 80003e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003e8:	4319      	orrs	r1, r3
 80003ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80003ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003f2:	fa1f f68c 	uxth.w	r6, ip
 80003f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000402:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000406:	fb04 f106 	mul.w	r1, r4, r6
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f104 30ff 	add.w	r0, r4, #4294967295
 8000416:	f080 8112 	bcs.w	800063e <__udivmoddi4+0x27e>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 810f 	bls.w	800063e <__udivmoddi4+0x27e>
 8000420:	3c02      	subs	r4, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a59      	subs	r1, r3, r1
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb1 f0f7 	udiv	r0, r1, r7
 800042e:	fb07 1110 	mls	r1, r7, r0, r1
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f606 	mul.w	r6, r0, r6
 800043a:	429e      	cmp	r6, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x94>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 31ff 	add.w	r1, r0, #4294967295
 8000446:	f080 80fc 	bcs.w	8000642 <__udivmoddi4+0x282>
 800044a:	429e      	cmp	r6, r3
 800044c:	f240 80f9 	bls.w	8000642 <__udivmoddi4+0x282>
 8000450:	4463      	add	r3, ip
 8000452:	3802      	subs	r0, #2
 8000454:	1b9b      	subs	r3, r3, r6
 8000456:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800045a:	2100      	movs	r1, #0
 800045c:	b11d      	cbz	r5, 8000466 <__udivmoddi4+0xa6>
 800045e:	40d3      	lsrs	r3, r2
 8000460:	2200      	movs	r2, #0
 8000462:	e9c5 3200 	strd	r3, r2, [r5]
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d905      	bls.n	800047a <__udivmoddi4+0xba>
 800046e:	b10d      	cbz	r5, 8000474 <__udivmoddi4+0xb4>
 8000470:	e9c5 0100 	strd	r0, r1, [r5]
 8000474:	2100      	movs	r1, #0
 8000476:	4608      	mov	r0, r1
 8000478:	e7f5      	b.n	8000466 <__udivmoddi4+0xa6>
 800047a:	fab3 f183 	clz	r1, r3
 800047e:	2900      	cmp	r1, #0
 8000480:	d146      	bne.n	8000510 <__udivmoddi4+0x150>
 8000482:	42a3      	cmp	r3, r4
 8000484:	d302      	bcc.n	800048c <__udivmoddi4+0xcc>
 8000486:	4290      	cmp	r0, r2
 8000488:	f0c0 80f0 	bcc.w	800066c <__udivmoddi4+0x2ac>
 800048c:	1a86      	subs	r6, r0, r2
 800048e:	eb64 0303 	sbc.w	r3, r4, r3
 8000492:	2001      	movs	r0, #1
 8000494:	2d00      	cmp	r5, #0
 8000496:	d0e6      	beq.n	8000466 <__udivmoddi4+0xa6>
 8000498:	e9c5 6300 	strd	r6, r3, [r5]
 800049c:	e7e3      	b.n	8000466 <__udivmoddi4+0xa6>
 800049e:	2a00      	cmp	r2, #0
 80004a0:	f040 8090 	bne.w	80005c4 <__udivmoddi4+0x204>
 80004a4:	eba1 040c 	sub.w	r4, r1, ip
 80004a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ac:	fa1f f78c 	uxth.w	r7, ip
 80004b0:	2101      	movs	r1, #1
 80004b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ba:	fb08 4416 	mls	r4, r8, r6, r4
 80004be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004c2:	fb07 f006 	mul.w	r0, r7, r6
 80004c6:	4298      	cmp	r0, r3
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x11c>
 80004ca:	eb1c 0303 	adds.w	r3, ip, r3
 80004ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x11a>
 80004d4:	4298      	cmp	r0, r3
 80004d6:	f200 80cd 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004da:	4626      	mov	r6, r4
 80004dc:	1a1c      	subs	r4, r3, r0
 80004de:	fa1f f38e 	uxth.w	r3, lr
 80004e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004e6:	fb08 4410 	mls	r4, r8, r0, r4
 80004ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004ee:	fb00 f707 	mul.w	r7, r0, r7
 80004f2:	429f      	cmp	r7, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x148>
 80004f6:	eb1c 0303 	adds.w	r3, ip, r3
 80004fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80004fe:	d202      	bcs.n	8000506 <__udivmoddi4+0x146>
 8000500:	429f      	cmp	r7, r3
 8000502:	f200 80b0 	bhi.w	8000666 <__udivmoddi4+0x2a6>
 8000506:	4620      	mov	r0, r4
 8000508:	1bdb      	subs	r3, r3, r7
 800050a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800050e:	e7a5      	b.n	800045c <__udivmoddi4+0x9c>
 8000510:	f1c1 0620 	rsb	r6, r1, #32
 8000514:	408b      	lsls	r3, r1
 8000516:	fa22 f706 	lsr.w	r7, r2, r6
 800051a:	431f      	orrs	r7, r3
 800051c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000520:	fa04 f301 	lsl.w	r3, r4, r1
 8000524:	ea43 030c 	orr.w	r3, r3, ip
 8000528:	40f4      	lsrs	r4, r6
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	0c38      	lsrs	r0, r7, #16
 8000530:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000534:	fbb4 fef0 	udiv	lr, r4, r0
 8000538:	fa1f fc87 	uxth.w	ip, r7
 800053c:	fb00 441e 	mls	r4, r0, lr, r4
 8000540:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000544:	fb0e f90c 	mul.w	r9, lr, ip
 8000548:	45a1      	cmp	r9, r4
 800054a:	fa02 f201 	lsl.w	r2, r2, r1
 800054e:	d90a      	bls.n	8000566 <__udivmoddi4+0x1a6>
 8000550:	193c      	adds	r4, r7, r4
 8000552:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000556:	f080 8084 	bcs.w	8000662 <__udivmoddi4+0x2a2>
 800055a:	45a1      	cmp	r9, r4
 800055c:	f240 8081 	bls.w	8000662 <__udivmoddi4+0x2a2>
 8000560:	f1ae 0e02 	sub.w	lr, lr, #2
 8000564:	443c      	add	r4, r7
 8000566:	eba4 0409 	sub.w	r4, r4, r9
 800056a:	fa1f f983 	uxth.w	r9, r3
 800056e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000572:	fb00 4413 	mls	r4, r0, r3, r4
 8000576:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800057a:	fb03 fc0c 	mul.w	ip, r3, ip
 800057e:	45a4      	cmp	ip, r4
 8000580:	d907      	bls.n	8000592 <__udivmoddi4+0x1d2>
 8000582:	193c      	adds	r4, r7, r4
 8000584:	f103 30ff 	add.w	r0, r3, #4294967295
 8000588:	d267      	bcs.n	800065a <__udivmoddi4+0x29a>
 800058a:	45a4      	cmp	ip, r4
 800058c:	d965      	bls.n	800065a <__udivmoddi4+0x29a>
 800058e:	3b02      	subs	r3, #2
 8000590:	443c      	add	r4, r7
 8000592:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000596:	fba0 9302 	umull	r9, r3, r0, r2
 800059a:	eba4 040c 	sub.w	r4, r4, ip
 800059e:	429c      	cmp	r4, r3
 80005a0:	46ce      	mov	lr, r9
 80005a2:	469c      	mov	ip, r3
 80005a4:	d351      	bcc.n	800064a <__udivmoddi4+0x28a>
 80005a6:	d04e      	beq.n	8000646 <__udivmoddi4+0x286>
 80005a8:	b155      	cbz	r5, 80005c0 <__udivmoddi4+0x200>
 80005aa:	ebb8 030e 	subs.w	r3, r8, lr
 80005ae:	eb64 040c 	sbc.w	r4, r4, ip
 80005b2:	fa04 f606 	lsl.w	r6, r4, r6
 80005b6:	40cb      	lsrs	r3, r1
 80005b8:	431e      	orrs	r6, r3
 80005ba:	40cc      	lsrs	r4, r1
 80005bc:	e9c5 6400 	strd	r6, r4, [r5]
 80005c0:	2100      	movs	r1, #0
 80005c2:	e750      	b.n	8000466 <__udivmoddi4+0xa6>
 80005c4:	f1c2 0320 	rsb	r3, r2, #32
 80005c8:	fa20 f103 	lsr.w	r1, r0, r3
 80005cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d0:	fa24 f303 	lsr.w	r3, r4, r3
 80005d4:	4094      	lsls	r4, r2
 80005d6:	430c      	orrs	r4, r1
 80005d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80005e0:	fa1f f78c 	uxth.w	r7, ip
 80005e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005e8:	fb08 3110 	mls	r1, r8, r0, r3
 80005ec:	0c23      	lsrs	r3, r4, #16
 80005ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005f2:	fb00 f107 	mul.w	r1, r0, r7
 80005f6:	4299      	cmp	r1, r3
 80005f8:	d908      	bls.n	800060c <__udivmoddi4+0x24c>
 80005fa:	eb1c 0303 	adds.w	r3, ip, r3
 80005fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000602:	d22c      	bcs.n	800065e <__udivmoddi4+0x29e>
 8000604:	4299      	cmp	r1, r3
 8000606:	d92a      	bls.n	800065e <__udivmoddi4+0x29e>
 8000608:	3802      	subs	r0, #2
 800060a:	4463      	add	r3, ip
 800060c:	1a5b      	subs	r3, r3, r1
 800060e:	b2a4      	uxth	r4, r4
 8000610:	fbb3 f1f8 	udiv	r1, r3, r8
 8000614:	fb08 3311 	mls	r3, r8, r1, r3
 8000618:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800061c:	fb01 f307 	mul.w	r3, r1, r7
 8000620:	42a3      	cmp	r3, r4
 8000622:	d908      	bls.n	8000636 <__udivmoddi4+0x276>
 8000624:	eb1c 0404 	adds.w	r4, ip, r4
 8000628:	f101 36ff 	add.w	r6, r1, #4294967295
 800062c:	d213      	bcs.n	8000656 <__udivmoddi4+0x296>
 800062e:	42a3      	cmp	r3, r4
 8000630:	d911      	bls.n	8000656 <__udivmoddi4+0x296>
 8000632:	3902      	subs	r1, #2
 8000634:	4464      	add	r4, ip
 8000636:	1ae4      	subs	r4, r4, r3
 8000638:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800063c:	e739      	b.n	80004b2 <__udivmoddi4+0xf2>
 800063e:	4604      	mov	r4, r0
 8000640:	e6f0      	b.n	8000424 <__udivmoddi4+0x64>
 8000642:	4608      	mov	r0, r1
 8000644:	e706      	b.n	8000454 <__udivmoddi4+0x94>
 8000646:	45c8      	cmp	r8, r9
 8000648:	d2ae      	bcs.n	80005a8 <__udivmoddi4+0x1e8>
 800064a:	ebb9 0e02 	subs.w	lr, r9, r2
 800064e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000652:	3801      	subs	r0, #1
 8000654:	e7a8      	b.n	80005a8 <__udivmoddi4+0x1e8>
 8000656:	4631      	mov	r1, r6
 8000658:	e7ed      	b.n	8000636 <__udivmoddi4+0x276>
 800065a:	4603      	mov	r3, r0
 800065c:	e799      	b.n	8000592 <__udivmoddi4+0x1d2>
 800065e:	4630      	mov	r0, r6
 8000660:	e7d4      	b.n	800060c <__udivmoddi4+0x24c>
 8000662:	46d6      	mov	lr, sl
 8000664:	e77f      	b.n	8000566 <__udivmoddi4+0x1a6>
 8000666:	4463      	add	r3, ip
 8000668:	3802      	subs	r0, #2
 800066a:	e74d      	b.n	8000508 <__udivmoddi4+0x148>
 800066c:	4606      	mov	r6, r0
 800066e:	4623      	mov	r3, r4
 8000670:	4608      	mov	r0, r1
 8000672:	e70f      	b.n	8000494 <__udivmoddi4+0xd4>
 8000674:	3e02      	subs	r6, #2
 8000676:	4463      	add	r3, ip
 8000678:	e730      	b.n	80004dc <__udivmoddi4+0x11c>
 800067a:	bf00      	nop

0800067c <__aeabi_idiv0>:
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop

08000680 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000680:	b480      	push	{r7}
 8000682:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000684:	4b3d      	ldr	r3, [pc, #244]	@ (800077c <SystemInit+0xfc>)
 8000686:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800068a:	4a3c      	ldr	r2, [pc, #240]	@ (800077c <SystemInit+0xfc>)
 800068c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000690:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000694:	4b39      	ldr	r3, [pc, #228]	@ (800077c <SystemInit+0xfc>)
 8000696:	691b      	ldr	r3, [r3, #16]
 8000698:	4a38      	ldr	r2, [pc, #224]	@ (800077c <SystemInit+0xfc>)
 800069a:	f043 0310 	orr.w	r3, r3, #16
 800069e:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006a0:	4b37      	ldr	r3, [pc, #220]	@ (8000780 <SystemInit+0x100>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	f003 030f 	and.w	r3, r3, #15
 80006a8:	2b06      	cmp	r3, #6
 80006aa:	d807      	bhi.n	80006bc <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006ac:	4b34      	ldr	r3, [pc, #208]	@ (8000780 <SystemInit+0x100>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	f023 030f 	bic.w	r3, r3, #15
 80006b4:	4a32      	ldr	r2, [pc, #200]	@ (8000780 <SystemInit+0x100>)
 80006b6:	f043 0307 	orr.w	r3, r3, #7
 80006ba:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006bc:	4b31      	ldr	r3, [pc, #196]	@ (8000784 <SystemInit+0x104>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	4a30      	ldr	r2, [pc, #192]	@ (8000784 <SystemInit+0x104>)
 80006c2:	f043 0301 	orr.w	r3, r3, #1
 80006c6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006c8:	4b2e      	ldr	r3, [pc, #184]	@ (8000784 <SystemInit+0x104>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006ce:	4b2d      	ldr	r3, [pc, #180]	@ (8000784 <SystemInit+0x104>)
 80006d0:	681a      	ldr	r2, [r3, #0]
 80006d2:	492c      	ldr	r1, [pc, #176]	@ (8000784 <SystemInit+0x104>)
 80006d4:	4b2c      	ldr	r3, [pc, #176]	@ (8000788 <SystemInit+0x108>)
 80006d6:	4013      	ands	r3, r2
 80006d8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006da:	4b29      	ldr	r3, [pc, #164]	@ (8000780 <SystemInit+0x100>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	f003 0308 	and.w	r3, r3, #8
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d007      	beq.n	80006f6 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006e6:	4b26      	ldr	r3, [pc, #152]	@ (8000780 <SystemInit+0x100>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	f023 030f 	bic.w	r3, r3, #15
 80006ee:	4a24      	ldr	r2, [pc, #144]	@ (8000780 <SystemInit+0x100>)
 80006f0:	f043 0307 	orr.w	r3, r3, #7
 80006f4:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80006f6:	4b23      	ldr	r3, [pc, #140]	@ (8000784 <SystemInit+0x104>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80006fc:	4b21      	ldr	r3, [pc, #132]	@ (8000784 <SystemInit+0x104>)
 80006fe:	2200      	movs	r2, #0
 8000700:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000702:	4b20      	ldr	r3, [pc, #128]	@ (8000784 <SystemInit+0x104>)
 8000704:	2200      	movs	r2, #0
 8000706:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000708:	4b1e      	ldr	r3, [pc, #120]	@ (8000784 <SystemInit+0x104>)
 800070a:	4a20      	ldr	r2, [pc, #128]	@ (800078c <SystemInit+0x10c>)
 800070c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800070e:	4b1d      	ldr	r3, [pc, #116]	@ (8000784 <SystemInit+0x104>)
 8000710:	4a1f      	ldr	r2, [pc, #124]	@ (8000790 <SystemInit+0x110>)
 8000712:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000714:	4b1b      	ldr	r3, [pc, #108]	@ (8000784 <SystemInit+0x104>)
 8000716:	4a1f      	ldr	r2, [pc, #124]	@ (8000794 <SystemInit+0x114>)
 8000718:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800071a:	4b1a      	ldr	r3, [pc, #104]	@ (8000784 <SystemInit+0x104>)
 800071c:	2200      	movs	r2, #0
 800071e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000720:	4b18      	ldr	r3, [pc, #96]	@ (8000784 <SystemInit+0x104>)
 8000722:	4a1c      	ldr	r2, [pc, #112]	@ (8000794 <SystemInit+0x114>)
 8000724:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000726:	4b17      	ldr	r3, [pc, #92]	@ (8000784 <SystemInit+0x104>)
 8000728:	2200      	movs	r2, #0
 800072a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800072c:	4b15      	ldr	r3, [pc, #84]	@ (8000784 <SystemInit+0x104>)
 800072e:	4a19      	ldr	r2, [pc, #100]	@ (8000794 <SystemInit+0x114>)
 8000730:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000732:	4b14      	ldr	r3, [pc, #80]	@ (8000784 <SystemInit+0x104>)
 8000734:	2200      	movs	r2, #0
 8000736:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000738:	4b12      	ldr	r3, [pc, #72]	@ (8000784 <SystemInit+0x104>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	4a11      	ldr	r2, [pc, #68]	@ (8000784 <SystemInit+0x104>)
 800073e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000742:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000744:	4b0f      	ldr	r3, [pc, #60]	@ (8000784 <SystemInit+0x104>)
 8000746:	2200      	movs	r2, #0
 8000748:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800074a:	4b13      	ldr	r3, [pc, #76]	@ (8000798 <SystemInit+0x118>)
 800074c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800074e:	4a12      	ldr	r2, [pc, #72]	@ (8000798 <SystemInit+0x118>)
 8000750:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000754:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000756:	4b11      	ldr	r3, [pc, #68]	@ (800079c <SystemInit+0x11c>)
 8000758:	681a      	ldr	r2, [r3, #0]
 800075a:	4b11      	ldr	r3, [pc, #68]	@ (80007a0 <SystemInit+0x120>)
 800075c:	4013      	ands	r3, r2
 800075e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000762:	d202      	bcs.n	800076a <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000764:	4b0f      	ldr	r3, [pc, #60]	@ (80007a4 <SystemInit+0x124>)
 8000766:	2201      	movs	r2, #1
 8000768:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800076a:	4b0f      	ldr	r3, [pc, #60]	@ (80007a8 <SystemInit+0x128>)
 800076c:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000770:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000772:	bf00      	nop
 8000774:	46bd      	mov	sp, r7
 8000776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077a:	4770      	bx	lr
 800077c:	e000ed00 	.word	0xe000ed00
 8000780:	52002000 	.word	0x52002000
 8000784:	58024400 	.word	0x58024400
 8000788:	eaf6ed7f 	.word	0xeaf6ed7f
 800078c:	02020200 	.word	0x02020200
 8000790:	01ff0000 	.word	0x01ff0000
 8000794:	01010280 	.word	0x01010280
 8000798:	580000c0 	.word	0x580000c0
 800079c:	5c001000 	.word	0x5c001000
 80007a0:	ffff0000 	.word	0xffff0000
 80007a4:	51008108 	.word	0x51008108
 80007a8:	52004000 	.word	0x52004000

080007ac <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b08a      	sub	sp, #40	@ 0x28
 80007b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80007b2:	f107 031c 	add.w	r3, r7, #28
 80007b6:	2200      	movs	r2, #0
 80007b8:	601a      	str	r2, [r3, #0]
 80007ba:	605a      	str	r2, [r3, #4]
 80007bc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80007be:	463b      	mov	r3, r7
 80007c0:	2200      	movs	r2, #0
 80007c2:	601a      	str	r2, [r3, #0]
 80007c4:	605a      	str	r2, [r3, #4]
 80007c6:	609a      	str	r2, [r3, #8]
 80007c8:	60da      	str	r2, [r3, #12]
 80007ca:	611a      	str	r2, [r3, #16]
 80007cc:	615a      	str	r2, [r3, #20]
 80007ce:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80007d0:	4b30      	ldr	r3, [pc, #192]	@ (8000894 <MX_ADC1_Init+0xe8>)
 80007d2:	4a31      	ldr	r2, [pc, #196]	@ (8000898 <MX_ADC1_Init+0xec>)
 80007d4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 80007d6:	4b2f      	ldr	r3, [pc, #188]	@ (8000894 <MX_ADC1_Init+0xe8>)
 80007d8:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80007dc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 80007de:	4b2d      	ldr	r3, [pc, #180]	@ (8000894 <MX_ADC1_Init+0xe8>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007e4:	4b2b      	ldr	r3, [pc, #172]	@ (8000894 <MX_ADC1_Init+0xe8>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007ea:	4b2a      	ldr	r3, [pc, #168]	@ (8000894 <MX_ADC1_Init+0xe8>)
 80007ec:	2204      	movs	r2, #4
 80007ee:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80007f0:	4b28      	ldr	r3, [pc, #160]	@ (8000894 <MX_ADC1_Init+0xe8>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80007f6:	4b27      	ldr	r3, [pc, #156]	@ (8000894 <MX_ADC1_Init+0xe8>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 80007fc:	4b25      	ldr	r3, [pc, #148]	@ (8000894 <MX_ADC1_Init+0xe8>)
 80007fe:	2201      	movs	r2, #1
 8000800:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000802:	4b24      	ldr	r3, [pc, #144]	@ (8000894 <MX_ADC1_Init+0xe8>)
 8000804:	2200      	movs	r2, #0
 8000806:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000808:	4b22      	ldr	r3, [pc, #136]	@ (8000894 <MX_ADC1_Init+0xe8>)
 800080a:	2200      	movs	r2, #0
 800080c:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800080e:	4b21      	ldr	r3, [pc, #132]	@ (8000894 <MX_ADC1_Init+0xe8>)
 8000810:	2200      	movs	r2, #0
 8000812:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000814:	4b1f      	ldr	r3, [pc, #124]	@ (8000894 <MX_ADC1_Init+0xe8>)
 8000816:	2200      	movs	r2, #0
 8000818:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800081a:	4b1e      	ldr	r3, [pc, #120]	@ (8000894 <MX_ADC1_Init+0xe8>)
 800081c:	2200      	movs	r2, #0
 800081e:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000820:	4b1c      	ldr	r3, [pc, #112]	@ (8000894 <MX_ADC1_Init+0xe8>)
 8000822:	2200      	movs	r2, #0
 8000824:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000826:	4b1b      	ldr	r3, [pc, #108]	@ (8000894 <MX_ADC1_Init+0xe8>)
 8000828:	2200      	movs	r2, #0
 800082a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800082e:	4819      	ldr	r0, [pc, #100]	@ (8000894 <MX_ADC1_Init+0xe8>)
 8000830:	f002 fbec 	bl	800300c <HAL_ADC_Init>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800083a:	f000 fd7a 	bl	8001332 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800083e:	2300      	movs	r3, #0
 8000840:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000842:	f107 031c 	add.w	r3, r7, #28
 8000846:	4619      	mov	r1, r3
 8000848:	4812      	ldr	r0, [pc, #72]	@ (8000894 <MX_ADC1_Init+0xe8>)
 800084a:	f003 fc65 	bl	8004118 <HAL_ADCEx_MultiModeConfigChannel>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d001      	beq.n	8000858 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000854:	f000 fd6d 	bl	8001332 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000858:	4b10      	ldr	r3, [pc, #64]	@ (800089c <MX_ADC1_Init+0xf0>)
 800085a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800085c:	2306      	movs	r3, #6
 800085e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000860:	2300      	movs	r3, #0
 8000862:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000864:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000868:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800086a:	2304      	movs	r3, #4
 800086c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800086e:	2300      	movs	r3, #0
 8000870:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000872:	2300      	movs	r3, #0
 8000874:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000876:	463b      	mov	r3, r7
 8000878:	4619      	mov	r1, r3
 800087a:	4806      	ldr	r0, [pc, #24]	@ (8000894 <MX_ADC1_Init+0xe8>)
 800087c:	f002 ff34 	bl	80036e8 <HAL_ADC_ConfigChannel>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000886:	f000 fd54 	bl	8001332 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800088a:	bf00      	nop
 800088c:	3728      	adds	r7, #40	@ 0x28
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	24000304 	.word	0x24000304
 8000898:	40022000 	.word	0x40022000
 800089c:	2a000400 	.word	0x2a000400

080008a0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b08a      	sub	sp, #40	@ 0x28
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a8:	f107 0314 	add.w	r3, r7, #20
 80008ac:	2200      	movs	r2, #0
 80008ae:	601a      	str	r2, [r3, #0]
 80008b0:	605a      	str	r2, [r3, #4]
 80008b2:	609a      	str	r2, [r3, #8]
 80008b4:	60da      	str	r2, [r3, #12]
 80008b6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	4a18      	ldr	r2, [pc, #96]	@ (8000920 <HAL_ADC_MspInit+0x80>)
 80008be:	4293      	cmp	r3, r2
 80008c0:	d129      	bne.n	8000916 <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80008c2:	4b18      	ldr	r3, [pc, #96]	@ (8000924 <HAL_ADC_MspInit+0x84>)
 80008c4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80008c8:	4a16      	ldr	r2, [pc, #88]	@ (8000924 <HAL_ADC_MspInit+0x84>)
 80008ca:	f043 0320 	orr.w	r3, r3, #32
 80008ce:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80008d2:	4b14      	ldr	r3, [pc, #80]	@ (8000924 <HAL_ADC_MspInit+0x84>)
 80008d4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80008d8:	f003 0320 	and.w	r3, r3, #32
 80008dc:	613b      	str	r3, [r7, #16]
 80008de:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80008e0:	4b10      	ldr	r3, [pc, #64]	@ (8000924 <HAL_ADC_MspInit+0x84>)
 80008e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008e6:	4a0f      	ldr	r2, [pc, #60]	@ (8000924 <HAL_ADC_MspInit+0x84>)
 80008e8:	f043 0304 	orr.w	r3, r3, #4
 80008ec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80008f0:	4b0c      	ldr	r3, [pc, #48]	@ (8000924 <HAL_ADC_MspInit+0x84>)
 80008f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008f6:	f003 0304 	and.w	r3, r3, #4
 80008fa:	60fb      	str	r3, [r7, #12]
 80008fc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_INP10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80008fe:	2301      	movs	r3, #1
 8000900:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000902:	2303      	movs	r3, #3
 8000904:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000906:	2300      	movs	r3, #0
 8000908:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800090a:	f107 0314 	add.w	r3, r7, #20
 800090e:	4619      	mov	r1, r3
 8000910:	4805      	ldr	r0, [pc, #20]	@ (8000928 <HAL_ADC_MspInit+0x88>)
 8000912:	f005 ff4b 	bl	80067ac <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000916:	bf00      	nop
 8000918:	3728      	adds	r7, #40	@ 0x28
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	40022000 	.word	0x40022000
 8000924:	58024400 	.word	0x58024400
 8000928:	58020800 	.word	0x58020800

0800092c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b082      	sub	sp, #8
 8000930:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000932:	4b19      	ldr	r3, [pc, #100]	@ (8000998 <MX_DMA_Init+0x6c>)
 8000934:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000938:	4a17      	ldr	r2, [pc, #92]	@ (8000998 <MX_DMA_Init+0x6c>)
 800093a:	f043 0301 	orr.w	r3, r3, #1
 800093e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000942:	4b15      	ldr	r3, [pc, #84]	@ (8000998 <MX_DMA_Init+0x6c>)
 8000944:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000948:	f003 0301 	and.w	r3, r3, #1
 800094c:	607b      	str	r3, [r7, #4]
 800094e:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000950:	2200      	movs	r2, #0
 8000952:	2100      	movs	r1, #0
 8000954:	200c      	movs	r0, #12
 8000956:	f003 fd98 	bl	800448a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800095a:	200c      	movs	r0, #12
 800095c:	f003 fdaf 	bl	80044be <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000960:	2200      	movs	r2, #0
 8000962:	2100      	movs	r1, #0
 8000964:	200e      	movs	r0, #14
 8000966:	f003 fd90 	bl	800448a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 800096a:	200e      	movs	r0, #14
 800096c:	f003 fda7 	bl	80044be <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8000970:	2200      	movs	r2, #0
 8000972:	2100      	movs	r1, #0
 8000974:	200f      	movs	r0, #15
 8000976:	f003 fd88 	bl	800448a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 800097a:	200f      	movs	r0, #15
 800097c:	f003 fd9f 	bl	80044be <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000980:	2200      	movs	r2, #0
 8000982:	2100      	movs	r1, #0
 8000984:	2010      	movs	r0, #16
 8000986:	f003 fd80 	bl	800448a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800098a:	2010      	movs	r0, #16
 800098c:	f003 fd97 	bl	80044be <HAL_NVIC_EnableIRQ>

}
 8000990:	bf00      	nop
 8000992:	3708      	adds	r7, #8
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}
 8000998:	58024400 	.word	0x58024400

0800099c <dshot_init>:
static void dshot_enable_dma_request();


/* Functions */
void dshot_init(dshot_type_e dshot_type)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b082      	sub	sp, #8
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	4603      	mov	r3, r0
 80009a4:	71fb      	strb	r3, [r7, #7]
	dshot_set_timer(dshot_type);
 80009a6:	79fb      	ldrb	r3, [r7, #7]
 80009a8:	4618      	mov	r0, r3
 80009aa:	f000 f833 	bl	8000a14 <dshot_set_timer>
	dshot_put_tc_callback_function();
 80009ae:	f000 f8d3 	bl	8000b58 <dshot_put_tc_callback_function>
	dshot_start_pwm();
 80009b2:	f000 f8ef 	bl	8000b94 <dshot_start_pwm>
}
 80009b6:	bf00      	nop
 80009b8:	3708      	adds	r7, #8
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}

080009be <dshot_write>:

void dshot_write(uint16_t* motor_value)
{
 80009be:	b580      	push	{r7, lr}
 80009c0:	b082      	sub	sp, #8
 80009c2:	af00      	add	r7, sp, #0
 80009c4:	6078      	str	r0, [r7, #4]
	dshot_prepare_dmabuffer_all(motor_value);
 80009c6:	6878      	ldr	r0, [r7, #4]
 80009c8:	f000 f962 	bl	8000c90 <dshot_prepare_dmabuffer_all>
	dshot_dma_start();
 80009cc:	f000 f98c 	bl	8000ce8 <dshot_dma_start>
	dshot_enable_dma_request();
 80009d0:	f000 f9c2 	bl	8000d58 <dshot_enable_dma_request>
}
 80009d4:	bf00      	nop
 80009d6:	3708      	adds	r7, #8
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}

080009dc <dshot_choose_type>:


/* Static functions */
static uint32_t dshot_choose_type(dshot_type_e dshot_type)
{
 80009dc:	b480      	push	{r7}
 80009de:	b083      	sub	sp, #12
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	4603      	mov	r3, r0
 80009e4:	71fb      	strb	r3, [r7, #7]
	switch (dshot_type)
 80009e6:	79fb      	ldrb	r3, [r7, #7]
 80009e8:	2b01      	cmp	r3, #1
 80009ea:	d003      	beq.n	80009f4 <dshot_choose_type+0x18>
 80009ec:	2b02      	cmp	r3, #2
 80009ee:	d103      	bne.n	80009f8 <dshot_choose_type+0x1c>
	{
		case(DSHOT600):
				return DSHOT600_HZ;
 80009f0:	4b05      	ldr	r3, [pc, #20]	@ (8000a08 <dshot_choose_type+0x2c>)
 80009f2:	e002      	b.n	80009fa <dshot_choose_type+0x1e>

		case(DSHOT300):
				return DSHOT300_HZ;
 80009f4:	4b05      	ldr	r3, [pc, #20]	@ (8000a0c <dshot_choose_type+0x30>)
 80009f6:	e000      	b.n	80009fa <dshot_choose_type+0x1e>

		default:
		case(DSHOT150):
				return DSHOT150_HZ;
 80009f8:	4b05      	ldr	r3, [pc, #20]	@ (8000a10 <dshot_choose_type+0x34>)
	}
}
 80009fa:	4618      	mov	r0, r3
 80009fc:	370c      	adds	r7, #12
 80009fe:	46bd      	mov	sp, r7
 8000a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop
 8000a08:	00b71b00 	.word	0x00b71b00
 8000a0c:	005b8d80 	.word	0x005b8d80
 8000a10:	002dc6c0 	.word	0x002dc6c0

08000a14 <dshot_set_timer>:

static void dshot_set_timer(dshot_type_e dshot_type)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	ed2d 8b02 	vpush	{d8}
 8000a1a:	b084      	sub	sp, #16
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	4603      	mov	r3, r0
 8000a20:	71fb      	strb	r3, [r7, #7]
	uint16_t dshot_prescaler;
	uint32_t timer_clock = TIMER_CLOCK; // all timer clock is same as SystemCoreClock in stm32f411
 8000a22:	4b27      	ldr	r3, [pc, #156]	@ (8000ac0 <dshot_set_timer+0xac>)
 8000a24:	60fb      	str	r3, [r7, #12]

	// Calculate prescaler by dshot type
	dshot_prescaler = lrintf((float) timer_clock / dshot_choose_type(dshot_type) + 0.01f) - 1;
 8000a26:	68fb      	ldr	r3, [r7, #12]
 8000a28:	ee07 3a90 	vmov	s15, r3
 8000a2c:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8000a30:	79fb      	ldrb	r3, [r7, #7]
 8000a32:	4618      	mov	r0, r3
 8000a34:	f7ff ffd2 	bl	80009dc <dshot_choose_type>
 8000a38:	ee07 0a90 	vmov	s15, r0
 8000a3c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000a40:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8000a44:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 8000ac4 <dshot_set_timer+0xb0>
 8000a48:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000a4c:	eeb0 0a67 	vmov.f32	s0, s15
 8000a50:	f014 fb24 	bl	801509c <lrintf>
 8000a54:	4603      	mov	r3, r0
 8000a56:	b29b      	uxth	r3, r3
 8000a58:	3b01      	subs	r3, #1
 8000a5a:	817b      	strh	r3, [r7, #10]

	// motor1
	__HAL_TIM_SET_PRESCALER(MOTOR_1_TIM, dshot_prescaler);
 8000a5c:	4b1a      	ldr	r3, [pc, #104]	@ (8000ac8 <dshot_set_timer+0xb4>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	897a      	ldrh	r2, [r7, #10]
 8000a62:	629a      	str	r2, [r3, #40]	@ 0x28
	__HAL_TIM_SET_AUTORELOAD(MOTOR_1_TIM, MOTOR_BITLENGTH);
 8000a64:	4b18      	ldr	r3, [pc, #96]	@ (8000ac8 <dshot_set_timer+0xb4>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	2214      	movs	r2, #20
 8000a6a:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000a6c:	4b16      	ldr	r3, [pc, #88]	@ (8000ac8 <dshot_set_timer+0xb4>)
 8000a6e:	2214      	movs	r2, #20
 8000a70:	60da      	str	r2, [r3, #12]

	// motor2
	__HAL_TIM_SET_PRESCALER(MOTOR_2_TIM, dshot_prescaler);
 8000a72:	4b16      	ldr	r3, [pc, #88]	@ (8000acc <dshot_set_timer+0xb8>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	897a      	ldrh	r2, [r7, #10]
 8000a78:	629a      	str	r2, [r3, #40]	@ 0x28
	__HAL_TIM_SET_AUTORELOAD(MOTOR_2_TIM, MOTOR_BITLENGTH);
 8000a7a:	4b14      	ldr	r3, [pc, #80]	@ (8000acc <dshot_set_timer+0xb8>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	2214      	movs	r2, #20
 8000a80:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000a82:	4b12      	ldr	r3, [pc, #72]	@ (8000acc <dshot_set_timer+0xb8>)
 8000a84:	2214      	movs	r2, #20
 8000a86:	60da      	str	r2, [r3, #12]

	// motor3
	__HAL_TIM_SET_PRESCALER(MOTOR_3_TIM, dshot_prescaler);
 8000a88:	4b10      	ldr	r3, [pc, #64]	@ (8000acc <dshot_set_timer+0xb8>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	897a      	ldrh	r2, [r7, #10]
 8000a8e:	629a      	str	r2, [r3, #40]	@ 0x28
	__HAL_TIM_SET_AUTORELOAD(MOTOR_3_TIM, MOTOR_BITLENGTH);
 8000a90:	4b0e      	ldr	r3, [pc, #56]	@ (8000acc <dshot_set_timer+0xb8>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	2214      	movs	r2, #20
 8000a96:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000a98:	4b0c      	ldr	r3, [pc, #48]	@ (8000acc <dshot_set_timer+0xb8>)
 8000a9a:	2214      	movs	r2, #20
 8000a9c:	60da      	str	r2, [r3, #12]

	// motor4
	__HAL_TIM_SET_PRESCALER(MOTOR_4_TIM, dshot_prescaler);
 8000a9e:	4b0a      	ldr	r3, [pc, #40]	@ (8000ac8 <dshot_set_timer+0xb4>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	897a      	ldrh	r2, [r7, #10]
 8000aa4:	629a      	str	r2, [r3, #40]	@ 0x28
	__HAL_TIM_SET_AUTORELOAD(MOTOR_4_TIM, MOTOR_BITLENGTH);
 8000aa6:	4b08      	ldr	r3, [pc, #32]	@ (8000ac8 <dshot_set_timer+0xb4>)
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	2214      	movs	r2, #20
 8000aac:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000aae:	4b06      	ldr	r3, [pc, #24]	@ (8000ac8 <dshot_set_timer+0xb4>)
 8000ab0:	2214      	movs	r2, #20
 8000ab2:	60da      	str	r2, [r3, #12]
}
 8000ab4:	bf00      	nop
 8000ab6:	3710      	adds	r7, #16
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	ecbd 8b02 	vpop	{d8}
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	0bebc200 	.word	0x0bebc200
 8000ac4:	3c23d70a 	.word	0x3c23d70a
 8000ac8:	24000710 	.word	0x24000710
 8000acc:	2400062c 	.word	0x2400062c

08000ad0 <dshot_dma_tc_callback>:

// __HAL_TIM_DISABLE_DMA is needed to eliminate the delay between different dshot signals
// I don't know why :(
static void dshot_dma_tc_callback(DMA_HandleTypeDef *hdma)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	b085      	sub	sp, #20
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
	TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000adc:	60fb      	str	r3, [r7, #12]

	if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8000ade:	68fb      	ldr	r3, [r7, #12]
 8000ae0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ae2:	687a      	ldr	r2, [r7, #4]
 8000ae4:	429a      	cmp	r2, r3
 8000ae6:	d108      	bne.n	8000afa <dshot_dma_tc_callback+0x2a>
	{
		__HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	68da      	ldr	r2, [r3, #12]
 8000aee:	68fb      	ldr	r3, [r7, #12]
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8000af6:	60da      	str	r2, [r3, #12]
	}
	else if(hdma == htim->hdma[TIM_DMA_ID_CC4])
	{
		__HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
	}
}
 8000af8:	e028      	b.n	8000b4c <dshot_dma_tc_callback+0x7c>
	else if(hdma == htim->hdma[TIM_DMA_ID_CC2])
 8000afa:	68fb      	ldr	r3, [r7, #12]
 8000afc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000afe:	687a      	ldr	r2, [r7, #4]
 8000b00:	429a      	cmp	r2, r3
 8000b02:	d108      	bne.n	8000b16 <dshot_dma_tc_callback+0x46>
		__HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	68da      	ldr	r2, [r3, #12]
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8000b12:	60da      	str	r2, [r3, #12]
}
 8000b14:	e01a      	b.n	8000b4c <dshot_dma_tc_callback+0x7c>
	else if(hdma == htim->hdma[TIM_DMA_ID_CC3])
 8000b16:	68fb      	ldr	r3, [r7, #12]
 8000b18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b1a:	687a      	ldr	r2, [r7, #4]
 8000b1c:	429a      	cmp	r2, r3
 8000b1e:	d108      	bne.n	8000b32 <dshot_dma_tc_callback+0x62>
		__HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	68da      	ldr	r2, [r3, #12]
 8000b26:	68fb      	ldr	r3, [r7, #12]
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8000b2e:	60da      	str	r2, [r3, #12]
}
 8000b30:	e00c      	b.n	8000b4c <dshot_dma_tc_callback+0x7c>
	else if(hdma == htim->hdma[TIM_DMA_ID_CC4])
 8000b32:	68fb      	ldr	r3, [r7, #12]
 8000b34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b36:	687a      	ldr	r2, [r7, #4]
 8000b38:	429a      	cmp	r2, r3
 8000b3a:	d107      	bne.n	8000b4c <dshot_dma_tc_callback+0x7c>
		__HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	68da      	ldr	r2, [r3, #12]
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8000b4a:	60da      	str	r2, [r3, #12]
}
 8000b4c:	bf00      	nop
 8000b4e:	3714      	adds	r7, #20
 8000b50:	46bd      	mov	sp, r7
 8000b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b56:	4770      	bx	lr

08000b58 <dshot_put_tc_callback_function>:

static void dshot_put_tc_callback_function()
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
	// TIM_DMA_ID_CCx depends on timer channel
	MOTOR_1_TIM->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = dshot_dma_tc_callback;
 8000b5c:	4b0a      	ldr	r3, [pc, #40]	@ (8000b88 <dshot_put_tc_callback_function+0x30>)
 8000b5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b60:	4a0a      	ldr	r2, [pc, #40]	@ (8000b8c <dshot_put_tc_callback_function+0x34>)
 8000b62:	63da      	str	r2, [r3, #60]	@ 0x3c
	MOTOR_2_TIM->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = dshot_dma_tc_callback;
 8000b64:	4b0a      	ldr	r3, [pc, #40]	@ (8000b90 <dshot_put_tc_callback_function+0x38>)
 8000b66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b68:	4a08      	ldr	r2, [pc, #32]	@ (8000b8c <dshot_put_tc_callback_function+0x34>)
 8000b6a:	63da      	str	r2, [r3, #60]	@ 0x3c
	MOTOR_3_TIM->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = dshot_dma_tc_callback;
 8000b6c:	4b08      	ldr	r3, [pc, #32]	@ (8000b90 <dshot_put_tc_callback_function+0x38>)
 8000b6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b70:	4a06      	ldr	r2, [pc, #24]	@ (8000b8c <dshot_put_tc_callback_function+0x34>)
 8000b72:	63da      	str	r2, [r3, #60]	@ 0x3c
	MOTOR_4_TIM->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = dshot_dma_tc_callback;
 8000b74:	4b04      	ldr	r3, [pc, #16]	@ (8000b88 <dshot_put_tc_callback_function+0x30>)
 8000b76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000b78:	4a04      	ldr	r2, [pc, #16]	@ (8000b8c <dshot_put_tc_callback_function+0x34>)
 8000b7a:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8000b7c:	bf00      	nop
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop
 8000b88:	24000710 	.word	0x24000710
 8000b8c:	08000ad1 	.word	0x08000ad1
 8000b90:	2400062c 	.word	0x2400062c

08000b94 <dshot_start_pwm>:

static void dshot_start_pwm()
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
	// Start the timer channel now.
    // Enabling/disabling DMA request can restart a new cycle without PWM start/stop.
  	HAL_TIM_PWM_Start(MOTOR_1_TIM, MOTOR_1_TIM_CHANNEL);
 8000b98:	210c      	movs	r1, #12
 8000b9a:	4808      	ldr	r0, [pc, #32]	@ (8000bbc <dshot_start_pwm+0x28>)
 8000b9c:	f00b f92c 	bl	800bdf8 <HAL_TIM_PWM_Start>
  	HAL_TIM_PWM_Start(MOTOR_2_TIM, MOTOR_2_TIM_CHANNEL);
 8000ba0:	2108      	movs	r1, #8
 8000ba2:	4807      	ldr	r0, [pc, #28]	@ (8000bc0 <dshot_start_pwm+0x2c>)
 8000ba4:	f00b f928 	bl	800bdf8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(MOTOR_3_TIM, MOTOR_3_TIM_CHANNEL);
 8000ba8:	2100      	movs	r1, #0
 8000baa:	4805      	ldr	r0, [pc, #20]	@ (8000bc0 <dshot_start_pwm+0x2c>)
 8000bac:	f00b f924 	bl	800bdf8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(MOTOR_4_TIM, MOTOR_4_TIM_CHANNEL);
 8000bb0:	2104      	movs	r1, #4
 8000bb2:	4802      	ldr	r0, [pc, #8]	@ (8000bbc <dshot_start_pwm+0x28>)
 8000bb4:	f00b f920 	bl	800bdf8 <HAL_TIM_PWM_Start>
}
 8000bb8:	bf00      	nop
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	24000710 	.word	0x24000710
 8000bc0:	2400062c 	.word	0x2400062c

08000bc4 <dshot_prepare_packet>:

static uint16_t dshot_prepare_packet(uint16_t value)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b087      	sub	sp, #28
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	4603      	mov	r3, r0
 8000bcc:	80fb      	strh	r3, [r7, #6]
	uint16_t packet;
	bool dshot_telemetry = false;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	72fb      	strb	r3, [r7, #11]

	packet = (value << 1) | (dshot_telemetry ? 1 : 0);
 8000bd2:	88fb      	ldrh	r3, [r7, #6]
 8000bd4:	005b      	lsls	r3, r3, #1
 8000bd6:	b21a      	sxth	r2, r3
 8000bd8:	7afb      	ldrb	r3, [r7, #11]
 8000bda:	b21b      	sxth	r3, r3
 8000bdc:	4313      	orrs	r3, r2
 8000bde:	b21b      	sxth	r3, r3
 8000be0:	813b      	strh	r3, [r7, #8]

	// compute checksum
	unsigned csum = 0;
 8000be2:	2300      	movs	r3, #0
 8000be4:	617b      	str	r3, [r7, #20]
	unsigned csum_data = packet;
 8000be6:	893b      	ldrh	r3, [r7, #8]
 8000be8:	613b      	str	r3, [r7, #16]

	for(int i = 0; i < 3; i++)
 8000bea:	2300      	movs	r3, #0
 8000bec:	60fb      	str	r3, [r7, #12]
 8000bee:	e009      	b.n	8000c04 <dshot_prepare_packet+0x40>
	{
        csum ^=  csum_data; // xor data by nibbles
 8000bf0:	697a      	ldr	r2, [r7, #20]
 8000bf2:	693b      	ldr	r3, [r7, #16]
 8000bf4:	4053      	eors	r3, r2
 8000bf6:	617b      	str	r3, [r7, #20]
        csum_data >>= 4;
 8000bf8:	693b      	ldr	r3, [r7, #16]
 8000bfa:	091b      	lsrs	r3, r3, #4
 8000bfc:	613b      	str	r3, [r7, #16]
	for(int i = 0; i < 3; i++)
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	3301      	adds	r3, #1
 8000c02:	60fb      	str	r3, [r7, #12]
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	2b02      	cmp	r3, #2
 8000c08:	ddf2      	ble.n	8000bf0 <dshot_prepare_packet+0x2c>
	}

	csum &= 0xf;
 8000c0a:	697b      	ldr	r3, [r7, #20]
 8000c0c:	f003 030f 	and.w	r3, r3, #15
 8000c10:	617b      	str	r3, [r7, #20]
	packet = (packet << 4) | csum;
 8000c12:	893b      	ldrh	r3, [r7, #8]
 8000c14:	011b      	lsls	r3, r3, #4
 8000c16:	b29a      	uxth	r2, r3
 8000c18:	697b      	ldr	r3, [r7, #20]
 8000c1a:	b29b      	uxth	r3, r3
 8000c1c:	4313      	orrs	r3, r2
 8000c1e:	813b      	strh	r3, [r7, #8]

	return packet;
 8000c20:	893b      	ldrh	r3, [r7, #8]
}
 8000c22:	4618      	mov	r0, r3
 8000c24:	371c      	adds	r7, #28
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr

08000c2e <dshot_prepare_dmabuffer>:

// Convert 16 bits packet to 16 pwm signal
static void dshot_prepare_dmabuffer(uint32_t* motor_dmabuffer, uint16_t value)
{
 8000c2e:	b580      	push	{r7, lr}
 8000c30:	b084      	sub	sp, #16
 8000c32:	af00      	add	r7, sp, #0
 8000c34:	6078      	str	r0, [r7, #4]
 8000c36:	460b      	mov	r3, r1
 8000c38:	807b      	strh	r3, [r7, #2]
	uint16_t packet;
	packet = dshot_prepare_packet(value);
 8000c3a:	887b      	ldrh	r3, [r7, #2]
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f7ff ffc1 	bl	8000bc4 <dshot_prepare_packet>
 8000c42:	4603      	mov	r3, r0
 8000c44:	81fb      	strh	r3, [r7, #14]

	for(int i = 0; i < 16; i++)
 8000c46:	2300      	movs	r3, #0
 8000c48:	60bb      	str	r3, [r7, #8]
 8000c4a:	e011      	b.n	8000c70 <dshot_prepare_dmabuffer+0x42>
	{
		motor_dmabuffer[i] = (packet & 0x8000) ? MOTOR_BIT_1 : MOTOR_BIT_0;
 8000c4c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	da01      	bge.n	8000c58 <dshot_prepare_dmabuffer+0x2a>
 8000c54:	220e      	movs	r2, #14
 8000c56:	e000      	b.n	8000c5a <dshot_prepare_dmabuffer+0x2c>
 8000c58:	2207      	movs	r2, #7
 8000c5a:	68bb      	ldr	r3, [r7, #8]
 8000c5c:	009b      	lsls	r3, r3, #2
 8000c5e:	6879      	ldr	r1, [r7, #4]
 8000c60:	440b      	add	r3, r1
 8000c62:	601a      	str	r2, [r3, #0]
		packet <<= 1;
 8000c64:	89fb      	ldrh	r3, [r7, #14]
 8000c66:	005b      	lsls	r3, r3, #1
 8000c68:	81fb      	strh	r3, [r7, #14]
	for(int i = 0; i < 16; i++)
 8000c6a:	68bb      	ldr	r3, [r7, #8]
 8000c6c:	3301      	adds	r3, #1
 8000c6e:	60bb      	str	r3, [r7, #8]
 8000c70:	68bb      	ldr	r3, [r7, #8]
 8000c72:	2b0f      	cmp	r3, #15
 8000c74:	ddea      	ble.n	8000c4c <dshot_prepare_dmabuffer+0x1e>
	}

	motor_dmabuffer[16] = 0;
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	3340      	adds	r3, #64	@ 0x40
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	601a      	str	r2, [r3, #0]
	motor_dmabuffer[17] = 0;
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	3344      	adds	r3, #68	@ 0x44
 8000c82:	2200      	movs	r2, #0
 8000c84:	601a      	str	r2, [r3, #0]
}
 8000c86:	bf00      	nop
 8000c88:	3710      	adds	r7, #16
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
	...

08000c90 <dshot_prepare_dmabuffer_all>:

static void dshot_prepare_dmabuffer_all(uint16_t* motor_value)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b082      	sub	sp, #8
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
	dshot_prepare_dmabuffer(motor1_dmabuffer, motor_value[0]);
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	881b      	ldrh	r3, [r3, #0]
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	480e      	ldr	r0, [pc, #56]	@ (8000cd8 <dshot_prepare_dmabuffer_all+0x48>)
 8000ca0:	f7ff ffc5 	bl	8000c2e <dshot_prepare_dmabuffer>
	dshot_prepare_dmabuffer(motor2_dmabuffer, motor_value[1]);
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	3302      	adds	r3, #2
 8000ca8:	881b      	ldrh	r3, [r3, #0]
 8000caa:	4619      	mov	r1, r3
 8000cac:	480b      	ldr	r0, [pc, #44]	@ (8000cdc <dshot_prepare_dmabuffer_all+0x4c>)
 8000cae:	f7ff ffbe 	bl	8000c2e <dshot_prepare_dmabuffer>
	dshot_prepare_dmabuffer(motor3_dmabuffer, motor_value[2]);
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	3304      	adds	r3, #4
 8000cb6:	881b      	ldrh	r3, [r3, #0]
 8000cb8:	4619      	mov	r1, r3
 8000cba:	4809      	ldr	r0, [pc, #36]	@ (8000ce0 <dshot_prepare_dmabuffer_all+0x50>)
 8000cbc:	f7ff ffb7 	bl	8000c2e <dshot_prepare_dmabuffer>
	dshot_prepare_dmabuffer(motor4_dmabuffer, motor_value[3]);
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	3306      	adds	r3, #6
 8000cc4:	881b      	ldrh	r3, [r3, #0]
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	4806      	ldr	r0, [pc, #24]	@ (8000ce4 <dshot_prepare_dmabuffer_all+0x54>)
 8000cca:	f7ff ffb0 	bl	8000c2e <dshot_prepare_dmabuffer>
}
 8000cce:	bf00      	nop
 8000cd0:	3708      	adds	r7, #8
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	24000368 	.word	0x24000368
 8000cdc:	240003b0 	.word	0x240003b0
 8000ce0:	240003f8 	.word	0x240003f8
 8000ce4:	24000440 	.word	0x24000440

08000ce8 <dshot_dma_start>:

static void dshot_dma_start()
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0
	HAL_DMA_Start_IT(MOTOR_1_TIM->hdma[TIM_DMA_ID_CC4], (uint32_t)motor1_dmabuffer, (uint32_t)&MOTOR_1_TIM->Instance->CCR4, DSHOT_DMA_BUFFER_SIZE);
 8000cec:	4b14      	ldr	r3, [pc, #80]	@ (8000d40 <dshot_dma_start+0x58>)
 8000cee:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8000cf0:	4914      	ldr	r1, [pc, #80]	@ (8000d44 <dshot_dma_start+0x5c>)
 8000cf2:	4b13      	ldr	r3, [pc, #76]	@ (8000d40 <dshot_dma_start+0x58>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	3340      	adds	r3, #64	@ 0x40
 8000cf8:	461a      	mov	r2, r3
 8000cfa:	2312      	movs	r3, #18
 8000cfc:	f003 ff6a 	bl	8004bd4 <HAL_DMA_Start_IT>
	HAL_DMA_Start_IT(MOTOR_2_TIM->hdma[TIM_DMA_ID_CC3], (uint32_t)motor2_dmabuffer, (uint32_t)&MOTOR_2_TIM->Instance->CCR3, DSHOT_DMA_BUFFER_SIZE);
 8000d00:	4b11      	ldr	r3, [pc, #68]	@ (8000d48 <dshot_dma_start+0x60>)
 8000d02:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8000d04:	4911      	ldr	r1, [pc, #68]	@ (8000d4c <dshot_dma_start+0x64>)
 8000d06:	4b10      	ldr	r3, [pc, #64]	@ (8000d48 <dshot_dma_start+0x60>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	333c      	adds	r3, #60	@ 0x3c
 8000d0c:	461a      	mov	r2, r3
 8000d0e:	2312      	movs	r3, #18
 8000d10:	f003 ff60 	bl	8004bd4 <HAL_DMA_Start_IT>
	HAL_DMA_Start_IT(MOTOR_3_TIM->hdma[TIM_DMA_ID_CC1], (uint32_t)motor3_dmabuffer, (uint32_t)&MOTOR_3_TIM->Instance->CCR1, DSHOT_DMA_BUFFER_SIZE);
 8000d14:	4b0c      	ldr	r3, [pc, #48]	@ (8000d48 <dshot_dma_start+0x60>)
 8000d16:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8000d18:	490d      	ldr	r1, [pc, #52]	@ (8000d50 <dshot_dma_start+0x68>)
 8000d1a:	4b0b      	ldr	r3, [pc, #44]	@ (8000d48 <dshot_dma_start+0x60>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	3334      	adds	r3, #52	@ 0x34
 8000d20:	461a      	mov	r2, r3
 8000d22:	2312      	movs	r3, #18
 8000d24:	f003 ff56 	bl	8004bd4 <HAL_DMA_Start_IT>
	HAL_DMA_Start_IT(MOTOR_4_TIM->hdma[TIM_DMA_ID_CC2], (uint32_t)motor4_dmabuffer, (uint32_t)&MOTOR_4_TIM->Instance->CCR2, DSHOT_DMA_BUFFER_SIZE);
 8000d28:	4b05      	ldr	r3, [pc, #20]	@ (8000d40 <dshot_dma_start+0x58>)
 8000d2a:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8000d2c:	4909      	ldr	r1, [pc, #36]	@ (8000d54 <dshot_dma_start+0x6c>)
 8000d2e:	4b04      	ldr	r3, [pc, #16]	@ (8000d40 <dshot_dma_start+0x58>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	3338      	adds	r3, #56	@ 0x38
 8000d34:	461a      	mov	r2, r3
 8000d36:	2312      	movs	r3, #18
 8000d38:	f003 ff4c 	bl	8004bd4 <HAL_DMA_Start_IT>
}
 8000d3c:	bf00      	nop
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	24000710 	.word	0x24000710
 8000d44:	24000368 	.word	0x24000368
 8000d48:	2400062c 	.word	0x2400062c
 8000d4c:	240003b0 	.word	0x240003b0
 8000d50:	240003f8 	.word	0x240003f8
 8000d54:	24000440 	.word	0x24000440

08000d58 <dshot_enable_dma_request>:

static void dshot_enable_dma_request()
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
	__HAL_TIM_ENABLE_DMA(MOTOR_1_TIM, TIM_DMA_CC4);
 8000d5c:	4b12      	ldr	r3, [pc, #72]	@ (8000da8 <dshot_enable_dma_request+0x50>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	68da      	ldr	r2, [r3, #12]
 8000d62:	4b11      	ldr	r3, [pc, #68]	@ (8000da8 <dshot_enable_dma_request+0x50>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8000d6a:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_DMA(MOTOR_2_TIM, TIM_DMA_CC3);
 8000d6c:	4b0f      	ldr	r3, [pc, #60]	@ (8000dac <dshot_enable_dma_request+0x54>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	68da      	ldr	r2, [r3, #12]
 8000d72:	4b0e      	ldr	r3, [pc, #56]	@ (8000dac <dshot_enable_dma_request+0x54>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8000d7a:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_DMA(MOTOR_3_TIM, TIM_DMA_CC1);
 8000d7c:	4b0b      	ldr	r3, [pc, #44]	@ (8000dac <dshot_enable_dma_request+0x54>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	68da      	ldr	r2, [r3, #12]
 8000d82:	4b0a      	ldr	r3, [pc, #40]	@ (8000dac <dshot_enable_dma_request+0x54>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000d8a:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_DMA(MOTOR_4_TIM, TIM_DMA_CC2);
 8000d8c:	4b06      	ldr	r3, [pc, #24]	@ (8000da8 <dshot_enable_dma_request+0x50>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	68da      	ldr	r2, [r3, #12]
 8000d92:	4b05      	ldr	r3, [pc, #20]	@ (8000da8 <dshot_enable_dma_request+0x50>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8000d9a:	60da      	str	r2, [r3, #12]
}
 8000d9c:	bf00      	nop
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop
 8000da8:	24000710 	.word	0x24000710
 8000dac:	2400062c 	.word	0x2400062c

08000db0 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b087      	sub	sp, #28
 8000db4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000db6:	4b28      	ldr	r3, [pc, #160]	@ (8000e58 <MX_GPIO_Init+0xa8>)
 8000db8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dbc:	4a26      	ldr	r2, [pc, #152]	@ (8000e58 <MX_GPIO_Init+0xa8>)
 8000dbe:	f043 0304 	orr.w	r3, r3, #4
 8000dc2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000dc6:	4b24      	ldr	r3, [pc, #144]	@ (8000e58 <MX_GPIO_Init+0xa8>)
 8000dc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dcc:	f003 0304 	and.w	r3, r3, #4
 8000dd0:	617b      	str	r3, [r7, #20]
 8000dd2:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dd4:	4b20      	ldr	r3, [pc, #128]	@ (8000e58 <MX_GPIO_Init+0xa8>)
 8000dd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dda:	4a1f      	ldr	r2, [pc, #124]	@ (8000e58 <MX_GPIO_Init+0xa8>)
 8000ddc:	f043 0301 	orr.w	r3, r3, #1
 8000de0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000de4:	4b1c      	ldr	r3, [pc, #112]	@ (8000e58 <MX_GPIO_Init+0xa8>)
 8000de6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dea:	f003 0301 	and.w	r3, r3, #1
 8000dee:	613b      	str	r3, [r7, #16]
 8000df0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000df2:	4b19      	ldr	r3, [pc, #100]	@ (8000e58 <MX_GPIO_Init+0xa8>)
 8000df4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000df8:	4a17      	ldr	r2, [pc, #92]	@ (8000e58 <MX_GPIO_Init+0xa8>)
 8000dfa:	f043 0310 	orr.w	r3, r3, #16
 8000dfe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e02:	4b15      	ldr	r3, [pc, #84]	@ (8000e58 <MX_GPIO_Init+0xa8>)
 8000e04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e08:	f003 0310 	and.w	r3, r3, #16
 8000e0c:	60fb      	str	r3, [r7, #12]
 8000e0e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e10:	4b11      	ldr	r3, [pc, #68]	@ (8000e58 <MX_GPIO_Init+0xa8>)
 8000e12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e16:	4a10      	ldr	r2, [pc, #64]	@ (8000e58 <MX_GPIO_Init+0xa8>)
 8000e18:	f043 0308 	orr.w	r3, r3, #8
 8000e1c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e20:	4b0d      	ldr	r3, [pc, #52]	@ (8000e58 <MX_GPIO_Init+0xa8>)
 8000e22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e26:	f003 0308 	and.w	r3, r3, #8
 8000e2a:	60bb      	str	r3, [r7, #8]
 8000e2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e2e:	4b0a      	ldr	r3, [pc, #40]	@ (8000e58 <MX_GPIO_Init+0xa8>)
 8000e30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e34:	4a08      	ldr	r2, [pc, #32]	@ (8000e58 <MX_GPIO_Init+0xa8>)
 8000e36:	f043 0302 	orr.w	r3, r3, #2
 8000e3a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e3e:	4b06      	ldr	r3, [pc, #24]	@ (8000e58 <MX_GPIO_Init+0xa8>)
 8000e40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e44:	f003 0302 	and.w	r3, r3, #2
 8000e48:	607b      	str	r3, [r7, #4]
 8000e4a:	687b      	ldr	r3, [r7, #4]

}
 8000e4c:	bf00      	nop
 8000e4e:	371c      	adds	r7, #28
 8000e50:	46bd      	mov	sp, r7
 8000e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e56:	4770      	bx	lr
 8000e58:	58024400 	.word	0x58024400

08000e5c <get_M4>:
	}
	return res;
}

void  get_M4(int *data) // get data from M4 to M7 buffer
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b085      	sub	sp, #20
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
	if (xfr_ptr->sts_4to7 == 1) // if M4 to M7 buffer has data
 8000e64:	4b14      	ldr	r3, [pc, #80]	@ (8000eb8 <get_M4+0x5c>)
 8000e66:	781b      	ldrb	r3, [r3, #0]
 8000e68:	b2db      	uxtb	r3, r3
 8000e6a:	2b01      	cmp	r3, #1
 8000e6c:	d11e      	bne.n	8000eac <get_M4+0x50>
	{
		xfr_ptr->sts_4to7 = 2; // lock the M4 to M7 buffer
 8000e6e:	4b12      	ldr	r3, [pc, #72]	@ (8000eb8 <get_M4+0x5c>)
 8000e70:	2202      	movs	r2, #2
 8000e72:	701a      	strb	r2, [r3, #0]
		for(int n = 0; n < 6; n++)
 8000e74:	2300      	movs	r3, #0
 8000e76:	60fb      	str	r3, [r7, #12]
 8000e78:	e012      	b.n	8000ea0 <get_M4+0x44>
		{
			data[n] = xfr_ptr->M4toM7[n]; // transfer data
 8000e7a:	490f      	ldr	r1, [pc, #60]	@ (8000eb8 <get_M4+0x5c>)
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	009b      	lsls	r3, r3, #2
 8000e80:	687a      	ldr	r2, [r7, #4]
 8000e82:	441a      	add	r2, r3
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	009b      	lsls	r3, r3, #2
 8000e88:	440b      	add	r3, r1
 8000e8a:	685b      	ldr	r3, [r3, #4]
 8000e8c:	6013      	str	r3, [r2, #0]
			xfr_ptr->M4toM7[n] = 0; // clear M4 to M7 buffer
 8000e8e:	4a0a      	ldr	r2, [pc, #40]	@ (8000eb8 <get_M4+0x5c>)
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	009b      	lsls	r3, r3, #2
 8000e94:	4413      	add	r3, r2
 8000e96:	2200      	movs	r2, #0
 8000e98:	605a      	str	r2, [r3, #4]
		for(int n = 0; n < 6; n++)
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	3301      	adds	r3, #1
 8000e9e:	60fb      	str	r3, [r7, #12]
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	2b05      	cmp	r3, #5
 8000ea4:	dde9      	ble.n	8000e7a <get_M4+0x1e>
		}
		xfr_ptr->sts_4to7 = 0; // M4 to M7 buffer is empty
 8000ea6:	4b04      	ldr	r3, [pc, #16]	@ (8000eb8 <get_M4+0x5c>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	701a      	strb	r2, [r3, #0]
	}
	// return the buffer (pointer)
}
 8000eac:	bf00      	nop
 8000eae:	3714      	adds	r7, #20
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb6:	4770      	bx	lr
 8000eb8:	38001000 	.word	0x38001000

08000ebc <HAL_TIM_IC_CaptureCallback>:
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8000ebc:	b480      	push	{r7}
 8000ebe:	b083      	sub	sp, #12
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
	contador = __HAL_TIM_GET_COUNTER(&htim4);
 8000ec4:	4b05      	ldr	r3, [pc, #20]	@ (8000edc <HAL_TIM_IC_CaptureCallback+0x20>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000eca:	4a05      	ldr	r2, [pc, #20]	@ (8000ee0 <HAL_TIM_IC_CaptureCallback+0x24>)
 8000ecc:	6013      	str	r3, [r2, #0]
}
 8000ece:	bf00      	nop
 8000ed0:	370c      	adds	r7, #12
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop
 8000edc:	240006c4 	.word	0x240006c4
 8000ee0:	240004c8 	.word	0x240004c8
 8000ee4:	00000000 	.word	0x00000000

08000ee8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b0a6      	sub	sp, #152	@ 0x98
 8000eec:	af06      	add	r7, sp, #24
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000eee:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000ef2:	67fb      	str	r3, [r7, #124]	@ 0x7c
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000ef4:	bf00      	nop
 8000ef6:	4ba6      	ldr	r3, [pc, #664]	@ (8001190 <main+0x2a8>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d004      	beq.n	8000f0c <main+0x24>
 8000f02:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000f04:	1e5a      	subs	r2, r3, #1
 8000f06:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	dcf4      	bgt.n	8000ef6 <main+0xe>
  if ( timeout < 0 )
 8000f0c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	da01      	bge.n	8000f16 <main+0x2e>
  {
  Error_Handler();
 8000f12:	f000 fa0e 	bl	8001332 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f16:	f001 fdd5 	bl	8002ac4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f1a:	f000 f957 	bl	80011cc <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000f1e:	f000 f9d5 	bl	80012cc <PeriphCommonClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000f22:	4b9b      	ldr	r3, [pc, #620]	@ (8001190 <main+0x2a8>)
 8000f24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f28:	4a99      	ldr	r2, [pc, #612]	@ (8001190 <main+0x2a8>)
 8000f2a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000f2e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f32:	4b97      	ldr	r3, [pc, #604]	@ (8001190 <main+0x2a8>)
 8000f34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f38:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000f3c:	607b      	str	r3, [r7, #4]
 8000f3e:	687b      	ldr	r3, [r7, #4]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000f40:	2000      	movs	r0, #0
 8000f42:	f005 fe17 	bl	8006b74 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000f46:	2100      	movs	r1, #0
 8000f48:	2000      	movs	r0, #0
 8000f4a:	f005 fe2d 	bl	8006ba8 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000f4e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000f52:	67fb      	str	r3, [r7, #124]	@ 0x7c
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000f54:	bf00      	nop
 8000f56:	4b8e      	ldr	r3, [pc, #568]	@ (8001190 <main+0x2a8>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d104      	bne.n	8000f6c <main+0x84>
 8000f62:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000f64:	1e5a      	subs	r2, r3, #1
 8000f66:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	dcf4      	bgt.n	8000f56 <main+0x6e>
if ( timeout < 0 )
 8000f6c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	da01      	bge.n	8000f76 <main+0x8e>
{
Error_Handler();
 8000f72:	f000 f9de 	bl	8001332 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f76:	f7ff ff1b 	bl	8000db0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f7a:	f7ff fcd7 	bl	800092c <MX_DMA_Init>
  MX_TIM2_Init();
 8000f7e:	f000 fec3 	bl	8001d08 <MX_TIM2_Init>
  MX_TIM5_Init();
 8000f82:	f000 ffd1 	bl	8001f28 <MX_TIM5_Init>
  MX_TIM3_Init();
 8000f86:	f000 ff23 	bl	8001dd0 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000f8a:	f000 ff77 	bl	8001e7c <MX_TIM4_Init>
  MX_USB_DEVICE_Init();
 8000f8e:	f010 fd7d 	bl	8011a8c <MX_USB_DEVICE_Init>
  MX_TIM1_Init();
 8000f92:	f000 fe5f 	bl	8001c54 <MX_TIM1_Init>
  MX_TIM8_Init();
 8000f96:	f001 f82b 	bl	8001ff0 <MX_TIM8_Init>
  MX_TIM15_Init();
 8000f9a:	f001 f883 	bl	80020a4 <MX_TIM15_Init>
  MX_ADC1_Init();
 8000f9e:	f7ff fc05 	bl	80007ac <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Encoder_Start_IT(&htim4, TIM_CHANNEL_ALL);
 8000fa2:	213c      	movs	r1, #60	@ 0x3c
 8000fa4:	487b      	ldr	r0, [pc, #492]	@ (8001194 <main+0x2ac>)
 8000fa6:	f00b f8db 	bl	800c160 <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim1, TIM_CHANNEL_ALL);
 8000faa:	213c      	movs	r1, #60	@ 0x3c
 8000fac:	487a      	ldr	r0, [pc, #488]	@ (8001198 <main+0x2b0>)
 8000fae:	f00b f8d7 	bl	800c160 <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim8, TIM_CHANNEL_ALL);
 8000fb2:	213c      	movs	r1, #60	@ 0x3c
 8000fb4:	4879      	ldr	r0, [pc, #484]	@ (800119c <main+0x2b4>)
 8000fb6:	f00b f8d3 	bl	800c160 <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim3, TIM_CHANNEL_ALL);
 8000fba:	213c      	movs	r1, #60	@ 0x3c
 8000fbc:	4878      	ldr	r0, [pc, #480]	@ (80011a0 <main+0x2b8>)
 8000fbe:	f00b f8cf 	bl	800c160 <HAL_TIM_Encoder_Start_IT>
	uint8_t * xfr_data; // pointer to transfer data


	//initialize inter-core status pointers
	xfr_ptr->sts_4to7 = 0;
 8000fc2:	4b78      	ldr	r3, [pc, #480]	@ (80011a4 <main+0x2bc>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	701a      	strb	r2, [r3, #0]
	xfr_ptr->sts_7to4 = 0;
 8000fc8:	4b76      	ldr	r3, [pc, #472]	@ (80011a4 <main+0x2bc>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	705a      	strb	r2, [r3, #1]


	  if (HAL_TIM_Base_Start_IT(&htim15) != HAL_OK)
 8000fce:	4876      	ldr	r0, [pc, #472]	@ (80011a8 <main+0x2c0>)
 8000fd0:	f00a fe42 	bl	800bc58 <HAL_TIM_Base_Start_IT>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d001      	beq.n	8000fde <main+0xf6>
	    {
	      /* Starting Error */
	      Error_Handler();
 8000fda:	f000 f9aa 	bl	8001332 <Error_Handler>
	    }
	  dshot_init(DSHOT300);
 8000fde:	2001      	movs	r0, #1
 8000fe0:	f7ff fcdc 	bl	800099c <dshot_init>
  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 8000fe4:	2000      	movs	r0, #0
 8000fe6:	f001 fb89 	bl	80026fc <BSP_LED_Init>
  BSP_LED_Init(LED_YELLOW);
 8000fea:	2001      	movs	r0, #1
 8000fec:	f001 fb86 	bl	80026fc <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 8000ff0:	2002      	movs	r0, #2
 8000ff2:	f001 fb83 	bl	80026fc <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8000ff6:	2101      	movs	r1, #1
 8000ff8:	2000      	movs	r0, #0
 8000ffa:	f001 fbf5 	bl	80027e8 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 8000ffe:	4b6b      	ldr	r3, [pc, #428]	@ (80011ac <main+0x2c4>)
 8001000:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001004:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 8001006:	4b69      	ldr	r3, [pc, #420]	@ (80011ac <main+0x2c4>)
 8001008:	2200      	movs	r2, #0
 800100a:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 800100c:	4b67      	ldr	r3, [pc, #412]	@ (80011ac <main+0x2c4>)
 800100e:	2200      	movs	r2, #0
 8001010:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 8001012:	4b66      	ldr	r3, [pc, #408]	@ (80011ac <main+0x2c4>)
 8001014:	2200      	movs	r2, #0
 8001016:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8001018:	4b64      	ldr	r3, [pc, #400]	@ (80011ac <main+0x2c4>)
 800101a:	2200      	movs	r2, #0
 800101c:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 800101e:	4963      	ldr	r1, [pc, #396]	@ (80011ac <main+0x2c4>)
 8001020:	2000      	movs	r0, #0
 8001022:	f001 fc71 	bl	8002908 <BSP_COM_Init>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d001      	beq.n	8001030 <main+0x148>
  {
    Error_Handler();
 800102c:	f000 f981 	bl	8001332 <Error_Handler>
  }

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  char message[100]={'\0'};
 8001030:	2300      	movs	r3, #0
 8001032:	60bb      	str	r3, [r7, #8]
 8001034:	f107 030c 	add.w	r3, r7, #12
 8001038:	2260      	movs	r2, #96	@ 0x60
 800103a:	2100      	movs	r1, #0
 800103c:	4618      	mov	r0, r3
 800103e:	f011 ffd0 	bl	8012fe2 <memset>
  //Inicializa referencia como zero
  HAL_Delay(7000);
 8001042:	f641 3058 	movw	r0, #7000	@ 0x1b58
 8001046:	f001 fdcf 	bl	8002be8 <HAL_Delay>

  uint32_t Leitura= 0;
 800104a:	2300      	movs	r3, #0
 800104c:	673b      	str	r3, [r7, #112]	@ 0x70
  float Leitura2 = 0;
 800104e:	f04f 0300 	mov.w	r3, #0
 8001052:	66fb      	str	r3, [r7, #108]	@ 0x6c
  extern volatile float speed[4];
  extern volatile float u[4];
  extern volatile float error[4];
  uint32_t contador = 0;
 8001054:	2300      	movs	r3, #0
 8001056:	67bb      	str	r3, [r7, #120]	@ 0x78
  while (1)
  {

	      //comunicacao entre cores
	  	  if (xfr_ptr->sts_4to7 == 1)
 8001058:	4b52      	ldr	r3, [pc, #328]	@ (80011a4 <main+0x2bc>)
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	b2db      	uxtb	r3, r3
 800105e:	2b01      	cmp	r3, #1
 8001060:	d102      	bne.n	8001068 <main+0x180>
	  	  {
	  		 get_M4(new_mensagem); // get data sent from M4 to M7
 8001062:	4853      	ldr	r0, [pc, #332]	@ (80011b0 <main+0x2c8>)
 8001064:	f7ff fefa 	bl	8000e5c <get_M4>
	  	  }

	  	  //validacao da mensagem, utilizamos 111 como um ID de inicio e 112 de final

	  	  if((new_mensagem[0]==111)&&(new_mensagem[5]==112)){
 8001068:	4b51      	ldr	r3, [pc, #324]	@ (80011b0 <main+0x2c8>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	2b6f      	cmp	r3, #111	@ 0x6f
 800106e:	d11a      	bne.n	80010a6 <main+0x1be>
 8001070:	4b4f      	ldr	r3, [pc, #316]	@ (80011b0 <main+0x2c8>)
 8001072:	695b      	ldr	r3, [r3, #20]
 8001074:	2b70      	cmp	r3, #112	@ 0x70
 8001076:	d116      	bne.n	80010a6 <main+0x1be>
	  		for(uint8_t n=0;n<6;n++){
 8001078:	2300      	movs	r3, #0
 800107a:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 800107e:	e00e      	b.n	800109e <main+0x1b6>
	  		  old_mensagem[n] = new_mensagem[n];
 8001080:	f897 2077 	ldrb.w	r2, [r7, #119]	@ 0x77
 8001084:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8001088:	4949      	ldr	r1, [pc, #292]	@ (80011b0 <main+0x2c8>)
 800108a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800108e:	4949      	ldr	r1, [pc, #292]	@ (80011b4 <main+0x2cc>)
 8001090:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	  		for(uint8_t n=0;n<6;n++){
 8001094:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8001098:	3301      	adds	r3, #1
 800109a:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 800109e:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80010a2:	2b05      	cmp	r3, #5
 80010a4:	d9ec      	bls.n	8001080 <main+0x198>
	  		}
	  	  }

	  	  for(uint8_t n=0; n<4;n++){
 80010a6:	2300      	movs	r3, #0
 80010a8:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
 80010ac:	e019      	b.n	80010e2 <main+0x1fa>
	  		 ref[n] = (float)old_mensagem[n+1]/100;
 80010ae:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 80010b2:	3301      	adds	r3, #1
 80010b4:	4a3f      	ldr	r2, [pc, #252]	@ (80011b4 <main+0x2cc>)
 80010b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010ba:	ee07 3a90 	vmov	s15, r3
 80010be:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80010c2:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 80010c6:	eddf 6a3c 	vldr	s13, [pc, #240]	@ 80011b8 <main+0x2d0>
 80010ca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010ce:	4a3b      	ldr	r2, [pc, #236]	@ (80011bc <main+0x2d4>)
 80010d0:	009b      	lsls	r3, r3, #2
 80010d2:	4413      	add	r3, r2
 80010d4:	edc3 7a00 	vstr	s15, [r3]
	  	  for(uint8_t n=0; n<4;n++){
 80010d8:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 80010dc:	3301      	adds	r3, #1
 80010de:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
 80010e2:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 80010e6:	2b03      	cmp	r3, #3
 80010e8:	d9e1      	bls.n	80010ae <main+0x1c6>
	  	for(uint8_t n=0; n<4;n++){
	  		ref[n] =2;
	  	}
	  	   */
	  	  //print para o puttyW
	  	  sprintf(message, "%f %f %f %f\n \r",speed[0],speed[1],speed[2],speed[3]);
 80010ea:	4b35      	ldr	r3, [pc, #212]	@ (80011c0 <main+0x2d8>)
 80010ec:	edd3 7a00 	vldr	s15, [r3]
 80010f0:	eeb7 4ae7 	vcvt.f64.f32	d4, s15
 80010f4:	4b32      	ldr	r3, [pc, #200]	@ (80011c0 <main+0x2d8>)
 80010f6:	edd3 7a01 	vldr	s15, [r3, #4]
 80010fa:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80010fe:	4b30      	ldr	r3, [pc, #192]	@ (80011c0 <main+0x2d8>)
 8001100:	edd3 6a02 	vldr	s13, [r3, #8]
 8001104:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8001108:	4b2d      	ldr	r3, [pc, #180]	@ (80011c0 <main+0x2d8>)
 800110a:	edd3 5a03 	vldr	s11, [r3, #12]
 800110e:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
 8001112:	f107 0008 	add.w	r0, r7, #8
 8001116:	ed8d 5b04 	vstr	d5, [sp, #16]
 800111a:	ed8d 6b02 	vstr	d6, [sp, #8]
 800111e:	ed8d 7b00 	vstr	d7, [sp]
 8001122:	ec53 2b14 	vmov	r2, r3, d4
 8001126:	4927      	ldr	r1, [pc, #156]	@ (80011c4 <main+0x2dc>)
 8001128:	f011 fef8 	bl	8012f1c <siprintf>
	  	  CDC_Transmit_FS(message,sizeof(message));
 800112c:	f107 0308 	add.w	r3, r7, #8
 8001130:	2164      	movs	r1, #100	@ 0x64
 8001132:	4618      	mov	r0, r3
 8001134:	f010 fd6a 	bl	8011c0c <CDC_Transmit_FS>

	  	  //Iniciar ADC

	  	  HAL_ADC_Start(&hadc1);
 8001138:	4823      	ldr	r0, [pc, #140]	@ (80011c8 <main+0x2e0>)
 800113a:	f002 f909 	bl	8003350 <HAL_ADC_Start>
	  	  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 800113e:	f04f 31ff 	mov.w	r1, #4294967295
 8001142:	4821      	ldr	r0, [pc, #132]	@ (80011c8 <main+0x2e0>)
 8001144:	f002 f9ce 	bl	80034e4 <HAL_ADC_PollForConversion>
	  	  Leitura = HAL_ADC_GetValue(&hadc1);
 8001148:	481f      	ldr	r0, [pc, #124]	@ (80011c8 <main+0x2e0>)
 800114a:	f002 fabf 	bl	80036cc <HAL_ADC_GetValue>
 800114e:	6738      	str	r0, [r7, #112]	@ 0x70
	  	  Leitura2 = (Leitura*3.3)/65535;
 8001150:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001152:	ee07 3a90 	vmov	s15, r3
 8001156:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800115a:	ed9f 6b09 	vldr	d6, [pc, #36]	@ 8001180 <main+0x298>
 800115e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001162:	ed9f 5b09 	vldr	d5, [pc, #36]	@ 8001188 <main+0x2a0>
 8001166:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800116a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800116e:	edc7 7a1b 	vstr	s15, [r7, #108]	@ 0x6c

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	contador++;
 8001172:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001174:	3301      	adds	r3, #1
 8001176:	67bb      	str	r3, [r7, #120]	@ 0x78
	HAL_Delay(5);
 8001178:	2005      	movs	r0, #5
 800117a:	f001 fd35 	bl	8002be8 <HAL_Delay>
  {
 800117e:	e76b      	b.n	8001058 <main+0x170>
 8001180:	66666666 	.word	0x66666666
 8001184:	400a6666 	.word	0x400a6666
 8001188:	00000000 	.word	0x00000000
 800118c:	40efffe0 	.word	0x40efffe0
 8001190:	58024400 	.word	0x58024400
 8001194:	240006c4 	.word	0x240006c4
 8001198:	240005e0 	.word	0x240005e0
 800119c:	2400075c 	.word	0x2400075c
 80011a0:	24000678 	.word	0x24000678
 80011a4:	38001000 	.word	0x38001000
 80011a8:	240007a8 	.word	0x240007a8
 80011ac:	24000488 	.word	0x24000488
 80011b0:	24000498 	.word	0x24000498
 80011b4:	240004b0 	.word	0x240004b0
 80011b8:	42c80000 	.word	0x42c80000
 80011bc:	240004cc 	.word	0x240004cc
 80011c0:	24000518 	.word	0x24000518
 80011c4:	08015138 	.word	0x08015138
 80011c8:	24000304 	.word	0x24000304

080011cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b09c      	sub	sp, #112	@ 0x70
 80011d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011d2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011d6:	224c      	movs	r2, #76	@ 0x4c
 80011d8:	2100      	movs	r1, #0
 80011da:	4618      	mov	r0, r3
 80011dc:	f011 ff01 	bl	8012fe2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011e0:	1d3b      	adds	r3, r7, #4
 80011e2:	2220      	movs	r2, #32
 80011e4:	2100      	movs	r1, #0
 80011e6:	4618      	mov	r0, r3
 80011e8:	f011 fefb 	bl	8012fe2 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80011ec:	2004      	movs	r0, #4
 80011ee:	f006 ff8d 	bl	800810c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80011f2:	2300      	movs	r3, #0
 80011f4:	603b      	str	r3, [r7, #0]
 80011f6:	4b33      	ldr	r3, [pc, #204]	@ (80012c4 <SystemClock_Config+0xf8>)
 80011f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011fa:	4a32      	ldr	r2, [pc, #200]	@ (80012c4 <SystemClock_Config+0xf8>)
 80011fc:	f023 0301 	bic.w	r3, r3, #1
 8001200:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8001202:	4b30      	ldr	r3, [pc, #192]	@ (80012c4 <SystemClock_Config+0xf8>)
 8001204:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001206:	f003 0301 	and.w	r3, r3, #1
 800120a:	603b      	str	r3, [r7, #0]
 800120c:	4b2e      	ldr	r3, [pc, #184]	@ (80012c8 <SystemClock_Config+0xfc>)
 800120e:	699b      	ldr	r3, [r3, #24]
 8001210:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001214:	4a2c      	ldr	r2, [pc, #176]	@ (80012c8 <SystemClock_Config+0xfc>)
 8001216:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800121a:	6193      	str	r3, [r2, #24]
 800121c:	4b2a      	ldr	r3, [pc, #168]	@ (80012c8 <SystemClock_Config+0xfc>)
 800121e:	699b      	ldr	r3, [r3, #24]
 8001220:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001224:	603b      	str	r3, [r7, #0]
 8001226:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001228:	bf00      	nop
 800122a:	4b27      	ldr	r3, [pc, #156]	@ (80012c8 <SystemClock_Config+0xfc>)
 800122c:	699b      	ldr	r3, [r3, #24]
 800122e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001232:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001236:	d1f8      	bne.n	800122a <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 8001238:	2322      	movs	r3, #34	@ 0x22
 800123a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800123c:	2301      	movs	r3, #1
 800123e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001240:	2340      	movs	r3, #64	@ 0x40
 8001242:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001244:	2301      	movs	r3, #1
 8001246:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001248:	2302      	movs	r3, #2
 800124a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800124c:	2300      	movs	r3, #0
 800124e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001250:	2304      	movs	r3, #4
 8001252:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 25;
 8001254:	2319      	movs	r3, #25
 8001256:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001258:	2302      	movs	r3, #2
 800125a:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 5;
 800125c:	2305      	movs	r3, #5
 800125e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001260:	2302      	movs	r3, #2
 8001262:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001264:	230c      	movs	r3, #12
 8001266:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001268:	2300      	movs	r3, #0
 800126a:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800126c:	2300      	movs	r3, #0
 800126e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001270:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001274:	4618      	mov	r0, r3
 8001276:	f006 ffb3 	bl	80081e0 <HAL_RCC_OscConfig>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d001      	beq.n	8001284 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8001280:	f000 f857 	bl	8001332 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001284:	233f      	movs	r3, #63	@ 0x3f
 8001286:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001288:	2303      	movs	r3, #3
 800128a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800128c:	2300      	movs	r3, #0
 800128e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001290:	2300      	movs	r3, #0
 8001292:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001294:	2340      	movs	r3, #64	@ 0x40
 8001296:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001298:	2340      	movs	r3, #64	@ 0x40
 800129a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800129c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80012a0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80012a2:	2340      	movs	r3, #64	@ 0x40
 80012a4:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80012a6:	1d3b      	adds	r3, r7, #4
 80012a8:	2104      	movs	r1, #4
 80012aa:	4618      	mov	r0, r3
 80012ac:	f007 fbf2 	bl	8008a94 <HAL_RCC_ClockConfig>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d001      	beq.n	80012ba <SystemClock_Config+0xee>
  {
    Error_Handler();
 80012b6:	f000 f83c 	bl	8001332 <Error_Handler>
  }
}
 80012ba:	bf00      	nop
 80012bc:	3770      	adds	r7, #112	@ 0x70
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	58000400 	.word	0x58000400
 80012c8:	58024800 	.word	0x58024800

080012cc <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b0b0      	sub	sp, #192	@ 0xc0
 80012d0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012d2:	463b      	mov	r3, r7
 80012d4:	22c0      	movs	r2, #192	@ 0xc0
 80012d6:	2100      	movs	r1, #0
 80012d8:	4618      	mov	r0, r3
 80012da:	f011 fe82 	bl	8012fe2 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_SPI1;
 80012de:	f44f 2201 	mov.w	r2, #528384	@ 0x81000
 80012e2:	f04f 0300 	mov.w	r3, #0
 80012e6:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 80012ea:	2304      	movs	r3, #4
 80012ec:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 9;
 80012ee:	2309      	movs	r3, #9
 80012f0:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 80012f2:	2302      	movs	r3, #2
 80012f4:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80012f6:	2302      	movs	r3, #2
 80012f8:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80012fa:	2302      	movs	r3, #2
 80012fc:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80012fe:	23c0      	movs	r3, #192	@ 0xc0
 8001300:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8001302:	2320      	movs	r3, #32
 8001304:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 3072;
 8001306:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800130a:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 800130c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001310:	663b      	str	r3, [r7, #96]	@ 0x60
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001312:	2300      	movs	r3, #0
 8001314:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001318:	463b      	mov	r3, r7
 800131a:	4618      	mov	r0, r3
 800131c:	f007 ff46 	bl	80091ac <HAL_RCCEx_PeriphCLKConfig>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d001      	beq.n	800132a <PeriphCommonClock_Config+0x5e>
  {
    Error_Handler();
 8001326:	f000 f804 	bl	8001332 <Error_Handler>
  }
}
 800132a:	bf00      	nop
 800132c:	37c0      	adds	r7, #192	@ 0xc0
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}

08001332 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001332:	b480      	push	{r7}
 8001334:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001336:	b672      	cpsid	i
}
 8001338:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800133a:	bf00      	nop
 800133c:	e7fd      	b.n	800133a <Error_Handler+0x8>
	...

08001340 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001340:	b480      	push	{r7}
 8001342:	b083      	sub	sp, #12
 8001344:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001346:	4b0a      	ldr	r3, [pc, #40]	@ (8001370 <HAL_MspInit+0x30>)
 8001348:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800134c:	4a08      	ldr	r2, [pc, #32]	@ (8001370 <HAL_MspInit+0x30>)
 800134e:	f043 0302 	orr.w	r3, r3, #2
 8001352:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001356:	4b06      	ldr	r3, [pc, #24]	@ (8001370 <HAL_MspInit+0x30>)
 8001358:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800135c:	f003 0302 	and.w	r3, r3, #2
 8001360:	607b      	str	r3, [r7, #4]
 8001362:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001364:	bf00      	nop
 8001366:	370c      	adds	r7, #12
 8001368:	46bd      	mov	sp, r7
 800136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136e:	4770      	bx	lr
 8001370:	58024400 	.word	0x58024400

08001374 <map>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

//Função de mapeamento
uint16_t map(float x, int in_min, int in_max, int out_min, int out_max) {
 8001374:	b480      	push	{r7}
 8001376:	b087      	sub	sp, #28
 8001378:	af00      	add	r7, sp, #0
 800137a:	ed87 0a05 	vstr	s0, [r7, #20]
 800137e:	6138      	str	r0, [r7, #16]
 8001380:	60f9      	str	r1, [r7, #12]
 8001382:	60ba      	str	r2, [r7, #8]
 8001384:	607b      	str	r3, [r7, #4]
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8001386:	693b      	ldr	r3, [r7, #16]
 8001388:	ee07 3a90 	vmov	s15, r3
 800138c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001390:	ed97 7a05 	vldr	s14, [r7, #20]
 8001394:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001398:	687a      	ldr	r2, [r7, #4]
 800139a:	68bb      	ldr	r3, [r7, #8]
 800139c:	1ad3      	subs	r3, r2, r3
 800139e:	ee07 3a90 	vmov	s15, r3
 80013a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013a6:	ee67 6a27 	vmul.f32	s13, s14, s15
 80013aa:	68fa      	ldr	r2, [r7, #12]
 80013ac:	693b      	ldr	r3, [r7, #16]
 80013ae:	1ad3      	subs	r3, r2, r3
 80013b0:	ee07 3a90 	vmov	s15, r3
 80013b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013b8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80013bc:	68bb      	ldr	r3, [r7, #8]
 80013be:	ee07 3a90 	vmov	s15, r3
 80013c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80013ce:	ee17 3a90 	vmov	r3, s15
 80013d2:	b29b      	uxth	r3, r3
}
 80013d4:	4618      	mov	r0, r3
 80013d6:	371c      	adds	r7, #28
 80013d8:	46bd      	mov	sp, r7
 80013da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013de:	4770      	bx	lr

080013e0 <Controle>:

void Controle(){
 80013e0:	b590      	push	{r4, r7, lr}
 80013e2:	b083      	sub	sp, #12
 80013e4:	af00      	add	r7, sp, #0
	for(uint8_t n=0;n<4;n++){
 80013e6:	2300      	movs	r3, #0
 80013e8:	71fb      	strb	r3, [r7, #7]
 80013ea:	e227      	b.n	800183c <Controle+0x45c>
		if(once ==0){
 80013ec:	4bc2      	ldr	r3, [pc, #776]	@ (80016f8 <Controle+0x318>)
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	f040 80c4 	bne.w	800157e <Controle+0x19e>
			q0[n] = Kc[n] + Kd[n]/0.01 +Ki[n]*0.01;
 80013f6:	79fb      	ldrb	r3, [r7, #7]
 80013f8:	4ac0      	ldr	r2, [pc, #768]	@ (80016fc <Controle+0x31c>)
 80013fa:	009b      	lsls	r3, r3, #2
 80013fc:	4413      	add	r3, r2
 80013fe:	edd3 7a00 	vldr	s15, [r3]
 8001402:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001406:	79fb      	ldrb	r3, [r7, #7]
 8001408:	4abd      	ldr	r2, [pc, #756]	@ (8001700 <Controle+0x320>)
 800140a:	009b      	lsls	r3, r3, #2
 800140c:	4413      	add	r3, r2
 800140e:	edd3 7a00 	vldr	s15, [r3]
 8001412:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8001416:	ed9f 4bb6 	vldr	d4, [pc, #728]	@ 80016f0 <Controle+0x310>
 800141a:	ee85 7b04 	vdiv.f64	d7, d5, d4
 800141e:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001422:	79fb      	ldrb	r3, [r7, #7]
 8001424:	4ab7      	ldr	r2, [pc, #732]	@ (8001704 <Controle+0x324>)
 8001426:	009b      	lsls	r3, r3, #2
 8001428:	4413      	add	r3, r2
 800142a:	edd3 7a00 	vldr	s15, [r3]
 800142e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001432:	ed9f 5baf 	vldr	d5, [pc, #700]	@ 80016f0 <Controle+0x310>
 8001436:	ee27 7b05 	vmul.f64	d7, d7, d5
 800143a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800143e:	79fb      	ldrb	r3, [r7, #7]
 8001440:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001444:	4ab0      	ldr	r2, [pc, #704]	@ (8001708 <Controle+0x328>)
 8001446:	009b      	lsls	r3, r3, #2
 8001448:	4413      	add	r3, r2
 800144a:	edc3 7a00 	vstr	s15, [r3]
			q1[n] = -Kc[n] - 2*Kd[n]/0.01;
 800144e:	79fb      	ldrb	r3, [r7, #7]
 8001450:	4aaa      	ldr	r2, [pc, #680]	@ (80016fc <Controle+0x31c>)
 8001452:	009b      	lsls	r3, r3, #2
 8001454:	4413      	add	r3, r2
 8001456:	edd3 7a00 	vldr	s15, [r3]
 800145a:	eef1 7a67 	vneg.f32	s15, s15
 800145e:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001462:	79fb      	ldrb	r3, [r7, #7]
 8001464:	4aa6      	ldr	r2, [pc, #664]	@ (8001700 <Controle+0x320>)
 8001466:	009b      	lsls	r3, r3, #2
 8001468:	4413      	add	r3, r2
 800146a:	edd3 7a00 	vldr	s15, [r3]
 800146e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001472:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8001476:	ed9f 4b9e 	vldr	d4, [pc, #632]	@ 80016f0 <Controle+0x310>
 800147a:	ee85 7b04 	vdiv.f64	d7, d5, d4
 800147e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001482:	79fb      	ldrb	r3, [r7, #7]
 8001484:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001488:	4aa0      	ldr	r2, [pc, #640]	@ (800170c <Controle+0x32c>)
 800148a:	009b      	lsls	r3, r3, #2
 800148c:	4413      	add	r3, r2
 800148e:	edc3 7a00 	vstr	s15, [r3]
			q2[n] = Kd[n]/0.01;
 8001492:	79fb      	ldrb	r3, [r7, #7]
 8001494:	4a9a      	ldr	r2, [pc, #616]	@ (8001700 <Controle+0x320>)
 8001496:	009b      	lsls	r3, r3, #2
 8001498:	4413      	add	r3, r2
 800149a:	edd3 7a00 	vldr	s15, [r3]
 800149e:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80014a2:	ed9f 5b93 	vldr	d5, [pc, #588]	@ 80016f0 <Controle+0x310>
 80014a6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80014aa:	79fb      	ldrb	r3, [r7, #7]
 80014ac:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80014b0:	4a97      	ldr	r2, [pc, #604]	@ (8001710 <Controle+0x330>)
 80014b2:	009b      	lsls	r3, r3, #2
 80014b4:	4413      	add	r3, r2
 80014b6:	edc3 7a00 	vstr	s15, [r3]
			q0_t[n] = Kc_t[n] + Kd_t[n]/0.01 +Ki_t[n]*0.01;
 80014ba:	79fb      	ldrb	r3, [r7, #7]
 80014bc:	4a95      	ldr	r2, [pc, #596]	@ (8001714 <Controle+0x334>)
 80014be:	009b      	lsls	r3, r3, #2
 80014c0:	4413      	add	r3, r2
 80014c2:	edd3 7a00 	vldr	s15, [r3]
 80014c6:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80014ca:	79fb      	ldrb	r3, [r7, #7]
 80014cc:	4a92      	ldr	r2, [pc, #584]	@ (8001718 <Controle+0x338>)
 80014ce:	009b      	lsls	r3, r3, #2
 80014d0:	4413      	add	r3, r2
 80014d2:	edd3 7a00 	vldr	s15, [r3]
 80014d6:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 80014da:	ed9f 4b85 	vldr	d4, [pc, #532]	@ 80016f0 <Controle+0x310>
 80014de:	ee85 7b04 	vdiv.f64	d7, d5, d4
 80014e2:	ee36 6b07 	vadd.f64	d6, d6, d7
 80014e6:	79fb      	ldrb	r3, [r7, #7]
 80014e8:	4a8c      	ldr	r2, [pc, #560]	@ (800171c <Controle+0x33c>)
 80014ea:	009b      	lsls	r3, r3, #2
 80014ec:	4413      	add	r3, r2
 80014ee:	edd3 7a00 	vldr	s15, [r3]
 80014f2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80014f6:	ed9f 5b7e 	vldr	d5, [pc, #504]	@ 80016f0 <Controle+0x310>
 80014fa:	ee27 7b05 	vmul.f64	d7, d7, d5
 80014fe:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001502:	79fb      	ldrb	r3, [r7, #7]
 8001504:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001508:	4a85      	ldr	r2, [pc, #532]	@ (8001720 <Controle+0x340>)
 800150a:	009b      	lsls	r3, r3, #2
 800150c:	4413      	add	r3, r2
 800150e:	edc3 7a00 	vstr	s15, [r3]
			q1_t[n] = -Kc_t[n] - 2*Kd_t[n]/0.01;
 8001512:	79fb      	ldrb	r3, [r7, #7]
 8001514:	4a7f      	ldr	r2, [pc, #508]	@ (8001714 <Controle+0x334>)
 8001516:	009b      	lsls	r3, r3, #2
 8001518:	4413      	add	r3, r2
 800151a:	edd3 7a00 	vldr	s15, [r3]
 800151e:	eef1 7a67 	vneg.f32	s15, s15
 8001522:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001526:	79fb      	ldrb	r3, [r7, #7]
 8001528:	4a7b      	ldr	r2, [pc, #492]	@ (8001718 <Controle+0x338>)
 800152a:	009b      	lsls	r3, r3, #2
 800152c:	4413      	add	r3, r2
 800152e:	edd3 7a00 	vldr	s15, [r3]
 8001532:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001536:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 800153a:	ed9f 4b6d 	vldr	d4, [pc, #436]	@ 80016f0 <Controle+0x310>
 800153e:	ee85 7b04 	vdiv.f64	d7, d5, d4
 8001542:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001546:	79fb      	ldrb	r3, [r7, #7]
 8001548:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800154c:	4a75      	ldr	r2, [pc, #468]	@ (8001724 <Controle+0x344>)
 800154e:	009b      	lsls	r3, r3, #2
 8001550:	4413      	add	r3, r2
 8001552:	edc3 7a00 	vstr	s15, [r3]
			q2_t[n] = Kd_t[n]/0.01;
 8001556:	79fb      	ldrb	r3, [r7, #7]
 8001558:	4a6f      	ldr	r2, [pc, #444]	@ (8001718 <Controle+0x338>)
 800155a:	009b      	lsls	r3, r3, #2
 800155c:	4413      	add	r3, r2
 800155e:	edd3 7a00 	vldr	s15, [r3]
 8001562:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001566:	ed9f 5b62 	vldr	d5, [pc, #392]	@ 80016f0 <Controle+0x310>
 800156a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800156e:	79fb      	ldrb	r3, [r7, #7]
 8001570:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001574:	4a6c      	ldr	r2, [pc, #432]	@ (8001728 <Controle+0x348>)
 8001576:	009b      	lsls	r3, r3, #2
 8001578:	4413      	add	r3, r2
 800157a:	edc3 7a00 	vstr	s15, [r3]
		}
		//Calculo de erro
		error[n] =ref[n] -  speed[n];
 800157e:	79fb      	ldrb	r3, [r7, #7]
 8001580:	4a6a      	ldr	r2, [pc, #424]	@ (800172c <Controle+0x34c>)
 8001582:	009b      	lsls	r3, r3, #2
 8001584:	4413      	add	r3, r2
 8001586:	ed93 7a00 	vldr	s14, [r3]
 800158a:	79fb      	ldrb	r3, [r7, #7]
 800158c:	4a68      	ldr	r2, [pc, #416]	@ (8001730 <Controle+0x350>)
 800158e:	009b      	lsls	r3, r3, #2
 8001590:	4413      	add	r3, r2
 8001592:	edd3 7a00 	vldr	s15, [r3]
 8001596:	79fb      	ldrb	r3, [r7, #7]
 8001598:	ee77 7a67 	vsub.f32	s15, s14, s15
 800159c:	4a65      	ldr	r2, [pc, #404]	@ (8001734 <Controle+0x354>)
 800159e:	009b      	lsls	r3, r3, #2
 80015a0:	4413      	add	r3, r2
 80015a2:	edc3 7a00 	vstr	s15, [r3]
		//Variação da ação de controle para esta iteração
		//deltaU[n] = Kc*(error[n]- preverror[n]) + error[n]*Ki -Kd*(speed[n]-2*prevspeed[n] + prevspeed2[n]);
		if(ref>0){
			u[n] = u_k1[n] + q0[n]*error[n] +q1[n]*preverror[n] +q2[n]*preverror2[n];
 80015a6:	79fb      	ldrb	r3, [r7, #7]
 80015a8:	4a63      	ldr	r2, [pc, #396]	@ (8001738 <Controle+0x358>)
 80015aa:	009b      	lsls	r3, r3, #2
 80015ac:	4413      	add	r3, r2
 80015ae:	ed93 7a00 	vldr	s14, [r3]
 80015b2:	79fb      	ldrb	r3, [r7, #7]
 80015b4:	4a54      	ldr	r2, [pc, #336]	@ (8001708 <Controle+0x328>)
 80015b6:	009b      	lsls	r3, r3, #2
 80015b8:	4413      	add	r3, r2
 80015ba:	edd3 6a00 	vldr	s13, [r3]
 80015be:	79fb      	ldrb	r3, [r7, #7]
 80015c0:	4a5c      	ldr	r2, [pc, #368]	@ (8001734 <Controle+0x354>)
 80015c2:	009b      	lsls	r3, r3, #2
 80015c4:	4413      	add	r3, r2
 80015c6:	edd3 7a00 	vldr	s15, [r3]
 80015ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015ce:	ee37 7a27 	vadd.f32	s14, s14, s15
 80015d2:	79fb      	ldrb	r3, [r7, #7]
 80015d4:	4a4d      	ldr	r2, [pc, #308]	@ (800170c <Controle+0x32c>)
 80015d6:	009b      	lsls	r3, r3, #2
 80015d8:	4413      	add	r3, r2
 80015da:	edd3 6a00 	vldr	s13, [r3]
 80015de:	79fb      	ldrb	r3, [r7, #7]
 80015e0:	4a56      	ldr	r2, [pc, #344]	@ (800173c <Controle+0x35c>)
 80015e2:	009b      	lsls	r3, r3, #2
 80015e4:	4413      	add	r3, r2
 80015e6:	edd3 7a00 	vldr	s15, [r3]
 80015ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015ee:	ee37 7a27 	vadd.f32	s14, s14, s15
 80015f2:	79fb      	ldrb	r3, [r7, #7]
 80015f4:	4a46      	ldr	r2, [pc, #280]	@ (8001710 <Controle+0x330>)
 80015f6:	009b      	lsls	r3, r3, #2
 80015f8:	4413      	add	r3, r2
 80015fa:	edd3 6a00 	vldr	s13, [r3]
 80015fe:	79fb      	ldrb	r3, [r7, #7]
 8001600:	4a4f      	ldr	r2, [pc, #316]	@ (8001740 <Controle+0x360>)
 8001602:	009b      	lsls	r3, r3, #2
 8001604:	4413      	add	r3, r2
 8001606:	edd3 7a00 	vldr	s15, [r3]
 800160a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800160e:	79fb      	ldrb	r3, [r7, #7]
 8001610:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001614:	4a4b      	ldr	r2, [pc, #300]	@ (8001744 <Controle+0x364>)
 8001616:	009b      	lsls	r3, r3, #2
 8001618:	4413      	add	r3, r2
 800161a:	edc3 7a00 	vstr	s15, [r3]
		}
		//Ação de controle
		//uM[n] = uM[n] + deltaU[n];

		//Saturado para evitar que a ação de controle ultrapasse o limite
		if( u[n] < -1023){
 800161e:	79fb      	ldrb	r3, [r7, #7]
 8001620:	4a48      	ldr	r2, [pc, #288]	@ (8001744 <Controle+0x364>)
 8001622:	009b      	lsls	r3, r3, #2
 8001624:	4413      	add	r3, r2
 8001626:	edd3 7a00 	vldr	s15, [r3]
 800162a:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 8001748 <Controle+0x368>
 800162e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001632:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001636:	d505      	bpl.n	8001644 <Controle+0x264>
			u[n]= -1023;
 8001638:	79fb      	ldrb	r3, [r7, #7]
 800163a:	4a42      	ldr	r2, [pc, #264]	@ (8001744 <Controle+0x364>)
 800163c:	009b      	lsls	r3, r3, #2
 800163e:	4413      	add	r3, r2
 8001640:	4a42      	ldr	r2, [pc, #264]	@ (800174c <Controle+0x36c>)
 8001642:	601a      	str	r2, [r3, #0]
		}
		if(u[n]>1023){
 8001644:	79fb      	ldrb	r3, [r7, #7]
 8001646:	4a3f      	ldr	r2, [pc, #252]	@ (8001744 <Controle+0x364>)
 8001648:	009b      	lsls	r3, r3, #2
 800164a:	4413      	add	r3, r2
 800164c:	edd3 7a00 	vldr	s15, [r3]
 8001650:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8001750 <Controle+0x370>
 8001654:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001658:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800165c:	dd05      	ble.n	800166a <Controle+0x28a>
			u[n]= 1023;
 800165e:	79fb      	ldrb	r3, [r7, #7]
 8001660:	4a38      	ldr	r2, [pc, #224]	@ (8001744 <Controle+0x364>)
 8001662:	009b      	lsls	r3, r3, #2
 8001664:	4413      	add	r3, r2
 8001666:	4a3b      	ldr	r2, [pc, #236]	@ (8001754 <Controle+0x374>)
 8001668:	601a      	str	r2, [r3, #0]
		}
		//Mapeamento da variavel de ação de controle no alcançe dado
		if(ref[n]==0){
 800166a:	79fb      	ldrb	r3, [r7, #7]
 800166c:	4a2f      	ldr	r2, [pc, #188]	@ (800172c <Controle+0x34c>)
 800166e:	009b      	lsls	r3, r3, #2
 8001670:	4413      	add	r3, r2
 8001672:	edd3 7a00 	vldr	s15, [r3]
 8001676:	eef5 7a40 	vcmp.f32	s15, #0.0
 800167a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800167e:	d113      	bne.n	80016a8 <Controle+0x2c8>
			D[n]=0;
 8001680:	79fb      	ldrb	r3, [r7, #7]
 8001682:	4a35      	ldr	r2, [pc, #212]	@ (8001758 <Controle+0x378>)
 8001684:	2100      	movs	r1, #0
 8001686:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			u[n] = 0;
 800168a:	79fb      	ldrb	r3, [r7, #7]
 800168c:	4a2d      	ldr	r2, [pc, #180]	@ (8001744 <Controle+0x364>)
 800168e:	009b      	lsls	r3, r3, #2
 8001690:	4413      	add	r3, r2
 8001692:	f04f 0200 	mov.w	r2, #0
 8001696:	601a      	str	r2, [r3, #0]
			u_k1[n] = 0;
 8001698:	79fb      	ldrb	r3, [r7, #7]
 800169a:	4a27      	ldr	r2, [pc, #156]	@ (8001738 <Controle+0x358>)
 800169c:	009b      	lsls	r3, r3, #2
 800169e:	4413      	add	r3, r2
 80016a0:	f04f 0200 	mov.w	r2, #0
 80016a4:	601a      	str	r2, [r3, #0]
 80016a6:	e07a      	b.n	800179e <Controle+0x3be>
		}else if(u[n]>=0 ){
 80016a8:	79fb      	ldrb	r3, [r7, #7]
 80016aa:	4a26      	ldr	r2, [pc, #152]	@ (8001744 <Controle+0x364>)
 80016ac:	009b      	lsls	r3, r3, #2
 80016ae:	4413      	add	r3, r2
 80016b0:	edd3 7a00 	vldr	s15, [r3]
 80016b4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80016b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016bc:	db4e      	blt.n	800175c <Controle+0x37c>
			D[n] = map(u[n],0,1023,0,1023);
 80016be:	79fb      	ldrb	r3, [r7, #7]
 80016c0:	4a20      	ldr	r2, [pc, #128]	@ (8001744 <Controle+0x364>)
 80016c2:	009b      	lsls	r3, r3, #2
 80016c4:	4413      	add	r3, r2
 80016c6:	edd3 7a00 	vldr	s15, [r3]
 80016ca:	79fc      	ldrb	r4, [r7, #7]
 80016cc:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 80016d0:	2200      	movs	r2, #0
 80016d2:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 80016d6:	2000      	movs	r0, #0
 80016d8:	eeb0 0a67 	vmov.f32	s0, s15
 80016dc:	f7ff fe4a 	bl	8001374 <map>
 80016e0:	4603      	mov	r3, r0
 80016e2:	461a      	mov	r2, r3
 80016e4:	4b1c      	ldr	r3, [pc, #112]	@ (8001758 <Controle+0x378>)
 80016e6:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
 80016ea:	e058      	b.n	800179e <Controle+0x3be>
 80016ec:	f3af 8000 	nop.w
 80016f0:	47ae147b 	.word	0x47ae147b
 80016f4:	3f847ae1 	.word	0x3f847ae1
 80016f8:	240005c8 	.word	0x240005c8
 80016fc:	080151a0 	.word	0x080151a0
 8001700:	080151c0 	.word	0x080151c0
 8001704:	080151b0 	.word	0x080151b0
 8001708:	24000568 	.word	0x24000568
 800170c:	24000578 	.word	0x24000578
 8001710:	24000588 	.word	0x24000588
 8001714:	080151d0 	.word	0x080151d0
 8001718:	080151f0 	.word	0x080151f0
 800171c:	080151e0 	.word	0x080151e0
 8001720:	24000598 	.word	0x24000598
 8001724:	240005a8 	.word	0x240005a8
 8001728:	240005b8 	.word	0x240005b8
 800172c:	240004cc 	.word	0x240004cc
 8001730:	24000518 	.word	0x24000518
 8001734:	240004dc 	.word	0x240004dc
 8001738:	24000538 	.word	0x24000538
 800173c:	24000548 	.word	0x24000548
 8001740:	24000558 	.word	0x24000558
 8001744:	24000528 	.word	0x24000528
 8001748:	c47fc000 	.word	0xc47fc000
 800174c:	c47fc000 	.word	0xc47fc000
 8001750:	447fc000 	.word	0x447fc000
 8001754:	447fc000 	.word	0x447fc000
 8001758:	240004f0 	.word	0x240004f0
		}else if(u[n]<0){
 800175c:	79fb      	ldrb	r3, [r7, #7]
 800175e:	4a3d      	ldr	r2, [pc, #244]	@ (8001854 <Controle+0x474>)
 8001760:	009b      	lsls	r3, r3, #2
 8001762:	4413      	add	r3, r2
 8001764:	edd3 7a00 	vldr	s15, [r3]
 8001768:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800176c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001770:	d515      	bpl.n	800179e <Controle+0x3be>
			D[n]= map(u[n],-1023,0,2047,1024);
 8001772:	79fb      	ldrb	r3, [r7, #7]
 8001774:	4a37      	ldr	r2, [pc, #220]	@ (8001854 <Controle+0x474>)
 8001776:	009b      	lsls	r3, r3, #2
 8001778:	4413      	add	r3, r2
 800177a:	edd3 7a00 	vldr	s15, [r3]
 800177e:	79fc      	ldrb	r4, [r7, #7]
 8001780:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001784:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8001788:	2100      	movs	r1, #0
 800178a:	4833      	ldr	r0, [pc, #204]	@ (8001858 <Controle+0x478>)
 800178c:	eeb0 0a67 	vmov.f32	s0, s15
 8001790:	f7ff fdf0 	bl	8001374 <map>
 8001794:	4603      	mov	r3, r0
 8001796:	461a      	mov	r2, r3
 8001798:	4b30      	ldr	r3, [pc, #192]	@ (800185c <Controle+0x47c>)
 800179a:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
		}
		u_k1[n] = u[n];
 800179e:	79fa      	ldrb	r2, [r7, #7]
 80017a0:	79fb      	ldrb	r3, [r7, #7]
 80017a2:	492c      	ldr	r1, [pc, #176]	@ (8001854 <Controle+0x474>)
 80017a4:	0092      	lsls	r2, r2, #2
 80017a6:	440a      	add	r2, r1
 80017a8:	6812      	ldr	r2, [r2, #0]
 80017aa:	492d      	ldr	r1, [pc, #180]	@ (8001860 <Controle+0x480>)
 80017ac:	009b      	lsls	r3, r3, #2
 80017ae:	440b      	add	r3, r1
 80017b0:	601a      	str	r2, [r3, #0]

	//Logica para salvar o erro e a velocidade anterior
	cont = cont +1;
 80017b2:	4b2c      	ldr	r3, [pc, #176]	@ (8001864 <Controle+0x484>)
 80017b4:	781b      	ldrb	r3, [r3, #0]
 80017b6:	3301      	adds	r3, #1
 80017b8:	b2da      	uxtb	r2, r3
 80017ba:	4b2a      	ldr	r3, [pc, #168]	@ (8001864 <Controle+0x484>)
 80017bc:	701a      	strb	r2, [r3, #0]
	if(cont == 1){
 80017be:	4b29      	ldr	r3, [pc, #164]	@ (8001864 <Controle+0x484>)
 80017c0:	781b      	ldrb	r3, [r3, #0]
 80017c2:	2b01      	cmp	r3, #1
 80017c4:	d113      	bne.n	80017ee <Controle+0x40e>
		for(uint8_t n=0;n<4;n++){
 80017c6:	2300      	movs	r3, #0
 80017c8:	71bb      	strb	r3, [r7, #6]
 80017ca:	e00c      	b.n	80017e6 <Controle+0x406>
			//prevspeed[n] = speed[n];
			preverror[n] = error[n];
 80017cc:	79ba      	ldrb	r2, [r7, #6]
 80017ce:	79bb      	ldrb	r3, [r7, #6]
 80017d0:	4925      	ldr	r1, [pc, #148]	@ (8001868 <Controle+0x488>)
 80017d2:	0092      	lsls	r2, r2, #2
 80017d4:	440a      	add	r2, r1
 80017d6:	6812      	ldr	r2, [r2, #0]
 80017d8:	4924      	ldr	r1, [pc, #144]	@ (800186c <Controle+0x48c>)
 80017da:	009b      	lsls	r3, r3, #2
 80017dc:	440b      	add	r3, r1
 80017de:	601a      	str	r2, [r3, #0]
		for(uint8_t n=0;n<4;n++){
 80017e0:	79bb      	ldrb	r3, [r7, #6]
 80017e2:	3301      	adds	r3, #1
 80017e4:	71bb      	strb	r3, [r7, #6]
 80017e6:	79bb      	ldrb	r3, [r7, #6]
 80017e8:	2b03      	cmp	r3, #3
 80017ea:	d9ef      	bls.n	80017cc <Controle+0x3ec>
 80017ec:	e023      	b.n	8001836 <Controle+0x456>
		}
	} else if(cont ==2){
 80017ee:	4b1d      	ldr	r3, [pc, #116]	@ (8001864 <Controle+0x484>)
 80017f0:	781b      	ldrb	r3, [r3, #0]
 80017f2:	2b02      	cmp	r3, #2
 80017f4:	d11f      	bne.n	8001836 <Controle+0x456>
		for(uint8_t n=0;n<4;n++){
 80017f6:	2300      	movs	r3, #0
 80017f8:	717b      	strb	r3, [r7, #5]
 80017fa:	e016      	b.n	800182a <Controle+0x44a>
			//prevspeed2[n] = prevspeed[n];
			preverror2[n] = preverror[n];
 80017fc:	797a      	ldrb	r2, [r7, #5]
 80017fe:	797b      	ldrb	r3, [r7, #5]
 8001800:	491a      	ldr	r1, [pc, #104]	@ (800186c <Controle+0x48c>)
 8001802:	0092      	lsls	r2, r2, #2
 8001804:	440a      	add	r2, r1
 8001806:	6812      	ldr	r2, [r2, #0]
 8001808:	4919      	ldr	r1, [pc, #100]	@ (8001870 <Controle+0x490>)
 800180a:	009b      	lsls	r3, r3, #2
 800180c:	440b      	add	r3, r1
 800180e:	601a      	str	r2, [r3, #0]
			//prevspeed[n] = speed[n];
			preverror[n] = error[n];
 8001810:	797a      	ldrb	r2, [r7, #5]
 8001812:	797b      	ldrb	r3, [r7, #5]
 8001814:	4914      	ldr	r1, [pc, #80]	@ (8001868 <Controle+0x488>)
 8001816:	0092      	lsls	r2, r2, #2
 8001818:	440a      	add	r2, r1
 800181a:	6812      	ldr	r2, [r2, #0]
 800181c:	4913      	ldr	r1, [pc, #76]	@ (800186c <Controle+0x48c>)
 800181e:	009b      	lsls	r3, r3, #2
 8001820:	440b      	add	r3, r1
 8001822:	601a      	str	r2, [r3, #0]
		for(uint8_t n=0;n<4;n++){
 8001824:	797b      	ldrb	r3, [r7, #5]
 8001826:	3301      	adds	r3, #1
 8001828:	717b      	strb	r3, [r7, #5]
 800182a:	797b      	ldrb	r3, [r7, #5]
 800182c:	2b03      	cmp	r3, #3
 800182e:	d9e5      	bls.n	80017fc <Controle+0x41c>
		}
		cont = 1;
 8001830:	4b0c      	ldr	r3, [pc, #48]	@ (8001864 <Controle+0x484>)
 8001832:	2201      	movs	r2, #1
 8001834:	701a      	strb	r2, [r3, #0]
	for(uint8_t n=0;n<4;n++){
 8001836:	79fb      	ldrb	r3, [r7, #7]
 8001838:	3301      	adds	r3, #1
 800183a:	71fb      	strb	r3, [r7, #7]
 800183c:	79fb      	ldrb	r3, [r7, #7]
 800183e:	2b03      	cmp	r3, #3
 8001840:	f67f add4 	bls.w	80013ec <Controle+0xc>
	}
}
	once=1;
 8001844:	4b0b      	ldr	r3, [pc, #44]	@ (8001874 <Controle+0x494>)
 8001846:	2201      	movs	r2, #1
 8001848:	701a      	strb	r2, [r3, #0]
}
 800184a:	bf00      	nop
 800184c:	370c      	adds	r7, #12
 800184e:	46bd      	mov	sp, r7
 8001850:	bd90      	pop	{r4, r7, pc}
 8001852:	bf00      	nop
 8001854:	24000528 	.word	0x24000528
 8001858:	fffffc01 	.word	0xfffffc01
 800185c:	240004f0 	.word	0x240004f0
 8001860:	24000538 	.word	0x24000538
 8001864:	240004ec 	.word	0x240004ec
 8001868:	240004dc 	.word	0x240004dc
 800186c:	24000548 	.word	0x24000548
 8001870:	24000558 	.word	0x24000558
 8001874:	240005c8 	.word	0x240005c8

08001878 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800187c:	bf00      	nop
 800187e:	e7fd      	b.n	800187c <NMI_Handler+0x4>

08001880 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001880:	b480      	push	{r7}
 8001882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001884:	bf00      	nop
 8001886:	e7fd      	b.n	8001884 <HardFault_Handler+0x4>

08001888 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800188c:	bf00      	nop
 800188e:	e7fd      	b.n	800188c <MemManage_Handler+0x4>

08001890 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001890:	b480      	push	{r7}
 8001892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001894:	bf00      	nop
 8001896:	e7fd      	b.n	8001894 <BusFault_Handler+0x4>

08001898 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800189c:	bf00      	nop
 800189e:	e7fd      	b.n	800189c <UsageFault_Handler+0x4>

080018a0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018a4:	bf00      	nop
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr

080018ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018ae:	b480      	push	{r7}
 80018b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018b2:	bf00      	nop
 80018b4:	46bd      	mov	sp, r7
 80018b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ba:	4770      	bx	lr

080018bc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018c0:	bf00      	nop
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr

080018ca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018ca:	b580      	push	{r7, lr}
 80018cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018ce:	f001 f96b 	bl	8002ba8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018d2:	bf00      	nop
 80018d4:	bd80      	pop	{r7, pc}
	...

080018d8 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch3);
 80018dc:	4802      	ldr	r0, [pc, #8]	@ (80018e8 <DMA1_Stream1_IRQHandler+0x10>)
 80018de:	f003 fbe3 	bl	80050a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80018e2:	bf00      	nop
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	2400086c 	.word	0x2400086c

080018ec <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch4);
 80018f0:	4802      	ldr	r0, [pc, #8]	@ (80018fc <DMA1_Stream3_IRQHandler+0x10>)
 80018f2:	f003 fbd9 	bl	80050a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80018f6:	bf00      	nop
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	240008e4 	.word	0x240008e4

08001900 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch2);
 8001904:	4802      	ldr	r0, [pc, #8]	@ (8001910 <DMA1_Stream4_IRQHandler+0x10>)
 8001906:	f003 fbcf 	bl	80050a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800190a:	bf00      	nop
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	2400095c 	.word	0x2400095c

08001914 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 8001918:	4802      	ldr	r0, [pc, #8]	@ (8001924 <DMA1_Stream5_IRQHandler+0x10>)
 800191a:	f003 fbc5 	bl	80050a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800191e:	bf00      	nop
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	240007f4 	.word	0x240007f4

08001928 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800192c:	4802      	ldr	r0, [pc, #8]	@ (8001938 <TIM4_IRQHandler+0x10>)
 800192e:	f00a fcc5 	bl	800c2bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001932:	bf00      	nop
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	240006c4 	.word	0x240006c4

0800193c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 8001940:	2000      	movs	r0, #0
 8001942:	f000 ffc3 	bl	80028cc <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001946:	bf00      	nop
 8001948:	bd80      	pop	{r7, pc}
	...

0800194c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001950:	4802      	ldr	r0, [pc, #8]	@ (800195c <OTG_FS_IRQHandler+0x10>)
 8001952:	f005 fa7e 	bl	8006e52 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001956:	bf00      	nop
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	24001f58 	.word	0x24001f58

08001960 <TIM15_IRQHandler>:

/**
  * @brief This function handles TIM15 global interrupt.
  */
void TIM15_IRQHandler(void)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b082      	sub	sp, #8
 8001964:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM15_IRQn 0 */

  /* USER CODE END TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 8001966:	484c      	ldr	r0, [pc, #304]	@ (8001a98 <TIM15_IRQHandler+0x138>)
 8001968:	f00a fca8 	bl	800c2bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM15_IRQn 1 */
  //
  //Enc[0] = TIM4->CNT;
  Enc[0] = TIM1->CNT;
 800196c:	4b4b      	ldr	r3, [pc, #300]	@ (8001a9c <TIM15_IRQHandler+0x13c>)
 800196e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001970:	4a4b      	ldr	r2, [pc, #300]	@ (8001aa0 <TIM15_IRQHandler+0x140>)
 8001972:	6013      	str	r3, [r2, #0]
  //Enc[1] = TIM1->CNT;
  Enc[2] = TIM3->CNT;
 8001974:	4b4b      	ldr	r3, [pc, #300]	@ (8001aa4 <TIM15_IRQHandler+0x144>)
 8001976:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001978:	4a49      	ldr	r2, [pc, #292]	@ (8001aa0 <TIM15_IRQHandler+0x140>)
 800197a:	6093      	str	r3, [r2, #8]
  Enc[3] = TIM4->CNT;
 800197c:	4b4a      	ldr	r3, [pc, #296]	@ (8001aa8 <TIM15_IRQHandler+0x148>)
 800197e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001980:	4a47      	ldr	r2, [pc, #284]	@ (8001aa0 <TIM15_IRQHandler+0x140>)
 8001982:	60d3      	str	r3, [r2, #12]
  Enc[1] = TIM8->CNT;
 8001984:	4b49      	ldr	r3, [pc, #292]	@ (8001aac <TIM15_IRQHandler+0x14c>)
 8001986:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001988:	4a45      	ldr	r2, [pc, #276]	@ (8001aa0 <TIM15_IRQHandler+0x140>)
 800198a:	6053      	str	r3, [r2, #4]

  TIM4->CNT = 0;
 800198c:	4b46      	ldr	r3, [pc, #280]	@ (8001aa8 <TIM15_IRQHandler+0x148>)
 800198e:	2200      	movs	r2, #0
 8001990:	625a      	str	r2, [r3, #36]	@ 0x24
  TIM1->CNT = 0;
 8001992:	4b42      	ldr	r3, [pc, #264]	@ (8001a9c <TIM15_IRQHandler+0x13c>)
 8001994:	2200      	movs	r2, #0
 8001996:	625a      	str	r2, [r3, #36]	@ 0x24
  TIM8->CNT = 0;
 8001998:	4b44      	ldr	r3, [pc, #272]	@ (8001aac <TIM15_IRQHandler+0x14c>)
 800199a:	2200      	movs	r2, #0
 800199c:	625a      	str	r2, [r3, #36]	@ 0x24
  TIM3->CNT = 0;
 800199e:	4b41      	ldr	r3, [pc, #260]	@ (8001aa4 <TIM15_IRQHandler+0x144>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	625a      	str	r2, [r3, #36]	@ 0x24
  static float last_vel[4] ={0,0,0,0};

  for(uint8_t i=0;i<4;i++){
 80019a4:	2300      	movs	r3, #0
 80019a6:	71fb      	strb	r3, [r7, #7]
 80019a8:	e061      	b.n	8001a6e <TIM15_IRQHandler+0x10e>
	  vel[i] = Enc[i];
 80019aa:	79fb      	ldrb	r3, [r7, #7]
 80019ac:	4a3c      	ldr	r2, [pc, #240]	@ (8001aa0 <TIM15_IRQHandler+0x140>)
 80019ae:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80019b2:	79fb      	ldrb	r3, [r7, #7]
 80019b4:	4611      	mov	r1, r2
 80019b6:	4a3e      	ldr	r2, [pc, #248]	@ (8001ab0 <TIM15_IRQHandler+0x150>)
 80019b8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	  if(vel[i]>60000){
 80019bc:	79fb      	ldrb	r3, [r7, #7]
 80019be:	4a3c      	ldr	r2, [pc, #240]	@ (8001ab0 <TIM15_IRQHandler+0x150>)
 80019c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019c4:	f64e 2260 	movw	r2, #60000	@ 0xea60
 80019c8:	4293      	cmp	r3, r2
 80019ca:	dd09      	ble.n	80019e0 <TIM15_IRQHandler+0x80>
			  vel[i] = vel[i] - 65355;
 80019cc:	79fb      	ldrb	r3, [r7, #7]
 80019ce:	4a38      	ldr	r2, [pc, #224]	@ (8001ab0 <TIM15_IRQHandler+0x150>)
 80019d0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80019d4:	79fa      	ldrb	r2, [r7, #7]
 80019d6:	4b37      	ldr	r3, [pc, #220]	@ (8001ab4 <TIM15_IRQHandler+0x154>)
 80019d8:	440b      	add	r3, r1
 80019da:	4935      	ldr	r1, [pc, #212]	@ (8001ab0 <TIM15_IRQHandler+0x150>)
 80019dc:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
	  }
	  speed[i] = -1*vel[i]/(163.84);
 80019e0:	79fb      	ldrb	r3, [r7, #7]
 80019e2:	4a33      	ldr	r2, [pc, #204]	@ (8001ab0 <TIM15_IRQHandler+0x150>)
 80019e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019e8:	425b      	negs	r3, r3
 80019ea:	ee07 3a90 	vmov	s15, r3
 80019ee:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80019f2:	ed9f 5b27 	vldr	d5, [pc, #156]	@ 8001a90 <TIM15_IRQHandler+0x130>
 80019f6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80019fa:	79fb      	ldrb	r3, [r7, #7]
 80019fc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001a00:	4a2d      	ldr	r2, [pc, #180]	@ (8001ab8 <TIM15_IRQHandler+0x158>)
 8001a02:	009b      	lsls	r3, r3, #2
 8001a04:	4413      	add	r3, r2
 8001a06:	edc3 7a00 	vstr	s15, [r3]
	  if(speed[i]>10 || speed[i]<-10){
 8001a0a:	79fb      	ldrb	r3, [r7, #7]
 8001a0c:	4a2a      	ldr	r2, [pc, #168]	@ (8001ab8 <TIM15_IRQHandler+0x158>)
 8001a0e:	009b      	lsls	r3, r3, #2
 8001a10:	4413      	add	r3, r2
 8001a12:	edd3 7a00 	vldr	s15, [r3]
 8001a16:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001a1a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a22:	dc0c      	bgt.n	8001a3e <TIM15_IRQHandler+0xde>
 8001a24:	79fb      	ldrb	r3, [r7, #7]
 8001a26:	4a24      	ldr	r2, [pc, #144]	@ (8001ab8 <TIM15_IRQHandler+0x158>)
 8001a28:	009b      	lsls	r3, r3, #2
 8001a2a:	4413      	add	r3, r2
 8001a2c:	edd3 7a00 	vldr	s15, [r3]
 8001a30:	eeba 7a04 	vmov.f32	s14, #164	@ 0xc1200000 -10.0
 8001a34:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a3c:	d50a      	bpl.n	8001a54 <TIM15_IRQHandler+0xf4>
		  speed[i] = last_vel[i];
 8001a3e:	79fa      	ldrb	r2, [r7, #7]
 8001a40:	79fb      	ldrb	r3, [r7, #7]
 8001a42:	491e      	ldr	r1, [pc, #120]	@ (8001abc <TIM15_IRQHandler+0x15c>)
 8001a44:	0092      	lsls	r2, r2, #2
 8001a46:	440a      	add	r2, r1
 8001a48:	6812      	ldr	r2, [r2, #0]
 8001a4a:	491b      	ldr	r1, [pc, #108]	@ (8001ab8 <TIM15_IRQHandler+0x158>)
 8001a4c:	009b      	lsls	r3, r3, #2
 8001a4e:	440b      	add	r3, r1
 8001a50:	601a      	str	r2, [r3, #0]
 8001a52:	e009      	b.n	8001a68 <TIM15_IRQHandler+0x108>
	  } else{
		  last_vel[i] = speed[i];
 8001a54:	79fa      	ldrb	r2, [r7, #7]
 8001a56:	79fb      	ldrb	r3, [r7, #7]
 8001a58:	4917      	ldr	r1, [pc, #92]	@ (8001ab8 <TIM15_IRQHandler+0x158>)
 8001a5a:	0092      	lsls	r2, r2, #2
 8001a5c:	440a      	add	r2, r1
 8001a5e:	6812      	ldr	r2, [r2, #0]
 8001a60:	4916      	ldr	r1, [pc, #88]	@ (8001abc <TIM15_IRQHandler+0x15c>)
 8001a62:	009b      	lsls	r3, r3, #2
 8001a64:	440b      	add	r3, r1
 8001a66:	601a      	str	r2, [r3, #0]
  for(uint8_t i=0;i<4;i++){
 8001a68:	79fb      	ldrb	r3, [r7, #7]
 8001a6a:	3301      	adds	r3, #1
 8001a6c:	71fb      	strb	r3, [r7, #7]
 8001a6e:	79fb      	ldrb	r3, [r7, #7]
 8001a70:	2b03      	cmp	r3, #3
 8001a72:	d99a      	bls.n	80019aa <TIM15_IRQHandler+0x4a>
	  }
  }


  //velocidade = speed[0];
  Controle();
 8001a74:	f7ff fcb4 	bl	80013e0 <Controle>

  dshot_write(D);
 8001a78:	4811      	ldr	r0, [pc, #68]	@ (8001ac0 <TIM15_IRQHandler+0x160>)
 8001a7a:	f7fe ffa0 	bl	80009be <dshot_write>

  HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_14);
 8001a7e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001a82:	4810      	ldr	r0, [pc, #64]	@ (8001ac4 <TIM15_IRQHandler+0x164>)
 8001a84:	f005 f85b 	bl	8006b3e <HAL_GPIO_TogglePin>
  /* USER CODE END TIM15_IRQn 1 */
}
 8001a88:	bf00      	nop
 8001a8a:	3708      	adds	r7, #8
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}
 8001a90:	47ae147b 	.word	0x47ae147b
 8001a94:	40647ae1 	.word	0x40647ae1
 8001a98:	240007a8 	.word	0x240007a8
 8001a9c:	40010000 	.word	0x40010000
 8001aa0:	240004f8 	.word	0x240004f8
 8001aa4:	40000400 	.word	0x40000400
 8001aa8:	40000800 	.word	0x40000800
 8001aac:	40010400 	.word	0x40010400
 8001ab0:	24000508 	.word	0x24000508
 8001ab4:	ffff00b5 	.word	0xffff00b5
 8001ab8:	24000518 	.word	0x24000518
 8001abc:	240005cc 	.word	0x240005cc
 8001ac0:	240004f0 	.word	0x240004f0
 8001ac4:	58020400 	.word	0x58020400

08001ac8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0
  return 1;
 8001acc:	2301      	movs	r3, #1
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr

08001ad8 <_kill>:

int _kill(int pid, int sig)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b082      	sub	sp, #8
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
 8001ae0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001ae2:	f011 fad1 	bl	8013088 <__errno>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	2216      	movs	r2, #22
 8001aea:	601a      	str	r2, [r3, #0]
  return -1;
 8001aec:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	3708      	adds	r7, #8
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}

08001af8 <_exit>:

void _exit (int status)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b082      	sub	sp, #8
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001b00:	f04f 31ff 	mov.w	r1, #4294967295
 8001b04:	6878      	ldr	r0, [r7, #4]
 8001b06:	f7ff ffe7 	bl	8001ad8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001b0a:	bf00      	nop
 8001b0c:	e7fd      	b.n	8001b0a <_exit+0x12>

08001b0e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b0e:	b580      	push	{r7, lr}
 8001b10:	b086      	sub	sp, #24
 8001b12:	af00      	add	r7, sp, #0
 8001b14:	60f8      	str	r0, [r7, #12]
 8001b16:	60b9      	str	r1, [r7, #8]
 8001b18:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	617b      	str	r3, [r7, #20]
 8001b1e:	e00a      	b.n	8001b36 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001b20:	f3af 8000 	nop.w
 8001b24:	4601      	mov	r1, r0
 8001b26:	68bb      	ldr	r3, [r7, #8]
 8001b28:	1c5a      	adds	r2, r3, #1
 8001b2a:	60ba      	str	r2, [r7, #8]
 8001b2c:	b2ca      	uxtb	r2, r1
 8001b2e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	3301      	adds	r3, #1
 8001b34:	617b      	str	r3, [r7, #20]
 8001b36:	697a      	ldr	r2, [r7, #20]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	429a      	cmp	r2, r3
 8001b3c:	dbf0      	blt.n	8001b20 <_read+0x12>
  }

  return len;
 8001b3e:	687b      	ldr	r3, [r7, #4]
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	3718      	adds	r7, #24
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}

08001b48 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b086      	sub	sp, #24
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	60f8      	str	r0, [r7, #12]
 8001b50:	60b9      	str	r1, [r7, #8]
 8001b52:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b54:	2300      	movs	r3, #0
 8001b56:	617b      	str	r3, [r7, #20]
 8001b58:	e009      	b.n	8001b6e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001b5a:	68bb      	ldr	r3, [r7, #8]
 8001b5c:	1c5a      	adds	r2, r3, #1
 8001b5e:	60ba      	str	r2, [r7, #8]
 8001b60:	781b      	ldrb	r3, [r3, #0]
 8001b62:	4618      	mov	r0, r3
 8001b64:	f000 ff32 	bl	80029cc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	3301      	adds	r3, #1
 8001b6c:	617b      	str	r3, [r7, #20]
 8001b6e:	697a      	ldr	r2, [r7, #20]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	429a      	cmp	r2, r3
 8001b74:	dbf1      	blt.n	8001b5a <_write+0x12>
  }
  return len;
 8001b76:	687b      	ldr	r3, [r7, #4]
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	3718      	adds	r7, #24
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}

08001b80 <_close>:

int _close(int file)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b083      	sub	sp, #12
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001b88:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	370c      	adds	r7, #12
 8001b90:	46bd      	mov	sp, r7
 8001b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b96:	4770      	bx	lr

08001b98 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b083      	sub	sp, #12
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
 8001ba0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001ba8:	605a      	str	r2, [r3, #4]
  return 0;
 8001baa:	2300      	movs	r3, #0
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	370c      	adds	r7, #12
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb6:	4770      	bx	lr

08001bb8 <_isatty>:

int _isatty(int file)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b083      	sub	sp, #12
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001bc0:	2301      	movs	r3, #1
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	370c      	adds	r7, #12
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bcc:	4770      	bx	lr

08001bce <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001bce:	b480      	push	{r7}
 8001bd0:	b085      	sub	sp, #20
 8001bd2:	af00      	add	r7, sp, #0
 8001bd4:	60f8      	str	r0, [r7, #12]
 8001bd6:	60b9      	str	r1, [r7, #8]
 8001bd8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001bda:	2300      	movs	r3, #0
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	3714      	adds	r7, #20
 8001be0:	46bd      	mov	sp, r7
 8001be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be6:	4770      	bx	lr

08001be8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b086      	sub	sp, #24
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001bf0:	4a14      	ldr	r2, [pc, #80]	@ (8001c44 <_sbrk+0x5c>)
 8001bf2:	4b15      	ldr	r3, [pc, #84]	@ (8001c48 <_sbrk+0x60>)
 8001bf4:	1ad3      	subs	r3, r2, r3
 8001bf6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001bfc:	4b13      	ldr	r3, [pc, #76]	@ (8001c4c <_sbrk+0x64>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d102      	bne.n	8001c0a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c04:	4b11      	ldr	r3, [pc, #68]	@ (8001c4c <_sbrk+0x64>)
 8001c06:	4a12      	ldr	r2, [pc, #72]	@ (8001c50 <_sbrk+0x68>)
 8001c08:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c0a:	4b10      	ldr	r3, [pc, #64]	@ (8001c4c <_sbrk+0x64>)
 8001c0c:	681a      	ldr	r2, [r3, #0]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	4413      	add	r3, r2
 8001c12:	693a      	ldr	r2, [r7, #16]
 8001c14:	429a      	cmp	r2, r3
 8001c16:	d207      	bcs.n	8001c28 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c18:	f011 fa36 	bl	8013088 <__errno>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	220c      	movs	r2, #12
 8001c20:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c22:	f04f 33ff 	mov.w	r3, #4294967295
 8001c26:	e009      	b.n	8001c3c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c28:	4b08      	ldr	r3, [pc, #32]	@ (8001c4c <_sbrk+0x64>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c2e:	4b07      	ldr	r3, [pc, #28]	@ (8001c4c <_sbrk+0x64>)
 8001c30:	681a      	ldr	r2, [r3, #0]
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	4413      	add	r3, r2
 8001c36:	4a05      	ldr	r2, [pc, #20]	@ (8001c4c <_sbrk+0x64>)
 8001c38:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c3a:	68fb      	ldr	r3, [r7, #12]
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	3718      	adds	r7, #24
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	24080000 	.word	0x24080000
 8001c48:	00000400 	.word	0x00000400
 8001c4c:	240005dc 	.word	0x240005dc
 8001c50:	240027a8 	.word	0x240027a8

08001c54 <MX_TIM1_Init>:
DMA_HandleTypeDef hdma_tim5_ch4;
DMA_HandleTypeDef hdma_tim5_ch2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b08c      	sub	sp, #48	@ 0x30
 8001c58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001c5a:	f107 030c 	add.w	r3, r7, #12
 8001c5e:	2224      	movs	r2, #36	@ 0x24
 8001c60:	2100      	movs	r1, #0
 8001c62:	4618      	mov	r0, r3
 8001c64:	f011 f9bd 	bl	8012fe2 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c68:	463b      	mov	r3, r7
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	601a      	str	r2, [r3, #0]
 8001c6e:	605a      	str	r2, [r3, #4]
 8001c70:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001c72:	4b23      	ldr	r3, [pc, #140]	@ (8001d00 <MX_TIM1_Init+0xac>)
 8001c74:	4a23      	ldr	r2, [pc, #140]	@ (8001d04 <MX_TIM1_Init+0xb0>)
 8001c76:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001c78:	4b21      	ldr	r3, [pc, #132]	@ (8001d00 <MX_TIM1_Init+0xac>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c7e:	4b20      	ldr	r3, [pc, #128]	@ (8001d00 <MX_TIM1_Init+0xac>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001c84:	4b1e      	ldr	r3, [pc, #120]	@ (8001d00 <MX_TIM1_Init+0xac>)
 8001c86:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001c8a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c8c:	4b1c      	ldr	r3, [pc, #112]	@ (8001d00 <MX_TIM1_Init+0xac>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001c92:	4b1b      	ldr	r3, [pc, #108]	@ (8001d00 <MX_TIM1_Init+0xac>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c98:	4b19      	ldr	r3, [pc, #100]	@ (8001d00 <MX_TIM1_Init+0xac>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001c9e:	2303      	movs	r3, #3
 8001ca0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8001ca2:	2302      	movs	r3, #2
 8001ca4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001caa:	2300      	movs	r3, #0
 8001cac:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8001cb2:	2302      	movs	r3, #2
 8001cb4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001cc2:	f107 030c 	add.w	r3, r7, #12
 8001cc6:	4619      	mov	r1, r3
 8001cc8:	480d      	ldr	r0, [pc, #52]	@ (8001d00 <MX_TIM1_Init+0xac>)
 8001cca:	f00a f9a3 	bl	800c014 <HAL_TIM_Encoder_Init>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d001      	beq.n	8001cd8 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8001cd4:	f7ff fb2d 	bl	8001332 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001ce4:	463b      	mov	r3, r7
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	4805      	ldr	r0, [pc, #20]	@ (8001d00 <MX_TIM1_Init+0xac>)
 8001cea:	f00b fa63 	bl	800d1b4 <HAL_TIMEx_MasterConfigSynchronization>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d001      	beq.n	8001cf8 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8001cf4:	f7ff fb1d 	bl	8001332 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001cf8:	bf00      	nop
 8001cfa:	3730      	adds	r7, #48	@ 0x30
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}
 8001d00:	240005e0 	.word	0x240005e0
 8001d04:	40010000 	.word	0x40010000

08001d08 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b08a      	sub	sp, #40	@ 0x28
 8001d0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d0e:	f107 031c 	add.w	r3, r7, #28
 8001d12:	2200      	movs	r2, #0
 8001d14:	601a      	str	r2, [r3, #0]
 8001d16:	605a      	str	r2, [r3, #4]
 8001d18:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d1a:	463b      	mov	r3, r7
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	601a      	str	r2, [r3, #0]
 8001d20:	605a      	str	r2, [r3, #4]
 8001d22:	609a      	str	r2, [r3, #8]
 8001d24:	60da      	str	r2, [r3, #12]
 8001d26:	611a      	str	r2, [r3, #16]
 8001d28:	615a      	str	r2, [r3, #20]
 8001d2a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001d2c:	4b27      	ldr	r3, [pc, #156]	@ (8001dcc <MX_TIM2_Init+0xc4>)
 8001d2e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001d32:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001d34:	4b25      	ldr	r3, [pc, #148]	@ (8001dcc <MX_TIM2_Init+0xc4>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d3a:	4b24      	ldr	r3, [pc, #144]	@ (8001dcc <MX_TIM2_Init+0xc4>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 8001d40:	4b22      	ldr	r3, [pc, #136]	@ (8001dcc <MX_TIM2_Init+0xc4>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d46:	4b21      	ldr	r3, [pc, #132]	@ (8001dcc <MX_TIM2_Init+0xc4>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d4c:	4b1f      	ldr	r3, [pc, #124]	@ (8001dcc <MX_TIM2_Init+0xc4>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001d52:	481e      	ldr	r0, [pc, #120]	@ (8001dcc <MX_TIM2_Init+0xc4>)
 8001d54:	f009 fff8 	bl	800bd48 <HAL_TIM_PWM_Init>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d001      	beq.n	8001d62 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001d5e:	f7ff fae8 	bl	8001332 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d62:	2300      	movs	r3, #0
 8001d64:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d66:	2300      	movs	r3, #0
 8001d68:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001d6a:	f107 031c 	add.w	r3, r7, #28
 8001d6e:	4619      	mov	r1, r3
 8001d70:	4816      	ldr	r0, [pc, #88]	@ (8001dcc <MX_TIM2_Init+0xc4>)
 8001d72:	f00b fa1f 	bl	800d1b4 <HAL_TIMEx_MasterConfigSynchronization>
 8001d76:	4603      	mov	r3, r0
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d001      	beq.n	8001d80 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001d7c:	f7ff fad9 	bl	8001332 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d80:	2360      	movs	r3, #96	@ 0x60
 8001d82:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001d84:	2300      	movs	r3, #0
 8001d86:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d90:	463b      	mov	r3, r7
 8001d92:	2200      	movs	r2, #0
 8001d94:	4619      	mov	r1, r3
 8001d96:	480d      	ldr	r0, [pc, #52]	@ (8001dcc <MX_TIM2_Init+0xc4>)
 8001d98:	f00a fb98 	bl	800c4cc <HAL_TIM_PWM_ConfigChannel>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d001      	beq.n	8001da6 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8001da2:	f7ff fac6 	bl	8001332 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001da6:	463b      	mov	r3, r7
 8001da8:	2208      	movs	r2, #8
 8001daa:	4619      	mov	r1, r3
 8001dac:	4807      	ldr	r0, [pc, #28]	@ (8001dcc <MX_TIM2_Init+0xc4>)
 8001dae:	f00a fb8d 	bl	800c4cc <HAL_TIM_PWM_ConfigChannel>
 8001db2:	4603      	mov	r3, r0
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d001      	beq.n	8001dbc <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001db8:	f7ff fabb 	bl	8001332 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001dbc:	4803      	ldr	r0, [pc, #12]	@ (8001dcc <MX_TIM2_Init+0xc4>)
 8001dbe:	f000 fc13 	bl	80025e8 <HAL_TIM_MspPostInit>

}
 8001dc2:	bf00      	nop
 8001dc4:	3728      	adds	r7, #40	@ 0x28
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	2400062c 	.word	0x2400062c

08001dd0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b08c      	sub	sp, #48	@ 0x30
 8001dd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001dd6:	f107 030c 	add.w	r3, r7, #12
 8001dda:	2224      	movs	r2, #36	@ 0x24
 8001ddc:	2100      	movs	r1, #0
 8001dde:	4618      	mov	r0, r3
 8001de0:	f011 f8ff 	bl	8012fe2 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001de4:	463b      	mov	r3, r7
 8001de6:	2200      	movs	r2, #0
 8001de8:	601a      	str	r2, [r3, #0]
 8001dea:	605a      	str	r2, [r3, #4]
 8001dec:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001dee:	4b21      	ldr	r3, [pc, #132]	@ (8001e74 <MX_TIM3_Init+0xa4>)
 8001df0:	4a21      	ldr	r2, [pc, #132]	@ (8001e78 <MX_TIM3_Init+0xa8>)
 8001df2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001df4:	4b1f      	ldr	r3, [pc, #124]	@ (8001e74 <MX_TIM3_Init+0xa4>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dfa:	4b1e      	ldr	r3, [pc, #120]	@ (8001e74 <MX_TIM3_Init+0xa4>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001e00:	4b1c      	ldr	r3, [pc, #112]	@ (8001e74 <MX_TIM3_Init+0xa4>)
 8001e02:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001e06:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e08:	4b1a      	ldr	r3, [pc, #104]	@ (8001e74 <MX_TIM3_Init+0xa4>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e0e:	4b19      	ldr	r3, [pc, #100]	@ (8001e74 <MX_TIM3_Init+0xa4>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001e14:	2303      	movs	r3, #3
 8001e16:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8001e18:	2302      	movs	r3, #2
 8001e1a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001e20:	2300      	movs	r3, #0
 8001e22:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001e24:	2300      	movs	r3, #0
 8001e26:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8001e28:	2302      	movs	r3, #2
 8001e2a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001e30:	2300      	movs	r3, #0
 8001e32:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001e34:	2300      	movs	r3, #0
 8001e36:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001e38:	f107 030c 	add.w	r3, r7, #12
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	480d      	ldr	r0, [pc, #52]	@ (8001e74 <MX_TIM3_Init+0xa4>)
 8001e40:	f00a f8e8 	bl	800c014 <HAL_TIM_Encoder_Init>
 8001e44:	4603      	mov	r3, r0
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d001      	beq.n	8001e4e <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8001e4a:	f7ff fa72 	bl	8001332 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e52:	2300      	movs	r3, #0
 8001e54:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001e56:	463b      	mov	r3, r7
 8001e58:	4619      	mov	r1, r3
 8001e5a:	4806      	ldr	r0, [pc, #24]	@ (8001e74 <MX_TIM3_Init+0xa4>)
 8001e5c:	f00b f9aa 	bl	800d1b4 <HAL_TIMEx_MasterConfigSynchronization>
 8001e60:	4603      	mov	r3, r0
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d001      	beq.n	8001e6a <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8001e66:	f7ff fa64 	bl	8001332 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001e6a:	bf00      	nop
 8001e6c:	3730      	adds	r7, #48	@ 0x30
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	24000678 	.word	0x24000678
 8001e78:	40000400 	.word	0x40000400

08001e7c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b08c      	sub	sp, #48	@ 0x30
 8001e80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001e82:	f107 030c 	add.w	r3, r7, #12
 8001e86:	2224      	movs	r2, #36	@ 0x24
 8001e88:	2100      	movs	r1, #0
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f011 f8a9 	bl	8012fe2 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e90:	463b      	mov	r3, r7
 8001e92:	2200      	movs	r2, #0
 8001e94:	601a      	str	r2, [r3, #0]
 8001e96:	605a      	str	r2, [r3, #4]
 8001e98:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001e9a:	4b21      	ldr	r3, [pc, #132]	@ (8001f20 <MX_TIM4_Init+0xa4>)
 8001e9c:	4a21      	ldr	r2, [pc, #132]	@ (8001f24 <MX_TIM4_Init+0xa8>)
 8001e9e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001ea0:	4b1f      	ldr	r3, [pc, #124]	@ (8001f20 <MX_TIM4_Init+0xa4>)
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ea6:	4b1e      	ldr	r3, [pc, #120]	@ (8001f20 <MX_TIM4_Init+0xa4>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001eac:	4b1c      	ldr	r3, [pc, #112]	@ (8001f20 <MX_TIM4_Init+0xa4>)
 8001eae:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001eb2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001eb4:	4b1a      	ldr	r3, [pc, #104]	@ (8001f20 <MX_TIM4_Init+0xa4>)
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001eba:	4b19      	ldr	r3, [pc, #100]	@ (8001f20 <MX_TIM4_Init+0xa4>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001ec0:	2303      	movs	r3, #3
 8001ec2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8001ec4:	2302      	movs	r3, #2
 8001ec6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8001ed4:	2302      	movs	r3, #2
 8001ed6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001edc:	2300      	movs	r3, #0
 8001ede:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001ee4:	f107 030c 	add.w	r3, r7, #12
 8001ee8:	4619      	mov	r1, r3
 8001eea:	480d      	ldr	r0, [pc, #52]	@ (8001f20 <MX_TIM4_Init+0xa4>)
 8001eec:	f00a f892 	bl	800c014 <HAL_TIM_Encoder_Init>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d001      	beq.n	8001efa <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8001ef6:	f7ff fa1c 	bl	8001332 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001efa:	2300      	movs	r3, #0
 8001efc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001efe:	2300      	movs	r3, #0
 8001f00:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001f02:	463b      	mov	r3, r7
 8001f04:	4619      	mov	r1, r3
 8001f06:	4806      	ldr	r0, [pc, #24]	@ (8001f20 <MX_TIM4_Init+0xa4>)
 8001f08:	f00b f954 	bl	800d1b4 <HAL_TIMEx_MasterConfigSynchronization>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d001      	beq.n	8001f16 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8001f12:	f7ff fa0e 	bl	8001332 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001f16:	bf00      	nop
 8001f18:	3730      	adds	r7, #48	@ 0x30
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	bf00      	nop
 8001f20:	240006c4 	.word	0x240006c4
 8001f24:	40000800 	.word	0x40000800

08001f28 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b08a      	sub	sp, #40	@ 0x28
 8001f2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f2e:	f107 031c 	add.w	r3, r7, #28
 8001f32:	2200      	movs	r2, #0
 8001f34:	601a      	str	r2, [r3, #0]
 8001f36:	605a      	str	r2, [r3, #4]
 8001f38:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f3a:	463b      	mov	r3, r7
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	601a      	str	r2, [r3, #0]
 8001f40:	605a      	str	r2, [r3, #4]
 8001f42:	609a      	str	r2, [r3, #8]
 8001f44:	60da      	str	r2, [r3, #12]
 8001f46:	611a      	str	r2, [r3, #16]
 8001f48:	615a      	str	r2, [r3, #20]
 8001f4a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001f4c:	4b26      	ldr	r3, [pc, #152]	@ (8001fe8 <MX_TIM5_Init+0xc0>)
 8001f4e:	4a27      	ldr	r2, [pc, #156]	@ (8001fec <MX_TIM5_Init+0xc4>)
 8001f50:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001f52:	4b25      	ldr	r3, [pc, #148]	@ (8001fe8 <MX_TIM5_Init+0xc0>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f58:	4b23      	ldr	r3, [pc, #140]	@ (8001fe8 <MX_TIM5_Init+0xc0>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 0;
 8001f5e:	4b22      	ldr	r3, [pc, #136]	@ (8001fe8 <MX_TIM5_Init+0xc0>)
 8001f60:	2200      	movs	r2, #0
 8001f62:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f64:	4b20      	ldr	r3, [pc, #128]	@ (8001fe8 <MX_TIM5_Init+0xc0>)
 8001f66:	2200      	movs	r2, #0
 8001f68:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f6a:	4b1f      	ldr	r3, [pc, #124]	@ (8001fe8 <MX_TIM5_Init+0xc0>)
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001f70:	481d      	ldr	r0, [pc, #116]	@ (8001fe8 <MX_TIM5_Init+0xc0>)
 8001f72:	f009 fee9 	bl	800bd48 <HAL_TIM_PWM_Init>
 8001f76:	4603      	mov	r3, r0
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d001      	beq.n	8001f80 <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 8001f7c:	f7ff f9d9 	bl	8001332 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f80:	2300      	movs	r3, #0
 8001f82:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f84:	2300      	movs	r3, #0
 8001f86:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001f88:	f107 031c 	add.w	r3, r7, #28
 8001f8c:	4619      	mov	r1, r3
 8001f8e:	4816      	ldr	r0, [pc, #88]	@ (8001fe8 <MX_TIM5_Init+0xc0>)
 8001f90:	f00b f910 	bl	800d1b4 <HAL_TIMEx_MasterConfigSynchronization>
 8001f94:	4603      	mov	r3, r0
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d001      	beq.n	8001f9e <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 8001f9a:	f7ff f9ca 	bl	8001332 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f9e:	2360      	movs	r3, #96	@ 0x60
 8001fa0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001faa:	2300      	movs	r3, #0
 8001fac:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001fae:	463b      	mov	r3, r7
 8001fb0:	2204      	movs	r2, #4
 8001fb2:	4619      	mov	r1, r3
 8001fb4:	480c      	ldr	r0, [pc, #48]	@ (8001fe8 <MX_TIM5_Init+0xc0>)
 8001fb6:	f00a fa89 	bl	800c4cc <HAL_TIM_PWM_ConfigChannel>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d001      	beq.n	8001fc4 <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 8001fc0:	f7ff f9b7 	bl	8001332 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001fc4:	463b      	mov	r3, r7
 8001fc6:	220c      	movs	r2, #12
 8001fc8:	4619      	mov	r1, r3
 8001fca:	4807      	ldr	r0, [pc, #28]	@ (8001fe8 <MX_TIM5_Init+0xc0>)
 8001fcc:	f00a fa7e 	bl	800c4cc <HAL_TIM_PWM_ConfigChannel>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d001      	beq.n	8001fda <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 8001fd6:	f7ff f9ac 	bl	8001332 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001fda:	4803      	ldr	r0, [pc, #12]	@ (8001fe8 <MX_TIM5_Init+0xc0>)
 8001fdc:	f000 fb04 	bl	80025e8 <HAL_TIM_MspPostInit>

}
 8001fe0:	bf00      	nop
 8001fe2:	3728      	adds	r7, #40	@ 0x28
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}
 8001fe8:	24000710 	.word	0x24000710
 8001fec:	40000c00 	.word	0x40000c00

08001ff0 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b08c      	sub	sp, #48	@ 0x30
 8001ff4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001ff6:	f107 030c 	add.w	r3, r7, #12
 8001ffa:	2224      	movs	r2, #36	@ 0x24
 8001ffc:	2100      	movs	r1, #0
 8001ffe:	4618      	mov	r0, r3
 8002000:	f010 ffef 	bl	8012fe2 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002004:	463b      	mov	r3, r7
 8002006:	2200      	movs	r2, #0
 8002008:	601a      	str	r2, [r3, #0]
 800200a:	605a      	str	r2, [r3, #4]
 800200c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800200e:	4b23      	ldr	r3, [pc, #140]	@ (800209c <MX_TIM8_Init+0xac>)
 8002010:	4a23      	ldr	r2, [pc, #140]	@ (80020a0 <MX_TIM8_Init+0xb0>)
 8002012:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8002014:	4b21      	ldr	r3, [pc, #132]	@ (800209c <MX_TIM8_Init+0xac>)
 8002016:	2200      	movs	r2, #0
 8002018:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800201a:	4b20      	ldr	r3, [pc, #128]	@ (800209c <MX_TIM8_Init+0xac>)
 800201c:	2200      	movs	r2, #0
 800201e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8002020:	4b1e      	ldr	r3, [pc, #120]	@ (800209c <MX_TIM8_Init+0xac>)
 8002022:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002026:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002028:	4b1c      	ldr	r3, [pc, #112]	@ (800209c <MX_TIM8_Init+0xac>)
 800202a:	2200      	movs	r2, #0
 800202c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800202e:	4b1b      	ldr	r3, [pc, #108]	@ (800209c <MX_TIM8_Init+0xac>)
 8002030:	2200      	movs	r2, #0
 8002032:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002034:	4b19      	ldr	r3, [pc, #100]	@ (800209c <MX_TIM8_Init+0xac>)
 8002036:	2200      	movs	r2, #0
 8002038:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800203a:	2303      	movs	r3, #3
 800203c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 800203e:	2302      	movs	r3, #2
 8002040:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002042:	2301      	movs	r3, #1
 8002044:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002046:	2300      	movs	r3, #0
 8002048:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800204a:	2300      	movs	r3, #0
 800204c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 800204e:	2302      	movs	r3, #2
 8002050:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002052:	2301      	movs	r3, #1
 8002054:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002056:	2300      	movs	r3, #0
 8002058:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800205a:	2300      	movs	r3, #0
 800205c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 800205e:	f107 030c 	add.w	r3, r7, #12
 8002062:	4619      	mov	r1, r3
 8002064:	480d      	ldr	r0, [pc, #52]	@ (800209c <MX_TIM8_Init+0xac>)
 8002066:	f009 ffd5 	bl	800c014 <HAL_TIM_Encoder_Init>
 800206a:	4603      	mov	r3, r0
 800206c:	2b00      	cmp	r3, #0
 800206e:	d001      	beq.n	8002074 <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 8002070:	f7ff f95f 	bl	8001332 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002074:	2300      	movs	r3, #0
 8002076:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002078:	2300      	movs	r3, #0
 800207a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800207c:	2300      	movs	r3, #0
 800207e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002080:	463b      	mov	r3, r7
 8002082:	4619      	mov	r1, r3
 8002084:	4805      	ldr	r0, [pc, #20]	@ (800209c <MX_TIM8_Init+0xac>)
 8002086:	f00b f895 	bl	800d1b4 <HAL_TIMEx_MasterConfigSynchronization>
 800208a:	4603      	mov	r3, r0
 800208c:	2b00      	cmp	r3, #0
 800208e:	d001      	beq.n	8002094 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8002090:	f7ff f94f 	bl	8001332 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8002094:	bf00      	nop
 8002096:	3730      	adds	r7, #48	@ 0x30
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}
 800209c:	2400075c 	.word	0x2400075c
 80020a0:	40010400 	.word	0x40010400

080020a4 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b088      	sub	sp, #32
 80020a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80020aa:	f107 0310 	add.w	r3, r7, #16
 80020ae:	2200      	movs	r2, #0
 80020b0:	601a      	str	r2, [r3, #0]
 80020b2:	605a      	str	r2, [r3, #4]
 80020b4:	609a      	str	r2, [r3, #8]
 80020b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020b8:	1d3b      	adds	r3, r7, #4
 80020ba:	2200      	movs	r2, #0
 80020bc:	601a      	str	r2, [r3, #0]
 80020be:	605a      	str	r2, [r3, #4]
 80020c0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80020c2:	4b1f      	ldr	r3, [pc, #124]	@ (8002140 <MX_TIM15_Init+0x9c>)
 80020c4:	4a1f      	ldr	r2, [pc, #124]	@ (8002144 <MX_TIM15_Init+0xa0>)
 80020c6:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 19999;
 80020c8:	4b1d      	ldr	r3, [pc, #116]	@ (8002140 <MX_TIM15_Init+0x9c>)
 80020ca:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80020ce:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020d0:	4b1b      	ldr	r3, [pc, #108]	@ (8002140 <MX_TIM15_Init+0x9c>)
 80020d2:	2200      	movs	r2, #0
 80020d4:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 99;
 80020d6:	4b1a      	ldr	r3, [pc, #104]	@ (8002140 <MX_TIM15_Init+0x9c>)
 80020d8:	2263      	movs	r2, #99	@ 0x63
 80020da:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020dc:	4b18      	ldr	r3, [pc, #96]	@ (8002140 <MX_TIM15_Init+0x9c>)
 80020de:	2200      	movs	r2, #0
 80020e0:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80020e2:	4b17      	ldr	r3, [pc, #92]	@ (8002140 <MX_TIM15_Init+0x9c>)
 80020e4:	2200      	movs	r2, #0
 80020e6:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020e8:	4b15      	ldr	r3, [pc, #84]	@ (8002140 <MX_TIM15_Init+0x9c>)
 80020ea:	2200      	movs	r2, #0
 80020ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 80020ee:	4814      	ldr	r0, [pc, #80]	@ (8002140 <MX_TIM15_Init+0x9c>)
 80020f0:	f009 fd5a 	bl	800bba8 <HAL_TIM_Base_Init>
 80020f4:	4603      	mov	r3, r0
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d001      	beq.n	80020fe <MX_TIM15_Init+0x5a>
  {
    Error_Handler();
 80020fa:	f7ff f91a 	bl	8001332 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020fe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002102:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8002104:	f107 0310 	add.w	r3, r7, #16
 8002108:	4619      	mov	r1, r3
 800210a:	480d      	ldr	r0, [pc, #52]	@ (8002140 <MX_TIM15_Init+0x9c>)
 800210c:	f00a faf2 	bl	800c6f4 <HAL_TIM_ConfigClockSource>
 8002110:	4603      	mov	r3, r0
 8002112:	2b00      	cmp	r3, #0
 8002114:	d001      	beq.n	800211a <MX_TIM15_Init+0x76>
  {
    Error_Handler();
 8002116:	f7ff f90c 	bl	8001332 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800211a:	2300      	movs	r3, #0
 800211c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800211e:	2300      	movs	r3, #0
 8002120:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8002122:	1d3b      	adds	r3, r7, #4
 8002124:	4619      	mov	r1, r3
 8002126:	4806      	ldr	r0, [pc, #24]	@ (8002140 <MX_TIM15_Init+0x9c>)
 8002128:	f00b f844 	bl	800d1b4 <HAL_TIMEx_MasterConfigSynchronization>
 800212c:	4603      	mov	r3, r0
 800212e:	2b00      	cmp	r3, #0
 8002130:	d001      	beq.n	8002136 <MX_TIM15_Init+0x92>
  {
    Error_Handler();
 8002132:	f7ff f8fe 	bl	8001332 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8002136:	bf00      	nop
 8002138:	3720      	adds	r7, #32
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	240007a8 	.word	0x240007a8
 8002144:	40014000 	.word	0x40014000

08002148 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b090      	sub	sp, #64	@ 0x40
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002150:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002154:	2200      	movs	r2, #0
 8002156:	601a      	str	r2, [r3, #0]
 8002158:	605a      	str	r2, [r3, #4]
 800215a:	609a      	str	r2, [r3, #8]
 800215c:	60da      	str	r2, [r3, #12]
 800215e:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a6d      	ldr	r2, [pc, #436]	@ (800231c <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d12f      	bne.n	80021ca <HAL_TIM_Encoder_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800216a:	4b6d      	ldr	r3, [pc, #436]	@ (8002320 <HAL_TIM_Encoder_MspInit+0x1d8>)
 800216c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002170:	4a6b      	ldr	r2, [pc, #428]	@ (8002320 <HAL_TIM_Encoder_MspInit+0x1d8>)
 8002172:	f043 0301 	orr.w	r3, r3, #1
 8002176:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800217a:	4b69      	ldr	r3, [pc, #420]	@ (8002320 <HAL_TIM_Encoder_MspInit+0x1d8>)
 800217c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002180:	f003 0301 	and.w	r3, r3, #1
 8002184:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002186:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002188:	4b65      	ldr	r3, [pc, #404]	@ (8002320 <HAL_TIM_Encoder_MspInit+0x1d8>)
 800218a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800218e:	4a64      	ldr	r2, [pc, #400]	@ (8002320 <HAL_TIM_Encoder_MspInit+0x1d8>)
 8002190:	f043 0310 	orr.w	r3, r3, #16
 8002194:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002198:	4b61      	ldr	r3, [pc, #388]	@ (8002320 <HAL_TIM_Encoder_MspInit+0x1d8>)
 800219a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800219e:	f003 0310 	and.w	r3, r3, #16
 80021a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80021a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = ENC2_A_Pin|ENC2_B_Pin;
 80021a6:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 80021aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ac:	2302      	movs	r3, #2
 80021ae:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b0:	2300      	movs	r3, #0
 80021b2:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021b4:	2300      	movs	r3, #0
 80021b6:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80021b8:	2301      	movs	r3, #1
 80021ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80021bc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80021c0:	4619      	mov	r1, r3
 80021c2:	4858      	ldr	r0, [pc, #352]	@ (8002324 <HAL_TIM_Encoder_MspInit+0x1dc>)
 80021c4:	f004 faf2 	bl	80067ac <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 80021c8:	e0a3      	b.n	8002312 <HAL_TIM_Encoder_MspInit+0x1ca>
  else if(tim_encoderHandle->Instance==TIM3)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4a56      	ldr	r2, [pc, #344]	@ (8002328 <HAL_TIM_Encoder_MspInit+0x1e0>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d12e      	bne.n	8002232 <HAL_TIM_Encoder_MspInit+0xea>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80021d4:	4b52      	ldr	r3, [pc, #328]	@ (8002320 <HAL_TIM_Encoder_MspInit+0x1d8>)
 80021d6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80021da:	4a51      	ldr	r2, [pc, #324]	@ (8002320 <HAL_TIM_Encoder_MspInit+0x1d8>)
 80021dc:	f043 0302 	orr.w	r3, r3, #2
 80021e0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80021e4:	4b4e      	ldr	r3, [pc, #312]	@ (8002320 <HAL_TIM_Encoder_MspInit+0x1d8>)
 80021e6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80021ea:	f003 0302 	and.w	r3, r3, #2
 80021ee:	623b      	str	r3, [r7, #32]
 80021f0:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021f2:	4b4b      	ldr	r3, [pc, #300]	@ (8002320 <HAL_TIM_Encoder_MspInit+0x1d8>)
 80021f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80021f8:	4a49      	ldr	r2, [pc, #292]	@ (8002320 <HAL_TIM_Encoder_MspInit+0x1d8>)
 80021fa:	f043 0302 	orr.w	r3, r3, #2
 80021fe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002202:	4b47      	ldr	r3, [pc, #284]	@ (8002320 <HAL_TIM_Encoder_MspInit+0x1d8>)
 8002204:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002208:	f003 0302 	and.w	r3, r3, #2
 800220c:	61fb      	str	r3, [r7, #28]
 800220e:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = ENC4_A_Pin|ENC4_B_Pin;
 8002210:	2330      	movs	r3, #48	@ 0x30
 8002212:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002214:	2302      	movs	r3, #2
 8002216:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002218:	2300      	movs	r3, #0
 800221a:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800221c:	2300      	movs	r3, #0
 800221e:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002220:	2302      	movs	r3, #2
 8002222:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002224:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002228:	4619      	mov	r1, r3
 800222a:	4840      	ldr	r0, [pc, #256]	@ (800232c <HAL_TIM_Encoder_MspInit+0x1e4>)
 800222c:	f004 fabe 	bl	80067ac <HAL_GPIO_Init>
}
 8002230:	e06f      	b.n	8002312 <HAL_TIM_Encoder_MspInit+0x1ca>
  else if(tim_encoderHandle->Instance==TIM4)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a3e      	ldr	r2, [pc, #248]	@ (8002330 <HAL_TIM_Encoder_MspInit+0x1e8>)
 8002238:	4293      	cmp	r3, r2
 800223a:	d137      	bne.n	80022ac <HAL_TIM_Encoder_MspInit+0x164>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800223c:	4b38      	ldr	r3, [pc, #224]	@ (8002320 <HAL_TIM_Encoder_MspInit+0x1d8>)
 800223e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002242:	4a37      	ldr	r2, [pc, #220]	@ (8002320 <HAL_TIM_Encoder_MspInit+0x1d8>)
 8002244:	f043 0304 	orr.w	r3, r3, #4
 8002248:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800224c:	4b34      	ldr	r3, [pc, #208]	@ (8002320 <HAL_TIM_Encoder_MspInit+0x1d8>)
 800224e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002252:	f003 0304 	and.w	r3, r3, #4
 8002256:	61bb      	str	r3, [r7, #24]
 8002258:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800225a:	4b31      	ldr	r3, [pc, #196]	@ (8002320 <HAL_TIM_Encoder_MspInit+0x1d8>)
 800225c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002260:	4a2f      	ldr	r2, [pc, #188]	@ (8002320 <HAL_TIM_Encoder_MspInit+0x1d8>)
 8002262:	f043 0308 	orr.w	r3, r3, #8
 8002266:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800226a:	4b2d      	ldr	r3, [pc, #180]	@ (8002320 <HAL_TIM_Encoder_MspInit+0x1d8>)
 800226c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002270:	f003 0308 	and.w	r3, r3, #8
 8002274:	617b      	str	r3, [r7, #20]
 8002276:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ENC1_A_Pin|ENC1_B_Pin;
 8002278:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 800227c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800227e:	2302      	movs	r3, #2
 8002280:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002282:	2300      	movs	r3, #0
 8002284:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002286:	2300      	movs	r3, #0
 8002288:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800228a:	2302      	movs	r3, #2
 800228c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800228e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002292:	4619      	mov	r1, r3
 8002294:	4827      	ldr	r0, [pc, #156]	@ (8002334 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8002296:	f004 fa89 	bl	80067ac <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800229a:	2200      	movs	r2, #0
 800229c:	2100      	movs	r1, #0
 800229e:	201e      	movs	r0, #30
 80022a0:	f002 f8f3 	bl	800448a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80022a4:	201e      	movs	r0, #30
 80022a6:	f002 f90a 	bl	80044be <HAL_NVIC_EnableIRQ>
}
 80022aa:	e032      	b.n	8002312 <HAL_TIM_Encoder_MspInit+0x1ca>
  else if(tim_encoderHandle->Instance==TIM8)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a21      	ldr	r2, [pc, #132]	@ (8002338 <HAL_TIM_Encoder_MspInit+0x1f0>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d12d      	bne.n	8002312 <HAL_TIM_Encoder_MspInit+0x1ca>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80022b6:	4b1a      	ldr	r3, [pc, #104]	@ (8002320 <HAL_TIM_Encoder_MspInit+0x1d8>)
 80022b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80022bc:	4a18      	ldr	r2, [pc, #96]	@ (8002320 <HAL_TIM_Encoder_MspInit+0x1d8>)
 80022be:	f043 0302 	orr.w	r3, r3, #2
 80022c2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80022c6:	4b16      	ldr	r3, [pc, #88]	@ (8002320 <HAL_TIM_Encoder_MspInit+0x1d8>)
 80022c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80022cc:	f003 0302 	and.w	r3, r3, #2
 80022d0:	613b      	str	r3, [r7, #16]
 80022d2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80022d4:	4b12      	ldr	r3, [pc, #72]	@ (8002320 <HAL_TIM_Encoder_MspInit+0x1d8>)
 80022d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80022da:	4a11      	ldr	r2, [pc, #68]	@ (8002320 <HAL_TIM_Encoder_MspInit+0x1d8>)
 80022dc:	f043 0304 	orr.w	r3, r3, #4
 80022e0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80022e4:	4b0e      	ldr	r3, [pc, #56]	@ (8002320 <HAL_TIM_Encoder_MspInit+0x1d8>)
 80022e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80022ea:	f003 0304 	and.w	r3, r3, #4
 80022ee:	60fb      	str	r3, [r7, #12]
 80022f0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ENC3_A_Pin|ENC3_B_Pin;
 80022f2:	23c0      	movs	r3, #192	@ 0xc0
 80022f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022f6:	2302      	movs	r3, #2
 80022f8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022fa:	2300      	movs	r3, #0
 80022fc:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022fe:	2300      	movs	r3, #0
 8002300:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002302:	2303      	movs	r3, #3
 8002304:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002306:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800230a:	4619      	mov	r1, r3
 800230c:	480b      	ldr	r0, [pc, #44]	@ (800233c <HAL_TIM_Encoder_MspInit+0x1f4>)
 800230e:	f004 fa4d 	bl	80067ac <HAL_GPIO_Init>
}
 8002312:	bf00      	nop
 8002314:	3740      	adds	r7, #64	@ 0x40
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}
 800231a:	bf00      	nop
 800231c:	40010000 	.word	0x40010000
 8002320:	58024400 	.word	0x58024400
 8002324:	58021000 	.word	0x58021000
 8002328:	40000400 	.word	0x40000400
 800232c:	58020400 	.word	0x58020400
 8002330:	40000800 	.word	0x40000800
 8002334:	58020c00 	.word	0x58020c00
 8002338:	40010400 	.word	0x40010400
 800233c:	58020800 	.word	0x58020800

08002340 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b084      	sub	sp, #16
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002350:	f040 8082 	bne.w	8002458 <HAL_TIM_PWM_MspInit+0x118>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002354:	4b86      	ldr	r3, [pc, #536]	@ (8002570 <HAL_TIM_PWM_MspInit+0x230>)
 8002356:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800235a:	4a85      	ldr	r2, [pc, #532]	@ (8002570 <HAL_TIM_PWM_MspInit+0x230>)
 800235c:	f043 0301 	orr.w	r3, r3, #1
 8002360:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002364:	4b82      	ldr	r3, [pc, #520]	@ (8002570 <HAL_TIM_PWM_MspInit+0x230>)
 8002366:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800236a:	f003 0301 	and.w	r3, r3, #1
 800236e:	60fb      	str	r3, [r7, #12]
 8002370:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 DMA Init */
    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Stream5;
 8002372:	4b80      	ldr	r3, [pc, #512]	@ (8002574 <HAL_TIM_PWM_MspInit+0x234>)
 8002374:	4a80      	ldr	r2, [pc, #512]	@ (8002578 <HAL_TIM_PWM_MspInit+0x238>)
 8002376:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Request = DMA_REQUEST_TIM2_CH1;
 8002378:	4b7e      	ldr	r3, [pc, #504]	@ (8002574 <HAL_TIM_PWM_MspInit+0x234>)
 800237a:	2212      	movs	r2, #18
 800237c:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800237e:	4b7d      	ldr	r3, [pc, #500]	@ (8002574 <HAL_TIM_PWM_MspInit+0x234>)
 8002380:	2240      	movs	r2, #64	@ 0x40
 8002382:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002384:	4b7b      	ldr	r3, [pc, #492]	@ (8002574 <HAL_TIM_PWM_MspInit+0x234>)
 8002386:	2200      	movs	r2, #0
 8002388:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800238a:	4b7a      	ldr	r3, [pc, #488]	@ (8002574 <HAL_TIM_PWM_MspInit+0x234>)
 800238c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002390:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002392:	4b78      	ldr	r3, [pc, #480]	@ (8002574 <HAL_TIM_PWM_MspInit+0x234>)
 8002394:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002398:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800239a:	4b76      	ldr	r3, [pc, #472]	@ (8002574 <HAL_TIM_PWM_MspInit+0x234>)
 800239c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80023a0:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Mode = DMA_NORMAL;
 80023a2:	4b74      	ldr	r3, [pc, #464]	@ (8002574 <HAL_TIM_PWM_MspInit+0x234>)
 80023a4:	2200      	movs	r2, #0
 80023a6:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 80023a8:	4b72      	ldr	r3, [pc, #456]	@ (8002574 <HAL_TIM_PWM_MspInit+0x234>)
 80023aa:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80023ae:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80023b0:	4b70      	ldr	r3, [pc, #448]	@ (8002574 <HAL_TIM_PWM_MspInit+0x234>)
 80023b2:	2204      	movs	r2, #4
 80023b4:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_tim2_ch1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 80023b6:	4b6f      	ldr	r3, [pc, #444]	@ (8002574 <HAL_TIM_PWM_MspInit+0x234>)
 80023b8:	2200      	movs	r2, #0
 80023ba:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_tim2_ch1.Init.MemBurst = DMA_MBURST_SINGLE;
 80023bc:	4b6d      	ldr	r3, [pc, #436]	@ (8002574 <HAL_TIM_PWM_MspInit+0x234>)
 80023be:	2200      	movs	r2, #0
 80023c0:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_tim2_ch1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80023c2:	4b6c      	ldr	r3, [pc, #432]	@ (8002574 <HAL_TIM_PWM_MspInit+0x234>)
 80023c4:	2200      	movs	r2, #0
 80023c6:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 80023c8:	486a      	ldr	r0, [pc, #424]	@ (8002574 <HAL_TIM_PWM_MspInit+0x234>)
 80023ca:	f002 f8a7 	bl	800451c <HAL_DMA_Init>
 80023ce:	4603      	mov	r3, r0
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d001      	beq.n	80023d8 <HAL_TIM_PWM_MspInit+0x98>
    {
      Error_Handler();
 80023d4:	f7fe ffad 	bl	8001332 <Error_Handler>
    }

    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	4a66      	ldr	r2, [pc, #408]	@ (8002574 <HAL_TIM_PWM_MspInit+0x234>)
 80023dc:	625a      	str	r2, [r3, #36]	@ 0x24
 80023de:	4a65      	ldr	r2, [pc, #404]	@ (8002574 <HAL_TIM_PWM_MspInit+0x234>)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6393      	str	r3, [r2, #56]	@ 0x38

    /* TIM2_CH3 Init */
    hdma_tim2_ch3.Instance = DMA1_Stream1;
 80023e4:	4b65      	ldr	r3, [pc, #404]	@ (800257c <HAL_TIM_PWM_MspInit+0x23c>)
 80023e6:	4a66      	ldr	r2, [pc, #408]	@ (8002580 <HAL_TIM_PWM_MspInit+0x240>)
 80023e8:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch3.Init.Request = DMA_REQUEST_TIM2_CH3;
 80023ea:	4b64      	ldr	r3, [pc, #400]	@ (800257c <HAL_TIM_PWM_MspInit+0x23c>)
 80023ec:	2214      	movs	r2, #20
 80023ee:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80023f0:	4b62      	ldr	r3, [pc, #392]	@ (800257c <HAL_TIM_PWM_MspInit+0x23c>)
 80023f2:	2240      	movs	r2, #64	@ 0x40
 80023f4:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 80023f6:	4b61      	ldr	r3, [pc, #388]	@ (800257c <HAL_TIM_PWM_MspInit+0x23c>)
 80023f8:	2200      	movs	r2, #0
 80023fa:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch3.Init.MemInc = DMA_MINC_ENABLE;
 80023fc:	4b5f      	ldr	r3, [pc, #380]	@ (800257c <HAL_TIM_PWM_MspInit+0x23c>)
 80023fe:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002402:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002404:	4b5d      	ldr	r3, [pc, #372]	@ (800257c <HAL_TIM_PWM_MspInit+0x23c>)
 8002406:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800240a:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800240c:	4b5b      	ldr	r3, [pc, #364]	@ (800257c <HAL_TIM_PWM_MspInit+0x23c>)
 800240e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002412:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch3.Init.Mode = DMA_NORMAL;
 8002414:	4b59      	ldr	r3, [pc, #356]	@ (800257c <HAL_TIM_PWM_MspInit+0x23c>)
 8002416:	2200      	movs	r2, #0
 8002418:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch3.Init.Priority = DMA_PRIORITY_HIGH;
 800241a:	4b58      	ldr	r3, [pc, #352]	@ (800257c <HAL_TIM_PWM_MspInit+0x23c>)
 800241c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002420:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch3.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002422:	4b56      	ldr	r3, [pc, #344]	@ (800257c <HAL_TIM_PWM_MspInit+0x23c>)
 8002424:	2204      	movs	r2, #4
 8002426:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_tim2_ch3.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 8002428:	4b54      	ldr	r3, [pc, #336]	@ (800257c <HAL_TIM_PWM_MspInit+0x23c>)
 800242a:	2200      	movs	r2, #0
 800242c:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_tim2_ch3.Init.MemBurst = DMA_MBURST_SINGLE;
 800242e:	4b53      	ldr	r3, [pc, #332]	@ (800257c <HAL_TIM_PWM_MspInit+0x23c>)
 8002430:	2200      	movs	r2, #0
 8002432:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_tim2_ch3.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8002434:	4b51      	ldr	r3, [pc, #324]	@ (800257c <HAL_TIM_PWM_MspInit+0x23c>)
 8002436:	2200      	movs	r2, #0
 8002438:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_tim2_ch3) != HAL_OK)
 800243a:	4850      	ldr	r0, [pc, #320]	@ (800257c <HAL_TIM_PWM_MspInit+0x23c>)
 800243c:	f002 f86e 	bl	800451c <HAL_DMA_Init>
 8002440:	4603      	mov	r3, r0
 8002442:	2b00      	cmp	r3, #0
 8002444:	d001      	beq.n	800244a <HAL_TIM_PWM_MspInit+0x10a>
    {
      Error_Handler();
 8002446:	f7fe ff74 	bl	8001332 <Error_Handler>
    }

    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC3],hdma_tim2_ch3);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	4a4b      	ldr	r2, [pc, #300]	@ (800257c <HAL_TIM_PWM_MspInit+0x23c>)
 800244e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002450:	4a4a      	ldr	r2, [pc, #296]	@ (800257c <HAL_TIM_PWM_MspInit+0x23c>)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8002456:	e086      	b.n	8002566 <HAL_TIM_PWM_MspInit+0x226>
  else if(tim_pwmHandle->Instance==TIM5)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a49      	ldr	r2, [pc, #292]	@ (8002584 <HAL_TIM_PWM_MspInit+0x244>)
 800245e:	4293      	cmp	r3, r2
 8002460:	f040 8081 	bne.w	8002566 <HAL_TIM_PWM_MspInit+0x226>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002464:	4b42      	ldr	r3, [pc, #264]	@ (8002570 <HAL_TIM_PWM_MspInit+0x230>)
 8002466:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800246a:	4a41      	ldr	r2, [pc, #260]	@ (8002570 <HAL_TIM_PWM_MspInit+0x230>)
 800246c:	f043 0308 	orr.w	r3, r3, #8
 8002470:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002474:	4b3e      	ldr	r3, [pc, #248]	@ (8002570 <HAL_TIM_PWM_MspInit+0x230>)
 8002476:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800247a:	f003 0308 	and.w	r3, r3, #8
 800247e:	60bb      	str	r3, [r7, #8]
 8002480:	68bb      	ldr	r3, [r7, #8]
    hdma_tim5_ch4.Instance = DMA1_Stream3;
 8002482:	4b41      	ldr	r3, [pc, #260]	@ (8002588 <HAL_TIM_PWM_MspInit+0x248>)
 8002484:	4a41      	ldr	r2, [pc, #260]	@ (800258c <HAL_TIM_PWM_MspInit+0x24c>)
 8002486:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch4.Init.Request = DMA_REQUEST_TIM5_CH4;
 8002488:	4b3f      	ldr	r3, [pc, #252]	@ (8002588 <HAL_TIM_PWM_MspInit+0x248>)
 800248a:	223a      	movs	r2, #58	@ 0x3a
 800248c:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800248e:	4b3e      	ldr	r3, [pc, #248]	@ (8002588 <HAL_TIM_PWM_MspInit+0x248>)
 8002490:	2240      	movs	r2, #64	@ 0x40
 8002492:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 8002494:	4b3c      	ldr	r3, [pc, #240]	@ (8002588 <HAL_TIM_PWM_MspInit+0x248>)
 8002496:	2200      	movs	r2, #0
 8002498:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch4.Init.MemInc = DMA_MINC_ENABLE;
 800249a:	4b3b      	ldr	r3, [pc, #236]	@ (8002588 <HAL_TIM_PWM_MspInit+0x248>)
 800249c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80024a0:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80024a2:	4b39      	ldr	r3, [pc, #228]	@ (8002588 <HAL_TIM_PWM_MspInit+0x248>)
 80024a4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80024a8:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80024aa:	4b37      	ldr	r3, [pc, #220]	@ (8002588 <HAL_TIM_PWM_MspInit+0x248>)
 80024ac:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80024b0:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch4.Init.Mode = DMA_NORMAL;
 80024b2:	4b35      	ldr	r3, [pc, #212]	@ (8002588 <HAL_TIM_PWM_MspInit+0x248>)
 80024b4:	2200      	movs	r2, #0
 80024b6:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch4.Init.Priority = DMA_PRIORITY_HIGH;
 80024b8:	4b33      	ldr	r3, [pc, #204]	@ (8002588 <HAL_TIM_PWM_MspInit+0x248>)
 80024ba:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80024be:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch4.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80024c0:	4b31      	ldr	r3, [pc, #196]	@ (8002588 <HAL_TIM_PWM_MspInit+0x248>)
 80024c2:	2204      	movs	r2, #4
 80024c4:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_tim5_ch4.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 80024c6:	4b30      	ldr	r3, [pc, #192]	@ (8002588 <HAL_TIM_PWM_MspInit+0x248>)
 80024c8:	2200      	movs	r2, #0
 80024ca:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_tim5_ch4.Init.MemBurst = DMA_MBURST_SINGLE;
 80024cc:	4b2e      	ldr	r3, [pc, #184]	@ (8002588 <HAL_TIM_PWM_MspInit+0x248>)
 80024ce:	2200      	movs	r2, #0
 80024d0:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_tim5_ch4.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80024d2:	4b2d      	ldr	r3, [pc, #180]	@ (8002588 <HAL_TIM_PWM_MspInit+0x248>)
 80024d4:	2200      	movs	r2, #0
 80024d6:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_tim5_ch4) != HAL_OK)
 80024d8:	482b      	ldr	r0, [pc, #172]	@ (8002588 <HAL_TIM_PWM_MspInit+0x248>)
 80024da:	f002 f81f 	bl	800451c <HAL_DMA_Init>
 80024de:	4603      	mov	r3, r0
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d001      	beq.n	80024e8 <HAL_TIM_PWM_MspInit+0x1a8>
      Error_Handler();
 80024e4:	f7fe ff25 	bl	8001332 <Error_Handler>
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC4],hdma_tim5_ch4);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	4a27      	ldr	r2, [pc, #156]	@ (8002588 <HAL_TIM_PWM_MspInit+0x248>)
 80024ec:	631a      	str	r2, [r3, #48]	@ 0x30
 80024ee:	4a26      	ldr	r2, [pc, #152]	@ (8002588 <HAL_TIM_PWM_MspInit+0x248>)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_tim5_ch2.Instance = DMA1_Stream4;
 80024f4:	4b26      	ldr	r3, [pc, #152]	@ (8002590 <HAL_TIM_PWM_MspInit+0x250>)
 80024f6:	4a27      	ldr	r2, [pc, #156]	@ (8002594 <HAL_TIM_PWM_MspInit+0x254>)
 80024f8:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch2.Init.Request = DMA_REQUEST_TIM5_CH2;
 80024fa:	4b25      	ldr	r3, [pc, #148]	@ (8002590 <HAL_TIM_PWM_MspInit+0x250>)
 80024fc:	2238      	movs	r2, #56	@ 0x38
 80024fe:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002500:	4b23      	ldr	r3, [pc, #140]	@ (8002590 <HAL_TIM_PWM_MspInit+0x250>)
 8002502:	2240      	movs	r2, #64	@ 0x40
 8002504:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8002506:	4b22      	ldr	r3, [pc, #136]	@ (8002590 <HAL_TIM_PWM_MspInit+0x250>)
 8002508:	2200      	movs	r2, #0
 800250a:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch2.Init.MemInc = DMA_MINC_ENABLE;
 800250c:	4b20      	ldr	r3, [pc, #128]	@ (8002590 <HAL_TIM_PWM_MspInit+0x250>)
 800250e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002512:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002514:	4b1e      	ldr	r3, [pc, #120]	@ (8002590 <HAL_TIM_PWM_MspInit+0x250>)
 8002516:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800251a:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800251c:	4b1c      	ldr	r3, [pc, #112]	@ (8002590 <HAL_TIM_PWM_MspInit+0x250>)
 800251e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002522:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch2.Init.Mode = DMA_NORMAL;
 8002524:	4b1a      	ldr	r3, [pc, #104]	@ (8002590 <HAL_TIM_PWM_MspInit+0x250>)
 8002526:	2200      	movs	r2, #0
 8002528:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch2.Init.Priority = DMA_PRIORITY_HIGH;
 800252a:	4b19      	ldr	r3, [pc, #100]	@ (8002590 <HAL_TIM_PWM_MspInit+0x250>)
 800252c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002530:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch2.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002532:	4b17      	ldr	r3, [pc, #92]	@ (8002590 <HAL_TIM_PWM_MspInit+0x250>)
 8002534:	2204      	movs	r2, #4
 8002536:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_tim5_ch2.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 8002538:	4b15      	ldr	r3, [pc, #84]	@ (8002590 <HAL_TIM_PWM_MspInit+0x250>)
 800253a:	2200      	movs	r2, #0
 800253c:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_tim5_ch2.Init.MemBurst = DMA_MBURST_SINGLE;
 800253e:	4b14      	ldr	r3, [pc, #80]	@ (8002590 <HAL_TIM_PWM_MspInit+0x250>)
 8002540:	2200      	movs	r2, #0
 8002542:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_tim5_ch2.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8002544:	4b12      	ldr	r3, [pc, #72]	@ (8002590 <HAL_TIM_PWM_MspInit+0x250>)
 8002546:	2200      	movs	r2, #0
 8002548:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_tim5_ch2) != HAL_OK)
 800254a:	4811      	ldr	r0, [pc, #68]	@ (8002590 <HAL_TIM_PWM_MspInit+0x250>)
 800254c:	f001 ffe6 	bl	800451c <HAL_DMA_Init>
 8002550:	4603      	mov	r3, r0
 8002552:	2b00      	cmp	r3, #0
 8002554:	d001      	beq.n	800255a <HAL_TIM_PWM_MspInit+0x21a>
      Error_Handler();
 8002556:	f7fe feec 	bl	8001332 <Error_Handler>
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC2],hdma_tim5_ch2);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	4a0c      	ldr	r2, [pc, #48]	@ (8002590 <HAL_TIM_PWM_MspInit+0x250>)
 800255e:	629a      	str	r2, [r3, #40]	@ 0x28
 8002560:	4a0b      	ldr	r2, [pc, #44]	@ (8002590 <HAL_TIM_PWM_MspInit+0x250>)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8002566:	bf00      	nop
 8002568:	3710      	adds	r7, #16
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}
 800256e:	bf00      	nop
 8002570:	58024400 	.word	0x58024400
 8002574:	240007f4 	.word	0x240007f4
 8002578:	40020088 	.word	0x40020088
 800257c:	2400086c 	.word	0x2400086c
 8002580:	40020028 	.word	0x40020028
 8002584:	40000c00 	.word	0x40000c00
 8002588:	240008e4 	.word	0x240008e4
 800258c:	40020058 	.word	0x40020058
 8002590:	2400095c 	.word	0x2400095c
 8002594:	40020070 	.word	0x40020070

08002598 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b084      	sub	sp, #16
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM15)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a0e      	ldr	r2, [pc, #56]	@ (80025e0 <HAL_TIM_Base_MspInit+0x48>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d116      	bne.n	80025d8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* TIM15 clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 80025aa:	4b0e      	ldr	r3, [pc, #56]	@ (80025e4 <HAL_TIM_Base_MspInit+0x4c>)
 80025ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80025b0:	4a0c      	ldr	r2, [pc, #48]	@ (80025e4 <HAL_TIM_Base_MspInit+0x4c>)
 80025b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025b6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80025ba:	4b0a      	ldr	r3, [pc, #40]	@ (80025e4 <HAL_TIM_Base_MspInit+0x4c>)
 80025bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80025c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80025c4:	60fb      	str	r3, [r7, #12]
 80025c6:	68fb      	ldr	r3, [r7, #12]

    /* TIM15 interrupt Init */
    HAL_NVIC_SetPriority(TIM15_IRQn, 0, 0);
 80025c8:	2200      	movs	r2, #0
 80025ca:	2100      	movs	r1, #0
 80025cc:	2074      	movs	r0, #116	@ 0x74
 80025ce:	f001 ff5c 	bl	800448a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
 80025d2:	2074      	movs	r0, #116	@ 0x74
 80025d4:	f001 ff73 	bl	80044be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 80025d8:	bf00      	nop
 80025da:	3710      	adds	r7, #16
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}
 80025e0:	40014000 	.word	0x40014000
 80025e4:	58024400 	.word	0x58024400

080025e8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b08a      	sub	sp, #40	@ 0x28
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025f0:	f107 0314 	add.w	r3, r7, #20
 80025f4:	2200      	movs	r2, #0
 80025f6:	601a      	str	r2, [r3, #0]
 80025f8:	605a      	str	r2, [r3, #4]
 80025fa:	609a      	str	r2, [r3, #8]
 80025fc:	60da      	str	r2, [r3, #12]
 80025fe:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002608:	d11f      	bne.n	800264a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800260a:	4b24      	ldr	r3, [pc, #144]	@ (800269c <HAL_TIM_MspPostInit+0xb4>)
 800260c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002610:	4a22      	ldr	r2, [pc, #136]	@ (800269c <HAL_TIM_MspPostInit+0xb4>)
 8002612:	f043 0301 	orr.w	r3, r3, #1
 8002616:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800261a:	4b20      	ldr	r3, [pc, #128]	@ (800269c <HAL_TIM_MspPostInit+0xb4>)
 800261c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002620:	f003 0301 	and.w	r3, r3, #1
 8002624:	613b      	str	r3, [r7, #16]
 8002626:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = M3_Pin|M2_Pin;
 8002628:	2305      	movs	r3, #5
 800262a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800262c:	2302      	movs	r3, #2
 800262e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002630:	2300      	movs	r3, #0
 8002632:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002634:	2300      	movs	r3, #0
 8002636:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002638:	2301      	movs	r3, #1
 800263a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800263c:	f107 0314 	add.w	r3, r7, #20
 8002640:	4619      	mov	r1, r3
 8002642:	4817      	ldr	r0, [pc, #92]	@ (80026a0 <HAL_TIM_MspPostInit+0xb8>)
 8002644:	f004 f8b2 	bl	80067ac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8002648:	e023      	b.n	8002692 <HAL_TIM_MspPostInit+0xaa>
  else if(timHandle->Instance==TIM5)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a15      	ldr	r2, [pc, #84]	@ (80026a4 <HAL_TIM_MspPostInit+0xbc>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d11e      	bne.n	8002692 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002654:	4b11      	ldr	r3, [pc, #68]	@ (800269c <HAL_TIM_MspPostInit+0xb4>)
 8002656:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800265a:	4a10      	ldr	r2, [pc, #64]	@ (800269c <HAL_TIM_MspPostInit+0xb4>)
 800265c:	f043 0301 	orr.w	r3, r3, #1
 8002660:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002664:	4b0d      	ldr	r3, [pc, #52]	@ (800269c <HAL_TIM_MspPostInit+0xb4>)
 8002666:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800266a:	f003 0301 	and.w	r3, r3, #1
 800266e:	60fb      	str	r3, [r7, #12]
 8002670:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = M4_Pin|M1_Pin;
 8002672:	230a      	movs	r3, #10
 8002674:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002676:	2302      	movs	r3, #2
 8002678:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800267a:	2300      	movs	r3, #0
 800267c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800267e:	2300      	movs	r3, #0
 8002680:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002682:	2302      	movs	r3, #2
 8002684:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002686:	f107 0314 	add.w	r3, r7, #20
 800268a:	4619      	mov	r1, r3
 800268c:	4804      	ldr	r0, [pc, #16]	@ (80026a0 <HAL_TIM_MspPostInit+0xb8>)
 800268e:	f004 f88d 	bl	80067ac <HAL_GPIO_Init>
}
 8002692:	bf00      	nop
 8002694:	3728      	adds	r7, #40	@ 0x28
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}
 800269a:	bf00      	nop
 800269c:	58024400 	.word	0x58024400
 80026a0:	58020000 	.word	0x58020000
 80026a4:	40000c00 	.word	0x40000c00

080026a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80026a8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80026e0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80026ac:	f7fd ffe8 	bl	8000680 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80026b0:	480c      	ldr	r0, [pc, #48]	@ (80026e4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80026b2:	490d      	ldr	r1, [pc, #52]	@ (80026e8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80026b4:	4a0d      	ldr	r2, [pc, #52]	@ (80026ec <LoopFillZerobss+0x1a>)
  movs r3, #0
 80026b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80026b8:	e002      	b.n	80026c0 <LoopCopyDataInit>

080026ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80026ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026be:	3304      	adds	r3, #4

080026c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026c4:	d3f9      	bcc.n	80026ba <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026c6:	4a0a      	ldr	r2, [pc, #40]	@ (80026f0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80026c8:	4c0a      	ldr	r4, [pc, #40]	@ (80026f4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80026ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026cc:	e001      	b.n	80026d2 <LoopFillZerobss>

080026ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026d0:	3204      	adds	r2, #4

080026d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026d4:	d3fb      	bcc.n	80026ce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80026d6:	f010 fcdd 	bl	8013094 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80026da:	f7fe fc05 	bl	8000ee8 <main>
  bx  lr
 80026de:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80026e0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80026e4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80026e8:	240002e8 	.word	0x240002e8
  ldr r2, =_sidata
 80026ec:	080155b8 	.word	0x080155b8
  ldr r2, =_sbss
 80026f0:	240002e8 	.word	0x240002e8
  ldr r4, =_ebss
 80026f4:	240027a8 	.word	0x240027a8

080026f8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80026f8:	e7fe      	b.n	80026f8 <ADC3_IRQHandler>
	...

080026fc <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b08c      	sub	sp, #48	@ 0x30
 8002700:	af00      	add	r7, sp, #0
 8002702:	4603      	mov	r3, r0
 8002704:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8002706:	2300      	movs	r3, #0
 8002708:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 800270a:	79fb      	ldrb	r3, [r7, #7]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d009      	beq.n	8002724 <BSP_LED_Init+0x28>
 8002710:	79fb      	ldrb	r3, [r7, #7]
 8002712:	2b01      	cmp	r3, #1
 8002714:	d006      	beq.n	8002724 <BSP_LED_Init+0x28>
 8002716:	79fb      	ldrb	r3, [r7, #7]
 8002718:	2b02      	cmp	r3, #2
 800271a:	d003      	beq.n	8002724 <BSP_LED_Init+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800271c:	f06f 0301 	mvn.w	r3, #1
 8002720:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002722:	e055      	b.n	80027d0 <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if(Led == LED1)
 8002724:	79fb      	ldrb	r3, [r7, #7]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d10f      	bne.n	800274a <BSP_LED_Init+0x4e>
    {
      LED1_GPIO_CLK_ENABLE();
 800272a:	4b2c      	ldr	r3, [pc, #176]	@ (80027dc <BSP_LED_Init+0xe0>)
 800272c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002730:	4a2a      	ldr	r2, [pc, #168]	@ (80027dc <BSP_LED_Init+0xe0>)
 8002732:	f043 0302 	orr.w	r3, r3, #2
 8002736:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800273a:	4b28      	ldr	r3, [pc, #160]	@ (80027dc <BSP_LED_Init+0xe0>)
 800273c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002740:	f003 0302 	and.w	r3, r3, #2
 8002744:	617b      	str	r3, [r7, #20]
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	e021      	b.n	800278e <BSP_LED_Init+0x92>
    }
    else if(Led == LED2)
 800274a:	79fb      	ldrb	r3, [r7, #7]
 800274c:	2b01      	cmp	r3, #1
 800274e:	d10f      	bne.n	8002770 <BSP_LED_Init+0x74>
    {
      LED2_GPIO_CLK_ENABLE();
 8002750:	4b22      	ldr	r3, [pc, #136]	@ (80027dc <BSP_LED_Init+0xe0>)
 8002752:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002756:	4a21      	ldr	r2, [pc, #132]	@ (80027dc <BSP_LED_Init+0xe0>)
 8002758:	f043 0310 	orr.w	r3, r3, #16
 800275c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002760:	4b1e      	ldr	r3, [pc, #120]	@ (80027dc <BSP_LED_Init+0xe0>)
 8002762:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002766:	f003 0310 	and.w	r3, r3, #16
 800276a:	613b      	str	r3, [r7, #16]
 800276c:	693b      	ldr	r3, [r7, #16]
 800276e:	e00e      	b.n	800278e <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 8002770:	4b1a      	ldr	r3, [pc, #104]	@ (80027dc <BSP_LED_Init+0xe0>)
 8002772:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002776:	4a19      	ldr	r2, [pc, #100]	@ (80027dc <BSP_LED_Init+0xe0>)
 8002778:	f043 0302 	orr.w	r3, r3, #2
 800277c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002780:	4b16      	ldr	r3, [pc, #88]	@ (80027dc <BSP_LED_Init+0xe0>)
 8002782:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002786:	f003 0302 	and.w	r3, r3, #2
 800278a:	60fb      	str	r3, [r7, #12]
 800278c:	68fb      	ldr	r3, [r7, #12]
    }
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 800278e:	79fb      	ldrb	r3, [r7, #7]
 8002790:	4a13      	ldr	r2, [pc, #76]	@ (80027e0 <BSP_LED_Init+0xe4>)
 8002792:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002796:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8002798:	2301      	movs	r3, #1
 800279a:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 800279c:	2300      	movs	r3, #0
 800279e:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027a0:	2303      	movs	r3, #3
 80027a2:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 80027a4:	79fb      	ldrb	r3, [r7, #7]
 80027a6:	4a0f      	ldr	r2, [pc, #60]	@ (80027e4 <BSP_LED_Init+0xe8>)
 80027a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027ac:	f107 0218 	add.w	r2, r7, #24
 80027b0:	4611      	mov	r1, r2
 80027b2:	4618      	mov	r0, r3
 80027b4:	f003 fffa 	bl	80067ac <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 80027b8:	79fb      	ldrb	r3, [r7, #7]
 80027ba:	4a0a      	ldr	r2, [pc, #40]	@ (80027e4 <BSP_LED_Init+0xe8>)
 80027bc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80027c0:	79fb      	ldrb	r3, [r7, #7]
 80027c2:	4a07      	ldr	r2, [pc, #28]	@ (80027e0 <BSP_LED_Init+0xe4>)
 80027c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80027c8:	2200      	movs	r2, #0
 80027ca:	4619      	mov	r1, r3
 80027cc:	f004 f99e 	bl	8006b0c <HAL_GPIO_WritePin>
  }

  return ret;
 80027d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	3730      	adds	r7, #48	@ 0x30
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}
 80027da:	bf00      	nop
 80027dc:	58024400 	.word	0x58024400
 80027e0:	08015200 	.word	0x08015200
 80027e4:	2400000c 	.word	0x2400000c

080027e8 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b088      	sub	sp, #32
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	4603      	mov	r3, r0
 80027f0:	460a      	mov	r2, r1
 80027f2:	71fb      	strb	r3, [r7, #7]
 80027f4:	4613      	mov	r3, r2
 80027f6:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 80027f8:	4b2e      	ldr	r3, [pc, #184]	@ (80028b4 <BSP_PB_Init+0xcc>)
 80027fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80027fe:	4a2d      	ldr	r2, [pc, #180]	@ (80028b4 <BSP_PB_Init+0xcc>)
 8002800:	f043 0304 	orr.w	r3, r3, #4
 8002804:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002808:	4b2a      	ldr	r3, [pc, #168]	@ (80028b4 <BSP_PB_Init+0xcc>)
 800280a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800280e:	f003 0304 	and.w	r3, r3, #4
 8002812:	60bb      	str	r3, [r7, #8]
 8002814:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 8002816:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800281a:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 800281c:	2302      	movs	r3, #2
 800281e:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8002820:	2302      	movs	r3, #2
 8002822:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 8002824:	79bb      	ldrb	r3, [r7, #6]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d10c      	bne.n	8002844 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 800282a:	2300      	movs	r3, #0
 800282c:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 800282e:	79fb      	ldrb	r3, [r7, #7]
 8002830:	4a21      	ldr	r2, [pc, #132]	@ (80028b8 <BSP_PB_Init+0xd0>)
 8002832:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002836:	f107 020c 	add.w	r2, r7, #12
 800283a:	4611      	mov	r1, r2
 800283c:	4618      	mov	r0, r3
 800283e:	f003 ffb5 	bl	80067ac <HAL_GPIO_Init>
 8002842:	e031      	b.n	80028a8 <BSP_PB_Init+0xc0>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8002844:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002848:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 800284a:	79fb      	ldrb	r3, [r7, #7]
 800284c:	4a1a      	ldr	r2, [pc, #104]	@ (80028b8 <BSP_PB_Init+0xd0>)
 800284e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002852:	f107 020c 	add.w	r2, r7, #12
 8002856:	4611      	mov	r1, r2
 8002858:	4618      	mov	r0, r3
 800285a:	f003 ffa7 	bl	80067ac <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 800285e:	79fb      	ldrb	r3, [r7, #7]
 8002860:	00db      	lsls	r3, r3, #3
 8002862:	4a16      	ldr	r2, [pc, #88]	@ (80028bc <BSP_PB_Init+0xd4>)
 8002864:	441a      	add	r2, r3
 8002866:	79fb      	ldrb	r3, [r7, #7]
 8002868:	4915      	ldr	r1, [pc, #84]	@ (80028c0 <BSP_PB_Init+0xd8>)
 800286a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800286e:	4619      	mov	r1, r3
 8002870:	4610      	mov	r0, r2
 8002872:	f003 ff4a 	bl	800670a <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8002876:	79fb      	ldrb	r3, [r7, #7]
 8002878:	00db      	lsls	r3, r3, #3
 800287a:	4a10      	ldr	r2, [pc, #64]	@ (80028bc <BSP_PB_Init+0xd4>)
 800287c:	1898      	adds	r0, r3, r2
 800287e:	79fb      	ldrb	r3, [r7, #7]
 8002880:	4a10      	ldr	r2, [pc, #64]	@ (80028c4 <BSP_PB_Init+0xdc>)
 8002882:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002886:	461a      	mov	r2, r3
 8002888:	2100      	movs	r1, #0
 800288a:	f003 ff1f 	bl	80066cc <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 800288e:	2028      	movs	r0, #40	@ 0x28
 8002890:	79fb      	ldrb	r3, [r7, #7]
 8002892:	4a0d      	ldr	r2, [pc, #52]	@ (80028c8 <BSP_PB_Init+0xe0>)
 8002894:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002898:	2200      	movs	r2, #0
 800289a:	4619      	mov	r1, r3
 800289c:	f001 fdf5 	bl	800448a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 80028a0:	2328      	movs	r3, #40	@ 0x28
 80028a2:	4618      	mov	r0, r3
 80028a4:	f001 fe0b 	bl	80044be <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 80028a8:	2300      	movs	r3, #0
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	3720      	adds	r7, #32
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}
 80028b2:	bf00      	nop
 80028b4:	58024400 	.word	0x58024400
 80028b8:	24000018 	.word	0x24000018
 80028bc:	240009d4 	.word	0x240009d4
 80028c0:	08015208 	.word	0x08015208
 80028c4:	2400001c 	.word	0x2400001c
 80028c8:	24000020 	.word	0x24000020

080028cc <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b082      	sub	sp, #8
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	4603      	mov	r3, r0
 80028d4:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 80028d6:	79fb      	ldrb	r3, [r7, #7]
 80028d8:	00db      	lsls	r3, r3, #3
 80028da:	4a04      	ldr	r2, [pc, #16]	@ (80028ec <BSP_PB_IRQHandler+0x20>)
 80028dc:	4413      	add	r3, r2
 80028de:	4618      	mov	r0, r3
 80028e0:	f003 ff28 	bl	8006734 <HAL_EXTI_IRQHandler>
}
 80028e4:	bf00      	nop
 80028e6:	3708      	adds	r7, #8
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}
 80028ec:	240009d4 	.word	0x240009d4

080028f0 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b083      	sub	sp, #12
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	4603      	mov	r3, r0
 80028f8:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 80028fa:	bf00      	nop
 80028fc:	370c      	adds	r7, #12
 80028fe:	46bd      	mov	sp, r7
 8002900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002904:	4770      	bx	lr
	...

08002908 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b084      	sub	sp, #16
 800290c:	af00      	add	r7, sp, #0
 800290e:	4603      	mov	r3, r0
 8002910:	6039      	str	r1, [r7, #0]
 8002912:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8002914:	2300      	movs	r3, #0
 8002916:	60fb      	str	r3, [r7, #12]

  if(COM >= COMn)
 8002918:	79fb      	ldrb	r3, [r7, #7]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d003      	beq.n	8002926 <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800291e:	f06f 0301 	mvn.w	r3, #1
 8002922:	60fb      	str	r3, [r7, #12]
 8002924:	e018      	b.n	8002958 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 8002926:	79fb      	ldrb	r3, [r7, #7]
 8002928:	2294      	movs	r2, #148	@ 0x94
 800292a:	fb02 f303 	mul.w	r3, r2, r3
 800292e:	4a0d      	ldr	r2, [pc, #52]	@ (8002964 <BSP_COM_Init+0x5c>)
 8002930:	4413      	add	r3, r2
 8002932:	4618      	mov	r0, r3
 8002934:	f000 f86e 	bl	8002a14 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_USART3_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8002938:	79fb      	ldrb	r3, [r7, #7]
 800293a:	2294      	movs	r2, #148	@ 0x94
 800293c:	fb02 f303 	mul.w	r3, r2, r3
 8002940:	4a08      	ldr	r2, [pc, #32]	@ (8002964 <BSP_COM_Init+0x5c>)
 8002942:	4413      	add	r3, r2
 8002944:	6839      	ldr	r1, [r7, #0]
 8002946:	4618      	mov	r0, r3
 8002948:	f000 f80e 	bl	8002968 <MX_USART3_Init>
 800294c:	4603      	mov	r3, r0
 800294e:	2b00      	cmp	r3, #0
 8002950:	d002      	beq.n	8002958 <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8002952:	f06f 0303 	mvn.w	r3, #3
 8002956:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8002958:	68fb      	ldr	r3, [r7, #12]
}
 800295a:	4618      	mov	r0, r3
 800295c:	3710      	adds	r7, #16
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}
 8002962:	bf00      	nop
 8002964:	240009dc 	.word	0x240009dc

08002968 <MX_USART3_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART3_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b082      	sub	sp, #8
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
 8002970:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 8002972:	4b15      	ldr	r3, [pc, #84]	@ (80029c8 <MX_USART3_Init+0x60>)
 8002974:	681a      	ldr	r2, [r3, #0]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	681a      	ldr	r2, [r3, #0]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	220c      	movs	r2, #12
 8002986:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	895b      	ldrh	r3, [r3, #10]
 800298c:	461a      	mov	r2, r3
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = (uint32_t)COM_Init->WordLength;
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	685a      	ldr	r2, [r3, #4]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	891b      	ldrh	r3, [r3, #8]
 800299e:	461a      	mov	r2, r3
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	899b      	ldrh	r3, [r3, #12]
 80029a8:	461a      	mov	r2, r3
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80029b4:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 80029b6:	6878      	ldr	r0, [r7, #4]
 80029b8:	f00a fca8 	bl	800d30c <HAL_UART_Init>
 80029bc:	4603      	mov	r3, r0
}
 80029be:	4618      	mov	r0, r3
 80029c0:	3708      	adds	r7, #8
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	bf00      	nop
 80029c8:	24000008 	.word	0x24000008

080029cc <__io_putchar>:
 #ifdef __GNUC__
 int __io_putchar (int ch)
 #else
 int fputc (int ch, FILE *f)
 #endif /* __GNUC__ */
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b082      	sub	sp, #8
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit (&hcom_uart [COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 80029d4:	4b09      	ldr	r3, [pc, #36]	@ (80029fc <__io_putchar+0x30>)
 80029d6:	781b      	ldrb	r3, [r3, #0]
 80029d8:	461a      	mov	r2, r3
 80029da:	2394      	movs	r3, #148	@ 0x94
 80029dc:	fb02 f303 	mul.w	r3, r2, r3
 80029e0:	4a07      	ldr	r2, [pc, #28]	@ (8002a00 <__io_putchar+0x34>)
 80029e2:	1898      	adds	r0, r3, r2
 80029e4:	1d39      	adds	r1, r7, #4
 80029e6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80029ea:	2201      	movs	r2, #1
 80029ec:	f00a fce8 	bl	800d3c0 <HAL_UART_Transmit>
  return ch;
 80029f0:	687b      	ldr	r3, [r7, #4]
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	3708      	adds	r7, #8
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}
 80029fa:	bf00      	nop
 80029fc:	24000a70 	.word	0x24000a70
 8002a00:	240009dc 	.word	0x240009dc

08002a04 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8002a08:	2000      	movs	r0, #0
 8002a0a:	f7ff ff71 	bl	80028f0 <BSP_PB_Callback>
}
 8002a0e:	bf00      	nop
 8002a10:	bd80      	pop	{r7, pc}
	...

08002a14 <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b08a      	sub	sp, #40	@ 0x28
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8002a1c:	4b27      	ldr	r3, [pc, #156]	@ (8002abc <COM1_MspInit+0xa8>)
 8002a1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002a22:	4a26      	ldr	r2, [pc, #152]	@ (8002abc <COM1_MspInit+0xa8>)
 8002a24:	f043 0308 	orr.w	r3, r3, #8
 8002a28:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002a2c:	4b23      	ldr	r3, [pc, #140]	@ (8002abc <COM1_MspInit+0xa8>)
 8002a2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002a32:	f003 0308 	and.w	r3, r3, #8
 8002a36:	613b      	str	r3, [r7, #16]
 8002a38:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 8002a3a:	4b20      	ldr	r3, [pc, #128]	@ (8002abc <COM1_MspInit+0xa8>)
 8002a3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002a40:	4a1e      	ldr	r2, [pc, #120]	@ (8002abc <COM1_MspInit+0xa8>)
 8002a42:	f043 0308 	orr.w	r3, r3, #8
 8002a46:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002a4a:	4b1c      	ldr	r3, [pc, #112]	@ (8002abc <COM1_MspInit+0xa8>)
 8002a4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002a50:	f003 0308 	and.w	r3, r3, #8
 8002a54:	60fb      	str	r3, [r7, #12]
 8002a56:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8002a58:	4b18      	ldr	r3, [pc, #96]	@ (8002abc <COM1_MspInit+0xa8>)
 8002a5a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002a5e:	4a17      	ldr	r2, [pc, #92]	@ (8002abc <COM1_MspInit+0xa8>)
 8002a60:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002a64:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002a68:	4b14      	ldr	r3, [pc, #80]	@ (8002abc <COM1_MspInit+0xa8>)
 8002a6a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002a6e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002a72:	60bb      	str	r3, [r7, #8]
 8002a74:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin = COM1_TX_PIN;
 8002a76:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002a7a:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8002a7c:	2302      	movs	r3, #2
 8002a7e:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8002a80:	2302      	movs	r3, #2
 8002a82:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8002a84:	2301      	movs	r3, #1
 8002a86:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8002a88:	2307      	movs	r3, #7
 8002a8a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8002a8c:	f107 0314 	add.w	r3, r7, #20
 8002a90:	4619      	mov	r1, r3
 8002a92:	480b      	ldr	r0, [pc, #44]	@ (8002ac0 <COM1_MspInit+0xac>)
 8002a94:	f003 fe8a 	bl	80067ac <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 8002a98:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002a9c:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8002a9e:	2302      	movs	r3, #2
 8002aa0:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 8002aa2:	2307      	movs	r3, #7
 8002aa4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 8002aa6:	f107 0314 	add.w	r3, r7, #20
 8002aaa:	4619      	mov	r1, r3
 8002aac:	4804      	ldr	r0, [pc, #16]	@ (8002ac0 <COM1_MspInit+0xac>)
 8002aae:	f003 fe7d 	bl	80067ac <HAL_GPIO_Init>
}
 8002ab2:	bf00      	nop
 8002ab4:	3728      	adds	r7, #40	@ 0x28
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}
 8002aba:	bf00      	nop
 8002abc:	58024400 	.word	0x58024400
 8002ac0:	58020c00 	.word	0x58020c00

08002ac4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b082      	sub	sp, #8
 8002ac8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002aca:	2003      	movs	r0, #3
 8002acc:	f001 fcd2 	bl	8004474 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002ad0:	f006 f996 	bl	8008e00 <HAL_RCC_GetSysClockFreq>
 8002ad4:	4602      	mov	r2, r0
 8002ad6:	4b15      	ldr	r3, [pc, #84]	@ (8002b2c <HAL_Init+0x68>)
 8002ad8:	699b      	ldr	r3, [r3, #24]
 8002ada:	0a1b      	lsrs	r3, r3, #8
 8002adc:	f003 030f 	and.w	r3, r3, #15
 8002ae0:	4913      	ldr	r1, [pc, #76]	@ (8002b30 <HAL_Init+0x6c>)
 8002ae2:	5ccb      	ldrb	r3, [r1, r3]
 8002ae4:	f003 031f 	and.w	r3, r3, #31
 8002ae8:	fa22 f303 	lsr.w	r3, r2, r3
 8002aec:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002aee:	4b0f      	ldr	r3, [pc, #60]	@ (8002b2c <HAL_Init+0x68>)
 8002af0:	699b      	ldr	r3, [r3, #24]
 8002af2:	f003 030f 	and.w	r3, r3, #15
 8002af6:	4a0e      	ldr	r2, [pc, #56]	@ (8002b30 <HAL_Init+0x6c>)
 8002af8:	5cd3      	ldrb	r3, [r2, r3]
 8002afa:	f003 031f 	and.w	r3, r3, #31
 8002afe:	687a      	ldr	r2, [r7, #4]
 8002b00:	fa22 f303 	lsr.w	r3, r2, r3
 8002b04:	4a0b      	ldr	r2, [pc, #44]	@ (8002b34 <HAL_Init+0x70>)
 8002b06:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002b08:	4a0b      	ldr	r2, [pc, #44]	@ (8002b38 <HAL_Init+0x74>)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002b0e:	2000      	movs	r0, #0
 8002b10:	f000 f814 	bl	8002b3c <HAL_InitTick>
 8002b14:	4603      	mov	r3, r0
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d001      	beq.n	8002b1e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e002      	b.n	8002b24 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002b1e:	f7fe fc0f 	bl	8001340 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b22:	2300      	movs	r3, #0
}
 8002b24:	4618      	mov	r0, r3
 8002b26:	3708      	adds	r7, #8
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bd80      	pop	{r7, pc}
 8002b2c:	58024400 	.word	0x58024400
 8002b30:	08015190 	.word	0x08015190
 8002b34:	24000004 	.word	0x24000004
 8002b38:	24000000 	.word	0x24000000

08002b3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b082      	sub	sp, #8
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002b44:	4b15      	ldr	r3, [pc, #84]	@ (8002b9c <HAL_InitTick+0x60>)
 8002b46:	781b      	ldrb	r3, [r3, #0]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d101      	bne.n	8002b50 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	e021      	b.n	8002b94 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002b50:	4b13      	ldr	r3, [pc, #76]	@ (8002ba0 <HAL_InitTick+0x64>)
 8002b52:	681a      	ldr	r2, [r3, #0]
 8002b54:	4b11      	ldr	r3, [pc, #68]	@ (8002b9c <HAL_InitTick+0x60>)
 8002b56:	781b      	ldrb	r3, [r3, #0]
 8002b58:	4619      	mov	r1, r3
 8002b5a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002b5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b62:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b66:	4618      	mov	r0, r3
 8002b68:	f001 fcb7 	bl	80044da <HAL_SYSTICK_Config>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d001      	beq.n	8002b76 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	e00e      	b.n	8002b94 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2b0f      	cmp	r3, #15
 8002b7a:	d80a      	bhi.n	8002b92 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	6879      	ldr	r1, [r7, #4]
 8002b80:	f04f 30ff 	mov.w	r0, #4294967295
 8002b84:	f001 fc81 	bl	800448a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002b88:	4a06      	ldr	r2, [pc, #24]	@ (8002ba4 <HAL_InitTick+0x68>)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	e000      	b.n	8002b94 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	3708      	adds	r7, #8
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}
 8002b9c:	24000028 	.word	0x24000028
 8002ba0:	24000000 	.word	0x24000000
 8002ba4:	24000024 	.word	0x24000024

08002ba8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002bac:	4b06      	ldr	r3, [pc, #24]	@ (8002bc8 <HAL_IncTick+0x20>)
 8002bae:	781b      	ldrb	r3, [r3, #0]
 8002bb0:	461a      	mov	r2, r3
 8002bb2:	4b06      	ldr	r3, [pc, #24]	@ (8002bcc <HAL_IncTick+0x24>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4413      	add	r3, r2
 8002bb8:	4a04      	ldr	r2, [pc, #16]	@ (8002bcc <HAL_IncTick+0x24>)
 8002bba:	6013      	str	r3, [r2, #0]
}
 8002bbc:	bf00      	nop
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc4:	4770      	bx	lr
 8002bc6:	bf00      	nop
 8002bc8:	24000028 	.word	0x24000028
 8002bcc:	24000a74 	.word	0x24000a74

08002bd0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	af00      	add	r7, sp, #0
  return uwTick;
 8002bd4:	4b03      	ldr	r3, [pc, #12]	@ (8002be4 <HAL_GetTick+0x14>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be0:	4770      	bx	lr
 8002be2:	bf00      	nop
 8002be4:	24000a74 	.word	0x24000a74

08002be8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b084      	sub	sp, #16
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002bf0:	f7ff ffee 	bl	8002bd0 <HAL_GetTick>
 8002bf4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c00:	d005      	beq.n	8002c0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c02:	4b0a      	ldr	r3, [pc, #40]	@ (8002c2c <HAL_Delay+0x44>)
 8002c04:	781b      	ldrb	r3, [r3, #0]
 8002c06:	461a      	mov	r2, r3
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	4413      	add	r3, r2
 8002c0c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002c0e:	bf00      	nop
 8002c10:	f7ff ffde 	bl	8002bd0 <HAL_GetTick>
 8002c14:	4602      	mov	r2, r0
 8002c16:	68bb      	ldr	r3, [r7, #8]
 8002c18:	1ad3      	subs	r3, r2, r3
 8002c1a:	68fa      	ldr	r2, [r7, #12]
 8002c1c:	429a      	cmp	r2, r3
 8002c1e:	d8f7      	bhi.n	8002c10 <HAL_Delay+0x28>
  {
  }
}
 8002c20:	bf00      	nop
 8002c22:	bf00      	nop
 8002c24:	3710      	adds	r7, #16
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}
 8002c2a:	bf00      	nop
 8002c2c:	24000028 	.word	0x24000028

08002c30 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002c30:	b480      	push	{r7}
 8002c32:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002c34:	4b03      	ldr	r3, [pc, #12]	@ (8002c44 <HAL_GetREVID+0x14>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	0c1b      	lsrs	r3, r3, #16
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c42:	4770      	bx	lr
 8002c44:	5c001000 	.word	0x5c001000

08002c48 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b083      	sub	sp, #12
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
 8002c50:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	431a      	orrs	r2, r3
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	609a      	str	r2, [r3, #8]
}
 8002c62:	bf00      	nop
 8002c64:	370c      	adds	r7, #12
 8002c66:	46bd      	mov	sp, r7
 8002c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6c:	4770      	bx	lr

08002c6e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002c6e:	b480      	push	{r7}
 8002c70:	b083      	sub	sp, #12
 8002c72:	af00      	add	r7, sp, #0
 8002c74:	6078      	str	r0, [r7, #4]
 8002c76:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	431a      	orrs	r2, r3
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	609a      	str	r2, [r3, #8]
}
 8002c88:	bf00      	nop
 8002c8a:	370c      	adds	r7, #12
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c92:	4770      	bx	lr

08002c94 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002c94:	b480      	push	{r7}
 8002c96:	b083      	sub	sp, #12
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	370c      	adds	r7, #12
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cae:	4770      	bx	lr

08002cb0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b087      	sub	sp, #28
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	60f8      	str	r0, [r7, #12]
 8002cb8:	60b9      	str	r1, [r7, #8]
 8002cba:	607a      	str	r2, [r7, #4]
 8002cbc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	3360      	adds	r3, #96	@ 0x60
 8002cc2:	461a      	mov	r2, r3
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	009b      	lsls	r3, r3, #2
 8002cc8:	4413      	add	r3, r2
 8002cca:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8002ccc:	697b      	ldr	r3, [r7, #20]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	430b      	orrs	r3, r1
 8002cde:	431a      	orrs	r2, r3
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8002ce4:	bf00      	nop
 8002ce6:	371c      	adds	r7, #28
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cee:	4770      	bx	lr

08002cf0 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b085      	sub	sp, #20
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	60f8      	str	r0, [r7, #12]
 8002cf8:	60b9      	str	r1, [r7, #8]
 8002cfa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	691b      	ldr	r3, [r3, #16]
 8002d00:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	f003 031f 	and.w	r3, r3, #31
 8002d0a:	6879      	ldr	r1, [r7, #4]
 8002d0c:	fa01 f303 	lsl.w	r3, r1, r3
 8002d10:	431a      	orrs	r2, r3
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	611a      	str	r2, [r3, #16]
}
 8002d16:	bf00      	nop
 8002d18:	3714      	adds	r7, #20
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d20:	4770      	bx	lr

08002d22 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002d22:	b480      	push	{r7}
 8002d24:	b087      	sub	sp, #28
 8002d26:	af00      	add	r7, sp, #0
 8002d28:	60f8      	str	r0, [r7, #12]
 8002d2a:	60b9      	str	r1, [r7, #8]
 8002d2c:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	3360      	adds	r3, #96	@ 0x60
 8002d32:	461a      	mov	r2, r3
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	009b      	lsls	r3, r3, #2
 8002d38:	4413      	add	r3, r2
 8002d3a:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	431a      	orrs	r2, r3
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	601a      	str	r2, [r3, #0]
  }
}
 8002d4c:	bf00      	nop
 8002d4e:	371c      	adds	r7, #28
 8002d50:	46bd      	mov	sp, r7
 8002d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d56:	4770      	bx	lr

08002d58 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b083      	sub	sp, #12
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	68db      	ldr	r3, [r3, #12]
 8002d64:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d101      	bne.n	8002d70 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	e000      	b.n	8002d72 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002d70:	2300      	movs	r3, #0
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	370c      	adds	r7, #12
 8002d76:	46bd      	mov	sp, r7
 8002d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7c:	4770      	bx	lr

08002d7e <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002d7e:	b480      	push	{r7}
 8002d80:	b087      	sub	sp, #28
 8002d82:	af00      	add	r7, sp, #0
 8002d84:	60f8      	str	r0, [r7, #12]
 8002d86:	60b9      	str	r1, [r7, #8]
 8002d88:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	3330      	adds	r3, #48	@ 0x30
 8002d8e:	461a      	mov	r2, r3
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	0a1b      	lsrs	r3, r3, #8
 8002d94:	009b      	lsls	r3, r3, #2
 8002d96:	f003 030c 	and.w	r3, r3, #12
 8002d9a:	4413      	add	r3, r2
 8002d9c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002d9e:	697b      	ldr	r3, [r7, #20]
 8002da0:	681a      	ldr	r2, [r3, #0]
 8002da2:	68bb      	ldr	r3, [r7, #8]
 8002da4:	f003 031f 	and.w	r3, r3, #31
 8002da8:	211f      	movs	r1, #31
 8002daa:	fa01 f303 	lsl.w	r3, r1, r3
 8002dae:	43db      	mvns	r3, r3
 8002db0:	401a      	ands	r2, r3
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	0e9b      	lsrs	r3, r3, #26
 8002db6:	f003 011f 	and.w	r1, r3, #31
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	f003 031f 	and.w	r3, r3, #31
 8002dc0:	fa01 f303 	lsl.w	r3, r1, r3
 8002dc4:	431a      	orrs	r2, r3
 8002dc6:	697b      	ldr	r3, [r7, #20]
 8002dc8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002dca:	bf00      	nop
 8002dcc:	371c      	adds	r7, #28
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd4:	4770      	bx	lr

08002dd6 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002dd6:	b480      	push	{r7}
 8002dd8:	b087      	sub	sp, #28
 8002dda:	af00      	add	r7, sp, #0
 8002ddc:	60f8      	str	r0, [r7, #12]
 8002dde:	60b9      	str	r1, [r7, #8]
 8002de0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	3314      	adds	r3, #20
 8002de6:	461a      	mov	r2, r3
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	0e5b      	lsrs	r3, r3, #25
 8002dec:	009b      	lsls	r3, r3, #2
 8002dee:	f003 0304 	and.w	r3, r3, #4
 8002df2:	4413      	add	r3, r2
 8002df4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	681a      	ldr	r2, [r3, #0]
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	0d1b      	lsrs	r3, r3, #20
 8002dfe:	f003 031f 	and.w	r3, r3, #31
 8002e02:	2107      	movs	r1, #7
 8002e04:	fa01 f303 	lsl.w	r3, r1, r3
 8002e08:	43db      	mvns	r3, r3
 8002e0a:	401a      	ands	r2, r3
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	0d1b      	lsrs	r3, r3, #20
 8002e10:	f003 031f 	and.w	r3, r3, #31
 8002e14:	6879      	ldr	r1, [r7, #4]
 8002e16:	fa01 f303 	lsl.w	r3, r1, r3
 8002e1a:	431a      	orrs	r2, r3
 8002e1c:	697b      	ldr	r3, [r7, #20]
 8002e1e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002e20:	bf00      	nop
 8002e22:	371c      	adds	r7, #28
 8002e24:	46bd      	mov	sp, r7
 8002e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2a:	4770      	bx	lr

08002e2c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b085      	sub	sp, #20
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	60f8      	str	r0, [r7, #12]
 8002e34:	60b9      	str	r1, [r7, #8]
 8002e36:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8002e3e:	68bb      	ldr	r3, [r7, #8]
 8002e40:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002e44:	43db      	mvns	r3, r3
 8002e46:	401a      	ands	r2, r3
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	f003 0318 	and.w	r3, r3, #24
 8002e4e:	4908      	ldr	r1, [pc, #32]	@ (8002e70 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002e50:	40d9      	lsrs	r1, r3
 8002e52:	68bb      	ldr	r3, [r7, #8]
 8002e54:	400b      	ands	r3, r1
 8002e56:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002e5a:	431a      	orrs	r2, r3
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8002e62:	bf00      	nop
 8002e64:	3714      	adds	r7, #20
 8002e66:	46bd      	mov	sp, r7
 8002e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6c:	4770      	bx	lr
 8002e6e:	bf00      	nop
 8002e70:	000fffff 	.word	0x000fffff

08002e74 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002e74:	b480      	push	{r7}
 8002e76:	b083      	sub	sp, #12
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	689b      	ldr	r3, [r3, #8]
 8002e80:	f003 031f 	and.w	r3, r3, #31
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	370c      	adds	r7, #12
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8e:	4770      	bx	lr

08002e90 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b083      	sub	sp, #12
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	689b      	ldr	r3, [r3, #8]
 8002e9c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	370c      	adds	r7, #12
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eaa:	4770      	bx	lr

08002eac <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002eac:	b480      	push	{r7}
 8002eae:	b083      	sub	sp, #12
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	689a      	ldr	r2, [r3, #8]
 8002eb8:	4b04      	ldr	r3, [pc, #16]	@ (8002ecc <LL_ADC_DisableDeepPowerDown+0x20>)
 8002eba:	4013      	ands	r3, r2
 8002ebc:	687a      	ldr	r2, [r7, #4]
 8002ebe:	6093      	str	r3, [r2, #8]
}
 8002ec0:	bf00      	nop
 8002ec2:	370c      	adds	r7, #12
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eca:	4770      	bx	lr
 8002ecc:	5fffffc0 	.word	0x5fffffc0

08002ed0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b083      	sub	sp, #12
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002ee0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002ee4:	d101      	bne.n	8002eea <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	e000      	b.n	8002eec <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002eea:	2300      	movs	r3, #0
}
 8002eec:	4618      	mov	r0, r3
 8002eee:	370c      	adds	r7, #12
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef6:	4770      	bx	lr

08002ef8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b083      	sub	sp, #12
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	689a      	ldr	r2, [r3, #8]
 8002f04:	4b05      	ldr	r3, [pc, #20]	@ (8002f1c <LL_ADC_EnableInternalRegulator+0x24>)
 8002f06:	4013      	ands	r3, r2
 8002f08:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002f10:	bf00      	nop
 8002f12:	370c      	adds	r7, #12
 8002f14:	46bd      	mov	sp, r7
 8002f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1a:	4770      	bx	lr
 8002f1c:	6fffffc0 	.word	0x6fffffc0

08002f20 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002f20:	b480      	push	{r7}
 8002f22:	b083      	sub	sp, #12
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	689b      	ldr	r3, [r3, #8]
 8002f2c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f30:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002f34:	d101      	bne.n	8002f3a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002f36:	2301      	movs	r3, #1
 8002f38:	e000      	b.n	8002f3c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002f3a:	2300      	movs	r3, #0
}
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	370c      	adds	r7, #12
 8002f40:	46bd      	mov	sp, r7
 8002f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f46:	4770      	bx	lr

08002f48 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b083      	sub	sp, #12
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	689a      	ldr	r2, [r3, #8]
 8002f54:	4b05      	ldr	r3, [pc, #20]	@ (8002f6c <LL_ADC_Enable+0x24>)
 8002f56:	4013      	ands	r3, r2
 8002f58:	f043 0201 	orr.w	r2, r3, #1
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002f60:	bf00      	nop
 8002f62:	370c      	adds	r7, #12
 8002f64:	46bd      	mov	sp, r7
 8002f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6a:	4770      	bx	lr
 8002f6c:	7fffffc0 	.word	0x7fffffc0

08002f70 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002f70:	b480      	push	{r7}
 8002f72:	b083      	sub	sp, #12
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	689b      	ldr	r3, [r3, #8]
 8002f7c:	f003 0301 	and.w	r3, r3, #1
 8002f80:	2b01      	cmp	r3, #1
 8002f82:	d101      	bne.n	8002f88 <LL_ADC_IsEnabled+0x18>
 8002f84:	2301      	movs	r3, #1
 8002f86:	e000      	b.n	8002f8a <LL_ADC_IsEnabled+0x1a>
 8002f88:	2300      	movs	r3, #0
}
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	370c      	adds	r7, #12
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f94:	4770      	bx	lr
	...

08002f98 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	b083      	sub	sp, #12
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	689a      	ldr	r2, [r3, #8]
 8002fa4:	4b05      	ldr	r3, [pc, #20]	@ (8002fbc <LL_ADC_REG_StartConversion+0x24>)
 8002fa6:	4013      	ands	r3, r2
 8002fa8:	f043 0204 	orr.w	r2, r3, #4
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002fb0:	bf00      	nop
 8002fb2:	370c      	adds	r7, #12
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fba:	4770      	bx	lr
 8002fbc:	7fffffc0 	.word	0x7fffffc0

08002fc0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b083      	sub	sp, #12
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	f003 0304 	and.w	r3, r3, #4
 8002fd0:	2b04      	cmp	r3, #4
 8002fd2:	d101      	bne.n	8002fd8 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	e000      	b.n	8002fda <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002fd8:	2300      	movs	r3, #0
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	370c      	adds	r7, #12
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe4:	4770      	bx	lr

08002fe6 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002fe6:	b480      	push	{r7}
 8002fe8:	b083      	sub	sp, #12
 8002fea:	af00      	add	r7, sp, #0
 8002fec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	689b      	ldr	r3, [r3, #8]
 8002ff2:	f003 0308 	and.w	r3, r3, #8
 8002ff6:	2b08      	cmp	r3, #8
 8002ff8:	d101      	bne.n	8002ffe <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	e000      	b.n	8003000 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002ffe:	2300      	movs	r3, #0
}
 8003000:	4618      	mov	r0, r3
 8003002:	370c      	adds	r7, #12
 8003004:	46bd      	mov	sp, r7
 8003006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300a:	4770      	bx	lr

0800300c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800300c:	b590      	push	{r4, r7, lr}
 800300e:	b089      	sub	sp, #36	@ 0x24
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003014:	2300      	movs	r3, #0
 8003016:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003018:	2300      	movs	r3, #0
 800301a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d101      	bne.n	8003026 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	e18f      	b.n	8003346 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	68db      	ldr	r3, [r3, #12]
 800302a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003030:	2b00      	cmp	r3, #0
 8003032:	d109      	bne.n	8003048 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003034:	6878      	ldr	r0, [r7, #4]
 8003036:	f7fd fc33 	bl	80008a0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2200      	movs	r2, #0
 800303e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2200      	movs	r2, #0
 8003044:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4618      	mov	r0, r3
 800304e:	f7ff ff3f 	bl	8002ed0 <LL_ADC_IsDeepPowerDownEnabled>
 8003052:	4603      	mov	r3, r0
 8003054:	2b00      	cmp	r3, #0
 8003056:	d004      	beq.n	8003062 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4618      	mov	r0, r3
 800305e:	f7ff ff25 	bl	8002eac <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4618      	mov	r0, r3
 8003068:	f7ff ff5a 	bl	8002f20 <LL_ADC_IsInternalRegulatorEnabled>
 800306c:	4603      	mov	r3, r0
 800306e:	2b00      	cmp	r3, #0
 8003070:	d114      	bne.n	800309c <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4618      	mov	r0, r3
 8003078:	f7ff ff3e 	bl	8002ef8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800307c:	4b87      	ldr	r3, [pc, #540]	@ (800329c <HAL_ADC_Init+0x290>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	099b      	lsrs	r3, r3, #6
 8003082:	4a87      	ldr	r2, [pc, #540]	@ (80032a0 <HAL_ADC_Init+0x294>)
 8003084:	fba2 2303 	umull	r2, r3, r2, r3
 8003088:	099b      	lsrs	r3, r3, #6
 800308a:	3301      	adds	r3, #1
 800308c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800308e:	e002      	b.n	8003096 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8003090:	68bb      	ldr	r3, [r7, #8]
 8003092:	3b01      	subs	r3, #1
 8003094:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003096:	68bb      	ldr	r3, [r7, #8]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d1f9      	bne.n	8003090 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4618      	mov	r0, r3
 80030a2:	f7ff ff3d 	bl	8002f20 <LL_ADC_IsInternalRegulatorEnabled>
 80030a6:	4603      	mov	r3, r0
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d10d      	bne.n	80030c8 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030b0:	f043 0210 	orr.w	r2, r3, #16
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030bc:	f043 0201 	orr.w	r2, r3, #1
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80030c4:	2301      	movs	r3, #1
 80030c6:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4618      	mov	r0, r3
 80030ce:	f7ff ff77 	bl	8002fc0 <LL_ADC_REG_IsConversionOngoing>
 80030d2:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030d8:	f003 0310 	and.w	r3, r3, #16
 80030dc:	2b00      	cmp	r3, #0
 80030de:	f040 8129 	bne.w	8003334 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80030e2:	697b      	ldr	r3, [r7, #20]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	f040 8125 	bne.w	8003334 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030ee:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80030f2:	f043 0202 	orr.w	r2, r3, #2
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4618      	mov	r0, r3
 8003100:	f7ff ff36 	bl	8002f70 <LL_ADC_IsEnabled>
 8003104:	4603      	mov	r3, r0
 8003106:	2b00      	cmp	r3, #0
 8003108:	d136      	bne.n	8003178 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a65      	ldr	r2, [pc, #404]	@ (80032a4 <HAL_ADC_Init+0x298>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d004      	beq.n	800311e <HAL_ADC_Init+0x112>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a63      	ldr	r2, [pc, #396]	@ (80032a8 <HAL_ADC_Init+0x29c>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d10e      	bne.n	800313c <HAL_ADC_Init+0x130>
 800311e:	4861      	ldr	r0, [pc, #388]	@ (80032a4 <HAL_ADC_Init+0x298>)
 8003120:	f7ff ff26 	bl	8002f70 <LL_ADC_IsEnabled>
 8003124:	4604      	mov	r4, r0
 8003126:	4860      	ldr	r0, [pc, #384]	@ (80032a8 <HAL_ADC_Init+0x29c>)
 8003128:	f7ff ff22 	bl	8002f70 <LL_ADC_IsEnabled>
 800312c:	4603      	mov	r3, r0
 800312e:	4323      	orrs	r3, r4
 8003130:	2b00      	cmp	r3, #0
 8003132:	bf0c      	ite	eq
 8003134:	2301      	moveq	r3, #1
 8003136:	2300      	movne	r3, #0
 8003138:	b2db      	uxtb	r3, r3
 800313a:	e008      	b.n	800314e <HAL_ADC_Init+0x142>
 800313c:	485b      	ldr	r0, [pc, #364]	@ (80032ac <HAL_ADC_Init+0x2a0>)
 800313e:	f7ff ff17 	bl	8002f70 <LL_ADC_IsEnabled>
 8003142:	4603      	mov	r3, r0
 8003144:	2b00      	cmp	r3, #0
 8003146:	bf0c      	ite	eq
 8003148:	2301      	moveq	r3, #1
 800314a:	2300      	movne	r3, #0
 800314c:	b2db      	uxtb	r3, r3
 800314e:	2b00      	cmp	r3, #0
 8003150:	d012      	beq.n	8003178 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a53      	ldr	r2, [pc, #332]	@ (80032a4 <HAL_ADC_Init+0x298>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d004      	beq.n	8003166 <HAL_ADC_Init+0x15a>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a51      	ldr	r2, [pc, #324]	@ (80032a8 <HAL_ADC_Init+0x29c>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d101      	bne.n	800316a <HAL_ADC_Init+0x15e>
 8003166:	4a52      	ldr	r2, [pc, #328]	@ (80032b0 <HAL_ADC_Init+0x2a4>)
 8003168:	e000      	b.n	800316c <HAL_ADC_Init+0x160>
 800316a:	4a52      	ldr	r2, [pc, #328]	@ (80032b4 <HAL_ADC_Init+0x2a8>)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	4619      	mov	r1, r3
 8003172:	4610      	mov	r0, r2
 8003174:	f7ff fd68 	bl	8002c48 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8003178:	f7ff fd5a 	bl	8002c30 <HAL_GetREVID>
 800317c:	4603      	mov	r3, r0
 800317e:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003182:	4293      	cmp	r3, r2
 8003184:	d914      	bls.n	80031b0 <HAL_ADC_Init+0x1a4>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	689b      	ldr	r3, [r3, #8]
 800318a:	2b10      	cmp	r3, #16
 800318c:	d110      	bne.n	80031b0 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	7d5b      	ldrb	r3, [r3, #21]
 8003192:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003198:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800319e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	7f1b      	ldrb	r3, [r3, #28]
 80031a4:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80031a6:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80031a8:	f043 030c 	orr.w	r3, r3, #12
 80031ac:	61bb      	str	r3, [r7, #24]
 80031ae:	e00d      	b.n	80031cc <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	7d5b      	ldrb	r3, [r3, #21]
 80031b4:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80031ba:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80031c0:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	7f1b      	ldrb	r3, [r3, #28]
 80031c6:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80031c8:	4313      	orrs	r3, r2
 80031ca:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	7f1b      	ldrb	r3, [r3, #28]
 80031d0:	2b01      	cmp	r3, #1
 80031d2:	d106      	bne.n	80031e2 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6a1b      	ldr	r3, [r3, #32]
 80031d8:	3b01      	subs	r3, #1
 80031da:	045b      	lsls	r3, r3, #17
 80031dc:	69ba      	ldr	r2, [r7, #24]
 80031de:	4313      	orrs	r3, r2
 80031e0:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d009      	beq.n	80031fe <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031ee:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031f6:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80031f8:	69ba      	ldr	r2, [r7, #24]
 80031fa:	4313      	orrs	r3, r2
 80031fc:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	68da      	ldr	r2, [r3, #12]
 8003204:	4b2c      	ldr	r3, [pc, #176]	@ (80032b8 <HAL_ADC_Init+0x2ac>)
 8003206:	4013      	ands	r3, r2
 8003208:	687a      	ldr	r2, [r7, #4]
 800320a:	6812      	ldr	r2, [r2, #0]
 800320c:	69b9      	ldr	r1, [r7, #24]
 800320e:	430b      	orrs	r3, r1
 8003210:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4618      	mov	r0, r3
 8003218:	f7ff fed2 	bl	8002fc0 <LL_ADC_REG_IsConversionOngoing>
 800321c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4618      	mov	r0, r3
 8003224:	f7ff fedf 	bl	8002fe6 <LL_ADC_INJ_IsConversionOngoing>
 8003228:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d15f      	bne.n	80032f0 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d15c      	bne.n	80032f0 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	7d1b      	ldrb	r3, [r3, #20]
 800323a:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 8003240:	4313      	orrs	r3, r2
 8003242:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	68da      	ldr	r2, [r3, #12]
 800324a:	4b1c      	ldr	r3, [pc, #112]	@ (80032bc <HAL_ADC_Init+0x2b0>)
 800324c:	4013      	ands	r3, r2
 800324e:	687a      	ldr	r2, [r7, #4]
 8003250:	6812      	ldr	r2, [r2, #0]
 8003252:	69b9      	ldr	r1, [r7, #24]
 8003254:	430b      	orrs	r3, r1
 8003256:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800325e:	2b01      	cmp	r3, #1
 8003260:	d130      	bne.n	80032c4 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003266:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	691a      	ldr	r2, [r3, #16]
 800326e:	4b14      	ldr	r3, [pc, #80]	@ (80032c0 <HAL_ADC_Init+0x2b4>)
 8003270:	4013      	ands	r3, r2
 8003272:	687a      	ldr	r2, [r7, #4]
 8003274:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003276:	3a01      	subs	r2, #1
 8003278:	0411      	lsls	r1, r2, #16
 800327a:	687a      	ldr	r2, [r7, #4]
 800327c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800327e:	4311      	orrs	r1, r2
 8003280:	687a      	ldr	r2, [r7, #4]
 8003282:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8003284:	4311      	orrs	r1, r2
 8003286:	687a      	ldr	r2, [r7, #4]
 8003288:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800328a:	430a      	orrs	r2, r1
 800328c:	431a      	orrs	r2, r3
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f042 0201 	orr.w	r2, r2, #1
 8003296:	611a      	str	r2, [r3, #16]
 8003298:	e01c      	b.n	80032d4 <HAL_ADC_Init+0x2c8>
 800329a:	bf00      	nop
 800329c:	24000000 	.word	0x24000000
 80032a0:	053e2d63 	.word	0x053e2d63
 80032a4:	40022000 	.word	0x40022000
 80032a8:	40022100 	.word	0x40022100
 80032ac:	58026000 	.word	0x58026000
 80032b0:	40022300 	.word	0x40022300
 80032b4:	58026300 	.word	0x58026300
 80032b8:	fff0c003 	.word	0xfff0c003
 80032bc:	ffffbffc 	.word	0xffffbffc
 80032c0:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	691a      	ldr	r2, [r3, #16]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f022 0201 	bic.w	r2, r2, #1
 80032d2:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	691b      	ldr	r3, [r3, #16]
 80032da:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	430a      	orrs	r2, r1
 80032e8:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 80032ea:	6878      	ldr	r0, [r7, #4]
 80032ec:	f000 fde2 	bl	8003eb4 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	68db      	ldr	r3, [r3, #12]
 80032f4:	2b01      	cmp	r3, #1
 80032f6:	d10c      	bne.n	8003312 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032fe:	f023 010f 	bic.w	r1, r3, #15
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	699b      	ldr	r3, [r3, #24]
 8003306:	1e5a      	subs	r2, r3, #1
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	430a      	orrs	r2, r1
 800330e:	631a      	str	r2, [r3, #48]	@ 0x30
 8003310:	e007      	b.n	8003322 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f022 020f 	bic.w	r2, r2, #15
 8003320:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003326:	f023 0303 	bic.w	r3, r3, #3
 800332a:	f043 0201 	orr.w	r2, r3, #1
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	655a      	str	r2, [r3, #84]	@ 0x54
 8003332:	e007      	b.n	8003344 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003338:	f043 0210 	orr.w	r2, r3, #16
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003340:	2301      	movs	r3, #1
 8003342:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003344:	7ffb      	ldrb	r3, [r7, #31]
}
 8003346:	4618      	mov	r0, r3
 8003348:	3724      	adds	r7, #36	@ 0x24
 800334a:	46bd      	mov	sp, r7
 800334c:	bd90      	pop	{r4, r7, pc}
 800334e:	bf00      	nop

08003350 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b086      	sub	sp, #24
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a5c      	ldr	r2, [pc, #368]	@ (80034d0 <HAL_ADC_Start+0x180>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d004      	beq.n	800336c <HAL_ADC_Start+0x1c>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a5b      	ldr	r2, [pc, #364]	@ (80034d4 <HAL_ADC_Start+0x184>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d101      	bne.n	8003370 <HAL_ADC_Start+0x20>
 800336c:	4b5a      	ldr	r3, [pc, #360]	@ (80034d8 <HAL_ADC_Start+0x188>)
 800336e:	e000      	b.n	8003372 <HAL_ADC_Start+0x22>
 8003370:	4b5a      	ldr	r3, [pc, #360]	@ (80034dc <HAL_ADC_Start+0x18c>)
 8003372:	4618      	mov	r0, r3
 8003374:	f7ff fd7e 	bl	8002e74 <LL_ADC_GetMultimode>
 8003378:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4618      	mov	r0, r3
 8003380:	f7ff fe1e 	bl	8002fc0 <LL_ADC_REG_IsConversionOngoing>
 8003384:	4603      	mov	r3, r0
 8003386:	2b00      	cmp	r3, #0
 8003388:	f040 809a 	bne.w	80034c0 <HAL_ADC_Start+0x170>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003392:	2b01      	cmp	r3, #1
 8003394:	d101      	bne.n	800339a <HAL_ADC_Start+0x4a>
 8003396:	2302      	movs	r3, #2
 8003398:	e095      	b.n	80034c6 <HAL_ADC_Start+0x176>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2201      	movs	r2, #1
 800339e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80033a2:	6878      	ldr	r0, [r7, #4]
 80033a4:	f000 fcfc 	bl	8003da0 <ADC_Enable>
 80033a8:	4603      	mov	r3, r0
 80033aa:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80033ac:	7dfb      	ldrb	r3, [r7, #23]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	f040 8081 	bne.w	80034b6 <HAL_ADC_Start+0x166>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80033b8:	4b49      	ldr	r3, [pc, #292]	@ (80034e0 <HAL_ADC_Start+0x190>)
 80033ba:	4013      	ands	r3, r2
 80033bc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a42      	ldr	r2, [pc, #264]	@ (80034d4 <HAL_ADC_Start+0x184>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d002      	beq.n	80033d4 <HAL_ADC_Start+0x84>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	e000      	b.n	80033d6 <HAL_ADC_Start+0x86>
 80033d4:	4b3e      	ldr	r3, [pc, #248]	@ (80034d0 <HAL_ADC_Start+0x180>)
 80033d6:	687a      	ldr	r2, [r7, #4]
 80033d8:	6812      	ldr	r2, [r2, #0]
 80033da:	4293      	cmp	r3, r2
 80033dc:	d002      	beq.n	80033e4 <HAL_ADC_Start+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d105      	bne.n	80033f0 <HAL_ADC_Start+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033e8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	655a      	str	r2, [r3, #84]	@ 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033f4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80033f8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80033fc:	d106      	bne.n	800340c <HAL_ADC_Start+0xbc>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003402:	f023 0206 	bic.w	r2, r3, #6
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	659a      	str	r2, [r3, #88]	@ 0x58
 800340a:	e002      	b.n	8003412 <HAL_ADC_Start+0xc2>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2200      	movs	r2, #0
 8003410:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	221c      	movs	r2, #28
 8003418:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2200      	movs	r2, #0
 800341e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4a2b      	ldr	r2, [pc, #172]	@ (80034d4 <HAL_ADC_Start+0x184>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d002      	beq.n	8003432 <HAL_ADC_Start+0xe2>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	e000      	b.n	8003434 <HAL_ADC_Start+0xe4>
 8003432:	4b27      	ldr	r3, [pc, #156]	@ (80034d0 <HAL_ADC_Start+0x180>)
 8003434:	687a      	ldr	r2, [r7, #4]
 8003436:	6812      	ldr	r2, [r2, #0]
 8003438:	4293      	cmp	r3, r2
 800343a:	d008      	beq.n	800344e <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d005      	beq.n	800344e <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003442:	693b      	ldr	r3, [r7, #16]
 8003444:	2b05      	cmp	r3, #5
 8003446:	d002      	beq.n	800344e <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003448:	693b      	ldr	r3, [r7, #16]
 800344a:	2b09      	cmp	r3, #9
 800344c:	d114      	bne.n	8003478 <HAL_ADC_Start+0x128>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	68db      	ldr	r3, [r3, #12]
 8003454:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003458:	2b00      	cmp	r3, #0
 800345a:	d007      	beq.n	800346c <HAL_ADC_Start+0x11c>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003460:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003464:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4618      	mov	r0, r3
 8003472:	f7ff fd91 	bl	8002f98 <LL_ADC_REG_StartConversion>
 8003476:	e025      	b.n	80034c4 <HAL_ADC_Start+0x174>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800347c:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	655a      	str	r2, [r3, #84]	@ 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a12      	ldr	r2, [pc, #72]	@ (80034d4 <HAL_ADC_Start+0x184>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d002      	beq.n	8003494 <HAL_ADC_Start+0x144>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	e000      	b.n	8003496 <HAL_ADC_Start+0x146>
 8003494:	4b0e      	ldr	r3, [pc, #56]	@ (80034d0 <HAL_ADC_Start+0x180>)
 8003496:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	68db      	ldr	r3, [r3, #12]
 800349c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d00f      	beq.n	80034c4 <HAL_ADC_Start+0x174>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034a8:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80034ac:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	655a      	str	r2, [r3, #84]	@ 0x54
 80034b4:	e006      	b.n	80034c4 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2200      	movs	r2, #0
 80034ba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 80034be:	e001      	b.n	80034c4 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80034c0:	2302      	movs	r3, #2
 80034c2:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80034c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	3718      	adds	r7, #24
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}
 80034ce:	bf00      	nop
 80034d0:	40022000 	.word	0x40022000
 80034d4:	40022100 	.word	0x40022100
 80034d8:	40022300 	.word	0x40022300
 80034dc:	58026300 	.word	0x58026300
 80034e0:	fffff0fe 	.word	0xfffff0fe

080034e4 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b088      	sub	sp, #32
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
 80034ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a72      	ldr	r2, [pc, #456]	@ (80036bc <HAL_ADC_PollForConversion+0x1d8>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d004      	beq.n	8003502 <HAL_ADC_PollForConversion+0x1e>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a70      	ldr	r2, [pc, #448]	@ (80036c0 <HAL_ADC_PollForConversion+0x1dc>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d101      	bne.n	8003506 <HAL_ADC_PollForConversion+0x22>
 8003502:	4b70      	ldr	r3, [pc, #448]	@ (80036c4 <HAL_ADC_PollForConversion+0x1e0>)
 8003504:	e000      	b.n	8003508 <HAL_ADC_PollForConversion+0x24>
 8003506:	4b70      	ldr	r3, [pc, #448]	@ (80036c8 <HAL_ADC_PollForConversion+0x1e4>)
 8003508:	4618      	mov	r0, r3
 800350a:	f7ff fcb3 	bl	8002e74 <LL_ADC_GetMultimode>
 800350e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	691b      	ldr	r3, [r3, #16]
 8003514:	2b08      	cmp	r3, #8
 8003516:	d102      	bne.n	800351e <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8003518:	2308      	movs	r3, #8
 800351a:	61fb      	str	r3, [r7, #28]
 800351c:	e037      	b.n	800358e <HAL_ADC_PollForConversion+0xaa>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d005      	beq.n	8003530 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003524:	697b      	ldr	r3, [r7, #20]
 8003526:	2b05      	cmp	r3, #5
 8003528:	d002      	beq.n	8003530 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	2b09      	cmp	r3, #9
 800352e:	d111      	bne.n	8003554 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	68db      	ldr	r3, [r3, #12]
 8003536:	f003 0301 	and.w	r3, r3, #1
 800353a:	2b00      	cmp	r3, #0
 800353c:	d007      	beq.n	800354e <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003542:	f043 0220 	orr.w	r2, r3, #32
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 800354a:	2301      	movs	r3, #1
 800354c:	e0b1      	b.n	80036b2 <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800354e:	2304      	movs	r3, #4
 8003550:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8003552:	e01c      	b.n	800358e <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a58      	ldr	r2, [pc, #352]	@ (80036bc <HAL_ADC_PollForConversion+0x1d8>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d004      	beq.n	8003568 <HAL_ADC_PollForConversion+0x84>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a57      	ldr	r2, [pc, #348]	@ (80036c0 <HAL_ADC_PollForConversion+0x1dc>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d101      	bne.n	800356c <HAL_ADC_PollForConversion+0x88>
 8003568:	4b56      	ldr	r3, [pc, #344]	@ (80036c4 <HAL_ADC_PollForConversion+0x1e0>)
 800356a:	e000      	b.n	800356e <HAL_ADC_PollForConversion+0x8a>
 800356c:	4b56      	ldr	r3, [pc, #344]	@ (80036c8 <HAL_ADC_PollForConversion+0x1e4>)
 800356e:	4618      	mov	r0, r3
 8003570:	f7ff fc8e 	bl	8002e90 <LL_ADC_GetMultiDMATransfer>
 8003574:	4603      	mov	r3, r0
 8003576:	2b00      	cmp	r3, #0
 8003578:	d007      	beq.n	800358a <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800357e:	f043 0220 	orr.w	r2, r3, #32
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 8003586:	2301      	movs	r3, #1
 8003588:	e093      	b.n	80036b2 <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800358a:	2304      	movs	r3, #4
 800358c:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800358e:	f7ff fb1f 	bl	8002bd0 <HAL_GetTick>
 8003592:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003594:	e021      	b.n	80035da <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	f1b3 3fff 	cmp.w	r3, #4294967295
 800359c:	d01d      	beq.n	80035da <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800359e:	f7ff fb17 	bl	8002bd0 <HAL_GetTick>
 80035a2:	4602      	mov	r2, r0
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	1ad3      	subs	r3, r2, r3
 80035a8:	683a      	ldr	r2, [r7, #0]
 80035aa:	429a      	cmp	r2, r3
 80035ac:	d302      	bcc.n	80035b4 <HAL_ADC_PollForConversion+0xd0>
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d112      	bne.n	80035da <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	681a      	ldr	r2, [r3, #0]
 80035ba:	69fb      	ldr	r3, [r7, #28]
 80035bc:	4013      	ands	r3, r2
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d10b      	bne.n	80035da <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035c6:	f043 0204 	orr.w	r2, r3, #4
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2200      	movs	r2, #0
 80035d2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

          return HAL_TIMEOUT;
 80035d6:	2303      	movs	r3, #3
 80035d8:	e06b      	b.n	80036b2 <HAL_ADC_PollForConversion+0x1ce>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	681a      	ldr	r2, [r3, #0]
 80035e0:	69fb      	ldr	r3, [r7, #28]
 80035e2:	4013      	ands	r3, r2
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d0d6      	beq.n	8003596 <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035ec:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4618      	mov	r0, r3
 80035fa:	f7ff fbad 	bl	8002d58 <LL_ADC_REG_IsTriggerSourceSWStart>
 80035fe:	4603      	mov	r3, r0
 8003600:	2b00      	cmp	r3, #0
 8003602:	d01c      	beq.n	800363e <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	7d5b      	ldrb	r3, [r3, #21]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d118      	bne.n	800363e <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f003 0308 	and.w	r3, r3, #8
 8003616:	2b08      	cmp	r3, #8
 8003618:	d111      	bne.n	800363e <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800361e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	655a      	str	r2, [r3, #84]	@ 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800362a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800362e:	2b00      	cmp	r3, #0
 8003630:	d105      	bne.n	800363e <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003636:	f043 0201 	orr.w	r2, r3, #1
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4a1f      	ldr	r2, [pc, #124]	@ (80036c0 <HAL_ADC_PollForConversion+0x1dc>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d002      	beq.n	800364e <HAL_ADC_PollForConversion+0x16a>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	e000      	b.n	8003650 <HAL_ADC_PollForConversion+0x16c>
 800364e:	4b1b      	ldr	r3, [pc, #108]	@ (80036bc <HAL_ADC_PollForConversion+0x1d8>)
 8003650:	687a      	ldr	r2, [r7, #4]
 8003652:	6812      	ldr	r2, [r2, #0]
 8003654:	4293      	cmp	r3, r2
 8003656:	d008      	beq.n	800366a <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003658:	697b      	ldr	r3, [r7, #20]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d005      	beq.n	800366a <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800365e:	697b      	ldr	r3, [r7, #20]
 8003660:	2b05      	cmp	r3, #5
 8003662:	d002      	beq.n	800366a <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003664:	697b      	ldr	r3, [r7, #20]
 8003666:	2b09      	cmp	r3, #9
 8003668:	d104      	bne.n	8003674 <HAL_ADC_PollForConversion+0x190>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	68db      	ldr	r3, [r3, #12]
 8003670:	61bb      	str	r3, [r7, #24]
 8003672:	e00c      	b.n	800368e <HAL_ADC_PollForConversion+0x1aa>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a11      	ldr	r2, [pc, #68]	@ (80036c0 <HAL_ADC_PollForConversion+0x1dc>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d002      	beq.n	8003684 <HAL_ADC_PollForConversion+0x1a0>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	e000      	b.n	8003686 <HAL_ADC_PollForConversion+0x1a2>
 8003684:	4b0d      	ldr	r3, [pc, #52]	@ (80036bc <HAL_ADC_PollForConversion+0x1d8>)
 8003686:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	68db      	ldr	r3, [r3, #12]
 800368c:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 800368e:	69fb      	ldr	r3, [r7, #28]
 8003690:	2b08      	cmp	r3, #8
 8003692:	d104      	bne.n	800369e <HAL_ADC_PollForConversion+0x1ba>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	2208      	movs	r2, #8
 800369a:	601a      	str	r2, [r3, #0]
 800369c:	e008      	b.n	80036b0 <HAL_ADC_PollForConversion+0x1cc>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 800369e:	69bb      	ldr	r3, [r7, #24]
 80036a0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d103      	bne.n	80036b0 <HAL_ADC_PollForConversion+0x1cc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	220c      	movs	r2, #12
 80036ae:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80036b0:	2300      	movs	r3, #0
}
 80036b2:	4618      	mov	r0, r3
 80036b4:	3720      	adds	r7, #32
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}
 80036ba:	bf00      	nop
 80036bc:	40022000 	.word	0x40022000
 80036c0:	40022100 	.word	0x40022100
 80036c4:	40022300 	.word	0x40022300
 80036c8:	58026300 	.word	0x58026300

080036cc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b083      	sub	sp, #12
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80036da:	4618      	mov	r0, r3
 80036dc:	370c      	adds	r7, #12
 80036de:	46bd      	mov	sp, r7
 80036e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e4:	4770      	bx	lr
	...

080036e8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80036e8:	b590      	push	{r4, r7, lr}
 80036ea:	b0a1      	sub	sp, #132	@ 0x84
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
 80036f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80036f2:	2300      	movs	r3, #0
 80036f4:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80036f8:	2300      	movs	r3, #0
 80036fa:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	68db      	ldr	r3, [r3, #12]
 8003700:	4a65      	ldr	r2, [pc, #404]	@ (8003898 <HAL_ADC_ConfigChannel+0x1b0>)
 8003702:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800370a:	2b01      	cmp	r3, #1
 800370c:	d101      	bne.n	8003712 <HAL_ADC_ConfigChannel+0x2a>
 800370e:	2302      	movs	r3, #2
 8003710:	e32e      	b.n	8003d70 <HAL_ADC_ConfigChannel+0x688>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2201      	movs	r2, #1
 8003716:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4618      	mov	r0, r3
 8003720:	f7ff fc4e 	bl	8002fc0 <LL_ADC_REG_IsConversionOngoing>
 8003724:	4603      	mov	r3, r0
 8003726:	2b00      	cmp	r3, #0
 8003728:	f040 8313 	bne.w	8003d52 <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	2b00      	cmp	r3, #0
 8003732:	db2c      	blt.n	800378e <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800373c:	2b00      	cmp	r3, #0
 800373e:	d108      	bne.n	8003752 <HAL_ADC_ConfigChannel+0x6a>
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	0e9b      	lsrs	r3, r3, #26
 8003746:	f003 031f 	and.w	r3, r3, #31
 800374a:	2201      	movs	r2, #1
 800374c:	fa02 f303 	lsl.w	r3, r2, r3
 8003750:	e016      	b.n	8003780 <HAL_ADC_ConfigChannel+0x98>
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	667b      	str	r3, [r7, #100]	@ 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003758:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800375a:	fa93 f3a3 	rbit	r3, r3
 800375e:	663b      	str	r3, [r7, #96]	@ 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003760:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003762:	66bb      	str	r3, [r7, #104]	@ 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003764:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003766:	2b00      	cmp	r3, #0
 8003768:	d101      	bne.n	800376e <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 800376a:	2320      	movs	r3, #32
 800376c:	e003      	b.n	8003776 <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 800376e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003770:	fab3 f383 	clz	r3, r3
 8003774:	b2db      	uxtb	r3, r3
 8003776:	f003 031f 	and.w	r3, r3, #31
 800377a:	2201      	movs	r2, #1
 800377c:	fa02 f303 	lsl.w	r3, r2, r3
 8003780:	687a      	ldr	r2, [r7, #4]
 8003782:	6812      	ldr	r2, [r2, #0]
 8003784:	69d1      	ldr	r1, [r2, #28]
 8003786:	687a      	ldr	r2, [r7, #4]
 8003788:	6812      	ldr	r2, [r2, #0]
 800378a:	430b      	orrs	r3, r1
 800378c:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6818      	ldr	r0, [r3, #0]
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	6859      	ldr	r1, [r3, #4]
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	461a      	mov	r2, r3
 800379c:	f7ff faef 	bl	8002d7e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4618      	mov	r0, r3
 80037a6:	f7ff fc0b 	bl	8002fc0 <LL_ADC_REG_IsConversionOngoing>
 80037aa:	67b8      	str	r0, [r7, #120]	@ 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4618      	mov	r0, r3
 80037b2:	f7ff fc18 	bl	8002fe6 <LL_ADC_INJ_IsConversionOngoing>
 80037b6:	6778      	str	r0, [r7, #116]	@ 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80037b8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	f040 80b8 	bne.w	8003930 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80037c0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	f040 80b4 	bne.w	8003930 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6818      	ldr	r0, [r3, #0]
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	6819      	ldr	r1, [r3, #0]
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	689b      	ldr	r3, [r3, #8]
 80037d4:	461a      	mov	r2, r3
 80037d6:	f7ff fafe 	bl	8002dd6 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80037da:	4b30      	ldr	r3, [pc, #192]	@ (800389c <HAL_ADC_ConfigChannel+0x1b4>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80037e2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80037e6:	d10b      	bne.n	8003800 <HAL_ADC_ConfigChannel+0x118>
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	695a      	ldr	r2, [r3, #20]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	68db      	ldr	r3, [r3, #12]
 80037f2:	089b      	lsrs	r3, r3, #2
 80037f4:	f003 0307 	and.w	r3, r3, #7
 80037f8:	005b      	lsls	r3, r3, #1
 80037fa:	fa02 f303 	lsl.w	r3, r2, r3
 80037fe:	e01d      	b.n	800383c <HAL_ADC_ConfigChannel+0x154>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	68db      	ldr	r3, [r3, #12]
 8003806:	f003 0310 	and.w	r3, r3, #16
 800380a:	2b00      	cmp	r3, #0
 800380c:	d10b      	bne.n	8003826 <HAL_ADC_ConfigChannel+0x13e>
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	695a      	ldr	r2, [r3, #20]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	68db      	ldr	r3, [r3, #12]
 8003818:	089b      	lsrs	r3, r3, #2
 800381a:	f003 0307 	and.w	r3, r3, #7
 800381e:	005b      	lsls	r3, r3, #1
 8003820:	fa02 f303 	lsl.w	r3, r2, r3
 8003824:	e00a      	b.n	800383c <HAL_ADC_ConfigChannel+0x154>
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	695a      	ldr	r2, [r3, #20]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	68db      	ldr	r3, [r3, #12]
 8003830:	089b      	lsrs	r3, r3, #2
 8003832:	f003 0304 	and.w	r3, r3, #4
 8003836:	005b      	lsls	r3, r3, #1
 8003838:	fa02 f303 	lsl.w	r3, r2, r3
 800383c:	673b      	str	r3, [r7, #112]	@ 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	691b      	ldr	r3, [r3, #16]
 8003842:	2b04      	cmp	r3, #4
 8003844:	d02c      	beq.n	80038a0 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6818      	ldr	r0, [r3, #0]
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	6919      	ldr	r1, [r3, #16]
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	681a      	ldr	r2, [r3, #0]
 8003852:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003854:	f7ff fa2c 	bl	8002cb0 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6818      	ldr	r0, [r3, #0]
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	6919      	ldr	r1, [r3, #16]
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	7e5b      	ldrb	r3, [r3, #25]
 8003864:	2b01      	cmp	r3, #1
 8003866:	d102      	bne.n	800386e <HAL_ADC_ConfigChannel+0x186>
 8003868:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800386c:	e000      	b.n	8003870 <HAL_ADC_ConfigChannel+0x188>
 800386e:	2300      	movs	r3, #0
 8003870:	461a      	mov	r2, r3
 8003872:	f7ff fa56 	bl	8002d22 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6818      	ldr	r0, [r3, #0]
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	6919      	ldr	r1, [r3, #16]
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	7e1b      	ldrb	r3, [r3, #24]
 8003882:	2b01      	cmp	r3, #1
 8003884:	d102      	bne.n	800388c <HAL_ADC_ConfigChannel+0x1a4>
 8003886:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800388a:	e000      	b.n	800388e <HAL_ADC_ConfigChannel+0x1a6>
 800388c:	2300      	movs	r3, #0
 800388e:	461a      	mov	r2, r3
 8003890:	f7ff fa2e 	bl	8002cf0 <LL_ADC_SetDataRightShift>
 8003894:	e04c      	b.n	8003930 <HAL_ADC_ConfigChannel+0x248>
 8003896:	bf00      	nop
 8003898:	47ff0000 	.word	0x47ff0000
 800389c:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038a6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	069b      	lsls	r3, r3, #26
 80038b0:	429a      	cmp	r2, r3
 80038b2:	d107      	bne.n	80038c4 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80038c2:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80038ca:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	069b      	lsls	r3, r3, #26
 80038d4:	429a      	cmp	r2, r3
 80038d6:	d107      	bne.n	80038e8 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80038e6:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80038ee:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	069b      	lsls	r3, r3, #26
 80038f8:	429a      	cmp	r2, r3
 80038fa:	d107      	bne.n	800390c <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800390a:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003912:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	069b      	lsls	r3, r3, #26
 800391c:	429a      	cmp	r2, r3
 800391e:	d107      	bne.n	8003930 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800392e:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4618      	mov	r0, r3
 8003936:	f7ff fb1b 	bl	8002f70 <LL_ADC_IsEnabled>
 800393a:	4603      	mov	r3, r0
 800393c:	2b00      	cmp	r3, #0
 800393e:	f040 8211 	bne.w	8003d64 <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6818      	ldr	r0, [r3, #0]
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	6819      	ldr	r1, [r3, #0]
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	68db      	ldr	r3, [r3, #12]
 800394e:	461a      	mov	r2, r3
 8003950:	f7ff fa6c 	bl	8002e2c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	68db      	ldr	r3, [r3, #12]
 8003958:	4aa1      	ldr	r2, [pc, #644]	@ (8003be0 <HAL_ADC_ConfigChannel+0x4f8>)
 800395a:	4293      	cmp	r3, r2
 800395c:	f040 812e 	bne.w	8003bbc <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800396c:	2b00      	cmp	r3, #0
 800396e:	d10b      	bne.n	8003988 <HAL_ADC_ConfigChannel+0x2a0>
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	0e9b      	lsrs	r3, r3, #26
 8003976:	3301      	adds	r3, #1
 8003978:	f003 031f 	and.w	r3, r3, #31
 800397c:	2b09      	cmp	r3, #9
 800397e:	bf94      	ite	ls
 8003980:	2301      	movls	r3, #1
 8003982:	2300      	movhi	r3, #0
 8003984:	b2db      	uxtb	r3, r3
 8003986:	e019      	b.n	80039bc <HAL_ADC_ConfigChannel+0x2d4>
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800398e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003990:	fa93 f3a3 	rbit	r3, r3
 8003994:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8003996:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003998:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 800399a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800399c:	2b00      	cmp	r3, #0
 800399e:	d101      	bne.n	80039a4 <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 80039a0:	2320      	movs	r3, #32
 80039a2:	e003      	b.n	80039ac <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 80039a4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80039a6:	fab3 f383 	clz	r3, r3
 80039aa:	b2db      	uxtb	r3, r3
 80039ac:	3301      	adds	r3, #1
 80039ae:	f003 031f 	and.w	r3, r3, #31
 80039b2:	2b09      	cmp	r3, #9
 80039b4:	bf94      	ite	ls
 80039b6:	2301      	movls	r3, #1
 80039b8:	2300      	movhi	r3, #0
 80039ba:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d079      	beq.n	8003ab4 <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d107      	bne.n	80039dc <HAL_ADC_ConfigChannel+0x2f4>
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	0e9b      	lsrs	r3, r3, #26
 80039d2:	3301      	adds	r3, #1
 80039d4:	069b      	lsls	r3, r3, #26
 80039d6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80039da:	e015      	b.n	8003a08 <HAL_ADC_ConfigChannel+0x320>
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039e2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80039e4:	fa93 f3a3 	rbit	r3, r3
 80039e8:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80039ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80039ec:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 80039ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d101      	bne.n	80039f8 <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 80039f4:	2320      	movs	r3, #32
 80039f6:	e003      	b.n	8003a00 <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 80039f8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80039fa:	fab3 f383 	clz	r3, r3
 80039fe:	b2db      	uxtb	r3, r3
 8003a00:	3301      	adds	r3, #1
 8003a02:	069b      	lsls	r3, r3, #26
 8003a04:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d109      	bne.n	8003a28 <HAL_ADC_ConfigChannel+0x340>
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	0e9b      	lsrs	r3, r3, #26
 8003a1a:	3301      	adds	r3, #1
 8003a1c:	f003 031f 	and.w	r3, r3, #31
 8003a20:	2101      	movs	r1, #1
 8003a22:	fa01 f303 	lsl.w	r3, r1, r3
 8003a26:	e017      	b.n	8003a58 <HAL_ADC_ConfigChannel+0x370>
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a2e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a30:	fa93 f3a3 	rbit	r3, r3
 8003a34:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8003a36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a38:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8003a3a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d101      	bne.n	8003a44 <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 8003a40:	2320      	movs	r3, #32
 8003a42:	e003      	b.n	8003a4c <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 8003a44:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003a46:	fab3 f383 	clz	r3, r3
 8003a4a:	b2db      	uxtb	r3, r3
 8003a4c:	3301      	adds	r3, #1
 8003a4e:	f003 031f 	and.w	r3, r3, #31
 8003a52:	2101      	movs	r1, #1
 8003a54:	fa01 f303 	lsl.w	r3, r1, r3
 8003a58:	ea42 0103 	orr.w	r1, r2, r3
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d10a      	bne.n	8003a7e <HAL_ADC_ConfigChannel+0x396>
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	0e9b      	lsrs	r3, r3, #26
 8003a6e:	3301      	adds	r3, #1
 8003a70:	f003 021f 	and.w	r2, r3, #31
 8003a74:	4613      	mov	r3, r2
 8003a76:	005b      	lsls	r3, r3, #1
 8003a78:	4413      	add	r3, r2
 8003a7a:	051b      	lsls	r3, r3, #20
 8003a7c:	e018      	b.n	8003ab0 <HAL_ADC_ConfigChannel+0x3c8>
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a86:	fa93 f3a3 	rbit	r3, r3
 8003a8a:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8003a8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a8e:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8003a90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d101      	bne.n	8003a9a <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 8003a96:	2320      	movs	r3, #32
 8003a98:	e003      	b.n	8003aa2 <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 8003a9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a9c:	fab3 f383 	clz	r3, r3
 8003aa0:	b2db      	uxtb	r3, r3
 8003aa2:	3301      	adds	r3, #1
 8003aa4:	f003 021f 	and.w	r2, r3, #31
 8003aa8:	4613      	mov	r3, r2
 8003aaa:	005b      	lsls	r3, r3, #1
 8003aac:	4413      	add	r3, r2
 8003aae:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003ab0:	430b      	orrs	r3, r1
 8003ab2:	e07e      	b.n	8003bb2 <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d107      	bne.n	8003ad0 <HAL_ADC_ConfigChannel+0x3e8>
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	0e9b      	lsrs	r3, r3, #26
 8003ac6:	3301      	adds	r3, #1
 8003ac8:	069b      	lsls	r3, r3, #26
 8003aca:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003ace:	e015      	b.n	8003afc <HAL_ADC_ConfigChannel+0x414>
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ad6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ad8:	fa93 f3a3 	rbit	r3, r3
 8003adc:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8003ade:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ae0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8003ae2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d101      	bne.n	8003aec <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 8003ae8:	2320      	movs	r3, #32
 8003aea:	e003      	b.n	8003af4 <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 8003aec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003aee:	fab3 f383 	clz	r3, r3
 8003af2:	b2db      	uxtb	r3, r3
 8003af4:	3301      	adds	r3, #1
 8003af6:	069b      	lsls	r3, r3, #26
 8003af8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d109      	bne.n	8003b1c <HAL_ADC_ConfigChannel+0x434>
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	0e9b      	lsrs	r3, r3, #26
 8003b0e:	3301      	adds	r3, #1
 8003b10:	f003 031f 	and.w	r3, r3, #31
 8003b14:	2101      	movs	r1, #1
 8003b16:	fa01 f303 	lsl.w	r3, r1, r3
 8003b1a:	e017      	b.n	8003b4c <HAL_ADC_ConfigChannel+0x464>
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b22:	69fb      	ldr	r3, [r7, #28]
 8003b24:	fa93 f3a3 	rbit	r3, r3
 8003b28:	61bb      	str	r3, [r7, #24]
  return result;
 8003b2a:	69bb      	ldr	r3, [r7, #24]
 8003b2c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003b2e:	6a3b      	ldr	r3, [r7, #32]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d101      	bne.n	8003b38 <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 8003b34:	2320      	movs	r3, #32
 8003b36:	e003      	b.n	8003b40 <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 8003b38:	6a3b      	ldr	r3, [r7, #32]
 8003b3a:	fab3 f383 	clz	r3, r3
 8003b3e:	b2db      	uxtb	r3, r3
 8003b40:	3301      	adds	r3, #1
 8003b42:	f003 031f 	and.w	r3, r3, #31
 8003b46:	2101      	movs	r1, #1
 8003b48:	fa01 f303 	lsl.w	r3, r1, r3
 8003b4c:	ea42 0103 	orr.w	r1, r2, r3
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d10d      	bne.n	8003b78 <HAL_ADC_ConfigChannel+0x490>
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	0e9b      	lsrs	r3, r3, #26
 8003b62:	3301      	adds	r3, #1
 8003b64:	f003 021f 	and.w	r2, r3, #31
 8003b68:	4613      	mov	r3, r2
 8003b6a:	005b      	lsls	r3, r3, #1
 8003b6c:	4413      	add	r3, r2
 8003b6e:	3b1e      	subs	r3, #30
 8003b70:	051b      	lsls	r3, r3, #20
 8003b72:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003b76:	e01b      	b.n	8003bb0 <HAL_ADC_ConfigChannel+0x4c8>
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	fa93 f3a3 	rbit	r3, r3
 8003b84:	60fb      	str	r3, [r7, #12]
  return result;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003b8a:	697b      	ldr	r3, [r7, #20]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d101      	bne.n	8003b94 <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 8003b90:	2320      	movs	r3, #32
 8003b92:	e003      	b.n	8003b9c <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	fab3 f383 	clz	r3, r3
 8003b9a:	b2db      	uxtb	r3, r3
 8003b9c:	3301      	adds	r3, #1
 8003b9e:	f003 021f 	and.w	r2, r3, #31
 8003ba2:	4613      	mov	r3, r2
 8003ba4:	005b      	lsls	r3, r3, #1
 8003ba6:	4413      	add	r3, r2
 8003ba8:	3b1e      	subs	r3, #30
 8003baa:	051b      	lsls	r3, r3, #20
 8003bac:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003bb0:	430b      	orrs	r3, r1
 8003bb2:	683a      	ldr	r2, [r7, #0]
 8003bb4:	6892      	ldr	r2, [r2, #8]
 8003bb6:	4619      	mov	r1, r3
 8003bb8:	f7ff f90d 	bl	8002dd6 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	f280 80cf 	bge.w	8003d64 <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4a06      	ldr	r2, [pc, #24]	@ (8003be4 <HAL_ADC_ConfigChannel+0x4fc>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d004      	beq.n	8003bda <HAL_ADC_ConfigChannel+0x4f2>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a04      	ldr	r2, [pc, #16]	@ (8003be8 <HAL_ADC_ConfigChannel+0x500>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d10a      	bne.n	8003bf0 <HAL_ADC_ConfigChannel+0x508>
 8003bda:	4b04      	ldr	r3, [pc, #16]	@ (8003bec <HAL_ADC_ConfigChannel+0x504>)
 8003bdc:	e009      	b.n	8003bf2 <HAL_ADC_ConfigChannel+0x50a>
 8003bde:	bf00      	nop
 8003be0:	47ff0000 	.word	0x47ff0000
 8003be4:	40022000 	.word	0x40022000
 8003be8:	40022100 	.word	0x40022100
 8003bec:	40022300 	.word	0x40022300
 8003bf0:	4b61      	ldr	r3, [pc, #388]	@ (8003d78 <HAL_ADC_ConfigChannel+0x690>)
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	f7ff f84e 	bl	8002c94 <LL_ADC_GetCommonPathInternalCh>
 8003bf8:	66f8      	str	r0, [r7, #108]	@ 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a5f      	ldr	r2, [pc, #380]	@ (8003d7c <HAL_ADC_ConfigChannel+0x694>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d004      	beq.n	8003c0e <HAL_ADC_ConfigChannel+0x526>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a5d      	ldr	r2, [pc, #372]	@ (8003d80 <HAL_ADC_ConfigChannel+0x698>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d10e      	bne.n	8003c2c <HAL_ADC_ConfigChannel+0x544>
 8003c0e:	485b      	ldr	r0, [pc, #364]	@ (8003d7c <HAL_ADC_ConfigChannel+0x694>)
 8003c10:	f7ff f9ae 	bl	8002f70 <LL_ADC_IsEnabled>
 8003c14:	4604      	mov	r4, r0
 8003c16:	485a      	ldr	r0, [pc, #360]	@ (8003d80 <HAL_ADC_ConfigChannel+0x698>)
 8003c18:	f7ff f9aa 	bl	8002f70 <LL_ADC_IsEnabled>
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	4323      	orrs	r3, r4
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	bf0c      	ite	eq
 8003c24:	2301      	moveq	r3, #1
 8003c26:	2300      	movne	r3, #0
 8003c28:	b2db      	uxtb	r3, r3
 8003c2a:	e008      	b.n	8003c3e <HAL_ADC_ConfigChannel+0x556>
 8003c2c:	4855      	ldr	r0, [pc, #340]	@ (8003d84 <HAL_ADC_ConfigChannel+0x69c>)
 8003c2e:	f7ff f99f 	bl	8002f70 <LL_ADC_IsEnabled>
 8003c32:	4603      	mov	r3, r0
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	bf0c      	ite	eq
 8003c38:	2301      	moveq	r3, #1
 8003c3a:	2300      	movne	r3, #0
 8003c3c:	b2db      	uxtb	r3, r3
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d07d      	beq.n	8003d3e <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4a50      	ldr	r2, [pc, #320]	@ (8003d88 <HAL_ADC_ConfigChannel+0x6a0>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d130      	bne.n	8003cae <HAL_ADC_ConfigChannel+0x5c6>
 8003c4c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003c4e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d12b      	bne.n	8003cae <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4a4a      	ldr	r2, [pc, #296]	@ (8003d84 <HAL_ADC_ConfigChannel+0x69c>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	f040 8081 	bne.w	8003d64 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a45      	ldr	r2, [pc, #276]	@ (8003d7c <HAL_ADC_ConfigChannel+0x694>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d004      	beq.n	8003c76 <HAL_ADC_ConfigChannel+0x58e>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a43      	ldr	r2, [pc, #268]	@ (8003d80 <HAL_ADC_ConfigChannel+0x698>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d101      	bne.n	8003c7a <HAL_ADC_ConfigChannel+0x592>
 8003c76:	4a45      	ldr	r2, [pc, #276]	@ (8003d8c <HAL_ADC_ConfigChannel+0x6a4>)
 8003c78:	e000      	b.n	8003c7c <HAL_ADC_ConfigChannel+0x594>
 8003c7a:	4a3f      	ldr	r2, [pc, #252]	@ (8003d78 <HAL_ADC_ConfigChannel+0x690>)
 8003c7c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003c7e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003c82:	4619      	mov	r1, r3
 8003c84:	4610      	mov	r0, r2
 8003c86:	f7fe fff2 	bl	8002c6e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003c8a:	4b41      	ldr	r3, [pc, #260]	@ (8003d90 <HAL_ADC_ConfigChannel+0x6a8>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	099b      	lsrs	r3, r3, #6
 8003c90:	4a40      	ldr	r2, [pc, #256]	@ (8003d94 <HAL_ADC_ConfigChannel+0x6ac>)
 8003c92:	fba2 2303 	umull	r2, r3, r2, r3
 8003c96:	099b      	lsrs	r3, r3, #6
 8003c98:	3301      	adds	r3, #1
 8003c9a:	005b      	lsls	r3, r3, #1
 8003c9c:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003c9e:	e002      	b.n	8003ca6 <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	3b01      	subs	r3, #1
 8003ca4:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003ca6:	68bb      	ldr	r3, [r7, #8]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d1f9      	bne.n	8003ca0 <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003cac:	e05a      	b.n	8003d64 <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4a39      	ldr	r2, [pc, #228]	@ (8003d98 <HAL_ADC_ConfigChannel+0x6b0>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d11e      	bne.n	8003cf6 <HAL_ADC_ConfigChannel+0x60e>
 8003cb8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003cba:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d119      	bne.n	8003cf6 <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4a2f      	ldr	r2, [pc, #188]	@ (8003d84 <HAL_ADC_ConfigChannel+0x69c>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d14b      	bne.n	8003d64 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a2a      	ldr	r2, [pc, #168]	@ (8003d7c <HAL_ADC_ConfigChannel+0x694>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d004      	beq.n	8003ce0 <HAL_ADC_ConfigChannel+0x5f8>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4a29      	ldr	r2, [pc, #164]	@ (8003d80 <HAL_ADC_ConfigChannel+0x698>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d101      	bne.n	8003ce4 <HAL_ADC_ConfigChannel+0x5fc>
 8003ce0:	4a2a      	ldr	r2, [pc, #168]	@ (8003d8c <HAL_ADC_ConfigChannel+0x6a4>)
 8003ce2:	e000      	b.n	8003ce6 <HAL_ADC_ConfigChannel+0x5fe>
 8003ce4:	4a24      	ldr	r2, [pc, #144]	@ (8003d78 <HAL_ADC_ConfigChannel+0x690>)
 8003ce6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003ce8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003cec:	4619      	mov	r1, r3
 8003cee:	4610      	mov	r0, r2
 8003cf0:	f7fe ffbd 	bl	8002c6e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003cf4:	e036      	b.n	8003d64 <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4a28      	ldr	r2, [pc, #160]	@ (8003d9c <HAL_ADC_ConfigChannel+0x6b4>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d131      	bne.n	8003d64 <HAL_ADC_ConfigChannel+0x67c>
 8003d00:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003d02:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d12c      	bne.n	8003d64 <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a1d      	ldr	r2, [pc, #116]	@ (8003d84 <HAL_ADC_ConfigChannel+0x69c>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d127      	bne.n	8003d64 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a18      	ldr	r2, [pc, #96]	@ (8003d7c <HAL_ADC_ConfigChannel+0x694>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d004      	beq.n	8003d28 <HAL_ADC_ConfigChannel+0x640>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a17      	ldr	r2, [pc, #92]	@ (8003d80 <HAL_ADC_ConfigChannel+0x698>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d101      	bne.n	8003d2c <HAL_ADC_ConfigChannel+0x644>
 8003d28:	4a18      	ldr	r2, [pc, #96]	@ (8003d8c <HAL_ADC_ConfigChannel+0x6a4>)
 8003d2a:	e000      	b.n	8003d2e <HAL_ADC_ConfigChannel+0x646>
 8003d2c:	4a12      	ldr	r2, [pc, #72]	@ (8003d78 <HAL_ADC_ConfigChannel+0x690>)
 8003d2e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003d30:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003d34:	4619      	mov	r1, r3
 8003d36:	4610      	mov	r0, r2
 8003d38:	f7fe ff99 	bl	8002c6e <LL_ADC_SetCommonPathInternalCh>
 8003d3c:	e012      	b.n	8003d64 <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d42:	f043 0220 	orr.w	r2, r3, #32
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8003d50:	e008      	b.n	8003d64 <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d56:	f043 0220 	orr.w	r2, r3, #32
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2200      	movs	r2, #0
 8003d68:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8003d6c:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	3784      	adds	r7, #132	@ 0x84
 8003d74:	46bd      	mov	sp, r7
 8003d76:	bd90      	pop	{r4, r7, pc}
 8003d78:	58026300 	.word	0x58026300
 8003d7c:	40022000 	.word	0x40022000
 8003d80:	40022100 	.word	0x40022100
 8003d84:	58026000 	.word	0x58026000
 8003d88:	cb840000 	.word	0xcb840000
 8003d8c:	40022300 	.word	0x40022300
 8003d90:	24000000 	.word	0x24000000
 8003d94:	053e2d63 	.word	0x053e2d63
 8003d98:	c7520000 	.word	0xc7520000
 8003d9c:	cfb80000 	.word	0xcfb80000

08003da0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b084      	sub	sp, #16
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4618      	mov	r0, r3
 8003dae:	f7ff f8df 	bl	8002f70 <LL_ADC_IsEnabled>
 8003db2:	4603      	mov	r3, r0
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d16e      	bne.n	8003e96 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	689a      	ldr	r2, [r3, #8]
 8003dbe:	4b38      	ldr	r3, [pc, #224]	@ (8003ea0 <ADC_Enable+0x100>)
 8003dc0:	4013      	ands	r3, r2
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d00d      	beq.n	8003de2 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003dca:	f043 0210 	orr.w	r2, r3, #16
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dd6:	f043 0201 	orr.w	r2, r3, #1
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	e05a      	b.n	8003e98 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4618      	mov	r0, r3
 8003de8:	f7ff f8ae 	bl	8002f48 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003dec:	f7fe fef0 	bl	8002bd0 <HAL_GetTick>
 8003df0:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4a2b      	ldr	r2, [pc, #172]	@ (8003ea4 <ADC_Enable+0x104>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d004      	beq.n	8003e06 <ADC_Enable+0x66>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a29      	ldr	r2, [pc, #164]	@ (8003ea8 <ADC_Enable+0x108>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d101      	bne.n	8003e0a <ADC_Enable+0x6a>
 8003e06:	4b29      	ldr	r3, [pc, #164]	@ (8003eac <ADC_Enable+0x10c>)
 8003e08:	e000      	b.n	8003e0c <ADC_Enable+0x6c>
 8003e0a:	4b29      	ldr	r3, [pc, #164]	@ (8003eb0 <ADC_Enable+0x110>)
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	f7ff f831 	bl	8002e74 <LL_ADC_GetMultimode>
 8003e12:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a23      	ldr	r2, [pc, #140]	@ (8003ea8 <ADC_Enable+0x108>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d002      	beq.n	8003e24 <ADC_Enable+0x84>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	e000      	b.n	8003e26 <ADC_Enable+0x86>
 8003e24:	4b1f      	ldr	r3, [pc, #124]	@ (8003ea4 <ADC_Enable+0x104>)
 8003e26:	687a      	ldr	r2, [r7, #4]
 8003e28:	6812      	ldr	r2, [r2, #0]
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d02c      	beq.n	8003e88 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003e2e:	68bb      	ldr	r3, [r7, #8]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d130      	bne.n	8003e96 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003e34:	e028      	b.n	8003e88 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	f7ff f898 	bl	8002f70 <LL_ADC_IsEnabled>
 8003e40:	4603      	mov	r3, r0
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d104      	bne.n	8003e50 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	f7ff f87c 	bl	8002f48 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003e50:	f7fe febe 	bl	8002bd0 <HAL_GetTick>
 8003e54:	4602      	mov	r2, r0
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	1ad3      	subs	r3, r2, r3
 8003e5a:	2b02      	cmp	r3, #2
 8003e5c:	d914      	bls.n	8003e88 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f003 0301 	and.w	r3, r3, #1
 8003e68:	2b01      	cmp	r3, #1
 8003e6a:	d00d      	beq.n	8003e88 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e70:	f043 0210 	orr.w	r2, r3, #16
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e7c:	f043 0201 	orr.w	r2, r3, #1
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	659a      	str	r2, [r3, #88]	@ 0x58

            return HAL_ERROR;
 8003e84:	2301      	movs	r3, #1
 8003e86:	e007      	b.n	8003e98 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f003 0301 	and.w	r3, r3, #1
 8003e92:	2b01      	cmp	r3, #1
 8003e94:	d1cf      	bne.n	8003e36 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003e96:	2300      	movs	r3, #0
}
 8003e98:	4618      	mov	r0, r3
 8003e9a:	3710      	adds	r7, #16
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	bd80      	pop	{r7, pc}
 8003ea0:	8000003f 	.word	0x8000003f
 8003ea4:	40022000 	.word	0x40022000
 8003ea8:	40022100 	.word	0x40022100
 8003eac:	40022300 	.word	0x40022300
 8003eb0:	58026300 	.word	0x58026300

08003eb4 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b084      	sub	sp, #16
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a7a      	ldr	r2, [pc, #488]	@ (80040ac <ADC_ConfigureBoostMode+0x1f8>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d004      	beq.n	8003ed0 <ADC_ConfigureBoostMode+0x1c>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4a79      	ldr	r2, [pc, #484]	@ (80040b0 <ADC_ConfigureBoostMode+0x1fc>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d109      	bne.n	8003ee4 <ADC_ConfigureBoostMode+0x30>
 8003ed0:	4b78      	ldr	r3, [pc, #480]	@ (80040b4 <ADC_ConfigureBoostMode+0x200>)
 8003ed2:	689b      	ldr	r3, [r3, #8]
 8003ed4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	bf14      	ite	ne
 8003edc:	2301      	movne	r3, #1
 8003ede:	2300      	moveq	r3, #0
 8003ee0:	b2db      	uxtb	r3, r3
 8003ee2:	e008      	b.n	8003ef6 <ADC_ConfigureBoostMode+0x42>
 8003ee4:	4b74      	ldr	r3, [pc, #464]	@ (80040b8 <ADC_ConfigureBoostMode+0x204>)
 8003ee6:	689b      	ldr	r3, [r3, #8]
 8003ee8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	bf14      	ite	ne
 8003ef0:	2301      	movne	r3, #1
 8003ef2:	2300      	moveq	r3, #0
 8003ef4:	b2db      	uxtb	r3, r3
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d01c      	beq.n	8003f34 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8003efa:	f005 f8fb 	bl	80090f4 <HAL_RCC_GetHCLKFreq>
 8003efe:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003f08:	d010      	beq.n	8003f2c <ADC_ConfigureBoostMode+0x78>
 8003f0a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003f0e:	d873      	bhi.n	8003ff8 <ADC_ConfigureBoostMode+0x144>
 8003f10:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f14:	d002      	beq.n	8003f1c <ADC_ConfigureBoostMode+0x68>
 8003f16:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003f1a:	d16d      	bne.n	8003ff8 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	0c1b      	lsrs	r3, r3, #16
 8003f22:	68fa      	ldr	r2, [r7, #12]
 8003f24:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f28:	60fb      	str	r3, [r7, #12]
        break;
 8003f2a:	e068      	b.n	8003ffe <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	089b      	lsrs	r3, r3, #2
 8003f30:	60fb      	str	r3, [r7, #12]
        break;
 8003f32:	e064      	b.n	8003ffe <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8003f34:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8003f38:	f04f 0100 	mov.w	r1, #0
 8003f3c:	f006 fb40 	bl	800a5c0 <HAL_RCCEx_GetPeriphCLKFreq>
 8003f40:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8003f4a:	d051      	beq.n	8003ff0 <ADC_ConfigureBoostMode+0x13c>
 8003f4c:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8003f50:	d854      	bhi.n	8003ffc <ADC_ConfigureBoostMode+0x148>
 8003f52:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8003f56:	d047      	beq.n	8003fe8 <ADC_ConfigureBoostMode+0x134>
 8003f58:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8003f5c:	d84e      	bhi.n	8003ffc <ADC_ConfigureBoostMode+0x148>
 8003f5e:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8003f62:	d03d      	beq.n	8003fe0 <ADC_ConfigureBoostMode+0x12c>
 8003f64:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8003f68:	d848      	bhi.n	8003ffc <ADC_ConfigureBoostMode+0x148>
 8003f6a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003f6e:	d033      	beq.n	8003fd8 <ADC_ConfigureBoostMode+0x124>
 8003f70:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003f74:	d842      	bhi.n	8003ffc <ADC_ConfigureBoostMode+0x148>
 8003f76:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8003f7a:	d029      	beq.n	8003fd0 <ADC_ConfigureBoostMode+0x11c>
 8003f7c:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8003f80:	d83c      	bhi.n	8003ffc <ADC_ConfigureBoostMode+0x148>
 8003f82:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8003f86:	d01a      	beq.n	8003fbe <ADC_ConfigureBoostMode+0x10a>
 8003f88:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8003f8c:	d836      	bhi.n	8003ffc <ADC_ConfigureBoostMode+0x148>
 8003f8e:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8003f92:	d014      	beq.n	8003fbe <ADC_ConfigureBoostMode+0x10a>
 8003f94:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8003f98:	d830      	bhi.n	8003ffc <ADC_ConfigureBoostMode+0x148>
 8003f9a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003f9e:	d00e      	beq.n	8003fbe <ADC_ConfigureBoostMode+0x10a>
 8003fa0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003fa4:	d82a      	bhi.n	8003ffc <ADC_ConfigureBoostMode+0x148>
 8003fa6:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003faa:	d008      	beq.n	8003fbe <ADC_ConfigureBoostMode+0x10a>
 8003fac:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003fb0:	d824      	bhi.n	8003ffc <ADC_ConfigureBoostMode+0x148>
 8003fb2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003fb6:	d002      	beq.n	8003fbe <ADC_ConfigureBoostMode+0x10a>
 8003fb8:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003fbc:	d11e      	bne.n	8003ffc <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	0c9b      	lsrs	r3, r3, #18
 8003fc4:	005b      	lsls	r3, r3, #1
 8003fc6:	68fa      	ldr	r2, [r7, #12]
 8003fc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fcc:	60fb      	str	r3, [r7, #12]
        break;
 8003fce:	e016      	b.n	8003ffe <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	091b      	lsrs	r3, r3, #4
 8003fd4:	60fb      	str	r3, [r7, #12]
        break;
 8003fd6:	e012      	b.n	8003ffe <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	095b      	lsrs	r3, r3, #5
 8003fdc:	60fb      	str	r3, [r7, #12]
        break;
 8003fde:	e00e      	b.n	8003ffe <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	099b      	lsrs	r3, r3, #6
 8003fe4:	60fb      	str	r3, [r7, #12]
        break;
 8003fe6:	e00a      	b.n	8003ffe <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	09db      	lsrs	r3, r3, #7
 8003fec:	60fb      	str	r3, [r7, #12]
        break;
 8003fee:	e006      	b.n	8003ffe <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	0a1b      	lsrs	r3, r3, #8
 8003ff4:	60fb      	str	r3, [r7, #12]
        break;
 8003ff6:	e002      	b.n	8003ffe <ADC_ConfigureBoostMode+0x14a>
        break;
 8003ff8:	bf00      	nop
 8003ffa:	e000      	b.n	8003ffe <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8003ffc:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8003ffe:	f7fe fe17 	bl	8002c30 <HAL_GetREVID>
 8004002:	4603      	mov	r3, r0
 8004004:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004008:	4293      	cmp	r3, r2
 800400a:	d815      	bhi.n	8004038 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	4a2b      	ldr	r2, [pc, #172]	@ (80040bc <ADC_ConfigureBoostMode+0x208>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d908      	bls.n	8004026 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	689a      	ldr	r2, [r3, #8]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004022:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8004024:	e03e      	b.n	80040a4 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	689a      	ldr	r2, [r3, #8]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004034:	609a      	str	r2, [r3, #8]
}
 8004036:	e035      	b.n	80040a4 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	085b      	lsrs	r3, r3, #1
 800403c:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	4a1f      	ldr	r2, [pc, #124]	@ (80040c0 <ADC_ConfigureBoostMode+0x20c>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d808      	bhi.n	8004058 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	689a      	ldr	r2, [r3, #8]
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8004054:	609a      	str	r2, [r3, #8]
}
 8004056:	e025      	b.n	80040a4 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	4a1a      	ldr	r2, [pc, #104]	@ (80040c4 <ADC_ConfigureBoostMode+0x210>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d80a      	bhi.n	8004076 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	689b      	ldr	r3, [r3, #8]
 8004066:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004072:	609a      	str	r2, [r3, #8]
}
 8004074:	e016      	b.n	80040a4 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	4a13      	ldr	r2, [pc, #76]	@ (80040c8 <ADC_ConfigureBoostMode+0x214>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d80a      	bhi.n	8004094 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	689b      	ldr	r3, [r3, #8]
 8004084:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004090:	609a      	str	r2, [r3, #8]
}
 8004092:	e007      	b.n	80040a4 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	689a      	ldr	r2, [r3, #8]
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 80040a2:	609a      	str	r2, [r3, #8]
}
 80040a4:	bf00      	nop
 80040a6:	3710      	adds	r7, #16
 80040a8:	46bd      	mov	sp, r7
 80040aa:	bd80      	pop	{r7, pc}
 80040ac:	40022000 	.word	0x40022000
 80040b0:	40022100 	.word	0x40022100
 80040b4:	40022300 	.word	0x40022300
 80040b8:	58026300 	.word	0x58026300
 80040bc:	01312d00 	.word	0x01312d00
 80040c0:	005f5e10 	.word	0x005f5e10
 80040c4:	00bebc20 	.word	0x00bebc20
 80040c8:	017d7840 	.word	0x017d7840

080040cc <LL_ADC_IsEnabled>:
{
 80040cc:	b480      	push	{r7}
 80040ce:	b083      	sub	sp, #12
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	689b      	ldr	r3, [r3, #8]
 80040d8:	f003 0301 	and.w	r3, r3, #1
 80040dc:	2b01      	cmp	r3, #1
 80040de:	d101      	bne.n	80040e4 <LL_ADC_IsEnabled+0x18>
 80040e0:	2301      	movs	r3, #1
 80040e2:	e000      	b.n	80040e6 <LL_ADC_IsEnabled+0x1a>
 80040e4:	2300      	movs	r3, #0
}
 80040e6:	4618      	mov	r0, r3
 80040e8:	370c      	adds	r7, #12
 80040ea:	46bd      	mov	sp, r7
 80040ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f0:	4770      	bx	lr

080040f2 <LL_ADC_REG_IsConversionOngoing>:
{
 80040f2:	b480      	push	{r7}
 80040f4:	b083      	sub	sp, #12
 80040f6:	af00      	add	r7, sp, #0
 80040f8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	689b      	ldr	r3, [r3, #8]
 80040fe:	f003 0304 	and.w	r3, r3, #4
 8004102:	2b04      	cmp	r3, #4
 8004104:	d101      	bne.n	800410a <LL_ADC_REG_IsConversionOngoing+0x18>
 8004106:	2301      	movs	r3, #1
 8004108:	e000      	b.n	800410c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800410a:	2300      	movs	r3, #0
}
 800410c:	4618      	mov	r0, r3
 800410e:	370c      	adds	r7, #12
 8004110:	46bd      	mov	sp, r7
 8004112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004116:	4770      	bx	lr

08004118 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004118:	b590      	push	{r4, r7, lr}
 800411a:	b09f      	sub	sp, #124	@ 0x7c
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
 8004120:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004122:	2300      	movs	r3, #0
 8004124:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800412e:	2b01      	cmp	r3, #1
 8004130:	d101      	bne.n	8004136 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004132:	2302      	movs	r3, #2
 8004134:	e0be      	b.n	80042b4 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2201      	movs	r2, #1
 800413a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800413e:	2300      	movs	r3, #0
 8004140:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8004142:	2300      	movs	r3, #0
 8004144:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a5c      	ldr	r2, [pc, #368]	@ (80042bc <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d102      	bne.n	8004156 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004150:	4b5b      	ldr	r3, [pc, #364]	@ (80042c0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004152:	60bb      	str	r3, [r7, #8]
 8004154:	e001      	b.n	800415a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004156:	2300      	movs	r3, #0
 8004158:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d10b      	bne.n	8004178 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004164:	f043 0220 	orr.w	r2, r3, #32
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2200      	movs	r2, #0
 8004170:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8004174:	2301      	movs	r3, #1
 8004176:	e09d      	b.n	80042b4 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	4618      	mov	r0, r3
 800417c:	f7ff ffb9 	bl	80040f2 <LL_ADC_REG_IsConversionOngoing>
 8004180:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4618      	mov	r0, r3
 8004188:	f7ff ffb3 	bl	80040f2 <LL_ADC_REG_IsConversionOngoing>
 800418c:	4603      	mov	r3, r0
 800418e:	2b00      	cmp	r3, #0
 8004190:	d17f      	bne.n	8004292 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8004192:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004194:	2b00      	cmp	r3, #0
 8004196:	d17c      	bne.n	8004292 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4a47      	ldr	r2, [pc, #284]	@ (80042bc <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d004      	beq.n	80041ac <HAL_ADCEx_MultiModeConfigChannel+0x94>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4a46      	ldr	r2, [pc, #280]	@ (80042c0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d101      	bne.n	80041b0 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 80041ac:	4b45      	ldr	r3, [pc, #276]	@ (80042c4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80041ae:	e000      	b.n	80041b2 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 80041b0:	4b45      	ldr	r3, [pc, #276]	@ (80042c8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80041b2:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d039      	beq.n	8004230 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80041bc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80041be:	689b      	ldr	r3, [r3, #8]
 80041c0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	431a      	orrs	r2, r3
 80041ca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80041cc:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4a3a      	ldr	r2, [pc, #232]	@ (80042bc <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d004      	beq.n	80041e2 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a38      	ldr	r2, [pc, #224]	@ (80042c0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d10e      	bne.n	8004200 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80041e2:	4836      	ldr	r0, [pc, #216]	@ (80042bc <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80041e4:	f7ff ff72 	bl	80040cc <LL_ADC_IsEnabled>
 80041e8:	4604      	mov	r4, r0
 80041ea:	4835      	ldr	r0, [pc, #212]	@ (80042c0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80041ec:	f7ff ff6e 	bl	80040cc <LL_ADC_IsEnabled>
 80041f0:	4603      	mov	r3, r0
 80041f2:	4323      	orrs	r3, r4
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	bf0c      	ite	eq
 80041f8:	2301      	moveq	r3, #1
 80041fa:	2300      	movne	r3, #0
 80041fc:	b2db      	uxtb	r3, r3
 80041fe:	e008      	b.n	8004212 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8004200:	4832      	ldr	r0, [pc, #200]	@ (80042cc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004202:	f7ff ff63 	bl	80040cc <LL_ADC_IsEnabled>
 8004206:	4603      	mov	r3, r0
 8004208:	2b00      	cmp	r3, #0
 800420a:	bf0c      	ite	eq
 800420c:	2301      	moveq	r3, #1
 800420e:	2300      	movne	r3, #0
 8004210:	b2db      	uxtb	r3, r3
 8004212:	2b00      	cmp	r3, #0
 8004214:	d047      	beq.n	80042a6 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004216:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004218:	689a      	ldr	r2, [r3, #8]
 800421a:	4b2d      	ldr	r3, [pc, #180]	@ (80042d0 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 800421c:	4013      	ands	r3, r2
 800421e:	683a      	ldr	r2, [r7, #0]
 8004220:	6811      	ldr	r1, [r2, #0]
 8004222:	683a      	ldr	r2, [r7, #0]
 8004224:	6892      	ldr	r2, [r2, #8]
 8004226:	430a      	orrs	r2, r1
 8004228:	431a      	orrs	r2, r3
 800422a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800422c:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800422e:	e03a      	b.n	80042a6 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8004230:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004232:	689b      	ldr	r3, [r3, #8]
 8004234:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004238:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800423a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a1e      	ldr	r2, [pc, #120]	@ (80042bc <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d004      	beq.n	8004250 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a1d      	ldr	r2, [pc, #116]	@ (80042c0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d10e      	bne.n	800426e <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8004250:	481a      	ldr	r0, [pc, #104]	@ (80042bc <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004252:	f7ff ff3b 	bl	80040cc <LL_ADC_IsEnabled>
 8004256:	4604      	mov	r4, r0
 8004258:	4819      	ldr	r0, [pc, #100]	@ (80042c0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800425a:	f7ff ff37 	bl	80040cc <LL_ADC_IsEnabled>
 800425e:	4603      	mov	r3, r0
 8004260:	4323      	orrs	r3, r4
 8004262:	2b00      	cmp	r3, #0
 8004264:	bf0c      	ite	eq
 8004266:	2301      	moveq	r3, #1
 8004268:	2300      	movne	r3, #0
 800426a:	b2db      	uxtb	r3, r3
 800426c:	e008      	b.n	8004280 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 800426e:	4817      	ldr	r0, [pc, #92]	@ (80042cc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004270:	f7ff ff2c 	bl	80040cc <LL_ADC_IsEnabled>
 8004274:	4603      	mov	r3, r0
 8004276:	2b00      	cmp	r3, #0
 8004278:	bf0c      	ite	eq
 800427a:	2301      	moveq	r3, #1
 800427c:	2300      	movne	r3, #0
 800427e:	b2db      	uxtb	r3, r3
 8004280:	2b00      	cmp	r3, #0
 8004282:	d010      	beq.n	80042a6 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004284:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004286:	689a      	ldr	r2, [r3, #8]
 8004288:	4b11      	ldr	r3, [pc, #68]	@ (80042d0 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 800428a:	4013      	ands	r3, r2
 800428c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800428e:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004290:	e009      	b.n	80042a6 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004296:	f043 0220 	orr.w	r2, r3, #32
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800429e:	2301      	movs	r3, #1
 80042a0:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 80042a4:	e000      	b.n	80042a8 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80042a6:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2200      	movs	r2, #0
 80042ac:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80042b0:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 80042b4:	4618      	mov	r0, r3
 80042b6:	377c      	adds	r7, #124	@ 0x7c
 80042b8:	46bd      	mov	sp, r7
 80042ba:	bd90      	pop	{r4, r7, pc}
 80042bc:	40022000 	.word	0x40022000
 80042c0:	40022100 	.word	0x40022100
 80042c4:	40022300 	.word	0x40022300
 80042c8:	58026300 	.word	0x58026300
 80042cc:	58026000 	.word	0x58026000
 80042d0:	fffff0e0 	.word	0xfffff0e0

080042d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80042d4:	b480      	push	{r7}
 80042d6:	b085      	sub	sp, #20
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	f003 0307 	and.w	r3, r3, #7
 80042e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80042e4:	4b0b      	ldr	r3, [pc, #44]	@ (8004314 <__NVIC_SetPriorityGrouping+0x40>)
 80042e6:	68db      	ldr	r3, [r3, #12]
 80042e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80042ea:	68ba      	ldr	r2, [r7, #8]
 80042ec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80042f0:	4013      	ands	r3, r2
 80042f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80042f8:	68bb      	ldr	r3, [r7, #8]
 80042fa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80042fc:	4b06      	ldr	r3, [pc, #24]	@ (8004318 <__NVIC_SetPriorityGrouping+0x44>)
 80042fe:	4313      	orrs	r3, r2
 8004300:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004302:	4a04      	ldr	r2, [pc, #16]	@ (8004314 <__NVIC_SetPriorityGrouping+0x40>)
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	60d3      	str	r3, [r2, #12]
}
 8004308:	bf00      	nop
 800430a:	3714      	adds	r7, #20
 800430c:	46bd      	mov	sp, r7
 800430e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004312:	4770      	bx	lr
 8004314:	e000ed00 	.word	0xe000ed00
 8004318:	05fa0000 	.word	0x05fa0000

0800431c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800431c:	b480      	push	{r7}
 800431e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004320:	4b04      	ldr	r3, [pc, #16]	@ (8004334 <__NVIC_GetPriorityGrouping+0x18>)
 8004322:	68db      	ldr	r3, [r3, #12]
 8004324:	0a1b      	lsrs	r3, r3, #8
 8004326:	f003 0307 	and.w	r3, r3, #7
}
 800432a:	4618      	mov	r0, r3
 800432c:	46bd      	mov	sp, r7
 800432e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004332:	4770      	bx	lr
 8004334:	e000ed00 	.word	0xe000ed00

08004338 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004338:	b480      	push	{r7}
 800433a:	b083      	sub	sp, #12
 800433c:	af00      	add	r7, sp, #0
 800433e:	4603      	mov	r3, r0
 8004340:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004342:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004346:	2b00      	cmp	r3, #0
 8004348:	db0b      	blt.n	8004362 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800434a:	88fb      	ldrh	r3, [r7, #6]
 800434c:	f003 021f 	and.w	r2, r3, #31
 8004350:	4907      	ldr	r1, [pc, #28]	@ (8004370 <__NVIC_EnableIRQ+0x38>)
 8004352:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004356:	095b      	lsrs	r3, r3, #5
 8004358:	2001      	movs	r0, #1
 800435a:	fa00 f202 	lsl.w	r2, r0, r2
 800435e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004362:	bf00      	nop
 8004364:	370c      	adds	r7, #12
 8004366:	46bd      	mov	sp, r7
 8004368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436c:	4770      	bx	lr
 800436e:	bf00      	nop
 8004370:	e000e100 	.word	0xe000e100

08004374 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004374:	b480      	push	{r7}
 8004376:	b083      	sub	sp, #12
 8004378:	af00      	add	r7, sp, #0
 800437a:	4603      	mov	r3, r0
 800437c:	6039      	str	r1, [r7, #0]
 800437e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004380:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004384:	2b00      	cmp	r3, #0
 8004386:	db0a      	blt.n	800439e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	b2da      	uxtb	r2, r3
 800438c:	490c      	ldr	r1, [pc, #48]	@ (80043c0 <__NVIC_SetPriority+0x4c>)
 800438e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004392:	0112      	lsls	r2, r2, #4
 8004394:	b2d2      	uxtb	r2, r2
 8004396:	440b      	add	r3, r1
 8004398:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800439c:	e00a      	b.n	80043b4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	b2da      	uxtb	r2, r3
 80043a2:	4908      	ldr	r1, [pc, #32]	@ (80043c4 <__NVIC_SetPriority+0x50>)
 80043a4:	88fb      	ldrh	r3, [r7, #6]
 80043a6:	f003 030f 	and.w	r3, r3, #15
 80043aa:	3b04      	subs	r3, #4
 80043ac:	0112      	lsls	r2, r2, #4
 80043ae:	b2d2      	uxtb	r2, r2
 80043b0:	440b      	add	r3, r1
 80043b2:	761a      	strb	r2, [r3, #24]
}
 80043b4:	bf00      	nop
 80043b6:	370c      	adds	r7, #12
 80043b8:	46bd      	mov	sp, r7
 80043ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043be:	4770      	bx	lr
 80043c0:	e000e100 	.word	0xe000e100
 80043c4:	e000ed00 	.word	0xe000ed00

080043c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80043c8:	b480      	push	{r7}
 80043ca:	b089      	sub	sp, #36	@ 0x24
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	60f8      	str	r0, [r7, #12]
 80043d0:	60b9      	str	r1, [r7, #8]
 80043d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	f003 0307 	and.w	r3, r3, #7
 80043da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80043dc:	69fb      	ldr	r3, [r7, #28]
 80043de:	f1c3 0307 	rsb	r3, r3, #7
 80043e2:	2b04      	cmp	r3, #4
 80043e4:	bf28      	it	cs
 80043e6:	2304      	movcs	r3, #4
 80043e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80043ea:	69fb      	ldr	r3, [r7, #28]
 80043ec:	3304      	adds	r3, #4
 80043ee:	2b06      	cmp	r3, #6
 80043f0:	d902      	bls.n	80043f8 <NVIC_EncodePriority+0x30>
 80043f2:	69fb      	ldr	r3, [r7, #28]
 80043f4:	3b03      	subs	r3, #3
 80043f6:	e000      	b.n	80043fa <NVIC_EncodePriority+0x32>
 80043f8:	2300      	movs	r3, #0
 80043fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80043fc:	f04f 32ff 	mov.w	r2, #4294967295
 8004400:	69bb      	ldr	r3, [r7, #24]
 8004402:	fa02 f303 	lsl.w	r3, r2, r3
 8004406:	43da      	mvns	r2, r3
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	401a      	ands	r2, r3
 800440c:	697b      	ldr	r3, [r7, #20]
 800440e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004410:	f04f 31ff 	mov.w	r1, #4294967295
 8004414:	697b      	ldr	r3, [r7, #20]
 8004416:	fa01 f303 	lsl.w	r3, r1, r3
 800441a:	43d9      	mvns	r1, r3
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004420:	4313      	orrs	r3, r2
         );
}
 8004422:	4618      	mov	r0, r3
 8004424:	3724      	adds	r7, #36	@ 0x24
 8004426:	46bd      	mov	sp, r7
 8004428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442c:	4770      	bx	lr
	...

08004430 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b082      	sub	sp, #8
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	3b01      	subs	r3, #1
 800443c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004440:	d301      	bcc.n	8004446 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004442:	2301      	movs	r3, #1
 8004444:	e00f      	b.n	8004466 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004446:	4a0a      	ldr	r2, [pc, #40]	@ (8004470 <SysTick_Config+0x40>)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	3b01      	subs	r3, #1
 800444c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800444e:	210f      	movs	r1, #15
 8004450:	f04f 30ff 	mov.w	r0, #4294967295
 8004454:	f7ff ff8e 	bl	8004374 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004458:	4b05      	ldr	r3, [pc, #20]	@ (8004470 <SysTick_Config+0x40>)
 800445a:	2200      	movs	r2, #0
 800445c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800445e:	4b04      	ldr	r3, [pc, #16]	@ (8004470 <SysTick_Config+0x40>)
 8004460:	2207      	movs	r2, #7
 8004462:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004464:	2300      	movs	r3, #0
}
 8004466:	4618      	mov	r0, r3
 8004468:	3708      	adds	r7, #8
 800446a:	46bd      	mov	sp, r7
 800446c:	bd80      	pop	{r7, pc}
 800446e:	bf00      	nop
 8004470:	e000e010 	.word	0xe000e010

08004474 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b082      	sub	sp, #8
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800447c:	6878      	ldr	r0, [r7, #4]
 800447e:	f7ff ff29 	bl	80042d4 <__NVIC_SetPriorityGrouping>
}
 8004482:	bf00      	nop
 8004484:	3708      	adds	r7, #8
 8004486:	46bd      	mov	sp, r7
 8004488:	bd80      	pop	{r7, pc}

0800448a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800448a:	b580      	push	{r7, lr}
 800448c:	b086      	sub	sp, #24
 800448e:	af00      	add	r7, sp, #0
 8004490:	4603      	mov	r3, r0
 8004492:	60b9      	str	r1, [r7, #8]
 8004494:	607a      	str	r2, [r7, #4]
 8004496:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004498:	f7ff ff40 	bl	800431c <__NVIC_GetPriorityGrouping>
 800449c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800449e:	687a      	ldr	r2, [r7, #4]
 80044a0:	68b9      	ldr	r1, [r7, #8]
 80044a2:	6978      	ldr	r0, [r7, #20]
 80044a4:	f7ff ff90 	bl	80043c8 <NVIC_EncodePriority>
 80044a8:	4602      	mov	r2, r0
 80044aa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80044ae:	4611      	mov	r1, r2
 80044b0:	4618      	mov	r0, r3
 80044b2:	f7ff ff5f 	bl	8004374 <__NVIC_SetPriority>
}
 80044b6:	bf00      	nop
 80044b8:	3718      	adds	r7, #24
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bd80      	pop	{r7, pc}

080044be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80044be:	b580      	push	{r7, lr}
 80044c0:	b082      	sub	sp, #8
 80044c2:	af00      	add	r7, sp, #0
 80044c4:	4603      	mov	r3, r0
 80044c6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80044c8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80044cc:	4618      	mov	r0, r3
 80044ce:	f7ff ff33 	bl	8004338 <__NVIC_EnableIRQ>
}
 80044d2:	bf00      	nop
 80044d4:	3708      	adds	r7, #8
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bd80      	pop	{r7, pc}

080044da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80044da:	b580      	push	{r7, lr}
 80044dc:	b082      	sub	sp, #8
 80044de:	af00      	add	r7, sp, #0
 80044e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80044e2:	6878      	ldr	r0, [r7, #4]
 80044e4:	f7ff ffa4 	bl	8004430 <SysTick_Config>
 80044e8:	4603      	mov	r3, r0
}
 80044ea:	4618      	mov	r0, r3
 80044ec:	3708      	adds	r7, #8
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bd80      	pop	{r7, pc}
	...

080044f4 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 80044f4:	b480      	push	{r7}
 80044f6:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 80044f8:	4b07      	ldr	r3, [pc, #28]	@ (8004518 <HAL_GetCurrentCPUID+0x24>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	091b      	lsrs	r3, r3, #4
 80044fe:	f003 030f 	and.w	r3, r3, #15
 8004502:	2b07      	cmp	r3, #7
 8004504:	d101      	bne.n	800450a <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 8004506:	2303      	movs	r3, #3
 8004508:	e000      	b.n	800450c <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 800450a:	2301      	movs	r3, #1
  }
}
 800450c:	4618      	mov	r0, r3
 800450e:	46bd      	mov	sp, r7
 8004510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004514:	4770      	bx	lr
 8004516:	bf00      	nop
 8004518:	e000ed00 	.word	0xe000ed00

0800451c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b086      	sub	sp, #24
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8004524:	f7fe fb54 	bl	8002bd0 <HAL_GetTick>
 8004528:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d101      	bne.n	8004534 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8004530:	2301      	movs	r3, #1
 8004532:	e316      	b.n	8004b62 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a66      	ldr	r2, [pc, #408]	@ (80046d4 <HAL_DMA_Init+0x1b8>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d04a      	beq.n	80045d4 <HAL_DMA_Init+0xb8>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4a65      	ldr	r2, [pc, #404]	@ (80046d8 <HAL_DMA_Init+0x1bc>)
 8004544:	4293      	cmp	r3, r2
 8004546:	d045      	beq.n	80045d4 <HAL_DMA_Init+0xb8>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4a63      	ldr	r2, [pc, #396]	@ (80046dc <HAL_DMA_Init+0x1c0>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d040      	beq.n	80045d4 <HAL_DMA_Init+0xb8>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4a62      	ldr	r2, [pc, #392]	@ (80046e0 <HAL_DMA_Init+0x1c4>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d03b      	beq.n	80045d4 <HAL_DMA_Init+0xb8>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4a60      	ldr	r2, [pc, #384]	@ (80046e4 <HAL_DMA_Init+0x1c8>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d036      	beq.n	80045d4 <HAL_DMA_Init+0xb8>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4a5f      	ldr	r2, [pc, #380]	@ (80046e8 <HAL_DMA_Init+0x1cc>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d031      	beq.n	80045d4 <HAL_DMA_Init+0xb8>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4a5d      	ldr	r2, [pc, #372]	@ (80046ec <HAL_DMA_Init+0x1d0>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d02c      	beq.n	80045d4 <HAL_DMA_Init+0xb8>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a5c      	ldr	r2, [pc, #368]	@ (80046f0 <HAL_DMA_Init+0x1d4>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d027      	beq.n	80045d4 <HAL_DMA_Init+0xb8>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4a5a      	ldr	r2, [pc, #360]	@ (80046f4 <HAL_DMA_Init+0x1d8>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d022      	beq.n	80045d4 <HAL_DMA_Init+0xb8>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4a59      	ldr	r2, [pc, #356]	@ (80046f8 <HAL_DMA_Init+0x1dc>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d01d      	beq.n	80045d4 <HAL_DMA_Init+0xb8>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4a57      	ldr	r2, [pc, #348]	@ (80046fc <HAL_DMA_Init+0x1e0>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d018      	beq.n	80045d4 <HAL_DMA_Init+0xb8>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4a56      	ldr	r2, [pc, #344]	@ (8004700 <HAL_DMA_Init+0x1e4>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d013      	beq.n	80045d4 <HAL_DMA_Init+0xb8>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a54      	ldr	r2, [pc, #336]	@ (8004704 <HAL_DMA_Init+0x1e8>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d00e      	beq.n	80045d4 <HAL_DMA_Init+0xb8>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4a53      	ldr	r2, [pc, #332]	@ (8004708 <HAL_DMA_Init+0x1ec>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d009      	beq.n	80045d4 <HAL_DMA_Init+0xb8>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4a51      	ldr	r2, [pc, #324]	@ (800470c <HAL_DMA_Init+0x1f0>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d004      	beq.n	80045d4 <HAL_DMA_Init+0xb8>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4a50      	ldr	r2, [pc, #320]	@ (8004710 <HAL_DMA_Init+0x1f4>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d101      	bne.n	80045d8 <HAL_DMA_Init+0xbc>
 80045d4:	2301      	movs	r3, #1
 80045d6:	e000      	b.n	80045da <HAL_DMA_Init+0xbe>
 80045d8:	2300      	movs	r3, #0
 80045da:	2b00      	cmp	r3, #0
 80045dc:	f000 813b 	beq.w	8004856 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2202      	movs	r2, #2
 80045e4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2200      	movs	r2, #0
 80045ec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a37      	ldr	r2, [pc, #220]	@ (80046d4 <HAL_DMA_Init+0x1b8>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d04a      	beq.n	8004690 <HAL_DMA_Init+0x174>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4a36      	ldr	r2, [pc, #216]	@ (80046d8 <HAL_DMA_Init+0x1bc>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d045      	beq.n	8004690 <HAL_DMA_Init+0x174>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4a34      	ldr	r2, [pc, #208]	@ (80046dc <HAL_DMA_Init+0x1c0>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d040      	beq.n	8004690 <HAL_DMA_Init+0x174>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4a33      	ldr	r2, [pc, #204]	@ (80046e0 <HAL_DMA_Init+0x1c4>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d03b      	beq.n	8004690 <HAL_DMA_Init+0x174>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4a31      	ldr	r2, [pc, #196]	@ (80046e4 <HAL_DMA_Init+0x1c8>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d036      	beq.n	8004690 <HAL_DMA_Init+0x174>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4a30      	ldr	r2, [pc, #192]	@ (80046e8 <HAL_DMA_Init+0x1cc>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d031      	beq.n	8004690 <HAL_DMA_Init+0x174>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a2e      	ldr	r2, [pc, #184]	@ (80046ec <HAL_DMA_Init+0x1d0>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d02c      	beq.n	8004690 <HAL_DMA_Init+0x174>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4a2d      	ldr	r2, [pc, #180]	@ (80046f0 <HAL_DMA_Init+0x1d4>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d027      	beq.n	8004690 <HAL_DMA_Init+0x174>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4a2b      	ldr	r2, [pc, #172]	@ (80046f4 <HAL_DMA_Init+0x1d8>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d022      	beq.n	8004690 <HAL_DMA_Init+0x174>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4a2a      	ldr	r2, [pc, #168]	@ (80046f8 <HAL_DMA_Init+0x1dc>)
 8004650:	4293      	cmp	r3, r2
 8004652:	d01d      	beq.n	8004690 <HAL_DMA_Init+0x174>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4a28      	ldr	r2, [pc, #160]	@ (80046fc <HAL_DMA_Init+0x1e0>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d018      	beq.n	8004690 <HAL_DMA_Init+0x174>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	4a27      	ldr	r2, [pc, #156]	@ (8004700 <HAL_DMA_Init+0x1e4>)
 8004664:	4293      	cmp	r3, r2
 8004666:	d013      	beq.n	8004690 <HAL_DMA_Init+0x174>
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4a25      	ldr	r2, [pc, #148]	@ (8004704 <HAL_DMA_Init+0x1e8>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d00e      	beq.n	8004690 <HAL_DMA_Init+0x174>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	4a24      	ldr	r2, [pc, #144]	@ (8004708 <HAL_DMA_Init+0x1ec>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d009      	beq.n	8004690 <HAL_DMA_Init+0x174>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4a22      	ldr	r2, [pc, #136]	@ (800470c <HAL_DMA_Init+0x1f0>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d004      	beq.n	8004690 <HAL_DMA_Init+0x174>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4a21      	ldr	r2, [pc, #132]	@ (8004710 <HAL_DMA_Init+0x1f4>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d108      	bne.n	80046a2 <HAL_DMA_Init+0x186>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	681a      	ldr	r2, [r3, #0]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f022 0201 	bic.w	r2, r2, #1
 800469e:	601a      	str	r2, [r3, #0]
 80046a0:	e007      	b.n	80046b2 <HAL_DMA_Init+0x196>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	681a      	ldr	r2, [r3, #0]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f022 0201 	bic.w	r2, r2, #1
 80046b0:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80046b2:	e02f      	b.n	8004714 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80046b4:	f7fe fa8c 	bl	8002bd0 <HAL_GetTick>
 80046b8:	4602      	mov	r2, r0
 80046ba:	693b      	ldr	r3, [r7, #16]
 80046bc:	1ad3      	subs	r3, r2, r3
 80046be:	2b05      	cmp	r3, #5
 80046c0:	d928      	bls.n	8004714 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2220      	movs	r2, #32
 80046c6:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2203      	movs	r2, #3
 80046cc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 80046d0:	2301      	movs	r3, #1
 80046d2:	e246      	b.n	8004b62 <HAL_DMA_Init+0x646>
 80046d4:	40020010 	.word	0x40020010
 80046d8:	40020028 	.word	0x40020028
 80046dc:	40020040 	.word	0x40020040
 80046e0:	40020058 	.word	0x40020058
 80046e4:	40020070 	.word	0x40020070
 80046e8:	40020088 	.word	0x40020088
 80046ec:	400200a0 	.word	0x400200a0
 80046f0:	400200b8 	.word	0x400200b8
 80046f4:	40020410 	.word	0x40020410
 80046f8:	40020428 	.word	0x40020428
 80046fc:	40020440 	.word	0x40020440
 8004700:	40020458 	.word	0x40020458
 8004704:	40020470 	.word	0x40020470
 8004708:	40020488 	.word	0x40020488
 800470c:	400204a0 	.word	0x400204a0
 8004710:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f003 0301 	and.w	r3, r3, #1
 800471e:	2b00      	cmp	r3, #0
 8004720:	d1c8      	bne.n	80046b4 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800472a:	697a      	ldr	r2, [r7, #20]
 800472c:	4b83      	ldr	r3, [pc, #524]	@ (800493c <HAL_DMA_Init+0x420>)
 800472e:	4013      	ands	r3, r2
 8004730:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800473a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	691b      	ldr	r3, [r3, #16]
 8004740:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004746:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	699b      	ldr	r3, [r3, #24]
 800474c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004752:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6a1b      	ldr	r3, [r3, #32]
 8004758:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800475a:	697a      	ldr	r2, [r7, #20]
 800475c:	4313      	orrs	r3, r2
 800475e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004764:	2b04      	cmp	r3, #4
 8004766:	d107      	bne.n	8004778 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004770:	4313      	orrs	r3, r2
 8004772:	697a      	ldr	r2, [r7, #20]
 8004774:	4313      	orrs	r3, r2
 8004776:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8004778:	4b71      	ldr	r3, [pc, #452]	@ (8004940 <HAL_DMA_Init+0x424>)
 800477a:	681a      	ldr	r2, [r3, #0]
 800477c:	4b71      	ldr	r3, [pc, #452]	@ (8004944 <HAL_DMA_Init+0x428>)
 800477e:	4013      	ands	r3, r2
 8004780:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004784:	d328      	bcc.n	80047d8 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	2b28      	cmp	r3, #40	@ 0x28
 800478c:	d903      	bls.n	8004796 <HAL_DMA_Init+0x27a>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	2b2e      	cmp	r3, #46	@ 0x2e
 8004794:	d917      	bls.n	80047c6 <HAL_DMA_Init+0x2aa>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	2b3e      	cmp	r3, #62	@ 0x3e
 800479c:	d903      	bls.n	80047a6 <HAL_DMA_Init+0x28a>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	2b42      	cmp	r3, #66	@ 0x42
 80047a4:	d90f      	bls.n	80047c6 <HAL_DMA_Init+0x2aa>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	2b46      	cmp	r3, #70	@ 0x46
 80047ac:	d903      	bls.n	80047b6 <HAL_DMA_Init+0x29a>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	2b48      	cmp	r3, #72	@ 0x48
 80047b4:	d907      	bls.n	80047c6 <HAL_DMA_Init+0x2aa>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	2b4e      	cmp	r3, #78	@ 0x4e
 80047bc:	d905      	bls.n	80047ca <HAL_DMA_Init+0x2ae>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	2b52      	cmp	r3, #82	@ 0x52
 80047c4:	d801      	bhi.n	80047ca <HAL_DMA_Init+0x2ae>
 80047c6:	2301      	movs	r3, #1
 80047c8:	e000      	b.n	80047cc <HAL_DMA_Init+0x2b0>
 80047ca:	2300      	movs	r3, #0
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d003      	beq.n	80047d8 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80047d0:	697b      	ldr	r3, [r7, #20]
 80047d2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80047d6:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	697a      	ldr	r2, [r7, #20]
 80047de:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	695b      	ldr	r3, [r3, #20]
 80047e6:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80047e8:	697b      	ldr	r3, [r7, #20]
 80047ea:	f023 0307 	bic.w	r3, r3, #7
 80047ee:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047f4:	697a      	ldr	r2, [r7, #20]
 80047f6:	4313      	orrs	r3, r2
 80047f8:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047fe:	2b04      	cmp	r3, #4
 8004800:	d117      	bne.n	8004832 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004806:	697a      	ldr	r2, [r7, #20]
 8004808:	4313      	orrs	r3, r2
 800480a:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004810:	2b00      	cmp	r3, #0
 8004812:	d00e      	beq.n	8004832 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004814:	6878      	ldr	r0, [r7, #4]
 8004816:	f001 fdcf 	bl	80063b8 <DMA_CheckFifoParam>
 800481a:	4603      	mov	r3, r0
 800481c:	2b00      	cmp	r3, #0
 800481e:	d008      	beq.n	8004832 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2240      	movs	r2, #64	@ 0x40
 8004824:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2201      	movs	r2, #1
 800482a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 800482e:	2301      	movs	r3, #1
 8004830:	e197      	b.n	8004b62 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	697a      	ldr	r2, [r7, #20]
 8004838:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800483a:	6878      	ldr	r0, [r7, #4]
 800483c:	f001 fd0a 	bl	8006254 <DMA_CalcBaseAndBitshift>
 8004840:	4603      	mov	r3, r0
 8004842:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004848:	f003 031f 	and.w	r3, r3, #31
 800484c:	223f      	movs	r2, #63	@ 0x3f
 800484e:	409a      	lsls	r2, r3
 8004850:	68bb      	ldr	r3, [r7, #8]
 8004852:	609a      	str	r2, [r3, #8]
 8004854:	e0cd      	b.n	80049f2 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4a3b      	ldr	r2, [pc, #236]	@ (8004948 <HAL_DMA_Init+0x42c>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d022      	beq.n	80048a6 <HAL_DMA_Init+0x38a>
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4a39      	ldr	r2, [pc, #228]	@ (800494c <HAL_DMA_Init+0x430>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d01d      	beq.n	80048a6 <HAL_DMA_Init+0x38a>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4a38      	ldr	r2, [pc, #224]	@ (8004950 <HAL_DMA_Init+0x434>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d018      	beq.n	80048a6 <HAL_DMA_Init+0x38a>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4a36      	ldr	r2, [pc, #216]	@ (8004954 <HAL_DMA_Init+0x438>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d013      	beq.n	80048a6 <HAL_DMA_Init+0x38a>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4a35      	ldr	r2, [pc, #212]	@ (8004958 <HAL_DMA_Init+0x43c>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d00e      	beq.n	80048a6 <HAL_DMA_Init+0x38a>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4a33      	ldr	r2, [pc, #204]	@ (800495c <HAL_DMA_Init+0x440>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d009      	beq.n	80048a6 <HAL_DMA_Init+0x38a>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a32      	ldr	r2, [pc, #200]	@ (8004960 <HAL_DMA_Init+0x444>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d004      	beq.n	80048a6 <HAL_DMA_Init+0x38a>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4a30      	ldr	r2, [pc, #192]	@ (8004964 <HAL_DMA_Init+0x448>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d101      	bne.n	80048aa <HAL_DMA_Init+0x38e>
 80048a6:	2301      	movs	r3, #1
 80048a8:	e000      	b.n	80048ac <HAL_DMA_Init+0x390>
 80048aa:	2300      	movs	r3, #0
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	f000 8097 	beq.w	80049e0 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4a24      	ldr	r2, [pc, #144]	@ (8004948 <HAL_DMA_Init+0x42c>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d021      	beq.n	8004900 <HAL_DMA_Init+0x3e4>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4a22      	ldr	r2, [pc, #136]	@ (800494c <HAL_DMA_Init+0x430>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d01c      	beq.n	8004900 <HAL_DMA_Init+0x3e4>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4a21      	ldr	r2, [pc, #132]	@ (8004950 <HAL_DMA_Init+0x434>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d017      	beq.n	8004900 <HAL_DMA_Init+0x3e4>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4a1f      	ldr	r2, [pc, #124]	@ (8004954 <HAL_DMA_Init+0x438>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d012      	beq.n	8004900 <HAL_DMA_Init+0x3e4>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4a1e      	ldr	r2, [pc, #120]	@ (8004958 <HAL_DMA_Init+0x43c>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d00d      	beq.n	8004900 <HAL_DMA_Init+0x3e4>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4a1c      	ldr	r2, [pc, #112]	@ (800495c <HAL_DMA_Init+0x440>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d008      	beq.n	8004900 <HAL_DMA_Init+0x3e4>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4a1b      	ldr	r2, [pc, #108]	@ (8004960 <HAL_DMA_Init+0x444>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d003      	beq.n	8004900 <HAL_DMA_Init+0x3e4>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4a19      	ldr	r2, [pc, #100]	@ (8004964 <HAL_DMA_Init+0x448>)
 80048fe:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2202      	movs	r2, #2
 8004904:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2200      	movs	r2, #0
 800490c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8004918:	697a      	ldr	r2, [r7, #20]
 800491a:	4b13      	ldr	r3, [pc, #76]	@ (8004968 <HAL_DMA_Init+0x44c>)
 800491c:	4013      	ands	r3, r2
 800491e:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	689b      	ldr	r3, [r3, #8]
 8004924:	2b40      	cmp	r3, #64	@ 0x40
 8004926:	d021      	beq.n	800496c <HAL_DMA_Init+0x450>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	689b      	ldr	r3, [r3, #8]
 800492c:	2b80      	cmp	r3, #128	@ 0x80
 800492e:	d102      	bne.n	8004936 <HAL_DMA_Init+0x41a>
 8004930:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004934:	e01b      	b.n	800496e <HAL_DMA_Init+0x452>
 8004936:	2300      	movs	r3, #0
 8004938:	e019      	b.n	800496e <HAL_DMA_Init+0x452>
 800493a:	bf00      	nop
 800493c:	fe10803f 	.word	0xfe10803f
 8004940:	5c001000 	.word	0x5c001000
 8004944:	ffff0000 	.word	0xffff0000
 8004948:	58025408 	.word	0x58025408
 800494c:	5802541c 	.word	0x5802541c
 8004950:	58025430 	.word	0x58025430
 8004954:	58025444 	.word	0x58025444
 8004958:	58025458 	.word	0x58025458
 800495c:	5802546c 	.word	0x5802546c
 8004960:	58025480 	.word	0x58025480
 8004964:	58025494 	.word	0x58025494
 8004968:	fffe000f 	.word	0xfffe000f
 800496c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800496e:	687a      	ldr	r2, [r7, #4]
 8004970:	68d2      	ldr	r2, [r2, #12]
 8004972:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004974:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	691b      	ldr	r3, [r3, #16]
 800497a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800497c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	695b      	ldr	r3, [r3, #20]
 8004982:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004984:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	699b      	ldr	r3, [r3, #24]
 800498a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800498c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	69db      	ldr	r3, [r3, #28]
 8004992:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004994:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6a1b      	ldr	r3, [r3, #32]
 800499a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800499c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800499e:	697a      	ldr	r2, [r7, #20]
 80049a0:	4313      	orrs	r3, r2
 80049a2:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	697a      	ldr	r2, [r7, #20]
 80049aa:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	461a      	mov	r2, r3
 80049b2:	4b6e      	ldr	r3, [pc, #440]	@ (8004b6c <HAL_DMA_Init+0x650>)
 80049b4:	4413      	add	r3, r2
 80049b6:	4a6e      	ldr	r2, [pc, #440]	@ (8004b70 <HAL_DMA_Init+0x654>)
 80049b8:	fba2 2303 	umull	r2, r3, r2, r3
 80049bc:	091b      	lsrs	r3, r3, #4
 80049be:	009a      	lsls	r2, r3, #2
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80049c4:	6878      	ldr	r0, [r7, #4]
 80049c6:	f001 fc45 	bl	8006254 <DMA_CalcBaseAndBitshift>
 80049ca:	4603      	mov	r3, r0
 80049cc:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049d2:	f003 031f 	and.w	r3, r3, #31
 80049d6:	2201      	movs	r2, #1
 80049d8:	409a      	lsls	r2, r3
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	605a      	str	r2, [r3, #4]
 80049de:	e008      	b.n	80049f2 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2240      	movs	r2, #64	@ 0x40
 80049e4:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2203      	movs	r2, #3
 80049ea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 80049ee:	2301      	movs	r3, #1
 80049f0:	e0b7      	b.n	8004b62 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	4a5f      	ldr	r2, [pc, #380]	@ (8004b74 <HAL_DMA_Init+0x658>)
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d072      	beq.n	8004ae2 <HAL_DMA_Init+0x5c6>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4a5d      	ldr	r2, [pc, #372]	@ (8004b78 <HAL_DMA_Init+0x65c>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d06d      	beq.n	8004ae2 <HAL_DMA_Init+0x5c6>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4a5c      	ldr	r2, [pc, #368]	@ (8004b7c <HAL_DMA_Init+0x660>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d068      	beq.n	8004ae2 <HAL_DMA_Init+0x5c6>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4a5a      	ldr	r2, [pc, #360]	@ (8004b80 <HAL_DMA_Init+0x664>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d063      	beq.n	8004ae2 <HAL_DMA_Init+0x5c6>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	4a59      	ldr	r2, [pc, #356]	@ (8004b84 <HAL_DMA_Init+0x668>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d05e      	beq.n	8004ae2 <HAL_DMA_Init+0x5c6>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4a57      	ldr	r2, [pc, #348]	@ (8004b88 <HAL_DMA_Init+0x66c>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d059      	beq.n	8004ae2 <HAL_DMA_Init+0x5c6>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	4a56      	ldr	r2, [pc, #344]	@ (8004b8c <HAL_DMA_Init+0x670>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d054      	beq.n	8004ae2 <HAL_DMA_Init+0x5c6>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4a54      	ldr	r2, [pc, #336]	@ (8004b90 <HAL_DMA_Init+0x674>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d04f      	beq.n	8004ae2 <HAL_DMA_Init+0x5c6>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	4a53      	ldr	r2, [pc, #332]	@ (8004b94 <HAL_DMA_Init+0x678>)
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d04a      	beq.n	8004ae2 <HAL_DMA_Init+0x5c6>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4a51      	ldr	r2, [pc, #324]	@ (8004b98 <HAL_DMA_Init+0x67c>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d045      	beq.n	8004ae2 <HAL_DMA_Init+0x5c6>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4a50      	ldr	r2, [pc, #320]	@ (8004b9c <HAL_DMA_Init+0x680>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d040      	beq.n	8004ae2 <HAL_DMA_Init+0x5c6>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4a4e      	ldr	r2, [pc, #312]	@ (8004ba0 <HAL_DMA_Init+0x684>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d03b      	beq.n	8004ae2 <HAL_DMA_Init+0x5c6>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4a4d      	ldr	r2, [pc, #308]	@ (8004ba4 <HAL_DMA_Init+0x688>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d036      	beq.n	8004ae2 <HAL_DMA_Init+0x5c6>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4a4b      	ldr	r2, [pc, #300]	@ (8004ba8 <HAL_DMA_Init+0x68c>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d031      	beq.n	8004ae2 <HAL_DMA_Init+0x5c6>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4a4a      	ldr	r2, [pc, #296]	@ (8004bac <HAL_DMA_Init+0x690>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d02c      	beq.n	8004ae2 <HAL_DMA_Init+0x5c6>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4a48      	ldr	r2, [pc, #288]	@ (8004bb0 <HAL_DMA_Init+0x694>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d027      	beq.n	8004ae2 <HAL_DMA_Init+0x5c6>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4a47      	ldr	r2, [pc, #284]	@ (8004bb4 <HAL_DMA_Init+0x698>)
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d022      	beq.n	8004ae2 <HAL_DMA_Init+0x5c6>
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4a45      	ldr	r2, [pc, #276]	@ (8004bb8 <HAL_DMA_Init+0x69c>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d01d      	beq.n	8004ae2 <HAL_DMA_Init+0x5c6>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	4a44      	ldr	r2, [pc, #272]	@ (8004bbc <HAL_DMA_Init+0x6a0>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d018      	beq.n	8004ae2 <HAL_DMA_Init+0x5c6>
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4a42      	ldr	r2, [pc, #264]	@ (8004bc0 <HAL_DMA_Init+0x6a4>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d013      	beq.n	8004ae2 <HAL_DMA_Init+0x5c6>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4a41      	ldr	r2, [pc, #260]	@ (8004bc4 <HAL_DMA_Init+0x6a8>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d00e      	beq.n	8004ae2 <HAL_DMA_Init+0x5c6>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4a3f      	ldr	r2, [pc, #252]	@ (8004bc8 <HAL_DMA_Init+0x6ac>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d009      	beq.n	8004ae2 <HAL_DMA_Init+0x5c6>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4a3e      	ldr	r2, [pc, #248]	@ (8004bcc <HAL_DMA_Init+0x6b0>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d004      	beq.n	8004ae2 <HAL_DMA_Init+0x5c6>
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4a3c      	ldr	r2, [pc, #240]	@ (8004bd0 <HAL_DMA_Init+0x6b4>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d101      	bne.n	8004ae6 <HAL_DMA_Init+0x5ca>
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	e000      	b.n	8004ae8 <HAL_DMA_Init+0x5cc>
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d032      	beq.n	8004b52 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004aec:	6878      	ldr	r0, [r7, #4]
 8004aee:	f001 fcdf 	bl	80064b0 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	689b      	ldr	r3, [r3, #8]
 8004af6:	2b80      	cmp	r3, #128	@ 0x80
 8004af8:	d102      	bne.n	8004b00 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2200      	movs	r2, #0
 8004afe:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	685a      	ldr	r2, [r3, #4]
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b08:	b2d2      	uxtb	r2, r2
 8004b0a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004b10:	687a      	ldr	r2, [r7, #4]
 8004b12:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004b14:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d010      	beq.n	8004b40 <HAL_DMA_Init+0x624>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	685b      	ldr	r3, [r3, #4]
 8004b22:	2b08      	cmp	r3, #8
 8004b24:	d80c      	bhi.n	8004b40 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004b26:	6878      	ldr	r0, [r7, #4]
 8004b28:	f001 fd5c 	bl	80065e4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004b30:	2200      	movs	r2, #0
 8004b32:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b38:	687a      	ldr	r2, [r7, #4]
 8004b3a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004b3c:	605a      	str	r2, [r3, #4]
 8004b3e:	e008      	b.n	8004b52 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2200      	movs	r2, #0
 8004b44:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2200      	movs	r2, #0
 8004b4a:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2200      	movs	r2, #0
 8004b50:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2200      	movs	r2, #0
 8004b56:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2201      	movs	r2, #1
 8004b5c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8004b60:	2300      	movs	r3, #0
}
 8004b62:	4618      	mov	r0, r3
 8004b64:	3718      	adds	r7, #24
 8004b66:	46bd      	mov	sp, r7
 8004b68:	bd80      	pop	{r7, pc}
 8004b6a:	bf00      	nop
 8004b6c:	a7fdabf8 	.word	0xa7fdabf8
 8004b70:	cccccccd 	.word	0xcccccccd
 8004b74:	40020010 	.word	0x40020010
 8004b78:	40020028 	.word	0x40020028
 8004b7c:	40020040 	.word	0x40020040
 8004b80:	40020058 	.word	0x40020058
 8004b84:	40020070 	.word	0x40020070
 8004b88:	40020088 	.word	0x40020088
 8004b8c:	400200a0 	.word	0x400200a0
 8004b90:	400200b8 	.word	0x400200b8
 8004b94:	40020410 	.word	0x40020410
 8004b98:	40020428 	.word	0x40020428
 8004b9c:	40020440 	.word	0x40020440
 8004ba0:	40020458 	.word	0x40020458
 8004ba4:	40020470 	.word	0x40020470
 8004ba8:	40020488 	.word	0x40020488
 8004bac:	400204a0 	.word	0x400204a0
 8004bb0:	400204b8 	.word	0x400204b8
 8004bb4:	58025408 	.word	0x58025408
 8004bb8:	5802541c 	.word	0x5802541c
 8004bbc:	58025430 	.word	0x58025430
 8004bc0:	58025444 	.word	0x58025444
 8004bc4:	58025458 	.word	0x58025458
 8004bc8:	5802546c 	.word	0x5802546c
 8004bcc:	58025480 	.word	0x58025480
 8004bd0:	58025494 	.word	0x58025494

08004bd4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b086      	sub	sp, #24
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	60f8      	str	r0, [r7, #12]
 8004bdc:	60b9      	str	r1, [r7, #8]
 8004bde:	607a      	str	r2, [r7, #4]
 8004be0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004be2:	2300      	movs	r3, #0
 8004be4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d101      	bne.n	8004bf0 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8004bec:	2301      	movs	r3, #1
 8004bee:	e226      	b.n	800503e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004bf6:	2b01      	cmp	r3, #1
 8004bf8:	d101      	bne.n	8004bfe <HAL_DMA_Start_IT+0x2a>
 8004bfa:	2302      	movs	r3, #2
 8004bfc:	e21f      	b.n	800503e <HAL_DMA_Start_IT+0x46a>
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	2201      	movs	r2, #1
 8004c02:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004c0c:	b2db      	uxtb	r3, r3
 8004c0e:	2b01      	cmp	r3, #1
 8004c10:	f040 820a 	bne.w	8005028 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	2202      	movs	r2, #2
 8004c18:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	2200      	movs	r2, #0
 8004c20:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	4a68      	ldr	r2, [pc, #416]	@ (8004dc8 <HAL_DMA_Start_IT+0x1f4>)
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d04a      	beq.n	8004cc2 <HAL_DMA_Start_IT+0xee>
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4a66      	ldr	r2, [pc, #408]	@ (8004dcc <HAL_DMA_Start_IT+0x1f8>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d045      	beq.n	8004cc2 <HAL_DMA_Start_IT+0xee>
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4a65      	ldr	r2, [pc, #404]	@ (8004dd0 <HAL_DMA_Start_IT+0x1fc>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d040      	beq.n	8004cc2 <HAL_DMA_Start_IT+0xee>
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4a63      	ldr	r2, [pc, #396]	@ (8004dd4 <HAL_DMA_Start_IT+0x200>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d03b      	beq.n	8004cc2 <HAL_DMA_Start_IT+0xee>
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4a62      	ldr	r2, [pc, #392]	@ (8004dd8 <HAL_DMA_Start_IT+0x204>)
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d036      	beq.n	8004cc2 <HAL_DMA_Start_IT+0xee>
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4a60      	ldr	r2, [pc, #384]	@ (8004ddc <HAL_DMA_Start_IT+0x208>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d031      	beq.n	8004cc2 <HAL_DMA_Start_IT+0xee>
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	4a5f      	ldr	r2, [pc, #380]	@ (8004de0 <HAL_DMA_Start_IT+0x20c>)
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d02c      	beq.n	8004cc2 <HAL_DMA_Start_IT+0xee>
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4a5d      	ldr	r2, [pc, #372]	@ (8004de4 <HAL_DMA_Start_IT+0x210>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d027      	beq.n	8004cc2 <HAL_DMA_Start_IT+0xee>
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4a5c      	ldr	r2, [pc, #368]	@ (8004de8 <HAL_DMA_Start_IT+0x214>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d022      	beq.n	8004cc2 <HAL_DMA_Start_IT+0xee>
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4a5a      	ldr	r2, [pc, #360]	@ (8004dec <HAL_DMA_Start_IT+0x218>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d01d      	beq.n	8004cc2 <HAL_DMA_Start_IT+0xee>
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4a59      	ldr	r2, [pc, #356]	@ (8004df0 <HAL_DMA_Start_IT+0x21c>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d018      	beq.n	8004cc2 <HAL_DMA_Start_IT+0xee>
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4a57      	ldr	r2, [pc, #348]	@ (8004df4 <HAL_DMA_Start_IT+0x220>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d013      	beq.n	8004cc2 <HAL_DMA_Start_IT+0xee>
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4a56      	ldr	r2, [pc, #344]	@ (8004df8 <HAL_DMA_Start_IT+0x224>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d00e      	beq.n	8004cc2 <HAL_DMA_Start_IT+0xee>
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4a54      	ldr	r2, [pc, #336]	@ (8004dfc <HAL_DMA_Start_IT+0x228>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d009      	beq.n	8004cc2 <HAL_DMA_Start_IT+0xee>
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4a53      	ldr	r2, [pc, #332]	@ (8004e00 <HAL_DMA_Start_IT+0x22c>)
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d004      	beq.n	8004cc2 <HAL_DMA_Start_IT+0xee>
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4a51      	ldr	r2, [pc, #324]	@ (8004e04 <HAL_DMA_Start_IT+0x230>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d108      	bne.n	8004cd4 <HAL_DMA_Start_IT+0x100>
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	681a      	ldr	r2, [r3, #0]
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f022 0201 	bic.w	r2, r2, #1
 8004cd0:	601a      	str	r2, [r3, #0]
 8004cd2:	e007      	b.n	8004ce4 <HAL_DMA_Start_IT+0x110>
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	681a      	ldr	r2, [r3, #0]
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f022 0201 	bic.w	r2, r2, #1
 8004ce2:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	687a      	ldr	r2, [r7, #4]
 8004ce8:	68b9      	ldr	r1, [r7, #8]
 8004cea:	68f8      	ldr	r0, [r7, #12]
 8004cec:	f001 f906 	bl	8005efc <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4a34      	ldr	r2, [pc, #208]	@ (8004dc8 <HAL_DMA_Start_IT+0x1f4>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d04a      	beq.n	8004d90 <HAL_DMA_Start_IT+0x1bc>
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	4a33      	ldr	r2, [pc, #204]	@ (8004dcc <HAL_DMA_Start_IT+0x1f8>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d045      	beq.n	8004d90 <HAL_DMA_Start_IT+0x1bc>
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4a31      	ldr	r2, [pc, #196]	@ (8004dd0 <HAL_DMA_Start_IT+0x1fc>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d040      	beq.n	8004d90 <HAL_DMA_Start_IT+0x1bc>
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4a30      	ldr	r2, [pc, #192]	@ (8004dd4 <HAL_DMA_Start_IT+0x200>)
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d03b      	beq.n	8004d90 <HAL_DMA_Start_IT+0x1bc>
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4a2e      	ldr	r2, [pc, #184]	@ (8004dd8 <HAL_DMA_Start_IT+0x204>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d036      	beq.n	8004d90 <HAL_DMA_Start_IT+0x1bc>
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4a2d      	ldr	r2, [pc, #180]	@ (8004ddc <HAL_DMA_Start_IT+0x208>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d031      	beq.n	8004d90 <HAL_DMA_Start_IT+0x1bc>
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a2b      	ldr	r2, [pc, #172]	@ (8004de0 <HAL_DMA_Start_IT+0x20c>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d02c      	beq.n	8004d90 <HAL_DMA_Start_IT+0x1bc>
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4a2a      	ldr	r2, [pc, #168]	@ (8004de4 <HAL_DMA_Start_IT+0x210>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d027      	beq.n	8004d90 <HAL_DMA_Start_IT+0x1bc>
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4a28      	ldr	r2, [pc, #160]	@ (8004de8 <HAL_DMA_Start_IT+0x214>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d022      	beq.n	8004d90 <HAL_DMA_Start_IT+0x1bc>
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4a27      	ldr	r2, [pc, #156]	@ (8004dec <HAL_DMA_Start_IT+0x218>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d01d      	beq.n	8004d90 <HAL_DMA_Start_IT+0x1bc>
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4a25      	ldr	r2, [pc, #148]	@ (8004df0 <HAL_DMA_Start_IT+0x21c>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d018      	beq.n	8004d90 <HAL_DMA_Start_IT+0x1bc>
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4a24      	ldr	r2, [pc, #144]	@ (8004df4 <HAL_DMA_Start_IT+0x220>)
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d013      	beq.n	8004d90 <HAL_DMA_Start_IT+0x1bc>
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4a22      	ldr	r2, [pc, #136]	@ (8004df8 <HAL_DMA_Start_IT+0x224>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d00e      	beq.n	8004d90 <HAL_DMA_Start_IT+0x1bc>
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4a21      	ldr	r2, [pc, #132]	@ (8004dfc <HAL_DMA_Start_IT+0x228>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d009      	beq.n	8004d90 <HAL_DMA_Start_IT+0x1bc>
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4a1f      	ldr	r2, [pc, #124]	@ (8004e00 <HAL_DMA_Start_IT+0x22c>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d004      	beq.n	8004d90 <HAL_DMA_Start_IT+0x1bc>
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4a1e      	ldr	r2, [pc, #120]	@ (8004e04 <HAL_DMA_Start_IT+0x230>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d101      	bne.n	8004d94 <HAL_DMA_Start_IT+0x1c0>
 8004d90:	2301      	movs	r3, #1
 8004d92:	e000      	b.n	8004d96 <HAL_DMA_Start_IT+0x1c2>
 8004d94:	2300      	movs	r3, #0
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d036      	beq.n	8004e08 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f023 021e 	bic.w	r2, r3, #30
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f042 0216 	orr.w	r2, r2, #22
 8004dac:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d03e      	beq.n	8004e34 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	681a      	ldr	r2, [r3, #0]
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f042 0208 	orr.w	r2, r2, #8
 8004dc4:	601a      	str	r2, [r3, #0]
 8004dc6:	e035      	b.n	8004e34 <HAL_DMA_Start_IT+0x260>
 8004dc8:	40020010 	.word	0x40020010
 8004dcc:	40020028 	.word	0x40020028
 8004dd0:	40020040 	.word	0x40020040
 8004dd4:	40020058 	.word	0x40020058
 8004dd8:	40020070 	.word	0x40020070
 8004ddc:	40020088 	.word	0x40020088
 8004de0:	400200a0 	.word	0x400200a0
 8004de4:	400200b8 	.word	0x400200b8
 8004de8:	40020410 	.word	0x40020410
 8004dec:	40020428 	.word	0x40020428
 8004df0:	40020440 	.word	0x40020440
 8004df4:	40020458 	.word	0x40020458
 8004df8:	40020470 	.word	0x40020470
 8004dfc:	40020488 	.word	0x40020488
 8004e00:	400204a0 	.word	0x400204a0
 8004e04:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f023 020e 	bic.w	r2, r3, #14
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f042 020a 	orr.w	r2, r2, #10
 8004e1a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d007      	beq.n	8004e34 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	681a      	ldr	r2, [r3, #0]
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f042 0204 	orr.w	r2, r2, #4
 8004e32:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4a83      	ldr	r2, [pc, #524]	@ (8005048 <HAL_DMA_Start_IT+0x474>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d072      	beq.n	8004f24 <HAL_DMA_Start_IT+0x350>
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4a82      	ldr	r2, [pc, #520]	@ (800504c <HAL_DMA_Start_IT+0x478>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d06d      	beq.n	8004f24 <HAL_DMA_Start_IT+0x350>
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	4a80      	ldr	r2, [pc, #512]	@ (8005050 <HAL_DMA_Start_IT+0x47c>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d068      	beq.n	8004f24 <HAL_DMA_Start_IT+0x350>
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4a7f      	ldr	r2, [pc, #508]	@ (8005054 <HAL_DMA_Start_IT+0x480>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d063      	beq.n	8004f24 <HAL_DMA_Start_IT+0x350>
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a7d      	ldr	r2, [pc, #500]	@ (8005058 <HAL_DMA_Start_IT+0x484>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d05e      	beq.n	8004f24 <HAL_DMA_Start_IT+0x350>
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4a7c      	ldr	r2, [pc, #496]	@ (800505c <HAL_DMA_Start_IT+0x488>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d059      	beq.n	8004f24 <HAL_DMA_Start_IT+0x350>
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4a7a      	ldr	r2, [pc, #488]	@ (8005060 <HAL_DMA_Start_IT+0x48c>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d054      	beq.n	8004f24 <HAL_DMA_Start_IT+0x350>
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4a79      	ldr	r2, [pc, #484]	@ (8005064 <HAL_DMA_Start_IT+0x490>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d04f      	beq.n	8004f24 <HAL_DMA_Start_IT+0x350>
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4a77      	ldr	r2, [pc, #476]	@ (8005068 <HAL_DMA_Start_IT+0x494>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d04a      	beq.n	8004f24 <HAL_DMA_Start_IT+0x350>
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4a76      	ldr	r2, [pc, #472]	@ (800506c <HAL_DMA_Start_IT+0x498>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d045      	beq.n	8004f24 <HAL_DMA_Start_IT+0x350>
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	4a74      	ldr	r2, [pc, #464]	@ (8005070 <HAL_DMA_Start_IT+0x49c>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d040      	beq.n	8004f24 <HAL_DMA_Start_IT+0x350>
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4a73      	ldr	r2, [pc, #460]	@ (8005074 <HAL_DMA_Start_IT+0x4a0>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d03b      	beq.n	8004f24 <HAL_DMA_Start_IT+0x350>
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4a71      	ldr	r2, [pc, #452]	@ (8005078 <HAL_DMA_Start_IT+0x4a4>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d036      	beq.n	8004f24 <HAL_DMA_Start_IT+0x350>
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4a70      	ldr	r2, [pc, #448]	@ (800507c <HAL_DMA_Start_IT+0x4a8>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d031      	beq.n	8004f24 <HAL_DMA_Start_IT+0x350>
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4a6e      	ldr	r2, [pc, #440]	@ (8005080 <HAL_DMA_Start_IT+0x4ac>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d02c      	beq.n	8004f24 <HAL_DMA_Start_IT+0x350>
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4a6d      	ldr	r2, [pc, #436]	@ (8005084 <HAL_DMA_Start_IT+0x4b0>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d027      	beq.n	8004f24 <HAL_DMA_Start_IT+0x350>
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4a6b      	ldr	r2, [pc, #428]	@ (8005088 <HAL_DMA_Start_IT+0x4b4>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d022      	beq.n	8004f24 <HAL_DMA_Start_IT+0x350>
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4a6a      	ldr	r2, [pc, #424]	@ (800508c <HAL_DMA_Start_IT+0x4b8>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d01d      	beq.n	8004f24 <HAL_DMA_Start_IT+0x350>
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	4a68      	ldr	r2, [pc, #416]	@ (8005090 <HAL_DMA_Start_IT+0x4bc>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d018      	beq.n	8004f24 <HAL_DMA_Start_IT+0x350>
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	4a67      	ldr	r2, [pc, #412]	@ (8005094 <HAL_DMA_Start_IT+0x4c0>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d013      	beq.n	8004f24 <HAL_DMA_Start_IT+0x350>
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4a65      	ldr	r2, [pc, #404]	@ (8005098 <HAL_DMA_Start_IT+0x4c4>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d00e      	beq.n	8004f24 <HAL_DMA_Start_IT+0x350>
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4a64      	ldr	r2, [pc, #400]	@ (800509c <HAL_DMA_Start_IT+0x4c8>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d009      	beq.n	8004f24 <HAL_DMA_Start_IT+0x350>
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4a62      	ldr	r2, [pc, #392]	@ (80050a0 <HAL_DMA_Start_IT+0x4cc>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d004      	beq.n	8004f24 <HAL_DMA_Start_IT+0x350>
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4a61      	ldr	r2, [pc, #388]	@ (80050a4 <HAL_DMA_Start_IT+0x4d0>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d101      	bne.n	8004f28 <HAL_DMA_Start_IT+0x354>
 8004f24:	2301      	movs	r3, #1
 8004f26:	e000      	b.n	8004f2a <HAL_DMA_Start_IT+0x356>
 8004f28:	2300      	movs	r3, #0
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d01a      	beq.n	8004f64 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d007      	beq.n	8004f4c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f40:	681a      	ldr	r2, [r3, #0]
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f46:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004f4a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d007      	beq.n	8004f64 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004f58:	681a      	ldr	r2, [r3, #0]
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004f5e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004f62:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4a37      	ldr	r2, [pc, #220]	@ (8005048 <HAL_DMA_Start_IT+0x474>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d04a      	beq.n	8005004 <HAL_DMA_Start_IT+0x430>
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4a36      	ldr	r2, [pc, #216]	@ (800504c <HAL_DMA_Start_IT+0x478>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d045      	beq.n	8005004 <HAL_DMA_Start_IT+0x430>
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4a34      	ldr	r2, [pc, #208]	@ (8005050 <HAL_DMA_Start_IT+0x47c>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d040      	beq.n	8005004 <HAL_DMA_Start_IT+0x430>
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4a33      	ldr	r2, [pc, #204]	@ (8005054 <HAL_DMA_Start_IT+0x480>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d03b      	beq.n	8005004 <HAL_DMA_Start_IT+0x430>
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	4a31      	ldr	r2, [pc, #196]	@ (8005058 <HAL_DMA_Start_IT+0x484>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d036      	beq.n	8005004 <HAL_DMA_Start_IT+0x430>
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	4a30      	ldr	r2, [pc, #192]	@ (800505c <HAL_DMA_Start_IT+0x488>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d031      	beq.n	8005004 <HAL_DMA_Start_IT+0x430>
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4a2e      	ldr	r2, [pc, #184]	@ (8005060 <HAL_DMA_Start_IT+0x48c>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d02c      	beq.n	8005004 <HAL_DMA_Start_IT+0x430>
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4a2d      	ldr	r2, [pc, #180]	@ (8005064 <HAL_DMA_Start_IT+0x490>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d027      	beq.n	8005004 <HAL_DMA_Start_IT+0x430>
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4a2b      	ldr	r2, [pc, #172]	@ (8005068 <HAL_DMA_Start_IT+0x494>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d022      	beq.n	8005004 <HAL_DMA_Start_IT+0x430>
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4a2a      	ldr	r2, [pc, #168]	@ (800506c <HAL_DMA_Start_IT+0x498>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d01d      	beq.n	8005004 <HAL_DMA_Start_IT+0x430>
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4a28      	ldr	r2, [pc, #160]	@ (8005070 <HAL_DMA_Start_IT+0x49c>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d018      	beq.n	8005004 <HAL_DMA_Start_IT+0x430>
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4a27      	ldr	r2, [pc, #156]	@ (8005074 <HAL_DMA_Start_IT+0x4a0>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d013      	beq.n	8005004 <HAL_DMA_Start_IT+0x430>
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4a25      	ldr	r2, [pc, #148]	@ (8005078 <HAL_DMA_Start_IT+0x4a4>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d00e      	beq.n	8005004 <HAL_DMA_Start_IT+0x430>
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4a24      	ldr	r2, [pc, #144]	@ (800507c <HAL_DMA_Start_IT+0x4a8>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d009      	beq.n	8005004 <HAL_DMA_Start_IT+0x430>
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4a22      	ldr	r2, [pc, #136]	@ (8005080 <HAL_DMA_Start_IT+0x4ac>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d004      	beq.n	8005004 <HAL_DMA_Start_IT+0x430>
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4a21      	ldr	r2, [pc, #132]	@ (8005084 <HAL_DMA_Start_IT+0x4b0>)
 8005000:	4293      	cmp	r3, r2
 8005002:	d108      	bne.n	8005016 <HAL_DMA_Start_IT+0x442>
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	681a      	ldr	r2, [r3, #0]
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f042 0201 	orr.w	r2, r2, #1
 8005012:	601a      	str	r2, [r3, #0]
 8005014:	e012      	b.n	800503c <HAL_DMA_Start_IT+0x468>
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	681a      	ldr	r2, [r3, #0]
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f042 0201 	orr.w	r2, r2, #1
 8005024:	601a      	str	r2, [r3, #0]
 8005026:	e009      	b.n	800503c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800502e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	2200      	movs	r2, #0
 8005034:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8005038:	2301      	movs	r3, #1
 800503a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800503c:	7dfb      	ldrb	r3, [r7, #23]
}
 800503e:	4618      	mov	r0, r3
 8005040:	3718      	adds	r7, #24
 8005042:	46bd      	mov	sp, r7
 8005044:	bd80      	pop	{r7, pc}
 8005046:	bf00      	nop
 8005048:	40020010 	.word	0x40020010
 800504c:	40020028 	.word	0x40020028
 8005050:	40020040 	.word	0x40020040
 8005054:	40020058 	.word	0x40020058
 8005058:	40020070 	.word	0x40020070
 800505c:	40020088 	.word	0x40020088
 8005060:	400200a0 	.word	0x400200a0
 8005064:	400200b8 	.word	0x400200b8
 8005068:	40020410 	.word	0x40020410
 800506c:	40020428 	.word	0x40020428
 8005070:	40020440 	.word	0x40020440
 8005074:	40020458 	.word	0x40020458
 8005078:	40020470 	.word	0x40020470
 800507c:	40020488 	.word	0x40020488
 8005080:	400204a0 	.word	0x400204a0
 8005084:	400204b8 	.word	0x400204b8
 8005088:	58025408 	.word	0x58025408
 800508c:	5802541c 	.word	0x5802541c
 8005090:	58025430 	.word	0x58025430
 8005094:	58025444 	.word	0x58025444
 8005098:	58025458 	.word	0x58025458
 800509c:	5802546c 	.word	0x5802546c
 80050a0:	58025480 	.word	0x58025480
 80050a4:	58025494 	.word	0x58025494

080050a8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b08a      	sub	sp, #40	@ 0x28
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80050b0:	2300      	movs	r3, #0
 80050b2:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80050b4:	4b67      	ldr	r3, [pc, #412]	@ (8005254 <HAL_DMA_IRQHandler+0x1ac>)
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4a67      	ldr	r2, [pc, #412]	@ (8005258 <HAL_DMA_IRQHandler+0x1b0>)
 80050ba:	fba2 2303 	umull	r2, r3, r2, r3
 80050be:	0a9b      	lsrs	r3, r3, #10
 80050c0:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050c6:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050cc:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80050ce:	6a3b      	ldr	r3, [r7, #32]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80050d4:	69fb      	ldr	r3, [r7, #28]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	4a5f      	ldr	r2, [pc, #380]	@ (800525c <HAL_DMA_IRQHandler+0x1b4>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d04a      	beq.n	800517a <HAL_DMA_IRQHandler+0xd2>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	4a5d      	ldr	r2, [pc, #372]	@ (8005260 <HAL_DMA_IRQHandler+0x1b8>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d045      	beq.n	800517a <HAL_DMA_IRQHandler+0xd2>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	4a5c      	ldr	r2, [pc, #368]	@ (8005264 <HAL_DMA_IRQHandler+0x1bc>)
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d040      	beq.n	800517a <HAL_DMA_IRQHandler+0xd2>
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	4a5a      	ldr	r2, [pc, #360]	@ (8005268 <HAL_DMA_IRQHandler+0x1c0>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d03b      	beq.n	800517a <HAL_DMA_IRQHandler+0xd2>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	4a59      	ldr	r2, [pc, #356]	@ (800526c <HAL_DMA_IRQHandler+0x1c4>)
 8005108:	4293      	cmp	r3, r2
 800510a:	d036      	beq.n	800517a <HAL_DMA_IRQHandler+0xd2>
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4a57      	ldr	r2, [pc, #348]	@ (8005270 <HAL_DMA_IRQHandler+0x1c8>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d031      	beq.n	800517a <HAL_DMA_IRQHandler+0xd2>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	4a56      	ldr	r2, [pc, #344]	@ (8005274 <HAL_DMA_IRQHandler+0x1cc>)
 800511c:	4293      	cmp	r3, r2
 800511e:	d02c      	beq.n	800517a <HAL_DMA_IRQHandler+0xd2>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	4a54      	ldr	r2, [pc, #336]	@ (8005278 <HAL_DMA_IRQHandler+0x1d0>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d027      	beq.n	800517a <HAL_DMA_IRQHandler+0xd2>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	4a53      	ldr	r2, [pc, #332]	@ (800527c <HAL_DMA_IRQHandler+0x1d4>)
 8005130:	4293      	cmp	r3, r2
 8005132:	d022      	beq.n	800517a <HAL_DMA_IRQHandler+0xd2>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4a51      	ldr	r2, [pc, #324]	@ (8005280 <HAL_DMA_IRQHandler+0x1d8>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d01d      	beq.n	800517a <HAL_DMA_IRQHandler+0xd2>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	4a50      	ldr	r2, [pc, #320]	@ (8005284 <HAL_DMA_IRQHandler+0x1dc>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d018      	beq.n	800517a <HAL_DMA_IRQHandler+0xd2>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	4a4e      	ldr	r2, [pc, #312]	@ (8005288 <HAL_DMA_IRQHandler+0x1e0>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d013      	beq.n	800517a <HAL_DMA_IRQHandler+0xd2>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	4a4d      	ldr	r2, [pc, #308]	@ (800528c <HAL_DMA_IRQHandler+0x1e4>)
 8005158:	4293      	cmp	r3, r2
 800515a:	d00e      	beq.n	800517a <HAL_DMA_IRQHandler+0xd2>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4a4b      	ldr	r2, [pc, #300]	@ (8005290 <HAL_DMA_IRQHandler+0x1e8>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d009      	beq.n	800517a <HAL_DMA_IRQHandler+0xd2>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4a4a      	ldr	r2, [pc, #296]	@ (8005294 <HAL_DMA_IRQHandler+0x1ec>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d004      	beq.n	800517a <HAL_DMA_IRQHandler+0xd2>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4a48      	ldr	r2, [pc, #288]	@ (8005298 <HAL_DMA_IRQHandler+0x1f0>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d101      	bne.n	800517e <HAL_DMA_IRQHandler+0xd6>
 800517a:	2301      	movs	r3, #1
 800517c:	e000      	b.n	8005180 <HAL_DMA_IRQHandler+0xd8>
 800517e:	2300      	movs	r3, #0
 8005180:	2b00      	cmp	r3, #0
 8005182:	f000 842b 	beq.w	80059dc <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800518a:	f003 031f 	and.w	r3, r3, #31
 800518e:	2208      	movs	r2, #8
 8005190:	409a      	lsls	r2, r3
 8005192:	69bb      	ldr	r3, [r7, #24]
 8005194:	4013      	ands	r3, r2
 8005196:	2b00      	cmp	r3, #0
 8005198:	f000 80a2 	beq.w	80052e0 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4a2e      	ldr	r2, [pc, #184]	@ (800525c <HAL_DMA_IRQHandler+0x1b4>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d04a      	beq.n	800523c <HAL_DMA_IRQHandler+0x194>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	4a2d      	ldr	r2, [pc, #180]	@ (8005260 <HAL_DMA_IRQHandler+0x1b8>)
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d045      	beq.n	800523c <HAL_DMA_IRQHandler+0x194>
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	4a2b      	ldr	r2, [pc, #172]	@ (8005264 <HAL_DMA_IRQHandler+0x1bc>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d040      	beq.n	800523c <HAL_DMA_IRQHandler+0x194>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	4a2a      	ldr	r2, [pc, #168]	@ (8005268 <HAL_DMA_IRQHandler+0x1c0>)
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d03b      	beq.n	800523c <HAL_DMA_IRQHandler+0x194>
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	4a28      	ldr	r2, [pc, #160]	@ (800526c <HAL_DMA_IRQHandler+0x1c4>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d036      	beq.n	800523c <HAL_DMA_IRQHandler+0x194>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	4a27      	ldr	r2, [pc, #156]	@ (8005270 <HAL_DMA_IRQHandler+0x1c8>)
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d031      	beq.n	800523c <HAL_DMA_IRQHandler+0x194>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4a25      	ldr	r2, [pc, #148]	@ (8005274 <HAL_DMA_IRQHandler+0x1cc>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d02c      	beq.n	800523c <HAL_DMA_IRQHandler+0x194>
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	4a24      	ldr	r2, [pc, #144]	@ (8005278 <HAL_DMA_IRQHandler+0x1d0>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d027      	beq.n	800523c <HAL_DMA_IRQHandler+0x194>
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	4a22      	ldr	r2, [pc, #136]	@ (800527c <HAL_DMA_IRQHandler+0x1d4>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d022      	beq.n	800523c <HAL_DMA_IRQHandler+0x194>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	4a21      	ldr	r2, [pc, #132]	@ (8005280 <HAL_DMA_IRQHandler+0x1d8>)
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d01d      	beq.n	800523c <HAL_DMA_IRQHandler+0x194>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	4a1f      	ldr	r2, [pc, #124]	@ (8005284 <HAL_DMA_IRQHandler+0x1dc>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d018      	beq.n	800523c <HAL_DMA_IRQHandler+0x194>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	4a1e      	ldr	r2, [pc, #120]	@ (8005288 <HAL_DMA_IRQHandler+0x1e0>)
 8005210:	4293      	cmp	r3, r2
 8005212:	d013      	beq.n	800523c <HAL_DMA_IRQHandler+0x194>
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	4a1c      	ldr	r2, [pc, #112]	@ (800528c <HAL_DMA_IRQHandler+0x1e4>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d00e      	beq.n	800523c <HAL_DMA_IRQHandler+0x194>
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	4a1b      	ldr	r2, [pc, #108]	@ (8005290 <HAL_DMA_IRQHandler+0x1e8>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d009      	beq.n	800523c <HAL_DMA_IRQHandler+0x194>
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	4a19      	ldr	r2, [pc, #100]	@ (8005294 <HAL_DMA_IRQHandler+0x1ec>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d004      	beq.n	800523c <HAL_DMA_IRQHandler+0x194>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	4a18      	ldr	r2, [pc, #96]	@ (8005298 <HAL_DMA_IRQHandler+0x1f0>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d12f      	bne.n	800529c <HAL_DMA_IRQHandler+0x1f4>
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f003 0304 	and.w	r3, r3, #4
 8005246:	2b00      	cmp	r3, #0
 8005248:	bf14      	ite	ne
 800524a:	2301      	movne	r3, #1
 800524c:	2300      	moveq	r3, #0
 800524e:	b2db      	uxtb	r3, r3
 8005250:	e02e      	b.n	80052b0 <HAL_DMA_IRQHandler+0x208>
 8005252:	bf00      	nop
 8005254:	24000000 	.word	0x24000000
 8005258:	1b4e81b5 	.word	0x1b4e81b5
 800525c:	40020010 	.word	0x40020010
 8005260:	40020028 	.word	0x40020028
 8005264:	40020040 	.word	0x40020040
 8005268:	40020058 	.word	0x40020058
 800526c:	40020070 	.word	0x40020070
 8005270:	40020088 	.word	0x40020088
 8005274:	400200a0 	.word	0x400200a0
 8005278:	400200b8 	.word	0x400200b8
 800527c:	40020410 	.word	0x40020410
 8005280:	40020428 	.word	0x40020428
 8005284:	40020440 	.word	0x40020440
 8005288:	40020458 	.word	0x40020458
 800528c:	40020470 	.word	0x40020470
 8005290:	40020488 	.word	0x40020488
 8005294:	400204a0 	.word	0x400204a0
 8005298:	400204b8 	.word	0x400204b8
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f003 0308 	and.w	r3, r3, #8
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	bf14      	ite	ne
 80052aa:	2301      	movne	r3, #1
 80052ac:	2300      	moveq	r3, #0
 80052ae:	b2db      	uxtb	r3, r3
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d015      	beq.n	80052e0 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	681a      	ldr	r2, [r3, #0]
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f022 0204 	bic.w	r2, r2, #4
 80052c2:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80052c8:	f003 031f 	and.w	r3, r3, #31
 80052cc:	2208      	movs	r2, #8
 80052ce:	409a      	lsls	r2, r3
 80052d0:	6a3b      	ldr	r3, [r7, #32]
 80052d2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052d8:	f043 0201 	orr.w	r2, r3, #1
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80052e4:	f003 031f 	and.w	r3, r3, #31
 80052e8:	69ba      	ldr	r2, [r7, #24]
 80052ea:	fa22 f303 	lsr.w	r3, r2, r3
 80052ee:	f003 0301 	and.w	r3, r3, #1
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d06e      	beq.n	80053d4 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4a69      	ldr	r2, [pc, #420]	@ (80054a0 <HAL_DMA_IRQHandler+0x3f8>)
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d04a      	beq.n	8005396 <HAL_DMA_IRQHandler+0x2ee>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4a67      	ldr	r2, [pc, #412]	@ (80054a4 <HAL_DMA_IRQHandler+0x3fc>)
 8005306:	4293      	cmp	r3, r2
 8005308:	d045      	beq.n	8005396 <HAL_DMA_IRQHandler+0x2ee>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	4a66      	ldr	r2, [pc, #408]	@ (80054a8 <HAL_DMA_IRQHandler+0x400>)
 8005310:	4293      	cmp	r3, r2
 8005312:	d040      	beq.n	8005396 <HAL_DMA_IRQHandler+0x2ee>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	4a64      	ldr	r2, [pc, #400]	@ (80054ac <HAL_DMA_IRQHandler+0x404>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d03b      	beq.n	8005396 <HAL_DMA_IRQHandler+0x2ee>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	4a63      	ldr	r2, [pc, #396]	@ (80054b0 <HAL_DMA_IRQHandler+0x408>)
 8005324:	4293      	cmp	r3, r2
 8005326:	d036      	beq.n	8005396 <HAL_DMA_IRQHandler+0x2ee>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	4a61      	ldr	r2, [pc, #388]	@ (80054b4 <HAL_DMA_IRQHandler+0x40c>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d031      	beq.n	8005396 <HAL_DMA_IRQHandler+0x2ee>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4a60      	ldr	r2, [pc, #384]	@ (80054b8 <HAL_DMA_IRQHandler+0x410>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d02c      	beq.n	8005396 <HAL_DMA_IRQHandler+0x2ee>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4a5e      	ldr	r2, [pc, #376]	@ (80054bc <HAL_DMA_IRQHandler+0x414>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d027      	beq.n	8005396 <HAL_DMA_IRQHandler+0x2ee>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4a5d      	ldr	r2, [pc, #372]	@ (80054c0 <HAL_DMA_IRQHandler+0x418>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d022      	beq.n	8005396 <HAL_DMA_IRQHandler+0x2ee>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4a5b      	ldr	r2, [pc, #364]	@ (80054c4 <HAL_DMA_IRQHandler+0x41c>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d01d      	beq.n	8005396 <HAL_DMA_IRQHandler+0x2ee>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4a5a      	ldr	r2, [pc, #360]	@ (80054c8 <HAL_DMA_IRQHandler+0x420>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d018      	beq.n	8005396 <HAL_DMA_IRQHandler+0x2ee>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4a58      	ldr	r2, [pc, #352]	@ (80054cc <HAL_DMA_IRQHandler+0x424>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d013      	beq.n	8005396 <HAL_DMA_IRQHandler+0x2ee>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4a57      	ldr	r2, [pc, #348]	@ (80054d0 <HAL_DMA_IRQHandler+0x428>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d00e      	beq.n	8005396 <HAL_DMA_IRQHandler+0x2ee>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4a55      	ldr	r2, [pc, #340]	@ (80054d4 <HAL_DMA_IRQHandler+0x42c>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d009      	beq.n	8005396 <HAL_DMA_IRQHandler+0x2ee>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4a54      	ldr	r2, [pc, #336]	@ (80054d8 <HAL_DMA_IRQHandler+0x430>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d004      	beq.n	8005396 <HAL_DMA_IRQHandler+0x2ee>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4a52      	ldr	r2, [pc, #328]	@ (80054dc <HAL_DMA_IRQHandler+0x434>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d10a      	bne.n	80053ac <HAL_DMA_IRQHandler+0x304>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	695b      	ldr	r3, [r3, #20]
 800539c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	bf14      	ite	ne
 80053a4:	2301      	movne	r3, #1
 80053a6:	2300      	moveq	r3, #0
 80053a8:	b2db      	uxtb	r3, r3
 80053aa:	e003      	b.n	80053b4 <HAL_DMA_IRQHandler+0x30c>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	2300      	movs	r3, #0
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d00d      	beq.n	80053d4 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053bc:	f003 031f 	and.w	r3, r3, #31
 80053c0:	2201      	movs	r2, #1
 80053c2:	409a      	lsls	r2, r3
 80053c4:	6a3b      	ldr	r3, [r7, #32]
 80053c6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053cc:	f043 0202 	orr.w	r2, r3, #2
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053d8:	f003 031f 	and.w	r3, r3, #31
 80053dc:	2204      	movs	r2, #4
 80053de:	409a      	lsls	r2, r3
 80053e0:	69bb      	ldr	r3, [r7, #24]
 80053e2:	4013      	ands	r3, r2
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	f000 808f 	beq.w	8005508 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	4a2c      	ldr	r2, [pc, #176]	@ (80054a0 <HAL_DMA_IRQHandler+0x3f8>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d04a      	beq.n	800548a <HAL_DMA_IRQHandler+0x3e2>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4a2a      	ldr	r2, [pc, #168]	@ (80054a4 <HAL_DMA_IRQHandler+0x3fc>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d045      	beq.n	800548a <HAL_DMA_IRQHandler+0x3e2>
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	4a29      	ldr	r2, [pc, #164]	@ (80054a8 <HAL_DMA_IRQHandler+0x400>)
 8005404:	4293      	cmp	r3, r2
 8005406:	d040      	beq.n	800548a <HAL_DMA_IRQHandler+0x3e2>
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	4a27      	ldr	r2, [pc, #156]	@ (80054ac <HAL_DMA_IRQHandler+0x404>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d03b      	beq.n	800548a <HAL_DMA_IRQHandler+0x3e2>
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	4a26      	ldr	r2, [pc, #152]	@ (80054b0 <HAL_DMA_IRQHandler+0x408>)
 8005418:	4293      	cmp	r3, r2
 800541a:	d036      	beq.n	800548a <HAL_DMA_IRQHandler+0x3e2>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4a24      	ldr	r2, [pc, #144]	@ (80054b4 <HAL_DMA_IRQHandler+0x40c>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d031      	beq.n	800548a <HAL_DMA_IRQHandler+0x3e2>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	4a23      	ldr	r2, [pc, #140]	@ (80054b8 <HAL_DMA_IRQHandler+0x410>)
 800542c:	4293      	cmp	r3, r2
 800542e:	d02c      	beq.n	800548a <HAL_DMA_IRQHandler+0x3e2>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	4a21      	ldr	r2, [pc, #132]	@ (80054bc <HAL_DMA_IRQHandler+0x414>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d027      	beq.n	800548a <HAL_DMA_IRQHandler+0x3e2>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4a20      	ldr	r2, [pc, #128]	@ (80054c0 <HAL_DMA_IRQHandler+0x418>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d022      	beq.n	800548a <HAL_DMA_IRQHandler+0x3e2>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	4a1e      	ldr	r2, [pc, #120]	@ (80054c4 <HAL_DMA_IRQHandler+0x41c>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d01d      	beq.n	800548a <HAL_DMA_IRQHandler+0x3e2>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	4a1d      	ldr	r2, [pc, #116]	@ (80054c8 <HAL_DMA_IRQHandler+0x420>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d018      	beq.n	800548a <HAL_DMA_IRQHandler+0x3e2>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4a1b      	ldr	r2, [pc, #108]	@ (80054cc <HAL_DMA_IRQHandler+0x424>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d013      	beq.n	800548a <HAL_DMA_IRQHandler+0x3e2>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	4a1a      	ldr	r2, [pc, #104]	@ (80054d0 <HAL_DMA_IRQHandler+0x428>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d00e      	beq.n	800548a <HAL_DMA_IRQHandler+0x3e2>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4a18      	ldr	r2, [pc, #96]	@ (80054d4 <HAL_DMA_IRQHandler+0x42c>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d009      	beq.n	800548a <HAL_DMA_IRQHandler+0x3e2>
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	4a17      	ldr	r2, [pc, #92]	@ (80054d8 <HAL_DMA_IRQHandler+0x430>)
 800547c:	4293      	cmp	r3, r2
 800547e:	d004      	beq.n	800548a <HAL_DMA_IRQHandler+0x3e2>
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	4a15      	ldr	r2, [pc, #84]	@ (80054dc <HAL_DMA_IRQHandler+0x434>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d12a      	bne.n	80054e0 <HAL_DMA_IRQHandler+0x438>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f003 0302 	and.w	r3, r3, #2
 8005494:	2b00      	cmp	r3, #0
 8005496:	bf14      	ite	ne
 8005498:	2301      	movne	r3, #1
 800549a:	2300      	moveq	r3, #0
 800549c:	b2db      	uxtb	r3, r3
 800549e:	e023      	b.n	80054e8 <HAL_DMA_IRQHandler+0x440>
 80054a0:	40020010 	.word	0x40020010
 80054a4:	40020028 	.word	0x40020028
 80054a8:	40020040 	.word	0x40020040
 80054ac:	40020058 	.word	0x40020058
 80054b0:	40020070 	.word	0x40020070
 80054b4:	40020088 	.word	0x40020088
 80054b8:	400200a0 	.word	0x400200a0
 80054bc:	400200b8 	.word	0x400200b8
 80054c0:	40020410 	.word	0x40020410
 80054c4:	40020428 	.word	0x40020428
 80054c8:	40020440 	.word	0x40020440
 80054cc:	40020458 	.word	0x40020458
 80054d0:	40020470 	.word	0x40020470
 80054d4:	40020488 	.word	0x40020488
 80054d8:	400204a0 	.word	0x400204a0
 80054dc:	400204b8 	.word	0x400204b8
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	2300      	movs	r3, #0
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d00d      	beq.n	8005508 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054f0:	f003 031f 	and.w	r3, r3, #31
 80054f4:	2204      	movs	r2, #4
 80054f6:	409a      	lsls	r2, r3
 80054f8:	6a3b      	ldr	r3, [r7, #32]
 80054fa:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005500:	f043 0204 	orr.w	r2, r3, #4
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800550c:	f003 031f 	and.w	r3, r3, #31
 8005510:	2210      	movs	r2, #16
 8005512:	409a      	lsls	r2, r3
 8005514:	69bb      	ldr	r3, [r7, #24]
 8005516:	4013      	ands	r3, r2
 8005518:	2b00      	cmp	r3, #0
 800551a:	f000 80a6 	beq.w	800566a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	4a85      	ldr	r2, [pc, #532]	@ (8005738 <HAL_DMA_IRQHandler+0x690>)
 8005524:	4293      	cmp	r3, r2
 8005526:	d04a      	beq.n	80055be <HAL_DMA_IRQHandler+0x516>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	4a83      	ldr	r2, [pc, #524]	@ (800573c <HAL_DMA_IRQHandler+0x694>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d045      	beq.n	80055be <HAL_DMA_IRQHandler+0x516>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	4a82      	ldr	r2, [pc, #520]	@ (8005740 <HAL_DMA_IRQHandler+0x698>)
 8005538:	4293      	cmp	r3, r2
 800553a:	d040      	beq.n	80055be <HAL_DMA_IRQHandler+0x516>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	4a80      	ldr	r2, [pc, #512]	@ (8005744 <HAL_DMA_IRQHandler+0x69c>)
 8005542:	4293      	cmp	r3, r2
 8005544:	d03b      	beq.n	80055be <HAL_DMA_IRQHandler+0x516>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	4a7f      	ldr	r2, [pc, #508]	@ (8005748 <HAL_DMA_IRQHandler+0x6a0>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d036      	beq.n	80055be <HAL_DMA_IRQHandler+0x516>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	4a7d      	ldr	r2, [pc, #500]	@ (800574c <HAL_DMA_IRQHandler+0x6a4>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d031      	beq.n	80055be <HAL_DMA_IRQHandler+0x516>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	4a7c      	ldr	r2, [pc, #496]	@ (8005750 <HAL_DMA_IRQHandler+0x6a8>)
 8005560:	4293      	cmp	r3, r2
 8005562:	d02c      	beq.n	80055be <HAL_DMA_IRQHandler+0x516>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	4a7a      	ldr	r2, [pc, #488]	@ (8005754 <HAL_DMA_IRQHandler+0x6ac>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d027      	beq.n	80055be <HAL_DMA_IRQHandler+0x516>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	4a79      	ldr	r2, [pc, #484]	@ (8005758 <HAL_DMA_IRQHandler+0x6b0>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d022      	beq.n	80055be <HAL_DMA_IRQHandler+0x516>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	4a77      	ldr	r2, [pc, #476]	@ (800575c <HAL_DMA_IRQHandler+0x6b4>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d01d      	beq.n	80055be <HAL_DMA_IRQHandler+0x516>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	4a76      	ldr	r2, [pc, #472]	@ (8005760 <HAL_DMA_IRQHandler+0x6b8>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d018      	beq.n	80055be <HAL_DMA_IRQHandler+0x516>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	4a74      	ldr	r2, [pc, #464]	@ (8005764 <HAL_DMA_IRQHandler+0x6bc>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d013      	beq.n	80055be <HAL_DMA_IRQHandler+0x516>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4a73      	ldr	r2, [pc, #460]	@ (8005768 <HAL_DMA_IRQHandler+0x6c0>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d00e      	beq.n	80055be <HAL_DMA_IRQHandler+0x516>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	4a71      	ldr	r2, [pc, #452]	@ (800576c <HAL_DMA_IRQHandler+0x6c4>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d009      	beq.n	80055be <HAL_DMA_IRQHandler+0x516>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	4a70      	ldr	r2, [pc, #448]	@ (8005770 <HAL_DMA_IRQHandler+0x6c8>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d004      	beq.n	80055be <HAL_DMA_IRQHandler+0x516>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4a6e      	ldr	r2, [pc, #440]	@ (8005774 <HAL_DMA_IRQHandler+0x6cc>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d10a      	bne.n	80055d4 <HAL_DMA_IRQHandler+0x52c>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f003 0308 	and.w	r3, r3, #8
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	bf14      	ite	ne
 80055cc:	2301      	movne	r3, #1
 80055ce:	2300      	moveq	r3, #0
 80055d0:	b2db      	uxtb	r3, r3
 80055d2:	e009      	b.n	80055e8 <HAL_DMA_IRQHandler+0x540>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f003 0304 	and.w	r3, r3, #4
 80055de:	2b00      	cmp	r3, #0
 80055e0:	bf14      	ite	ne
 80055e2:	2301      	movne	r3, #1
 80055e4:	2300      	moveq	r3, #0
 80055e6:	b2db      	uxtb	r3, r3
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d03e      	beq.n	800566a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80055f0:	f003 031f 	and.w	r3, r3, #31
 80055f4:	2210      	movs	r2, #16
 80055f6:	409a      	lsls	r2, r3
 80055f8:	6a3b      	ldr	r3, [r7, #32]
 80055fa:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005606:	2b00      	cmp	r3, #0
 8005608:	d018      	beq.n	800563c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005614:	2b00      	cmp	r3, #0
 8005616:	d108      	bne.n	800562a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800561c:	2b00      	cmp	r3, #0
 800561e:	d024      	beq.n	800566a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005624:	6878      	ldr	r0, [r7, #4]
 8005626:	4798      	blx	r3
 8005628:	e01f      	b.n	800566a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800562e:	2b00      	cmp	r3, #0
 8005630:	d01b      	beq.n	800566a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005636:	6878      	ldr	r0, [r7, #4]
 8005638:	4798      	blx	r3
 800563a:	e016      	b.n	800566a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005646:	2b00      	cmp	r3, #0
 8005648:	d107      	bne.n	800565a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	681a      	ldr	r2, [r3, #0]
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f022 0208 	bic.w	r2, r2, #8
 8005658:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800565e:	2b00      	cmp	r3, #0
 8005660:	d003      	beq.n	800566a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005666:	6878      	ldr	r0, [r7, #4]
 8005668:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800566e:	f003 031f 	and.w	r3, r3, #31
 8005672:	2220      	movs	r2, #32
 8005674:	409a      	lsls	r2, r3
 8005676:	69bb      	ldr	r3, [r7, #24]
 8005678:	4013      	ands	r3, r2
 800567a:	2b00      	cmp	r3, #0
 800567c:	f000 8110 	beq.w	80058a0 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	4a2c      	ldr	r2, [pc, #176]	@ (8005738 <HAL_DMA_IRQHandler+0x690>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d04a      	beq.n	8005720 <HAL_DMA_IRQHandler+0x678>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	4a2b      	ldr	r2, [pc, #172]	@ (800573c <HAL_DMA_IRQHandler+0x694>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d045      	beq.n	8005720 <HAL_DMA_IRQHandler+0x678>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	4a29      	ldr	r2, [pc, #164]	@ (8005740 <HAL_DMA_IRQHandler+0x698>)
 800569a:	4293      	cmp	r3, r2
 800569c:	d040      	beq.n	8005720 <HAL_DMA_IRQHandler+0x678>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	4a28      	ldr	r2, [pc, #160]	@ (8005744 <HAL_DMA_IRQHandler+0x69c>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d03b      	beq.n	8005720 <HAL_DMA_IRQHandler+0x678>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	4a26      	ldr	r2, [pc, #152]	@ (8005748 <HAL_DMA_IRQHandler+0x6a0>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d036      	beq.n	8005720 <HAL_DMA_IRQHandler+0x678>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	4a25      	ldr	r2, [pc, #148]	@ (800574c <HAL_DMA_IRQHandler+0x6a4>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d031      	beq.n	8005720 <HAL_DMA_IRQHandler+0x678>
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4a23      	ldr	r2, [pc, #140]	@ (8005750 <HAL_DMA_IRQHandler+0x6a8>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d02c      	beq.n	8005720 <HAL_DMA_IRQHandler+0x678>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4a22      	ldr	r2, [pc, #136]	@ (8005754 <HAL_DMA_IRQHandler+0x6ac>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d027      	beq.n	8005720 <HAL_DMA_IRQHandler+0x678>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4a20      	ldr	r2, [pc, #128]	@ (8005758 <HAL_DMA_IRQHandler+0x6b0>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d022      	beq.n	8005720 <HAL_DMA_IRQHandler+0x678>
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	4a1f      	ldr	r2, [pc, #124]	@ (800575c <HAL_DMA_IRQHandler+0x6b4>)
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d01d      	beq.n	8005720 <HAL_DMA_IRQHandler+0x678>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	4a1d      	ldr	r2, [pc, #116]	@ (8005760 <HAL_DMA_IRQHandler+0x6b8>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d018      	beq.n	8005720 <HAL_DMA_IRQHandler+0x678>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	4a1c      	ldr	r2, [pc, #112]	@ (8005764 <HAL_DMA_IRQHandler+0x6bc>)
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d013      	beq.n	8005720 <HAL_DMA_IRQHandler+0x678>
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	4a1a      	ldr	r2, [pc, #104]	@ (8005768 <HAL_DMA_IRQHandler+0x6c0>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d00e      	beq.n	8005720 <HAL_DMA_IRQHandler+0x678>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	4a19      	ldr	r2, [pc, #100]	@ (800576c <HAL_DMA_IRQHandler+0x6c4>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d009      	beq.n	8005720 <HAL_DMA_IRQHandler+0x678>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	4a17      	ldr	r2, [pc, #92]	@ (8005770 <HAL_DMA_IRQHandler+0x6c8>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d004      	beq.n	8005720 <HAL_DMA_IRQHandler+0x678>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	4a16      	ldr	r2, [pc, #88]	@ (8005774 <HAL_DMA_IRQHandler+0x6cc>)
 800571c:	4293      	cmp	r3, r2
 800571e:	d12b      	bne.n	8005778 <HAL_DMA_IRQHandler+0x6d0>
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f003 0310 	and.w	r3, r3, #16
 800572a:	2b00      	cmp	r3, #0
 800572c:	bf14      	ite	ne
 800572e:	2301      	movne	r3, #1
 8005730:	2300      	moveq	r3, #0
 8005732:	b2db      	uxtb	r3, r3
 8005734:	e02a      	b.n	800578c <HAL_DMA_IRQHandler+0x6e4>
 8005736:	bf00      	nop
 8005738:	40020010 	.word	0x40020010
 800573c:	40020028 	.word	0x40020028
 8005740:	40020040 	.word	0x40020040
 8005744:	40020058 	.word	0x40020058
 8005748:	40020070 	.word	0x40020070
 800574c:	40020088 	.word	0x40020088
 8005750:	400200a0 	.word	0x400200a0
 8005754:	400200b8 	.word	0x400200b8
 8005758:	40020410 	.word	0x40020410
 800575c:	40020428 	.word	0x40020428
 8005760:	40020440 	.word	0x40020440
 8005764:	40020458 	.word	0x40020458
 8005768:	40020470 	.word	0x40020470
 800576c:	40020488 	.word	0x40020488
 8005770:	400204a0 	.word	0x400204a0
 8005774:	400204b8 	.word	0x400204b8
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f003 0302 	and.w	r3, r3, #2
 8005782:	2b00      	cmp	r3, #0
 8005784:	bf14      	ite	ne
 8005786:	2301      	movne	r3, #1
 8005788:	2300      	moveq	r3, #0
 800578a:	b2db      	uxtb	r3, r3
 800578c:	2b00      	cmp	r3, #0
 800578e:	f000 8087 	beq.w	80058a0 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005796:	f003 031f 	and.w	r3, r3, #31
 800579a:	2220      	movs	r2, #32
 800579c:	409a      	lsls	r2, r3
 800579e:	6a3b      	ldr	r3, [r7, #32]
 80057a0:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80057a8:	b2db      	uxtb	r3, r3
 80057aa:	2b04      	cmp	r3, #4
 80057ac:	d139      	bne.n	8005822 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	681a      	ldr	r2, [r3, #0]
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f022 0216 	bic.w	r2, r2, #22
 80057bc:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	695a      	ldr	r2, [r3, #20]
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80057cc:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d103      	bne.n	80057de <HAL_DMA_IRQHandler+0x736>
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d007      	beq.n	80057ee <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	681a      	ldr	r2, [r3, #0]
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f022 0208 	bic.w	r2, r2, #8
 80057ec:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80057f2:	f003 031f 	and.w	r3, r3, #31
 80057f6:	223f      	movs	r2, #63	@ 0x3f
 80057f8:	409a      	lsls	r2, r3
 80057fa:	6a3b      	ldr	r3, [r7, #32]
 80057fc:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2201      	movs	r2, #1
 8005802:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2200      	movs	r2, #0
 800580a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005812:	2b00      	cmp	r3, #0
 8005814:	f000 834a 	beq.w	8005eac <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800581c:	6878      	ldr	r0, [r7, #4]
 800581e:	4798      	blx	r3
          }
          return;
 8005820:	e344      	b.n	8005eac <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800582c:	2b00      	cmp	r3, #0
 800582e:	d018      	beq.n	8005862 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800583a:	2b00      	cmp	r3, #0
 800583c:	d108      	bne.n	8005850 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005842:	2b00      	cmp	r3, #0
 8005844:	d02c      	beq.n	80058a0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800584a:	6878      	ldr	r0, [r7, #4]
 800584c:	4798      	blx	r3
 800584e:	e027      	b.n	80058a0 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005854:	2b00      	cmp	r3, #0
 8005856:	d023      	beq.n	80058a0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800585c:	6878      	ldr	r0, [r7, #4]
 800585e:	4798      	blx	r3
 8005860:	e01e      	b.n	80058a0 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800586c:	2b00      	cmp	r3, #0
 800586e:	d10f      	bne.n	8005890 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	681a      	ldr	r2, [r3, #0]
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f022 0210 	bic.w	r2, r2, #16
 800587e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2201      	movs	r2, #1
 8005884:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2200      	movs	r2, #0
 800588c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005894:	2b00      	cmp	r3, #0
 8005896:	d003      	beq.n	80058a0 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800589c:	6878      	ldr	r0, [r7, #4]
 800589e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	f000 8306 	beq.w	8005eb6 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058ae:	f003 0301 	and.w	r3, r3, #1
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	f000 8088 	beq.w	80059c8 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2204      	movs	r2, #4
 80058bc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	4a7a      	ldr	r2, [pc, #488]	@ (8005ab0 <HAL_DMA_IRQHandler+0xa08>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d04a      	beq.n	8005960 <HAL_DMA_IRQHandler+0x8b8>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	4a79      	ldr	r2, [pc, #484]	@ (8005ab4 <HAL_DMA_IRQHandler+0xa0c>)
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d045      	beq.n	8005960 <HAL_DMA_IRQHandler+0x8b8>
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	4a77      	ldr	r2, [pc, #476]	@ (8005ab8 <HAL_DMA_IRQHandler+0xa10>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d040      	beq.n	8005960 <HAL_DMA_IRQHandler+0x8b8>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	4a76      	ldr	r2, [pc, #472]	@ (8005abc <HAL_DMA_IRQHandler+0xa14>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d03b      	beq.n	8005960 <HAL_DMA_IRQHandler+0x8b8>
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	4a74      	ldr	r2, [pc, #464]	@ (8005ac0 <HAL_DMA_IRQHandler+0xa18>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d036      	beq.n	8005960 <HAL_DMA_IRQHandler+0x8b8>
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	4a73      	ldr	r2, [pc, #460]	@ (8005ac4 <HAL_DMA_IRQHandler+0xa1c>)
 80058f8:	4293      	cmp	r3, r2
 80058fa:	d031      	beq.n	8005960 <HAL_DMA_IRQHandler+0x8b8>
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	4a71      	ldr	r2, [pc, #452]	@ (8005ac8 <HAL_DMA_IRQHandler+0xa20>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d02c      	beq.n	8005960 <HAL_DMA_IRQHandler+0x8b8>
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	4a70      	ldr	r2, [pc, #448]	@ (8005acc <HAL_DMA_IRQHandler+0xa24>)
 800590c:	4293      	cmp	r3, r2
 800590e:	d027      	beq.n	8005960 <HAL_DMA_IRQHandler+0x8b8>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	4a6e      	ldr	r2, [pc, #440]	@ (8005ad0 <HAL_DMA_IRQHandler+0xa28>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d022      	beq.n	8005960 <HAL_DMA_IRQHandler+0x8b8>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	4a6d      	ldr	r2, [pc, #436]	@ (8005ad4 <HAL_DMA_IRQHandler+0xa2c>)
 8005920:	4293      	cmp	r3, r2
 8005922:	d01d      	beq.n	8005960 <HAL_DMA_IRQHandler+0x8b8>
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	4a6b      	ldr	r2, [pc, #428]	@ (8005ad8 <HAL_DMA_IRQHandler+0xa30>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d018      	beq.n	8005960 <HAL_DMA_IRQHandler+0x8b8>
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	4a6a      	ldr	r2, [pc, #424]	@ (8005adc <HAL_DMA_IRQHandler+0xa34>)
 8005934:	4293      	cmp	r3, r2
 8005936:	d013      	beq.n	8005960 <HAL_DMA_IRQHandler+0x8b8>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	4a68      	ldr	r2, [pc, #416]	@ (8005ae0 <HAL_DMA_IRQHandler+0xa38>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d00e      	beq.n	8005960 <HAL_DMA_IRQHandler+0x8b8>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	4a67      	ldr	r2, [pc, #412]	@ (8005ae4 <HAL_DMA_IRQHandler+0xa3c>)
 8005948:	4293      	cmp	r3, r2
 800594a:	d009      	beq.n	8005960 <HAL_DMA_IRQHandler+0x8b8>
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	4a65      	ldr	r2, [pc, #404]	@ (8005ae8 <HAL_DMA_IRQHandler+0xa40>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d004      	beq.n	8005960 <HAL_DMA_IRQHandler+0x8b8>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	4a64      	ldr	r2, [pc, #400]	@ (8005aec <HAL_DMA_IRQHandler+0xa44>)
 800595c:	4293      	cmp	r3, r2
 800595e:	d108      	bne.n	8005972 <HAL_DMA_IRQHandler+0x8ca>
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	681a      	ldr	r2, [r3, #0]
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f022 0201 	bic.w	r2, r2, #1
 800596e:	601a      	str	r2, [r3, #0]
 8005970:	e007      	b.n	8005982 <HAL_DMA_IRQHandler+0x8da>
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	681a      	ldr	r2, [r3, #0]
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f022 0201 	bic.w	r2, r2, #1
 8005980:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	3301      	adds	r3, #1
 8005986:	60fb      	str	r3, [r7, #12]
 8005988:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800598a:	429a      	cmp	r2, r3
 800598c:	d307      	bcc.n	800599e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f003 0301 	and.w	r3, r3, #1
 8005998:	2b00      	cmp	r3, #0
 800599a:	d1f2      	bne.n	8005982 <HAL_DMA_IRQHandler+0x8da>
 800599c:	e000      	b.n	80059a0 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800599e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f003 0301 	and.w	r3, r3, #1
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d004      	beq.n	80059b8 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2203      	movs	r2, #3
 80059b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 80059b6:	e003      	b.n	80059c0 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2201      	movs	r2, #1
 80059bc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2200      	movs	r2, #0
 80059c4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	f000 8272 	beq.w	8005eb6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80059d6:	6878      	ldr	r0, [r7, #4]
 80059d8:	4798      	blx	r3
 80059da:	e26c      	b.n	8005eb6 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	4a43      	ldr	r2, [pc, #268]	@ (8005af0 <HAL_DMA_IRQHandler+0xa48>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d022      	beq.n	8005a2c <HAL_DMA_IRQHandler+0x984>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	4a42      	ldr	r2, [pc, #264]	@ (8005af4 <HAL_DMA_IRQHandler+0xa4c>)
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d01d      	beq.n	8005a2c <HAL_DMA_IRQHandler+0x984>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	4a40      	ldr	r2, [pc, #256]	@ (8005af8 <HAL_DMA_IRQHandler+0xa50>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d018      	beq.n	8005a2c <HAL_DMA_IRQHandler+0x984>
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	4a3f      	ldr	r2, [pc, #252]	@ (8005afc <HAL_DMA_IRQHandler+0xa54>)
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d013      	beq.n	8005a2c <HAL_DMA_IRQHandler+0x984>
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	4a3d      	ldr	r2, [pc, #244]	@ (8005b00 <HAL_DMA_IRQHandler+0xa58>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d00e      	beq.n	8005a2c <HAL_DMA_IRQHandler+0x984>
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	4a3c      	ldr	r2, [pc, #240]	@ (8005b04 <HAL_DMA_IRQHandler+0xa5c>)
 8005a14:	4293      	cmp	r3, r2
 8005a16:	d009      	beq.n	8005a2c <HAL_DMA_IRQHandler+0x984>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	4a3a      	ldr	r2, [pc, #232]	@ (8005b08 <HAL_DMA_IRQHandler+0xa60>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d004      	beq.n	8005a2c <HAL_DMA_IRQHandler+0x984>
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	4a39      	ldr	r2, [pc, #228]	@ (8005b0c <HAL_DMA_IRQHandler+0xa64>)
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	d101      	bne.n	8005a30 <HAL_DMA_IRQHandler+0x988>
 8005a2c:	2301      	movs	r3, #1
 8005a2e:	e000      	b.n	8005a32 <HAL_DMA_IRQHandler+0x98a>
 8005a30:	2300      	movs	r3, #0
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	f000 823f 	beq.w	8005eb6 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a44:	f003 031f 	and.w	r3, r3, #31
 8005a48:	2204      	movs	r2, #4
 8005a4a:	409a      	lsls	r2, r3
 8005a4c:	697b      	ldr	r3, [r7, #20]
 8005a4e:	4013      	ands	r3, r2
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	f000 80cd 	beq.w	8005bf0 <HAL_DMA_IRQHandler+0xb48>
 8005a56:	693b      	ldr	r3, [r7, #16]
 8005a58:	f003 0304 	and.w	r3, r3, #4
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	f000 80c7 	beq.w	8005bf0 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a66:	f003 031f 	and.w	r3, r3, #31
 8005a6a:	2204      	movs	r2, #4
 8005a6c:	409a      	lsls	r2, r3
 8005a6e:	69fb      	ldr	r3, [r7, #28]
 8005a70:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005a72:	693b      	ldr	r3, [r7, #16]
 8005a74:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d049      	beq.n	8005b10 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005a7c:	693b      	ldr	r3, [r7, #16]
 8005a7e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d109      	bne.n	8005a9a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	f000 8210 	beq.w	8005eb0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005a94:	6878      	ldr	r0, [r7, #4]
 8005a96:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005a98:	e20a      	b.n	8005eb0 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	f000 8206 	beq.w	8005eb0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005aa8:	6878      	ldr	r0, [r7, #4]
 8005aaa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005aac:	e200      	b.n	8005eb0 <HAL_DMA_IRQHandler+0xe08>
 8005aae:	bf00      	nop
 8005ab0:	40020010 	.word	0x40020010
 8005ab4:	40020028 	.word	0x40020028
 8005ab8:	40020040 	.word	0x40020040
 8005abc:	40020058 	.word	0x40020058
 8005ac0:	40020070 	.word	0x40020070
 8005ac4:	40020088 	.word	0x40020088
 8005ac8:	400200a0 	.word	0x400200a0
 8005acc:	400200b8 	.word	0x400200b8
 8005ad0:	40020410 	.word	0x40020410
 8005ad4:	40020428 	.word	0x40020428
 8005ad8:	40020440 	.word	0x40020440
 8005adc:	40020458 	.word	0x40020458
 8005ae0:	40020470 	.word	0x40020470
 8005ae4:	40020488 	.word	0x40020488
 8005ae8:	400204a0 	.word	0x400204a0
 8005aec:	400204b8 	.word	0x400204b8
 8005af0:	58025408 	.word	0x58025408
 8005af4:	5802541c 	.word	0x5802541c
 8005af8:	58025430 	.word	0x58025430
 8005afc:	58025444 	.word	0x58025444
 8005b00:	58025458 	.word	0x58025458
 8005b04:	5802546c 	.word	0x5802546c
 8005b08:	58025480 	.word	0x58025480
 8005b0c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005b10:	693b      	ldr	r3, [r7, #16]
 8005b12:	f003 0320 	and.w	r3, r3, #32
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d160      	bne.n	8005bdc <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	4a7f      	ldr	r2, [pc, #508]	@ (8005d1c <HAL_DMA_IRQHandler+0xc74>)
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d04a      	beq.n	8005bba <HAL_DMA_IRQHandler+0xb12>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	4a7d      	ldr	r2, [pc, #500]	@ (8005d20 <HAL_DMA_IRQHandler+0xc78>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d045      	beq.n	8005bba <HAL_DMA_IRQHandler+0xb12>
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	4a7c      	ldr	r2, [pc, #496]	@ (8005d24 <HAL_DMA_IRQHandler+0xc7c>)
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d040      	beq.n	8005bba <HAL_DMA_IRQHandler+0xb12>
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	4a7a      	ldr	r2, [pc, #488]	@ (8005d28 <HAL_DMA_IRQHandler+0xc80>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d03b      	beq.n	8005bba <HAL_DMA_IRQHandler+0xb12>
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	4a79      	ldr	r2, [pc, #484]	@ (8005d2c <HAL_DMA_IRQHandler+0xc84>)
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	d036      	beq.n	8005bba <HAL_DMA_IRQHandler+0xb12>
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	4a77      	ldr	r2, [pc, #476]	@ (8005d30 <HAL_DMA_IRQHandler+0xc88>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d031      	beq.n	8005bba <HAL_DMA_IRQHandler+0xb12>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	4a76      	ldr	r2, [pc, #472]	@ (8005d34 <HAL_DMA_IRQHandler+0xc8c>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d02c      	beq.n	8005bba <HAL_DMA_IRQHandler+0xb12>
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	4a74      	ldr	r2, [pc, #464]	@ (8005d38 <HAL_DMA_IRQHandler+0xc90>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d027      	beq.n	8005bba <HAL_DMA_IRQHandler+0xb12>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	4a73      	ldr	r2, [pc, #460]	@ (8005d3c <HAL_DMA_IRQHandler+0xc94>)
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d022      	beq.n	8005bba <HAL_DMA_IRQHandler+0xb12>
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	4a71      	ldr	r2, [pc, #452]	@ (8005d40 <HAL_DMA_IRQHandler+0xc98>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d01d      	beq.n	8005bba <HAL_DMA_IRQHandler+0xb12>
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	4a70      	ldr	r2, [pc, #448]	@ (8005d44 <HAL_DMA_IRQHandler+0xc9c>)
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d018      	beq.n	8005bba <HAL_DMA_IRQHandler+0xb12>
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	4a6e      	ldr	r2, [pc, #440]	@ (8005d48 <HAL_DMA_IRQHandler+0xca0>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d013      	beq.n	8005bba <HAL_DMA_IRQHandler+0xb12>
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	4a6d      	ldr	r2, [pc, #436]	@ (8005d4c <HAL_DMA_IRQHandler+0xca4>)
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	d00e      	beq.n	8005bba <HAL_DMA_IRQHandler+0xb12>
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	4a6b      	ldr	r2, [pc, #428]	@ (8005d50 <HAL_DMA_IRQHandler+0xca8>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d009      	beq.n	8005bba <HAL_DMA_IRQHandler+0xb12>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	4a6a      	ldr	r2, [pc, #424]	@ (8005d54 <HAL_DMA_IRQHandler+0xcac>)
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d004      	beq.n	8005bba <HAL_DMA_IRQHandler+0xb12>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	4a68      	ldr	r2, [pc, #416]	@ (8005d58 <HAL_DMA_IRQHandler+0xcb0>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d108      	bne.n	8005bcc <HAL_DMA_IRQHandler+0xb24>
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	681a      	ldr	r2, [r3, #0]
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f022 0208 	bic.w	r2, r2, #8
 8005bc8:	601a      	str	r2, [r3, #0]
 8005bca:	e007      	b.n	8005bdc <HAL_DMA_IRQHandler+0xb34>
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	681a      	ldr	r2, [r3, #0]
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f022 0204 	bic.w	r2, r2, #4
 8005bda:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	f000 8165 	beq.w	8005eb0 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bea:	6878      	ldr	r0, [r7, #4]
 8005bec:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005bee:	e15f      	b.n	8005eb0 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005bf4:	f003 031f 	and.w	r3, r3, #31
 8005bf8:	2202      	movs	r2, #2
 8005bfa:	409a      	lsls	r2, r3
 8005bfc:	697b      	ldr	r3, [r7, #20]
 8005bfe:	4013      	ands	r3, r2
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	f000 80c5 	beq.w	8005d90 <HAL_DMA_IRQHandler+0xce8>
 8005c06:	693b      	ldr	r3, [r7, #16]
 8005c08:	f003 0302 	and.w	r3, r3, #2
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	f000 80bf 	beq.w	8005d90 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c16:	f003 031f 	and.w	r3, r3, #31
 8005c1a:	2202      	movs	r2, #2
 8005c1c:	409a      	lsls	r2, r3
 8005c1e:	69fb      	ldr	r3, [r7, #28]
 8005c20:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005c22:	693b      	ldr	r3, [r7, #16]
 8005c24:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d018      	beq.n	8005c5e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005c2c:	693b      	ldr	r3, [r7, #16]
 8005c2e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d109      	bne.n	8005c4a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	f000 813a 	beq.w	8005eb4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c44:	6878      	ldr	r0, [r7, #4]
 8005c46:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005c48:	e134      	b.n	8005eb4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	f000 8130 	beq.w	8005eb4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c58:	6878      	ldr	r0, [r7, #4]
 8005c5a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005c5c:	e12a      	b.n	8005eb4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005c5e:	693b      	ldr	r3, [r7, #16]
 8005c60:	f003 0320 	and.w	r3, r3, #32
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	f040 8089 	bne.w	8005d7c <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	4a2b      	ldr	r2, [pc, #172]	@ (8005d1c <HAL_DMA_IRQHandler+0xc74>)
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d04a      	beq.n	8005d0a <HAL_DMA_IRQHandler+0xc62>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	4a29      	ldr	r2, [pc, #164]	@ (8005d20 <HAL_DMA_IRQHandler+0xc78>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d045      	beq.n	8005d0a <HAL_DMA_IRQHandler+0xc62>
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	4a28      	ldr	r2, [pc, #160]	@ (8005d24 <HAL_DMA_IRQHandler+0xc7c>)
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d040      	beq.n	8005d0a <HAL_DMA_IRQHandler+0xc62>
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	4a26      	ldr	r2, [pc, #152]	@ (8005d28 <HAL_DMA_IRQHandler+0xc80>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d03b      	beq.n	8005d0a <HAL_DMA_IRQHandler+0xc62>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	4a25      	ldr	r2, [pc, #148]	@ (8005d2c <HAL_DMA_IRQHandler+0xc84>)
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	d036      	beq.n	8005d0a <HAL_DMA_IRQHandler+0xc62>
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	4a23      	ldr	r2, [pc, #140]	@ (8005d30 <HAL_DMA_IRQHandler+0xc88>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d031      	beq.n	8005d0a <HAL_DMA_IRQHandler+0xc62>
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	4a22      	ldr	r2, [pc, #136]	@ (8005d34 <HAL_DMA_IRQHandler+0xc8c>)
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d02c      	beq.n	8005d0a <HAL_DMA_IRQHandler+0xc62>
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	4a20      	ldr	r2, [pc, #128]	@ (8005d38 <HAL_DMA_IRQHandler+0xc90>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d027      	beq.n	8005d0a <HAL_DMA_IRQHandler+0xc62>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	4a1f      	ldr	r2, [pc, #124]	@ (8005d3c <HAL_DMA_IRQHandler+0xc94>)
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d022      	beq.n	8005d0a <HAL_DMA_IRQHandler+0xc62>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	4a1d      	ldr	r2, [pc, #116]	@ (8005d40 <HAL_DMA_IRQHandler+0xc98>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d01d      	beq.n	8005d0a <HAL_DMA_IRQHandler+0xc62>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	4a1c      	ldr	r2, [pc, #112]	@ (8005d44 <HAL_DMA_IRQHandler+0xc9c>)
 8005cd4:	4293      	cmp	r3, r2
 8005cd6:	d018      	beq.n	8005d0a <HAL_DMA_IRQHandler+0xc62>
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	4a1a      	ldr	r2, [pc, #104]	@ (8005d48 <HAL_DMA_IRQHandler+0xca0>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d013      	beq.n	8005d0a <HAL_DMA_IRQHandler+0xc62>
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	4a19      	ldr	r2, [pc, #100]	@ (8005d4c <HAL_DMA_IRQHandler+0xca4>)
 8005ce8:	4293      	cmp	r3, r2
 8005cea:	d00e      	beq.n	8005d0a <HAL_DMA_IRQHandler+0xc62>
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	4a17      	ldr	r2, [pc, #92]	@ (8005d50 <HAL_DMA_IRQHandler+0xca8>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d009      	beq.n	8005d0a <HAL_DMA_IRQHandler+0xc62>
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	4a16      	ldr	r2, [pc, #88]	@ (8005d54 <HAL_DMA_IRQHandler+0xcac>)
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	d004      	beq.n	8005d0a <HAL_DMA_IRQHandler+0xc62>
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	4a14      	ldr	r2, [pc, #80]	@ (8005d58 <HAL_DMA_IRQHandler+0xcb0>)
 8005d06:	4293      	cmp	r3, r2
 8005d08:	d128      	bne.n	8005d5c <HAL_DMA_IRQHandler+0xcb4>
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	681a      	ldr	r2, [r3, #0]
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f022 0214 	bic.w	r2, r2, #20
 8005d18:	601a      	str	r2, [r3, #0]
 8005d1a:	e027      	b.n	8005d6c <HAL_DMA_IRQHandler+0xcc4>
 8005d1c:	40020010 	.word	0x40020010
 8005d20:	40020028 	.word	0x40020028
 8005d24:	40020040 	.word	0x40020040
 8005d28:	40020058 	.word	0x40020058
 8005d2c:	40020070 	.word	0x40020070
 8005d30:	40020088 	.word	0x40020088
 8005d34:	400200a0 	.word	0x400200a0
 8005d38:	400200b8 	.word	0x400200b8
 8005d3c:	40020410 	.word	0x40020410
 8005d40:	40020428 	.word	0x40020428
 8005d44:	40020440 	.word	0x40020440
 8005d48:	40020458 	.word	0x40020458
 8005d4c:	40020470 	.word	0x40020470
 8005d50:	40020488 	.word	0x40020488
 8005d54:	400204a0 	.word	0x400204a0
 8005d58:	400204b8 	.word	0x400204b8
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	681a      	ldr	r2, [r3, #0]
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f022 020a 	bic.w	r2, r2, #10
 8005d6a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2201      	movs	r2, #1
 8005d70:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2200      	movs	r2, #0
 8005d78:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	f000 8097 	beq.w	8005eb4 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d8a:	6878      	ldr	r0, [r7, #4]
 8005d8c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005d8e:	e091      	b.n	8005eb4 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d94:	f003 031f 	and.w	r3, r3, #31
 8005d98:	2208      	movs	r2, #8
 8005d9a:	409a      	lsls	r2, r3
 8005d9c:	697b      	ldr	r3, [r7, #20]
 8005d9e:	4013      	ands	r3, r2
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	f000 8088 	beq.w	8005eb6 <HAL_DMA_IRQHandler+0xe0e>
 8005da6:	693b      	ldr	r3, [r7, #16]
 8005da8:	f003 0308 	and.w	r3, r3, #8
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	f000 8082 	beq.w	8005eb6 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	4a41      	ldr	r2, [pc, #260]	@ (8005ebc <HAL_DMA_IRQHandler+0xe14>)
 8005db8:	4293      	cmp	r3, r2
 8005dba:	d04a      	beq.n	8005e52 <HAL_DMA_IRQHandler+0xdaa>
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	4a3f      	ldr	r2, [pc, #252]	@ (8005ec0 <HAL_DMA_IRQHandler+0xe18>)
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d045      	beq.n	8005e52 <HAL_DMA_IRQHandler+0xdaa>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	4a3e      	ldr	r2, [pc, #248]	@ (8005ec4 <HAL_DMA_IRQHandler+0xe1c>)
 8005dcc:	4293      	cmp	r3, r2
 8005dce:	d040      	beq.n	8005e52 <HAL_DMA_IRQHandler+0xdaa>
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	4a3c      	ldr	r2, [pc, #240]	@ (8005ec8 <HAL_DMA_IRQHandler+0xe20>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d03b      	beq.n	8005e52 <HAL_DMA_IRQHandler+0xdaa>
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	4a3b      	ldr	r2, [pc, #236]	@ (8005ecc <HAL_DMA_IRQHandler+0xe24>)
 8005de0:	4293      	cmp	r3, r2
 8005de2:	d036      	beq.n	8005e52 <HAL_DMA_IRQHandler+0xdaa>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	4a39      	ldr	r2, [pc, #228]	@ (8005ed0 <HAL_DMA_IRQHandler+0xe28>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d031      	beq.n	8005e52 <HAL_DMA_IRQHandler+0xdaa>
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	4a38      	ldr	r2, [pc, #224]	@ (8005ed4 <HAL_DMA_IRQHandler+0xe2c>)
 8005df4:	4293      	cmp	r3, r2
 8005df6:	d02c      	beq.n	8005e52 <HAL_DMA_IRQHandler+0xdaa>
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	4a36      	ldr	r2, [pc, #216]	@ (8005ed8 <HAL_DMA_IRQHandler+0xe30>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d027      	beq.n	8005e52 <HAL_DMA_IRQHandler+0xdaa>
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	4a35      	ldr	r2, [pc, #212]	@ (8005edc <HAL_DMA_IRQHandler+0xe34>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d022      	beq.n	8005e52 <HAL_DMA_IRQHandler+0xdaa>
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	4a33      	ldr	r2, [pc, #204]	@ (8005ee0 <HAL_DMA_IRQHandler+0xe38>)
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d01d      	beq.n	8005e52 <HAL_DMA_IRQHandler+0xdaa>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	4a32      	ldr	r2, [pc, #200]	@ (8005ee4 <HAL_DMA_IRQHandler+0xe3c>)
 8005e1c:	4293      	cmp	r3, r2
 8005e1e:	d018      	beq.n	8005e52 <HAL_DMA_IRQHandler+0xdaa>
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	4a30      	ldr	r2, [pc, #192]	@ (8005ee8 <HAL_DMA_IRQHandler+0xe40>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d013      	beq.n	8005e52 <HAL_DMA_IRQHandler+0xdaa>
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	4a2f      	ldr	r2, [pc, #188]	@ (8005eec <HAL_DMA_IRQHandler+0xe44>)
 8005e30:	4293      	cmp	r3, r2
 8005e32:	d00e      	beq.n	8005e52 <HAL_DMA_IRQHandler+0xdaa>
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	4a2d      	ldr	r2, [pc, #180]	@ (8005ef0 <HAL_DMA_IRQHandler+0xe48>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d009      	beq.n	8005e52 <HAL_DMA_IRQHandler+0xdaa>
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	4a2c      	ldr	r2, [pc, #176]	@ (8005ef4 <HAL_DMA_IRQHandler+0xe4c>)
 8005e44:	4293      	cmp	r3, r2
 8005e46:	d004      	beq.n	8005e52 <HAL_DMA_IRQHandler+0xdaa>
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	4a2a      	ldr	r2, [pc, #168]	@ (8005ef8 <HAL_DMA_IRQHandler+0xe50>)
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d108      	bne.n	8005e64 <HAL_DMA_IRQHandler+0xdbc>
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	681a      	ldr	r2, [r3, #0]
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f022 021c 	bic.w	r2, r2, #28
 8005e60:	601a      	str	r2, [r3, #0]
 8005e62:	e007      	b.n	8005e74 <HAL_DMA_IRQHandler+0xdcc>
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	681a      	ldr	r2, [r3, #0]
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f022 020e 	bic.w	r2, r2, #14
 8005e72:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e78:	f003 031f 	and.w	r3, r3, #31
 8005e7c:	2201      	movs	r2, #1
 8005e7e:	409a      	lsls	r2, r3
 8005e80:	69fb      	ldr	r3, [r7, #28]
 8005e82:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2201      	movs	r2, #1
 8005e88:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	2201      	movs	r2, #1
 8005e8e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2200      	movs	r2, #0
 8005e96:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d009      	beq.n	8005eb6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ea6:	6878      	ldr	r0, [r7, #4]
 8005ea8:	4798      	blx	r3
 8005eaa:	e004      	b.n	8005eb6 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8005eac:	bf00      	nop
 8005eae:	e002      	b.n	8005eb6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005eb0:	bf00      	nop
 8005eb2:	e000      	b.n	8005eb6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005eb4:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005eb6:	3728      	adds	r7, #40	@ 0x28
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	bd80      	pop	{r7, pc}
 8005ebc:	40020010 	.word	0x40020010
 8005ec0:	40020028 	.word	0x40020028
 8005ec4:	40020040 	.word	0x40020040
 8005ec8:	40020058 	.word	0x40020058
 8005ecc:	40020070 	.word	0x40020070
 8005ed0:	40020088 	.word	0x40020088
 8005ed4:	400200a0 	.word	0x400200a0
 8005ed8:	400200b8 	.word	0x400200b8
 8005edc:	40020410 	.word	0x40020410
 8005ee0:	40020428 	.word	0x40020428
 8005ee4:	40020440 	.word	0x40020440
 8005ee8:	40020458 	.word	0x40020458
 8005eec:	40020470 	.word	0x40020470
 8005ef0:	40020488 	.word	0x40020488
 8005ef4:	400204a0 	.word	0x400204a0
 8005ef8:	400204b8 	.word	0x400204b8

08005efc <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005efc:	b480      	push	{r7}
 8005efe:	b087      	sub	sp, #28
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	60f8      	str	r0, [r7, #12]
 8005f04:	60b9      	str	r1, [r7, #8]
 8005f06:	607a      	str	r2, [r7, #4]
 8005f08:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f0e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f14:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	4a7f      	ldr	r2, [pc, #508]	@ (8006118 <DMA_SetConfig+0x21c>)
 8005f1c:	4293      	cmp	r3, r2
 8005f1e:	d072      	beq.n	8006006 <DMA_SetConfig+0x10a>
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	4a7d      	ldr	r2, [pc, #500]	@ (800611c <DMA_SetConfig+0x220>)
 8005f26:	4293      	cmp	r3, r2
 8005f28:	d06d      	beq.n	8006006 <DMA_SetConfig+0x10a>
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	4a7c      	ldr	r2, [pc, #496]	@ (8006120 <DMA_SetConfig+0x224>)
 8005f30:	4293      	cmp	r3, r2
 8005f32:	d068      	beq.n	8006006 <DMA_SetConfig+0x10a>
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	4a7a      	ldr	r2, [pc, #488]	@ (8006124 <DMA_SetConfig+0x228>)
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d063      	beq.n	8006006 <DMA_SetConfig+0x10a>
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	4a79      	ldr	r2, [pc, #484]	@ (8006128 <DMA_SetConfig+0x22c>)
 8005f44:	4293      	cmp	r3, r2
 8005f46:	d05e      	beq.n	8006006 <DMA_SetConfig+0x10a>
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	4a77      	ldr	r2, [pc, #476]	@ (800612c <DMA_SetConfig+0x230>)
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	d059      	beq.n	8006006 <DMA_SetConfig+0x10a>
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	4a76      	ldr	r2, [pc, #472]	@ (8006130 <DMA_SetConfig+0x234>)
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	d054      	beq.n	8006006 <DMA_SetConfig+0x10a>
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	4a74      	ldr	r2, [pc, #464]	@ (8006134 <DMA_SetConfig+0x238>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d04f      	beq.n	8006006 <DMA_SetConfig+0x10a>
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	4a73      	ldr	r2, [pc, #460]	@ (8006138 <DMA_SetConfig+0x23c>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d04a      	beq.n	8006006 <DMA_SetConfig+0x10a>
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	4a71      	ldr	r2, [pc, #452]	@ (800613c <DMA_SetConfig+0x240>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d045      	beq.n	8006006 <DMA_SetConfig+0x10a>
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	4a70      	ldr	r2, [pc, #448]	@ (8006140 <DMA_SetConfig+0x244>)
 8005f80:	4293      	cmp	r3, r2
 8005f82:	d040      	beq.n	8006006 <DMA_SetConfig+0x10a>
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	4a6e      	ldr	r2, [pc, #440]	@ (8006144 <DMA_SetConfig+0x248>)
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	d03b      	beq.n	8006006 <DMA_SetConfig+0x10a>
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	4a6d      	ldr	r2, [pc, #436]	@ (8006148 <DMA_SetConfig+0x24c>)
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d036      	beq.n	8006006 <DMA_SetConfig+0x10a>
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	4a6b      	ldr	r2, [pc, #428]	@ (800614c <DMA_SetConfig+0x250>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d031      	beq.n	8006006 <DMA_SetConfig+0x10a>
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	4a6a      	ldr	r2, [pc, #424]	@ (8006150 <DMA_SetConfig+0x254>)
 8005fa8:	4293      	cmp	r3, r2
 8005faa:	d02c      	beq.n	8006006 <DMA_SetConfig+0x10a>
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	4a68      	ldr	r2, [pc, #416]	@ (8006154 <DMA_SetConfig+0x258>)
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d027      	beq.n	8006006 <DMA_SetConfig+0x10a>
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	4a67      	ldr	r2, [pc, #412]	@ (8006158 <DMA_SetConfig+0x25c>)
 8005fbc:	4293      	cmp	r3, r2
 8005fbe:	d022      	beq.n	8006006 <DMA_SetConfig+0x10a>
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	4a65      	ldr	r2, [pc, #404]	@ (800615c <DMA_SetConfig+0x260>)
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d01d      	beq.n	8006006 <DMA_SetConfig+0x10a>
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	4a64      	ldr	r2, [pc, #400]	@ (8006160 <DMA_SetConfig+0x264>)
 8005fd0:	4293      	cmp	r3, r2
 8005fd2:	d018      	beq.n	8006006 <DMA_SetConfig+0x10a>
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	4a62      	ldr	r2, [pc, #392]	@ (8006164 <DMA_SetConfig+0x268>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d013      	beq.n	8006006 <DMA_SetConfig+0x10a>
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	4a61      	ldr	r2, [pc, #388]	@ (8006168 <DMA_SetConfig+0x26c>)
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d00e      	beq.n	8006006 <DMA_SetConfig+0x10a>
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	4a5f      	ldr	r2, [pc, #380]	@ (800616c <DMA_SetConfig+0x270>)
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d009      	beq.n	8006006 <DMA_SetConfig+0x10a>
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	4a5e      	ldr	r2, [pc, #376]	@ (8006170 <DMA_SetConfig+0x274>)
 8005ff8:	4293      	cmp	r3, r2
 8005ffa:	d004      	beq.n	8006006 <DMA_SetConfig+0x10a>
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	4a5c      	ldr	r2, [pc, #368]	@ (8006174 <DMA_SetConfig+0x278>)
 8006002:	4293      	cmp	r3, r2
 8006004:	d101      	bne.n	800600a <DMA_SetConfig+0x10e>
 8006006:	2301      	movs	r3, #1
 8006008:	e000      	b.n	800600c <DMA_SetConfig+0x110>
 800600a:	2300      	movs	r3, #0
 800600c:	2b00      	cmp	r3, #0
 800600e:	d00d      	beq.n	800602c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006014:	68fa      	ldr	r2, [r7, #12]
 8006016:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8006018:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800601e:	2b00      	cmp	r3, #0
 8006020:	d004      	beq.n	800602c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006026:	68fa      	ldr	r2, [r7, #12]
 8006028:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800602a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	4a39      	ldr	r2, [pc, #228]	@ (8006118 <DMA_SetConfig+0x21c>)
 8006032:	4293      	cmp	r3, r2
 8006034:	d04a      	beq.n	80060cc <DMA_SetConfig+0x1d0>
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	4a38      	ldr	r2, [pc, #224]	@ (800611c <DMA_SetConfig+0x220>)
 800603c:	4293      	cmp	r3, r2
 800603e:	d045      	beq.n	80060cc <DMA_SetConfig+0x1d0>
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	4a36      	ldr	r2, [pc, #216]	@ (8006120 <DMA_SetConfig+0x224>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d040      	beq.n	80060cc <DMA_SetConfig+0x1d0>
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	4a35      	ldr	r2, [pc, #212]	@ (8006124 <DMA_SetConfig+0x228>)
 8006050:	4293      	cmp	r3, r2
 8006052:	d03b      	beq.n	80060cc <DMA_SetConfig+0x1d0>
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	4a33      	ldr	r2, [pc, #204]	@ (8006128 <DMA_SetConfig+0x22c>)
 800605a:	4293      	cmp	r3, r2
 800605c:	d036      	beq.n	80060cc <DMA_SetConfig+0x1d0>
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	4a32      	ldr	r2, [pc, #200]	@ (800612c <DMA_SetConfig+0x230>)
 8006064:	4293      	cmp	r3, r2
 8006066:	d031      	beq.n	80060cc <DMA_SetConfig+0x1d0>
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	4a30      	ldr	r2, [pc, #192]	@ (8006130 <DMA_SetConfig+0x234>)
 800606e:	4293      	cmp	r3, r2
 8006070:	d02c      	beq.n	80060cc <DMA_SetConfig+0x1d0>
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	4a2f      	ldr	r2, [pc, #188]	@ (8006134 <DMA_SetConfig+0x238>)
 8006078:	4293      	cmp	r3, r2
 800607a:	d027      	beq.n	80060cc <DMA_SetConfig+0x1d0>
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	4a2d      	ldr	r2, [pc, #180]	@ (8006138 <DMA_SetConfig+0x23c>)
 8006082:	4293      	cmp	r3, r2
 8006084:	d022      	beq.n	80060cc <DMA_SetConfig+0x1d0>
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	4a2c      	ldr	r2, [pc, #176]	@ (800613c <DMA_SetConfig+0x240>)
 800608c:	4293      	cmp	r3, r2
 800608e:	d01d      	beq.n	80060cc <DMA_SetConfig+0x1d0>
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	4a2a      	ldr	r2, [pc, #168]	@ (8006140 <DMA_SetConfig+0x244>)
 8006096:	4293      	cmp	r3, r2
 8006098:	d018      	beq.n	80060cc <DMA_SetConfig+0x1d0>
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	4a29      	ldr	r2, [pc, #164]	@ (8006144 <DMA_SetConfig+0x248>)
 80060a0:	4293      	cmp	r3, r2
 80060a2:	d013      	beq.n	80060cc <DMA_SetConfig+0x1d0>
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	4a27      	ldr	r2, [pc, #156]	@ (8006148 <DMA_SetConfig+0x24c>)
 80060aa:	4293      	cmp	r3, r2
 80060ac:	d00e      	beq.n	80060cc <DMA_SetConfig+0x1d0>
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	4a26      	ldr	r2, [pc, #152]	@ (800614c <DMA_SetConfig+0x250>)
 80060b4:	4293      	cmp	r3, r2
 80060b6:	d009      	beq.n	80060cc <DMA_SetConfig+0x1d0>
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	4a24      	ldr	r2, [pc, #144]	@ (8006150 <DMA_SetConfig+0x254>)
 80060be:	4293      	cmp	r3, r2
 80060c0:	d004      	beq.n	80060cc <DMA_SetConfig+0x1d0>
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	4a23      	ldr	r2, [pc, #140]	@ (8006154 <DMA_SetConfig+0x258>)
 80060c8:	4293      	cmp	r3, r2
 80060ca:	d101      	bne.n	80060d0 <DMA_SetConfig+0x1d4>
 80060cc:	2301      	movs	r3, #1
 80060ce:	e000      	b.n	80060d2 <DMA_SetConfig+0x1d6>
 80060d0:	2300      	movs	r3, #0
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d059      	beq.n	800618a <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80060da:	f003 031f 	and.w	r3, r3, #31
 80060de:	223f      	movs	r2, #63	@ 0x3f
 80060e0:	409a      	lsls	r2, r3
 80060e2:	697b      	ldr	r3, [r7, #20]
 80060e4:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	681a      	ldr	r2, [r3, #0]
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80060f4:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	683a      	ldr	r2, [r7, #0]
 80060fc:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	689b      	ldr	r3, [r3, #8]
 8006102:	2b40      	cmp	r3, #64	@ 0x40
 8006104:	d138      	bne.n	8006178 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	687a      	ldr	r2, [r7, #4]
 800610c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	68ba      	ldr	r2, [r7, #8]
 8006114:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006116:	e086      	b.n	8006226 <DMA_SetConfig+0x32a>
 8006118:	40020010 	.word	0x40020010
 800611c:	40020028 	.word	0x40020028
 8006120:	40020040 	.word	0x40020040
 8006124:	40020058 	.word	0x40020058
 8006128:	40020070 	.word	0x40020070
 800612c:	40020088 	.word	0x40020088
 8006130:	400200a0 	.word	0x400200a0
 8006134:	400200b8 	.word	0x400200b8
 8006138:	40020410 	.word	0x40020410
 800613c:	40020428 	.word	0x40020428
 8006140:	40020440 	.word	0x40020440
 8006144:	40020458 	.word	0x40020458
 8006148:	40020470 	.word	0x40020470
 800614c:	40020488 	.word	0x40020488
 8006150:	400204a0 	.word	0x400204a0
 8006154:	400204b8 	.word	0x400204b8
 8006158:	58025408 	.word	0x58025408
 800615c:	5802541c 	.word	0x5802541c
 8006160:	58025430 	.word	0x58025430
 8006164:	58025444 	.word	0x58025444
 8006168:	58025458 	.word	0x58025458
 800616c:	5802546c 	.word	0x5802546c
 8006170:	58025480 	.word	0x58025480
 8006174:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	68ba      	ldr	r2, [r7, #8]
 800617e:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	687a      	ldr	r2, [r7, #4]
 8006186:	60da      	str	r2, [r3, #12]
}
 8006188:	e04d      	b.n	8006226 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	4a29      	ldr	r2, [pc, #164]	@ (8006234 <DMA_SetConfig+0x338>)
 8006190:	4293      	cmp	r3, r2
 8006192:	d022      	beq.n	80061da <DMA_SetConfig+0x2de>
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	4a27      	ldr	r2, [pc, #156]	@ (8006238 <DMA_SetConfig+0x33c>)
 800619a:	4293      	cmp	r3, r2
 800619c:	d01d      	beq.n	80061da <DMA_SetConfig+0x2de>
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	4a26      	ldr	r2, [pc, #152]	@ (800623c <DMA_SetConfig+0x340>)
 80061a4:	4293      	cmp	r3, r2
 80061a6:	d018      	beq.n	80061da <DMA_SetConfig+0x2de>
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	4a24      	ldr	r2, [pc, #144]	@ (8006240 <DMA_SetConfig+0x344>)
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d013      	beq.n	80061da <DMA_SetConfig+0x2de>
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	4a23      	ldr	r2, [pc, #140]	@ (8006244 <DMA_SetConfig+0x348>)
 80061b8:	4293      	cmp	r3, r2
 80061ba:	d00e      	beq.n	80061da <DMA_SetConfig+0x2de>
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	4a21      	ldr	r2, [pc, #132]	@ (8006248 <DMA_SetConfig+0x34c>)
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d009      	beq.n	80061da <DMA_SetConfig+0x2de>
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	4a20      	ldr	r2, [pc, #128]	@ (800624c <DMA_SetConfig+0x350>)
 80061cc:	4293      	cmp	r3, r2
 80061ce:	d004      	beq.n	80061da <DMA_SetConfig+0x2de>
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	4a1e      	ldr	r2, [pc, #120]	@ (8006250 <DMA_SetConfig+0x354>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d101      	bne.n	80061de <DMA_SetConfig+0x2e2>
 80061da:	2301      	movs	r3, #1
 80061dc:	e000      	b.n	80061e0 <DMA_SetConfig+0x2e4>
 80061de:	2300      	movs	r3, #0
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d020      	beq.n	8006226 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80061e8:	f003 031f 	and.w	r3, r3, #31
 80061ec:	2201      	movs	r2, #1
 80061ee:	409a      	lsls	r2, r3
 80061f0:	693b      	ldr	r3, [r7, #16]
 80061f2:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	683a      	ldr	r2, [r7, #0]
 80061fa:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	689b      	ldr	r3, [r3, #8]
 8006200:	2b40      	cmp	r3, #64	@ 0x40
 8006202:	d108      	bne.n	8006216 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	687a      	ldr	r2, [r7, #4]
 800620a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	68ba      	ldr	r2, [r7, #8]
 8006212:	60da      	str	r2, [r3, #12]
}
 8006214:	e007      	b.n	8006226 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	68ba      	ldr	r2, [r7, #8]
 800621c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	687a      	ldr	r2, [r7, #4]
 8006224:	60da      	str	r2, [r3, #12]
}
 8006226:	bf00      	nop
 8006228:	371c      	adds	r7, #28
 800622a:	46bd      	mov	sp, r7
 800622c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006230:	4770      	bx	lr
 8006232:	bf00      	nop
 8006234:	58025408 	.word	0x58025408
 8006238:	5802541c 	.word	0x5802541c
 800623c:	58025430 	.word	0x58025430
 8006240:	58025444 	.word	0x58025444
 8006244:	58025458 	.word	0x58025458
 8006248:	5802546c 	.word	0x5802546c
 800624c:	58025480 	.word	0x58025480
 8006250:	58025494 	.word	0x58025494

08006254 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006254:	b480      	push	{r7}
 8006256:	b085      	sub	sp, #20
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	4a42      	ldr	r2, [pc, #264]	@ (800636c <DMA_CalcBaseAndBitshift+0x118>)
 8006262:	4293      	cmp	r3, r2
 8006264:	d04a      	beq.n	80062fc <DMA_CalcBaseAndBitshift+0xa8>
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	4a41      	ldr	r2, [pc, #260]	@ (8006370 <DMA_CalcBaseAndBitshift+0x11c>)
 800626c:	4293      	cmp	r3, r2
 800626e:	d045      	beq.n	80062fc <DMA_CalcBaseAndBitshift+0xa8>
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	4a3f      	ldr	r2, [pc, #252]	@ (8006374 <DMA_CalcBaseAndBitshift+0x120>)
 8006276:	4293      	cmp	r3, r2
 8006278:	d040      	beq.n	80062fc <DMA_CalcBaseAndBitshift+0xa8>
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	4a3e      	ldr	r2, [pc, #248]	@ (8006378 <DMA_CalcBaseAndBitshift+0x124>)
 8006280:	4293      	cmp	r3, r2
 8006282:	d03b      	beq.n	80062fc <DMA_CalcBaseAndBitshift+0xa8>
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	4a3c      	ldr	r2, [pc, #240]	@ (800637c <DMA_CalcBaseAndBitshift+0x128>)
 800628a:	4293      	cmp	r3, r2
 800628c:	d036      	beq.n	80062fc <DMA_CalcBaseAndBitshift+0xa8>
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	4a3b      	ldr	r2, [pc, #236]	@ (8006380 <DMA_CalcBaseAndBitshift+0x12c>)
 8006294:	4293      	cmp	r3, r2
 8006296:	d031      	beq.n	80062fc <DMA_CalcBaseAndBitshift+0xa8>
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	4a39      	ldr	r2, [pc, #228]	@ (8006384 <DMA_CalcBaseAndBitshift+0x130>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	d02c      	beq.n	80062fc <DMA_CalcBaseAndBitshift+0xa8>
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	4a38      	ldr	r2, [pc, #224]	@ (8006388 <DMA_CalcBaseAndBitshift+0x134>)
 80062a8:	4293      	cmp	r3, r2
 80062aa:	d027      	beq.n	80062fc <DMA_CalcBaseAndBitshift+0xa8>
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	4a36      	ldr	r2, [pc, #216]	@ (800638c <DMA_CalcBaseAndBitshift+0x138>)
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d022      	beq.n	80062fc <DMA_CalcBaseAndBitshift+0xa8>
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	4a35      	ldr	r2, [pc, #212]	@ (8006390 <DMA_CalcBaseAndBitshift+0x13c>)
 80062bc:	4293      	cmp	r3, r2
 80062be:	d01d      	beq.n	80062fc <DMA_CalcBaseAndBitshift+0xa8>
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	4a33      	ldr	r2, [pc, #204]	@ (8006394 <DMA_CalcBaseAndBitshift+0x140>)
 80062c6:	4293      	cmp	r3, r2
 80062c8:	d018      	beq.n	80062fc <DMA_CalcBaseAndBitshift+0xa8>
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	4a32      	ldr	r2, [pc, #200]	@ (8006398 <DMA_CalcBaseAndBitshift+0x144>)
 80062d0:	4293      	cmp	r3, r2
 80062d2:	d013      	beq.n	80062fc <DMA_CalcBaseAndBitshift+0xa8>
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	4a30      	ldr	r2, [pc, #192]	@ (800639c <DMA_CalcBaseAndBitshift+0x148>)
 80062da:	4293      	cmp	r3, r2
 80062dc:	d00e      	beq.n	80062fc <DMA_CalcBaseAndBitshift+0xa8>
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	4a2f      	ldr	r2, [pc, #188]	@ (80063a0 <DMA_CalcBaseAndBitshift+0x14c>)
 80062e4:	4293      	cmp	r3, r2
 80062e6:	d009      	beq.n	80062fc <DMA_CalcBaseAndBitshift+0xa8>
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	4a2d      	ldr	r2, [pc, #180]	@ (80063a4 <DMA_CalcBaseAndBitshift+0x150>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d004      	beq.n	80062fc <DMA_CalcBaseAndBitshift+0xa8>
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	4a2c      	ldr	r2, [pc, #176]	@ (80063a8 <DMA_CalcBaseAndBitshift+0x154>)
 80062f8:	4293      	cmp	r3, r2
 80062fa:	d101      	bne.n	8006300 <DMA_CalcBaseAndBitshift+0xac>
 80062fc:	2301      	movs	r3, #1
 80062fe:	e000      	b.n	8006302 <DMA_CalcBaseAndBitshift+0xae>
 8006300:	2300      	movs	r3, #0
 8006302:	2b00      	cmp	r3, #0
 8006304:	d024      	beq.n	8006350 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	b2db      	uxtb	r3, r3
 800630c:	3b10      	subs	r3, #16
 800630e:	4a27      	ldr	r2, [pc, #156]	@ (80063ac <DMA_CalcBaseAndBitshift+0x158>)
 8006310:	fba2 2303 	umull	r2, r3, r2, r3
 8006314:	091b      	lsrs	r3, r3, #4
 8006316:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	f003 0307 	and.w	r3, r3, #7
 800631e:	4a24      	ldr	r2, [pc, #144]	@ (80063b0 <DMA_CalcBaseAndBitshift+0x15c>)
 8006320:	5cd3      	ldrb	r3, [r2, r3]
 8006322:	461a      	mov	r2, r3
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	2b03      	cmp	r3, #3
 800632c:	d908      	bls.n	8006340 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	461a      	mov	r2, r3
 8006334:	4b1f      	ldr	r3, [pc, #124]	@ (80063b4 <DMA_CalcBaseAndBitshift+0x160>)
 8006336:	4013      	ands	r3, r2
 8006338:	1d1a      	adds	r2, r3, #4
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	659a      	str	r2, [r3, #88]	@ 0x58
 800633e:	e00d      	b.n	800635c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	461a      	mov	r2, r3
 8006346:	4b1b      	ldr	r3, [pc, #108]	@ (80063b4 <DMA_CalcBaseAndBitshift+0x160>)
 8006348:	4013      	ands	r3, r2
 800634a:	687a      	ldr	r2, [r7, #4]
 800634c:	6593      	str	r3, [r2, #88]	@ 0x58
 800634e:	e005      	b.n	800635c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8006360:	4618      	mov	r0, r3
 8006362:	3714      	adds	r7, #20
 8006364:	46bd      	mov	sp, r7
 8006366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636a:	4770      	bx	lr
 800636c:	40020010 	.word	0x40020010
 8006370:	40020028 	.word	0x40020028
 8006374:	40020040 	.word	0x40020040
 8006378:	40020058 	.word	0x40020058
 800637c:	40020070 	.word	0x40020070
 8006380:	40020088 	.word	0x40020088
 8006384:	400200a0 	.word	0x400200a0
 8006388:	400200b8 	.word	0x400200b8
 800638c:	40020410 	.word	0x40020410
 8006390:	40020428 	.word	0x40020428
 8006394:	40020440 	.word	0x40020440
 8006398:	40020458 	.word	0x40020458
 800639c:	40020470 	.word	0x40020470
 80063a0:	40020488 	.word	0x40020488
 80063a4:	400204a0 	.word	0x400204a0
 80063a8:	400204b8 	.word	0x400204b8
 80063ac:	aaaaaaab 	.word	0xaaaaaaab
 80063b0:	0801520c 	.word	0x0801520c
 80063b4:	fffffc00 	.word	0xfffffc00

080063b8 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80063b8:	b480      	push	{r7}
 80063ba:	b085      	sub	sp, #20
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80063c0:	2300      	movs	r3, #0
 80063c2:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	699b      	ldr	r3, [r3, #24]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d120      	bne.n	800640e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063d0:	2b03      	cmp	r3, #3
 80063d2:	d858      	bhi.n	8006486 <DMA_CheckFifoParam+0xce>
 80063d4:	a201      	add	r2, pc, #4	@ (adr r2, 80063dc <DMA_CheckFifoParam+0x24>)
 80063d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063da:	bf00      	nop
 80063dc:	080063ed 	.word	0x080063ed
 80063e0:	080063ff 	.word	0x080063ff
 80063e4:	080063ed 	.word	0x080063ed
 80063e8:	08006487 	.word	0x08006487
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063f0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d048      	beq.n	800648a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80063f8:	2301      	movs	r3, #1
 80063fa:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80063fc:	e045      	b.n	800648a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006402:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006406:	d142      	bne.n	800648e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8006408:	2301      	movs	r3, #1
 800640a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800640c:	e03f      	b.n	800648e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	699b      	ldr	r3, [r3, #24]
 8006412:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006416:	d123      	bne.n	8006460 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800641c:	2b03      	cmp	r3, #3
 800641e:	d838      	bhi.n	8006492 <DMA_CheckFifoParam+0xda>
 8006420:	a201      	add	r2, pc, #4	@ (adr r2, 8006428 <DMA_CheckFifoParam+0x70>)
 8006422:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006426:	bf00      	nop
 8006428:	08006439 	.word	0x08006439
 800642c:	0800643f 	.word	0x0800643f
 8006430:	08006439 	.word	0x08006439
 8006434:	08006451 	.word	0x08006451
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8006438:	2301      	movs	r3, #1
 800643a:	73fb      	strb	r3, [r7, #15]
        break;
 800643c:	e030      	b.n	80064a0 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006442:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006446:	2b00      	cmp	r3, #0
 8006448:	d025      	beq.n	8006496 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800644a:	2301      	movs	r3, #1
 800644c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800644e:	e022      	b.n	8006496 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006454:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006458:	d11f      	bne.n	800649a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800645a:	2301      	movs	r3, #1
 800645c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800645e:	e01c      	b.n	800649a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006464:	2b02      	cmp	r3, #2
 8006466:	d902      	bls.n	800646e <DMA_CheckFifoParam+0xb6>
 8006468:	2b03      	cmp	r3, #3
 800646a:	d003      	beq.n	8006474 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800646c:	e018      	b.n	80064a0 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800646e:	2301      	movs	r3, #1
 8006470:	73fb      	strb	r3, [r7, #15]
        break;
 8006472:	e015      	b.n	80064a0 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006478:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800647c:	2b00      	cmp	r3, #0
 800647e:	d00e      	beq.n	800649e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8006480:	2301      	movs	r3, #1
 8006482:	73fb      	strb	r3, [r7, #15]
    break;
 8006484:	e00b      	b.n	800649e <DMA_CheckFifoParam+0xe6>
        break;
 8006486:	bf00      	nop
 8006488:	e00a      	b.n	80064a0 <DMA_CheckFifoParam+0xe8>
        break;
 800648a:	bf00      	nop
 800648c:	e008      	b.n	80064a0 <DMA_CheckFifoParam+0xe8>
        break;
 800648e:	bf00      	nop
 8006490:	e006      	b.n	80064a0 <DMA_CheckFifoParam+0xe8>
        break;
 8006492:	bf00      	nop
 8006494:	e004      	b.n	80064a0 <DMA_CheckFifoParam+0xe8>
        break;
 8006496:	bf00      	nop
 8006498:	e002      	b.n	80064a0 <DMA_CheckFifoParam+0xe8>
        break;
 800649a:	bf00      	nop
 800649c:	e000      	b.n	80064a0 <DMA_CheckFifoParam+0xe8>
    break;
 800649e:	bf00      	nop
    }
  }

  return status;
 80064a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80064a2:	4618      	mov	r0, r3
 80064a4:	3714      	adds	r7, #20
 80064a6:	46bd      	mov	sp, r7
 80064a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ac:	4770      	bx	lr
 80064ae:	bf00      	nop

080064b0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80064b0:	b480      	push	{r7}
 80064b2:	b085      	sub	sp, #20
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	4a38      	ldr	r2, [pc, #224]	@ (80065a4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80064c4:	4293      	cmp	r3, r2
 80064c6:	d022      	beq.n	800650e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	4a36      	ldr	r2, [pc, #216]	@ (80065a8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d01d      	beq.n	800650e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	4a35      	ldr	r2, [pc, #212]	@ (80065ac <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80064d8:	4293      	cmp	r3, r2
 80064da:	d018      	beq.n	800650e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	4a33      	ldr	r2, [pc, #204]	@ (80065b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d013      	beq.n	800650e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	4a32      	ldr	r2, [pc, #200]	@ (80065b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d00e      	beq.n	800650e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	4a30      	ldr	r2, [pc, #192]	@ (80065b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d009      	beq.n	800650e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	4a2f      	ldr	r2, [pc, #188]	@ (80065bc <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8006500:	4293      	cmp	r3, r2
 8006502:	d004      	beq.n	800650e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	4a2d      	ldr	r2, [pc, #180]	@ (80065c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800650a:	4293      	cmp	r3, r2
 800650c:	d101      	bne.n	8006512 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800650e:	2301      	movs	r3, #1
 8006510:	e000      	b.n	8006514 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8006512:	2300      	movs	r3, #0
 8006514:	2b00      	cmp	r3, #0
 8006516:	d01a      	beq.n	800654e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	b2db      	uxtb	r3, r3
 800651e:	3b08      	subs	r3, #8
 8006520:	4a28      	ldr	r2, [pc, #160]	@ (80065c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8006522:	fba2 2303 	umull	r2, r3, r2, r3
 8006526:	091b      	lsrs	r3, r3, #4
 8006528:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800652a:	68fa      	ldr	r2, [r7, #12]
 800652c:	4b26      	ldr	r3, [pc, #152]	@ (80065c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800652e:	4413      	add	r3, r2
 8006530:	009b      	lsls	r3, r3, #2
 8006532:	461a      	mov	r2, r3
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	4a24      	ldr	r2, [pc, #144]	@ (80065cc <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800653c:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	f003 031f 	and.w	r3, r3, #31
 8006544:	2201      	movs	r2, #1
 8006546:	409a      	lsls	r2, r3
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800654c:	e024      	b.n	8006598 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	b2db      	uxtb	r3, r3
 8006554:	3b10      	subs	r3, #16
 8006556:	4a1e      	ldr	r2, [pc, #120]	@ (80065d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8006558:	fba2 2303 	umull	r2, r3, r2, r3
 800655c:	091b      	lsrs	r3, r3, #4
 800655e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8006560:	68bb      	ldr	r3, [r7, #8]
 8006562:	4a1c      	ldr	r2, [pc, #112]	@ (80065d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8006564:	4293      	cmp	r3, r2
 8006566:	d806      	bhi.n	8006576 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8006568:	68bb      	ldr	r3, [r7, #8]
 800656a:	4a1b      	ldr	r2, [pc, #108]	@ (80065d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800656c:	4293      	cmp	r3, r2
 800656e:	d902      	bls.n	8006576 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	3308      	adds	r3, #8
 8006574:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8006576:	68fa      	ldr	r2, [r7, #12]
 8006578:	4b18      	ldr	r3, [pc, #96]	@ (80065dc <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800657a:	4413      	add	r3, r2
 800657c:	009b      	lsls	r3, r3, #2
 800657e:	461a      	mov	r2, r3
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	4a16      	ldr	r2, [pc, #88]	@ (80065e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8006588:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	f003 031f 	and.w	r3, r3, #31
 8006590:	2201      	movs	r2, #1
 8006592:	409a      	lsls	r2, r3
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006598:	bf00      	nop
 800659a:	3714      	adds	r7, #20
 800659c:	46bd      	mov	sp, r7
 800659e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a2:	4770      	bx	lr
 80065a4:	58025408 	.word	0x58025408
 80065a8:	5802541c 	.word	0x5802541c
 80065ac:	58025430 	.word	0x58025430
 80065b0:	58025444 	.word	0x58025444
 80065b4:	58025458 	.word	0x58025458
 80065b8:	5802546c 	.word	0x5802546c
 80065bc:	58025480 	.word	0x58025480
 80065c0:	58025494 	.word	0x58025494
 80065c4:	cccccccd 	.word	0xcccccccd
 80065c8:	16009600 	.word	0x16009600
 80065cc:	58025880 	.word	0x58025880
 80065d0:	aaaaaaab 	.word	0xaaaaaaab
 80065d4:	400204b8 	.word	0x400204b8
 80065d8:	4002040f 	.word	0x4002040f
 80065dc:	10008200 	.word	0x10008200
 80065e0:	40020880 	.word	0x40020880

080065e4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80065e4:	b480      	push	{r7}
 80065e6:	b085      	sub	sp, #20
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	685b      	ldr	r3, [r3, #4]
 80065f0:	b2db      	uxtb	r3, r3
 80065f2:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d04a      	beq.n	8006690 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	2b08      	cmp	r3, #8
 80065fe:	d847      	bhi.n	8006690 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	4a25      	ldr	r2, [pc, #148]	@ (800669c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8006606:	4293      	cmp	r3, r2
 8006608:	d022      	beq.n	8006650 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	4a24      	ldr	r2, [pc, #144]	@ (80066a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8006610:	4293      	cmp	r3, r2
 8006612:	d01d      	beq.n	8006650 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	4a22      	ldr	r2, [pc, #136]	@ (80066a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800661a:	4293      	cmp	r3, r2
 800661c:	d018      	beq.n	8006650 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	4a21      	ldr	r2, [pc, #132]	@ (80066a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8006624:	4293      	cmp	r3, r2
 8006626:	d013      	beq.n	8006650 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	4a1f      	ldr	r2, [pc, #124]	@ (80066ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800662e:	4293      	cmp	r3, r2
 8006630:	d00e      	beq.n	8006650 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	4a1e      	ldr	r2, [pc, #120]	@ (80066b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8006638:	4293      	cmp	r3, r2
 800663a:	d009      	beq.n	8006650 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	4a1c      	ldr	r2, [pc, #112]	@ (80066b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8006642:	4293      	cmp	r3, r2
 8006644:	d004      	beq.n	8006650 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	4a1b      	ldr	r2, [pc, #108]	@ (80066b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800664c:	4293      	cmp	r3, r2
 800664e:	d101      	bne.n	8006654 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8006650:	2301      	movs	r3, #1
 8006652:	e000      	b.n	8006656 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8006654:	2300      	movs	r3, #0
 8006656:	2b00      	cmp	r3, #0
 8006658:	d00a      	beq.n	8006670 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800665a:	68fa      	ldr	r2, [r7, #12]
 800665c:	4b17      	ldr	r3, [pc, #92]	@ (80066bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800665e:	4413      	add	r3, r2
 8006660:	009b      	lsls	r3, r3, #2
 8006662:	461a      	mov	r2, r3
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	4a15      	ldr	r2, [pc, #84]	@ (80066c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800666c:	671a      	str	r2, [r3, #112]	@ 0x70
 800666e:	e009      	b.n	8006684 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006670:	68fa      	ldr	r2, [r7, #12]
 8006672:	4b14      	ldr	r3, [pc, #80]	@ (80066c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8006674:	4413      	add	r3, r2
 8006676:	009b      	lsls	r3, r3, #2
 8006678:	461a      	mov	r2, r3
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	4a11      	ldr	r2, [pc, #68]	@ (80066c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8006682:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	3b01      	subs	r3, #1
 8006688:	2201      	movs	r2, #1
 800668a:	409a      	lsls	r2, r3
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8006690:	bf00      	nop
 8006692:	3714      	adds	r7, #20
 8006694:	46bd      	mov	sp, r7
 8006696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669a:	4770      	bx	lr
 800669c:	58025408 	.word	0x58025408
 80066a0:	5802541c 	.word	0x5802541c
 80066a4:	58025430 	.word	0x58025430
 80066a8:	58025444 	.word	0x58025444
 80066ac:	58025458 	.word	0x58025458
 80066b0:	5802546c 	.word	0x5802546c
 80066b4:	58025480 	.word	0x58025480
 80066b8:	58025494 	.word	0x58025494
 80066bc:	1600963f 	.word	0x1600963f
 80066c0:	58025940 	.word	0x58025940
 80066c4:	1000823f 	.word	0x1000823f
 80066c8:	40020940 	.word	0x40020940

080066cc <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 80066cc:	b480      	push	{r7}
 80066ce:	b087      	sub	sp, #28
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	60f8      	str	r0, [r7, #12]
 80066d4:	460b      	mov	r3, r1
 80066d6:	607a      	str	r2, [r7, #4]
 80066d8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80066da:	2300      	movs	r3, #0
 80066dc:	75fb      	strb	r3, [r7, #23]

  /* Check null pointer */
  if (hexti == NULL)
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d101      	bne.n	80066e8 <HAL_EXTI_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 80066e4:	2301      	movs	r3, #1
 80066e6:	e00a      	b.n	80066fe <HAL_EXTI_RegisterCallback+0x32>
  }

  switch (CallbackID)
 80066e8:	7afb      	ldrb	r3, [r7, #11]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d103      	bne.n	80066f6 <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	687a      	ldr	r2, [r7, #4]
 80066f2:	605a      	str	r2, [r3, #4]
      break;
 80066f4:	e002      	b.n	80066fc <HAL_EXTI_RegisterCallback+0x30>

    default:
      status = HAL_ERROR;
 80066f6:	2301      	movs	r3, #1
 80066f8:	75fb      	strb	r3, [r7, #23]
      break;
 80066fa:	bf00      	nop
  }

  return status;
 80066fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80066fe:	4618      	mov	r0, r3
 8006700:	371c      	adds	r7, #28
 8006702:	46bd      	mov	sp, r7
 8006704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006708:	4770      	bx	lr

0800670a <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 800670a:	b480      	push	{r7}
 800670c:	b083      	sub	sp, #12
 800670e:	af00      	add	r7, sp, #0
 8006710:	6078      	str	r0, [r7, #4]
 8006712:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d101      	bne.n	800671e <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 800671a:	2301      	movs	r3, #1
 800671c:	e003      	b.n	8006726 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	683a      	ldr	r2, [r7, #0]
 8006722:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8006724:	2300      	movs	r3, #0
  }
}
 8006726:	4618      	mov	r0, r3
 8006728:	370c      	adds	r7, #12
 800672a:	46bd      	mov	sp, r7
 800672c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006730:	4770      	bx	lr
	...

08006734 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 8006734:	b580      	push	{r7, lr}
 8006736:	b086      	sub	sp, #24
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	0c1b      	lsrs	r3, r3, #16
 8006742:	f003 0303 	and.w	r3, r3, #3
 8006746:	613b      	str	r3, [r7, #16]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f003 031f 	and.w	r3, r3, #31
 8006750:	2201      	movs	r2, #1
 8006752:	fa02 f303 	lsl.w	r3, r2, r3
 8006756:	60fb      	str	r3, [r7, #12]

#if defined(DUAL_CORE)
  if (HAL_GetCurrentCPUID() == CM7_CPUID)
 8006758:	f7fd fecc 	bl	80044f4 <HAL_GetCurrentCPUID>
 800675c:	4603      	mov	r3, r0
 800675e:	2b03      	cmp	r3, #3
 8006760:	d105      	bne.n	800676e <HAL_EXTI_IRQHandler+0x3a>
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
 8006762:	693b      	ldr	r3, [r7, #16]
 8006764:	011a      	lsls	r2, r3, #4
 8006766:	4b0f      	ldr	r3, [pc, #60]	@ (80067a4 <HAL_EXTI_IRQHandler+0x70>)
 8006768:	4413      	add	r3, r2
 800676a:	617b      	str	r3, [r7, #20]
 800676c:	e004      	b.n	8006778 <HAL_EXTI_IRQHandler+0x44>
  }
  else /* Cortex-M4*/
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->C2PR1 + (EXTI_MODE_OFFSET * offset));
 800676e:	693b      	ldr	r3, [r7, #16]
 8006770:	011a      	lsls	r2, r3, #4
 8006772:	4b0d      	ldr	r3, [pc, #52]	@ (80067a8 <HAL_EXTI_IRQHandler+0x74>)
 8006774:	4413      	add	r3, r2
 8006776:	617b      	str	r3, [r7, #20]
#else
  regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
#endif /* DUAL_CORE */

  /* Get pending bit  */
  regval = (*regaddr & maskline);
 8006778:	697b      	ldr	r3, [r7, #20]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	68fa      	ldr	r2, [r7, #12]
 800677e:	4013      	ands	r3, r2
 8006780:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00U)
 8006782:	68bb      	ldr	r3, [r7, #8]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d009      	beq.n	800679c <HAL_EXTI_IRQHandler+0x68>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8006788:	697b      	ldr	r3, [r7, #20]
 800678a:	68fa      	ldr	r2, [r7, #12]
 800678c:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	685b      	ldr	r3, [r3, #4]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d002      	beq.n	800679c <HAL_EXTI_IRQHandler+0x68>
    {
      hexti->PendingCallback();
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	685b      	ldr	r3, [r3, #4]
 800679a:	4798      	blx	r3
    }
  }
}
 800679c:	bf00      	nop
 800679e:	3718      	adds	r7, #24
 80067a0:	46bd      	mov	sp, r7
 80067a2:	bd80      	pop	{r7, pc}
 80067a4:	58000088 	.word	0x58000088
 80067a8:	580000c8 	.word	0x580000c8

080067ac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80067ac:	b480      	push	{r7}
 80067ae:	b089      	sub	sp, #36	@ 0x24
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
 80067b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80067b6:	2300      	movs	r3, #0
 80067b8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80067ba:	4b89      	ldr	r3, [pc, #548]	@ (80069e0 <HAL_GPIO_Init+0x234>)
 80067bc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80067be:	e194      	b.n	8006aea <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	681a      	ldr	r2, [r3, #0]
 80067c4:	2101      	movs	r1, #1
 80067c6:	69fb      	ldr	r3, [r7, #28]
 80067c8:	fa01 f303 	lsl.w	r3, r1, r3
 80067cc:	4013      	ands	r3, r2
 80067ce:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80067d0:	693b      	ldr	r3, [r7, #16]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	f000 8186 	beq.w	8006ae4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	685b      	ldr	r3, [r3, #4]
 80067dc:	f003 0303 	and.w	r3, r3, #3
 80067e0:	2b01      	cmp	r3, #1
 80067e2:	d005      	beq.n	80067f0 <HAL_GPIO_Init+0x44>
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	685b      	ldr	r3, [r3, #4]
 80067e8:	f003 0303 	and.w	r3, r3, #3
 80067ec:	2b02      	cmp	r3, #2
 80067ee:	d130      	bne.n	8006852 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	689b      	ldr	r3, [r3, #8]
 80067f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80067f6:	69fb      	ldr	r3, [r7, #28]
 80067f8:	005b      	lsls	r3, r3, #1
 80067fa:	2203      	movs	r2, #3
 80067fc:	fa02 f303 	lsl.w	r3, r2, r3
 8006800:	43db      	mvns	r3, r3
 8006802:	69ba      	ldr	r2, [r7, #24]
 8006804:	4013      	ands	r3, r2
 8006806:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	68da      	ldr	r2, [r3, #12]
 800680c:	69fb      	ldr	r3, [r7, #28]
 800680e:	005b      	lsls	r3, r3, #1
 8006810:	fa02 f303 	lsl.w	r3, r2, r3
 8006814:	69ba      	ldr	r2, [r7, #24]
 8006816:	4313      	orrs	r3, r2
 8006818:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	69ba      	ldr	r2, [r7, #24]
 800681e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	685b      	ldr	r3, [r3, #4]
 8006824:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006826:	2201      	movs	r2, #1
 8006828:	69fb      	ldr	r3, [r7, #28]
 800682a:	fa02 f303 	lsl.w	r3, r2, r3
 800682e:	43db      	mvns	r3, r3
 8006830:	69ba      	ldr	r2, [r7, #24]
 8006832:	4013      	ands	r3, r2
 8006834:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	685b      	ldr	r3, [r3, #4]
 800683a:	091b      	lsrs	r3, r3, #4
 800683c:	f003 0201 	and.w	r2, r3, #1
 8006840:	69fb      	ldr	r3, [r7, #28]
 8006842:	fa02 f303 	lsl.w	r3, r2, r3
 8006846:	69ba      	ldr	r2, [r7, #24]
 8006848:	4313      	orrs	r3, r2
 800684a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	69ba      	ldr	r2, [r7, #24]
 8006850:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	685b      	ldr	r3, [r3, #4]
 8006856:	f003 0303 	and.w	r3, r3, #3
 800685a:	2b03      	cmp	r3, #3
 800685c:	d017      	beq.n	800688e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	68db      	ldr	r3, [r3, #12]
 8006862:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006864:	69fb      	ldr	r3, [r7, #28]
 8006866:	005b      	lsls	r3, r3, #1
 8006868:	2203      	movs	r2, #3
 800686a:	fa02 f303 	lsl.w	r3, r2, r3
 800686e:	43db      	mvns	r3, r3
 8006870:	69ba      	ldr	r2, [r7, #24]
 8006872:	4013      	ands	r3, r2
 8006874:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	689a      	ldr	r2, [r3, #8]
 800687a:	69fb      	ldr	r3, [r7, #28]
 800687c:	005b      	lsls	r3, r3, #1
 800687e:	fa02 f303 	lsl.w	r3, r2, r3
 8006882:	69ba      	ldr	r2, [r7, #24]
 8006884:	4313      	orrs	r3, r2
 8006886:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	69ba      	ldr	r2, [r7, #24]
 800688c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	685b      	ldr	r3, [r3, #4]
 8006892:	f003 0303 	and.w	r3, r3, #3
 8006896:	2b02      	cmp	r3, #2
 8006898:	d123      	bne.n	80068e2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800689a:	69fb      	ldr	r3, [r7, #28]
 800689c:	08da      	lsrs	r2, r3, #3
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	3208      	adds	r2, #8
 80068a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80068a8:	69fb      	ldr	r3, [r7, #28]
 80068aa:	f003 0307 	and.w	r3, r3, #7
 80068ae:	009b      	lsls	r3, r3, #2
 80068b0:	220f      	movs	r2, #15
 80068b2:	fa02 f303 	lsl.w	r3, r2, r3
 80068b6:	43db      	mvns	r3, r3
 80068b8:	69ba      	ldr	r2, [r7, #24]
 80068ba:	4013      	ands	r3, r2
 80068bc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	691a      	ldr	r2, [r3, #16]
 80068c2:	69fb      	ldr	r3, [r7, #28]
 80068c4:	f003 0307 	and.w	r3, r3, #7
 80068c8:	009b      	lsls	r3, r3, #2
 80068ca:	fa02 f303 	lsl.w	r3, r2, r3
 80068ce:	69ba      	ldr	r2, [r7, #24]
 80068d0:	4313      	orrs	r3, r2
 80068d2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80068d4:	69fb      	ldr	r3, [r7, #28]
 80068d6:	08da      	lsrs	r2, r3, #3
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	3208      	adds	r2, #8
 80068dc:	69b9      	ldr	r1, [r7, #24]
 80068de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80068e8:	69fb      	ldr	r3, [r7, #28]
 80068ea:	005b      	lsls	r3, r3, #1
 80068ec:	2203      	movs	r2, #3
 80068ee:	fa02 f303 	lsl.w	r3, r2, r3
 80068f2:	43db      	mvns	r3, r3
 80068f4:	69ba      	ldr	r2, [r7, #24]
 80068f6:	4013      	ands	r3, r2
 80068f8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	685b      	ldr	r3, [r3, #4]
 80068fe:	f003 0203 	and.w	r2, r3, #3
 8006902:	69fb      	ldr	r3, [r7, #28]
 8006904:	005b      	lsls	r3, r3, #1
 8006906:	fa02 f303 	lsl.w	r3, r2, r3
 800690a:	69ba      	ldr	r2, [r7, #24]
 800690c:	4313      	orrs	r3, r2
 800690e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	69ba      	ldr	r2, [r7, #24]
 8006914:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	685b      	ldr	r3, [r3, #4]
 800691a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800691e:	2b00      	cmp	r3, #0
 8006920:	f000 80e0 	beq.w	8006ae4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006924:	4b2f      	ldr	r3, [pc, #188]	@ (80069e4 <HAL_GPIO_Init+0x238>)
 8006926:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800692a:	4a2e      	ldr	r2, [pc, #184]	@ (80069e4 <HAL_GPIO_Init+0x238>)
 800692c:	f043 0302 	orr.w	r3, r3, #2
 8006930:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8006934:	4b2b      	ldr	r3, [pc, #172]	@ (80069e4 <HAL_GPIO_Init+0x238>)
 8006936:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800693a:	f003 0302 	and.w	r3, r3, #2
 800693e:	60fb      	str	r3, [r7, #12]
 8006940:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006942:	4a29      	ldr	r2, [pc, #164]	@ (80069e8 <HAL_GPIO_Init+0x23c>)
 8006944:	69fb      	ldr	r3, [r7, #28]
 8006946:	089b      	lsrs	r3, r3, #2
 8006948:	3302      	adds	r3, #2
 800694a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800694e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006950:	69fb      	ldr	r3, [r7, #28]
 8006952:	f003 0303 	and.w	r3, r3, #3
 8006956:	009b      	lsls	r3, r3, #2
 8006958:	220f      	movs	r2, #15
 800695a:	fa02 f303 	lsl.w	r3, r2, r3
 800695e:	43db      	mvns	r3, r3
 8006960:	69ba      	ldr	r2, [r7, #24]
 8006962:	4013      	ands	r3, r2
 8006964:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	4a20      	ldr	r2, [pc, #128]	@ (80069ec <HAL_GPIO_Init+0x240>)
 800696a:	4293      	cmp	r3, r2
 800696c:	d052      	beq.n	8006a14 <HAL_GPIO_Init+0x268>
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	4a1f      	ldr	r2, [pc, #124]	@ (80069f0 <HAL_GPIO_Init+0x244>)
 8006972:	4293      	cmp	r3, r2
 8006974:	d031      	beq.n	80069da <HAL_GPIO_Init+0x22e>
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	4a1e      	ldr	r2, [pc, #120]	@ (80069f4 <HAL_GPIO_Init+0x248>)
 800697a:	4293      	cmp	r3, r2
 800697c:	d02b      	beq.n	80069d6 <HAL_GPIO_Init+0x22a>
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	4a1d      	ldr	r2, [pc, #116]	@ (80069f8 <HAL_GPIO_Init+0x24c>)
 8006982:	4293      	cmp	r3, r2
 8006984:	d025      	beq.n	80069d2 <HAL_GPIO_Init+0x226>
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	4a1c      	ldr	r2, [pc, #112]	@ (80069fc <HAL_GPIO_Init+0x250>)
 800698a:	4293      	cmp	r3, r2
 800698c:	d01f      	beq.n	80069ce <HAL_GPIO_Init+0x222>
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	4a1b      	ldr	r2, [pc, #108]	@ (8006a00 <HAL_GPIO_Init+0x254>)
 8006992:	4293      	cmp	r3, r2
 8006994:	d019      	beq.n	80069ca <HAL_GPIO_Init+0x21e>
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	4a1a      	ldr	r2, [pc, #104]	@ (8006a04 <HAL_GPIO_Init+0x258>)
 800699a:	4293      	cmp	r3, r2
 800699c:	d013      	beq.n	80069c6 <HAL_GPIO_Init+0x21a>
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	4a19      	ldr	r2, [pc, #100]	@ (8006a08 <HAL_GPIO_Init+0x25c>)
 80069a2:	4293      	cmp	r3, r2
 80069a4:	d00d      	beq.n	80069c2 <HAL_GPIO_Init+0x216>
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	4a18      	ldr	r2, [pc, #96]	@ (8006a0c <HAL_GPIO_Init+0x260>)
 80069aa:	4293      	cmp	r3, r2
 80069ac:	d007      	beq.n	80069be <HAL_GPIO_Init+0x212>
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	4a17      	ldr	r2, [pc, #92]	@ (8006a10 <HAL_GPIO_Init+0x264>)
 80069b2:	4293      	cmp	r3, r2
 80069b4:	d101      	bne.n	80069ba <HAL_GPIO_Init+0x20e>
 80069b6:	2309      	movs	r3, #9
 80069b8:	e02d      	b.n	8006a16 <HAL_GPIO_Init+0x26a>
 80069ba:	230a      	movs	r3, #10
 80069bc:	e02b      	b.n	8006a16 <HAL_GPIO_Init+0x26a>
 80069be:	2308      	movs	r3, #8
 80069c0:	e029      	b.n	8006a16 <HAL_GPIO_Init+0x26a>
 80069c2:	2307      	movs	r3, #7
 80069c4:	e027      	b.n	8006a16 <HAL_GPIO_Init+0x26a>
 80069c6:	2306      	movs	r3, #6
 80069c8:	e025      	b.n	8006a16 <HAL_GPIO_Init+0x26a>
 80069ca:	2305      	movs	r3, #5
 80069cc:	e023      	b.n	8006a16 <HAL_GPIO_Init+0x26a>
 80069ce:	2304      	movs	r3, #4
 80069d0:	e021      	b.n	8006a16 <HAL_GPIO_Init+0x26a>
 80069d2:	2303      	movs	r3, #3
 80069d4:	e01f      	b.n	8006a16 <HAL_GPIO_Init+0x26a>
 80069d6:	2302      	movs	r3, #2
 80069d8:	e01d      	b.n	8006a16 <HAL_GPIO_Init+0x26a>
 80069da:	2301      	movs	r3, #1
 80069dc:	e01b      	b.n	8006a16 <HAL_GPIO_Init+0x26a>
 80069de:	bf00      	nop
 80069e0:	58000080 	.word	0x58000080
 80069e4:	58024400 	.word	0x58024400
 80069e8:	58000400 	.word	0x58000400
 80069ec:	58020000 	.word	0x58020000
 80069f0:	58020400 	.word	0x58020400
 80069f4:	58020800 	.word	0x58020800
 80069f8:	58020c00 	.word	0x58020c00
 80069fc:	58021000 	.word	0x58021000
 8006a00:	58021400 	.word	0x58021400
 8006a04:	58021800 	.word	0x58021800
 8006a08:	58021c00 	.word	0x58021c00
 8006a0c:	58022000 	.word	0x58022000
 8006a10:	58022400 	.word	0x58022400
 8006a14:	2300      	movs	r3, #0
 8006a16:	69fa      	ldr	r2, [r7, #28]
 8006a18:	f002 0203 	and.w	r2, r2, #3
 8006a1c:	0092      	lsls	r2, r2, #2
 8006a1e:	4093      	lsls	r3, r2
 8006a20:	69ba      	ldr	r2, [r7, #24]
 8006a22:	4313      	orrs	r3, r2
 8006a24:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006a26:	4938      	ldr	r1, [pc, #224]	@ (8006b08 <HAL_GPIO_Init+0x35c>)
 8006a28:	69fb      	ldr	r3, [r7, #28]
 8006a2a:	089b      	lsrs	r3, r3, #2
 8006a2c:	3302      	adds	r3, #2
 8006a2e:	69ba      	ldr	r2, [r7, #24]
 8006a30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006a34:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006a3c:	693b      	ldr	r3, [r7, #16]
 8006a3e:	43db      	mvns	r3, r3
 8006a40:	69ba      	ldr	r2, [r7, #24]
 8006a42:	4013      	ands	r3, r2
 8006a44:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006a46:	683b      	ldr	r3, [r7, #0]
 8006a48:	685b      	ldr	r3, [r3, #4]
 8006a4a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d003      	beq.n	8006a5a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8006a52:	69ba      	ldr	r2, [r7, #24]
 8006a54:	693b      	ldr	r3, [r7, #16]
 8006a56:	4313      	orrs	r3, r2
 8006a58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8006a5a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006a5e:	69bb      	ldr	r3, [r7, #24]
 8006a60:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8006a62:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006a66:	685b      	ldr	r3, [r3, #4]
 8006a68:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006a6a:	693b      	ldr	r3, [r7, #16]
 8006a6c:	43db      	mvns	r3, r3
 8006a6e:	69ba      	ldr	r2, [r7, #24]
 8006a70:	4013      	ands	r3, r2
 8006a72:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	685b      	ldr	r3, [r3, #4]
 8006a78:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d003      	beq.n	8006a88 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8006a80:	69ba      	ldr	r2, [r7, #24]
 8006a82:	693b      	ldr	r3, [r7, #16]
 8006a84:	4313      	orrs	r3, r2
 8006a86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006a88:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006a8c:	69bb      	ldr	r3, [r7, #24]
 8006a8e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8006a90:	697b      	ldr	r3, [r7, #20]
 8006a92:	685b      	ldr	r3, [r3, #4]
 8006a94:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006a96:	693b      	ldr	r3, [r7, #16]
 8006a98:	43db      	mvns	r3, r3
 8006a9a:	69ba      	ldr	r2, [r7, #24]
 8006a9c:	4013      	ands	r3, r2
 8006a9e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	685b      	ldr	r3, [r3, #4]
 8006aa4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d003      	beq.n	8006ab4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8006aac:	69ba      	ldr	r2, [r7, #24]
 8006aae:	693b      	ldr	r3, [r7, #16]
 8006ab0:	4313      	orrs	r3, r2
 8006ab2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006ab4:	697b      	ldr	r3, [r7, #20]
 8006ab6:	69ba      	ldr	r2, [r7, #24]
 8006ab8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8006aba:	697b      	ldr	r3, [r7, #20]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006ac0:	693b      	ldr	r3, [r7, #16]
 8006ac2:	43db      	mvns	r3, r3
 8006ac4:	69ba      	ldr	r2, [r7, #24]
 8006ac6:	4013      	ands	r3, r2
 8006ac8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	685b      	ldr	r3, [r3, #4]
 8006ace:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d003      	beq.n	8006ade <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8006ad6:	69ba      	ldr	r2, [r7, #24]
 8006ad8:	693b      	ldr	r3, [r7, #16]
 8006ada:	4313      	orrs	r3, r2
 8006adc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8006ade:	697b      	ldr	r3, [r7, #20]
 8006ae0:	69ba      	ldr	r2, [r7, #24]
 8006ae2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8006ae4:	69fb      	ldr	r3, [r7, #28]
 8006ae6:	3301      	adds	r3, #1
 8006ae8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006aea:	683b      	ldr	r3, [r7, #0]
 8006aec:	681a      	ldr	r2, [r3, #0]
 8006aee:	69fb      	ldr	r3, [r7, #28]
 8006af0:	fa22 f303 	lsr.w	r3, r2, r3
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	f47f ae63 	bne.w	80067c0 <HAL_GPIO_Init+0x14>
  }
}
 8006afa:	bf00      	nop
 8006afc:	bf00      	nop
 8006afe:	3724      	adds	r7, #36	@ 0x24
 8006b00:	46bd      	mov	sp, r7
 8006b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b06:	4770      	bx	lr
 8006b08:	58000400 	.word	0x58000400

08006b0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006b0c:	b480      	push	{r7}
 8006b0e:	b083      	sub	sp, #12
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
 8006b14:	460b      	mov	r3, r1
 8006b16:	807b      	strh	r3, [r7, #2]
 8006b18:	4613      	mov	r3, r2
 8006b1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006b1c:	787b      	ldrb	r3, [r7, #1]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d003      	beq.n	8006b2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006b22:	887a      	ldrh	r2, [r7, #2]
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8006b28:	e003      	b.n	8006b32 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006b2a:	887b      	ldrh	r3, [r7, #2]
 8006b2c:	041a      	lsls	r2, r3, #16
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	619a      	str	r2, [r3, #24]
}
 8006b32:	bf00      	nop
 8006b34:	370c      	adds	r7, #12
 8006b36:	46bd      	mov	sp, r7
 8006b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3c:	4770      	bx	lr

08006b3e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006b3e:	b480      	push	{r7}
 8006b40:	b085      	sub	sp, #20
 8006b42:	af00      	add	r7, sp, #0
 8006b44:	6078      	str	r0, [r7, #4]
 8006b46:	460b      	mov	r3, r1
 8006b48:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	695b      	ldr	r3, [r3, #20]
 8006b4e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006b50:	887a      	ldrh	r2, [r7, #2]
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	4013      	ands	r3, r2
 8006b56:	041a      	lsls	r2, r3, #16
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	43d9      	mvns	r1, r3
 8006b5c:	887b      	ldrh	r3, [r7, #2]
 8006b5e:	400b      	ands	r3, r1
 8006b60:	431a      	orrs	r2, r3
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	619a      	str	r2, [r3, #24]
}
 8006b66:	bf00      	nop
 8006b68:	3714      	adds	r7, #20
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b70:	4770      	bx	lr
	...

08006b74 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8006b74:	b480      	push	{r7}
 8006b76:	b083      	sub	sp, #12
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8006b7c:	4a08      	ldr	r2, [pc, #32]	@ (8006ba0 <HAL_HSEM_FastTake+0x2c>)
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	3320      	adds	r3, #32
 8006b82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b86:	4a07      	ldr	r2, [pc, #28]	@ (8006ba4 <HAL_HSEM_FastTake+0x30>)
 8006b88:	4293      	cmp	r3, r2
 8006b8a:	d101      	bne.n	8006b90 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8006b8c:	2300      	movs	r3, #0
 8006b8e:	e000      	b.n	8006b92 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8006b90:	2301      	movs	r3, #1
}
 8006b92:	4618      	mov	r0, r3
 8006b94:	370c      	adds	r7, #12
 8006b96:	46bd      	mov	sp, r7
 8006b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9c:	4770      	bx	lr
 8006b9e:	bf00      	nop
 8006ba0:	58026400 	.word	0x58026400
 8006ba4:	80000300 	.word	0x80000300

08006ba8 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8006ba8:	b480      	push	{r7}
 8006baa:	b083      	sub	sp, #12
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
 8006bb0:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8006bb2:	4906      	ldr	r1, [pc, #24]	@ (8006bcc <HAL_HSEM_Release+0x24>)
 8006bb4:	683b      	ldr	r3, [r7, #0]
 8006bb6:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8006bc0:	bf00      	nop
 8006bc2:	370c      	adds	r7, #12
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bca:	4770      	bx	lr
 8006bcc:	58026400 	.word	0x58026400

08006bd0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	b086      	sub	sp, #24
 8006bd4:	af02      	add	r7, sp, #8
 8006bd6:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d101      	bne.n	8006be2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006bde:	2301      	movs	r3, #1
 8006be0:	e0fe      	b.n	8006de0 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8006be8:	b2db      	uxtb	r3, r3
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d106      	bne.n	8006bfc <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006bf6:	6878      	ldr	r0, [r7, #4]
 8006bf8:	f00b f950 	bl	8011e9c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2203      	movs	r2, #3
 8006c00:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	4618      	mov	r0, r3
 8006c0a:	f007 fd14 	bl	800e636 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	6818      	ldr	r0, [r3, #0]
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	7c1a      	ldrb	r2, [r3, #16]
 8006c16:	f88d 2000 	strb.w	r2, [sp]
 8006c1a:	3304      	adds	r3, #4
 8006c1c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006c1e:	f007 fbe5 	bl	800e3ec <USB_CoreInit>
 8006c22:	4603      	mov	r3, r0
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d005      	beq.n	8006c34 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2202      	movs	r2, #2
 8006c2c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8006c30:	2301      	movs	r3, #1
 8006c32:	e0d5      	b.n	8006de0 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	2100      	movs	r1, #0
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	f007 fd0c 	bl	800e658 <USB_SetCurrentMode>
 8006c40:	4603      	mov	r3, r0
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d005      	beq.n	8006c52 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	2202      	movs	r2, #2
 8006c4a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8006c4e:	2301      	movs	r3, #1
 8006c50:	e0c6      	b.n	8006de0 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006c52:	2300      	movs	r3, #0
 8006c54:	73fb      	strb	r3, [r7, #15]
 8006c56:	e04a      	b.n	8006cee <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006c58:	7bfa      	ldrb	r2, [r7, #15]
 8006c5a:	6879      	ldr	r1, [r7, #4]
 8006c5c:	4613      	mov	r3, r2
 8006c5e:	00db      	lsls	r3, r3, #3
 8006c60:	4413      	add	r3, r2
 8006c62:	009b      	lsls	r3, r3, #2
 8006c64:	440b      	add	r3, r1
 8006c66:	3315      	adds	r3, #21
 8006c68:	2201      	movs	r2, #1
 8006c6a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006c6c:	7bfa      	ldrb	r2, [r7, #15]
 8006c6e:	6879      	ldr	r1, [r7, #4]
 8006c70:	4613      	mov	r3, r2
 8006c72:	00db      	lsls	r3, r3, #3
 8006c74:	4413      	add	r3, r2
 8006c76:	009b      	lsls	r3, r3, #2
 8006c78:	440b      	add	r3, r1
 8006c7a:	3314      	adds	r3, #20
 8006c7c:	7bfa      	ldrb	r2, [r7, #15]
 8006c7e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8006c80:	7bfa      	ldrb	r2, [r7, #15]
 8006c82:	7bfb      	ldrb	r3, [r7, #15]
 8006c84:	b298      	uxth	r0, r3
 8006c86:	6879      	ldr	r1, [r7, #4]
 8006c88:	4613      	mov	r3, r2
 8006c8a:	00db      	lsls	r3, r3, #3
 8006c8c:	4413      	add	r3, r2
 8006c8e:	009b      	lsls	r3, r3, #2
 8006c90:	440b      	add	r3, r1
 8006c92:	332e      	adds	r3, #46	@ 0x2e
 8006c94:	4602      	mov	r2, r0
 8006c96:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006c98:	7bfa      	ldrb	r2, [r7, #15]
 8006c9a:	6879      	ldr	r1, [r7, #4]
 8006c9c:	4613      	mov	r3, r2
 8006c9e:	00db      	lsls	r3, r3, #3
 8006ca0:	4413      	add	r3, r2
 8006ca2:	009b      	lsls	r3, r3, #2
 8006ca4:	440b      	add	r3, r1
 8006ca6:	3318      	adds	r3, #24
 8006ca8:	2200      	movs	r2, #0
 8006caa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006cac:	7bfa      	ldrb	r2, [r7, #15]
 8006cae:	6879      	ldr	r1, [r7, #4]
 8006cb0:	4613      	mov	r3, r2
 8006cb2:	00db      	lsls	r3, r3, #3
 8006cb4:	4413      	add	r3, r2
 8006cb6:	009b      	lsls	r3, r3, #2
 8006cb8:	440b      	add	r3, r1
 8006cba:	331c      	adds	r3, #28
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006cc0:	7bfa      	ldrb	r2, [r7, #15]
 8006cc2:	6879      	ldr	r1, [r7, #4]
 8006cc4:	4613      	mov	r3, r2
 8006cc6:	00db      	lsls	r3, r3, #3
 8006cc8:	4413      	add	r3, r2
 8006cca:	009b      	lsls	r3, r3, #2
 8006ccc:	440b      	add	r3, r1
 8006cce:	3320      	adds	r3, #32
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006cd4:	7bfa      	ldrb	r2, [r7, #15]
 8006cd6:	6879      	ldr	r1, [r7, #4]
 8006cd8:	4613      	mov	r3, r2
 8006cda:	00db      	lsls	r3, r3, #3
 8006cdc:	4413      	add	r3, r2
 8006cde:	009b      	lsls	r3, r3, #2
 8006ce0:	440b      	add	r3, r1
 8006ce2:	3324      	adds	r3, #36	@ 0x24
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006ce8:	7bfb      	ldrb	r3, [r7, #15]
 8006cea:	3301      	adds	r3, #1
 8006cec:	73fb      	strb	r3, [r7, #15]
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	791b      	ldrb	r3, [r3, #4]
 8006cf2:	7bfa      	ldrb	r2, [r7, #15]
 8006cf4:	429a      	cmp	r2, r3
 8006cf6:	d3af      	bcc.n	8006c58 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006cf8:	2300      	movs	r3, #0
 8006cfa:	73fb      	strb	r3, [r7, #15]
 8006cfc:	e044      	b.n	8006d88 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006cfe:	7bfa      	ldrb	r2, [r7, #15]
 8006d00:	6879      	ldr	r1, [r7, #4]
 8006d02:	4613      	mov	r3, r2
 8006d04:	00db      	lsls	r3, r3, #3
 8006d06:	4413      	add	r3, r2
 8006d08:	009b      	lsls	r3, r3, #2
 8006d0a:	440b      	add	r3, r1
 8006d0c:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8006d10:	2200      	movs	r2, #0
 8006d12:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006d14:	7bfa      	ldrb	r2, [r7, #15]
 8006d16:	6879      	ldr	r1, [r7, #4]
 8006d18:	4613      	mov	r3, r2
 8006d1a:	00db      	lsls	r3, r3, #3
 8006d1c:	4413      	add	r3, r2
 8006d1e:	009b      	lsls	r3, r3, #2
 8006d20:	440b      	add	r3, r1
 8006d22:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8006d26:	7bfa      	ldrb	r2, [r7, #15]
 8006d28:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006d2a:	7bfa      	ldrb	r2, [r7, #15]
 8006d2c:	6879      	ldr	r1, [r7, #4]
 8006d2e:	4613      	mov	r3, r2
 8006d30:	00db      	lsls	r3, r3, #3
 8006d32:	4413      	add	r3, r2
 8006d34:	009b      	lsls	r3, r3, #2
 8006d36:	440b      	add	r3, r1
 8006d38:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006d40:	7bfa      	ldrb	r2, [r7, #15]
 8006d42:	6879      	ldr	r1, [r7, #4]
 8006d44:	4613      	mov	r3, r2
 8006d46:	00db      	lsls	r3, r3, #3
 8006d48:	4413      	add	r3, r2
 8006d4a:	009b      	lsls	r3, r3, #2
 8006d4c:	440b      	add	r3, r1
 8006d4e:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8006d52:	2200      	movs	r2, #0
 8006d54:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006d56:	7bfa      	ldrb	r2, [r7, #15]
 8006d58:	6879      	ldr	r1, [r7, #4]
 8006d5a:	4613      	mov	r3, r2
 8006d5c:	00db      	lsls	r3, r3, #3
 8006d5e:	4413      	add	r3, r2
 8006d60:	009b      	lsls	r3, r3, #2
 8006d62:	440b      	add	r3, r1
 8006d64:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8006d68:	2200      	movs	r2, #0
 8006d6a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006d6c:	7bfa      	ldrb	r2, [r7, #15]
 8006d6e:	6879      	ldr	r1, [r7, #4]
 8006d70:	4613      	mov	r3, r2
 8006d72:	00db      	lsls	r3, r3, #3
 8006d74:	4413      	add	r3, r2
 8006d76:	009b      	lsls	r3, r3, #2
 8006d78:	440b      	add	r3, r1
 8006d7a:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8006d7e:	2200      	movs	r2, #0
 8006d80:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006d82:	7bfb      	ldrb	r3, [r7, #15]
 8006d84:	3301      	adds	r3, #1
 8006d86:	73fb      	strb	r3, [r7, #15]
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	791b      	ldrb	r3, [r3, #4]
 8006d8c:	7bfa      	ldrb	r2, [r7, #15]
 8006d8e:	429a      	cmp	r2, r3
 8006d90:	d3b5      	bcc.n	8006cfe <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	6818      	ldr	r0, [r3, #0]
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	7c1a      	ldrb	r2, [r3, #16]
 8006d9a:	f88d 2000 	strb.w	r2, [sp]
 8006d9e:	3304      	adds	r3, #4
 8006da0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006da2:	f007 fca5 	bl	800e6f0 <USB_DevInit>
 8006da6:	4603      	mov	r3, r0
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d005      	beq.n	8006db8 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2202      	movs	r2, #2
 8006db0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8006db4:	2301      	movs	r3, #1
 8006db6:	e013      	b.n	8006de0 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2200      	movs	r2, #0
 8006dbc:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	2201      	movs	r2, #1
 8006dc2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	7b1b      	ldrb	r3, [r3, #12]
 8006dca:	2b01      	cmp	r3, #1
 8006dcc:	d102      	bne.n	8006dd4 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8006dce:	6878      	ldr	r0, [r7, #4]
 8006dd0:	f001 f96c 	bl	80080ac <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	4618      	mov	r0, r3
 8006dda:	f008 fce4 	bl	800f7a6 <USB_DevDisconnect>

  return HAL_OK;
 8006dde:	2300      	movs	r3, #0
}
 8006de0:	4618      	mov	r0, r3
 8006de2:	3710      	adds	r7, #16
 8006de4:	46bd      	mov	sp, r7
 8006de6:	bd80      	pop	{r7, pc}

08006de8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8006de8:	b580      	push	{r7, lr}
 8006dea:	b084      	sub	sp, #16
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006dfc:	2b01      	cmp	r3, #1
 8006dfe:	d101      	bne.n	8006e04 <HAL_PCD_Start+0x1c>
 8006e00:	2302      	movs	r3, #2
 8006e02:	e022      	b.n	8006e4a <HAL_PCD_Start+0x62>
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2201      	movs	r2, #1
 8006e08:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	68db      	ldr	r3, [r3, #12]
 8006e10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d009      	beq.n	8006e2c <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8006e1c:	2b01      	cmp	r3, #1
 8006e1e:	d105      	bne.n	8006e2c <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e24:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	4618      	mov	r0, r3
 8006e32:	f007 fbef 	bl	800e614 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	f008 fc92 	bl	800f764 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	2200      	movs	r2, #0
 8006e44:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8006e48:	2300      	movs	r3, #0
}
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	3710      	adds	r7, #16
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	bd80      	pop	{r7, pc}

08006e52 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8006e52:	b590      	push	{r4, r7, lr}
 8006e54:	b08d      	sub	sp, #52	@ 0x34
 8006e56:	af00      	add	r7, sp, #0
 8006e58:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e60:	6a3b      	ldr	r3, [r7, #32]
 8006e62:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	4618      	mov	r0, r3
 8006e6a:	f008 fd50 	bl	800f90e <USB_GetMode>
 8006e6e:	4603      	mov	r3, r0
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	f040 84b9 	bne.w	80077e8 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	f008 fcb4 	bl	800f7e8 <USB_ReadInterrupts>
 8006e80:	4603      	mov	r3, r0
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	f000 84af 	beq.w	80077e6 <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8006e88:	69fb      	ldr	r3, [r7, #28]
 8006e8a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e8e:	689b      	ldr	r3, [r3, #8]
 8006e90:	0a1b      	lsrs	r3, r3, #8
 8006e92:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	f008 fca1 	bl	800f7e8 <USB_ReadInterrupts>
 8006ea6:	4603      	mov	r3, r0
 8006ea8:	f003 0302 	and.w	r3, r3, #2
 8006eac:	2b02      	cmp	r3, #2
 8006eae:	d107      	bne.n	8006ec0 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	695a      	ldr	r2, [r3, #20]
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	f002 0202 	and.w	r2, r2, #2
 8006ebe:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	f008 fc8f 	bl	800f7e8 <USB_ReadInterrupts>
 8006eca:	4603      	mov	r3, r0
 8006ecc:	f003 0310 	and.w	r3, r3, #16
 8006ed0:	2b10      	cmp	r3, #16
 8006ed2:	d161      	bne.n	8006f98 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	699a      	ldr	r2, [r3, #24]
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	f022 0210 	bic.w	r2, r2, #16
 8006ee2:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8006ee4:	6a3b      	ldr	r3, [r7, #32]
 8006ee6:	6a1b      	ldr	r3, [r3, #32]
 8006ee8:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8006eea:	69bb      	ldr	r3, [r7, #24]
 8006eec:	f003 020f 	and.w	r2, r3, #15
 8006ef0:	4613      	mov	r3, r2
 8006ef2:	00db      	lsls	r3, r3, #3
 8006ef4:	4413      	add	r3, r2
 8006ef6:	009b      	lsls	r3, r3, #2
 8006ef8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006efc:	687a      	ldr	r2, [r7, #4]
 8006efe:	4413      	add	r3, r2
 8006f00:	3304      	adds	r3, #4
 8006f02:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8006f04:	69bb      	ldr	r3, [r7, #24]
 8006f06:	0c5b      	lsrs	r3, r3, #17
 8006f08:	f003 030f 	and.w	r3, r3, #15
 8006f0c:	2b02      	cmp	r3, #2
 8006f0e:	d124      	bne.n	8006f5a <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8006f10:	69ba      	ldr	r2, [r7, #24]
 8006f12:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8006f16:	4013      	ands	r3, r2
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d035      	beq.n	8006f88 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006f1c:	697b      	ldr	r3, [r7, #20]
 8006f1e:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8006f20:	69bb      	ldr	r3, [r7, #24]
 8006f22:	091b      	lsrs	r3, r3, #4
 8006f24:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006f26:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006f2a:	b29b      	uxth	r3, r3
 8006f2c:	461a      	mov	r2, r3
 8006f2e:	6a38      	ldr	r0, [r7, #32]
 8006f30:	f008 fac6 	bl	800f4c0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006f34:	697b      	ldr	r3, [r7, #20]
 8006f36:	68da      	ldr	r2, [r3, #12]
 8006f38:	69bb      	ldr	r3, [r7, #24]
 8006f3a:	091b      	lsrs	r3, r3, #4
 8006f3c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006f40:	441a      	add	r2, r3
 8006f42:	697b      	ldr	r3, [r7, #20]
 8006f44:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006f46:	697b      	ldr	r3, [r7, #20]
 8006f48:	695a      	ldr	r2, [r3, #20]
 8006f4a:	69bb      	ldr	r3, [r7, #24]
 8006f4c:	091b      	lsrs	r3, r3, #4
 8006f4e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006f52:	441a      	add	r2, r3
 8006f54:	697b      	ldr	r3, [r7, #20]
 8006f56:	615a      	str	r2, [r3, #20]
 8006f58:	e016      	b.n	8006f88 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8006f5a:	69bb      	ldr	r3, [r7, #24]
 8006f5c:	0c5b      	lsrs	r3, r3, #17
 8006f5e:	f003 030f 	and.w	r3, r3, #15
 8006f62:	2b06      	cmp	r3, #6
 8006f64:	d110      	bne.n	8006f88 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006f6c:	2208      	movs	r2, #8
 8006f6e:	4619      	mov	r1, r3
 8006f70:	6a38      	ldr	r0, [r7, #32]
 8006f72:	f008 faa5 	bl	800f4c0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006f76:	697b      	ldr	r3, [r7, #20]
 8006f78:	695a      	ldr	r2, [r3, #20]
 8006f7a:	69bb      	ldr	r3, [r7, #24]
 8006f7c:	091b      	lsrs	r3, r3, #4
 8006f7e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006f82:	441a      	add	r2, r3
 8006f84:	697b      	ldr	r3, [r7, #20]
 8006f86:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	699a      	ldr	r2, [r3, #24]
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	f042 0210 	orr.w	r2, r2, #16
 8006f96:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	f008 fc23 	bl	800f7e8 <USB_ReadInterrupts>
 8006fa2:	4603      	mov	r3, r0
 8006fa4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006fa8:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006fac:	f040 80a7 	bne.w	80070fe <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	4618      	mov	r0, r3
 8006fba:	f008 fc28 	bl	800f80e <USB_ReadDevAllOutEpInterrupt>
 8006fbe:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8006fc0:	e099      	b.n	80070f6 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8006fc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fc4:	f003 0301 	and.w	r3, r3, #1
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	f000 808e 	beq.w	80070ea <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006fd4:	b2d2      	uxtb	r2, r2
 8006fd6:	4611      	mov	r1, r2
 8006fd8:	4618      	mov	r0, r3
 8006fda:	f008 fc4c 	bl	800f876 <USB_ReadDevOutEPInterrupt>
 8006fde:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8006fe0:	693b      	ldr	r3, [r7, #16]
 8006fe2:	f003 0301 	and.w	r3, r3, #1
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d00c      	beq.n	8007004 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8006fea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fec:	015a      	lsls	r2, r3, #5
 8006fee:	69fb      	ldr	r3, [r7, #28]
 8006ff0:	4413      	add	r3, r2
 8006ff2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ff6:	461a      	mov	r2, r3
 8006ff8:	2301      	movs	r3, #1
 8006ffa:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8006ffc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006ffe:	6878      	ldr	r0, [r7, #4]
 8007000:	f000 fece 	bl	8007da0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8007004:	693b      	ldr	r3, [r7, #16]
 8007006:	f003 0308 	and.w	r3, r3, #8
 800700a:	2b00      	cmp	r3, #0
 800700c:	d00c      	beq.n	8007028 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800700e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007010:	015a      	lsls	r2, r3, #5
 8007012:	69fb      	ldr	r3, [r7, #28]
 8007014:	4413      	add	r3, r2
 8007016:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800701a:	461a      	mov	r2, r3
 800701c:	2308      	movs	r3, #8
 800701e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8007020:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007022:	6878      	ldr	r0, [r7, #4]
 8007024:	f000 ffa4 	bl	8007f70 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8007028:	693b      	ldr	r3, [r7, #16]
 800702a:	f003 0310 	and.w	r3, r3, #16
 800702e:	2b00      	cmp	r3, #0
 8007030:	d008      	beq.n	8007044 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8007032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007034:	015a      	lsls	r2, r3, #5
 8007036:	69fb      	ldr	r3, [r7, #28]
 8007038:	4413      	add	r3, r2
 800703a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800703e:	461a      	mov	r2, r3
 8007040:	2310      	movs	r3, #16
 8007042:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8007044:	693b      	ldr	r3, [r7, #16]
 8007046:	f003 0302 	and.w	r3, r3, #2
 800704a:	2b00      	cmp	r3, #0
 800704c:	d030      	beq.n	80070b0 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800704e:	6a3b      	ldr	r3, [r7, #32]
 8007050:	695b      	ldr	r3, [r3, #20]
 8007052:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007056:	2b80      	cmp	r3, #128	@ 0x80
 8007058:	d109      	bne.n	800706e <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800705a:	69fb      	ldr	r3, [r7, #28]
 800705c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007060:	685b      	ldr	r3, [r3, #4]
 8007062:	69fa      	ldr	r2, [r7, #28]
 8007064:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007068:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800706c:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800706e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007070:	4613      	mov	r3, r2
 8007072:	00db      	lsls	r3, r3, #3
 8007074:	4413      	add	r3, r2
 8007076:	009b      	lsls	r3, r3, #2
 8007078:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800707c:	687a      	ldr	r2, [r7, #4]
 800707e:	4413      	add	r3, r2
 8007080:	3304      	adds	r3, #4
 8007082:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8007084:	697b      	ldr	r3, [r7, #20]
 8007086:	78db      	ldrb	r3, [r3, #3]
 8007088:	2b01      	cmp	r3, #1
 800708a:	d108      	bne.n	800709e <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800708c:	697b      	ldr	r3, [r7, #20]
 800708e:	2200      	movs	r2, #0
 8007090:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8007092:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007094:	b2db      	uxtb	r3, r3
 8007096:	4619      	mov	r1, r3
 8007098:	6878      	ldr	r0, [r7, #4]
 800709a:	f00b f835 	bl	8012108 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800709e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070a0:	015a      	lsls	r2, r3, #5
 80070a2:	69fb      	ldr	r3, [r7, #28]
 80070a4:	4413      	add	r3, r2
 80070a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80070aa:	461a      	mov	r2, r3
 80070ac:	2302      	movs	r3, #2
 80070ae:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80070b0:	693b      	ldr	r3, [r7, #16]
 80070b2:	f003 0320 	and.w	r3, r3, #32
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d008      	beq.n	80070cc <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80070ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070bc:	015a      	lsls	r2, r3, #5
 80070be:	69fb      	ldr	r3, [r7, #28]
 80070c0:	4413      	add	r3, r2
 80070c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80070c6:	461a      	mov	r2, r3
 80070c8:	2320      	movs	r3, #32
 80070ca:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80070cc:	693b      	ldr	r3, [r7, #16]
 80070ce:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d009      	beq.n	80070ea <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80070d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070d8:	015a      	lsls	r2, r3, #5
 80070da:	69fb      	ldr	r3, [r7, #28]
 80070dc:	4413      	add	r3, r2
 80070de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80070e2:	461a      	mov	r2, r3
 80070e4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80070e8:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80070ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070ec:	3301      	adds	r3, #1
 80070ee:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80070f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070f2:	085b      	lsrs	r3, r3, #1
 80070f4:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80070f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	f47f af62 	bne.w	8006fc2 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	4618      	mov	r0, r3
 8007104:	f008 fb70 	bl	800f7e8 <USB_ReadInterrupts>
 8007108:	4603      	mov	r3, r0
 800710a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800710e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007112:	f040 80db 	bne.w	80072cc <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	4618      	mov	r0, r3
 800711c:	f008 fb91 	bl	800f842 <USB_ReadDevAllInEpInterrupt>
 8007120:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8007122:	2300      	movs	r3, #0
 8007124:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8007126:	e0cd      	b.n	80072c4 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8007128:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800712a:	f003 0301 	and.w	r3, r3, #1
 800712e:	2b00      	cmp	r3, #0
 8007130:	f000 80c2 	beq.w	80072b8 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800713a:	b2d2      	uxtb	r2, r2
 800713c:	4611      	mov	r1, r2
 800713e:	4618      	mov	r0, r3
 8007140:	f008 fbb7 	bl	800f8b2 <USB_ReadDevInEPInterrupt>
 8007144:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8007146:	693b      	ldr	r3, [r7, #16]
 8007148:	f003 0301 	and.w	r3, r3, #1
 800714c:	2b00      	cmp	r3, #0
 800714e:	d057      	beq.n	8007200 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007150:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007152:	f003 030f 	and.w	r3, r3, #15
 8007156:	2201      	movs	r2, #1
 8007158:	fa02 f303 	lsl.w	r3, r2, r3
 800715c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800715e:	69fb      	ldr	r3, [r7, #28]
 8007160:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007164:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	43db      	mvns	r3, r3
 800716a:	69f9      	ldr	r1, [r7, #28]
 800716c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007170:	4013      	ands	r3, r2
 8007172:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8007174:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007176:	015a      	lsls	r2, r3, #5
 8007178:	69fb      	ldr	r3, [r7, #28]
 800717a:	4413      	add	r3, r2
 800717c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007180:	461a      	mov	r2, r3
 8007182:	2301      	movs	r3, #1
 8007184:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	799b      	ldrb	r3, [r3, #6]
 800718a:	2b01      	cmp	r3, #1
 800718c:	d132      	bne.n	80071f4 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800718e:	6879      	ldr	r1, [r7, #4]
 8007190:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007192:	4613      	mov	r3, r2
 8007194:	00db      	lsls	r3, r3, #3
 8007196:	4413      	add	r3, r2
 8007198:	009b      	lsls	r3, r3, #2
 800719a:	440b      	add	r3, r1
 800719c:	3320      	adds	r3, #32
 800719e:	6819      	ldr	r1, [r3, #0]
 80071a0:	6878      	ldr	r0, [r7, #4]
 80071a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80071a4:	4613      	mov	r3, r2
 80071a6:	00db      	lsls	r3, r3, #3
 80071a8:	4413      	add	r3, r2
 80071aa:	009b      	lsls	r3, r3, #2
 80071ac:	4403      	add	r3, r0
 80071ae:	331c      	adds	r3, #28
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	4419      	add	r1, r3
 80071b4:	6878      	ldr	r0, [r7, #4]
 80071b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80071b8:	4613      	mov	r3, r2
 80071ba:	00db      	lsls	r3, r3, #3
 80071bc:	4413      	add	r3, r2
 80071be:	009b      	lsls	r3, r3, #2
 80071c0:	4403      	add	r3, r0
 80071c2:	3320      	adds	r3, #32
 80071c4:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80071c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d113      	bne.n	80071f4 <HAL_PCD_IRQHandler+0x3a2>
 80071cc:	6879      	ldr	r1, [r7, #4]
 80071ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80071d0:	4613      	mov	r3, r2
 80071d2:	00db      	lsls	r3, r3, #3
 80071d4:	4413      	add	r3, r2
 80071d6:	009b      	lsls	r3, r3, #2
 80071d8:	440b      	add	r3, r1
 80071da:	3324      	adds	r3, #36	@ 0x24
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d108      	bne.n	80071f4 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	6818      	ldr	r0, [r3, #0]
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80071ec:	461a      	mov	r2, r3
 80071ee:	2101      	movs	r1, #1
 80071f0:	f008 fbc0 	bl	800f974 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80071f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071f6:	b2db      	uxtb	r3, r3
 80071f8:	4619      	mov	r1, r3
 80071fa:	6878      	ldr	r0, [r7, #4]
 80071fc:	f00a feff 	bl	8011ffe <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8007200:	693b      	ldr	r3, [r7, #16]
 8007202:	f003 0308 	and.w	r3, r3, #8
 8007206:	2b00      	cmp	r3, #0
 8007208:	d008      	beq.n	800721c <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800720a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800720c:	015a      	lsls	r2, r3, #5
 800720e:	69fb      	ldr	r3, [r7, #28]
 8007210:	4413      	add	r3, r2
 8007212:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007216:	461a      	mov	r2, r3
 8007218:	2308      	movs	r3, #8
 800721a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800721c:	693b      	ldr	r3, [r7, #16]
 800721e:	f003 0310 	and.w	r3, r3, #16
 8007222:	2b00      	cmp	r3, #0
 8007224:	d008      	beq.n	8007238 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8007226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007228:	015a      	lsls	r2, r3, #5
 800722a:	69fb      	ldr	r3, [r7, #28]
 800722c:	4413      	add	r3, r2
 800722e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007232:	461a      	mov	r2, r3
 8007234:	2310      	movs	r3, #16
 8007236:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8007238:	693b      	ldr	r3, [r7, #16]
 800723a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800723e:	2b00      	cmp	r3, #0
 8007240:	d008      	beq.n	8007254 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8007242:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007244:	015a      	lsls	r2, r3, #5
 8007246:	69fb      	ldr	r3, [r7, #28]
 8007248:	4413      	add	r3, r2
 800724a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800724e:	461a      	mov	r2, r3
 8007250:	2340      	movs	r3, #64	@ 0x40
 8007252:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8007254:	693b      	ldr	r3, [r7, #16]
 8007256:	f003 0302 	and.w	r3, r3, #2
 800725a:	2b00      	cmp	r3, #0
 800725c:	d023      	beq.n	80072a6 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800725e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007260:	6a38      	ldr	r0, [r7, #32]
 8007262:	f007 fba3 	bl	800e9ac <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8007266:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007268:	4613      	mov	r3, r2
 800726a:	00db      	lsls	r3, r3, #3
 800726c:	4413      	add	r3, r2
 800726e:	009b      	lsls	r3, r3, #2
 8007270:	3310      	adds	r3, #16
 8007272:	687a      	ldr	r2, [r7, #4]
 8007274:	4413      	add	r3, r2
 8007276:	3304      	adds	r3, #4
 8007278:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800727a:	697b      	ldr	r3, [r7, #20]
 800727c:	78db      	ldrb	r3, [r3, #3]
 800727e:	2b01      	cmp	r3, #1
 8007280:	d108      	bne.n	8007294 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8007282:	697b      	ldr	r3, [r7, #20]
 8007284:	2200      	movs	r2, #0
 8007286:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8007288:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800728a:	b2db      	uxtb	r3, r3
 800728c:	4619      	mov	r1, r3
 800728e:	6878      	ldr	r0, [r7, #4]
 8007290:	f00a ff4c 	bl	801212c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8007294:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007296:	015a      	lsls	r2, r3, #5
 8007298:	69fb      	ldr	r3, [r7, #28]
 800729a:	4413      	add	r3, r2
 800729c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80072a0:	461a      	mov	r2, r3
 80072a2:	2302      	movs	r3, #2
 80072a4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80072a6:	693b      	ldr	r3, [r7, #16]
 80072a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d003      	beq.n	80072b8 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80072b0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80072b2:	6878      	ldr	r0, [r7, #4]
 80072b4:	f000 fce8 	bl	8007c88 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80072b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072ba:	3301      	adds	r3, #1
 80072bc:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80072be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072c0:	085b      	lsrs	r3, r3, #1
 80072c2:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80072c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	f47f af2e 	bne.w	8007128 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	4618      	mov	r0, r3
 80072d2:	f008 fa89 	bl	800f7e8 <USB_ReadInterrupts>
 80072d6:	4603      	mov	r3, r0
 80072d8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80072dc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80072e0:	d122      	bne.n	8007328 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80072e2:	69fb      	ldr	r3, [r7, #28]
 80072e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80072e8:	685b      	ldr	r3, [r3, #4]
 80072ea:	69fa      	ldr	r2, [r7, #28]
 80072ec:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80072f0:	f023 0301 	bic.w	r3, r3, #1
 80072f4:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80072fc:	2b01      	cmp	r3, #1
 80072fe:	d108      	bne.n	8007312 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2200      	movs	r2, #0
 8007304:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8007308:	2100      	movs	r1, #0
 800730a:	6878      	ldr	r0, [r7, #4]
 800730c:	f000 fef2 	bl	80080f4 <HAL_PCDEx_LPM_Callback>
 8007310:	e002      	b.n	8007318 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8007312:	6878      	ldr	r0, [r7, #4]
 8007314:	f00a feea 	bl	80120ec <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	695a      	ldr	r2, [r3, #20]
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8007326:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	4618      	mov	r0, r3
 800732e:	f008 fa5b 	bl	800f7e8 <USB_ReadInterrupts>
 8007332:	4603      	mov	r3, r0
 8007334:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007338:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800733c:	d112      	bne.n	8007364 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800733e:	69fb      	ldr	r3, [r7, #28]
 8007340:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007344:	689b      	ldr	r3, [r3, #8]
 8007346:	f003 0301 	and.w	r3, r3, #1
 800734a:	2b01      	cmp	r3, #1
 800734c:	d102      	bne.n	8007354 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800734e:	6878      	ldr	r0, [r7, #4]
 8007350:	f00a fea6 	bl	80120a0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	695a      	ldr	r2, [r3, #20]
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8007362:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	4618      	mov	r0, r3
 800736a:	f008 fa3d 	bl	800f7e8 <USB_ReadInterrupts>
 800736e:	4603      	mov	r3, r0
 8007370:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007374:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007378:	d121      	bne.n	80073be <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	695a      	ldr	r2, [r3, #20]
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8007388:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8007390:	2b00      	cmp	r3, #0
 8007392:	d111      	bne.n	80073b8 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	2201      	movs	r2, #1
 8007398:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80073a2:	089b      	lsrs	r3, r3, #2
 80073a4:	f003 020f 	and.w	r2, r3, #15
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80073ae:	2101      	movs	r1, #1
 80073b0:	6878      	ldr	r0, [r7, #4]
 80073b2:	f000 fe9f 	bl	80080f4 <HAL_PCDEx_LPM_Callback>
 80073b6:	e002      	b.n	80073be <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80073b8:	6878      	ldr	r0, [r7, #4]
 80073ba:	f00a fe71 	bl	80120a0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	4618      	mov	r0, r3
 80073c4:	f008 fa10 	bl	800f7e8 <USB_ReadInterrupts>
 80073c8:	4603      	mov	r3, r0
 80073ca:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80073ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80073d2:	f040 80b7 	bne.w	8007544 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80073d6:	69fb      	ldr	r3, [r7, #28]
 80073d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80073dc:	685b      	ldr	r3, [r3, #4]
 80073de:	69fa      	ldr	r2, [r7, #28]
 80073e0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80073e4:	f023 0301 	bic.w	r3, r3, #1
 80073e8:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	2110      	movs	r1, #16
 80073f0:	4618      	mov	r0, r3
 80073f2:	f007 fadb 	bl	800e9ac <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80073f6:	2300      	movs	r3, #0
 80073f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80073fa:	e046      	b.n	800748a <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80073fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073fe:	015a      	lsls	r2, r3, #5
 8007400:	69fb      	ldr	r3, [r7, #28]
 8007402:	4413      	add	r3, r2
 8007404:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007408:	461a      	mov	r2, r3
 800740a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800740e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007410:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007412:	015a      	lsls	r2, r3, #5
 8007414:	69fb      	ldr	r3, [r7, #28]
 8007416:	4413      	add	r3, r2
 8007418:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007420:	0151      	lsls	r1, r2, #5
 8007422:	69fa      	ldr	r2, [r7, #28]
 8007424:	440a      	add	r2, r1
 8007426:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800742a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800742e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8007430:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007432:	015a      	lsls	r2, r3, #5
 8007434:	69fb      	ldr	r3, [r7, #28]
 8007436:	4413      	add	r3, r2
 8007438:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800743c:	461a      	mov	r2, r3
 800743e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007442:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007444:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007446:	015a      	lsls	r2, r3, #5
 8007448:	69fb      	ldr	r3, [r7, #28]
 800744a:	4413      	add	r3, r2
 800744c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007454:	0151      	lsls	r1, r2, #5
 8007456:	69fa      	ldr	r2, [r7, #28]
 8007458:	440a      	add	r2, r1
 800745a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800745e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007462:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007464:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007466:	015a      	lsls	r2, r3, #5
 8007468:	69fb      	ldr	r3, [r7, #28]
 800746a:	4413      	add	r3, r2
 800746c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007474:	0151      	lsls	r1, r2, #5
 8007476:	69fa      	ldr	r2, [r7, #28]
 8007478:	440a      	add	r2, r1
 800747a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800747e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007482:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007484:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007486:	3301      	adds	r3, #1
 8007488:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	791b      	ldrb	r3, [r3, #4]
 800748e:	461a      	mov	r2, r3
 8007490:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007492:	4293      	cmp	r3, r2
 8007494:	d3b2      	bcc.n	80073fc <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8007496:	69fb      	ldr	r3, [r7, #28]
 8007498:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800749c:	69db      	ldr	r3, [r3, #28]
 800749e:	69fa      	ldr	r2, [r7, #28]
 80074a0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80074a4:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80074a8:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	7bdb      	ldrb	r3, [r3, #15]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d016      	beq.n	80074e0 <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80074b2:	69fb      	ldr	r3, [r7, #28]
 80074b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80074b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80074bc:	69fa      	ldr	r2, [r7, #28]
 80074be:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80074c2:	f043 030b 	orr.w	r3, r3, #11
 80074c6:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80074ca:	69fb      	ldr	r3, [r7, #28]
 80074cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80074d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80074d2:	69fa      	ldr	r2, [r7, #28]
 80074d4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80074d8:	f043 030b 	orr.w	r3, r3, #11
 80074dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80074de:	e015      	b.n	800750c <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80074e0:	69fb      	ldr	r3, [r7, #28]
 80074e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80074e6:	695a      	ldr	r2, [r3, #20]
 80074e8:	69fb      	ldr	r3, [r7, #28]
 80074ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80074ee:	4619      	mov	r1, r3
 80074f0:	f242 032b 	movw	r3, #8235	@ 0x202b
 80074f4:	4313      	orrs	r3, r2
 80074f6:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80074f8:	69fb      	ldr	r3, [r7, #28]
 80074fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80074fe:	691b      	ldr	r3, [r3, #16]
 8007500:	69fa      	ldr	r2, [r7, #28]
 8007502:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007506:	f043 030b 	orr.w	r3, r3, #11
 800750a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800750c:	69fb      	ldr	r3, [r7, #28]
 800750e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	69fa      	ldr	r2, [r7, #28]
 8007516:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800751a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800751e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	6818      	ldr	r0, [r3, #0]
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800752e:	461a      	mov	r2, r3
 8007530:	f008 fa20 	bl	800f974 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	695a      	ldr	r2, [r3, #20]
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8007542:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	4618      	mov	r0, r3
 800754a:	f008 f94d 	bl	800f7e8 <USB_ReadInterrupts>
 800754e:	4603      	mov	r3, r0
 8007550:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007554:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007558:	d123      	bne.n	80075a2 <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	4618      	mov	r0, r3
 8007560:	f008 f9e4 	bl	800f92c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	4618      	mov	r0, r3
 800756a:	f007 fa98 	bl	800ea9e <USB_GetDevSpeed>
 800756e:	4603      	mov	r3, r0
 8007570:	461a      	mov	r2, r3
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681c      	ldr	r4, [r3, #0]
 800757a:	f001 fdbb 	bl	80090f4 <HAL_RCC_GetHCLKFreq>
 800757e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8007584:	461a      	mov	r2, r3
 8007586:	4620      	mov	r0, r4
 8007588:	f006 ffa2 	bl	800e4d0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800758c:	6878      	ldr	r0, [r7, #4]
 800758e:	f00a fd5e 	bl	801204e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	695a      	ldr	r2, [r3, #20]
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80075a0:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	4618      	mov	r0, r3
 80075a8:	f008 f91e 	bl	800f7e8 <USB_ReadInterrupts>
 80075ac:	4603      	mov	r3, r0
 80075ae:	f003 0308 	and.w	r3, r3, #8
 80075b2:	2b08      	cmp	r3, #8
 80075b4:	d10a      	bne.n	80075cc <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80075b6:	6878      	ldr	r0, [r7, #4]
 80075b8:	f00a fd3b 	bl	8012032 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	695a      	ldr	r2, [r3, #20]
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	f002 0208 	and.w	r2, r2, #8
 80075ca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	4618      	mov	r0, r3
 80075d2:	f008 f909 	bl	800f7e8 <USB_ReadInterrupts>
 80075d6:	4603      	mov	r3, r0
 80075d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80075dc:	2b80      	cmp	r3, #128	@ 0x80
 80075de:	d123      	bne.n	8007628 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80075e0:	6a3b      	ldr	r3, [r7, #32]
 80075e2:	699b      	ldr	r3, [r3, #24]
 80075e4:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80075e8:	6a3b      	ldr	r3, [r7, #32]
 80075ea:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80075ec:	2301      	movs	r3, #1
 80075ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80075f0:	e014      	b.n	800761c <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80075f2:	6879      	ldr	r1, [r7, #4]
 80075f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80075f6:	4613      	mov	r3, r2
 80075f8:	00db      	lsls	r3, r3, #3
 80075fa:	4413      	add	r3, r2
 80075fc:	009b      	lsls	r3, r3, #2
 80075fe:	440b      	add	r3, r1
 8007600:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8007604:	781b      	ldrb	r3, [r3, #0]
 8007606:	2b01      	cmp	r3, #1
 8007608:	d105      	bne.n	8007616 <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800760a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800760c:	b2db      	uxtb	r3, r3
 800760e:	4619      	mov	r1, r3
 8007610:	6878      	ldr	r0, [r7, #4]
 8007612:	f000 fb08 	bl	8007c26 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007618:	3301      	adds	r3, #1
 800761a:	627b      	str	r3, [r7, #36]	@ 0x24
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	791b      	ldrb	r3, [r3, #4]
 8007620:	461a      	mov	r2, r3
 8007622:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007624:	4293      	cmp	r3, r2
 8007626:	d3e4      	bcc.n	80075f2 <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	4618      	mov	r0, r3
 800762e:	f008 f8db 	bl	800f7e8 <USB_ReadInterrupts>
 8007632:	4603      	mov	r3, r0
 8007634:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007638:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800763c:	d13c      	bne.n	80076b8 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800763e:	2301      	movs	r3, #1
 8007640:	627b      	str	r3, [r7, #36]	@ 0x24
 8007642:	e02b      	b.n	800769c <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8007644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007646:	015a      	lsls	r2, r3, #5
 8007648:	69fb      	ldr	r3, [r7, #28]
 800764a:	4413      	add	r3, r2
 800764c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8007654:	6879      	ldr	r1, [r7, #4]
 8007656:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007658:	4613      	mov	r3, r2
 800765a:	00db      	lsls	r3, r3, #3
 800765c:	4413      	add	r3, r2
 800765e:	009b      	lsls	r3, r3, #2
 8007660:	440b      	add	r3, r1
 8007662:	3318      	adds	r3, #24
 8007664:	781b      	ldrb	r3, [r3, #0]
 8007666:	2b01      	cmp	r3, #1
 8007668:	d115      	bne.n	8007696 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800766a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800766c:	2b00      	cmp	r3, #0
 800766e:	da12      	bge.n	8007696 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8007670:	6879      	ldr	r1, [r7, #4]
 8007672:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007674:	4613      	mov	r3, r2
 8007676:	00db      	lsls	r3, r3, #3
 8007678:	4413      	add	r3, r2
 800767a:	009b      	lsls	r3, r3, #2
 800767c:	440b      	add	r3, r1
 800767e:	3317      	adds	r3, #23
 8007680:	2201      	movs	r2, #1
 8007682:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8007684:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007686:	b2db      	uxtb	r3, r3
 8007688:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800768c:	b2db      	uxtb	r3, r3
 800768e:	4619      	mov	r1, r3
 8007690:	6878      	ldr	r0, [r7, #4]
 8007692:	f000 fac8 	bl	8007c26 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007698:	3301      	adds	r3, #1
 800769a:	627b      	str	r3, [r7, #36]	@ 0x24
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	791b      	ldrb	r3, [r3, #4]
 80076a0:	461a      	mov	r2, r3
 80076a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076a4:	4293      	cmp	r3, r2
 80076a6:	d3cd      	bcc.n	8007644 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	695a      	ldr	r2, [r3, #20]
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80076b6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	4618      	mov	r0, r3
 80076be:	f008 f893 	bl	800f7e8 <USB_ReadInterrupts>
 80076c2:	4603      	mov	r3, r0
 80076c4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80076c8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80076cc:	d156      	bne.n	800777c <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80076ce:	2301      	movs	r3, #1
 80076d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80076d2:	e045      	b.n	8007760 <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80076d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076d6:	015a      	lsls	r2, r3, #5
 80076d8:	69fb      	ldr	r3, [r7, #28]
 80076da:	4413      	add	r3, r2
 80076dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80076e4:	6879      	ldr	r1, [r7, #4]
 80076e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80076e8:	4613      	mov	r3, r2
 80076ea:	00db      	lsls	r3, r3, #3
 80076ec:	4413      	add	r3, r2
 80076ee:	009b      	lsls	r3, r3, #2
 80076f0:	440b      	add	r3, r1
 80076f2:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80076f6:	781b      	ldrb	r3, [r3, #0]
 80076f8:	2b01      	cmp	r3, #1
 80076fa:	d12e      	bne.n	800775a <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80076fc:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80076fe:	2b00      	cmp	r3, #0
 8007700:	da2b      	bge.n	800775a <HAL_PCD_IRQHandler+0x908>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8007702:	69bb      	ldr	r3, [r7, #24]
 8007704:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 800770e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8007712:	429a      	cmp	r2, r3
 8007714:	d121      	bne.n	800775a <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8007716:	6879      	ldr	r1, [r7, #4]
 8007718:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800771a:	4613      	mov	r3, r2
 800771c:	00db      	lsls	r3, r3, #3
 800771e:	4413      	add	r3, r2
 8007720:	009b      	lsls	r3, r3, #2
 8007722:	440b      	add	r3, r1
 8007724:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8007728:	2201      	movs	r2, #1
 800772a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800772c:	6a3b      	ldr	r3, [r7, #32]
 800772e:	699b      	ldr	r3, [r3, #24]
 8007730:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007734:	6a3b      	ldr	r3, [r7, #32]
 8007736:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8007738:	6a3b      	ldr	r3, [r7, #32]
 800773a:	695b      	ldr	r3, [r3, #20]
 800773c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007740:	2b00      	cmp	r3, #0
 8007742:	d10a      	bne.n	800775a <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8007744:	69fb      	ldr	r3, [r7, #28]
 8007746:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800774a:	685b      	ldr	r3, [r3, #4]
 800774c:	69fa      	ldr	r2, [r7, #28]
 800774e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007752:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007756:	6053      	str	r3, [r2, #4]
            break;
 8007758:	e008      	b.n	800776c <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800775a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800775c:	3301      	adds	r3, #1
 800775e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	791b      	ldrb	r3, [r3, #4]
 8007764:	461a      	mov	r2, r3
 8007766:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007768:	4293      	cmp	r3, r2
 800776a:	d3b3      	bcc.n	80076d4 <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	695a      	ldr	r2, [r3, #20]
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 800777a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	4618      	mov	r0, r3
 8007782:	f008 f831 	bl	800f7e8 <USB_ReadInterrupts>
 8007786:	4603      	mov	r3, r0
 8007788:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800778c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007790:	d10a      	bne.n	80077a8 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8007792:	6878      	ldr	r0, [r7, #4]
 8007794:	f00a fcdc 	bl	8012150 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	695a      	ldr	r2, [r3, #20]
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80077a6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	4618      	mov	r0, r3
 80077ae:	f008 f81b 	bl	800f7e8 <USB_ReadInterrupts>
 80077b2:	4603      	mov	r3, r0
 80077b4:	f003 0304 	and.w	r3, r3, #4
 80077b8:	2b04      	cmp	r3, #4
 80077ba:	d115      	bne.n	80077e8 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	685b      	ldr	r3, [r3, #4]
 80077c2:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80077c4:	69bb      	ldr	r3, [r7, #24]
 80077c6:	f003 0304 	and.w	r3, r3, #4
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d002      	beq.n	80077d4 <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80077ce:	6878      	ldr	r0, [r7, #4]
 80077d0:	f00a fccc 	bl	801216c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	6859      	ldr	r1, [r3, #4]
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	69ba      	ldr	r2, [r7, #24]
 80077e0:	430a      	orrs	r2, r1
 80077e2:	605a      	str	r2, [r3, #4]
 80077e4:	e000      	b.n	80077e8 <HAL_PCD_IRQHandler+0x996>
      return;
 80077e6:	bf00      	nop
    }
  }
}
 80077e8:	3734      	adds	r7, #52	@ 0x34
 80077ea:	46bd      	mov	sp, r7
 80077ec:	bd90      	pop	{r4, r7, pc}

080077ee <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80077ee:	b580      	push	{r7, lr}
 80077f0:	b082      	sub	sp, #8
 80077f2:	af00      	add	r7, sp, #0
 80077f4:	6078      	str	r0, [r7, #4]
 80077f6:	460b      	mov	r3, r1
 80077f8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8007800:	2b01      	cmp	r3, #1
 8007802:	d101      	bne.n	8007808 <HAL_PCD_SetAddress+0x1a>
 8007804:	2302      	movs	r3, #2
 8007806:	e012      	b.n	800782e <HAL_PCD_SetAddress+0x40>
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2201      	movs	r2, #1
 800780c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	78fa      	ldrb	r2, [r7, #3]
 8007814:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	78fa      	ldrb	r2, [r7, #3]
 800781c:	4611      	mov	r1, r2
 800781e:	4618      	mov	r0, r3
 8007820:	f007 ff7a 	bl	800f718 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	2200      	movs	r2, #0
 8007828:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800782c:	2300      	movs	r3, #0
}
 800782e:	4618      	mov	r0, r3
 8007830:	3708      	adds	r7, #8
 8007832:	46bd      	mov	sp, r7
 8007834:	bd80      	pop	{r7, pc}

08007836 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8007836:	b580      	push	{r7, lr}
 8007838:	b084      	sub	sp, #16
 800783a:	af00      	add	r7, sp, #0
 800783c:	6078      	str	r0, [r7, #4]
 800783e:	4608      	mov	r0, r1
 8007840:	4611      	mov	r1, r2
 8007842:	461a      	mov	r2, r3
 8007844:	4603      	mov	r3, r0
 8007846:	70fb      	strb	r3, [r7, #3]
 8007848:	460b      	mov	r3, r1
 800784a:	803b      	strh	r3, [r7, #0]
 800784c:	4613      	mov	r3, r2
 800784e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8007850:	2300      	movs	r3, #0
 8007852:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007854:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007858:	2b00      	cmp	r3, #0
 800785a:	da0f      	bge.n	800787c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800785c:	78fb      	ldrb	r3, [r7, #3]
 800785e:	f003 020f 	and.w	r2, r3, #15
 8007862:	4613      	mov	r3, r2
 8007864:	00db      	lsls	r3, r3, #3
 8007866:	4413      	add	r3, r2
 8007868:	009b      	lsls	r3, r3, #2
 800786a:	3310      	adds	r3, #16
 800786c:	687a      	ldr	r2, [r7, #4]
 800786e:	4413      	add	r3, r2
 8007870:	3304      	adds	r3, #4
 8007872:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	2201      	movs	r2, #1
 8007878:	705a      	strb	r2, [r3, #1]
 800787a:	e00f      	b.n	800789c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800787c:	78fb      	ldrb	r3, [r7, #3]
 800787e:	f003 020f 	and.w	r2, r3, #15
 8007882:	4613      	mov	r3, r2
 8007884:	00db      	lsls	r3, r3, #3
 8007886:	4413      	add	r3, r2
 8007888:	009b      	lsls	r3, r3, #2
 800788a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800788e:	687a      	ldr	r2, [r7, #4]
 8007890:	4413      	add	r3, r2
 8007892:	3304      	adds	r3, #4
 8007894:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	2200      	movs	r2, #0
 800789a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800789c:	78fb      	ldrb	r3, [r7, #3]
 800789e:	f003 030f 	and.w	r3, r3, #15
 80078a2:	b2da      	uxtb	r2, r3
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80078a8:	883a      	ldrh	r2, [r7, #0]
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	78ba      	ldrb	r2, [r7, #2]
 80078b2:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	785b      	ldrb	r3, [r3, #1]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d004      	beq.n	80078c6 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	781b      	ldrb	r3, [r3, #0]
 80078c0:	461a      	mov	r2, r3
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80078c6:	78bb      	ldrb	r3, [r7, #2]
 80078c8:	2b02      	cmp	r3, #2
 80078ca:	d102      	bne.n	80078d2 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	2200      	movs	r2, #0
 80078d0:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80078d8:	2b01      	cmp	r3, #1
 80078da:	d101      	bne.n	80078e0 <HAL_PCD_EP_Open+0xaa>
 80078dc:	2302      	movs	r3, #2
 80078de:	e00e      	b.n	80078fe <HAL_PCD_EP_Open+0xc8>
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	2201      	movs	r2, #1
 80078e4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	68f9      	ldr	r1, [r7, #12]
 80078ee:	4618      	mov	r0, r3
 80078f0:	f007 f8fa 	bl	800eae8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	2200      	movs	r2, #0
 80078f8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 80078fc:	7afb      	ldrb	r3, [r7, #11]
}
 80078fe:	4618      	mov	r0, r3
 8007900:	3710      	adds	r7, #16
 8007902:	46bd      	mov	sp, r7
 8007904:	bd80      	pop	{r7, pc}

08007906 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007906:	b580      	push	{r7, lr}
 8007908:	b084      	sub	sp, #16
 800790a:	af00      	add	r7, sp, #0
 800790c:	6078      	str	r0, [r7, #4]
 800790e:	460b      	mov	r3, r1
 8007910:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007912:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007916:	2b00      	cmp	r3, #0
 8007918:	da0f      	bge.n	800793a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800791a:	78fb      	ldrb	r3, [r7, #3]
 800791c:	f003 020f 	and.w	r2, r3, #15
 8007920:	4613      	mov	r3, r2
 8007922:	00db      	lsls	r3, r3, #3
 8007924:	4413      	add	r3, r2
 8007926:	009b      	lsls	r3, r3, #2
 8007928:	3310      	adds	r3, #16
 800792a:	687a      	ldr	r2, [r7, #4]
 800792c:	4413      	add	r3, r2
 800792e:	3304      	adds	r3, #4
 8007930:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	2201      	movs	r2, #1
 8007936:	705a      	strb	r2, [r3, #1]
 8007938:	e00f      	b.n	800795a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800793a:	78fb      	ldrb	r3, [r7, #3]
 800793c:	f003 020f 	and.w	r2, r3, #15
 8007940:	4613      	mov	r3, r2
 8007942:	00db      	lsls	r3, r3, #3
 8007944:	4413      	add	r3, r2
 8007946:	009b      	lsls	r3, r3, #2
 8007948:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800794c:	687a      	ldr	r2, [r7, #4]
 800794e:	4413      	add	r3, r2
 8007950:	3304      	adds	r3, #4
 8007952:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	2200      	movs	r2, #0
 8007958:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800795a:	78fb      	ldrb	r3, [r7, #3]
 800795c:	f003 030f 	and.w	r3, r3, #15
 8007960:	b2da      	uxtb	r2, r3
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800796c:	2b01      	cmp	r3, #1
 800796e:	d101      	bne.n	8007974 <HAL_PCD_EP_Close+0x6e>
 8007970:	2302      	movs	r3, #2
 8007972:	e00e      	b.n	8007992 <HAL_PCD_EP_Close+0x8c>
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	2201      	movs	r2, #1
 8007978:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	68f9      	ldr	r1, [r7, #12]
 8007982:	4618      	mov	r0, r3
 8007984:	f007 f938 	bl	800ebf8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	2200      	movs	r2, #0
 800798c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8007990:	2300      	movs	r3, #0
}
 8007992:	4618      	mov	r0, r3
 8007994:	3710      	adds	r7, #16
 8007996:	46bd      	mov	sp, r7
 8007998:	bd80      	pop	{r7, pc}

0800799a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800799a:	b580      	push	{r7, lr}
 800799c:	b086      	sub	sp, #24
 800799e:	af00      	add	r7, sp, #0
 80079a0:	60f8      	str	r0, [r7, #12]
 80079a2:	607a      	str	r2, [r7, #4]
 80079a4:	603b      	str	r3, [r7, #0]
 80079a6:	460b      	mov	r3, r1
 80079a8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80079aa:	7afb      	ldrb	r3, [r7, #11]
 80079ac:	f003 020f 	and.w	r2, r3, #15
 80079b0:	4613      	mov	r3, r2
 80079b2:	00db      	lsls	r3, r3, #3
 80079b4:	4413      	add	r3, r2
 80079b6:	009b      	lsls	r3, r3, #2
 80079b8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80079bc:	68fa      	ldr	r2, [r7, #12]
 80079be:	4413      	add	r3, r2
 80079c0:	3304      	adds	r3, #4
 80079c2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80079c4:	697b      	ldr	r3, [r7, #20]
 80079c6:	687a      	ldr	r2, [r7, #4]
 80079c8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80079ca:	697b      	ldr	r3, [r7, #20]
 80079cc:	683a      	ldr	r2, [r7, #0]
 80079ce:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80079d0:	697b      	ldr	r3, [r7, #20]
 80079d2:	2200      	movs	r2, #0
 80079d4:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80079d6:	697b      	ldr	r3, [r7, #20]
 80079d8:	2200      	movs	r2, #0
 80079da:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80079dc:	7afb      	ldrb	r3, [r7, #11]
 80079de:	f003 030f 	and.w	r3, r3, #15
 80079e2:	b2da      	uxtb	r2, r3
 80079e4:	697b      	ldr	r3, [r7, #20]
 80079e6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	799b      	ldrb	r3, [r3, #6]
 80079ec:	2b01      	cmp	r3, #1
 80079ee:	d102      	bne.n	80079f6 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80079f0:	687a      	ldr	r2, [r7, #4]
 80079f2:	697b      	ldr	r3, [r7, #20]
 80079f4:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	6818      	ldr	r0, [r3, #0]
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	799b      	ldrb	r3, [r3, #6]
 80079fe:	461a      	mov	r2, r3
 8007a00:	6979      	ldr	r1, [r7, #20]
 8007a02:	f007 f9d5 	bl	800edb0 <USB_EPStartXfer>

  return HAL_OK;
 8007a06:	2300      	movs	r3, #0
}
 8007a08:	4618      	mov	r0, r3
 8007a0a:	3718      	adds	r7, #24
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	bd80      	pop	{r7, pc}

08007a10 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8007a10:	b480      	push	{r7}
 8007a12:	b083      	sub	sp, #12
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	6078      	str	r0, [r7, #4]
 8007a18:	460b      	mov	r3, r1
 8007a1a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8007a1c:	78fb      	ldrb	r3, [r7, #3]
 8007a1e:	f003 020f 	and.w	r2, r3, #15
 8007a22:	6879      	ldr	r1, [r7, #4]
 8007a24:	4613      	mov	r3, r2
 8007a26:	00db      	lsls	r3, r3, #3
 8007a28:	4413      	add	r3, r2
 8007a2a:	009b      	lsls	r3, r3, #2
 8007a2c:	440b      	add	r3, r1
 8007a2e:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8007a32:	681b      	ldr	r3, [r3, #0]
}
 8007a34:	4618      	mov	r0, r3
 8007a36:	370c      	adds	r7, #12
 8007a38:	46bd      	mov	sp, r7
 8007a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3e:	4770      	bx	lr

08007a40 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b086      	sub	sp, #24
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	60f8      	str	r0, [r7, #12]
 8007a48:	607a      	str	r2, [r7, #4]
 8007a4a:	603b      	str	r3, [r7, #0]
 8007a4c:	460b      	mov	r3, r1
 8007a4e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007a50:	7afb      	ldrb	r3, [r7, #11]
 8007a52:	f003 020f 	and.w	r2, r3, #15
 8007a56:	4613      	mov	r3, r2
 8007a58:	00db      	lsls	r3, r3, #3
 8007a5a:	4413      	add	r3, r2
 8007a5c:	009b      	lsls	r3, r3, #2
 8007a5e:	3310      	adds	r3, #16
 8007a60:	68fa      	ldr	r2, [r7, #12]
 8007a62:	4413      	add	r3, r2
 8007a64:	3304      	adds	r3, #4
 8007a66:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007a68:	697b      	ldr	r3, [r7, #20]
 8007a6a:	687a      	ldr	r2, [r7, #4]
 8007a6c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8007a6e:	697b      	ldr	r3, [r7, #20]
 8007a70:	683a      	ldr	r2, [r7, #0]
 8007a72:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8007a74:	697b      	ldr	r3, [r7, #20]
 8007a76:	2200      	movs	r2, #0
 8007a78:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8007a7a:	697b      	ldr	r3, [r7, #20]
 8007a7c:	2201      	movs	r2, #1
 8007a7e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007a80:	7afb      	ldrb	r3, [r7, #11]
 8007a82:	f003 030f 	and.w	r3, r3, #15
 8007a86:	b2da      	uxtb	r2, r3
 8007a88:	697b      	ldr	r3, [r7, #20]
 8007a8a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	799b      	ldrb	r3, [r3, #6]
 8007a90:	2b01      	cmp	r3, #1
 8007a92:	d102      	bne.n	8007a9a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8007a94:	687a      	ldr	r2, [r7, #4]
 8007a96:	697b      	ldr	r3, [r7, #20]
 8007a98:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	6818      	ldr	r0, [r3, #0]
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	799b      	ldrb	r3, [r3, #6]
 8007aa2:	461a      	mov	r2, r3
 8007aa4:	6979      	ldr	r1, [r7, #20]
 8007aa6:	f007 f983 	bl	800edb0 <USB_EPStartXfer>

  return HAL_OK;
 8007aaa:	2300      	movs	r3, #0
}
 8007aac:	4618      	mov	r0, r3
 8007aae:	3718      	adds	r7, #24
 8007ab0:	46bd      	mov	sp, r7
 8007ab2:	bd80      	pop	{r7, pc}

08007ab4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	b084      	sub	sp, #16
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	6078      	str	r0, [r7, #4]
 8007abc:	460b      	mov	r3, r1
 8007abe:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8007ac0:	78fb      	ldrb	r3, [r7, #3]
 8007ac2:	f003 030f 	and.w	r3, r3, #15
 8007ac6:	687a      	ldr	r2, [r7, #4]
 8007ac8:	7912      	ldrb	r2, [r2, #4]
 8007aca:	4293      	cmp	r3, r2
 8007acc:	d901      	bls.n	8007ad2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8007ace:	2301      	movs	r3, #1
 8007ad0:	e04f      	b.n	8007b72 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007ad2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	da0f      	bge.n	8007afa <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007ada:	78fb      	ldrb	r3, [r7, #3]
 8007adc:	f003 020f 	and.w	r2, r3, #15
 8007ae0:	4613      	mov	r3, r2
 8007ae2:	00db      	lsls	r3, r3, #3
 8007ae4:	4413      	add	r3, r2
 8007ae6:	009b      	lsls	r3, r3, #2
 8007ae8:	3310      	adds	r3, #16
 8007aea:	687a      	ldr	r2, [r7, #4]
 8007aec:	4413      	add	r3, r2
 8007aee:	3304      	adds	r3, #4
 8007af0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	2201      	movs	r2, #1
 8007af6:	705a      	strb	r2, [r3, #1]
 8007af8:	e00d      	b.n	8007b16 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8007afa:	78fa      	ldrb	r2, [r7, #3]
 8007afc:	4613      	mov	r3, r2
 8007afe:	00db      	lsls	r3, r3, #3
 8007b00:	4413      	add	r3, r2
 8007b02:	009b      	lsls	r3, r3, #2
 8007b04:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007b08:	687a      	ldr	r2, [r7, #4]
 8007b0a:	4413      	add	r3, r2
 8007b0c:	3304      	adds	r3, #4
 8007b0e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	2200      	movs	r2, #0
 8007b14:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	2201      	movs	r2, #1
 8007b1a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007b1c:	78fb      	ldrb	r3, [r7, #3]
 8007b1e:	f003 030f 	and.w	r3, r3, #15
 8007b22:	b2da      	uxtb	r2, r3
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8007b2e:	2b01      	cmp	r3, #1
 8007b30:	d101      	bne.n	8007b36 <HAL_PCD_EP_SetStall+0x82>
 8007b32:	2302      	movs	r3, #2
 8007b34:	e01d      	b.n	8007b72 <HAL_PCD_EP_SetStall+0xbe>
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	2201      	movs	r2, #1
 8007b3a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	68f9      	ldr	r1, [r7, #12]
 8007b44:	4618      	mov	r0, r3
 8007b46:	f007 fd13 	bl	800f570 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007b4a:	78fb      	ldrb	r3, [r7, #3]
 8007b4c:	f003 030f 	and.w	r3, r3, #15
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d109      	bne.n	8007b68 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	6818      	ldr	r0, [r3, #0]
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	7999      	ldrb	r1, [r3, #6]
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007b62:	461a      	mov	r2, r3
 8007b64:	f007 ff06 	bl	800f974 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8007b70:	2300      	movs	r3, #0
}
 8007b72:	4618      	mov	r0, r3
 8007b74:	3710      	adds	r7, #16
 8007b76:	46bd      	mov	sp, r7
 8007b78:	bd80      	pop	{r7, pc}

08007b7a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007b7a:	b580      	push	{r7, lr}
 8007b7c:	b084      	sub	sp, #16
 8007b7e:	af00      	add	r7, sp, #0
 8007b80:	6078      	str	r0, [r7, #4]
 8007b82:	460b      	mov	r3, r1
 8007b84:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8007b86:	78fb      	ldrb	r3, [r7, #3]
 8007b88:	f003 030f 	and.w	r3, r3, #15
 8007b8c:	687a      	ldr	r2, [r7, #4]
 8007b8e:	7912      	ldrb	r2, [r2, #4]
 8007b90:	4293      	cmp	r3, r2
 8007b92:	d901      	bls.n	8007b98 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8007b94:	2301      	movs	r3, #1
 8007b96:	e042      	b.n	8007c1e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007b98:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	da0f      	bge.n	8007bc0 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007ba0:	78fb      	ldrb	r3, [r7, #3]
 8007ba2:	f003 020f 	and.w	r2, r3, #15
 8007ba6:	4613      	mov	r3, r2
 8007ba8:	00db      	lsls	r3, r3, #3
 8007baa:	4413      	add	r3, r2
 8007bac:	009b      	lsls	r3, r3, #2
 8007bae:	3310      	adds	r3, #16
 8007bb0:	687a      	ldr	r2, [r7, #4]
 8007bb2:	4413      	add	r3, r2
 8007bb4:	3304      	adds	r3, #4
 8007bb6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	2201      	movs	r2, #1
 8007bbc:	705a      	strb	r2, [r3, #1]
 8007bbe:	e00f      	b.n	8007be0 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007bc0:	78fb      	ldrb	r3, [r7, #3]
 8007bc2:	f003 020f 	and.w	r2, r3, #15
 8007bc6:	4613      	mov	r3, r2
 8007bc8:	00db      	lsls	r3, r3, #3
 8007bca:	4413      	add	r3, r2
 8007bcc:	009b      	lsls	r3, r3, #2
 8007bce:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007bd2:	687a      	ldr	r2, [r7, #4]
 8007bd4:	4413      	add	r3, r2
 8007bd6:	3304      	adds	r3, #4
 8007bd8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	2200      	movs	r2, #0
 8007bde:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	2200      	movs	r2, #0
 8007be4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007be6:	78fb      	ldrb	r3, [r7, #3]
 8007be8:	f003 030f 	and.w	r3, r3, #15
 8007bec:	b2da      	uxtb	r2, r3
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8007bf8:	2b01      	cmp	r3, #1
 8007bfa:	d101      	bne.n	8007c00 <HAL_PCD_EP_ClrStall+0x86>
 8007bfc:	2302      	movs	r3, #2
 8007bfe:	e00e      	b.n	8007c1e <HAL_PCD_EP_ClrStall+0xa4>
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	2201      	movs	r2, #1
 8007c04:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	68f9      	ldr	r1, [r7, #12]
 8007c0e:	4618      	mov	r0, r3
 8007c10:	f007 fd1c 	bl	800f64c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	2200      	movs	r2, #0
 8007c18:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8007c1c:	2300      	movs	r3, #0
}
 8007c1e:	4618      	mov	r0, r3
 8007c20:	3710      	adds	r7, #16
 8007c22:	46bd      	mov	sp, r7
 8007c24:	bd80      	pop	{r7, pc}

08007c26 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007c26:	b580      	push	{r7, lr}
 8007c28:	b084      	sub	sp, #16
 8007c2a:	af00      	add	r7, sp, #0
 8007c2c:	6078      	str	r0, [r7, #4]
 8007c2e:	460b      	mov	r3, r1
 8007c30:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8007c32:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	da0c      	bge.n	8007c54 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007c3a:	78fb      	ldrb	r3, [r7, #3]
 8007c3c:	f003 020f 	and.w	r2, r3, #15
 8007c40:	4613      	mov	r3, r2
 8007c42:	00db      	lsls	r3, r3, #3
 8007c44:	4413      	add	r3, r2
 8007c46:	009b      	lsls	r3, r3, #2
 8007c48:	3310      	adds	r3, #16
 8007c4a:	687a      	ldr	r2, [r7, #4]
 8007c4c:	4413      	add	r3, r2
 8007c4e:	3304      	adds	r3, #4
 8007c50:	60fb      	str	r3, [r7, #12]
 8007c52:	e00c      	b.n	8007c6e <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007c54:	78fb      	ldrb	r3, [r7, #3]
 8007c56:	f003 020f 	and.w	r2, r3, #15
 8007c5a:	4613      	mov	r3, r2
 8007c5c:	00db      	lsls	r3, r3, #3
 8007c5e:	4413      	add	r3, r2
 8007c60:	009b      	lsls	r3, r3, #2
 8007c62:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007c66:	687a      	ldr	r2, [r7, #4]
 8007c68:	4413      	add	r3, r2
 8007c6a:	3304      	adds	r3, #4
 8007c6c:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	68f9      	ldr	r1, [r7, #12]
 8007c74:	4618      	mov	r0, r3
 8007c76:	f007 fb3b 	bl	800f2f0 <USB_EPStopXfer>
 8007c7a:	4603      	mov	r3, r0
 8007c7c:	72fb      	strb	r3, [r7, #11]

  return ret;
 8007c7e:	7afb      	ldrb	r3, [r7, #11]
}
 8007c80:	4618      	mov	r0, r3
 8007c82:	3710      	adds	r7, #16
 8007c84:	46bd      	mov	sp, r7
 8007c86:	bd80      	pop	{r7, pc}

08007c88 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007c88:	b580      	push	{r7, lr}
 8007c8a:	b08a      	sub	sp, #40	@ 0x28
 8007c8c:	af02      	add	r7, sp, #8
 8007c8e:	6078      	str	r0, [r7, #4]
 8007c90:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c98:	697b      	ldr	r3, [r7, #20]
 8007c9a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8007c9c:	683a      	ldr	r2, [r7, #0]
 8007c9e:	4613      	mov	r3, r2
 8007ca0:	00db      	lsls	r3, r3, #3
 8007ca2:	4413      	add	r3, r2
 8007ca4:	009b      	lsls	r3, r3, #2
 8007ca6:	3310      	adds	r3, #16
 8007ca8:	687a      	ldr	r2, [r7, #4]
 8007caa:	4413      	add	r3, r2
 8007cac:	3304      	adds	r3, #4
 8007cae:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	695a      	ldr	r2, [r3, #20]
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	691b      	ldr	r3, [r3, #16]
 8007cb8:	429a      	cmp	r2, r3
 8007cba:	d901      	bls.n	8007cc0 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8007cbc:	2301      	movs	r3, #1
 8007cbe:	e06b      	b.n	8007d98 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	691a      	ldr	r2, [r3, #16]
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	695b      	ldr	r3, [r3, #20]
 8007cc8:	1ad3      	subs	r3, r2, r3
 8007cca:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	689b      	ldr	r3, [r3, #8]
 8007cd0:	69fa      	ldr	r2, [r7, #28]
 8007cd2:	429a      	cmp	r2, r3
 8007cd4:	d902      	bls.n	8007cdc <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	689b      	ldr	r3, [r3, #8]
 8007cda:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8007cdc:	69fb      	ldr	r3, [r7, #28]
 8007cde:	3303      	adds	r3, #3
 8007ce0:	089b      	lsrs	r3, r3, #2
 8007ce2:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007ce4:	e02a      	b.n	8007d3c <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	691a      	ldr	r2, [r3, #16]
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	695b      	ldr	r3, [r3, #20]
 8007cee:	1ad3      	subs	r3, r2, r3
 8007cf0:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	689b      	ldr	r3, [r3, #8]
 8007cf6:	69fa      	ldr	r2, [r7, #28]
 8007cf8:	429a      	cmp	r2, r3
 8007cfa:	d902      	bls.n	8007d02 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	689b      	ldr	r3, [r3, #8]
 8007d00:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8007d02:	69fb      	ldr	r3, [r7, #28]
 8007d04:	3303      	adds	r3, #3
 8007d06:	089b      	lsrs	r3, r3, #2
 8007d08:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	68d9      	ldr	r1, [r3, #12]
 8007d0e:	683b      	ldr	r3, [r7, #0]
 8007d10:	b2da      	uxtb	r2, r3
 8007d12:	69fb      	ldr	r3, [r7, #28]
 8007d14:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8007d1a:	9300      	str	r3, [sp, #0]
 8007d1c:	4603      	mov	r3, r0
 8007d1e:	6978      	ldr	r0, [r7, #20]
 8007d20:	f007 fb90 	bl	800f444 <USB_WritePacket>

    ep->xfer_buff  += len;
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	68da      	ldr	r2, [r3, #12]
 8007d28:	69fb      	ldr	r3, [r7, #28]
 8007d2a:	441a      	add	r2, r3
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	695a      	ldr	r2, [r3, #20]
 8007d34:	69fb      	ldr	r3, [r7, #28]
 8007d36:	441a      	add	r2, r3
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007d3c:	683b      	ldr	r3, [r7, #0]
 8007d3e:	015a      	lsls	r2, r3, #5
 8007d40:	693b      	ldr	r3, [r7, #16]
 8007d42:	4413      	add	r3, r2
 8007d44:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d48:	699b      	ldr	r3, [r3, #24]
 8007d4a:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007d4c:	69ba      	ldr	r2, [r7, #24]
 8007d4e:	429a      	cmp	r2, r3
 8007d50:	d809      	bhi.n	8007d66 <PCD_WriteEmptyTxFifo+0xde>
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	695a      	ldr	r2, [r3, #20]
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007d5a:	429a      	cmp	r2, r3
 8007d5c:	d203      	bcs.n	8007d66 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	691b      	ldr	r3, [r3, #16]
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d1bf      	bne.n	8007ce6 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	691a      	ldr	r2, [r3, #16]
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	695b      	ldr	r3, [r3, #20]
 8007d6e:	429a      	cmp	r2, r3
 8007d70:	d811      	bhi.n	8007d96 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007d72:	683b      	ldr	r3, [r7, #0]
 8007d74:	f003 030f 	and.w	r3, r3, #15
 8007d78:	2201      	movs	r2, #1
 8007d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8007d7e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007d80:	693b      	ldr	r3, [r7, #16]
 8007d82:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007d86:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007d88:	68bb      	ldr	r3, [r7, #8]
 8007d8a:	43db      	mvns	r3, r3
 8007d8c:	6939      	ldr	r1, [r7, #16]
 8007d8e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007d92:	4013      	ands	r3, r2
 8007d94:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8007d96:	2300      	movs	r3, #0
}
 8007d98:	4618      	mov	r0, r3
 8007d9a:	3720      	adds	r7, #32
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	bd80      	pop	{r7, pc}

08007da0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007da0:	b580      	push	{r7, lr}
 8007da2:	b088      	sub	sp, #32
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	6078      	str	r0, [r7, #4]
 8007da8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007db0:	69fb      	ldr	r3, [r7, #28]
 8007db2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8007db4:	69fb      	ldr	r3, [r7, #28]
 8007db6:	333c      	adds	r3, #60	@ 0x3c
 8007db8:	3304      	adds	r3, #4
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007dbe:	683b      	ldr	r3, [r7, #0]
 8007dc0:	015a      	lsls	r2, r3, #5
 8007dc2:	69bb      	ldr	r3, [r7, #24]
 8007dc4:	4413      	add	r3, r2
 8007dc6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007dca:	689b      	ldr	r3, [r3, #8]
 8007dcc:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	799b      	ldrb	r3, [r3, #6]
 8007dd2:	2b01      	cmp	r3, #1
 8007dd4:	d17b      	bne.n	8007ece <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8007dd6:	693b      	ldr	r3, [r7, #16]
 8007dd8:	f003 0308 	and.w	r3, r3, #8
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d015      	beq.n	8007e0c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007de0:	697b      	ldr	r3, [r7, #20]
 8007de2:	4a61      	ldr	r2, [pc, #388]	@ (8007f68 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8007de4:	4293      	cmp	r3, r2
 8007de6:	f240 80b9 	bls.w	8007f5c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007dea:	693b      	ldr	r3, [r7, #16]
 8007dec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	f000 80b3 	beq.w	8007f5c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007df6:	683b      	ldr	r3, [r7, #0]
 8007df8:	015a      	lsls	r2, r3, #5
 8007dfa:	69bb      	ldr	r3, [r7, #24]
 8007dfc:	4413      	add	r3, r2
 8007dfe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e02:	461a      	mov	r2, r3
 8007e04:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007e08:	6093      	str	r3, [r2, #8]
 8007e0a:	e0a7      	b.n	8007f5c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8007e0c:	693b      	ldr	r3, [r7, #16]
 8007e0e:	f003 0320 	and.w	r3, r3, #32
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d009      	beq.n	8007e2a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007e16:	683b      	ldr	r3, [r7, #0]
 8007e18:	015a      	lsls	r2, r3, #5
 8007e1a:	69bb      	ldr	r3, [r7, #24]
 8007e1c:	4413      	add	r3, r2
 8007e1e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e22:	461a      	mov	r2, r3
 8007e24:	2320      	movs	r3, #32
 8007e26:	6093      	str	r3, [r2, #8]
 8007e28:	e098      	b.n	8007f5c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8007e2a:	693b      	ldr	r3, [r7, #16]
 8007e2c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	f040 8093 	bne.w	8007f5c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007e36:	697b      	ldr	r3, [r7, #20]
 8007e38:	4a4b      	ldr	r2, [pc, #300]	@ (8007f68 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8007e3a:	4293      	cmp	r3, r2
 8007e3c:	d90f      	bls.n	8007e5e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007e3e:	693b      	ldr	r3, [r7, #16]
 8007e40:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d00a      	beq.n	8007e5e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007e48:	683b      	ldr	r3, [r7, #0]
 8007e4a:	015a      	lsls	r2, r3, #5
 8007e4c:	69bb      	ldr	r3, [r7, #24]
 8007e4e:	4413      	add	r3, r2
 8007e50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e54:	461a      	mov	r2, r3
 8007e56:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007e5a:	6093      	str	r3, [r2, #8]
 8007e5c:	e07e      	b.n	8007f5c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8007e5e:	683a      	ldr	r2, [r7, #0]
 8007e60:	4613      	mov	r3, r2
 8007e62:	00db      	lsls	r3, r3, #3
 8007e64:	4413      	add	r3, r2
 8007e66:	009b      	lsls	r3, r3, #2
 8007e68:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007e6c:	687a      	ldr	r2, [r7, #4]
 8007e6e:	4413      	add	r3, r2
 8007e70:	3304      	adds	r3, #4
 8007e72:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	6a1a      	ldr	r2, [r3, #32]
 8007e78:	683b      	ldr	r3, [r7, #0]
 8007e7a:	0159      	lsls	r1, r3, #5
 8007e7c:	69bb      	ldr	r3, [r7, #24]
 8007e7e:	440b      	add	r3, r1
 8007e80:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e84:	691b      	ldr	r3, [r3, #16]
 8007e86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007e8a:	1ad2      	subs	r2, r2, r3
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8007e90:	683b      	ldr	r3, [r7, #0]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d114      	bne.n	8007ec0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	691b      	ldr	r3, [r3, #16]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d109      	bne.n	8007eb2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	6818      	ldr	r0, [r3, #0]
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007ea8:	461a      	mov	r2, r3
 8007eaa:	2101      	movs	r1, #1
 8007eac:	f007 fd62 	bl	800f974 <USB_EP0_OutStart>
 8007eb0:	e006      	b.n	8007ec0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	68da      	ldr	r2, [r3, #12]
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	695b      	ldr	r3, [r3, #20]
 8007eba:	441a      	add	r2, r3
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007ec0:	683b      	ldr	r3, [r7, #0]
 8007ec2:	b2db      	uxtb	r3, r3
 8007ec4:	4619      	mov	r1, r3
 8007ec6:	6878      	ldr	r0, [r7, #4]
 8007ec8:	f00a f87e 	bl	8011fc8 <HAL_PCD_DataOutStageCallback>
 8007ecc:	e046      	b.n	8007f5c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8007ece:	697b      	ldr	r3, [r7, #20]
 8007ed0:	4a26      	ldr	r2, [pc, #152]	@ (8007f6c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8007ed2:	4293      	cmp	r3, r2
 8007ed4:	d124      	bne.n	8007f20 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8007ed6:	693b      	ldr	r3, [r7, #16]
 8007ed8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d00a      	beq.n	8007ef6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007ee0:	683b      	ldr	r3, [r7, #0]
 8007ee2:	015a      	lsls	r2, r3, #5
 8007ee4:	69bb      	ldr	r3, [r7, #24]
 8007ee6:	4413      	add	r3, r2
 8007ee8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007eec:	461a      	mov	r2, r3
 8007eee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007ef2:	6093      	str	r3, [r2, #8]
 8007ef4:	e032      	b.n	8007f5c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8007ef6:	693b      	ldr	r3, [r7, #16]
 8007ef8:	f003 0320 	and.w	r3, r3, #32
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d008      	beq.n	8007f12 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007f00:	683b      	ldr	r3, [r7, #0]
 8007f02:	015a      	lsls	r2, r3, #5
 8007f04:	69bb      	ldr	r3, [r7, #24]
 8007f06:	4413      	add	r3, r2
 8007f08:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f0c:	461a      	mov	r2, r3
 8007f0e:	2320      	movs	r3, #32
 8007f10:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007f12:	683b      	ldr	r3, [r7, #0]
 8007f14:	b2db      	uxtb	r3, r3
 8007f16:	4619      	mov	r1, r3
 8007f18:	6878      	ldr	r0, [r7, #4]
 8007f1a:	f00a f855 	bl	8011fc8 <HAL_PCD_DataOutStageCallback>
 8007f1e:	e01d      	b.n	8007f5c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8007f20:	683b      	ldr	r3, [r7, #0]
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d114      	bne.n	8007f50 <PCD_EP_OutXfrComplete_int+0x1b0>
 8007f26:	6879      	ldr	r1, [r7, #4]
 8007f28:	683a      	ldr	r2, [r7, #0]
 8007f2a:	4613      	mov	r3, r2
 8007f2c:	00db      	lsls	r3, r3, #3
 8007f2e:	4413      	add	r3, r2
 8007f30:	009b      	lsls	r3, r3, #2
 8007f32:	440b      	add	r3, r1
 8007f34:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d108      	bne.n	8007f50 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	6818      	ldr	r0, [r3, #0]
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007f48:	461a      	mov	r2, r3
 8007f4a:	2100      	movs	r1, #0
 8007f4c:	f007 fd12 	bl	800f974 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007f50:	683b      	ldr	r3, [r7, #0]
 8007f52:	b2db      	uxtb	r3, r3
 8007f54:	4619      	mov	r1, r3
 8007f56:	6878      	ldr	r0, [r7, #4]
 8007f58:	f00a f836 	bl	8011fc8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8007f5c:	2300      	movs	r3, #0
}
 8007f5e:	4618      	mov	r0, r3
 8007f60:	3720      	adds	r7, #32
 8007f62:	46bd      	mov	sp, r7
 8007f64:	bd80      	pop	{r7, pc}
 8007f66:	bf00      	nop
 8007f68:	4f54300a 	.word	0x4f54300a
 8007f6c:	4f54310a 	.word	0x4f54310a

08007f70 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007f70:	b580      	push	{r7, lr}
 8007f72:	b086      	sub	sp, #24
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	6078      	str	r0, [r7, #4]
 8007f78:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f80:	697b      	ldr	r3, [r7, #20]
 8007f82:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8007f84:	697b      	ldr	r3, [r7, #20]
 8007f86:	333c      	adds	r3, #60	@ 0x3c
 8007f88:	3304      	adds	r3, #4
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007f8e:	683b      	ldr	r3, [r7, #0]
 8007f90:	015a      	lsls	r2, r3, #5
 8007f92:	693b      	ldr	r3, [r7, #16]
 8007f94:	4413      	add	r3, r2
 8007f96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f9a:	689b      	ldr	r3, [r3, #8]
 8007f9c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	4a15      	ldr	r2, [pc, #84]	@ (8007ff8 <PCD_EP_OutSetupPacket_int+0x88>)
 8007fa2:	4293      	cmp	r3, r2
 8007fa4:	d90e      	bls.n	8007fc4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007fa6:	68bb      	ldr	r3, [r7, #8]
 8007fa8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d009      	beq.n	8007fc4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007fb0:	683b      	ldr	r3, [r7, #0]
 8007fb2:	015a      	lsls	r2, r3, #5
 8007fb4:	693b      	ldr	r3, [r7, #16]
 8007fb6:	4413      	add	r3, r2
 8007fb8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007fbc:	461a      	mov	r2, r3
 8007fbe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007fc2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8007fc4:	6878      	ldr	r0, [r7, #4]
 8007fc6:	f009 ffed 	bl	8011fa4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	4a0a      	ldr	r2, [pc, #40]	@ (8007ff8 <PCD_EP_OutSetupPacket_int+0x88>)
 8007fce:	4293      	cmp	r3, r2
 8007fd0:	d90c      	bls.n	8007fec <PCD_EP_OutSetupPacket_int+0x7c>
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	799b      	ldrb	r3, [r3, #6]
 8007fd6:	2b01      	cmp	r3, #1
 8007fd8:	d108      	bne.n	8007fec <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	6818      	ldr	r0, [r3, #0]
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007fe4:	461a      	mov	r2, r3
 8007fe6:	2101      	movs	r1, #1
 8007fe8:	f007 fcc4 	bl	800f974 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8007fec:	2300      	movs	r3, #0
}
 8007fee:	4618      	mov	r0, r3
 8007ff0:	3718      	adds	r7, #24
 8007ff2:	46bd      	mov	sp, r7
 8007ff4:	bd80      	pop	{r7, pc}
 8007ff6:	bf00      	nop
 8007ff8:	4f54300a 	.word	0x4f54300a

08007ffc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8007ffc:	b480      	push	{r7}
 8007ffe:	b085      	sub	sp, #20
 8008000:	af00      	add	r7, sp, #0
 8008002:	6078      	str	r0, [r7, #4]
 8008004:	460b      	mov	r3, r1
 8008006:	70fb      	strb	r3, [r7, #3]
 8008008:	4613      	mov	r3, r2
 800800a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008012:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8008014:	78fb      	ldrb	r3, [r7, #3]
 8008016:	2b00      	cmp	r3, #0
 8008018:	d107      	bne.n	800802a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800801a:	883b      	ldrh	r3, [r7, #0]
 800801c:	0419      	lsls	r1, r3, #16
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	68ba      	ldr	r2, [r7, #8]
 8008024:	430a      	orrs	r2, r1
 8008026:	629a      	str	r2, [r3, #40]	@ 0x28
 8008028:	e028      	b.n	800807c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008030:	0c1b      	lsrs	r3, r3, #16
 8008032:	68ba      	ldr	r2, [r7, #8]
 8008034:	4413      	add	r3, r2
 8008036:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8008038:	2300      	movs	r3, #0
 800803a:	73fb      	strb	r3, [r7, #15]
 800803c:	e00d      	b.n	800805a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681a      	ldr	r2, [r3, #0]
 8008042:	7bfb      	ldrb	r3, [r7, #15]
 8008044:	3340      	adds	r3, #64	@ 0x40
 8008046:	009b      	lsls	r3, r3, #2
 8008048:	4413      	add	r3, r2
 800804a:	685b      	ldr	r3, [r3, #4]
 800804c:	0c1b      	lsrs	r3, r3, #16
 800804e:	68ba      	ldr	r2, [r7, #8]
 8008050:	4413      	add	r3, r2
 8008052:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8008054:	7bfb      	ldrb	r3, [r7, #15]
 8008056:	3301      	adds	r3, #1
 8008058:	73fb      	strb	r3, [r7, #15]
 800805a:	7bfa      	ldrb	r2, [r7, #15]
 800805c:	78fb      	ldrb	r3, [r7, #3]
 800805e:	3b01      	subs	r3, #1
 8008060:	429a      	cmp	r2, r3
 8008062:	d3ec      	bcc.n	800803e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8008064:	883b      	ldrh	r3, [r7, #0]
 8008066:	0418      	lsls	r0, r3, #16
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	6819      	ldr	r1, [r3, #0]
 800806c:	78fb      	ldrb	r3, [r7, #3]
 800806e:	3b01      	subs	r3, #1
 8008070:	68ba      	ldr	r2, [r7, #8]
 8008072:	4302      	orrs	r2, r0
 8008074:	3340      	adds	r3, #64	@ 0x40
 8008076:	009b      	lsls	r3, r3, #2
 8008078:	440b      	add	r3, r1
 800807a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800807c:	2300      	movs	r3, #0
}
 800807e:	4618      	mov	r0, r3
 8008080:	3714      	adds	r7, #20
 8008082:	46bd      	mov	sp, r7
 8008084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008088:	4770      	bx	lr

0800808a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800808a:	b480      	push	{r7}
 800808c:	b083      	sub	sp, #12
 800808e:	af00      	add	r7, sp, #0
 8008090:	6078      	str	r0, [r7, #4]
 8008092:	460b      	mov	r3, r1
 8008094:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	887a      	ldrh	r2, [r7, #2]
 800809c:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800809e:	2300      	movs	r3, #0
}
 80080a0:	4618      	mov	r0, r3
 80080a2:	370c      	adds	r7, #12
 80080a4:	46bd      	mov	sp, r7
 80080a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080aa:	4770      	bx	lr

080080ac <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80080ac:	b480      	push	{r7}
 80080ae:	b085      	sub	sp, #20
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	2201      	movs	r2, #1
 80080be:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	2200      	movs	r2, #0
 80080c6:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	699b      	ldr	r3, [r3, #24]
 80080ce:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80080da:	4b05      	ldr	r3, [pc, #20]	@ (80080f0 <HAL_PCDEx_ActivateLPM+0x44>)
 80080dc:	4313      	orrs	r3, r2
 80080de:	68fa      	ldr	r2, [r7, #12]
 80080e0:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80080e2:	2300      	movs	r3, #0
}
 80080e4:	4618      	mov	r0, r3
 80080e6:	3714      	adds	r7, #20
 80080e8:	46bd      	mov	sp, r7
 80080ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ee:	4770      	bx	lr
 80080f0:	10000003 	.word	0x10000003

080080f4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80080f4:	b480      	push	{r7}
 80080f6:	b083      	sub	sp, #12
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	6078      	str	r0, [r7, #4]
 80080fc:	460b      	mov	r3, r1
 80080fe:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8008100:	bf00      	nop
 8008102:	370c      	adds	r7, #12
 8008104:	46bd      	mov	sp, r7
 8008106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810a:	4770      	bx	lr

0800810c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800810c:	b580      	push	{r7, lr}
 800810e:	b084      	sub	sp, #16
 8008110:	af00      	add	r7, sp, #0
 8008112:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8008114:	4b29      	ldr	r3, [pc, #164]	@ (80081bc <HAL_PWREx_ConfigSupply+0xb0>)
 8008116:	68db      	ldr	r3, [r3, #12]
 8008118:	f003 0307 	and.w	r3, r3, #7
 800811c:	2b06      	cmp	r3, #6
 800811e:	d00a      	beq.n	8008136 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8008120:	4b26      	ldr	r3, [pc, #152]	@ (80081bc <HAL_PWREx_ConfigSupply+0xb0>)
 8008122:	68db      	ldr	r3, [r3, #12]
 8008124:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008128:	687a      	ldr	r2, [r7, #4]
 800812a:	429a      	cmp	r2, r3
 800812c:	d001      	beq.n	8008132 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800812e:	2301      	movs	r3, #1
 8008130:	e040      	b.n	80081b4 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8008132:	2300      	movs	r3, #0
 8008134:	e03e      	b.n	80081b4 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8008136:	4b21      	ldr	r3, [pc, #132]	@ (80081bc <HAL_PWREx_ConfigSupply+0xb0>)
 8008138:	68db      	ldr	r3, [r3, #12]
 800813a:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 800813e:	491f      	ldr	r1, [pc, #124]	@ (80081bc <HAL_PWREx_ConfigSupply+0xb0>)
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	4313      	orrs	r3, r2
 8008144:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8008146:	f7fa fd43 	bl	8002bd0 <HAL_GetTick>
 800814a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800814c:	e009      	b.n	8008162 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800814e:	f7fa fd3f 	bl	8002bd0 <HAL_GetTick>
 8008152:	4602      	mov	r2, r0
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	1ad3      	subs	r3, r2, r3
 8008158:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800815c:	d901      	bls.n	8008162 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800815e:	2301      	movs	r3, #1
 8008160:	e028      	b.n	80081b4 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008162:	4b16      	ldr	r3, [pc, #88]	@ (80081bc <HAL_PWREx_ConfigSupply+0xb0>)
 8008164:	685b      	ldr	r3, [r3, #4]
 8008166:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800816a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800816e:	d1ee      	bne.n	800814e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	2b1e      	cmp	r3, #30
 8008174:	d008      	beq.n	8008188 <HAL_PWREx_ConfigSupply+0x7c>
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	2b2e      	cmp	r3, #46	@ 0x2e
 800817a:	d005      	beq.n	8008188 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	2b1d      	cmp	r3, #29
 8008180:	d002      	beq.n	8008188 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	2b2d      	cmp	r3, #45	@ 0x2d
 8008186:	d114      	bne.n	80081b2 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8008188:	f7fa fd22 	bl	8002bd0 <HAL_GetTick>
 800818c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800818e:	e009      	b.n	80081a4 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8008190:	f7fa fd1e 	bl	8002bd0 <HAL_GetTick>
 8008194:	4602      	mov	r2, r0
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	1ad3      	subs	r3, r2, r3
 800819a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800819e:	d901      	bls.n	80081a4 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80081a0:	2301      	movs	r3, #1
 80081a2:	e007      	b.n	80081b4 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80081a4:	4b05      	ldr	r3, [pc, #20]	@ (80081bc <HAL_PWREx_ConfigSupply+0xb0>)
 80081a6:	68db      	ldr	r3, [r3, #12]
 80081a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80081ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80081b0:	d1ee      	bne.n	8008190 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80081b2:	2300      	movs	r3, #0
}
 80081b4:	4618      	mov	r0, r3
 80081b6:	3710      	adds	r7, #16
 80081b8:	46bd      	mov	sp, r7
 80081ba:	bd80      	pop	{r7, pc}
 80081bc:	58024800 	.word	0x58024800

080081c0 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80081c0:	b480      	push	{r7}
 80081c2:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80081c4:	4b05      	ldr	r3, [pc, #20]	@ (80081dc <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80081c6:	68db      	ldr	r3, [r3, #12]
 80081c8:	4a04      	ldr	r2, [pc, #16]	@ (80081dc <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80081ca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80081ce:	60d3      	str	r3, [r2, #12]
}
 80081d0:	bf00      	nop
 80081d2:	46bd      	mov	sp, r7
 80081d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d8:	4770      	bx	lr
 80081da:	bf00      	nop
 80081dc:	58024800 	.word	0x58024800

080081e0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80081e0:	b580      	push	{r7, lr}
 80081e2:	b08c      	sub	sp, #48	@ 0x30
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d102      	bne.n	80081f4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80081ee:	2301      	movs	r3, #1
 80081f0:	f000 bc48 	b.w	8008a84 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	f003 0301 	and.w	r3, r3, #1
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	f000 8088 	beq.w	8008312 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008202:	4b99      	ldr	r3, [pc, #612]	@ (8008468 <HAL_RCC_OscConfig+0x288>)
 8008204:	691b      	ldr	r3, [r3, #16]
 8008206:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800820a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800820c:	4b96      	ldr	r3, [pc, #600]	@ (8008468 <HAL_RCC_OscConfig+0x288>)
 800820e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008210:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8008212:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008214:	2b10      	cmp	r3, #16
 8008216:	d007      	beq.n	8008228 <HAL_RCC_OscConfig+0x48>
 8008218:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800821a:	2b18      	cmp	r3, #24
 800821c:	d111      	bne.n	8008242 <HAL_RCC_OscConfig+0x62>
 800821e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008220:	f003 0303 	and.w	r3, r3, #3
 8008224:	2b02      	cmp	r3, #2
 8008226:	d10c      	bne.n	8008242 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008228:	4b8f      	ldr	r3, [pc, #572]	@ (8008468 <HAL_RCC_OscConfig+0x288>)
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008230:	2b00      	cmp	r3, #0
 8008232:	d06d      	beq.n	8008310 <HAL_RCC_OscConfig+0x130>
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	685b      	ldr	r3, [r3, #4]
 8008238:	2b00      	cmp	r3, #0
 800823a:	d169      	bne.n	8008310 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800823c:	2301      	movs	r3, #1
 800823e:	f000 bc21 	b.w	8008a84 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	685b      	ldr	r3, [r3, #4]
 8008246:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800824a:	d106      	bne.n	800825a <HAL_RCC_OscConfig+0x7a>
 800824c:	4b86      	ldr	r3, [pc, #536]	@ (8008468 <HAL_RCC_OscConfig+0x288>)
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	4a85      	ldr	r2, [pc, #532]	@ (8008468 <HAL_RCC_OscConfig+0x288>)
 8008252:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008256:	6013      	str	r3, [r2, #0]
 8008258:	e02e      	b.n	80082b8 <HAL_RCC_OscConfig+0xd8>
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	685b      	ldr	r3, [r3, #4]
 800825e:	2b00      	cmp	r3, #0
 8008260:	d10c      	bne.n	800827c <HAL_RCC_OscConfig+0x9c>
 8008262:	4b81      	ldr	r3, [pc, #516]	@ (8008468 <HAL_RCC_OscConfig+0x288>)
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	4a80      	ldr	r2, [pc, #512]	@ (8008468 <HAL_RCC_OscConfig+0x288>)
 8008268:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800826c:	6013      	str	r3, [r2, #0]
 800826e:	4b7e      	ldr	r3, [pc, #504]	@ (8008468 <HAL_RCC_OscConfig+0x288>)
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	4a7d      	ldr	r2, [pc, #500]	@ (8008468 <HAL_RCC_OscConfig+0x288>)
 8008274:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008278:	6013      	str	r3, [r2, #0]
 800827a:	e01d      	b.n	80082b8 <HAL_RCC_OscConfig+0xd8>
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	685b      	ldr	r3, [r3, #4]
 8008280:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008284:	d10c      	bne.n	80082a0 <HAL_RCC_OscConfig+0xc0>
 8008286:	4b78      	ldr	r3, [pc, #480]	@ (8008468 <HAL_RCC_OscConfig+0x288>)
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	4a77      	ldr	r2, [pc, #476]	@ (8008468 <HAL_RCC_OscConfig+0x288>)
 800828c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008290:	6013      	str	r3, [r2, #0]
 8008292:	4b75      	ldr	r3, [pc, #468]	@ (8008468 <HAL_RCC_OscConfig+0x288>)
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	4a74      	ldr	r2, [pc, #464]	@ (8008468 <HAL_RCC_OscConfig+0x288>)
 8008298:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800829c:	6013      	str	r3, [r2, #0]
 800829e:	e00b      	b.n	80082b8 <HAL_RCC_OscConfig+0xd8>
 80082a0:	4b71      	ldr	r3, [pc, #452]	@ (8008468 <HAL_RCC_OscConfig+0x288>)
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	4a70      	ldr	r2, [pc, #448]	@ (8008468 <HAL_RCC_OscConfig+0x288>)
 80082a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80082aa:	6013      	str	r3, [r2, #0]
 80082ac:	4b6e      	ldr	r3, [pc, #440]	@ (8008468 <HAL_RCC_OscConfig+0x288>)
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	4a6d      	ldr	r2, [pc, #436]	@ (8008468 <HAL_RCC_OscConfig+0x288>)
 80082b2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80082b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	685b      	ldr	r3, [r3, #4]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d013      	beq.n	80082e8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80082c0:	f7fa fc86 	bl	8002bd0 <HAL_GetTick>
 80082c4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80082c6:	e008      	b.n	80082da <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80082c8:	f7fa fc82 	bl	8002bd0 <HAL_GetTick>
 80082cc:	4602      	mov	r2, r0
 80082ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082d0:	1ad3      	subs	r3, r2, r3
 80082d2:	2b64      	cmp	r3, #100	@ 0x64
 80082d4:	d901      	bls.n	80082da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80082d6:	2303      	movs	r3, #3
 80082d8:	e3d4      	b.n	8008a84 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80082da:	4b63      	ldr	r3, [pc, #396]	@ (8008468 <HAL_RCC_OscConfig+0x288>)
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d0f0      	beq.n	80082c8 <HAL_RCC_OscConfig+0xe8>
 80082e6:	e014      	b.n	8008312 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80082e8:	f7fa fc72 	bl	8002bd0 <HAL_GetTick>
 80082ec:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80082ee:	e008      	b.n	8008302 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80082f0:	f7fa fc6e 	bl	8002bd0 <HAL_GetTick>
 80082f4:	4602      	mov	r2, r0
 80082f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082f8:	1ad3      	subs	r3, r2, r3
 80082fa:	2b64      	cmp	r3, #100	@ 0x64
 80082fc:	d901      	bls.n	8008302 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80082fe:	2303      	movs	r3, #3
 8008300:	e3c0      	b.n	8008a84 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008302:	4b59      	ldr	r3, [pc, #356]	@ (8008468 <HAL_RCC_OscConfig+0x288>)
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800830a:	2b00      	cmp	r3, #0
 800830c:	d1f0      	bne.n	80082f0 <HAL_RCC_OscConfig+0x110>
 800830e:	e000      	b.n	8008312 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008310:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	f003 0302 	and.w	r3, r3, #2
 800831a:	2b00      	cmp	r3, #0
 800831c:	f000 80ca 	beq.w	80084b4 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008320:	4b51      	ldr	r3, [pc, #324]	@ (8008468 <HAL_RCC_OscConfig+0x288>)
 8008322:	691b      	ldr	r3, [r3, #16]
 8008324:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008328:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800832a:	4b4f      	ldr	r3, [pc, #316]	@ (8008468 <HAL_RCC_OscConfig+0x288>)
 800832c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800832e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8008330:	6a3b      	ldr	r3, [r7, #32]
 8008332:	2b00      	cmp	r3, #0
 8008334:	d007      	beq.n	8008346 <HAL_RCC_OscConfig+0x166>
 8008336:	6a3b      	ldr	r3, [r7, #32]
 8008338:	2b18      	cmp	r3, #24
 800833a:	d156      	bne.n	80083ea <HAL_RCC_OscConfig+0x20a>
 800833c:	69fb      	ldr	r3, [r7, #28]
 800833e:	f003 0303 	and.w	r3, r3, #3
 8008342:	2b00      	cmp	r3, #0
 8008344:	d151      	bne.n	80083ea <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008346:	4b48      	ldr	r3, [pc, #288]	@ (8008468 <HAL_RCC_OscConfig+0x288>)
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	f003 0304 	and.w	r3, r3, #4
 800834e:	2b00      	cmp	r3, #0
 8008350:	d005      	beq.n	800835e <HAL_RCC_OscConfig+0x17e>
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	68db      	ldr	r3, [r3, #12]
 8008356:	2b00      	cmp	r3, #0
 8008358:	d101      	bne.n	800835e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800835a:	2301      	movs	r3, #1
 800835c:	e392      	b.n	8008a84 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800835e:	4b42      	ldr	r3, [pc, #264]	@ (8008468 <HAL_RCC_OscConfig+0x288>)
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	f023 0219 	bic.w	r2, r3, #25
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	68db      	ldr	r3, [r3, #12]
 800836a:	493f      	ldr	r1, [pc, #252]	@ (8008468 <HAL_RCC_OscConfig+0x288>)
 800836c:	4313      	orrs	r3, r2
 800836e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008370:	f7fa fc2e 	bl	8002bd0 <HAL_GetTick>
 8008374:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008376:	e008      	b.n	800838a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008378:	f7fa fc2a 	bl	8002bd0 <HAL_GetTick>
 800837c:	4602      	mov	r2, r0
 800837e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008380:	1ad3      	subs	r3, r2, r3
 8008382:	2b02      	cmp	r3, #2
 8008384:	d901      	bls.n	800838a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8008386:	2303      	movs	r3, #3
 8008388:	e37c      	b.n	8008a84 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800838a:	4b37      	ldr	r3, [pc, #220]	@ (8008468 <HAL_RCC_OscConfig+0x288>)
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	f003 0304 	and.w	r3, r3, #4
 8008392:	2b00      	cmp	r3, #0
 8008394:	d0f0      	beq.n	8008378 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008396:	f7fa fc4b 	bl	8002c30 <HAL_GetREVID>
 800839a:	4603      	mov	r3, r0
 800839c:	f241 0203 	movw	r2, #4099	@ 0x1003
 80083a0:	4293      	cmp	r3, r2
 80083a2:	d817      	bhi.n	80083d4 <HAL_RCC_OscConfig+0x1f4>
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	691b      	ldr	r3, [r3, #16]
 80083a8:	2b40      	cmp	r3, #64	@ 0x40
 80083aa:	d108      	bne.n	80083be <HAL_RCC_OscConfig+0x1de>
 80083ac:	4b2e      	ldr	r3, [pc, #184]	@ (8008468 <HAL_RCC_OscConfig+0x288>)
 80083ae:	685b      	ldr	r3, [r3, #4]
 80083b0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80083b4:	4a2c      	ldr	r2, [pc, #176]	@ (8008468 <HAL_RCC_OscConfig+0x288>)
 80083b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80083ba:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80083bc:	e07a      	b.n	80084b4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80083be:	4b2a      	ldr	r3, [pc, #168]	@ (8008468 <HAL_RCC_OscConfig+0x288>)
 80083c0:	685b      	ldr	r3, [r3, #4]
 80083c2:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	691b      	ldr	r3, [r3, #16]
 80083ca:	031b      	lsls	r3, r3, #12
 80083cc:	4926      	ldr	r1, [pc, #152]	@ (8008468 <HAL_RCC_OscConfig+0x288>)
 80083ce:	4313      	orrs	r3, r2
 80083d0:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80083d2:	e06f      	b.n	80084b4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80083d4:	4b24      	ldr	r3, [pc, #144]	@ (8008468 <HAL_RCC_OscConfig+0x288>)
 80083d6:	685b      	ldr	r3, [r3, #4]
 80083d8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	691b      	ldr	r3, [r3, #16]
 80083e0:	061b      	lsls	r3, r3, #24
 80083e2:	4921      	ldr	r1, [pc, #132]	@ (8008468 <HAL_RCC_OscConfig+0x288>)
 80083e4:	4313      	orrs	r3, r2
 80083e6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80083e8:	e064      	b.n	80084b4 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	68db      	ldr	r3, [r3, #12]
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d047      	beq.n	8008482 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80083f2:	4b1d      	ldr	r3, [pc, #116]	@ (8008468 <HAL_RCC_OscConfig+0x288>)
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	f023 0219 	bic.w	r2, r3, #25
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	68db      	ldr	r3, [r3, #12]
 80083fe:	491a      	ldr	r1, [pc, #104]	@ (8008468 <HAL_RCC_OscConfig+0x288>)
 8008400:	4313      	orrs	r3, r2
 8008402:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008404:	f7fa fbe4 	bl	8002bd0 <HAL_GetTick>
 8008408:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800840a:	e008      	b.n	800841e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800840c:	f7fa fbe0 	bl	8002bd0 <HAL_GetTick>
 8008410:	4602      	mov	r2, r0
 8008412:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008414:	1ad3      	subs	r3, r2, r3
 8008416:	2b02      	cmp	r3, #2
 8008418:	d901      	bls.n	800841e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800841a:	2303      	movs	r3, #3
 800841c:	e332      	b.n	8008a84 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800841e:	4b12      	ldr	r3, [pc, #72]	@ (8008468 <HAL_RCC_OscConfig+0x288>)
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	f003 0304 	and.w	r3, r3, #4
 8008426:	2b00      	cmp	r3, #0
 8008428:	d0f0      	beq.n	800840c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800842a:	f7fa fc01 	bl	8002c30 <HAL_GetREVID>
 800842e:	4603      	mov	r3, r0
 8008430:	f241 0203 	movw	r2, #4099	@ 0x1003
 8008434:	4293      	cmp	r3, r2
 8008436:	d819      	bhi.n	800846c <HAL_RCC_OscConfig+0x28c>
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	691b      	ldr	r3, [r3, #16]
 800843c:	2b40      	cmp	r3, #64	@ 0x40
 800843e:	d108      	bne.n	8008452 <HAL_RCC_OscConfig+0x272>
 8008440:	4b09      	ldr	r3, [pc, #36]	@ (8008468 <HAL_RCC_OscConfig+0x288>)
 8008442:	685b      	ldr	r3, [r3, #4]
 8008444:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8008448:	4a07      	ldr	r2, [pc, #28]	@ (8008468 <HAL_RCC_OscConfig+0x288>)
 800844a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800844e:	6053      	str	r3, [r2, #4]
 8008450:	e030      	b.n	80084b4 <HAL_RCC_OscConfig+0x2d4>
 8008452:	4b05      	ldr	r3, [pc, #20]	@ (8008468 <HAL_RCC_OscConfig+0x288>)
 8008454:	685b      	ldr	r3, [r3, #4]
 8008456:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	691b      	ldr	r3, [r3, #16]
 800845e:	031b      	lsls	r3, r3, #12
 8008460:	4901      	ldr	r1, [pc, #4]	@ (8008468 <HAL_RCC_OscConfig+0x288>)
 8008462:	4313      	orrs	r3, r2
 8008464:	604b      	str	r3, [r1, #4]
 8008466:	e025      	b.n	80084b4 <HAL_RCC_OscConfig+0x2d4>
 8008468:	58024400 	.word	0x58024400
 800846c:	4b9a      	ldr	r3, [pc, #616]	@ (80086d8 <HAL_RCC_OscConfig+0x4f8>)
 800846e:	685b      	ldr	r3, [r3, #4]
 8008470:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	691b      	ldr	r3, [r3, #16]
 8008478:	061b      	lsls	r3, r3, #24
 800847a:	4997      	ldr	r1, [pc, #604]	@ (80086d8 <HAL_RCC_OscConfig+0x4f8>)
 800847c:	4313      	orrs	r3, r2
 800847e:	604b      	str	r3, [r1, #4]
 8008480:	e018      	b.n	80084b4 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008482:	4b95      	ldr	r3, [pc, #596]	@ (80086d8 <HAL_RCC_OscConfig+0x4f8>)
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	4a94      	ldr	r2, [pc, #592]	@ (80086d8 <HAL_RCC_OscConfig+0x4f8>)
 8008488:	f023 0301 	bic.w	r3, r3, #1
 800848c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800848e:	f7fa fb9f 	bl	8002bd0 <HAL_GetTick>
 8008492:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008494:	e008      	b.n	80084a8 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008496:	f7fa fb9b 	bl	8002bd0 <HAL_GetTick>
 800849a:	4602      	mov	r2, r0
 800849c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800849e:	1ad3      	subs	r3, r2, r3
 80084a0:	2b02      	cmp	r3, #2
 80084a2:	d901      	bls.n	80084a8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80084a4:	2303      	movs	r3, #3
 80084a6:	e2ed      	b.n	8008a84 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80084a8:	4b8b      	ldr	r3, [pc, #556]	@ (80086d8 <HAL_RCC_OscConfig+0x4f8>)
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	f003 0304 	and.w	r3, r3, #4
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d1f0      	bne.n	8008496 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	f003 0310 	and.w	r3, r3, #16
 80084bc:	2b00      	cmp	r3, #0
 80084be:	f000 80a9 	beq.w	8008614 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80084c2:	4b85      	ldr	r3, [pc, #532]	@ (80086d8 <HAL_RCC_OscConfig+0x4f8>)
 80084c4:	691b      	ldr	r3, [r3, #16]
 80084c6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80084ca:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80084cc:	4b82      	ldr	r3, [pc, #520]	@ (80086d8 <HAL_RCC_OscConfig+0x4f8>)
 80084ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084d0:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80084d2:	69bb      	ldr	r3, [r7, #24]
 80084d4:	2b08      	cmp	r3, #8
 80084d6:	d007      	beq.n	80084e8 <HAL_RCC_OscConfig+0x308>
 80084d8:	69bb      	ldr	r3, [r7, #24]
 80084da:	2b18      	cmp	r3, #24
 80084dc:	d13a      	bne.n	8008554 <HAL_RCC_OscConfig+0x374>
 80084de:	697b      	ldr	r3, [r7, #20]
 80084e0:	f003 0303 	and.w	r3, r3, #3
 80084e4:	2b01      	cmp	r3, #1
 80084e6:	d135      	bne.n	8008554 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80084e8:	4b7b      	ldr	r3, [pc, #492]	@ (80086d8 <HAL_RCC_OscConfig+0x4f8>)
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d005      	beq.n	8008500 <HAL_RCC_OscConfig+0x320>
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	69db      	ldr	r3, [r3, #28]
 80084f8:	2b80      	cmp	r3, #128	@ 0x80
 80084fa:	d001      	beq.n	8008500 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80084fc:	2301      	movs	r3, #1
 80084fe:	e2c1      	b.n	8008a84 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008500:	f7fa fb96 	bl	8002c30 <HAL_GetREVID>
 8008504:	4603      	mov	r3, r0
 8008506:	f241 0203 	movw	r2, #4099	@ 0x1003
 800850a:	4293      	cmp	r3, r2
 800850c:	d817      	bhi.n	800853e <HAL_RCC_OscConfig+0x35e>
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	6a1b      	ldr	r3, [r3, #32]
 8008512:	2b20      	cmp	r3, #32
 8008514:	d108      	bne.n	8008528 <HAL_RCC_OscConfig+0x348>
 8008516:	4b70      	ldr	r3, [pc, #448]	@ (80086d8 <HAL_RCC_OscConfig+0x4f8>)
 8008518:	685b      	ldr	r3, [r3, #4]
 800851a:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800851e:	4a6e      	ldr	r2, [pc, #440]	@ (80086d8 <HAL_RCC_OscConfig+0x4f8>)
 8008520:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008524:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008526:	e075      	b.n	8008614 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008528:	4b6b      	ldr	r3, [pc, #428]	@ (80086d8 <HAL_RCC_OscConfig+0x4f8>)
 800852a:	685b      	ldr	r3, [r3, #4]
 800852c:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	6a1b      	ldr	r3, [r3, #32]
 8008534:	069b      	lsls	r3, r3, #26
 8008536:	4968      	ldr	r1, [pc, #416]	@ (80086d8 <HAL_RCC_OscConfig+0x4f8>)
 8008538:	4313      	orrs	r3, r2
 800853a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800853c:	e06a      	b.n	8008614 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800853e:	4b66      	ldr	r3, [pc, #408]	@ (80086d8 <HAL_RCC_OscConfig+0x4f8>)
 8008540:	68db      	ldr	r3, [r3, #12]
 8008542:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	6a1b      	ldr	r3, [r3, #32]
 800854a:	061b      	lsls	r3, r3, #24
 800854c:	4962      	ldr	r1, [pc, #392]	@ (80086d8 <HAL_RCC_OscConfig+0x4f8>)
 800854e:	4313      	orrs	r3, r2
 8008550:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008552:	e05f      	b.n	8008614 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	69db      	ldr	r3, [r3, #28]
 8008558:	2b00      	cmp	r3, #0
 800855a:	d042      	beq.n	80085e2 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800855c:	4b5e      	ldr	r3, [pc, #376]	@ (80086d8 <HAL_RCC_OscConfig+0x4f8>)
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	4a5d      	ldr	r2, [pc, #372]	@ (80086d8 <HAL_RCC_OscConfig+0x4f8>)
 8008562:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008566:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008568:	f7fa fb32 	bl	8002bd0 <HAL_GetTick>
 800856c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800856e:	e008      	b.n	8008582 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8008570:	f7fa fb2e 	bl	8002bd0 <HAL_GetTick>
 8008574:	4602      	mov	r2, r0
 8008576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008578:	1ad3      	subs	r3, r2, r3
 800857a:	2b02      	cmp	r3, #2
 800857c:	d901      	bls.n	8008582 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800857e:	2303      	movs	r3, #3
 8008580:	e280      	b.n	8008a84 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008582:	4b55      	ldr	r3, [pc, #340]	@ (80086d8 <HAL_RCC_OscConfig+0x4f8>)
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800858a:	2b00      	cmp	r3, #0
 800858c:	d0f0      	beq.n	8008570 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800858e:	f7fa fb4f 	bl	8002c30 <HAL_GetREVID>
 8008592:	4603      	mov	r3, r0
 8008594:	f241 0203 	movw	r2, #4099	@ 0x1003
 8008598:	4293      	cmp	r3, r2
 800859a:	d817      	bhi.n	80085cc <HAL_RCC_OscConfig+0x3ec>
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	6a1b      	ldr	r3, [r3, #32]
 80085a0:	2b20      	cmp	r3, #32
 80085a2:	d108      	bne.n	80085b6 <HAL_RCC_OscConfig+0x3d6>
 80085a4:	4b4c      	ldr	r3, [pc, #304]	@ (80086d8 <HAL_RCC_OscConfig+0x4f8>)
 80085a6:	685b      	ldr	r3, [r3, #4]
 80085a8:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80085ac:	4a4a      	ldr	r2, [pc, #296]	@ (80086d8 <HAL_RCC_OscConfig+0x4f8>)
 80085ae:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80085b2:	6053      	str	r3, [r2, #4]
 80085b4:	e02e      	b.n	8008614 <HAL_RCC_OscConfig+0x434>
 80085b6:	4b48      	ldr	r3, [pc, #288]	@ (80086d8 <HAL_RCC_OscConfig+0x4f8>)
 80085b8:	685b      	ldr	r3, [r3, #4]
 80085ba:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	6a1b      	ldr	r3, [r3, #32]
 80085c2:	069b      	lsls	r3, r3, #26
 80085c4:	4944      	ldr	r1, [pc, #272]	@ (80086d8 <HAL_RCC_OscConfig+0x4f8>)
 80085c6:	4313      	orrs	r3, r2
 80085c8:	604b      	str	r3, [r1, #4]
 80085ca:	e023      	b.n	8008614 <HAL_RCC_OscConfig+0x434>
 80085cc:	4b42      	ldr	r3, [pc, #264]	@ (80086d8 <HAL_RCC_OscConfig+0x4f8>)
 80085ce:	68db      	ldr	r3, [r3, #12]
 80085d0:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	6a1b      	ldr	r3, [r3, #32]
 80085d8:	061b      	lsls	r3, r3, #24
 80085da:	493f      	ldr	r1, [pc, #252]	@ (80086d8 <HAL_RCC_OscConfig+0x4f8>)
 80085dc:	4313      	orrs	r3, r2
 80085de:	60cb      	str	r3, [r1, #12]
 80085e0:	e018      	b.n	8008614 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80085e2:	4b3d      	ldr	r3, [pc, #244]	@ (80086d8 <HAL_RCC_OscConfig+0x4f8>)
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	4a3c      	ldr	r2, [pc, #240]	@ (80086d8 <HAL_RCC_OscConfig+0x4f8>)
 80085e8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80085ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80085ee:	f7fa faef 	bl	8002bd0 <HAL_GetTick>
 80085f2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80085f4:	e008      	b.n	8008608 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80085f6:	f7fa faeb 	bl	8002bd0 <HAL_GetTick>
 80085fa:	4602      	mov	r2, r0
 80085fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085fe:	1ad3      	subs	r3, r2, r3
 8008600:	2b02      	cmp	r3, #2
 8008602:	d901      	bls.n	8008608 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008604:	2303      	movs	r3, #3
 8008606:	e23d      	b.n	8008a84 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008608:	4b33      	ldr	r3, [pc, #204]	@ (80086d8 <HAL_RCC_OscConfig+0x4f8>)
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008610:	2b00      	cmp	r3, #0
 8008612:	d1f0      	bne.n	80085f6 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	f003 0308 	and.w	r3, r3, #8
 800861c:	2b00      	cmp	r3, #0
 800861e:	d036      	beq.n	800868e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	695b      	ldr	r3, [r3, #20]
 8008624:	2b00      	cmp	r3, #0
 8008626:	d019      	beq.n	800865c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008628:	4b2b      	ldr	r3, [pc, #172]	@ (80086d8 <HAL_RCC_OscConfig+0x4f8>)
 800862a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800862c:	4a2a      	ldr	r2, [pc, #168]	@ (80086d8 <HAL_RCC_OscConfig+0x4f8>)
 800862e:	f043 0301 	orr.w	r3, r3, #1
 8008632:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008634:	f7fa facc 	bl	8002bd0 <HAL_GetTick>
 8008638:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800863a:	e008      	b.n	800864e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800863c:	f7fa fac8 	bl	8002bd0 <HAL_GetTick>
 8008640:	4602      	mov	r2, r0
 8008642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008644:	1ad3      	subs	r3, r2, r3
 8008646:	2b02      	cmp	r3, #2
 8008648:	d901      	bls.n	800864e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800864a:	2303      	movs	r3, #3
 800864c:	e21a      	b.n	8008a84 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800864e:	4b22      	ldr	r3, [pc, #136]	@ (80086d8 <HAL_RCC_OscConfig+0x4f8>)
 8008650:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008652:	f003 0302 	and.w	r3, r3, #2
 8008656:	2b00      	cmp	r3, #0
 8008658:	d0f0      	beq.n	800863c <HAL_RCC_OscConfig+0x45c>
 800865a:	e018      	b.n	800868e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800865c:	4b1e      	ldr	r3, [pc, #120]	@ (80086d8 <HAL_RCC_OscConfig+0x4f8>)
 800865e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008660:	4a1d      	ldr	r2, [pc, #116]	@ (80086d8 <HAL_RCC_OscConfig+0x4f8>)
 8008662:	f023 0301 	bic.w	r3, r3, #1
 8008666:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008668:	f7fa fab2 	bl	8002bd0 <HAL_GetTick>
 800866c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800866e:	e008      	b.n	8008682 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008670:	f7fa faae 	bl	8002bd0 <HAL_GetTick>
 8008674:	4602      	mov	r2, r0
 8008676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008678:	1ad3      	subs	r3, r2, r3
 800867a:	2b02      	cmp	r3, #2
 800867c:	d901      	bls.n	8008682 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800867e:	2303      	movs	r3, #3
 8008680:	e200      	b.n	8008a84 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008682:	4b15      	ldr	r3, [pc, #84]	@ (80086d8 <HAL_RCC_OscConfig+0x4f8>)
 8008684:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008686:	f003 0302 	and.w	r3, r3, #2
 800868a:	2b00      	cmp	r3, #0
 800868c:	d1f0      	bne.n	8008670 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	f003 0320 	and.w	r3, r3, #32
 8008696:	2b00      	cmp	r3, #0
 8008698:	d039      	beq.n	800870e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	699b      	ldr	r3, [r3, #24]
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d01c      	beq.n	80086dc <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80086a2:	4b0d      	ldr	r3, [pc, #52]	@ (80086d8 <HAL_RCC_OscConfig+0x4f8>)
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	4a0c      	ldr	r2, [pc, #48]	@ (80086d8 <HAL_RCC_OscConfig+0x4f8>)
 80086a8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80086ac:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80086ae:	f7fa fa8f 	bl	8002bd0 <HAL_GetTick>
 80086b2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80086b4:	e008      	b.n	80086c8 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80086b6:	f7fa fa8b 	bl	8002bd0 <HAL_GetTick>
 80086ba:	4602      	mov	r2, r0
 80086bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086be:	1ad3      	subs	r3, r2, r3
 80086c0:	2b02      	cmp	r3, #2
 80086c2:	d901      	bls.n	80086c8 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80086c4:	2303      	movs	r3, #3
 80086c6:	e1dd      	b.n	8008a84 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80086c8:	4b03      	ldr	r3, [pc, #12]	@ (80086d8 <HAL_RCC_OscConfig+0x4f8>)
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d0f0      	beq.n	80086b6 <HAL_RCC_OscConfig+0x4d6>
 80086d4:	e01b      	b.n	800870e <HAL_RCC_OscConfig+0x52e>
 80086d6:	bf00      	nop
 80086d8:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80086dc:	4b9b      	ldr	r3, [pc, #620]	@ (800894c <HAL_RCC_OscConfig+0x76c>)
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	4a9a      	ldr	r2, [pc, #616]	@ (800894c <HAL_RCC_OscConfig+0x76c>)
 80086e2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80086e6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80086e8:	f7fa fa72 	bl	8002bd0 <HAL_GetTick>
 80086ec:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80086ee:	e008      	b.n	8008702 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80086f0:	f7fa fa6e 	bl	8002bd0 <HAL_GetTick>
 80086f4:	4602      	mov	r2, r0
 80086f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086f8:	1ad3      	subs	r3, r2, r3
 80086fa:	2b02      	cmp	r3, #2
 80086fc:	d901      	bls.n	8008702 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80086fe:	2303      	movs	r3, #3
 8008700:	e1c0      	b.n	8008a84 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008702:	4b92      	ldr	r3, [pc, #584]	@ (800894c <HAL_RCC_OscConfig+0x76c>)
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800870a:	2b00      	cmp	r3, #0
 800870c:	d1f0      	bne.n	80086f0 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	f003 0304 	and.w	r3, r3, #4
 8008716:	2b00      	cmp	r3, #0
 8008718:	f000 8081 	beq.w	800881e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800871c:	4b8c      	ldr	r3, [pc, #560]	@ (8008950 <HAL_RCC_OscConfig+0x770>)
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	4a8b      	ldr	r2, [pc, #556]	@ (8008950 <HAL_RCC_OscConfig+0x770>)
 8008722:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008726:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008728:	f7fa fa52 	bl	8002bd0 <HAL_GetTick>
 800872c:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800872e:	e008      	b.n	8008742 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008730:	f7fa fa4e 	bl	8002bd0 <HAL_GetTick>
 8008734:	4602      	mov	r2, r0
 8008736:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008738:	1ad3      	subs	r3, r2, r3
 800873a:	2b64      	cmp	r3, #100	@ 0x64
 800873c:	d901      	bls.n	8008742 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800873e:	2303      	movs	r3, #3
 8008740:	e1a0      	b.n	8008a84 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008742:	4b83      	ldr	r3, [pc, #524]	@ (8008950 <HAL_RCC_OscConfig+0x770>)
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800874a:	2b00      	cmp	r3, #0
 800874c:	d0f0      	beq.n	8008730 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	689b      	ldr	r3, [r3, #8]
 8008752:	2b01      	cmp	r3, #1
 8008754:	d106      	bne.n	8008764 <HAL_RCC_OscConfig+0x584>
 8008756:	4b7d      	ldr	r3, [pc, #500]	@ (800894c <HAL_RCC_OscConfig+0x76c>)
 8008758:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800875a:	4a7c      	ldr	r2, [pc, #496]	@ (800894c <HAL_RCC_OscConfig+0x76c>)
 800875c:	f043 0301 	orr.w	r3, r3, #1
 8008760:	6713      	str	r3, [r2, #112]	@ 0x70
 8008762:	e02d      	b.n	80087c0 <HAL_RCC_OscConfig+0x5e0>
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	689b      	ldr	r3, [r3, #8]
 8008768:	2b00      	cmp	r3, #0
 800876a:	d10c      	bne.n	8008786 <HAL_RCC_OscConfig+0x5a6>
 800876c:	4b77      	ldr	r3, [pc, #476]	@ (800894c <HAL_RCC_OscConfig+0x76c>)
 800876e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008770:	4a76      	ldr	r2, [pc, #472]	@ (800894c <HAL_RCC_OscConfig+0x76c>)
 8008772:	f023 0301 	bic.w	r3, r3, #1
 8008776:	6713      	str	r3, [r2, #112]	@ 0x70
 8008778:	4b74      	ldr	r3, [pc, #464]	@ (800894c <HAL_RCC_OscConfig+0x76c>)
 800877a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800877c:	4a73      	ldr	r2, [pc, #460]	@ (800894c <HAL_RCC_OscConfig+0x76c>)
 800877e:	f023 0304 	bic.w	r3, r3, #4
 8008782:	6713      	str	r3, [r2, #112]	@ 0x70
 8008784:	e01c      	b.n	80087c0 <HAL_RCC_OscConfig+0x5e0>
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	689b      	ldr	r3, [r3, #8]
 800878a:	2b05      	cmp	r3, #5
 800878c:	d10c      	bne.n	80087a8 <HAL_RCC_OscConfig+0x5c8>
 800878e:	4b6f      	ldr	r3, [pc, #444]	@ (800894c <HAL_RCC_OscConfig+0x76c>)
 8008790:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008792:	4a6e      	ldr	r2, [pc, #440]	@ (800894c <HAL_RCC_OscConfig+0x76c>)
 8008794:	f043 0304 	orr.w	r3, r3, #4
 8008798:	6713      	str	r3, [r2, #112]	@ 0x70
 800879a:	4b6c      	ldr	r3, [pc, #432]	@ (800894c <HAL_RCC_OscConfig+0x76c>)
 800879c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800879e:	4a6b      	ldr	r2, [pc, #428]	@ (800894c <HAL_RCC_OscConfig+0x76c>)
 80087a0:	f043 0301 	orr.w	r3, r3, #1
 80087a4:	6713      	str	r3, [r2, #112]	@ 0x70
 80087a6:	e00b      	b.n	80087c0 <HAL_RCC_OscConfig+0x5e0>
 80087a8:	4b68      	ldr	r3, [pc, #416]	@ (800894c <HAL_RCC_OscConfig+0x76c>)
 80087aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80087ac:	4a67      	ldr	r2, [pc, #412]	@ (800894c <HAL_RCC_OscConfig+0x76c>)
 80087ae:	f023 0301 	bic.w	r3, r3, #1
 80087b2:	6713      	str	r3, [r2, #112]	@ 0x70
 80087b4:	4b65      	ldr	r3, [pc, #404]	@ (800894c <HAL_RCC_OscConfig+0x76c>)
 80087b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80087b8:	4a64      	ldr	r2, [pc, #400]	@ (800894c <HAL_RCC_OscConfig+0x76c>)
 80087ba:	f023 0304 	bic.w	r3, r3, #4
 80087be:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	689b      	ldr	r3, [r3, #8]
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d015      	beq.n	80087f4 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80087c8:	f7fa fa02 	bl	8002bd0 <HAL_GetTick>
 80087cc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80087ce:	e00a      	b.n	80087e6 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80087d0:	f7fa f9fe 	bl	8002bd0 <HAL_GetTick>
 80087d4:	4602      	mov	r2, r0
 80087d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087d8:	1ad3      	subs	r3, r2, r3
 80087da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80087de:	4293      	cmp	r3, r2
 80087e0:	d901      	bls.n	80087e6 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80087e2:	2303      	movs	r3, #3
 80087e4:	e14e      	b.n	8008a84 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80087e6:	4b59      	ldr	r3, [pc, #356]	@ (800894c <HAL_RCC_OscConfig+0x76c>)
 80087e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80087ea:	f003 0302 	and.w	r3, r3, #2
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d0ee      	beq.n	80087d0 <HAL_RCC_OscConfig+0x5f0>
 80087f2:	e014      	b.n	800881e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80087f4:	f7fa f9ec 	bl	8002bd0 <HAL_GetTick>
 80087f8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80087fa:	e00a      	b.n	8008812 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80087fc:	f7fa f9e8 	bl	8002bd0 <HAL_GetTick>
 8008800:	4602      	mov	r2, r0
 8008802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008804:	1ad3      	subs	r3, r2, r3
 8008806:	f241 3288 	movw	r2, #5000	@ 0x1388
 800880a:	4293      	cmp	r3, r2
 800880c:	d901      	bls.n	8008812 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800880e:	2303      	movs	r3, #3
 8008810:	e138      	b.n	8008a84 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008812:	4b4e      	ldr	r3, [pc, #312]	@ (800894c <HAL_RCC_OscConfig+0x76c>)
 8008814:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008816:	f003 0302 	and.w	r3, r3, #2
 800881a:	2b00      	cmp	r3, #0
 800881c:	d1ee      	bne.n	80087fc <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008822:	2b00      	cmp	r3, #0
 8008824:	f000 812d 	beq.w	8008a82 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8008828:	4b48      	ldr	r3, [pc, #288]	@ (800894c <HAL_RCC_OscConfig+0x76c>)
 800882a:	691b      	ldr	r3, [r3, #16]
 800882c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008830:	2b18      	cmp	r3, #24
 8008832:	f000 80bd 	beq.w	80089b0 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800883a:	2b02      	cmp	r3, #2
 800883c:	f040 809e 	bne.w	800897c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008840:	4b42      	ldr	r3, [pc, #264]	@ (800894c <HAL_RCC_OscConfig+0x76c>)
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	4a41      	ldr	r2, [pc, #260]	@ (800894c <HAL_RCC_OscConfig+0x76c>)
 8008846:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800884a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800884c:	f7fa f9c0 	bl	8002bd0 <HAL_GetTick>
 8008850:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008852:	e008      	b.n	8008866 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008854:	f7fa f9bc 	bl	8002bd0 <HAL_GetTick>
 8008858:	4602      	mov	r2, r0
 800885a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800885c:	1ad3      	subs	r3, r2, r3
 800885e:	2b02      	cmp	r3, #2
 8008860:	d901      	bls.n	8008866 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8008862:	2303      	movs	r3, #3
 8008864:	e10e      	b.n	8008a84 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008866:	4b39      	ldr	r3, [pc, #228]	@ (800894c <HAL_RCC_OscConfig+0x76c>)
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800886e:	2b00      	cmp	r3, #0
 8008870:	d1f0      	bne.n	8008854 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008872:	4b36      	ldr	r3, [pc, #216]	@ (800894c <HAL_RCC_OscConfig+0x76c>)
 8008874:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008876:	4b37      	ldr	r3, [pc, #220]	@ (8008954 <HAL_RCC_OscConfig+0x774>)
 8008878:	4013      	ands	r3, r2
 800887a:	687a      	ldr	r2, [r7, #4]
 800887c:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800887e:	687a      	ldr	r2, [r7, #4]
 8008880:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8008882:	0112      	lsls	r2, r2, #4
 8008884:	430a      	orrs	r2, r1
 8008886:	4931      	ldr	r1, [pc, #196]	@ (800894c <HAL_RCC_OscConfig+0x76c>)
 8008888:	4313      	orrs	r3, r2
 800888a:	628b      	str	r3, [r1, #40]	@ 0x28
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008890:	3b01      	subs	r3, #1
 8008892:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800889a:	3b01      	subs	r3, #1
 800889c:	025b      	lsls	r3, r3, #9
 800889e:	b29b      	uxth	r3, r3
 80088a0:	431a      	orrs	r2, r3
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80088a6:	3b01      	subs	r3, #1
 80088a8:	041b      	lsls	r3, r3, #16
 80088aa:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80088ae:	431a      	orrs	r2, r3
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80088b4:	3b01      	subs	r3, #1
 80088b6:	061b      	lsls	r3, r3, #24
 80088b8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80088bc:	4923      	ldr	r1, [pc, #140]	@ (800894c <HAL_RCC_OscConfig+0x76c>)
 80088be:	4313      	orrs	r3, r2
 80088c0:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80088c2:	4b22      	ldr	r3, [pc, #136]	@ (800894c <HAL_RCC_OscConfig+0x76c>)
 80088c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088c6:	4a21      	ldr	r2, [pc, #132]	@ (800894c <HAL_RCC_OscConfig+0x76c>)
 80088c8:	f023 0301 	bic.w	r3, r3, #1
 80088cc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80088ce:	4b1f      	ldr	r3, [pc, #124]	@ (800894c <HAL_RCC_OscConfig+0x76c>)
 80088d0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80088d2:	4b21      	ldr	r3, [pc, #132]	@ (8008958 <HAL_RCC_OscConfig+0x778>)
 80088d4:	4013      	ands	r3, r2
 80088d6:	687a      	ldr	r2, [r7, #4]
 80088d8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80088da:	00d2      	lsls	r2, r2, #3
 80088dc:	491b      	ldr	r1, [pc, #108]	@ (800894c <HAL_RCC_OscConfig+0x76c>)
 80088de:	4313      	orrs	r3, r2
 80088e0:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80088e2:	4b1a      	ldr	r3, [pc, #104]	@ (800894c <HAL_RCC_OscConfig+0x76c>)
 80088e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088e6:	f023 020c 	bic.w	r2, r3, #12
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088ee:	4917      	ldr	r1, [pc, #92]	@ (800894c <HAL_RCC_OscConfig+0x76c>)
 80088f0:	4313      	orrs	r3, r2
 80088f2:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80088f4:	4b15      	ldr	r3, [pc, #84]	@ (800894c <HAL_RCC_OscConfig+0x76c>)
 80088f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088f8:	f023 0202 	bic.w	r2, r3, #2
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008900:	4912      	ldr	r1, [pc, #72]	@ (800894c <HAL_RCC_OscConfig+0x76c>)
 8008902:	4313      	orrs	r3, r2
 8008904:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008906:	4b11      	ldr	r3, [pc, #68]	@ (800894c <HAL_RCC_OscConfig+0x76c>)
 8008908:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800890a:	4a10      	ldr	r2, [pc, #64]	@ (800894c <HAL_RCC_OscConfig+0x76c>)
 800890c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008910:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008912:	4b0e      	ldr	r3, [pc, #56]	@ (800894c <HAL_RCC_OscConfig+0x76c>)
 8008914:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008916:	4a0d      	ldr	r2, [pc, #52]	@ (800894c <HAL_RCC_OscConfig+0x76c>)
 8008918:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800891c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800891e:	4b0b      	ldr	r3, [pc, #44]	@ (800894c <HAL_RCC_OscConfig+0x76c>)
 8008920:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008922:	4a0a      	ldr	r2, [pc, #40]	@ (800894c <HAL_RCC_OscConfig+0x76c>)
 8008924:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008928:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800892a:	4b08      	ldr	r3, [pc, #32]	@ (800894c <HAL_RCC_OscConfig+0x76c>)
 800892c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800892e:	4a07      	ldr	r2, [pc, #28]	@ (800894c <HAL_RCC_OscConfig+0x76c>)
 8008930:	f043 0301 	orr.w	r3, r3, #1
 8008934:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008936:	4b05      	ldr	r3, [pc, #20]	@ (800894c <HAL_RCC_OscConfig+0x76c>)
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	4a04      	ldr	r2, [pc, #16]	@ (800894c <HAL_RCC_OscConfig+0x76c>)
 800893c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008940:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008942:	f7fa f945 	bl	8002bd0 <HAL_GetTick>
 8008946:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008948:	e011      	b.n	800896e <HAL_RCC_OscConfig+0x78e>
 800894a:	bf00      	nop
 800894c:	58024400 	.word	0x58024400
 8008950:	58024800 	.word	0x58024800
 8008954:	fffffc0c 	.word	0xfffffc0c
 8008958:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800895c:	f7fa f938 	bl	8002bd0 <HAL_GetTick>
 8008960:	4602      	mov	r2, r0
 8008962:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008964:	1ad3      	subs	r3, r2, r3
 8008966:	2b02      	cmp	r3, #2
 8008968:	d901      	bls.n	800896e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800896a:	2303      	movs	r3, #3
 800896c:	e08a      	b.n	8008a84 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800896e:	4b47      	ldr	r3, [pc, #284]	@ (8008a8c <HAL_RCC_OscConfig+0x8ac>)
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008976:	2b00      	cmp	r3, #0
 8008978:	d0f0      	beq.n	800895c <HAL_RCC_OscConfig+0x77c>
 800897a:	e082      	b.n	8008a82 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800897c:	4b43      	ldr	r3, [pc, #268]	@ (8008a8c <HAL_RCC_OscConfig+0x8ac>)
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	4a42      	ldr	r2, [pc, #264]	@ (8008a8c <HAL_RCC_OscConfig+0x8ac>)
 8008982:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008986:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008988:	f7fa f922 	bl	8002bd0 <HAL_GetTick>
 800898c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800898e:	e008      	b.n	80089a2 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008990:	f7fa f91e 	bl	8002bd0 <HAL_GetTick>
 8008994:	4602      	mov	r2, r0
 8008996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008998:	1ad3      	subs	r3, r2, r3
 800899a:	2b02      	cmp	r3, #2
 800899c:	d901      	bls.n	80089a2 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800899e:	2303      	movs	r3, #3
 80089a0:	e070      	b.n	8008a84 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80089a2:	4b3a      	ldr	r3, [pc, #232]	@ (8008a8c <HAL_RCC_OscConfig+0x8ac>)
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d1f0      	bne.n	8008990 <HAL_RCC_OscConfig+0x7b0>
 80089ae:	e068      	b.n	8008a82 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80089b0:	4b36      	ldr	r3, [pc, #216]	@ (8008a8c <HAL_RCC_OscConfig+0x8ac>)
 80089b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089b4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80089b6:	4b35      	ldr	r3, [pc, #212]	@ (8008a8c <HAL_RCC_OscConfig+0x8ac>)
 80089b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80089ba:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089c0:	2b01      	cmp	r3, #1
 80089c2:	d031      	beq.n	8008a28 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80089c4:	693b      	ldr	r3, [r7, #16]
 80089c6:	f003 0203 	and.w	r2, r3, #3
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80089ce:	429a      	cmp	r2, r3
 80089d0:	d12a      	bne.n	8008a28 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80089d2:	693b      	ldr	r3, [r7, #16]
 80089d4:	091b      	lsrs	r3, r3, #4
 80089d6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80089de:	429a      	cmp	r2, r3
 80089e0:	d122      	bne.n	8008a28 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80089ec:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80089ee:	429a      	cmp	r2, r3
 80089f0:	d11a      	bne.n	8008a28 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	0a5b      	lsrs	r3, r3, #9
 80089f6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80089fe:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008a00:	429a      	cmp	r2, r3
 8008a02:	d111      	bne.n	8008a28 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	0c1b      	lsrs	r3, r3, #16
 8008a08:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a10:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008a12:	429a      	cmp	r2, r3
 8008a14:	d108      	bne.n	8008a28 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	0e1b      	lsrs	r3, r3, #24
 8008a1a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a22:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008a24:	429a      	cmp	r2, r3
 8008a26:	d001      	beq.n	8008a2c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8008a28:	2301      	movs	r3, #1
 8008a2a:	e02b      	b.n	8008a84 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8008a2c:	4b17      	ldr	r3, [pc, #92]	@ (8008a8c <HAL_RCC_OscConfig+0x8ac>)
 8008a2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008a30:	08db      	lsrs	r3, r3, #3
 8008a32:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008a36:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008a3c:	693a      	ldr	r2, [r7, #16]
 8008a3e:	429a      	cmp	r2, r3
 8008a40:	d01f      	beq.n	8008a82 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8008a42:	4b12      	ldr	r3, [pc, #72]	@ (8008a8c <HAL_RCC_OscConfig+0x8ac>)
 8008a44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a46:	4a11      	ldr	r2, [pc, #68]	@ (8008a8c <HAL_RCC_OscConfig+0x8ac>)
 8008a48:	f023 0301 	bic.w	r3, r3, #1
 8008a4c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008a4e:	f7fa f8bf 	bl	8002bd0 <HAL_GetTick>
 8008a52:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8008a54:	bf00      	nop
 8008a56:	f7fa f8bb 	bl	8002bd0 <HAL_GetTick>
 8008a5a:	4602      	mov	r2, r0
 8008a5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a5e:	4293      	cmp	r3, r2
 8008a60:	d0f9      	beq.n	8008a56 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008a62:	4b0a      	ldr	r3, [pc, #40]	@ (8008a8c <HAL_RCC_OscConfig+0x8ac>)
 8008a64:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008a66:	4b0a      	ldr	r3, [pc, #40]	@ (8008a90 <HAL_RCC_OscConfig+0x8b0>)
 8008a68:	4013      	ands	r3, r2
 8008a6a:	687a      	ldr	r2, [r7, #4]
 8008a6c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8008a6e:	00d2      	lsls	r2, r2, #3
 8008a70:	4906      	ldr	r1, [pc, #24]	@ (8008a8c <HAL_RCC_OscConfig+0x8ac>)
 8008a72:	4313      	orrs	r3, r2
 8008a74:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8008a76:	4b05      	ldr	r3, [pc, #20]	@ (8008a8c <HAL_RCC_OscConfig+0x8ac>)
 8008a78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a7a:	4a04      	ldr	r2, [pc, #16]	@ (8008a8c <HAL_RCC_OscConfig+0x8ac>)
 8008a7c:	f043 0301 	orr.w	r3, r3, #1
 8008a80:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8008a82:	2300      	movs	r3, #0
}
 8008a84:	4618      	mov	r0, r3
 8008a86:	3730      	adds	r7, #48	@ 0x30
 8008a88:	46bd      	mov	sp, r7
 8008a8a:	bd80      	pop	{r7, pc}
 8008a8c:	58024400 	.word	0x58024400
 8008a90:	ffff0007 	.word	0xffff0007

08008a94 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008a94:	b580      	push	{r7, lr}
 8008a96:	b086      	sub	sp, #24
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	6078      	str	r0, [r7, #4]
 8008a9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d101      	bne.n	8008aa8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008aa4:	2301      	movs	r3, #1
 8008aa6:	e19c      	b.n	8008de2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008aa8:	4b8a      	ldr	r3, [pc, #552]	@ (8008cd4 <HAL_RCC_ClockConfig+0x240>)
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	f003 030f 	and.w	r3, r3, #15
 8008ab0:	683a      	ldr	r2, [r7, #0]
 8008ab2:	429a      	cmp	r2, r3
 8008ab4:	d910      	bls.n	8008ad8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008ab6:	4b87      	ldr	r3, [pc, #540]	@ (8008cd4 <HAL_RCC_ClockConfig+0x240>)
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	f023 020f 	bic.w	r2, r3, #15
 8008abe:	4985      	ldr	r1, [pc, #532]	@ (8008cd4 <HAL_RCC_ClockConfig+0x240>)
 8008ac0:	683b      	ldr	r3, [r7, #0]
 8008ac2:	4313      	orrs	r3, r2
 8008ac4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008ac6:	4b83      	ldr	r3, [pc, #524]	@ (8008cd4 <HAL_RCC_ClockConfig+0x240>)
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	f003 030f 	and.w	r3, r3, #15
 8008ace:	683a      	ldr	r2, [r7, #0]
 8008ad0:	429a      	cmp	r2, r3
 8008ad2:	d001      	beq.n	8008ad8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008ad4:	2301      	movs	r3, #1
 8008ad6:	e184      	b.n	8008de2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	f003 0304 	and.w	r3, r3, #4
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d010      	beq.n	8008b06 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	691a      	ldr	r2, [r3, #16]
 8008ae8:	4b7b      	ldr	r3, [pc, #492]	@ (8008cd8 <HAL_RCC_ClockConfig+0x244>)
 8008aea:	699b      	ldr	r3, [r3, #24]
 8008aec:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008af0:	429a      	cmp	r2, r3
 8008af2:	d908      	bls.n	8008b06 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008af4:	4b78      	ldr	r3, [pc, #480]	@ (8008cd8 <HAL_RCC_ClockConfig+0x244>)
 8008af6:	699b      	ldr	r3, [r3, #24]
 8008af8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	691b      	ldr	r3, [r3, #16]
 8008b00:	4975      	ldr	r1, [pc, #468]	@ (8008cd8 <HAL_RCC_ClockConfig+0x244>)
 8008b02:	4313      	orrs	r3, r2
 8008b04:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	f003 0308 	and.w	r3, r3, #8
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d010      	beq.n	8008b34 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	695a      	ldr	r2, [r3, #20]
 8008b16:	4b70      	ldr	r3, [pc, #448]	@ (8008cd8 <HAL_RCC_ClockConfig+0x244>)
 8008b18:	69db      	ldr	r3, [r3, #28]
 8008b1a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008b1e:	429a      	cmp	r2, r3
 8008b20:	d908      	bls.n	8008b34 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008b22:	4b6d      	ldr	r3, [pc, #436]	@ (8008cd8 <HAL_RCC_ClockConfig+0x244>)
 8008b24:	69db      	ldr	r3, [r3, #28]
 8008b26:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	695b      	ldr	r3, [r3, #20]
 8008b2e:	496a      	ldr	r1, [pc, #424]	@ (8008cd8 <HAL_RCC_ClockConfig+0x244>)
 8008b30:	4313      	orrs	r3, r2
 8008b32:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	f003 0310 	and.w	r3, r3, #16
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d010      	beq.n	8008b62 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	699a      	ldr	r2, [r3, #24]
 8008b44:	4b64      	ldr	r3, [pc, #400]	@ (8008cd8 <HAL_RCC_ClockConfig+0x244>)
 8008b46:	69db      	ldr	r3, [r3, #28]
 8008b48:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008b4c:	429a      	cmp	r2, r3
 8008b4e:	d908      	bls.n	8008b62 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008b50:	4b61      	ldr	r3, [pc, #388]	@ (8008cd8 <HAL_RCC_ClockConfig+0x244>)
 8008b52:	69db      	ldr	r3, [r3, #28]
 8008b54:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	699b      	ldr	r3, [r3, #24]
 8008b5c:	495e      	ldr	r1, [pc, #376]	@ (8008cd8 <HAL_RCC_ClockConfig+0x244>)
 8008b5e:	4313      	orrs	r3, r2
 8008b60:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	f003 0320 	and.w	r3, r3, #32
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d010      	beq.n	8008b90 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	69da      	ldr	r2, [r3, #28]
 8008b72:	4b59      	ldr	r3, [pc, #356]	@ (8008cd8 <HAL_RCC_ClockConfig+0x244>)
 8008b74:	6a1b      	ldr	r3, [r3, #32]
 8008b76:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008b7a:	429a      	cmp	r2, r3
 8008b7c:	d908      	bls.n	8008b90 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8008b7e:	4b56      	ldr	r3, [pc, #344]	@ (8008cd8 <HAL_RCC_ClockConfig+0x244>)
 8008b80:	6a1b      	ldr	r3, [r3, #32]
 8008b82:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	69db      	ldr	r3, [r3, #28]
 8008b8a:	4953      	ldr	r1, [pc, #332]	@ (8008cd8 <HAL_RCC_ClockConfig+0x244>)
 8008b8c:	4313      	orrs	r3, r2
 8008b8e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	f003 0302 	and.w	r3, r3, #2
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d010      	beq.n	8008bbe <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	68da      	ldr	r2, [r3, #12]
 8008ba0:	4b4d      	ldr	r3, [pc, #308]	@ (8008cd8 <HAL_RCC_ClockConfig+0x244>)
 8008ba2:	699b      	ldr	r3, [r3, #24]
 8008ba4:	f003 030f 	and.w	r3, r3, #15
 8008ba8:	429a      	cmp	r2, r3
 8008baa:	d908      	bls.n	8008bbe <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008bac:	4b4a      	ldr	r3, [pc, #296]	@ (8008cd8 <HAL_RCC_ClockConfig+0x244>)
 8008bae:	699b      	ldr	r3, [r3, #24]
 8008bb0:	f023 020f 	bic.w	r2, r3, #15
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	68db      	ldr	r3, [r3, #12]
 8008bb8:	4947      	ldr	r1, [pc, #284]	@ (8008cd8 <HAL_RCC_ClockConfig+0x244>)
 8008bba:	4313      	orrs	r3, r2
 8008bbc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	f003 0301 	and.w	r3, r3, #1
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d055      	beq.n	8008c76 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8008bca:	4b43      	ldr	r3, [pc, #268]	@ (8008cd8 <HAL_RCC_ClockConfig+0x244>)
 8008bcc:	699b      	ldr	r3, [r3, #24]
 8008bce:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	689b      	ldr	r3, [r3, #8]
 8008bd6:	4940      	ldr	r1, [pc, #256]	@ (8008cd8 <HAL_RCC_ClockConfig+0x244>)
 8008bd8:	4313      	orrs	r3, r2
 8008bda:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	685b      	ldr	r3, [r3, #4]
 8008be0:	2b02      	cmp	r3, #2
 8008be2:	d107      	bne.n	8008bf4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008be4:	4b3c      	ldr	r3, [pc, #240]	@ (8008cd8 <HAL_RCC_ClockConfig+0x244>)
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d121      	bne.n	8008c34 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008bf0:	2301      	movs	r3, #1
 8008bf2:	e0f6      	b.n	8008de2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	685b      	ldr	r3, [r3, #4]
 8008bf8:	2b03      	cmp	r3, #3
 8008bfa:	d107      	bne.n	8008c0c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008bfc:	4b36      	ldr	r3, [pc, #216]	@ (8008cd8 <HAL_RCC_ClockConfig+0x244>)
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d115      	bne.n	8008c34 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008c08:	2301      	movs	r3, #1
 8008c0a:	e0ea      	b.n	8008de2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	685b      	ldr	r3, [r3, #4]
 8008c10:	2b01      	cmp	r3, #1
 8008c12:	d107      	bne.n	8008c24 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008c14:	4b30      	ldr	r3, [pc, #192]	@ (8008cd8 <HAL_RCC_ClockConfig+0x244>)
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d109      	bne.n	8008c34 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008c20:	2301      	movs	r3, #1
 8008c22:	e0de      	b.n	8008de2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008c24:	4b2c      	ldr	r3, [pc, #176]	@ (8008cd8 <HAL_RCC_ClockConfig+0x244>)
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	f003 0304 	and.w	r3, r3, #4
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d101      	bne.n	8008c34 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008c30:	2301      	movs	r3, #1
 8008c32:	e0d6      	b.n	8008de2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008c34:	4b28      	ldr	r3, [pc, #160]	@ (8008cd8 <HAL_RCC_ClockConfig+0x244>)
 8008c36:	691b      	ldr	r3, [r3, #16]
 8008c38:	f023 0207 	bic.w	r2, r3, #7
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	685b      	ldr	r3, [r3, #4]
 8008c40:	4925      	ldr	r1, [pc, #148]	@ (8008cd8 <HAL_RCC_ClockConfig+0x244>)
 8008c42:	4313      	orrs	r3, r2
 8008c44:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008c46:	f7f9 ffc3 	bl	8002bd0 <HAL_GetTick>
 8008c4a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008c4c:	e00a      	b.n	8008c64 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008c4e:	f7f9 ffbf 	bl	8002bd0 <HAL_GetTick>
 8008c52:	4602      	mov	r2, r0
 8008c54:	697b      	ldr	r3, [r7, #20]
 8008c56:	1ad3      	subs	r3, r2, r3
 8008c58:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008c5c:	4293      	cmp	r3, r2
 8008c5e:	d901      	bls.n	8008c64 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8008c60:	2303      	movs	r3, #3
 8008c62:	e0be      	b.n	8008de2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008c64:	4b1c      	ldr	r3, [pc, #112]	@ (8008cd8 <HAL_RCC_ClockConfig+0x244>)
 8008c66:	691b      	ldr	r3, [r3, #16]
 8008c68:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	685b      	ldr	r3, [r3, #4]
 8008c70:	00db      	lsls	r3, r3, #3
 8008c72:	429a      	cmp	r2, r3
 8008c74:	d1eb      	bne.n	8008c4e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	f003 0302 	and.w	r3, r3, #2
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d010      	beq.n	8008ca4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	68da      	ldr	r2, [r3, #12]
 8008c86:	4b14      	ldr	r3, [pc, #80]	@ (8008cd8 <HAL_RCC_ClockConfig+0x244>)
 8008c88:	699b      	ldr	r3, [r3, #24]
 8008c8a:	f003 030f 	and.w	r3, r3, #15
 8008c8e:	429a      	cmp	r2, r3
 8008c90:	d208      	bcs.n	8008ca4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008c92:	4b11      	ldr	r3, [pc, #68]	@ (8008cd8 <HAL_RCC_ClockConfig+0x244>)
 8008c94:	699b      	ldr	r3, [r3, #24]
 8008c96:	f023 020f 	bic.w	r2, r3, #15
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	68db      	ldr	r3, [r3, #12]
 8008c9e:	490e      	ldr	r1, [pc, #56]	@ (8008cd8 <HAL_RCC_ClockConfig+0x244>)
 8008ca0:	4313      	orrs	r3, r2
 8008ca2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008ca4:	4b0b      	ldr	r3, [pc, #44]	@ (8008cd4 <HAL_RCC_ClockConfig+0x240>)
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	f003 030f 	and.w	r3, r3, #15
 8008cac:	683a      	ldr	r2, [r7, #0]
 8008cae:	429a      	cmp	r2, r3
 8008cb0:	d214      	bcs.n	8008cdc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008cb2:	4b08      	ldr	r3, [pc, #32]	@ (8008cd4 <HAL_RCC_ClockConfig+0x240>)
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	f023 020f 	bic.w	r2, r3, #15
 8008cba:	4906      	ldr	r1, [pc, #24]	@ (8008cd4 <HAL_RCC_ClockConfig+0x240>)
 8008cbc:	683b      	ldr	r3, [r7, #0]
 8008cbe:	4313      	orrs	r3, r2
 8008cc0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008cc2:	4b04      	ldr	r3, [pc, #16]	@ (8008cd4 <HAL_RCC_ClockConfig+0x240>)
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	f003 030f 	and.w	r3, r3, #15
 8008cca:	683a      	ldr	r2, [r7, #0]
 8008ccc:	429a      	cmp	r2, r3
 8008cce:	d005      	beq.n	8008cdc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8008cd0:	2301      	movs	r3, #1
 8008cd2:	e086      	b.n	8008de2 <HAL_RCC_ClockConfig+0x34e>
 8008cd4:	52002000 	.word	0x52002000
 8008cd8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	f003 0304 	and.w	r3, r3, #4
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d010      	beq.n	8008d0a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	691a      	ldr	r2, [r3, #16]
 8008cec:	4b3f      	ldr	r3, [pc, #252]	@ (8008dec <HAL_RCC_ClockConfig+0x358>)
 8008cee:	699b      	ldr	r3, [r3, #24]
 8008cf0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008cf4:	429a      	cmp	r2, r3
 8008cf6:	d208      	bcs.n	8008d0a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008cf8:	4b3c      	ldr	r3, [pc, #240]	@ (8008dec <HAL_RCC_ClockConfig+0x358>)
 8008cfa:	699b      	ldr	r3, [r3, #24]
 8008cfc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	691b      	ldr	r3, [r3, #16]
 8008d04:	4939      	ldr	r1, [pc, #228]	@ (8008dec <HAL_RCC_ClockConfig+0x358>)
 8008d06:	4313      	orrs	r3, r2
 8008d08:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	f003 0308 	and.w	r3, r3, #8
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d010      	beq.n	8008d38 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	695a      	ldr	r2, [r3, #20]
 8008d1a:	4b34      	ldr	r3, [pc, #208]	@ (8008dec <HAL_RCC_ClockConfig+0x358>)
 8008d1c:	69db      	ldr	r3, [r3, #28]
 8008d1e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008d22:	429a      	cmp	r2, r3
 8008d24:	d208      	bcs.n	8008d38 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008d26:	4b31      	ldr	r3, [pc, #196]	@ (8008dec <HAL_RCC_ClockConfig+0x358>)
 8008d28:	69db      	ldr	r3, [r3, #28]
 8008d2a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	695b      	ldr	r3, [r3, #20]
 8008d32:	492e      	ldr	r1, [pc, #184]	@ (8008dec <HAL_RCC_ClockConfig+0x358>)
 8008d34:	4313      	orrs	r3, r2
 8008d36:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	f003 0310 	and.w	r3, r3, #16
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d010      	beq.n	8008d66 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	699a      	ldr	r2, [r3, #24]
 8008d48:	4b28      	ldr	r3, [pc, #160]	@ (8008dec <HAL_RCC_ClockConfig+0x358>)
 8008d4a:	69db      	ldr	r3, [r3, #28]
 8008d4c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008d50:	429a      	cmp	r2, r3
 8008d52:	d208      	bcs.n	8008d66 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008d54:	4b25      	ldr	r3, [pc, #148]	@ (8008dec <HAL_RCC_ClockConfig+0x358>)
 8008d56:	69db      	ldr	r3, [r3, #28]
 8008d58:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	699b      	ldr	r3, [r3, #24]
 8008d60:	4922      	ldr	r1, [pc, #136]	@ (8008dec <HAL_RCC_ClockConfig+0x358>)
 8008d62:	4313      	orrs	r3, r2
 8008d64:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	f003 0320 	and.w	r3, r3, #32
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d010      	beq.n	8008d94 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	69da      	ldr	r2, [r3, #28]
 8008d76:	4b1d      	ldr	r3, [pc, #116]	@ (8008dec <HAL_RCC_ClockConfig+0x358>)
 8008d78:	6a1b      	ldr	r3, [r3, #32]
 8008d7a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008d7e:	429a      	cmp	r2, r3
 8008d80:	d208      	bcs.n	8008d94 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8008d82:	4b1a      	ldr	r3, [pc, #104]	@ (8008dec <HAL_RCC_ClockConfig+0x358>)
 8008d84:	6a1b      	ldr	r3, [r3, #32]
 8008d86:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	69db      	ldr	r3, [r3, #28]
 8008d8e:	4917      	ldr	r1, [pc, #92]	@ (8008dec <HAL_RCC_ClockConfig+0x358>)
 8008d90:	4313      	orrs	r3, r2
 8008d92:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008d94:	f000 f834 	bl	8008e00 <HAL_RCC_GetSysClockFreq>
 8008d98:	4602      	mov	r2, r0
 8008d9a:	4b14      	ldr	r3, [pc, #80]	@ (8008dec <HAL_RCC_ClockConfig+0x358>)
 8008d9c:	699b      	ldr	r3, [r3, #24]
 8008d9e:	0a1b      	lsrs	r3, r3, #8
 8008da0:	f003 030f 	and.w	r3, r3, #15
 8008da4:	4912      	ldr	r1, [pc, #72]	@ (8008df0 <HAL_RCC_ClockConfig+0x35c>)
 8008da6:	5ccb      	ldrb	r3, [r1, r3]
 8008da8:	f003 031f 	and.w	r3, r3, #31
 8008dac:	fa22 f303 	lsr.w	r3, r2, r3
 8008db0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008db2:	4b0e      	ldr	r3, [pc, #56]	@ (8008dec <HAL_RCC_ClockConfig+0x358>)
 8008db4:	699b      	ldr	r3, [r3, #24]
 8008db6:	f003 030f 	and.w	r3, r3, #15
 8008dba:	4a0d      	ldr	r2, [pc, #52]	@ (8008df0 <HAL_RCC_ClockConfig+0x35c>)
 8008dbc:	5cd3      	ldrb	r3, [r2, r3]
 8008dbe:	f003 031f 	and.w	r3, r3, #31
 8008dc2:	693a      	ldr	r2, [r7, #16]
 8008dc4:	fa22 f303 	lsr.w	r3, r2, r3
 8008dc8:	4a0a      	ldr	r2, [pc, #40]	@ (8008df4 <HAL_RCC_ClockConfig+0x360>)
 8008dca:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008dcc:	4a0a      	ldr	r2, [pc, #40]	@ (8008df8 <HAL_RCC_ClockConfig+0x364>)
 8008dce:	693b      	ldr	r3, [r7, #16]
 8008dd0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8008dd2:	4b0a      	ldr	r3, [pc, #40]	@ (8008dfc <HAL_RCC_ClockConfig+0x368>)
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	f7f9 feb0 	bl	8002b3c <HAL_InitTick>
 8008ddc:	4603      	mov	r3, r0
 8008dde:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8008de0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008de2:	4618      	mov	r0, r3
 8008de4:	3718      	adds	r7, #24
 8008de6:	46bd      	mov	sp, r7
 8008de8:	bd80      	pop	{r7, pc}
 8008dea:	bf00      	nop
 8008dec:	58024400 	.word	0x58024400
 8008df0:	08015190 	.word	0x08015190
 8008df4:	24000004 	.word	0x24000004
 8008df8:	24000000 	.word	0x24000000
 8008dfc:	24000024 	.word	0x24000024

08008e00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008e00:	b480      	push	{r7}
 8008e02:	b089      	sub	sp, #36	@ 0x24
 8008e04:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008e06:	4bb3      	ldr	r3, [pc, #716]	@ (80090d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008e08:	691b      	ldr	r3, [r3, #16]
 8008e0a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008e0e:	2b18      	cmp	r3, #24
 8008e10:	f200 8155 	bhi.w	80090be <HAL_RCC_GetSysClockFreq+0x2be>
 8008e14:	a201      	add	r2, pc, #4	@ (adr r2, 8008e1c <HAL_RCC_GetSysClockFreq+0x1c>)
 8008e16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e1a:	bf00      	nop
 8008e1c:	08008e81 	.word	0x08008e81
 8008e20:	080090bf 	.word	0x080090bf
 8008e24:	080090bf 	.word	0x080090bf
 8008e28:	080090bf 	.word	0x080090bf
 8008e2c:	080090bf 	.word	0x080090bf
 8008e30:	080090bf 	.word	0x080090bf
 8008e34:	080090bf 	.word	0x080090bf
 8008e38:	080090bf 	.word	0x080090bf
 8008e3c:	08008ea7 	.word	0x08008ea7
 8008e40:	080090bf 	.word	0x080090bf
 8008e44:	080090bf 	.word	0x080090bf
 8008e48:	080090bf 	.word	0x080090bf
 8008e4c:	080090bf 	.word	0x080090bf
 8008e50:	080090bf 	.word	0x080090bf
 8008e54:	080090bf 	.word	0x080090bf
 8008e58:	080090bf 	.word	0x080090bf
 8008e5c:	08008ead 	.word	0x08008ead
 8008e60:	080090bf 	.word	0x080090bf
 8008e64:	080090bf 	.word	0x080090bf
 8008e68:	080090bf 	.word	0x080090bf
 8008e6c:	080090bf 	.word	0x080090bf
 8008e70:	080090bf 	.word	0x080090bf
 8008e74:	080090bf 	.word	0x080090bf
 8008e78:	080090bf 	.word	0x080090bf
 8008e7c:	08008eb3 	.word	0x08008eb3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008e80:	4b94      	ldr	r3, [pc, #592]	@ (80090d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	f003 0320 	and.w	r3, r3, #32
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d009      	beq.n	8008ea0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008e8c:	4b91      	ldr	r3, [pc, #580]	@ (80090d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	08db      	lsrs	r3, r3, #3
 8008e92:	f003 0303 	and.w	r3, r3, #3
 8008e96:	4a90      	ldr	r2, [pc, #576]	@ (80090d8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008e98:	fa22 f303 	lsr.w	r3, r2, r3
 8008e9c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8008e9e:	e111      	b.n	80090c4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008ea0:	4b8d      	ldr	r3, [pc, #564]	@ (80090d8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008ea2:	61bb      	str	r3, [r7, #24]
      break;
 8008ea4:	e10e      	b.n	80090c4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8008ea6:	4b8d      	ldr	r3, [pc, #564]	@ (80090dc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008ea8:	61bb      	str	r3, [r7, #24]
      break;
 8008eaa:	e10b      	b.n	80090c4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8008eac:	4b8c      	ldr	r3, [pc, #560]	@ (80090e0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8008eae:	61bb      	str	r3, [r7, #24]
      break;
 8008eb0:	e108      	b.n	80090c4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008eb2:	4b88      	ldr	r3, [pc, #544]	@ (80090d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008eb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008eb6:	f003 0303 	and.w	r3, r3, #3
 8008eba:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8008ebc:	4b85      	ldr	r3, [pc, #532]	@ (80090d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008ebe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ec0:	091b      	lsrs	r3, r3, #4
 8008ec2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008ec6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008ec8:	4b82      	ldr	r3, [pc, #520]	@ (80090d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008eca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ecc:	f003 0301 	and.w	r3, r3, #1
 8008ed0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8008ed2:	4b80      	ldr	r3, [pc, #512]	@ (80090d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008ed4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008ed6:	08db      	lsrs	r3, r3, #3
 8008ed8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008edc:	68fa      	ldr	r2, [r7, #12]
 8008ede:	fb02 f303 	mul.w	r3, r2, r3
 8008ee2:	ee07 3a90 	vmov	s15, r3
 8008ee6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008eea:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8008eee:	693b      	ldr	r3, [r7, #16]
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	f000 80e1 	beq.w	80090b8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8008ef6:	697b      	ldr	r3, [r7, #20]
 8008ef8:	2b02      	cmp	r3, #2
 8008efa:	f000 8083 	beq.w	8009004 <HAL_RCC_GetSysClockFreq+0x204>
 8008efe:	697b      	ldr	r3, [r7, #20]
 8008f00:	2b02      	cmp	r3, #2
 8008f02:	f200 80a1 	bhi.w	8009048 <HAL_RCC_GetSysClockFreq+0x248>
 8008f06:	697b      	ldr	r3, [r7, #20]
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d003      	beq.n	8008f14 <HAL_RCC_GetSysClockFreq+0x114>
 8008f0c:	697b      	ldr	r3, [r7, #20]
 8008f0e:	2b01      	cmp	r3, #1
 8008f10:	d056      	beq.n	8008fc0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8008f12:	e099      	b.n	8009048 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008f14:	4b6f      	ldr	r3, [pc, #444]	@ (80090d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	f003 0320 	and.w	r3, r3, #32
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d02d      	beq.n	8008f7c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008f20:	4b6c      	ldr	r3, [pc, #432]	@ (80090d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	08db      	lsrs	r3, r3, #3
 8008f26:	f003 0303 	and.w	r3, r3, #3
 8008f2a:	4a6b      	ldr	r2, [pc, #428]	@ (80090d8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008f2c:	fa22 f303 	lsr.w	r3, r2, r3
 8008f30:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	ee07 3a90 	vmov	s15, r3
 8008f38:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f3c:	693b      	ldr	r3, [r7, #16]
 8008f3e:	ee07 3a90 	vmov	s15, r3
 8008f42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f4a:	4b62      	ldr	r3, [pc, #392]	@ (80090d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008f4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f52:	ee07 3a90 	vmov	s15, r3
 8008f56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f5a:	ed97 6a02 	vldr	s12, [r7, #8]
 8008f5e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80090e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008f62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f6a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008f6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f76:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8008f7a:	e087      	b.n	800908c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008f7c:	693b      	ldr	r3, [r7, #16]
 8008f7e:	ee07 3a90 	vmov	s15, r3
 8008f82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f86:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80090e8 <HAL_RCC_GetSysClockFreq+0x2e8>
 8008f8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f8e:	4b51      	ldr	r3, [pc, #324]	@ (80090d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008f90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f96:	ee07 3a90 	vmov	s15, r3
 8008f9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f9e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008fa2:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80090e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008fa6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008faa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008fae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008fb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008fb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008fba:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008fbe:	e065      	b.n	800908c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008fc0:	693b      	ldr	r3, [r7, #16]
 8008fc2:	ee07 3a90 	vmov	s15, r3
 8008fc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008fca:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80090ec <HAL_RCC_GetSysClockFreq+0x2ec>
 8008fce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008fd2:	4b40      	ldr	r3, [pc, #256]	@ (80090d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008fd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008fd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008fda:	ee07 3a90 	vmov	s15, r3
 8008fde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008fe2:	ed97 6a02 	vldr	s12, [r7, #8]
 8008fe6:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80090e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008fea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008fee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ff2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008ff6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ffa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ffe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009002:	e043      	b.n	800908c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009004:	693b      	ldr	r3, [r7, #16]
 8009006:	ee07 3a90 	vmov	s15, r3
 800900a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800900e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80090f0 <HAL_RCC_GetSysClockFreq+0x2f0>
 8009012:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009016:	4b2f      	ldr	r3, [pc, #188]	@ (80090d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009018:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800901a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800901e:	ee07 3a90 	vmov	s15, r3
 8009022:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009026:	ed97 6a02 	vldr	s12, [r7, #8]
 800902a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80090e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800902e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009032:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009036:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800903a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800903e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009042:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009046:	e021      	b.n	800908c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009048:	693b      	ldr	r3, [r7, #16]
 800904a:	ee07 3a90 	vmov	s15, r3
 800904e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009052:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80090ec <HAL_RCC_GetSysClockFreq+0x2ec>
 8009056:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800905a:	4b1e      	ldr	r3, [pc, #120]	@ (80090d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800905c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800905e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009062:	ee07 3a90 	vmov	s15, r3
 8009066:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800906a:	ed97 6a02 	vldr	s12, [r7, #8]
 800906e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80090e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009072:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009076:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800907a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800907e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009082:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009086:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800908a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800908c:	4b11      	ldr	r3, [pc, #68]	@ (80090d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800908e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009090:	0a5b      	lsrs	r3, r3, #9
 8009092:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009096:	3301      	adds	r3, #1
 8009098:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800909a:	683b      	ldr	r3, [r7, #0]
 800909c:	ee07 3a90 	vmov	s15, r3
 80090a0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80090a4:	edd7 6a07 	vldr	s13, [r7, #28]
 80090a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80090ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80090b0:	ee17 3a90 	vmov	r3, s15
 80090b4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80090b6:	e005      	b.n	80090c4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80090b8:	2300      	movs	r3, #0
 80090ba:	61bb      	str	r3, [r7, #24]
      break;
 80090bc:	e002      	b.n	80090c4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80090be:	4b07      	ldr	r3, [pc, #28]	@ (80090dc <HAL_RCC_GetSysClockFreq+0x2dc>)
 80090c0:	61bb      	str	r3, [r7, #24]
      break;
 80090c2:	bf00      	nop
  }

  return sysclockfreq;
 80090c4:	69bb      	ldr	r3, [r7, #24]
}
 80090c6:	4618      	mov	r0, r3
 80090c8:	3724      	adds	r7, #36	@ 0x24
 80090ca:	46bd      	mov	sp, r7
 80090cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d0:	4770      	bx	lr
 80090d2:	bf00      	nop
 80090d4:	58024400 	.word	0x58024400
 80090d8:	03d09000 	.word	0x03d09000
 80090dc:	003d0900 	.word	0x003d0900
 80090e0:	017d7840 	.word	0x017d7840
 80090e4:	46000000 	.word	0x46000000
 80090e8:	4c742400 	.word	0x4c742400
 80090ec:	4a742400 	.word	0x4a742400
 80090f0:	4bbebc20 	.word	0x4bbebc20

080090f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80090f4:	b580      	push	{r7, lr}
 80090f6:	b082      	sub	sp, #8
 80090f8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80090fa:	f7ff fe81 	bl	8008e00 <HAL_RCC_GetSysClockFreq>
 80090fe:	4602      	mov	r2, r0
 8009100:	4b10      	ldr	r3, [pc, #64]	@ (8009144 <HAL_RCC_GetHCLKFreq+0x50>)
 8009102:	699b      	ldr	r3, [r3, #24]
 8009104:	0a1b      	lsrs	r3, r3, #8
 8009106:	f003 030f 	and.w	r3, r3, #15
 800910a:	490f      	ldr	r1, [pc, #60]	@ (8009148 <HAL_RCC_GetHCLKFreq+0x54>)
 800910c:	5ccb      	ldrb	r3, [r1, r3]
 800910e:	f003 031f 	and.w	r3, r3, #31
 8009112:	fa22 f303 	lsr.w	r3, r2, r3
 8009116:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009118:	4b0a      	ldr	r3, [pc, #40]	@ (8009144 <HAL_RCC_GetHCLKFreq+0x50>)
 800911a:	699b      	ldr	r3, [r3, #24]
 800911c:	f003 030f 	and.w	r3, r3, #15
 8009120:	4a09      	ldr	r2, [pc, #36]	@ (8009148 <HAL_RCC_GetHCLKFreq+0x54>)
 8009122:	5cd3      	ldrb	r3, [r2, r3]
 8009124:	f003 031f 	and.w	r3, r3, #31
 8009128:	687a      	ldr	r2, [r7, #4]
 800912a:	fa22 f303 	lsr.w	r3, r2, r3
 800912e:	4a07      	ldr	r2, [pc, #28]	@ (800914c <HAL_RCC_GetHCLKFreq+0x58>)
 8009130:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009132:	4a07      	ldr	r2, [pc, #28]	@ (8009150 <HAL_RCC_GetHCLKFreq+0x5c>)
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8009138:	4b04      	ldr	r3, [pc, #16]	@ (800914c <HAL_RCC_GetHCLKFreq+0x58>)
 800913a:	681b      	ldr	r3, [r3, #0]
}
 800913c:	4618      	mov	r0, r3
 800913e:	3708      	adds	r7, #8
 8009140:	46bd      	mov	sp, r7
 8009142:	bd80      	pop	{r7, pc}
 8009144:	58024400 	.word	0x58024400
 8009148:	08015190 	.word	0x08015190
 800914c:	24000004 	.word	0x24000004
 8009150:	24000000 	.word	0x24000000

08009154 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009154:	b580      	push	{r7, lr}
 8009156:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8009158:	f7ff ffcc 	bl	80090f4 <HAL_RCC_GetHCLKFreq>
 800915c:	4602      	mov	r2, r0
 800915e:	4b06      	ldr	r3, [pc, #24]	@ (8009178 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009160:	69db      	ldr	r3, [r3, #28]
 8009162:	091b      	lsrs	r3, r3, #4
 8009164:	f003 0307 	and.w	r3, r3, #7
 8009168:	4904      	ldr	r1, [pc, #16]	@ (800917c <HAL_RCC_GetPCLK1Freq+0x28>)
 800916a:	5ccb      	ldrb	r3, [r1, r3]
 800916c:	f003 031f 	and.w	r3, r3, #31
 8009170:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8009174:	4618      	mov	r0, r3
 8009176:	bd80      	pop	{r7, pc}
 8009178:	58024400 	.word	0x58024400
 800917c:	08015190 	.word	0x08015190

08009180 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009180:	b580      	push	{r7, lr}
 8009182:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8009184:	f7ff ffb6 	bl	80090f4 <HAL_RCC_GetHCLKFreq>
 8009188:	4602      	mov	r2, r0
 800918a:	4b06      	ldr	r3, [pc, #24]	@ (80091a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800918c:	69db      	ldr	r3, [r3, #28]
 800918e:	0a1b      	lsrs	r3, r3, #8
 8009190:	f003 0307 	and.w	r3, r3, #7
 8009194:	4904      	ldr	r1, [pc, #16]	@ (80091a8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8009196:	5ccb      	ldrb	r3, [r1, r3]
 8009198:	f003 031f 	and.w	r3, r3, #31
 800919c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80091a0:	4618      	mov	r0, r3
 80091a2:	bd80      	pop	{r7, pc}
 80091a4:	58024400 	.word	0x58024400
 80091a8:	08015190 	.word	0x08015190

080091ac <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80091ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80091b0:	b0ca      	sub	sp, #296	@ 0x128
 80091b2:	af00      	add	r7, sp, #0
 80091b4:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80091b8:	2300      	movs	r3, #0
 80091ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80091be:	2300      	movs	r3, #0
 80091c0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80091c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80091c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091cc:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80091d0:	2500      	movs	r5, #0
 80091d2:	ea54 0305 	orrs.w	r3, r4, r5
 80091d6:	d049      	beq.n	800926c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80091d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80091dc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80091de:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80091e2:	d02f      	beq.n	8009244 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80091e4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80091e8:	d828      	bhi.n	800923c <HAL_RCCEx_PeriphCLKConfig+0x90>
 80091ea:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80091ee:	d01a      	beq.n	8009226 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80091f0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80091f4:	d822      	bhi.n	800923c <HAL_RCCEx_PeriphCLKConfig+0x90>
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d003      	beq.n	8009202 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80091fa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80091fe:	d007      	beq.n	8009210 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8009200:	e01c      	b.n	800923c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009202:	4bb8      	ldr	r3, [pc, #736]	@ (80094e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009204:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009206:	4ab7      	ldr	r2, [pc, #732]	@ (80094e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009208:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800920c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800920e:	e01a      	b.n	8009246 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009210:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009214:	3308      	adds	r3, #8
 8009216:	2102      	movs	r1, #2
 8009218:	4618      	mov	r0, r3
 800921a:	f002 fb61 	bl	800b8e0 <RCCEx_PLL2_Config>
 800921e:	4603      	mov	r3, r0
 8009220:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009224:	e00f      	b.n	8009246 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009226:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800922a:	3328      	adds	r3, #40	@ 0x28
 800922c:	2102      	movs	r1, #2
 800922e:	4618      	mov	r0, r3
 8009230:	f002 fc08 	bl	800ba44 <RCCEx_PLL3_Config>
 8009234:	4603      	mov	r3, r0
 8009236:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800923a:	e004      	b.n	8009246 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800923c:	2301      	movs	r3, #1
 800923e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009242:	e000      	b.n	8009246 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8009244:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009246:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800924a:	2b00      	cmp	r3, #0
 800924c:	d10a      	bne.n	8009264 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800924e:	4ba5      	ldr	r3, [pc, #660]	@ (80094e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009250:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009252:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8009256:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800925a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800925c:	4aa1      	ldr	r2, [pc, #644]	@ (80094e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800925e:	430b      	orrs	r3, r1
 8009260:	6513      	str	r3, [r2, #80]	@ 0x50
 8009262:	e003      	b.n	800926c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009264:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009268:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800926c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009274:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8009278:	f04f 0900 	mov.w	r9, #0
 800927c:	ea58 0309 	orrs.w	r3, r8, r9
 8009280:	d047      	beq.n	8009312 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8009282:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009286:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009288:	2b04      	cmp	r3, #4
 800928a:	d82a      	bhi.n	80092e2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800928c:	a201      	add	r2, pc, #4	@ (adr r2, 8009294 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800928e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009292:	bf00      	nop
 8009294:	080092a9 	.word	0x080092a9
 8009298:	080092b7 	.word	0x080092b7
 800929c:	080092cd 	.word	0x080092cd
 80092a0:	080092eb 	.word	0x080092eb
 80092a4:	080092eb 	.word	0x080092eb
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80092a8:	4b8e      	ldr	r3, [pc, #568]	@ (80094e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80092aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092ac:	4a8d      	ldr	r2, [pc, #564]	@ (80094e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80092ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80092b2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80092b4:	e01a      	b.n	80092ec <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80092b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80092ba:	3308      	adds	r3, #8
 80092bc:	2100      	movs	r1, #0
 80092be:	4618      	mov	r0, r3
 80092c0:	f002 fb0e 	bl	800b8e0 <RCCEx_PLL2_Config>
 80092c4:	4603      	mov	r3, r0
 80092c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80092ca:	e00f      	b.n	80092ec <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80092cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80092d0:	3328      	adds	r3, #40	@ 0x28
 80092d2:	2100      	movs	r1, #0
 80092d4:	4618      	mov	r0, r3
 80092d6:	f002 fbb5 	bl	800ba44 <RCCEx_PLL3_Config>
 80092da:	4603      	mov	r3, r0
 80092dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80092e0:	e004      	b.n	80092ec <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80092e2:	2301      	movs	r3, #1
 80092e4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80092e8:	e000      	b.n	80092ec <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80092ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80092ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d10a      	bne.n	800930a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80092f4:	4b7b      	ldr	r3, [pc, #492]	@ (80094e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80092f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80092f8:	f023 0107 	bic.w	r1, r3, #7
 80092fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009300:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009302:	4a78      	ldr	r2, [pc, #480]	@ (80094e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009304:	430b      	orrs	r3, r1
 8009306:	6513      	str	r3, [r2, #80]	@ 0x50
 8009308:	e003      	b.n	8009312 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800930a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800930e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8009312:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800931a:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800931e:	f04f 0b00 	mov.w	fp, #0
 8009322:	ea5a 030b 	orrs.w	r3, sl, fp
 8009326:	d04c      	beq.n	80093c2 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8009328:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800932c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800932e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009332:	d030      	beq.n	8009396 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8009334:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009338:	d829      	bhi.n	800938e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800933a:	2bc0      	cmp	r3, #192	@ 0xc0
 800933c:	d02d      	beq.n	800939a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800933e:	2bc0      	cmp	r3, #192	@ 0xc0
 8009340:	d825      	bhi.n	800938e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8009342:	2b80      	cmp	r3, #128	@ 0x80
 8009344:	d018      	beq.n	8009378 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8009346:	2b80      	cmp	r3, #128	@ 0x80
 8009348:	d821      	bhi.n	800938e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800934a:	2b00      	cmp	r3, #0
 800934c:	d002      	beq.n	8009354 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800934e:	2b40      	cmp	r3, #64	@ 0x40
 8009350:	d007      	beq.n	8009362 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8009352:	e01c      	b.n	800938e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009354:	4b63      	ldr	r3, [pc, #396]	@ (80094e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009356:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009358:	4a62      	ldr	r2, [pc, #392]	@ (80094e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800935a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800935e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8009360:	e01c      	b.n	800939c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009362:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009366:	3308      	adds	r3, #8
 8009368:	2100      	movs	r1, #0
 800936a:	4618      	mov	r0, r3
 800936c:	f002 fab8 	bl	800b8e0 <RCCEx_PLL2_Config>
 8009370:	4603      	mov	r3, r0
 8009372:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8009376:	e011      	b.n	800939c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009378:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800937c:	3328      	adds	r3, #40	@ 0x28
 800937e:	2100      	movs	r1, #0
 8009380:	4618      	mov	r0, r3
 8009382:	f002 fb5f 	bl	800ba44 <RCCEx_PLL3_Config>
 8009386:	4603      	mov	r3, r0
 8009388:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800938c:	e006      	b.n	800939c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800938e:	2301      	movs	r3, #1
 8009390:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009394:	e002      	b.n	800939c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8009396:	bf00      	nop
 8009398:	e000      	b.n	800939c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800939a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800939c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d10a      	bne.n	80093ba <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80093a4:	4b4f      	ldr	r3, [pc, #316]	@ (80094e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80093a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80093a8:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80093ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80093b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80093b2:	4a4c      	ldr	r2, [pc, #304]	@ (80094e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80093b4:	430b      	orrs	r3, r1
 80093b6:	6513      	str	r3, [r2, #80]	@ 0x50
 80093b8:	e003      	b.n	80093c2 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80093ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80093be:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80093c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80093c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093ca:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80093ce:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80093d2:	2300      	movs	r3, #0
 80093d4:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80093d8:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80093dc:	460b      	mov	r3, r1
 80093de:	4313      	orrs	r3, r2
 80093e0:	d053      	beq.n	800948a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80093e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80093e6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80093ea:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80093ee:	d035      	beq.n	800945c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80093f0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80093f4:	d82e      	bhi.n	8009454 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80093f6:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80093fa:	d031      	beq.n	8009460 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80093fc:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8009400:	d828      	bhi.n	8009454 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8009402:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009406:	d01a      	beq.n	800943e <HAL_RCCEx_PeriphCLKConfig+0x292>
 8009408:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800940c:	d822      	bhi.n	8009454 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800940e:	2b00      	cmp	r3, #0
 8009410:	d003      	beq.n	800941a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8009412:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009416:	d007      	beq.n	8009428 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8009418:	e01c      	b.n	8009454 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800941a:	4b32      	ldr	r3, [pc, #200]	@ (80094e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800941c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800941e:	4a31      	ldr	r2, [pc, #196]	@ (80094e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009420:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009424:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009426:	e01c      	b.n	8009462 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009428:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800942c:	3308      	adds	r3, #8
 800942e:	2100      	movs	r1, #0
 8009430:	4618      	mov	r0, r3
 8009432:	f002 fa55 	bl	800b8e0 <RCCEx_PLL2_Config>
 8009436:	4603      	mov	r3, r0
 8009438:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800943c:	e011      	b.n	8009462 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800943e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009442:	3328      	adds	r3, #40	@ 0x28
 8009444:	2100      	movs	r1, #0
 8009446:	4618      	mov	r0, r3
 8009448:	f002 fafc 	bl	800ba44 <RCCEx_PLL3_Config>
 800944c:	4603      	mov	r3, r0
 800944e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009452:	e006      	b.n	8009462 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8009454:	2301      	movs	r3, #1
 8009456:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800945a:	e002      	b.n	8009462 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800945c:	bf00      	nop
 800945e:	e000      	b.n	8009462 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8009460:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009462:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009466:	2b00      	cmp	r3, #0
 8009468:	d10b      	bne.n	8009482 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800946a:	4b1e      	ldr	r3, [pc, #120]	@ (80094e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800946c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800946e:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8009472:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009476:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800947a:	4a1a      	ldr	r2, [pc, #104]	@ (80094e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800947c:	430b      	orrs	r3, r1
 800947e:	6593      	str	r3, [r2, #88]	@ 0x58
 8009480:	e003      	b.n	800948a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009482:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009486:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800948a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800948e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009492:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8009496:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800949a:	2300      	movs	r3, #0
 800949c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80094a0:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80094a4:	460b      	mov	r3, r1
 80094a6:	4313      	orrs	r3, r2
 80094a8:	d056      	beq.n	8009558 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80094aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80094ae:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80094b2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80094b6:	d038      	beq.n	800952a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80094b8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80094bc:	d831      	bhi.n	8009522 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80094be:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80094c2:	d034      	beq.n	800952e <HAL_RCCEx_PeriphCLKConfig+0x382>
 80094c4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80094c8:	d82b      	bhi.n	8009522 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80094ca:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80094ce:	d01d      	beq.n	800950c <HAL_RCCEx_PeriphCLKConfig+0x360>
 80094d0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80094d4:	d825      	bhi.n	8009522 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d006      	beq.n	80094e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80094da:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80094de:	d00a      	beq.n	80094f6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80094e0:	e01f      	b.n	8009522 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80094e2:	bf00      	nop
 80094e4:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80094e8:	4ba2      	ldr	r3, [pc, #648]	@ (8009774 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80094ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094ec:	4aa1      	ldr	r2, [pc, #644]	@ (8009774 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80094ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80094f2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80094f4:	e01c      	b.n	8009530 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80094f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80094fa:	3308      	adds	r3, #8
 80094fc:	2100      	movs	r1, #0
 80094fe:	4618      	mov	r0, r3
 8009500:	f002 f9ee 	bl	800b8e0 <RCCEx_PLL2_Config>
 8009504:	4603      	mov	r3, r0
 8009506:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800950a:	e011      	b.n	8009530 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800950c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009510:	3328      	adds	r3, #40	@ 0x28
 8009512:	2100      	movs	r1, #0
 8009514:	4618      	mov	r0, r3
 8009516:	f002 fa95 	bl	800ba44 <RCCEx_PLL3_Config>
 800951a:	4603      	mov	r3, r0
 800951c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009520:	e006      	b.n	8009530 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8009522:	2301      	movs	r3, #1
 8009524:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009528:	e002      	b.n	8009530 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800952a:	bf00      	nop
 800952c:	e000      	b.n	8009530 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800952e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009530:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009534:	2b00      	cmp	r3, #0
 8009536:	d10b      	bne.n	8009550 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8009538:	4b8e      	ldr	r3, [pc, #568]	@ (8009774 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800953a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800953c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8009540:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009544:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8009548:	4a8a      	ldr	r2, [pc, #552]	@ (8009774 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800954a:	430b      	orrs	r3, r1
 800954c:	6593      	str	r3, [r2, #88]	@ 0x58
 800954e:	e003      	b.n	8009558 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009550:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009554:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8009558:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800955c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009560:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8009564:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8009568:	2300      	movs	r3, #0
 800956a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800956e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8009572:	460b      	mov	r3, r1
 8009574:	4313      	orrs	r3, r2
 8009576:	d03a      	beq.n	80095ee <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8009578:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800957c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800957e:	2b30      	cmp	r3, #48	@ 0x30
 8009580:	d01f      	beq.n	80095c2 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8009582:	2b30      	cmp	r3, #48	@ 0x30
 8009584:	d819      	bhi.n	80095ba <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8009586:	2b20      	cmp	r3, #32
 8009588:	d00c      	beq.n	80095a4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800958a:	2b20      	cmp	r3, #32
 800958c:	d815      	bhi.n	80095ba <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800958e:	2b00      	cmp	r3, #0
 8009590:	d019      	beq.n	80095c6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8009592:	2b10      	cmp	r3, #16
 8009594:	d111      	bne.n	80095ba <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009596:	4b77      	ldr	r3, [pc, #476]	@ (8009774 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009598:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800959a:	4a76      	ldr	r2, [pc, #472]	@ (8009774 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800959c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80095a0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80095a2:	e011      	b.n	80095c8 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80095a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80095a8:	3308      	adds	r3, #8
 80095aa:	2102      	movs	r1, #2
 80095ac:	4618      	mov	r0, r3
 80095ae:	f002 f997 	bl	800b8e0 <RCCEx_PLL2_Config>
 80095b2:	4603      	mov	r3, r0
 80095b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80095b8:	e006      	b.n	80095c8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80095ba:	2301      	movs	r3, #1
 80095bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80095c0:	e002      	b.n	80095c8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80095c2:	bf00      	nop
 80095c4:	e000      	b.n	80095c8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80095c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80095c8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d10a      	bne.n	80095e6 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80095d0:	4b68      	ldr	r3, [pc, #416]	@ (8009774 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80095d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80095d4:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80095d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80095dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80095de:	4a65      	ldr	r2, [pc, #404]	@ (8009774 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80095e0:	430b      	orrs	r3, r1
 80095e2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80095e4:	e003      	b.n	80095ee <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80095e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80095ea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80095ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80095f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095f6:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80095fa:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80095fe:	2300      	movs	r3, #0
 8009600:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8009604:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8009608:	460b      	mov	r3, r1
 800960a:	4313      	orrs	r3, r2
 800960c:	d051      	beq.n	80096b2 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800960e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009612:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009614:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009618:	d035      	beq.n	8009686 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800961a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800961e:	d82e      	bhi.n	800967e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8009620:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009624:	d031      	beq.n	800968a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8009626:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800962a:	d828      	bhi.n	800967e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800962c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009630:	d01a      	beq.n	8009668 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8009632:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009636:	d822      	bhi.n	800967e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8009638:	2b00      	cmp	r3, #0
 800963a:	d003      	beq.n	8009644 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800963c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009640:	d007      	beq.n	8009652 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8009642:	e01c      	b.n	800967e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009644:	4b4b      	ldr	r3, [pc, #300]	@ (8009774 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009646:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009648:	4a4a      	ldr	r2, [pc, #296]	@ (8009774 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800964a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800964e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009650:	e01c      	b.n	800968c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009652:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009656:	3308      	adds	r3, #8
 8009658:	2100      	movs	r1, #0
 800965a:	4618      	mov	r0, r3
 800965c:	f002 f940 	bl	800b8e0 <RCCEx_PLL2_Config>
 8009660:	4603      	mov	r3, r0
 8009662:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009666:	e011      	b.n	800968c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009668:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800966c:	3328      	adds	r3, #40	@ 0x28
 800966e:	2100      	movs	r1, #0
 8009670:	4618      	mov	r0, r3
 8009672:	f002 f9e7 	bl	800ba44 <RCCEx_PLL3_Config>
 8009676:	4603      	mov	r3, r0
 8009678:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800967c:	e006      	b.n	800968c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800967e:	2301      	movs	r3, #1
 8009680:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009684:	e002      	b.n	800968c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8009686:	bf00      	nop
 8009688:	e000      	b.n	800968c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800968a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800968c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009690:	2b00      	cmp	r3, #0
 8009692:	d10a      	bne.n	80096aa <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8009694:	4b37      	ldr	r3, [pc, #220]	@ (8009774 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009696:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009698:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800969c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80096a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80096a2:	4a34      	ldr	r2, [pc, #208]	@ (8009774 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80096a4:	430b      	orrs	r3, r1
 80096a6:	6513      	str	r3, [r2, #80]	@ 0x50
 80096a8:	e003      	b.n	80096b2 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80096aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80096ae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80096b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80096b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096ba:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80096be:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80096c2:	2300      	movs	r3, #0
 80096c4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80096c8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80096cc:	460b      	mov	r3, r1
 80096ce:	4313      	orrs	r3, r2
 80096d0:	d056      	beq.n	8009780 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80096d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80096d6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80096d8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80096dc:	d033      	beq.n	8009746 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80096de:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80096e2:	d82c      	bhi.n	800973e <HAL_RCCEx_PeriphCLKConfig+0x592>
 80096e4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80096e8:	d02f      	beq.n	800974a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80096ea:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80096ee:	d826      	bhi.n	800973e <HAL_RCCEx_PeriphCLKConfig+0x592>
 80096f0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80096f4:	d02b      	beq.n	800974e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80096f6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80096fa:	d820      	bhi.n	800973e <HAL_RCCEx_PeriphCLKConfig+0x592>
 80096fc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009700:	d012      	beq.n	8009728 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8009702:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009706:	d81a      	bhi.n	800973e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009708:	2b00      	cmp	r3, #0
 800970a:	d022      	beq.n	8009752 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800970c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009710:	d115      	bne.n	800973e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009712:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009716:	3308      	adds	r3, #8
 8009718:	2101      	movs	r1, #1
 800971a:	4618      	mov	r0, r3
 800971c:	f002 f8e0 	bl	800b8e0 <RCCEx_PLL2_Config>
 8009720:	4603      	mov	r3, r0
 8009722:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8009726:	e015      	b.n	8009754 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009728:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800972c:	3328      	adds	r3, #40	@ 0x28
 800972e:	2101      	movs	r1, #1
 8009730:	4618      	mov	r0, r3
 8009732:	f002 f987 	bl	800ba44 <RCCEx_PLL3_Config>
 8009736:	4603      	mov	r3, r0
 8009738:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800973c:	e00a      	b.n	8009754 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800973e:	2301      	movs	r3, #1
 8009740:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009744:	e006      	b.n	8009754 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8009746:	bf00      	nop
 8009748:	e004      	b.n	8009754 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800974a:	bf00      	nop
 800974c:	e002      	b.n	8009754 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800974e:	bf00      	nop
 8009750:	e000      	b.n	8009754 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8009752:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009754:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009758:	2b00      	cmp	r3, #0
 800975a:	d10d      	bne.n	8009778 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800975c:	4b05      	ldr	r3, [pc, #20]	@ (8009774 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800975e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009760:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8009764:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009768:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800976a:	4a02      	ldr	r2, [pc, #8]	@ (8009774 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800976c:	430b      	orrs	r3, r1
 800976e:	6513      	str	r3, [r2, #80]	@ 0x50
 8009770:	e006      	b.n	8009780 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8009772:	bf00      	nop
 8009774:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009778:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800977c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8009780:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009784:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009788:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800978c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009790:	2300      	movs	r3, #0
 8009792:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009796:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800979a:	460b      	mov	r3, r1
 800979c:	4313      	orrs	r3, r2
 800979e:	d055      	beq.n	800984c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80097a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80097a4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80097a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80097ac:	d033      	beq.n	8009816 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80097ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80097b2:	d82c      	bhi.n	800980e <HAL_RCCEx_PeriphCLKConfig+0x662>
 80097b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80097b8:	d02f      	beq.n	800981a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80097ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80097be:	d826      	bhi.n	800980e <HAL_RCCEx_PeriphCLKConfig+0x662>
 80097c0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80097c4:	d02b      	beq.n	800981e <HAL_RCCEx_PeriphCLKConfig+0x672>
 80097c6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80097ca:	d820      	bhi.n	800980e <HAL_RCCEx_PeriphCLKConfig+0x662>
 80097cc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80097d0:	d012      	beq.n	80097f8 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80097d2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80097d6:	d81a      	bhi.n	800980e <HAL_RCCEx_PeriphCLKConfig+0x662>
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d022      	beq.n	8009822 <HAL_RCCEx_PeriphCLKConfig+0x676>
 80097dc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80097e0:	d115      	bne.n	800980e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80097e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80097e6:	3308      	adds	r3, #8
 80097e8:	2101      	movs	r1, #1
 80097ea:	4618      	mov	r0, r3
 80097ec:	f002 f878 	bl	800b8e0 <RCCEx_PLL2_Config>
 80097f0:	4603      	mov	r3, r0
 80097f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80097f6:	e015      	b.n	8009824 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80097f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80097fc:	3328      	adds	r3, #40	@ 0x28
 80097fe:	2101      	movs	r1, #1
 8009800:	4618      	mov	r0, r3
 8009802:	f002 f91f 	bl	800ba44 <RCCEx_PLL3_Config>
 8009806:	4603      	mov	r3, r0
 8009808:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800980c:	e00a      	b.n	8009824 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800980e:	2301      	movs	r3, #1
 8009810:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009814:	e006      	b.n	8009824 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009816:	bf00      	nop
 8009818:	e004      	b.n	8009824 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800981a:	bf00      	nop
 800981c:	e002      	b.n	8009824 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800981e:	bf00      	nop
 8009820:	e000      	b.n	8009824 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009822:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009824:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009828:	2b00      	cmp	r3, #0
 800982a:	d10b      	bne.n	8009844 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800982c:	4ba3      	ldr	r3, [pc, #652]	@ (8009abc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800982e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009830:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8009834:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009838:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800983c:	4a9f      	ldr	r2, [pc, #636]	@ (8009abc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800983e:	430b      	orrs	r3, r1
 8009840:	6593      	str	r3, [r2, #88]	@ 0x58
 8009842:	e003      	b.n	800984c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009844:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009848:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800984c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009854:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8009858:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800985c:	2300      	movs	r3, #0
 800985e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8009862:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8009866:	460b      	mov	r3, r1
 8009868:	4313      	orrs	r3, r2
 800986a:	d037      	beq.n	80098dc <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800986c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009870:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009872:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009876:	d00e      	beq.n	8009896 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8009878:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800987c:	d816      	bhi.n	80098ac <HAL_RCCEx_PeriphCLKConfig+0x700>
 800987e:	2b00      	cmp	r3, #0
 8009880:	d018      	beq.n	80098b4 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8009882:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009886:	d111      	bne.n	80098ac <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009888:	4b8c      	ldr	r3, [pc, #560]	@ (8009abc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800988a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800988c:	4a8b      	ldr	r2, [pc, #556]	@ (8009abc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800988e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009892:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8009894:	e00f      	b.n	80098b6 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009896:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800989a:	3308      	adds	r3, #8
 800989c:	2101      	movs	r1, #1
 800989e:	4618      	mov	r0, r3
 80098a0:	f002 f81e 	bl	800b8e0 <RCCEx_PLL2_Config>
 80098a4:	4603      	mov	r3, r0
 80098a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80098aa:	e004      	b.n	80098b6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80098ac:	2301      	movs	r3, #1
 80098ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80098b2:	e000      	b.n	80098b6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80098b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80098b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d10a      	bne.n	80098d4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80098be:	4b7f      	ldr	r3, [pc, #508]	@ (8009abc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80098c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80098c2:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80098c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80098ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80098cc:	4a7b      	ldr	r2, [pc, #492]	@ (8009abc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80098ce:	430b      	orrs	r3, r1
 80098d0:	6513      	str	r3, [r2, #80]	@ 0x50
 80098d2:	e003      	b.n	80098dc <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80098d4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80098d8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80098dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80098e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098e4:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80098e8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80098ec:	2300      	movs	r3, #0
 80098ee:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80098f2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80098f6:	460b      	mov	r3, r1
 80098f8:	4313      	orrs	r3, r2
 80098fa:	d039      	beq.n	8009970 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80098fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009900:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009902:	2b03      	cmp	r3, #3
 8009904:	d81c      	bhi.n	8009940 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8009906:	a201      	add	r2, pc, #4	@ (adr r2, 800990c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8009908:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800990c:	08009949 	.word	0x08009949
 8009910:	0800991d 	.word	0x0800991d
 8009914:	0800992b 	.word	0x0800992b
 8009918:	08009949 	.word	0x08009949
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800991c:	4b67      	ldr	r3, [pc, #412]	@ (8009abc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800991e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009920:	4a66      	ldr	r2, [pc, #408]	@ (8009abc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009922:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009926:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8009928:	e00f      	b.n	800994a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800992a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800992e:	3308      	adds	r3, #8
 8009930:	2102      	movs	r1, #2
 8009932:	4618      	mov	r0, r3
 8009934:	f001 ffd4 	bl	800b8e0 <RCCEx_PLL2_Config>
 8009938:	4603      	mov	r3, r0
 800993a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800993e:	e004      	b.n	800994a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8009940:	2301      	movs	r3, #1
 8009942:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009946:	e000      	b.n	800994a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8009948:	bf00      	nop
    }

    if (ret == HAL_OK)
 800994a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800994e:	2b00      	cmp	r3, #0
 8009950:	d10a      	bne.n	8009968 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8009952:	4b5a      	ldr	r3, [pc, #360]	@ (8009abc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009954:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009956:	f023 0103 	bic.w	r1, r3, #3
 800995a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800995e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009960:	4a56      	ldr	r2, [pc, #344]	@ (8009abc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009962:	430b      	orrs	r3, r1
 8009964:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009966:	e003      	b.n	8009970 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009968:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800996c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009970:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009978:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800997c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009980:	2300      	movs	r3, #0
 8009982:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009986:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800998a:	460b      	mov	r3, r1
 800998c:	4313      	orrs	r3, r2
 800998e:	f000 809f 	beq.w	8009ad0 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009992:	4b4b      	ldr	r3, [pc, #300]	@ (8009ac0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	4a4a      	ldr	r2, [pc, #296]	@ (8009ac0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8009998:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800999c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800999e:	f7f9 f917 	bl	8002bd0 <HAL_GetTick>
 80099a2:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80099a6:	e00b      	b.n	80099c0 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80099a8:	f7f9 f912 	bl	8002bd0 <HAL_GetTick>
 80099ac:	4602      	mov	r2, r0
 80099ae:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80099b2:	1ad3      	subs	r3, r2, r3
 80099b4:	2b64      	cmp	r3, #100	@ 0x64
 80099b6:	d903      	bls.n	80099c0 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80099b8:	2303      	movs	r3, #3
 80099ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80099be:	e005      	b.n	80099cc <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80099c0:	4b3f      	ldr	r3, [pc, #252]	@ (8009ac0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d0ed      	beq.n	80099a8 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80099cc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d179      	bne.n	8009ac8 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80099d4:	4b39      	ldr	r3, [pc, #228]	@ (8009abc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80099d6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80099d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80099dc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80099e0:	4053      	eors	r3, r2
 80099e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d015      	beq.n	8009a16 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80099ea:	4b34      	ldr	r3, [pc, #208]	@ (8009abc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80099ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80099ee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80099f2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80099f6:	4b31      	ldr	r3, [pc, #196]	@ (8009abc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80099f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80099fa:	4a30      	ldr	r2, [pc, #192]	@ (8009abc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80099fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009a00:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009a02:	4b2e      	ldr	r3, [pc, #184]	@ (8009abc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009a04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009a06:	4a2d      	ldr	r2, [pc, #180]	@ (8009abc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009a08:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009a0c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8009a0e:	4a2b      	ldr	r2, [pc, #172]	@ (8009abc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009a10:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009a14:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8009a16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a1a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009a1e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009a22:	d118      	bne.n	8009a56 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009a24:	f7f9 f8d4 	bl	8002bd0 <HAL_GetTick>
 8009a28:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009a2c:	e00d      	b.n	8009a4a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009a2e:	f7f9 f8cf 	bl	8002bd0 <HAL_GetTick>
 8009a32:	4602      	mov	r2, r0
 8009a34:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8009a38:	1ad2      	subs	r2, r2, r3
 8009a3a:	f241 3388 	movw	r3, #5000	@ 0x1388
 8009a3e:	429a      	cmp	r2, r3
 8009a40:	d903      	bls.n	8009a4a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8009a42:	2303      	movs	r3, #3
 8009a44:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8009a48:	e005      	b.n	8009a56 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009a4a:	4b1c      	ldr	r3, [pc, #112]	@ (8009abc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009a4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009a4e:	f003 0302 	and.w	r3, r3, #2
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d0eb      	beq.n	8009a2e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8009a56:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d129      	bne.n	8009ab2 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009a5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a62:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009a66:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009a6a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009a6e:	d10e      	bne.n	8009a8e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8009a70:	4b12      	ldr	r3, [pc, #72]	@ (8009abc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009a72:	691b      	ldr	r3, [r3, #16]
 8009a74:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8009a78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a7c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009a80:	091a      	lsrs	r2, r3, #4
 8009a82:	4b10      	ldr	r3, [pc, #64]	@ (8009ac4 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8009a84:	4013      	ands	r3, r2
 8009a86:	4a0d      	ldr	r2, [pc, #52]	@ (8009abc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009a88:	430b      	orrs	r3, r1
 8009a8a:	6113      	str	r3, [r2, #16]
 8009a8c:	e005      	b.n	8009a9a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8009a8e:	4b0b      	ldr	r3, [pc, #44]	@ (8009abc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009a90:	691b      	ldr	r3, [r3, #16]
 8009a92:	4a0a      	ldr	r2, [pc, #40]	@ (8009abc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009a94:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8009a98:	6113      	str	r3, [r2, #16]
 8009a9a:	4b08      	ldr	r3, [pc, #32]	@ (8009abc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009a9c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8009a9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009aa2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009aa6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009aaa:	4a04      	ldr	r2, [pc, #16]	@ (8009abc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009aac:	430b      	orrs	r3, r1
 8009aae:	6713      	str	r3, [r2, #112]	@ 0x70
 8009ab0:	e00e      	b.n	8009ad0 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009ab2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009ab6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8009aba:	e009      	b.n	8009ad0 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8009abc:	58024400 	.word	0x58024400
 8009ac0:	58024800 	.word	0x58024800
 8009ac4:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ac8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009acc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009ad0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ad8:	f002 0301 	and.w	r3, r2, #1
 8009adc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009ae0:	2300      	movs	r3, #0
 8009ae2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009ae6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8009aea:	460b      	mov	r3, r1
 8009aec:	4313      	orrs	r3, r2
 8009aee:	f000 8089 	beq.w	8009c04 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8009af2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009af6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009af8:	2b28      	cmp	r3, #40	@ 0x28
 8009afa:	d86b      	bhi.n	8009bd4 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8009afc:	a201      	add	r2, pc, #4	@ (adr r2, 8009b04 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8009afe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b02:	bf00      	nop
 8009b04:	08009bdd 	.word	0x08009bdd
 8009b08:	08009bd5 	.word	0x08009bd5
 8009b0c:	08009bd5 	.word	0x08009bd5
 8009b10:	08009bd5 	.word	0x08009bd5
 8009b14:	08009bd5 	.word	0x08009bd5
 8009b18:	08009bd5 	.word	0x08009bd5
 8009b1c:	08009bd5 	.word	0x08009bd5
 8009b20:	08009bd5 	.word	0x08009bd5
 8009b24:	08009ba9 	.word	0x08009ba9
 8009b28:	08009bd5 	.word	0x08009bd5
 8009b2c:	08009bd5 	.word	0x08009bd5
 8009b30:	08009bd5 	.word	0x08009bd5
 8009b34:	08009bd5 	.word	0x08009bd5
 8009b38:	08009bd5 	.word	0x08009bd5
 8009b3c:	08009bd5 	.word	0x08009bd5
 8009b40:	08009bd5 	.word	0x08009bd5
 8009b44:	08009bbf 	.word	0x08009bbf
 8009b48:	08009bd5 	.word	0x08009bd5
 8009b4c:	08009bd5 	.word	0x08009bd5
 8009b50:	08009bd5 	.word	0x08009bd5
 8009b54:	08009bd5 	.word	0x08009bd5
 8009b58:	08009bd5 	.word	0x08009bd5
 8009b5c:	08009bd5 	.word	0x08009bd5
 8009b60:	08009bd5 	.word	0x08009bd5
 8009b64:	08009bdd 	.word	0x08009bdd
 8009b68:	08009bd5 	.word	0x08009bd5
 8009b6c:	08009bd5 	.word	0x08009bd5
 8009b70:	08009bd5 	.word	0x08009bd5
 8009b74:	08009bd5 	.word	0x08009bd5
 8009b78:	08009bd5 	.word	0x08009bd5
 8009b7c:	08009bd5 	.word	0x08009bd5
 8009b80:	08009bd5 	.word	0x08009bd5
 8009b84:	08009bdd 	.word	0x08009bdd
 8009b88:	08009bd5 	.word	0x08009bd5
 8009b8c:	08009bd5 	.word	0x08009bd5
 8009b90:	08009bd5 	.word	0x08009bd5
 8009b94:	08009bd5 	.word	0x08009bd5
 8009b98:	08009bd5 	.word	0x08009bd5
 8009b9c:	08009bd5 	.word	0x08009bd5
 8009ba0:	08009bd5 	.word	0x08009bd5
 8009ba4:	08009bdd 	.word	0x08009bdd
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009ba8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009bac:	3308      	adds	r3, #8
 8009bae:	2101      	movs	r1, #1
 8009bb0:	4618      	mov	r0, r3
 8009bb2:	f001 fe95 	bl	800b8e0 <RCCEx_PLL2_Config>
 8009bb6:	4603      	mov	r3, r0
 8009bb8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8009bbc:	e00f      	b.n	8009bde <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009bbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009bc2:	3328      	adds	r3, #40	@ 0x28
 8009bc4:	2101      	movs	r1, #1
 8009bc6:	4618      	mov	r0, r3
 8009bc8:	f001 ff3c 	bl	800ba44 <RCCEx_PLL3_Config>
 8009bcc:	4603      	mov	r3, r0
 8009bce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8009bd2:	e004      	b.n	8009bde <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009bd4:	2301      	movs	r3, #1
 8009bd6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009bda:	e000      	b.n	8009bde <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8009bdc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009bde:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d10a      	bne.n	8009bfc <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8009be6:	4bbf      	ldr	r3, [pc, #764]	@ (8009ee4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009be8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009bea:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8009bee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009bf2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009bf4:	4abb      	ldr	r2, [pc, #748]	@ (8009ee4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009bf6:	430b      	orrs	r3, r1
 8009bf8:	6553      	str	r3, [r2, #84]	@ 0x54
 8009bfa:	e003      	b.n	8009c04 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009bfc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009c00:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009c04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c0c:	f002 0302 	and.w	r3, r2, #2
 8009c10:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009c14:	2300      	movs	r3, #0
 8009c16:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8009c1a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8009c1e:	460b      	mov	r3, r1
 8009c20:	4313      	orrs	r3, r2
 8009c22:	d041      	beq.n	8009ca8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8009c24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c28:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009c2a:	2b05      	cmp	r3, #5
 8009c2c:	d824      	bhi.n	8009c78 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8009c2e:	a201      	add	r2, pc, #4	@ (adr r2, 8009c34 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8009c30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c34:	08009c81 	.word	0x08009c81
 8009c38:	08009c4d 	.word	0x08009c4d
 8009c3c:	08009c63 	.word	0x08009c63
 8009c40:	08009c81 	.word	0x08009c81
 8009c44:	08009c81 	.word	0x08009c81
 8009c48:	08009c81 	.word	0x08009c81
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009c4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c50:	3308      	adds	r3, #8
 8009c52:	2101      	movs	r1, #1
 8009c54:	4618      	mov	r0, r3
 8009c56:	f001 fe43 	bl	800b8e0 <RCCEx_PLL2_Config>
 8009c5a:	4603      	mov	r3, r0
 8009c5c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8009c60:	e00f      	b.n	8009c82 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009c62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c66:	3328      	adds	r3, #40	@ 0x28
 8009c68:	2101      	movs	r1, #1
 8009c6a:	4618      	mov	r0, r3
 8009c6c:	f001 feea 	bl	800ba44 <RCCEx_PLL3_Config>
 8009c70:	4603      	mov	r3, r0
 8009c72:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8009c76:	e004      	b.n	8009c82 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009c78:	2301      	movs	r3, #1
 8009c7a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009c7e:	e000      	b.n	8009c82 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8009c80:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009c82:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d10a      	bne.n	8009ca0 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8009c8a:	4b96      	ldr	r3, [pc, #600]	@ (8009ee4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009c8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009c8e:	f023 0107 	bic.w	r1, r3, #7
 8009c92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c96:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009c98:	4a92      	ldr	r2, [pc, #584]	@ (8009ee4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009c9a:	430b      	orrs	r3, r1
 8009c9c:	6553      	str	r3, [r2, #84]	@ 0x54
 8009c9e:	e003      	b.n	8009ca8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ca0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009ca4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009ca8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009cac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cb0:	f002 0304 	and.w	r3, r2, #4
 8009cb4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009cb8:	2300      	movs	r3, #0
 8009cba:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009cbe:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8009cc2:	460b      	mov	r3, r1
 8009cc4:	4313      	orrs	r3, r2
 8009cc6:	d044      	beq.n	8009d52 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8009cc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ccc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009cd0:	2b05      	cmp	r3, #5
 8009cd2:	d825      	bhi.n	8009d20 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8009cd4:	a201      	add	r2, pc, #4	@ (adr r2, 8009cdc <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8009cd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cda:	bf00      	nop
 8009cdc:	08009d29 	.word	0x08009d29
 8009ce0:	08009cf5 	.word	0x08009cf5
 8009ce4:	08009d0b 	.word	0x08009d0b
 8009ce8:	08009d29 	.word	0x08009d29
 8009cec:	08009d29 	.word	0x08009d29
 8009cf0:	08009d29 	.word	0x08009d29
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009cf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009cf8:	3308      	adds	r3, #8
 8009cfa:	2101      	movs	r1, #1
 8009cfc:	4618      	mov	r0, r3
 8009cfe:	f001 fdef 	bl	800b8e0 <RCCEx_PLL2_Config>
 8009d02:	4603      	mov	r3, r0
 8009d04:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8009d08:	e00f      	b.n	8009d2a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009d0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d0e:	3328      	adds	r3, #40	@ 0x28
 8009d10:	2101      	movs	r1, #1
 8009d12:	4618      	mov	r0, r3
 8009d14:	f001 fe96 	bl	800ba44 <RCCEx_PLL3_Config>
 8009d18:	4603      	mov	r3, r0
 8009d1a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8009d1e:	e004      	b.n	8009d2a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009d20:	2301      	movs	r3, #1
 8009d22:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009d26:	e000      	b.n	8009d2a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8009d28:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009d2a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d10b      	bne.n	8009d4a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009d32:	4b6c      	ldr	r3, [pc, #432]	@ (8009ee4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009d34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009d36:	f023 0107 	bic.w	r1, r3, #7
 8009d3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009d42:	4a68      	ldr	r2, [pc, #416]	@ (8009ee4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009d44:	430b      	orrs	r3, r1
 8009d46:	6593      	str	r3, [r2, #88]	@ 0x58
 8009d48:	e003      	b.n	8009d52 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d4a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009d4e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009d52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d5a:	f002 0320 	and.w	r3, r2, #32
 8009d5e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009d62:	2300      	movs	r3, #0
 8009d64:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009d68:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8009d6c:	460b      	mov	r3, r1
 8009d6e:	4313      	orrs	r3, r2
 8009d70:	d055      	beq.n	8009e1e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8009d72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009d7a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009d7e:	d033      	beq.n	8009de8 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8009d80:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009d84:	d82c      	bhi.n	8009de0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009d86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009d8a:	d02f      	beq.n	8009dec <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8009d8c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009d90:	d826      	bhi.n	8009de0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009d92:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009d96:	d02b      	beq.n	8009df0 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8009d98:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009d9c:	d820      	bhi.n	8009de0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009d9e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009da2:	d012      	beq.n	8009dca <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8009da4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009da8:	d81a      	bhi.n	8009de0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d022      	beq.n	8009df4 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8009dae:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009db2:	d115      	bne.n	8009de0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009db4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009db8:	3308      	adds	r3, #8
 8009dba:	2100      	movs	r1, #0
 8009dbc:	4618      	mov	r0, r3
 8009dbe:	f001 fd8f 	bl	800b8e0 <RCCEx_PLL2_Config>
 8009dc2:	4603      	mov	r3, r0
 8009dc4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8009dc8:	e015      	b.n	8009df6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009dca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009dce:	3328      	adds	r3, #40	@ 0x28
 8009dd0:	2102      	movs	r1, #2
 8009dd2:	4618      	mov	r0, r3
 8009dd4:	f001 fe36 	bl	800ba44 <RCCEx_PLL3_Config>
 8009dd8:	4603      	mov	r3, r0
 8009dda:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8009dde:	e00a      	b.n	8009df6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009de0:	2301      	movs	r3, #1
 8009de2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009de6:	e006      	b.n	8009df6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009de8:	bf00      	nop
 8009dea:	e004      	b.n	8009df6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009dec:	bf00      	nop
 8009dee:	e002      	b.n	8009df6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009df0:	bf00      	nop
 8009df2:	e000      	b.n	8009df6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009df4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009df6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d10b      	bne.n	8009e16 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009dfe:	4b39      	ldr	r3, [pc, #228]	@ (8009ee4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009e00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009e02:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8009e06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009e0e:	4a35      	ldr	r2, [pc, #212]	@ (8009ee4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009e10:	430b      	orrs	r3, r1
 8009e12:	6553      	str	r3, [r2, #84]	@ 0x54
 8009e14:	e003      	b.n	8009e1e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e16:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009e1a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8009e1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e26:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8009e2a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009e2e:	2300      	movs	r3, #0
 8009e30:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8009e34:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8009e38:	460b      	mov	r3, r1
 8009e3a:	4313      	orrs	r3, r2
 8009e3c:	d058      	beq.n	8009ef0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8009e3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e42:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009e46:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8009e4a:	d033      	beq.n	8009eb4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8009e4c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8009e50:	d82c      	bhi.n	8009eac <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009e52:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009e56:	d02f      	beq.n	8009eb8 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8009e58:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009e5c:	d826      	bhi.n	8009eac <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009e5e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009e62:	d02b      	beq.n	8009ebc <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8009e64:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009e68:	d820      	bhi.n	8009eac <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009e6a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009e6e:	d012      	beq.n	8009e96 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8009e70:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009e74:	d81a      	bhi.n	8009eac <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d022      	beq.n	8009ec0 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8009e7a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009e7e:	d115      	bne.n	8009eac <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009e80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e84:	3308      	adds	r3, #8
 8009e86:	2100      	movs	r1, #0
 8009e88:	4618      	mov	r0, r3
 8009e8a:	f001 fd29 	bl	800b8e0 <RCCEx_PLL2_Config>
 8009e8e:	4603      	mov	r3, r0
 8009e90:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8009e94:	e015      	b.n	8009ec2 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009e96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e9a:	3328      	adds	r3, #40	@ 0x28
 8009e9c:	2102      	movs	r1, #2
 8009e9e:	4618      	mov	r0, r3
 8009ea0:	f001 fdd0 	bl	800ba44 <RCCEx_PLL3_Config>
 8009ea4:	4603      	mov	r3, r0
 8009ea6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8009eaa:	e00a      	b.n	8009ec2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009eac:	2301      	movs	r3, #1
 8009eae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009eb2:	e006      	b.n	8009ec2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009eb4:	bf00      	nop
 8009eb6:	e004      	b.n	8009ec2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009eb8:	bf00      	nop
 8009eba:	e002      	b.n	8009ec2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009ebc:	bf00      	nop
 8009ebe:	e000      	b.n	8009ec2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009ec0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009ec2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d10e      	bne.n	8009ee8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009eca:	4b06      	ldr	r3, [pc, #24]	@ (8009ee4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009ecc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009ece:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8009ed2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ed6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009eda:	4a02      	ldr	r2, [pc, #8]	@ (8009ee4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009edc:	430b      	orrs	r3, r1
 8009ede:	6593      	str	r3, [r2, #88]	@ 0x58
 8009ee0:	e006      	b.n	8009ef0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8009ee2:	bf00      	nop
 8009ee4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ee8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009eec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009ef0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ef8:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8009efc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009f00:	2300      	movs	r3, #0
 8009f02:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009f06:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8009f0a:	460b      	mov	r3, r1
 8009f0c:	4313      	orrs	r3, r2
 8009f0e:	d055      	beq.n	8009fbc <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8009f10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f14:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009f18:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8009f1c:	d033      	beq.n	8009f86 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8009f1e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8009f22:	d82c      	bhi.n	8009f7e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009f24:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009f28:	d02f      	beq.n	8009f8a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8009f2a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009f2e:	d826      	bhi.n	8009f7e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009f30:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8009f34:	d02b      	beq.n	8009f8e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8009f36:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8009f3a:	d820      	bhi.n	8009f7e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009f3c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009f40:	d012      	beq.n	8009f68 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8009f42:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009f46:	d81a      	bhi.n	8009f7e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d022      	beq.n	8009f92 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8009f4c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009f50:	d115      	bne.n	8009f7e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009f52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f56:	3308      	adds	r3, #8
 8009f58:	2100      	movs	r1, #0
 8009f5a:	4618      	mov	r0, r3
 8009f5c:	f001 fcc0 	bl	800b8e0 <RCCEx_PLL2_Config>
 8009f60:	4603      	mov	r3, r0
 8009f62:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8009f66:	e015      	b.n	8009f94 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009f68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f6c:	3328      	adds	r3, #40	@ 0x28
 8009f6e:	2102      	movs	r1, #2
 8009f70:	4618      	mov	r0, r3
 8009f72:	f001 fd67 	bl	800ba44 <RCCEx_PLL3_Config>
 8009f76:	4603      	mov	r3, r0
 8009f78:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8009f7c:	e00a      	b.n	8009f94 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009f7e:	2301      	movs	r3, #1
 8009f80:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009f84:	e006      	b.n	8009f94 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009f86:	bf00      	nop
 8009f88:	e004      	b.n	8009f94 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009f8a:	bf00      	nop
 8009f8c:	e002      	b.n	8009f94 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009f8e:	bf00      	nop
 8009f90:	e000      	b.n	8009f94 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009f92:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009f94:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d10b      	bne.n	8009fb4 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8009f9c:	4ba1      	ldr	r3, [pc, #644]	@ (800a224 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009f9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009fa0:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8009fa4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009fa8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009fac:	4a9d      	ldr	r2, [pc, #628]	@ (800a224 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009fae:	430b      	orrs	r3, r1
 8009fb0:	6593      	str	r3, [r2, #88]	@ 0x58
 8009fb2:	e003      	b.n	8009fbc <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009fb4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009fb8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8009fbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fc4:	f002 0308 	and.w	r3, r2, #8
 8009fc8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009fcc:	2300      	movs	r3, #0
 8009fce:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009fd2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8009fd6:	460b      	mov	r3, r1
 8009fd8:	4313      	orrs	r3, r2
 8009fda:	d01e      	beq.n	800a01a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8009fdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009fe0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009fe4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009fe8:	d10c      	bne.n	800a004 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009fea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009fee:	3328      	adds	r3, #40	@ 0x28
 8009ff0:	2102      	movs	r1, #2
 8009ff2:	4618      	mov	r0, r3
 8009ff4:	f001 fd26 	bl	800ba44 <RCCEx_PLL3_Config>
 8009ff8:	4603      	mov	r3, r0
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d002      	beq.n	800a004 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8009ffe:	2301      	movs	r3, #1
 800a000:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800a004:	4b87      	ldr	r3, [pc, #540]	@ (800a224 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a006:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a008:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a00c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a010:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a014:	4a83      	ldr	r2, [pc, #524]	@ (800a224 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a016:	430b      	orrs	r3, r1
 800a018:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a01a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a01e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a022:	f002 0310 	and.w	r3, r2, #16
 800a026:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800a02a:	2300      	movs	r3, #0
 800a02c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800a030:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800a034:	460b      	mov	r3, r1
 800a036:	4313      	orrs	r3, r2
 800a038:	d01e      	beq.n	800a078 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800a03a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a03e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a042:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a046:	d10c      	bne.n	800a062 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a048:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a04c:	3328      	adds	r3, #40	@ 0x28
 800a04e:	2102      	movs	r1, #2
 800a050:	4618      	mov	r0, r3
 800a052:	f001 fcf7 	bl	800ba44 <RCCEx_PLL3_Config>
 800a056:	4603      	mov	r3, r0
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d002      	beq.n	800a062 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800a05c:	2301      	movs	r3, #1
 800a05e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a062:	4b70      	ldr	r3, [pc, #448]	@ (800a224 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a064:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a066:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800a06a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a06e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a072:	4a6c      	ldr	r2, [pc, #432]	@ (800a224 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a074:	430b      	orrs	r3, r1
 800a076:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a078:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a07c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a080:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800a084:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a088:	2300      	movs	r3, #0
 800a08a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a08e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800a092:	460b      	mov	r3, r1
 800a094:	4313      	orrs	r3, r2
 800a096:	d03e      	beq.n	800a116 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800a098:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a09c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a0a0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a0a4:	d022      	beq.n	800a0ec <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800a0a6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a0aa:	d81b      	bhi.n	800a0e4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d003      	beq.n	800a0b8 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800a0b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a0b4:	d00b      	beq.n	800a0ce <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800a0b6:	e015      	b.n	800a0e4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a0b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a0bc:	3308      	adds	r3, #8
 800a0be:	2100      	movs	r1, #0
 800a0c0:	4618      	mov	r0, r3
 800a0c2:	f001 fc0d 	bl	800b8e0 <RCCEx_PLL2_Config>
 800a0c6:	4603      	mov	r3, r0
 800a0c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800a0cc:	e00f      	b.n	800a0ee <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a0ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a0d2:	3328      	adds	r3, #40	@ 0x28
 800a0d4:	2102      	movs	r1, #2
 800a0d6:	4618      	mov	r0, r3
 800a0d8:	f001 fcb4 	bl	800ba44 <RCCEx_PLL3_Config>
 800a0dc:	4603      	mov	r3, r0
 800a0de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800a0e2:	e004      	b.n	800a0ee <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a0e4:	2301      	movs	r3, #1
 800a0e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a0ea:	e000      	b.n	800a0ee <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800a0ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a0ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d10b      	bne.n	800a10e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a0f6:	4b4b      	ldr	r3, [pc, #300]	@ (800a224 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a0f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a0fa:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800a0fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a102:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a106:	4a47      	ldr	r2, [pc, #284]	@ (800a224 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a108:	430b      	orrs	r3, r1
 800a10a:	6593      	str	r3, [r2, #88]	@ 0x58
 800a10c:	e003      	b.n	800a116 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a10e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a112:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800a116:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a11a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a11e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800a122:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a124:	2300      	movs	r3, #0
 800a126:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800a128:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800a12c:	460b      	mov	r3, r1
 800a12e:	4313      	orrs	r3, r2
 800a130:	d03b      	beq.n	800a1aa <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800a132:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a136:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a13a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a13e:	d01f      	beq.n	800a180 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800a140:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a144:	d818      	bhi.n	800a178 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800a146:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a14a:	d003      	beq.n	800a154 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800a14c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a150:	d007      	beq.n	800a162 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800a152:	e011      	b.n	800a178 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a154:	4b33      	ldr	r3, [pc, #204]	@ (800a224 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a156:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a158:	4a32      	ldr	r2, [pc, #200]	@ (800a224 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a15a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a15e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800a160:	e00f      	b.n	800a182 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a162:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a166:	3328      	adds	r3, #40	@ 0x28
 800a168:	2101      	movs	r1, #1
 800a16a:	4618      	mov	r0, r3
 800a16c:	f001 fc6a 	bl	800ba44 <RCCEx_PLL3_Config>
 800a170:	4603      	mov	r3, r0
 800a172:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800a176:	e004      	b.n	800a182 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a178:	2301      	movs	r3, #1
 800a17a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a17e:	e000      	b.n	800a182 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800a180:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a182:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a186:	2b00      	cmp	r3, #0
 800a188:	d10b      	bne.n	800a1a2 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a18a:	4b26      	ldr	r3, [pc, #152]	@ (800a224 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a18c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a18e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800a192:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a196:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a19a:	4a22      	ldr	r2, [pc, #136]	@ (800a224 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a19c:	430b      	orrs	r3, r1
 800a19e:	6553      	str	r3, [r2, #84]	@ 0x54
 800a1a0:	e003      	b.n	800a1aa <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a1a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a1a6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800a1aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a1ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1b2:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800a1b6:	673b      	str	r3, [r7, #112]	@ 0x70
 800a1b8:	2300      	movs	r3, #0
 800a1ba:	677b      	str	r3, [r7, #116]	@ 0x74
 800a1bc:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800a1c0:	460b      	mov	r3, r1
 800a1c2:	4313      	orrs	r3, r2
 800a1c4:	d034      	beq.n	800a230 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800a1c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a1ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d003      	beq.n	800a1d8 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800a1d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a1d4:	d007      	beq.n	800a1e6 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800a1d6:	e011      	b.n	800a1fc <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a1d8:	4b12      	ldr	r3, [pc, #72]	@ (800a224 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a1da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a1dc:	4a11      	ldr	r2, [pc, #68]	@ (800a224 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a1de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a1e2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800a1e4:	e00e      	b.n	800a204 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a1e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a1ea:	3308      	adds	r3, #8
 800a1ec:	2102      	movs	r1, #2
 800a1ee:	4618      	mov	r0, r3
 800a1f0:	f001 fb76 	bl	800b8e0 <RCCEx_PLL2_Config>
 800a1f4:	4603      	mov	r3, r0
 800a1f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800a1fa:	e003      	b.n	800a204 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800a1fc:	2301      	movs	r3, #1
 800a1fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a202:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a204:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d10d      	bne.n	800a228 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800a20c:	4b05      	ldr	r3, [pc, #20]	@ (800a224 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a20e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a210:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a214:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a218:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a21a:	4a02      	ldr	r2, [pc, #8]	@ (800a224 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a21c:	430b      	orrs	r3, r1
 800a21e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800a220:	e006      	b.n	800a230 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800a222:	bf00      	nop
 800a224:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a228:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a22c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a230:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a234:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a238:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800a23c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a23e:	2300      	movs	r3, #0
 800a240:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a242:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800a246:	460b      	mov	r3, r1
 800a248:	4313      	orrs	r3, r2
 800a24a:	d00c      	beq.n	800a266 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a24c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a250:	3328      	adds	r3, #40	@ 0x28
 800a252:	2102      	movs	r1, #2
 800a254:	4618      	mov	r0, r3
 800a256:	f001 fbf5 	bl	800ba44 <RCCEx_PLL3_Config>
 800a25a:	4603      	mov	r3, r0
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d002      	beq.n	800a266 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800a260:	2301      	movs	r3, #1
 800a262:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800a266:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a26a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a26e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800a272:	663b      	str	r3, [r7, #96]	@ 0x60
 800a274:	2300      	movs	r3, #0
 800a276:	667b      	str	r3, [r7, #100]	@ 0x64
 800a278:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800a27c:	460b      	mov	r3, r1
 800a27e:	4313      	orrs	r3, r2
 800a280:	d038      	beq.n	800a2f4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800a282:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a286:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a28a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a28e:	d018      	beq.n	800a2c2 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800a290:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a294:	d811      	bhi.n	800a2ba <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800a296:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a29a:	d014      	beq.n	800a2c6 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800a29c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a2a0:	d80b      	bhi.n	800a2ba <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d011      	beq.n	800a2ca <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800a2a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a2aa:	d106      	bne.n	800a2ba <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a2ac:	4bc3      	ldr	r3, [pc, #780]	@ (800a5bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a2ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a2b0:	4ac2      	ldr	r2, [pc, #776]	@ (800a5bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a2b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a2b6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800a2b8:	e008      	b.n	800a2cc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a2ba:	2301      	movs	r3, #1
 800a2bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a2c0:	e004      	b.n	800a2cc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800a2c2:	bf00      	nop
 800a2c4:	e002      	b.n	800a2cc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800a2c6:	bf00      	nop
 800a2c8:	e000      	b.n	800a2cc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800a2ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a2cc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d10b      	bne.n	800a2ec <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a2d4:	4bb9      	ldr	r3, [pc, #740]	@ (800a5bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a2d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a2d8:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800a2dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a2e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a2e4:	4ab5      	ldr	r2, [pc, #724]	@ (800a5bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a2e6:	430b      	orrs	r3, r1
 800a2e8:	6553      	str	r3, [r2, #84]	@ 0x54
 800a2ea:	e003      	b.n	800a2f4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a2ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a2f0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a2f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a2f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2fc:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800a300:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a302:	2300      	movs	r3, #0
 800a304:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a306:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800a30a:	460b      	mov	r3, r1
 800a30c:	4313      	orrs	r3, r2
 800a30e:	d009      	beq.n	800a324 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a310:	4baa      	ldr	r3, [pc, #680]	@ (800a5bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a312:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a314:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800a318:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a31c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a31e:	4aa7      	ldr	r2, [pc, #668]	@ (800a5bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a320:	430b      	orrs	r3, r1
 800a322:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800a324:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a328:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a32c:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800a330:	653b      	str	r3, [r7, #80]	@ 0x50
 800a332:	2300      	movs	r3, #0
 800a334:	657b      	str	r3, [r7, #84]	@ 0x54
 800a336:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800a33a:	460b      	mov	r3, r1
 800a33c:	4313      	orrs	r3, r2
 800a33e:	d00a      	beq.n	800a356 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800a340:	4b9e      	ldr	r3, [pc, #632]	@ (800a5bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a342:	691b      	ldr	r3, [r3, #16]
 800a344:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800a348:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a34c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800a350:	4a9a      	ldr	r2, [pc, #616]	@ (800a5bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a352:	430b      	orrs	r3, r1
 800a354:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a356:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a35a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a35e:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800a362:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a364:	2300      	movs	r3, #0
 800a366:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a368:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800a36c:	460b      	mov	r3, r1
 800a36e:	4313      	orrs	r3, r2
 800a370:	d009      	beq.n	800a386 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a372:	4b92      	ldr	r3, [pc, #584]	@ (800a5bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a374:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a376:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800a37a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a37e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a380:	4a8e      	ldr	r2, [pc, #568]	@ (800a5bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a382:	430b      	orrs	r3, r1
 800a384:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800a386:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a38a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a38e:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800a392:	643b      	str	r3, [r7, #64]	@ 0x40
 800a394:	2300      	movs	r3, #0
 800a396:	647b      	str	r3, [r7, #68]	@ 0x44
 800a398:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800a39c:	460b      	mov	r3, r1
 800a39e:	4313      	orrs	r3, r2
 800a3a0:	d00e      	beq.n	800a3c0 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a3a2:	4b86      	ldr	r3, [pc, #536]	@ (800a5bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a3a4:	691b      	ldr	r3, [r3, #16]
 800a3a6:	4a85      	ldr	r2, [pc, #532]	@ (800a5bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a3a8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800a3ac:	6113      	str	r3, [r2, #16]
 800a3ae:	4b83      	ldr	r3, [pc, #524]	@ (800a5bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a3b0:	6919      	ldr	r1, [r3, #16]
 800a3b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a3b6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800a3ba:	4a80      	ldr	r2, [pc, #512]	@ (800a5bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a3bc:	430b      	orrs	r3, r1
 800a3be:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800a3c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a3c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3c8:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800a3cc:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a3ce:	2300      	movs	r3, #0
 800a3d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a3d2:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800a3d6:	460b      	mov	r3, r1
 800a3d8:	4313      	orrs	r3, r2
 800a3da:	d009      	beq.n	800a3f0 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800a3dc:	4b77      	ldr	r3, [pc, #476]	@ (800a5bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a3de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a3e0:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800a3e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a3e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a3ea:	4a74      	ldr	r2, [pc, #464]	@ (800a5bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a3ec:	430b      	orrs	r3, r1
 800a3ee:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a3f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a3f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3f8:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800a3fc:	633b      	str	r3, [r7, #48]	@ 0x30
 800a3fe:	2300      	movs	r3, #0
 800a400:	637b      	str	r3, [r7, #52]	@ 0x34
 800a402:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800a406:	460b      	mov	r3, r1
 800a408:	4313      	orrs	r3, r2
 800a40a:	d00a      	beq.n	800a422 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a40c:	4b6b      	ldr	r3, [pc, #428]	@ (800a5bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a40e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a410:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800a414:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a418:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a41c:	4a67      	ldr	r2, [pc, #412]	@ (800a5bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a41e:	430b      	orrs	r3, r1
 800a420:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800a422:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a42a:	2100      	movs	r1, #0
 800a42c:	62b9      	str	r1, [r7, #40]	@ 0x28
 800a42e:	f003 0301 	and.w	r3, r3, #1
 800a432:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a434:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800a438:	460b      	mov	r3, r1
 800a43a:	4313      	orrs	r3, r2
 800a43c:	d011      	beq.n	800a462 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a43e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a442:	3308      	adds	r3, #8
 800a444:	2100      	movs	r1, #0
 800a446:	4618      	mov	r0, r3
 800a448:	f001 fa4a 	bl	800b8e0 <RCCEx_PLL2_Config>
 800a44c:	4603      	mov	r3, r0
 800a44e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800a452:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a456:	2b00      	cmp	r3, #0
 800a458:	d003      	beq.n	800a462 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a45a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a45e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800a462:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a466:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a46a:	2100      	movs	r1, #0
 800a46c:	6239      	str	r1, [r7, #32]
 800a46e:	f003 0302 	and.w	r3, r3, #2
 800a472:	627b      	str	r3, [r7, #36]	@ 0x24
 800a474:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800a478:	460b      	mov	r3, r1
 800a47a:	4313      	orrs	r3, r2
 800a47c:	d011      	beq.n	800a4a2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a47e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a482:	3308      	adds	r3, #8
 800a484:	2101      	movs	r1, #1
 800a486:	4618      	mov	r0, r3
 800a488:	f001 fa2a 	bl	800b8e0 <RCCEx_PLL2_Config>
 800a48c:	4603      	mov	r3, r0
 800a48e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800a492:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a496:	2b00      	cmp	r3, #0
 800a498:	d003      	beq.n	800a4a2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a49a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a49e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800a4a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a4a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4aa:	2100      	movs	r1, #0
 800a4ac:	61b9      	str	r1, [r7, #24]
 800a4ae:	f003 0304 	and.w	r3, r3, #4
 800a4b2:	61fb      	str	r3, [r7, #28]
 800a4b4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800a4b8:	460b      	mov	r3, r1
 800a4ba:	4313      	orrs	r3, r2
 800a4bc:	d011      	beq.n	800a4e2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a4be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a4c2:	3308      	adds	r3, #8
 800a4c4:	2102      	movs	r1, #2
 800a4c6:	4618      	mov	r0, r3
 800a4c8:	f001 fa0a 	bl	800b8e0 <RCCEx_PLL2_Config>
 800a4cc:	4603      	mov	r3, r0
 800a4ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800a4d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d003      	beq.n	800a4e2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a4da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a4de:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800a4e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a4e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4ea:	2100      	movs	r1, #0
 800a4ec:	6139      	str	r1, [r7, #16]
 800a4ee:	f003 0308 	and.w	r3, r3, #8
 800a4f2:	617b      	str	r3, [r7, #20]
 800a4f4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800a4f8:	460b      	mov	r3, r1
 800a4fa:	4313      	orrs	r3, r2
 800a4fc:	d011      	beq.n	800a522 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a4fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a502:	3328      	adds	r3, #40	@ 0x28
 800a504:	2100      	movs	r1, #0
 800a506:	4618      	mov	r0, r3
 800a508:	f001 fa9c 	bl	800ba44 <RCCEx_PLL3_Config>
 800a50c:	4603      	mov	r3, r0
 800a50e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800a512:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a516:	2b00      	cmp	r3, #0
 800a518:	d003      	beq.n	800a522 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a51a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a51e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800a522:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a52a:	2100      	movs	r1, #0
 800a52c:	60b9      	str	r1, [r7, #8]
 800a52e:	f003 0310 	and.w	r3, r3, #16
 800a532:	60fb      	str	r3, [r7, #12]
 800a534:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800a538:	460b      	mov	r3, r1
 800a53a:	4313      	orrs	r3, r2
 800a53c:	d011      	beq.n	800a562 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a53e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a542:	3328      	adds	r3, #40	@ 0x28
 800a544:	2101      	movs	r1, #1
 800a546:	4618      	mov	r0, r3
 800a548:	f001 fa7c 	bl	800ba44 <RCCEx_PLL3_Config>
 800a54c:	4603      	mov	r3, r0
 800a54e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800a552:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a556:	2b00      	cmp	r3, #0
 800a558:	d003      	beq.n	800a562 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a55a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a55e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800a562:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a56a:	2100      	movs	r1, #0
 800a56c:	6039      	str	r1, [r7, #0]
 800a56e:	f003 0320 	and.w	r3, r3, #32
 800a572:	607b      	str	r3, [r7, #4]
 800a574:	e9d7 1200 	ldrd	r1, r2, [r7]
 800a578:	460b      	mov	r3, r1
 800a57a:	4313      	orrs	r3, r2
 800a57c:	d011      	beq.n	800a5a2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a57e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a582:	3328      	adds	r3, #40	@ 0x28
 800a584:	2102      	movs	r1, #2
 800a586:	4618      	mov	r0, r3
 800a588:	f001 fa5c 	bl	800ba44 <RCCEx_PLL3_Config>
 800a58c:	4603      	mov	r3, r0
 800a58e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800a592:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a596:	2b00      	cmp	r3, #0
 800a598:	d003      	beq.n	800a5a2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a59a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a59e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800a5a2:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d101      	bne.n	800a5ae <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800a5aa:	2300      	movs	r3, #0
 800a5ac:	e000      	b.n	800a5b0 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800a5ae:	2301      	movs	r3, #1
}
 800a5b0:	4618      	mov	r0, r3
 800a5b2:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800a5b6:	46bd      	mov	sp, r7
 800a5b8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a5bc:	58024400 	.word	0x58024400

0800a5c0 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800a5c0:	b580      	push	{r7, lr}
 800a5c2:	b090      	sub	sp, #64	@ 0x40
 800a5c4:	af00      	add	r7, sp, #0
 800a5c6:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800a5ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a5ce:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800a5d2:	430b      	orrs	r3, r1
 800a5d4:	f040 8094 	bne.w	800a700 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800a5d8:	4b9e      	ldr	r3, [pc, #632]	@ (800a854 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a5da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a5dc:	f003 0307 	and.w	r3, r3, #7
 800a5e0:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a5e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5e4:	2b04      	cmp	r3, #4
 800a5e6:	f200 8087 	bhi.w	800a6f8 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800a5ea:	a201      	add	r2, pc, #4	@ (adr r2, 800a5f0 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800a5ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5f0:	0800a605 	.word	0x0800a605
 800a5f4:	0800a62d 	.word	0x0800a62d
 800a5f8:	0800a655 	.word	0x0800a655
 800a5fc:	0800a6f1 	.word	0x0800a6f1
 800a600:	0800a67d 	.word	0x0800a67d
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a604:	4b93      	ldr	r3, [pc, #588]	@ (800a854 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a60c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a610:	d108      	bne.n	800a624 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a612:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a616:	4618      	mov	r0, r3
 800a618:	f001 f810 	bl	800b63c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a61c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a61e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a620:	f000 bd45 	b.w	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a624:	2300      	movs	r3, #0
 800a626:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a628:	f000 bd41 	b.w	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a62c:	4b89      	ldr	r3, [pc, #548]	@ (800a854 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a634:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a638:	d108      	bne.n	800a64c <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a63a:	f107 0318 	add.w	r3, r7, #24
 800a63e:	4618      	mov	r0, r3
 800a640:	f000 fd54 	bl	800b0ec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a644:	69bb      	ldr	r3, [r7, #24]
 800a646:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a648:	f000 bd31 	b.w	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a64c:	2300      	movs	r3, #0
 800a64e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a650:	f000 bd2d 	b.w	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a654:	4b7f      	ldr	r3, [pc, #508]	@ (800a854 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a65c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a660:	d108      	bne.n	800a674 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a662:	f107 030c 	add.w	r3, r7, #12
 800a666:	4618      	mov	r0, r3
 800a668:	f000 fe94 	bl	800b394 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a670:	f000 bd1d 	b.w	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a674:	2300      	movs	r3, #0
 800a676:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a678:	f000 bd19 	b.w	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a67c:	4b75      	ldr	r3, [pc, #468]	@ (800a854 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a67e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a680:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a684:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a686:	4b73      	ldr	r3, [pc, #460]	@ (800a854 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	f003 0304 	and.w	r3, r3, #4
 800a68e:	2b04      	cmp	r3, #4
 800a690:	d10c      	bne.n	800a6ac <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800a692:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a694:	2b00      	cmp	r3, #0
 800a696:	d109      	bne.n	800a6ac <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a698:	4b6e      	ldr	r3, [pc, #440]	@ (800a854 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	08db      	lsrs	r3, r3, #3
 800a69e:	f003 0303 	and.w	r3, r3, #3
 800a6a2:	4a6d      	ldr	r2, [pc, #436]	@ (800a858 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a6a4:	fa22 f303 	lsr.w	r3, r2, r3
 800a6a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a6aa:	e01f      	b.n	800a6ec <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a6ac:	4b69      	ldr	r3, [pc, #420]	@ (800a854 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a6b4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a6b8:	d106      	bne.n	800a6c8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800a6ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a6bc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a6c0:	d102      	bne.n	800a6c8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a6c2:	4b66      	ldr	r3, [pc, #408]	@ (800a85c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800a6c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a6c6:	e011      	b.n	800a6ec <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a6c8:	4b62      	ldr	r3, [pc, #392]	@ (800a854 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a6d0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a6d4:	d106      	bne.n	800a6e4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800a6d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a6d8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a6dc:	d102      	bne.n	800a6e4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a6de:	4b60      	ldr	r3, [pc, #384]	@ (800a860 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800a6e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a6e2:	e003      	b.n	800a6ec <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a6e4:	2300      	movs	r3, #0
 800a6e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a6e8:	f000 bce1 	b.w	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a6ec:	f000 bcdf 	b.w	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a6f0:	4b5c      	ldr	r3, [pc, #368]	@ (800a864 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800a6f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a6f4:	f000 bcdb 	b.w	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a6f8:	2300      	movs	r3, #0
 800a6fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a6fc:	f000 bcd7 	b.w	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800a700:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a704:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 800a708:	430b      	orrs	r3, r1
 800a70a:	f040 80ad 	bne.w	800a868 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800a70e:	4b51      	ldr	r3, [pc, #324]	@ (800a854 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a710:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a712:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800a716:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a718:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a71a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a71e:	d056      	beq.n	800a7ce <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800a720:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a722:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a726:	f200 8090 	bhi.w	800a84a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800a72a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a72c:	2bc0      	cmp	r3, #192	@ 0xc0
 800a72e:	f000 8088 	beq.w	800a842 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800a732:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a734:	2bc0      	cmp	r3, #192	@ 0xc0
 800a736:	f200 8088 	bhi.w	800a84a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800a73a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a73c:	2b80      	cmp	r3, #128	@ 0x80
 800a73e:	d032      	beq.n	800a7a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800a740:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a742:	2b80      	cmp	r3, #128	@ 0x80
 800a744:	f200 8081 	bhi.w	800a84a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800a748:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d003      	beq.n	800a756 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800a74e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a750:	2b40      	cmp	r3, #64	@ 0x40
 800a752:	d014      	beq.n	800a77e <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800a754:	e079      	b.n	800a84a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a756:	4b3f      	ldr	r3, [pc, #252]	@ (800a854 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a75e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a762:	d108      	bne.n	800a776 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a764:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a768:	4618      	mov	r0, r3
 800a76a:	f000 ff67 	bl	800b63c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a76e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a770:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a772:	f000 bc9c 	b.w	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a776:	2300      	movs	r3, #0
 800a778:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a77a:	f000 bc98 	b.w	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a77e:	4b35      	ldr	r3, [pc, #212]	@ (800a854 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a786:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a78a:	d108      	bne.n	800a79e <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a78c:	f107 0318 	add.w	r3, r7, #24
 800a790:	4618      	mov	r0, r3
 800a792:	f000 fcab 	bl	800b0ec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a796:	69bb      	ldr	r3, [r7, #24]
 800a798:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a79a:	f000 bc88 	b.w	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a79e:	2300      	movs	r3, #0
 800a7a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a7a2:	f000 bc84 	b.w	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a7a6:	4b2b      	ldr	r3, [pc, #172]	@ (800a854 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a7ae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a7b2:	d108      	bne.n	800a7c6 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a7b4:	f107 030c 	add.w	r3, r7, #12
 800a7b8:	4618      	mov	r0, r3
 800a7ba:	f000 fdeb 	bl	800b394 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a7c2:	f000 bc74 	b.w	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a7c6:	2300      	movs	r3, #0
 800a7c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a7ca:	f000 bc70 	b.w	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a7ce:	4b21      	ldr	r3, [pc, #132]	@ (800a854 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a7d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a7d2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a7d6:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a7d8:	4b1e      	ldr	r3, [pc, #120]	@ (800a854 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	f003 0304 	and.w	r3, r3, #4
 800a7e0:	2b04      	cmp	r3, #4
 800a7e2:	d10c      	bne.n	800a7fe <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800a7e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d109      	bne.n	800a7fe <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a7ea:	4b1a      	ldr	r3, [pc, #104]	@ (800a854 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	08db      	lsrs	r3, r3, #3
 800a7f0:	f003 0303 	and.w	r3, r3, #3
 800a7f4:	4a18      	ldr	r2, [pc, #96]	@ (800a858 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a7f6:	fa22 f303 	lsr.w	r3, r2, r3
 800a7fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a7fc:	e01f      	b.n	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a7fe:	4b15      	ldr	r3, [pc, #84]	@ (800a854 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a806:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a80a:	d106      	bne.n	800a81a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800a80c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a80e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a812:	d102      	bne.n	800a81a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a814:	4b11      	ldr	r3, [pc, #68]	@ (800a85c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800a816:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a818:	e011      	b.n	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a81a:	4b0e      	ldr	r3, [pc, #56]	@ (800a854 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a822:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a826:	d106      	bne.n	800a836 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800a828:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a82a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a82e:	d102      	bne.n	800a836 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a830:	4b0b      	ldr	r3, [pc, #44]	@ (800a860 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800a832:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a834:	e003      	b.n	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a836:	2300      	movs	r3, #0
 800a838:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a83a:	f000 bc38 	b.w	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a83e:	f000 bc36 	b.w	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a842:	4b08      	ldr	r3, [pc, #32]	@ (800a864 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800a844:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a846:	f000 bc32 	b.w	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a84a:	2300      	movs	r3, #0
 800a84c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a84e:	f000 bc2e 	b.w	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a852:	bf00      	nop
 800a854:	58024400 	.word	0x58024400
 800a858:	03d09000 	.word	0x03d09000
 800a85c:	003d0900 	.word	0x003d0900
 800a860:	017d7840 	.word	0x017d7840
 800a864:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800a868:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a86c:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800a870:	430b      	orrs	r3, r1
 800a872:	f040 809c 	bne.w	800a9ae <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800a876:	4b9e      	ldr	r3, [pc, #632]	@ (800aaf0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a878:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a87a:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800a87e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a880:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a882:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a886:	d054      	beq.n	800a932 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800a888:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a88a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a88e:	f200 808b 	bhi.w	800a9a8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800a892:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a894:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800a898:	f000 8083 	beq.w	800a9a2 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800a89c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a89e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800a8a2:	f200 8081 	bhi.w	800a9a8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800a8a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8a8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a8ac:	d02f      	beq.n	800a90e <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800a8ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8b0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a8b4:	d878      	bhi.n	800a9a8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800a8b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d004      	beq.n	800a8c6 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800a8bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8be:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a8c2:	d012      	beq.n	800a8ea <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800a8c4:	e070      	b.n	800a9a8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a8c6:	4b8a      	ldr	r3, [pc, #552]	@ (800aaf0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a8ce:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a8d2:	d107      	bne.n	800a8e4 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a8d4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a8d8:	4618      	mov	r0, r3
 800a8da:	f000 feaf 	bl	800b63c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a8de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a8e2:	e3e4      	b.n	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a8e4:	2300      	movs	r3, #0
 800a8e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a8e8:	e3e1      	b.n	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a8ea:	4b81      	ldr	r3, [pc, #516]	@ (800aaf0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a8f2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a8f6:	d107      	bne.n	800a908 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a8f8:	f107 0318 	add.w	r3, r7, #24
 800a8fc:	4618      	mov	r0, r3
 800a8fe:	f000 fbf5 	bl	800b0ec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a902:	69bb      	ldr	r3, [r7, #24]
 800a904:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a906:	e3d2      	b.n	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a908:	2300      	movs	r3, #0
 800a90a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a90c:	e3cf      	b.n	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a90e:	4b78      	ldr	r3, [pc, #480]	@ (800aaf0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a916:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a91a:	d107      	bne.n	800a92c <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a91c:	f107 030c 	add.w	r3, r7, #12
 800a920:	4618      	mov	r0, r3
 800a922:	f000 fd37 	bl	800b394 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a92a:	e3c0      	b.n	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a92c:	2300      	movs	r3, #0
 800a92e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a930:	e3bd      	b.n	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a932:	4b6f      	ldr	r3, [pc, #444]	@ (800aaf0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a934:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a936:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a93a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a93c:	4b6c      	ldr	r3, [pc, #432]	@ (800aaf0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	f003 0304 	and.w	r3, r3, #4
 800a944:	2b04      	cmp	r3, #4
 800a946:	d10c      	bne.n	800a962 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800a948:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d109      	bne.n	800a962 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a94e:	4b68      	ldr	r3, [pc, #416]	@ (800aaf0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	08db      	lsrs	r3, r3, #3
 800a954:	f003 0303 	and.w	r3, r3, #3
 800a958:	4a66      	ldr	r2, [pc, #408]	@ (800aaf4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800a95a:	fa22 f303 	lsr.w	r3, r2, r3
 800a95e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a960:	e01e      	b.n	800a9a0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a962:	4b63      	ldr	r3, [pc, #396]	@ (800aaf0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a96a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a96e:	d106      	bne.n	800a97e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800a970:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a972:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a976:	d102      	bne.n	800a97e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a978:	4b5f      	ldr	r3, [pc, #380]	@ (800aaf8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800a97a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a97c:	e010      	b.n	800a9a0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a97e:	4b5c      	ldr	r3, [pc, #368]	@ (800aaf0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a986:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a98a:	d106      	bne.n	800a99a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800a98c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a98e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a992:	d102      	bne.n	800a99a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a994:	4b59      	ldr	r3, [pc, #356]	@ (800aafc <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800a996:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a998:	e002      	b.n	800a9a0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a99a:	2300      	movs	r3, #0
 800a99c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a99e:	e386      	b.n	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a9a0:	e385      	b.n	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a9a2:	4b57      	ldr	r3, [pc, #348]	@ (800ab00 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800a9a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a9a6:	e382      	b.n	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800a9a8:	2300      	movs	r3, #0
 800a9aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a9ac:	e37f      	b.n	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800a9ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a9b2:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800a9b6:	430b      	orrs	r3, r1
 800a9b8:	f040 80a7 	bne.w	800ab0a <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800a9bc:	4b4c      	ldr	r3, [pc, #304]	@ (800aaf0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a9be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a9c0:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800a9c4:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a9c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9c8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a9cc:	d055      	beq.n	800aa7a <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800a9ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9d0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a9d4:	f200 8096 	bhi.w	800ab04 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800a9d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9da:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a9de:	f000 8084 	beq.w	800aaea <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800a9e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9e4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a9e8:	f200 808c 	bhi.w	800ab04 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800a9ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9ee:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a9f2:	d030      	beq.n	800aa56 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800a9f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9f6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a9fa:	f200 8083 	bhi.w	800ab04 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800a9fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d004      	beq.n	800aa0e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800aa04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa06:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800aa0a:	d012      	beq.n	800aa32 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800aa0c:	e07a      	b.n	800ab04 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800aa0e:	4b38      	ldr	r3, [pc, #224]	@ (800aaf0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800aa16:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800aa1a:	d107      	bne.n	800aa2c <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800aa1c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800aa20:	4618      	mov	r0, r3
 800aa22:	f000 fe0b 	bl	800b63c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800aa26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa28:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aa2a:	e340      	b.n	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aa2c:	2300      	movs	r3, #0
 800aa2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa30:	e33d      	b.n	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800aa32:	4b2f      	ldr	r3, [pc, #188]	@ (800aaf0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800aa3a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800aa3e:	d107      	bne.n	800aa50 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aa40:	f107 0318 	add.w	r3, r7, #24
 800aa44:	4618      	mov	r0, r3
 800aa46:	f000 fb51 	bl	800b0ec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800aa4a:	69bb      	ldr	r3, [r7, #24]
 800aa4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aa4e:	e32e      	b.n	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aa50:	2300      	movs	r3, #0
 800aa52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa54:	e32b      	b.n	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800aa56:	4b26      	ldr	r3, [pc, #152]	@ (800aaf0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800aa5e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800aa62:	d107      	bne.n	800aa74 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aa64:	f107 030c 	add.w	r3, r7, #12
 800aa68:	4618      	mov	r0, r3
 800aa6a:	f000 fc93 	bl	800b394 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aa72:	e31c      	b.n	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aa74:	2300      	movs	r3, #0
 800aa76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa78:	e319      	b.n	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800aa7a:	4b1d      	ldr	r3, [pc, #116]	@ (800aaf0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800aa7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800aa7e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800aa82:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800aa84:	4b1a      	ldr	r3, [pc, #104]	@ (800aaf0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	f003 0304 	and.w	r3, r3, #4
 800aa8c:	2b04      	cmp	r3, #4
 800aa8e:	d10c      	bne.n	800aaaa <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800aa90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d109      	bne.n	800aaaa <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800aa96:	4b16      	ldr	r3, [pc, #88]	@ (800aaf0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	08db      	lsrs	r3, r3, #3
 800aa9c:	f003 0303 	and.w	r3, r3, #3
 800aaa0:	4a14      	ldr	r2, [pc, #80]	@ (800aaf4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800aaa2:	fa22 f303 	lsr.w	r3, r2, r3
 800aaa6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800aaa8:	e01e      	b.n	800aae8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800aaaa:	4b11      	ldr	r3, [pc, #68]	@ (800aaf0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aab2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800aab6:	d106      	bne.n	800aac6 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800aab8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aaba:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800aabe:	d102      	bne.n	800aac6 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800aac0:	4b0d      	ldr	r3, [pc, #52]	@ (800aaf8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800aac2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800aac4:	e010      	b.n	800aae8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800aac6:	4b0a      	ldr	r3, [pc, #40]	@ (800aaf0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800aace:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800aad2:	d106      	bne.n	800aae2 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800aad4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aad6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800aada:	d102      	bne.n	800aae2 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800aadc:	4b07      	ldr	r3, [pc, #28]	@ (800aafc <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800aade:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800aae0:	e002      	b.n	800aae8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800aae2:	2300      	movs	r3, #0
 800aae4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800aae6:	e2e2      	b.n	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800aae8:	e2e1      	b.n	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800aaea:	4b05      	ldr	r3, [pc, #20]	@ (800ab00 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800aaec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aaee:	e2de      	b.n	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800aaf0:	58024400 	.word	0x58024400
 800aaf4:	03d09000 	.word	0x03d09000
 800aaf8:	003d0900 	.word	0x003d0900
 800aafc:	017d7840 	.word	0x017d7840
 800ab00:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800ab04:	2300      	movs	r3, #0
 800ab06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ab08:	e2d1      	b.n	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800ab0a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ab0e:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800ab12:	430b      	orrs	r3, r1
 800ab14:	f040 809c 	bne.w	800ac50 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800ab18:	4b93      	ldr	r3, [pc, #588]	@ (800ad68 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ab1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ab1c:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800ab20:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800ab22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab24:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ab28:	d054      	beq.n	800abd4 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800ab2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab2c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ab30:	f200 808b 	bhi.w	800ac4a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800ab34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab36:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800ab3a:	f000 8083 	beq.w	800ac44 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800ab3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab40:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800ab44:	f200 8081 	bhi.w	800ac4a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800ab48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab4a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ab4e:	d02f      	beq.n	800abb0 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800ab50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab52:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ab56:	d878      	bhi.n	800ac4a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800ab58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d004      	beq.n	800ab68 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800ab5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab60:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ab64:	d012      	beq.n	800ab8c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800ab66:	e070      	b.n	800ac4a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ab68:	4b7f      	ldr	r3, [pc, #508]	@ (800ad68 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ab70:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ab74:	d107      	bne.n	800ab86 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ab76:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ab7a:	4618      	mov	r0, r3
 800ab7c:	f000 fd5e 	bl	800b63c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ab80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ab84:	e293      	b.n	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ab86:	2300      	movs	r3, #0
 800ab88:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ab8a:	e290      	b.n	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ab8c:	4b76      	ldr	r3, [pc, #472]	@ (800ad68 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ab94:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ab98:	d107      	bne.n	800abaa <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ab9a:	f107 0318 	add.w	r3, r7, #24
 800ab9e:	4618      	mov	r0, r3
 800aba0:	f000 faa4 	bl	800b0ec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800aba4:	69bb      	ldr	r3, [r7, #24]
 800aba6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aba8:	e281      	b.n	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800abaa:	2300      	movs	r3, #0
 800abac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800abae:	e27e      	b.n	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800abb0:	4b6d      	ldr	r3, [pc, #436]	@ (800ad68 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800abb8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800abbc:	d107      	bne.n	800abce <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800abbe:	f107 030c 	add.w	r3, r7, #12
 800abc2:	4618      	mov	r0, r3
 800abc4:	f000 fbe6 	bl	800b394 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800abcc:	e26f      	b.n	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800abce:	2300      	movs	r3, #0
 800abd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800abd2:	e26c      	b.n	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800abd4:	4b64      	ldr	r3, [pc, #400]	@ (800ad68 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800abd6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800abd8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800abdc:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800abde:	4b62      	ldr	r3, [pc, #392]	@ (800ad68 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	f003 0304 	and.w	r3, r3, #4
 800abe6:	2b04      	cmp	r3, #4
 800abe8:	d10c      	bne.n	800ac04 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800abea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800abec:	2b00      	cmp	r3, #0
 800abee:	d109      	bne.n	800ac04 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800abf0:	4b5d      	ldr	r3, [pc, #372]	@ (800ad68 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	08db      	lsrs	r3, r3, #3
 800abf6:	f003 0303 	and.w	r3, r3, #3
 800abfa:	4a5c      	ldr	r2, [pc, #368]	@ (800ad6c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800abfc:	fa22 f303 	lsr.w	r3, r2, r3
 800ac00:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ac02:	e01e      	b.n	800ac42 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ac04:	4b58      	ldr	r3, [pc, #352]	@ (800ad68 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ac0c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ac10:	d106      	bne.n	800ac20 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800ac12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ac14:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ac18:	d102      	bne.n	800ac20 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800ac1a:	4b55      	ldr	r3, [pc, #340]	@ (800ad70 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800ac1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ac1e:	e010      	b.n	800ac42 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ac20:	4b51      	ldr	r3, [pc, #324]	@ (800ad68 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ac28:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ac2c:	d106      	bne.n	800ac3c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800ac2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ac30:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ac34:	d102      	bne.n	800ac3c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ac36:	4b4f      	ldr	r3, [pc, #316]	@ (800ad74 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800ac38:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ac3a:	e002      	b.n	800ac42 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ac3c:	2300      	movs	r3, #0
 800ac3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800ac40:	e235      	b.n	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ac42:	e234      	b.n	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800ac44:	4b4c      	ldr	r3, [pc, #304]	@ (800ad78 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800ac46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ac48:	e231      	b.n	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800ac4a:	2300      	movs	r3, #0
 800ac4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ac4e:	e22e      	b.n	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800ac50:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ac54:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800ac58:	430b      	orrs	r3, r1
 800ac5a:	f040 808f 	bne.w	800ad7c <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800ac5e:	4b42      	ldr	r3, [pc, #264]	@ (800ad68 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ac60:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ac62:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800ac66:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800ac68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac6a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800ac6e:	d06b      	beq.n	800ad48 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800ac70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac72:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800ac76:	d874      	bhi.n	800ad62 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800ac78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac7a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800ac7e:	d056      	beq.n	800ad2e <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800ac80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac82:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800ac86:	d86c      	bhi.n	800ad62 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800ac88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac8a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800ac8e:	d03b      	beq.n	800ad08 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800ac90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac92:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800ac96:	d864      	bhi.n	800ad62 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800ac98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac9a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ac9e:	d021      	beq.n	800ace4 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800aca0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aca2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800aca6:	d85c      	bhi.n	800ad62 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800aca8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d004      	beq.n	800acb8 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800acae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800acb0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800acb4:	d004      	beq.n	800acc0 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800acb6:	e054      	b.n	800ad62 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800acb8:	f7fe fa4c 	bl	8009154 <HAL_RCC_GetPCLK1Freq>
 800acbc:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800acbe:	e1f6      	b.n	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800acc0:	4b29      	ldr	r3, [pc, #164]	@ (800ad68 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800acc8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800accc:	d107      	bne.n	800acde <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800acce:	f107 0318 	add.w	r3, r7, #24
 800acd2:	4618      	mov	r0, r3
 800acd4:	f000 fa0a 	bl	800b0ec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800acd8:	69fb      	ldr	r3, [r7, #28]
 800acda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800acdc:	e1e7      	b.n	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800acde:	2300      	movs	r3, #0
 800ace0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ace2:	e1e4      	b.n	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ace4:	4b20      	ldr	r3, [pc, #128]	@ (800ad68 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800acec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800acf0:	d107      	bne.n	800ad02 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800acf2:	f107 030c 	add.w	r3, r7, #12
 800acf6:	4618      	mov	r0, r3
 800acf8:	f000 fb4c 	bl	800b394 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800acfc:	693b      	ldr	r3, [r7, #16]
 800acfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ad00:	e1d5      	b.n	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ad02:	2300      	movs	r3, #0
 800ad04:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ad06:	e1d2      	b.n	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800ad08:	4b17      	ldr	r3, [pc, #92]	@ (800ad68 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	f003 0304 	and.w	r3, r3, #4
 800ad10:	2b04      	cmp	r3, #4
 800ad12:	d109      	bne.n	800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ad14:	4b14      	ldr	r3, [pc, #80]	@ (800ad68 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	08db      	lsrs	r3, r3, #3
 800ad1a:	f003 0303 	and.w	r3, r3, #3
 800ad1e:	4a13      	ldr	r2, [pc, #76]	@ (800ad6c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800ad20:	fa22 f303 	lsr.w	r3, r2, r3
 800ad24:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ad26:	e1c2      	b.n	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ad28:	2300      	movs	r3, #0
 800ad2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ad2c:	e1bf      	b.n	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800ad2e:	4b0e      	ldr	r3, [pc, #56]	@ (800ad68 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ad36:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ad3a:	d102      	bne.n	800ad42 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800ad3c:	4b0c      	ldr	r3, [pc, #48]	@ (800ad70 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800ad3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ad40:	e1b5      	b.n	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ad42:	2300      	movs	r3, #0
 800ad44:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ad46:	e1b2      	b.n	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800ad48:	4b07      	ldr	r3, [pc, #28]	@ (800ad68 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ad50:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ad54:	d102      	bne.n	800ad5c <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800ad56:	4b07      	ldr	r3, [pc, #28]	@ (800ad74 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800ad58:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ad5a:	e1a8      	b.n	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ad5c:	2300      	movs	r3, #0
 800ad5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ad60:	e1a5      	b.n	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800ad62:	2300      	movs	r3, #0
 800ad64:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ad66:	e1a2      	b.n	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ad68:	58024400 	.word	0x58024400
 800ad6c:	03d09000 	.word	0x03d09000
 800ad70:	003d0900 	.word	0x003d0900
 800ad74:	017d7840 	.word	0x017d7840
 800ad78:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800ad7c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ad80:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800ad84:	430b      	orrs	r3, r1
 800ad86:	d173      	bne.n	800ae70 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800ad88:	4b9c      	ldr	r3, [pc, #624]	@ (800affc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ad8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ad8c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800ad90:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800ad92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad94:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ad98:	d02f      	beq.n	800adfa <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800ad9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad9c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ada0:	d863      	bhi.n	800ae6a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800ada2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d004      	beq.n	800adb2 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800ada8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800adaa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800adae:	d012      	beq.n	800add6 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800adb0:	e05b      	b.n	800ae6a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800adb2:	4b92      	ldr	r3, [pc, #584]	@ (800affc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800adba:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800adbe:	d107      	bne.n	800add0 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800adc0:	f107 0318 	add.w	r3, r7, #24
 800adc4:	4618      	mov	r0, r3
 800adc6:	f000 f991 	bl	800b0ec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800adca:	69bb      	ldr	r3, [r7, #24]
 800adcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800adce:	e16e      	b.n	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800add0:	2300      	movs	r3, #0
 800add2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800add4:	e16b      	b.n	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800add6:	4b89      	ldr	r3, [pc, #548]	@ (800affc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800adde:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ade2:	d107      	bne.n	800adf4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ade4:	f107 030c 	add.w	r3, r7, #12
 800ade8:	4618      	mov	r0, r3
 800adea:	f000 fad3 	bl	800b394 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800adee:	697b      	ldr	r3, [r7, #20]
 800adf0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800adf2:	e15c      	b.n	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800adf4:	2300      	movs	r3, #0
 800adf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800adf8:	e159      	b.n	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800adfa:	4b80      	ldr	r3, [pc, #512]	@ (800affc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800adfc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800adfe:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800ae02:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ae04:	4b7d      	ldr	r3, [pc, #500]	@ (800affc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	f003 0304 	and.w	r3, r3, #4
 800ae0c:	2b04      	cmp	r3, #4
 800ae0e:	d10c      	bne.n	800ae2a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800ae10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d109      	bne.n	800ae2a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ae16:	4b79      	ldr	r3, [pc, #484]	@ (800affc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	08db      	lsrs	r3, r3, #3
 800ae1c:	f003 0303 	and.w	r3, r3, #3
 800ae20:	4a77      	ldr	r2, [pc, #476]	@ (800b000 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800ae22:	fa22 f303 	lsr.w	r3, r2, r3
 800ae26:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ae28:	e01e      	b.n	800ae68 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ae2a:	4b74      	ldr	r3, [pc, #464]	@ (800affc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ae32:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ae36:	d106      	bne.n	800ae46 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800ae38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ae3a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ae3e:	d102      	bne.n	800ae46 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800ae40:	4b70      	ldr	r3, [pc, #448]	@ (800b004 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800ae42:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ae44:	e010      	b.n	800ae68 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ae46:	4b6d      	ldr	r3, [pc, #436]	@ (800affc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ae4e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ae52:	d106      	bne.n	800ae62 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800ae54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ae56:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ae5a:	d102      	bne.n	800ae62 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ae5c:	4b6a      	ldr	r3, [pc, #424]	@ (800b008 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800ae5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ae60:	e002      	b.n	800ae68 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ae62:	2300      	movs	r3, #0
 800ae64:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800ae66:	e122      	b.n	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ae68:	e121      	b.n	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800ae6a:	2300      	movs	r3, #0
 800ae6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ae6e:	e11e      	b.n	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800ae70:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ae74:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800ae78:	430b      	orrs	r3, r1
 800ae7a:	d133      	bne.n	800aee4 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800ae7c:	4b5f      	ldr	r3, [pc, #380]	@ (800affc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ae7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ae80:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ae84:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800ae86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d004      	beq.n	800ae96 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800ae8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae8e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ae92:	d012      	beq.n	800aeba <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800ae94:	e023      	b.n	800aede <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ae96:	4b59      	ldr	r3, [pc, #356]	@ (800affc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ae9e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800aea2:	d107      	bne.n	800aeb4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800aea4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800aea8:	4618      	mov	r0, r3
 800aeaa:	f000 fbc7 	bl	800b63c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800aeae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aeb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aeb2:	e0fc      	b.n	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aeb4:	2300      	movs	r3, #0
 800aeb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aeb8:	e0f9      	b.n	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800aeba:	4b50      	ldr	r3, [pc, #320]	@ (800affc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800aec2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800aec6:	d107      	bne.n	800aed8 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aec8:	f107 0318 	add.w	r3, r7, #24
 800aecc:	4618      	mov	r0, r3
 800aece:	f000 f90d 	bl	800b0ec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800aed2:	6a3b      	ldr	r3, [r7, #32]
 800aed4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aed6:	e0ea      	b.n	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aed8:	2300      	movs	r3, #0
 800aeda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aedc:	e0e7      	b.n	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800aede:	2300      	movs	r3, #0
 800aee0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aee2:	e0e4      	b.n	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800aee4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aee8:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800aeec:	430b      	orrs	r3, r1
 800aeee:	f040 808d 	bne.w	800b00c <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800aef2:	4b42      	ldr	r3, [pc, #264]	@ (800affc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800aef4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aef6:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800aefa:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800aefc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aefe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800af02:	d06b      	beq.n	800afdc <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800af04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af06:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800af0a:	d874      	bhi.n	800aff6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800af0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800af12:	d056      	beq.n	800afc2 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800af14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800af1a:	d86c      	bhi.n	800aff6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800af1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af1e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800af22:	d03b      	beq.n	800af9c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800af24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af26:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800af2a:	d864      	bhi.n	800aff6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800af2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af2e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800af32:	d021      	beq.n	800af78 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800af34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af36:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800af3a:	d85c      	bhi.n	800aff6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800af3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d004      	beq.n	800af4c <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800af42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af44:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800af48:	d004      	beq.n	800af54 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800af4a:	e054      	b.n	800aff6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800af4c:	f000 f8b8 	bl	800b0c0 <HAL_RCCEx_GetD3PCLK1Freq>
 800af50:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800af52:	e0ac      	b.n	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800af54:	4b29      	ldr	r3, [pc, #164]	@ (800affc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800af5c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800af60:	d107      	bne.n	800af72 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800af62:	f107 0318 	add.w	r3, r7, #24
 800af66:	4618      	mov	r0, r3
 800af68:	f000 f8c0 	bl	800b0ec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800af6c:	69fb      	ldr	r3, [r7, #28]
 800af6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800af70:	e09d      	b.n	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800af72:	2300      	movs	r3, #0
 800af74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800af76:	e09a      	b.n	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800af78:	4b20      	ldr	r3, [pc, #128]	@ (800affc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800af80:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800af84:	d107      	bne.n	800af96 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800af86:	f107 030c 	add.w	r3, r7, #12
 800af8a:	4618      	mov	r0, r3
 800af8c:	f000 fa02 	bl	800b394 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800af90:	693b      	ldr	r3, [r7, #16]
 800af92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800af94:	e08b      	b.n	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800af96:	2300      	movs	r3, #0
 800af98:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800af9a:	e088      	b.n	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800af9c:	4b17      	ldr	r3, [pc, #92]	@ (800affc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	f003 0304 	and.w	r3, r3, #4
 800afa4:	2b04      	cmp	r3, #4
 800afa6:	d109      	bne.n	800afbc <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800afa8:	4b14      	ldr	r3, [pc, #80]	@ (800affc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	08db      	lsrs	r3, r3, #3
 800afae:	f003 0303 	and.w	r3, r3, #3
 800afb2:	4a13      	ldr	r2, [pc, #76]	@ (800b000 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800afb4:	fa22 f303 	lsr.w	r3, r2, r3
 800afb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800afba:	e078      	b.n	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800afbc:	2300      	movs	r3, #0
 800afbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800afc0:	e075      	b.n	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800afc2:	4b0e      	ldr	r3, [pc, #56]	@ (800affc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800afca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800afce:	d102      	bne.n	800afd6 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800afd0:	4b0c      	ldr	r3, [pc, #48]	@ (800b004 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800afd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800afd4:	e06b      	b.n	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800afd6:	2300      	movs	r3, #0
 800afd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800afda:	e068      	b.n	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800afdc:	4b07      	ldr	r3, [pc, #28]	@ (800affc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800afe4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800afe8:	d102      	bne.n	800aff0 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800afea:	4b07      	ldr	r3, [pc, #28]	@ (800b008 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800afec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800afee:	e05e      	b.n	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aff0:	2300      	movs	r3, #0
 800aff2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aff4:	e05b      	b.n	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800aff6:	2300      	movs	r3, #0
 800aff8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800affa:	e058      	b.n	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800affc:	58024400 	.word	0x58024400
 800b000:	03d09000 	.word	0x03d09000
 800b004:	003d0900 	.word	0x003d0900
 800b008:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800b00c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b010:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800b014:	430b      	orrs	r3, r1
 800b016:	d148      	bne.n	800b0aa <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800b018:	4b27      	ldr	r3, [pc, #156]	@ (800b0b8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800b01a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b01c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b020:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800b022:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b024:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b028:	d02a      	beq.n	800b080 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800b02a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b02c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b030:	d838      	bhi.n	800b0a4 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800b032:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b034:	2b00      	cmp	r3, #0
 800b036:	d004      	beq.n	800b042 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800b038:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b03a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b03e:	d00d      	beq.n	800b05c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800b040:	e030      	b.n	800b0a4 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b042:	4b1d      	ldr	r3, [pc, #116]	@ (800b0b8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b04a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b04e:	d102      	bne.n	800b056 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800b050:	4b1a      	ldr	r3, [pc, #104]	@ (800b0bc <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800b052:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b054:	e02b      	b.n	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b056:	2300      	movs	r3, #0
 800b058:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b05a:	e028      	b.n	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b05c:	4b16      	ldr	r3, [pc, #88]	@ (800b0b8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b064:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b068:	d107      	bne.n	800b07a <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b06a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b06e:	4618      	mov	r0, r3
 800b070:	f000 fae4 	bl	800b63c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b074:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b076:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b078:	e019      	b.n	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b07a:	2300      	movs	r3, #0
 800b07c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b07e:	e016      	b.n	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b080:	4b0d      	ldr	r3, [pc, #52]	@ (800b0b8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b088:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b08c:	d107      	bne.n	800b09e <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b08e:	f107 0318 	add.w	r3, r7, #24
 800b092:	4618      	mov	r0, r3
 800b094:	f000 f82a 	bl	800b0ec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b098:	69fb      	ldr	r3, [r7, #28]
 800b09a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b09c:	e007      	b.n	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b09e:	2300      	movs	r3, #0
 800b0a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b0a2:	e004      	b.n	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800b0a4:	2300      	movs	r3, #0
 800b0a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b0a8:	e001      	b.n	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800b0aa:	2300      	movs	r3, #0
 800b0ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800b0ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800b0b0:	4618      	mov	r0, r3
 800b0b2:	3740      	adds	r7, #64	@ 0x40
 800b0b4:	46bd      	mov	sp, r7
 800b0b6:	bd80      	pop	{r7, pc}
 800b0b8:	58024400 	.word	0x58024400
 800b0bc:	017d7840 	.word	0x017d7840

0800b0c0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800b0c0:	b580      	push	{r7, lr}
 800b0c2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800b0c4:	f7fe f816 	bl	80090f4 <HAL_RCC_GetHCLKFreq>
 800b0c8:	4602      	mov	r2, r0
 800b0ca:	4b06      	ldr	r3, [pc, #24]	@ (800b0e4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800b0cc:	6a1b      	ldr	r3, [r3, #32]
 800b0ce:	091b      	lsrs	r3, r3, #4
 800b0d0:	f003 0307 	and.w	r3, r3, #7
 800b0d4:	4904      	ldr	r1, [pc, #16]	@ (800b0e8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800b0d6:	5ccb      	ldrb	r3, [r1, r3]
 800b0d8:	f003 031f 	and.w	r3, r3, #31
 800b0dc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800b0e0:	4618      	mov	r0, r3
 800b0e2:	bd80      	pop	{r7, pc}
 800b0e4:	58024400 	.word	0x58024400
 800b0e8:	08015190 	.word	0x08015190

0800b0ec <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800b0ec:	b480      	push	{r7}
 800b0ee:	b089      	sub	sp, #36	@ 0x24
 800b0f0:	af00      	add	r7, sp, #0
 800b0f2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b0f4:	4ba1      	ldr	r3, [pc, #644]	@ (800b37c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b0f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b0f8:	f003 0303 	and.w	r3, r3, #3
 800b0fc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800b0fe:	4b9f      	ldr	r3, [pc, #636]	@ (800b37c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b100:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b102:	0b1b      	lsrs	r3, r3, #12
 800b104:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b108:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800b10a:	4b9c      	ldr	r3, [pc, #624]	@ (800b37c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b10c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b10e:	091b      	lsrs	r3, r3, #4
 800b110:	f003 0301 	and.w	r3, r3, #1
 800b114:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800b116:	4b99      	ldr	r3, [pc, #612]	@ (800b37c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b118:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b11a:	08db      	lsrs	r3, r3, #3
 800b11c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b120:	693a      	ldr	r2, [r7, #16]
 800b122:	fb02 f303 	mul.w	r3, r2, r3
 800b126:	ee07 3a90 	vmov	s15, r3
 800b12a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b12e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800b132:	697b      	ldr	r3, [r7, #20]
 800b134:	2b00      	cmp	r3, #0
 800b136:	f000 8111 	beq.w	800b35c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800b13a:	69bb      	ldr	r3, [r7, #24]
 800b13c:	2b02      	cmp	r3, #2
 800b13e:	f000 8083 	beq.w	800b248 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800b142:	69bb      	ldr	r3, [r7, #24]
 800b144:	2b02      	cmp	r3, #2
 800b146:	f200 80a1 	bhi.w	800b28c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800b14a:	69bb      	ldr	r3, [r7, #24]
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d003      	beq.n	800b158 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800b150:	69bb      	ldr	r3, [r7, #24]
 800b152:	2b01      	cmp	r3, #1
 800b154:	d056      	beq.n	800b204 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800b156:	e099      	b.n	800b28c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b158:	4b88      	ldr	r3, [pc, #544]	@ (800b37c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	f003 0320 	and.w	r3, r3, #32
 800b160:	2b00      	cmp	r3, #0
 800b162:	d02d      	beq.n	800b1c0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b164:	4b85      	ldr	r3, [pc, #532]	@ (800b37c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	08db      	lsrs	r3, r3, #3
 800b16a:	f003 0303 	and.w	r3, r3, #3
 800b16e:	4a84      	ldr	r2, [pc, #528]	@ (800b380 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800b170:	fa22 f303 	lsr.w	r3, r2, r3
 800b174:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b176:	68bb      	ldr	r3, [r7, #8]
 800b178:	ee07 3a90 	vmov	s15, r3
 800b17c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b180:	697b      	ldr	r3, [r7, #20]
 800b182:	ee07 3a90 	vmov	s15, r3
 800b186:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b18a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b18e:	4b7b      	ldr	r3, [pc, #492]	@ (800b37c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b190:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b192:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b196:	ee07 3a90 	vmov	s15, r3
 800b19a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b19e:	ed97 6a03 	vldr	s12, [r7, #12]
 800b1a2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800b384 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b1a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b1aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b1ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b1b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b1b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b1ba:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b1be:	e087      	b.n	800b2d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b1c0:	697b      	ldr	r3, [r7, #20]
 800b1c2:	ee07 3a90 	vmov	s15, r3
 800b1c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b1ca:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800b388 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800b1ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b1d2:	4b6a      	ldr	r3, [pc, #424]	@ (800b37c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b1d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b1d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b1da:	ee07 3a90 	vmov	s15, r3
 800b1de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b1e2:	ed97 6a03 	vldr	s12, [r7, #12]
 800b1e6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800b384 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b1ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b1ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b1f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b1f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b1fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b1fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b202:	e065      	b.n	800b2d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b204:	697b      	ldr	r3, [r7, #20]
 800b206:	ee07 3a90 	vmov	s15, r3
 800b20a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b20e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800b38c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b212:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b216:	4b59      	ldr	r3, [pc, #356]	@ (800b37c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b218:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b21a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b21e:	ee07 3a90 	vmov	s15, r3
 800b222:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b226:	ed97 6a03 	vldr	s12, [r7, #12]
 800b22a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800b384 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b22e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b232:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b236:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b23a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b23e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b242:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b246:	e043      	b.n	800b2d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b248:	697b      	ldr	r3, [r7, #20]
 800b24a:	ee07 3a90 	vmov	s15, r3
 800b24e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b252:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800b390 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800b256:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b25a:	4b48      	ldr	r3, [pc, #288]	@ (800b37c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b25c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b25e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b262:	ee07 3a90 	vmov	s15, r3
 800b266:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b26a:	ed97 6a03 	vldr	s12, [r7, #12]
 800b26e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800b384 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b272:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b276:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b27a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b27e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b282:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b286:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b28a:	e021      	b.n	800b2d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b28c:	697b      	ldr	r3, [r7, #20]
 800b28e:	ee07 3a90 	vmov	s15, r3
 800b292:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b296:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800b38c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b29a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b29e:	4b37      	ldr	r3, [pc, #220]	@ (800b37c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b2a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b2a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b2a6:	ee07 3a90 	vmov	s15, r3
 800b2aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b2ae:	ed97 6a03 	vldr	s12, [r7, #12]
 800b2b2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800b384 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b2b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b2ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b2be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b2c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b2c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b2ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b2ce:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800b2d0:	4b2a      	ldr	r3, [pc, #168]	@ (800b37c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b2d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b2d4:	0a5b      	lsrs	r3, r3, #9
 800b2d6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b2da:	ee07 3a90 	vmov	s15, r3
 800b2de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b2e2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b2e6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b2ea:	edd7 6a07 	vldr	s13, [r7, #28]
 800b2ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b2f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b2f6:	ee17 2a90 	vmov	r2, s15
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800b2fe:	4b1f      	ldr	r3, [pc, #124]	@ (800b37c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b300:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b302:	0c1b      	lsrs	r3, r3, #16
 800b304:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b308:	ee07 3a90 	vmov	s15, r3
 800b30c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b310:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b314:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b318:	edd7 6a07 	vldr	s13, [r7, #28]
 800b31c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b320:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b324:	ee17 2a90 	vmov	r2, s15
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800b32c:	4b13      	ldr	r3, [pc, #76]	@ (800b37c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b32e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b330:	0e1b      	lsrs	r3, r3, #24
 800b332:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b336:	ee07 3a90 	vmov	s15, r3
 800b33a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b33e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b342:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b346:	edd7 6a07 	vldr	s13, [r7, #28]
 800b34a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b34e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b352:	ee17 2a90 	vmov	r2, s15
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800b35a:	e008      	b.n	800b36e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	2200      	movs	r2, #0
 800b360:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	2200      	movs	r2, #0
 800b366:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	2200      	movs	r2, #0
 800b36c:	609a      	str	r2, [r3, #8]
}
 800b36e:	bf00      	nop
 800b370:	3724      	adds	r7, #36	@ 0x24
 800b372:	46bd      	mov	sp, r7
 800b374:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b378:	4770      	bx	lr
 800b37a:	bf00      	nop
 800b37c:	58024400 	.word	0x58024400
 800b380:	03d09000 	.word	0x03d09000
 800b384:	46000000 	.word	0x46000000
 800b388:	4c742400 	.word	0x4c742400
 800b38c:	4a742400 	.word	0x4a742400
 800b390:	4bbebc20 	.word	0x4bbebc20

0800b394 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800b394:	b480      	push	{r7}
 800b396:	b089      	sub	sp, #36	@ 0x24
 800b398:	af00      	add	r7, sp, #0
 800b39a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b39c:	4ba1      	ldr	r3, [pc, #644]	@ (800b624 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b39e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b3a0:	f003 0303 	and.w	r3, r3, #3
 800b3a4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800b3a6:	4b9f      	ldr	r3, [pc, #636]	@ (800b624 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b3a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b3aa:	0d1b      	lsrs	r3, r3, #20
 800b3ac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b3b0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800b3b2:	4b9c      	ldr	r3, [pc, #624]	@ (800b624 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b3b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b3b6:	0a1b      	lsrs	r3, r3, #8
 800b3b8:	f003 0301 	and.w	r3, r3, #1
 800b3bc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800b3be:	4b99      	ldr	r3, [pc, #612]	@ (800b624 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b3c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b3c2:	08db      	lsrs	r3, r3, #3
 800b3c4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b3c8:	693a      	ldr	r2, [r7, #16]
 800b3ca:	fb02 f303 	mul.w	r3, r2, r3
 800b3ce:	ee07 3a90 	vmov	s15, r3
 800b3d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b3d6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800b3da:	697b      	ldr	r3, [r7, #20]
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	f000 8111 	beq.w	800b604 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800b3e2:	69bb      	ldr	r3, [r7, #24]
 800b3e4:	2b02      	cmp	r3, #2
 800b3e6:	f000 8083 	beq.w	800b4f0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800b3ea:	69bb      	ldr	r3, [r7, #24]
 800b3ec:	2b02      	cmp	r3, #2
 800b3ee:	f200 80a1 	bhi.w	800b534 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800b3f2:	69bb      	ldr	r3, [r7, #24]
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	d003      	beq.n	800b400 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800b3f8:	69bb      	ldr	r3, [r7, #24]
 800b3fa:	2b01      	cmp	r3, #1
 800b3fc:	d056      	beq.n	800b4ac <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800b3fe:	e099      	b.n	800b534 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b400:	4b88      	ldr	r3, [pc, #544]	@ (800b624 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	f003 0320 	and.w	r3, r3, #32
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d02d      	beq.n	800b468 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b40c:	4b85      	ldr	r3, [pc, #532]	@ (800b624 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	08db      	lsrs	r3, r3, #3
 800b412:	f003 0303 	and.w	r3, r3, #3
 800b416:	4a84      	ldr	r2, [pc, #528]	@ (800b628 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800b418:	fa22 f303 	lsr.w	r3, r2, r3
 800b41c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b41e:	68bb      	ldr	r3, [r7, #8]
 800b420:	ee07 3a90 	vmov	s15, r3
 800b424:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b428:	697b      	ldr	r3, [r7, #20]
 800b42a:	ee07 3a90 	vmov	s15, r3
 800b42e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b432:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b436:	4b7b      	ldr	r3, [pc, #492]	@ (800b624 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b438:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b43a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b43e:	ee07 3a90 	vmov	s15, r3
 800b442:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b446:	ed97 6a03 	vldr	s12, [r7, #12]
 800b44a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800b62c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b44e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b452:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b456:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b45a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b45e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b462:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b466:	e087      	b.n	800b578 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b468:	697b      	ldr	r3, [r7, #20]
 800b46a:	ee07 3a90 	vmov	s15, r3
 800b46e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b472:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800b630 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800b476:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b47a:	4b6a      	ldr	r3, [pc, #424]	@ (800b624 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b47c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b47e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b482:	ee07 3a90 	vmov	s15, r3
 800b486:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b48a:	ed97 6a03 	vldr	s12, [r7, #12]
 800b48e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800b62c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b492:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b496:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b49a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b49e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b4a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b4a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b4aa:	e065      	b.n	800b578 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b4ac:	697b      	ldr	r3, [r7, #20]
 800b4ae:	ee07 3a90 	vmov	s15, r3
 800b4b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b4b6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800b634 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b4ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b4be:	4b59      	ldr	r3, [pc, #356]	@ (800b624 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b4c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b4c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b4c6:	ee07 3a90 	vmov	s15, r3
 800b4ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b4ce:	ed97 6a03 	vldr	s12, [r7, #12]
 800b4d2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800b62c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b4d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b4da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b4de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b4e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b4e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b4ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b4ee:	e043      	b.n	800b578 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b4f0:	697b      	ldr	r3, [r7, #20]
 800b4f2:	ee07 3a90 	vmov	s15, r3
 800b4f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b4fa:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800b638 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800b4fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b502:	4b48      	ldr	r3, [pc, #288]	@ (800b624 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b504:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b506:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b50a:	ee07 3a90 	vmov	s15, r3
 800b50e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b512:	ed97 6a03 	vldr	s12, [r7, #12]
 800b516:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800b62c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b51a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b51e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b522:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b526:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b52a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b52e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b532:	e021      	b.n	800b578 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b534:	697b      	ldr	r3, [r7, #20]
 800b536:	ee07 3a90 	vmov	s15, r3
 800b53a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b53e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800b634 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b542:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b546:	4b37      	ldr	r3, [pc, #220]	@ (800b624 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b548:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b54a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b54e:	ee07 3a90 	vmov	s15, r3
 800b552:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b556:	ed97 6a03 	vldr	s12, [r7, #12]
 800b55a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800b62c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b55e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b562:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b566:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b56a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b56e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b572:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b576:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800b578:	4b2a      	ldr	r3, [pc, #168]	@ (800b624 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b57a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b57c:	0a5b      	lsrs	r3, r3, #9
 800b57e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b582:	ee07 3a90 	vmov	s15, r3
 800b586:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b58a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b58e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b592:	edd7 6a07 	vldr	s13, [r7, #28]
 800b596:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b59a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b59e:	ee17 2a90 	vmov	r2, s15
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800b5a6:	4b1f      	ldr	r3, [pc, #124]	@ (800b624 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b5a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b5aa:	0c1b      	lsrs	r3, r3, #16
 800b5ac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b5b0:	ee07 3a90 	vmov	s15, r3
 800b5b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b5b8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b5bc:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b5c0:	edd7 6a07 	vldr	s13, [r7, #28]
 800b5c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b5c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b5cc:	ee17 2a90 	vmov	r2, s15
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800b5d4:	4b13      	ldr	r3, [pc, #76]	@ (800b624 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b5d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b5d8:	0e1b      	lsrs	r3, r3, #24
 800b5da:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b5de:	ee07 3a90 	vmov	s15, r3
 800b5e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b5e6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b5ea:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b5ee:	edd7 6a07 	vldr	s13, [r7, #28]
 800b5f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b5f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b5fa:	ee17 2a90 	vmov	r2, s15
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800b602:	e008      	b.n	800b616 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	2200      	movs	r2, #0
 800b608:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	2200      	movs	r2, #0
 800b60e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	2200      	movs	r2, #0
 800b614:	609a      	str	r2, [r3, #8]
}
 800b616:	bf00      	nop
 800b618:	3724      	adds	r7, #36	@ 0x24
 800b61a:	46bd      	mov	sp, r7
 800b61c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b620:	4770      	bx	lr
 800b622:	bf00      	nop
 800b624:	58024400 	.word	0x58024400
 800b628:	03d09000 	.word	0x03d09000
 800b62c:	46000000 	.word	0x46000000
 800b630:	4c742400 	.word	0x4c742400
 800b634:	4a742400 	.word	0x4a742400
 800b638:	4bbebc20 	.word	0x4bbebc20

0800b63c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800b63c:	b480      	push	{r7}
 800b63e:	b089      	sub	sp, #36	@ 0x24
 800b640:	af00      	add	r7, sp, #0
 800b642:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b644:	4ba0      	ldr	r3, [pc, #640]	@ (800b8c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b646:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b648:	f003 0303 	and.w	r3, r3, #3
 800b64c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800b64e:	4b9e      	ldr	r3, [pc, #632]	@ (800b8c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b650:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b652:	091b      	lsrs	r3, r3, #4
 800b654:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b658:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800b65a:	4b9b      	ldr	r3, [pc, #620]	@ (800b8c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b65c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b65e:	f003 0301 	and.w	r3, r3, #1
 800b662:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800b664:	4b98      	ldr	r3, [pc, #608]	@ (800b8c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b666:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b668:	08db      	lsrs	r3, r3, #3
 800b66a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b66e:	693a      	ldr	r2, [r7, #16]
 800b670:	fb02 f303 	mul.w	r3, r2, r3
 800b674:	ee07 3a90 	vmov	s15, r3
 800b678:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b67c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800b680:	697b      	ldr	r3, [r7, #20]
 800b682:	2b00      	cmp	r3, #0
 800b684:	f000 8111 	beq.w	800b8aa <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800b688:	69bb      	ldr	r3, [r7, #24]
 800b68a:	2b02      	cmp	r3, #2
 800b68c:	f000 8083 	beq.w	800b796 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800b690:	69bb      	ldr	r3, [r7, #24]
 800b692:	2b02      	cmp	r3, #2
 800b694:	f200 80a1 	bhi.w	800b7da <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800b698:	69bb      	ldr	r3, [r7, #24]
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d003      	beq.n	800b6a6 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800b69e:	69bb      	ldr	r3, [r7, #24]
 800b6a0:	2b01      	cmp	r3, #1
 800b6a2:	d056      	beq.n	800b752 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800b6a4:	e099      	b.n	800b7da <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b6a6:	4b88      	ldr	r3, [pc, #544]	@ (800b8c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	f003 0320 	and.w	r3, r3, #32
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d02d      	beq.n	800b70e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b6b2:	4b85      	ldr	r3, [pc, #532]	@ (800b8c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	08db      	lsrs	r3, r3, #3
 800b6b8:	f003 0303 	and.w	r3, r3, #3
 800b6bc:	4a83      	ldr	r2, [pc, #524]	@ (800b8cc <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800b6be:	fa22 f303 	lsr.w	r3, r2, r3
 800b6c2:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b6c4:	68bb      	ldr	r3, [r7, #8]
 800b6c6:	ee07 3a90 	vmov	s15, r3
 800b6ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b6ce:	697b      	ldr	r3, [r7, #20]
 800b6d0:	ee07 3a90 	vmov	s15, r3
 800b6d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b6d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b6dc:	4b7a      	ldr	r3, [pc, #488]	@ (800b8c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b6de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b6e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b6e4:	ee07 3a90 	vmov	s15, r3
 800b6e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b6ec:	ed97 6a03 	vldr	s12, [r7, #12]
 800b6f0:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800b8d0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b6f4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b6f8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b6fc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b700:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b704:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b708:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b70c:	e087      	b.n	800b81e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b70e:	697b      	ldr	r3, [r7, #20]
 800b710:	ee07 3a90 	vmov	s15, r3
 800b714:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b718:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800b8d4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b71c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b720:	4b69      	ldr	r3, [pc, #420]	@ (800b8c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b722:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b724:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b728:	ee07 3a90 	vmov	s15, r3
 800b72c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b730:	ed97 6a03 	vldr	s12, [r7, #12]
 800b734:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800b8d0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b738:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b73c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b740:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b744:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b748:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b74c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b750:	e065      	b.n	800b81e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b752:	697b      	ldr	r3, [r7, #20]
 800b754:	ee07 3a90 	vmov	s15, r3
 800b758:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b75c:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800b8d8 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800b760:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b764:	4b58      	ldr	r3, [pc, #352]	@ (800b8c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b766:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b768:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b76c:	ee07 3a90 	vmov	s15, r3
 800b770:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b774:	ed97 6a03 	vldr	s12, [r7, #12]
 800b778:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800b8d0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b77c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b780:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b784:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b788:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b78c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b790:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b794:	e043      	b.n	800b81e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b796:	697b      	ldr	r3, [r7, #20]
 800b798:	ee07 3a90 	vmov	s15, r3
 800b79c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b7a0:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800b8dc <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800b7a4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b7a8:	4b47      	ldr	r3, [pc, #284]	@ (800b8c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b7aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b7ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b7b0:	ee07 3a90 	vmov	s15, r3
 800b7b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b7b8:	ed97 6a03 	vldr	s12, [r7, #12]
 800b7bc:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800b8d0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b7c0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b7c4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b7c8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b7cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b7d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b7d4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b7d8:	e021      	b.n	800b81e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b7da:	697b      	ldr	r3, [r7, #20]
 800b7dc:	ee07 3a90 	vmov	s15, r3
 800b7e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b7e4:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800b8d4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b7e8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b7ec:	4b36      	ldr	r3, [pc, #216]	@ (800b8c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b7ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b7f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b7f4:	ee07 3a90 	vmov	s15, r3
 800b7f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b7fc:	ed97 6a03 	vldr	s12, [r7, #12]
 800b800:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800b8d0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b804:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b808:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b80c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b810:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b814:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b818:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b81c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800b81e:	4b2a      	ldr	r3, [pc, #168]	@ (800b8c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b822:	0a5b      	lsrs	r3, r3, #9
 800b824:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b828:	ee07 3a90 	vmov	s15, r3
 800b82c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b830:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b834:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b838:	edd7 6a07 	vldr	s13, [r7, #28]
 800b83c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b840:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b844:	ee17 2a90 	vmov	r2, s15
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800b84c:	4b1e      	ldr	r3, [pc, #120]	@ (800b8c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b84e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b850:	0c1b      	lsrs	r3, r3, #16
 800b852:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b856:	ee07 3a90 	vmov	s15, r3
 800b85a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b85e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b862:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b866:	edd7 6a07 	vldr	s13, [r7, #28]
 800b86a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b86e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b872:	ee17 2a90 	vmov	r2, s15
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800b87a:	4b13      	ldr	r3, [pc, #76]	@ (800b8c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b87c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b87e:	0e1b      	lsrs	r3, r3, #24
 800b880:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b884:	ee07 3a90 	vmov	s15, r3
 800b888:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b88c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b890:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b894:	edd7 6a07 	vldr	s13, [r7, #28]
 800b898:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b89c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b8a0:	ee17 2a90 	vmov	r2, s15
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800b8a8:	e008      	b.n	800b8bc <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	2200      	movs	r2, #0
 800b8ae:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	2200      	movs	r2, #0
 800b8b4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	2200      	movs	r2, #0
 800b8ba:	609a      	str	r2, [r3, #8]
}
 800b8bc:	bf00      	nop
 800b8be:	3724      	adds	r7, #36	@ 0x24
 800b8c0:	46bd      	mov	sp, r7
 800b8c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8c6:	4770      	bx	lr
 800b8c8:	58024400 	.word	0x58024400
 800b8cc:	03d09000 	.word	0x03d09000
 800b8d0:	46000000 	.word	0x46000000
 800b8d4:	4c742400 	.word	0x4c742400
 800b8d8:	4a742400 	.word	0x4a742400
 800b8dc:	4bbebc20 	.word	0x4bbebc20

0800b8e0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800b8e0:	b580      	push	{r7, lr}
 800b8e2:	b084      	sub	sp, #16
 800b8e4:	af00      	add	r7, sp, #0
 800b8e6:	6078      	str	r0, [r7, #4]
 800b8e8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b8ea:	2300      	movs	r3, #0
 800b8ec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b8ee:	4b53      	ldr	r3, [pc, #332]	@ (800ba3c <RCCEx_PLL2_Config+0x15c>)
 800b8f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b8f2:	f003 0303 	and.w	r3, r3, #3
 800b8f6:	2b03      	cmp	r3, #3
 800b8f8:	d101      	bne.n	800b8fe <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800b8fa:	2301      	movs	r3, #1
 800b8fc:	e099      	b.n	800ba32 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800b8fe:	4b4f      	ldr	r3, [pc, #316]	@ (800ba3c <RCCEx_PLL2_Config+0x15c>)
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	4a4e      	ldr	r2, [pc, #312]	@ (800ba3c <RCCEx_PLL2_Config+0x15c>)
 800b904:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b908:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b90a:	f7f7 f961 	bl	8002bd0 <HAL_GetTick>
 800b90e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b910:	e008      	b.n	800b924 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b912:	f7f7 f95d 	bl	8002bd0 <HAL_GetTick>
 800b916:	4602      	mov	r2, r0
 800b918:	68bb      	ldr	r3, [r7, #8]
 800b91a:	1ad3      	subs	r3, r2, r3
 800b91c:	2b02      	cmp	r3, #2
 800b91e:	d901      	bls.n	800b924 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b920:	2303      	movs	r3, #3
 800b922:	e086      	b.n	800ba32 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b924:	4b45      	ldr	r3, [pc, #276]	@ (800ba3c <RCCEx_PLL2_Config+0x15c>)
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d1f0      	bne.n	800b912 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800b930:	4b42      	ldr	r3, [pc, #264]	@ (800ba3c <RCCEx_PLL2_Config+0x15c>)
 800b932:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b934:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	031b      	lsls	r3, r3, #12
 800b93e:	493f      	ldr	r1, [pc, #252]	@ (800ba3c <RCCEx_PLL2_Config+0x15c>)
 800b940:	4313      	orrs	r3, r2
 800b942:	628b      	str	r3, [r1, #40]	@ 0x28
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	685b      	ldr	r3, [r3, #4]
 800b948:	3b01      	subs	r3, #1
 800b94a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	689b      	ldr	r3, [r3, #8]
 800b952:	3b01      	subs	r3, #1
 800b954:	025b      	lsls	r3, r3, #9
 800b956:	b29b      	uxth	r3, r3
 800b958:	431a      	orrs	r2, r3
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	68db      	ldr	r3, [r3, #12]
 800b95e:	3b01      	subs	r3, #1
 800b960:	041b      	lsls	r3, r3, #16
 800b962:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800b966:	431a      	orrs	r2, r3
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	691b      	ldr	r3, [r3, #16]
 800b96c:	3b01      	subs	r3, #1
 800b96e:	061b      	lsls	r3, r3, #24
 800b970:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800b974:	4931      	ldr	r1, [pc, #196]	@ (800ba3c <RCCEx_PLL2_Config+0x15c>)
 800b976:	4313      	orrs	r3, r2
 800b978:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800b97a:	4b30      	ldr	r3, [pc, #192]	@ (800ba3c <RCCEx_PLL2_Config+0x15c>)
 800b97c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b97e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	695b      	ldr	r3, [r3, #20]
 800b986:	492d      	ldr	r1, [pc, #180]	@ (800ba3c <RCCEx_PLL2_Config+0x15c>)
 800b988:	4313      	orrs	r3, r2
 800b98a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800b98c:	4b2b      	ldr	r3, [pc, #172]	@ (800ba3c <RCCEx_PLL2_Config+0x15c>)
 800b98e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b990:	f023 0220 	bic.w	r2, r3, #32
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	699b      	ldr	r3, [r3, #24]
 800b998:	4928      	ldr	r1, [pc, #160]	@ (800ba3c <RCCEx_PLL2_Config+0x15c>)
 800b99a:	4313      	orrs	r3, r2
 800b99c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800b99e:	4b27      	ldr	r3, [pc, #156]	@ (800ba3c <RCCEx_PLL2_Config+0x15c>)
 800b9a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b9a2:	4a26      	ldr	r2, [pc, #152]	@ (800ba3c <RCCEx_PLL2_Config+0x15c>)
 800b9a4:	f023 0310 	bic.w	r3, r3, #16
 800b9a8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800b9aa:	4b24      	ldr	r3, [pc, #144]	@ (800ba3c <RCCEx_PLL2_Config+0x15c>)
 800b9ac:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b9ae:	4b24      	ldr	r3, [pc, #144]	@ (800ba40 <RCCEx_PLL2_Config+0x160>)
 800b9b0:	4013      	ands	r3, r2
 800b9b2:	687a      	ldr	r2, [r7, #4]
 800b9b4:	69d2      	ldr	r2, [r2, #28]
 800b9b6:	00d2      	lsls	r2, r2, #3
 800b9b8:	4920      	ldr	r1, [pc, #128]	@ (800ba3c <RCCEx_PLL2_Config+0x15c>)
 800b9ba:	4313      	orrs	r3, r2
 800b9bc:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800b9be:	4b1f      	ldr	r3, [pc, #124]	@ (800ba3c <RCCEx_PLL2_Config+0x15c>)
 800b9c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b9c2:	4a1e      	ldr	r2, [pc, #120]	@ (800ba3c <RCCEx_PLL2_Config+0x15c>)
 800b9c4:	f043 0310 	orr.w	r3, r3, #16
 800b9c8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b9ca:	683b      	ldr	r3, [r7, #0]
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d106      	bne.n	800b9de <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800b9d0:	4b1a      	ldr	r3, [pc, #104]	@ (800ba3c <RCCEx_PLL2_Config+0x15c>)
 800b9d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b9d4:	4a19      	ldr	r2, [pc, #100]	@ (800ba3c <RCCEx_PLL2_Config+0x15c>)
 800b9d6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b9da:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b9dc:	e00f      	b.n	800b9fe <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b9de:	683b      	ldr	r3, [r7, #0]
 800b9e0:	2b01      	cmp	r3, #1
 800b9e2:	d106      	bne.n	800b9f2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800b9e4:	4b15      	ldr	r3, [pc, #84]	@ (800ba3c <RCCEx_PLL2_Config+0x15c>)
 800b9e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b9e8:	4a14      	ldr	r2, [pc, #80]	@ (800ba3c <RCCEx_PLL2_Config+0x15c>)
 800b9ea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b9ee:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b9f0:	e005      	b.n	800b9fe <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800b9f2:	4b12      	ldr	r3, [pc, #72]	@ (800ba3c <RCCEx_PLL2_Config+0x15c>)
 800b9f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b9f6:	4a11      	ldr	r2, [pc, #68]	@ (800ba3c <RCCEx_PLL2_Config+0x15c>)
 800b9f8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800b9fc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800b9fe:	4b0f      	ldr	r3, [pc, #60]	@ (800ba3c <RCCEx_PLL2_Config+0x15c>)
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	4a0e      	ldr	r2, [pc, #56]	@ (800ba3c <RCCEx_PLL2_Config+0x15c>)
 800ba04:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800ba08:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ba0a:	f7f7 f8e1 	bl	8002bd0 <HAL_GetTick>
 800ba0e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800ba10:	e008      	b.n	800ba24 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800ba12:	f7f7 f8dd 	bl	8002bd0 <HAL_GetTick>
 800ba16:	4602      	mov	r2, r0
 800ba18:	68bb      	ldr	r3, [r7, #8]
 800ba1a:	1ad3      	subs	r3, r2, r3
 800ba1c:	2b02      	cmp	r3, #2
 800ba1e:	d901      	bls.n	800ba24 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800ba20:	2303      	movs	r3, #3
 800ba22:	e006      	b.n	800ba32 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800ba24:	4b05      	ldr	r3, [pc, #20]	@ (800ba3c <RCCEx_PLL2_Config+0x15c>)
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d0f0      	beq.n	800ba12 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800ba30:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba32:	4618      	mov	r0, r3
 800ba34:	3710      	adds	r7, #16
 800ba36:	46bd      	mov	sp, r7
 800ba38:	bd80      	pop	{r7, pc}
 800ba3a:	bf00      	nop
 800ba3c:	58024400 	.word	0x58024400
 800ba40:	ffff0007 	.word	0xffff0007

0800ba44 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800ba44:	b580      	push	{r7, lr}
 800ba46:	b084      	sub	sp, #16
 800ba48:	af00      	add	r7, sp, #0
 800ba4a:	6078      	str	r0, [r7, #4]
 800ba4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ba4e:	2300      	movs	r3, #0
 800ba50:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800ba52:	4b53      	ldr	r3, [pc, #332]	@ (800bba0 <RCCEx_PLL3_Config+0x15c>)
 800ba54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ba56:	f003 0303 	and.w	r3, r3, #3
 800ba5a:	2b03      	cmp	r3, #3
 800ba5c:	d101      	bne.n	800ba62 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800ba5e:	2301      	movs	r3, #1
 800ba60:	e099      	b.n	800bb96 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800ba62:	4b4f      	ldr	r3, [pc, #316]	@ (800bba0 <RCCEx_PLL3_Config+0x15c>)
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	4a4e      	ldr	r2, [pc, #312]	@ (800bba0 <RCCEx_PLL3_Config+0x15c>)
 800ba68:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ba6c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ba6e:	f7f7 f8af 	bl	8002bd0 <HAL_GetTick>
 800ba72:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800ba74:	e008      	b.n	800ba88 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800ba76:	f7f7 f8ab 	bl	8002bd0 <HAL_GetTick>
 800ba7a:	4602      	mov	r2, r0
 800ba7c:	68bb      	ldr	r3, [r7, #8]
 800ba7e:	1ad3      	subs	r3, r2, r3
 800ba80:	2b02      	cmp	r3, #2
 800ba82:	d901      	bls.n	800ba88 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800ba84:	2303      	movs	r3, #3
 800ba86:	e086      	b.n	800bb96 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800ba88:	4b45      	ldr	r3, [pc, #276]	@ (800bba0 <RCCEx_PLL3_Config+0x15c>)
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d1f0      	bne.n	800ba76 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800ba94:	4b42      	ldr	r3, [pc, #264]	@ (800bba0 <RCCEx_PLL3_Config+0x15c>)
 800ba96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ba98:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	051b      	lsls	r3, r3, #20
 800baa2:	493f      	ldr	r1, [pc, #252]	@ (800bba0 <RCCEx_PLL3_Config+0x15c>)
 800baa4:	4313      	orrs	r3, r2
 800baa6:	628b      	str	r3, [r1, #40]	@ 0x28
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	685b      	ldr	r3, [r3, #4]
 800baac:	3b01      	subs	r3, #1
 800baae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	689b      	ldr	r3, [r3, #8]
 800bab6:	3b01      	subs	r3, #1
 800bab8:	025b      	lsls	r3, r3, #9
 800baba:	b29b      	uxth	r3, r3
 800babc:	431a      	orrs	r2, r3
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	68db      	ldr	r3, [r3, #12]
 800bac2:	3b01      	subs	r3, #1
 800bac4:	041b      	lsls	r3, r3, #16
 800bac6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800baca:	431a      	orrs	r2, r3
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	691b      	ldr	r3, [r3, #16]
 800bad0:	3b01      	subs	r3, #1
 800bad2:	061b      	lsls	r3, r3, #24
 800bad4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800bad8:	4931      	ldr	r1, [pc, #196]	@ (800bba0 <RCCEx_PLL3_Config+0x15c>)
 800bada:	4313      	orrs	r3, r2
 800badc:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800bade:	4b30      	ldr	r3, [pc, #192]	@ (800bba0 <RCCEx_PLL3_Config+0x15c>)
 800bae0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bae2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	695b      	ldr	r3, [r3, #20]
 800baea:	492d      	ldr	r1, [pc, #180]	@ (800bba0 <RCCEx_PLL3_Config+0x15c>)
 800baec:	4313      	orrs	r3, r2
 800baee:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800baf0:	4b2b      	ldr	r3, [pc, #172]	@ (800bba0 <RCCEx_PLL3_Config+0x15c>)
 800baf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800baf4:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	699b      	ldr	r3, [r3, #24]
 800bafc:	4928      	ldr	r1, [pc, #160]	@ (800bba0 <RCCEx_PLL3_Config+0x15c>)
 800bafe:	4313      	orrs	r3, r2
 800bb00:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800bb02:	4b27      	ldr	r3, [pc, #156]	@ (800bba0 <RCCEx_PLL3_Config+0x15c>)
 800bb04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb06:	4a26      	ldr	r2, [pc, #152]	@ (800bba0 <RCCEx_PLL3_Config+0x15c>)
 800bb08:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800bb0c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800bb0e:	4b24      	ldr	r3, [pc, #144]	@ (800bba0 <RCCEx_PLL3_Config+0x15c>)
 800bb10:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800bb12:	4b24      	ldr	r3, [pc, #144]	@ (800bba4 <RCCEx_PLL3_Config+0x160>)
 800bb14:	4013      	ands	r3, r2
 800bb16:	687a      	ldr	r2, [r7, #4]
 800bb18:	69d2      	ldr	r2, [r2, #28]
 800bb1a:	00d2      	lsls	r2, r2, #3
 800bb1c:	4920      	ldr	r1, [pc, #128]	@ (800bba0 <RCCEx_PLL3_Config+0x15c>)
 800bb1e:	4313      	orrs	r3, r2
 800bb20:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800bb22:	4b1f      	ldr	r3, [pc, #124]	@ (800bba0 <RCCEx_PLL3_Config+0x15c>)
 800bb24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb26:	4a1e      	ldr	r2, [pc, #120]	@ (800bba0 <RCCEx_PLL3_Config+0x15c>)
 800bb28:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800bb2c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800bb2e:	683b      	ldr	r3, [r7, #0]
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d106      	bne.n	800bb42 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800bb34:	4b1a      	ldr	r3, [pc, #104]	@ (800bba0 <RCCEx_PLL3_Config+0x15c>)
 800bb36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb38:	4a19      	ldr	r2, [pc, #100]	@ (800bba0 <RCCEx_PLL3_Config+0x15c>)
 800bb3a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800bb3e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800bb40:	e00f      	b.n	800bb62 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800bb42:	683b      	ldr	r3, [r7, #0]
 800bb44:	2b01      	cmp	r3, #1
 800bb46:	d106      	bne.n	800bb56 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800bb48:	4b15      	ldr	r3, [pc, #84]	@ (800bba0 <RCCEx_PLL3_Config+0x15c>)
 800bb4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb4c:	4a14      	ldr	r2, [pc, #80]	@ (800bba0 <RCCEx_PLL3_Config+0x15c>)
 800bb4e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800bb52:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800bb54:	e005      	b.n	800bb62 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800bb56:	4b12      	ldr	r3, [pc, #72]	@ (800bba0 <RCCEx_PLL3_Config+0x15c>)
 800bb58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb5a:	4a11      	ldr	r2, [pc, #68]	@ (800bba0 <RCCEx_PLL3_Config+0x15c>)
 800bb5c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800bb60:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800bb62:	4b0f      	ldr	r3, [pc, #60]	@ (800bba0 <RCCEx_PLL3_Config+0x15c>)
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	4a0e      	ldr	r2, [pc, #56]	@ (800bba0 <RCCEx_PLL3_Config+0x15c>)
 800bb68:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800bb6c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bb6e:	f7f7 f82f 	bl	8002bd0 <HAL_GetTick>
 800bb72:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800bb74:	e008      	b.n	800bb88 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800bb76:	f7f7 f82b 	bl	8002bd0 <HAL_GetTick>
 800bb7a:	4602      	mov	r2, r0
 800bb7c:	68bb      	ldr	r3, [r7, #8]
 800bb7e:	1ad3      	subs	r3, r2, r3
 800bb80:	2b02      	cmp	r3, #2
 800bb82:	d901      	bls.n	800bb88 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800bb84:	2303      	movs	r3, #3
 800bb86:	e006      	b.n	800bb96 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800bb88:	4b05      	ldr	r3, [pc, #20]	@ (800bba0 <RCCEx_PLL3_Config+0x15c>)
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d0f0      	beq.n	800bb76 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800bb94:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb96:	4618      	mov	r0, r3
 800bb98:	3710      	adds	r7, #16
 800bb9a:	46bd      	mov	sp, r7
 800bb9c:	bd80      	pop	{r7, pc}
 800bb9e:	bf00      	nop
 800bba0:	58024400 	.word	0x58024400
 800bba4:	ffff0007 	.word	0xffff0007

0800bba8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800bba8:	b580      	push	{r7, lr}
 800bbaa:	b082      	sub	sp, #8
 800bbac:	af00      	add	r7, sp, #0
 800bbae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d101      	bne.n	800bbba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800bbb6:	2301      	movs	r3, #1
 800bbb8:	e049      	b.n	800bc4e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800bbc0:	b2db      	uxtb	r3, r3
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d106      	bne.n	800bbd4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	2200      	movs	r2, #0
 800bbca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800bbce:	6878      	ldr	r0, [r7, #4]
 800bbd0:	f7f6 fce2 	bl	8002598 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	2202      	movs	r2, #2
 800bbd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	681a      	ldr	r2, [r3, #0]
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	3304      	adds	r3, #4
 800bbe4:	4619      	mov	r1, r3
 800bbe6:	4610      	mov	r0, r2
 800bbe8:	f000 fea4 	bl	800c934 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	2201      	movs	r2, #1
 800bbf0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	2201      	movs	r2, #1
 800bbf8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	2201      	movs	r2, #1
 800bc00:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	2201      	movs	r2, #1
 800bc08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	2201      	movs	r2, #1
 800bc10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	2201      	movs	r2, #1
 800bc18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	2201      	movs	r2, #1
 800bc20:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	2201      	movs	r2, #1
 800bc28:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	2201      	movs	r2, #1
 800bc30:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	2201      	movs	r2, #1
 800bc38:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	2201      	movs	r2, #1
 800bc40:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	2201      	movs	r2, #1
 800bc48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800bc4c:	2300      	movs	r3, #0
}
 800bc4e:	4618      	mov	r0, r3
 800bc50:	3708      	adds	r7, #8
 800bc52:	46bd      	mov	sp, r7
 800bc54:	bd80      	pop	{r7, pc}
	...

0800bc58 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800bc58:	b480      	push	{r7}
 800bc5a:	b085      	sub	sp, #20
 800bc5c:	af00      	add	r7, sp, #0
 800bc5e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800bc66:	b2db      	uxtb	r3, r3
 800bc68:	2b01      	cmp	r3, #1
 800bc6a:	d001      	beq.n	800bc70 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800bc6c:	2301      	movs	r3, #1
 800bc6e:	e054      	b.n	800bd1a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	2202      	movs	r2, #2
 800bc74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	68da      	ldr	r2, [r3, #12]
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	f042 0201 	orr.w	r2, r2, #1
 800bc86:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	4a26      	ldr	r2, [pc, #152]	@ (800bd28 <HAL_TIM_Base_Start_IT+0xd0>)
 800bc8e:	4293      	cmp	r3, r2
 800bc90:	d022      	beq.n	800bcd8 <HAL_TIM_Base_Start_IT+0x80>
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bc9a:	d01d      	beq.n	800bcd8 <HAL_TIM_Base_Start_IT+0x80>
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	4a22      	ldr	r2, [pc, #136]	@ (800bd2c <HAL_TIM_Base_Start_IT+0xd4>)
 800bca2:	4293      	cmp	r3, r2
 800bca4:	d018      	beq.n	800bcd8 <HAL_TIM_Base_Start_IT+0x80>
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	4a21      	ldr	r2, [pc, #132]	@ (800bd30 <HAL_TIM_Base_Start_IT+0xd8>)
 800bcac:	4293      	cmp	r3, r2
 800bcae:	d013      	beq.n	800bcd8 <HAL_TIM_Base_Start_IT+0x80>
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	4a1f      	ldr	r2, [pc, #124]	@ (800bd34 <HAL_TIM_Base_Start_IT+0xdc>)
 800bcb6:	4293      	cmp	r3, r2
 800bcb8:	d00e      	beq.n	800bcd8 <HAL_TIM_Base_Start_IT+0x80>
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	4a1e      	ldr	r2, [pc, #120]	@ (800bd38 <HAL_TIM_Base_Start_IT+0xe0>)
 800bcc0:	4293      	cmp	r3, r2
 800bcc2:	d009      	beq.n	800bcd8 <HAL_TIM_Base_Start_IT+0x80>
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	4a1c      	ldr	r2, [pc, #112]	@ (800bd3c <HAL_TIM_Base_Start_IT+0xe4>)
 800bcca:	4293      	cmp	r3, r2
 800bccc:	d004      	beq.n	800bcd8 <HAL_TIM_Base_Start_IT+0x80>
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	4a1b      	ldr	r2, [pc, #108]	@ (800bd40 <HAL_TIM_Base_Start_IT+0xe8>)
 800bcd4:	4293      	cmp	r3, r2
 800bcd6:	d115      	bne.n	800bd04 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	689a      	ldr	r2, [r3, #8]
 800bcde:	4b19      	ldr	r3, [pc, #100]	@ (800bd44 <HAL_TIM_Base_Start_IT+0xec>)
 800bce0:	4013      	ands	r3, r2
 800bce2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	2b06      	cmp	r3, #6
 800bce8:	d015      	beq.n	800bd16 <HAL_TIM_Base_Start_IT+0xbe>
 800bcea:	68fb      	ldr	r3, [r7, #12]
 800bcec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bcf0:	d011      	beq.n	800bd16 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	681b      	ldr	r3, [r3, #0]
 800bcf6:	681a      	ldr	r2, [r3, #0]
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	681b      	ldr	r3, [r3, #0]
 800bcfc:	f042 0201 	orr.w	r2, r2, #1
 800bd00:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bd02:	e008      	b.n	800bd16 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	681a      	ldr	r2, [r3, #0]
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	f042 0201 	orr.w	r2, r2, #1
 800bd12:	601a      	str	r2, [r3, #0]
 800bd14:	e000      	b.n	800bd18 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bd16:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800bd18:	2300      	movs	r3, #0
}
 800bd1a:	4618      	mov	r0, r3
 800bd1c:	3714      	adds	r7, #20
 800bd1e:	46bd      	mov	sp, r7
 800bd20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd24:	4770      	bx	lr
 800bd26:	bf00      	nop
 800bd28:	40010000 	.word	0x40010000
 800bd2c:	40000400 	.word	0x40000400
 800bd30:	40000800 	.word	0x40000800
 800bd34:	40000c00 	.word	0x40000c00
 800bd38:	40010400 	.word	0x40010400
 800bd3c:	40001800 	.word	0x40001800
 800bd40:	40014000 	.word	0x40014000
 800bd44:	00010007 	.word	0x00010007

0800bd48 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800bd48:	b580      	push	{r7, lr}
 800bd4a:	b082      	sub	sp, #8
 800bd4c:	af00      	add	r7, sp, #0
 800bd4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d101      	bne.n	800bd5a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800bd56:	2301      	movs	r3, #1
 800bd58:	e049      	b.n	800bdee <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800bd60:	b2db      	uxtb	r3, r3
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	d106      	bne.n	800bd74 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	2200      	movs	r2, #0
 800bd6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800bd6e:	6878      	ldr	r0, [r7, #4]
 800bd70:	f7f6 fae6 	bl	8002340 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	2202      	movs	r2, #2
 800bd78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	681a      	ldr	r2, [r3, #0]
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	3304      	adds	r3, #4
 800bd84:	4619      	mov	r1, r3
 800bd86:	4610      	mov	r0, r2
 800bd88:	f000 fdd4 	bl	800c934 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	2201      	movs	r2, #1
 800bd90:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	2201      	movs	r2, #1
 800bd98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	2201      	movs	r2, #1
 800bda0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	2201      	movs	r2, #1
 800bda8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	2201      	movs	r2, #1
 800bdb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	2201      	movs	r2, #1
 800bdb8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	2201      	movs	r2, #1
 800bdc0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	2201      	movs	r2, #1
 800bdc8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	2201      	movs	r2, #1
 800bdd0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	2201      	movs	r2, #1
 800bdd8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	2201      	movs	r2, #1
 800bde0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	2201      	movs	r2, #1
 800bde8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800bdec:	2300      	movs	r3, #0
}
 800bdee:	4618      	mov	r0, r3
 800bdf0:	3708      	adds	r7, #8
 800bdf2:	46bd      	mov	sp, r7
 800bdf4:	bd80      	pop	{r7, pc}
	...

0800bdf8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800bdf8:	b580      	push	{r7, lr}
 800bdfa:	b084      	sub	sp, #16
 800bdfc:	af00      	add	r7, sp, #0
 800bdfe:	6078      	str	r0, [r7, #4]
 800be00:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800be02:	683b      	ldr	r3, [r7, #0]
 800be04:	2b00      	cmp	r3, #0
 800be06:	d109      	bne.n	800be1c <HAL_TIM_PWM_Start+0x24>
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800be0e:	b2db      	uxtb	r3, r3
 800be10:	2b01      	cmp	r3, #1
 800be12:	bf14      	ite	ne
 800be14:	2301      	movne	r3, #1
 800be16:	2300      	moveq	r3, #0
 800be18:	b2db      	uxtb	r3, r3
 800be1a:	e03c      	b.n	800be96 <HAL_TIM_PWM_Start+0x9e>
 800be1c:	683b      	ldr	r3, [r7, #0]
 800be1e:	2b04      	cmp	r3, #4
 800be20:	d109      	bne.n	800be36 <HAL_TIM_PWM_Start+0x3e>
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800be28:	b2db      	uxtb	r3, r3
 800be2a:	2b01      	cmp	r3, #1
 800be2c:	bf14      	ite	ne
 800be2e:	2301      	movne	r3, #1
 800be30:	2300      	moveq	r3, #0
 800be32:	b2db      	uxtb	r3, r3
 800be34:	e02f      	b.n	800be96 <HAL_TIM_PWM_Start+0x9e>
 800be36:	683b      	ldr	r3, [r7, #0]
 800be38:	2b08      	cmp	r3, #8
 800be3a:	d109      	bne.n	800be50 <HAL_TIM_PWM_Start+0x58>
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800be42:	b2db      	uxtb	r3, r3
 800be44:	2b01      	cmp	r3, #1
 800be46:	bf14      	ite	ne
 800be48:	2301      	movne	r3, #1
 800be4a:	2300      	moveq	r3, #0
 800be4c:	b2db      	uxtb	r3, r3
 800be4e:	e022      	b.n	800be96 <HAL_TIM_PWM_Start+0x9e>
 800be50:	683b      	ldr	r3, [r7, #0]
 800be52:	2b0c      	cmp	r3, #12
 800be54:	d109      	bne.n	800be6a <HAL_TIM_PWM_Start+0x72>
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800be5c:	b2db      	uxtb	r3, r3
 800be5e:	2b01      	cmp	r3, #1
 800be60:	bf14      	ite	ne
 800be62:	2301      	movne	r3, #1
 800be64:	2300      	moveq	r3, #0
 800be66:	b2db      	uxtb	r3, r3
 800be68:	e015      	b.n	800be96 <HAL_TIM_PWM_Start+0x9e>
 800be6a:	683b      	ldr	r3, [r7, #0]
 800be6c:	2b10      	cmp	r3, #16
 800be6e:	d109      	bne.n	800be84 <HAL_TIM_PWM_Start+0x8c>
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800be76:	b2db      	uxtb	r3, r3
 800be78:	2b01      	cmp	r3, #1
 800be7a:	bf14      	ite	ne
 800be7c:	2301      	movne	r3, #1
 800be7e:	2300      	moveq	r3, #0
 800be80:	b2db      	uxtb	r3, r3
 800be82:	e008      	b.n	800be96 <HAL_TIM_PWM_Start+0x9e>
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800be8a:	b2db      	uxtb	r3, r3
 800be8c:	2b01      	cmp	r3, #1
 800be8e:	bf14      	ite	ne
 800be90:	2301      	movne	r3, #1
 800be92:	2300      	moveq	r3, #0
 800be94:	b2db      	uxtb	r3, r3
 800be96:	2b00      	cmp	r3, #0
 800be98:	d001      	beq.n	800be9e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800be9a:	2301      	movs	r3, #1
 800be9c:	e0a1      	b.n	800bfe2 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800be9e:	683b      	ldr	r3, [r7, #0]
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d104      	bne.n	800beae <HAL_TIM_PWM_Start+0xb6>
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	2202      	movs	r2, #2
 800bea8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800beac:	e023      	b.n	800bef6 <HAL_TIM_PWM_Start+0xfe>
 800beae:	683b      	ldr	r3, [r7, #0]
 800beb0:	2b04      	cmp	r3, #4
 800beb2:	d104      	bne.n	800bebe <HAL_TIM_PWM_Start+0xc6>
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	2202      	movs	r2, #2
 800beb8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800bebc:	e01b      	b.n	800bef6 <HAL_TIM_PWM_Start+0xfe>
 800bebe:	683b      	ldr	r3, [r7, #0]
 800bec0:	2b08      	cmp	r3, #8
 800bec2:	d104      	bne.n	800bece <HAL_TIM_PWM_Start+0xd6>
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	2202      	movs	r2, #2
 800bec8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800becc:	e013      	b.n	800bef6 <HAL_TIM_PWM_Start+0xfe>
 800bece:	683b      	ldr	r3, [r7, #0]
 800bed0:	2b0c      	cmp	r3, #12
 800bed2:	d104      	bne.n	800bede <HAL_TIM_PWM_Start+0xe6>
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	2202      	movs	r2, #2
 800bed8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800bedc:	e00b      	b.n	800bef6 <HAL_TIM_PWM_Start+0xfe>
 800bede:	683b      	ldr	r3, [r7, #0]
 800bee0:	2b10      	cmp	r3, #16
 800bee2:	d104      	bne.n	800beee <HAL_TIM_PWM_Start+0xf6>
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	2202      	movs	r2, #2
 800bee8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800beec:	e003      	b.n	800bef6 <HAL_TIM_PWM_Start+0xfe>
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	2202      	movs	r2, #2
 800bef2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	2201      	movs	r2, #1
 800befc:	6839      	ldr	r1, [r7, #0]
 800befe:	4618      	mov	r0, r3
 800bf00:	f001 f932 	bl	800d168 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	4a38      	ldr	r2, [pc, #224]	@ (800bfec <HAL_TIM_PWM_Start+0x1f4>)
 800bf0a:	4293      	cmp	r3, r2
 800bf0c:	d013      	beq.n	800bf36 <HAL_TIM_PWM_Start+0x13e>
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	4a37      	ldr	r2, [pc, #220]	@ (800bff0 <HAL_TIM_PWM_Start+0x1f8>)
 800bf14:	4293      	cmp	r3, r2
 800bf16:	d00e      	beq.n	800bf36 <HAL_TIM_PWM_Start+0x13e>
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	4a35      	ldr	r2, [pc, #212]	@ (800bff4 <HAL_TIM_PWM_Start+0x1fc>)
 800bf1e:	4293      	cmp	r3, r2
 800bf20:	d009      	beq.n	800bf36 <HAL_TIM_PWM_Start+0x13e>
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	681b      	ldr	r3, [r3, #0]
 800bf26:	4a34      	ldr	r2, [pc, #208]	@ (800bff8 <HAL_TIM_PWM_Start+0x200>)
 800bf28:	4293      	cmp	r3, r2
 800bf2a:	d004      	beq.n	800bf36 <HAL_TIM_PWM_Start+0x13e>
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	4a32      	ldr	r2, [pc, #200]	@ (800bffc <HAL_TIM_PWM_Start+0x204>)
 800bf32:	4293      	cmp	r3, r2
 800bf34:	d101      	bne.n	800bf3a <HAL_TIM_PWM_Start+0x142>
 800bf36:	2301      	movs	r3, #1
 800bf38:	e000      	b.n	800bf3c <HAL_TIM_PWM_Start+0x144>
 800bf3a:	2300      	movs	r3, #0
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	d007      	beq.n	800bf50 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800bf4e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	4a25      	ldr	r2, [pc, #148]	@ (800bfec <HAL_TIM_PWM_Start+0x1f4>)
 800bf56:	4293      	cmp	r3, r2
 800bf58:	d022      	beq.n	800bfa0 <HAL_TIM_PWM_Start+0x1a8>
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bf62:	d01d      	beq.n	800bfa0 <HAL_TIM_PWM_Start+0x1a8>
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	4a25      	ldr	r2, [pc, #148]	@ (800c000 <HAL_TIM_PWM_Start+0x208>)
 800bf6a:	4293      	cmp	r3, r2
 800bf6c:	d018      	beq.n	800bfa0 <HAL_TIM_PWM_Start+0x1a8>
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	4a24      	ldr	r2, [pc, #144]	@ (800c004 <HAL_TIM_PWM_Start+0x20c>)
 800bf74:	4293      	cmp	r3, r2
 800bf76:	d013      	beq.n	800bfa0 <HAL_TIM_PWM_Start+0x1a8>
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	4a22      	ldr	r2, [pc, #136]	@ (800c008 <HAL_TIM_PWM_Start+0x210>)
 800bf7e:	4293      	cmp	r3, r2
 800bf80:	d00e      	beq.n	800bfa0 <HAL_TIM_PWM_Start+0x1a8>
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	4a1a      	ldr	r2, [pc, #104]	@ (800bff0 <HAL_TIM_PWM_Start+0x1f8>)
 800bf88:	4293      	cmp	r3, r2
 800bf8a:	d009      	beq.n	800bfa0 <HAL_TIM_PWM_Start+0x1a8>
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	4a1e      	ldr	r2, [pc, #120]	@ (800c00c <HAL_TIM_PWM_Start+0x214>)
 800bf92:	4293      	cmp	r3, r2
 800bf94:	d004      	beq.n	800bfa0 <HAL_TIM_PWM_Start+0x1a8>
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	4a16      	ldr	r2, [pc, #88]	@ (800bff4 <HAL_TIM_PWM_Start+0x1fc>)
 800bf9c:	4293      	cmp	r3, r2
 800bf9e:	d115      	bne.n	800bfcc <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	689a      	ldr	r2, [r3, #8]
 800bfa6:	4b1a      	ldr	r3, [pc, #104]	@ (800c010 <HAL_TIM_PWM_Start+0x218>)
 800bfa8:	4013      	ands	r3, r2
 800bfaa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	2b06      	cmp	r3, #6
 800bfb0:	d015      	beq.n	800bfde <HAL_TIM_PWM_Start+0x1e6>
 800bfb2:	68fb      	ldr	r3, [r7, #12]
 800bfb4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bfb8:	d011      	beq.n	800bfde <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	681a      	ldr	r2, [r3, #0]
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	681b      	ldr	r3, [r3, #0]
 800bfc4:	f042 0201 	orr.w	r2, r2, #1
 800bfc8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bfca:	e008      	b.n	800bfde <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	681a      	ldr	r2, [r3, #0]
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	f042 0201 	orr.w	r2, r2, #1
 800bfda:	601a      	str	r2, [r3, #0]
 800bfdc:	e000      	b.n	800bfe0 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bfde:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800bfe0:	2300      	movs	r3, #0
}
 800bfe2:	4618      	mov	r0, r3
 800bfe4:	3710      	adds	r7, #16
 800bfe6:	46bd      	mov	sp, r7
 800bfe8:	bd80      	pop	{r7, pc}
 800bfea:	bf00      	nop
 800bfec:	40010000 	.word	0x40010000
 800bff0:	40010400 	.word	0x40010400
 800bff4:	40014000 	.word	0x40014000
 800bff8:	40014400 	.word	0x40014400
 800bffc:	40014800 	.word	0x40014800
 800c000:	40000400 	.word	0x40000400
 800c004:	40000800 	.word	0x40000800
 800c008:	40000c00 	.word	0x40000c00
 800c00c:	40001800 	.word	0x40001800
 800c010:	00010007 	.word	0x00010007

0800c014 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800c014:	b580      	push	{r7, lr}
 800c016:	b086      	sub	sp, #24
 800c018:	af00      	add	r7, sp, #0
 800c01a:	6078      	str	r0, [r7, #4]
 800c01c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	2b00      	cmp	r3, #0
 800c022:	d101      	bne.n	800c028 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800c024:	2301      	movs	r3, #1
 800c026:	e08f      	b.n	800c148 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c02e:	b2db      	uxtb	r3, r3
 800c030:	2b00      	cmp	r3, #0
 800c032:	d106      	bne.n	800c042 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	2200      	movs	r2, #0
 800c038:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800c03c:	6878      	ldr	r0, [r7, #4]
 800c03e:	f7f6 f883 	bl	8002148 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	2202      	movs	r2, #2
 800c046:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	6899      	ldr	r1, [r3, #8]
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	681a      	ldr	r2, [r3, #0]
 800c054:	4b3e      	ldr	r3, [pc, #248]	@ (800c150 <HAL_TIM_Encoder_Init+0x13c>)
 800c056:	400b      	ands	r3, r1
 800c058:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	681a      	ldr	r2, [r3, #0]
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	3304      	adds	r3, #4
 800c062:	4619      	mov	r1, r3
 800c064:	4610      	mov	r0, r2
 800c066:	f000 fc65 	bl	800c934 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	689b      	ldr	r3, [r3, #8]
 800c070:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	699b      	ldr	r3, [r3, #24]
 800c078:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	6a1b      	ldr	r3, [r3, #32]
 800c080:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800c082:	683b      	ldr	r3, [r7, #0]
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	697a      	ldr	r2, [r7, #20]
 800c088:	4313      	orrs	r3, r2
 800c08a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800c08c:	693a      	ldr	r2, [r7, #16]
 800c08e:	4b31      	ldr	r3, [pc, #196]	@ (800c154 <HAL_TIM_Encoder_Init+0x140>)
 800c090:	4013      	ands	r3, r2
 800c092:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800c094:	683b      	ldr	r3, [r7, #0]
 800c096:	689a      	ldr	r2, [r3, #8]
 800c098:	683b      	ldr	r3, [r7, #0]
 800c09a:	699b      	ldr	r3, [r3, #24]
 800c09c:	021b      	lsls	r3, r3, #8
 800c09e:	4313      	orrs	r3, r2
 800c0a0:	693a      	ldr	r2, [r7, #16]
 800c0a2:	4313      	orrs	r3, r2
 800c0a4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800c0a6:	693a      	ldr	r2, [r7, #16]
 800c0a8:	4b2b      	ldr	r3, [pc, #172]	@ (800c158 <HAL_TIM_Encoder_Init+0x144>)
 800c0aa:	4013      	ands	r3, r2
 800c0ac:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800c0ae:	693a      	ldr	r2, [r7, #16]
 800c0b0:	4b2a      	ldr	r3, [pc, #168]	@ (800c15c <HAL_TIM_Encoder_Init+0x148>)
 800c0b2:	4013      	ands	r3, r2
 800c0b4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800c0b6:	683b      	ldr	r3, [r7, #0]
 800c0b8:	68da      	ldr	r2, [r3, #12]
 800c0ba:	683b      	ldr	r3, [r7, #0]
 800c0bc:	69db      	ldr	r3, [r3, #28]
 800c0be:	021b      	lsls	r3, r3, #8
 800c0c0:	4313      	orrs	r3, r2
 800c0c2:	693a      	ldr	r2, [r7, #16]
 800c0c4:	4313      	orrs	r3, r2
 800c0c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800c0c8:	683b      	ldr	r3, [r7, #0]
 800c0ca:	691b      	ldr	r3, [r3, #16]
 800c0cc:	011a      	lsls	r2, r3, #4
 800c0ce:	683b      	ldr	r3, [r7, #0]
 800c0d0:	6a1b      	ldr	r3, [r3, #32]
 800c0d2:	031b      	lsls	r3, r3, #12
 800c0d4:	4313      	orrs	r3, r2
 800c0d6:	693a      	ldr	r2, [r7, #16]
 800c0d8:	4313      	orrs	r3, r2
 800c0da:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800c0dc:	68fb      	ldr	r3, [r7, #12]
 800c0de:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800c0e2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800c0e4:	68fb      	ldr	r3, [r7, #12]
 800c0e6:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800c0ea:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800c0ec:	683b      	ldr	r3, [r7, #0]
 800c0ee:	685a      	ldr	r2, [r3, #4]
 800c0f0:	683b      	ldr	r3, [r7, #0]
 800c0f2:	695b      	ldr	r3, [r3, #20]
 800c0f4:	011b      	lsls	r3, r3, #4
 800c0f6:	4313      	orrs	r3, r2
 800c0f8:	68fa      	ldr	r2, [r7, #12]
 800c0fa:	4313      	orrs	r3, r2
 800c0fc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	697a      	ldr	r2, [r7, #20]
 800c104:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	693a      	ldr	r2, [r7, #16]
 800c10c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	681b      	ldr	r3, [r3, #0]
 800c112:	68fa      	ldr	r2, [r7, #12]
 800c114:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	2201      	movs	r2, #1
 800c11a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	2201      	movs	r2, #1
 800c122:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	2201      	movs	r2, #1
 800c12a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	2201      	movs	r2, #1
 800c132:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	2201      	movs	r2, #1
 800c13a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	2201      	movs	r2, #1
 800c142:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800c146:	2300      	movs	r3, #0
}
 800c148:	4618      	mov	r0, r3
 800c14a:	3718      	adds	r7, #24
 800c14c:	46bd      	mov	sp, r7
 800c14e:	bd80      	pop	{r7, pc}
 800c150:	fffebff8 	.word	0xfffebff8
 800c154:	fffffcfc 	.word	0xfffffcfc
 800c158:	fffff3f3 	.word	0xfffff3f3
 800c15c:	ffff0f0f 	.word	0xffff0f0f

0800c160 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c160:	b580      	push	{r7, lr}
 800c162:	b084      	sub	sp, #16
 800c164:	af00      	add	r7, sp, #0
 800c166:	6078      	str	r0, [r7, #4]
 800c168:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800c170:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800c178:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c180:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c188:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800c18a:	683b      	ldr	r3, [r7, #0]
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d110      	bne.n	800c1b2 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800c190:	7bfb      	ldrb	r3, [r7, #15]
 800c192:	2b01      	cmp	r3, #1
 800c194:	d102      	bne.n	800c19c <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800c196:	7b7b      	ldrb	r3, [r7, #13]
 800c198:	2b01      	cmp	r3, #1
 800c19a:	d001      	beq.n	800c1a0 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 800c19c:	2301      	movs	r3, #1
 800c19e:	e089      	b.n	800c2b4 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	2202      	movs	r2, #2
 800c1a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	2202      	movs	r2, #2
 800c1ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c1b0:	e031      	b.n	800c216 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800c1b2:	683b      	ldr	r3, [r7, #0]
 800c1b4:	2b04      	cmp	r3, #4
 800c1b6:	d110      	bne.n	800c1da <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800c1b8:	7bbb      	ldrb	r3, [r7, #14]
 800c1ba:	2b01      	cmp	r3, #1
 800c1bc:	d102      	bne.n	800c1c4 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800c1be:	7b3b      	ldrb	r3, [r7, #12]
 800c1c0:	2b01      	cmp	r3, #1
 800c1c2:	d001      	beq.n	800c1c8 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 800c1c4:	2301      	movs	r3, #1
 800c1c6:	e075      	b.n	800c2b4 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	2202      	movs	r2, #2
 800c1cc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	2202      	movs	r2, #2
 800c1d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c1d8:	e01d      	b.n	800c216 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800c1da:	7bfb      	ldrb	r3, [r7, #15]
 800c1dc:	2b01      	cmp	r3, #1
 800c1de:	d108      	bne.n	800c1f2 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800c1e0:	7bbb      	ldrb	r3, [r7, #14]
 800c1e2:	2b01      	cmp	r3, #1
 800c1e4:	d105      	bne.n	800c1f2 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800c1e6:	7b7b      	ldrb	r3, [r7, #13]
 800c1e8:	2b01      	cmp	r3, #1
 800c1ea:	d102      	bne.n	800c1f2 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800c1ec:	7b3b      	ldrb	r3, [r7, #12]
 800c1ee:	2b01      	cmp	r3, #1
 800c1f0:	d001      	beq.n	800c1f6 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 800c1f2:	2301      	movs	r3, #1
 800c1f4:	e05e      	b.n	800c2b4 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	2202      	movs	r2, #2
 800c1fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	2202      	movs	r2, #2
 800c202:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	2202      	movs	r2, #2
 800c20a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	2202      	movs	r2, #2
 800c212:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 800c216:	683b      	ldr	r3, [r7, #0]
 800c218:	2b00      	cmp	r3, #0
 800c21a:	d003      	beq.n	800c224 <HAL_TIM_Encoder_Start_IT+0xc4>
 800c21c:	683b      	ldr	r3, [r7, #0]
 800c21e:	2b04      	cmp	r3, #4
 800c220:	d010      	beq.n	800c244 <HAL_TIM_Encoder_Start_IT+0xe4>
 800c222:	e01f      	b.n	800c264 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	2201      	movs	r2, #1
 800c22a:	2100      	movs	r1, #0
 800c22c:	4618      	mov	r0, r3
 800c22e:	f000 ff9b 	bl	800d168 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	681b      	ldr	r3, [r3, #0]
 800c236:	68da      	ldr	r2, [r3, #12]
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	f042 0202 	orr.w	r2, r2, #2
 800c240:	60da      	str	r2, [r3, #12]
      break;
 800c242:	e02e      	b.n	800c2a2 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	681b      	ldr	r3, [r3, #0]
 800c248:	2201      	movs	r2, #1
 800c24a:	2104      	movs	r1, #4
 800c24c:	4618      	mov	r0, r3
 800c24e:	f000 ff8b 	bl	800d168 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	681b      	ldr	r3, [r3, #0]
 800c256:	68da      	ldr	r2, [r3, #12]
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	f042 0204 	orr.w	r2, r2, #4
 800c260:	60da      	str	r2, [r3, #12]
      break;
 800c262:	e01e      	b.n	800c2a2 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	681b      	ldr	r3, [r3, #0]
 800c268:	2201      	movs	r2, #1
 800c26a:	2100      	movs	r1, #0
 800c26c:	4618      	mov	r0, r3
 800c26e:	f000 ff7b 	bl	800d168 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	2201      	movs	r2, #1
 800c278:	2104      	movs	r1, #4
 800c27a:	4618      	mov	r0, r3
 800c27c:	f000 ff74 	bl	800d168 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	68da      	ldr	r2, [r3, #12]
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	681b      	ldr	r3, [r3, #0]
 800c28a:	f042 0202 	orr.w	r2, r2, #2
 800c28e:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	681b      	ldr	r3, [r3, #0]
 800c294:	68da      	ldr	r2, [r3, #12]
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	681b      	ldr	r3, [r3, #0]
 800c29a:	f042 0204 	orr.w	r2, r2, #4
 800c29e:	60da      	str	r2, [r3, #12]
      break;
 800c2a0:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	681a      	ldr	r2, [r3, #0]
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	f042 0201 	orr.w	r2, r2, #1
 800c2b0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800c2b2:	2300      	movs	r3, #0
}
 800c2b4:	4618      	mov	r0, r3
 800c2b6:	3710      	adds	r7, #16
 800c2b8:	46bd      	mov	sp, r7
 800c2ba:	bd80      	pop	{r7, pc}

0800c2bc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c2bc:	b580      	push	{r7, lr}
 800c2be:	b084      	sub	sp, #16
 800c2c0:	af00      	add	r7, sp, #0
 800c2c2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	68db      	ldr	r3, [r3, #12]
 800c2ca:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	691b      	ldr	r3, [r3, #16]
 800c2d2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800c2d4:	68bb      	ldr	r3, [r7, #8]
 800c2d6:	f003 0302 	and.w	r3, r3, #2
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	d020      	beq.n	800c320 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800c2de:	68fb      	ldr	r3, [r7, #12]
 800c2e0:	f003 0302 	and.w	r3, r3, #2
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	d01b      	beq.n	800c320 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	f06f 0202 	mvn.w	r2, #2
 800c2f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	2201      	movs	r2, #1
 800c2f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	681b      	ldr	r3, [r3, #0]
 800c2fc:	699b      	ldr	r3, [r3, #24]
 800c2fe:	f003 0303 	and.w	r3, r3, #3
 800c302:	2b00      	cmp	r3, #0
 800c304:	d003      	beq.n	800c30e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c306:	6878      	ldr	r0, [r7, #4]
 800c308:	f7f4 fdd8 	bl	8000ebc <HAL_TIM_IC_CaptureCallback>
 800c30c:	e005      	b.n	800c31a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c30e:	6878      	ldr	r0, [r7, #4]
 800c310:	f000 faf2 	bl	800c8f8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c314:	6878      	ldr	r0, [r7, #4]
 800c316:	f000 faf9 	bl	800c90c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	2200      	movs	r2, #0
 800c31e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800c320:	68bb      	ldr	r3, [r7, #8]
 800c322:	f003 0304 	and.w	r3, r3, #4
 800c326:	2b00      	cmp	r3, #0
 800c328:	d020      	beq.n	800c36c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800c32a:	68fb      	ldr	r3, [r7, #12]
 800c32c:	f003 0304 	and.w	r3, r3, #4
 800c330:	2b00      	cmp	r3, #0
 800c332:	d01b      	beq.n	800c36c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	f06f 0204 	mvn.w	r2, #4
 800c33c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	2202      	movs	r2, #2
 800c342:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	699b      	ldr	r3, [r3, #24]
 800c34a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d003      	beq.n	800c35a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c352:	6878      	ldr	r0, [r7, #4]
 800c354:	f7f4 fdb2 	bl	8000ebc <HAL_TIM_IC_CaptureCallback>
 800c358:	e005      	b.n	800c366 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c35a:	6878      	ldr	r0, [r7, #4]
 800c35c:	f000 facc 	bl	800c8f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c360:	6878      	ldr	r0, [r7, #4]
 800c362:	f000 fad3 	bl	800c90c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	2200      	movs	r2, #0
 800c36a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800c36c:	68bb      	ldr	r3, [r7, #8]
 800c36e:	f003 0308 	and.w	r3, r3, #8
 800c372:	2b00      	cmp	r3, #0
 800c374:	d020      	beq.n	800c3b8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800c376:	68fb      	ldr	r3, [r7, #12]
 800c378:	f003 0308 	and.w	r3, r3, #8
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d01b      	beq.n	800c3b8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	681b      	ldr	r3, [r3, #0]
 800c384:	f06f 0208 	mvn.w	r2, #8
 800c388:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	2204      	movs	r2, #4
 800c38e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	681b      	ldr	r3, [r3, #0]
 800c394:	69db      	ldr	r3, [r3, #28]
 800c396:	f003 0303 	and.w	r3, r3, #3
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d003      	beq.n	800c3a6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c39e:	6878      	ldr	r0, [r7, #4]
 800c3a0:	f7f4 fd8c 	bl	8000ebc <HAL_TIM_IC_CaptureCallback>
 800c3a4:	e005      	b.n	800c3b2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c3a6:	6878      	ldr	r0, [r7, #4]
 800c3a8:	f000 faa6 	bl	800c8f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c3ac:	6878      	ldr	r0, [r7, #4]
 800c3ae:	f000 faad 	bl	800c90c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	2200      	movs	r2, #0
 800c3b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800c3b8:	68bb      	ldr	r3, [r7, #8]
 800c3ba:	f003 0310 	and.w	r3, r3, #16
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d020      	beq.n	800c404 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800c3c2:	68fb      	ldr	r3, [r7, #12]
 800c3c4:	f003 0310 	and.w	r3, r3, #16
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	d01b      	beq.n	800c404 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	f06f 0210 	mvn.w	r2, #16
 800c3d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	2208      	movs	r2, #8
 800c3da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	69db      	ldr	r3, [r3, #28]
 800c3e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d003      	beq.n	800c3f2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c3ea:	6878      	ldr	r0, [r7, #4]
 800c3ec:	f7f4 fd66 	bl	8000ebc <HAL_TIM_IC_CaptureCallback>
 800c3f0:	e005      	b.n	800c3fe <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c3f2:	6878      	ldr	r0, [r7, #4]
 800c3f4:	f000 fa80 	bl	800c8f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c3f8:	6878      	ldr	r0, [r7, #4]
 800c3fa:	f000 fa87 	bl	800c90c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	2200      	movs	r2, #0
 800c402:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800c404:	68bb      	ldr	r3, [r7, #8]
 800c406:	f003 0301 	and.w	r3, r3, #1
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	d00c      	beq.n	800c428 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800c40e:	68fb      	ldr	r3, [r7, #12]
 800c410:	f003 0301 	and.w	r3, r3, #1
 800c414:	2b00      	cmp	r3, #0
 800c416:	d007      	beq.n	800c428 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	681b      	ldr	r3, [r3, #0]
 800c41c:	f06f 0201 	mvn.w	r2, #1
 800c420:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c422:	6878      	ldr	r0, [r7, #4]
 800c424:	f000 fa5e 	bl	800c8e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800c428:	68bb      	ldr	r3, [r7, #8]
 800c42a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c42e:	2b00      	cmp	r3, #0
 800c430:	d104      	bne.n	800c43c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800c432:	68bb      	ldr	r3, [r7, #8]
 800c434:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800c438:	2b00      	cmp	r3, #0
 800c43a:	d00c      	beq.n	800c456 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800c43c:	68fb      	ldr	r3, [r7, #12]
 800c43e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c442:	2b00      	cmp	r3, #0
 800c444:	d007      	beq.n	800c456 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	681b      	ldr	r3, [r3, #0]
 800c44a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800c44e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c450:	6878      	ldr	r0, [r7, #4]
 800c452:	f000 ff47 	bl	800d2e4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800c456:	68bb      	ldr	r3, [r7, #8]
 800c458:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	d00c      	beq.n	800c47a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800c460:	68fb      	ldr	r3, [r7, #12]
 800c462:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c466:	2b00      	cmp	r3, #0
 800c468:	d007      	beq.n	800c47a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800c472:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800c474:	6878      	ldr	r0, [r7, #4]
 800c476:	f000 ff3f 	bl	800d2f8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800c47a:	68bb      	ldr	r3, [r7, #8]
 800c47c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c480:	2b00      	cmp	r3, #0
 800c482:	d00c      	beq.n	800c49e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800c484:	68fb      	ldr	r3, [r7, #12]
 800c486:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	d007      	beq.n	800c49e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	681b      	ldr	r3, [r3, #0]
 800c492:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800c496:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c498:	6878      	ldr	r0, [r7, #4]
 800c49a:	f000 fa41 	bl	800c920 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800c49e:	68bb      	ldr	r3, [r7, #8]
 800c4a0:	f003 0320 	and.w	r3, r3, #32
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d00c      	beq.n	800c4c2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800c4a8:	68fb      	ldr	r3, [r7, #12]
 800c4aa:	f003 0320 	and.w	r3, r3, #32
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d007      	beq.n	800c4c2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	681b      	ldr	r3, [r3, #0]
 800c4b6:	f06f 0220 	mvn.w	r2, #32
 800c4ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c4bc:	6878      	ldr	r0, [r7, #4]
 800c4be:	f000 ff07 	bl	800d2d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c4c2:	bf00      	nop
 800c4c4:	3710      	adds	r7, #16
 800c4c6:	46bd      	mov	sp, r7
 800c4c8:	bd80      	pop	{r7, pc}
	...

0800c4cc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800c4cc:	b580      	push	{r7, lr}
 800c4ce:	b086      	sub	sp, #24
 800c4d0:	af00      	add	r7, sp, #0
 800c4d2:	60f8      	str	r0, [r7, #12]
 800c4d4:	60b9      	str	r1, [r7, #8]
 800c4d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c4d8:	2300      	movs	r3, #0
 800c4da:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c4dc:	68fb      	ldr	r3, [r7, #12]
 800c4de:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c4e2:	2b01      	cmp	r3, #1
 800c4e4:	d101      	bne.n	800c4ea <HAL_TIM_PWM_ConfigChannel+0x1e>
 800c4e6:	2302      	movs	r3, #2
 800c4e8:	e0ff      	b.n	800c6ea <HAL_TIM_PWM_ConfigChannel+0x21e>
 800c4ea:	68fb      	ldr	r3, [r7, #12]
 800c4ec:	2201      	movs	r2, #1
 800c4ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	2b14      	cmp	r3, #20
 800c4f6:	f200 80f0 	bhi.w	800c6da <HAL_TIM_PWM_ConfigChannel+0x20e>
 800c4fa:	a201      	add	r2, pc, #4	@ (adr r2, 800c500 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800c4fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c500:	0800c555 	.word	0x0800c555
 800c504:	0800c6db 	.word	0x0800c6db
 800c508:	0800c6db 	.word	0x0800c6db
 800c50c:	0800c6db 	.word	0x0800c6db
 800c510:	0800c595 	.word	0x0800c595
 800c514:	0800c6db 	.word	0x0800c6db
 800c518:	0800c6db 	.word	0x0800c6db
 800c51c:	0800c6db 	.word	0x0800c6db
 800c520:	0800c5d7 	.word	0x0800c5d7
 800c524:	0800c6db 	.word	0x0800c6db
 800c528:	0800c6db 	.word	0x0800c6db
 800c52c:	0800c6db 	.word	0x0800c6db
 800c530:	0800c617 	.word	0x0800c617
 800c534:	0800c6db 	.word	0x0800c6db
 800c538:	0800c6db 	.word	0x0800c6db
 800c53c:	0800c6db 	.word	0x0800c6db
 800c540:	0800c659 	.word	0x0800c659
 800c544:	0800c6db 	.word	0x0800c6db
 800c548:	0800c6db 	.word	0x0800c6db
 800c54c:	0800c6db 	.word	0x0800c6db
 800c550:	0800c699 	.word	0x0800c699
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c554:	68fb      	ldr	r3, [r7, #12]
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	68b9      	ldr	r1, [r7, #8]
 800c55a:	4618      	mov	r0, r3
 800c55c:	f000 fa90 	bl	800ca80 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c560:	68fb      	ldr	r3, [r7, #12]
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	699a      	ldr	r2, [r3, #24]
 800c566:	68fb      	ldr	r3, [r7, #12]
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	f042 0208 	orr.w	r2, r2, #8
 800c56e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c570:	68fb      	ldr	r3, [r7, #12]
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	699a      	ldr	r2, [r3, #24]
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	f022 0204 	bic.w	r2, r2, #4
 800c57e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c580:	68fb      	ldr	r3, [r7, #12]
 800c582:	681b      	ldr	r3, [r3, #0]
 800c584:	6999      	ldr	r1, [r3, #24]
 800c586:	68bb      	ldr	r3, [r7, #8]
 800c588:	691a      	ldr	r2, [r3, #16]
 800c58a:	68fb      	ldr	r3, [r7, #12]
 800c58c:	681b      	ldr	r3, [r3, #0]
 800c58e:	430a      	orrs	r2, r1
 800c590:	619a      	str	r2, [r3, #24]
      break;
 800c592:	e0a5      	b.n	800c6e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c594:	68fb      	ldr	r3, [r7, #12]
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	68b9      	ldr	r1, [r7, #8]
 800c59a:	4618      	mov	r0, r3
 800c59c:	f000 fb00 	bl	800cba0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c5a0:	68fb      	ldr	r3, [r7, #12]
 800c5a2:	681b      	ldr	r3, [r3, #0]
 800c5a4:	699a      	ldr	r2, [r3, #24]
 800c5a6:	68fb      	ldr	r3, [r7, #12]
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c5ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c5b0:	68fb      	ldr	r3, [r7, #12]
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	699a      	ldr	r2, [r3, #24]
 800c5b6:	68fb      	ldr	r3, [r7, #12]
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c5be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c5c0:	68fb      	ldr	r3, [r7, #12]
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	6999      	ldr	r1, [r3, #24]
 800c5c6:	68bb      	ldr	r3, [r7, #8]
 800c5c8:	691b      	ldr	r3, [r3, #16]
 800c5ca:	021a      	lsls	r2, r3, #8
 800c5cc:	68fb      	ldr	r3, [r7, #12]
 800c5ce:	681b      	ldr	r3, [r3, #0]
 800c5d0:	430a      	orrs	r2, r1
 800c5d2:	619a      	str	r2, [r3, #24]
      break;
 800c5d4:	e084      	b.n	800c6e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c5d6:	68fb      	ldr	r3, [r7, #12]
 800c5d8:	681b      	ldr	r3, [r3, #0]
 800c5da:	68b9      	ldr	r1, [r7, #8]
 800c5dc:	4618      	mov	r0, r3
 800c5de:	f000 fb69 	bl	800ccb4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c5e2:	68fb      	ldr	r3, [r7, #12]
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	69da      	ldr	r2, [r3, #28]
 800c5e8:	68fb      	ldr	r3, [r7, #12]
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	f042 0208 	orr.w	r2, r2, #8
 800c5f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c5f2:	68fb      	ldr	r3, [r7, #12]
 800c5f4:	681b      	ldr	r3, [r3, #0]
 800c5f6:	69da      	ldr	r2, [r3, #28]
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	f022 0204 	bic.w	r2, r2, #4
 800c600:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c602:	68fb      	ldr	r3, [r7, #12]
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	69d9      	ldr	r1, [r3, #28]
 800c608:	68bb      	ldr	r3, [r7, #8]
 800c60a:	691a      	ldr	r2, [r3, #16]
 800c60c:	68fb      	ldr	r3, [r7, #12]
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	430a      	orrs	r2, r1
 800c612:	61da      	str	r2, [r3, #28]
      break;
 800c614:	e064      	b.n	800c6e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c616:	68fb      	ldr	r3, [r7, #12]
 800c618:	681b      	ldr	r3, [r3, #0]
 800c61a:	68b9      	ldr	r1, [r7, #8]
 800c61c:	4618      	mov	r0, r3
 800c61e:	f000 fbd1 	bl	800cdc4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c622:	68fb      	ldr	r3, [r7, #12]
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	69da      	ldr	r2, [r3, #28]
 800c628:	68fb      	ldr	r3, [r7, #12]
 800c62a:	681b      	ldr	r3, [r3, #0]
 800c62c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c630:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c632:	68fb      	ldr	r3, [r7, #12]
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	69da      	ldr	r2, [r3, #28]
 800c638:	68fb      	ldr	r3, [r7, #12]
 800c63a:	681b      	ldr	r3, [r3, #0]
 800c63c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c640:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c642:	68fb      	ldr	r3, [r7, #12]
 800c644:	681b      	ldr	r3, [r3, #0]
 800c646:	69d9      	ldr	r1, [r3, #28]
 800c648:	68bb      	ldr	r3, [r7, #8]
 800c64a:	691b      	ldr	r3, [r3, #16]
 800c64c:	021a      	lsls	r2, r3, #8
 800c64e:	68fb      	ldr	r3, [r7, #12]
 800c650:	681b      	ldr	r3, [r3, #0]
 800c652:	430a      	orrs	r2, r1
 800c654:	61da      	str	r2, [r3, #28]
      break;
 800c656:	e043      	b.n	800c6e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800c658:	68fb      	ldr	r3, [r7, #12]
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	68b9      	ldr	r1, [r7, #8]
 800c65e:	4618      	mov	r0, r3
 800c660:	f000 fc1a 	bl	800ce98 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800c664:	68fb      	ldr	r3, [r7, #12]
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c66a:	68fb      	ldr	r3, [r7, #12]
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	f042 0208 	orr.w	r2, r2, #8
 800c672:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800c674:	68fb      	ldr	r3, [r7, #12]
 800c676:	681b      	ldr	r3, [r3, #0]
 800c678:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c67a:	68fb      	ldr	r3, [r7, #12]
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	f022 0204 	bic.w	r2, r2, #4
 800c682:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800c684:	68fb      	ldr	r3, [r7, #12]
 800c686:	681b      	ldr	r3, [r3, #0]
 800c688:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800c68a:	68bb      	ldr	r3, [r7, #8]
 800c68c:	691a      	ldr	r2, [r3, #16]
 800c68e:	68fb      	ldr	r3, [r7, #12]
 800c690:	681b      	ldr	r3, [r3, #0]
 800c692:	430a      	orrs	r2, r1
 800c694:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800c696:	e023      	b.n	800c6e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800c698:	68fb      	ldr	r3, [r7, #12]
 800c69a:	681b      	ldr	r3, [r3, #0]
 800c69c:	68b9      	ldr	r1, [r7, #8]
 800c69e:	4618      	mov	r0, r3
 800c6a0:	f000 fc5e 	bl	800cf60 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800c6a4:	68fb      	ldr	r3, [r7, #12]
 800c6a6:	681b      	ldr	r3, [r3, #0]
 800c6a8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c6aa:	68fb      	ldr	r3, [r7, #12]
 800c6ac:	681b      	ldr	r3, [r3, #0]
 800c6ae:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c6b2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800c6b4:	68fb      	ldr	r3, [r7, #12]
 800c6b6:	681b      	ldr	r3, [r3, #0]
 800c6b8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c6ba:	68fb      	ldr	r3, [r7, #12]
 800c6bc:	681b      	ldr	r3, [r3, #0]
 800c6be:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c6c2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800c6c4:	68fb      	ldr	r3, [r7, #12]
 800c6c6:	681b      	ldr	r3, [r3, #0]
 800c6c8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800c6ca:	68bb      	ldr	r3, [r7, #8]
 800c6cc:	691b      	ldr	r3, [r3, #16]
 800c6ce:	021a      	lsls	r2, r3, #8
 800c6d0:	68fb      	ldr	r3, [r7, #12]
 800c6d2:	681b      	ldr	r3, [r3, #0]
 800c6d4:	430a      	orrs	r2, r1
 800c6d6:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800c6d8:	e002      	b.n	800c6e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800c6da:	2301      	movs	r3, #1
 800c6dc:	75fb      	strb	r3, [r7, #23]
      break;
 800c6de:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800c6e0:	68fb      	ldr	r3, [r7, #12]
 800c6e2:	2200      	movs	r2, #0
 800c6e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800c6e8:	7dfb      	ldrb	r3, [r7, #23]
}
 800c6ea:	4618      	mov	r0, r3
 800c6ec:	3718      	adds	r7, #24
 800c6ee:	46bd      	mov	sp, r7
 800c6f0:	bd80      	pop	{r7, pc}
 800c6f2:	bf00      	nop

0800c6f4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c6f4:	b580      	push	{r7, lr}
 800c6f6:	b084      	sub	sp, #16
 800c6f8:	af00      	add	r7, sp, #0
 800c6fa:	6078      	str	r0, [r7, #4]
 800c6fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c6fe:	2300      	movs	r3, #0
 800c700:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c708:	2b01      	cmp	r3, #1
 800c70a:	d101      	bne.n	800c710 <HAL_TIM_ConfigClockSource+0x1c>
 800c70c:	2302      	movs	r3, #2
 800c70e:	e0dc      	b.n	800c8ca <HAL_TIM_ConfigClockSource+0x1d6>
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	2201      	movs	r2, #1
 800c714:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	2202      	movs	r2, #2
 800c71c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	681b      	ldr	r3, [r3, #0]
 800c724:	689b      	ldr	r3, [r3, #8]
 800c726:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c728:	68ba      	ldr	r2, [r7, #8]
 800c72a:	4b6a      	ldr	r3, [pc, #424]	@ (800c8d4 <HAL_TIM_ConfigClockSource+0x1e0>)
 800c72c:	4013      	ands	r3, r2
 800c72e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c730:	68bb      	ldr	r3, [r7, #8]
 800c732:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c736:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	68ba      	ldr	r2, [r7, #8]
 800c73e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c740:	683b      	ldr	r3, [r7, #0]
 800c742:	681b      	ldr	r3, [r3, #0]
 800c744:	4a64      	ldr	r2, [pc, #400]	@ (800c8d8 <HAL_TIM_ConfigClockSource+0x1e4>)
 800c746:	4293      	cmp	r3, r2
 800c748:	f000 80a9 	beq.w	800c89e <HAL_TIM_ConfigClockSource+0x1aa>
 800c74c:	4a62      	ldr	r2, [pc, #392]	@ (800c8d8 <HAL_TIM_ConfigClockSource+0x1e4>)
 800c74e:	4293      	cmp	r3, r2
 800c750:	f200 80ae 	bhi.w	800c8b0 <HAL_TIM_ConfigClockSource+0x1bc>
 800c754:	4a61      	ldr	r2, [pc, #388]	@ (800c8dc <HAL_TIM_ConfigClockSource+0x1e8>)
 800c756:	4293      	cmp	r3, r2
 800c758:	f000 80a1 	beq.w	800c89e <HAL_TIM_ConfigClockSource+0x1aa>
 800c75c:	4a5f      	ldr	r2, [pc, #380]	@ (800c8dc <HAL_TIM_ConfigClockSource+0x1e8>)
 800c75e:	4293      	cmp	r3, r2
 800c760:	f200 80a6 	bhi.w	800c8b0 <HAL_TIM_ConfigClockSource+0x1bc>
 800c764:	4a5e      	ldr	r2, [pc, #376]	@ (800c8e0 <HAL_TIM_ConfigClockSource+0x1ec>)
 800c766:	4293      	cmp	r3, r2
 800c768:	f000 8099 	beq.w	800c89e <HAL_TIM_ConfigClockSource+0x1aa>
 800c76c:	4a5c      	ldr	r2, [pc, #368]	@ (800c8e0 <HAL_TIM_ConfigClockSource+0x1ec>)
 800c76e:	4293      	cmp	r3, r2
 800c770:	f200 809e 	bhi.w	800c8b0 <HAL_TIM_ConfigClockSource+0x1bc>
 800c774:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800c778:	f000 8091 	beq.w	800c89e <HAL_TIM_ConfigClockSource+0x1aa>
 800c77c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800c780:	f200 8096 	bhi.w	800c8b0 <HAL_TIM_ConfigClockSource+0x1bc>
 800c784:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c788:	f000 8089 	beq.w	800c89e <HAL_TIM_ConfigClockSource+0x1aa>
 800c78c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c790:	f200 808e 	bhi.w	800c8b0 <HAL_TIM_ConfigClockSource+0x1bc>
 800c794:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c798:	d03e      	beq.n	800c818 <HAL_TIM_ConfigClockSource+0x124>
 800c79a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c79e:	f200 8087 	bhi.w	800c8b0 <HAL_TIM_ConfigClockSource+0x1bc>
 800c7a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c7a6:	f000 8086 	beq.w	800c8b6 <HAL_TIM_ConfigClockSource+0x1c2>
 800c7aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c7ae:	d87f      	bhi.n	800c8b0 <HAL_TIM_ConfigClockSource+0x1bc>
 800c7b0:	2b70      	cmp	r3, #112	@ 0x70
 800c7b2:	d01a      	beq.n	800c7ea <HAL_TIM_ConfigClockSource+0xf6>
 800c7b4:	2b70      	cmp	r3, #112	@ 0x70
 800c7b6:	d87b      	bhi.n	800c8b0 <HAL_TIM_ConfigClockSource+0x1bc>
 800c7b8:	2b60      	cmp	r3, #96	@ 0x60
 800c7ba:	d050      	beq.n	800c85e <HAL_TIM_ConfigClockSource+0x16a>
 800c7bc:	2b60      	cmp	r3, #96	@ 0x60
 800c7be:	d877      	bhi.n	800c8b0 <HAL_TIM_ConfigClockSource+0x1bc>
 800c7c0:	2b50      	cmp	r3, #80	@ 0x50
 800c7c2:	d03c      	beq.n	800c83e <HAL_TIM_ConfigClockSource+0x14a>
 800c7c4:	2b50      	cmp	r3, #80	@ 0x50
 800c7c6:	d873      	bhi.n	800c8b0 <HAL_TIM_ConfigClockSource+0x1bc>
 800c7c8:	2b40      	cmp	r3, #64	@ 0x40
 800c7ca:	d058      	beq.n	800c87e <HAL_TIM_ConfigClockSource+0x18a>
 800c7cc:	2b40      	cmp	r3, #64	@ 0x40
 800c7ce:	d86f      	bhi.n	800c8b0 <HAL_TIM_ConfigClockSource+0x1bc>
 800c7d0:	2b30      	cmp	r3, #48	@ 0x30
 800c7d2:	d064      	beq.n	800c89e <HAL_TIM_ConfigClockSource+0x1aa>
 800c7d4:	2b30      	cmp	r3, #48	@ 0x30
 800c7d6:	d86b      	bhi.n	800c8b0 <HAL_TIM_ConfigClockSource+0x1bc>
 800c7d8:	2b20      	cmp	r3, #32
 800c7da:	d060      	beq.n	800c89e <HAL_TIM_ConfigClockSource+0x1aa>
 800c7dc:	2b20      	cmp	r3, #32
 800c7de:	d867      	bhi.n	800c8b0 <HAL_TIM_ConfigClockSource+0x1bc>
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	d05c      	beq.n	800c89e <HAL_TIM_ConfigClockSource+0x1aa>
 800c7e4:	2b10      	cmp	r3, #16
 800c7e6:	d05a      	beq.n	800c89e <HAL_TIM_ConfigClockSource+0x1aa>
 800c7e8:	e062      	b.n	800c8b0 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c7ee:	683b      	ldr	r3, [r7, #0]
 800c7f0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c7f2:	683b      	ldr	r3, [r7, #0]
 800c7f4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c7f6:	683b      	ldr	r3, [r7, #0]
 800c7f8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c7fa:	f000 fc95 	bl	800d128 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	681b      	ldr	r3, [r3, #0]
 800c802:	689b      	ldr	r3, [r3, #8]
 800c804:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c806:	68bb      	ldr	r3, [r7, #8]
 800c808:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800c80c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	681b      	ldr	r3, [r3, #0]
 800c812:	68ba      	ldr	r2, [r7, #8]
 800c814:	609a      	str	r2, [r3, #8]
      break;
 800c816:	e04f      	b.n	800c8b8 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c81c:	683b      	ldr	r3, [r7, #0]
 800c81e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c820:	683b      	ldr	r3, [r7, #0]
 800c822:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c824:	683b      	ldr	r3, [r7, #0]
 800c826:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c828:	f000 fc7e 	bl	800d128 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	689a      	ldr	r2, [r3, #8]
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800c83a:	609a      	str	r2, [r3, #8]
      break;
 800c83c:	e03c      	b.n	800c8b8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c842:	683b      	ldr	r3, [r7, #0]
 800c844:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c846:	683b      	ldr	r3, [r7, #0]
 800c848:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c84a:	461a      	mov	r2, r3
 800c84c:	f000 fbee 	bl	800d02c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	2150      	movs	r1, #80	@ 0x50
 800c856:	4618      	mov	r0, r3
 800c858:	f000 fc48 	bl	800d0ec <TIM_ITRx_SetConfig>
      break;
 800c85c:	e02c      	b.n	800c8b8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c862:	683b      	ldr	r3, [r7, #0]
 800c864:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c866:	683b      	ldr	r3, [r7, #0]
 800c868:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800c86a:	461a      	mov	r2, r3
 800c86c:	f000 fc0d 	bl	800d08a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	681b      	ldr	r3, [r3, #0]
 800c874:	2160      	movs	r1, #96	@ 0x60
 800c876:	4618      	mov	r0, r3
 800c878:	f000 fc38 	bl	800d0ec <TIM_ITRx_SetConfig>
      break;
 800c87c:	e01c      	b.n	800c8b8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c882:	683b      	ldr	r3, [r7, #0]
 800c884:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c886:	683b      	ldr	r3, [r7, #0]
 800c888:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c88a:	461a      	mov	r2, r3
 800c88c:	f000 fbce 	bl	800d02c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	2140      	movs	r1, #64	@ 0x40
 800c896:	4618      	mov	r0, r3
 800c898:	f000 fc28 	bl	800d0ec <TIM_ITRx_SetConfig>
      break;
 800c89c:	e00c      	b.n	800c8b8 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	681a      	ldr	r2, [r3, #0]
 800c8a2:	683b      	ldr	r3, [r7, #0]
 800c8a4:	681b      	ldr	r3, [r3, #0]
 800c8a6:	4619      	mov	r1, r3
 800c8a8:	4610      	mov	r0, r2
 800c8aa:	f000 fc1f 	bl	800d0ec <TIM_ITRx_SetConfig>
      break;
 800c8ae:	e003      	b.n	800c8b8 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800c8b0:	2301      	movs	r3, #1
 800c8b2:	73fb      	strb	r3, [r7, #15]
      break;
 800c8b4:	e000      	b.n	800c8b8 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800c8b6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	2201      	movs	r2, #1
 800c8bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	2200      	movs	r2, #0
 800c8c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800c8c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c8ca:	4618      	mov	r0, r3
 800c8cc:	3710      	adds	r7, #16
 800c8ce:	46bd      	mov	sp, r7
 800c8d0:	bd80      	pop	{r7, pc}
 800c8d2:	bf00      	nop
 800c8d4:	ffceff88 	.word	0xffceff88
 800c8d8:	00100040 	.word	0x00100040
 800c8dc:	00100030 	.word	0x00100030
 800c8e0:	00100020 	.word	0x00100020

0800c8e4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c8e4:	b480      	push	{r7}
 800c8e6:	b083      	sub	sp, #12
 800c8e8:	af00      	add	r7, sp, #0
 800c8ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800c8ec:	bf00      	nop
 800c8ee:	370c      	adds	r7, #12
 800c8f0:	46bd      	mov	sp, r7
 800c8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8f6:	4770      	bx	lr

0800c8f8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c8f8:	b480      	push	{r7}
 800c8fa:	b083      	sub	sp, #12
 800c8fc:	af00      	add	r7, sp, #0
 800c8fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c900:	bf00      	nop
 800c902:	370c      	adds	r7, #12
 800c904:	46bd      	mov	sp, r7
 800c906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c90a:	4770      	bx	lr

0800c90c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c90c:	b480      	push	{r7}
 800c90e:	b083      	sub	sp, #12
 800c910:	af00      	add	r7, sp, #0
 800c912:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c914:	bf00      	nop
 800c916:	370c      	adds	r7, #12
 800c918:	46bd      	mov	sp, r7
 800c91a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c91e:	4770      	bx	lr

0800c920 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c920:	b480      	push	{r7}
 800c922:	b083      	sub	sp, #12
 800c924:	af00      	add	r7, sp, #0
 800c926:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c928:	bf00      	nop
 800c92a:	370c      	adds	r7, #12
 800c92c:	46bd      	mov	sp, r7
 800c92e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c932:	4770      	bx	lr

0800c934 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800c934:	b480      	push	{r7}
 800c936:	b085      	sub	sp, #20
 800c938:	af00      	add	r7, sp, #0
 800c93a:	6078      	str	r0, [r7, #4]
 800c93c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	681b      	ldr	r3, [r3, #0]
 800c942:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	4a46      	ldr	r2, [pc, #280]	@ (800ca60 <TIM_Base_SetConfig+0x12c>)
 800c948:	4293      	cmp	r3, r2
 800c94a:	d013      	beq.n	800c974 <TIM_Base_SetConfig+0x40>
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c952:	d00f      	beq.n	800c974 <TIM_Base_SetConfig+0x40>
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	4a43      	ldr	r2, [pc, #268]	@ (800ca64 <TIM_Base_SetConfig+0x130>)
 800c958:	4293      	cmp	r3, r2
 800c95a:	d00b      	beq.n	800c974 <TIM_Base_SetConfig+0x40>
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	4a42      	ldr	r2, [pc, #264]	@ (800ca68 <TIM_Base_SetConfig+0x134>)
 800c960:	4293      	cmp	r3, r2
 800c962:	d007      	beq.n	800c974 <TIM_Base_SetConfig+0x40>
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	4a41      	ldr	r2, [pc, #260]	@ (800ca6c <TIM_Base_SetConfig+0x138>)
 800c968:	4293      	cmp	r3, r2
 800c96a:	d003      	beq.n	800c974 <TIM_Base_SetConfig+0x40>
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	4a40      	ldr	r2, [pc, #256]	@ (800ca70 <TIM_Base_SetConfig+0x13c>)
 800c970:	4293      	cmp	r3, r2
 800c972:	d108      	bne.n	800c986 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c974:	68fb      	ldr	r3, [r7, #12]
 800c976:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c97a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c97c:	683b      	ldr	r3, [r7, #0]
 800c97e:	685b      	ldr	r3, [r3, #4]
 800c980:	68fa      	ldr	r2, [r7, #12]
 800c982:	4313      	orrs	r3, r2
 800c984:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	4a35      	ldr	r2, [pc, #212]	@ (800ca60 <TIM_Base_SetConfig+0x12c>)
 800c98a:	4293      	cmp	r3, r2
 800c98c:	d01f      	beq.n	800c9ce <TIM_Base_SetConfig+0x9a>
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c994:	d01b      	beq.n	800c9ce <TIM_Base_SetConfig+0x9a>
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	4a32      	ldr	r2, [pc, #200]	@ (800ca64 <TIM_Base_SetConfig+0x130>)
 800c99a:	4293      	cmp	r3, r2
 800c99c:	d017      	beq.n	800c9ce <TIM_Base_SetConfig+0x9a>
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	4a31      	ldr	r2, [pc, #196]	@ (800ca68 <TIM_Base_SetConfig+0x134>)
 800c9a2:	4293      	cmp	r3, r2
 800c9a4:	d013      	beq.n	800c9ce <TIM_Base_SetConfig+0x9a>
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	4a30      	ldr	r2, [pc, #192]	@ (800ca6c <TIM_Base_SetConfig+0x138>)
 800c9aa:	4293      	cmp	r3, r2
 800c9ac:	d00f      	beq.n	800c9ce <TIM_Base_SetConfig+0x9a>
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	4a2f      	ldr	r2, [pc, #188]	@ (800ca70 <TIM_Base_SetConfig+0x13c>)
 800c9b2:	4293      	cmp	r3, r2
 800c9b4:	d00b      	beq.n	800c9ce <TIM_Base_SetConfig+0x9a>
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	4a2e      	ldr	r2, [pc, #184]	@ (800ca74 <TIM_Base_SetConfig+0x140>)
 800c9ba:	4293      	cmp	r3, r2
 800c9bc:	d007      	beq.n	800c9ce <TIM_Base_SetConfig+0x9a>
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	4a2d      	ldr	r2, [pc, #180]	@ (800ca78 <TIM_Base_SetConfig+0x144>)
 800c9c2:	4293      	cmp	r3, r2
 800c9c4:	d003      	beq.n	800c9ce <TIM_Base_SetConfig+0x9a>
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	4a2c      	ldr	r2, [pc, #176]	@ (800ca7c <TIM_Base_SetConfig+0x148>)
 800c9ca:	4293      	cmp	r3, r2
 800c9cc:	d108      	bne.n	800c9e0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c9ce:	68fb      	ldr	r3, [r7, #12]
 800c9d0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c9d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c9d6:	683b      	ldr	r3, [r7, #0]
 800c9d8:	68db      	ldr	r3, [r3, #12]
 800c9da:	68fa      	ldr	r2, [r7, #12]
 800c9dc:	4313      	orrs	r3, r2
 800c9de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c9e0:	68fb      	ldr	r3, [r7, #12]
 800c9e2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800c9e6:	683b      	ldr	r3, [r7, #0]
 800c9e8:	695b      	ldr	r3, [r3, #20]
 800c9ea:	4313      	orrs	r3, r2
 800c9ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	68fa      	ldr	r2, [r7, #12]
 800c9f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c9f4:	683b      	ldr	r3, [r7, #0]
 800c9f6:	689a      	ldr	r2, [r3, #8]
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c9fc:	683b      	ldr	r3, [r7, #0]
 800c9fe:	681a      	ldr	r2, [r3, #0]
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	4a16      	ldr	r2, [pc, #88]	@ (800ca60 <TIM_Base_SetConfig+0x12c>)
 800ca08:	4293      	cmp	r3, r2
 800ca0a:	d00f      	beq.n	800ca2c <TIM_Base_SetConfig+0xf8>
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	4a18      	ldr	r2, [pc, #96]	@ (800ca70 <TIM_Base_SetConfig+0x13c>)
 800ca10:	4293      	cmp	r3, r2
 800ca12:	d00b      	beq.n	800ca2c <TIM_Base_SetConfig+0xf8>
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	4a17      	ldr	r2, [pc, #92]	@ (800ca74 <TIM_Base_SetConfig+0x140>)
 800ca18:	4293      	cmp	r3, r2
 800ca1a:	d007      	beq.n	800ca2c <TIM_Base_SetConfig+0xf8>
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	4a16      	ldr	r2, [pc, #88]	@ (800ca78 <TIM_Base_SetConfig+0x144>)
 800ca20:	4293      	cmp	r3, r2
 800ca22:	d003      	beq.n	800ca2c <TIM_Base_SetConfig+0xf8>
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	4a15      	ldr	r2, [pc, #84]	@ (800ca7c <TIM_Base_SetConfig+0x148>)
 800ca28:	4293      	cmp	r3, r2
 800ca2a:	d103      	bne.n	800ca34 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ca2c:	683b      	ldr	r3, [r7, #0]
 800ca2e:	691a      	ldr	r2, [r3, #16]
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	2201      	movs	r2, #1
 800ca38:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	691b      	ldr	r3, [r3, #16]
 800ca3e:	f003 0301 	and.w	r3, r3, #1
 800ca42:	2b01      	cmp	r3, #1
 800ca44:	d105      	bne.n	800ca52 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	691b      	ldr	r3, [r3, #16]
 800ca4a:	f023 0201 	bic.w	r2, r3, #1
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	611a      	str	r2, [r3, #16]
  }
}
 800ca52:	bf00      	nop
 800ca54:	3714      	adds	r7, #20
 800ca56:	46bd      	mov	sp, r7
 800ca58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca5c:	4770      	bx	lr
 800ca5e:	bf00      	nop
 800ca60:	40010000 	.word	0x40010000
 800ca64:	40000400 	.word	0x40000400
 800ca68:	40000800 	.word	0x40000800
 800ca6c:	40000c00 	.word	0x40000c00
 800ca70:	40010400 	.word	0x40010400
 800ca74:	40014000 	.word	0x40014000
 800ca78:	40014400 	.word	0x40014400
 800ca7c:	40014800 	.word	0x40014800

0800ca80 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ca80:	b480      	push	{r7}
 800ca82:	b087      	sub	sp, #28
 800ca84:	af00      	add	r7, sp, #0
 800ca86:	6078      	str	r0, [r7, #4]
 800ca88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	6a1b      	ldr	r3, [r3, #32]
 800ca8e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	6a1b      	ldr	r3, [r3, #32]
 800ca94:	f023 0201 	bic.w	r2, r3, #1
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	685b      	ldr	r3, [r3, #4]
 800caa0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	699b      	ldr	r3, [r3, #24]
 800caa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800caa8:	68fa      	ldr	r2, [r7, #12]
 800caaa:	4b37      	ldr	r3, [pc, #220]	@ (800cb88 <TIM_OC1_SetConfig+0x108>)
 800caac:	4013      	ands	r3, r2
 800caae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800cab0:	68fb      	ldr	r3, [r7, #12]
 800cab2:	f023 0303 	bic.w	r3, r3, #3
 800cab6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800cab8:	683b      	ldr	r3, [r7, #0]
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	68fa      	ldr	r2, [r7, #12]
 800cabe:	4313      	orrs	r3, r2
 800cac0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800cac2:	697b      	ldr	r3, [r7, #20]
 800cac4:	f023 0302 	bic.w	r3, r3, #2
 800cac8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800caca:	683b      	ldr	r3, [r7, #0]
 800cacc:	689b      	ldr	r3, [r3, #8]
 800cace:	697a      	ldr	r2, [r7, #20]
 800cad0:	4313      	orrs	r3, r2
 800cad2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	4a2d      	ldr	r2, [pc, #180]	@ (800cb8c <TIM_OC1_SetConfig+0x10c>)
 800cad8:	4293      	cmp	r3, r2
 800cada:	d00f      	beq.n	800cafc <TIM_OC1_SetConfig+0x7c>
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	4a2c      	ldr	r2, [pc, #176]	@ (800cb90 <TIM_OC1_SetConfig+0x110>)
 800cae0:	4293      	cmp	r3, r2
 800cae2:	d00b      	beq.n	800cafc <TIM_OC1_SetConfig+0x7c>
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	4a2b      	ldr	r2, [pc, #172]	@ (800cb94 <TIM_OC1_SetConfig+0x114>)
 800cae8:	4293      	cmp	r3, r2
 800caea:	d007      	beq.n	800cafc <TIM_OC1_SetConfig+0x7c>
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	4a2a      	ldr	r2, [pc, #168]	@ (800cb98 <TIM_OC1_SetConfig+0x118>)
 800caf0:	4293      	cmp	r3, r2
 800caf2:	d003      	beq.n	800cafc <TIM_OC1_SetConfig+0x7c>
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	4a29      	ldr	r2, [pc, #164]	@ (800cb9c <TIM_OC1_SetConfig+0x11c>)
 800caf8:	4293      	cmp	r3, r2
 800cafa:	d10c      	bne.n	800cb16 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800cafc:	697b      	ldr	r3, [r7, #20]
 800cafe:	f023 0308 	bic.w	r3, r3, #8
 800cb02:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800cb04:	683b      	ldr	r3, [r7, #0]
 800cb06:	68db      	ldr	r3, [r3, #12]
 800cb08:	697a      	ldr	r2, [r7, #20]
 800cb0a:	4313      	orrs	r3, r2
 800cb0c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800cb0e:	697b      	ldr	r3, [r7, #20]
 800cb10:	f023 0304 	bic.w	r3, r3, #4
 800cb14:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	4a1c      	ldr	r2, [pc, #112]	@ (800cb8c <TIM_OC1_SetConfig+0x10c>)
 800cb1a:	4293      	cmp	r3, r2
 800cb1c:	d00f      	beq.n	800cb3e <TIM_OC1_SetConfig+0xbe>
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	4a1b      	ldr	r2, [pc, #108]	@ (800cb90 <TIM_OC1_SetConfig+0x110>)
 800cb22:	4293      	cmp	r3, r2
 800cb24:	d00b      	beq.n	800cb3e <TIM_OC1_SetConfig+0xbe>
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	4a1a      	ldr	r2, [pc, #104]	@ (800cb94 <TIM_OC1_SetConfig+0x114>)
 800cb2a:	4293      	cmp	r3, r2
 800cb2c:	d007      	beq.n	800cb3e <TIM_OC1_SetConfig+0xbe>
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	4a19      	ldr	r2, [pc, #100]	@ (800cb98 <TIM_OC1_SetConfig+0x118>)
 800cb32:	4293      	cmp	r3, r2
 800cb34:	d003      	beq.n	800cb3e <TIM_OC1_SetConfig+0xbe>
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	4a18      	ldr	r2, [pc, #96]	@ (800cb9c <TIM_OC1_SetConfig+0x11c>)
 800cb3a:	4293      	cmp	r3, r2
 800cb3c:	d111      	bne.n	800cb62 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800cb3e:	693b      	ldr	r3, [r7, #16]
 800cb40:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800cb44:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800cb46:	693b      	ldr	r3, [r7, #16]
 800cb48:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800cb4c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800cb4e:	683b      	ldr	r3, [r7, #0]
 800cb50:	695b      	ldr	r3, [r3, #20]
 800cb52:	693a      	ldr	r2, [r7, #16]
 800cb54:	4313      	orrs	r3, r2
 800cb56:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800cb58:	683b      	ldr	r3, [r7, #0]
 800cb5a:	699b      	ldr	r3, [r3, #24]
 800cb5c:	693a      	ldr	r2, [r7, #16]
 800cb5e:	4313      	orrs	r3, r2
 800cb60:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	693a      	ldr	r2, [r7, #16]
 800cb66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	68fa      	ldr	r2, [r7, #12]
 800cb6c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800cb6e:	683b      	ldr	r3, [r7, #0]
 800cb70:	685a      	ldr	r2, [r3, #4]
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	697a      	ldr	r2, [r7, #20]
 800cb7a:	621a      	str	r2, [r3, #32]
}
 800cb7c:	bf00      	nop
 800cb7e:	371c      	adds	r7, #28
 800cb80:	46bd      	mov	sp, r7
 800cb82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb86:	4770      	bx	lr
 800cb88:	fffeff8f 	.word	0xfffeff8f
 800cb8c:	40010000 	.word	0x40010000
 800cb90:	40010400 	.word	0x40010400
 800cb94:	40014000 	.word	0x40014000
 800cb98:	40014400 	.word	0x40014400
 800cb9c:	40014800 	.word	0x40014800

0800cba0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800cba0:	b480      	push	{r7}
 800cba2:	b087      	sub	sp, #28
 800cba4:	af00      	add	r7, sp, #0
 800cba6:	6078      	str	r0, [r7, #4]
 800cba8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	6a1b      	ldr	r3, [r3, #32]
 800cbae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	6a1b      	ldr	r3, [r3, #32]
 800cbb4:	f023 0210 	bic.w	r2, r3, #16
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	685b      	ldr	r3, [r3, #4]
 800cbc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	699b      	ldr	r3, [r3, #24]
 800cbc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800cbc8:	68fa      	ldr	r2, [r7, #12]
 800cbca:	4b34      	ldr	r3, [pc, #208]	@ (800cc9c <TIM_OC2_SetConfig+0xfc>)
 800cbcc:	4013      	ands	r3, r2
 800cbce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800cbd0:	68fb      	ldr	r3, [r7, #12]
 800cbd2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800cbd6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cbd8:	683b      	ldr	r3, [r7, #0]
 800cbda:	681b      	ldr	r3, [r3, #0]
 800cbdc:	021b      	lsls	r3, r3, #8
 800cbde:	68fa      	ldr	r2, [r7, #12]
 800cbe0:	4313      	orrs	r3, r2
 800cbe2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800cbe4:	697b      	ldr	r3, [r7, #20]
 800cbe6:	f023 0320 	bic.w	r3, r3, #32
 800cbea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800cbec:	683b      	ldr	r3, [r7, #0]
 800cbee:	689b      	ldr	r3, [r3, #8]
 800cbf0:	011b      	lsls	r3, r3, #4
 800cbf2:	697a      	ldr	r2, [r7, #20]
 800cbf4:	4313      	orrs	r3, r2
 800cbf6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	4a29      	ldr	r2, [pc, #164]	@ (800cca0 <TIM_OC2_SetConfig+0x100>)
 800cbfc:	4293      	cmp	r3, r2
 800cbfe:	d003      	beq.n	800cc08 <TIM_OC2_SetConfig+0x68>
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	4a28      	ldr	r2, [pc, #160]	@ (800cca4 <TIM_OC2_SetConfig+0x104>)
 800cc04:	4293      	cmp	r3, r2
 800cc06:	d10d      	bne.n	800cc24 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800cc08:	697b      	ldr	r3, [r7, #20]
 800cc0a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800cc0e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800cc10:	683b      	ldr	r3, [r7, #0]
 800cc12:	68db      	ldr	r3, [r3, #12]
 800cc14:	011b      	lsls	r3, r3, #4
 800cc16:	697a      	ldr	r2, [r7, #20]
 800cc18:	4313      	orrs	r3, r2
 800cc1a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800cc1c:	697b      	ldr	r3, [r7, #20]
 800cc1e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cc22:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	4a1e      	ldr	r2, [pc, #120]	@ (800cca0 <TIM_OC2_SetConfig+0x100>)
 800cc28:	4293      	cmp	r3, r2
 800cc2a:	d00f      	beq.n	800cc4c <TIM_OC2_SetConfig+0xac>
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	4a1d      	ldr	r2, [pc, #116]	@ (800cca4 <TIM_OC2_SetConfig+0x104>)
 800cc30:	4293      	cmp	r3, r2
 800cc32:	d00b      	beq.n	800cc4c <TIM_OC2_SetConfig+0xac>
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	4a1c      	ldr	r2, [pc, #112]	@ (800cca8 <TIM_OC2_SetConfig+0x108>)
 800cc38:	4293      	cmp	r3, r2
 800cc3a:	d007      	beq.n	800cc4c <TIM_OC2_SetConfig+0xac>
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	4a1b      	ldr	r2, [pc, #108]	@ (800ccac <TIM_OC2_SetConfig+0x10c>)
 800cc40:	4293      	cmp	r3, r2
 800cc42:	d003      	beq.n	800cc4c <TIM_OC2_SetConfig+0xac>
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	4a1a      	ldr	r2, [pc, #104]	@ (800ccb0 <TIM_OC2_SetConfig+0x110>)
 800cc48:	4293      	cmp	r3, r2
 800cc4a:	d113      	bne.n	800cc74 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800cc4c:	693b      	ldr	r3, [r7, #16]
 800cc4e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800cc52:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800cc54:	693b      	ldr	r3, [r7, #16]
 800cc56:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800cc5a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800cc5c:	683b      	ldr	r3, [r7, #0]
 800cc5e:	695b      	ldr	r3, [r3, #20]
 800cc60:	009b      	lsls	r3, r3, #2
 800cc62:	693a      	ldr	r2, [r7, #16]
 800cc64:	4313      	orrs	r3, r2
 800cc66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800cc68:	683b      	ldr	r3, [r7, #0]
 800cc6a:	699b      	ldr	r3, [r3, #24]
 800cc6c:	009b      	lsls	r3, r3, #2
 800cc6e:	693a      	ldr	r2, [r7, #16]
 800cc70:	4313      	orrs	r3, r2
 800cc72:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	693a      	ldr	r2, [r7, #16]
 800cc78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	68fa      	ldr	r2, [r7, #12]
 800cc7e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800cc80:	683b      	ldr	r3, [r7, #0]
 800cc82:	685a      	ldr	r2, [r3, #4]
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	697a      	ldr	r2, [r7, #20]
 800cc8c:	621a      	str	r2, [r3, #32]
}
 800cc8e:	bf00      	nop
 800cc90:	371c      	adds	r7, #28
 800cc92:	46bd      	mov	sp, r7
 800cc94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc98:	4770      	bx	lr
 800cc9a:	bf00      	nop
 800cc9c:	feff8fff 	.word	0xfeff8fff
 800cca0:	40010000 	.word	0x40010000
 800cca4:	40010400 	.word	0x40010400
 800cca8:	40014000 	.word	0x40014000
 800ccac:	40014400 	.word	0x40014400
 800ccb0:	40014800 	.word	0x40014800

0800ccb4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ccb4:	b480      	push	{r7}
 800ccb6:	b087      	sub	sp, #28
 800ccb8:	af00      	add	r7, sp, #0
 800ccba:	6078      	str	r0, [r7, #4]
 800ccbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	6a1b      	ldr	r3, [r3, #32]
 800ccc2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	6a1b      	ldr	r3, [r3, #32]
 800ccc8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	685b      	ldr	r3, [r3, #4]
 800ccd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	69db      	ldr	r3, [r3, #28]
 800ccda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800ccdc:	68fa      	ldr	r2, [r7, #12]
 800ccde:	4b33      	ldr	r3, [pc, #204]	@ (800cdac <TIM_OC3_SetConfig+0xf8>)
 800cce0:	4013      	ands	r3, r2
 800cce2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800cce4:	68fb      	ldr	r3, [r7, #12]
 800cce6:	f023 0303 	bic.w	r3, r3, #3
 800ccea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ccec:	683b      	ldr	r3, [r7, #0]
 800ccee:	681b      	ldr	r3, [r3, #0]
 800ccf0:	68fa      	ldr	r2, [r7, #12]
 800ccf2:	4313      	orrs	r3, r2
 800ccf4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800ccf6:	697b      	ldr	r3, [r7, #20]
 800ccf8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800ccfc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ccfe:	683b      	ldr	r3, [r7, #0]
 800cd00:	689b      	ldr	r3, [r3, #8]
 800cd02:	021b      	lsls	r3, r3, #8
 800cd04:	697a      	ldr	r2, [r7, #20]
 800cd06:	4313      	orrs	r3, r2
 800cd08:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	4a28      	ldr	r2, [pc, #160]	@ (800cdb0 <TIM_OC3_SetConfig+0xfc>)
 800cd0e:	4293      	cmp	r3, r2
 800cd10:	d003      	beq.n	800cd1a <TIM_OC3_SetConfig+0x66>
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	4a27      	ldr	r2, [pc, #156]	@ (800cdb4 <TIM_OC3_SetConfig+0x100>)
 800cd16:	4293      	cmp	r3, r2
 800cd18:	d10d      	bne.n	800cd36 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800cd1a:	697b      	ldr	r3, [r7, #20]
 800cd1c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800cd20:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800cd22:	683b      	ldr	r3, [r7, #0]
 800cd24:	68db      	ldr	r3, [r3, #12]
 800cd26:	021b      	lsls	r3, r3, #8
 800cd28:	697a      	ldr	r2, [r7, #20]
 800cd2a:	4313      	orrs	r3, r2
 800cd2c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800cd2e:	697b      	ldr	r3, [r7, #20]
 800cd30:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800cd34:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	4a1d      	ldr	r2, [pc, #116]	@ (800cdb0 <TIM_OC3_SetConfig+0xfc>)
 800cd3a:	4293      	cmp	r3, r2
 800cd3c:	d00f      	beq.n	800cd5e <TIM_OC3_SetConfig+0xaa>
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	4a1c      	ldr	r2, [pc, #112]	@ (800cdb4 <TIM_OC3_SetConfig+0x100>)
 800cd42:	4293      	cmp	r3, r2
 800cd44:	d00b      	beq.n	800cd5e <TIM_OC3_SetConfig+0xaa>
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	4a1b      	ldr	r2, [pc, #108]	@ (800cdb8 <TIM_OC3_SetConfig+0x104>)
 800cd4a:	4293      	cmp	r3, r2
 800cd4c:	d007      	beq.n	800cd5e <TIM_OC3_SetConfig+0xaa>
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	4a1a      	ldr	r2, [pc, #104]	@ (800cdbc <TIM_OC3_SetConfig+0x108>)
 800cd52:	4293      	cmp	r3, r2
 800cd54:	d003      	beq.n	800cd5e <TIM_OC3_SetConfig+0xaa>
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	4a19      	ldr	r2, [pc, #100]	@ (800cdc0 <TIM_OC3_SetConfig+0x10c>)
 800cd5a:	4293      	cmp	r3, r2
 800cd5c:	d113      	bne.n	800cd86 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800cd5e:	693b      	ldr	r3, [r7, #16]
 800cd60:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800cd64:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800cd66:	693b      	ldr	r3, [r7, #16]
 800cd68:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800cd6c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800cd6e:	683b      	ldr	r3, [r7, #0]
 800cd70:	695b      	ldr	r3, [r3, #20]
 800cd72:	011b      	lsls	r3, r3, #4
 800cd74:	693a      	ldr	r2, [r7, #16]
 800cd76:	4313      	orrs	r3, r2
 800cd78:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800cd7a:	683b      	ldr	r3, [r7, #0]
 800cd7c:	699b      	ldr	r3, [r3, #24]
 800cd7e:	011b      	lsls	r3, r3, #4
 800cd80:	693a      	ldr	r2, [r7, #16]
 800cd82:	4313      	orrs	r3, r2
 800cd84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	693a      	ldr	r2, [r7, #16]
 800cd8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	68fa      	ldr	r2, [r7, #12]
 800cd90:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800cd92:	683b      	ldr	r3, [r7, #0]
 800cd94:	685a      	ldr	r2, [r3, #4]
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	697a      	ldr	r2, [r7, #20]
 800cd9e:	621a      	str	r2, [r3, #32]
}
 800cda0:	bf00      	nop
 800cda2:	371c      	adds	r7, #28
 800cda4:	46bd      	mov	sp, r7
 800cda6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdaa:	4770      	bx	lr
 800cdac:	fffeff8f 	.word	0xfffeff8f
 800cdb0:	40010000 	.word	0x40010000
 800cdb4:	40010400 	.word	0x40010400
 800cdb8:	40014000 	.word	0x40014000
 800cdbc:	40014400 	.word	0x40014400
 800cdc0:	40014800 	.word	0x40014800

0800cdc4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800cdc4:	b480      	push	{r7}
 800cdc6:	b087      	sub	sp, #28
 800cdc8:	af00      	add	r7, sp, #0
 800cdca:	6078      	str	r0, [r7, #4]
 800cdcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	6a1b      	ldr	r3, [r3, #32]
 800cdd2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	6a1b      	ldr	r3, [r3, #32]
 800cdd8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	685b      	ldr	r3, [r3, #4]
 800cde4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	69db      	ldr	r3, [r3, #28]
 800cdea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800cdec:	68fa      	ldr	r2, [r7, #12]
 800cdee:	4b24      	ldr	r3, [pc, #144]	@ (800ce80 <TIM_OC4_SetConfig+0xbc>)
 800cdf0:	4013      	ands	r3, r2
 800cdf2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800cdf4:	68fb      	ldr	r3, [r7, #12]
 800cdf6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800cdfa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cdfc:	683b      	ldr	r3, [r7, #0]
 800cdfe:	681b      	ldr	r3, [r3, #0]
 800ce00:	021b      	lsls	r3, r3, #8
 800ce02:	68fa      	ldr	r2, [r7, #12]
 800ce04:	4313      	orrs	r3, r2
 800ce06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ce08:	693b      	ldr	r3, [r7, #16]
 800ce0a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800ce0e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ce10:	683b      	ldr	r3, [r7, #0]
 800ce12:	689b      	ldr	r3, [r3, #8]
 800ce14:	031b      	lsls	r3, r3, #12
 800ce16:	693a      	ldr	r2, [r7, #16]
 800ce18:	4313      	orrs	r3, r2
 800ce1a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	4a19      	ldr	r2, [pc, #100]	@ (800ce84 <TIM_OC4_SetConfig+0xc0>)
 800ce20:	4293      	cmp	r3, r2
 800ce22:	d00f      	beq.n	800ce44 <TIM_OC4_SetConfig+0x80>
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	4a18      	ldr	r2, [pc, #96]	@ (800ce88 <TIM_OC4_SetConfig+0xc4>)
 800ce28:	4293      	cmp	r3, r2
 800ce2a:	d00b      	beq.n	800ce44 <TIM_OC4_SetConfig+0x80>
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	4a17      	ldr	r2, [pc, #92]	@ (800ce8c <TIM_OC4_SetConfig+0xc8>)
 800ce30:	4293      	cmp	r3, r2
 800ce32:	d007      	beq.n	800ce44 <TIM_OC4_SetConfig+0x80>
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	4a16      	ldr	r2, [pc, #88]	@ (800ce90 <TIM_OC4_SetConfig+0xcc>)
 800ce38:	4293      	cmp	r3, r2
 800ce3a:	d003      	beq.n	800ce44 <TIM_OC4_SetConfig+0x80>
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	4a15      	ldr	r2, [pc, #84]	@ (800ce94 <TIM_OC4_SetConfig+0xd0>)
 800ce40:	4293      	cmp	r3, r2
 800ce42:	d109      	bne.n	800ce58 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ce44:	697b      	ldr	r3, [r7, #20]
 800ce46:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ce4a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ce4c:	683b      	ldr	r3, [r7, #0]
 800ce4e:	695b      	ldr	r3, [r3, #20]
 800ce50:	019b      	lsls	r3, r3, #6
 800ce52:	697a      	ldr	r2, [r7, #20]
 800ce54:	4313      	orrs	r3, r2
 800ce56:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	697a      	ldr	r2, [r7, #20]
 800ce5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	68fa      	ldr	r2, [r7, #12]
 800ce62:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ce64:	683b      	ldr	r3, [r7, #0]
 800ce66:	685a      	ldr	r2, [r3, #4]
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	693a      	ldr	r2, [r7, #16]
 800ce70:	621a      	str	r2, [r3, #32]
}
 800ce72:	bf00      	nop
 800ce74:	371c      	adds	r7, #28
 800ce76:	46bd      	mov	sp, r7
 800ce78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce7c:	4770      	bx	lr
 800ce7e:	bf00      	nop
 800ce80:	feff8fff 	.word	0xfeff8fff
 800ce84:	40010000 	.word	0x40010000
 800ce88:	40010400 	.word	0x40010400
 800ce8c:	40014000 	.word	0x40014000
 800ce90:	40014400 	.word	0x40014400
 800ce94:	40014800 	.word	0x40014800

0800ce98 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800ce98:	b480      	push	{r7}
 800ce9a:	b087      	sub	sp, #28
 800ce9c:	af00      	add	r7, sp, #0
 800ce9e:	6078      	str	r0, [r7, #4]
 800cea0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	6a1b      	ldr	r3, [r3, #32]
 800cea6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	6a1b      	ldr	r3, [r3, #32]
 800ceac:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	685b      	ldr	r3, [r3, #4]
 800ceb8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cebe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800cec0:	68fa      	ldr	r2, [r7, #12]
 800cec2:	4b21      	ldr	r3, [pc, #132]	@ (800cf48 <TIM_OC5_SetConfig+0xb0>)
 800cec4:	4013      	ands	r3, r2
 800cec6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800cec8:	683b      	ldr	r3, [r7, #0]
 800ceca:	681b      	ldr	r3, [r3, #0]
 800cecc:	68fa      	ldr	r2, [r7, #12]
 800cece:	4313      	orrs	r3, r2
 800ced0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800ced2:	693b      	ldr	r3, [r7, #16]
 800ced4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800ced8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800ceda:	683b      	ldr	r3, [r7, #0]
 800cedc:	689b      	ldr	r3, [r3, #8]
 800cede:	041b      	lsls	r3, r3, #16
 800cee0:	693a      	ldr	r2, [r7, #16]
 800cee2:	4313      	orrs	r3, r2
 800cee4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	4a18      	ldr	r2, [pc, #96]	@ (800cf4c <TIM_OC5_SetConfig+0xb4>)
 800ceea:	4293      	cmp	r3, r2
 800ceec:	d00f      	beq.n	800cf0e <TIM_OC5_SetConfig+0x76>
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	4a17      	ldr	r2, [pc, #92]	@ (800cf50 <TIM_OC5_SetConfig+0xb8>)
 800cef2:	4293      	cmp	r3, r2
 800cef4:	d00b      	beq.n	800cf0e <TIM_OC5_SetConfig+0x76>
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	4a16      	ldr	r2, [pc, #88]	@ (800cf54 <TIM_OC5_SetConfig+0xbc>)
 800cefa:	4293      	cmp	r3, r2
 800cefc:	d007      	beq.n	800cf0e <TIM_OC5_SetConfig+0x76>
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	4a15      	ldr	r2, [pc, #84]	@ (800cf58 <TIM_OC5_SetConfig+0xc0>)
 800cf02:	4293      	cmp	r3, r2
 800cf04:	d003      	beq.n	800cf0e <TIM_OC5_SetConfig+0x76>
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	4a14      	ldr	r2, [pc, #80]	@ (800cf5c <TIM_OC5_SetConfig+0xc4>)
 800cf0a:	4293      	cmp	r3, r2
 800cf0c:	d109      	bne.n	800cf22 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800cf0e:	697b      	ldr	r3, [r7, #20]
 800cf10:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800cf14:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800cf16:	683b      	ldr	r3, [r7, #0]
 800cf18:	695b      	ldr	r3, [r3, #20]
 800cf1a:	021b      	lsls	r3, r3, #8
 800cf1c:	697a      	ldr	r2, [r7, #20]
 800cf1e:	4313      	orrs	r3, r2
 800cf20:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	697a      	ldr	r2, [r7, #20]
 800cf26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	68fa      	ldr	r2, [r7, #12]
 800cf2c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800cf2e:	683b      	ldr	r3, [r7, #0]
 800cf30:	685a      	ldr	r2, [r3, #4]
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	693a      	ldr	r2, [r7, #16]
 800cf3a:	621a      	str	r2, [r3, #32]
}
 800cf3c:	bf00      	nop
 800cf3e:	371c      	adds	r7, #28
 800cf40:	46bd      	mov	sp, r7
 800cf42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf46:	4770      	bx	lr
 800cf48:	fffeff8f 	.word	0xfffeff8f
 800cf4c:	40010000 	.word	0x40010000
 800cf50:	40010400 	.word	0x40010400
 800cf54:	40014000 	.word	0x40014000
 800cf58:	40014400 	.word	0x40014400
 800cf5c:	40014800 	.word	0x40014800

0800cf60 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800cf60:	b480      	push	{r7}
 800cf62:	b087      	sub	sp, #28
 800cf64:	af00      	add	r7, sp, #0
 800cf66:	6078      	str	r0, [r7, #4]
 800cf68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	6a1b      	ldr	r3, [r3, #32]
 800cf6e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	6a1b      	ldr	r3, [r3, #32]
 800cf74:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	685b      	ldr	r3, [r3, #4]
 800cf80:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cf86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800cf88:	68fa      	ldr	r2, [r7, #12]
 800cf8a:	4b22      	ldr	r3, [pc, #136]	@ (800d014 <TIM_OC6_SetConfig+0xb4>)
 800cf8c:	4013      	ands	r3, r2
 800cf8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cf90:	683b      	ldr	r3, [r7, #0]
 800cf92:	681b      	ldr	r3, [r3, #0]
 800cf94:	021b      	lsls	r3, r3, #8
 800cf96:	68fa      	ldr	r2, [r7, #12]
 800cf98:	4313      	orrs	r3, r2
 800cf9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800cf9c:	693b      	ldr	r3, [r7, #16]
 800cf9e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800cfa2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800cfa4:	683b      	ldr	r3, [r7, #0]
 800cfa6:	689b      	ldr	r3, [r3, #8]
 800cfa8:	051b      	lsls	r3, r3, #20
 800cfaa:	693a      	ldr	r2, [r7, #16]
 800cfac:	4313      	orrs	r3, r2
 800cfae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	4a19      	ldr	r2, [pc, #100]	@ (800d018 <TIM_OC6_SetConfig+0xb8>)
 800cfb4:	4293      	cmp	r3, r2
 800cfb6:	d00f      	beq.n	800cfd8 <TIM_OC6_SetConfig+0x78>
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	4a18      	ldr	r2, [pc, #96]	@ (800d01c <TIM_OC6_SetConfig+0xbc>)
 800cfbc:	4293      	cmp	r3, r2
 800cfbe:	d00b      	beq.n	800cfd8 <TIM_OC6_SetConfig+0x78>
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	4a17      	ldr	r2, [pc, #92]	@ (800d020 <TIM_OC6_SetConfig+0xc0>)
 800cfc4:	4293      	cmp	r3, r2
 800cfc6:	d007      	beq.n	800cfd8 <TIM_OC6_SetConfig+0x78>
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	4a16      	ldr	r2, [pc, #88]	@ (800d024 <TIM_OC6_SetConfig+0xc4>)
 800cfcc:	4293      	cmp	r3, r2
 800cfce:	d003      	beq.n	800cfd8 <TIM_OC6_SetConfig+0x78>
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	4a15      	ldr	r2, [pc, #84]	@ (800d028 <TIM_OC6_SetConfig+0xc8>)
 800cfd4:	4293      	cmp	r3, r2
 800cfd6:	d109      	bne.n	800cfec <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800cfd8:	697b      	ldr	r3, [r7, #20]
 800cfda:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800cfde:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800cfe0:	683b      	ldr	r3, [r7, #0]
 800cfe2:	695b      	ldr	r3, [r3, #20]
 800cfe4:	029b      	lsls	r3, r3, #10
 800cfe6:	697a      	ldr	r2, [r7, #20]
 800cfe8:	4313      	orrs	r3, r2
 800cfea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	697a      	ldr	r2, [r7, #20]
 800cff0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	68fa      	ldr	r2, [r7, #12]
 800cff6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800cff8:	683b      	ldr	r3, [r7, #0]
 800cffa:	685a      	ldr	r2, [r3, #4]
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	693a      	ldr	r2, [r7, #16]
 800d004:	621a      	str	r2, [r3, #32]
}
 800d006:	bf00      	nop
 800d008:	371c      	adds	r7, #28
 800d00a:	46bd      	mov	sp, r7
 800d00c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d010:	4770      	bx	lr
 800d012:	bf00      	nop
 800d014:	feff8fff 	.word	0xfeff8fff
 800d018:	40010000 	.word	0x40010000
 800d01c:	40010400 	.word	0x40010400
 800d020:	40014000 	.word	0x40014000
 800d024:	40014400 	.word	0x40014400
 800d028:	40014800 	.word	0x40014800

0800d02c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d02c:	b480      	push	{r7}
 800d02e:	b087      	sub	sp, #28
 800d030:	af00      	add	r7, sp, #0
 800d032:	60f8      	str	r0, [r7, #12]
 800d034:	60b9      	str	r1, [r7, #8]
 800d036:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800d038:	68fb      	ldr	r3, [r7, #12]
 800d03a:	6a1b      	ldr	r3, [r3, #32]
 800d03c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d03e:	68fb      	ldr	r3, [r7, #12]
 800d040:	6a1b      	ldr	r3, [r3, #32]
 800d042:	f023 0201 	bic.w	r2, r3, #1
 800d046:	68fb      	ldr	r3, [r7, #12]
 800d048:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d04a:	68fb      	ldr	r3, [r7, #12]
 800d04c:	699b      	ldr	r3, [r3, #24]
 800d04e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d050:	693b      	ldr	r3, [r7, #16]
 800d052:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800d056:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	011b      	lsls	r3, r3, #4
 800d05c:	693a      	ldr	r2, [r7, #16]
 800d05e:	4313      	orrs	r3, r2
 800d060:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d062:	697b      	ldr	r3, [r7, #20]
 800d064:	f023 030a 	bic.w	r3, r3, #10
 800d068:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800d06a:	697a      	ldr	r2, [r7, #20]
 800d06c:	68bb      	ldr	r3, [r7, #8]
 800d06e:	4313      	orrs	r3, r2
 800d070:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800d072:	68fb      	ldr	r3, [r7, #12]
 800d074:	693a      	ldr	r2, [r7, #16]
 800d076:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d078:	68fb      	ldr	r3, [r7, #12]
 800d07a:	697a      	ldr	r2, [r7, #20]
 800d07c:	621a      	str	r2, [r3, #32]
}
 800d07e:	bf00      	nop
 800d080:	371c      	adds	r7, #28
 800d082:	46bd      	mov	sp, r7
 800d084:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d088:	4770      	bx	lr

0800d08a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d08a:	b480      	push	{r7}
 800d08c:	b087      	sub	sp, #28
 800d08e:	af00      	add	r7, sp, #0
 800d090:	60f8      	str	r0, [r7, #12]
 800d092:	60b9      	str	r1, [r7, #8]
 800d094:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800d096:	68fb      	ldr	r3, [r7, #12]
 800d098:	6a1b      	ldr	r3, [r3, #32]
 800d09a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d09c:	68fb      	ldr	r3, [r7, #12]
 800d09e:	6a1b      	ldr	r3, [r3, #32]
 800d0a0:	f023 0210 	bic.w	r2, r3, #16
 800d0a4:	68fb      	ldr	r3, [r7, #12]
 800d0a6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d0a8:	68fb      	ldr	r3, [r7, #12]
 800d0aa:	699b      	ldr	r3, [r3, #24]
 800d0ac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800d0ae:	693b      	ldr	r3, [r7, #16]
 800d0b0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800d0b4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	031b      	lsls	r3, r3, #12
 800d0ba:	693a      	ldr	r2, [r7, #16]
 800d0bc:	4313      	orrs	r3, r2
 800d0be:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d0c0:	697b      	ldr	r3, [r7, #20]
 800d0c2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800d0c6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800d0c8:	68bb      	ldr	r3, [r7, #8]
 800d0ca:	011b      	lsls	r3, r3, #4
 800d0cc:	697a      	ldr	r2, [r7, #20]
 800d0ce:	4313      	orrs	r3, r2
 800d0d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800d0d2:	68fb      	ldr	r3, [r7, #12]
 800d0d4:	693a      	ldr	r2, [r7, #16]
 800d0d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d0d8:	68fb      	ldr	r3, [r7, #12]
 800d0da:	697a      	ldr	r2, [r7, #20]
 800d0dc:	621a      	str	r2, [r3, #32]
}
 800d0de:	bf00      	nop
 800d0e0:	371c      	adds	r7, #28
 800d0e2:	46bd      	mov	sp, r7
 800d0e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0e8:	4770      	bx	lr
	...

0800d0ec <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800d0ec:	b480      	push	{r7}
 800d0ee:	b085      	sub	sp, #20
 800d0f0:	af00      	add	r7, sp, #0
 800d0f2:	6078      	str	r0, [r7, #4]
 800d0f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	689b      	ldr	r3, [r3, #8]
 800d0fa:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800d0fc:	68fa      	ldr	r2, [r7, #12]
 800d0fe:	4b09      	ldr	r3, [pc, #36]	@ (800d124 <TIM_ITRx_SetConfig+0x38>)
 800d100:	4013      	ands	r3, r2
 800d102:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800d104:	683a      	ldr	r2, [r7, #0]
 800d106:	68fb      	ldr	r3, [r7, #12]
 800d108:	4313      	orrs	r3, r2
 800d10a:	f043 0307 	orr.w	r3, r3, #7
 800d10e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	68fa      	ldr	r2, [r7, #12]
 800d114:	609a      	str	r2, [r3, #8]
}
 800d116:	bf00      	nop
 800d118:	3714      	adds	r7, #20
 800d11a:	46bd      	mov	sp, r7
 800d11c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d120:	4770      	bx	lr
 800d122:	bf00      	nop
 800d124:	ffcfff8f 	.word	0xffcfff8f

0800d128 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800d128:	b480      	push	{r7}
 800d12a:	b087      	sub	sp, #28
 800d12c:	af00      	add	r7, sp, #0
 800d12e:	60f8      	str	r0, [r7, #12]
 800d130:	60b9      	str	r1, [r7, #8]
 800d132:	607a      	str	r2, [r7, #4]
 800d134:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800d136:	68fb      	ldr	r3, [r7, #12]
 800d138:	689b      	ldr	r3, [r3, #8]
 800d13a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d13c:	697b      	ldr	r3, [r7, #20]
 800d13e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800d142:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d144:	683b      	ldr	r3, [r7, #0]
 800d146:	021a      	lsls	r2, r3, #8
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	431a      	orrs	r2, r3
 800d14c:	68bb      	ldr	r3, [r7, #8]
 800d14e:	4313      	orrs	r3, r2
 800d150:	697a      	ldr	r2, [r7, #20]
 800d152:	4313      	orrs	r3, r2
 800d154:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d156:	68fb      	ldr	r3, [r7, #12]
 800d158:	697a      	ldr	r2, [r7, #20]
 800d15a:	609a      	str	r2, [r3, #8]
}
 800d15c:	bf00      	nop
 800d15e:	371c      	adds	r7, #28
 800d160:	46bd      	mov	sp, r7
 800d162:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d166:	4770      	bx	lr

0800d168 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800d168:	b480      	push	{r7}
 800d16a:	b087      	sub	sp, #28
 800d16c:	af00      	add	r7, sp, #0
 800d16e:	60f8      	str	r0, [r7, #12]
 800d170:	60b9      	str	r1, [r7, #8]
 800d172:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800d174:	68bb      	ldr	r3, [r7, #8]
 800d176:	f003 031f 	and.w	r3, r3, #31
 800d17a:	2201      	movs	r2, #1
 800d17c:	fa02 f303 	lsl.w	r3, r2, r3
 800d180:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800d182:	68fb      	ldr	r3, [r7, #12]
 800d184:	6a1a      	ldr	r2, [r3, #32]
 800d186:	697b      	ldr	r3, [r7, #20]
 800d188:	43db      	mvns	r3, r3
 800d18a:	401a      	ands	r2, r3
 800d18c:	68fb      	ldr	r3, [r7, #12]
 800d18e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800d190:	68fb      	ldr	r3, [r7, #12]
 800d192:	6a1a      	ldr	r2, [r3, #32]
 800d194:	68bb      	ldr	r3, [r7, #8]
 800d196:	f003 031f 	and.w	r3, r3, #31
 800d19a:	6879      	ldr	r1, [r7, #4]
 800d19c:	fa01 f303 	lsl.w	r3, r1, r3
 800d1a0:	431a      	orrs	r2, r3
 800d1a2:	68fb      	ldr	r3, [r7, #12]
 800d1a4:	621a      	str	r2, [r3, #32]
}
 800d1a6:	bf00      	nop
 800d1a8:	371c      	adds	r7, #28
 800d1aa:	46bd      	mov	sp, r7
 800d1ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1b0:	4770      	bx	lr
	...

0800d1b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d1b4:	b480      	push	{r7}
 800d1b6:	b085      	sub	sp, #20
 800d1b8:	af00      	add	r7, sp, #0
 800d1ba:	6078      	str	r0, [r7, #4]
 800d1bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d1c4:	2b01      	cmp	r3, #1
 800d1c6:	d101      	bne.n	800d1cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d1c8:	2302      	movs	r3, #2
 800d1ca:	e06d      	b.n	800d2a8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	2201      	movs	r2, #1
 800d1d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	2202      	movs	r2, #2
 800d1d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	681b      	ldr	r3, [r3, #0]
 800d1e0:	685b      	ldr	r3, [r3, #4]
 800d1e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	681b      	ldr	r3, [r3, #0]
 800d1e8:	689b      	ldr	r3, [r3, #8]
 800d1ea:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	681b      	ldr	r3, [r3, #0]
 800d1f0:	4a30      	ldr	r2, [pc, #192]	@ (800d2b4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800d1f2:	4293      	cmp	r3, r2
 800d1f4:	d004      	beq.n	800d200 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	681b      	ldr	r3, [r3, #0]
 800d1fa:	4a2f      	ldr	r2, [pc, #188]	@ (800d2b8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800d1fc:	4293      	cmp	r3, r2
 800d1fe:	d108      	bne.n	800d212 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800d200:	68fb      	ldr	r3, [r7, #12]
 800d202:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800d206:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800d208:	683b      	ldr	r3, [r7, #0]
 800d20a:	685b      	ldr	r3, [r3, #4]
 800d20c:	68fa      	ldr	r2, [r7, #12]
 800d20e:	4313      	orrs	r3, r2
 800d210:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d212:	68fb      	ldr	r3, [r7, #12]
 800d214:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d218:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d21a:	683b      	ldr	r3, [r7, #0]
 800d21c:	681b      	ldr	r3, [r3, #0]
 800d21e:	68fa      	ldr	r2, [r7, #12]
 800d220:	4313      	orrs	r3, r2
 800d222:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	681b      	ldr	r3, [r3, #0]
 800d228:	68fa      	ldr	r2, [r7, #12]
 800d22a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	681b      	ldr	r3, [r3, #0]
 800d230:	4a20      	ldr	r2, [pc, #128]	@ (800d2b4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800d232:	4293      	cmp	r3, r2
 800d234:	d022      	beq.n	800d27c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	681b      	ldr	r3, [r3, #0]
 800d23a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d23e:	d01d      	beq.n	800d27c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	681b      	ldr	r3, [r3, #0]
 800d244:	4a1d      	ldr	r2, [pc, #116]	@ (800d2bc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800d246:	4293      	cmp	r3, r2
 800d248:	d018      	beq.n	800d27c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	681b      	ldr	r3, [r3, #0]
 800d24e:	4a1c      	ldr	r2, [pc, #112]	@ (800d2c0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800d250:	4293      	cmp	r3, r2
 800d252:	d013      	beq.n	800d27c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	681b      	ldr	r3, [r3, #0]
 800d258:	4a1a      	ldr	r2, [pc, #104]	@ (800d2c4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800d25a:	4293      	cmp	r3, r2
 800d25c:	d00e      	beq.n	800d27c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	681b      	ldr	r3, [r3, #0]
 800d262:	4a15      	ldr	r2, [pc, #84]	@ (800d2b8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800d264:	4293      	cmp	r3, r2
 800d266:	d009      	beq.n	800d27c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	681b      	ldr	r3, [r3, #0]
 800d26c:	4a16      	ldr	r2, [pc, #88]	@ (800d2c8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800d26e:	4293      	cmp	r3, r2
 800d270:	d004      	beq.n	800d27c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	681b      	ldr	r3, [r3, #0]
 800d276:	4a15      	ldr	r2, [pc, #84]	@ (800d2cc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800d278:	4293      	cmp	r3, r2
 800d27a:	d10c      	bne.n	800d296 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d27c:	68bb      	ldr	r3, [r7, #8]
 800d27e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d282:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d284:	683b      	ldr	r3, [r7, #0]
 800d286:	689b      	ldr	r3, [r3, #8]
 800d288:	68ba      	ldr	r2, [r7, #8]
 800d28a:	4313      	orrs	r3, r2
 800d28c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	681b      	ldr	r3, [r3, #0]
 800d292:	68ba      	ldr	r2, [r7, #8]
 800d294:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	2201      	movs	r2, #1
 800d29a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	2200      	movs	r2, #0
 800d2a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800d2a6:	2300      	movs	r3, #0
}
 800d2a8:	4618      	mov	r0, r3
 800d2aa:	3714      	adds	r7, #20
 800d2ac:	46bd      	mov	sp, r7
 800d2ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2b2:	4770      	bx	lr
 800d2b4:	40010000 	.word	0x40010000
 800d2b8:	40010400 	.word	0x40010400
 800d2bc:	40000400 	.word	0x40000400
 800d2c0:	40000800 	.word	0x40000800
 800d2c4:	40000c00 	.word	0x40000c00
 800d2c8:	40001800 	.word	0x40001800
 800d2cc:	40014000 	.word	0x40014000

0800d2d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d2d0:	b480      	push	{r7}
 800d2d2:	b083      	sub	sp, #12
 800d2d4:	af00      	add	r7, sp, #0
 800d2d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d2d8:	bf00      	nop
 800d2da:	370c      	adds	r7, #12
 800d2dc:	46bd      	mov	sp, r7
 800d2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2e2:	4770      	bx	lr

0800d2e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d2e4:	b480      	push	{r7}
 800d2e6:	b083      	sub	sp, #12
 800d2e8:	af00      	add	r7, sp, #0
 800d2ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d2ec:	bf00      	nop
 800d2ee:	370c      	adds	r7, #12
 800d2f0:	46bd      	mov	sp, r7
 800d2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2f6:	4770      	bx	lr

0800d2f8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800d2f8:	b480      	push	{r7}
 800d2fa:	b083      	sub	sp, #12
 800d2fc:	af00      	add	r7, sp, #0
 800d2fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800d300:	bf00      	nop
 800d302:	370c      	adds	r7, #12
 800d304:	46bd      	mov	sp, r7
 800d306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d30a:	4770      	bx	lr

0800d30c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d30c:	b580      	push	{r7, lr}
 800d30e:	b082      	sub	sp, #8
 800d310:	af00      	add	r7, sp, #0
 800d312:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	2b00      	cmp	r3, #0
 800d318:	d101      	bne.n	800d31e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d31a:	2301      	movs	r3, #1
 800d31c:	e042      	b.n	800d3a4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d324:	2b00      	cmp	r3, #0
 800d326:	d106      	bne.n	800d336 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	2200      	movs	r2, #0
 800d32c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d330:	6878      	ldr	r0, [r7, #4]
 800d332:	f000 f83b 	bl	800d3ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	2224      	movs	r2, #36	@ 0x24
 800d33a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	681b      	ldr	r3, [r3, #0]
 800d342:	681a      	ldr	r2, [r3, #0]
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	681b      	ldr	r3, [r3, #0]
 800d348:	f022 0201 	bic.w	r2, r2, #1
 800d34c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d352:	2b00      	cmp	r3, #0
 800d354:	d002      	beq.n	800d35c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800d356:	6878      	ldr	r0, [r7, #4]
 800d358:	f000 fe28 	bl	800dfac <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d35c:	6878      	ldr	r0, [r7, #4]
 800d35e:	f000 f8bd 	bl	800d4dc <UART_SetConfig>
 800d362:	4603      	mov	r3, r0
 800d364:	2b01      	cmp	r3, #1
 800d366:	d101      	bne.n	800d36c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800d368:	2301      	movs	r3, #1
 800d36a:	e01b      	b.n	800d3a4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	681b      	ldr	r3, [r3, #0]
 800d370:	685a      	ldr	r2, [r3, #4]
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	681b      	ldr	r3, [r3, #0]
 800d376:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800d37a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	681b      	ldr	r3, [r3, #0]
 800d380:	689a      	ldr	r2, [r3, #8]
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	681b      	ldr	r3, [r3, #0]
 800d386:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800d38a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	681b      	ldr	r3, [r3, #0]
 800d390:	681a      	ldr	r2, [r3, #0]
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	681b      	ldr	r3, [r3, #0]
 800d396:	f042 0201 	orr.w	r2, r2, #1
 800d39a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800d39c:	6878      	ldr	r0, [r7, #4]
 800d39e:	f000 fea7 	bl	800e0f0 <UART_CheckIdleState>
 800d3a2:	4603      	mov	r3, r0
}
 800d3a4:	4618      	mov	r0, r3
 800d3a6:	3708      	adds	r7, #8
 800d3a8:	46bd      	mov	sp, r7
 800d3aa:	bd80      	pop	{r7, pc}

0800d3ac <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 800d3ac:	b480      	push	{r7}
 800d3ae:	b083      	sub	sp, #12
 800d3b0:	af00      	add	r7, sp, #0
 800d3b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 800d3b4:	bf00      	nop
 800d3b6:	370c      	adds	r7, #12
 800d3b8:	46bd      	mov	sp, r7
 800d3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3be:	4770      	bx	lr

0800d3c0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d3c0:	b580      	push	{r7, lr}
 800d3c2:	b08a      	sub	sp, #40	@ 0x28
 800d3c4:	af02      	add	r7, sp, #8
 800d3c6:	60f8      	str	r0, [r7, #12]
 800d3c8:	60b9      	str	r1, [r7, #8]
 800d3ca:	603b      	str	r3, [r7, #0]
 800d3cc:	4613      	mov	r3, r2
 800d3ce:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800d3d0:	68fb      	ldr	r3, [r7, #12]
 800d3d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d3d6:	2b20      	cmp	r3, #32
 800d3d8:	d17b      	bne.n	800d4d2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800d3da:	68bb      	ldr	r3, [r7, #8]
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	d002      	beq.n	800d3e6 <HAL_UART_Transmit+0x26>
 800d3e0:	88fb      	ldrh	r3, [r7, #6]
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	d101      	bne.n	800d3ea <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800d3e6:	2301      	movs	r3, #1
 800d3e8:	e074      	b.n	800d4d4 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d3ea:	68fb      	ldr	r3, [r7, #12]
 800d3ec:	2200      	movs	r2, #0
 800d3ee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d3f2:	68fb      	ldr	r3, [r7, #12]
 800d3f4:	2221      	movs	r2, #33	@ 0x21
 800d3f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800d3fa:	f7f5 fbe9 	bl	8002bd0 <HAL_GetTick>
 800d3fe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800d400:	68fb      	ldr	r3, [r7, #12]
 800d402:	88fa      	ldrh	r2, [r7, #6]
 800d404:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800d408:	68fb      	ldr	r3, [r7, #12]
 800d40a:	88fa      	ldrh	r2, [r7, #6]
 800d40c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d410:	68fb      	ldr	r3, [r7, #12]
 800d412:	689b      	ldr	r3, [r3, #8]
 800d414:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d418:	d108      	bne.n	800d42c <HAL_UART_Transmit+0x6c>
 800d41a:	68fb      	ldr	r3, [r7, #12]
 800d41c:	691b      	ldr	r3, [r3, #16]
 800d41e:	2b00      	cmp	r3, #0
 800d420:	d104      	bne.n	800d42c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800d422:	2300      	movs	r3, #0
 800d424:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800d426:	68bb      	ldr	r3, [r7, #8]
 800d428:	61bb      	str	r3, [r7, #24]
 800d42a:	e003      	b.n	800d434 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800d42c:	68bb      	ldr	r3, [r7, #8]
 800d42e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800d430:	2300      	movs	r3, #0
 800d432:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800d434:	e030      	b.n	800d498 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800d436:	683b      	ldr	r3, [r7, #0]
 800d438:	9300      	str	r3, [sp, #0]
 800d43a:	697b      	ldr	r3, [r7, #20]
 800d43c:	2200      	movs	r2, #0
 800d43e:	2180      	movs	r1, #128	@ 0x80
 800d440:	68f8      	ldr	r0, [r7, #12]
 800d442:	f000 feff 	bl	800e244 <UART_WaitOnFlagUntilTimeout>
 800d446:	4603      	mov	r3, r0
 800d448:	2b00      	cmp	r3, #0
 800d44a:	d005      	beq.n	800d458 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800d44c:	68fb      	ldr	r3, [r7, #12]
 800d44e:	2220      	movs	r2, #32
 800d450:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800d454:	2303      	movs	r3, #3
 800d456:	e03d      	b.n	800d4d4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800d458:	69fb      	ldr	r3, [r7, #28]
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	d10b      	bne.n	800d476 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800d45e:	69bb      	ldr	r3, [r7, #24]
 800d460:	881b      	ldrh	r3, [r3, #0]
 800d462:	461a      	mov	r2, r3
 800d464:	68fb      	ldr	r3, [r7, #12]
 800d466:	681b      	ldr	r3, [r3, #0]
 800d468:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d46c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800d46e:	69bb      	ldr	r3, [r7, #24]
 800d470:	3302      	adds	r3, #2
 800d472:	61bb      	str	r3, [r7, #24]
 800d474:	e007      	b.n	800d486 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800d476:	69fb      	ldr	r3, [r7, #28]
 800d478:	781a      	ldrb	r2, [r3, #0]
 800d47a:	68fb      	ldr	r3, [r7, #12]
 800d47c:	681b      	ldr	r3, [r3, #0]
 800d47e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800d480:	69fb      	ldr	r3, [r7, #28]
 800d482:	3301      	adds	r3, #1
 800d484:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800d486:	68fb      	ldr	r3, [r7, #12]
 800d488:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800d48c:	b29b      	uxth	r3, r3
 800d48e:	3b01      	subs	r3, #1
 800d490:	b29a      	uxth	r2, r3
 800d492:	68fb      	ldr	r3, [r7, #12]
 800d494:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800d498:	68fb      	ldr	r3, [r7, #12]
 800d49a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800d49e:	b29b      	uxth	r3, r3
 800d4a0:	2b00      	cmp	r3, #0
 800d4a2:	d1c8      	bne.n	800d436 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800d4a4:	683b      	ldr	r3, [r7, #0]
 800d4a6:	9300      	str	r3, [sp, #0]
 800d4a8:	697b      	ldr	r3, [r7, #20]
 800d4aa:	2200      	movs	r2, #0
 800d4ac:	2140      	movs	r1, #64	@ 0x40
 800d4ae:	68f8      	ldr	r0, [r7, #12]
 800d4b0:	f000 fec8 	bl	800e244 <UART_WaitOnFlagUntilTimeout>
 800d4b4:	4603      	mov	r3, r0
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	d005      	beq.n	800d4c6 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800d4ba:	68fb      	ldr	r3, [r7, #12]
 800d4bc:	2220      	movs	r2, #32
 800d4be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800d4c2:	2303      	movs	r3, #3
 800d4c4:	e006      	b.n	800d4d4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800d4c6:	68fb      	ldr	r3, [r7, #12]
 800d4c8:	2220      	movs	r2, #32
 800d4ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800d4ce:	2300      	movs	r3, #0
 800d4d0:	e000      	b.n	800d4d4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800d4d2:	2302      	movs	r3, #2
  }
}
 800d4d4:	4618      	mov	r0, r3
 800d4d6:	3720      	adds	r7, #32
 800d4d8:	46bd      	mov	sp, r7
 800d4da:	bd80      	pop	{r7, pc}

0800d4dc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d4dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d4e0:	b092      	sub	sp, #72	@ 0x48
 800d4e2:	af00      	add	r7, sp, #0
 800d4e4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d4e6:	2300      	movs	r3, #0
 800d4e8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d4ec:	697b      	ldr	r3, [r7, #20]
 800d4ee:	689a      	ldr	r2, [r3, #8]
 800d4f0:	697b      	ldr	r3, [r7, #20]
 800d4f2:	691b      	ldr	r3, [r3, #16]
 800d4f4:	431a      	orrs	r2, r3
 800d4f6:	697b      	ldr	r3, [r7, #20]
 800d4f8:	695b      	ldr	r3, [r3, #20]
 800d4fa:	431a      	orrs	r2, r3
 800d4fc:	697b      	ldr	r3, [r7, #20]
 800d4fe:	69db      	ldr	r3, [r3, #28]
 800d500:	4313      	orrs	r3, r2
 800d502:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d504:	697b      	ldr	r3, [r7, #20]
 800d506:	681b      	ldr	r3, [r3, #0]
 800d508:	681a      	ldr	r2, [r3, #0]
 800d50a:	4bbe      	ldr	r3, [pc, #760]	@ (800d804 <UART_SetConfig+0x328>)
 800d50c:	4013      	ands	r3, r2
 800d50e:	697a      	ldr	r2, [r7, #20]
 800d510:	6812      	ldr	r2, [r2, #0]
 800d512:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800d514:	430b      	orrs	r3, r1
 800d516:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d518:	697b      	ldr	r3, [r7, #20]
 800d51a:	681b      	ldr	r3, [r3, #0]
 800d51c:	685b      	ldr	r3, [r3, #4]
 800d51e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800d522:	697b      	ldr	r3, [r7, #20]
 800d524:	68da      	ldr	r2, [r3, #12]
 800d526:	697b      	ldr	r3, [r7, #20]
 800d528:	681b      	ldr	r3, [r3, #0]
 800d52a:	430a      	orrs	r2, r1
 800d52c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d52e:	697b      	ldr	r3, [r7, #20]
 800d530:	699b      	ldr	r3, [r3, #24]
 800d532:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d534:	697b      	ldr	r3, [r7, #20]
 800d536:	681b      	ldr	r3, [r3, #0]
 800d538:	4ab3      	ldr	r2, [pc, #716]	@ (800d808 <UART_SetConfig+0x32c>)
 800d53a:	4293      	cmp	r3, r2
 800d53c:	d004      	beq.n	800d548 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800d53e:	697b      	ldr	r3, [r7, #20]
 800d540:	6a1b      	ldr	r3, [r3, #32]
 800d542:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d544:	4313      	orrs	r3, r2
 800d546:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d548:	697b      	ldr	r3, [r7, #20]
 800d54a:	681b      	ldr	r3, [r3, #0]
 800d54c:	689a      	ldr	r2, [r3, #8]
 800d54e:	4baf      	ldr	r3, [pc, #700]	@ (800d80c <UART_SetConfig+0x330>)
 800d550:	4013      	ands	r3, r2
 800d552:	697a      	ldr	r2, [r7, #20]
 800d554:	6812      	ldr	r2, [r2, #0]
 800d556:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800d558:	430b      	orrs	r3, r1
 800d55a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800d55c:	697b      	ldr	r3, [r7, #20]
 800d55e:	681b      	ldr	r3, [r3, #0]
 800d560:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d562:	f023 010f 	bic.w	r1, r3, #15
 800d566:	697b      	ldr	r3, [r7, #20]
 800d568:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d56a:	697b      	ldr	r3, [r7, #20]
 800d56c:	681b      	ldr	r3, [r3, #0]
 800d56e:	430a      	orrs	r2, r1
 800d570:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d572:	697b      	ldr	r3, [r7, #20]
 800d574:	681b      	ldr	r3, [r3, #0]
 800d576:	4aa6      	ldr	r2, [pc, #664]	@ (800d810 <UART_SetConfig+0x334>)
 800d578:	4293      	cmp	r3, r2
 800d57a:	d177      	bne.n	800d66c <UART_SetConfig+0x190>
 800d57c:	4ba5      	ldr	r3, [pc, #660]	@ (800d814 <UART_SetConfig+0x338>)
 800d57e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d580:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d584:	2b28      	cmp	r3, #40	@ 0x28
 800d586:	d86d      	bhi.n	800d664 <UART_SetConfig+0x188>
 800d588:	a201      	add	r2, pc, #4	@ (adr r2, 800d590 <UART_SetConfig+0xb4>)
 800d58a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d58e:	bf00      	nop
 800d590:	0800d635 	.word	0x0800d635
 800d594:	0800d665 	.word	0x0800d665
 800d598:	0800d665 	.word	0x0800d665
 800d59c:	0800d665 	.word	0x0800d665
 800d5a0:	0800d665 	.word	0x0800d665
 800d5a4:	0800d665 	.word	0x0800d665
 800d5a8:	0800d665 	.word	0x0800d665
 800d5ac:	0800d665 	.word	0x0800d665
 800d5b0:	0800d63d 	.word	0x0800d63d
 800d5b4:	0800d665 	.word	0x0800d665
 800d5b8:	0800d665 	.word	0x0800d665
 800d5bc:	0800d665 	.word	0x0800d665
 800d5c0:	0800d665 	.word	0x0800d665
 800d5c4:	0800d665 	.word	0x0800d665
 800d5c8:	0800d665 	.word	0x0800d665
 800d5cc:	0800d665 	.word	0x0800d665
 800d5d0:	0800d645 	.word	0x0800d645
 800d5d4:	0800d665 	.word	0x0800d665
 800d5d8:	0800d665 	.word	0x0800d665
 800d5dc:	0800d665 	.word	0x0800d665
 800d5e0:	0800d665 	.word	0x0800d665
 800d5e4:	0800d665 	.word	0x0800d665
 800d5e8:	0800d665 	.word	0x0800d665
 800d5ec:	0800d665 	.word	0x0800d665
 800d5f0:	0800d64d 	.word	0x0800d64d
 800d5f4:	0800d665 	.word	0x0800d665
 800d5f8:	0800d665 	.word	0x0800d665
 800d5fc:	0800d665 	.word	0x0800d665
 800d600:	0800d665 	.word	0x0800d665
 800d604:	0800d665 	.word	0x0800d665
 800d608:	0800d665 	.word	0x0800d665
 800d60c:	0800d665 	.word	0x0800d665
 800d610:	0800d655 	.word	0x0800d655
 800d614:	0800d665 	.word	0x0800d665
 800d618:	0800d665 	.word	0x0800d665
 800d61c:	0800d665 	.word	0x0800d665
 800d620:	0800d665 	.word	0x0800d665
 800d624:	0800d665 	.word	0x0800d665
 800d628:	0800d665 	.word	0x0800d665
 800d62c:	0800d665 	.word	0x0800d665
 800d630:	0800d65d 	.word	0x0800d65d
 800d634:	2301      	movs	r3, #1
 800d636:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d63a:	e222      	b.n	800da82 <UART_SetConfig+0x5a6>
 800d63c:	2304      	movs	r3, #4
 800d63e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d642:	e21e      	b.n	800da82 <UART_SetConfig+0x5a6>
 800d644:	2308      	movs	r3, #8
 800d646:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d64a:	e21a      	b.n	800da82 <UART_SetConfig+0x5a6>
 800d64c:	2310      	movs	r3, #16
 800d64e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d652:	e216      	b.n	800da82 <UART_SetConfig+0x5a6>
 800d654:	2320      	movs	r3, #32
 800d656:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d65a:	e212      	b.n	800da82 <UART_SetConfig+0x5a6>
 800d65c:	2340      	movs	r3, #64	@ 0x40
 800d65e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d662:	e20e      	b.n	800da82 <UART_SetConfig+0x5a6>
 800d664:	2380      	movs	r3, #128	@ 0x80
 800d666:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d66a:	e20a      	b.n	800da82 <UART_SetConfig+0x5a6>
 800d66c:	697b      	ldr	r3, [r7, #20]
 800d66e:	681b      	ldr	r3, [r3, #0]
 800d670:	4a69      	ldr	r2, [pc, #420]	@ (800d818 <UART_SetConfig+0x33c>)
 800d672:	4293      	cmp	r3, r2
 800d674:	d130      	bne.n	800d6d8 <UART_SetConfig+0x1fc>
 800d676:	4b67      	ldr	r3, [pc, #412]	@ (800d814 <UART_SetConfig+0x338>)
 800d678:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d67a:	f003 0307 	and.w	r3, r3, #7
 800d67e:	2b05      	cmp	r3, #5
 800d680:	d826      	bhi.n	800d6d0 <UART_SetConfig+0x1f4>
 800d682:	a201      	add	r2, pc, #4	@ (adr r2, 800d688 <UART_SetConfig+0x1ac>)
 800d684:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d688:	0800d6a1 	.word	0x0800d6a1
 800d68c:	0800d6a9 	.word	0x0800d6a9
 800d690:	0800d6b1 	.word	0x0800d6b1
 800d694:	0800d6b9 	.word	0x0800d6b9
 800d698:	0800d6c1 	.word	0x0800d6c1
 800d69c:	0800d6c9 	.word	0x0800d6c9
 800d6a0:	2300      	movs	r3, #0
 800d6a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d6a6:	e1ec      	b.n	800da82 <UART_SetConfig+0x5a6>
 800d6a8:	2304      	movs	r3, #4
 800d6aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d6ae:	e1e8      	b.n	800da82 <UART_SetConfig+0x5a6>
 800d6b0:	2308      	movs	r3, #8
 800d6b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d6b6:	e1e4      	b.n	800da82 <UART_SetConfig+0x5a6>
 800d6b8:	2310      	movs	r3, #16
 800d6ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d6be:	e1e0      	b.n	800da82 <UART_SetConfig+0x5a6>
 800d6c0:	2320      	movs	r3, #32
 800d6c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d6c6:	e1dc      	b.n	800da82 <UART_SetConfig+0x5a6>
 800d6c8:	2340      	movs	r3, #64	@ 0x40
 800d6ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d6ce:	e1d8      	b.n	800da82 <UART_SetConfig+0x5a6>
 800d6d0:	2380      	movs	r3, #128	@ 0x80
 800d6d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d6d6:	e1d4      	b.n	800da82 <UART_SetConfig+0x5a6>
 800d6d8:	697b      	ldr	r3, [r7, #20]
 800d6da:	681b      	ldr	r3, [r3, #0]
 800d6dc:	4a4f      	ldr	r2, [pc, #316]	@ (800d81c <UART_SetConfig+0x340>)
 800d6de:	4293      	cmp	r3, r2
 800d6e0:	d130      	bne.n	800d744 <UART_SetConfig+0x268>
 800d6e2:	4b4c      	ldr	r3, [pc, #304]	@ (800d814 <UART_SetConfig+0x338>)
 800d6e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d6e6:	f003 0307 	and.w	r3, r3, #7
 800d6ea:	2b05      	cmp	r3, #5
 800d6ec:	d826      	bhi.n	800d73c <UART_SetConfig+0x260>
 800d6ee:	a201      	add	r2, pc, #4	@ (adr r2, 800d6f4 <UART_SetConfig+0x218>)
 800d6f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d6f4:	0800d70d 	.word	0x0800d70d
 800d6f8:	0800d715 	.word	0x0800d715
 800d6fc:	0800d71d 	.word	0x0800d71d
 800d700:	0800d725 	.word	0x0800d725
 800d704:	0800d72d 	.word	0x0800d72d
 800d708:	0800d735 	.word	0x0800d735
 800d70c:	2300      	movs	r3, #0
 800d70e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d712:	e1b6      	b.n	800da82 <UART_SetConfig+0x5a6>
 800d714:	2304      	movs	r3, #4
 800d716:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d71a:	e1b2      	b.n	800da82 <UART_SetConfig+0x5a6>
 800d71c:	2308      	movs	r3, #8
 800d71e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d722:	e1ae      	b.n	800da82 <UART_SetConfig+0x5a6>
 800d724:	2310      	movs	r3, #16
 800d726:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d72a:	e1aa      	b.n	800da82 <UART_SetConfig+0x5a6>
 800d72c:	2320      	movs	r3, #32
 800d72e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d732:	e1a6      	b.n	800da82 <UART_SetConfig+0x5a6>
 800d734:	2340      	movs	r3, #64	@ 0x40
 800d736:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d73a:	e1a2      	b.n	800da82 <UART_SetConfig+0x5a6>
 800d73c:	2380      	movs	r3, #128	@ 0x80
 800d73e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d742:	e19e      	b.n	800da82 <UART_SetConfig+0x5a6>
 800d744:	697b      	ldr	r3, [r7, #20]
 800d746:	681b      	ldr	r3, [r3, #0]
 800d748:	4a35      	ldr	r2, [pc, #212]	@ (800d820 <UART_SetConfig+0x344>)
 800d74a:	4293      	cmp	r3, r2
 800d74c:	d130      	bne.n	800d7b0 <UART_SetConfig+0x2d4>
 800d74e:	4b31      	ldr	r3, [pc, #196]	@ (800d814 <UART_SetConfig+0x338>)
 800d750:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d752:	f003 0307 	and.w	r3, r3, #7
 800d756:	2b05      	cmp	r3, #5
 800d758:	d826      	bhi.n	800d7a8 <UART_SetConfig+0x2cc>
 800d75a:	a201      	add	r2, pc, #4	@ (adr r2, 800d760 <UART_SetConfig+0x284>)
 800d75c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d760:	0800d779 	.word	0x0800d779
 800d764:	0800d781 	.word	0x0800d781
 800d768:	0800d789 	.word	0x0800d789
 800d76c:	0800d791 	.word	0x0800d791
 800d770:	0800d799 	.word	0x0800d799
 800d774:	0800d7a1 	.word	0x0800d7a1
 800d778:	2300      	movs	r3, #0
 800d77a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d77e:	e180      	b.n	800da82 <UART_SetConfig+0x5a6>
 800d780:	2304      	movs	r3, #4
 800d782:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d786:	e17c      	b.n	800da82 <UART_SetConfig+0x5a6>
 800d788:	2308      	movs	r3, #8
 800d78a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d78e:	e178      	b.n	800da82 <UART_SetConfig+0x5a6>
 800d790:	2310      	movs	r3, #16
 800d792:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d796:	e174      	b.n	800da82 <UART_SetConfig+0x5a6>
 800d798:	2320      	movs	r3, #32
 800d79a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d79e:	e170      	b.n	800da82 <UART_SetConfig+0x5a6>
 800d7a0:	2340      	movs	r3, #64	@ 0x40
 800d7a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d7a6:	e16c      	b.n	800da82 <UART_SetConfig+0x5a6>
 800d7a8:	2380      	movs	r3, #128	@ 0x80
 800d7aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d7ae:	e168      	b.n	800da82 <UART_SetConfig+0x5a6>
 800d7b0:	697b      	ldr	r3, [r7, #20]
 800d7b2:	681b      	ldr	r3, [r3, #0]
 800d7b4:	4a1b      	ldr	r2, [pc, #108]	@ (800d824 <UART_SetConfig+0x348>)
 800d7b6:	4293      	cmp	r3, r2
 800d7b8:	d142      	bne.n	800d840 <UART_SetConfig+0x364>
 800d7ba:	4b16      	ldr	r3, [pc, #88]	@ (800d814 <UART_SetConfig+0x338>)
 800d7bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d7be:	f003 0307 	and.w	r3, r3, #7
 800d7c2:	2b05      	cmp	r3, #5
 800d7c4:	d838      	bhi.n	800d838 <UART_SetConfig+0x35c>
 800d7c6:	a201      	add	r2, pc, #4	@ (adr r2, 800d7cc <UART_SetConfig+0x2f0>)
 800d7c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d7cc:	0800d7e5 	.word	0x0800d7e5
 800d7d0:	0800d7ed 	.word	0x0800d7ed
 800d7d4:	0800d7f5 	.word	0x0800d7f5
 800d7d8:	0800d7fd 	.word	0x0800d7fd
 800d7dc:	0800d829 	.word	0x0800d829
 800d7e0:	0800d831 	.word	0x0800d831
 800d7e4:	2300      	movs	r3, #0
 800d7e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d7ea:	e14a      	b.n	800da82 <UART_SetConfig+0x5a6>
 800d7ec:	2304      	movs	r3, #4
 800d7ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d7f2:	e146      	b.n	800da82 <UART_SetConfig+0x5a6>
 800d7f4:	2308      	movs	r3, #8
 800d7f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d7fa:	e142      	b.n	800da82 <UART_SetConfig+0x5a6>
 800d7fc:	2310      	movs	r3, #16
 800d7fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d802:	e13e      	b.n	800da82 <UART_SetConfig+0x5a6>
 800d804:	cfff69f3 	.word	0xcfff69f3
 800d808:	58000c00 	.word	0x58000c00
 800d80c:	11fff4ff 	.word	0x11fff4ff
 800d810:	40011000 	.word	0x40011000
 800d814:	58024400 	.word	0x58024400
 800d818:	40004400 	.word	0x40004400
 800d81c:	40004800 	.word	0x40004800
 800d820:	40004c00 	.word	0x40004c00
 800d824:	40005000 	.word	0x40005000
 800d828:	2320      	movs	r3, #32
 800d82a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d82e:	e128      	b.n	800da82 <UART_SetConfig+0x5a6>
 800d830:	2340      	movs	r3, #64	@ 0x40
 800d832:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d836:	e124      	b.n	800da82 <UART_SetConfig+0x5a6>
 800d838:	2380      	movs	r3, #128	@ 0x80
 800d83a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d83e:	e120      	b.n	800da82 <UART_SetConfig+0x5a6>
 800d840:	697b      	ldr	r3, [r7, #20]
 800d842:	681b      	ldr	r3, [r3, #0]
 800d844:	4acb      	ldr	r2, [pc, #812]	@ (800db74 <UART_SetConfig+0x698>)
 800d846:	4293      	cmp	r3, r2
 800d848:	d176      	bne.n	800d938 <UART_SetConfig+0x45c>
 800d84a:	4bcb      	ldr	r3, [pc, #812]	@ (800db78 <UART_SetConfig+0x69c>)
 800d84c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d84e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d852:	2b28      	cmp	r3, #40	@ 0x28
 800d854:	d86c      	bhi.n	800d930 <UART_SetConfig+0x454>
 800d856:	a201      	add	r2, pc, #4	@ (adr r2, 800d85c <UART_SetConfig+0x380>)
 800d858:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d85c:	0800d901 	.word	0x0800d901
 800d860:	0800d931 	.word	0x0800d931
 800d864:	0800d931 	.word	0x0800d931
 800d868:	0800d931 	.word	0x0800d931
 800d86c:	0800d931 	.word	0x0800d931
 800d870:	0800d931 	.word	0x0800d931
 800d874:	0800d931 	.word	0x0800d931
 800d878:	0800d931 	.word	0x0800d931
 800d87c:	0800d909 	.word	0x0800d909
 800d880:	0800d931 	.word	0x0800d931
 800d884:	0800d931 	.word	0x0800d931
 800d888:	0800d931 	.word	0x0800d931
 800d88c:	0800d931 	.word	0x0800d931
 800d890:	0800d931 	.word	0x0800d931
 800d894:	0800d931 	.word	0x0800d931
 800d898:	0800d931 	.word	0x0800d931
 800d89c:	0800d911 	.word	0x0800d911
 800d8a0:	0800d931 	.word	0x0800d931
 800d8a4:	0800d931 	.word	0x0800d931
 800d8a8:	0800d931 	.word	0x0800d931
 800d8ac:	0800d931 	.word	0x0800d931
 800d8b0:	0800d931 	.word	0x0800d931
 800d8b4:	0800d931 	.word	0x0800d931
 800d8b8:	0800d931 	.word	0x0800d931
 800d8bc:	0800d919 	.word	0x0800d919
 800d8c0:	0800d931 	.word	0x0800d931
 800d8c4:	0800d931 	.word	0x0800d931
 800d8c8:	0800d931 	.word	0x0800d931
 800d8cc:	0800d931 	.word	0x0800d931
 800d8d0:	0800d931 	.word	0x0800d931
 800d8d4:	0800d931 	.word	0x0800d931
 800d8d8:	0800d931 	.word	0x0800d931
 800d8dc:	0800d921 	.word	0x0800d921
 800d8e0:	0800d931 	.word	0x0800d931
 800d8e4:	0800d931 	.word	0x0800d931
 800d8e8:	0800d931 	.word	0x0800d931
 800d8ec:	0800d931 	.word	0x0800d931
 800d8f0:	0800d931 	.word	0x0800d931
 800d8f4:	0800d931 	.word	0x0800d931
 800d8f8:	0800d931 	.word	0x0800d931
 800d8fc:	0800d929 	.word	0x0800d929
 800d900:	2301      	movs	r3, #1
 800d902:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d906:	e0bc      	b.n	800da82 <UART_SetConfig+0x5a6>
 800d908:	2304      	movs	r3, #4
 800d90a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d90e:	e0b8      	b.n	800da82 <UART_SetConfig+0x5a6>
 800d910:	2308      	movs	r3, #8
 800d912:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d916:	e0b4      	b.n	800da82 <UART_SetConfig+0x5a6>
 800d918:	2310      	movs	r3, #16
 800d91a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d91e:	e0b0      	b.n	800da82 <UART_SetConfig+0x5a6>
 800d920:	2320      	movs	r3, #32
 800d922:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d926:	e0ac      	b.n	800da82 <UART_SetConfig+0x5a6>
 800d928:	2340      	movs	r3, #64	@ 0x40
 800d92a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d92e:	e0a8      	b.n	800da82 <UART_SetConfig+0x5a6>
 800d930:	2380      	movs	r3, #128	@ 0x80
 800d932:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d936:	e0a4      	b.n	800da82 <UART_SetConfig+0x5a6>
 800d938:	697b      	ldr	r3, [r7, #20]
 800d93a:	681b      	ldr	r3, [r3, #0]
 800d93c:	4a8f      	ldr	r2, [pc, #572]	@ (800db7c <UART_SetConfig+0x6a0>)
 800d93e:	4293      	cmp	r3, r2
 800d940:	d130      	bne.n	800d9a4 <UART_SetConfig+0x4c8>
 800d942:	4b8d      	ldr	r3, [pc, #564]	@ (800db78 <UART_SetConfig+0x69c>)
 800d944:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d946:	f003 0307 	and.w	r3, r3, #7
 800d94a:	2b05      	cmp	r3, #5
 800d94c:	d826      	bhi.n	800d99c <UART_SetConfig+0x4c0>
 800d94e:	a201      	add	r2, pc, #4	@ (adr r2, 800d954 <UART_SetConfig+0x478>)
 800d950:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d954:	0800d96d 	.word	0x0800d96d
 800d958:	0800d975 	.word	0x0800d975
 800d95c:	0800d97d 	.word	0x0800d97d
 800d960:	0800d985 	.word	0x0800d985
 800d964:	0800d98d 	.word	0x0800d98d
 800d968:	0800d995 	.word	0x0800d995
 800d96c:	2300      	movs	r3, #0
 800d96e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d972:	e086      	b.n	800da82 <UART_SetConfig+0x5a6>
 800d974:	2304      	movs	r3, #4
 800d976:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d97a:	e082      	b.n	800da82 <UART_SetConfig+0x5a6>
 800d97c:	2308      	movs	r3, #8
 800d97e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d982:	e07e      	b.n	800da82 <UART_SetConfig+0x5a6>
 800d984:	2310      	movs	r3, #16
 800d986:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d98a:	e07a      	b.n	800da82 <UART_SetConfig+0x5a6>
 800d98c:	2320      	movs	r3, #32
 800d98e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d992:	e076      	b.n	800da82 <UART_SetConfig+0x5a6>
 800d994:	2340      	movs	r3, #64	@ 0x40
 800d996:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d99a:	e072      	b.n	800da82 <UART_SetConfig+0x5a6>
 800d99c:	2380      	movs	r3, #128	@ 0x80
 800d99e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d9a2:	e06e      	b.n	800da82 <UART_SetConfig+0x5a6>
 800d9a4:	697b      	ldr	r3, [r7, #20]
 800d9a6:	681b      	ldr	r3, [r3, #0]
 800d9a8:	4a75      	ldr	r2, [pc, #468]	@ (800db80 <UART_SetConfig+0x6a4>)
 800d9aa:	4293      	cmp	r3, r2
 800d9ac:	d130      	bne.n	800da10 <UART_SetConfig+0x534>
 800d9ae:	4b72      	ldr	r3, [pc, #456]	@ (800db78 <UART_SetConfig+0x69c>)
 800d9b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d9b2:	f003 0307 	and.w	r3, r3, #7
 800d9b6:	2b05      	cmp	r3, #5
 800d9b8:	d826      	bhi.n	800da08 <UART_SetConfig+0x52c>
 800d9ba:	a201      	add	r2, pc, #4	@ (adr r2, 800d9c0 <UART_SetConfig+0x4e4>)
 800d9bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d9c0:	0800d9d9 	.word	0x0800d9d9
 800d9c4:	0800d9e1 	.word	0x0800d9e1
 800d9c8:	0800d9e9 	.word	0x0800d9e9
 800d9cc:	0800d9f1 	.word	0x0800d9f1
 800d9d0:	0800d9f9 	.word	0x0800d9f9
 800d9d4:	0800da01 	.word	0x0800da01
 800d9d8:	2300      	movs	r3, #0
 800d9da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d9de:	e050      	b.n	800da82 <UART_SetConfig+0x5a6>
 800d9e0:	2304      	movs	r3, #4
 800d9e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d9e6:	e04c      	b.n	800da82 <UART_SetConfig+0x5a6>
 800d9e8:	2308      	movs	r3, #8
 800d9ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d9ee:	e048      	b.n	800da82 <UART_SetConfig+0x5a6>
 800d9f0:	2310      	movs	r3, #16
 800d9f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d9f6:	e044      	b.n	800da82 <UART_SetConfig+0x5a6>
 800d9f8:	2320      	movs	r3, #32
 800d9fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d9fe:	e040      	b.n	800da82 <UART_SetConfig+0x5a6>
 800da00:	2340      	movs	r3, #64	@ 0x40
 800da02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da06:	e03c      	b.n	800da82 <UART_SetConfig+0x5a6>
 800da08:	2380      	movs	r3, #128	@ 0x80
 800da0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da0e:	e038      	b.n	800da82 <UART_SetConfig+0x5a6>
 800da10:	697b      	ldr	r3, [r7, #20]
 800da12:	681b      	ldr	r3, [r3, #0]
 800da14:	4a5b      	ldr	r2, [pc, #364]	@ (800db84 <UART_SetConfig+0x6a8>)
 800da16:	4293      	cmp	r3, r2
 800da18:	d130      	bne.n	800da7c <UART_SetConfig+0x5a0>
 800da1a:	4b57      	ldr	r3, [pc, #348]	@ (800db78 <UART_SetConfig+0x69c>)
 800da1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800da1e:	f003 0307 	and.w	r3, r3, #7
 800da22:	2b05      	cmp	r3, #5
 800da24:	d826      	bhi.n	800da74 <UART_SetConfig+0x598>
 800da26:	a201      	add	r2, pc, #4	@ (adr r2, 800da2c <UART_SetConfig+0x550>)
 800da28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da2c:	0800da45 	.word	0x0800da45
 800da30:	0800da4d 	.word	0x0800da4d
 800da34:	0800da55 	.word	0x0800da55
 800da38:	0800da5d 	.word	0x0800da5d
 800da3c:	0800da65 	.word	0x0800da65
 800da40:	0800da6d 	.word	0x0800da6d
 800da44:	2302      	movs	r3, #2
 800da46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da4a:	e01a      	b.n	800da82 <UART_SetConfig+0x5a6>
 800da4c:	2304      	movs	r3, #4
 800da4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da52:	e016      	b.n	800da82 <UART_SetConfig+0x5a6>
 800da54:	2308      	movs	r3, #8
 800da56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da5a:	e012      	b.n	800da82 <UART_SetConfig+0x5a6>
 800da5c:	2310      	movs	r3, #16
 800da5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da62:	e00e      	b.n	800da82 <UART_SetConfig+0x5a6>
 800da64:	2320      	movs	r3, #32
 800da66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da6a:	e00a      	b.n	800da82 <UART_SetConfig+0x5a6>
 800da6c:	2340      	movs	r3, #64	@ 0x40
 800da6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da72:	e006      	b.n	800da82 <UART_SetConfig+0x5a6>
 800da74:	2380      	movs	r3, #128	@ 0x80
 800da76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da7a:	e002      	b.n	800da82 <UART_SetConfig+0x5a6>
 800da7c:	2380      	movs	r3, #128	@ 0x80
 800da7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800da82:	697b      	ldr	r3, [r7, #20]
 800da84:	681b      	ldr	r3, [r3, #0]
 800da86:	4a3f      	ldr	r2, [pc, #252]	@ (800db84 <UART_SetConfig+0x6a8>)
 800da88:	4293      	cmp	r3, r2
 800da8a:	f040 80f8 	bne.w	800dc7e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800da8e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800da92:	2b20      	cmp	r3, #32
 800da94:	dc46      	bgt.n	800db24 <UART_SetConfig+0x648>
 800da96:	2b02      	cmp	r3, #2
 800da98:	f2c0 8082 	blt.w	800dba0 <UART_SetConfig+0x6c4>
 800da9c:	3b02      	subs	r3, #2
 800da9e:	2b1e      	cmp	r3, #30
 800daa0:	d87e      	bhi.n	800dba0 <UART_SetConfig+0x6c4>
 800daa2:	a201      	add	r2, pc, #4	@ (adr r2, 800daa8 <UART_SetConfig+0x5cc>)
 800daa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800daa8:	0800db2b 	.word	0x0800db2b
 800daac:	0800dba1 	.word	0x0800dba1
 800dab0:	0800db33 	.word	0x0800db33
 800dab4:	0800dba1 	.word	0x0800dba1
 800dab8:	0800dba1 	.word	0x0800dba1
 800dabc:	0800dba1 	.word	0x0800dba1
 800dac0:	0800db43 	.word	0x0800db43
 800dac4:	0800dba1 	.word	0x0800dba1
 800dac8:	0800dba1 	.word	0x0800dba1
 800dacc:	0800dba1 	.word	0x0800dba1
 800dad0:	0800dba1 	.word	0x0800dba1
 800dad4:	0800dba1 	.word	0x0800dba1
 800dad8:	0800dba1 	.word	0x0800dba1
 800dadc:	0800dba1 	.word	0x0800dba1
 800dae0:	0800db53 	.word	0x0800db53
 800dae4:	0800dba1 	.word	0x0800dba1
 800dae8:	0800dba1 	.word	0x0800dba1
 800daec:	0800dba1 	.word	0x0800dba1
 800daf0:	0800dba1 	.word	0x0800dba1
 800daf4:	0800dba1 	.word	0x0800dba1
 800daf8:	0800dba1 	.word	0x0800dba1
 800dafc:	0800dba1 	.word	0x0800dba1
 800db00:	0800dba1 	.word	0x0800dba1
 800db04:	0800dba1 	.word	0x0800dba1
 800db08:	0800dba1 	.word	0x0800dba1
 800db0c:	0800dba1 	.word	0x0800dba1
 800db10:	0800dba1 	.word	0x0800dba1
 800db14:	0800dba1 	.word	0x0800dba1
 800db18:	0800dba1 	.word	0x0800dba1
 800db1c:	0800dba1 	.word	0x0800dba1
 800db20:	0800db93 	.word	0x0800db93
 800db24:	2b40      	cmp	r3, #64	@ 0x40
 800db26:	d037      	beq.n	800db98 <UART_SetConfig+0x6bc>
 800db28:	e03a      	b.n	800dba0 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800db2a:	f7fd fac9 	bl	800b0c0 <HAL_RCCEx_GetD3PCLK1Freq>
 800db2e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800db30:	e03c      	b.n	800dbac <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800db32:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800db36:	4618      	mov	r0, r3
 800db38:	f7fd fad8 	bl	800b0ec <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800db3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800db40:	e034      	b.n	800dbac <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800db42:	f107 0318 	add.w	r3, r7, #24
 800db46:	4618      	mov	r0, r3
 800db48:	f7fd fc24 	bl	800b394 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800db4c:	69fb      	ldr	r3, [r7, #28]
 800db4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800db50:	e02c      	b.n	800dbac <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800db52:	4b09      	ldr	r3, [pc, #36]	@ (800db78 <UART_SetConfig+0x69c>)
 800db54:	681b      	ldr	r3, [r3, #0]
 800db56:	f003 0320 	and.w	r3, r3, #32
 800db5a:	2b00      	cmp	r3, #0
 800db5c:	d016      	beq.n	800db8c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800db5e:	4b06      	ldr	r3, [pc, #24]	@ (800db78 <UART_SetConfig+0x69c>)
 800db60:	681b      	ldr	r3, [r3, #0]
 800db62:	08db      	lsrs	r3, r3, #3
 800db64:	f003 0303 	and.w	r3, r3, #3
 800db68:	4a07      	ldr	r2, [pc, #28]	@ (800db88 <UART_SetConfig+0x6ac>)
 800db6a:	fa22 f303 	lsr.w	r3, r2, r3
 800db6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800db70:	e01c      	b.n	800dbac <UART_SetConfig+0x6d0>
 800db72:	bf00      	nop
 800db74:	40011400 	.word	0x40011400
 800db78:	58024400 	.word	0x58024400
 800db7c:	40007800 	.word	0x40007800
 800db80:	40007c00 	.word	0x40007c00
 800db84:	58000c00 	.word	0x58000c00
 800db88:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800db8c:	4b9d      	ldr	r3, [pc, #628]	@ (800de04 <UART_SetConfig+0x928>)
 800db8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800db90:	e00c      	b.n	800dbac <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800db92:	4b9d      	ldr	r3, [pc, #628]	@ (800de08 <UART_SetConfig+0x92c>)
 800db94:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800db96:	e009      	b.n	800dbac <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800db98:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800db9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800db9e:	e005      	b.n	800dbac <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800dba0:	2300      	movs	r3, #0
 800dba2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800dba4:	2301      	movs	r3, #1
 800dba6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800dbaa:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800dbac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dbae:	2b00      	cmp	r3, #0
 800dbb0:	f000 81de 	beq.w	800df70 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800dbb4:	697b      	ldr	r3, [r7, #20]
 800dbb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dbb8:	4a94      	ldr	r2, [pc, #592]	@ (800de0c <UART_SetConfig+0x930>)
 800dbba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800dbbe:	461a      	mov	r2, r3
 800dbc0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dbc2:	fbb3 f3f2 	udiv	r3, r3, r2
 800dbc6:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800dbc8:	697b      	ldr	r3, [r7, #20]
 800dbca:	685a      	ldr	r2, [r3, #4]
 800dbcc:	4613      	mov	r3, r2
 800dbce:	005b      	lsls	r3, r3, #1
 800dbd0:	4413      	add	r3, r2
 800dbd2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dbd4:	429a      	cmp	r2, r3
 800dbd6:	d305      	bcc.n	800dbe4 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800dbd8:	697b      	ldr	r3, [r7, #20]
 800dbda:	685b      	ldr	r3, [r3, #4]
 800dbdc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800dbde:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dbe0:	429a      	cmp	r2, r3
 800dbe2:	d903      	bls.n	800dbec <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800dbe4:	2301      	movs	r3, #1
 800dbe6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800dbea:	e1c1      	b.n	800df70 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800dbec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dbee:	2200      	movs	r2, #0
 800dbf0:	60bb      	str	r3, [r7, #8]
 800dbf2:	60fa      	str	r2, [r7, #12]
 800dbf4:	697b      	ldr	r3, [r7, #20]
 800dbf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dbf8:	4a84      	ldr	r2, [pc, #528]	@ (800de0c <UART_SetConfig+0x930>)
 800dbfa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800dbfe:	b29b      	uxth	r3, r3
 800dc00:	2200      	movs	r2, #0
 800dc02:	603b      	str	r3, [r7, #0]
 800dc04:	607a      	str	r2, [r7, #4]
 800dc06:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dc0a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800dc0e:	f7f2 fbbf 	bl	8000390 <__aeabi_uldivmod>
 800dc12:	4602      	mov	r2, r0
 800dc14:	460b      	mov	r3, r1
 800dc16:	4610      	mov	r0, r2
 800dc18:	4619      	mov	r1, r3
 800dc1a:	f04f 0200 	mov.w	r2, #0
 800dc1e:	f04f 0300 	mov.w	r3, #0
 800dc22:	020b      	lsls	r3, r1, #8
 800dc24:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800dc28:	0202      	lsls	r2, r0, #8
 800dc2a:	6979      	ldr	r1, [r7, #20]
 800dc2c:	6849      	ldr	r1, [r1, #4]
 800dc2e:	0849      	lsrs	r1, r1, #1
 800dc30:	2000      	movs	r0, #0
 800dc32:	460c      	mov	r4, r1
 800dc34:	4605      	mov	r5, r0
 800dc36:	eb12 0804 	adds.w	r8, r2, r4
 800dc3a:	eb43 0905 	adc.w	r9, r3, r5
 800dc3e:	697b      	ldr	r3, [r7, #20]
 800dc40:	685b      	ldr	r3, [r3, #4]
 800dc42:	2200      	movs	r2, #0
 800dc44:	469a      	mov	sl, r3
 800dc46:	4693      	mov	fp, r2
 800dc48:	4652      	mov	r2, sl
 800dc4a:	465b      	mov	r3, fp
 800dc4c:	4640      	mov	r0, r8
 800dc4e:	4649      	mov	r1, r9
 800dc50:	f7f2 fb9e 	bl	8000390 <__aeabi_uldivmod>
 800dc54:	4602      	mov	r2, r0
 800dc56:	460b      	mov	r3, r1
 800dc58:	4613      	mov	r3, r2
 800dc5a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800dc5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc5e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800dc62:	d308      	bcc.n	800dc76 <UART_SetConfig+0x79a>
 800dc64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc66:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800dc6a:	d204      	bcs.n	800dc76 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800dc6c:	697b      	ldr	r3, [r7, #20]
 800dc6e:	681b      	ldr	r3, [r3, #0]
 800dc70:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800dc72:	60da      	str	r2, [r3, #12]
 800dc74:	e17c      	b.n	800df70 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800dc76:	2301      	movs	r3, #1
 800dc78:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800dc7c:	e178      	b.n	800df70 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800dc7e:	697b      	ldr	r3, [r7, #20]
 800dc80:	69db      	ldr	r3, [r3, #28]
 800dc82:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800dc86:	f040 80c5 	bne.w	800de14 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800dc8a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800dc8e:	2b20      	cmp	r3, #32
 800dc90:	dc48      	bgt.n	800dd24 <UART_SetConfig+0x848>
 800dc92:	2b00      	cmp	r3, #0
 800dc94:	db7b      	blt.n	800dd8e <UART_SetConfig+0x8b2>
 800dc96:	2b20      	cmp	r3, #32
 800dc98:	d879      	bhi.n	800dd8e <UART_SetConfig+0x8b2>
 800dc9a:	a201      	add	r2, pc, #4	@ (adr r2, 800dca0 <UART_SetConfig+0x7c4>)
 800dc9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dca0:	0800dd2b 	.word	0x0800dd2b
 800dca4:	0800dd33 	.word	0x0800dd33
 800dca8:	0800dd8f 	.word	0x0800dd8f
 800dcac:	0800dd8f 	.word	0x0800dd8f
 800dcb0:	0800dd3b 	.word	0x0800dd3b
 800dcb4:	0800dd8f 	.word	0x0800dd8f
 800dcb8:	0800dd8f 	.word	0x0800dd8f
 800dcbc:	0800dd8f 	.word	0x0800dd8f
 800dcc0:	0800dd4b 	.word	0x0800dd4b
 800dcc4:	0800dd8f 	.word	0x0800dd8f
 800dcc8:	0800dd8f 	.word	0x0800dd8f
 800dccc:	0800dd8f 	.word	0x0800dd8f
 800dcd0:	0800dd8f 	.word	0x0800dd8f
 800dcd4:	0800dd8f 	.word	0x0800dd8f
 800dcd8:	0800dd8f 	.word	0x0800dd8f
 800dcdc:	0800dd8f 	.word	0x0800dd8f
 800dce0:	0800dd5b 	.word	0x0800dd5b
 800dce4:	0800dd8f 	.word	0x0800dd8f
 800dce8:	0800dd8f 	.word	0x0800dd8f
 800dcec:	0800dd8f 	.word	0x0800dd8f
 800dcf0:	0800dd8f 	.word	0x0800dd8f
 800dcf4:	0800dd8f 	.word	0x0800dd8f
 800dcf8:	0800dd8f 	.word	0x0800dd8f
 800dcfc:	0800dd8f 	.word	0x0800dd8f
 800dd00:	0800dd8f 	.word	0x0800dd8f
 800dd04:	0800dd8f 	.word	0x0800dd8f
 800dd08:	0800dd8f 	.word	0x0800dd8f
 800dd0c:	0800dd8f 	.word	0x0800dd8f
 800dd10:	0800dd8f 	.word	0x0800dd8f
 800dd14:	0800dd8f 	.word	0x0800dd8f
 800dd18:	0800dd8f 	.word	0x0800dd8f
 800dd1c:	0800dd8f 	.word	0x0800dd8f
 800dd20:	0800dd81 	.word	0x0800dd81
 800dd24:	2b40      	cmp	r3, #64	@ 0x40
 800dd26:	d02e      	beq.n	800dd86 <UART_SetConfig+0x8aa>
 800dd28:	e031      	b.n	800dd8e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800dd2a:	f7fb fa13 	bl	8009154 <HAL_RCC_GetPCLK1Freq>
 800dd2e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800dd30:	e033      	b.n	800dd9a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800dd32:	f7fb fa25 	bl	8009180 <HAL_RCC_GetPCLK2Freq>
 800dd36:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800dd38:	e02f      	b.n	800dd9a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800dd3a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800dd3e:	4618      	mov	r0, r3
 800dd40:	f7fd f9d4 	bl	800b0ec <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800dd44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dd48:	e027      	b.n	800dd9a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800dd4a:	f107 0318 	add.w	r3, r7, #24
 800dd4e:	4618      	mov	r0, r3
 800dd50:	f7fd fb20 	bl	800b394 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800dd54:	69fb      	ldr	r3, [r7, #28]
 800dd56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dd58:	e01f      	b.n	800dd9a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800dd5a:	4b2d      	ldr	r3, [pc, #180]	@ (800de10 <UART_SetConfig+0x934>)
 800dd5c:	681b      	ldr	r3, [r3, #0]
 800dd5e:	f003 0320 	and.w	r3, r3, #32
 800dd62:	2b00      	cmp	r3, #0
 800dd64:	d009      	beq.n	800dd7a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800dd66:	4b2a      	ldr	r3, [pc, #168]	@ (800de10 <UART_SetConfig+0x934>)
 800dd68:	681b      	ldr	r3, [r3, #0]
 800dd6a:	08db      	lsrs	r3, r3, #3
 800dd6c:	f003 0303 	and.w	r3, r3, #3
 800dd70:	4a24      	ldr	r2, [pc, #144]	@ (800de04 <UART_SetConfig+0x928>)
 800dd72:	fa22 f303 	lsr.w	r3, r2, r3
 800dd76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800dd78:	e00f      	b.n	800dd9a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800dd7a:	4b22      	ldr	r3, [pc, #136]	@ (800de04 <UART_SetConfig+0x928>)
 800dd7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dd7e:	e00c      	b.n	800dd9a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800dd80:	4b21      	ldr	r3, [pc, #132]	@ (800de08 <UART_SetConfig+0x92c>)
 800dd82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dd84:	e009      	b.n	800dd9a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800dd86:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800dd8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dd8c:	e005      	b.n	800dd9a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800dd8e:	2300      	movs	r3, #0
 800dd90:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800dd92:	2301      	movs	r3, #1
 800dd94:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800dd98:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800dd9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dd9c:	2b00      	cmp	r3, #0
 800dd9e:	f000 80e7 	beq.w	800df70 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800dda2:	697b      	ldr	r3, [r7, #20]
 800dda4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dda6:	4a19      	ldr	r2, [pc, #100]	@ (800de0c <UART_SetConfig+0x930>)
 800dda8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ddac:	461a      	mov	r2, r3
 800ddae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ddb0:	fbb3 f3f2 	udiv	r3, r3, r2
 800ddb4:	005a      	lsls	r2, r3, #1
 800ddb6:	697b      	ldr	r3, [r7, #20]
 800ddb8:	685b      	ldr	r3, [r3, #4]
 800ddba:	085b      	lsrs	r3, r3, #1
 800ddbc:	441a      	add	r2, r3
 800ddbe:	697b      	ldr	r3, [r7, #20]
 800ddc0:	685b      	ldr	r3, [r3, #4]
 800ddc2:	fbb2 f3f3 	udiv	r3, r2, r3
 800ddc6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ddc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ddca:	2b0f      	cmp	r3, #15
 800ddcc:	d916      	bls.n	800ddfc <UART_SetConfig+0x920>
 800ddce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ddd0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ddd4:	d212      	bcs.n	800ddfc <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ddd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ddd8:	b29b      	uxth	r3, r3
 800ddda:	f023 030f 	bic.w	r3, r3, #15
 800ddde:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800dde0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dde2:	085b      	lsrs	r3, r3, #1
 800dde4:	b29b      	uxth	r3, r3
 800dde6:	f003 0307 	and.w	r3, r3, #7
 800ddea:	b29a      	uxth	r2, r3
 800ddec:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800ddee:	4313      	orrs	r3, r2
 800ddf0:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800ddf2:	697b      	ldr	r3, [r7, #20]
 800ddf4:	681b      	ldr	r3, [r3, #0]
 800ddf6:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800ddf8:	60da      	str	r2, [r3, #12]
 800ddfa:	e0b9      	b.n	800df70 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800ddfc:	2301      	movs	r3, #1
 800ddfe:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800de02:	e0b5      	b.n	800df70 <UART_SetConfig+0xa94>
 800de04:	03d09000 	.word	0x03d09000
 800de08:	003d0900 	.word	0x003d0900
 800de0c:	08015214 	.word	0x08015214
 800de10:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800de14:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800de18:	2b20      	cmp	r3, #32
 800de1a:	dc49      	bgt.n	800deb0 <UART_SetConfig+0x9d4>
 800de1c:	2b00      	cmp	r3, #0
 800de1e:	db7c      	blt.n	800df1a <UART_SetConfig+0xa3e>
 800de20:	2b20      	cmp	r3, #32
 800de22:	d87a      	bhi.n	800df1a <UART_SetConfig+0xa3e>
 800de24:	a201      	add	r2, pc, #4	@ (adr r2, 800de2c <UART_SetConfig+0x950>)
 800de26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de2a:	bf00      	nop
 800de2c:	0800deb7 	.word	0x0800deb7
 800de30:	0800debf 	.word	0x0800debf
 800de34:	0800df1b 	.word	0x0800df1b
 800de38:	0800df1b 	.word	0x0800df1b
 800de3c:	0800dec7 	.word	0x0800dec7
 800de40:	0800df1b 	.word	0x0800df1b
 800de44:	0800df1b 	.word	0x0800df1b
 800de48:	0800df1b 	.word	0x0800df1b
 800de4c:	0800ded7 	.word	0x0800ded7
 800de50:	0800df1b 	.word	0x0800df1b
 800de54:	0800df1b 	.word	0x0800df1b
 800de58:	0800df1b 	.word	0x0800df1b
 800de5c:	0800df1b 	.word	0x0800df1b
 800de60:	0800df1b 	.word	0x0800df1b
 800de64:	0800df1b 	.word	0x0800df1b
 800de68:	0800df1b 	.word	0x0800df1b
 800de6c:	0800dee7 	.word	0x0800dee7
 800de70:	0800df1b 	.word	0x0800df1b
 800de74:	0800df1b 	.word	0x0800df1b
 800de78:	0800df1b 	.word	0x0800df1b
 800de7c:	0800df1b 	.word	0x0800df1b
 800de80:	0800df1b 	.word	0x0800df1b
 800de84:	0800df1b 	.word	0x0800df1b
 800de88:	0800df1b 	.word	0x0800df1b
 800de8c:	0800df1b 	.word	0x0800df1b
 800de90:	0800df1b 	.word	0x0800df1b
 800de94:	0800df1b 	.word	0x0800df1b
 800de98:	0800df1b 	.word	0x0800df1b
 800de9c:	0800df1b 	.word	0x0800df1b
 800dea0:	0800df1b 	.word	0x0800df1b
 800dea4:	0800df1b 	.word	0x0800df1b
 800dea8:	0800df1b 	.word	0x0800df1b
 800deac:	0800df0d 	.word	0x0800df0d
 800deb0:	2b40      	cmp	r3, #64	@ 0x40
 800deb2:	d02e      	beq.n	800df12 <UART_SetConfig+0xa36>
 800deb4:	e031      	b.n	800df1a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800deb6:	f7fb f94d 	bl	8009154 <HAL_RCC_GetPCLK1Freq>
 800deba:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800debc:	e033      	b.n	800df26 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800debe:	f7fb f95f 	bl	8009180 <HAL_RCC_GetPCLK2Freq>
 800dec2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800dec4:	e02f      	b.n	800df26 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800dec6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800deca:	4618      	mov	r0, r3
 800decc:	f7fd f90e 	bl	800b0ec <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ded0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ded2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ded4:	e027      	b.n	800df26 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ded6:	f107 0318 	add.w	r3, r7, #24
 800deda:	4618      	mov	r0, r3
 800dedc:	f7fd fa5a 	bl	800b394 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800dee0:	69fb      	ldr	r3, [r7, #28]
 800dee2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dee4:	e01f      	b.n	800df26 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800dee6:	4b2d      	ldr	r3, [pc, #180]	@ (800df9c <UART_SetConfig+0xac0>)
 800dee8:	681b      	ldr	r3, [r3, #0]
 800deea:	f003 0320 	and.w	r3, r3, #32
 800deee:	2b00      	cmp	r3, #0
 800def0:	d009      	beq.n	800df06 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800def2:	4b2a      	ldr	r3, [pc, #168]	@ (800df9c <UART_SetConfig+0xac0>)
 800def4:	681b      	ldr	r3, [r3, #0]
 800def6:	08db      	lsrs	r3, r3, #3
 800def8:	f003 0303 	and.w	r3, r3, #3
 800defc:	4a28      	ldr	r2, [pc, #160]	@ (800dfa0 <UART_SetConfig+0xac4>)
 800defe:	fa22 f303 	lsr.w	r3, r2, r3
 800df02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800df04:	e00f      	b.n	800df26 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800df06:	4b26      	ldr	r3, [pc, #152]	@ (800dfa0 <UART_SetConfig+0xac4>)
 800df08:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800df0a:	e00c      	b.n	800df26 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800df0c:	4b25      	ldr	r3, [pc, #148]	@ (800dfa4 <UART_SetConfig+0xac8>)
 800df0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800df10:	e009      	b.n	800df26 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800df12:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800df16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800df18:	e005      	b.n	800df26 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800df1a:	2300      	movs	r3, #0
 800df1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800df1e:	2301      	movs	r3, #1
 800df20:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800df24:	bf00      	nop
    }

    if (pclk != 0U)
 800df26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800df28:	2b00      	cmp	r3, #0
 800df2a:	d021      	beq.n	800df70 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800df2c:	697b      	ldr	r3, [r7, #20]
 800df2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800df30:	4a1d      	ldr	r2, [pc, #116]	@ (800dfa8 <UART_SetConfig+0xacc>)
 800df32:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800df36:	461a      	mov	r2, r3
 800df38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800df3a:	fbb3 f2f2 	udiv	r2, r3, r2
 800df3e:	697b      	ldr	r3, [r7, #20]
 800df40:	685b      	ldr	r3, [r3, #4]
 800df42:	085b      	lsrs	r3, r3, #1
 800df44:	441a      	add	r2, r3
 800df46:	697b      	ldr	r3, [r7, #20]
 800df48:	685b      	ldr	r3, [r3, #4]
 800df4a:	fbb2 f3f3 	udiv	r3, r2, r3
 800df4e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800df50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df52:	2b0f      	cmp	r3, #15
 800df54:	d909      	bls.n	800df6a <UART_SetConfig+0xa8e>
 800df56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800df5c:	d205      	bcs.n	800df6a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800df5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df60:	b29a      	uxth	r2, r3
 800df62:	697b      	ldr	r3, [r7, #20]
 800df64:	681b      	ldr	r3, [r3, #0]
 800df66:	60da      	str	r2, [r3, #12]
 800df68:	e002      	b.n	800df70 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800df6a:	2301      	movs	r3, #1
 800df6c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800df70:	697b      	ldr	r3, [r7, #20]
 800df72:	2201      	movs	r2, #1
 800df74:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800df78:	697b      	ldr	r3, [r7, #20]
 800df7a:	2201      	movs	r2, #1
 800df7c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800df80:	697b      	ldr	r3, [r7, #20]
 800df82:	2200      	movs	r2, #0
 800df84:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800df86:	697b      	ldr	r3, [r7, #20]
 800df88:	2200      	movs	r2, #0
 800df8a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800df8c:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800df90:	4618      	mov	r0, r3
 800df92:	3748      	adds	r7, #72	@ 0x48
 800df94:	46bd      	mov	sp, r7
 800df96:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800df9a:	bf00      	nop
 800df9c:	58024400 	.word	0x58024400
 800dfa0:	03d09000 	.word	0x03d09000
 800dfa4:	003d0900 	.word	0x003d0900
 800dfa8:	08015214 	.word	0x08015214

0800dfac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800dfac:	b480      	push	{r7}
 800dfae:	b083      	sub	sp, #12
 800dfb0:	af00      	add	r7, sp, #0
 800dfb2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dfb8:	f003 0308 	and.w	r3, r3, #8
 800dfbc:	2b00      	cmp	r3, #0
 800dfbe:	d00a      	beq.n	800dfd6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	681b      	ldr	r3, [r3, #0]
 800dfc4:	685b      	ldr	r3, [r3, #4]
 800dfc6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	681b      	ldr	r3, [r3, #0]
 800dfd2:	430a      	orrs	r2, r1
 800dfd4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dfda:	f003 0301 	and.w	r3, r3, #1
 800dfde:	2b00      	cmp	r3, #0
 800dfe0:	d00a      	beq.n	800dff8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	681b      	ldr	r3, [r3, #0]
 800dfe6:	685b      	ldr	r3, [r3, #4]
 800dfe8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	681b      	ldr	r3, [r3, #0]
 800dff4:	430a      	orrs	r2, r1
 800dff6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dffc:	f003 0302 	and.w	r3, r3, #2
 800e000:	2b00      	cmp	r3, #0
 800e002:	d00a      	beq.n	800e01a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	681b      	ldr	r3, [r3, #0]
 800e008:	685b      	ldr	r3, [r3, #4]
 800e00a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	681b      	ldr	r3, [r3, #0]
 800e016:	430a      	orrs	r2, r1
 800e018:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e01e:	f003 0304 	and.w	r3, r3, #4
 800e022:	2b00      	cmp	r3, #0
 800e024:	d00a      	beq.n	800e03c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	681b      	ldr	r3, [r3, #0]
 800e02a:	685b      	ldr	r3, [r3, #4]
 800e02c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	681b      	ldr	r3, [r3, #0]
 800e038:	430a      	orrs	r2, r1
 800e03a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e040:	f003 0310 	and.w	r3, r3, #16
 800e044:	2b00      	cmp	r3, #0
 800e046:	d00a      	beq.n	800e05e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	681b      	ldr	r3, [r3, #0]
 800e04c:	689b      	ldr	r3, [r3, #8]
 800e04e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	681b      	ldr	r3, [r3, #0]
 800e05a:	430a      	orrs	r2, r1
 800e05c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e062:	f003 0320 	and.w	r3, r3, #32
 800e066:	2b00      	cmp	r3, #0
 800e068:	d00a      	beq.n	800e080 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	681b      	ldr	r3, [r3, #0]
 800e06e:	689b      	ldr	r3, [r3, #8]
 800e070:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	681b      	ldr	r3, [r3, #0]
 800e07c:	430a      	orrs	r2, r1
 800e07e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e084:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e088:	2b00      	cmp	r3, #0
 800e08a:	d01a      	beq.n	800e0c2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	681b      	ldr	r3, [r3, #0]
 800e090:	685b      	ldr	r3, [r3, #4]
 800e092:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	681b      	ldr	r3, [r3, #0]
 800e09e:	430a      	orrs	r2, r1
 800e0a0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e0a6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e0aa:	d10a      	bne.n	800e0c2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	681b      	ldr	r3, [r3, #0]
 800e0b0:	685b      	ldr	r3, [r3, #4]
 800e0b2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	681b      	ldr	r3, [r3, #0]
 800e0be:	430a      	orrs	r2, r1
 800e0c0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e0c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e0ca:	2b00      	cmp	r3, #0
 800e0cc:	d00a      	beq.n	800e0e4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	681b      	ldr	r3, [r3, #0]
 800e0d2:	685b      	ldr	r3, [r3, #4]
 800e0d4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	681b      	ldr	r3, [r3, #0]
 800e0e0:	430a      	orrs	r2, r1
 800e0e2:	605a      	str	r2, [r3, #4]
  }
}
 800e0e4:	bf00      	nop
 800e0e6:	370c      	adds	r7, #12
 800e0e8:	46bd      	mov	sp, r7
 800e0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0ee:	4770      	bx	lr

0800e0f0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800e0f0:	b580      	push	{r7, lr}
 800e0f2:	b098      	sub	sp, #96	@ 0x60
 800e0f4:	af02      	add	r7, sp, #8
 800e0f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	2200      	movs	r2, #0
 800e0fc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800e100:	f7f4 fd66 	bl	8002bd0 <HAL_GetTick>
 800e104:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	681b      	ldr	r3, [r3, #0]
 800e10a:	681b      	ldr	r3, [r3, #0]
 800e10c:	f003 0308 	and.w	r3, r3, #8
 800e110:	2b08      	cmp	r3, #8
 800e112:	d12f      	bne.n	800e174 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e114:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800e118:	9300      	str	r3, [sp, #0]
 800e11a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e11c:	2200      	movs	r2, #0
 800e11e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800e122:	6878      	ldr	r0, [r7, #4]
 800e124:	f000 f88e 	bl	800e244 <UART_WaitOnFlagUntilTimeout>
 800e128:	4603      	mov	r3, r0
 800e12a:	2b00      	cmp	r3, #0
 800e12c:	d022      	beq.n	800e174 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	681b      	ldr	r3, [r3, #0]
 800e132:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e134:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e136:	e853 3f00 	ldrex	r3, [r3]
 800e13a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800e13c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e13e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e142:	653b      	str	r3, [r7, #80]	@ 0x50
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	681b      	ldr	r3, [r3, #0]
 800e148:	461a      	mov	r2, r3
 800e14a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e14c:	647b      	str	r3, [r7, #68]	@ 0x44
 800e14e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e150:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800e152:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e154:	e841 2300 	strex	r3, r2, [r1]
 800e158:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800e15a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e15c:	2b00      	cmp	r3, #0
 800e15e:	d1e6      	bne.n	800e12e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	2220      	movs	r2, #32
 800e164:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	2200      	movs	r2, #0
 800e16c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e170:	2303      	movs	r3, #3
 800e172:	e063      	b.n	800e23c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	681b      	ldr	r3, [r3, #0]
 800e178:	681b      	ldr	r3, [r3, #0]
 800e17a:	f003 0304 	and.w	r3, r3, #4
 800e17e:	2b04      	cmp	r3, #4
 800e180:	d149      	bne.n	800e216 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e182:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800e186:	9300      	str	r3, [sp, #0]
 800e188:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e18a:	2200      	movs	r2, #0
 800e18c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800e190:	6878      	ldr	r0, [r7, #4]
 800e192:	f000 f857 	bl	800e244 <UART_WaitOnFlagUntilTimeout>
 800e196:	4603      	mov	r3, r0
 800e198:	2b00      	cmp	r3, #0
 800e19a:	d03c      	beq.n	800e216 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	681b      	ldr	r3, [r3, #0]
 800e1a0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e1a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e1a4:	e853 3f00 	ldrex	r3, [r3]
 800e1a8:	623b      	str	r3, [r7, #32]
   return(result);
 800e1aa:	6a3b      	ldr	r3, [r7, #32]
 800e1ac:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800e1b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	681b      	ldr	r3, [r3, #0]
 800e1b6:	461a      	mov	r2, r3
 800e1b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e1ba:	633b      	str	r3, [r7, #48]	@ 0x30
 800e1bc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e1be:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e1c0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e1c2:	e841 2300 	strex	r3, r2, [r1]
 800e1c6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800e1c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e1ca:	2b00      	cmp	r3, #0
 800e1cc:	d1e6      	bne.n	800e19c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	681b      	ldr	r3, [r3, #0]
 800e1d2:	3308      	adds	r3, #8
 800e1d4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e1d6:	693b      	ldr	r3, [r7, #16]
 800e1d8:	e853 3f00 	ldrex	r3, [r3]
 800e1dc:	60fb      	str	r3, [r7, #12]
   return(result);
 800e1de:	68fb      	ldr	r3, [r7, #12]
 800e1e0:	f023 0301 	bic.w	r3, r3, #1
 800e1e4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	681b      	ldr	r3, [r3, #0]
 800e1ea:	3308      	adds	r3, #8
 800e1ec:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e1ee:	61fa      	str	r2, [r7, #28]
 800e1f0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e1f2:	69b9      	ldr	r1, [r7, #24]
 800e1f4:	69fa      	ldr	r2, [r7, #28]
 800e1f6:	e841 2300 	strex	r3, r2, [r1]
 800e1fa:	617b      	str	r3, [r7, #20]
   return(result);
 800e1fc:	697b      	ldr	r3, [r7, #20]
 800e1fe:	2b00      	cmp	r3, #0
 800e200:	d1e5      	bne.n	800e1ce <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	2220      	movs	r2, #32
 800e206:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	2200      	movs	r2, #0
 800e20e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e212:	2303      	movs	r3, #3
 800e214:	e012      	b.n	800e23c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	2220      	movs	r2, #32
 800e21a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	2220      	movs	r2, #32
 800e222:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	2200      	movs	r2, #0
 800e22a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	2200      	movs	r2, #0
 800e230:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	2200      	movs	r2, #0
 800e236:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e23a:	2300      	movs	r3, #0
}
 800e23c:	4618      	mov	r0, r3
 800e23e:	3758      	adds	r7, #88	@ 0x58
 800e240:	46bd      	mov	sp, r7
 800e242:	bd80      	pop	{r7, pc}

0800e244 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800e244:	b580      	push	{r7, lr}
 800e246:	b084      	sub	sp, #16
 800e248:	af00      	add	r7, sp, #0
 800e24a:	60f8      	str	r0, [r7, #12]
 800e24c:	60b9      	str	r1, [r7, #8]
 800e24e:	603b      	str	r3, [r7, #0]
 800e250:	4613      	mov	r3, r2
 800e252:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e254:	e04f      	b.n	800e2f6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e256:	69bb      	ldr	r3, [r7, #24]
 800e258:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e25c:	d04b      	beq.n	800e2f6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e25e:	f7f4 fcb7 	bl	8002bd0 <HAL_GetTick>
 800e262:	4602      	mov	r2, r0
 800e264:	683b      	ldr	r3, [r7, #0]
 800e266:	1ad3      	subs	r3, r2, r3
 800e268:	69ba      	ldr	r2, [r7, #24]
 800e26a:	429a      	cmp	r2, r3
 800e26c:	d302      	bcc.n	800e274 <UART_WaitOnFlagUntilTimeout+0x30>
 800e26e:	69bb      	ldr	r3, [r7, #24]
 800e270:	2b00      	cmp	r3, #0
 800e272:	d101      	bne.n	800e278 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800e274:	2303      	movs	r3, #3
 800e276:	e04e      	b.n	800e316 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800e278:	68fb      	ldr	r3, [r7, #12]
 800e27a:	681b      	ldr	r3, [r3, #0]
 800e27c:	681b      	ldr	r3, [r3, #0]
 800e27e:	f003 0304 	and.w	r3, r3, #4
 800e282:	2b00      	cmp	r3, #0
 800e284:	d037      	beq.n	800e2f6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800e286:	68bb      	ldr	r3, [r7, #8]
 800e288:	2b80      	cmp	r3, #128	@ 0x80
 800e28a:	d034      	beq.n	800e2f6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800e28c:	68bb      	ldr	r3, [r7, #8]
 800e28e:	2b40      	cmp	r3, #64	@ 0x40
 800e290:	d031      	beq.n	800e2f6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800e292:	68fb      	ldr	r3, [r7, #12]
 800e294:	681b      	ldr	r3, [r3, #0]
 800e296:	69db      	ldr	r3, [r3, #28]
 800e298:	f003 0308 	and.w	r3, r3, #8
 800e29c:	2b08      	cmp	r3, #8
 800e29e:	d110      	bne.n	800e2c2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e2a0:	68fb      	ldr	r3, [r7, #12]
 800e2a2:	681b      	ldr	r3, [r3, #0]
 800e2a4:	2208      	movs	r2, #8
 800e2a6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800e2a8:	68f8      	ldr	r0, [r7, #12]
 800e2aa:	f000 f839 	bl	800e320 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800e2ae:	68fb      	ldr	r3, [r7, #12]
 800e2b0:	2208      	movs	r2, #8
 800e2b2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e2b6:	68fb      	ldr	r3, [r7, #12]
 800e2b8:	2200      	movs	r2, #0
 800e2ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800e2be:	2301      	movs	r3, #1
 800e2c0:	e029      	b.n	800e316 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800e2c2:	68fb      	ldr	r3, [r7, #12]
 800e2c4:	681b      	ldr	r3, [r3, #0]
 800e2c6:	69db      	ldr	r3, [r3, #28]
 800e2c8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800e2cc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800e2d0:	d111      	bne.n	800e2f6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e2d2:	68fb      	ldr	r3, [r7, #12]
 800e2d4:	681b      	ldr	r3, [r3, #0]
 800e2d6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800e2da:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800e2dc:	68f8      	ldr	r0, [r7, #12]
 800e2de:	f000 f81f 	bl	800e320 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800e2e2:	68fb      	ldr	r3, [r7, #12]
 800e2e4:	2220      	movs	r2, #32
 800e2e6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e2ea:	68fb      	ldr	r3, [r7, #12]
 800e2ec:	2200      	movs	r2, #0
 800e2ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800e2f2:	2303      	movs	r3, #3
 800e2f4:	e00f      	b.n	800e316 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e2f6:	68fb      	ldr	r3, [r7, #12]
 800e2f8:	681b      	ldr	r3, [r3, #0]
 800e2fa:	69da      	ldr	r2, [r3, #28]
 800e2fc:	68bb      	ldr	r3, [r7, #8]
 800e2fe:	4013      	ands	r3, r2
 800e300:	68ba      	ldr	r2, [r7, #8]
 800e302:	429a      	cmp	r2, r3
 800e304:	bf0c      	ite	eq
 800e306:	2301      	moveq	r3, #1
 800e308:	2300      	movne	r3, #0
 800e30a:	b2db      	uxtb	r3, r3
 800e30c:	461a      	mov	r2, r3
 800e30e:	79fb      	ldrb	r3, [r7, #7]
 800e310:	429a      	cmp	r2, r3
 800e312:	d0a0      	beq.n	800e256 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e314:	2300      	movs	r3, #0
}
 800e316:	4618      	mov	r0, r3
 800e318:	3710      	adds	r7, #16
 800e31a:	46bd      	mov	sp, r7
 800e31c:	bd80      	pop	{r7, pc}
	...

0800e320 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800e320:	b480      	push	{r7}
 800e322:	b095      	sub	sp, #84	@ 0x54
 800e324:	af00      	add	r7, sp, #0
 800e326:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	681b      	ldr	r3, [r3, #0]
 800e32c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e32e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e330:	e853 3f00 	ldrex	r3, [r3]
 800e334:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800e336:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e338:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800e33c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	681b      	ldr	r3, [r3, #0]
 800e342:	461a      	mov	r2, r3
 800e344:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e346:	643b      	str	r3, [r7, #64]	@ 0x40
 800e348:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e34a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800e34c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800e34e:	e841 2300 	strex	r3, r2, [r1]
 800e352:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800e354:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e356:	2b00      	cmp	r3, #0
 800e358:	d1e6      	bne.n	800e328 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	681b      	ldr	r3, [r3, #0]
 800e35e:	3308      	adds	r3, #8
 800e360:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e362:	6a3b      	ldr	r3, [r7, #32]
 800e364:	e853 3f00 	ldrex	r3, [r3]
 800e368:	61fb      	str	r3, [r7, #28]
   return(result);
 800e36a:	69fa      	ldr	r2, [r7, #28]
 800e36c:	4b1e      	ldr	r3, [pc, #120]	@ (800e3e8 <UART_EndRxTransfer+0xc8>)
 800e36e:	4013      	ands	r3, r2
 800e370:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	681b      	ldr	r3, [r3, #0]
 800e376:	3308      	adds	r3, #8
 800e378:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e37a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800e37c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e37e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e380:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e382:	e841 2300 	strex	r3, r2, [r1]
 800e386:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800e388:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e38a:	2b00      	cmp	r3, #0
 800e38c:	d1e5      	bne.n	800e35a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e392:	2b01      	cmp	r3, #1
 800e394:	d118      	bne.n	800e3c8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	681b      	ldr	r3, [r3, #0]
 800e39a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e39c:	68fb      	ldr	r3, [r7, #12]
 800e39e:	e853 3f00 	ldrex	r3, [r3]
 800e3a2:	60bb      	str	r3, [r7, #8]
   return(result);
 800e3a4:	68bb      	ldr	r3, [r7, #8]
 800e3a6:	f023 0310 	bic.w	r3, r3, #16
 800e3aa:	647b      	str	r3, [r7, #68]	@ 0x44
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	681b      	ldr	r3, [r3, #0]
 800e3b0:	461a      	mov	r2, r3
 800e3b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e3b4:	61bb      	str	r3, [r7, #24]
 800e3b6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e3b8:	6979      	ldr	r1, [r7, #20]
 800e3ba:	69ba      	ldr	r2, [r7, #24]
 800e3bc:	e841 2300 	strex	r3, r2, [r1]
 800e3c0:	613b      	str	r3, [r7, #16]
   return(result);
 800e3c2:	693b      	ldr	r3, [r7, #16]
 800e3c4:	2b00      	cmp	r3, #0
 800e3c6:	d1e6      	bne.n	800e396 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	2220      	movs	r2, #32
 800e3cc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	2200      	movs	r2, #0
 800e3d4:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	2200      	movs	r2, #0
 800e3da:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800e3dc:	bf00      	nop
 800e3de:	3754      	adds	r7, #84	@ 0x54
 800e3e0:	46bd      	mov	sp, r7
 800e3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3e6:	4770      	bx	lr
 800e3e8:	effffffe 	.word	0xeffffffe

0800e3ec <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800e3ec:	b084      	sub	sp, #16
 800e3ee:	b580      	push	{r7, lr}
 800e3f0:	b084      	sub	sp, #16
 800e3f2:	af00      	add	r7, sp, #0
 800e3f4:	6078      	str	r0, [r7, #4]
 800e3f6:	f107 001c 	add.w	r0, r7, #28
 800e3fa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800e3fe:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800e402:	2b01      	cmp	r3, #1
 800e404:	d121      	bne.n	800e44a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e40a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	68da      	ldr	r2, [r3, #12]
 800e416:	4b2c      	ldr	r3, [pc, #176]	@ (800e4c8 <USB_CoreInit+0xdc>)
 800e418:	4013      	ands	r3, r2
 800e41a:	687a      	ldr	r2, [r7, #4]
 800e41c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	68db      	ldr	r3, [r3, #12]
 800e422:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800e42a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800e42e:	2b01      	cmp	r3, #1
 800e430:	d105      	bne.n	800e43e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	68db      	ldr	r3, [r3, #12]
 800e436:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800e43e:	6878      	ldr	r0, [r7, #4]
 800e440:	f001 faf6 	bl	800fa30 <USB_CoreReset>
 800e444:	4603      	mov	r3, r0
 800e446:	73fb      	strb	r3, [r7, #15]
 800e448:	e01b      	b.n	800e482 <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	68db      	ldr	r3, [r3, #12]
 800e44e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800e456:	6878      	ldr	r0, [r7, #4]
 800e458:	f001 faea 	bl	800fa30 <USB_CoreReset>
 800e45c:	4603      	mov	r3, r0
 800e45e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800e460:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800e464:	2b00      	cmp	r3, #0
 800e466:	d106      	bne.n	800e476 <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e46c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	639a      	str	r2, [r3, #56]	@ 0x38
 800e474:	e005      	b.n	800e482 <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e47a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800e482:	7fbb      	ldrb	r3, [r7, #30]
 800e484:	2b01      	cmp	r3, #1
 800e486:	d116      	bne.n	800e4b6 <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e48c:	b29a      	uxth	r2, r3
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800e496:	4b0d      	ldr	r3, [pc, #52]	@ (800e4cc <USB_CoreInit+0xe0>)
 800e498:	4313      	orrs	r3, r2
 800e49a:	687a      	ldr	r2, [r7, #4]
 800e49c:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	689b      	ldr	r3, [r3, #8]
 800e4a2:	f043 0206 	orr.w	r2, r3, #6
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	689b      	ldr	r3, [r3, #8]
 800e4ae:	f043 0220 	orr.w	r2, r3, #32
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800e4b6:	7bfb      	ldrb	r3, [r7, #15]
}
 800e4b8:	4618      	mov	r0, r3
 800e4ba:	3710      	adds	r7, #16
 800e4bc:	46bd      	mov	sp, r7
 800e4be:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e4c2:	b004      	add	sp, #16
 800e4c4:	4770      	bx	lr
 800e4c6:	bf00      	nop
 800e4c8:	ffbdffbf 	.word	0xffbdffbf
 800e4cc:	03ee0000 	.word	0x03ee0000

0800e4d0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800e4d0:	b480      	push	{r7}
 800e4d2:	b087      	sub	sp, #28
 800e4d4:	af00      	add	r7, sp, #0
 800e4d6:	60f8      	str	r0, [r7, #12]
 800e4d8:	60b9      	str	r1, [r7, #8]
 800e4da:	4613      	mov	r3, r2
 800e4dc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800e4de:	79fb      	ldrb	r3, [r7, #7]
 800e4e0:	2b02      	cmp	r3, #2
 800e4e2:	d165      	bne.n	800e5b0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800e4e4:	68bb      	ldr	r3, [r7, #8]
 800e4e6:	4a41      	ldr	r2, [pc, #260]	@ (800e5ec <USB_SetTurnaroundTime+0x11c>)
 800e4e8:	4293      	cmp	r3, r2
 800e4ea:	d906      	bls.n	800e4fa <USB_SetTurnaroundTime+0x2a>
 800e4ec:	68bb      	ldr	r3, [r7, #8]
 800e4ee:	4a40      	ldr	r2, [pc, #256]	@ (800e5f0 <USB_SetTurnaroundTime+0x120>)
 800e4f0:	4293      	cmp	r3, r2
 800e4f2:	d202      	bcs.n	800e4fa <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800e4f4:	230f      	movs	r3, #15
 800e4f6:	617b      	str	r3, [r7, #20]
 800e4f8:	e062      	b.n	800e5c0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800e4fa:	68bb      	ldr	r3, [r7, #8]
 800e4fc:	4a3c      	ldr	r2, [pc, #240]	@ (800e5f0 <USB_SetTurnaroundTime+0x120>)
 800e4fe:	4293      	cmp	r3, r2
 800e500:	d306      	bcc.n	800e510 <USB_SetTurnaroundTime+0x40>
 800e502:	68bb      	ldr	r3, [r7, #8]
 800e504:	4a3b      	ldr	r2, [pc, #236]	@ (800e5f4 <USB_SetTurnaroundTime+0x124>)
 800e506:	4293      	cmp	r3, r2
 800e508:	d202      	bcs.n	800e510 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800e50a:	230e      	movs	r3, #14
 800e50c:	617b      	str	r3, [r7, #20]
 800e50e:	e057      	b.n	800e5c0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800e510:	68bb      	ldr	r3, [r7, #8]
 800e512:	4a38      	ldr	r2, [pc, #224]	@ (800e5f4 <USB_SetTurnaroundTime+0x124>)
 800e514:	4293      	cmp	r3, r2
 800e516:	d306      	bcc.n	800e526 <USB_SetTurnaroundTime+0x56>
 800e518:	68bb      	ldr	r3, [r7, #8]
 800e51a:	4a37      	ldr	r2, [pc, #220]	@ (800e5f8 <USB_SetTurnaroundTime+0x128>)
 800e51c:	4293      	cmp	r3, r2
 800e51e:	d202      	bcs.n	800e526 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800e520:	230d      	movs	r3, #13
 800e522:	617b      	str	r3, [r7, #20]
 800e524:	e04c      	b.n	800e5c0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800e526:	68bb      	ldr	r3, [r7, #8]
 800e528:	4a33      	ldr	r2, [pc, #204]	@ (800e5f8 <USB_SetTurnaroundTime+0x128>)
 800e52a:	4293      	cmp	r3, r2
 800e52c:	d306      	bcc.n	800e53c <USB_SetTurnaroundTime+0x6c>
 800e52e:	68bb      	ldr	r3, [r7, #8]
 800e530:	4a32      	ldr	r2, [pc, #200]	@ (800e5fc <USB_SetTurnaroundTime+0x12c>)
 800e532:	4293      	cmp	r3, r2
 800e534:	d802      	bhi.n	800e53c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800e536:	230c      	movs	r3, #12
 800e538:	617b      	str	r3, [r7, #20]
 800e53a:	e041      	b.n	800e5c0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800e53c:	68bb      	ldr	r3, [r7, #8]
 800e53e:	4a2f      	ldr	r2, [pc, #188]	@ (800e5fc <USB_SetTurnaroundTime+0x12c>)
 800e540:	4293      	cmp	r3, r2
 800e542:	d906      	bls.n	800e552 <USB_SetTurnaroundTime+0x82>
 800e544:	68bb      	ldr	r3, [r7, #8]
 800e546:	4a2e      	ldr	r2, [pc, #184]	@ (800e600 <USB_SetTurnaroundTime+0x130>)
 800e548:	4293      	cmp	r3, r2
 800e54a:	d802      	bhi.n	800e552 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800e54c:	230b      	movs	r3, #11
 800e54e:	617b      	str	r3, [r7, #20]
 800e550:	e036      	b.n	800e5c0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800e552:	68bb      	ldr	r3, [r7, #8]
 800e554:	4a2a      	ldr	r2, [pc, #168]	@ (800e600 <USB_SetTurnaroundTime+0x130>)
 800e556:	4293      	cmp	r3, r2
 800e558:	d906      	bls.n	800e568 <USB_SetTurnaroundTime+0x98>
 800e55a:	68bb      	ldr	r3, [r7, #8]
 800e55c:	4a29      	ldr	r2, [pc, #164]	@ (800e604 <USB_SetTurnaroundTime+0x134>)
 800e55e:	4293      	cmp	r3, r2
 800e560:	d802      	bhi.n	800e568 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800e562:	230a      	movs	r3, #10
 800e564:	617b      	str	r3, [r7, #20]
 800e566:	e02b      	b.n	800e5c0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800e568:	68bb      	ldr	r3, [r7, #8]
 800e56a:	4a26      	ldr	r2, [pc, #152]	@ (800e604 <USB_SetTurnaroundTime+0x134>)
 800e56c:	4293      	cmp	r3, r2
 800e56e:	d906      	bls.n	800e57e <USB_SetTurnaroundTime+0xae>
 800e570:	68bb      	ldr	r3, [r7, #8]
 800e572:	4a25      	ldr	r2, [pc, #148]	@ (800e608 <USB_SetTurnaroundTime+0x138>)
 800e574:	4293      	cmp	r3, r2
 800e576:	d202      	bcs.n	800e57e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800e578:	2309      	movs	r3, #9
 800e57a:	617b      	str	r3, [r7, #20]
 800e57c:	e020      	b.n	800e5c0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800e57e:	68bb      	ldr	r3, [r7, #8]
 800e580:	4a21      	ldr	r2, [pc, #132]	@ (800e608 <USB_SetTurnaroundTime+0x138>)
 800e582:	4293      	cmp	r3, r2
 800e584:	d306      	bcc.n	800e594 <USB_SetTurnaroundTime+0xc4>
 800e586:	68bb      	ldr	r3, [r7, #8]
 800e588:	4a20      	ldr	r2, [pc, #128]	@ (800e60c <USB_SetTurnaroundTime+0x13c>)
 800e58a:	4293      	cmp	r3, r2
 800e58c:	d802      	bhi.n	800e594 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800e58e:	2308      	movs	r3, #8
 800e590:	617b      	str	r3, [r7, #20]
 800e592:	e015      	b.n	800e5c0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800e594:	68bb      	ldr	r3, [r7, #8]
 800e596:	4a1d      	ldr	r2, [pc, #116]	@ (800e60c <USB_SetTurnaroundTime+0x13c>)
 800e598:	4293      	cmp	r3, r2
 800e59a:	d906      	bls.n	800e5aa <USB_SetTurnaroundTime+0xda>
 800e59c:	68bb      	ldr	r3, [r7, #8]
 800e59e:	4a1c      	ldr	r2, [pc, #112]	@ (800e610 <USB_SetTurnaroundTime+0x140>)
 800e5a0:	4293      	cmp	r3, r2
 800e5a2:	d202      	bcs.n	800e5aa <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800e5a4:	2307      	movs	r3, #7
 800e5a6:	617b      	str	r3, [r7, #20]
 800e5a8:	e00a      	b.n	800e5c0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800e5aa:	2306      	movs	r3, #6
 800e5ac:	617b      	str	r3, [r7, #20]
 800e5ae:	e007      	b.n	800e5c0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800e5b0:	79fb      	ldrb	r3, [r7, #7]
 800e5b2:	2b00      	cmp	r3, #0
 800e5b4:	d102      	bne.n	800e5bc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800e5b6:	2309      	movs	r3, #9
 800e5b8:	617b      	str	r3, [r7, #20]
 800e5ba:	e001      	b.n	800e5c0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800e5bc:	2309      	movs	r3, #9
 800e5be:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800e5c0:	68fb      	ldr	r3, [r7, #12]
 800e5c2:	68db      	ldr	r3, [r3, #12]
 800e5c4:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800e5c8:	68fb      	ldr	r3, [r7, #12]
 800e5ca:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800e5cc:	68fb      	ldr	r3, [r7, #12]
 800e5ce:	68da      	ldr	r2, [r3, #12]
 800e5d0:	697b      	ldr	r3, [r7, #20]
 800e5d2:	029b      	lsls	r3, r3, #10
 800e5d4:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800e5d8:	431a      	orrs	r2, r3
 800e5da:	68fb      	ldr	r3, [r7, #12]
 800e5dc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800e5de:	2300      	movs	r3, #0
}
 800e5e0:	4618      	mov	r0, r3
 800e5e2:	371c      	adds	r7, #28
 800e5e4:	46bd      	mov	sp, r7
 800e5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5ea:	4770      	bx	lr
 800e5ec:	00d8acbf 	.word	0x00d8acbf
 800e5f0:	00e4e1c0 	.word	0x00e4e1c0
 800e5f4:	00f42400 	.word	0x00f42400
 800e5f8:	01067380 	.word	0x01067380
 800e5fc:	011a499f 	.word	0x011a499f
 800e600:	01312cff 	.word	0x01312cff
 800e604:	014ca43f 	.word	0x014ca43f
 800e608:	016e3600 	.word	0x016e3600
 800e60c:	01a6ab1f 	.word	0x01a6ab1f
 800e610:	01e84800 	.word	0x01e84800

0800e614 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800e614:	b480      	push	{r7}
 800e616:	b083      	sub	sp, #12
 800e618:	af00      	add	r7, sp, #0
 800e61a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	689b      	ldr	r3, [r3, #8]
 800e620:	f043 0201 	orr.w	r2, r3, #1
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800e628:	2300      	movs	r3, #0
}
 800e62a:	4618      	mov	r0, r3
 800e62c:	370c      	adds	r7, #12
 800e62e:	46bd      	mov	sp, r7
 800e630:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e634:	4770      	bx	lr

0800e636 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800e636:	b480      	push	{r7}
 800e638:	b083      	sub	sp, #12
 800e63a:	af00      	add	r7, sp, #0
 800e63c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	689b      	ldr	r3, [r3, #8]
 800e642:	f023 0201 	bic.w	r2, r3, #1
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800e64a:	2300      	movs	r3, #0
}
 800e64c:	4618      	mov	r0, r3
 800e64e:	370c      	adds	r7, #12
 800e650:	46bd      	mov	sp, r7
 800e652:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e656:	4770      	bx	lr

0800e658 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800e658:	b580      	push	{r7, lr}
 800e65a:	b084      	sub	sp, #16
 800e65c:	af00      	add	r7, sp, #0
 800e65e:	6078      	str	r0, [r7, #4]
 800e660:	460b      	mov	r3, r1
 800e662:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800e664:	2300      	movs	r3, #0
 800e666:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	68db      	ldr	r3, [r3, #12]
 800e66c:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800e674:	78fb      	ldrb	r3, [r7, #3]
 800e676:	2b01      	cmp	r3, #1
 800e678:	d115      	bne.n	800e6a6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	68db      	ldr	r3, [r3, #12]
 800e67e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800e686:	200a      	movs	r0, #10
 800e688:	f7f4 faae 	bl	8002be8 <HAL_Delay>
      ms += 10U;
 800e68c:	68fb      	ldr	r3, [r7, #12]
 800e68e:	330a      	adds	r3, #10
 800e690:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800e692:	6878      	ldr	r0, [r7, #4]
 800e694:	f001 f93b 	bl	800f90e <USB_GetMode>
 800e698:	4603      	mov	r3, r0
 800e69a:	2b01      	cmp	r3, #1
 800e69c:	d01e      	beq.n	800e6dc <USB_SetCurrentMode+0x84>
 800e69e:	68fb      	ldr	r3, [r7, #12]
 800e6a0:	2bc7      	cmp	r3, #199	@ 0xc7
 800e6a2:	d9f0      	bls.n	800e686 <USB_SetCurrentMode+0x2e>
 800e6a4:	e01a      	b.n	800e6dc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800e6a6:	78fb      	ldrb	r3, [r7, #3]
 800e6a8:	2b00      	cmp	r3, #0
 800e6aa:	d115      	bne.n	800e6d8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	68db      	ldr	r3, [r3, #12]
 800e6b0:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800e6b8:	200a      	movs	r0, #10
 800e6ba:	f7f4 fa95 	bl	8002be8 <HAL_Delay>
      ms += 10U;
 800e6be:	68fb      	ldr	r3, [r7, #12]
 800e6c0:	330a      	adds	r3, #10
 800e6c2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800e6c4:	6878      	ldr	r0, [r7, #4]
 800e6c6:	f001 f922 	bl	800f90e <USB_GetMode>
 800e6ca:	4603      	mov	r3, r0
 800e6cc:	2b00      	cmp	r3, #0
 800e6ce:	d005      	beq.n	800e6dc <USB_SetCurrentMode+0x84>
 800e6d0:	68fb      	ldr	r3, [r7, #12]
 800e6d2:	2bc7      	cmp	r3, #199	@ 0xc7
 800e6d4:	d9f0      	bls.n	800e6b8 <USB_SetCurrentMode+0x60>
 800e6d6:	e001      	b.n	800e6dc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800e6d8:	2301      	movs	r3, #1
 800e6da:	e005      	b.n	800e6e8 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800e6dc:	68fb      	ldr	r3, [r7, #12]
 800e6de:	2bc8      	cmp	r3, #200	@ 0xc8
 800e6e0:	d101      	bne.n	800e6e6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800e6e2:	2301      	movs	r3, #1
 800e6e4:	e000      	b.n	800e6e8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800e6e6:	2300      	movs	r3, #0
}
 800e6e8:	4618      	mov	r0, r3
 800e6ea:	3710      	adds	r7, #16
 800e6ec:	46bd      	mov	sp, r7
 800e6ee:	bd80      	pop	{r7, pc}

0800e6f0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800e6f0:	b084      	sub	sp, #16
 800e6f2:	b580      	push	{r7, lr}
 800e6f4:	b086      	sub	sp, #24
 800e6f6:	af00      	add	r7, sp, #0
 800e6f8:	6078      	str	r0, [r7, #4]
 800e6fa:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800e6fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800e702:	2300      	movs	r3, #0
 800e704:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800e70a:	2300      	movs	r3, #0
 800e70c:	613b      	str	r3, [r7, #16]
 800e70e:	e009      	b.n	800e724 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800e710:	687a      	ldr	r2, [r7, #4]
 800e712:	693b      	ldr	r3, [r7, #16]
 800e714:	3340      	adds	r3, #64	@ 0x40
 800e716:	009b      	lsls	r3, r3, #2
 800e718:	4413      	add	r3, r2
 800e71a:	2200      	movs	r2, #0
 800e71c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800e71e:	693b      	ldr	r3, [r7, #16]
 800e720:	3301      	adds	r3, #1
 800e722:	613b      	str	r3, [r7, #16]
 800e724:	693b      	ldr	r3, [r7, #16]
 800e726:	2b0e      	cmp	r3, #14
 800e728:	d9f2      	bls.n	800e710 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800e72a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800e72e:	2b00      	cmp	r3, #0
 800e730:	d11c      	bne.n	800e76c <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800e732:	68fb      	ldr	r3, [r7, #12]
 800e734:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e738:	685b      	ldr	r3, [r3, #4]
 800e73a:	68fa      	ldr	r2, [r7, #12]
 800e73c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800e740:	f043 0302 	orr.w	r3, r3, #2
 800e744:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e74a:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	681b      	ldr	r3, [r3, #0]
 800e756:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	681b      	ldr	r3, [r3, #0]
 800e762:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	601a      	str	r2, [r3, #0]
 800e76a:	e005      	b.n	800e778 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e770:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800e778:	68fb      	ldr	r3, [r7, #12]
 800e77a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800e77e:	461a      	mov	r2, r3
 800e780:	2300      	movs	r3, #0
 800e782:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800e784:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800e788:	2b01      	cmp	r3, #1
 800e78a:	d10d      	bne.n	800e7a8 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800e78c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e790:	2b00      	cmp	r3, #0
 800e792:	d104      	bne.n	800e79e <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800e794:	2100      	movs	r1, #0
 800e796:	6878      	ldr	r0, [r7, #4]
 800e798:	f000 f968 	bl	800ea6c <USB_SetDevSpeed>
 800e79c:	e008      	b.n	800e7b0 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800e79e:	2101      	movs	r1, #1
 800e7a0:	6878      	ldr	r0, [r7, #4]
 800e7a2:	f000 f963 	bl	800ea6c <USB_SetDevSpeed>
 800e7a6:	e003      	b.n	800e7b0 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800e7a8:	2103      	movs	r1, #3
 800e7aa:	6878      	ldr	r0, [r7, #4]
 800e7ac:	f000 f95e 	bl	800ea6c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800e7b0:	2110      	movs	r1, #16
 800e7b2:	6878      	ldr	r0, [r7, #4]
 800e7b4:	f000 f8fa 	bl	800e9ac <USB_FlushTxFifo>
 800e7b8:	4603      	mov	r3, r0
 800e7ba:	2b00      	cmp	r3, #0
 800e7bc:	d001      	beq.n	800e7c2 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800e7be:	2301      	movs	r3, #1
 800e7c0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800e7c2:	6878      	ldr	r0, [r7, #4]
 800e7c4:	f000 f924 	bl	800ea10 <USB_FlushRxFifo>
 800e7c8:	4603      	mov	r3, r0
 800e7ca:	2b00      	cmp	r3, #0
 800e7cc:	d001      	beq.n	800e7d2 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800e7ce:	2301      	movs	r3, #1
 800e7d0:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800e7d2:	68fb      	ldr	r3, [r7, #12]
 800e7d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e7d8:	461a      	mov	r2, r3
 800e7da:	2300      	movs	r3, #0
 800e7dc:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800e7de:	68fb      	ldr	r3, [r7, #12]
 800e7e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e7e4:	461a      	mov	r2, r3
 800e7e6:	2300      	movs	r3, #0
 800e7e8:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800e7ea:	68fb      	ldr	r3, [r7, #12]
 800e7ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e7f0:	461a      	mov	r2, r3
 800e7f2:	2300      	movs	r3, #0
 800e7f4:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e7f6:	2300      	movs	r3, #0
 800e7f8:	613b      	str	r3, [r7, #16]
 800e7fa:	e043      	b.n	800e884 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800e7fc:	693b      	ldr	r3, [r7, #16]
 800e7fe:	015a      	lsls	r2, r3, #5
 800e800:	68fb      	ldr	r3, [r7, #12]
 800e802:	4413      	add	r3, r2
 800e804:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e808:	681b      	ldr	r3, [r3, #0]
 800e80a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e80e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e812:	d118      	bne.n	800e846 <USB_DevInit+0x156>
    {
      if (i == 0U)
 800e814:	693b      	ldr	r3, [r7, #16]
 800e816:	2b00      	cmp	r3, #0
 800e818:	d10a      	bne.n	800e830 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800e81a:	693b      	ldr	r3, [r7, #16]
 800e81c:	015a      	lsls	r2, r3, #5
 800e81e:	68fb      	ldr	r3, [r7, #12]
 800e820:	4413      	add	r3, r2
 800e822:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e826:	461a      	mov	r2, r3
 800e828:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800e82c:	6013      	str	r3, [r2, #0]
 800e82e:	e013      	b.n	800e858 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800e830:	693b      	ldr	r3, [r7, #16]
 800e832:	015a      	lsls	r2, r3, #5
 800e834:	68fb      	ldr	r3, [r7, #12]
 800e836:	4413      	add	r3, r2
 800e838:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e83c:	461a      	mov	r2, r3
 800e83e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800e842:	6013      	str	r3, [r2, #0]
 800e844:	e008      	b.n	800e858 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800e846:	693b      	ldr	r3, [r7, #16]
 800e848:	015a      	lsls	r2, r3, #5
 800e84a:	68fb      	ldr	r3, [r7, #12]
 800e84c:	4413      	add	r3, r2
 800e84e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e852:	461a      	mov	r2, r3
 800e854:	2300      	movs	r3, #0
 800e856:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800e858:	693b      	ldr	r3, [r7, #16]
 800e85a:	015a      	lsls	r2, r3, #5
 800e85c:	68fb      	ldr	r3, [r7, #12]
 800e85e:	4413      	add	r3, r2
 800e860:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e864:	461a      	mov	r2, r3
 800e866:	2300      	movs	r3, #0
 800e868:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800e86a:	693b      	ldr	r3, [r7, #16]
 800e86c:	015a      	lsls	r2, r3, #5
 800e86e:	68fb      	ldr	r3, [r7, #12]
 800e870:	4413      	add	r3, r2
 800e872:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e876:	461a      	mov	r2, r3
 800e878:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800e87c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e87e:	693b      	ldr	r3, [r7, #16]
 800e880:	3301      	adds	r3, #1
 800e882:	613b      	str	r3, [r7, #16]
 800e884:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800e888:	461a      	mov	r2, r3
 800e88a:	693b      	ldr	r3, [r7, #16]
 800e88c:	4293      	cmp	r3, r2
 800e88e:	d3b5      	bcc.n	800e7fc <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e890:	2300      	movs	r3, #0
 800e892:	613b      	str	r3, [r7, #16]
 800e894:	e043      	b.n	800e91e <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e896:	693b      	ldr	r3, [r7, #16]
 800e898:	015a      	lsls	r2, r3, #5
 800e89a:	68fb      	ldr	r3, [r7, #12]
 800e89c:	4413      	add	r3, r2
 800e89e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e8a2:	681b      	ldr	r3, [r3, #0]
 800e8a4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e8a8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e8ac:	d118      	bne.n	800e8e0 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800e8ae:	693b      	ldr	r3, [r7, #16]
 800e8b0:	2b00      	cmp	r3, #0
 800e8b2:	d10a      	bne.n	800e8ca <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800e8b4:	693b      	ldr	r3, [r7, #16]
 800e8b6:	015a      	lsls	r2, r3, #5
 800e8b8:	68fb      	ldr	r3, [r7, #12]
 800e8ba:	4413      	add	r3, r2
 800e8bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e8c0:	461a      	mov	r2, r3
 800e8c2:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800e8c6:	6013      	str	r3, [r2, #0]
 800e8c8:	e013      	b.n	800e8f2 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800e8ca:	693b      	ldr	r3, [r7, #16]
 800e8cc:	015a      	lsls	r2, r3, #5
 800e8ce:	68fb      	ldr	r3, [r7, #12]
 800e8d0:	4413      	add	r3, r2
 800e8d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e8d6:	461a      	mov	r2, r3
 800e8d8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800e8dc:	6013      	str	r3, [r2, #0]
 800e8de:	e008      	b.n	800e8f2 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800e8e0:	693b      	ldr	r3, [r7, #16]
 800e8e2:	015a      	lsls	r2, r3, #5
 800e8e4:	68fb      	ldr	r3, [r7, #12]
 800e8e6:	4413      	add	r3, r2
 800e8e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e8ec:	461a      	mov	r2, r3
 800e8ee:	2300      	movs	r3, #0
 800e8f0:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800e8f2:	693b      	ldr	r3, [r7, #16]
 800e8f4:	015a      	lsls	r2, r3, #5
 800e8f6:	68fb      	ldr	r3, [r7, #12]
 800e8f8:	4413      	add	r3, r2
 800e8fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e8fe:	461a      	mov	r2, r3
 800e900:	2300      	movs	r3, #0
 800e902:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800e904:	693b      	ldr	r3, [r7, #16]
 800e906:	015a      	lsls	r2, r3, #5
 800e908:	68fb      	ldr	r3, [r7, #12]
 800e90a:	4413      	add	r3, r2
 800e90c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e910:	461a      	mov	r2, r3
 800e912:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800e916:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e918:	693b      	ldr	r3, [r7, #16]
 800e91a:	3301      	adds	r3, #1
 800e91c:	613b      	str	r3, [r7, #16]
 800e91e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800e922:	461a      	mov	r2, r3
 800e924:	693b      	ldr	r3, [r7, #16]
 800e926:	4293      	cmp	r3, r2
 800e928:	d3b5      	bcc.n	800e896 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800e92a:	68fb      	ldr	r3, [r7, #12]
 800e92c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e930:	691b      	ldr	r3, [r3, #16]
 800e932:	68fa      	ldr	r2, [r7, #12]
 800e934:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800e938:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e93c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	2200      	movs	r2, #0
 800e942:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800e94a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800e94c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800e950:	2b00      	cmp	r3, #0
 800e952:	d105      	bne.n	800e960 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	699b      	ldr	r3, [r3, #24]
 800e958:	f043 0210 	orr.w	r2, r3, #16
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	699a      	ldr	r2, [r3, #24]
 800e964:	4b0f      	ldr	r3, [pc, #60]	@ (800e9a4 <USB_DevInit+0x2b4>)
 800e966:	4313      	orrs	r3, r2
 800e968:	687a      	ldr	r2, [r7, #4]
 800e96a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800e96c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800e970:	2b00      	cmp	r3, #0
 800e972:	d005      	beq.n	800e980 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	699b      	ldr	r3, [r3, #24]
 800e978:	f043 0208 	orr.w	r2, r3, #8
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800e980:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800e984:	2b01      	cmp	r3, #1
 800e986:	d105      	bne.n	800e994 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	699a      	ldr	r2, [r3, #24]
 800e98c:	4b06      	ldr	r3, [pc, #24]	@ (800e9a8 <USB_DevInit+0x2b8>)
 800e98e:	4313      	orrs	r3, r2
 800e990:	687a      	ldr	r2, [r7, #4]
 800e992:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800e994:	7dfb      	ldrb	r3, [r7, #23]
}
 800e996:	4618      	mov	r0, r3
 800e998:	3718      	adds	r7, #24
 800e99a:	46bd      	mov	sp, r7
 800e99c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e9a0:	b004      	add	sp, #16
 800e9a2:	4770      	bx	lr
 800e9a4:	803c3800 	.word	0x803c3800
 800e9a8:	40000004 	.word	0x40000004

0800e9ac <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800e9ac:	b480      	push	{r7}
 800e9ae:	b085      	sub	sp, #20
 800e9b0:	af00      	add	r7, sp, #0
 800e9b2:	6078      	str	r0, [r7, #4]
 800e9b4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800e9b6:	2300      	movs	r3, #0
 800e9b8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800e9ba:	68fb      	ldr	r3, [r7, #12]
 800e9bc:	3301      	adds	r3, #1
 800e9be:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800e9c0:	68fb      	ldr	r3, [r7, #12]
 800e9c2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800e9c6:	d901      	bls.n	800e9cc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800e9c8:	2303      	movs	r3, #3
 800e9ca:	e01b      	b.n	800ea04 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	691b      	ldr	r3, [r3, #16]
 800e9d0:	2b00      	cmp	r3, #0
 800e9d2:	daf2      	bge.n	800e9ba <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800e9d4:	2300      	movs	r3, #0
 800e9d6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800e9d8:	683b      	ldr	r3, [r7, #0]
 800e9da:	019b      	lsls	r3, r3, #6
 800e9dc:	f043 0220 	orr.w	r2, r3, #32
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800e9e4:	68fb      	ldr	r3, [r7, #12]
 800e9e6:	3301      	adds	r3, #1
 800e9e8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800e9ea:	68fb      	ldr	r3, [r7, #12]
 800e9ec:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800e9f0:	d901      	bls.n	800e9f6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800e9f2:	2303      	movs	r3, #3
 800e9f4:	e006      	b.n	800ea04 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	691b      	ldr	r3, [r3, #16]
 800e9fa:	f003 0320 	and.w	r3, r3, #32
 800e9fe:	2b20      	cmp	r3, #32
 800ea00:	d0f0      	beq.n	800e9e4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800ea02:	2300      	movs	r3, #0
}
 800ea04:	4618      	mov	r0, r3
 800ea06:	3714      	adds	r7, #20
 800ea08:	46bd      	mov	sp, r7
 800ea0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea0e:	4770      	bx	lr

0800ea10 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800ea10:	b480      	push	{r7}
 800ea12:	b085      	sub	sp, #20
 800ea14:	af00      	add	r7, sp, #0
 800ea16:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ea18:	2300      	movs	r3, #0
 800ea1a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ea1c:	68fb      	ldr	r3, [r7, #12]
 800ea1e:	3301      	adds	r3, #1
 800ea20:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ea22:	68fb      	ldr	r3, [r7, #12]
 800ea24:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800ea28:	d901      	bls.n	800ea2e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800ea2a:	2303      	movs	r3, #3
 800ea2c:	e018      	b.n	800ea60 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	691b      	ldr	r3, [r3, #16]
 800ea32:	2b00      	cmp	r3, #0
 800ea34:	daf2      	bge.n	800ea1c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800ea36:	2300      	movs	r3, #0
 800ea38:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	2210      	movs	r2, #16
 800ea3e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ea40:	68fb      	ldr	r3, [r7, #12]
 800ea42:	3301      	adds	r3, #1
 800ea44:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ea46:	68fb      	ldr	r3, [r7, #12]
 800ea48:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800ea4c:	d901      	bls.n	800ea52 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800ea4e:	2303      	movs	r3, #3
 800ea50:	e006      	b.n	800ea60 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	691b      	ldr	r3, [r3, #16]
 800ea56:	f003 0310 	and.w	r3, r3, #16
 800ea5a:	2b10      	cmp	r3, #16
 800ea5c:	d0f0      	beq.n	800ea40 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800ea5e:	2300      	movs	r3, #0
}
 800ea60:	4618      	mov	r0, r3
 800ea62:	3714      	adds	r7, #20
 800ea64:	46bd      	mov	sp, r7
 800ea66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea6a:	4770      	bx	lr

0800ea6c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800ea6c:	b480      	push	{r7}
 800ea6e:	b085      	sub	sp, #20
 800ea70:	af00      	add	r7, sp, #0
 800ea72:	6078      	str	r0, [r7, #4]
 800ea74:	460b      	mov	r3, r1
 800ea76:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800ea7c:	68fb      	ldr	r3, [r7, #12]
 800ea7e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ea82:	681a      	ldr	r2, [r3, #0]
 800ea84:	78fb      	ldrb	r3, [r7, #3]
 800ea86:	68f9      	ldr	r1, [r7, #12]
 800ea88:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800ea8c:	4313      	orrs	r3, r2
 800ea8e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800ea90:	2300      	movs	r3, #0
}
 800ea92:	4618      	mov	r0, r3
 800ea94:	3714      	adds	r7, #20
 800ea96:	46bd      	mov	sp, r7
 800ea98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea9c:	4770      	bx	lr

0800ea9e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800ea9e:	b480      	push	{r7}
 800eaa0:	b087      	sub	sp, #28
 800eaa2:	af00      	add	r7, sp, #0
 800eaa4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800eaaa:	693b      	ldr	r3, [r7, #16]
 800eaac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800eab0:	689b      	ldr	r3, [r3, #8]
 800eab2:	f003 0306 	and.w	r3, r3, #6
 800eab6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800eab8:	68fb      	ldr	r3, [r7, #12]
 800eaba:	2b00      	cmp	r3, #0
 800eabc:	d102      	bne.n	800eac4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800eabe:	2300      	movs	r3, #0
 800eac0:	75fb      	strb	r3, [r7, #23]
 800eac2:	e00a      	b.n	800eada <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800eac4:	68fb      	ldr	r3, [r7, #12]
 800eac6:	2b02      	cmp	r3, #2
 800eac8:	d002      	beq.n	800ead0 <USB_GetDevSpeed+0x32>
 800eaca:	68fb      	ldr	r3, [r7, #12]
 800eacc:	2b06      	cmp	r3, #6
 800eace:	d102      	bne.n	800ead6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800ead0:	2302      	movs	r3, #2
 800ead2:	75fb      	strb	r3, [r7, #23]
 800ead4:	e001      	b.n	800eada <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800ead6:	230f      	movs	r3, #15
 800ead8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800eada:	7dfb      	ldrb	r3, [r7, #23]
}
 800eadc:	4618      	mov	r0, r3
 800eade:	371c      	adds	r7, #28
 800eae0:	46bd      	mov	sp, r7
 800eae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eae6:	4770      	bx	lr

0800eae8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800eae8:	b480      	push	{r7}
 800eaea:	b085      	sub	sp, #20
 800eaec:	af00      	add	r7, sp, #0
 800eaee:	6078      	str	r0, [r7, #4]
 800eaf0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800eaf6:	683b      	ldr	r3, [r7, #0]
 800eaf8:	781b      	ldrb	r3, [r3, #0]
 800eafa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800eafc:	683b      	ldr	r3, [r7, #0]
 800eafe:	785b      	ldrb	r3, [r3, #1]
 800eb00:	2b01      	cmp	r3, #1
 800eb02:	d139      	bne.n	800eb78 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800eb04:	68fb      	ldr	r3, [r7, #12]
 800eb06:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800eb0a:	69da      	ldr	r2, [r3, #28]
 800eb0c:	683b      	ldr	r3, [r7, #0]
 800eb0e:	781b      	ldrb	r3, [r3, #0]
 800eb10:	f003 030f 	and.w	r3, r3, #15
 800eb14:	2101      	movs	r1, #1
 800eb16:	fa01 f303 	lsl.w	r3, r1, r3
 800eb1a:	b29b      	uxth	r3, r3
 800eb1c:	68f9      	ldr	r1, [r7, #12]
 800eb1e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800eb22:	4313      	orrs	r3, r2
 800eb24:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800eb26:	68bb      	ldr	r3, [r7, #8]
 800eb28:	015a      	lsls	r2, r3, #5
 800eb2a:	68fb      	ldr	r3, [r7, #12]
 800eb2c:	4413      	add	r3, r2
 800eb2e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800eb32:	681b      	ldr	r3, [r3, #0]
 800eb34:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800eb38:	2b00      	cmp	r3, #0
 800eb3a:	d153      	bne.n	800ebe4 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800eb3c:	68bb      	ldr	r3, [r7, #8]
 800eb3e:	015a      	lsls	r2, r3, #5
 800eb40:	68fb      	ldr	r3, [r7, #12]
 800eb42:	4413      	add	r3, r2
 800eb44:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800eb48:	681a      	ldr	r2, [r3, #0]
 800eb4a:	683b      	ldr	r3, [r7, #0]
 800eb4c:	689b      	ldr	r3, [r3, #8]
 800eb4e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800eb52:	683b      	ldr	r3, [r7, #0]
 800eb54:	791b      	ldrb	r3, [r3, #4]
 800eb56:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800eb58:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800eb5a:	68bb      	ldr	r3, [r7, #8]
 800eb5c:	059b      	lsls	r3, r3, #22
 800eb5e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800eb60:	431a      	orrs	r2, r3
 800eb62:	68bb      	ldr	r3, [r7, #8]
 800eb64:	0159      	lsls	r1, r3, #5
 800eb66:	68fb      	ldr	r3, [r7, #12]
 800eb68:	440b      	add	r3, r1
 800eb6a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800eb6e:	4619      	mov	r1, r3
 800eb70:	4b20      	ldr	r3, [pc, #128]	@ (800ebf4 <USB_ActivateEndpoint+0x10c>)
 800eb72:	4313      	orrs	r3, r2
 800eb74:	600b      	str	r3, [r1, #0]
 800eb76:	e035      	b.n	800ebe4 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800eb78:	68fb      	ldr	r3, [r7, #12]
 800eb7a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800eb7e:	69da      	ldr	r2, [r3, #28]
 800eb80:	683b      	ldr	r3, [r7, #0]
 800eb82:	781b      	ldrb	r3, [r3, #0]
 800eb84:	f003 030f 	and.w	r3, r3, #15
 800eb88:	2101      	movs	r1, #1
 800eb8a:	fa01 f303 	lsl.w	r3, r1, r3
 800eb8e:	041b      	lsls	r3, r3, #16
 800eb90:	68f9      	ldr	r1, [r7, #12]
 800eb92:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800eb96:	4313      	orrs	r3, r2
 800eb98:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800eb9a:	68bb      	ldr	r3, [r7, #8]
 800eb9c:	015a      	lsls	r2, r3, #5
 800eb9e:	68fb      	ldr	r3, [r7, #12]
 800eba0:	4413      	add	r3, r2
 800eba2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800eba6:	681b      	ldr	r3, [r3, #0]
 800eba8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ebac:	2b00      	cmp	r3, #0
 800ebae:	d119      	bne.n	800ebe4 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800ebb0:	68bb      	ldr	r3, [r7, #8]
 800ebb2:	015a      	lsls	r2, r3, #5
 800ebb4:	68fb      	ldr	r3, [r7, #12]
 800ebb6:	4413      	add	r3, r2
 800ebb8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ebbc:	681a      	ldr	r2, [r3, #0]
 800ebbe:	683b      	ldr	r3, [r7, #0]
 800ebc0:	689b      	ldr	r3, [r3, #8]
 800ebc2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800ebc6:	683b      	ldr	r3, [r7, #0]
 800ebc8:	791b      	ldrb	r3, [r3, #4]
 800ebca:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800ebcc:	430b      	orrs	r3, r1
 800ebce:	431a      	orrs	r2, r3
 800ebd0:	68bb      	ldr	r3, [r7, #8]
 800ebd2:	0159      	lsls	r1, r3, #5
 800ebd4:	68fb      	ldr	r3, [r7, #12]
 800ebd6:	440b      	add	r3, r1
 800ebd8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ebdc:	4619      	mov	r1, r3
 800ebde:	4b05      	ldr	r3, [pc, #20]	@ (800ebf4 <USB_ActivateEndpoint+0x10c>)
 800ebe0:	4313      	orrs	r3, r2
 800ebe2:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800ebe4:	2300      	movs	r3, #0
}
 800ebe6:	4618      	mov	r0, r3
 800ebe8:	3714      	adds	r7, #20
 800ebea:	46bd      	mov	sp, r7
 800ebec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebf0:	4770      	bx	lr
 800ebf2:	bf00      	nop
 800ebf4:	10008000 	.word	0x10008000

0800ebf8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800ebf8:	b480      	push	{r7}
 800ebfa:	b085      	sub	sp, #20
 800ebfc:	af00      	add	r7, sp, #0
 800ebfe:	6078      	str	r0, [r7, #4]
 800ec00:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ec06:	683b      	ldr	r3, [r7, #0]
 800ec08:	781b      	ldrb	r3, [r3, #0]
 800ec0a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800ec0c:	683b      	ldr	r3, [r7, #0]
 800ec0e:	785b      	ldrb	r3, [r3, #1]
 800ec10:	2b01      	cmp	r3, #1
 800ec12:	d161      	bne.n	800ecd8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ec14:	68bb      	ldr	r3, [r7, #8]
 800ec16:	015a      	lsls	r2, r3, #5
 800ec18:	68fb      	ldr	r3, [r7, #12]
 800ec1a:	4413      	add	r3, r2
 800ec1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ec20:	681b      	ldr	r3, [r3, #0]
 800ec22:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ec26:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ec2a:	d11f      	bne.n	800ec6c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800ec2c:	68bb      	ldr	r3, [r7, #8]
 800ec2e:	015a      	lsls	r2, r3, #5
 800ec30:	68fb      	ldr	r3, [r7, #12]
 800ec32:	4413      	add	r3, r2
 800ec34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ec38:	681b      	ldr	r3, [r3, #0]
 800ec3a:	68ba      	ldr	r2, [r7, #8]
 800ec3c:	0151      	lsls	r1, r2, #5
 800ec3e:	68fa      	ldr	r2, [r7, #12]
 800ec40:	440a      	add	r2, r1
 800ec42:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ec46:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800ec4a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800ec4c:	68bb      	ldr	r3, [r7, #8]
 800ec4e:	015a      	lsls	r2, r3, #5
 800ec50:	68fb      	ldr	r3, [r7, #12]
 800ec52:	4413      	add	r3, r2
 800ec54:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ec58:	681b      	ldr	r3, [r3, #0]
 800ec5a:	68ba      	ldr	r2, [r7, #8]
 800ec5c:	0151      	lsls	r1, r2, #5
 800ec5e:	68fa      	ldr	r2, [r7, #12]
 800ec60:	440a      	add	r2, r1
 800ec62:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ec66:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800ec6a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800ec6c:	68fb      	ldr	r3, [r7, #12]
 800ec6e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ec72:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ec74:	683b      	ldr	r3, [r7, #0]
 800ec76:	781b      	ldrb	r3, [r3, #0]
 800ec78:	f003 030f 	and.w	r3, r3, #15
 800ec7c:	2101      	movs	r1, #1
 800ec7e:	fa01 f303 	lsl.w	r3, r1, r3
 800ec82:	b29b      	uxth	r3, r3
 800ec84:	43db      	mvns	r3, r3
 800ec86:	68f9      	ldr	r1, [r7, #12]
 800ec88:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800ec8c:	4013      	ands	r3, r2
 800ec8e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800ec90:	68fb      	ldr	r3, [r7, #12]
 800ec92:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ec96:	69da      	ldr	r2, [r3, #28]
 800ec98:	683b      	ldr	r3, [r7, #0]
 800ec9a:	781b      	ldrb	r3, [r3, #0]
 800ec9c:	f003 030f 	and.w	r3, r3, #15
 800eca0:	2101      	movs	r1, #1
 800eca2:	fa01 f303 	lsl.w	r3, r1, r3
 800eca6:	b29b      	uxth	r3, r3
 800eca8:	43db      	mvns	r3, r3
 800ecaa:	68f9      	ldr	r1, [r7, #12]
 800ecac:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800ecb0:	4013      	ands	r3, r2
 800ecb2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800ecb4:	68bb      	ldr	r3, [r7, #8]
 800ecb6:	015a      	lsls	r2, r3, #5
 800ecb8:	68fb      	ldr	r3, [r7, #12]
 800ecba:	4413      	add	r3, r2
 800ecbc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ecc0:	681a      	ldr	r2, [r3, #0]
 800ecc2:	68bb      	ldr	r3, [r7, #8]
 800ecc4:	0159      	lsls	r1, r3, #5
 800ecc6:	68fb      	ldr	r3, [r7, #12]
 800ecc8:	440b      	add	r3, r1
 800ecca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ecce:	4619      	mov	r1, r3
 800ecd0:	4b35      	ldr	r3, [pc, #212]	@ (800eda8 <USB_DeactivateEndpoint+0x1b0>)
 800ecd2:	4013      	ands	r3, r2
 800ecd4:	600b      	str	r3, [r1, #0]
 800ecd6:	e060      	b.n	800ed9a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ecd8:	68bb      	ldr	r3, [r7, #8]
 800ecda:	015a      	lsls	r2, r3, #5
 800ecdc:	68fb      	ldr	r3, [r7, #12]
 800ecde:	4413      	add	r3, r2
 800ece0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ece4:	681b      	ldr	r3, [r3, #0]
 800ece6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ecea:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ecee:	d11f      	bne.n	800ed30 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800ecf0:	68bb      	ldr	r3, [r7, #8]
 800ecf2:	015a      	lsls	r2, r3, #5
 800ecf4:	68fb      	ldr	r3, [r7, #12]
 800ecf6:	4413      	add	r3, r2
 800ecf8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ecfc:	681b      	ldr	r3, [r3, #0]
 800ecfe:	68ba      	ldr	r2, [r7, #8]
 800ed00:	0151      	lsls	r1, r2, #5
 800ed02:	68fa      	ldr	r2, [r7, #12]
 800ed04:	440a      	add	r2, r1
 800ed06:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ed0a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800ed0e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800ed10:	68bb      	ldr	r3, [r7, #8]
 800ed12:	015a      	lsls	r2, r3, #5
 800ed14:	68fb      	ldr	r3, [r7, #12]
 800ed16:	4413      	add	r3, r2
 800ed18:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ed1c:	681b      	ldr	r3, [r3, #0]
 800ed1e:	68ba      	ldr	r2, [r7, #8]
 800ed20:	0151      	lsls	r1, r2, #5
 800ed22:	68fa      	ldr	r2, [r7, #12]
 800ed24:	440a      	add	r2, r1
 800ed26:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ed2a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800ed2e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800ed30:	68fb      	ldr	r3, [r7, #12]
 800ed32:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ed36:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ed38:	683b      	ldr	r3, [r7, #0]
 800ed3a:	781b      	ldrb	r3, [r3, #0]
 800ed3c:	f003 030f 	and.w	r3, r3, #15
 800ed40:	2101      	movs	r1, #1
 800ed42:	fa01 f303 	lsl.w	r3, r1, r3
 800ed46:	041b      	lsls	r3, r3, #16
 800ed48:	43db      	mvns	r3, r3
 800ed4a:	68f9      	ldr	r1, [r7, #12]
 800ed4c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800ed50:	4013      	ands	r3, r2
 800ed52:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800ed54:	68fb      	ldr	r3, [r7, #12]
 800ed56:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ed5a:	69da      	ldr	r2, [r3, #28]
 800ed5c:	683b      	ldr	r3, [r7, #0]
 800ed5e:	781b      	ldrb	r3, [r3, #0]
 800ed60:	f003 030f 	and.w	r3, r3, #15
 800ed64:	2101      	movs	r1, #1
 800ed66:	fa01 f303 	lsl.w	r3, r1, r3
 800ed6a:	041b      	lsls	r3, r3, #16
 800ed6c:	43db      	mvns	r3, r3
 800ed6e:	68f9      	ldr	r1, [r7, #12]
 800ed70:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800ed74:	4013      	ands	r3, r2
 800ed76:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800ed78:	68bb      	ldr	r3, [r7, #8]
 800ed7a:	015a      	lsls	r2, r3, #5
 800ed7c:	68fb      	ldr	r3, [r7, #12]
 800ed7e:	4413      	add	r3, r2
 800ed80:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ed84:	681a      	ldr	r2, [r3, #0]
 800ed86:	68bb      	ldr	r3, [r7, #8]
 800ed88:	0159      	lsls	r1, r3, #5
 800ed8a:	68fb      	ldr	r3, [r7, #12]
 800ed8c:	440b      	add	r3, r1
 800ed8e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ed92:	4619      	mov	r1, r3
 800ed94:	4b05      	ldr	r3, [pc, #20]	@ (800edac <USB_DeactivateEndpoint+0x1b4>)
 800ed96:	4013      	ands	r3, r2
 800ed98:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800ed9a:	2300      	movs	r3, #0
}
 800ed9c:	4618      	mov	r0, r3
 800ed9e:	3714      	adds	r7, #20
 800eda0:	46bd      	mov	sp, r7
 800eda2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eda6:	4770      	bx	lr
 800eda8:	ec337800 	.word	0xec337800
 800edac:	eff37800 	.word	0xeff37800

0800edb0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800edb0:	b580      	push	{r7, lr}
 800edb2:	b08a      	sub	sp, #40	@ 0x28
 800edb4:	af02      	add	r7, sp, #8
 800edb6:	60f8      	str	r0, [r7, #12]
 800edb8:	60b9      	str	r1, [r7, #8]
 800edba:	4613      	mov	r3, r2
 800edbc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800edbe:	68fb      	ldr	r3, [r7, #12]
 800edc0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800edc2:	68bb      	ldr	r3, [r7, #8]
 800edc4:	781b      	ldrb	r3, [r3, #0]
 800edc6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800edc8:	68bb      	ldr	r3, [r7, #8]
 800edca:	785b      	ldrb	r3, [r3, #1]
 800edcc:	2b01      	cmp	r3, #1
 800edce:	f040 8181 	bne.w	800f0d4 <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800edd2:	68bb      	ldr	r3, [r7, #8]
 800edd4:	691b      	ldr	r3, [r3, #16]
 800edd6:	2b00      	cmp	r3, #0
 800edd8:	d132      	bne.n	800ee40 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800edda:	69bb      	ldr	r3, [r7, #24]
 800eddc:	015a      	lsls	r2, r3, #5
 800edde:	69fb      	ldr	r3, [r7, #28]
 800ede0:	4413      	add	r3, r2
 800ede2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ede6:	691a      	ldr	r2, [r3, #16]
 800ede8:	69bb      	ldr	r3, [r7, #24]
 800edea:	0159      	lsls	r1, r3, #5
 800edec:	69fb      	ldr	r3, [r7, #28]
 800edee:	440b      	add	r3, r1
 800edf0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800edf4:	4619      	mov	r1, r3
 800edf6:	4ba5      	ldr	r3, [pc, #660]	@ (800f08c <USB_EPStartXfer+0x2dc>)
 800edf8:	4013      	ands	r3, r2
 800edfa:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800edfc:	69bb      	ldr	r3, [r7, #24]
 800edfe:	015a      	lsls	r2, r3, #5
 800ee00:	69fb      	ldr	r3, [r7, #28]
 800ee02:	4413      	add	r3, r2
 800ee04:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ee08:	691b      	ldr	r3, [r3, #16]
 800ee0a:	69ba      	ldr	r2, [r7, #24]
 800ee0c:	0151      	lsls	r1, r2, #5
 800ee0e:	69fa      	ldr	r2, [r7, #28]
 800ee10:	440a      	add	r2, r1
 800ee12:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ee16:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800ee1a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ee1c:	69bb      	ldr	r3, [r7, #24]
 800ee1e:	015a      	lsls	r2, r3, #5
 800ee20:	69fb      	ldr	r3, [r7, #28]
 800ee22:	4413      	add	r3, r2
 800ee24:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ee28:	691a      	ldr	r2, [r3, #16]
 800ee2a:	69bb      	ldr	r3, [r7, #24]
 800ee2c:	0159      	lsls	r1, r3, #5
 800ee2e:	69fb      	ldr	r3, [r7, #28]
 800ee30:	440b      	add	r3, r1
 800ee32:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ee36:	4619      	mov	r1, r3
 800ee38:	4b95      	ldr	r3, [pc, #596]	@ (800f090 <USB_EPStartXfer+0x2e0>)
 800ee3a:	4013      	ands	r3, r2
 800ee3c:	610b      	str	r3, [r1, #16]
 800ee3e:	e092      	b.n	800ef66 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ee40:	69bb      	ldr	r3, [r7, #24]
 800ee42:	015a      	lsls	r2, r3, #5
 800ee44:	69fb      	ldr	r3, [r7, #28]
 800ee46:	4413      	add	r3, r2
 800ee48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ee4c:	691a      	ldr	r2, [r3, #16]
 800ee4e:	69bb      	ldr	r3, [r7, #24]
 800ee50:	0159      	lsls	r1, r3, #5
 800ee52:	69fb      	ldr	r3, [r7, #28]
 800ee54:	440b      	add	r3, r1
 800ee56:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ee5a:	4619      	mov	r1, r3
 800ee5c:	4b8c      	ldr	r3, [pc, #560]	@ (800f090 <USB_EPStartXfer+0x2e0>)
 800ee5e:	4013      	ands	r3, r2
 800ee60:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ee62:	69bb      	ldr	r3, [r7, #24]
 800ee64:	015a      	lsls	r2, r3, #5
 800ee66:	69fb      	ldr	r3, [r7, #28]
 800ee68:	4413      	add	r3, r2
 800ee6a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ee6e:	691a      	ldr	r2, [r3, #16]
 800ee70:	69bb      	ldr	r3, [r7, #24]
 800ee72:	0159      	lsls	r1, r3, #5
 800ee74:	69fb      	ldr	r3, [r7, #28]
 800ee76:	440b      	add	r3, r1
 800ee78:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ee7c:	4619      	mov	r1, r3
 800ee7e:	4b83      	ldr	r3, [pc, #524]	@ (800f08c <USB_EPStartXfer+0x2dc>)
 800ee80:	4013      	ands	r3, r2
 800ee82:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 800ee84:	69bb      	ldr	r3, [r7, #24]
 800ee86:	2b00      	cmp	r3, #0
 800ee88:	d11a      	bne.n	800eec0 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800ee8a:	68bb      	ldr	r3, [r7, #8]
 800ee8c:	691a      	ldr	r2, [r3, #16]
 800ee8e:	68bb      	ldr	r3, [r7, #8]
 800ee90:	689b      	ldr	r3, [r3, #8]
 800ee92:	429a      	cmp	r2, r3
 800ee94:	d903      	bls.n	800ee9e <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800ee96:	68bb      	ldr	r3, [r7, #8]
 800ee98:	689a      	ldr	r2, [r3, #8]
 800ee9a:	68bb      	ldr	r3, [r7, #8]
 800ee9c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800ee9e:	69bb      	ldr	r3, [r7, #24]
 800eea0:	015a      	lsls	r2, r3, #5
 800eea2:	69fb      	ldr	r3, [r7, #28]
 800eea4:	4413      	add	r3, r2
 800eea6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800eeaa:	691b      	ldr	r3, [r3, #16]
 800eeac:	69ba      	ldr	r2, [r7, #24]
 800eeae:	0151      	lsls	r1, r2, #5
 800eeb0:	69fa      	ldr	r2, [r7, #28]
 800eeb2:	440a      	add	r2, r1
 800eeb4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800eeb8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800eebc:	6113      	str	r3, [r2, #16]
 800eebe:	e01b      	b.n	800eef8 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800eec0:	69bb      	ldr	r3, [r7, #24]
 800eec2:	015a      	lsls	r2, r3, #5
 800eec4:	69fb      	ldr	r3, [r7, #28]
 800eec6:	4413      	add	r3, r2
 800eec8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800eecc:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800eece:	68bb      	ldr	r3, [r7, #8]
 800eed0:	6919      	ldr	r1, [r3, #16]
 800eed2:	68bb      	ldr	r3, [r7, #8]
 800eed4:	689b      	ldr	r3, [r3, #8]
 800eed6:	440b      	add	r3, r1
 800eed8:	1e59      	subs	r1, r3, #1
 800eeda:	68bb      	ldr	r3, [r7, #8]
 800eedc:	689b      	ldr	r3, [r3, #8]
 800eede:	fbb1 f3f3 	udiv	r3, r1, r3
 800eee2:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800eee4:	4b6b      	ldr	r3, [pc, #428]	@ (800f094 <USB_EPStartXfer+0x2e4>)
 800eee6:	400b      	ands	r3, r1
 800eee8:	69b9      	ldr	r1, [r7, #24]
 800eeea:	0148      	lsls	r0, r1, #5
 800eeec:	69f9      	ldr	r1, [r7, #28]
 800eeee:	4401      	add	r1, r0
 800eef0:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800eef4:	4313      	orrs	r3, r2
 800eef6:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800eef8:	69bb      	ldr	r3, [r7, #24]
 800eefa:	015a      	lsls	r2, r3, #5
 800eefc:	69fb      	ldr	r3, [r7, #28]
 800eefe:	4413      	add	r3, r2
 800ef00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ef04:	691a      	ldr	r2, [r3, #16]
 800ef06:	68bb      	ldr	r3, [r7, #8]
 800ef08:	691b      	ldr	r3, [r3, #16]
 800ef0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ef0e:	69b9      	ldr	r1, [r7, #24]
 800ef10:	0148      	lsls	r0, r1, #5
 800ef12:	69f9      	ldr	r1, [r7, #28]
 800ef14:	4401      	add	r1, r0
 800ef16:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800ef1a:	4313      	orrs	r3, r2
 800ef1c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800ef1e:	68bb      	ldr	r3, [r7, #8]
 800ef20:	791b      	ldrb	r3, [r3, #4]
 800ef22:	2b01      	cmp	r3, #1
 800ef24:	d11f      	bne.n	800ef66 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800ef26:	69bb      	ldr	r3, [r7, #24]
 800ef28:	015a      	lsls	r2, r3, #5
 800ef2a:	69fb      	ldr	r3, [r7, #28]
 800ef2c:	4413      	add	r3, r2
 800ef2e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ef32:	691b      	ldr	r3, [r3, #16]
 800ef34:	69ba      	ldr	r2, [r7, #24]
 800ef36:	0151      	lsls	r1, r2, #5
 800ef38:	69fa      	ldr	r2, [r7, #28]
 800ef3a:	440a      	add	r2, r1
 800ef3c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ef40:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800ef44:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800ef46:	69bb      	ldr	r3, [r7, #24]
 800ef48:	015a      	lsls	r2, r3, #5
 800ef4a:	69fb      	ldr	r3, [r7, #28]
 800ef4c:	4413      	add	r3, r2
 800ef4e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ef52:	691b      	ldr	r3, [r3, #16]
 800ef54:	69ba      	ldr	r2, [r7, #24]
 800ef56:	0151      	lsls	r1, r2, #5
 800ef58:	69fa      	ldr	r2, [r7, #28]
 800ef5a:	440a      	add	r2, r1
 800ef5c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ef60:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800ef64:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800ef66:	79fb      	ldrb	r3, [r7, #7]
 800ef68:	2b01      	cmp	r3, #1
 800ef6a:	d14b      	bne.n	800f004 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800ef6c:	68bb      	ldr	r3, [r7, #8]
 800ef6e:	69db      	ldr	r3, [r3, #28]
 800ef70:	2b00      	cmp	r3, #0
 800ef72:	d009      	beq.n	800ef88 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800ef74:	69bb      	ldr	r3, [r7, #24]
 800ef76:	015a      	lsls	r2, r3, #5
 800ef78:	69fb      	ldr	r3, [r7, #28]
 800ef7a:	4413      	add	r3, r2
 800ef7c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ef80:	461a      	mov	r2, r3
 800ef82:	68bb      	ldr	r3, [r7, #8]
 800ef84:	69db      	ldr	r3, [r3, #28]
 800ef86:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800ef88:	68bb      	ldr	r3, [r7, #8]
 800ef8a:	791b      	ldrb	r3, [r3, #4]
 800ef8c:	2b01      	cmp	r3, #1
 800ef8e:	d128      	bne.n	800efe2 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ef90:	69fb      	ldr	r3, [r7, #28]
 800ef92:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ef96:	689b      	ldr	r3, [r3, #8]
 800ef98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ef9c:	2b00      	cmp	r3, #0
 800ef9e:	d110      	bne.n	800efc2 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800efa0:	69bb      	ldr	r3, [r7, #24]
 800efa2:	015a      	lsls	r2, r3, #5
 800efa4:	69fb      	ldr	r3, [r7, #28]
 800efa6:	4413      	add	r3, r2
 800efa8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800efac:	681b      	ldr	r3, [r3, #0]
 800efae:	69ba      	ldr	r2, [r7, #24]
 800efb0:	0151      	lsls	r1, r2, #5
 800efb2:	69fa      	ldr	r2, [r7, #28]
 800efb4:	440a      	add	r2, r1
 800efb6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800efba:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800efbe:	6013      	str	r3, [r2, #0]
 800efc0:	e00f      	b.n	800efe2 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800efc2:	69bb      	ldr	r3, [r7, #24]
 800efc4:	015a      	lsls	r2, r3, #5
 800efc6:	69fb      	ldr	r3, [r7, #28]
 800efc8:	4413      	add	r3, r2
 800efca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800efce:	681b      	ldr	r3, [r3, #0]
 800efd0:	69ba      	ldr	r2, [r7, #24]
 800efd2:	0151      	lsls	r1, r2, #5
 800efd4:	69fa      	ldr	r2, [r7, #28]
 800efd6:	440a      	add	r2, r1
 800efd8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800efdc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800efe0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800efe2:	69bb      	ldr	r3, [r7, #24]
 800efe4:	015a      	lsls	r2, r3, #5
 800efe6:	69fb      	ldr	r3, [r7, #28]
 800efe8:	4413      	add	r3, r2
 800efea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800efee:	681b      	ldr	r3, [r3, #0]
 800eff0:	69ba      	ldr	r2, [r7, #24]
 800eff2:	0151      	lsls	r1, r2, #5
 800eff4:	69fa      	ldr	r2, [r7, #28]
 800eff6:	440a      	add	r2, r1
 800eff8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800effc:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800f000:	6013      	str	r3, [r2, #0]
 800f002:	e16a      	b.n	800f2da <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800f004:	69bb      	ldr	r3, [r7, #24]
 800f006:	015a      	lsls	r2, r3, #5
 800f008:	69fb      	ldr	r3, [r7, #28]
 800f00a:	4413      	add	r3, r2
 800f00c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f010:	681b      	ldr	r3, [r3, #0]
 800f012:	69ba      	ldr	r2, [r7, #24]
 800f014:	0151      	lsls	r1, r2, #5
 800f016:	69fa      	ldr	r2, [r7, #28]
 800f018:	440a      	add	r2, r1
 800f01a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800f01e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800f022:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800f024:	68bb      	ldr	r3, [r7, #8]
 800f026:	791b      	ldrb	r3, [r3, #4]
 800f028:	2b01      	cmp	r3, #1
 800f02a:	d015      	beq.n	800f058 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800f02c:	68bb      	ldr	r3, [r7, #8]
 800f02e:	691b      	ldr	r3, [r3, #16]
 800f030:	2b00      	cmp	r3, #0
 800f032:	f000 8152 	beq.w	800f2da <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800f036:	69fb      	ldr	r3, [r7, #28]
 800f038:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f03c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800f03e:	68bb      	ldr	r3, [r7, #8]
 800f040:	781b      	ldrb	r3, [r3, #0]
 800f042:	f003 030f 	and.w	r3, r3, #15
 800f046:	2101      	movs	r1, #1
 800f048:	fa01 f303 	lsl.w	r3, r1, r3
 800f04c:	69f9      	ldr	r1, [r7, #28]
 800f04e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800f052:	4313      	orrs	r3, r2
 800f054:	634b      	str	r3, [r1, #52]	@ 0x34
 800f056:	e140      	b.n	800f2da <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800f058:	69fb      	ldr	r3, [r7, #28]
 800f05a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f05e:	689b      	ldr	r3, [r3, #8]
 800f060:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f064:	2b00      	cmp	r3, #0
 800f066:	d117      	bne.n	800f098 <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800f068:	69bb      	ldr	r3, [r7, #24]
 800f06a:	015a      	lsls	r2, r3, #5
 800f06c:	69fb      	ldr	r3, [r7, #28]
 800f06e:	4413      	add	r3, r2
 800f070:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f074:	681b      	ldr	r3, [r3, #0]
 800f076:	69ba      	ldr	r2, [r7, #24]
 800f078:	0151      	lsls	r1, r2, #5
 800f07a:	69fa      	ldr	r2, [r7, #28]
 800f07c:	440a      	add	r2, r1
 800f07e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800f082:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800f086:	6013      	str	r3, [r2, #0]
 800f088:	e016      	b.n	800f0b8 <USB_EPStartXfer+0x308>
 800f08a:	bf00      	nop
 800f08c:	e007ffff 	.word	0xe007ffff
 800f090:	fff80000 	.word	0xfff80000
 800f094:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800f098:	69bb      	ldr	r3, [r7, #24]
 800f09a:	015a      	lsls	r2, r3, #5
 800f09c:	69fb      	ldr	r3, [r7, #28]
 800f09e:	4413      	add	r3, r2
 800f0a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f0a4:	681b      	ldr	r3, [r3, #0]
 800f0a6:	69ba      	ldr	r2, [r7, #24]
 800f0a8:	0151      	lsls	r1, r2, #5
 800f0aa:	69fa      	ldr	r2, [r7, #28]
 800f0ac:	440a      	add	r2, r1
 800f0ae:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800f0b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800f0b6:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800f0b8:	68bb      	ldr	r3, [r7, #8]
 800f0ba:	68d9      	ldr	r1, [r3, #12]
 800f0bc:	68bb      	ldr	r3, [r7, #8]
 800f0be:	781a      	ldrb	r2, [r3, #0]
 800f0c0:	68bb      	ldr	r3, [r7, #8]
 800f0c2:	691b      	ldr	r3, [r3, #16]
 800f0c4:	b298      	uxth	r0, r3
 800f0c6:	79fb      	ldrb	r3, [r7, #7]
 800f0c8:	9300      	str	r3, [sp, #0]
 800f0ca:	4603      	mov	r3, r0
 800f0cc:	68f8      	ldr	r0, [r7, #12]
 800f0ce:	f000 f9b9 	bl	800f444 <USB_WritePacket>
 800f0d2:	e102      	b.n	800f2da <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800f0d4:	69bb      	ldr	r3, [r7, #24]
 800f0d6:	015a      	lsls	r2, r3, #5
 800f0d8:	69fb      	ldr	r3, [r7, #28]
 800f0da:	4413      	add	r3, r2
 800f0dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f0e0:	691a      	ldr	r2, [r3, #16]
 800f0e2:	69bb      	ldr	r3, [r7, #24]
 800f0e4:	0159      	lsls	r1, r3, #5
 800f0e6:	69fb      	ldr	r3, [r7, #28]
 800f0e8:	440b      	add	r3, r1
 800f0ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f0ee:	4619      	mov	r1, r3
 800f0f0:	4b7c      	ldr	r3, [pc, #496]	@ (800f2e4 <USB_EPStartXfer+0x534>)
 800f0f2:	4013      	ands	r3, r2
 800f0f4:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800f0f6:	69bb      	ldr	r3, [r7, #24]
 800f0f8:	015a      	lsls	r2, r3, #5
 800f0fa:	69fb      	ldr	r3, [r7, #28]
 800f0fc:	4413      	add	r3, r2
 800f0fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f102:	691a      	ldr	r2, [r3, #16]
 800f104:	69bb      	ldr	r3, [r7, #24]
 800f106:	0159      	lsls	r1, r3, #5
 800f108:	69fb      	ldr	r3, [r7, #28]
 800f10a:	440b      	add	r3, r1
 800f10c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f110:	4619      	mov	r1, r3
 800f112:	4b75      	ldr	r3, [pc, #468]	@ (800f2e8 <USB_EPStartXfer+0x538>)
 800f114:	4013      	ands	r3, r2
 800f116:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 800f118:	69bb      	ldr	r3, [r7, #24]
 800f11a:	2b00      	cmp	r3, #0
 800f11c:	d12f      	bne.n	800f17e <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 800f11e:	68bb      	ldr	r3, [r7, #8]
 800f120:	691b      	ldr	r3, [r3, #16]
 800f122:	2b00      	cmp	r3, #0
 800f124:	d003      	beq.n	800f12e <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 800f126:	68bb      	ldr	r3, [r7, #8]
 800f128:	689a      	ldr	r2, [r3, #8]
 800f12a:	68bb      	ldr	r3, [r7, #8]
 800f12c:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800f12e:	68bb      	ldr	r3, [r7, #8]
 800f130:	689a      	ldr	r2, [r3, #8]
 800f132:	68bb      	ldr	r3, [r7, #8]
 800f134:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800f136:	69bb      	ldr	r3, [r7, #24]
 800f138:	015a      	lsls	r2, r3, #5
 800f13a:	69fb      	ldr	r3, [r7, #28]
 800f13c:	4413      	add	r3, r2
 800f13e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f142:	691a      	ldr	r2, [r3, #16]
 800f144:	68bb      	ldr	r3, [r7, #8]
 800f146:	6a1b      	ldr	r3, [r3, #32]
 800f148:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f14c:	69b9      	ldr	r1, [r7, #24]
 800f14e:	0148      	lsls	r0, r1, #5
 800f150:	69f9      	ldr	r1, [r7, #28]
 800f152:	4401      	add	r1, r0
 800f154:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800f158:	4313      	orrs	r3, r2
 800f15a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800f15c:	69bb      	ldr	r3, [r7, #24]
 800f15e:	015a      	lsls	r2, r3, #5
 800f160:	69fb      	ldr	r3, [r7, #28]
 800f162:	4413      	add	r3, r2
 800f164:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f168:	691b      	ldr	r3, [r3, #16]
 800f16a:	69ba      	ldr	r2, [r7, #24]
 800f16c:	0151      	lsls	r1, r2, #5
 800f16e:	69fa      	ldr	r2, [r7, #28]
 800f170:	440a      	add	r2, r1
 800f172:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f176:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800f17a:	6113      	str	r3, [r2, #16]
 800f17c:	e05f      	b.n	800f23e <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 800f17e:	68bb      	ldr	r3, [r7, #8]
 800f180:	691b      	ldr	r3, [r3, #16]
 800f182:	2b00      	cmp	r3, #0
 800f184:	d123      	bne.n	800f1ce <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800f186:	69bb      	ldr	r3, [r7, #24]
 800f188:	015a      	lsls	r2, r3, #5
 800f18a:	69fb      	ldr	r3, [r7, #28]
 800f18c:	4413      	add	r3, r2
 800f18e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f192:	691a      	ldr	r2, [r3, #16]
 800f194:	68bb      	ldr	r3, [r7, #8]
 800f196:	689b      	ldr	r3, [r3, #8]
 800f198:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f19c:	69b9      	ldr	r1, [r7, #24]
 800f19e:	0148      	lsls	r0, r1, #5
 800f1a0:	69f9      	ldr	r1, [r7, #28]
 800f1a2:	4401      	add	r1, r0
 800f1a4:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800f1a8:	4313      	orrs	r3, r2
 800f1aa:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800f1ac:	69bb      	ldr	r3, [r7, #24]
 800f1ae:	015a      	lsls	r2, r3, #5
 800f1b0:	69fb      	ldr	r3, [r7, #28]
 800f1b2:	4413      	add	r3, r2
 800f1b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f1b8:	691b      	ldr	r3, [r3, #16]
 800f1ba:	69ba      	ldr	r2, [r7, #24]
 800f1bc:	0151      	lsls	r1, r2, #5
 800f1be:	69fa      	ldr	r2, [r7, #28]
 800f1c0:	440a      	add	r2, r1
 800f1c2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f1c6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800f1ca:	6113      	str	r3, [r2, #16]
 800f1cc:	e037      	b.n	800f23e <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800f1ce:	68bb      	ldr	r3, [r7, #8]
 800f1d0:	691a      	ldr	r2, [r3, #16]
 800f1d2:	68bb      	ldr	r3, [r7, #8]
 800f1d4:	689b      	ldr	r3, [r3, #8]
 800f1d6:	4413      	add	r3, r2
 800f1d8:	1e5a      	subs	r2, r3, #1
 800f1da:	68bb      	ldr	r3, [r7, #8]
 800f1dc:	689b      	ldr	r3, [r3, #8]
 800f1de:	fbb2 f3f3 	udiv	r3, r2, r3
 800f1e2:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800f1e4:	68bb      	ldr	r3, [r7, #8]
 800f1e6:	689b      	ldr	r3, [r3, #8]
 800f1e8:	8afa      	ldrh	r2, [r7, #22]
 800f1ea:	fb03 f202 	mul.w	r2, r3, r2
 800f1ee:	68bb      	ldr	r3, [r7, #8]
 800f1f0:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800f1f2:	69bb      	ldr	r3, [r7, #24]
 800f1f4:	015a      	lsls	r2, r3, #5
 800f1f6:	69fb      	ldr	r3, [r7, #28]
 800f1f8:	4413      	add	r3, r2
 800f1fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f1fe:	691a      	ldr	r2, [r3, #16]
 800f200:	8afb      	ldrh	r3, [r7, #22]
 800f202:	04d9      	lsls	r1, r3, #19
 800f204:	4b39      	ldr	r3, [pc, #228]	@ (800f2ec <USB_EPStartXfer+0x53c>)
 800f206:	400b      	ands	r3, r1
 800f208:	69b9      	ldr	r1, [r7, #24]
 800f20a:	0148      	lsls	r0, r1, #5
 800f20c:	69f9      	ldr	r1, [r7, #28]
 800f20e:	4401      	add	r1, r0
 800f210:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800f214:	4313      	orrs	r3, r2
 800f216:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800f218:	69bb      	ldr	r3, [r7, #24]
 800f21a:	015a      	lsls	r2, r3, #5
 800f21c:	69fb      	ldr	r3, [r7, #28]
 800f21e:	4413      	add	r3, r2
 800f220:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f224:	691a      	ldr	r2, [r3, #16]
 800f226:	68bb      	ldr	r3, [r7, #8]
 800f228:	6a1b      	ldr	r3, [r3, #32]
 800f22a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f22e:	69b9      	ldr	r1, [r7, #24]
 800f230:	0148      	lsls	r0, r1, #5
 800f232:	69f9      	ldr	r1, [r7, #28]
 800f234:	4401      	add	r1, r0
 800f236:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800f23a:	4313      	orrs	r3, r2
 800f23c:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800f23e:	79fb      	ldrb	r3, [r7, #7]
 800f240:	2b01      	cmp	r3, #1
 800f242:	d10d      	bne.n	800f260 <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800f244:	68bb      	ldr	r3, [r7, #8]
 800f246:	68db      	ldr	r3, [r3, #12]
 800f248:	2b00      	cmp	r3, #0
 800f24a:	d009      	beq.n	800f260 <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800f24c:	68bb      	ldr	r3, [r7, #8]
 800f24e:	68d9      	ldr	r1, [r3, #12]
 800f250:	69bb      	ldr	r3, [r7, #24]
 800f252:	015a      	lsls	r2, r3, #5
 800f254:	69fb      	ldr	r3, [r7, #28]
 800f256:	4413      	add	r3, r2
 800f258:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f25c:	460a      	mov	r2, r1
 800f25e:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800f260:	68bb      	ldr	r3, [r7, #8]
 800f262:	791b      	ldrb	r3, [r3, #4]
 800f264:	2b01      	cmp	r3, #1
 800f266:	d128      	bne.n	800f2ba <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800f268:	69fb      	ldr	r3, [r7, #28]
 800f26a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f26e:	689b      	ldr	r3, [r3, #8]
 800f270:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f274:	2b00      	cmp	r3, #0
 800f276:	d110      	bne.n	800f29a <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800f278:	69bb      	ldr	r3, [r7, #24]
 800f27a:	015a      	lsls	r2, r3, #5
 800f27c:	69fb      	ldr	r3, [r7, #28]
 800f27e:	4413      	add	r3, r2
 800f280:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f284:	681b      	ldr	r3, [r3, #0]
 800f286:	69ba      	ldr	r2, [r7, #24]
 800f288:	0151      	lsls	r1, r2, #5
 800f28a:	69fa      	ldr	r2, [r7, #28]
 800f28c:	440a      	add	r2, r1
 800f28e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f292:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800f296:	6013      	str	r3, [r2, #0]
 800f298:	e00f      	b.n	800f2ba <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800f29a:	69bb      	ldr	r3, [r7, #24]
 800f29c:	015a      	lsls	r2, r3, #5
 800f29e:	69fb      	ldr	r3, [r7, #28]
 800f2a0:	4413      	add	r3, r2
 800f2a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f2a6:	681b      	ldr	r3, [r3, #0]
 800f2a8:	69ba      	ldr	r2, [r7, #24]
 800f2aa:	0151      	lsls	r1, r2, #5
 800f2ac:	69fa      	ldr	r2, [r7, #28]
 800f2ae:	440a      	add	r2, r1
 800f2b0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f2b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800f2b8:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800f2ba:	69bb      	ldr	r3, [r7, #24]
 800f2bc:	015a      	lsls	r2, r3, #5
 800f2be:	69fb      	ldr	r3, [r7, #28]
 800f2c0:	4413      	add	r3, r2
 800f2c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f2c6:	681b      	ldr	r3, [r3, #0]
 800f2c8:	69ba      	ldr	r2, [r7, #24]
 800f2ca:	0151      	lsls	r1, r2, #5
 800f2cc:	69fa      	ldr	r2, [r7, #28]
 800f2ce:	440a      	add	r2, r1
 800f2d0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f2d4:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800f2d8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800f2da:	2300      	movs	r3, #0
}
 800f2dc:	4618      	mov	r0, r3
 800f2de:	3720      	adds	r7, #32
 800f2e0:	46bd      	mov	sp, r7
 800f2e2:	bd80      	pop	{r7, pc}
 800f2e4:	fff80000 	.word	0xfff80000
 800f2e8:	e007ffff 	.word	0xe007ffff
 800f2ec:	1ff80000 	.word	0x1ff80000

0800f2f0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800f2f0:	b480      	push	{r7}
 800f2f2:	b087      	sub	sp, #28
 800f2f4:	af00      	add	r7, sp, #0
 800f2f6:	6078      	str	r0, [r7, #4]
 800f2f8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800f2fa:	2300      	movs	r3, #0
 800f2fc:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800f2fe:	2300      	movs	r3, #0
 800f300:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800f306:	683b      	ldr	r3, [r7, #0]
 800f308:	785b      	ldrb	r3, [r3, #1]
 800f30a:	2b01      	cmp	r3, #1
 800f30c:	d14a      	bne.n	800f3a4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800f30e:	683b      	ldr	r3, [r7, #0]
 800f310:	781b      	ldrb	r3, [r3, #0]
 800f312:	015a      	lsls	r2, r3, #5
 800f314:	693b      	ldr	r3, [r7, #16]
 800f316:	4413      	add	r3, r2
 800f318:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f31c:	681b      	ldr	r3, [r3, #0]
 800f31e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800f322:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800f326:	f040 8086 	bne.w	800f436 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800f32a:	683b      	ldr	r3, [r7, #0]
 800f32c:	781b      	ldrb	r3, [r3, #0]
 800f32e:	015a      	lsls	r2, r3, #5
 800f330:	693b      	ldr	r3, [r7, #16]
 800f332:	4413      	add	r3, r2
 800f334:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f338:	681b      	ldr	r3, [r3, #0]
 800f33a:	683a      	ldr	r2, [r7, #0]
 800f33c:	7812      	ldrb	r2, [r2, #0]
 800f33e:	0151      	lsls	r1, r2, #5
 800f340:	693a      	ldr	r2, [r7, #16]
 800f342:	440a      	add	r2, r1
 800f344:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800f348:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800f34c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800f34e:	683b      	ldr	r3, [r7, #0]
 800f350:	781b      	ldrb	r3, [r3, #0]
 800f352:	015a      	lsls	r2, r3, #5
 800f354:	693b      	ldr	r3, [r7, #16]
 800f356:	4413      	add	r3, r2
 800f358:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f35c:	681b      	ldr	r3, [r3, #0]
 800f35e:	683a      	ldr	r2, [r7, #0]
 800f360:	7812      	ldrb	r2, [r2, #0]
 800f362:	0151      	lsls	r1, r2, #5
 800f364:	693a      	ldr	r2, [r7, #16]
 800f366:	440a      	add	r2, r1
 800f368:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800f36c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800f370:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800f372:	68fb      	ldr	r3, [r7, #12]
 800f374:	3301      	adds	r3, #1
 800f376:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800f378:	68fb      	ldr	r3, [r7, #12]
 800f37a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800f37e:	4293      	cmp	r3, r2
 800f380:	d902      	bls.n	800f388 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800f382:	2301      	movs	r3, #1
 800f384:	75fb      	strb	r3, [r7, #23]
          break;
 800f386:	e056      	b.n	800f436 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800f388:	683b      	ldr	r3, [r7, #0]
 800f38a:	781b      	ldrb	r3, [r3, #0]
 800f38c:	015a      	lsls	r2, r3, #5
 800f38e:	693b      	ldr	r3, [r7, #16]
 800f390:	4413      	add	r3, r2
 800f392:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f396:	681b      	ldr	r3, [r3, #0]
 800f398:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800f39c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800f3a0:	d0e7      	beq.n	800f372 <USB_EPStopXfer+0x82>
 800f3a2:	e048      	b.n	800f436 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800f3a4:	683b      	ldr	r3, [r7, #0]
 800f3a6:	781b      	ldrb	r3, [r3, #0]
 800f3a8:	015a      	lsls	r2, r3, #5
 800f3aa:	693b      	ldr	r3, [r7, #16]
 800f3ac:	4413      	add	r3, r2
 800f3ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f3b2:	681b      	ldr	r3, [r3, #0]
 800f3b4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800f3b8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800f3bc:	d13b      	bne.n	800f436 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800f3be:	683b      	ldr	r3, [r7, #0]
 800f3c0:	781b      	ldrb	r3, [r3, #0]
 800f3c2:	015a      	lsls	r2, r3, #5
 800f3c4:	693b      	ldr	r3, [r7, #16]
 800f3c6:	4413      	add	r3, r2
 800f3c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f3cc:	681b      	ldr	r3, [r3, #0]
 800f3ce:	683a      	ldr	r2, [r7, #0]
 800f3d0:	7812      	ldrb	r2, [r2, #0]
 800f3d2:	0151      	lsls	r1, r2, #5
 800f3d4:	693a      	ldr	r2, [r7, #16]
 800f3d6:	440a      	add	r2, r1
 800f3d8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f3dc:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800f3e0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800f3e2:	683b      	ldr	r3, [r7, #0]
 800f3e4:	781b      	ldrb	r3, [r3, #0]
 800f3e6:	015a      	lsls	r2, r3, #5
 800f3e8:	693b      	ldr	r3, [r7, #16]
 800f3ea:	4413      	add	r3, r2
 800f3ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f3f0:	681b      	ldr	r3, [r3, #0]
 800f3f2:	683a      	ldr	r2, [r7, #0]
 800f3f4:	7812      	ldrb	r2, [r2, #0]
 800f3f6:	0151      	lsls	r1, r2, #5
 800f3f8:	693a      	ldr	r2, [r7, #16]
 800f3fa:	440a      	add	r2, r1
 800f3fc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f400:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800f404:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800f406:	68fb      	ldr	r3, [r7, #12]
 800f408:	3301      	adds	r3, #1
 800f40a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800f40c:	68fb      	ldr	r3, [r7, #12]
 800f40e:	f242 7210 	movw	r2, #10000	@ 0x2710
 800f412:	4293      	cmp	r3, r2
 800f414:	d902      	bls.n	800f41c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800f416:	2301      	movs	r3, #1
 800f418:	75fb      	strb	r3, [r7, #23]
          break;
 800f41a:	e00c      	b.n	800f436 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800f41c:	683b      	ldr	r3, [r7, #0]
 800f41e:	781b      	ldrb	r3, [r3, #0]
 800f420:	015a      	lsls	r2, r3, #5
 800f422:	693b      	ldr	r3, [r7, #16]
 800f424:	4413      	add	r3, r2
 800f426:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f42a:	681b      	ldr	r3, [r3, #0]
 800f42c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800f430:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800f434:	d0e7      	beq.n	800f406 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800f436:	7dfb      	ldrb	r3, [r7, #23]
}
 800f438:	4618      	mov	r0, r3
 800f43a:	371c      	adds	r7, #28
 800f43c:	46bd      	mov	sp, r7
 800f43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f442:	4770      	bx	lr

0800f444 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800f444:	b480      	push	{r7}
 800f446:	b089      	sub	sp, #36	@ 0x24
 800f448:	af00      	add	r7, sp, #0
 800f44a:	60f8      	str	r0, [r7, #12]
 800f44c:	60b9      	str	r1, [r7, #8]
 800f44e:	4611      	mov	r1, r2
 800f450:	461a      	mov	r2, r3
 800f452:	460b      	mov	r3, r1
 800f454:	71fb      	strb	r3, [r7, #7]
 800f456:	4613      	mov	r3, r2
 800f458:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f45a:	68fb      	ldr	r3, [r7, #12]
 800f45c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800f45e:	68bb      	ldr	r3, [r7, #8]
 800f460:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800f462:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800f466:	2b00      	cmp	r3, #0
 800f468:	d123      	bne.n	800f4b2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800f46a:	88bb      	ldrh	r3, [r7, #4]
 800f46c:	3303      	adds	r3, #3
 800f46e:	089b      	lsrs	r3, r3, #2
 800f470:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800f472:	2300      	movs	r3, #0
 800f474:	61bb      	str	r3, [r7, #24]
 800f476:	e018      	b.n	800f4aa <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800f478:	79fb      	ldrb	r3, [r7, #7]
 800f47a:	031a      	lsls	r2, r3, #12
 800f47c:	697b      	ldr	r3, [r7, #20]
 800f47e:	4413      	add	r3, r2
 800f480:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800f484:	461a      	mov	r2, r3
 800f486:	69fb      	ldr	r3, [r7, #28]
 800f488:	681b      	ldr	r3, [r3, #0]
 800f48a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800f48c:	69fb      	ldr	r3, [r7, #28]
 800f48e:	3301      	adds	r3, #1
 800f490:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800f492:	69fb      	ldr	r3, [r7, #28]
 800f494:	3301      	adds	r3, #1
 800f496:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800f498:	69fb      	ldr	r3, [r7, #28]
 800f49a:	3301      	adds	r3, #1
 800f49c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800f49e:	69fb      	ldr	r3, [r7, #28]
 800f4a0:	3301      	adds	r3, #1
 800f4a2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800f4a4:	69bb      	ldr	r3, [r7, #24]
 800f4a6:	3301      	adds	r3, #1
 800f4a8:	61bb      	str	r3, [r7, #24]
 800f4aa:	69ba      	ldr	r2, [r7, #24]
 800f4ac:	693b      	ldr	r3, [r7, #16]
 800f4ae:	429a      	cmp	r2, r3
 800f4b0:	d3e2      	bcc.n	800f478 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800f4b2:	2300      	movs	r3, #0
}
 800f4b4:	4618      	mov	r0, r3
 800f4b6:	3724      	adds	r7, #36	@ 0x24
 800f4b8:	46bd      	mov	sp, r7
 800f4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4be:	4770      	bx	lr

0800f4c0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800f4c0:	b480      	push	{r7}
 800f4c2:	b08b      	sub	sp, #44	@ 0x2c
 800f4c4:	af00      	add	r7, sp, #0
 800f4c6:	60f8      	str	r0, [r7, #12]
 800f4c8:	60b9      	str	r1, [r7, #8]
 800f4ca:	4613      	mov	r3, r2
 800f4cc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f4ce:	68fb      	ldr	r3, [r7, #12]
 800f4d0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800f4d2:	68bb      	ldr	r3, [r7, #8]
 800f4d4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800f4d6:	88fb      	ldrh	r3, [r7, #6]
 800f4d8:	089b      	lsrs	r3, r3, #2
 800f4da:	b29b      	uxth	r3, r3
 800f4dc:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800f4de:	88fb      	ldrh	r3, [r7, #6]
 800f4e0:	f003 0303 	and.w	r3, r3, #3
 800f4e4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800f4e6:	2300      	movs	r3, #0
 800f4e8:	623b      	str	r3, [r7, #32]
 800f4ea:	e014      	b.n	800f516 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800f4ec:	69bb      	ldr	r3, [r7, #24]
 800f4ee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800f4f2:	681a      	ldr	r2, [r3, #0]
 800f4f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f4f6:	601a      	str	r2, [r3, #0]
    pDest++;
 800f4f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f4fa:	3301      	adds	r3, #1
 800f4fc:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800f4fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f500:	3301      	adds	r3, #1
 800f502:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800f504:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f506:	3301      	adds	r3, #1
 800f508:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800f50a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f50c:	3301      	adds	r3, #1
 800f50e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800f510:	6a3b      	ldr	r3, [r7, #32]
 800f512:	3301      	adds	r3, #1
 800f514:	623b      	str	r3, [r7, #32]
 800f516:	6a3a      	ldr	r2, [r7, #32]
 800f518:	697b      	ldr	r3, [r7, #20]
 800f51a:	429a      	cmp	r2, r3
 800f51c:	d3e6      	bcc.n	800f4ec <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800f51e:	8bfb      	ldrh	r3, [r7, #30]
 800f520:	2b00      	cmp	r3, #0
 800f522:	d01e      	beq.n	800f562 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800f524:	2300      	movs	r3, #0
 800f526:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800f528:	69bb      	ldr	r3, [r7, #24]
 800f52a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800f52e:	461a      	mov	r2, r3
 800f530:	f107 0310 	add.w	r3, r7, #16
 800f534:	6812      	ldr	r2, [r2, #0]
 800f536:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800f538:	693a      	ldr	r2, [r7, #16]
 800f53a:	6a3b      	ldr	r3, [r7, #32]
 800f53c:	b2db      	uxtb	r3, r3
 800f53e:	00db      	lsls	r3, r3, #3
 800f540:	fa22 f303 	lsr.w	r3, r2, r3
 800f544:	b2da      	uxtb	r2, r3
 800f546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f548:	701a      	strb	r2, [r3, #0]
      i++;
 800f54a:	6a3b      	ldr	r3, [r7, #32]
 800f54c:	3301      	adds	r3, #1
 800f54e:	623b      	str	r3, [r7, #32]
      pDest++;
 800f550:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f552:	3301      	adds	r3, #1
 800f554:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800f556:	8bfb      	ldrh	r3, [r7, #30]
 800f558:	3b01      	subs	r3, #1
 800f55a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800f55c:	8bfb      	ldrh	r3, [r7, #30]
 800f55e:	2b00      	cmp	r3, #0
 800f560:	d1ea      	bne.n	800f538 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800f562:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800f564:	4618      	mov	r0, r3
 800f566:	372c      	adds	r7, #44	@ 0x2c
 800f568:	46bd      	mov	sp, r7
 800f56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f56e:	4770      	bx	lr

0800f570 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800f570:	b480      	push	{r7}
 800f572:	b085      	sub	sp, #20
 800f574:	af00      	add	r7, sp, #0
 800f576:	6078      	str	r0, [r7, #4]
 800f578:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f57a:	687b      	ldr	r3, [r7, #4]
 800f57c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800f57e:	683b      	ldr	r3, [r7, #0]
 800f580:	781b      	ldrb	r3, [r3, #0]
 800f582:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800f584:	683b      	ldr	r3, [r7, #0]
 800f586:	785b      	ldrb	r3, [r3, #1]
 800f588:	2b01      	cmp	r3, #1
 800f58a:	d12c      	bne.n	800f5e6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800f58c:	68bb      	ldr	r3, [r7, #8]
 800f58e:	015a      	lsls	r2, r3, #5
 800f590:	68fb      	ldr	r3, [r7, #12]
 800f592:	4413      	add	r3, r2
 800f594:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f598:	681b      	ldr	r3, [r3, #0]
 800f59a:	2b00      	cmp	r3, #0
 800f59c:	db12      	blt.n	800f5c4 <USB_EPSetStall+0x54>
 800f59e:	68bb      	ldr	r3, [r7, #8]
 800f5a0:	2b00      	cmp	r3, #0
 800f5a2:	d00f      	beq.n	800f5c4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800f5a4:	68bb      	ldr	r3, [r7, #8]
 800f5a6:	015a      	lsls	r2, r3, #5
 800f5a8:	68fb      	ldr	r3, [r7, #12]
 800f5aa:	4413      	add	r3, r2
 800f5ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f5b0:	681b      	ldr	r3, [r3, #0]
 800f5b2:	68ba      	ldr	r2, [r7, #8]
 800f5b4:	0151      	lsls	r1, r2, #5
 800f5b6:	68fa      	ldr	r2, [r7, #12]
 800f5b8:	440a      	add	r2, r1
 800f5ba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800f5be:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800f5c2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800f5c4:	68bb      	ldr	r3, [r7, #8]
 800f5c6:	015a      	lsls	r2, r3, #5
 800f5c8:	68fb      	ldr	r3, [r7, #12]
 800f5ca:	4413      	add	r3, r2
 800f5cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f5d0:	681b      	ldr	r3, [r3, #0]
 800f5d2:	68ba      	ldr	r2, [r7, #8]
 800f5d4:	0151      	lsls	r1, r2, #5
 800f5d6:	68fa      	ldr	r2, [r7, #12]
 800f5d8:	440a      	add	r2, r1
 800f5da:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800f5de:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800f5e2:	6013      	str	r3, [r2, #0]
 800f5e4:	e02b      	b.n	800f63e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800f5e6:	68bb      	ldr	r3, [r7, #8]
 800f5e8:	015a      	lsls	r2, r3, #5
 800f5ea:	68fb      	ldr	r3, [r7, #12]
 800f5ec:	4413      	add	r3, r2
 800f5ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f5f2:	681b      	ldr	r3, [r3, #0]
 800f5f4:	2b00      	cmp	r3, #0
 800f5f6:	db12      	blt.n	800f61e <USB_EPSetStall+0xae>
 800f5f8:	68bb      	ldr	r3, [r7, #8]
 800f5fa:	2b00      	cmp	r3, #0
 800f5fc:	d00f      	beq.n	800f61e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800f5fe:	68bb      	ldr	r3, [r7, #8]
 800f600:	015a      	lsls	r2, r3, #5
 800f602:	68fb      	ldr	r3, [r7, #12]
 800f604:	4413      	add	r3, r2
 800f606:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f60a:	681b      	ldr	r3, [r3, #0]
 800f60c:	68ba      	ldr	r2, [r7, #8]
 800f60e:	0151      	lsls	r1, r2, #5
 800f610:	68fa      	ldr	r2, [r7, #12]
 800f612:	440a      	add	r2, r1
 800f614:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f618:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800f61c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800f61e:	68bb      	ldr	r3, [r7, #8]
 800f620:	015a      	lsls	r2, r3, #5
 800f622:	68fb      	ldr	r3, [r7, #12]
 800f624:	4413      	add	r3, r2
 800f626:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f62a:	681b      	ldr	r3, [r3, #0]
 800f62c:	68ba      	ldr	r2, [r7, #8]
 800f62e:	0151      	lsls	r1, r2, #5
 800f630:	68fa      	ldr	r2, [r7, #12]
 800f632:	440a      	add	r2, r1
 800f634:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f638:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800f63c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800f63e:	2300      	movs	r3, #0
}
 800f640:	4618      	mov	r0, r3
 800f642:	3714      	adds	r7, #20
 800f644:	46bd      	mov	sp, r7
 800f646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f64a:	4770      	bx	lr

0800f64c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800f64c:	b480      	push	{r7}
 800f64e:	b085      	sub	sp, #20
 800f650:	af00      	add	r7, sp, #0
 800f652:	6078      	str	r0, [r7, #4]
 800f654:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800f65a:	683b      	ldr	r3, [r7, #0]
 800f65c:	781b      	ldrb	r3, [r3, #0]
 800f65e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800f660:	683b      	ldr	r3, [r7, #0]
 800f662:	785b      	ldrb	r3, [r3, #1]
 800f664:	2b01      	cmp	r3, #1
 800f666:	d128      	bne.n	800f6ba <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800f668:	68bb      	ldr	r3, [r7, #8]
 800f66a:	015a      	lsls	r2, r3, #5
 800f66c:	68fb      	ldr	r3, [r7, #12]
 800f66e:	4413      	add	r3, r2
 800f670:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f674:	681b      	ldr	r3, [r3, #0]
 800f676:	68ba      	ldr	r2, [r7, #8]
 800f678:	0151      	lsls	r1, r2, #5
 800f67a:	68fa      	ldr	r2, [r7, #12]
 800f67c:	440a      	add	r2, r1
 800f67e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800f682:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800f686:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800f688:	683b      	ldr	r3, [r7, #0]
 800f68a:	791b      	ldrb	r3, [r3, #4]
 800f68c:	2b03      	cmp	r3, #3
 800f68e:	d003      	beq.n	800f698 <USB_EPClearStall+0x4c>
 800f690:	683b      	ldr	r3, [r7, #0]
 800f692:	791b      	ldrb	r3, [r3, #4]
 800f694:	2b02      	cmp	r3, #2
 800f696:	d138      	bne.n	800f70a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800f698:	68bb      	ldr	r3, [r7, #8]
 800f69a:	015a      	lsls	r2, r3, #5
 800f69c:	68fb      	ldr	r3, [r7, #12]
 800f69e:	4413      	add	r3, r2
 800f6a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f6a4:	681b      	ldr	r3, [r3, #0]
 800f6a6:	68ba      	ldr	r2, [r7, #8]
 800f6a8:	0151      	lsls	r1, r2, #5
 800f6aa:	68fa      	ldr	r2, [r7, #12]
 800f6ac:	440a      	add	r2, r1
 800f6ae:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800f6b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800f6b6:	6013      	str	r3, [r2, #0]
 800f6b8:	e027      	b.n	800f70a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800f6ba:	68bb      	ldr	r3, [r7, #8]
 800f6bc:	015a      	lsls	r2, r3, #5
 800f6be:	68fb      	ldr	r3, [r7, #12]
 800f6c0:	4413      	add	r3, r2
 800f6c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f6c6:	681b      	ldr	r3, [r3, #0]
 800f6c8:	68ba      	ldr	r2, [r7, #8]
 800f6ca:	0151      	lsls	r1, r2, #5
 800f6cc:	68fa      	ldr	r2, [r7, #12]
 800f6ce:	440a      	add	r2, r1
 800f6d0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f6d4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800f6d8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800f6da:	683b      	ldr	r3, [r7, #0]
 800f6dc:	791b      	ldrb	r3, [r3, #4]
 800f6de:	2b03      	cmp	r3, #3
 800f6e0:	d003      	beq.n	800f6ea <USB_EPClearStall+0x9e>
 800f6e2:	683b      	ldr	r3, [r7, #0]
 800f6e4:	791b      	ldrb	r3, [r3, #4]
 800f6e6:	2b02      	cmp	r3, #2
 800f6e8:	d10f      	bne.n	800f70a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800f6ea:	68bb      	ldr	r3, [r7, #8]
 800f6ec:	015a      	lsls	r2, r3, #5
 800f6ee:	68fb      	ldr	r3, [r7, #12]
 800f6f0:	4413      	add	r3, r2
 800f6f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f6f6:	681b      	ldr	r3, [r3, #0]
 800f6f8:	68ba      	ldr	r2, [r7, #8]
 800f6fa:	0151      	lsls	r1, r2, #5
 800f6fc:	68fa      	ldr	r2, [r7, #12]
 800f6fe:	440a      	add	r2, r1
 800f700:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f704:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800f708:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800f70a:	2300      	movs	r3, #0
}
 800f70c:	4618      	mov	r0, r3
 800f70e:	3714      	adds	r7, #20
 800f710:	46bd      	mov	sp, r7
 800f712:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f716:	4770      	bx	lr

0800f718 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800f718:	b480      	push	{r7}
 800f71a:	b085      	sub	sp, #20
 800f71c:	af00      	add	r7, sp, #0
 800f71e:	6078      	str	r0, [r7, #4]
 800f720:	460b      	mov	r3, r1
 800f722:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800f728:	68fb      	ldr	r3, [r7, #12]
 800f72a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f72e:	681b      	ldr	r3, [r3, #0]
 800f730:	68fa      	ldr	r2, [r7, #12]
 800f732:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800f736:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800f73a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800f73c:	68fb      	ldr	r3, [r7, #12]
 800f73e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f742:	681a      	ldr	r2, [r3, #0]
 800f744:	78fb      	ldrb	r3, [r7, #3]
 800f746:	011b      	lsls	r3, r3, #4
 800f748:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800f74c:	68f9      	ldr	r1, [r7, #12]
 800f74e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800f752:	4313      	orrs	r3, r2
 800f754:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800f756:	2300      	movs	r3, #0
}
 800f758:	4618      	mov	r0, r3
 800f75a:	3714      	adds	r7, #20
 800f75c:	46bd      	mov	sp, r7
 800f75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f762:	4770      	bx	lr

0800f764 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800f764:	b480      	push	{r7}
 800f766:	b085      	sub	sp, #20
 800f768:	af00      	add	r7, sp, #0
 800f76a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f76c:	687b      	ldr	r3, [r7, #4]
 800f76e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800f770:	68fb      	ldr	r3, [r7, #12]
 800f772:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800f776:	681b      	ldr	r3, [r3, #0]
 800f778:	68fa      	ldr	r2, [r7, #12]
 800f77a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800f77e:	f023 0303 	bic.w	r3, r3, #3
 800f782:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800f784:	68fb      	ldr	r3, [r7, #12]
 800f786:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f78a:	685b      	ldr	r3, [r3, #4]
 800f78c:	68fa      	ldr	r2, [r7, #12]
 800f78e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800f792:	f023 0302 	bic.w	r3, r3, #2
 800f796:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800f798:	2300      	movs	r3, #0
}
 800f79a:	4618      	mov	r0, r3
 800f79c:	3714      	adds	r7, #20
 800f79e:	46bd      	mov	sp, r7
 800f7a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7a4:	4770      	bx	lr

0800f7a6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800f7a6:	b480      	push	{r7}
 800f7a8:	b085      	sub	sp, #20
 800f7aa:	af00      	add	r7, sp, #0
 800f7ac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f7ae:	687b      	ldr	r3, [r7, #4]
 800f7b0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800f7b2:	68fb      	ldr	r3, [r7, #12]
 800f7b4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800f7b8:	681b      	ldr	r3, [r3, #0]
 800f7ba:	68fa      	ldr	r2, [r7, #12]
 800f7bc:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800f7c0:	f023 0303 	bic.w	r3, r3, #3
 800f7c4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800f7c6:	68fb      	ldr	r3, [r7, #12]
 800f7c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f7cc:	685b      	ldr	r3, [r3, #4]
 800f7ce:	68fa      	ldr	r2, [r7, #12]
 800f7d0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800f7d4:	f043 0302 	orr.w	r3, r3, #2
 800f7d8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800f7da:	2300      	movs	r3, #0
}
 800f7dc:	4618      	mov	r0, r3
 800f7de:	3714      	adds	r7, #20
 800f7e0:	46bd      	mov	sp, r7
 800f7e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7e6:	4770      	bx	lr

0800f7e8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800f7e8:	b480      	push	{r7}
 800f7ea:	b085      	sub	sp, #20
 800f7ec:	af00      	add	r7, sp, #0
 800f7ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800f7f0:	687b      	ldr	r3, [r7, #4]
 800f7f2:	695b      	ldr	r3, [r3, #20]
 800f7f4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800f7f6:	687b      	ldr	r3, [r7, #4]
 800f7f8:	699b      	ldr	r3, [r3, #24]
 800f7fa:	68fa      	ldr	r2, [r7, #12]
 800f7fc:	4013      	ands	r3, r2
 800f7fe:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800f800:	68fb      	ldr	r3, [r7, #12]
}
 800f802:	4618      	mov	r0, r3
 800f804:	3714      	adds	r7, #20
 800f806:	46bd      	mov	sp, r7
 800f808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f80c:	4770      	bx	lr

0800f80e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800f80e:	b480      	push	{r7}
 800f810:	b085      	sub	sp, #20
 800f812:	af00      	add	r7, sp, #0
 800f814:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f816:	687b      	ldr	r3, [r7, #4]
 800f818:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800f81a:	68fb      	ldr	r3, [r7, #12]
 800f81c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f820:	699b      	ldr	r3, [r3, #24]
 800f822:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800f824:	68fb      	ldr	r3, [r7, #12]
 800f826:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f82a:	69db      	ldr	r3, [r3, #28]
 800f82c:	68ba      	ldr	r2, [r7, #8]
 800f82e:	4013      	ands	r3, r2
 800f830:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800f832:	68bb      	ldr	r3, [r7, #8]
 800f834:	0c1b      	lsrs	r3, r3, #16
}
 800f836:	4618      	mov	r0, r3
 800f838:	3714      	adds	r7, #20
 800f83a:	46bd      	mov	sp, r7
 800f83c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f840:	4770      	bx	lr

0800f842 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800f842:	b480      	push	{r7}
 800f844:	b085      	sub	sp, #20
 800f846:	af00      	add	r7, sp, #0
 800f848:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f84a:	687b      	ldr	r3, [r7, #4]
 800f84c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800f84e:	68fb      	ldr	r3, [r7, #12]
 800f850:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f854:	699b      	ldr	r3, [r3, #24]
 800f856:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800f858:	68fb      	ldr	r3, [r7, #12]
 800f85a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f85e:	69db      	ldr	r3, [r3, #28]
 800f860:	68ba      	ldr	r2, [r7, #8]
 800f862:	4013      	ands	r3, r2
 800f864:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800f866:	68bb      	ldr	r3, [r7, #8]
 800f868:	b29b      	uxth	r3, r3
}
 800f86a:	4618      	mov	r0, r3
 800f86c:	3714      	adds	r7, #20
 800f86e:	46bd      	mov	sp, r7
 800f870:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f874:	4770      	bx	lr

0800f876 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800f876:	b480      	push	{r7}
 800f878:	b085      	sub	sp, #20
 800f87a:	af00      	add	r7, sp, #0
 800f87c:	6078      	str	r0, [r7, #4]
 800f87e:	460b      	mov	r3, r1
 800f880:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800f886:	78fb      	ldrb	r3, [r7, #3]
 800f888:	015a      	lsls	r2, r3, #5
 800f88a:	68fb      	ldr	r3, [r7, #12]
 800f88c:	4413      	add	r3, r2
 800f88e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f892:	689b      	ldr	r3, [r3, #8]
 800f894:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800f896:	68fb      	ldr	r3, [r7, #12]
 800f898:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f89c:	695b      	ldr	r3, [r3, #20]
 800f89e:	68ba      	ldr	r2, [r7, #8]
 800f8a0:	4013      	ands	r3, r2
 800f8a2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800f8a4:	68bb      	ldr	r3, [r7, #8]
}
 800f8a6:	4618      	mov	r0, r3
 800f8a8:	3714      	adds	r7, #20
 800f8aa:	46bd      	mov	sp, r7
 800f8ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8b0:	4770      	bx	lr

0800f8b2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800f8b2:	b480      	push	{r7}
 800f8b4:	b087      	sub	sp, #28
 800f8b6:	af00      	add	r7, sp, #0
 800f8b8:	6078      	str	r0, [r7, #4]
 800f8ba:	460b      	mov	r3, r1
 800f8bc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800f8c2:	697b      	ldr	r3, [r7, #20]
 800f8c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f8c8:	691b      	ldr	r3, [r3, #16]
 800f8ca:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800f8cc:	697b      	ldr	r3, [r7, #20]
 800f8ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f8d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f8d4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800f8d6:	78fb      	ldrb	r3, [r7, #3]
 800f8d8:	f003 030f 	and.w	r3, r3, #15
 800f8dc:	68fa      	ldr	r2, [r7, #12]
 800f8de:	fa22 f303 	lsr.w	r3, r2, r3
 800f8e2:	01db      	lsls	r3, r3, #7
 800f8e4:	b2db      	uxtb	r3, r3
 800f8e6:	693a      	ldr	r2, [r7, #16]
 800f8e8:	4313      	orrs	r3, r2
 800f8ea:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800f8ec:	78fb      	ldrb	r3, [r7, #3]
 800f8ee:	015a      	lsls	r2, r3, #5
 800f8f0:	697b      	ldr	r3, [r7, #20]
 800f8f2:	4413      	add	r3, r2
 800f8f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f8f8:	689b      	ldr	r3, [r3, #8]
 800f8fa:	693a      	ldr	r2, [r7, #16]
 800f8fc:	4013      	ands	r3, r2
 800f8fe:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800f900:	68bb      	ldr	r3, [r7, #8]
}
 800f902:	4618      	mov	r0, r3
 800f904:	371c      	adds	r7, #28
 800f906:	46bd      	mov	sp, r7
 800f908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f90c:	4770      	bx	lr

0800f90e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800f90e:	b480      	push	{r7}
 800f910:	b083      	sub	sp, #12
 800f912:	af00      	add	r7, sp, #0
 800f914:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	695b      	ldr	r3, [r3, #20]
 800f91a:	f003 0301 	and.w	r3, r3, #1
}
 800f91e:	4618      	mov	r0, r3
 800f920:	370c      	adds	r7, #12
 800f922:	46bd      	mov	sp, r7
 800f924:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f928:	4770      	bx	lr
	...

0800f92c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800f92c:	b480      	push	{r7}
 800f92e:	b085      	sub	sp, #20
 800f930:	af00      	add	r7, sp, #0
 800f932:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800f938:	68fb      	ldr	r3, [r7, #12]
 800f93a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f93e:	681a      	ldr	r2, [r3, #0]
 800f940:	68fb      	ldr	r3, [r7, #12]
 800f942:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f946:	4619      	mov	r1, r3
 800f948:	4b09      	ldr	r3, [pc, #36]	@ (800f970 <USB_ActivateSetup+0x44>)
 800f94a:	4013      	ands	r3, r2
 800f94c:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800f94e:	68fb      	ldr	r3, [r7, #12]
 800f950:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f954:	685b      	ldr	r3, [r3, #4]
 800f956:	68fa      	ldr	r2, [r7, #12]
 800f958:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800f95c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800f960:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800f962:	2300      	movs	r3, #0
}
 800f964:	4618      	mov	r0, r3
 800f966:	3714      	adds	r7, #20
 800f968:	46bd      	mov	sp, r7
 800f96a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f96e:	4770      	bx	lr
 800f970:	fffff800 	.word	0xfffff800

0800f974 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800f974:	b480      	push	{r7}
 800f976:	b087      	sub	sp, #28
 800f978:	af00      	add	r7, sp, #0
 800f97a:	60f8      	str	r0, [r7, #12]
 800f97c:	460b      	mov	r3, r1
 800f97e:	607a      	str	r2, [r7, #4]
 800f980:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f982:	68fb      	ldr	r3, [r7, #12]
 800f984:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800f986:	68fb      	ldr	r3, [r7, #12]
 800f988:	333c      	adds	r3, #60	@ 0x3c
 800f98a:	3304      	adds	r3, #4
 800f98c:	681b      	ldr	r3, [r3, #0]
 800f98e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800f990:	693b      	ldr	r3, [r7, #16]
 800f992:	4a26      	ldr	r2, [pc, #152]	@ (800fa2c <USB_EP0_OutStart+0xb8>)
 800f994:	4293      	cmp	r3, r2
 800f996:	d90a      	bls.n	800f9ae <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800f998:	697b      	ldr	r3, [r7, #20]
 800f99a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f99e:	681b      	ldr	r3, [r3, #0]
 800f9a0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800f9a4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800f9a8:	d101      	bne.n	800f9ae <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800f9aa:	2300      	movs	r3, #0
 800f9ac:	e037      	b.n	800fa1e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800f9ae:	697b      	ldr	r3, [r7, #20]
 800f9b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f9b4:	461a      	mov	r2, r3
 800f9b6:	2300      	movs	r3, #0
 800f9b8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800f9ba:	697b      	ldr	r3, [r7, #20]
 800f9bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f9c0:	691b      	ldr	r3, [r3, #16]
 800f9c2:	697a      	ldr	r2, [r7, #20]
 800f9c4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f9c8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800f9cc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800f9ce:	697b      	ldr	r3, [r7, #20]
 800f9d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f9d4:	691b      	ldr	r3, [r3, #16]
 800f9d6:	697a      	ldr	r2, [r7, #20]
 800f9d8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f9dc:	f043 0318 	orr.w	r3, r3, #24
 800f9e0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800f9e2:	697b      	ldr	r3, [r7, #20]
 800f9e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f9e8:	691b      	ldr	r3, [r3, #16]
 800f9ea:	697a      	ldr	r2, [r7, #20]
 800f9ec:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f9f0:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800f9f4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800f9f6:	7afb      	ldrb	r3, [r7, #11]
 800f9f8:	2b01      	cmp	r3, #1
 800f9fa:	d10f      	bne.n	800fa1c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800f9fc:	697b      	ldr	r3, [r7, #20]
 800f9fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fa02:	461a      	mov	r2, r3
 800fa04:	687b      	ldr	r3, [r7, #4]
 800fa06:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800fa08:	697b      	ldr	r3, [r7, #20]
 800fa0a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fa0e:	681b      	ldr	r3, [r3, #0]
 800fa10:	697a      	ldr	r2, [r7, #20]
 800fa12:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800fa16:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800fa1a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800fa1c:	2300      	movs	r3, #0
}
 800fa1e:	4618      	mov	r0, r3
 800fa20:	371c      	adds	r7, #28
 800fa22:	46bd      	mov	sp, r7
 800fa24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa28:	4770      	bx	lr
 800fa2a:	bf00      	nop
 800fa2c:	4f54300a 	.word	0x4f54300a

0800fa30 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800fa30:	b480      	push	{r7}
 800fa32:	b085      	sub	sp, #20
 800fa34:	af00      	add	r7, sp, #0
 800fa36:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800fa38:	2300      	movs	r3, #0
 800fa3a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800fa3c:	68fb      	ldr	r3, [r7, #12]
 800fa3e:	3301      	adds	r3, #1
 800fa40:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800fa42:	68fb      	ldr	r3, [r7, #12]
 800fa44:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800fa48:	d901      	bls.n	800fa4e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800fa4a:	2303      	movs	r3, #3
 800fa4c:	e01b      	b.n	800fa86 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800fa4e:	687b      	ldr	r3, [r7, #4]
 800fa50:	691b      	ldr	r3, [r3, #16]
 800fa52:	2b00      	cmp	r3, #0
 800fa54:	daf2      	bge.n	800fa3c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800fa56:	2300      	movs	r3, #0
 800fa58:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800fa5a:	687b      	ldr	r3, [r7, #4]
 800fa5c:	691b      	ldr	r3, [r3, #16]
 800fa5e:	f043 0201 	orr.w	r2, r3, #1
 800fa62:	687b      	ldr	r3, [r7, #4]
 800fa64:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800fa66:	68fb      	ldr	r3, [r7, #12]
 800fa68:	3301      	adds	r3, #1
 800fa6a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800fa6c:	68fb      	ldr	r3, [r7, #12]
 800fa6e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800fa72:	d901      	bls.n	800fa78 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800fa74:	2303      	movs	r3, #3
 800fa76:	e006      	b.n	800fa86 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800fa78:	687b      	ldr	r3, [r7, #4]
 800fa7a:	691b      	ldr	r3, [r3, #16]
 800fa7c:	f003 0301 	and.w	r3, r3, #1
 800fa80:	2b01      	cmp	r3, #1
 800fa82:	d0f0      	beq.n	800fa66 <USB_CoreReset+0x36>

  return HAL_OK;
 800fa84:	2300      	movs	r3, #0
}
 800fa86:	4618      	mov	r0, r3
 800fa88:	3714      	adds	r7, #20
 800fa8a:	46bd      	mov	sp, r7
 800fa8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa90:	4770      	bx	lr
	...

0800fa94 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800fa94:	b580      	push	{r7, lr}
 800fa96:	b084      	sub	sp, #16
 800fa98:	af00      	add	r7, sp, #0
 800fa9a:	6078      	str	r0, [r7, #4]
 800fa9c:	460b      	mov	r3, r1
 800fa9e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800faa0:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800faa4:	f002 fcfe 	bl	80124a4 <USBD_static_malloc>
 800faa8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800faaa:	68fb      	ldr	r3, [r7, #12]
 800faac:	2b00      	cmp	r3, #0
 800faae:	d109      	bne.n	800fac4 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800fab0:	687b      	ldr	r3, [r7, #4]
 800fab2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fab6:	687b      	ldr	r3, [r7, #4]
 800fab8:	32b0      	adds	r2, #176	@ 0xb0
 800faba:	2100      	movs	r1, #0
 800fabc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800fac0:	2302      	movs	r3, #2
 800fac2:	e0d4      	b.n	800fc6e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800fac4:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800fac8:	2100      	movs	r1, #0
 800faca:	68f8      	ldr	r0, [r7, #12]
 800facc:	f003 fa89 	bl	8012fe2 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800fad0:	687b      	ldr	r3, [r7, #4]
 800fad2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fad6:	687b      	ldr	r3, [r7, #4]
 800fad8:	32b0      	adds	r2, #176	@ 0xb0
 800fada:	68f9      	ldr	r1, [r7, #12]
 800fadc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800fae0:	687b      	ldr	r3, [r7, #4]
 800fae2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	32b0      	adds	r2, #176	@ 0xb0
 800faea:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	7c1b      	ldrb	r3, [r3, #16]
 800faf8:	2b00      	cmp	r3, #0
 800fafa:	d138      	bne.n	800fb6e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800fafc:	4b5e      	ldr	r3, [pc, #376]	@ (800fc78 <USBD_CDC_Init+0x1e4>)
 800fafe:	7819      	ldrb	r1, [r3, #0]
 800fb00:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800fb04:	2202      	movs	r2, #2
 800fb06:	6878      	ldr	r0, [r7, #4]
 800fb08:	f002 fba9 	bl	801225e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800fb0c:	4b5a      	ldr	r3, [pc, #360]	@ (800fc78 <USBD_CDC_Init+0x1e4>)
 800fb0e:	781b      	ldrb	r3, [r3, #0]
 800fb10:	f003 020f 	and.w	r2, r3, #15
 800fb14:	6879      	ldr	r1, [r7, #4]
 800fb16:	4613      	mov	r3, r2
 800fb18:	009b      	lsls	r3, r3, #2
 800fb1a:	4413      	add	r3, r2
 800fb1c:	009b      	lsls	r3, r3, #2
 800fb1e:	440b      	add	r3, r1
 800fb20:	3324      	adds	r3, #36	@ 0x24
 800fb22:	2201      	movs	r2, #1
 800fb24:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800fb26:	4b55      	ldr	r3, [pc, #340]	@ (800fc7c <USBD_CDC_Init+0x1e8>)
 800fb28:	7819      	ldrb	r1, [r3, #0]
 800fb2a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800fb2e:	2202      	movs	r2, #2
 800fb30:	6878      	ldr	r0, [r7, #4]
 800fb32:	f002 fb94 	bl	801225e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800fb36:	4b51      	ldr	r3, [pc, #324]	@ (800fc7c <USBD_CDC_Init+0x1e8>)
 800fb38:	781b      	ldrb	r3, [r3, #0]
 800fb3a:	f003 020f 	and.w	r2, r3, #15
 800fb3e:	6879      	ldr	r1, [r7, #4]
 800fb40:	4613      	mov	r3, r2
 800fb42:	009b      	lsls	r3, r3, #2
 800fb44:	4413      	add	r3, r2
 800fb46:	009b      	lsls	r3, r3, #2
 800fb48:	440b      	add	r3, r1
 800fb4a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800fb4e:	2201      	movs	r2, #1
 800fb50:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800fb52:	4b4b      	ldr	r3, [pc, #300]	@ (800fc80 <USBD_CDC_Init+0x1ec>)
 800fb54:	781b      	ldrb	r3, [r3, #0]
 800fb56:	f003 020f 	and.w	r2, r3, #15
 800fb5a:	6879      	ldr	r1, [r7, #4]
 800fb5c:	4613      	mov	r3, r2
 800fb5e:	009b      	lsls	r3, r3, #2
 800fb60:	4413      	add	r3, r2
 800fb62:	009b      	lsls	r3, r3, #2
 800fb64:	440b      	add	r3, r1
 800fb66:	3326      	adds	r3, #38	@ 0x26
 800fb68:	2210      	movs	r2, #16
 800fb6a:	801a      	strh	r2, [r3, #0]
 800fb6c:	e035      	b.n	800fbda <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800fb6e:	4b42      	ldr	r3, [pc, #264]	@ (800fc78 <USBD_CDC_Init+0x1e4>)
 800fb70:	7819      	ldrb	r1, [r3, #0]
 800fb72:	2340      	movs	r3, #64	@ 0x40
 800fb74:	2202      	movs	r2, #2
 800fb76:	6878      	ldr	r0, [r7, #4]
 800fb78:	f002 fb71 	bl	801225e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800fb7c:	4b3e      	ldr	r3, [pc, #248]	@ (800fc78 <USBD_CDC_Init+0x1e4>)
 800fb7e:	781b      	ldrb	r3, [r3, #0]
 800fb80:	f003 020f 	and.w	r2, r3, #15
 800fb84:	6879      	ldr	r1, [r7, #4]
 800fb86:	4613      	mov	r3, r2
 800fb88:	009b      	lsls	r3, r3, #2
 800fb8a:	4413      	add	r3, r2
 800fb8c:	009b      	lsls	r3, r3, #2
 800fb8e:	440b      	add	r3, r1
 800fb90:	3324      	adds	r3, #36	@ 0x24
 800fb92:	2201      	movs	r2, #1
 800fb94:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800fb96:	4b39      	ldr	r3, [pc, #228]	@ (800fc7c <USBD_CDC_Init+0x1e8>)
 800fb98:	7819      	ldrb	r1, [r3, #0]
 800fb9a:	2340      	movs	r3, #64	@ 0x40
 800fb9c:	2202      	movs	r2, #2
 800fb9e:	6878      	ldr	r0, [r7, #4]
 800fba0:	f002 fb5d 	bl	801225e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800fba4:	4b35      	ldr	r3, [pc, #212]	@ (800fc7c <USBD_CDC_Init+0x1e8>)
 800fba6:	781b      	ldrb	r3, [r3, #0]
 800fba8:	f003 020f 	and.w	r2, r3, #15
 800fbac:	6879      	ldr	r1, [r7, #4]
 800fbae:	4613      	mov	r3, r2
 800fbb0:	009b      	lsls	r3, r3, #2
 800fbb2:	4413      	add	r3, r2
 800fbb4:	009b      	lsls	r3, r3, #2
 800fbb6:	440b      	add	r3, r1
 800fbb8:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800fbbc:	2201      	movs	r2, #1
 800fbbe:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800fbc0:	4b2f      	ldr	r3, [pc, #188]	@ (800fc80 <USBD_CDC_Init+0x1ec>)
 800fbc2:	781b      	ldrb	r3, [r3, #0]
 800fbc4:	f003 020f 	and.w	r2, r3, #15
 800fbc8:	6879      	ldr	r1, [r7, #4]
 800fbca:	4613      	mov	r3, r2
 800fbcc:	009b      	lsls	r3, r3, #2
 800fbce:	4413      	add	r3, r2
 800fbd0:	009b      	lsls	r3, r3, #2
 800fbd2:	440b      	add	r3, r1
 800fbd4:	3326      	adds	r3, #38	@ 0x26
 800fbd6:	2210      	movs	r2, #16
 800fbd8:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800fbda:	4b29      	ldr	r3, [pc, #164]	@ (800fc80 <USBD_CDC_Init+0x1ec>)
 800fbdc:	7819      	ldrb	r1, [r3, #0]
 800fbde:	2308      	movs	r3, #8
 800fbe0:	2203      	movs	r2, #3
 800fbe2:	6878      	ldr	r0, [r7, #4]
 800fbe4:	f002 fb3b 	bl	801225e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800fbe8:	4b25      	ldr	r3, [pc, #148]	@ (800fc80 <USBD_CDC_Init+0x1ec>)
 800fbea:	781b      	ldrb	r3, [r3, #0]
 800fbec:	f003 020f 	and.w	r2, r3, #15
 800fbf0:	6879      	ldr	r1, [r7, #4]
 800fbf2:	4613      	mov	r3, r2
 800fbf4:	009b      	lsls	r3, r3, #2
 800fbf6:	4413      	add	r3, r2
 800fbf8:	009b      	lsls	r3, r3, #2
 800fbfa:	440b      	add	r3, r1
 800fbfc:	3324      	adds	r3, #36	@ 0x24
 800fbfe:	2201      	movs	r2, #1
 800fc00:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800fc02:	68fb      	ldr	r3, [r7, #12]
 800fc04:	2200      	movs	r2, #0
 800fc06:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800fc0a:	687b      	ldr	r3, [r7, #4]
 800fc0c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800fc10:	687a      	ldr	r2, [r7, #4]
 800fc12:	33b0      	adds	r3, #176	@ 0xb0
 800fc14:	009b      	lsls	r3, r3, #2
 800fc16:	4413      	add	r3, r2
 800fc18:	685b      	ldr	r3, [r3, #4]
 800fc1a:	681b      	ldr	r3, [r3, #0]
 800fc1c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800fc1e:	68fb      	ldr	r3, [r7, #12]
 800fc20:	2200      	movs	r2, #0
 800fc22:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800fc26:	68fb      	ldr	r3, [r7, #12]
 800fc28:	2200      	movs	r2, #0
 800fc2a:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800fc2e:	68fb      	ldr	r3, [r7, #12]
 800fc30:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800fc34:	2b00      	cmp	r3, #0
 800fc36:	d101      	bne.n	800fc3c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800fc38:	2302      	movs	r3, #2
 800fc3a:	e018      	b.n	800fc6e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fc3c:	687b      	ldr	r3, [r7, #4]
 800fc3e:	7c1b      	ldrb	r3, [r3, #16]
 800fc40:	2b00      	cmp	r3, #0
 800fc42:	d10a      	bne.n	800fc5a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800fc44:	4b0d      	ldr	r3, [pc, #52]	@ (800fc7c <USBD_CDC_Init+0x1e8>)
 800fc46:	7819      	ldrb	r1, [r3, #0]
 800fc48:	68fb      	ldr	r3, [r7, #12]
 800fc4a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800fc4e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800fc52:	6878      	ldr	r0, [r7, #4]
 800fc54:	f002 fbf2 	bl	801243c <USBD_LL_PrepareReceive>
 800fc58:	e008      	b.n	800fc6c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800fc5a:	4b08      	ldr	r3, [pc, #32]	@ (800fc7c <USBD_CDC_Init+0x1e8>)
 800fc5c:	7819      	ldrb	r1, [r3, #0]
 800fc5e:	68fb      	ldr	r3, [r7, #12]
 800fc60:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800fc64:	2340      	movs	r3, #64	@ 0x40
 800fc66:	6878      	ldr	r0, [r7, #4]
 800fc68:	f002 fbe8 	bl	801243c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800fc6c:	2300      	movs	r3, #0
}
 800fc6e:	4618      	mov	r0, r3
 800fc70:	3710      	adds	r7, #16
 800fc72:	46bd      	mov	sp, r7
 800fc74:	bd80      	pop	{r7, pc}
 800fc76:	bf00      	nop
 800fc78:	240000b3 	.word	0x240000b3
 800fc7c:	240000b4 	.word	0x240000b4
 800fc80:	240000b5 	.word	0x240000b5

0800fc84 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800fc84:	b580      	push	{r7, lr}
 800fc86:	b082      	sub	sp, #8
 800fc88:	af00      	add	r7, sp, #0
 800fc8a:	6078      	str	r0, [r7, #4]
 800fc8c:	460b      	mov	r3, r1
 800fc8e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800fc90:	4b3a      	ldr	r3, [pc, #232]	@ (800fd7c <USBD_CDC_DeInit+0xf8>)
 800fc92:	781b      	ldrb	r3, [r3, #0]
 800fc94:	4619      	mov	r1, r3
 800fc96:	6878      	ldr	r0, [r7, #4]
 800fc98:	f002 fb07 	bl	80122aa <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800fc9c:	4b37      	ldr	r3, [pc, #220]	@ (800fd7c <USBD_CDC_DeInit+0xf8>)
 800fc9e:	781b      	ldrb	r3, [r3, #0]
 800fca0:	f003 020f 	and.w	r2, r3, #15
 800fca4:	6879      	ldr	r1, [r7, #4]
 800fca6:	4613      	mov	r3, r2
 800fca8:	009b      	lsls	r3, r3, #2
 800fcaa:	4413      	add	r3, r2
 800fcac:	009b      	lsls	r3, r3, #2
 800fcae:	440b      	add	r3, r1
 800fcb0:	3324      	adds	r3, #36	@ 0x24
 800fcb2:	2200      	movs	r2, #0
 800fcb4:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800fcb6:	4b32      	ldr	r3, [pc, #200]	@ (800fd80 <USBD_CDC_DeInit+0xfc>)
 800fcb8:	781b      	ldrb	r3, [r3, #0]
 800fcba:	4619      	mov	r1, r3
 800fcbc:	6878      	ldr	r0, [r7, #4]
 800fcbe:	f002 faf4 	bl	80122aa <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800fcc2:	4b2f      	ldr	r3, [pc, #188]	@ (800fd80 <USBD_CDC_DeInit+0xfc>)
 800fcc4:	781b      	ldrb	r3, [r3, #0]
 800fcc6:	f003 020f 	and.w	r2, r3, #15
 800fcca:	6879      	ldr	r1, [r7, #4]
 800fccc:	4613      	mov	r3, r2
 800fcce:	009b      	lsls	r3, r3, #2
 800fcd0:	4413      	add	r3, r2
 800fcd2:	009b      	lsls	r3, r3, #2
 800fcd4:	440b      	add	r3, r1
 800fcd6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800fcda:	2200      	movs	r2, #0
 800fcdc:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800fcde:	4b29      	ldr	r3, [pc, #164]	@ (800fd84 <USBD_CDC_DeInit+0x100>)
 800fce0:	781b      	ldrb	r3, [r3, #0]
 800fce2:	4619      	mov	r1, r3
 800fce4:	6878      	ldr	r0, [r7, #4]
 800fce6:	f002 fae0 	bl	80122aa <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800fcea:	4b26      	ldr	r3, [pc, #152]	@ (800fd84 <USBD_CDC_DeInit+0x100>)
 800fcec:	781b      	ldrb	r3, [r3, #0]
 800fcee:	f003 020f 	and.w	r2, r3, #15
 800fcf2:	6879      	ldr	r1, [r7, #4]
 800fcf4:	4613      	mov	r3, r2
 800fcf6:	009b      	lsls	r3, r3, #2
 800fcf8:	4413      	add	r3, r2
 800fcfa:	009b      	lsls	r3, r3, #2
 800fcfc:	440b      	add	r3, r1
 800fcfe:	3324      	adds	r3, #36	@ 0x24
 800fd00:	2200      	movs	r2, #0
 800fd02:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800fd04:	4b1f      	ldr	r3, [pc, #124]	@ (800fd84 <USBD_CDC_DeInit+0x100>)
 800fd06:	781b      	ldrb	r3, [r3, #0]
 800fd08:	f003 020f 	and.w	r2, r3, #15
 800fd0c:	6879      	ldr	r1, [r7, #4]
 800fd0e:	4613      	mov	r3, r2
 800fd10:	009b      	lsls	r3, r3, #2
 800fd12:	4413      	add	r3, r2
 800fd14:	009b      	lsls	r3, r3, #2
 800fd16:	440b      	add	r3, r1
 800fd18:	3326      	adds	r3, #38	@ 0x26
 800fd1a:	2200      	movs	r2, #0
 800fd1c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800fd1e:	687b      	ldr	r3, [r7, #4]
 800fd20:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fd24:	687b      	ldr	r3, [r7, #4]
 800fd26:	32b0      	adds	r2, #176	@ 0xb0
 800fd28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fd2c:	2b00      	cmp	r3, #0
 800fd2e:	d01f      	beq.n	800fd70 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800fd30:	687b      	ldr	r3, [r7, #4]
 800fd32:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800fd36:	687a      	ldr	r2, [r7, #4]
 800fd38:	33b0      	adds	r3, #176	@ 0xb0
 800fd3a:	009b      	lsls	r3, r3, #2
 800fd3c:	4413      	add	r3, r2
 800fd3e:	685b      	ldr	r3, [r3, #4]
 800fd40:	685b      	ldr	r3, [r3, #4]
 800fd42:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800fd44:	687b      	ldr	r3, [r7, #4]
 800fd46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fd4a:	687b      	ldr	r3, [r7, #4]
 800fd4c:	32b0      	adds	r2, #176	@ 0xb0
 800fd4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fd52:	4618      	mov	r0, r3
 800fd54:	f002 fbb4 	bl	80124c0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800fd58:	687b      	ldr	r3, [r7, #4]
 800fd5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fd5e:	687b      	ldr	r3, [r7, #4]
 800fd60:	32b0      	adds	r2, #176	@ 0xb0
 800fd62:	2100      	movs	r1, #0
 800fd64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800fd68:	687b      	ldr	r3, [r7, #4]
 800fd6a:	2200      	movs	r2, #0
 800fd6c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800fd70:	2300      	movs	r3, #0
}
 800fd72:	4618      	mov	r0, r3
 800fd74:	3708      	adds	r7, #8
 800fd76:	46bd      	mov	sp, r7
 800fd78:	bd80      	pop	{r7, pc}
 800fd7a:	bf00      	nop
 800fd7c:	240000b3 	.word	0x240000b3
 800fd80:	240000b4 	.word	0x240000b4
 800fd84:	240000b5 	.word	0x240000b5

0800fd88 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800fd88:	b580      	push	{r7, lr}
 800fd8a:	b086      	sub	sp, #24
 800fd8c:	af00      	add	r7, sp, #0
 800fd8e:	6078      	str	r0, [r7, #4]
 800fd90:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800fd92:	687b      	ldr	r3, [r7, #4]
 800fd94:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fd98:	687b      	ldr	r3, [r7, #4]
 800fd9a:	32b0      	adds	r2, #176	@ 0xb0
 800fd9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fda0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800fda2:	2300      	movs	r3, #0
 800fda4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800fda6:	2300      	movs	r3, #0
 800fda8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800fdaa:	2300      	movs	r3, #0
 800fdac:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800fdae:	693b      	ldr	r3, [r7, #16]
 800fdb0:	2b00      	cmp	r3, #0
 800fdb2:	d101      	bne.n	800fdb8 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800fdb4:	2303      	movs	r3, #3
 800fdb6:	e0bf      	b.n	800ff38 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800fdb8:	683b      	ldr	r3, [r7, #0]
 800fdba:	781b      	ldrb	r3, [r3, #0]
 800fdbc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800fdc0:	2b00      	cmp	r3, #0
 800fdc2:	d050      	beq.n	800fe66 <USBD_CDC_Setup+0xde>
 800fdc4:	2b20      	cmp	r3, #32
 800fdc6:	f040 80af 	bne.w	800ff28 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800fdca:	683b      	ldr	r3, [r7, #0]
 800fdcc:	88db      	ldrh	r3, [r3, #6]
 800fdce:	2b00      	cmp	r3, #0
 800fdd0:	d03a      	beq.n	800fe48 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800fdd2:	683b      	ldr	r3, [r7, #0]
 800fdd4:	781b      	ldrb	r3, [r3, #0]
 800fdd6:	b25b      	sxtb	r3, r3
 800fdd8:	2b00      	cmp	r3, #0
 800fdda:	da1b      	bge.n	800fe14 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800fddc:	687b      	ldr	r3, [r7, #4]
 800fdde:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800fde2:	687a      	ldr	r2, [r7, #4]
 800fde4:	33b0      	adds	r3, #176	@ 0xb0
 800fde6:	009b      	lsls	r3, r3, #2
 800fde8:	4413      	add	r3, r2
 800fdea:	685b      	ldr	r3, [r3, #4]
 800fdec:	689b      	ldr	r3, [r3, #8]
 800fdee:	683a      	ldr	r2, [r7, #0]
 800fdf0:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800fdf2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800fdf4:	683a      	ldr	r2, [r7, #0]
 800fdf6:	88d2      	ldrh	r2, [r2, #6]
 800fdf8:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800fdfa:	683b      	ldr	r3, [r7, #0]
 800fdfc:	88db      	ldrh	r3, [r3, #6]
 800fdfe:	2b07      	cmp	r3, #7
 800fe00:	bf28      	it	cs
 800fe02:	2307      	movcs	r3, #7
 800fe04:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800fe06:	693b      	ldr	r3, [r7, #16]
 800fe08:	89fa      	ldrh	r2, [r7, #14]
 800fe0a:	4619      	mov	r1, r3
 800fe0c:	6878      	ldr	r0, [r7, #4]
 800fe0e:	f001 fdbd 	bl	801198c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800fe12:	e090      	b.n	800ff36 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800fe14:	683b      	ldr	r3, [r7, #0]
 800fe16:	785a      	ldrb	r2, [r3, #1]
 800fe18:	693b      	ldr	r3, [r7, #16]
 800fe1a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800fe1e:	683b      	ldr	r3, [r7, #0]
 800fe20:	88db      	ldrh	r3, [r3, #6]
 800fe22:	2b3f      	cmp	r3, #63	@ 0x3f
 800fe24:	d803      	bhi.n	800fe2e <USBD_CDC_Setup+0xa6>
 800fe26:	683b      	ldr	r3, [r7, #0]
 800fe28:	88db      	ldrh	r3, [r3, #6]
 800fe2a:	b2da      	uxtb	r2, r3
 800fe2c:	e000      	b.n	800fe30 <USBD_CDC_Setup+0xa8>
 800fe2e:	2240      	movs	r2, #64	@ 0x40
 800fe30:	693b      	ldr	r3, [r7, #16]
 800fe32:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800fe36:	6939      	ldr	r1, [r7, #16]
 800fe38:	693b      	ldr	r3, [r7, #16]
 800fe3a:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800fe3e:	461a      	mov	r2, r3
 800fe40:	6878      	ldr	r0, [r7, #4]
 800fe42:	f001 fdcf 	bl	80119e4 <USBD_CtlPrepareRx>
      break;
 800fe46:	e076      	b.n	800ff36 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800fe48:	687b      	ldr	r3, [r7, #4]
 800fe4a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800fe4e:	687a      	ldr	r2, [r7, #4]
 800fe50:	33b0      	adds	r3, #176	@ 0xb0
 800fe52:	009b      	lsls	r3, r3, #2
 800fe54:	4413      	add	r3, r2
 800fe56:	685b      	ldr	r3, [r3, #4]
 800fe58:	689b      	ldr	r3, [r3, #8]
 800fe5a:	683a      	ldr	r2, [r7, #0]
 800fe5c:	7850      	ldrb	r0, [r2, #1]
 800fe5e:	2200      	movs	r2, #0
 800fe60:	6839      	ldr	r1, [r7, #0]
 800fe62:	4798      	blx	r3
      break;
 800fe64:	e067      	b.n	800ff36 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800fe66:	683b      	ldr	r3, [r7, #0]
 800fe68:	785b      	ldrb	r3, [r3, #1]
 800fe6a:	2b0b      	cmp	r3, #11
 800fe6c:	d851      	bhi.n	800ff12 <USBD_CDC_Setup+0x18a>
 800fe6e:	a201      	add	r2, pc, #4	@ (adr r2, 800fe74 <USBD_CDC_Setup+0xec>)
 800fe70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fe74:	0800fea5 	.word	0x0800fea5
 800fe78:	0800ff21 	.word	0x0800ff21
 800fe7c:	0800ff13 	.word	0x0800ff13
 800fe80:	0800ff13 	.word	0x0800ff13
 800fe84:	0800ff13 	.word	0x0800ff13
 800fe88:	0800ff13 	.word	0x0800ff13
 800fe8c:	0800ff13 	.word	0x0800ff13
 800fe90:	0800ff13 	.word	0x0800ff13
 800fe94:	0800ff13 	.word	0x0800ff13
 800fe98:	0800ff13 	.word	0x0800ff13
 800fe9c:	0800fecf 	.word	0x0800fecf
 800fea0:	0800fef9 	.word	0x0800fef9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fea4:	687b      	ldr	r3, [r7, #4]
 800fea6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800feaa:	b2db      	uxtb	r3, r3
 800feac:	2b03      	cmp	r3, #3
 800feae:	d107      	bne.n	800fec0 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800feb0:	f107 030a 	add.w	r3, r7, #10
 800feb4:	2202      	movs	r2, #2
 800feb6:	4619      	mov	r1, r3
 800feb8:	6878      	ldr	r0, [r7, #4]
 800feba:	f001 fd67 	bl	801198c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800febe:	e032      	b.n	800ff26 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800fec0:	6839      	ldr	r1, [r7, #0]
 800fec2:	6878      	ldr	r0, [r7, #4]
 800fec4:	f001 fce5 	bl	8011892 <USBD_CtlError>
            ret = USBD_FAIL;
 800fec8:	2303      	movs	r3, #3
 800feca:	75fb      	strb	r3, [r7, #23]
          break;
 800fecc:	e02b      	b.n	800ff26 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fece:	687b      	ldr	r3, [r7, #4]
 800fed0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fed4:	b2db      	uxtb	r3, r3
 800fed6:	2b03      	cmp	r3, #3
 800fed8:	d107      	bne.n	800feea <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800feda:	f107 030d 	add.w	r3, r7, #13
 800fede:	2201      	movs	r2, #1
 800fee0:	4619      	mov	r1, r3
 800fee2:	6878      	ldr	r0, [r7, #4]
 800fee4:	f001 fd52 	bl	801198c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800fee8:	e01d      	b.n	800ff26 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800feea:	6839      	ldr	r1, [r7, #0]
 800feec:	6878      	ldr	r0, [r7, #4]
 800feee:	f001 fcd0 	bl	8011892 <USBD_CtlError>
            ret = USBD_FAIL;
 800fef2:	2303      	movs	r3, #3
 800fef4:	75fb      	strb	r3, [r7, #23]
          break;
 800fef6:	e016      	b.n	800ff26 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800fef8:	687b      	ldr	r3, [r7, #4]
 800fefa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fefe:	b2db      	uxtb	r3, r3
 800ff00:	2b03      	cmp	r3, #3
 800ff02:	d00f      	beq.n	800ff24 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800ff04:	6839      	ldr	r1, [r7, #0]
 800ff06:	6878      	ldr	r0, [r7, #4]
 800ff08:	f001 fcc3 	bl	8011892 <USBD_CtlError>
            ret = USBD_FAIL;
 800ff0c:	2303      	movs	r3, #3
 800ff0e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800ff10:	e008      	b.n	800ff24 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800ff12:	6839      	ldr	r1, [r7, #0]
 800ff14:	6878      	ldr	r0, [r7, #4]
 800ff16:	f001 fcbc 	bl	8011892 <USBD_CtlError>
          ret = USBD_FAIL;
 800ff1a:	2303      	movs	r3, #3
 800ff1c:	75fb      	strb	r3, [r7, #23]
          break;
 800ff1e:	e002      	b.n	800ff26 <USBD_CDC_Setup+0x19e>
          break;
 800ff20:	bf00      	nop
 800ff22:	e008      	b.n	800ff36 <USBD_CDC_Setup+0x1ae>
          break;
 800ff24:	bf00      	nop
      }
      break;
 800ff26:	e006      	b.n	800ff36 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800ff28:	6839      	ldr	r1, [r7, #0]
 800ff2a:	6878      	ldr	r0, [r7, #4]
 800ff2c:	f001 fcb1 	bl	8011892 <USBD_CtlError>
      ret = USBD_FAIL;
 800ff30:	2303      	movs	r3, #3
 800ff32:	75fb      	strb	r3, [r7, #23]
      break;
 800ff34:	bf00      	nop
  }

  return (uint8_t)ret;
 800ff36:	7dfb      	ldrb	r3, [r7, #23]
}
 800ff38:	4618      	mov	r0, r3
 800ff3a:	3718      	adds	r7, #24
 800ff3c:	46bd      	mov	sp, r7
 800ff3e:	bd80      	pop	{r7, pc}

0800ff40 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ff40:	b580      	push	{r7, lr}
 800ff42:	b084      	sub	sp, #16
 800ff44:	af00      	add	r7, sp, #0
 800ff46:	6078      	str	r0, [r7, #4]
 800ff48:	460b      	mov	r3, r1
 800ff4a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800ff4c:	687b      	ldr	r3, [r7, #4]
 800ff4e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ff52:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800ff54:	687b      	ldr	r3, [r7, #4]
 800ff56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ff5a:	687b      	ldr	r3, [r7, #4]
 800ff5c:	32b0      	adds	r2, #176	@ 0xb0
 800ff5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ff62:	2b00      	cmp	r3, #0
 800ff64:	d101      	bne.n	800ff6a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800ff66:	2303      	movs	r3, #3
 800ff68:	e065      	b.n	8010036 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ff6a:	687b      	ldr	r3, [r7, #4]
 800ff6c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ff70:	687b      	ldr	r3, [r7, #4]
 800ff72:	32b0      	adds	r2, #176	@ 0xb0
 800ff74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ff78:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800ff7a:	78fb      	ldrb	r3, [r7, #3]
 800ff7c:	f003 020f 	and.w	r2, r3, #15
 800ff80:	6879      	ldr	r1, [r7, #4]
 800ff82:	4613      	mov	r3, r2
 800ff84:	009b      	lsls	r3, r3, #2
 800ff86:	4413      	add	r3, r2
 800ff88:	009b      	lsls	r3, r3, #2
 800ff8a:	440b      	add	r3, r1
 800ff8c:	3318      	adds	r3, #24
 800ff8e:	681b      	ldr	r3, [r3, #0]
 800ff90:	2b00      	cmp	r3, #0
 800ff92:	d02f      	beq.n	800fff4 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800ff94:	78fb      	ldrb	r3, [r7, #3]
 800ff96:	f003 020f 	and.w	r2, r3, #15
 800ff9a:	6879      	ldr	r1, [r7, #4]
 800ff9c:	4613      	mov	r3, r2
 800ff9e:	009b      	lsls	r3, r3, #2
 800ffa0:	4413      	add	r3, r2
 800ffa2:	009b      	lsls	r3, r3, #2
 800ffa4:	440b      	add	r3, r1
 800ffa6:	3318      	adds	r3, #24
 800ffa8:	681a      	ldr	r2, [r3, #0]
 800ffaa:	78fb      	ldrb	r3, [r7, #3]
 800ffac:	f003 010f 	and.w	r1, r3, #15
 800ffb0:	68f8      	ldr	r0, [r7, #12]
 800ffb2:	460b      	mov	r3, r1
 800ffb4:	00db      	lsls	r3, r3, #3
 800ffb6:	440b      	add	r3, r1
 800ffb8:	009b      	lsls	r3, r3, #2
 800ffba:	4403      	add	r3, r0
 800ffbc:	331c      	adds	r3, #28
 800ffbe:	681b      	ldr	r3, [r3, #0]
 800ffc0:	fbb2 f1f3 	udiv	r1, r2, r3
 800ffc4:	fb01 f303 	mul.w	r3, r1, r3
 800ffc8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800ffca:	2b00      	cmp	r3, #0
 800ffcc:	d112      	bne.n	800fff4 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800ffce:	78fb      	ldrb	r3, [r7, #3]
 800ffd0:	f003 020f 	and.w	r2, r3, #15
 800ffd4:	6879      	ldr	r1, [r7, #4]
 800ffd6:	4613      	mov	r3, r2
 800ffd8:	009b      	lsls	r3, r3, #2
 800ffda:	4413      	add	r3, r2
 800ffdc:	009b      	lsls	r3, r3, #2
 800ffde:	440b      	add	r3, r1
 800ffe0:	3318      	adds	r3, #24
 800ffe2:	2200      	movs	r2, #0
 800ffe4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800ffe6:	78f9      	ldrb	r1, [r7, #3]
 800ffe8:	2300      	movs	r3, #0
 800ffea:	2200      	movs	r2, #0
 800ffec:	6878      	ldr	r0, [r7, #4]
 800ffee:	f002 fa04 	bl	80123fa <USBD_LL_Transmit>
 800fff2:	e01f      	b.n	8010034 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800fff4:	68bb      	ldr	r3, [r7, #8]
 800fff6:	2200      	movs	r2, #0
 800fff8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800fffc:	687b      	ldr	r3, [r7, #4]
 800fffe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8010002:	687a      	ldr	r2, [r7, #4]
 8010004:	33b0      	adds	r3, #176	@ 0xb0
 8010006:	009b      	lsls	r3, r3, #2
 8010008:	4413      	add	r3, r2
 801000a:	685b      	ldr	r3, [r3, #4]
 801000c:	691b      	ldr	r3, [r3, #16]
 801000e:	2b00      	cmp	r3, #0
 8010010:	d010      	beq.n	8010034 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8010012:	687b      	ldr	r3, [r7, #4]
 8010014:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8010018:	687a      	ldr	r2, [r7, #4]
 801001a:	33b0      	adds	r3, #176	@ 0xb0
 801001c:	009b      	lsls	r3, r3, #2
 801001e:	4413      	add	r3, r2
 8010020:	685b      	ldr	r3, [r3, #4]
 8010022:	691b      	ldr	r3, [r3, #16]
 8010024:	68ba      	ldr	r2, [r7, #8]
 8010026:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 801002a:	68ba      	ldr	r2, [r7, #8]
 801002c:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8010030:	78fa      	ldrb	r2, [r7, #3]
 8010032:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8010034:	2300      	movs	r3, #0
}
 8010036:	4618      	mov	r0, r3
 8010038:	3710      	adds	r7, #16
 801003a:	46bd      	mov	sp, r7
 801003c:	bd80      	pop	{r7, pc}

0801003e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801003e:	b580      	push	{r7, lr}
 8010040:	b084      	sub	sp, #16
 8010042:	af00      	add	r7, sp, #0
 8010044:	6078      	str	r0, [r7, #4]
 8010046:	460b      	mov	r3, r1
 8010048:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801004a:	687b      	ldr	r3, [r7, #4]
 801004c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010050:	687b      	ldr	r3, [r7, #4]
 8010052:	32b0      	adds	r2, #176	@ 0xb0
 8010054:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010058:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 801005a:	687b      	ldr	r3, [r7, #4]
 801005c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010060:	687b      	ldr	r3, [r7, #4]
 8010062:	32b0      	adds	r2, #176	@ 0xb0
 8010064:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010068:	2b00      	cmp	r3, #0
 801006a:	d101      	bne.n	8010070 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 801006c:	2303      	movs	r3, #3
 801006e:	e01a      	b.n	80100a6 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8010070:	78fb      	ldrb	r3, [r7, #3]
 8010072:	4619      	mov	r1, r3
 8010074:	6878      	ldr	r0, [r7, #4]
 8010076:	f002 fa02 	bl	801247e <USBD_LL_GetRxDataSize>
 801007a:	4602      	mov	r2, r0
 801007c:	68fb      	ldr	r3, [r7, #12]
 801007e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8010082:	687b      	ldr	r3, [r7, #4]
 8010084:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8010088:	687a      	ldr	r2, [r7, #4]
 801008a:	33b0      	adds	r3, #176	@ 0xb0
 801008c:	009b      	lsls	r3, r3, #2
 801008e:	4413      	add	r3, r2
 8010090:	685b      	ldr	r3, [r3, #4]
 8010092:	68db      	ldr	r3, [r3, #12]
 8010094:	68fa      	ldr	r2, [r7, #12]
 8010096:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 801009a:	68fa      	ldr	r2, [r7, #12]
 801009c:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 80100a0:	4611      	mov	r1, r2
 80100a2:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80100a4:	2300      	movs	r3, #0
}
 80100a6:	4618      	mov	r0, r3
 80100a8:	3710      	adds	r7, #16
 80100aa:	46bd      	mov	sp, r7
 80100ac:	bd80      	pop	{r7, pc}

080100ae <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80100ae:	b580      	push	{r7, lr}
 80100b0:	b084      	sub	sp, #16
 80100b2:	af00      	add	r7, sp, #0
 80100b4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80100b6:	687b      	ldr	r3, [r7, #4]
 80100b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80100bc:	687b      	ldr	r3, [r7, #4]
 80100be:	32b0      	adds	r2, #176	@ 0xb0
 80100c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80100c4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80100c6:	68fb      	ldr	r3, [r7, #12]
 80100c8:	2b00      	cmp	r3, #0
 80100ca:	d101      	bne.n	80100d0 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80100cc:	2303      	movs	r3, #3
 80100ce:	e024      	b.n	801011a <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80100d0:	687b      	ldr	r3, [r7, #4]
 80100d2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80100d6:	687a      	ldr	r2, [r7, #4]
 80100d8:	33b0      	adds	r3, #176	@ 0xb0
 80100da:	009b      	lsls	r3, r3, #2
 80100dc:	4413      	add	r3, r2
 80100de:	685b      	ldr	r3, [r3, #4]
 80100e0:	2b00      	cmp	r3, #0
 80100e2:	d019      	beq.n	8010118 <USBD_CDC_EP0_RxReady+0x6a>
 80100e4:	68fb      	ldr	r3, [r7, #12]
 80100e6:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80100ea:	2bff      	cmp	r3, #255	@ 0xff
 80100ec:	d014      	beq.n	8010118 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80100ee:	687b      	ldr	r3, [r7, #4]
 80100f0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80100f4:	687a      	ldr	r2, [r7, #4]
 80100f6:	33b0      	adds	r3, #176	@ 0xb0
 80100f8:	009b      	lsls	r3, r3, #2
 80100fa:	4413      	add	r3, r2
 80100fc:	685b      	ldr	r3, [r3, #4]
 80100fe:	689b      	ldr	r3, [r3, #8]
 8010100:	68fa      	ldr	r2, [r7, #12]
 8010102:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8010106:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8010108:	68fa      	ldr	r2, [r7, #12]
 801010a:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 801010e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8010110:	68fb      	ldr	r3, [r7, #12]
 8010112:	22ff      	movs	r2, #255	@ 0xff
 8010114:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8010118:	2300      	movs	r3, #0
}
 801011a:	4618      	mov	r0, r3
 801011c:	3710      	adds	r7, #16
 801011e:	46bd      	mov	sp, r7
 8010120:	bd80      	pop	{r7, pc}
	...

08010124 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8010124:	b580      	push	{r7, lr}
 8010126:	b086      	sub	sp, #24
 8010128:	af00      	add	r7, sp, #0
 801012a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 801012c:	2182      	movs	r1, #130	@ 0x82
 801012e:	4818      	ldr	r0, [pc, #96]	@ (8010190 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8010130:	f000 fd4f 	bl	8010bd2 <USBD_GetEpDesc>
 8010134:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8010136:	2101      	movs	r1, #1
 8010138:	4815      	ldr	r0, [pc, #84]	@ (8010190 <USBD_CDC_GetFSCfgDesc+0x6c>)
 801013a:	f000 fd4a 	bl	8010bd2 <USBD_GetEpDesc>
 801013e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8010140:	2181      	movs	r1, #129	@ 0x81
 8010142:	4813      	ldr	r0, [pc, #76]	@ (8010190 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8010144:	f000 fd45 	bl	8010bd2 <USBD_GetEpDesc>
 8010148:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 801014a:	697b      	ldr	r3, [r7, #20]
 801014c:	2b00      	cmp	r3, #0
 801014e:	d002      	beq.n	8010156 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8010150:	697b      	ldr	r3, [r7, #20]
 8010152:	2210      	movs	r2, #16
 8010154:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8010156:	693b      	ldr	r3, [r7, #16]
 8010158:	2b00      	cmp	r3, #0
 801015a:	d006      	beq.n	801016a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 801015c:	693b      	ldr	r3, [r7, #16]
 801015e:	2200      	movs	r2, #0
 8010160:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8010164:	711a      	strb	r2, [r3, #4]
 8010166:	2200      	movs	r2, #0
 8010168:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 801016a:	68fb      	ldr	r3, [r7, #12]
 801016c:	2b00      	cmp	r3, #0
 801016e:	d006      	beq.n	801017e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8010170:	68fb      	ldr	r3, [r7, #12]
 8010172:	2200      	movs	r2, #0
 8010174:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8010178:	711a      	strb	r2, [r3, #4]
 801017a:	2200      	movs	r2, #0
 801017c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 801017e:	687b      	ldr	r3, [r7, #4]
 8010180:	2243      	movs	r2, #67	@ 0x43
 8010182:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8010184:	4b02      	ldr	r3, [pc, #8]	@ (8010190 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8010186:	4618      	mov	r0, r3
 8010188:	3718      	adds	r7, #24
 801018a:	46bd      	mov	sp, r7
 801018c:	bd80      	pop	{r7, pc}
 801018e:	bf00      	nop
 8010190:	24000070 	.word	0x24000070

08010194 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8010194:	b580      	push	{r7, lr}
 8010196:	b086      	sub	sp, #24
 8010198:	af00      	add	r7, sp, #0
 801019a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 801019c:	2182      	movs	r1, #130	@ 0x82
 801019e:	4818      	ldr	r0, [pc, #96]	@ (8010200 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80101a0:	f000 fd17 	bl	8010bd2 <USBD_GetEpDesc>
 80101a4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80101a6:	2101      	movs	r1, #1
 80101a8:	4815      	ldr	r0, [pc, #84]	@ (8010200 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80101aa:	f000 fd12 	bl	8010bd2 <USBD_GetEpDesc>
 80101ae:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80101b0:	2181      	movs	r1, #129	@ 0x81
 80101b2:	4813      	ldr	r0, [pc, #76]	@ (8010200 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80101b4:	f000 fd0d 	bl	8010bd2 <USBD_GetEpDesc>
 80101b8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80101ba:	697b      	ldr	r3, [r7, #20]
 80101bc:	2b00      	cmp	r3, #0
 80101be:	d002      	beq.n	80101c6 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80101c0:	697b      	ldr	r3, [r7, #20]
 80101c2:	2210      	movs	r2, #16
 80101c4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80101c6:	693b      	ldr	r3, [r7, #16]
 80101c8:	2b00      	cmp	r3, #0
 80101ca:	d006      	beq.n	80101da <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80101cc:	693b      	ldr	r3, [r7, #16]
 80101ce:	2200      	movs	r2, #0
 80101d0:	711a      	strb	r2, [r3, #4]
 80101d2:	2200      	movs	r2, #0
 80101d4:	f042 0202 	orr.w	r2, r2, #2
 80101d8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80101da:	68fb      	ldr	r3, [r7, #12]
 80101dc:	2b00      	cmp	r3, #0
 80101de:	d006      	beq.n	80101ee <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80101e0:	68fb      	ldr	r3, [r7, #12]
 80101e2:	2200      	movs	r2, #0
 80101e4:	711a      	strb	r2, [r3, #4]
 80101e6:	2200      	movs	r2, #0
 80101e8:	f042 0202 	orr.w	r2, r2, #2
 80101ec:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	2243      	movs	r2, #67	@ 0x43
 80101f2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80101f4:	4b02      	ldr	r3, [pc, #8]	@ (8010200 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80101f6:	4618      	mov	r0, r3
 80101f8:	3718      	adds	r7, #24
 80101fa:	46bd      	mov	sp, r7
 80101fc:	bd80      	pop	{r7, pc}
 80101fe:	bf00      	nop
 8010200:	24000070 	.word	0x24000070

08010204 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8010204:	b580      	push	{r7, lr}
 8010206:	b086      	sub	sp, #24
 8010208:	af00      	add	r7, sp, #0
 801020a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 801020c:	2182      	movs	r1, #130	@ 0x82
 801020e:	4818      	ldr	r0, [pc, #96]	@ (8010270 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8010210:	f000 fcdf 	bl	8010bd2 <USBD_GetEpDesc>
 8010214:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8010216:	2101      	movs	r1, #1
 8010218:	4815      	ldr	r0, [pc, #84]	@ (8010270 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 801021a:	f000 fcda 	bl	8010bd2 <USBD_GetEpDesc>
 801021e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8010220:	2181      	movs	r1, #129	@ 0x81
 8010222:	4813      	ldr	r0, [pc, #76]	@ (8010270 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8010224:	f000 fcd5 	bl	8010bd2 <USBD_GetEpDesc>
 8010228:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 801022a:	697b      	ldr	r3, [r7, #20]
 801022c:	2b00      	cmp	r3, #0
 801022e:	d002      	beq.n	8010236 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8010230:	697b      	ldr	r3, [r7, #20]
 8010232:	2210      	movs	r2, #16
 8010234:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8010236:	693b      	ldr	r3, [r7, #16]
 8010238:	2b00      	cmp	r3, #0
 801023a:	d006      	beq.n	801024a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 801023c:	693b      	ldr	r3, [r7, #16]
 801023e:	2200      	movs	r2, #0
 8010240:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8010244:	711a      	strb	r2, [r3, #4]
 8010246:	2200      	movs	r2, #0
 8010248:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 801024a:	68fb      	ldr	r3, [r7, #12]
 801024c:	2b00      	cmp	r3, #0
 801024e:	d006      	beq.n	801025e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8010250:	68fb      	ldr	r3, [r7, #12]
 8010252:	2200      	movs	r2, #0
 8010254:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8010258:	711a      	strb	r2, [r3, #4]
 801025a:	2200      	movs	r2, #0
 801025c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 801025e:	687b      	ldr	r3, [r7, #4]
 8010260:	2243      	movs	r2, #67	@ 0x43
 8010262:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8010264:	4b02      	ldr	r3, [pc, #8]	@ (8010270 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8010266:	4618      	mov	r0, r3
 8010268:	3718      	adds	r7, #24
 801026a:	46bd      	mov	sp, r7
 801026c:	bd80      	pop	{r7, pc}
 801026e:	bf00      	nop
 8010270:	24000070 	.word	0x24000070

08010274 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8010274:	b480      	push	{r7}
 8010276:	b083      	sub	sp, #12
 8010278:	af00      	add	r7, sp, #0
 801027a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 801027c:	687b      	ldr	r3, [r7, #4]
 801027e:	220a      	movs	r2, #10
 8010280:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8010282:	4b03      	ldr	r3, [pc, #12]	@ (8010290 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8010284:	4618      	mov	r0, r3
 8010286:	370c      	adds	r7, #12
 8010288:	46bd      	mov	sp, r7
 801028a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801028e:	4770      	bx	lr
 8010290:	2400002c 	.word	0x2400002c

08010294 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8010294:	b480      	push	{r7}
 8010296:	b083      	sub	sp, #12
 8010298:	af00      	add	r7, sp, #0
 801029a:	6078      	str	r0, [r7, #4]
 801029c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 801029e:	683b      	ldr	r3, [r7, #0]
 80102a0:	2b00      	cmp	r3, #0
 80102a2:	d101      	bne.n	80102a8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80102a4:	2303      	movs	r3, #3
 80102a6:	e009      	b.n	80102bc <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80102a8:	687b      	ldr	r3, [r7, #4]
 80102aa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80102ae:	687a      	ldr	r2, [r7, #4]
 80102b0:	33b0      	adds	r3, #176	@ 0xb0
 80102b2:	009b      	lsls	r3, r3, #2
 80102b4:	4413      	add	r3, r2
 80102b6:	683a      	ldr	r2, [r7, #0]
 80102b8:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80102ba:	2300      	movs	r3, #0
}
 80102bc:	4618      	mov	r0, r3
 80102be:	370c      	adds	r7, #12
 80102c0:	46bd      	mov	sp, r7
 80102c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102c6:	4770      	bx	lr

080102c8 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80102c8:	b480      	push	{r7}
 80102ca:	b087      	sub	sp, #28
 80102cc:	af00      	add	r7, sp, #0
 80102ce:	60f8      	str	r0, [r7, #12]
 80102d0:	60b9      	str	r1, [r7, #8]
 80102d2:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80102d4:	68fb      	ldr	r3, [r7, #12]
 80102d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80102da:	68fb      	ldr	r3, [r7, #12]
 80102dc:	32b0      	adds	r2, #176	@ 0xb0
 80102de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80102e2:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80102e4:	697b      	ldr	r3, [r7, #20]
 80102e6:	2b00      	cmp	r3, #0
 80102e8:	d101      	bne.n	80102ee <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80102ea:	2303      	movs	r3, #3
 80102ec:	e008      	b.n	8010300 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80102ee:	697b      	ldr	r3, [r7, #20]
 80102f0:	68ba      	ldr	r2, [r7, #8]
 80102f2:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 80102f6:	697b      	ldr	r3, [r7, #20]
 80102f8:	687a      	ldr	r2, [r7, #4]
 80102fa:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 80102fe:	2300      	movs	r3, #0
}
 8010300:	4618      	mov	r0, r3
 8010302:	371c      	adds	r7, #28
 8010304:	46bd      	mov	sp, r7
 8010306:	f85d 7b04 	ldr.w	r7, [sp], #4
 801030a:	4770      	bx	lr

0801030c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 801030c:	b480      	push	{r7}
 801030e:	b085      	sub	sp, #20
 8010310:	af00      	add	r7, sp, #0
 8010312:	6078      	str	r0, [r7, #4]
 8010314:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010316:	687b      	ldr	r3, [r7, #4]
 8010318:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801031c:	687b      	ldr	r3, [r7, #4]
 801031e:	32b0      	adds	r2, #176	@ 0xb0
 8010320:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010324:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8010326:	68fb      	ldr	r3, [r7, #12]
 8010328:	2b00      	cmp	r3, #0
 801032a:	d101      	bne.n	8010330 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 801032c:	2303      	movs	r3, #3
 801032e:	e004      	b.n	801033a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8010330:	68fb      	ldr	r3, [r7, #12]
 8010332:	683a      	ldr	r2, [r7, #0]
 8010334:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8010338:	2300      	movs	r3, #0
}
 801033a:	4618      	mov	r0, r3
 801033c:	3714      	adds	r7, #20
 801033e:	46bd      	mov	sp, r7
 8010340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010344:	4770      	bx	lr
	...

08010348 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8010348:	b580      	push	{r7, lr}
 801034a:	b084      	sub	sp, #16
 801034c:	af00      	add	r7, sp, #0
 801034e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010350:	687b      	ldr	r3, [r7, #4]
 8010352:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010356:	687b      	ldr	r3, [r7, #4]
 8010358:	32b0      	adds	r2, #176	@ 0xb0
 801035a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801035e:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8010360:	2301      	movs	r3, #1
 8010362:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8010364:	68bb      	ldr	r3, [r7, #8]
 8010366:	2b00      	cmp	r3, #0
 8010368:	d101      	bne.n	801036e <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 801036a:	2303      	movs	r3, #3
 801036c:	e025      	b.n	80103ba <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 801036e:	68bb      	ldr	r3, [r7, #8]
 8010370:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8010374:	2b00      	cmp	r3, #0
 8010376:	d11f      	bne.n	80103b8 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8010378:	68bb      	ldr	r3, [r7, #8]
 801037a:	2201      	movs	r2, #1
 801037c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8010380:	4b10      	ldr	r3, [pc, #64]	@ (80103c4 <USBD_CDC_TransmitPacket+0x7c>)
 8010382:	781b      	ldrb	r3, [r3, #0]
 8010384:	f003 020f 	and.w	r2, r3, #15
 8010388:	68bb      	ldr	r3, [r7, #8]
 801038a:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 801038e:	6878      	ldr	r0, [r7, #4]
 8010390:	4613      	mov	r3, r2
 8010392:	009b      	lsls	r3, r3, #2
 8010394:	4413      	add	r3, r2
 8010396:	009b      	lsls	r3, r3, #2
 8010398:	4403      	add	r3, r0
 801039a:	3318      	adds	r3, #24
 801039c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 801039e:	4b09      	ldr	r3, [pc, #36]	@ (80103c4 <USBD_CDC_TransmitPacket+0x7c>)
 80103a0:	7819      	ldrb	r1, [r3, #0]
 80103a2:	68bb      	ldr	r3, [r7, #8]
 80103a4:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 80103a8:	68bb      	ldr	r3, [r7, #8]
 80103aa:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 80103ae:	6878      	ldr	r0, [r7, #4]
 80103b0:	f002 f823 	bl	80123fa <USBD_LL_Transmit>

    ret = USBD_OK;
 80103b4:	2300      	movs	r3, #0
 80103b6:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80103b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80103ba:	4618      	mov	r0, r3
 80103bc:	3710      	adds	r7, #16
 80103be:	46bd      	mov	sp, r7
 80103c0:	bd80      	pop	{r7, pc}
 80103c2:	bf00      	nop
 80103c4:	240000b3 	.word	0x240000b3

080103c8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80103c8:	b580      	push	{r7, lr}
 80103ca:	b084      	sub	sp, #16
 80103cc:	af00      	add	r7, sp, #0
 80103ce:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80103d0:	687b      	ldr	r3, [r7, #4]
 80103d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80103d6:	687b      	ldr	r3, [r7, #4]
 80103d8:	32b0      	adds	r2, #176	@ 0xb0
 80103da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80103de:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80103e0:	687b      	ldr	r3, [r7, #4]
 80103e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80103e6:	687b      	ldr	r3, [r7, #4]
 80103e8:	32b0      	adds	r2, #176	@ 0xb0
 80103ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80103ee:	2b00      	cmp	r3, #0
 80103f0:	d101      	bne.n	80103f6 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80103f2:	2303      	movs	r3, #3
 80103f4:	e018      	b.n	8010428 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80103f6:	687b      	ldr	r3, [r7, #4]
 80103f8:	7c1b      	ldrb	r3, [r3, #16]
 80103fa:	2b00      	cmp	r3, #0
 80103fc:	d10a      	bne.n	8010414 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80103fe:	4b0c      	ldr	r3, [pc, #48]	@ (8010430 <USBD_CDC_ReceivePacket+0x68>)
 8010400:	7819      	ldrb	r1, [r3, #0]
 8010402:	68fb      	ldr	r3, [r7, #12]
 8010404:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8010408:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801040c:	6878      	ldr	r0, [r7, #4]
 801040e:	f002 f815 	bl	801243c <USBD_LL_PrepareReceive>
 8010412:	e008      	b.n	8010426 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8010414:	4b06      	ldr	r3, [pc, #24]	@ (8010430 <USBD_CDC_ReceivePacket+0x68>)
 8010416:	7819      	ldrb	r1, [r3, #0]
 8010418:	68fb      	ldr	r3, [r7, #12]
 801041a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 801041e:	2340      	movs	r3, #64	@ 0x40
 8010420:	6878      	ldr	r0, [r7, #4]
 8010422:	f002 f80b 	bl	801243c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8010426:	2300      	movs	r3, #0
}
 8010428:	4618      	mov	r0, r3
 801042a:	3710      	adds	r7, #16
 801042c:	46bd      	mov	sp, r7
 801042e:	bd80      	pop	{r7, pc}
 8010430:	240000b4 	.word	0x240000b4

08010434 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8010434:	b580      	push	{r7, lr}
 8010436:	b086      	sub	sp, #24
 8010438:	af00      	add	r7, sp, #0
 801043a:	60f8      	str	r0, [r7, #12]
 801043c:	60b9      	str	r1, [r7, #8]
 801043e:	4613      	mov	r3, r2
 8010440:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8010442:	68fb      	ldr	r3, [r7, #12]
 8010444:	2b00      	cmp	r3, #0
 8010446:	d101      	bne.n	801044c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8010448:	2303      	movs	r3, #3
 801044a:	e01f      	b.n	801048c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 801044c:	68fb      	ldr	r3, [r7, #12]
 801044e:	2200      	movs	r2, #0
 8010450:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8010454:	68fb      	ldr	r3, [r7, #12]
 8010456:	2200      	movs	r2, #0
 8010458:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 801045c:	68fb      	ldr	r3, [r7, #12]
 801045e:	2200      	movs	r2, #0
 8010460:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8010464:	68bb      	ldr	r3, [r7, #8]
 8010466:	2b00      	cmp	r3, #0
 8010468:	d003      	beq.n	8010472 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 801046a:	68fb      	ldr	r3, [r7, #12]
 801046c:	68ba      	ldr	r2, [r7, #8]
 801046e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8010472:	68fb      	ldr	r3, [r7, #12]
 8010474:	2201      	movs	r2, #1
 8010476:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 801047a:	68fb      	ldr	r3, [r7, #12]
 801047c:	79fa      	ldrb	r2, [r7, #7]
 801047e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8010480:	68f8      	ldr	r0, [r7, #12]
 8010482:	f001 fe81 	bl	8012188 <USBD_LL_Init>
 8010486:	4603      	mov	r3, r0
 8010488:	75fb      	strb	r3, [r7, #23]

  return ret;
 801048a:	7dfb      	ldrb	r3, [r7, #23]
}
 801048c:	4618      	mov	r0, r3
 801048e:	3718      	adds	r7, #24
 8010490:	46bd      	mov	sp, r7
 8010492:	bd80      	pop	{r7, pc}

08010494 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8010494:	b580      	push	{r7, lr}
 8010496:	b084      	sub	sp, #16
 8010498:	af00      	add	r7, sp, #0
 801049a:	6078      	str	r0, [r7, #4]
 801049c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801049e:	2300      	movs	r3, #0
 80104a0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80104a2:	683b      	ldr	r3, [r7, #0]
 80104a4:	2b00      	cmp	r3, #0
 80104a6:	d101      	bne.n	80104ac <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80104a8:	2303      	movs	r3, #3
 80104aa:	e025      	b.n	80104f8 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80104ac:	687b      	ldr	r3, [r7, #4]
 80104ae:	683a      	ldr	r2, [r7, #0]
 80104b0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80104b4:	687b      	ldr	r3, [r7, #4]
 80104b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80104ba:	687b      	ldr	r3, [r7, #4]
 80104bc:	32ae      	adds	r2, #174	@ 0xae
 80104be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80104c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80104c4:	2b00      	cmp	r3, #0
 80104c6:	d00f      	beq.n	80104e8 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80104c8:	687b      	ldr	r3, [r7, #4]
 80104ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80104ce:	687b      	ldr	r3, [r7, #4]
 80104d0:	32ae      	adds	r2, #174	@ 0xae
 80104d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80104d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80104d8:	f107 020e 	add.w	r2, r7, #14
 80104dc:	4610      	mov	r0, r2
 80104de:	4798      	blx	r3
 80104e0:	4602      	mov	r2, r0
 80104e2:	687b      	ldr	r3, [r7, #4]
 80104e4:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 80104e8:	687b      	ldr	r3, [r7, #4]
 80104ea:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80104ee:	1c5a      	adds	r2, r3, #1
 80104f0:	687b      	ldr	r3, [r7, #4]
 80104f2:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 80104f6:	2300      	movs	r3, #0
}
 80104f8:	4618      	mov	r0, r3
 80104fa:	3710      	adds	r7, #16
 80104fc:	46bd      	mov	sp, r7
 80104fe:	bd80      	pop	{r7, pc}

08010500 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8010500:	b580      	push	{r7, lr}
 8010502:	b082      	sub	sp, #8
 8010504:	af00      	add	r7, sp, #0
 8010506:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8010508:	6878      	ldr	r0, [r7, #4]
 801050a:	f001 fe8d 	bl	8012228 <USBD_LL_Start>
 801050e:	4603      	mov	r3, r0
}
 8010510:	4618      	mov	r0, r3
 8010512:	3708      	adds	r7, #8
 8010514:	46bd      	mov	sp, r7
 8010516:	bd80      	pop	{r7, pc}

08010518 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8010518:	b480      	push	{r7}
 801051a:	b083      	sub	sp, #12
 801051c:	af00      	add	r7, sp, #0
 801051e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8010520:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8010522:	4618      	mov	r0, r3
 8010524:	370c      	adds	r7, #12
 8010526:	46bd      	mov	sp, r7
 8010528:	f85d 7b04 	ldr.w	r7, [sp], #4
 801052c:	4770      	bx	lr

0801052e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801052e:	b580      	push	{r7, lr}
 8010530:	b084      	sub	sp, #16
 8010532:	af00      	add	r7, sp, #0
 8010534:	6078      	str	r0, [r7, #4]
 8010536:	460b      	mov	r3, r1
 8010538:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 801053a:	2300      	movs	r3, #0
 801053c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 801053e:	687b      	ldr	r3, [r7, #4]
 8010540:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010544:	2b00      	cmp	r3, #0
 8010546:	d009      	beq.n	801055c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8010548:	687b      	ldr	r3, [r7, #4]
 801054a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801054e:	681b      	ldr	r3, [r3, #0]
 8010550:	78fa      	ldrb	r2, [r7, #3]
 8010552:	4611      	mov	r1, r2
 8010554:	6878      	ldr	r0, [r7, #4]
 8010556:	4798      	blx	r3
 8010558:	4603      	mov	r3, r0
 801055a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 801055c:	7bfb      	ldrb	r3, [r7, #15]
}
 801055e:	4618      	mov	r0, r3
 8010560:	3710      	adds	r7, #16
 8010562:	46bd      	mov	sp, r7
 8010564:	bd80      	pop	{r7, pc}

08010566 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010566:	b580      	push	{r7, lr}
 8010568:	b084      	sub	sp, #16
 801056a:	af00      	add	r7, sp, #0
 801056c:	6078      	str	r0, [r7, #4]
 801056e:	460b      	mov	r3, r1
 8010570:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8010572:	2300      	movs	r3, #0
 8010574:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8010576:	687b      	ldr	r3, [r7, #4]
 8010578:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801057c:	685b      	ldr	r3, [r3, #4]
 801057e:	78fa      	ldrb	r2, [r7, #3]
 8010580:	4611      	mov	r1, r2
 8010582:	6878      	ldr	r0, [r7, #4]
 8010584:	4798      	blx	r3
 8010586:	4603      	mov	r3, r0
 8010588:	2b00      	cmp	r3, #0
 801058a:	d001      	beq.n	8010590 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 801058c:	2303      	movs	r3, #3
 801058e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8010590:	7bfb      	ldrb	r3, [r7, #15]
}
 8010592:	4618      	mov	r0, r3
 8010594:	3710      	adds	r7, #16
 8010596:	46bd      	mov	sp, r7
 8010598:	bd80      	pop	{r7, pc}

0801059a <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 801059a:	b580      	push	{r7, lr}
 801059c:	b084      	sub	sp, #16
 801059e:	af00      	add	r7, sp, #0
 80105a0:	6078      	str	r0, [r7, #4]
 80105a2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80105a4:	687b      	ldr	r3, [r7, #4]
 80105a6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80105aa:	6839      	ldr	r1, [r7, #0]
 80105ac:	4618      	mov	r0, r3
 80105ae:	f001 f936 	bl	801181e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80105b2:	687b      	ldr	r3, [r7, #4]
 80105b4:	2201      	movs	r2, #1
 80105b6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80105ba:	687b      	ldr	r3, [r7, #4]
 80105bc:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 80105c0:	461a      	mov	r2, r3
 80105c2:	687b      	ldr	r3, [r7, #4]
 80105c4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80105c8:	687b      	ldr	r3, [r7, #4]
 80105ca:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80105ce:	f003 031f 	and.w	r3, r3, #31
 80105d2:	2b02      	cmp	r3, #2
 80105d4:	d01a      	beq.n	801060c <USBD_LL_SetupStage+0x72>
 80105d6:	2b02      	cmp	r3, #2
 80105d8:	d822      	bhi.n	8010620 <USBD_LL_SetupStage+0x86>
 80105da:	2b00      	cmp	r3, #0
 80105dc:	d002      	beq.n	80105e4 <USBD_LL_SetupStage+0x4a>
 80105de:	2b01      	cmp	r3, #1
 80105e0:	d00a      	beq.n	80105f8 <USBD_LL_SetupStage+0x5e>
 80105e2:	e01d      	b.n	8010620 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80105e4:	687b      	ldr	r3, [r7, #4]
 80105e6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80105ea:	4619      	mov	r1, r3
 80105ec:	6878      	ldr	r0, [r7, #4]
 80105ee:	f000 fb63 	bl	8010cb8 <USBD_StdDevReq>
 80105f2:	4603      	mov	r3, r0
 80105f4:	73fb      	strb	r3, [r7, #15]
      break;
 80105f6:	e020      	b.n	801063a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80105f8:	687b      	ldr	r3, [r7, #4]
 80105fa:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80105fe:	4619      	mov	r1, r3
 8010600:	6878      	ldr	r0, [r7, #4]
 8010602:	f000 fbcb 	bl	8010d9c <USBD_StdItfReq>
 8010606:	4603      	mov	r3, r0
 8010608:	73fb      	strb	r3, [r7, #15]
      break;
 801060a:	e016      	b.n	801063a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 801060c:	687b      	ldr	r3, [r7, #4]
 801060e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8010612:	4619      	mov	r1, r3
 8010614:	6878      	ldr	r0, [r7, #4]
 8010616:	f000 fc2d 	bl	8010e74 <USBD_StdEPReq>
 801061a:	4603      	mov	r3, r0
 801061c:	73fb      	strb	r3, [r7, #15]
      break;
 801061e:	e00c      	b.n	801063a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8010620:	687b      	ldr	r3, [r7, #4]
 8010622:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8010626:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 801062a:	b2db      	uxtb	r3, r3
 801062c:	4619      	mov	r1, r3
 801062e:	6878      	ldr	r0, [r7, #4]
 8010630:	f001 fe5a 	bl	80122e8 <USBD_LL_StallEP>
 8010634:	4603      	mov	r3, r0
 8010636:	73fb      	strb	r3, [r7, #15]
      break;
 8010638:	bf00      	nop
  }

  return ret;
 801063a:	7bfb      	ldrb	r3, [r7, #15]
}
 801063c:	4618      	mov	r0, r3
 801063e:	3710      	adds	r7, #16
 8010640:	46bd      	mov	sp, r7
 8010642:	bd80      	pop	{r7, pc}

08010644 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8010644:	b580      	push	{r7, lr}
 8010646:	b086      	sub	sp, #24
 8010648:	af00      	add	r7, sp, #0
 801064a:	60f8      	str	r0, [r7, #12]
 801064c:	460b      	mov	r3, r1
 801064e:	607a      	str	r2, [r7, #4]
 8010650:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8010652:	2300      	movs	r3, #0
 8010654:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8010656:	7afb      	ldrb	r3, [r7, #11]
 8010658:	2b00      	cmp	r3, #0
 801065a:	d16e      	bne.n	801073a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 801065c:	68fb      	ldr	r3, [r7, #12]
 801065e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8010662:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8010664:	68fb      	ldr	r3, [r7, #12]
 8010666:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 801066a:	2b03      	cmp	r3, #3
 801066c:	f040 8098 	bne.w	80107a0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8010670:	693b      	ldr	r3, [r7, #16]
 8010672:	689a      	ldr	r2, [r3, #8]
 8010674:	693b      	ldr	r3, [r7, #16]
 8010676:	68db      	ldr	r3, [r3, #12]
 8010678:	429a      	cmp	r2, r3
 801067a:	d913      	bls.n	80106a4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 801067c:	693b      	ldr	r3, [r7, #16]
 801067e:	689a      	ldr	r2, [r3, #8]
 8010680:	693b      	ldr	r3, [r7, #16]
 8010682:	68db      	ldr	r3, [r3, #12]
 8010684:	1ad2      	subs	r2, r2, r3
 8010686:	693b      	ldr	r3, [r7, #16]
 8010688:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 801068a:	693b      	ldr	r3, [r7, #16]
 801068c:	68da      	ldr	r2, [r3, #12]
 801068e:	693b      	ldr	r3, [r7, #16]
 8010690:	689b      	ldr	r3, [r3, #8]
 8010692:	4293      	cmp	r3, r2
 8010694:	bf28      	it	cs
 8010696:	4613      	movcs	r3, r2
 8010698:	461a      	mov	r2, r3
 801069a:	6879      	ldr	r1, [r7, #4]
 801069c:	68f8      	ldr	r0, [r7, #12]
 801069e:	f001 f9be 	bl	8011a1e <USBD_CtlContinueRx>
 80106a2:	e07d      	b.n	80107a0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80106a4:	68fb      	ldr	r3, [r7, #12]
 80106a6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80106aa:	f003 031f 	and.w	r3, r3, #31
 80106ae:	2b02      	cmp	r3, #2
 80106b0:	d014      	beq.n	80106dc <USBD_LL_DataOutStage+0x98>
 80106b2:	2b02      	cmp	r3, #2
 80106b4:	d81d      	bhi.n	80106f2 <USBD_LL_DataOutStage+0xae>
 80106b6:	2b00      	cmp	r3, #0
 80106b8:	d002      	beq.n	80106c0 <USBD_LL_DataOutStage+0x7c>
 80106ba:	2b01      	cmp	r3, #1
 80106bc:	d003      	beq.n	80106c6 <USBD_LL_DataOutStage+0x82>
 80106be:	e018      	b.n	80106f2 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80106c0:	2300      	movs	r3, #0
 80106c2:	75bb      	strb	r3, [r7, #22]
            break;
 80106c4:	e018      	b.n	80106f8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80106c6:	68fb      	ldr	r3, [r7, #12]
 80106c8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80106cc:	b2db      	uxtb	r3, r3
 80106ce:	4619      	mov	r1, r3
 80106d0:	68f8      	ldr	r0, [r7, #12]
 80106d2:	f000 fa64 	bl	8010b9e <USBD_CoreFindIF>
 80106d6:	4603      	mov	r3, r0
 80106d8:	75bb      	strb	r3, [r7, #22]
            break;
 80106da:	e00d      	b.n	80106f8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80106dc:	68fb      	ldr	r3, [r7, #12]
 80106de:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80106e2:	b2db      	uxtb	r3, r3
 80106e4:	4619      	mov	r1, r3
 80106e6:	68f8      	ldr	r0, [r7, #12]
 80106e8:	f000 fa66 	bl	8010bb8 <USBD_CoreFindEP>
 80106ec:	4603      	mov	r3, r0
 80106ee:	75bb      	strb	r3, [r7, #22]
            break;
 80106f0:	e002      	b.n	80106f8 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80106f2:	2300      	movs	r3, #0
 80106f4:	75bb      	strb	r3, [r7, #22]
            break;
 80106f6:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80106f8:	7dbb      	ldrb	r3, [r7, #22]
 80106fa:	2b00      	cmp	r3, #0
 80106fc:	d119      	bne.n	8010732 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80106fe:	68fb      	ldr	r3, [r7, #12]
 8010700:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010704:	b2db      	uxtb	r3, r3
 8010706:	2b03      	cmp	r3, #3
 8010708:	d113      	bne.n	8010732 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 801070a:	7dba      	ldrb	r2, [r7, #22]
 801070c:	68fb      	ldr	r3, [r7, #12]
 801070e:	32ae      	adds	r2, #174	@ 0xae
 8010710:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010714:	691b      	ldr	r3, [r3, #16]
 8010716:	2b00      	cmp	r3, #0
 8010718:	d00b      	beq.n	8010732 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 801071a:	7dba      	ldrb	r2, [r7, #22]
 801071c:	68fb      	ldr	r3, [r7, #12]
 801071e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8010722:	7dba      	ldrb	r2, [r7, #22]
 8010724:	68fb      	ldr	r3, [r7, #12]
 8010726:	32ae      	adds	r2, #174	@ 0xae
 8010728:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801072c:	691b      	ldr	r3, [r3, #16]
 801072e:	68f8      	ldr	r0, [r7, #12]
 8010730:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8010732:	68f8      	ldr	r0, [r7, #12]
 8010734:	f001 f984 	bl	8011a40 <USBD_CtlSendStatus>
 8010738:	e032      	b.n	80107a0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 801073a:	7afb      	ldrb	r3, [r7, #11]
 801073c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010740:	b2db      	uxtb	r3, r3
 8010742:	4619      	mov	r1, r3
 8010744:	68f8      	ldr	r0, [r7, #12]
 8010746:	f000 fa37 	bl	8010bb8 <USBD_CoreFindEP>
 801074a:	4603      	mov	r3, r0
 801074c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801074e:	7dbb      	ldrb	r3, [r7, #22]
 8010750:	2bff      	cmp	r3, #255	@ 0xff
 8010752:	d025      	beq.n	80107a0 <USBD_LL_DataOutStage+0x15c>
 8010754:	7dbb      	ldrb	r3, [r7, #22]
 8010756:	2b00      	cmp	r3, #0
 8010758:	d122      	bne.n	80107a0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801075a:	68fb      	ldr	r3, [r7, #12]
 801075c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010760:	b2db      	uxtb	r3, r3
 8010762:	2b03      	cmp	r3, #3
 8010764:	d117      	bne.n	8010796 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8010766:	7dba      	ldrb	r2, [r7, #22]
 8010768:	68fb      	ldr	r3, [r7, #12]
 801076a:	32ae      	adds	r2, #174	@ 0xae
 801076c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010770:	699b      	ldr	r3, [r3, #24]
 8010772:	2b00      	cmp	r3, #0
 8010774:	d00f      	beq.n	8010796 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8010776:	7dba      	ldrb	r2, [r7, #22]
 8010778:	68fb      	ldr	r3, [r7, #12]
 801077a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 801077e:	7dba      	ldrb	r2, [r7, #22]
 8010780:	68fb      	ldr	r3, [r7, #12]
 8010782:	32ae      	adds	r2, #174	@ 0xae
 8010784:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010788:	699b      	ldr	r3, [r3, #24]
 801078a:	7afa      	ldrb	r2, [r7, #11]
 801078c:	4611      	mov	r1, r2
 801078e:	68f8      	ldr	r0, [r7, #12]
 8010790:	4798      	blx	r3
 8010792:	4603      	mov	r3, r0
 8010794:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8010796:	7dfb      	ldrb	r3, [r7, #23]
 8010798:	2b00      	cmp	r3, #0
 801079a:	d001      	beq.n	80107a0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 801079c:	7dfb      	ldrb	r3, [r7, #23]
 801079e:	e000      	b.n	80107a2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80107a0:	2300      	movs	r3, #0
}
 80107a2:	4618      	mov	r0, r3
 80107a4:	3718      	adds	r7, #24
 80107a6:	46bd      	mov	sp, r7
 80107a8:	bd80      	pop	{r7, pc}

080107aa <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80107aa:	b580      	push	{r7, lr}
 80107ac:	b086      	sub	sp, #24
 80107ae:	af00      	add	r7, sp, #0
 80107b0:	60f8      	str	r0, [r7, #12]
 80107b2:	460b      	mov	r3, r1
 80107b4:	607a      	str	r2, [r7, #4]
 80107b6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80107b8:	7afb      	ldrb	r3, [r7, #11]
 80107ba:	2b00      	cmp	r3, #0
 80107bc:	d16f      	bne.n	801089e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80107be:	68fb      	ldr	r3, [r7, #12]
 80107c0:	3314      	adds	r3, #20
 80107c2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80107c4:	68fb      	ldr	r3, [r7, #12]
 80107c6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80107ca:	2b02      	cmp	r3, #2
 80107cc:	d15a      	bne.n	8010884 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80107ce:	693b      	ldr	r3, [r7, #16]
 80107d0:	689a      	ldr	r2, [r3, #8]
 80107d2:	693b      	ldr	r3, [r7, #16]
 80107d4:	68db      	ldr	r3, [r3, #12]
 80107d6:	429a      	cmp	r2, r3
 80107d8:	d914      	bls.n	8010804 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80107da:	693b      	ldr	r3, [r7, #16]
 80107dc:	689a      	ldr	r2, [r3, #8]
 80107de:	693b      	ldr	r3, [r7, #16]
 80107e0:	68db      	ldr	r3, [r3, #12]
 80107e2:	1ad2      	subs	r2, r2, r3
 80107e4:	693b      	ldr	r3, [r7, #16]
 80107e6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80107e8:	693b      	ldr	r3, [r7, #16]
 80107ea:	689b      	ldr	r3, [r3, #8]
 80107ec:	461a      	mov	r2, r3
 80107ee:	6879      	ldr	r1, [r7, #4]
 80107f0:	68f8      	ldr	r0, [r7, #12]
 80107f2:	f001 f8e6 	bl	80119c2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80107f6:	2300      	movs	r3, #0
 80107f8:	2200      	movs	r2, #0
 80107fa:	2100      	movs	r1, #0
 80107fc:	68f8      	ldr	r0, [r7, #12]
 80107fe:	f001 fe1d 	bl	801243c <USBD_LL_PrepareReceive>
 8010802:	e03f      	b.n	8010884 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8010804:	693b      	ldr	r3, [r7, #16]
 8010806:	68da      	ldr	r2, [r3, #12]
 8010808:	693b      	ldr	r3, [r7, #16]
 801080a:	689b      	ldr	r3, [r3, #8]
 801080c:	429a      	cmp	r2, r3
 801080e:	d11c      	bne.n	801084a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8010810:	693b      	ldr	r3, [r7, #16]
 8010812:	685a      	ldr	r2, [r3, #4]
 8010814:	693b      	ldr	r3, [r7, #16]
 8010816:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8010818:	429a      	cmp	r2, r3
 801081a:	d316      	bcc.n	801084a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 801081c:	693b      	ldr	r3, [r7, #16]
 801081e:	685a      	ldr	r2, [r3, #4]
 8010820:	68fb      	ldr	r3, [r7, #12]
 8010822:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8010826:	429a      	cmp	r2, r3
 8010828:	d20f      	bcs.n	801084a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 801082a:	2200      	movs	r2, #0
 801082c:	2100      	movs	r1, #0
 801082e:	68f8      	ldr	r0, [r7, #12]
 8010830:	f001 f8c7 	bl	80119c2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8010834:	68fb      	ldr	r3, [r7, #12]
 8010836:	2200      	movs	r2, #0
 8010838:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801083c:	2300      	movs	r3, #0
 801083e:	2200      	movs	r2, #0
 8010840:	2100      	movs	r1, #0
 8010842:	68f8      	ldr	r0, [r7, #12]
 8010844:	f001 fdfa 	bl	801243c <USBD_LL_PrepareReceive>
 8010848:	e01c      	b.n	8010884 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801084a:	68fb      	ldr	r3, [r7, #12]
 801084c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010850:	b2db      	uxtb	r3, r3
 8010852:	2b03      	cmp	r3, #3
 8010854:	d10f      	bne.n	8010876 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8010856:	68fb      	ldr	r3, [r7, #12]
 8010858:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801085c:	68db      	ldr	r3, [r3, #12]
 801085e:	2b00      	cmp	r3, #0
 8010860:	d009      	beq.n	8010876 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8010862:	68fb      	ldr	r3, [r7, #12]
 8010864:	2200      	movs	r2, #0
 8010866:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 801086a:	68fb      	ldr	r3, [r7, #12]
 801086c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010870:	68db      	ldr	r3, [r3, #12]
 8010872:	68f8      	ldr	r0, [r7, #12]
 8010874:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8010876:	2180      	movs	r1, #128	@ 0x80
 8010878:	68f8      	ldr	r0, [r7, #12]
 801087a:	f001 fd35 	bl	80122e8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 801087e:	68f8      	ldr	r0, [r7, #12]
 8010880:	f001 f8f1 	bl	8011a66 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8010884:	68fb      	ldr	r3, [r7, #12]
 8010886:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 801088a:	2b00      	cmp	r3, #0
 801088c:	d03a      	beq.n	8010904 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 801088e:	68f8      	ldr	r0, [r7, #12]
 8010890:	f7ff fe42 	bl	8010518 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8010894:	68fb      	ldr	r3, [r7, #12]
 8010896:	2200      	movs	r2, #0
 8010898:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 801089c:	e032      	b.n	8010904 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 801089e:	7afb      	ldrb	r3, [r7, #11]
 80108a0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80108a4:	b2db      	uxtb	r3, r3
 80108a6:	4619      	mov	r1, r3
 80108a8:	68f8      	ldr	r0, [r7, #12]
 80108aa:	f000 f985 	bl	8010bb8 <USBD_CoreFindEP>
 80108ae:	4603      	mov	r3, r0
 80108b0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80108b2:	7dfb      	ldrb	r3, [r7, #23]
 80108b4:	2bff      	cmp	r3, #255	@ 0xff
 80108b6:	d025      	beq.n	8010904 <USBD_LL_DataInStage+0x15a>
 80108b8:	7dfb      	ldrb	r3, [r7, #23]
 80108ba:	2b00      	cmp	r3, #0
 80108bc:	d122      	bne.n	8010904 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80108be:	68fb      	ldr	r3, [r7, #12]
 80108c0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80108c4:	b2db      	uxtb	r3, r3
 80108c6:	2b03      	cmp	r3, #3
 80108c8:	d11c      	bne.n	8010904 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80108ca:	7dfa      	ldrb	r2, [r7, #23]
 80108cc:	68fb      	ldr	r3, [r7, #12]
 80108ce:	32ae      	adds	r2, #174	@ 0xae
 80108d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80108d4:	695b      	ldr	r3, [r3, #20]
 80108d6:	2b00      	cmp	r3, #0
 80108d8:	d014      	beq.n	8010904 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80108da:	7dfa      	ldrb	r2, [r7, #23]
 80108dc:	68fb      	ldr	r3, [r7, #12]
 80108de:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80108e2:	7dfa      	ldrb	r2, [r7, #23]
 80108e4:	68fb      	ldr	r3, [r7, #12]
 80108e6:	32ae      	adds	r2, #174	@ 0xae
 80108e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80108ec:	695b      	ldr	r3, [r3, #20]
 80108ee:	7afa      	ldrb	r2, [r7, #11]
 80108f0:	4611      	mov	r1, r2
 80108f2:	68f8      	ldr	r0, [r7, #12]
 80108f4:	4798      	blx	r3
 80108f6:	4603      	mov	r3, r0
 80108f8:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80108fa:	7dbb      	ldrb	r3, [r7, #22]
 80108fc:	2b00      	cmp	r3, #0
 80108fe:	d001      	beq.n	8010904 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8010900:	7dbb      	ldrb	r3, [r7, #22]
 8010902:	e000      	b.n	8010906 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8010904:	2300      	movs	r3, #0
}
 8010906:	4618      	mov	r0, r3
 8010908:	3718      	adds	r7, #24
 801090a:	46bd      	mov	sp, r7
 801090c:	bd80      	pop	{r7, pc}

0801090e <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 801090e:	b580      	push	{r7, lr}
 8010910:	b084      	sub	sp, #16
 8010912:	af00      	add	r7, sp, #0
 8010914:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8010916:	2300      	movs	r3, #0
 8010918:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801091a:	687b      	ldr	r3, [r7, #4]
 801091c:	2201      	movs	r2, #1
 801091e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8010922:	687b      	ldr	r3, [r7, #4]
 8010924:	2200      	movs	r2, #0
 8010926:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 801092a:	687b      	ldr	r3, [r7, #4]
 801092c:	2200      	movs	r2, #0
 801092e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8010930:	687b      	ldr	r3, [r7, #4]
 8010932:	2200      	movs	r2, #0
 8010934:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8010938:	687b      	ldr	r3, [r7, #4]
 801093a:	2200      	movs	r2, #0
 801093c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8010940:	687b      	ldr	r3, [r7, #4]
 8010942:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010946:	2b00      	cmp	r3, #0
 8010948:	d014      	beq.n	8010974 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 801094a:	687b      	ldr	r3, [r7, #4]
 801094c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010950:	685b      	ldr	r3, [r3, #4]
 8010952:	2b00      	cmp	r3, #0
 8010954:	d00e      	beq.n	8010974 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8010956:	687b      	ldr	r3, [r7, #4]
 8010958:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801095c:	685b      	ldr	r3, [r3, #4]
 801095e:	687a      	ldr	r2, [r7, #4]
 8010960:	6852      	ldr	r2, [r2, #4]
 8010962:	b2d2      	uxtb	r2, r2
 8010964:	4611      	mov	r1, r2
 8010966:	6878      	ldr	r0, [r7, #4]
 8010968:	4798      	blx	r3
 801096a:	4603      	mov	r3, r0
 801096c:	2b00      	cmp	r3, #0
 801096e:	d001      	beq.n	8010974 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8010970:	2303      	movs	r3, #3
 8010972:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8010974:	2340      	movs	r3, #64	@ 0x40
 8010976:	2200      	movs	r2, #0
 8010978:	2100      	movs	r1, #0
 801097a:	6878      	ldr	r0, [r7, #4]
 801097c:	f001 fc6f 	bl	801225e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8010980:	687b      	ldr	r3, [r7, #4]
 8010982:	2201      	movs	r2, #1
 8010984:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8010988:	687b      	ldr	r3, [r7, #4]
 801098a:	2240      	movs	r2, #64	@ 0x40
 801098c:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8010990:	2340      	movs	r3, #64	@ 0x40
 8010992:	2200      	movs	r2, #0
 8010994:	2180      	movs	r1, #128	@ 0x80
 8010996:	6878      	ldr	r0, [r7, #4]
 8010998:	f001 fc61 	bl	801225e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 801099c:	687b      	ldr	r3, [r7, #4]
 801099e:	2201      	movs	r2, #1
 80109a0:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80109a2:	687b      	ldr	r3, [r7, #4]
 80109a4:	2240      	movs	r2, #64	@ 0x40
 80109a6:	621a      	str	r2, [r3, #32]

  return ret;
 80109a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80109aa:	4618      	mov	r0, r3
 80109ac:	3710      	adds	r7, #16
 80109ae:	46bd      	mov	sp, r7
 80109b0:	bd80      	pop	{r7, pc}

080109b2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80109b2:	b480      	push	{r7}
 80109b4:	b083      	sub	sp, #12
 80109b6:	af00      	add	r7, sp, #0
 80109b8:	6078      	str	r0, [r7, #4]
 80109ba:	460b      	mov	r3, r1
 80109bc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80109be:	687b      	ldr	r3, [r7, #4]
 80109c0:	78fa      	ldrb	r2, [r7, #3]
 80109c2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80109c4:	2300      	movs	r3, #0
}
 80109c6:	4618      	mov	r0, r3
 80109c8:	370c      	adds	r7, #12
 80109ca:	46bd      	mov	sp, r7
 80109cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109d0:	4770      	bx	lr

080109d2 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80109d2:	b480      	push	{r7}
 80109d4:	b083      	sub	sp, #12
 80109d6:	af00      	add	r7, sp, #0
 80109d8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 80109da:	687b      	ldr	r3, [r7, #4]
 80109dc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80109e0:	b2db      	uxtb	r3, r3
 80109e2:	2b04      	cmp	r3, #4
 80109e4:	d006      	beq.n	80109f4 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 80109e6:	687b      	ldr	r3, [r7, #4]
 80109e8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80109ec:	b2da      	uxtb	r2, r3
 80109ee:	687b      	ldr	r3, [r7, #4]
 80109f0:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80109f4:	687b      	ldr	r3, [r7, #4]
 80109f6:	2204      	movs	r2, #4
 80109f8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80109fc:	2300      	movs	r3, #0
}
 80109fe:	4618      	mov	r0, r3
 8010a00:	370c      	adds	r7, #12
 8010a02:	46bd      	mov	sp, r7
 8010a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a08:	4770      	bx	lr

08010a0a <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8010a0a:	b480      	push	{r7}
 8010a0c:	b083      	sub	sp, #12
 8010a0e:	af00      	add	r7, sp, #0
 8010a10:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8010a12:	687b      	ldr	r3, [r7, #4]
 8010a14:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010a18:	b2db      	uxtb	r3, r3
 8010a1a:	2b04      	cmp	r3, #4
 8010a1c:	d106      	bne.n	8010a2c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8010a1e:	687b      	ldr	r3, [r7, #4]
 8010a20:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8010a24:	b2da      	uxtb	r2, r3
 8010a26:	687b      	ldr	r3, [r7, #4]
 8010a28:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8010a2c:	2300      	movs	r3, #0
}
 8010a2e:	4618      	mov	r0, r3
 8010a30:	370c      	adds	r7, #12
 8010a32:	46bd      	mov	sp, r7
 8010a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a38:	4770      	bx	lr

08010a3a <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8010a3a:	b580      	push	{r7, lr}
 8010a3c:	b082      	sub	sp, #8
 8010a3e:	af00      	add	r7, sp, #0
 8010a40:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010a42:	687b      	ldr	r3, [r7, #4]
 8010a44:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010a48:	b2db      	uxtb	r3, r3
 8010a4a:	2b03      	cmp	r3, #3
 8010a4c:	d110      	bne.n	8010a70 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8010a4e:	687b      	ldr	r3, [r7, #4]
 8010a50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010a54:	2b00      	cmp	r3, #0
 8010a56:	d00b      	beq.n	8010a70 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8010a58:	687b      	ldr	r3, [r7, #4]
 8010a5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010a5e:	69db      	ldr	r3, [r3, #28]
 8010a60:	2b00      	cmp	r3, #0
 8010a62:	d005      	beq.n	8010a70 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8010a64:	687b      	ldr	r3, [r7, #4]
 8010a66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010a6a:	69db      	ldr	r3, [r3, #28]
 8010a6c:	6878      	ldr	r0, [r7, #4]
 8010a6e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8010a70:	2300      	movs	r3, #0
}
 8010a72:	4618      	mov	r0, r3
 8010a74:	3708      	adds	r7, #8
 8010a76:	46bd      	mov	sp, r7
 8010a78:	bd80      	pop	{r7, pc}

08010a7a <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8010a7a:	b580      	push	{r7, lr}
 8010a7c:	b082      	sub	sp, #8
 8010a7e:	af00      	add	r7, sp, #0
 8010a80:	6078      	str	r0, [r7, #4]
 8010a82:	460b      	mov	r3, r1
 8010a84:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8010a86:	687b      	ldr	r3, [r7, #4]
 8010a88:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010a8c:	687b      	ldr	r3, [r7, #4]
 8010a8e:	32ae      	adds	r2, #174	@ 0xae
 8010a90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010a94:	2b00      	cmp	r3, #0
 8010a96:	d101      	bne.n	8010a9c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8010a98:	2303      	movs	r3, #3
 8010a9a:	e01c      	b.n	8010ad6 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010a9c:	687b      	ldr	r3, [r7, #4]
 8010a9e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010aa2:	b2db      	uxtb	r3, r3
 8010aa4:	2b03      	cmp	r3, #3
 8010aa6:	d115      	bne.n	8010ad4 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8010aa8:	687b      	ldr	r3, [r7, #4]
 8010aaa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010aae:	687b      	ldr	r3, [r7, #4]
 8010ab0:	32ae      	adds	r2, #174	@ 0xae
 8010ab2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010ab6:	6a1b      	ldr	r3, [r3, #32]
 8010ab8:	2b00      	cmp	r3, #0
 8010aba:	d00b      	beq.n	8010ad4 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8010abc:	687b      	ldr	r3, [r7, #4]
 8010abe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010ac2:	687b      	ldr	r3, [r7, #4]
 8010ac4:	32ae      	adds	r2, #174	@ 0xae
 8010ac6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010aca:	6a1b      	ldr	r3, [r3, #32]
 8010acc:	78fa      	ldrb	r2, [r7, #3]
 8010ace:	4611      	mov	r1, r2
 8010ad0:	6878      	ldr	r0, [r7, #4]
 8010ad2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8010ad4:	2300      	movs	r3, #0
}
 8010ad6:	4618      	mov	r0, r3
 8010ad8:	3708      	adds	r7, #8
 8010ada:	46bd      	mov	sp, r7
 8010adc:	bd80      	pop	{r7, pc}

08010ade <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8010ade:	b580      	push	{r7, lr}
 8010ae0:	b082      	sub	sp, #8
 8010ae2:	af00      	add	r7, sp, #0
 8010ae4:	6078      	str	r0, [r7, #4]
 8010ae6:	460b      	mov	r3, r1
 8010ae8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8010aea:	687b      	ldr	r3, [r7, #4]
 8010aec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010af0:	687b      	ldr	r3, [r7, #4]
 8010af2:	32ae      	adds	r2, #174	@ 0xae
 8010af4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010af8:	2b00      	cmp	r3, #0
 8010afa:	d101      	bne.n	8010b00 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8010afc:	2303      	movs	r3, #3
 8010afe:	e01c      	b.n	8010b3a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010b00:	687b      	ldr	r3, [r7, #4]
 8010b02:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010b06:	b2db      	uxtb	r3, r3
 8010b08:	2b03      	cmp	r3, #3
 8010b0a:	d115      	bne.n	8010b38 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8010b0c:	687b      	ldr	r3, [r7, #4]
 8010b0e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010b12:	687b      	ldr	r3, [r7, #4]
 8010b14:	32ae      	adds	r2, #174	@ 0xae
 8010b16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010b1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010b1c:	2b00      	cmp	r3, #0
 8010b1e:	d00b      	beq.n	8010b38 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8010b20:	687b      	ldr	r3, [r7, #4]
 8010b22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010b26:	687b      	ldr	r3, [r7, #4]
 8010b28:	32ae      	adds	r2, #174	@ 0xae
 8010b2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010b2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010b30:	78fa      	ldrb	r2, [r7, #3]
 8010b32:	4611      	mov	r1, r2
 8010b34:	6878      	ldr	r0, [r7, #4]
 8010b36:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8010b38:	2300      	movs	r3, #0
}
 8010b3a:	4618      	mov	r0, r3
 8010b3c:	3708      	adds	r7, #8
 8010b3e:	46bd      	mov	sp, r7
 8010b40:	bd80      	pop	{r7, pc}

08010b42 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8010b42:	b480      	push	{r7}
 8010b44:	b083      	sub	sp, #12
 8010b46:	af00      	add	r7, sp, #0
 8010b48:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8010b4a:	2300      	movs	r3, #0
}
 8010b4c:	4618      	mov	r0, r3
 8010b4e:	370c      	adds	r7, #12
 8010b50:	46bd      	mov	sp, r7
 8010b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b56:	4770      	bx	lr

08010b58 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8010b58:	b580      	push	{r7, lr}
 8010b5a:	b084      	sub	sp, #16
 8010b5c:	af00      	add	r7, sp, #0
 8010b5e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8010b60:	2300      	movs	r3, #0
 8010b62:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8010b64:	687b      	ldr	r3, [r7, #4]
 8010b66:	2201      	movs	r2, #1
 8010b68:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8010b6c:	687b      	ldr	r3, [r7, #4]
 8010b6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010b72:	2b00      	cmp	r3, #0
 8010b74:	d00e      	beq.n	8010b94 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8010b76:	687b      	ldr	r3, [r7, #4]
 8010b78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010b7c:	685b      	ldr	r3, [r3, #4]
 8010b7e:	687a      	ldr	r2, [r7, #4]
 8010b80:	6852      	ldr	r2, [r2, #4]
 8010b82:	b2d2      	uxtb	r2, r2
 8010b84:	4611      	mov	r1, r2
 8010b86:	6878      	ldr	r0, [r7, #4]
 8010b88:	4798      	blx	r3
 8010b8a:	4603      	mov	r3, r0
 8010b8c:	2b00      	cmp	r3, #0
 8010b8e:	d001      	beq.n	8010b94 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8010b90:	2303      	movs	r3, #3
 8010b92:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8010b94:	7bfb      	ldrb	r3, [r7, #15]
}
 8010b96:	4618      	mov	r0, r3
 8010b98:	3710      	adds	r7, #16
 8010b9a:	46bd      	mov	sp, r7
 8010b9c:	bd80      	pop	{r7, pc}

08010b9e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8010b9e:	b480      	push	{r7}
 8010ba0:	b083      	sub	sp, #12
 8010ba2:	af00      	add	r7, sp, #0
 8010ba4:	6078      	str	r0, [r7, #4]
 8010ba6:	460b      	mov	r3, r1
 8010ba8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8010baa:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8010bac:	4618      	mov	r0, r3
 8010bae:	370c      	adds	r7, #12
 8010bb0:	46bd      	mov	sp, r7
 8010bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bb6:	4770      	bx	lr

08010bb8 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8010bb8:	b480      	push	{r7}
 8010bba:	b083      	sub	sp, #12
 8010bbc:	af00      	add	r7, sp, #0
 8010bbe:	6078      	str	r0, [r7, #4]
 8010bc0:	460b      	mov	r3, r1
 8010bc2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8010bc4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8010bc6:	4618      	mov	r0, r3
 8010bc8:	370c      	adds	r7, #12
 8010bca:	46bd      	mov	sp, r7
 8010bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bd0:	4770      	bx	lr

08010bd2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8010bd2:	b580      	push	{r7, lr}
 8010bd4:	b086      	sub	sp, #24
 8010bd6:	af00      	add	r7, sp, #0
 8010bd8:	6078      	str	r0, [r7, #4]
 8010bda:	460b      	mov	r3, r1
 8010bdc:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8010bde:	687b      	ldr	r3, [r7, #4]
 8010be0:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8010be2:	687b      	ldr	r3, [r7, #4]
 8010be4:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8010be6:	2300      	movs	r3, #0
 8010be8:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8010bea:	68fb      	ldr	r3, [r7, #12]
 8010bec:	885b      	ldrh	r3, [r3, #2]
 8010bee:	b29b      	uxth	r3, r3
 8010bf0:	68fa      	ldr	r2, [r7, #12]
 8010bf2:	7812      	ldrb	r2, [r2, #0]
 8010bf4:	4293      	cmp	r3, r2
 8010bf6:	d91f      	bls.n	8010c38 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8010bf8:	68fb      	ldr	r3, [r7, #12]
 8010bfa:	781b      	ldrb	r3, [r3, #0]
 8010bfc:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8010bfe:	e013      	b.n	8010c28 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8010c00:	f107 030a 	add.w	r3, r7, #10
 8010c04:	4619      	mov	r1, r3
 8010c06:	6978      	ldr	r0, [r7, #20]
 8010c08:	f000 f81b 	bl	8010c42 <USBD_GetNextDesc>
 8010c0c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8010c0e:	697b      	ldr	r3, [r7, #20]
 8010c10:	785b      	ldrb	r3, [r3, #1]
 8010c12:	2b05      	cmp	r3, #5
 8010c14:	d108      	bne.n	8010c28 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8010c16:	697b      	ldr	r3, [r7, #20]
 8010c18:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8010c1a:	693b      	ldr	r3, [r7, #16]
 8010c1c:	789b      	ldrb	r3, [r3, #2]
 8010c1e:	78fa      	ldrb	r2, [r7, #3]
 8010c20:	429a      	cmp	r2, r3
 8010c22:	d008      	beq.n	8010c36 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8010c24:	2300      	movs	r3, #0
 8010c26:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8010c28:	68fb      	ldr	r3, [r7, #12]
 8010c2a:	885b      	ldrh	r3, [r3, #2]
 8010c2c:	b29a      	uxth	r2, r3
 8010c2e:	897b      	ldrh	r3, [r7, #10]
 8010c30:	429a      	cmp	r2, r3
 8010c32:	d8e5      	bhi.n	8010c00 <USBD_GetEpDesc+0x2e>
 8010c34:	e000      	b.n	8010c38 <USBD_GetEpDesc+0x66>
          break;
 8010c36:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8010c38:	693b      	ldr	r3, [r7, #16]
}
 8010c3a:	4618      	mov	r0, r3
 8010c3c:	3718      	adds	r7, #24
 8010c3e:	46bd      	mov	sp, r7
 8010c40:	bd80      	pop	{r7, pc}

08010c42 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8010c42:	b480      	push	{r7}
 8010c44:	b085      	sub	sp, #20
 8010c46:	af00      	add	r7, sp, #0
 8010c48:	6078      	str	r0, [r7, #4]
 8010c4a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8010c4c:	687b      	ldr	r3, [r7, #4]
 8010c4e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8010c50:	683b      	ldr	r3, [r7, #0]
 8010c52:	881b      	ldrh	r3, [r3, #0]
 8010c54:	68fa      	ldr	r2, [r7, #12]
 8010c56:	7812      	ldrb	r2, [r2, #0]
 8010c58:	4413      	add	r3, r2
 8010c5a:	b29a      	uxth	r2, r3
 8010c5c:	683b      	ldr	r3, [r7, #0]
 8010c5e:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8010c60:	68fb      	ldr	r3, [r7, #12]
 8010c62:	781b      	ldrb	r3, [r3, #0]
 8010c64:	461a      	mov	r2, r3
 8010c66:	687b      	ldr	r3, [r7, #4]
 8010c68:	4413      	add	r3, r2
 8010c6a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8010c6c:	68fb      	ldr	r3, [r7, #12]
}
 8010c6e:	4618      	mov	r0, r3
 8010c70:	3714      	adds	r7, #20
 8010c72:	46bd      	mov	sp, r7
 8010c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c78:	4770      	bx	lr

08010c7a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8010c7a:	b480      	push	{r7}
 8010c7c:	b087      	sub	sp, #28
 8010c7e:	af00      	add	r7, sp, #0
 8010c80:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8010c82:	687b      	ldr	r3, [r7, #4]
 8010c84:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8010c86:	697b      	ldr	r3, [r7, #20]
 8010c88:	781b      	ldrb	r3, [r3, #0]
 8010c8a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8010c8c:	697b      	ldr	r3, [r7, #20]
 8010c8e:	3301      	adds	r3, #1
 8010c90:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8010c92:	697b      	ldr	r3, [r7, #20]
 8010c94:	781b      	ldrb	r3, [r3, #0]
 8010c96:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8010c98:	8a3b      	ldrh	r3, [r7, #16]
 8010c9a:	021b      	lsls	r3, r3, #8
 8010c9c:	b21a      	sxth	r2, r3
 8010c9e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8010ca2:	4313      	orrs	r3, r2
 8010ca4:	b21b      	sxth	r3, r3
 8010ca6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8010ca8:	89fb      	ldrh	r3, [r7, #14]
}
 8010caa:	4618      	mov	r0, r3
 8010cac:	371c      	adds	r7, #28
 8010cae:	46bd      	mov	sp, r7
 8010cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cb4:	4770      	bx	lr
	...

08010cb8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010cb8:	b580      	push	{r7, lr}
 8010cba:	b084      	sub	sp, #16
 8010cbc:	af00      	add	r7, sp, #0
 8010cbe:	6078      	str	r0, [r7, #4]
 8010cc0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8010cc2:	2300      	movs	r3, #0
 8010cc4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010cc6:	683b      	ldr	r3, [r7, #0]
 8010cc8:	781b      	ldrb	r3, [r3, #0]
 8010cca:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8010cce:	2b40      	cmp	r3, #64	@ 0x40
 8010cd0:	d005      	beq.n	8010cde <USBD_StdDevReq+0x26>
 8010cd2:	2b40      	cmp	r3, #64	@ 0x40
 8010cd4:	d857      	bhi.n	8010d86 <USBD_StdDevReq+0xce>
 8010cd6:	2b00      	cmp	r3, #0
 8010cd8:	d00f      	beq.n	8010cfa <USBD_StdDevReq+0x42>
 8010cda:	2b20      	cmp	r3, #32
 8010cdc:	d153      	bne.n	8010d86 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8010cde:	687b      	ldr	r3, [r7, #4]
 8010ce0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010ce4:	687b      	ldr	r3, [r7, #4]
 8010ce6:	32ae      	adds	r2, #174	@ 0xae
 8010ce8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010cec:	689b      	ldr	r3, [r3, #8]
 8010cee:	6839      	ldr	r1, [r7, #0]
 8010cf0:	6878      	ldr	r0, [r7, #4]
 8010cf2:	4798      	blx	r3
 8010cf4:	4603      	mov	r3, r0
 8010cf6:	73fb      	strb	r3, [r7, #15]
      break;
 8010cf8:	e04a      	b.n	8010d90 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8010cfa:	683b      	ldr	r3, [r7, #0]
 8010cfc:	785b      	ldrb	r3, [r3, #1]
 8010cfe:	2b09      	cmp	r3, #9
 8010d00:	d83b      	bhi.n	8010d7a <USBD_StdDevReq+0xc2>
 8010d02:	a201      	add	r2, pc, #4	@ (adr r2, 8010d08 <USBD_StdDevReq+0x50>)
 8010d04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010d08:	08010d5d 	.word	0x08010d5d
 8010d0c:	08010d71 	.word	0x08010d71
 8010d10:	08010d7b 	.word	0x08010d7b
 8010d14:	08010d67 	.word	0x08010d67
 8010d18:	08010d7b 	.word	0x08010d7b
 8010d1c:	08010d3b 	.word	0x08010d3b
 8010d20:	08010d31 	.word	0x08010d31
 8010d24:	08010d7b 	.word	0x08010d7b
 8010d28:	08010d53 	.word	0x08010d53
 8010d2c:	08010d45 	.word	0x08010d45
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8010d30:	6839      	ldr	r1, [r7, #0]
 8010d32:	6878      	ldr	r0, [r7, #4]
 8010d34:	f000 fa3c 	bl	80111b0 <USBD_GetDescriptor>
          break;
 8010d38:	e024      	b.n	8010d84 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8010d3a:	6839      	ldr	r1, [r7, #0]
 8010d3c:	6878      	ldr	r0, [r7, #4]
 8010d3e:	f000 fbcb 	bl	80114d8 <USBD_SetAddress>
          break;
 8010d42:	e01f      	b.n	8010d84 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8010d44:	6839      	ldr	r1, [r7, #0]
 8010d46:	6878      	ldr	r0, [r7, #4]
 8010d48:	f000 fc0a 	bl	8011560 <USBD_SetConfig>
 8010d4c:	4603      	mov	r3, r0
 8010d4e:	73fb      	strb	r3, [r7, #15]
          break;
 8010d50:	e018      	b.n	8010d84 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8010d52:	6839      	ldr	r1, [r7, #0]
 8010d54:	6878      	ldr	r0, [r7, #4]
 8010d56:	f000 fcad 	bl	80116b4 <USBD_GetConfig>
          break;
 8010d5a:	e013      	b.n	8010d84 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8010d5c:	6839      	ldr	r1, [r7, #0]
 8010d5e:	6878      	ldr	r0, [r7, #4]
 8010d60:	f000 fcde 	bl	8011720 <USBD_GetStatus>
          break;
 8010d64:	e00e      	b.n	8010d84 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8010d66:	6839      	ldr	r1, [r7, #0]
 8010d68:	6878      	ldr	r0, [r7, #4]
 8010d6a:	f000 fd0d 	bl	8011788 <USBD_SetFeature>
          break;
 8010d6e:	e009      	b.n	8010d84 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8010d70:	6839      	ldr	r1, [r7, #0]
 8010d72:	6878      	ldr	r0, [r7, #4]
 8010d74:	f000 fd31 	bl	80117da <USBD_ClrFeature>
          break;
 8010d78:	e004      	b.n	8010d84 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8010d7a:	6839      	ldr	r1, [r7, #0]
 8010d7c:	6878      	ldr	r0, [r7, #4]
 8010d7e:	f000 fd88 	bl	8011892 <USBD_CtlError>
          break;
 8010d82:	bf00      	nop
      }
      break;
 8010d84:	e004      	b.n	8010d90 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8010d86:	6839      	ldr	r1, [r7, #0]
 8010d88:	6878      	ldr	r0, [r7, #4]
 8010d8a:	f000 fd82 	bl	8011892 <USBD_CtlError>
      break;
 8010d8e:	bf00      	nop
  }

  return ret;
 8010d90:	7bfb      	ldrb	r3, [r7, #15]
}
 8010d92:	4618      	mov	r0, r3
 8010d94:	3710      	adds	r7, #16
 8010d96:	46bd      	mov	sp, r7
 8010d98:	bd80      	pop	{r7, pc}
 8010d9a:	bf00      	nop

08010d9c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010d9c:	b580      	push	{r7, lr}
 8010d9e:	b084      	sub	sp, #16
 8010da0:	af00      	add	r7, sp, #0
 8010da2:	6078      	str	r0, [r7, #4]
 8010da4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8010da6:	2300      	movs	r3, #0
 8010da8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010daa:	683b      	ldr	r3, [r7, #0]
 8010dac:	781b      	ldrb	r3, [r3, #0]
 8010dae:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8010db2:	2b40      	cmp	r3, #64	@ 0x40
 8010db4:	d005      	beq.n	8010dc2 <USBD_StdItfReq+0x26>
 8010db6:	2b40      	cmp	r3, #64	@ 0x40
 8010db8:	d852      	bhi.n	8010e60 <USBD_StdItfReq+0xc4>
 8010dba:	2b00      	cmp	r3, #0
 8010dbc:	d001      	beq.n	8010dc2 <USBD_StdItfReq+0x26>
 8010dbe:	2b20      	cmp	r3, #32
 8010dc0:	d14e      	bne.n	8010e60 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8010dc2:	687b      	ldr	r3, [r7, #4]
 8010dc4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010dc8:	b2db      	uxtb	r3, r3
 8010dca:	3b01      	subs	r3, #1
 8010dcc:	2b02      	cmp	r3, #2
 8010dce:	d840      	bhi.n	8010e52 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8010dd0:	683b      	ldr	r3, [r7, #0]
 8010dd2:	889b      	ldrh	r3, [r3, #4]
 8010dd4:	b2db      	uxtb	r3, r3
 8010dd6:	2b01      	cmp	r3, #1
 8010dd8:	d836      	bhi.n	8010e48 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8010dda:	683b      	ldr	r3, [r7, #0]
 8010ddc:	889b      	ldrh	r3, [r3, #4]
 8010dde:	b2db      	uxtb	r3, r3
 8010de0:	4619      	mov	r1, r3
 8010de2:	6878      	ldr	r0, [r7, #4]
 8010de4:	f7ff fedb 	bl	8010b9e <USBD_CoreFindIF>
 8010de8:	4603      	mov	r3, r0
 8010dea:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8010dec:	7bbb      	ldrb	r3, [r7, #14]
 8010dee:	2bff      	cmp	r3, #255	@ 0xff
 8010df0:	d01d      	beq.n	8010e2e <USBD_StdItfReq+0x92>
 8010df2:	7bbb      	ldrb	r3, [r7, #14]
 8010df4:	2b00      	cmp	r3, #0
 8010df6:	d11a      	bne.n	8010e2e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8010df8:	7bba      	ldrb	r2, [r7, #14]
 8010dfa:	687b      	ldr	r3, [r7, #4]
 8010dfc:	32ae      	adds	r2, #174	@ 0xae
 8010dfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010e02:	689b      	ldr	r3, [r3, #8]
 8010e04:	2b00      	cmp	r3, #0
 8010e06:	d00f      	beq.n	8010e28 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8010e08:	7bba      	ldrb	r2, [r7, #14]
 8010e0a:	687b      	ldr	r3, [r7, #4]
 8010e0c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8010e10:	7bba      	ldrb	r2, [r7, #14]
 8010e12:	687b      	ldr	r3, [r7, #4]
 8010e14:	32ae      	adds	r2, #174	@ 0xae
 8010e16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010e1a:	689b      	ldr	r3, [r3, #8]
 8010e1c:	6839      	ldr	r1, [r7, #0]
 8010e1e:	6878      	ldr	r0, [r7, #4]
 8010e20:	4798      	blx	r3
 8010e22:	4603      	mov	r3, r0
 8010e24:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8010e26:	e004      	b.n	8010e32 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8010e28:	2303      	movs	r3, #3
 8010e2a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8010e2c:	e001      	b.n	8010e32 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8010e2e:	2303      	movs	r3, #3
 8010e30:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8010e32:	683b      	ldr	r3, [r7, #0]
 8010e34:	88db      	ldrh	r3, [r3, #6]
 8010e36:	2b00      	cmp	r3, #0
 8010e38:	d110      	bne.n	8010e5c <USBD_StdItfReq+0xc0>
 8010e3a:	7bfb      	ldrb	r3, [r7, #15]
 8010e3c:	2b00      	cmp	r3, #0
 8010e3e:	d10d      	bne.n	8010e5c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8010e40:	6878      	ldr	r0, [r7, #4]
 8010e42:	f000 fdfd 	bl	8011a40 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8010e46:	e009      	b.n	8010e5c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8010e48:	6839      	ldr	r1, [r7, #0]
 8010e4a:	6878      	ldr	r0, [r7, #4]
 8010e4c:	f000 fd21 	bl	8011892 <USBD_CtlError>
          break;
 8010e50:	e004      	b.n	8010e5c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8010e52:	6839      	ldr	r1, [r7, #0]
 8010e54:	6878      	ldr	r0, [r7, #4]
 8010e56:	f000 fd1c 	bl	8011892 <USBD_CtlError>
          break;
 8010e5a:	e000      	b.n	8010e5e <USBD_StdItfReq+0xc2>
          break;
 8010e5c:	bf00      	nop
      }
      break;
 8010e5e:	e004      	b.n	8010e6a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8010e60:	6839      	ldr	r1, [r7, #0]
 8010e62:	6878      	ldr	r0, [r7, #4]
 8010e64:	f000 fd15 	bl	8011892 <USBD_CtlError>
      break;
 8010e68:	bf00      	nop
  }

  return ret;
 8010e6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8010e6c:	4618      	mov	r0, r3
 8010e6e:	3710      	adds	r7, #16
 8010e70:	46bd      	mov	sp, r7
 8010e72:	bd80      	pop	{r7, pc}

08010e74 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010e74:	b580      	push	{r7, lr}
 8010e76:	b084      	sub	sp, #16
 8010e78:	af00      	add	r7, sp, #0
 8010e7a:	6078      	str	r0, [r7, #4]
 8010e7c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8010e7e:	2300      	movs	r3, #0
 8010e80:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8010e82:	683b      	ldr	r3, [r7, #0]
 8010e84:	889b      	ldrh	r3, [r3, #4]
 8010e86:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010e88:	683b      	ldr	r3, [r7, #0]
 8010e8a:	781b      	ldrb	r3, [r3, #0]
 8010e8c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8010e90:	2b40      	cmp	r3, #64	@ 0x40
 8010e92:	d007      	beq.n	8010ea4 <USBD_StdEPReq+0x30>
 8010e94:	2b40      	cmp	r3, #64	@ 0x40
 8010e96:	f200 817f 	bhi.w	8011198 <USBD_StdEPReq+0x324>
 8010e9a:	2b00      	cmp	r3, #0
 8010e9c:	d02a      	beq.n	8010ef4 <USBD_StdEPReq+0x80>
 8010e9e:	2b20      	cmp	r3, #32
 8010ea0:	f040 817a 	bne.w	8011198 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8010ea4:	7bbb      	ldrb	r3, [r7, #14]
 8010ea6:	4619      	mov	r1, r3
 8010ea8:	6878      	ldr	r0, [r7, #4]
 8010eaa:	f7ff fe85 	bl	8010bb8 <USBD_CoreFindEP>
 8010eae:	4603      	mov	r3, r0
 8010eb0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8010eb2:	7b7b      	ldrb	r3, [r7, #13]
 8010eb4:	2bff      	cmp	r3, #255	@ 0xff
 8010eb6:	f000 8174 	beq.w	80111a2 <USBD_StdEPReq+0x32e>
 8010eba:	7b7b      	ldrb	r3, [r7, #13]
 8010ebc:	2b00      	cmp	r3, #0
 8010ebe:	f040 8170 	bne.w	80111a2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8010ec2:	7b7a      	ldrb	r2, [r7, #13]
 8010ec4:	687b      	ldr	r3, [r7, #4]
 8010ec6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8010eca:	7b7a      	ldrb	r2, [r7, #13]
 8010ecc:	687b      	ldr	r3, [r7, #4]
 8010ece:	32ae      	adds	r2, #174	@ 0xae
 8010ed0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010ed4:	689b      	ldr	r3, [r3, #8]
 8010ed6:	2b00      	cmp	r3, #0
 8010ed8:	f000 8163 	beq.w	80111a2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8010edc:	7b7a      	ldrb	r2, [r7, #13]
 8010ede:	687b      	ldr	r3, [r7, #4]
 8010ee0:	32ae      	adds	r2, #174	@ 0xae
 8010ee2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010ee6:	689b      	ldr	r3, [r3, #8]
 8010ee8:	6839      	ldr	r1, [r7, #0]
 8010eea:	6878      	ldr	r0, [r7, #4]
 8010eec:	4798      	blx	r3
 8010eee:	4603      	mov	r3, r0
 8010ef0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8010ef2:	e156      	b.n	80111a2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8010ef4:	683b      	ldr	r3, [r7, #0]
 8010ef6:	785b      	ldrb	r3, [r3, #1]
 8010ef8:	2b03      	cmp	r3, #3
 8010efa:	d008      	beq.n	8010f0e <USBD_StdEPReq+0x9a>
 8010efc:	2b03      	cmp	r3, #3
 8010efe:	f300 8145 	bgt.w	801118c <USBD_StdEPReq+0x318>
 8010f02:	2b00      	cmp	r3, #0
 8010f04:	f000 809b 	beq.w	801103e <USBD_StdEPReq+0x1ca>
 8010f08:	2b01      	cmp	r3, #1
 8010f0a:	d03c      	beq.n	8010f86 <USBD_StdEPReq+0x112>
 8010f0c:	e13e      	b.n	801118c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8010f0e:	687b      	ldr	r3, [r7, #4]
 8010f10:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010f14:	b2db      	uxtb	r3, r3
 8010f16:	2b02      	cmp	r3, #2
 8010f18:	d002      	beq.n	8010f20 <USBD_StdEPReq+0xac>
 8010f1a:	2b03      	cmp	r3, #3
 8010f1c:	d016      	beq.n	8010f4c <USBD_StdEPReq+0xd8>
 8010f1e:	e02c      	b.n	8010f7a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8010f20:	7bbb      	ldrb	r3, [r7, #14]
 8010f22:	2b00      	cmp	r3, #0
 8010f24:	d00d      	beq.n	8010f42 <USBD_StdEPReq+0xce>
 8010f26:	7bbb      	ldrb	r3, [r7, #14]
 8010f28:	2b80      	cmp	r3, #128	@ 0x80
 8010f2a:	d00a      	beq.n	8010f42 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8010f2c:	7bbb      	ldrb	r3, [r7, #14]
 8010f2e:	4619      	mov	r1, r3
 8010f30:	6878      	ldr	r0, [r7, #4]
 8010f32:	f001 f9d9 	bl	80122e8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8010f36:	2180      	movs	r1, #128	@ 0x80
 8010f38:	6878      	ldr	r0, [r7, #4]
 8010f3a:	f001 f9d5 	bl	80122e8 <USBD_LL_StallEP>
 8010f3e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8010f40:	e020      	b.n	8010f84 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8010f42:	6839      	ldr	r1, [r7, #0]
 8010f44:	6878      	ldr	r0, [r7, #4]
 8010f46:	f000 fca4 	bl	8011892 <USBD_CtlError>
              break;
 8010f4a:	e01b      	b.n	8010f84 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8010f4c:	683b      	ldr	r3, [r7, #0]
 8010f4e:	885b      	ldrh	r3, [r3, #2]
 8010f50:	2b00      	cmp	r3, #0
 8010f52:	d10e      	bne.n	8010f72 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8010f54:	7bbb      	ldrb	r3, [r7, #14]
 8010f56:	2b00      	cmp	r3, #0
 8010f58:	d00b      	beq.n	8010f72 <USBD_StdEPReq+0xfe>
 8010f5a:	7bbb      	ldrb	r3, [r7, #14]
 8010f5c:	2b80      	cmp	r3, #128	@ 0x80
 8010f5e:	d008      	beq.n	8010f72 <USBD_StdEPReq+0xfe>
 8010f60:	683b      	ldr	r3, [r7, #0]
 8010f62:	88db      	ldrh	r3, [r3, #6]
 8010f64:	2b00      	cmp	r3, #0
 8010f66:	d104      	bne.n	8010f72 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8010f68:	7bbb      	ldrb	r3, [r7, #14]
 8010f6a:	4619      	mov	r1, r3
 8010f6c:	6878      	ldr	r0, [r7, #4]
 8010f6e:	f001 f9bb 	bl	80122e8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8010f72:	6878      	ldr	r0, [r7, #4]
 8010f74:	f000 fd64 	bl	8011a40 <USBD_CtlSendStatus>

              break;
 8010f78:	e004      	b.n	8010f84 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8010f7a:	6839      	ldr	r1, [r7, #0]
 8010f7c:	6878      	ldr	r0, [r7, #4]
 8010f7e:	f000 fc88 	bl	8011892 <USBD_CtlError>
              break;
 8010f82:	bf00      	nop
          }
          break;
 8010f84:	e107      	b.n	8011196 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8010f86:	687b      	ldr	r3, [r7, #4]
 8010f88:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010f8c:	b2db      	uxtb	r3, r3
 8010f8e:	2b02      	cmp	r3, #2
 8010f90:	d002      	beq.n	8010f98 <USBD_StdEPReq+0x124>
 8010f92:	2b03      	cmp	r3, #3
 8010f94:	d016      	beq.n	8010fc4 <USBD_StdEPReq+0x150>
 8010f96:	e04b      	b.n	8011030 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8010f98:	7bbb      	ldrb	r3, [r7, #14]
 8010f9a:	2b00      	cmp	r3, #0
 8010f9c:	d00d      	beq.n	8010fba <USBD_StdEPReq+0x146>
 8010f9e:	7bbb      	ldrb	r3, [r7, #14]
 8010fa0:	2b80      	cmp	r3, #128	@ 0x80
 8010fa2:	d00a      	beq.n	8010fba <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8010fa4:	7bbb      	ldrb	r3, [r7, #14]
 8010fa6:	4619      	mov	r1, r3
 8010fa8:	6878      	ldr	r0, [r7, #4]
 8010faa:	f001 f99d 	bl	80122e8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8010fae:	2180      	movs	r1, #128	@ 0x80
 8010fb0:	6878      	ldr	r0, [r7, #4]
 8010fb2:	f001 f999 	bl	80122e8 <USBD_LL_StallEP>
 8010fb6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8010fb8:	e040      	b.n	801103c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8010fba:	6839      	ldr	r1, [r7, #0]
 8010fbc:	6878      	ldr	r0, [r7, #4]
 8010fbe:	f000 fc68 	bl	8011892 <USBD_CtlError>
              break;
 8010fc2:	e03b      	b.n	801103c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8010fc4:	683b      	ldr	r3, [r7, #0]
 8010fc6:	885b      	ldrh	r3, [r3, #2]
 8010fc8:	2b00      	cmp	r3, #0
 8010fca:	d136      	bne.n	801103a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8010fcc:	7bbb      	ldrb	r3, [r7, #14]
 8010fce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010fd2:	2b00      	cmp	r3, #0
 8010fd4:	d004      	beq.n	8010fe0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8010fd6:	7bbb      	ldrb	r3, [r7, #14]
 8010fd8:	4619      	mov	r1, r3
 8010fda:	6878      	ldr	r0, [r7, #4]
 8010fdc:	f001 f9a3 	bl	8012326 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8010fe0:	6878      	ldr	r0, [r7, #4]
 8010fe2:	f000 fd2d 	bl	8011a40 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8010fe6:	7bbb      	ldrb	r3, [r7, #14]
 8010fe8:	4619      	mov	r1, r3
 8010fea:	6878      	ldr	r0, [r7, #4]
 8010fec:	f7ff fde4 	bl	8010bb8 <USBD_CoreFindEP>
 8010ff0:	4603      	mov	r3, r0
 8010ff2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8010ff4:	7b7b      	ldrb	r3, [r7, #13]
 8010ff6:	2bff      	cmp	r3, #255	@ 0xff
 8010ff8:	d01f      	beq.n	801103a <USBD_StdEPReq+0x1c6>
 8010ffa:	7b7b      	ldrb	r3, [r7, #13]
 8010ffc:	2b00      	cmp	r3, #0
 8010ffe:	d11c      	bne.n	801103a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8011000:	7b7a      	ldrb	r2, [r7, #13]
 8011002:	687b      	ldr	r3, [r7, #4]
 8011004:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8011008:	7b7a      	ldrb	r2, [r7, #13]
 801100a:	687b      	ldr	r3, [r7, #4]
 801100c:	32ae      	adds	r2, #174	@ 0xae
 801100e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011012:	689b      	ldr	r3, [r3, #8]
 8011014:	2b00      	cmp	r3, #0
 8011016:	d010      	beq.n	801103a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8011018:	7b7a      	ldrb	r2, [r7, #13]
 801101a:	687b      	ldr	r3, [r7, #4]
 801101c:	32ae      	adds	r2, #174	@ 0xae
 801101e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011022:	689b      	ldr	r3, [r3, #8]
 8011024:	6839      	ldr	r1, [r7, #0]
 8011026:	6878      	ldr	r0, [r7, #4]
 8011028:	4798      	blx	r3
 801102a:	4603      	mov	r3, r0
 801102c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 801102e:	e004      	b.n	801103a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8011030:	6839      	ldr	r1, [r7, #0]
 8011032:	6878      	ldr	r0, [r7, #4]
 8011034:	f000 fc2d 	bl	8011892 <USBD_CtlError>
              break;
 8011038:	e000      	b.n	801103c <USBD_StdEPReq+0x1c8>
              break;
 801103a:	bf00      	nop
          }
          break;
 801103c:	e0ab      	b.n	8011196 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 801103e:	687b      	ldr	r3, [r7, #4]
 8011040:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011044:	b2db      	uxtb	r3, r3
 8011046:	2b02      	cmp	r3, #2
 8011048:	d002      	beq.n	8011050 <USBD_StdEPReq+0x1dc>
 801104a:	2b03      	cmp	r3, #3
 801104c:	d032      	beq.n	80110b4 <USBD_StdEPReq+0x240>
 801104e:	e097      	b.n	8011180 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011050:	7bbb      	ldrb	r3, [r7, #14]
 8011052:	2b00      	cmp	r3, #0
 8011054:	d007      	beq.n	8011066 <USBD_StdEPReq+0x1f2>
 8011056:	7bbb      	ldrb	r3, [r7, #14]
 8011058:	2b80      	cmp	r3, #128	@ 0x80
 801105a:	d004      	beq.n	8011066 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 801105c:	6839      	ldr	r1, [r7, #0]
 801105e:	6878      	ldr	r0, [r7, #4]
 8011060:	f000 fc17 	bl	8011892 <USBD_CtlError>
                break;
 8011064:	e091      	b.n	801118a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011066:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801106a:	2b00      	cmp	r3, #0
 801106c:	da0b      	bge.n	8011086 <USBD_StdEPReq+0x212>
 801106e:	7bbb      	ldrb	r3, [r7, #14]
 8011070:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8011074:	4613      	mov	r3, r2
 8011076:	009b      	lsls	r3, r3, #2
 8011078:	4413      	add	r3, r2
 801107a:	009b      	lsls	r3, r3, #2
 801107c:	3310      	adds	r3, #16
 801107e:	687a      	ldr	r2, [r7, #4]
 8011080:	4413      	add	r3, r2
 8011082:	3304      	adds	r3, #4
 8011084:	e00b      	b.n	801109e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8011086:	7bbb      	ldrb	r3, [r7, #14]
 8011088:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801108c:	4613      	mov	r3, r2
 801108e:	009b      	lsls	r3, r3, #2
 8011090:	4413      	add	r3, r2
 8011092:	009b      	lsls	r3, r3, #2
 8011094:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8011098:	687a      	ldr	r2, [r7, #4]
 801109a:	4413      	add	r3, r2
 801109c:	3304      	adds	r3, #4
 801109e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80110a0:	68bb      	ldr	r3, [r7, #8]
 80110a2:	2200      	movs	r2, #0
 80110a4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80110a6:	68bb      	ldr	r3, [r7, #8]
 80110a8:	2202      	movs	r2, #2
 80110aa:	4619      	mov	r1, r3
 80110ac:	6878      	ldr	r0, [r7, #4]
 80110ae:	f000 fc6d 	bl	801198c <USBD_CtlSendData>
              break;
 80110b2:	e06a      	b.n	801118a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80110b4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80110b8:	2b00      	cmp	r3, #0
 80110ba:	da11      	bge.n	80110e0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80110bc:	7bbb      	ldrb	r3, [r7, #14]
 80110be:	f003 020f 	and.w	r2, r3, #15
 80110c2:	6879      	ldr	r1, [r7, #4]
 80110c4:	4613      	mov	r3, r2
 80110c6:	009b      	lsls	r3, r3, #2
 80110c8:	4413      	add	r3, r2
 80110ca:	009b      	lsls	r3, r3, #2
 80110cc:	440b      	add	r3, r1
 80110ce:	3324      	adds	r3, #36	@ 0x24
 80110d0:	881b      	ldrh	r3, [r3, #0]
 80110d2:	2b00      	cmp	r3, #0
 80110d4:	d117      	bne.n	8011106 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80110d6:	6839      	ldr	r1, [r7, #0]
 80110d8:	6878      	ldr	r0, [r7, #4]
 80110da:	f000 fbda 	bl	8011892 <USBD_CtlError>
                  break;
 80110de:	e054      	b.n	801118a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80110e0:	7bbb      	ldrb	r3, [r7, #14]
 80110e2:	f003 020f 	and.w	r2, r3, #15
 80110e6:	6879      	ldr	r1, [r7, #4]
 80110e8:	4613      	mov	r3, r2
 80110ea:	009b      	lsls	r3, r3, #2
 80110ec:	4413      	add	r3, r2
 80110ee:	009b      	lsls	r3, r3, #2
 80110f0:	440b      	add	r3, r1
 80110f2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80110f6:	881b      	ldrh	r3, [r3, #0]
 80110f8:	2b00      	cmp	r3, #0
 80110fa:	d104      	bne.n	8011106 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80110fc:	6839      	ldr	r1, [r7, #0]
 80110fe:	6878      	ldr	r0, [r7, #4]
 8011100:	f000 fbc7 	bl	8011892 <USBD_CtlError>
                  break;
 8011104:	e041      	b.n	801118a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011106:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801110a:	2b00      	cmp	r3, #0
 801110c:	da0b      	bge.n	8011126 <USBD_StdEPReq+0x2b2>
 801110e:	7bbb      	ldrb	r3, [r7, #14]
 8011110:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8011114:	4613      	mov	r3, r2
 8011116:	009b      	lsls	r3, r3, #2
 8011118:	4413      	add	r3, r2
 801111a:	009b      	lsls	r3, r3, #2
 801111c:	3310      	adds	r3, #16
 801111e:	687a      	ldr	r2, [r7, #4]
 8011120:	4413      	add	r3, r2
 8011122:	3304      	adds	r3, #4
 8011124:	e00b      	b.n	801113e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8011126:	7bbb      	ldrb	r3, [r7, #14]
 8011128:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801112c:	4613      	mov	r3, r2
 801112e:	009b      	lsls	r3, r3, #2
 8011130:	4413      	add	r3, r2
 8011132:	009b      	lsls	r3, r3, #2
 8011134:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8011138:	687a      	ldr	r2, [r7, #4]
 801113a:	4413      	add	r3, r2
 801113c:	3304      	adds	r3, #4
 801113e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8011140:	7bbb      	ldrb	r3, [r7, #14]
 8011142:	2b00      	cmp	r3, #0
 8011144:	d002      	beq.n	801114c <USBD_StdEPReq+0x2d8>
 8011146:	7bbb      	ldrb	r3, [r7, #14]
 8011148:	2b80      	cmp	r3, #128	@ 0x80
 801114a:	d103      	bne.n	8011154 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 801114c:	68bb      	ldr	r3, [r7, #8]
 801114e:	2200      	movs	r2, #0
 8011150:	601a      	str	r2, [r3, #0]
 8011152:	e00e      	b.n	8011172 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8011154:	7bbb      	ldrb	r3, [r7, #14]
 8011156:	4619      	mov	r1, r3
 8011158:	6878      	ldr	r0, [r7, #4]
 801115a:	f001 f903 	bl	8012364 <USBD_LL_IsStallEP>
 801115e:	4603      	mov	r3, r0
 8011160:	2b00      	cmp	r3, #0
 8011162:	d003      	beq.n	801116c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8011164:	68bb      	ldr	r3, [r7, #8]
 8011166:	2201      	movs	r2, #1
 8011168:	601a      	str	r2, [r3, #0]
 801116a:	e002      	b.n	8011172 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 801116c:	68bb      	ldr	r3, [r7, #8]
 801116e:	2200      	movs	r2, #0
 8011170:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8011172:	68bb      	ldr	r3, [r7, #8]
 8011174:	2202      	movs	r2, #2
 8011176:	4619      	mov	r1, r3
 8011178:	6878      	ldr	r0, [r7, #4]
 801117a:	f000 fc07 	bl	801198c <USBD_CtlSendData>
              break;
 801117e:	e004      	b.n	801118a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8011180:	6839      	ldr	r1, [r7, #0]
 8011182:	6878      	ldr	r0, [r7, #4]
 8011184:	f000 fb85 	bl	8011892 <USBD_CtlError>
              break;
 8011188:	bf00      	nop
          }
          break;
 801118a:	e004      	b.n	8011196 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 801118c:	6839      	ldr	r1, [r7, #0]
 801118e:	6878      	ldr	r0, [r7, #4]
 8011190:	f000 fb7f 	bl	8011892 <USBD_CtlError>
          break;
 8011194:	bf00      	nop
      }
      break;
 8011196:	e005      	b.n	80111a4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8011198:	6839      	ldr	r1, [r7, #0]
 801119a:	6878      	ldr	r0, [r7, #4]
 801119c:	f000 fb79 	bl	8011892 <USBD_CtlError>
      break;
 80111a0:	e000      	b.n	80111a4 <USBD_StdEPReq+0x330>
      break;
 80111a2:	bf00      	nop
  }

  return ret;
 80111a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80111a6:	4618      	mov	r0, r3
 80111a8:	3710      	adds	r7, #16
 80111aa:	46bd      	mov	sp, r7
 80111ac:	bd80      	pop	{r7, pc}
	...

080111b0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80111b0:	b580      	push	{r7, lr}
 80111b2:	b084      	sub	sp, #16
 80111b4:	af00      	add	r7, sp, #0
 80111b6:	6078      	str	r0, [r7, #4]
 80111b8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80111ba:	2300      	movs	r3, #0
 80111bc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80111be:	2300      	movs	r3, #0
 80111c0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80111c2:	2300      	movs	r3, #0
 80111c4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80111c6:	683b      	ldr	r3, [r7, #0]
 80111c8:	885b      	ldrh	r3, [r3, #2]
 80111ca:	0a1b      	lsrs	r3, r3, #8
 80111cc:	b29b      	uxth	r3, r3
 80111ce:	3b01      	subs	r3, #1
 80111d0:	2b0e      	cmp	r3, #14
 80111d2:	f200 8152 	bhi.w	801147a <USBD_GetDescriptor+0x2ca>
 80111d6:	a201      	add	r2, pc, #4	@ (adr r2, 80111dc <USBD_GetDescriptor+0x2c>)
 80111d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80111dc:	0801124d 	.word	0x0801124d
 80111e0:	08011265 	.word	0x08011265
 80111e4:	080112a5 	.word	0x080112a5
 80111e8:	0801147b 	.word	0x0801147b
 80111ec:	0801147b 	.word	0x0801147b
 80111f0:	0801141b 	.word	0x0801141b
 80111f4:	08011447 	.word	0x08011447
 80111f8:	0801147b 	.word	0x0801147b
 80111fc:	0801147b 	.word	0x0801147b
 8011200:	0801147b 	.word	0x0801147b
 8011204:	0801147b 	.word	0x0801147b
 8011208:	0801147b 	.word	0x0801147b
 801120c:	0801147b 	.word	0x0801147b
 8011210:	0801147b 	.word	0x0801147b
 8011214:	08011219 	.word	0x08011219
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8011218:	687b      	ldr	r3, [r7, #4]
 801121a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801121e:	69db      	ldr	r3, [r3, #28]
 8011220:	2b00      	cmp	r3, #0
 8011222:	d00b      	beq.n	801123c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8011224:	687b      	ldr	r3, [r7, #4]
 8011226:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801122a:	69db      	ldr	r3, [r3, #28]
 801122c:	687a      	ldr	r2, [r7, #4]
 801122e:	7c12      	ldrb	r2, [r2, #16]
 8011230:	f107 0108 	add.w	r1, r7, #8
 8011234:	4610      	mov	r0, r2
 8011236:	4798      	blx	r3
 8011238:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801123a:	e126      	b.n	801148a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 801123c:	6839      	ldr	r1, [r7, #0]
 801123e:	6878      	ldr	r0, [r7, #4]
 8011240:	f000 fb27 	bl	8011892 <USBD_CtlError>
        err++;
 8011244:	7afb      	ldrb	r3, [r7, #11]
 8011246:	3301      	adds	r3, #1
 8011248:	72fb      	strb	r3, [r7, #11]
      break;
 801124a:	e11e      	b.n	801148a <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 801124c:	687b      	ldr	r3, [r7, #4]
 801124e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011252:	681b      	ldr	r3, [r3, #0]
 8011254:	687a      	ldr	r2, [r7, #4]
 8011256:	7c12      	ldrb	r2, [r2, #16]
 8011258:	f107 0108 	add.w	r1, r7, #8
 801125c:	4610      	mov	r0, r2
 801125e:	4798      	blx	r3
 8011260:	60f8      	str	r0, [r7, #12]
      break;
 8011262:	e112      	b.n	801148a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011264:	687b      	ldr	r3, [r7, #4]
 8011266:	7c1b      	ldrb	r3, [r3, #16]
 8011268:	2b00      	cmp	r3, #0
 801126a:	d10d      	bne.n	8011288 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 801126c:	687b      	ldr	r3, [r7, #4]
 801126e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011272:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011274:	f107 0208 	add.w	r2, r7, #8
 8011278:	4610      	mov	r0, r2
 801127a:	4798      	blx	r3
 801127c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801127e:	68fb      	ldr	r3, [r7, #12]
 8011280:	3301      	adds	r3, #1
 8011282:	2202      	movs	r2, #2
 8011284:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8011286:	e100      	b.n	801148a <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8011288:	687b      	ldr	r3, [r7, #4]
 801128a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801128e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011290:	f107 0208 	add.w	r2, r7, #8
 8011294:	4610      	mov	r0, r2
 8011296:	4798      	blx	r3
 8011298:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801129a:	68fb      	ldr	r3, [r7, #12]
 801129c:	3301      	adds	r3, #1
 801129e:	2202      	movs	r2, #2
 80112a0:	701a      	strb	r2, [r3, #0]
      break;
 80112a2:	e0f2      	b.n	801148a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80112a4:	683b      	ldr	r3, [r7, #0]
 80112a6:	885b      	ldrh	r3, [r3, #2]
 80112a8:	b2db      	uxtb	r3, r3
 80112aa:	2b05      	cmp	r3, #5
 80112ac:	f200 80ac 	bhi.w	8011408 <USBD_GetDescriptor+0x258>
 80112b0:	a201      	add	r2, pc, #4	@ (adr r2, 80112b8 <USBD_GetDescriptor+0x108>)
 80112b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80112b6:	bf00      	nop
 80112b8:	080112d1 	.word	0x080112d1
 80112bc:	08011305 	.word	0x08011305
 80112c0:	08011339 	.word	0x08011339
 80112c4:	0801136d 	.word	0x0801136d
 80112c8:	080113a1 	.word	0x080113a1
 80112cc:	080113d5 	.word	0x080113d5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80112d0:	687b      	ldr	r3, [r7, #4]
 80112d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80112d6:	685b      	ldr	r3, [r3, #4]
 80112d8:	2b00      	cmp	r3, #0
 80112da:	d00b      	beq.n	80112f4 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80112dc:	687b      	ldr	r3, [r7, #4]
 80112de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80112e2:	685b      	ldr	r3, [r3, #4]
 80112e4:	687a      	ldr	r2, [r7, #4]
 80112e6:	7c12      	ldrb	r2, [r2, #16]
 80112e8:	f107 0108 	add.w	r1, r7, #8
 80112ec:	4610      	mov	r0, r2
 80112ee:	4798      	blx	r3
 80112f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80112f2:	e091      	b.n	8011418 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80112f4:	6839      	ldr	r1, [r7, #0]
 80112f6:	6878      	ldr	r0, [r7, #4]
 80112f8:	f000 facb 	bl	8011892 <USBD_CtlError>
            err++;
 80112fc:	7afb      	ldrb	r3, [r7, #11]
 80112fe:	3301      	adds	r3, #1
 8011300:	72fb      	strb	r3, [r7, #11]
          break;
 8011302:	e089      	b.n	8011418 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8011304:	687b      	ldr	r3, [r7, #4]
 8011306:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801130a:	689b      	ldr	r3, [r3, #8]
 801130c:	2b00      	cmp	r3, #0
 801130e:	d00b      	beq.n	8011328 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8011310:	687b      	ldr	r3, [r7, #4]
 8011312:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011316:	689b      	ldr	r3, [r3, #8]
 8011318:	687a      	ldr	r2, [r7, #4]
 801131a:	7c12      	ldrb	r2, [r2, #16]
 801131c:	f107 0108 	add.w	r1, r7, #8
 8011320:	4610      	mov	r0, r2
 8011322:	4798      	blx	r3
 8011324:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011326:	e077      	b.n	8011418 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8011328:	6839      	ldr	r1, [r7, #0]
 801132a:	6878      	ldr	r0, [r7, #4]
 801132c:	f000 fab1 	bl	8011892 <USBD_CtlError>
            err++;
 8011330:	7afb      	ldrb	r3, [r7, #11]
 8011332:	3301      	adds	r3, #1
 8011334:	72fb      	strb	r3, [r7, #11]
          break;
 8011336:	e06f      	b.n	8011418 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8011338:	687b      	ldr	r3, [r7, #4]
 801133a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801133e:	68db      	ldr	r3, [r3, #12]
 8011340:	2b00      	cmp	r3, #0
 8011342:	d00b      	beq.n	801135c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8011344:	687b      	ldr	r3, [r7, #4]
 8011346:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801134a:	68db      	ldr	r3, [r3, #12]
 801134c:	687a      	ldr	r2, [r7, #4]
 801134e:	7c12      	ldrb	r2, [r2, #16]
 8011350:	f107 0108 	add.w	r1, r7, #8
 8011354:	4610      	mov	r0, r2
 8011356:	4798      	blx	r3
 8011358:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801135a:	e05d      	b.n	8011418 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 801135c:	6839      	ldr	r1, [r7, #0]
 801135e:	6878      	ldr	r0, [r7, #4]
 8011360:	f000 fa97 	bl	8011892 <USBD_CtlError>
            err++;
 8011364:	7afb      	ldrb	r3, [r7, #11]
 8011366:	3301      	adds	r3, #1
 8011368:	72fb      	strb	r3, [r7, #11]
          break;
 801136a:	e055      	b.n	8011418 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 801136c:	687b      	ldr	r3, [r7, #4]
 801136e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011372:	691b      	ldr	r3, [r3, #16]
 8011374:	2b00      	cmp	r3, #0
 8011376:	d00b      	beq.n	8011390 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8011378:	687b      	ldr	r3, [r7, #4]
 801137a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801137e:	691b      	ldr	r3, [r3, #16]
 8011380:	687a      	ldr	r2, [r7, #4]
 8011382:	7c12      	ldrb	r2, [r2, #16]
 8011384:	f107 0108 	add.w	r1, r7, #8
 8011388:	4610      	mov	r0, r2
 801138a:	4798      	blx	r3
 801138c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801138e:	e043      	b.n	8011418 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8011390:	6839      	ldr	r1, [r7, #0]
 8011392:	6878      	ldr	r0, [r7, #4]
 8011394:	f000 fa7d 	bl	8011892 <USBD_CtlError>
            err++;
 8011398:	7afb      	ldrb	r3, [r7, #11]
 801139a:	3301      	adds	r3, #1
 801139c:	72fb      	strb	r3, [r7, #11]
          break;
 801139e:	e03b      	b.n	8011418 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80113a0:	687b      	ldr	r3, [r7, #4]
 80113a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80113a6:	695b      	ldr	r3, [r3, #20]
 80113a8:	2b00      	cmp	r3, #0
 80113aa:	d00b      	beq.n	80113c4 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80113ac:	687b      	ldr	r3, [r7, #4]
 80113ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80113b2:	695b      	ldr	r3, [r3, #20]
 80113b4:	687a      	ldr	r2, [r7, #4]
 80113b6:	7c12      	ldrb	r2, [r2, #16]
 80113b8:	f107 0108 	add.w	r1, r7, #8
 80113bc:	4610      	mov	r0, r2
 80113be:	4798      	blx	r3
 80113c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80113c2:	e029      	b.n	8011418 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80113c4:	6839      	ldr	r1, [r7, #0]
 80113c6:	6878      	ldr	r0, [r7, #4]
 80113c8:	f000 fa63 	bl	8011892 <USBD_CtlError>
            err++;
 80113cc:	7afb      	ldrb	r3, [r7, #11]
 80113ce:	3301      	adds	r3, #1
 80113d0:	72fb      	strb	r3, [r7, #11]
          break;
 80113d2:	e021      	b.n	8011418 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80113d4:	687b      	ldr	r3, [r7, #4]
 80113d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80113da:	699b      	ldr	r3, [r3, #24]
 80113dc:	2b00      	cmp	r3, #0
 80113de:	d00b      	beq.n	80113f8 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80113e0:	687b      	ldr	r3, [r7, #4]
 80113e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80113e6:	699b      	ldr	r3, [r3, #24]
 80113e8:	687a      	ldr	r2, [r7, #4]
 80113ea:	7c12      	ldrb	r2, [r2, #16]
 80113ec:	f107 0108 	add.w	r1, r7, #8
 80113f0:	4610      	mov	r0, r2
 80113f2:	4798      	blx	r3
 80113f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80113f6:	e00f      	b.n	8011418 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80113f8:	6839      	ldr	r1, [r7, #0]
 80113fa:	6878      	ldr	r0, [r7, #4]
 80113fc:	f000 fa49 	bl	8011892 <USBD_CtlError>
            err++;
 8011400:	7afb      	ldrb	r3, [r7, #11]
 8011402:	3301      	adds	r3, #1
 8011404:	72fb      	strb	r3, [r7, #11]
          break;
 8011406:	e007      	b.n	8011418 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8011408:	6839      	ldr	r1, [r7, #0]
 801140a:	6878      	ldr	r0, [r7, #4]
 801140c:	f000 fa41 	bl	8011892 <USBD_CtlError>
          err++;
 8011410:	7afb      	ldrb	r3, [r7, #11]
 8011412:	3301      	adds	r3, #1
 8011414:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8011416:	bf00      	nop
      }
      break;
 8011418:	e037      	b.n	801148a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801141a:	687b      	ldr	r3, [r7, #4]
 801141c:	7c1b      	ldrb	r3, [r3, #16]
 801141e:	2b00      	cmp	r3, #0
 8011420:	d109      	bne.n	8011436 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8011422:	687b      	ldr	r3, [r7, #4]
 8011424:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011428:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801142a:	f107 0208 	add.w	r2, r7, #8
 801142e:	4610      	mov	r0, r2
 8011430:	4798      	blx	r3
 8011432:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8011434:	e029      	b.n	801148a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8011436:	6839      	ldr	r1, [r7, #0]
 8011438:	6878      	ldr	r0, [r7, #4]
 801143a:	f000 fa2a 	bl	8011892 <USBD_CtlError>
        err++;
 801143e:	7afb      	ldrb	r3, [r7, #11]
 8011440:	3301      	adds	r3, #1
 8011442:	72fb      	strb	r3, [r7, #11]
      break;
 8011444:	e021      	b.n	801148a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011446:	687b      	ldr	r3, [r7, #4]
 8011448:	7c1b      	ldrb	r3, [r3, #16]
 801144a:	2b00      	cmp	r3, #0
 801144c:	d10d      	bne.n	801146a <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 801144e:	687b      	ldr	r3, [r7, #4]
 8011450:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011454:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011456:	f107 0208 	add.w	r2, r7, #8
 801145a:	4610      	mov	r0, r2
 801145c:	4798      	blx	r3
 801145e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8011460:	68fb      	ldr	r3, [r7, #12]
 8011462:	3301      	adds	r3, #1
 8011464:	2207      	movs	r2, #7
 8011466:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8011468:	e00f      	b.n	801148a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 801146a:	6839      	ldr	r1, [r7, #0]
 801146c:	6878      	ldr	r0, [r7, #4]
 801146e:	f000 fa10 	bl	8011892 <USBD_CtlError>
        err++;
 8011472:	7afb      	ldrb	r3, [r7, #11]
 8011474:	3301      	adds	r3, #1
 8011476:	72fb      	strb	r3, [r7, #11]
      break;
 8011478:	e007      	b.n	801148a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 801147a:	6839      	ldr	r1, [r7, #0]
 801147c:	6878      	ldr	r0, [r7, #4]
 801147e:	f000 fa08 	bl	8011892 <USBD_CtlError>
      err++;
 8011482:	7afb      	ldrb	r3, [r7, #11]
 8011484:	3301      	adds	r3, #1
 8011486:	72fb      	strb	r3, [r7, #11]
      break;
 8011488:	bf00      	nop
  }

  if (err != 0U)
 801148a:	7afb      	ldrb	r3, [r7, #11]
 801148c:	2b00      	cmp	r3, #0
 801148e:	d11e      	bne.n	80114ce <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8011490:	683b      	ldr	r3, [r7, #0]
 8011492:	88db      	ldrh	r3, [r3, #6]
 8011494:	2b00      	cmp	r3, #0
 8011496:	d016      	beq.n	80114c6 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8011498:	893b      	ldrh	r3, [r7, #8]
 801149a:	2b00      	cmp	r3, #0
 801149c:	d00e      	beq.n	80114bc <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 801149e:	683b      	ldr	r3, [r7, #0]
 80114a0:	88da      	ldrh	r2, [r3, #6]
 80114a2:	893b      	ldrh	r3, [r7, #8]
 80114a4:	4293      	cmp	r3, r2
 80114a6:	bf28      	it	cs
 80114a8:	4613      	movcs	r3, r2
 80114aa:	b29b      	uxth	r3, r3
 80114ac:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80114ae:	893b      	ldrh	r3, [r7, #8]
 80114b0:	461a      	mov	r2, r3
 80114b2:	68f9      	ldr	r1, [r7, #12]
 80114b4:	6878      	ldr	r0, [r7, #4]
 80114b6:	f000 fa69 	bl	801198c <USBD_CtlSendData>
 80114ba:	e009      	b.n	80114d0 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80114bc:	6839      	ldr	r1, [r7, #0]
 80114be:	6878      	ldr	r0, [r7, #4]
 80114c0:	f000 f9e7 	bl	8011892 <USBD_CtlError>
 80114c4:	e004      	b.n	80114d0 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80114c6:	6878      	ldr	r0, [r7, #4]
 80114c8:	f000 faba 	bl	8011a40 <USBD_CtlSendStatus>
 80114cc:	e000      	b.n	80114d0 <USBD_GetDescriptor+0x320>
    return;
 80114ce:	bf00      	nop
  }
}
 80114d0:	3710      	adds	r7, #16
 80114d2:	46bd      	mov	sp, r7
 80114d4:	bd80      	pop	{r7, pc}
 80114d6:	bf00      	nop

080114d8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80114d8:	b580      	push	{r7, lr}
 80114da:	b084      	sub	sp, #16
 80114dc:	af00      	add	r7, sp, #0
 80114de:	6078      	str	r0, [r7, #4]
 80114e0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80114e2:	683b      	ldr	r3, [r7, #0]
 80114e4:	889b      	ldrh	r3, [r3, #4]
 80114e6:	2b00      	cmp	r3, #0
 80114e8:	d131      	bne.n	801154e <USBD_SetAddress+0x76>
 80114ea:	683b      	ldr	r3, [r7, #0]
 80114ec:	88db      	ldrh	r3, [r3, #6]
 80114ee:	2b00      	cmp	r3, #0
 80114f0:	d12d      	bne.n	801154e <USBD_SetAddress+0x76>
 80114f2:	683b      	ldr	r3, [r7, #0]
 80114f4:	885b      	ldrh	r3, [r3, #2]
 80114f6:	2b7f      	cmp	r3, #127	@ 0x7f
 80114f8:	d829      	bhi.n	801154e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80114fa:	683b      	ldr	r3, [r7, #0]
 80114fc:	885b      	ldrh	r3, [r3, #2]
 80114fe:	b2db      	uxtb	r3, r3
 8011500:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011504:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011506:	687b      	ldr	r3, [r7, #4]
 8011508:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801150c:	b2db      	uxtb	r3, r3
 801150e:	2b03      	cmp	r3, #3
 8011510:	d104      	bne.n	801151c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8011512:	6839      	ldr	r1, [r7, #0]
 8011514:	6878      	ldr	r0, [r7, #4]
 8011516:	f000 f9bc 	bl	8011892 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801151a:	e01d      	b.n	8011558 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 801151c:	687b      	ldr	r3, [r7, #4]
 801151e:	7bfa      	ldrb	r2, [r7, #15]
 8011520:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8011524:	7bfb      	ldrb	r3, [r7, #15]
 8011526:	4619      	mov	r1, r3
 8011528:	6878      	ldr	r0, [r7, #4]
 801152a:	f000 ff47 	bl	80123bc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 801152e:	6878      	ldr	r0, [r7, #4]
 8011530:	f000 fa86 	bl	8011a40 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8011534:	7bfb      	ldrb	r3, [r7, #15]
 8011536:	2b00      	cmp	r3, #0
 8011538:	d004      	beq.n	8011544 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801153a:	687b      	ldr	r3, [r7, #4]
 801153c:	2202      	movs	r2, #2
 801153e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011542:	e009      	b.n	8011558 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8011544:	687b      	ldr	r3, [r7, #4]
 8011546:	2201      	movs	r2, #1
 8011548:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801154c:	e004      	b.n	8011558 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 801154e:	6839      	ldr	r1, [r7, #0]
 8011550:	6878      	ldr	r0, [r7, #4]
 8011552:	f000 f99e 	bl	8011892 <USBD_CtlError>
  }
}
 8011556:	bf00      	nop
 8011558:	bf00      	nop
 801155a:	3710      	adds	r7, #16
 801155c:	46bd      	mov	sp, r7
 801155e:	bd80      	pop	{r7, pc}

08011560 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011560:	b580      	push	{r7, lr}
 8011562:	b084      	sub	sp, #16
 8011564:	af00      	add	r7, sp, #0
 8011566:	6078      	str	r0, [r7, #4]
 8011568:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801156a:	2300      	movs	r3, #0
 801156c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 801156e:	683b      	ldr	r3, [r7, #0]
 8011570:	885b      	ldrh	r3, [r3, #2]
 8011572:	b2da      	uxtb	r2, r3
 8011574:	4b4e      	ldr	r3, [pc, #312]	@ (80116b0 <USBD_SetConfig+0x150>)
 8011576:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8011578:	4b4d      	ldr	r3, [pc, #308]	@ (80116b0 <USBD_SetConfig+0x150>)
 801157a:	781b      	ldrb	r3, [r3, #0]
 801157c:	2b01      	cmp	r3, #1
 801157e:	d905      	bls.n	801158c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8011580:	6839      	ldr	r1, [r7, #0]
 8011582:	6878      	ldr	r0, [r7, #4]
 8011584:	f000 f985 	bl	8011892 <USBD_CtlError>
    return USBD_FAIL;
 8011588:	2303      	movs	r3, #3
 801158a:	e08c      	b.n	80116a6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 801158c:	687b      	ldr	r3, [r7, #4]
 801158e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011592:	b2db      	uxtb	r3, r3
 8011594:	2b02      	cmp	r3, #2
 8011596:	d002      	beq.n	801159e <USBD_SetConfig+0x3e>
 8011598:	2b03      	cmp	r3, #3
 801159a:	d029      	beq.n	80115f0 <USBD_SetConfig+0x90>
 801159c:	e075      	b.n	801168a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 801159e:	4b44      	ldr	r3, [pc, #272]	@ (80116b0 <USBD_SetConfig+0x150>)
 80115a0:	781b      	ldrb	r3, [r3, #0]
 80115a2:	2b00      	cmp	r3, #0
 80115a4:	d020      	beq.n	80115e8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80115a6:	4b42      	ldr	r3, [pc, #264]	@ (80116b0 <USBD_SetConfig+0x150>)
 80115a8:	781b      	ldrb	r3, [r3, #0]
 80115aa:	461a      	mov	r2, r3
 80115ac:	687b      	ldr	r3, [r7, #4]
 80115ae:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80115b0:	4b3f      	ldr	r3, [pc, #252]	@ (80116b0 <USBD_SetConfig+0x150>)
 80115b2:	781b      	ldrb	r3, [r3, #0]
 80115b4:	4619      	mov	r1, r3
 80115b6:	6878      	ldr	r0, [r7, #4]
 80115b8:	f7fe ffb9 	bl	801052e <USBD_SetClassConfig>
 80115bc:	4603      	mov	r3, r0
 80115be:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80115c0:	7bfb      	ldrb	r3, [r7, #15]
 80115c2:	2b00      	cmp	r3, #0
 80115c4:	d008      	beq.n	80115d8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80115c6:	6839      	ldr	r1, [r7, #0]
 80115c8:	6878      	ldr	r0, [r7, #4]
 80115ca:	f000 f962 	bl	8011892 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80115ce:	687b      	ldr	r3, [r7, #4]
 80115d0:	2202      	movs	r2, #2
 80115d2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80115d6:	e065      	b.n	80116a4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80115d8:	6878      	ldr	r0, [r7, #4]
 80115da:	f000 fa31 	bl	8011a40 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80115de:	687b      	ldr	r3, [r7, #4]
 80115e0:	2203      	movs	r2, #3
 80115e2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80115e6:	e05d      	b.n	80116a4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80115e8:	6878      	ldr	r0, [r7, #4]
 80115ea:	f000 fa29 	bl	8011a40 <USBD_CtlSendStatus>
      break;
 80115ee:	e059      	b.n	80116a4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80115f0:	4b2f      	ldr	r3, [pc, #188]	@ (80116b0 <USBD_SetConfig+0x150>)
 80115f2:	781b      	ldrb	r3, [r3, #0]
 80115f4:	2b00      	cmp	r3, #0
 80115f6:	d112      	bne.n	801161e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80115f8:	687b      	ldr	r3, [r7, #4]
 80115fa:	2202      	movs	r2, #2
 80115fc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8011600:	4b2b      	ldr	r3, [pc, #172]	@ (80116b0 <USBD_SetConfig+0x150>)
 8011602:	781b      	ldrb	r3, [r3, #0]
 8011604:	461a      	mov	r2, r3
 8011606:	687b      	ldr	r3, [r7, #4]
 8011608:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 801160a:	4b29      	ldr	r3, [pc, #164]	@ (80116b0 <USBD_SetConfig+0x150>)
 801160c:	781b      	ldrb	r3, [r3, #0]
 801160e:	4619      	mov	r1, r3
 8011610:	6878      	ldr	r0, [r7, #4]
 8011612:	f7fe ffa8 	bl	8010566 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8011616:	6878      	ldr	r0, [r7, #4]
 8011618:	f000 fa12 	bl	8011a40 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 801161c:	e042      	b.n	80116a4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 801161e:	4b24      	ldr	r3, [pc, #144]	@ (80116b0 <USBD_SetConfig+0x150>)
 8011620:	781b      	ldrb	r3, [r3, #0]
 8011622:	461a      	mov	r2, r3
 8011624:	687b      	ldr	r3, [r7, #4]
 8011626:	685b      	ldr	r3, [r3, #4]
 8011628:	429a      	cmp	r2, r3
 801162a:	d02a      	beq.n	8011682 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801162c:	687b      	ldr	r3, [r7, #4]
 801162e:	685b      	ldr	r3, [r3, #4]
 8011630:	b2db      	uxtb	r3, r3
 8011632:	4619      	mov	r1, r3
 8011634:	6878      	ldr	r0, [r7, #4]
 8011636:	f7fe ff96 	bl	8010566 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 801163a:	4b1d      	ldr	r3, [pc, #116]	@ (80116b0 <USBD_SetConfig+0x150>)
 801163c:	781b      	ldrb	r3, [r3, #0]
 801163e:	461a      	mov	r2, r3
 8011640:	687b      	ldr	r3, [r7, #4]
 8011642:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8011644:	4b1a      	ldr	r3, [pc, #104]	@ (80116b0 <USBD_SetConfig+0x150>)
 8011646:	781b      	ldrb	r3, [r3, #0]
 8011648:	4619      	mov	r1, r3
 801164a:	6878      	ldr	r0, [r7, #4]
 801164c:	f7fe ff6f 	bl	801052e <USBD_SetClassConfig>
 8011650:	4603      	mov	r3, r0
 8011652:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8011654:	7bfb      	ldrb	r3, [r7, #15]
 8011656:	2b00      	cmp	r3, #0
 8011658:	d00f      	beq.n	801167a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 801165a:	6839      	ldr	r1, [r7, #0]
 801165c:	6878      	ldr	r0, [r7, #4]
 801165e:	f000 f918 	bl	8011892 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8011662:	687b      	ldr	r3, [r7, #4]
 8011664:	685b      	ldr	r3, [r3, #4]
 8011666:	b2db      	uxtb	r3, r3
 8011668:	4619      	mov	r1, r3
 801166a:	6878      	ldr	r0, [r7, #4]
 801166c:	f7fe ff7b 	bl	8010566 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8011670:	687b      	ldr	r3, [r7, #4]
 8011672:	2202      	movs	r2, #2
 8011674:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8011678:	e014      	b.n	80116a4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 801167a:	6878      	ldr	r0, [r7, #4]
 801167c:	f000 f9e0 	bl	8011a40 <USBD_CtlSendStatus>
      break;
 8011680:	e010      	b.n	80116a4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8011682:	6878      	ldr	r0, [r7, #4]
 8011684:	f000 f9dc 	bl	8011a40 <USBD_CtlSendStatus>
      break;
 8011688:	e00c      	b.n	80116a4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 801168a:	6839      	ldr	r1, [r7, #0]
 801168c:	6878      	ldr	r0, [r7, #4]
 801168e:	f000 f900 	bl	8011892 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8011692:	4b07      	ldr	r3, [pc, #28]	@ (80116b0 <USBD_SetConfig+0x150>)
 8011694:	781b      	ldrb	r3, [r3, #0]
 8011696:	4619      	mov	r1, r3
 8011698:	6878      	ldr	r0, [r7, #4]
 801169a:	f7fe ff64 	bl	8010566 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 801169e:	2303      	movs	r3, #3
 80116a0:	73fb      	strb	r3, [r7, #15]
      break;
 80116a2:	bf00      	nop
  }

  return ret;
 80116a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80116a6:	4618      	mov	r0, r3
 80116a8:	3710      	adds	r7, #16
 80116aa:	46bd      	mov	sp, r7
 80116ac:	bd80      	pop	{r7, pc}
 80116ae:	bf00      	nop
 80116b0:	24000a78 	.word	0x24000a78

080116b4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80116b4:	b580      	push	{r7, lr}
 80116b6:	b082      	sub	sp, #8
 80116b8:	af00      	add	r7, sp, #0
 80116ba:	6078      	str	r0, [r7, #4]
 80116bc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80116be:	683b      	ldr	r3, [r7, #0]
 80116c0:	88db      	ldrh	r3, [r3, #6]
 80116c2:	2b01      	cmp	r3, #1
 80116c4:	d004      	beq.n	80116d0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80116c6:	6839      	ldr	r1, [r7, #0]
 80116c8:	6878      	ldr	r0, [r7, #4]
 80116ca:	f000 f8e2 	bl	8011892 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80116ce:	e023      	b.n	8011718 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80116d0:	687b      	ldr	r3, [r7, #4]
 80116d2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80116d6:	b2db      	uxtb	r3, r3
 80116d8:	2b02      	cmp	r3, #2
 80116da:	dc02      	bgt.n	80116e2 <USBD_GetConfig+0x2e>
 80116dc:	2b00      	cmp	r3, #0
 80116de:	dc03      	bgt.n	80116e8 <USBD_GetConfig+0x34>
 80116e0:	e015      	b.n	801170e <USBD_GetConfig+0x5a>
 80116e2:	2b03      	cmp	r3, #3
 80116e4:	d00b      	beq.n	80116fe <USBD_GetConfig+0x4a>
 80116e6:	e012      	b.n	801170e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80116e8:	687b      	ldr	r3, [r7, #4]
 80116ea:	2200      	movs	r2, #0
 80116ec:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80116ee:	687b      	ldr	r3, [r7, #4]
 80116f0:	3308      	adds	r3, #8
 80116f2:	2201      	movs	r2, #1
 80116f4:	4619      	mov	r1, r3
 80116f6:	6878      	ldr	r0, [r7, #4]
 80116f8:	f000 f948 	bl	801198c <USBD_CtlSendData>
        break;
 80116fc:	e00c      	b.n	8011718 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80116fe:	687b      	ldr	r3, [r7, #4]
 8011700:	3304      	adds	r3, #4
 8011702:	2201      	movs	r2, #1
 8011704:	4619      	mov	r1, r3
 8011706:	6878      	ldr	r0, [r7, #4]
 8011708:	f000 f940 	bl	801198c <USBD_CtlSendData>
        break;
 801170c:	e004      	b.n	8011718 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 801170e:	6839      	ldr	r1, [r7, #0]
 8011710:	6878      	ldr	r0, [r7, #4]
 8011712:	f000 f8be 	bl	8011892 <USBD_CtlError>
        break;
 8011716:	bf00      	nop
}
 8011718:	bf00      	nop
 801171a:	3708      	adds	r7, #8
 801171c:	46bd      	mov	sp, r7
 801171e:	bd80      	pop	{r7, pc}

08011720 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011720:	b580      	push	{r7, lr}
 8011722:	b082      	sub	sp, #8
 8011724:	af00      	add	r7, sp, #0
 8011726:	6078      	str	r0, [r7, #4]
 8011728:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801172a:	687b      	ldr	r3, [r7, #4]
 801172c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011730:	b2db      	uxtb	r3, r3
 8011732:	3b01      	subs	r3, #1
 8011734:	2b02      	cmp	r3, #2
 8011736:	d81e      	bhi.n	8011776 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8011738:	683b      	ldr	r3, [r7, #0]
 801173a:	88db      	ldrh	r3, [r3, #6]
 801173c:	2b02      	cmp	r3, #2
 801173e:	d004      	beq.n	801174a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8011740:	6839      	ldr	r1, [r7, #0]
 8011742:	6878      	ldr	r0, [r7, #4]
 8011744:	f000 f8a5 	bl	8011892 <USBD_CtlError>
        break;
 8011748:	e01a      	b.n	8011780 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 801174a:	687b      	ldr	r3, [r7, #4]
 801174c:	2201      	movs	r2, #1
 801174e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8011750:	687b      	ldr	r3, [r7, #4]
 8011752:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8011756:	2b00      	cmp	r3, #0
 8011758:	d005      	beq.n	8011766 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 801175a:	687b      	ldr	r3, [r7, #4]
 801175c:	68db      	ldr	r3, [r3, #12]
 801175e:	f043 0202 	orr.w	r2, r3, #2
 8011762:	687b      	ldr	r3, [r7, #4]
 8011764:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8011766:	687b      	ldr	r3, [r7, #4]
 8011768:	330c      	adds	r3, #12
 801176a:	2202      	movs	r2, #2
 801176c:	4619      	mov	r1, r3
 801176e:	6878      	ldr	r0, [r7, #4]
 8011770:	f000 f90c 	bl	801198c <USBD_CtlSendData>
      break;
 8011774:	e004      	b.n	8011780 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8011776:	6839      	ldr	r1, [r7, #0]
 8011778:	6878      	ldr	r0, [r7, #4]
 801177a:	f000 f88a 	bl	8011892 <USBD_CtlError>
      break;
 801177e:	bf00      	nop
  }
}
 8011780:	bf00      	nop
 8011782:	3708      	adds	r7, #8
 8011784:	46bd      	mov	sp, r7
 8011786:	bd80      	pop	{r7, pc}

08011788 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011788:	b580      	push	{r7, lr}
 801178a:	b082      	sub	sp, #8
 801178c:	af00      	add	r7, sp, #0
 801178e:	6078      	str	r0, [r7, #4]
 8011790:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8011792:	683b      	ldr	r3, [r7, #0]
 8011794:	885b      	ldrh	r3, [r3, #2]
 8011796:	2b01      	cmp	r3, #1
 8011798:	d107      	bne.n	80117aa <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 801179a:	687b      	ldr	r3, [r7, #4]
 801179c:	2201      	movs	r2, #1
 801179e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80117a2:	6878      	ldr	r0, [r7, #4]
 80117a4:	f000 f94c 	bl	8011a40 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80117a8:	e013      	b.n	80117d2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80117aa:	683b      	ldr	r3, [r7, #0]
 80117ac:	885b      	ldrh	r3, [r3, #2]
 80117ae:	2b02      	cmp	r3, #2
 80117b0:	d10b      	bne.n	80117ca <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80117b2:	683b      	ldr	r3, [r7, #0]
 80117b4:	889b      	ldrh	r3, [r3, #4]
 80117b6:	0a1b      	lsrs	r3, r3, #8
 80117b8:	b29b      	uxth	r3, r3
 80117ba:	b2da      	uxtb	r2, r3
 80117bc:	687b      	ldr	r3, [r7, #4]
 80117be:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80117c2:	6878      	ldr	r0, [r7, #4]
 80117c4:	f000 f93c 	bl	8011a40 <USBD_CtlSendStatus>
}
 80117c8:	e003      	b.n	80117d2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80117ca:	6839      	ldr	r1, [r7, #0]
 80117cc:	6878      	ldr	r0, [r7, #4]
 80117ce:	f000 f860 	bl	8011892 <USBD_CtlError>
}
 80117d2:	bf00      	nop
 80117d4:	3708      	adds	r7, #8
 80117d6:	46bd      	mov	sp, r7
 80117d8:	bd80      	pop	{r7, pc}

080117da <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80117da:	b580      	push	{r7, lr}
 80117dc:	b082      	sub	sp, #8
 80117de:	af00      	add	r7, sp, #0
 80117e0:	6078      	str	r0, [r7, #4]
 80117e2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80117e4:	687b      	ldr	r3, [r7, #4]
 80117e6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80117ea:	b2db      	uxtb	r3, r3
 80117ec:	3b01      	subs	r3, #1
 80117ee:	2b02      	cmp	r3, #2
 80117f0:	d80b      	bhi.n	801180a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80117f2:	683b      	ldr	r3, [r7, #0]
 80117f4:	885b      	ldrh	r3, [r3, #2]
 80117f6:	2b01      	cmp	r3, #1
 80117f8:	d10c      	bne.n	8011814 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80117fa:	687b      	ldr	r3, [r7, #4]
 80117fc:	2200      	movs	r2, #0
 80117fe:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8011802:	6878      	ldr	r0, [r7, #4]
 8011804:	f000 f91c 	bl	8011a40 <USBD_CtlSendStatus>
      }
      break;
 8011808:	e004      	b.n	8011814 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 801180a:	6839      	ldr	r1, [r7, #0]
 801180c:	6878      	ldr	r0, [r7, #4]
 801180e:	f000 f840 	bl	8011892 <USBD_CtlError>
      break;
 8011812:	e000      	b.n	8011816 <USBD_ClrFeature+0x3c>
      break;
 8011814:	bf00      	nop
  }
}
 8011816:	bf00      	nop
 8011818:	3708      	adds	r7, #8
 801181a:	46bd      	mov	sp, r7
 801181c:	bd80      	pop	{r7, pc}

0801181e <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 801181e:	b580      	push	{r7, lr}
 8011820:	b084      	sub	sp, #16
 8011822:	af00      	add	r7, sp, #0
 8011824:	6078      	str	r0, [r7, #4]
 8011826:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8011828:	683b      	ldr	r3, [r7, #0]
 801182a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 801182c:	68fb      	ldr	r3, [r7, #12]
 801182e:	781a      	ldrb	r2, [r3, #0]
 8011830:	687b      	ldr	r3, [r7, #4]
 8011832:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8011834:	68fb      	ldr	r3, [r7, #12]
 8011836:	3301      	adds	r3, #1
 8011838:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 801183a:	68fb      	ldr	r3, [r7, #12]
 801183c:	781a      	ldrb	r2, [r3, #0]
 801183e:	687b      	ldr	r3, [r7, #4]
 8011840:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8011842:	68fb      	ldr	r3, [r7, #12]
 8011844:	3301      	adds	r3, #1
 8011846:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8011848:	68f8      	ldr	r0, [r7, #12]
 801184a:	f7ff fa16 	bl	8010c7a <SWAPBYTE>
 801184e:	4603      	mov	r3, r0
 8011850:	461a      	mov	r2, r3
 8011852:	687b      	ldr	r3, [r7, #4]
 8011854:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8011856:	68fb      	ldr	r3, [r7, #12]
 8011858:	3301      	adds	r3, #1
 801185a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801185c:	68fb      	ldr	r3, [r7, #12]
 801185e:	3301      	adds	r3, #1
 8011860:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8011862:	68f8      	ldr	r0, [r7, #12]
 8011864:	f7ff fa09 	bl	8010c7a <SWAPBYTE>
 8011868:	4603      	mov	r3, r0
 801186a:	461a      	mov	r2, r3
 801186c:	687b      	ldr	r3, [r7, #4]
 801186e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8011870:	68fb      	ldr	r3, [r7, #12]
 8011872:	3301      	adds	r3, #1
 8011874:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8011876:	68fb      	ldr	r3, [r7, #12]
 8011878:	3301      	adds	r3, #1
 801187a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 801187c:	68f8      	ldr	r0, [r7, #12]
 801187e:	f7ff f9fc 	bl	8010c7a <SWAPBYTE>
 8011882:	4603      	mov	r3, r0
 8011884:	461a      	mov	r2, r3
 8011886:	687b      	ldr	r3, [r7, #4]
 8011888:	80da      	strh	r2, [r3, #6]
}
 801188a:	bf00      	nop
 801188c:	3710      	adds	r7, #16
 801188e:	46bd      	mov	sp, r7
 8011890:	bd80      	pop	{r7, pc}

08011892 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011892:	b580      	push	{r7, lr}
 8011894:	b082      	sub	sp, #8
 8011896:	af00      	add	r7, sp, #0
 8011898:	6078      	str	r0, [r7, #4]
 801189a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 801189c:	2180      	movs	r1, #128	@ 0x80
 801189e:	6878      	ldr	r0, [r7, #4]
 80118a0:	f000 fd22 	bl	80122e8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80118a4:	2100      	movs	r1, #0
 80118a6:	6878      	ldr	r0, [r7, #4]
 80118a8:	f000 fd1e 	bl	80122e8 <USBD_LL_StallEP>
}
 80118ac:	bf00      	nop
 80118ae:	3708      	adds	r7, #8
 80118b0:	46bd      	mov	sp, r7
 80118b2:	bd80      	pop	{r7, pc}

080118b4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80118b4:	b580      	push	{r7, lr}
 80118b6:	b086      	sub	sp, #24
 80118b8:	af00      	add	r7, sp, #0
 80118ba:	60f8      	str	r0, [r7, #12]
 80118bc:	60b9      	str	r1, [r7, #8]
 80118be:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80118c0:	2300      	movs	r3, #0
 80118c2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80118c4:	68fb      	ldr	r3, [r7, #12]
 80118c6:	2b00      	cmp	r3, #0
 80118c8:	d042      	beq.n	8011950 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 80118ca:	68fb      	ldr	r3, [r7, #12]
 80118cc:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 80118ce:	6938      	ldr	r0, [r7, #16]
 80118d0:	f000 f842 	bl	8011958 <USBD_GetLen>
 80118d4:	4603      	mov	r3, r0
 80118d6:	3301      	adds	r3, #1
 80118d8:	005b      	lsls	r3, r3, #1
 80118da:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80118de:	d808      	bhi.n	80118f2 <USBD_GetString+0x3e>
 80118e0:	6938      	ldr	r0, [r7, #16]
 80118e2:	f000 f839 	bl	8011958 <USBD_GetLen>
 80118e6:	4603      	mov	r3, r0
 80118e8:	3301      	adds	r3, #1
 80118ea:	b29b      	uxth	r3, r3
 80118ec:	005b      	lsls	r3, r3, #1
 80118ee:	b29a      	uxth	r2, r3
 80118f0:	e001      	b.n	80118f6 <USBD_GetString+0x42>
 80118f2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80118f6:	687b      	ldr	r3, [r7, #4]
 80118f8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80118fa:	7dfb      	ldrb	r3, [r7, #23]
 80118fc:	68ba      	ldr	r2, [r7, #8]
 80118fe:	4413      	add	r3, r2
 8011900:	687a      	ldr	r2, [r7, #4]
 8011902:	7812      	ldrb	r2, [r2, #0]
 8011904:	701a      	strb	r2, [r3, #0]
  idx++;
 8011906:	7dfb      	ldrb	r3, [r7, #23]
 8011908:	3301      	adds	r3, #1
 801190a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 801190c:	7dfb      	ldrb	r3, [r7, #23]
 801190e:	68ba      	ldr	r2, [r7, #8]
 8011910:	4413      	add	r3, r2
 8011912:	2203      	movs	r2, #3
 8011914:	701a      	strb	r2, [r3, #0]
  idx++;
 8011916:	7dfb      	ldrb	r3, [r7, #23]
 8011918:	3301      	adds	r3, #1
 801191a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 801191c:	e013      	b.n	8011946 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 801191e:	7dfb      	ldrb	r3, [r7, #23]
 8011920:	68ba      	ldr	r2, [r7, #8]
 8011922:	4413      	add	r3, r2
 8011924:	693a      	ldr	r2, [r7, #16]
 8011926:	7812      	ldrb	r2, [r2, #0]
 8011928:	701a      	strb	r2, [r3, #0]
    pdesc++;
 801192a:	693b      	ldr	r3, [r7, #16]
 801192c:	3301      	adds	r3, #1
 801192e:	613b      	str	r3, [r7, #16]
    idx++;
 8011930:	7dfb      	ldrb	r3, [r7, #23]
 8011932:	3301      	adds	r3, #1
 8011934:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8011936:	7dfb      	ldrb	r3, [r7, #23]
 8011938:	68ba      	ldr	r2, [r7, #8]
 801193a:	4413      	add	r3, r2
 801193c:	2200      	movs	r2, #0
 801193e:	701a      	strb	r2, [r3, #0]
    idx++;
 8011940:	7dfb      	ldrb	r3, [r7, #23]
 8011942:	3301      	adds	r3, #1
 8011944:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8011946:	693b      	ldr	r3, [r7, #16]
 8011948:	781b      	ldrb	r3, [r3, #0]
 801194a:	2b00      	cmp	r3, #0
 801194c:	d1e7      	bne.n	801191e <USBD_GetString+0x6a>
 801194e:	e000      	b.n	8011952 <USBD_GetString+0x9e>
    return;
 8011950:	bf00      	nop
  }
}
 8011952:	3718      	adds	r7, #24
 8011954:	46bd      	mov	sp, r7
 8011956:	bd80      	pop	{r7, pc}

08011958 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8011958:	b480      	push	{r7}
 801195a:	b085      	sub	sp, #20
 801195c:	af00      	add	r7, sp, #0
 801195e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8011960:	2300      	movs	r3, #0
 8011962:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8011964:	687b      	ldr	r3, [r7, #4]
 8011966:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8011968:	e005      	b.n	8011976 <USBD_GetLen+0x1e>
  {
    len++;
 801196a:	7bfb      	ldrb	r3, [r7, #15]
 801196c:	3301      	adds	r3, #1
 801196e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8011970:	68bb      	ldr	r3, [r7, #8]
 8011972:	3301      	adds	r3, #1
 8011974:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8011976:	68bb      	ldr	r3, [r7, #8]
 8011978:	781b      	ldrb	r3, [r3, #0]
 801197a:	2b00      	cmp	r3, #0
 801197c:	d1f5      	bne.n	801196a <USBD_GetLen+0x12>
  }

  return len;
 801197e:	7bfb      	ldrb	r3, [r7, #15]
}
 8011980:	4618      	mov	r0, r3
 8011982:	3714      	adds	r7, #20
 8011984:	46bd      	mov	sp, r7
 8011986:	f85d 7b04 	ldr.w	r7, [sp], #4
 801198a:	4770      	bx	lr

0801198c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 801198c:	b580      	push	{r7, lr}
 801198e:	b084      	sub	sp, #16
 8011990:	af00      	add	r7, sp, #0
 8011992:	60f8      	str	r0, [r7, #12]
 8011994:	60b9      	str	r1, [r7, #8]
 8011996:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8011998:	68fb      	ldr	r3, [r7, #12]
 801199a:	2202      	movs	r2, #2
 801199c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80119a0:	68fb      	ldr	r3, [r7, #12]
 80119a2:	687a      	ldr	r2, [r7, #4]
 80119a4:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80119a6:	68fb      	ldr	r3, [r7, #12]
 80119a8:	687a      	ldr	r2, [r7, #4]
 80119aa:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80119ac:	687b      	ldr	r3, [r7, #4]
 80119ae:	68ba      	ldr	r2, [r7, #8]
 80119b0:	2100      	movs	r1, #0
 80119b2:	68f8      	ldr	r0, [r7, #12]
 80119b4:	f000 fd21 	bl	80123fa <USBD_LL_Transmit>

  return USBD_OK;
 80119b8:	2300      	movs	r3, #0
}
 80119ba:	4618      	mov	r0, r3
 80119bc:	3710      	adds	r7, #16
 80119be:	46bd      	mov	sp, r7
 80119c0:	bd80      	pop	{r7, pc}

080119c2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80119c2:	b580      	push	{r7, lr}
 80119c4:	b084      	sub	sp, #16
 80119c6:	af00      	add	r7, sp, #0
 80119c8:	60f8      	str	r0, [r7, #12]
 80119ca:	60b9      	str	r1, [r7, #8]
 80119cc:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80119ce:	687b      	ldr	r3, [r7, #4]
 80119d0:	68ba      	ldr	r2, [r7, #8]
 80119d2:	2100      	movs	r1, #0
 80119d4:	68f8      	ldr	r0, [r7, #12]
 80119d6:	f000 fd10 	bl	80123fa <USBD_LL_Transmit>

  return USBD_OK;
 80119da:	2300      	movs	r3, #0
}
 80119dc:	4618      	mov	r0, r3
 80119de:	3710      	adds	r7, #16
 80119e0:	46bd      	mov	sp, r7
 80119e2:	bd80      	pop	{r7, pc}

080119e4 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80119e4:	b580      	push	{r7, lr}
 80119e6:	b084      	sub	sp, #16
 80119e8:	af00      	add	r7, sp, #0
 80119ea:	60f8      	str	r0, [r7, #12]
 80119ec:	60b9      	str	r1, [r7, #8]
 80119ee:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80119f0:	68fb      	ldr	r3, [r7, #12]
 80119f2:	2203      	movs	r2, #3
 80119f4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 80119f8:	68fb      	ldr	r3, [r7, #12]
 80119fa:	687a      	ldr	r2, [r7, #4]
 80119fc:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8011a00:	68fb      	ldr	r3, [r7, #12]
 8011a02:	687a      	ldr	r2, [r7, #4]
 8011a04:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8011a08:	687b      	ldr	r3, [r7, #4]
 8011a0a:	68ba      	ldr	r2, [r7, #8]
 8011a0c:	2100      	movs	r1, #0
 8011a0e:	68f8      	ldr	r0, [r7, #12]
 8011a10:	f000 fd14 	bl	801243c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8011a14:	2300      	movs	r3, #0
}
 8011a16:	4618      	mov	r0, r3
 8011a18:	3710      	adds	r7, #16
 8011a1a:	46bd      	mov	sp, r7
 8011a1c:	bd80      	pop	{r7, pc}

08011a1e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8011a1e:	b580      	push	{r7, lr}
 8011a20:	b084      	sub	sp, #16
 8011a22:	af00      	add	r7, sp, #0
 8011a24:	60f8      	str	r0, [r7, #12]
 8011a26:	60b9      	str	r1, [r7, #8]
 8011a28:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8011a2a:	687b      	ldr	r3, [r7, #4]
 8011a2c:	68ba      	ldr	r2, [r7, #8]
 8011a2e:	2100      	movs	r1, #0
 8011a30:	68f8      	ldr	r0, [r7, #12]
 8011a32:	f000 fd03 	bl	801243c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8011a36:	2300      	movs	r3, #0
}
 8011a38:	4618      	mov	r0, r3
 8011a3a:	3710      	adds	r7, #16
 8011a3c:	46bd      	mov	sp, r7
 8011a3e:	bd80      	pop	{r7, pc}

08011a40 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8011a40:	b580      	push	{r7, lr}
 8011a42:	b082      	sub	sp, #8
 8011a44:	af00      	add	r7, sp, #0
 8011a46:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8011a48:	687b      	ldr	r3, [r7, #4]
 8011a4a:	2204      	movs	r2, #4
 8011a4c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8011a50:	2300      	movs	r3, #0
 8011a52:	2200      	movs	r2, #0
 8011a54:	2100      	movs	r1, #0
 8011a56:	6878      	ldr	r0, [r7, #4]
 8011a58:	f000 fccf 	bl	80123fa <USBD_LL_Transmit>

  return USBD_OK;
 8011a5c:	2300      	movs	r3, #0
}
 8011a5e:	4618      	mov	r0, r3
 8011a60:	3708      	adds	r7, #8
 8011a62:	46bd      	mov	sp, r7
 8011a64:	bd80      	pop	{r7, pc}

08011a66 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8011a66:	b580      	push	{r7, lr}
 8011a68:	b082      	sub	sp, #8
 8011a6a:	af00      	add	r7, sp, #0
 8011a6c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8011a6e:	687b      	ldr	r3, [r7, #4]
 8011a70:	2205      	movs	r2, #5
 8011a72:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8011a76:	2300      	movs	r3, #0
 8011a78:	2200      	movs	r2, #0
 8011a7a:	2100      	movs	r1, #0
 8011a7c:	6878      	ldr	r0, [r7, #4]
 8011a7e:	f000 fcdd 	bl	801243c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8011a82:	2300      	movs	r3, #0
}
 8011a84:	4618      	mov	r0, r3
 8011a86:	3708      	adds	r7, #8
 8011a88:	46bd      	mov	sp, r7
 8011a8a:	bd80      	pop	{r7, pc}

08011a8c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8011a8c:	b580      	push	{r7, lr}
 8011a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8011a90:	2200      	movs	r2, #0
 8011a92:	4913      	ldr	r1, [pc, #76]	@ (8011ae0 <MX_USB_DEVICE_Init+0x54>)
 8011a94:	4813      	ldr	r0, [pc, #76]	@ (8011ae4 <MX_USB_DEVICE_Init+0x58>)
 8011a96:	f7fe fccd 	bl	8010434 <USBD_Init>
 8011a9a:	4603      	mov	r3, r0
 8011a9c:	2b00      	cmp	r3, #0
 8011a9e:	d001      	beq.n	8011aa4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8011aa0:	f7ef fc47 	bl	8001332 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8011aa4:	4910      	ldr	r1, [pc, #64]	@ (8011ae8 <MX_USB_DEVICE_Init+0x5c>)
 8011aa6:	480f      	ldr	r0, [pc, #60]	@ (8011ae4 <MX_USB_DEVICE_Init+0x58>)
 8011aa8:	f7fe fcf4 	bl	8010494 <USBD_RegisterClass>
 8011aac:	4603      	mov	r3, r0
 8011aae:	2b00      	cmp	r3, #0
 8011ab0:	d001      	beq.n	8011ab6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8011ab2:	f7ef fc3e 	bl	8001332 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8011ab6:	490d      	ldr	r1, [pc, #52]	@ (8011aec <MX_USB_DEVICE_Init+0x60>)
 8011ab8:	480a      	ldr	r0, [pc, #40]	@ (8011ae4 <MX_USB_DEVICE_Init+0x58>)
 8011aba:	f7fe fbeb 	bl	8010294 <USBD_CDC_RegisterInterface>
 8011abe:	4603      	mov	r3, r0
 8011ac0:	2b00      	cmp	r3, #0
 8011ac2:	d001      	beq.n	8011ac8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8011ac4:	f7ef fc35 	bl	8001332 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8011ac8:	4806      	ldr	r0, [pc, #24]	@ (8011ae4 <MX_USB_DEVICE_Init+0x58>)
 8011aca:	f7fe fd19 	bl	8010500 <USBD_Start>
 8011ace:	4603      	mov	r3, r0
 8011ad0:	2b00      	cmp	r3, #0
 8011ad2:	d001      	beq.n	8011ad8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8011ad4:	f7ef fc2d 	bl	8001332 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 8011ad8:	f7f6 fb72 	bl	80081c0 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8011adc:	bf00      	nop
 8011ade:	bd80      	pop	{r7, pc}
 8011ae0:	240000cc 	.word	0x240000cc
 8011ae4:	24000a7c 	.word	0x24000a7c
 8011ae8:	24000038 	.word	0x24000038
 8011aec:	240000b8 	.word	0x240000b8

08011af0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8011af0:	b580      	push	{r7, lr}
 8011af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8011af4:	2200      	movs	r2, #0
 8011af6:	4905      	ldr	r1, [pc, #20]	@ (8011b0c <CDC_Init_FS+0x1c>)
 8011af8:	4805      	ldr	r0, [pc, #20]	@ (8011b10 <CDC_Init_FS+0x20>)
 8011afa:	f7fe fbe5 	bl	80102c8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8011afe:	4905      	ldr	r1, [pc, #20]	@ (8011b14 <CDC_Init_FS+0x24>)
 8011b00:	4803      	ldr	r0, [pc, #12]	@ (8011b10 <CDC_Init_FS+0x20>)
 8011b02:	f7fe fc03 	bl	801030c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8011b06:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8011b08:	4618      	mov	r0, r3
 8011b0a:	bd80      	pop	{r7, pc}
 8011b0c:	24001558 	.word	0x24001558
 8011b10:	24000a7c 	.word	0x24000a7c
 8011b14:	24000d58 	.word	0x24000d58

08011b18 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8011b18:	b480      	push	{r7}
 8011b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8011b1c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8011b1e:	4618      	mov	r0, r3
 8011b20:	46bd      	mov	sp, r7
 8011b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b26:	4770      	bx	lr

08011b28 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8011b28:	b480      	push	{r7}
 8011b2a:	b083      	sub	sp, #12
 8011b2c:	af00      	add	r7, sp, #0
 8011b2e:	4603      	mov	r3, r0
 8011b30:	6039      	str	r1, [r7, #0]
 8011b32:	71fb      	strb	r3, [r7, #7]
 8011b34:	4613      	mov	r3, r2
 8011b36:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8011b38:	79fb      	ldrb	r3, [r7, #7]
 8011b3a:	2b23      	cmp	r3, #35	@ 0x23
 8011b3c:	d84a      	bhi.n	8011bd4 <CDC_Control_FS+0xac>
 8011b3e:	a201      	add	r2, pc, #4	@ (adr r2, 8011b44 <CDC_Control_FS+0x1c>)
 8011b40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011b44:	08011bd5 	.word	0x08011bd5
 8011b48:	08011bd5 	.word	0x08011bd5
 8011b4c:	08011bd5 	.word	0x08011bd5
 8011b50:	08011bd5 	.word	0x08011bd5
 8011b54:	08011bd5 	.word	0x08011bd5
 8011b58:	08011bd5 	.word	0x08011bd5
 8011b5c:	08011bd5 	.word	0x08011bd5
 8011b60:	08011bd5 	.word	0x08011bd5
 8011b64:	08011bd5 	.word	0x08011bd5
 8011b68:	08011bd5 	.word	0x08011bd5
 8011b6c:	08011bd5 	.word	0x08011bd5
 8011b70:	08011bd5 	.word	0x08011bd5
 8011b74:	08011bd5 	.word	0x08011bd5
 8011b78:	08011bd5 	.word	0x08011bd5
 8011b7c:	08011bd5 	.word	0x08011bd5
 8011b80:	08011bd5 	.word	0x08011bd5
 8011b84:	08011bd5 	.word	0x08011bd5
 8011b88:	08011bd5 	.word	0x08011bd5
 8011b8c:	08011bd5 	.word	0x08011bd5
 8011b90:	08011bd5 	.word	0x08011bd5
 8011b94:	08011bd5 	.word	0x08011bd5
 8011b98:	08011bd5 	.word	0x08011bd5
 8011b9c:	08011bd5 	.word	0x08011bd5
 8011ba0:	08011bd5 	.word	0x08011bd5
 8011ba4:	08011bd5 	.word	0x08011bd5
 8011ba8:	08011bd5 	.word	0x08011bd5
 8011bac:	08011bd5 	.word	0x08011bd5
 8011bb0:	08011bd5 	.word	0x08011bd5
 8011bb4:	08011bd5 	.word	0x08011bd5
 8011bb8:	08011bd5 	.word	0x08011bd5
 8011bbc:	08011bd5 	.word	0x08011bd5
 8011bc0:	08011bd5 	.word	0x08011bd5
 8011bc4:	08011bd5 	.word	0x08011bd5
 8011bc8:	08011bd5 	.word	0x08011bd5
 8011bcc:	08011bd5 	.word	0x08011bd5
 8011bd0:	08011bd5 	.word	0x08011bd5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8011bd4:	bf00      	nop
  }

  return (USBD_OK);
 8011bd6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8011bd8:	4618      	mov	r0, r3
 8011bda:	370c      	adds	r7, #12
 8011bdc:	46bd      	mov	sp, r7
 8011bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011be2:	4770      	bx	lr

08011be4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8011be4:	b580      	push	{r7, lr}
 8011be6:	b082      	sub	sp, #8
 8011be8:	af00      	add	r7, sp, #0
 8011bea:	6078      	str	r0, [r7, #4]
 8011bec:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8011bee:	6879      	ldr	r1, [r7, #4]
 8011bf0:	4805      	ldr	r0, [pc, #20]	@ (8011c08 <CDC_Receive_FS+0x24>)
 8011bf2:	f7fe fb8b 	bl	801030c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8011bf6:	4804      	ldr	r0, [pc, #16]	@ (8011c08 <CDC_Receive_FS+0x24>)
 8011bf8:	f7fe fbe6 	bl	80103c8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8011bfc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8011bfe:	4618      	mov	r0, r3
 8011c00:	3708      	adds	r7, #8
 8011c02:	46bd      	mov	sp, r7
 8011c04:	bd80      	pop	{r7, pc}
 8011c06:	bf00      	nop
 8011c08:	24000a7c 	.word	0x24000a7c

08011c0c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8011c0c:	b580      	push	{r7, lr}
 8011c0e:	b084      	sub	sp, #16
 8011c10:	af00      	add	r7, sp, #0
 8011c12:	6078      	str	r0, [r7, #4]
 8011c14:	460b      	mov	r3, r1
 8011c16:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8011c18:	2300      	movs	r3, #0
 8011c1a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8011c1c:	4b0d      	ldr	r3, [pc, #52]	@ (8011c54 <CDC_Transmit_FS+0x48>)
 8011c1e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8011c22:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8011c24:	68bb      	ldr	r3, [r7, #8]
 8011c26:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8011c2a:	2b00      	cmp	r3, #0
 8011c2c:	d001      	beq.n	8011c32 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8011c2e:	2301      	movs	r3, #1
 8011c30:	e00b      	b.n	8011c4a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8011c32:	887b      	ldrh	r3, [r7, #2]
 8011c34:	461a      	mov	r2, r3
 8011c36:	6879      	ldr	r1, [r7, #4]
 8011c38:	4806      	ldr	r0, [pc, #24]	@ (8011c54 <CDC_Transmit_FS+0x48>)
 8011c3a:	f7fe fb45 	bl	80102c8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8011c3e:	4805      	ldr	r0, [pc, #20]	@ (8011c54 <CDC_Transmit_FS+0x48>)
 8011c40:	f7fe fb82 	bl	8010348 <USBD_CDC_TransmitPacket>
 8011c44:	4603      	mov	r3, r0
 8011c46:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8011c48:	7bfb      	ldrb	r3, [r7, #15]
}
 8011c4a:	4618      	mov	r0, r3
 8011c4c:	3710      	adds	r7, #16
 8011c4e:	46bd      	mov	sp, r7
 8011c50:	bd80      	pop	{r7, pc}
 8011c52:	bf00      	nop
 8011c54:	24000a7c 	.word	0x24000a7c

08011c58 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8011c58:	b480      	push	{r7}
 8011c5a:	b087      	sub	sp, #28
 8011c5c:	af00      	add	r7, sp, #0
 8011c5e:	60f8      	str	r0, [r7, #12]
 8011c60:	60b9      	str	r1, [r7, #8]
 8011c62:	4613      	mov	r3, r2
 8011c64:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8011c66:	2300      	movs	r3, #0
 8011c68:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8011c6a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011c6e:	4618      	mov	r0, r3
 8011c70:	371c      	adds	r7, #28
 8011c72:	46bd      	mov	sp, r7
 8011c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c78:	4770      	bx	lr
	...

08011c7c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011c7c:	b480      	push	{r7}
 8011c7e:	b083      	sub	sp, #12
 8011c80:	af00      	add	r7, sp, #0
 8011c82:	4603      	mov	r3, r0
 8011c84:	6039      	str	r1, [r7, #0]
 8011c86:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8011c88:	683b      	ldr	r3, [r7, #0]
 8011c8a:	2212      	movs	r2, #18
 8011c8c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8011c8e:	4b03      	ldr	r3, [pc, #12]	@ (8011c9c <USBD_FS_DeviceDescriptor+0x20>)
}
 8011c90:	4618      	mov	r0, r3
 8011c92:	370c      	adds	r7, #12
 8011c94:	46bd      	mov	sp, r7
 8011c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c9a:	4770      	bx	lr
 8011c9c:	240000ec 	.word	0x240000ec

08011ca0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011ca0:	b480      	push	{r7}
 8011ca2:	b083      	sub	sp, #12
 8011ca4:	af00      	add	r7, sp, #0
 8011ca6:	4603      	mov	r3, r0
 8011ca8:	6039      	str	r1, [r7, #0]
 8011caa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8011cac:	683b      	ldr	r3, [r7, #0]
 8011cae:	2204      	movs	r2, #4
 8011cb0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8011cb2:	4b03      	ldr	r3, [pc, #12]	@ (8011cc0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8011cb4:	4618      	mov	r0, r3
 8011cb6:	370c      	adds	r7, #12
 8011cb8:	46bd      	mov	sp, r7
 8011cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cbe:	4770      	bx	lr
 8011cc0:	24000100 	.word	0x24000100

08011cc4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011cc4:	b580      	push	{r7, lr}
 8011cc6:	b082      	sub	sp, #8
 8011cc8:	af00      	add	r7, sp, #0
 8011cca:	4603      	mov	r3, r0
 8011ccc:	6039      	str	r1, [r7, #0]
 8011cce:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8011cd0:	79fb      	ldrb	r3, [r7, #7]
 8011cd2:	2b00      	cmp	r3, #0
 8011cd4:	d105      	bne.n	8011ce2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8011cd6:	683a      	ldr	r2, [r7, #0]
 8011cd8:	4907      	ldr	r1, [pc, #28]	@ (8011cf8 <USBD_FS_ProductStrDescriptor+0x34>)
 8011cda:	4808      	ldr	r0, [pc, #32]	@ (8011cfc <USBD_FS_ProductStrDescriptor+0x38>)
 8011cdc:	f7ff fdea 	bl	80118b4 <USBD_GetString>
 8011ce0:	e004      	b.n	8011cec <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8011ce2:	683a      	ldr	r2, [r7, #0]
 8011ce4:	4904      	ldr	r1, [pc, #16]	@ (8011cf8 <USBD_FS_ProductStrDescriptor+0x34>)
 8011ce6:	4805      	ldr	r0, [pc, #20]	@ (8011cfc <USBD_FS_ProductStrDescriptor+0x38>)
 8011ce8:	f7ff fde4 	bl	80118b4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8011cec:	4b02      	ldr	r3, [pc, #8]	@ (8011cf8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8011cee:	4618      	mov	r0, r3
 8011cf0:	3708      	adds	r7, #8
 8011cf2:	46bd      	mov	sp, r7
 8011cf4:	bd80      	pop	{r7, pc}
 8011cf6:	bf00      	nop
 8011cf8:	24001d58 	.word	0x24001d58
 8011cfc:	08015148 	.word	0x08015148

08011d00 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011d00:	b580      	push	{r7, lr}
 8011d02:	b082      	sub	sp, #8
 8011d04:	af00      	add	r7, sp, #0
 8011d06:	4603      	mov	r3, r0
 8011d08:	6039      	str	r1, [r7, #0]
 8011d0a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8011d0c:	683a      	ldr	r2, [r7, #0]
 8011d0e:	4904      	ldr	r1, [pc, #16]	@ (8011d20 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8011d10:	4804      	ldr	r0, [pc, #16]	@ (8011d24 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8011d12:	f7ff fdcf 	bl	80118b4 <USBD_GetString>
  return USBD_StrDesc;
 8011d16:	4b02      	ldr	r3, [pc, #8]	@ (8011d20 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8011d18:	4618      	mov	r0, r3
 8011d1a:	3708      	adds	r7, #8
 8011d1c:	46bd      	mov	sp, r7
 8011d1e:	bd80      	pop	{r7, pc}
 8011d20:	24001d58 	.word	0x24001d58
 8011d24:	08015160 	.word	0x08015160

08011d28 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011d28:	b580      	push	{r7, lr}
 8011d2a:	b082      	sub	sp, #8
 8011d2c:	af00      	add	r7, sp, #0
 8011d2e:	4603      	mov	r3, r0
 8011d30:	6039      	str	r1, [r7, #0]
 8011d32:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8011d34:	683b      	ldr	r3, [r7, #0]
 8011d36:	221a      	movs	r2, #26
 8011d38:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8011d3a:	f000 f843 	bl	8011dc4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8011d3e:	4b02      	ldr	r3, [pc, #8]	@ (8011d48 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8011d40:	4618      	mov	r0, r3
 8011d42:	3708      	adds	r7, #8
 8011d44:	46bd      	mov	sp, r7
 8011d46:	bd80      	pop	{r7, pc}
 8011d48:	24000104 	.word	0x24000104

08011d4c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011d4c:	b580      	push	{r7, lr}
 8011d4e:	b082      	sub	sp, #8
 8011d50:	af00      	add	r7, sp, #0
 8011d52:	4603      	mov	r3, r0
 8011d54:	6039      	str	r1, [r7, #0]
 8011d56:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8011d58:	79fb      	ldrb	r3, [r7, #7]
 8011d5a:	2b00      	cmp	r3, #0
 8011d5c:	d105      	bne.n	8011d6a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8011d5e:	683a      	ldr	r2, [r7, #0]
 8011d60:	4907      	ldr	r1, [pc, #28]	@ (8011d80 <USBD_FS_ConfigStrDescriptor+0x34>)
 8011d62:	4808      	ldr	r0, [pc, #32]	@ (8011d84 <USBD_FS_ConfigStrDescriptor+0x38>)
 8011d64:	f7ff fda6 	bl	80118b4 <USBD_GetString>
 8011d68:	e004      	b.n	8011d74 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8011d6a:	683a      	ldr	r2, [r7, #0]
 8011d6c:	4904      	ldr	r1, [pc, #16]	@ (8011d80 <USBD_FS_ConfigStrDescriptor+0x34>)
 8011d6e:	4805      	ldr	r0, [pc, #20]	@ (8011d84 <USBD_FS_ConfigStrDescriptor+0x38>)
 8011d70:	f7ff fda0 	bl	80118b4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8011d74:	4b02      	ldr	r3, [pc, #8]	@ (8011d80 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8011d76:	4618      	mov	r0, r3
 8011d78:	3708      	adds	r7, #8
 8011d7a:	46bd      	mov	sp, r7
 8011d7c:	bd80      	pop	{r7, pc}
 8011d7e:	bf00      	nop
 8011d80:	24001d58 	.word	0x24001d58
 8011d84:	08015174 	.word	0x08015174

08011d88 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011d88:	b580      	push	{r7, lr}
 8011d8a:	b082      	sub	sp, #8
 8011d8c:	af00      	add	r7, sp, #0
 8011d8e:	4603      	mov	r3, r0
 8011d90:	6039      	str	r1, [r7, #0]
 8011d92:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8011d94:	79fb      	ldrb	r3, [r7, #7]
 8011d96:	2b00      	cmp	r3, #0
 8011d98:	d105      	bne.n	8011da6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8011d9a:	683a      	ldr	r2, [r7, #0]
 8011d9c:	4907      	ldr	r1, [pc, #28]	@ (8011dbc <USBD_FS_InterfaceStrDescriptor+0x34>)
 8011d9e:	4808      	ldr	r0, [pc, #32]	@ (8011dc0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8011da0:	f7ff fd88 	bl	80118b4 <USBD_GetString>
 8011da4:	e004      	b.n	8011db0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8011da6:	683a      	ldr	r2, [r7, #0]
 8011da8:	4904      	ldr	r1, [pc, #16]	@ (8011dbc <USBD_FS_InterfaceStrDescriptor+0x34>)
 8011daa:	4805      	ldr	r0, [pc, #20]	@ (8011dc0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8011dac:	f7ff fd82 	bl	80118b4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8011db0:	4b02      	ldr	r3, [pc, #8]	@ (8011dbc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8011db2:	4618      	mov	r0, r3
 8011db4:	3708      	adds	r7, #8
 8011db6:	46bd      	mov	sp, r7
 8011db8:	bd80      	pop	{r7, pc}
 8011dba:	bf00      	nop
 8011dbc:	24001d58 	.word	0x24001d58
 8011dc0:	08015180 	.word	0x08015180

08011dc4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8011dc4:	b580      	push	{r7, lr}
 8011dc6:	b084      	sub	sp, #16
 8011dc8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8011dca:	4b0f      	ldr	r3, [pc, #60]	@ (8011e08 <Get_SerialNum+0x44>)
 8011dcc:	681b      	ldr	r3, [r3, #0]
 8011dce:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8011dd0:	4b0e      	ldr	r3, [pc, #56]	@ (8011e0c <Get_SerialNum+0x48>)
 8011dd2:	681b      	ldr	r3, [r3, #0]
 8011dd4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8011dd6:	4b0e      	ldr	r3, [pc, #56]	@ (8011e10 <Get_SerialNum+0x4c>)
 8011dd8:	681b      	ldr	r3, [r3, #0]
 8011dda:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8011ddc:	68fa      	ldr	r2, [r7, #12]
 8011dde:	687b      	ldr	r3, [r7, #4]
 8011de0:	4413      	add	r3, r2
 8011de2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8011de4:	68fb      	ldr	r3, [r7, #12]
 8011de6:	2b00      	cmp	r3, #0
 8011de8:	d009      	beq.n	8011dfe <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8011dea:	2208      	movs	r2, #8
 8011dec:	4909      	ldr	r1, [pc, #36]	@ (8011e14 <Get_SerialNum+0x50>)
 8011dee:	68f8      	ldr	r0, [r7, #12]
 8011df0:	f000 f814 	bl	8011e1c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8011df4:	2204      	movs	r2, #4
 8011df6:	4908      	ldr	r1, [pc, #32]	@ (8011e18 <Get_SerialNum+0x54>)
 8011df8:	68b8      	ldr	r0, [r7, #8]
 8011dfa:	f000 f80f 	bl	8011e1c <IntToUnicode>
  }
}
 8011dfe:	bf00      	nop
 8011e00:	3710      	adds	r7, #16
 8011e02:	46bd      	mov	sp, r7
 8011e04:	bd80      	pop	{r7, pc}
 8011e06:	bf00      	nop
 8011e08:	1ff1e800 	.word	0x1ff1e800
 8011e0c:	1ff1e804 	.word	0x1ff1e804
 8011e10:	1ff1e808 	.word	0x1ff1e808
 8011e14:	24000106 	.word	0x24000106
 8011e18:	24000116 	.word	0x24000116

08011e1c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8011e1c:	b480      	push	{r7}
 8011e1e:	b087      	sub	sp, #28
 8011e20:	af00      	add	r7, sp, #0
 8011e22:	60f8      	str	r0, [r7, #12]
 8011e24:	60b9      	str	r1, [r7, #8]
 8011e26:	4613      	mov	r3, r2
 8011e28:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8011e2a:	2300      	movs	r3, #0
 8011e2c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8011e2e:	2300      	movs	r3, #0
 8011e30:	75fb      	strb	r3, [r7, #23]
 8011e32:	e027      	b.n	8011e84 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8011e34:	68fb      	ldr	r3, [r7, #12]
 8011e36:	0f1b      	lsrs	r3, r3, #28
 8011e38:	2b09      	cmp	r3, #9
 8011e3a:	d80b      	bhi.n	8011e54 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8011e3c:	68fb      	ldr	r3, [r7, #12]
 8011e3e:	0f1b      	lsrs	r3, r3, #28
 8011e40:	b2da      	uxtb	r2, r3
 8011e42:	7dfb      	ldrb	r3, [r7, #23]
 8011e44:	005b      	lsls	r3, r3, #1
 8011e46:	4619      	mov	r1, r3
 8011e48:	68bb      	ldr	r3, [r7, #8]
 8011e4a:	440b      	add	r3, r1
 8011e4c:	3230      	adds	r2, #48	@ 0x30
 8011e4e:	b2d2      	uxtb	r2, r2
 8011e50:	701a      	strb	r2, [r3, #0]
 8011e52:	e00a      	b.n	8011e6a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8011e54:	68fb      	ldr	r3, [r7, #12]
 8011e56:	0f1b      	lsrs	r3, r3, #28
 8011e58:	b2da      	uxtb	r2, r3
 8011e5a:	7dfb      	ldrb	r3, [r7, #23]
 8011e5c:	005b      	lsls	r3, r3, #1
 8011e5e:	4619      	mov	r1, r3
 8011e60:	68bb      	ldr	r3, [r7, #8]
 8011e62:	440b      	add	r3, r1
 8011e64:	3237      	adds	r2, #55	@ 0x37
 8011e66:	b2d2      	uxtb	r2, r2
 8011e68:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8011e6a:	68fb      	ldr	r3, [r7, #12]
 8011e6c:	011b      	lsls	r3, r3, #4
 8011e6e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8011e70:	7dfb      	ldrb	r3, [r7, #23]
 8011e72:	005b      	lsls	r3, r3, #1
 8011e74:	3301      	adds	r3, #1
 8011e76:	68ba      	ldr	r2, [r7, #8]
 8011e78:	4413      	add	r3, r2
 8011e7a:	2200      	movs	r2, #0
 8011e7c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8011e7e:	7dfb      	ldrb	r3, [r7, #23]
 8011e80:	3301      	adds	r3, #1
 8011e82:	75fb      	strb	r3, [r7, #23]
 8011e84:	7dfa      	ldrb	r2, [r7, #23]
 8011e86:	79fb      	ldrb	r3, [r7, #7]
 8011e88:	429a      	cmp	r2, r3
 8011e8a:	d3d3      	bcc.n	8011e34 <IntToUnicode+0x18>
  }
}
 8011e8c:	bf00      	nop
 8011e8e:	bf00      	nop
 8011e90:	371c      	adds	r7, #28
 8011e92:	46bd      	mov	sp, r7
 8011e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e98:	4770      	bx	lr
	...

08011e9c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8011e9c:	b580      	push	{r7, lr}
 8011e9e:	b0ba      	sub	sp, #232	@ 0xe8
 8011ea0:	af00      	add	r7, sp, #0
 8011ea2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011ea4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8011ea8:	2200      	movs	r2, #0
 8011eaa:	601a      	str	r2, [r3, #0]
 8011eac:	605a      	str	r2, [r3, #4]
 8011eae:	609a      	str	r2, [r3, #8]
 8011eb0:	60da      	str	r2, [r3, #12]
 8011eb2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8011eb4:	f107 0310 	add.w	r3, r7, #16
 8011eb8:	22c0      	movs	r2, #192	@ 0xc0
 8011eba:	2100      	movs	r1, #0
 8011ebc:	4618      	mov	r0, r3
 8011ebe:	f001 f890 	bl	8012fe2 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8011ec2:	687b      	ldr	r3, [r7, #4]
 8011ec4:	681b      	ldr	r3, [r3, #0]
 8011ec6:	4a34      	ldr	r2, [pc, #208]	@ (8011f98 <HAL_PCD_MspInit+0xfc>)
 8011ec8:	4293      	cmp	r3, r2
 8011eca:	d161      	bne.n	8011f90 <HAL_PCD_MspInit+0xf4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8011ecc:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8011ed0:	f04f 0300 	mov.w	r3, #0
 8011ed4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8011ed8:	f44f 1340 	mov.w	r3, #3145728	@ 0x300000
 8011edc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8011ee0:	f107 0310 	add.w	r3, r7, #16
 8011ee4:	4618      	mov	r0, r3
 8011ee6:	f7f7 f961 	bl	80091ac <HAL_RCCEx_PeriphCLKConfig>
 8011eea:	4603      	mov	r3, r0
 8011eec:	2b00      	cmp	r3, #0
 8011eee:	d001      	beq.n	8011ef4 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 8011ef0:	f7ef fa1f 	bl	8001332 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8011ef4:	f7f6 f964 	bl	80081c0 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8011ef8:	4b28      	ldr	r3, [pc, #160]	@ (8011f9c <HAL_PCD_MspInit+0x100>)
 8011efa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8011efe:	4a27      	ldr	r2, [pc, #156]	@ (8011f9c <HAL_PCD_MspInit+0x100>)
 8011f00:	f043 0301 	orr.w	r3, r3, #1
 8011f04:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8011f08:	4b24      	ldr	r3, [pc, #144]	@ (8011f9c <HAL_PCD_MspInit+0x100>)
 8011f0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8011f0e:	f003 0301 	and.w	r3, r3, #1
 8011f12:	60fb      	str	r3, [r7, #12]
 8011f14:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8011f16:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8011f1a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011f1e:	2302      	movs	r3, #2
 8011f20:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011f24:	2300      	movs	r3, #0
 8011f26:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011f2a:	2300      	movs	r3, #0
 8011f2c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8011f30:	230a      	movs	r3, #10
 8011f32:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011f36:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8011f3a:	4619      	mov	r1, r3
 8011f3c:	4818      	ldr	r0, [pc, #96]	@ (8011fa0 <HAL_PCD_MspInit+0x104>)
 8011f3e:	f7f4 fc35 	bl	80067ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8011f42:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8011f46:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8011f4a:	2300      	movs	r3, #0
 8011f4c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011f50:	2300      	movs	r3, #0
 8011f52:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011f56:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8011f5a:	4619      	mov	r1, r3
 8011f5c:	4810      	ldr	r0, [pc, #64]	@ (8011fa0 <HAL_PCD_MspInit+0x104>)
 8011f5e:	f7f4 fc25 	bl	80067ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8011f62:	4b0e      	ldr	r3, [pc, #56]	@ (8011f9c <HAL_PCD_MspInit+0x100>)
 8011f64:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8011f68:	4a0c      	ldr	r2, [pc, #48]	@ (8011f9c <HAL_PCD_MspInit+0x100>)
 8011f6a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8011f6e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8011f72:	4b0a      	ldr	r3, [pc, #40]	@ (8011f9c <HAL_PCD_MspInit+0x100>)
 8011f74:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8011f78:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8011f7c:	60bb      	str	r3, [r7, #8]
 8011f7e:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8011f80:	2200      	movs	r2, #0
 8011f82:	2100      	movs	r1, #0
 8011f84:	2065      	movs	r0, #101	@ 0x65
 8011f86:	f7f2 fa80 	bl	800448a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8011f8a:	2065      	movs	r0, #101	@ 0x65
 8011f8c:	f7f2 fa97 	bl	80044be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8011f90:	bf00      	nop
 8011f92:	37e8      	adds	r7, #232	@ 0xe8
 8011f94:	46bd      	mov	sp, r7
 8011f96:	bd80      	pop	{r7, pc}
 8011f98:	40080000 	.word	0x40080000
 8011f9c:	58024400 	.word	0x58024400
 8011fa0:	58020000 	.word	0x58020000

08011fa4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011fa4:	b580      	push	{r7, lr}
 8011fa6:	b082      	sub	sp, #8
 8011fa8:	af00      	add	r7, sp, #0
 8011faa:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8011fac:	687b      	ldr	r3, [r7, #4]
 8011fae:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8011fb2:	687b      	ldr	r3, [r7, #4]
 8011fb4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8011fb8:	4619      	mov	r1, r3
 8011fba:	4610      	mov	r0, r2
 8011fbc:	f7fe faed 	bl	801059a <USBD_LL_SetupStage>
}
 8011fc0:	bf00      	nop
 8011fc2:	3708      	adds	r7, #8
 8011fc4:	46bd      	mov	sp, r7
 8011fc6:	bd80      	pop	{r7, pc}

08011fc8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011fc8:	b580      	push	{r7, lr}
 8011fca:	b082      	sub	sp, #8
 8011fcc:	af00      	add	r7, sp, #0
 8011fce:	6078      	str	r0, [r7, #4]
 8011fd0:	460b      	mov	r3, r1
 8011fd2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8011fd4:	687b      	ldr	r3, [r7, #4]
 8011fd6:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8011fda:	78fa      	ldrb	r2, [r7, #3]
 8011fdc:	6879      	ldr	r1, [r7, #4]
 8011fde:	4613      	mov	r3, r2
 8011fe0:	00db      	lsls	r3, r3, #3
 8011fe2:	4413      	add	r3, r2
 8011fe4:	009b      	lsls	r3, r3, #2
 8011fe6:	440b      	add	r3, r1
 8011fe8:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8011fec:	681a      	ldr	r2, [r3, #0]
 8011fee:	78fb      	ldrb	r3, [r7, #3]
 8011ff0:	4619      	mov	r1, r3
 8011ff2:	f7fe fb27 	bl	8010644 <USBD_LL_DataOutStage>
}
 8011ff6:	bf00      	nop
 8011ff8:	3708      	adds	r7, #8
 8011ffa:	46bd      	mov	sp, r7
 8011ffc:	bd80      	pop	{r7, pc}

08011ffe <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011ffe:	b580      	push	{r7, lr}
 8012000:	b082      	sub	sp, #8
 8012002:	af00      	add	r7, sp, #0
 8012004:	6078      	str	r0, [r7, #4]
 8012006:	460b      	mov	r3, r1
 8012008:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801200a:	687b      	ldr	r3, [r7, #4]
 801200c:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8012010:	78fa      	ldrb	r2, [r7, #3]
 8012012:	6879      	ldr	r1, [r7, #4]
 8012014:	4613      	mov	r3, r2
 8012016:	00db      	lsls	r3, r3, #3
 8012018:	4413      	add	r3, r2
 801201a:	009b      	lsls	r3, r3, #2
 801201c:	440b      	add	r3, r1
 801201e:	3320      	adds	r3, #32
 8012020:	681a      	ldr	r2, [r3, #0]
 8012022:	78fb      	ldrb	r3, [r7, #3]
 8012024:	4619      	mov	r1, r3
 8012026:	f7fe fbc0 	bl	80107aa <USBD_LL_DataInStage>
}
 801202a:	bf00      	nop
 801202c:	3708      	adds	r7, #8
 801202e:	46bd      	mov	sp, r7
 8012030:	bd80      	pop	{r7, pc}

08012032 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012032:	b580      	push	{r7, lr}
 8012034:	b082      	sub	sp, #8
 8012036:	af00      	add	r7, sp, #0
 8012038:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801203a:	687b      	ldr	r3, [r7, #4]
 801203c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8012040:	4618      	mov	r0, r3
 8012042:	f7fe fcfa 	bl	8010a3a <USBD_LL_SOF>
}
 8012046:	bf00      	nop
 8012048:	3708      	adds	r7, #8
 801204a:	46bd      	mov	sp, r7
 801204c:	bd80      	pop	{r7, pc}

0801204e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801204e:	b580      	push	{r7, lr}
 8012050:	b084      	sub	sp, #16
 8012052:	af00      	add	r7, sp, #0
 8012054:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8012056:	2301      	movs	r3, #1
 8012058:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 801205a:	687b      	ldr	r3, [r7, #4]
 801205c:	79db      	ldrb	r3, [r3, #7]
 801205e:	2b00      	cmp	r3, #0
 8012060:	d102      	bne.n	8012068 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8012062:	2300      	movs	r3, #0
 8012064:	73fb      	strb	r3, [r7, #15]
 8012066:	e008      	b.n	801207a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8012068:	687b      	ldr	r3, [r7, #4]
 801206a:	79db      	ldrb	r3, [r3, #7]
 801206c:	2b02      	cmp	r3, #2
 801206e:	d102      	bne.n	8012076 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8012070:	2301      	movs	r3, #1
 8012072:	73fb      	strb	r3, [r7, #15]
 8012074:	e001      	b.n	801207a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8012076:	f7ef f95c 	bl	8001332 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801207a:	687b      	ldr	r3, [r7, #4]
 801207c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8012080:	7bfa      	ldrb	r2, [r7, #15]
 8012082:	4611      	mov	r1, r2
 8012084:	4618      	mov	r0, r3
 8012086:	f7fe fc94 	bl	80109b2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801208a:	687b      	ldr	r3, [r7, #4]
 801208c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8012090:	4618      	mov	r0, r3
 8012092:	f7fe fc3c 	bl	801090e <USBD_LL_Reset>
}
 8012096:	bf00      	nop
 8012098:	3710      	adds	r7, #16
 801209a:	46bd      	mov	sp, r7
 801209c:	bd80      	pop	{r7, pc}
	...

080120a0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80120a0:	b580      	push	{r7, lr}
 80120a2:	b082      	sub	sp, #8
 80120a4:	af00      	add	r7, sp, #0
 80120a6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80120a8:	687b      	ldr	r3, [r7, #4]
 80120aa:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80120ae:	4618      	mov	r0, r3
 80120b0:	f7fe fc8f 	bl	80109d2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80120b4:	687b      	ldr	r3, [r7, #4]
 80120b6:	681b      	ldr	r3, [r3, #0]
 80120b8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80120bc:	681b      	ldr	r3, [r3, #0]
 80120be:	687a      	ldr	r2, [r7, #4]
 80120c0:	6812      	ldr	r2, [r2, #0]
 80120c2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80120c6:	f043 0301 	orr.w	r3, r3, #1
 80120ca:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80120cc:	687b      	ldr	r3, [r7, #4]
 80120ce:	7adb      	ldrb	r3, [r3, #11]
 80120d0:	2b00      	cmp	r3, #0
 80120d2:	d005      	beq.n	80120e0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80120d4:	4b04      	ldr	r3, [pc, #16]	@ (80120e8 <HAL_PCD_SuspendCallback+0x48>)
 80120d6:	691b      	ldr	r3, [r3, #16]
 80120d8:	4a03      	ldr	r2, [pc, #12]	@ (80120e8 <HAL_PCD_SuspendCallback+0x48>)
 80120da:	f043 0306 	orr.w	r3, r3, #6
 80120de:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80120e0:	bf00      	nop
 80120e2:	3708      	adds	r7, #8
 80120e4:	46bd      	mov	sp, r7
 80120e6:	bd80      	pop	{r7, pc}
 80120e8:	e000ed00 	.word	0xe000ed00

080120ec <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80120ec:	b580      	push	{r7, lr}
 80120ee:	b082      	sub	sp, #8
 80120f0:	af00      	add	r7, sp, #0
 80120f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80120f4:	687b      	ldr	r3, [r7, #4]
 80120f6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80120fa:	4618      	mov	r0, r3
 80120fc:	f7fe fc85 	bl	8010a0a <USBD_LL_Resume>
}
 8012100:	bf00      	nop
 8012102:	3708      	adds	r7, #8
 8012104:	46bd      	mov	sp, r7
 8012106:	bd80      	pop	{r7, pc}

08012108 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012108:	b580      	push	{r7, lr}
 801210a:	b082      	sub	sp, #8
 801210c:	af00      	add	r7, sp, #0
 801210e:	6078      	str	r0, [r7, #4]
 8012110:	460b      	mov	r3, r1
 8012112:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8012114:	687b      	ldr	r3, [r7, #4]
 8012116:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801211a:	78fa      	ldrb	r2, [r7, #3]
 801211c:	4611      	mov	r1, r2
 801211e:	4618      	mov	r0, r3
 8012120:	f7fe fcdd 	bl	8010ade <USBD_LL_IsoOUTIncomplete>
}
 8012124:	bf00      	nop
 8012126:	3708      	adds	r7, #8
 8012128:	46bd      	mov	sp, r7
 801212a:	bd80      	pop	{r7, pc}

0801212c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801212c:	b580      	push	{r7, lr}
 801212e:	b082      	sub	sp, #8
 8012130:	af00      	add	r7, sp, #0
 8012132:	6078      	str	r0, [r7, #4]
 8012134:	460b      	mov	r3, r1
 8012136:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8012138:	687b      	ldr	r3, [r7, #4]
 801213a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801213e:	78fa      	ldrb	r2, [r7, #3]
 8012140:	4611      	mov	r1, r2
 8012142:	4618      	mov	r0, r3
 8012144:	f7fe fc99 	bl	8010a7a <USBD_LL_IsoINIncomplete>
}
 8012148:	bf00      	nop
 801214a:	3708      	adds	r7, #8
 801214c:	46bd      	mov	sp, r7
 801214e:	bd80      	pop	{r7, pc}

08012150 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012150:	b580      	push	{r7, lr}
 8012152:	b082      	sub	sp, #8
 8012154:	af00      	add	r7, sp, #0
 8012156:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8012158:	687b      	ldr	r3, [r7, #4]
 801215a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801215e:	4618      	mov	r0, r3
 8012160:	f7fe fcef 	bl	8010b42 <USBD_LL_DevConnected>
}
 8012164:	bf00      	nop
 8012166:	3708      	adds	r7, #8
 8012168:	46bd      	mov	sp, r7
 801216a:	bd80      	pop	{r7, pc}

0801216c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801216c:	b580      	push	{r7, lr}
 801216e:	b082      	sub	sp, #8
 8012170:	af00      	add	r7, sp, #0
 8012172:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8012174:	687b      	ldr	r3, [r7, #4]
 8012176:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801217a:	4618      	mov	r0, r3
 801217c:	f7fe fcec 	bl	8010b58 <USBD_LL_DevDisconnected>
}
 8012180:	bf00      	nop
 8012182:	3708      	adds	r7, #8
 8012184:	46bd      	mov	sp, r7
 8012186:	bd80      	pop	{r7, pc}

08012188 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8012188:	b580      	push	{r7, lr}
 801218a:	b082      	sub	sp, #8
 801218c:	af00      	add	r7, sp, #0
 801218e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8012190:	687b      	ldr	r3, [r7, #4]
 8012192:	781b      	ldrb	r3, [r3, #0]
 8012194:	2b00      	cmp	r3, #0
 8012196:	d13e      	bne.n	8012216 <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8012198:	4a21      	ldr	r2, [pc, #132]	@ (8012220 <USBD_LL_Init+0x98>)
 801219a:	687b      	ldr	r3, [r7, #4]
 801219c:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 80121a0:	687b      	ldr	r3, [r7, #4]
 80121a2:	4a1f      	ldr	r2, [pc, #124]	@ (8012220 <USBD_LL_Init+0x98>)
 80121a4:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80121a8:	4b1d      	ldr	r3, [pc, #116]	@ (8012220 <USBD_LL_Init+0x98>)
 80121aa:	4a1e      	ldr	r2, [pc, #120]	@ (8012224 <USBD_LL_Init+0x9c>)
 80121ac:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 80121ae:	4b1c      	ldr	r3, [pc, #112]	@ (8012220 <USBD_LL_Init+0x98>)
 80121b0:	2209      	movs	r2, #9
 80121b2:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80121b4:	4b1a      	ldr	r3, [pc, #104]	@ (8012220 <USBD_LL_Init+0x98>)
 80121b6:	2202      	movs	r2, #2
 80121b8:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80121ba:	4b19      	ldr	r3, [pc, #100]	@ (8012220 <USBD_LL_Init+0x98>)
 80121bc:	2200      	movs	r2, #0
 80121be:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80121c0:	4b17      	ldr	r3, [pc, #92]	@ (8012220 <USBD_LL_Init+0x98>)
 80121c2:	2202      	movs	r2, #2
 80121c4:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80121c6:	4b16      	ldr	r3, [pc, #88]	@ (8012220 <USBD_LL_Init+0x98>)
 80121c8:	2201      	movs	r2, #1
 80121ca:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80121cc:	4b14      	ldr	r3, [pc, #80]	@ (8012220 <USBD_LL_Init+0x98>)
 80121ce:	2200      	movs	r2, #0
 80121d0:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80121d2:	4b13      	ldr	r3, [pc, #76]	@ (8012220 <USBD_LL_Init+0x98>)
 80121d4:	2200      	movs	r2, #0
 80121d6:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 80121d8:	4b11      	ldr	r3, [pc, #68]	@ (8012220 <USBD_LL_Init+0x98>)
 80121da:	2201      	movs	r2, #1
 80121dc:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80121de:	4b10      	ldr	r3, [pc, #64]	@ (8012220 <USBD_LL_Init+0x98>)
 80121e0:	2201      	movs	r2, #1
 80121e2:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80121e4:	4b0e      	ldr	r3, [pc, #56]	@ (8012220 <USBD_LL_Init+0x98>)
 80121e6:	2200      	movs	r2, #0
 80121e8:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80121ea:	480d      	ldr	r0, [pc, #52]	@ (8012220 <USBD_LL_Init+0x98>)
 80121ec:	f7f4 fcf0 	bl	8006bd0 <HAL_PCD_Init>
 80121f0:	4603      	mov	r3, r0
 80121f2:	2b00      	cmp	r3, #0
 80121f4:	d001      	beq.n	80121fa <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 80121f6:	f7ef f89c 	bl	8001332 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80121fa:	2180      	movs	r1, #128	@ 0x80
 80121fc:	4808      	ldr	r0, [pc, #32]	@ (8012220 <USBD_LL_Init+0x98>)
 80121fe:	f7f5 ff44 	bl	800808a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8012202:	2240      	movs	r2, #64	@ 0x40
 8012204:	2100      	movs	r1, #0
 8012206:	4806      	ldr	r0, [pc, #24]	@ (8012220 <USBD_LL_Init+0x98>)
 8012208:	f7f5 fef8 	bl	8007ffc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 801220c:	2280      	movs	r2, #128	@ 0x80
 801220e:	2101      	movs	r1, #1
 8012210:	4803      	ldr	r0, [pc, #12]	@ (8012220 <USBD_LL_Init+0x98>)
 8012212:	f7f5 fef3 	bl	8007ffc <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 8012216:	2300      	movs	r3, #0
}
 8012218:	4618      	mov	r0, r3
 801221a:	3708      	adds	r7, #8
 801221c:	46bd      	mov	sp, r7
 801221e:	bd80      	pop	{r7, pc}
 8012220:	24001f58 	.word	0x24001f58
 8012224:	40080000 	.word	0x40080000

08012228 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8012228:	b580      	push	{r7, lr}
 801222a:	b084      	sub	sp, #16
 801222c:	af00      	add	r7, sp, #0
 801222e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012230:	2300      	movs	r3, #0
 8012232:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012234:	2300      	movs	r3, #0
 8012236:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8012238:	687b      	ldr	r3, [r7, #4]
 801223a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801223e:	4618      	mov	r0, r3
 8012240:	f7f4 fdd2 	bl	8006de8 <HAL_PCD_Start>
 8012244:	4603      	mov	r3, r0
 8012246:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012248:	7bfb      	ldrb	r3, [r7, #15]
 801224a:	4618      	mov	r0, r3
 801224c:	f000 f942 	bl	80124d4 <USBD_Get_USB_Status>
 8012250:	4603      	mov	r3, r0
 8012252:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012254:	7bbb      	ldrb	r3, [r7, #14]
}
 8012256:	4618      	mov	r0, r3
 8012258:	3710      	adds	r7, #16
 801225a:	46bd      	mov	sp, r7
 801225c:	bd80      	pop	{r7, pc}

0801225e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801225e:	b580      	push	{r7, lr}
 8012260:	b084      	sub	sp, #16
 8012262:	af00      	add	r7, sp, #0
 8012264:	6078      	str	r0, [r7, #4]
 8012266:	4608      	mov	r0, r1
 8012268:	4611      	mov	r1, r2
 801226a:	461a      	mov	r2, r3
 801226c:	4603      	mov	r3, r0
 801226e:	70fb      	strb	r3, [r7, #3]
 8012270:	460b      	mov	r3, r1
 8012272:	70bb      	strb	r3, [r7, #2]
 8012274:	4613      	mov	r3, r2
 8012276:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012278:	2300      	movs	r3, #0
 801227a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801227c:	2300      	movs	r3, #0
 801227e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8012280:	687b      	ldr	r3, [r7, #4]
 8012282:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8012286:	78bb      	ldrb	r3, [r7, #2]
 8012288:	883a      	ldrh	r2, [r7, #0]
 801228a:	78f9      	ldrb	r1, [r7, #3]
 801228c:	f7f5 fad3 	bl	8007836 <HAL_PCD_EP_Open>
 8012290:	4603      	mov	r3, r0
 8012292:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012294:	7bfb      	ldrb	r3, [r7, #15]
 8012296:	4618      	mov	r0, r3
 8012298:	f000 f91c 	bl	80124d4 <USBD_Get_USB_Status>
 801229c:	4603      	mov	r3, r0
 801229e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80122a0:	7bbb      	ldrb	r3, [r7, #14]
}
 80122a2:	4618      	mov	r0, r3
 80122a4:	3710      	adds	r7, #16
 80122a6:	46bd      	mov	sp, r7
 80122a8:	bd80      	pop	{r7, pc}

080122aa <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80122aa:	b580      	push	{r7, lr}
 80122ac:	b084      	sub	sp, #16
 80122ae:	af00      	add	r7, sp, #0
 80122b0:	6078      	str	r0, [r7, #4]
 80122b2:	460b      	mov	r3, r1
 80122b4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80122b6:	2300      	movs	r3, #0
 80122b8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80122ba:	2300      	movs	r3, #0
 80122bc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80122be:	687b      	ldr	r3, [r7, #4]
 80122c0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80122c4:	78fa      	ldrb	r2, [r7, #3]
 80122c6:	4611      	mov	r1, r2
 80122c8:	4618      	mov	r0, r3
 80122ca:	f7f5 fb1c 	bl	8007906 <HAL_PCD_EP_Close>
 80122ce:	4603      	mov	r3, r0
 80122d0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80122d2:	7bfb      	ldrb	r3, [r7, #15]
 80122d4:	4618      	mov	r0, r3
 80122d6:	f000 f8fd 	bl	80124d4 <USBD_Get_USB_Status>
 80122da:	4603      	mov	r3, r0
 80122dc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80122de:	7bbb      	ldrb	r3, [r7, #14]
}
 80122e0:	4618      	mov	r0, r3
 80122e2:	3710      	adds	r7, #16
 80122e4:	46bd      	mov	sp, r7
 80122e6:	bd80      	pop	{r7, pc}

080122e8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80122e8:	b580      	push	{r7, lr}
 80122ea:	b084      	sub	sp, #16
 80122ec:	af00      	add	r7, sp, #0
 80122ee:	6078      	str	r0, [r7, #4]
 80122f0:	460b      	mov	r3, r1
 80122f2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80122f4:	2300      	movs	r3, #0
 80122f6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80122f8:	2300      	movs	r3, #0
 80122fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80122fc:	687b      	ldr	r3, [r7, #4]
 80122fe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8012302:	78fa      	ldrb	r2, [r7, #3]
 8012304:	4611      	mov	r1, r2
 8012306:	4618      	mov	r0, r3
 8012308:	f7f5 fbd4 	bl	8007ab4 <HAL_PCD_EP_SetStall>
 801230c:	4603      	mov	r3, r0
 801230e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012310:	7bfb      	ldrb	r3, [r7, #15]
 8012312:	4618      	mov	r0, r3
 8012314:	f000 f8de 	bl	80124d4 <USBD_Get_USB_Status>
 8012318:	4603      	mov	r3, r0
 801231a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801231c:	7bbb      	ldrb	r3, [r7, #14]
}
 801231e:	4618      	mov	r0, r3
 8012320:	3710      	adds	r7, #16
 8012322:	46bd      	mov	sp, r7
 8012324:	bd80      	pop	{r7, pc}

08012326 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012326:	b580      	push	{r7, lr}
 8012328:	b084      	sub	sp, #16
 801232a:	af00      	add	r7, sp, #0
 801232c:	6078      	str	r0, [r7, #4]
 801232e:	460b      	mov	r3, r1
 8012330:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012332:	2300      	movs	r3, #0
 8012334:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012336:	2300      	movs	r3, #0
 8012338:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801233a:	687b      	ldr	r3, [r7, #4]
 801233c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8012340:	78fa      	ldrb	r2, [r7, #3]
 8012342:	4611      	mov	r1, r2
 8012344:	4618      	mov	r0, r3
 8012346:	f7f5 fc18 	bl	8007b7a <HAL_PCD_EP_ClrStall>
 801234a:	4603      	mov	r3, r0
 801234c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801234e:	7bfb      	ldrb	r3, [r7, #15]
 8012350:	4618      	mov	r0, r3
 8012352:	f000 f8bf 	bl	80124d4 <USBD_Get_USB_Status>
 8012356:	4603      	mov	r3, r0
 8012358:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801235a:	7bbb      	ldrb	r3, [r7, #14]
}
 801235c:	4618      	mov	r0, r3
 801235e:	3710      	adds	r7, #16
 8012360:	46bd      	mov	sp, r7
 8012362:	bd80      	pop	{r7, pc}

08012364 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012364:	b480      	push	{r7}
 8012366:	b085      	sub	sp, #20
 8012368:	af00      	add	r7, sp, #0
 801236a:	6078      	str	r0, [r7, #4]
 801236c:	460b      	mov	r3, r1
 801236e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8012370:	687b      	ldr	r3, [r7, #4]
 8012372:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8012376:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8012378:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801237c:	2b00      	cmp	r3, #0
 801237e:	da0b      	bge.n	8012398 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8012380:	78fb      	ldrb	r3, [r7, #3]
 8012382:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8012386:	68f9      	ldr	r1, [r7, #12]
 8012388:	4613      	mov	r3, r2
 801238a:	00db      	lsls	r3, r3, #3
 801238c:	4413      	add	r3, r2
 801238e:	009b      	lsls	r3, r3, #2
 8012390:	440b      	add	r3, r1
 8012392:	3316      	adds	r3, #22
 8012394:	781b      	ldrb	r3, [r3, #0]
 8012396:	e00b      	b.n	80123b0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8012398:	78fb      	ldrb	r3, [r7, #3]
 801239a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801239e:	68f9      	ldr	r1, [r7, #12]
 80123a0:	4613      	mov	r3, r2
 80123a2:	00db      	lsls	r3, r3, #3
 80123a4:	4413      	add	r3, r2
 80123a6:	009b      	lsls	r3, r3, #2
 80123a8:	440b      	add	r3, r1
 80123aa:	f203 2356 	addw	r3, r3, #598	@ 0x256
 80123ae:	781b      	ldrb	r3, [r3, #0]
  }
}
 80123b0:	4618      	mov	r0, r3
 80123b2:	3714      	adds	r7, #20
 80123b4:	46bd      	mov	sp, r7
 80123b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123ba:	4770      	bx	lr

080123bc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80123bc:	b580      	push	{r7, lr}
 80123be:	b084      	sub	sp, #16
 80123c0:	af00      	add	r7, sp, #0
 80123c2:	6078      	str	r0, [r7, #4]
 80123c4:	460b      	mov	r3, r1
 80123c6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80123c8:	2300      	movs	r3, #0
 80123ca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80123cc:	2300      	movs	r3, #0
 80123ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80123d0:	687b      	ldr	r3, [r7, #4]
 80123d2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80123d6:	78fa      	ldrb	r2, [r7, #3]
 80123d8:	4611      	mov	r1, r2
 80123da:	4618      	mov	r0, r3
 80123dc:	f7f5 fa07 	bl	80077ee <HAL_PCD_SetAddress>
 80123e0:	4603      	mov	r3, r0
 80123e2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80123e4:	7bfb      	ldrb	r3, [r7, #15]
 80123e6:	4618      	mov	r0, r3
 80123e8:	f000 f874 	bl	80124d4 <USBD_Get_USB_Status>
 80123ec:	4603      	mov	r3, r0
 80123ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80123f0:	7bbb      	ldrb	r3, [r7, #14]
}
 80123f2:	4618      	mov	r0, r3
 80123f4:	3710      	adds	r7, #16
 80123f6:	46bd      	mov	sp, r7
 80123f8:	bd80      	pop	{r7, pc}

080123fa <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80123fa:	b580      	push	{r7, lr}
 80123fc:	b086      	sub	sp, #24
 80123fe:	af00      	add	r7, sp, #0
 8012400:	60f8      	str	r0, [r7, #12]
 8012402:	607a      	str	r2, [r7, #4]
 8012404:	603b      	str	r3, [r7, #0]
 8012406:	460b      	mov	r3, r1
 8012408:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801240a:	2300      	movs	r3, #0
 801240c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801240e:	2300      	movs	r3, #0
 8012410:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8012412:	68fb      	ldr	r3, [r7, #12]
 8012414:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8012418:	7af9      	ldrb	r1, [r7, #11]
 801241a:	683b      	ldr	r3, [r7, #0]
 801241c:	687a      	ldr	r2, [r7, #4]
 801241e:	f7f5 fb0f 	bl	8007a40 <HAL_PCD_EP_Transmit>
 8012422:	4603      	mov	r3, r0
 8012424:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012426:	7dfb      	ldrb	r3, [r7, #23]
 8012428:	4618      	mov	r0, r3
 801242a:	f000 f853 	bl	80124d4 <USBD_Get_USB_Status>
 801242e:	4603      	mov	r3, r0
 8012430:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8012432:	7dbb      	ldrb	r3, [r7, #22]
}
 8012434:	4618      	mov	r0, r3
 8012436:	3718      	adds	r7, #24
 8012438:	46bd      	mov	sp, r7
 801243a:	bd80      	pop	{r7, pc}

0801243c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801243c:	b580      	push	{r7, lr}
 801243e:	b086      	sub	sp, #24
 8012440:	af00      	add	r7, sp, #0
 8012442:	60f8      	str	r0, [r7, #12]
 8012444:	607a      	str	r2, [r7, #4]
 8012446:	603b      	str	r3, [r7, #0]
 8012448:	460b      	mov	r3, r1
 801244a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801244c:	2300      	movs	r3, #0
 801244e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012450:	2300      	movs	r3, #0
 8012452:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8012454:	68fb      	ldr	r3, [r7, #12]
 8012456:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801245a:	7af9      	ldrb	r1, [r7, #11]
 801245c:	683b      	ldr	r3, [r7, #0]
 801245e:	687a      	ldr	r2, [r7, #4]
 8012460:	f7f5 fa9b 	bl	800799a <HAL_PCD_EP_Receive>
 8012464:	4603      	mov	r3, r0
 8012466:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012468:	7dfb      	ldrb	r3, [r7, #23]
 801246a:	4618      	mov	r0, r3
 801246c:	f000 f832 	bl	80124d4 <USBD_Get_USB_Status>
 8012470:	4603      	mov	r3, r0
 8012472:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8012474:	7dbb      	ldrb	r3, [r7, #22]
}
 8012476:	4618      	mov	r0, r3
 8012478:	3718      	adds	r7, #24
 801247a:	46bd      	mov	sp, r7
 801247c:	bd80      	pop	{r7, pc}

0801247e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801247e:	b580      	push	{r7, lr}
 8012480:	b082      	sub	sp, #8
 8012482:	af00      	add	r7, sp, #0
 8012484:	6078      	str	r0, [r7, #4]
 8012486:	460b      	mov	r3, r1
 8012488:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801248a:	687b      	ldr	r3, [r7, #4]
 801248c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8012490:	78fa      	ldrb	r2, [r7, #3]
 8012492:	4611      	mov	r1, r2
 8012494:	4618      	mov	r0, r3
 8012496:	f7f5 fabb 	bl	8007a10 <HAL_PCD_EP_GetRxCount>
 801249a:	4603      	mov	r3, r0
}
 801249c:	4618      	mov	r0, r3
 801249e:	3708      	adds	r7, #8
 80124a0:	46bd      	mov	sp, r7
 80124a2:	bd80      	pop	{r7, pc}

080124a4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80124a4:	b480      	push	{r7}
 80124a6:	b083      	sub	sp, #12
 80124a8:	af00      	add	r7, sp, #0
 80124aa:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80124ac:	4b03      	ldr	r3, [pc, #12]	@ (80124bc <USBD_static_malloc+0x18>)
}
 80124ae:	4618      	mov	r0, r3
 80124b0:	370c      	adds	r7, #12
 80124b2:	46bd      	mov	sp, r7
 80124b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124b8:	4770      	bx	lr
 80124ba:	bf00      	nop
 80124bc:	2400243c 	.word	0x2400243c

080124c0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80124c0:	b480      	push	{r7}
 80124c2:	b083      	sub	sp, #12
 80124c4:	af00      	add	r7, sp, #0
 80124c6:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 80124c8:	bf00      	nop
 80124ca:	370c      	adds	r7, #12
 80124cc:	46bd      	mov	sp, r7
 80124ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124d2:	4770      	bx	lr

080124d4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80124d4:	b480      	push	{r7}
 80124d6:	b085      	sub	sp, #20
 80124d8:	af00      	add	r7, sp, #0
 80124da:	4603      	mov	r3, r0
 80124dc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80124de:	2300      	movs	r3, #0
 80124e0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80124e2:	79fb      	ldrb	r3, [r7, #7]
 80124e4:	2b03      	cmp	r3, #3
 80124e6:	d817      	bhi.n	8012518 <USBD_Get_USB_Status+0x44>
 80124e8:	a201      	add	r2, pc, #4	@ (adr r2, 80124f0 <USBD_Get_USB_Status+0x1c>)
 80124ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80124ee:	bf00      	nop
 80124f0:	08012501 	.word	0x08012501
 80124f4:	08012507 	.word	0x08012507
 80124f8:	0801250d 	.word	0x0801250d
 80124fc:	08012513 	.word	0x08012513
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8012500:	2300      	movs	r3, #0
 8012502:	73fb      	strb	r3, [r7, #15]
    break;
 8012504:	e00b      	b.n	801251e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8012506:	2303      	movs	r3, #3
 8012508:	73fb      	strb	r3, [r7, #15]
    break;
 801250a:	e008      	b.n	801251e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801250c:	2301      	movs	r3, #1
 801250e:	73fb      	strb	r3, [r7, #15]
    break;
 8012510:	e005      	b.n	801251e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8012512:	2303      	movs	r3, #3
 8012514:	73fb      	strb	r3, [r7, #15]
    break;
 8012516:	e002      	b.n	801251e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8012518:	2303      	movs	r3, #3
 801251a:	73fb      	strb	r3, [r7, #15]
    break;
 801251c:	bf00      	nop
  }
  return usb_status;
 801251e:	7bfb      	ldrb	r3, [r7, #15]
}
 8012520:	4618      	mov	r0, r3
 8012522:	3714      	adds	r7, #20
 8012524:	46bd      	mov	sp, r7
 8012526:	f85d 7b04 	ldr.w	r7, [sp], #4
 801252a:	4770      	bx	lr

0801252c <__cvt>:
 801252c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801252e:	ed2d 8b02 	vpush	{d8}
 8012532:	eeb0 8b40 	vmov.f64	d8, d0
 8012536:	b085      	sub	sp, #20
 8012538:	4617      	mov	r7, r2
 801253a:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 801253c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801253e:	ee18 2a90 	vmov	r2, s17
 8012542:	f025 0520 	bic.w	r5, r5, #32
 8012546:	2a00      	cmp	r2, #0
 8012548:	bfb6      	itet	lt
 801254a:	222d      	movlt	r2, #45	@ 0x2d
 801254c:	2200      	movge	r2, #0
 801254e:	eeb1 8b40 	vneglt.f64	d8, d0
 8012552:	2d46      	cmp	r5, #70	@ 0x46
 8012554:	460c      	mov	r4, r1
 8012556:	701a      	strb	r2, [r3, #0]
 8012558:	d004      	beq.n	8012564 <__cvt+0x38>
 801255a:	2d45      	cmp	r5, #69	@ 0x45
 801255c:	d100      	bne.n	8012560 <__cvt+0x34>
 801255e:	3401      	adds	r4, #1
 8012560:	2102      	movs	r1, #2
 8012562:	e000      	b.n	8012566 <__cvt+0x3a>
 8012564:	2103      	movs	r1, #3
 8012566:	ab03      	add	r3, sp, #12
 8012568:	9301      	str	r3, [sp, #4]
 801256a:	ab02      	add	r3, sp, #8
 801256c:	9300      	str	r3, [sp, #0]
 801256e:	4622      	mov	r2, r4
 8012570:	4633      	mov	r3, r6
 8012572:	eeb0 0b48 	vmov.f64	d0, d8
 8012576:	f000 fe3f 	bl	80131f8 <_dtoa_r>
 801257a:	2d47      	cmp	r5, #71	@ 0x47
 801257c:	d114      	bne.n	80125a8 <__cvt+0x7c>
 801257e:	07fb      	lsls	r3, r7, #31
 8012580:	d50a      	bpl.n	8012598 <__cvt+0x6c>
 8012582:	1902      	adds	r2, r0, r4
 8012584:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8012588:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801258c:	bf08      	it	eq
 801258e:	9203      	streq	r2, [sp, #12]
 8012590:	2130      	movs	r1, #48	@ 0x30
 8012592:	9b03      	ldr	r3, [sp, #12]
 8012594:	4293      	cmp	r3, r2
 8012596:	d319      	bcc.n	80125cc <__cvt+0xa0>
 8012598:	9b03      	ldr	r3, [sp, #12]
 801259a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801259c:	1a1b      	subs	r3, r3, r0
 801259e:	6013      	str	r3, [r2, #0]
 80125a0:	b005      	add	sp, #20
 80125a2:	ecbd 8b02 	vpop	{d8}
 80125a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80125a8:	2d46      	cmp	r5, #70	@ 0x46
 80125aa:	eb00 0204 	add.w	r2, r0, r4
 80125ae:	d1e9      	bne.n	8012584 <__cvt+0x58>
 80125b0:	7803      	ldrb	r3, [r0, #0]
 80125b2:	2b30      	cmp	r3, #48	@ 0x30
 80125b4:	d107      	bne.n	80125c6 <__cvt+0x9a>
 80125b6:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80125ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80125be:	bf1c      	itt	ne
 80125c0:	f1c4 0401 	rsbne	r4, r4, #1
 80125c4:	6034      	strne	r4, [r6, #0]
 80125c6:	6833      	ldr	r3, [r6, #0]
 80125c8:	441a      	add	r2, r3
 80125ca:	e7db      	b.n	8012584 <__cvt+0x58>
 80125cc:	1c5c      	adds	r4, r3, #1
 80125ce:	9403      	str	r4, [sp, #12]
 80125d0:	7019      	strb	r1, [r3, #0]
 80125d2:	e7de      	b.n	8012592 <__cvt+0x66>

080125d4 <__exponent>:
 80125d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80125d6:	2900      	cmp	r1, #0
 80125d8:	bfba      	itte	lt
 80125da:	4249      	neglt	r1, r1
 80125dc:	232d      	movlt	r3, #45	@ 0x2d
 80125de:	232b      	movge	r3, #43	@ 0x2b
 80125e0:	2909      	cmp	r1, #9
 80125e2:	7002      	strb	r2, [r0, #0]
 80125e4:	7043      	strb	r3, [r0, #1]
 80125e6:	dd29      	ble.n	801263c <__exponent+0x68>
 80125e8:	f10d 0307 	add.w	r3, sp, #7
 80125ec:	461d      	mov	r5, r3
 80125ee:	270a      	movs	r7, #10
 80125f0:	461a      	mov	r2, r3
 80125f2:	fbb1 f6f7 	udiv	r6, r1, r7
 80125f6:	fb07 1416 	mls	r4, r7, r6, r1
 80125fa:	3430      	adds	r4, #48	@ 0x30
 80125fc:	f802 4c01 	strb.w	r4, [r2, #-1]
 8012600:	460c      	mov	r4, r1
 8012602:	2c63      	cmp	r4, #99	@ 0x63
 8012604:	f103 33ff 	add.w	r3, r3, #4294967295
 8012608:	4631      	mov	r1, r6
 801260a:	dcf1      	bgt.n	80125f0 <__exponent+0x1c>
 801260c:	3130      	adds	r1, #48	@ 0x30
 801260e:	1e94      	subs	r4, r2, #2
 8012610:	f803 1c01 	strb.w	r1, [r3, #-1]
 8012614:	1c41      	adds	r1, r0, #1
 8012616:	4623      	mov	r3, r4
 8012618:	42ab      	cmp	r3, r5
 801261a:	d30a      	bcc.n	8012632 <__exponent+0x5e>
 801261c:	f10d 0309 	add.w	r3, sp, #9
 8012620:	1a9b      	subs	r3, r3, r2
 8012622:	42ac      	cmp	r4, r5
 8012624:	bf88      	it	hi
 8012626:	2300      	movhi	r3, #0
 8012628:	3302      	adds	r3, #2
 801262a:	4403      	add	r3, r0
 801262c:	1a18      	subs	r0, r3, r0
 801262e:	b003      	add	sp, #12
 8012630:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012632:	f813 6b01 	ldrb.w	r6, [r3], #1
 8012636:	f801 6f01 	strb.w	r6, [r1, #1]!
 801263a:	e7ed      	b.n	8012618 <__exponent+0x44>
 801263c:	2330      	movs	r3, #48	@ 0x30
 801263e:	3130      	adds	r1, #48	@ 0x30
 8012640:	7083      	strb	r3, [r0, #2]
 8012642:	70c1      	strb	r1, [r0, #3]
 8012644:	1d03      	adds	r3, r0, #4
 8012646:	e7f1      	b.n	801262c <__exponent+0x58>

08012648 <_printf_float>:
 8012648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801264c:	b08d      	sub	sp, #52	@ 0x34
 801264e:	460c      	mov	r4, r1
 8012650:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8012654:	4616      	mov	r6, r2
 8012656:	461f      	mov	r7, r3
 8012658:	4605      	mov	r5, r0
 801265a:	f000 fccb 	bl	8012ff4 <_localeconv_r>
 801265e:	f8d0 b000 	ldr.w	fp, [r0]
 8012662:	4658      	mov	r0, fp
 8012664:	f7ed fe8c 	bl	8000380 <strlen>
 8012668:	2300      	movs	r3, #0
 801266a:	930a      	str	r3, [sp, #40]	@ 0x28
 801266c:	f8d8 3000 	ldr.w	r3, [r8]
 8012670:	f894 9018 	ldrb.w	r9, [r4, #24]
 8012674:	6822      	ldr	r2, [r4, #0]
 8012676:	9005      	str	r0, [sp, #20]
 8012678:	3307      	adds	r3, #7
 801267a:	f023 0307 	bic.w	r3, r3, #7
 801267e:	f103 0108 	add.w	r1, r3, #8
 8012682:	f8c8 1000 	str.w	r1, [r8]
 8012686:	ed93 0b00 	vldr	d0, [r3]
 801268a:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 80128e8 <_printf_float+0x2a0>
 801268e:	eeb0 7bc0 	vabs.f64	d7, d0
 8012692:	eeb4 7b46 	vcmp.f64	d7, d6
 8012696:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801269a:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 801269e:	dd24      	ble.n	80126ea <_printf_float+0xa2>
 80126a0:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80126a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80126a8:	d502      	bpl.n	80126b0 <_printf_float+0x68>
 80126aa:	232d      	movs	r3, #45	@ 0x2d
 80126ac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80126b0:	498f      	ldr	r1, [pc, #572]	@ (80128f0 <_printf_float+0x2a8>)
 80126b2:	4b90      	ldr	r3, [pc, #576]	@ (80128f4 <_printf_float+0x2ac>)
 80126b4:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 80126b8:	bf94      	ite	ls
 80126ba:	4688      	movls	r8, r1
 80126bc:	4698      	movhi	r8, r3
 80126be:	f022 0204 	bic.w	r2, r2, #4
 80126c2:	2303      	movs	r3, #3
 80126c4:	6123      	str	r3, [r4, #16]
 80126c6:	6022      	str	r2, [r4, #0]
 80126c8:	f04f 0a00 	mov.w	sl, #0
 80126cc:	9700      	str	r7, [sp, #0]
 80126ce:	4633      	mov	r3, r6
 80126d0:	aa0b      	add	r2, sp, #44	@ 0x2c
 80126d2:	4621      	mov	r1, r4
 80126d4:	4628      	mov	r0, r5
 80126d6:	f000 f9d1 	bl	8012a7c <_printf_common>
 80126da:	3001      	adds	r0, #1
 80126dc:	f040 8089 	bne.w	80127f2 <_printf_float+0x1aa>
 80126e0:	f04f 30ff 	mov.w	r0, #4294967295
 80126e4:	b00d      	add	sp, #52	@ 0x34
 80126e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80126ea:	eeb4 0b40 	vcmp.f64	d0, d0
 80126ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80126f2:	d709      	bvc.n	8012708 <_printf_float+0xc0>
 80126f4:	ee10 3a90 	vmov	r3, s1
 80126f8:	2b00      	cmp	r3, #0
 80126fa:	bfbc      	itt	lt
 80126fc:	232d      	movlt	r3, #45	@ 0x2d
 80126fe:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8012702:	497d      	ldr	r1, [pc, #500]	@ (80128f8 <_printf_float+0x2b0>)
 8012704:	4b7d      	ldr	r3, [pc, #500]	@ (80128fc <_printf_float+0x2b4>)
 8012706:	e7d5      	b.n	80126b4 <_printf_float+0x6c>
 8012708:	6863      	ldr	r3, [r4, #4]
 801270a:	1c59      	adds	r1, r3, #1
 801270c:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8012710:	d139      	bne.n	8012786 <_printf_float+0x13e>
 8012712:	2306      	movs	r3, #6
 8012714:	6063      	str	r3, [r4, #4]
 8012716:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 801271a:	2300      	movs	r3, #0
 801271c:	6022      	str	r2, [r4, #0]
 801271e:	9303      	str	r3, [sp, #12]
 8012720:	ab0a      	add	r3, sp, #40	@ 0x28
 8012722:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8012726:	ab09      	add	r3, sp, #36	@ 0x24
 8012728:	9300      	str	r3, [sp, #0]
 801272a:	6861      	ldr	r1, [r4, #4]
 801272c:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8012730:	4628      	mov	r0, r5
 8012732:	f7ff fefb 	bl	801252c <__cvt>
 8012736:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801273a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801273c:	4680      	mov	r8, r0
 801273e:	d129      	bne.n	8012794 <_printf_float+0x14c>
 8012740:	1cc8      	adds	r0, r1, #3
 8012742:	db02      	blt.n	801274a <_printf_float+0x102>
 8012744:	6863      	ldr	r3, [r4, #4]
 8012746:	4299      	cmp	r1, r3
 8012748:	dd41      	ble.n	80127ce <_printf_float+0x186>
 801274a:	f1a9 0902 	sub.w	r9, r9, #2
 801274e:	fa5f f989 	uxtb.w	r9, r9
 8012752:	3901      	subs	r1, #1
 8012754:	464a      	mov	r2, r9
 8012756:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 801275a:	9109      	str	r1, [sp, #36]	@ 0x24
 801275c:	f7ff ff3a 	bl	80125d4 <__exponent>
 8012760:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8012762:	1813      	adds	r3, r2, r0
 8012764:	2a01      	cmp	r2, #1
 8012766:	4682      	mov	sl, r0
 8012768:	6123      	str	r3, [r4, #16]
 801276a:	dc02      	bgt.n	8012772 <_printf_float+0x12a>
 801276c:	6822      	ldr	r2, [r4, #0]
 801276e:	07d2      	lsls	r2, r2, #31
 8012770:	d501      	bpl.n	8012776 <_printf_float+0x12e>
 8012772:	3301      	adds	r3, #1
 8012774:	6123      	str	r3, [r4, #16]
 8012776:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 801277a:	2b00      	cmp	r3, #0
 801277c:	d0a6      	beq.n	80126cc <_printf_float+0x84>
 801277e:	232d      	movs	r3, #45	@ 0x2d
 8012780:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012784:	e7a2      	b.n	80126cc <_printf_float+0x84>
 8012786:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801278a:	d1c4      	bne.n	8012716 <_printf_float+0xce>
 801278c:	2b00      	cmp	r3, #0
 801278e:	d1c2      	bne.n	8012716 <_printf_float+0xce>
 8012790:	2301      	movs	r3, #1
 8012792:	e7bf      	b.n	8012714 <_printf_float+0xcc>
 8012794:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8012798:	d9db      	bls.n	8012752 <_printf_float+0x10a>
 801279a:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 801279e:	d118      	bne.n	80127d2 <_printf_float+0x18a>
 80127a0:	2900      	cmp	r1, #0
 80127a2:	6863      	ldr	r3, [r4, #4]
 80127a4:	dd0b      	ble.n	80127be <_printf_float+0x176>
 80127a6:	6121      	str	r1, [r4, #16]
 80127a8:	b913      	cbnz	r3, 80127b0 <_printf_float+0x168>
 80127aa:	6822      	ldr	r2, [r4, #0]
 80127ac:	07d0      	lsls	r0, r2, #31
 80127ae:	d502      	bpl.n	80127b6 <_printf_float+0x16e>
 80127b0:	3301      	adds	r3, #1
 80127b2:	440b      	add	r3, r1
 80127b4:	6123      	str	r3, [r4, #16]
 80127b6:	65a1      	str	r1, [r4, #88]	@ 0x58
 80127b8:	f04f 0a00 	mov.w	sl, #0
 80127bc:	e7db      	b.n	8012776 <_printf_float+0x12e>
 80127be:	b913      	cbnz	r3, 80127c6 <_printf_float+0x17e>
 80127c0:	6822      	ldr	r2, [r4, #0]
 80127c2:	07d2      	lsls	r2, r2, #31
 80127c4:	d501      	bpl.n	80127ca <_printf_float+0x182>
 80127c6:	3302      	adds	r3, #2
 80127c8:	e7f4      	b.n	80127b4 <_printf_float+0x16c>
 80127ca:	2301      	movs	r3, #1
 80127cc:	e7f2      	b.n	80127b4 <_printf_float+0x16c>
 80127ce:	f04f 0967 	mov.w	r9, #103	@ 0x67
 80127d2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80127d4:	4299      	cmp	r1, r3
 80127d6:	db05      	blt.n	80127e4 <_printf_float+0x19c>
 80127d8:	6823      	ldr	r3, [r4, #0]
 80127da:	6121      	str	r1, [r4, #16]
 80127dc:	07d8      	lsls	r0, r3, #31
 80127de:	d5ea      	bpl.n	80127b6 <_printf_float+0x16e>
 80127e0:	1c4b      	adds	r3, r1, #1
 80127e2:	e7e7      	b.n	80127b4 <_printf_float+0x16c>
 80127e4:	2900      	cmp	r1, #0
 80127e6:	bfd4      	ite	le
 80127e8:	f1c1 0202 	rsble	r2, r1, #2
 80127ec:	2201      	movgt	r2, #1
 80127ee:	4413      	add	r3, r2
 80127f0:	e7e0      	b.n	80127b4 <_printf_float+0x16c>
 80127f2:	6823      	ldr	r3, [r4, #0]
 80127f4:	055a      	lsls	r2, r3, #21
 80127f6:	d407      	bmi.n	8012808 <_printf_float+0x1c0>
 80127f8:	6923      	ldr	r3, [r4, #16]
 80127fa:	4642      	mov	r2, r8
 80127fc:	4631      	mov	r1, r6
 80127fe:	4628      	mov	r0, r5
 8012800:	47b8      	blx	r7
 8012802:	3001      	adds	r0, #1
 8012804:	d12a      	bne.n	801285c <_printf_float+0x214>
 8012806:	e76b      	b.n	80126e0 <_printf_float+0x98>
 8012808:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 801280c:	f240 80e0 	bls.w	80129d0 <_printf_float+0x388>
 8012810:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8012814:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8012818:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801281c:	d133      	bne.n	8012886 <_printf_float+0x23e>
 801281e:	4a38      	ldr	r2, [pc, #224]	@ (8012900 <_printf_float+0x2b8>)
 8012820:	2301      	movs	r3, #1
 8012822:	4631      	mov	r1, r6
 8012824:	4628      	mov	r0, r5
 8012826:	47b8      	blx	r7
 8012828:	3001      	adds	r0, #1
 801282a:	f43f af59 	beq.w	80126e0 <_printf_float+0x98>
 801282e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8012832:	4543      	cmp	r3, r8
 8012834:	db02      	blt.n	801283c <_printf_float+0x1f4>
 8012836:	6823      	ldr	r3, [r4, #0]
 8012838:	07d8      	lsls	r0, r3, #31
 801283a:	d50f      	bpl.n	801285c <_printf_float+0x214>
 801283c:	9b05      	ldr	r3, [sp, #20]
 801283e:	465a      	mov	r2, fp
 8012840:	4631      	mov	r1, r6
 8012842:	4628      	mov	r0, r5
 8012844:	47b8      	blx	r7
 8012846:	3001      	adds	r0, #1
 8012848:	f43f af4a 	beq.w	80126e0 <_printf_float+0x98>
 801284c:	f04f 0900 	mov.w	r9, #0
 8012850:	f108 38ff 	add.w	r8, r8, #4294967295
 8012854:	f104 0a1a 	add.w	sl, r4, #26
 8012858:	45c8      	cmp	r8, r9
 801285a:	dc09      	bgt.n	8012870 <_printf_float+0x228>
 801285c:	6823      	ldr	r3, [r4, #0]
 801285e:	079b      	lsls	r3, r3, #30
 8012860:	f100 8107 	bmi.w	8012a72 <_printf_float+0x42a>
 8012864:	68e0      	ldr	r0, [r4, #12]
 8012866:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012868:	4298      	cmp	r0, r3
 801286a:	bfb8      	it	lt
 801286c:	4618      	movlt	r0, r3
 801286e:	e739      	b.n	80126e4 <_printf_float+0x9c>
 8012870:	2301      	movs	r3, #1
 8012872:	4652      	mov	r2, sl
 8012874:	4631      	mov	r1, r6
 8012876:	4628      	mov	r0, r5
 8012878:	47b8      	blx	r7
 801287a:	3001      	adds	r0, #1
 801287c:	f43f af30 	beq.w	80126e0 <_printf_float+0x98>
 8012880:	f109 0901 	add.w	r9, r9, #1
 8012884:	e7e8      	b.n	8012858 <_printf_float+0x210>
 8012886:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012888:	2b00      	cmp	r3, #0
 801288a:	dc3b      	bgt.n	8012904 <_printf_float+0x2bc>
 801288c:	4a1c      	ldr	r2, [pc, #112]	@ (8012900 <_printf_float+0x2b8>)
 801288e:	2301      	movs	r3, #1
 8012890:	4631      	mov	r1, r6
 8012892:	4628      	mov	r0, r5
 8012894:	47b8      	blx	r7
 8012896:	3001      	adds	r0, #1
 8012898:	f43f af22 	beq.w	80126e0 <_printf_float+0x98>
 801289c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80128a0:	ea59 0303 	orrs.w	r3, r9, r3
 80128a4:	d102      	bne.n	80128ac <_printf_float+0x264>
 80128a6:	6823      	ldr	r3, [r4, #0]
 80128a8:	07d9      	lsls	r1, r3, #31
 80128aa:	d5d7      	bpl.n	801285c <_printf_float+0x214>
 80128ac:	9b05      	ldr	r3, [sp, #20]
 80128ae:	465a      	mov	r2, fp
 80128b0:	4631      	mov	r1, r6
 80128b2:	4628      	mov	r0, r5
 80128b4:	47b8      	blx	r7
 80128b6:	3001      	adds	r0, #1
 80128b8:	f43f af12 	beq.w	80126e0 <_printf_float+0x98>
 80128bc:	f04f 0a00 	mov.w	sl, #0
 80128c0:	f104 0b1a 	add.w	fp, r4, #26
 80128c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80128c6:	425b      	negs	r3, r3
 80128c8:	4553      	cmp	r3, sl
 80128ca:	dc01      	bgt.n	80128d0 <_printf_float+0x288>
 80128cc:	464b      	mov	r3, r9
 80128ce:	e794      	b.n	80127fa <_printf_float+0x1b2>
 80128d0:	2301      	movs	r3, #1
 80128d2:	465a      	mov	r2, fp
 80128d4:	4631      	mov	r1, r6
 80128d6:	4628      	mov	r0, r5
 80128d8:	47b8      	blx	r7
 80128da:	3001      	adds	r0, #1
 80128dc:	f43f af00 	beq.w	80126e0 <_printf_float+0x98>
 80128e0:	f10a 0a01 	add.w	sl, sl, #1
 80128e4:	e7ee      	b.n	80128c4 <_printf_float+0x27c>
 80128e6:	bf00      	nop
 80128e8:	ffffffff 	.word	0xffffffff
 80128ec:	7fefffff 	.word	0x7fefffff
 80128f0:	0801522c 	.word	0x0801522c
 80128f4:	08015230 	.word	0x08015230
 80128f8:	08015234 	.word	0x08015234
 80128fc:	08015238 	.word	0x08015238
 8012900:	0801523c 	.word	0x0801523c
 8012904:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8012906:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801290a:	4553      	cmp	r3, sl
 801290c:	bfa8      	it	ge
 801290e:	4653      	movge	r3, sl
 8012910:	2b00      	cmp	r3, #0
 8012912:	4699      	mov	r9, r3
 8012914:	dc37      	bgt.n	8012986 <_printf_float+0x33e>
 8012916:	2300      	movs	r3, #0
 8012918:	9307      	str	r3, [sp, #28]
 801291a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801291e:	f104 021a 	add.w	r2, r4, #26
 8012922:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8012924:	9907      	ldr	r1, [sp, #28]
 8012926:	9306      	str	r3, [sp, #24]
 8012928:	eba3 0309 	sub.w	r3, r3, r9
 801292c:	428b      	cmp	r3, r1
 801292e:	dc31      	bgt.n	8012994 <_printf_float+0x34c>
 8012930:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012932:	459a      	cmp	sl, r3
 8012934:	dc3b      	bgt.n	80129ae <_printf_float+0x366>
 8012936:	6823      	ldr	r3, [r4, #0]
 8012938:	07da      	lsls	r2, r3, #31
 801293a:	d438      	bmi.n	80129ae <_printf_float+0x366>
 801293c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801293e:	ebaa 0903 	sub.w	r9, sl, r3
 8012942:	9b06      	ldr	r3, [sp, #24]
 8012944:	ebaa 0303 	sub.w	r3, sl, r3
 8012948:	4599      	cmp	r9, r3
 801294a:	bfa8      	it	ge
 801294c:	4699      	movge	r9, r3
 801294e:	f1b9 0f00 	cmp.w	r9, #0
 8012952:	dc34      	bgt.n	80129be <_printf_float+0x376>
 8012954:	f04f 0800 	mov.w	r8, #0
 8012958:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801295c:	f104 0b1a 	add.w	fp, r4, #26
 8012960:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012962:	ebaa 0303 	sub.w	r3, sl, r3
 8012966:	eba3 0309 	sub.w	r3, r3, r9
 801296a:	4543      	cmp	r3, r8
 801296c:	f77f af76 	ble.w	801285c <_printf_float+0x214>
 8012970:	2301      	movs	r3, #1
 8012972:	465a      	mov	r2, fp
 8012974:	4631      	mov	r1, r6
 8012976:	4628      	mov	r0, r5
 8012978:	47b8      	blx	r7
 801297a:	3001      	adds	r0, #1
 801297c:	f43f aeb0 	beq.w	80126e0 <_printf_float+0x98>
 8012980:	f108 0801 	add.w	r8, r8, #1
 8012984:	e7ec      	b.n	8012960 <_printf_float+0x318>
 8012986:	4642      	mov	r2, r8
 8012988:	4631      	mov	r1, r6
 801298a:	4628      	mov	r0, r5
 801298c:	47b8      	blx	r7
 801298e:	3001      	adds	r0, #1
 8012990:	d1c1      	bne.n	8012916 <_printf_float+0x2ce>
 8012992:	e6a5      	b.n	80126e0 <_printf_float+0x98>
 8012994:	2301      	movs	r3, #1
 8012996:	4631      	mov	r1, r6
 8012998:	4628      	mov	r0, r5
 801299a:	9206      	str	r2, [sp, #24]
 801299c:	47b8      	blx	r7
 801299e:	3001      	adds	r0, #1
 80129a0:	f43f ae9e 	beq.w	80126e0 <_printf_float+0x98>
 80129a4:	9b07      	ldr	r3, [sp, #28]
 80129a6:	9a06      	ldr	r2, [sp, #24]
 80129a8:	3301      	adds	r3, #1
 80129aa:	9307      	str	r3, [sp, #28]
 80129ac:	e7b9      	b.n	8012922 <_printf_float+0x2da>
 80129ae:	9b05      	ldr	r3, [sp, #20]
 80129b0:	465a      	mov	r2, fp
 80129b2:	4631      	mov	r1, r6
 80129b4:	4628      	mov	r0, r5
 80129b6:	47b8      	blx	r7
 80129b8:	3001      	adds	r0, #1
 80129ba:	d1bf      	bne.n	801293c <_printf_float+0x2f4>
 80129bc:	e690      	b.n	80126e0 <_printf_float+0x98>
 80129be:	9a06      	ldr	r2, [sp, #24]
 80129c0:	464b      	mov	r3, r9
 80129c2:	4442      	add	r2, r8
 80129c4:	4631      	mov	r1, r6
 80129c6:	4628      	mov	r0, r5
 80129c8:	47b8      	blx	r7
 80129ca:	3001      	adds	r0, #1
 80129cc:	d1c2      	bne.n	8012954 <_printf_float+0x30c>
 80129ce:	e687      	b.n	80126e0 <_printf_float+0x98>
 80129d0:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 80129d4:	f1b9 0f01 	cmp.w	r9, #1
 80129d8:	dc01      	bgt.n	80129de <_printf_float+0x396>
 80129da:	07db      	lsls	r3, r3, #31
 80129dc:	d536      	bpl.n	8012a4c <_printf_float+0x404>
 80129de:	2301      	movs	r3, #1
 80129e0:	4642      	mov	r2, r8
 80129e2:	4631      	mov	r1, r6
 80129e4:	4628      	mov	r0, r5
 80129e6:	47b8      	blx	r7
 80129e8:	3001      	adds	r0, #1
 80129ea:	f43f ae79 	beq.w	80126e0 <_printf_float+0x98>
 80129ee:	9b05      	ldr	r3, [sp, #20]
 80129f0:	465a      	mov	r2, fp
 80129f2:	4631      	mov	r1, r6
 80129f4:	4628      	mov	r0, r5
 80129f6:	47b8      	blx	r7
 80129f8:	3001      	adds	r0, #1
 80129fa:	f43f ae71 	beq.w	80126e0 <_printf_float+0x98>
 80129fe:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8012a02:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8012a06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a0a:	f109 39ff 	add.w	r9, r9, #4294967295
 8012a0e:	d018      	beq.n	8012a42 <_printf_float+0x3fa>
 8012a10:	464b      	mov	r3, r9
 8012a12:	f108 0201 	add.w	r2, r8, #1
 8012a16:	4631      	mov	r1, r6
 8012a18:	4628      	mov	r0, r5
 8012a1a:	47b8      	blx	r7
 8012a1c:	3001      	adds	r0, #1
 8012a1e:	d10c      	bne.n	8012a3a <_printf_float+0x3f2>
 8012a20:	e65e      	b.n	80126e0 <_printf_float+0x98>
 8012a22:	2301      	movs	r3, #1
 8012a24:	465a      	mov	r2, fp
 8012a26:	4631      	mov	r1, r6
 8012a28:	4628      	mov	r0, r5
 8012a2a:	47b8      	blx	r7
 8012a2c:	3001      	adds	r0, #1
 8012a2e:	f43f ae57 	beq.w	80126e0 <_printf_float+0x98>
 8012a32:	f108 0801 	add.w	r8, r8, #1
 8012a36:	45c8      	cmp	r8, r9
 8012a38:	dbf3      	blt.n	8012a22 <_printf_float+0x3da>
 8012a3a:	4653      	mov	r3, sl
 8012a3c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8012a40:	e6dc      	b.n	80127fc <_printf_float+0x1b4>
 8012a42:	f04f 0800 	mov.w	r8, #0
 8012a46:	f104 0b1a 	add.w	fp, r4, #26
 8012a4a:	e7f4      	b.n	8012a36 <_printf_float+0x3ee>
 8012a4c:	2301      	movs	r3, #1
 8012a4e:	4642      	mov	r2, r8
 8012a50:	e7e1      	b.n	8012a16 <_printf_float+0x3ce>
 8012a52:	2301      	movs	r3, #1
 8012a54:	464a      	mov	r2, r9
 8012a56:	4631      	mov	r1, r6
 8012a58:	4628      	mov	r0, r5
 8012a5a:	47b8      	blx	r7
 8012a5c:	3001      	adds	r0, #1
 8012a5e:	f43f ae3f 	beq.w	80126e0 <_printf_float+0x98>
 8012a62:	f108 0801 	add.w	r8, r8, #1
 8012a66:	68e3      	ldr	r3, [r4, #12]
 8012a68:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8012a6a:	1a5b      	subs	r3, r3, r1
 8012a6c:	4543      	cmp	r3, r8
 8012a6e:	dcf0      	bgt.n	8012a52 <_printf_float+0x40a>
 8012a70:	e6f8      	b.n	8012864 <_printf_float+0x21c>
 8012a72:	f04f 0800 	mov.w	r8, #0
 8012a76:	f104 0919 	add.w	r9, r4, #25
 8012a7a:	e7f4      	b.n	8012a66 <_printf_float+0x41e>

08012a7c <_printf_common>:
 8012a7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012a80:	4616      	mov	r6, r2
 8012a82:	4698      	mov	r8, r3
 8012a84:	688a      	ldr	r2, [r1, #8]
 8012a86:	690b      	ldr	r3, [r1, #16]
 8012a88:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8012a8c:	4293      	cmp	r3, r2
 8012a8e:	bfb8      	it	lt
 8012a90:	4613      	movlt	r3, r2
 8012a92:	6033      	str	r3, [r6, #0]
 8012a94:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8012a98:	4607      	mov	r7, r0
 8012a9a:	460c      	mov	r4, r1
 8012a9c:	b10a      	cbz	r2, 8012aa2 <_printf_common+0x26>
 8012a9e:	3301      	adds	r3, #1
 8012aa0:	6033      	str	r3, [r6, #0]
 8012aa2:	6823      	ldr	r3, [r4, #0]
 8012aa4:	0699      	lsls	r1, r3, #26
 8012aa6:	bf42      	ittt	mi
 8012aa8:	6833      	ldrmi	r3, [r6, #0]
 8012aaa:	3302      	addmi	r3, #2
 8012aac:	6033      	strmi	r3, [r6, #0]
 8012aae:	6825      	ldr	r5, [r4, #0]
 8012ab0:	f015 0506 	ands.w	r5, r5, #6
 8012ab4:	d106      	bne.n	8012ac4 <_printf_common+0x48>
 8012ab6:	f104 0a19 	add.w	sl, r4, #25
 8012aba:	68e3      	ldr	r3, [r4, #12]
 8012abc:	6832      	ldr	r2, [r6, #0]
 8012abe:	1a9b      	subs	r3, r3, r2
 8012ac0:	42ab      	cmp	r3, r5
 8012ac2:	dc26      	bgt.n	8012b12 <_printf_common+0x96>
 8012ac4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8012ac8:	6822      	ldr	r2, [r4, #0]
 8012aca:	3b00      	subs	r3, #0
 8012acc:	bf18      	it	ne
 8012ace:	2301      	movne	r3, #1
 8012ad0:	0692      	lsls	r2, r2, #26
 8012ad2:	d42b      	bmi.n	8012b2c <_printf_common+0xb0>
 8012ad4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8012ad8:	4641      	mov	r1, r8
 8012ada:	4638      	mov	r0, r7
 8012adc:	47c8      	blx	r9
 8012ade:	3001      	adds	r0, #1
 8012ae0:	d01e      	beq.n	8012b20 <_printf_common+0xa4>
 8012ae2:	6823      	ldr	r3, [r4, #0]
 8012ae4:	6922      	ldr	r2, [r4, #16]
 8012ae6:	f003 0306 	and.w	r3, r3, #6
 8012aea:	2b04      	cmp	r3, #4
 8012aec:	bf02      	ittt	eq
 8012aee:	68e5      	ldreq	r5, [r4, #12]
 8012af0:	6833      	ldreq	r3, [r6, #0]
 8012af2:	1aed      	subeq	r5, r5, r3
 8012af4:	68a3      	ldr	r3, [r4, #8]
 8012af6:	bf0c      	ite	eq
 8012af8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012afc:	2500      	movne	r5, #0
 8012afe:	4293      	cmp	r3, r2
 8012b00:	bfc4      	itt	gt
 8012b02:	1a9b      	subgt	r3, r3, r2
 8012b04:	18ed      	addgt	r5, r5, r3
 8012b06:	2600      	movs	r6, #0
 8012b08:	341a      	adds	r4, #26
 8012b0a:	42b5      	cmp	r5, r6
 8012b0c:	d11a      	bne.n	8012b44 <_printf_common+0xc8>
 8012b0e:	2000      	movs	r0, #0
 8012b10:	e008      	b.n	8012b24 <_printf_common+0xa8>
 8012b12:	2301      	movs	r3, #1
 8012b14:	4652      	mov	r2, sl
 8012b16:	4641      	mov	r1, r8
 8012b18:	4638      	mov	r0, r7
 8012b1a:	47c8      	blx	r9
 8012b1c:	3001      	adds	r0, #1
 8012b1e:	d103      	bne.n	8012b28 <_printf_common+0xac>
 8012b20:	f04f 30ff 	mov.w	r0, #4294967295
 8012b24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012b28:	3501      	adds	r5, #1
 8012b2a:	e7c6      	b.n	8012aba <_printf_common+0x3e>
 8012b2c:	18e1      	adds	r1, r4, r3
 8012b2e:	1c5a      	adds	r2, r3, #1
 8012b30:	2030      	movs	r0, #48	@ 0x30
 8012b32:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8012b36:	4422      	add	r2, r4
 8012b38:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8012b3c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8012b40:	3302      	adds	r3, #2
 8012b42:	e7c7      	b.n	8012ad4 <_printf_common+0x58>
 8012b44:	2301      	movs	r3, #1
 8012b46:	4622      	mov	r2, r4
 8012b48:	4641      	mov	r1, r8
 8012b4a:	4638      	mov	r0, r7
 8012b4c:	47c8      	blx	r9
 8012b4e:	3001      	adds	r0, #1
 8012b50:	d0e6      	beq.n	8012b20 <_printf_common+0xa4>
 8012b52:	3601      	adds	r6, #1
 8012b54:	e7d9      	b.n	8012b0a <_printf_common+0x8e>
	...

08012b58 <_printf_i>:
 8012b58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012b5c:	7e0f      	ldrb	r7, [r1, #24]
 8012b5e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8012b60:	2f78      	cmp	r7, #120	@ 0x78
 8012b62:	4691      	mov	r9, r2
 8012b64:	4680      	mov	r8, r0
 8012b66:	460c      	mov	r4, r1
 8012b68:	469a      	mov	sl, r3
 8012b6a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8012b6e:	d807      	bhi.n	8012b80 <_printf_i+0x28>
 8012b70:	2f62      	cmp	r7, #98	@ 0x62
 8012b72:	d80a      	bhi.n	8012b8a <_printf_i+0x32>
 8012b74:	2f00      	cmp	r7, #0
 8012b76:	f000 80d2 	beq.w	8012d1e <_printf_i+0x1c6>
 8012b7a:	2f58      	cmp	r7, #88	@ 0x58
 8012b7c:	f000 80b9 	beq.w	8012cf2 <_printf_i+0x19a>
 8012b80:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8012b84:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8012b88:	e03a      	b.n	8012c00 <_printf_i+0xa8>
 8012b8a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8012b8e:	2b15      	cmp	r3, #21
 8012b90:	d8f6      	bhi.n	8012b80 <_printf_i+0x28>
 8012b92:	a101      	add	r1, pc, #4	@ (adr r1, 8012b98 <_printf_i+0x40>)
 8012b94:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012b98:	08012bf1 	.word	0x08012bf1
 8012b9c:	08012c05 	.word	0x08012c05
 8012ba0:	08012b81 	.word	0x08012b81
 8012ba4:	08012b81 	.word	0x08012b81
 8012ba8:	08012b81 	.word	0x08012b81
 8012bac:	08012b81 	.word	0x08012b81
 8012bb0:	08012c05 	.word	0x08012c05
 8012bb4:	08012b81 	.word	0x08012b81
 8012bb8:	08012b81 	.word	0x08012b81
 8012bbc:	08012b81 	.word	0x08012b81
 8012bc0:	08012b81 	.word	0x08012b81
 8012bc4:	08012d05 	.word	0x08012d05
 8012bc8:	08012c2f 	.word	0x08012c2f
 8012bcc:	08012cbf 	.word	0x08012cbf
 8012bd0:	08012b81 	.word	0x08012b81
 8012bd4:	08012b81 	.word	0x08012b81
 8012bd8:	08012d27 	.word	0x08012d27
 8012bdc:	08012b81 	.word	0x08012b81
 8012be0:	08012c2f 	.word	0x08012c2f
 8012be4:	08012b81 	.word	0x08012b81
 8012be8:	08012b81 	.word	0x08012b81
 8012bec:	08012cc7 	.word	0x08012cc7
 8012bf0:	6833      	ldr	r3, [r6, #0]
 8012bf2:	1d1a      	adds	r2, r3, #4
 8012bf4:	681b      	ldr	r3, [r3, #0]
 8012bf6:	6032      	str	r2, [r6, #0]
 8012bf8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8012bfc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8012c00:	2301      	movs	r3, #1
 8012c02:	e09d      	b.n	8012d40 <_printf_i+0x1e8>
 8012c04:	6833      	ldr	r3, [r6, #0]
 8012c06:	6820      	ldr	r0, [r4, #0]
 8012c08:	1d19      	adds	r1, r3, #4
 8012c0a:	6031      	str	r1, [r6, #0]
 8012c0c:	0606      	lsls	r6, r0, #24
 8012c0e:	d501      	bpl.n	8012c14 <_printf_i+0xbc>
 8012c10:	681d      	ldr	r5, [r3, #0]
 8012c12:	e003      	b.n	8012c1c <_printf_i+0xc4>
 8012c14:	0645      	lsls	r5, r0, #25
 8012c16:	d5fb      	bpl.n	8012c10 <_printf_i+0xb8>
 8012c18:	f9b3 5000 	ldrsh.w	r5, [r3]
 8012c1c:	2d00      	cmp	r5, #0
 8012c1e:	da03      	bge.n	8012c28 <_printf_i+0xd0>
 8012c20:	232d      	movs	r3, #45	@ 0x2d
 8012c22:	426d      	negs	r5, r5
 8012c24:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012c28:	4859      	ldr	r0, [pc, #356]	@ (8012d90 <_printf_i+0x238>)
 8012c2a:	230a      	movs	r3, #10
 8012c2c:	e011      	b.n	8012c52 <_printf_i+0xfa>
 8012c2e:	6821      	ldr	r1, [r4, #0]
 8012c30:	6833      	ldr	r3, [r6, #0]
 8012c32:	0608      	lsls	r0, r1, #24
 8012c34:	f853 5b04 	ldr.w	r5, [r3], #4
 8012c38:	d402      	bmi.n	8012c40 <_printf_i+0xe8>
 8012c3a:	0649      	lsls	r1, r1, #25
 8012c3c:	bf48      	it	mi
 8012c3e:	b2ad      	uxthmi	r5, r5
 8012c40:	2f6f      	cmp	r7, #111	@ 0x6f
 8012c42:	4853      	ldr	r0, [pc, #332]	@ (8012d90 <_printf_i+0x238>)
 8012c44:	6033      	str	r3, [r6, #0]
 8012c46:	bf14      	ite	ne
 8012c48:	230a      	movne	r3, #10
 8012c4a:	2308      	moveq	r3, #8
 8012c4c:	2100      	movs	r1, #0
 8012c4e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8012c52:	6866      	ldr	r6, [r4, #4]
 8012c54:	60a6      	str	r6, [r4, #8]
 8012c56:	2e00      	cmp	r6, #0
 8012c58:	bfa2      	ittt	ge
 8012c5a:	6821      	ldrge	r1, [r4, #0]
 8012c5c:	f021 0104 	bicge.w	r1, r1, #4
 8012c60:	6021      	strge	r1, [r4, #0]
 8012c62:	b90d      	cbnz	r5, 8012c68 <_printf_i+0x110>
 8012c64:	2e00      	cmp	r6, #0
 8012c66:	d04b      	beq.n	8012d00 <_printf_i+0x1a8>
 8012c68:	4616      	mov	r6, r2
 8012c6a:	fbb5 f1f3 	udiv	r1, r5, r3
 8012c6e:	fb03 5711 	mls	r7, r3, r1, r5
 8012c72:	5dc7      	ldrb	r7, [r0, r7]
 8012c74:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8012c78:	462f      	mov	r7, r5
 8012c7a:	42bb      	cmp	r3, r7
 8012c7c:	460d      	mov	r5, r1
 8012c7e:	d9f4      	bls.n	8012c6a <_printf_i+0x112>
 8012c80:	2b08      	cmp	r3, #8
 8012c82:	d10b      	bne.n	8012c9c <_printf_i+0x144>
 8012c84:	6823      	ldr	r3, [r4, #0]
 8012c86:	07df      	lsls	r7, r3, #31
 8012c88:	d508      	bpl.n	8012c9c <_printf_i+0x144>
 8012c8a:	6923      	ldr	r3, [r4, #16]
 8012c8c:	6861      	ldr	r1, [r4, #4]
 8012c8e:	4299      	cmp	r1, r3
 8012c90:	bfde      	ittt	le
 8012c92:	2330      	movle	r3, #48	@ 0x30
 8012c94:	f806 3c01 	strble.w	r3, [r6, #-1]
 8012c98:	f106 36ff 	addle.w	r6, r6, #4294967295
 8012c9c:	1b92      	subs	r2, r2, r6
 8012c9e:	6122      	str	r2, [r4, #16]
 8012ca0:	f8cd a000 	str.w	sl, [sp]
 8012ca4:	464b      	mov	r3, r9
 8012ca6:	aa03      	add	r2, sp, #12
 8012ca8:	4621      	mov	r1, r4
 8012caa:	4640      	mov	r0, r8
 8012cac:	f7ff fee6 	bl	8012a7c <_printf_common>
 8012cb0:	3001      	adds	r0, #1
 8012cb2:	d14a      	bne.n	8012d4a <_printf_i+0x1f2>
 8012cb4:	f04f 30ff 	mov.w	r0, #4294967295
 8012cb8:	b004      	add	sp, #16
 8012cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012cbe:	6823      	ldr	r3, [r4, #0]
 8012cc0:	f043 0320 	orr.w	r3, r3, #32
 8012cc4:	6023      	str	r3, [r4, #0]
 8012cc6:	4833      	ldr	r0, [pc, #204]	@ (8012d94 <_printf_i+0x23c>)
 8012cc8:	2778      	movs	r7, #120	@ 0x78
 8012cca:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8012cce:	6823      	ldr	r3, [r4, #0]
 8012cd0:	6831      	ldr	r1, [r6, #0]
 8012cd2:	061f      	lsls	r7, r3, #24
 8012cd4:	f851 5b04 	ldr.w	r5, [r1], #4
 8012cd8:	d402      	bmi.n	8012ce0 <_printf_i+0x188>
 8012cda:	065f      	lsls	r7, r3, #25
 8012cdc:	bf48      	it	mi
 8012cde:	b2ad      	uxthmi	r5, r5
 8012ce0:	6031      	str	r1, [r6, #0]
 8012ce2:	07d9      	lsls	r1, r3, #31
 8012ce4:	bf44      	itt	mi
 8012ce6:	f043 0320 	orrmi.w	r3, r3, #32
 8012cea:	6023      	strmi	r3, [r4, #0]
 8012cec:	b11d      	cbz	r5, 8012cf6 <_printf_i+0x19e>
 8012cee:	2310      	movs	r3, #16
 8012cf0:	e7ac      	b.n	8012c4c <_printf_i+0xf4>
 8012cf2:	4827      	ldr	r0, [pc, #156]	@ (8012d90 <_printf_i+0x238>)
 8012cf4:	e7e9      	b.n	8012cca <_printf_i+0x172>
 8012cf6:	6823      	ldr	r3, [r4, #0]
 8012cf8:	f023 0320 	bic.w	r3, r3, #32
 8012cfc:	6023      	str	r3, [r4, #0]
 8012cfe:	e7f6      	b.n	8012cee <_printf_i+0x196>
 8012d00:	4616      	mov	r6, r2
 8012d02:	e7bd      	b.n	8012c80 <_printf_i+0x128>
 8012d04:	6833      	ldr	r3, [r6, #0]
 8012d06:	6825      	ldr	r5, [r4, #0]
 8012d08:	6961      	ldr	r1, [r4, #20]
 8012d0a:	1d18      	adds	r0, r3, #4
 8012d0c:	6030      	str	r0, [r6, #0]
 8012d0e:	062e      	lsls	r6, r5, #24
 8012d10:	681b      	ldr	r3, [r3, #0]
 8012d12:	d501      	bpl.n	8012d18 <_printf_i+0x1c0>
 8012d14:	6019      	str	r1, [r3, #0]
 8012d16:	e002      	b.n	8012d1e <_printf_i+0x1c6>
 8012d18:	0668      	lsls	r0, r5, #25
 8012d1a:	d5fb      	bpl.n	8012d14 <_printf_i+0x1bc>
 8012d1c:	8019      	strh	r1, [r3, #0]
 8012d1e:	2300      	movs	r3, #0
 8012d20:	6123      	str	r3, [r4, #16]
 8012d22:	4616      	mov	r6, r2
 8012d24:	e7bc      	b.n	8012ca0 <_printf_i+0x148>
 8012d26:	6833      	ldr	r3, [r6, #0]
 8012d28:	1d1a      	adds	r2, r3, #4
 8012d2a:	6032      	str	r2, [r6, #0]
 8012d2c:	681e      	ldr	r6, [r3, #0]
 8012d2e:	6862      	ldr	r2, [r4, #4]
 8012d30:	2100      	movs	r1, #0
 8012d32:	4630      	mov	r0, r6
 8012d34:	f7ed fad4 	bl	80002e0 <memchr>
 8012d38:	b108      	cbz	r0, 8012d3e <_printf_i+0x1e6>
 8012d3a:	1b80      	subs	r0, r0, r6
 8012d3c:	6060      	str	r0, [r4, #4]
 8012d3e:	6863      	ldr	r3, [r4, #4]
 8012d40:	6123      	str	r3, [r4, #16]
 8012d42:	2300      	movs	r3, #0
 8012d44:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012d48:	e7aa      	b.n	8012ca0 <_printf_i+0x148>
 8012d4a:	6923      	ldr	r3, [r4, #16]
 8012d4c:	4632      	mov	r2, r6
 8012d4e:	4649      	mov	r1, r9
 8012d50:	4640      	mov	r0, r8
 8012d52:	47d0      	blx	sl
 8012d54:	3001      	adds	r0, #1
 8012d56:	d0ad      	beq.n	8012cb4 <_printf_i+0x15c>
 8012d58:	6823      	ldr	r3, [r4, #0]
 8012d5a:	079b      	lsls	r3, r3, #30
 8012d5c:	d413      	bmi.n	8012d86 <_printf_i+0x22e>
 8012d5e:	68e0      	ldr	r0, [r4, #12]
 8012d60:	9b03      	ldr	r3, [sp, #12]
 8012d62:	4298      	cmp	r0, r3
 8012d64:	bfb8      	it	lt
 8012d66:	4618      	movlt	r0, r3
 8012d68:	e7a6      	b.n	8012cb8 <_printf_i+0x160>
 8012d6a:	2301      	movs	r3, #1
 8012d6c:	4632      	mov	r2, r6
 8012d6e:	4649      	mov	r1, r9
 8012d70:	4640      	mov	r0, r8
 8012d72:	47d0      	blx	sl
 8012d74:	3001      	adds	r0, #1
 8012d76:	d09d      	beq.n	8012cb4 <_printf_i+0x15c>
 8012d78:	3501      	adds	r5, #1
 8012d7a:	68e3      	ldr	r3, [r4, #12]
 8012d7c:	9903      	ldr	r1, [sp, #12]
 8012d7e:	1a5b      	subs	r3, r3, r1
 8012d80:	42ab      	cmp	r3, r5
 8012d82:	dcf2      	bgt.n	8012d6a <_printf_i+0x212>
 8012d84:	e7eb      	b.n	8012d5e <_printf_i+0x206>
 8012d86:	2500      	movs	r5, #0
 8012d88:	f104 0619 	add.w	r6, r4, #25
 8012d8c:	e7f5      	b.n	8012d7a <_printf_i+0x222>
 8012d8e:	bf00      	nop
 8012d90:	0801523e 	.word	0x0801523e
 8012d94:	0801524f 	.word	0x0801524f

08012d98 <std>:
 8012d98:	2300      	movs	r3, #0
 8012d9a:	b510      	push	{r4, lr}
 8012d9c:	4604      	mov	r4, r0
 8012d9e:	e9c0 3300 	strd	r3, r3, [r0]
 8012da2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012da6:	6083      	str	r3, [r0, #8]
 8012da8:	8181      	strh	r1, [r0, #12]
 8012daa:	6643      	str	r3, [r0, #100]	@ 0x64
 8012dac:	81c2      	strh	r2, [r0, #14]
 8012dae:	6183      	str	r3, [r0, #24]
 8012db0:	4619      	mov	r1, r3
 8012db2:	2208      	movs	r2, #8
 8012db4:	305c      	adds	r0, #92	@ 0x5c
 8012db6:	f000 f914 	bl	8012fe2 <memset>
 8012dba:	4b0d      	ldr	r3, [pc, #52]	@ (8012df0 <std+0x58>)
 8012dbc:	6263      	str	r3, [r4, #36]	@ 0x24
 8012dbe:	4b0d      	ldr	r3, [pc, #52]	@ (8012df4 <std+0x5c>)
 8012dc0:	62a3      	str	r3, [r4, #40]	@ 0x28
 8012dc2:	4b0d      	ldr	r3, [pc, #52]	@ (8012df8 <std+0x60>)
 8012dc4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8012dc6:	4b0d      	ldr	r3, [pc, #52]	@ (8012dfc <std+0x64>)
 8012dc8:	6323      	str	r3, [r4, #48]	@ 0x30
 8012dca:	4b0d      	ldr	r3, [pc, #52]	@ (8012e00 <std+0x68>)
 8012dcc:	6224      	str	r4, [r4, #32]
 8012dce:	429c      	cmp	r4, r3
 8012dd0:	d006      	beq.n	8012de0 <std+0x48>
 8012dd2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8012dd6:	4294      	cmp	r4, r2
 8012dd8:	d002      	beq.n	8012de0 <std+0x48>
 8012dda:	33d0      	adds	r3, #208	@ 0xd0
 8012ddc:	429c      	cmp	r4, r3
 8012dde:	d105      	bne.n	8012dec <std+0x54>
 8012de0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8012de4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012de8:	f000 b978 	b.w	80130dc <__retarget_lock_init_recursive>
 8012dec:	bd10      	pop	{r4, pc}
 8012dee:	bf00      	nop
 8012df0:	08012f5d 	.word	0x08012f5d
 8012df4:	08012f7f 	.word	0x08012f7f
 8012df8:	08012fb7 	.word	0x08012fb7
 8012dfc:	08012fdb 	.word	0x08012fdb
 8012e00:	2400265c 	.word	0x2400265c

08012e04 <stdio_exit_handler>:
 8012e04:	4a02      	ldr	r2, [pc, #8]	@ (8012e10 <stdio_exit_handler+0xc>)
 8012e06:	4903      	ldr	r1, [pc, #12]	@ (8012e14 <stdio_exit_handler+0x10>)
 8012e08:	4803      	ldr	r0, [pc, #12]	@ (8012e18 <stdio_exit_handler+0x14>)
 8012e0a:	f000 b869 	b.w	8012ee0 <_fwalk_sglue>
 8012e0e:	bf00      	nop
 8012e10:	24000120 	.word	0x24000120
 8012e14:	08014961 	.word	0x08014961
 8012e18:	24000130 	.word	0x24000130

08012e1c <cleanup_stdio>:
 8012e1c:	6841      	ldr	r1, [r0, #4]
 8012e1e:	4b0c      	ldr	r3, [pc, #48]	@ (8012e50 <cleanup_stdio+0x34>)
 8012e20:	4299      	cmp	r1, r3
 8012e22:	b510      	push	{r4, lr}
 8012e24:	4604      	mov	r4, r0
 8012e26:	d001      	beq.n	8012e2c <cleanup_stdio+0x10>
 8012e28:	f001 fd9a 	bl	8014960 <_fflush_r>
 8012e2c:	68a1      	ldr	r1, [r4, #8]
 8012e2e:	4b09      	ldr	r3, [pc, #36]	@ (8012e54 <cleanup_stdio+0x38>)
 8012e30:	4299      	cmp	r1, r3
 8012e32:	d002      	beq.n	8012e3a <cleanup_stdio+0x1e>
 8012e34:	4620      	mov	r0, r4
 8012e36:	f001 fd93 	bl	8014960 <_fflush_r>
 8012e3a:	68e1      	ldr	r1, [r4, #12]
 8012e3c:	4b06      	ldr	r3, [pc, #24]	@ (8012e58 <cleanup_stdio+0x3c>)
 8012e3e:	4299      	cmp	r1, r3
 8012e40:	d004      	beq.n	8012e4c <cleanup_stdio+0x30>
 8012e42:	4620      	mov	r0, r4
 8012e44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012e48:	f001 bd8a 	b.w	8014960 <_fflush_r>
 8012e4c:	bd10      	pop	{r4, pc}
 8012e4e:	bf00      	nop
 8012e50:	2400265c 	.word	0x2400265c
 8012e54:	240026c4 	.word	0x240026c4
 8012e58:	2400272c 	.word	0x2400272c

08012e5c <global_stdio_init.part.0>:
 8012e5c:	b510      	push	{r4, lr}
 8012e5e:	4b0b      	ldr	r3, [pc, #44]	@ (8012e8c <global_stdio_init.part.0+0x30>)
 8012e60:	4c0b      	ldr	r4, [pc, #44]	@ (8012e90 <global_stdio_init.part.0+0x34>)
 8012e62:	4a0c      	ldr	r2, [pc, #48]	@ (8012e94 <global_stdio_init.part.0+0x38>)
 8012e64:	601a      	str	r2, [r3, #0]
 8012e66:	4620      	mov	r0, r4
 8012e68:	2200      	movs	r2, #0
 8012e6a:	2104      	movs	r1, #4
 8012e6c:	f7ff ff94 	bl	8012d98 <std>
 8012e70:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8012e74:	2201      	movs	r2, #1
 8012e76:	2109      	movs	r1, #9
 8012e78:	f7ff ff8e 	bl	8012d98 <std>
 8012e7c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8012e80:	2202      	movs	r2, #2
 8012e82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012e86:	2112      	movs	r1, #18
 8012e88:	f7ff bf86 	b.w	8012d98 <std>
 8012e8c:	24002794 	.word	0x24002794
 8012e90:	2400265c 	.word	0x2400265c
 8012e94:	08012e05 	.word	0x08012e05

08012e98 <__sfp_lock_acquire>:
 8012e98:	4801      	ldr	r0, [pc, #4]	@ (8012ea0 <__sfp_lock_acquire+0x8>)
 8012e9a:	f000 b920 	b.w	80130de <__retarget_lock_acquire_recursive>
 8012e9e:	bf00      	nop
 8012ea0:	2400279d 	.word	0x2400279d

08012ea4 <__sfp_lock_release>:
 8012ea4:	4801      	ldr	r0, [pc, #4]	@ (8012eac <__sfp_lock_release+0x8>)
 8012ea6:	f000 b91b 	b.w	80130e0 <__retarget_lock_release_recursive>
 8012eaa:	bf00      	nop
 8012eac:	2400279d 	.word	0x2400279d

08012eb0 <__sinit>:
 8012eb0:	b510      	push	{r4, lr}
 8012eb2:	4604      	mov	r4, r0
 8012eb4:	f7ff fff0 	bl	8012e98 <__sfp_lock_acquire>
 8012eb8:	6a23      	ldr	r3, [r4, #32]
 8012eba:	b11b      	cbz	r3, 8012ec4 <__sinit+0x14>
 8012ebc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012ec0:	f7ff bff0 	b.w	8012ea4 <__sfp_lock_release>
 8012ec4:	4b04      	ldr	r3, [pc, #16]	@ (8012ed8 <__sinit+0x28>)
 8012ec6:	6223      	str	r3, [r4, #32]
 8012ec8:	4b04      	ldr	r3, [pc, #16]	@ (8012edc <__sinit+0x2c>)
 8012eca:	681b      	ldr	r3, [r3, #0]
 8012ecc:	2b00      	cmp	r3, #0
 8012ece:	d1f5      	bne.n	8012ebc <__sinit+0xc>
 8012ed0:	f7ff ffc4 	bl	8012e5c <global_stdio_init.part.0>
 8012ed4:	e7f2      	b.n	8012ebc <__sinit+0xc>
 8012ed6:	bf00      	nop
 8012ed8:	08012e1d 	.word	0x08012e1d
 8012edc:	24002794 	.word	0x24002794

08012ee0 <_fwalk_sglue>:
 8012ee0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012ee4:	4607      	mov	r7, r0
 8012ee6:	4688      	mov	r8, r1
 8012ee8:	4614      	mov	r4, r2
 8012eea:	2600      	movs	r6, #0
 8012eec:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8012ef0:	f1b9 0901 	subs.w	r9, r9, #1
 8012ef4:	d505      	bpl.n	8012f02 <_fwalk_sglue+0x22>
 8012ef6:	6824      	ldr	r4, [r4, #0]
 8012ef8:	2c00      	cmp	r4, #0
 8012efa:	d1f7      	bne.n	8012eec <_fwalk_sglue+0xc>
 8012efc:	4630      	mov	r0, r6
 8012efe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012f02:	89ab      	ldrh	r3, [r5, #12]
 8012f04:	2b01      	cmp	r3, #1
 8012f06:	d907      	bls.n	8012f18 <_fwalk_sglue+0x38>
 8012f08:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012f0c:	3301      	adds	r3, #1
 8012f0e:	d003      	beq.n	8012f18 <_fwalk_sglue+0x38>
 8012f10:	4629      	mov	r1, r5
 8012f12:	4638      	mov	r0, r7
 8012f14:	47c0      	blx	r8
 8012f16:	4306      	orrs	r6, r0
 8012f18:	3568      	adds	r5, #104	@ 0x68
 8012f1a:	e7e9      	b.n	8012ef0 <_fwalk_sglue+0x10>

08012f1c <siprintf>:
 8012f1c:	b40e      	push	{r1, r2, r3}
 8012f1e:	b500      	push	{lr}
 8012f20:	b09c      	sub	sp, #112	@ 0x70
 8012f22:	ab1d      	add	r3, sp, #116	@ 0x74
 8012f24:	9002      	str	r0, [sp, #8]
 8012f26:	9006      	str	r0, [sp, #24]
 8012f28:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8012f2c:	4809      	ldr	r0, [pc, #36]	@ (8012f54 <siprintf+0x38>)
 8012f2e:	9107      	str	r1, [sp, #28]
 8012f30:	9104      	str	r1, [sp, #16]
 8012f32:	4909      	ldr	r1, [pc, #36]	@ (8012f58 <siprintf+0x3c>)
 8012f34:	f853 2b04 	ldr.w	r2, [r3], #4
 8012f38:	9105      	str	r1, [sp, #20]
 8012f3a:	6800      	ldr	r0, [r0, #0]
 8012f3c:	9301      	str	r3, [sp, #4]
 8012f3e:	a902      	add	r1, sp, #8
 8012f40:	f001 fb8e 	bl	8014660 <_svfiprintf_r>
 8012f44:	9b02      	ldr	r3, [sp, #8]
 8012f46:	2200      	movs	r2, #0
 8012f48:	701a      	strb	r2, [r3, #0]
 8012f4a:	b01c      	add	sp, #112	@ 0x70
 8012f4c:	f85d eb04 	ldr.w	lr, [sp], #4
 8012f50:	b003      	add	sp, #12
 8012f52:	4770      	bx	lr
 8012f54:	2400012c 	.word	0x2400012c
 8012f58:	ffff0208 	.word	0xffff0208

08012f5c <__sread>:
 8012f5c:	b510      	push	{r4, lr}
 8012f5e:	460c      	mov	r4, r1
 8012f60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012f64:	f000 f86c 	bl	8013040 <_read_r>
 8012f68:	2800      	cmp	r0, #0
 8012f6a:	bfab      	itete	ge
 8012f6c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8012f6e:	89a3      	ldrhlt	r3, [r4, #12]
 8012f70:	181b      	addge	r3, r3, r0
 8012f72:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8012f76:	bfac      	ite	ge
 8012f78:	6563      	strge	r3, [r4, #84]	@ 0x54
 8012f7a:	81a3      	strhlt	r3, [r4, #12]
 8012f7c:	bd10      	pop	{r4, pc}

08012f7e <__swrite>:
 8012f7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012f82:	461f      	mov	r7, r3
 8012f84:	898b      	ldrh	r3, [r1, #12]
 8012f86:	05db      	lsls	r3, r3, #23
 8012f88:	4605      	mov	r5, r0
 8012f8a:	460c      	mov	r4, r1
 8012f8c:	4616      	mov	r6, r2
 8012f8e:	d505      	bpl.n	8012f9c <__swrite+0x1e>
 8012f90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012f94:	2302      	movs	r3, #2
 8012f96:	2200      	movs	r2, #0
 8012f98:	f000 f840 	bl	801301c <_lseek_r>
 8012f9c:	89a3      	ldrh	r3, [r4, #12]
 8012f9e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012fa2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8012fa6:	81a3      	strh	r3, [r4, #12]
 8012fa8:	4632      	mov	r2, r6
 8012faa:	463b      	mov	r3, r7
 8012fac:	4628      	mov	r0, r5
 8012fae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012fb2:	f000 b857 	b.w	8013064 <_write_r>

08012fb6 <__sseek>:
 8012fb6:	b510      	push	{r4, lr}
 8012fb8:	460c      	mov	r4, r1
 8012fba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012fbe:	f000 f82d 	bl	801301c <_lseek_r>
 8012fc2:	1c43      	adds	r3, r0, #1
 8012fc4:	89a3      	ldrh	r3, [r4, #12]
 8012fc6:	bf15      	itete	ne
 8012fc8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8012fca:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8012fce:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8012fd2:	81a3      	strheq	r3, [r4, #12]
 8012fd4:	bf18      	it	ne
 8012fd6:	81a3      	strhne	r3, [r4, #12]
 8012fd8:	bd10      	pop	{r4, pc}

08012fda <__sclose>:
 8012fda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012fde:	f000 b80d 	b.w	8012ffc <_close_r>

08012fe2 <memset>:
 8012fe2:	4402      	add	r2, r0
 8012fe4:	4603      	mov	r3, r0
 8012fe6:	4293      	cmp	r3, r2
 8012fe8:	d100      	bne.n	8012fec <memset+0xa>
 8012fea:	4770      	bx	lr
 8012fec:	f803 1b01 	strb.w	r1, [r3], #1
 8012ff0:	e7f9      	b.n	8012fe6 <memset+0x4>
	...

08012ff4 <_localeconv_r>:
 8012ff4:	4800      	ldr	r0, [pc, #0]	@ (8012ff8 <_localeconv_r+0x4>)
 8012ff6:	4770      	bx	lr
 8012ff8:	2400026c 	.word	0x2400026c

08012ffc <_close_r>:
 8012ffc:	b538      	push	{r3, r4, r5, lr}
 8012ffe:	4d06      	ldr	r5, [pc, #24]	@ (8013018 <_close_r+0x1c>)
 8013000:	2300      	movs	r3, #0
 8013002:	4604      	mov	r4, r0
 8013004:	4608      	mov	r0, r1
 8013006:	602b      	str	r3, [r5, #0]
 8013008:	f7ee fdba 	bl	8001b80 <_close>
 801300c:	1c43      	adds	r3, r0, #1
 801300e:	d102      	bne.n	8013016 <_close_r+0x1a>
 8013010:	682b      	ldr	r3, [r5, #0]
 8013012:	b103      	cbz	r3, 8013016 <_close_r+0x1a>
 8013014:	6023      	str	r3, [r4, #0]
 8013016:	bd38      	pop	{r3, r4, r5, pc}
 8013018:	24002798 	.word	0x24002798

0801301c <_lseek_r>:
 801301c:	b538      	push	{r3, r4, r5, lr}
 801301e:	4d07      	ldr	r5, [pc, #28]	@ (801303c <_lseek_r+0x20>)
 8013020:	4604      	mov	r4, r0
 8013022:	4608      	mov	r0, r1
 8013024:	4611      	mov	r1, r2
 8013026:	2200      	movs	r2, #0
 8013028:	602a      	str	r2, [r5, #0]
 801302a:	461a      	mov	r2, r3
 801302c:	f7ee fdcf 	bl	8001bce <_lseek>
 8013030:	1c43      	adds	r3, r0, #1
 8013032:	d102      	bne.n	801303a <_lseek_r+0x1e>
 8013034:	682b      	ldr	r3, [r5, #0]
 8013036:	b103      	cbz	r3, 801303a <_lseek_r+0x1e>
 8013038:	6023      	str	r3, [r4, #0]
 801303a:	bd38      	pop	{r3, r4, r5, pc}
 801303c:	24002798 	.word	0x24002798

08013040 <_read_r>:
 8013040:	b538      	push	{r3, r4, r5, lr}
 8013042:	4d07      	ldr	r5, [pc, #28]	@ (8013060 <_read_r+0x20>)
 8013044:	4604      	mov	r4, r0
 8013046:	4608      	mov	r0, r1
 8013048:	4611      	mov	r1, r2
 801304a:	2200      	movs	r2, #0
 801304c:	602a      	str	r2, [r5, #0]
 801304e:	461a      	mov	r2, r3
 8013050:	f7ee fd5d 	bl	8001b0e <_read>
 8013054:	1c43      	adds	r3, r0, #1
 8013056:	d102      	bne.n	801305e <_read_r+0x1e>
 8013058:	682b      	ldr	r3, [r5, #0]
 801305a:	b103      	cbz	r3, 801305e <_read_r+0x1e>
 801305c:	6023      	str	r3, [r4, #0]
 801305e:	bd38      	pop	{r3, r4, r5, pc}
 8013060:	24002798 	.word	0x24002798

08013064 <_write_r>:
 8013064:	b538      	push	{r3, r4, r5, lr}
 8013066:	4d07      	ldr	r5, [pc, #28]	@ (8013084 <_write_r+0x20>)
 8013068:	4604      	mov	r4, r0
 801306a:	4608      	mov	r0, r1
 801306c:	4611      	mov	r1, r2
 801306e:	2200      	movs	r2, #0
 8013070:	602a      	str	r2, [r5, #0]
 8013072:	461a      	mov	r2, r3
 8013074:	f7ee fd68 	bl	8001b48 <_write>
 8013078:	1c43      	adds	r3, r0, #1
 801307a:	d102      	bne.n	8013082 <_write_r+0x1e>
 801307c:	682b      	ldr	r3, [r5, #0]
 801307e:	b103      	cbz	r3, 8013082 <_write_r+0x1e>
 8013080:	6023      	str	r3, [r4, #0]
 8013082:	bd38      	pop	{r3, r4, r5, pc}
 8013084:	24002798 	.word	0x24002798

08013088 <__errno>:
 8013088:	4b01      	ldr	r3, [pc, #4]	@ (8013090 <__errno+0x8>)
 801308a:	6818      	ldr	r0, [r3, #0]
 801308c:	4770      	bx	lr
 801308e:	bf00      	nop
 8013090:	2400012c 	.word	0x2400012c

08013094 <__libc_init_array>:
 8013094:	b570      	push	{r4, r5, r6, lr}
 8013096:	4d0d      	ldr	r5, [pc, #52]	@ (80130cc <__libc_init_array+0x38>)
 8013098:	4c0d      	ldr	r4, [pc, #52]	@ (80130d0 <__libc_init_array+0x3c>)
 801309a:	1b64      	subs	r4, r4, r5
 801309c:	10a4      	asrs	r4, r4, #2
 801309e:	2600      	movs	r6, #0
 80130a0:	42a6      	cmp	r6, r4
 80130a2:	d109      	bne.n	80130b8 <__libc_init_array+0x24>
 80130a4:	4d0b      	ldr	r5, [pc, #44]	@ (80130d4 <__libc_init_array+0x40>)
 80130a6:	4c0c      	ldr	r4, [pc, #48]	@ (80130d8 <__libc_init_array+0x44>)
 80130a8:	f002 f838 	bl	801511c <_init>
 80130ac:	1b64      	subs	r4, r4, r5
 80130ae:	10a4      	asrs	r4, r4, #2
 80130b0:	2600      	movs	r6, #0
 80130b2:	42a6      	cmp	r6, r4
 80130b4:	d105      	bne.n	80130c2 <__libc_init_array+0x2e>
 80130b6:	bd70      	pop	{r4, r5, r6, pc}
 80130b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80130bc:	4798      	blx	r3
 80130be:	3601      	adds	r6, #1
 80130c0:	e7ee      	b.n	80130a0 <__libc_init_array+0xc>
 80130c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80130c6:	4798      	blx	r3
 80130c8:	3601      	adds	r6, #1
 80130ca:	e7f2      	b.n	80130b2 <__libc_init_array+0x1e>
 80130cc:	080155b0 	.word	0x080155b0
 80130d0:	080155b0 	.word	0x080155b0
 80130d4:	080155b0 	.word	0x080155b0
 80130d8:	080155b4 	.word	0x080155b4

080130dc <__retarget_lock_init_recursive>:
 80130dc:	4770      	bx	lr

080130de <__retarget_lock_acquire_recursive>:
 80130de:	4770      	bx	lr

080130e0 <__retarget_lock_release_recursive>:
 80130e0:	4770      	bx	lr

080130e2 <quorem>:
 80130e2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80130e6:	6903      	ldr	r3, [r0, #16]
 80130e8:	690c      	ldr	r4, [r1, #16]
 80130ea:	42a3      	cmp	r3, r4
 80130ec:	4607      	mov	r7, r0
 80130ee:	db7e      	blt.n	80131ee <quorem+0x10c>
 80130f0:	3c01      	subs	r4, #1
 80130f2:	f101 0814 	add.w	r8, r1, #20
 80130f6:	00a3      	lsls	r3, r4, #2
 80130f8:	f100 0514 	add.w	r5, r0, #20
 80130fc:	9300      	str	r3, [sp, #0]
 80130fe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8013102:	9301      	str	r3, [sp, #4]
 8013104:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8013108:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801310c:	3301      	adds	r3, #1
 801310e:	429a      	cmp	r2, r3
 8013110:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8013114:	fbb2 f6f3 	udiv	r6, r2, r3
 8013118:	d32e      	bcc.n	8013178 <quorem+0x96>
 801311a:	f04f 0a00 	mov.w	sl, #0
 801311e:	46c4      	mov	ip, r8
 8013120:	46ae      	mov	lr, r5
 8013122:	46d3      	mov	fp, sl
 8013124:	f85c 3b04 	ldr.w	r3, [ip], #4
 8013128:	b298      	uxth	r0, r3
 801312a:	fb06 a000 	mla	r0, r6, r0, sl
 801312e:	0c02      	lsrs	r2, r0, #16
 8013130:	0c1b      	lsrs	r3, r3, #16
 8013132:	fb06 2303 	mla	r3, r6, r3, r2
 8013136:	f8de 2000 	ldr.w	r2, [lr]
 801313a:	b280      	uxth	r0, r0
 801313c:	b292      	uxth	r2, r2
 801313e:	1a12      	subs	r2, r2, r0
 8013140:	445a      	add	r2, fp
 8013142:	f8de 0000 	ldr.w	r0, [lr]
 8013146:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801314a:	b29b      	uxth	r3, r3
 801314c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8013150:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8013154:	b292      	uxth	r2, r2
 8013156:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801315a:	45e1      	cmp	r9, ip
 801315c:	f84e 2b04 	str.w	r2, [lr], #4
 8013160:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8013164:	d2de      	bcs.n	8013124 <quorem+0x42>
 8013166:	9b00      	ldr	r3, [sp, #0]
 8013168:	58eb      	ldr	r3, [r5, r3]
 801316a:	b92b      	cbnz	r3, 8013178 <quorem+0x96>
 801316c:	9b01      	ldr	r3, [sp, #4]
 801316e:	3b04      	subs	r3, #4
 8013170:	429d      	cmp	r5, r3
 8013172:	461a      	mov	r2, r3
 8013174:	d32f      	bcc.n	80131d6 <quorem+0xf4>
 8013176:	613c      	str	r4, [r7, #16]
 8013178:	4638      	mov	r0, r7
 801317a:	f001 f90d 	bl	8014398 <__mcmp>
 801317e:	2800      	cmp	r0, #0
 8013180:	db25      	blt.n	80131ce <quorem+0xec>
 8013182:	4629      	mov	r1, r5
 8013184:	2000      	movs	r0, #0
 8013186:	f858 2b04 	ldr.w	r2, [r8], #4
 801318a:	f8d1 c000 	ldr.w	ip, [r1]
 801318e:	fa1f fe82 	uxth.w	lr, r2
 8013192:	fa1f f38c 	uxth.w	r3, ip
 8013196:	eba3 030e 	sub.w	r3, r3, lr
 801319a:	4403      	add	r3, r0
 801319c:	0c12      	lsrs	r2, r2, #16
 801319e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80131a2:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80131a6:	b29b      	uxth	r3, r3
 80131a8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80131ac:	45c1      	cmp	r9, r8
 80131ae:	f841 3b04 	str.w	r3, [r1], #4
 80131b2:	ea4f 4022 	mov.w	r0, r2, asr #16
 80131b6:	d2e6      	bcs.n	8013186 <quorem+0xa4>
 80131b8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80131bc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80131c0:	b922      	cbnz	r2, 80131cc <quorem+0xea>
 80131c2:	3b04      	subs	r3, #4
 80131c4:	429d      	cmp	r5, r3
 80131c6:	461a      	mov	r2, r3
 80131c8:	d30b      	bcc.n	80131e2 <quorem+0x100>
 80131ca:	613c      	str	r4, [r7, #16]
 80131cc:	3601      	adds	r6, #1
 80131ce:	4630      	mov	r0, r6
 80131d0:	b003      	add	sp, #12
 80131d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80131d6:	6812      	ldr	r2, [r2, #0]
 80131d8:	3b04      	subs	r3, #4
 80131da:	2a00      	cmp	r2, #0
 80131dc:	d1cb      	bne.n	8013176 <quorem+0x94>
 80131de:	3c01      	subs	r4, #1
 80131e0:	e7c6      	b.n	8013170 <quorem+0x8e>
 80131e2:	6812      	ldr	r2, [r2, #0]
 80131e4:	3b04      	subs	r3, #4
 80131e6:	2a00      	cmp	r2, #0
 80131e8:	d1ef      	bne.n	80131ca <quorem+0xe8>
 80131ea:	3c01      	subs	r4, #1
 80131ec:	e7ea      	b.n	80131c4 <quorem+0xe2>
 80131ee:	2000      	movs	r0, #0
 80131f0:	e7ee      	b.n	80131d0 <quorem+0xee>
 80131f2:	0000      	movs	r0, r0
 80131f4:	0000      	movs	r0, r0
	...

080131f8 <_dtoa_r>:
 80131f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80131fc:	ed2d 8b02 	vpush	{d8}
 8013200:	69c7      	ldr	r7, [r0, #28]
 8013202:	b091      	sub	sp, #68	@ 0x44
 8013204:	ed8d 0b02 	vstr	d0, [sp, #8]
 8013208:	ec55 4b10 	vmov	r4, r5, d0
 801320c:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 801320e:	9107      	str	r1, [sp, #28]
 8013210:	4681      	mov	r9, r0
 8013212:	9209      	str	r2, [sp, #36]	@ 0x24
 8013214:	930d      	str	r3, [sp, #52]	@ 0x34
 8013216:	b97f      	cbnz	r7, 8013238 <_dtoa_r+0x40>
 8013218:	2010      	movs	r0, #16
 801321a:	f000 fd8d 	bl	8013d38 <malloc>
 801321e:	4602      	mov	r2, r0
 8013220:	f8c9 001c 	str.w	r0, [r9, #28]
 8013224:	b920      	cbnz	r0, 8013230 <_dtoa_r+0x38>
 8013226:	4ba0      	ldr	r3, [pc, #640]	@ (80134a8 <_dtoa_r+0x2b0>)
 8013228:	21ef      	movs	r1, #239	@ 0xef
 801322a:	48a0      	ldr	r0, [pc, #640]	@ (80134ac <_dtoa_r+0x2b4>)
 801322c:	f001 fbf8 	bl	8014a20 <__assert_func>
 8013230:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8013234:	6007      	str	r7, [r0, #0]
 8013236:	60c7      	str	r7, [r0, #12]
 8013238:	f8d9 301c 	ldr.w	r3, [r9, #28]
 801323c:	6819      	ldr	r1, [r3, #0]
 801323e:	b159      	cbz	r1, 8013258 <_dtoa_r+0x60>
 8013240:	685a      	ldr	r2, [r3, #4]
 8013242:	604a      	str	r2, [r1, #4]
 8013244:	2301      	movs	r3, #1
 8013246:	4093      	lsls	r3, r2
 8013248:	608b      	str	r3, [r1, #8]
 801324a:	4648      	mov	r0, r9
 801324c:	f000 fe6a 	bl	8013f24 <_Bfree>
 8013250:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8013254:	2200      	movs	r2, #0
 8013256:	601a      	str	r2, [r3, #0]
 8013258:	1e2b      	subs	r3, r5, #0
 801325a:	bfbb      	ittet	lt
 801325c:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8013260:	9303      	strlt	r3, [sp, #12]
 8013262:	2300      	movge	r3, #0
 8013264:	2201      	movlt	r2, #1
 8013266:	bfac      	ite	ge
 8013268:	6033      	strge	r3, [r6, #0]
 801326a:	6032      	strlt	r2, [r6, #0]
 801326c:	4b90      	ldr	r3, [pc, #576]	@ (80134b0 <_dtoa_r+0x2b8>)
 801326e:	9e03      	ldr	r6, [sp, #12]
 8013270:	43b3      	bics	r3, r6
 8013272:	d110      	bne.n	8013296 <_dtoa_r+0x9e>
 8013274:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8013276:	f242 730f 	movw	r3, #9999	@ 0x270f
 801327a:	6013      	str	r3, [r2, #0]
 801327c:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8013280:	4323      	orrs	r3, r4
 8013282:	f000 84de 	beq.w	8013c42 <_dtoa_r+0xa4a>
 8013286:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8013288:	4f8a      	ldr	r7, [pc, #552]	@ (80134b4 <_dtoa_r+0x2bc>)
 801328a:	2b00      	cmp	r3, #0
 801328c:	f000 84e0 	beq.w	8013c50 <_dtoa_r+0xa58>
 8013290:	1cfb      	adds	r3, r7, #3
 8013292:	f000 bcdb 	b.w	8013c4c <_dtoa_r+0xa54>
 8013296:	ed9d 8b02 	vldr	d8, [sp, #8]
 801329a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801329e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80132a2:	d10a      	bne.n	80132ba <_dtoa_r+0xc2>
 80132a4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80132a6:	2301      	movs	r3, #1
 80132a8:	6013      	str	r3, [r2, #0]
 80132aa:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80132ac:	b113      	cbz	r3, 80132b4 <_dtoa_r+0xbc>
 80132ae:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 80132b0:	4b81      	ldr	r3, [pc, #516]	@ (80134b8 <_dtoa_r+0x2c0>)
 80132b2:	6013      	str	r3, [r2, #0]
 80132b4:	4f81      	ldr	r7, [pc, #516]	@ (80134bc <_dtoa_r+0x2c4>)
 80132b6:	f000 bccb 	b.w	8013c50 <_dtoa_r+0xa58>
 80132ba:	aa0e      	add	r2, sp, #56	@ 0x38
 80132bc:	a90f      	add	r1, sp, #60	@ 0x3c
 80132be:	4648      	mov	r0, r9
 80132c0:	eeb0 0b48 	vmov.f64	d0, d8
 80132c4:	f001 f918 	bl	80144f8 <__d2b>
 80132c8:	f3c6 530a 	ubfx	r3, r6, #20, #11
 80132cc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80132ce:	9001      	str	r0, [sp, #4]
 80132d0:	2b00      	cmp	r3, #0
 80132d2:	d045      	beq.n	8013360 <_dtoa_r+0x168>
 80132d4:	eeb0 7b48 	vmov.f64	d7, d8
 80132d8:	ee18 1a90 	vmov	r1, s17
 80132dc:	f3c1 0113 	ubfx	r1, r1, #0, #20
 80132e0:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 80132e4:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 80132e8:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 80132ec:	2500      	movs	r5, #0
 80132ee:	ee07 1a90 	vmov	s15, r1
 80132f2:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 80132f6:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8013490 <_dtoa_r+0x298>
 80132fa:	ee37 7b46 	vsub.f64	d7, d7, d6
 80132fe:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8013498 <_dtoa_r+0x2a0>
 8013302:	eea7 6b05 	vfma.f64	d6, d7, d5
 8013306:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 80134a0 <_dtoa_r+0x2a8>
 801330a:	ee07 3a90 	vmov	s15, r3
 801330e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8013312:	eeb0 7b46 	vmov.f64	d7, d6
 8013316:	eea4 7b05 	vfma.f64	d7, d4, d5
 801331a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 801331e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8013322:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013326:	ee16 8a90 	vmov	r8, s13
 801332a:	d508      	bpl.n	801333e <_dtoa_r+0x146>
 801332c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8013330:	eeb4 6b47 	vcmp.f64	d6, d7
 8013334:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013338:	bf18      	it	ne
 801333a:	f108 38ff 	addne.w	r8, r8, #4294967295
 801333e:	f1b8 0f16 	cmp.w	r8, #22
 8013342:	d82b      	bhi.n	801339c <_dtoa_r+0x1a4>
 8013344:	495e      	ldr	r1, [pc, #376]	@ (80134c0 <_dtoa_r+0x2c8>)
 8013346:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 801334a:	ed91 7b00 	vldr	d7, [r1]
 801334e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8013352:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013356:	d501      	bpl.n	801335c <_dtoa_r+0x164>
 8013358:	f108 38ff 	add.w	r8, r8, #4294967295
 801335c:	2100      	movs	r1, #0
 801335e:	e01e      	b.n	801339e <_dtoa_r+0x1a6>
 8013360:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013362:	4413      	add	r3, r2
 8013364:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8013368:	2920      	cmp	r1, #32
 801336a:	bfc1      	itttt	gt
 801336c:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8013370:	408e      	lslgt	r6, r1
 8013372:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 8013376:	fa24 f101 	lsrgt.w	r1, r4, r1
 801337a:	bfd6      	itet	le
 801337c:	f1c1 0120 	rsble	r1, r1, #32
 8013380:	4331      	orrgt	r1, r6
 8013382:	fa04 f101 	lslle.w	r1, r4, r1
 8013386:	ee07 1a90 	vmov	s15, r1
 801338a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 801338e:	3b01      	subs	r3, #1
 8013390:	ee17 1a90 	vmov	r1, s15
 8013394:	2501      	movs	r5, #1
 8013396:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 801339a:	e7a8      	b.n	80132ee <_dtoa_r+0xf6>
 801339c:	2101      	movs	r1, #1
 801339e:	1ad2      	subs	r2, r2, r3
 80133a0:	1e53      	subs	r3, r2, #1
 80133a2:	9306      	str	r3, [sp, #24]
 80133a4:	bf45      	ittet	mi
 80133a6:	f1c2 0301 	rsbmi	r3, r2, #1
 80133aa:	9305      	strmi	r3, [sp, #20]
 80133ac:	2300      	movpl	r3, #0
 80133ae:	2300      	movmi	r3, #0
 80133b0:	bf4c      	ite	mi
 80133b2:	9306      	strmi	r3, [sp, #24]
 80133b4:	9305      	strpl	r3, [sp, #20]
 80133b6:	f1b8 0f00 	cmp.w	r8, #0
 80133ba:	910c      	str	r1, [sp, #48]	@ 0x30
 80133bc:	db18      	blt.n	80133f0 <_dtoa_r+0x1f8>
 80133be:	9b06      	ldr	r3, [sp, #24]
 80133c0:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80133c4:	4443      	add	r3, r8
 80133c6:	9306      	str	r3, [sp, #24]
 80133c8:	2300      	movs	r3, #0
 80133ca:	9a07      	ldr	r2, [sp, #28]
 80133cc:	2a09      	cmp	r2, #9
 80133ce:	d849      	bhi.n	8013464 <_dtoa_r+0x26c>
 80133d0:	2a05      	cmp	r2, #5
 80133d2:	bfc4      	itt	gt
 80133d4:	3a04      	subgt	r2, #4
 80133d6:	9207      	strgt	r2, [sp, #28]
 80133d8:	9a07      	ldr	r2, [sp, #28]
 80133da:	f1a2 0202 	sub.w	r2, r2, #2
 80133de:	bfcc      	ite	gt
 80133e0:	2400      	movgt	r4, #0
 80133e2:	2401      	movle	r4, #1
 80133e4:	2a03      	cmp	r2, #3
 80133e6:	d848      	bhi.n	801347a <_dtoa_r+0x282>
 80133e8:	e8df f002 	tbb	[pc, r2]
 80133ec:	3a2c2e0b 	.word	0x3a2c2e0b
 80133f0:	9b05      	ldr	r3, [sp, #20]
 80133f2:	2200      	movs	r2, #0
 80133f4:	eba3 0308 	sub.w	r3, r3, r8
 80133f8:	9305      	str	r3, [sp, #20]
 80133fa:	920a      	str	r2, [sp, #40]	@ 0x28
 80133fc:	f1c8 0300 	rsb	r3, r8, #0
 8013400:	e7e3      	b.n	80133ca <_dtoa_r+0x1d2>
 8013402:	2200      	movs	r2, #0
 8013404:	9208      	str	r2, [sp, #32]
 8013406:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013408:	2a00      	cmp	r2, #0
 801340a:	dc39      	bgt.n	8013480 <_dtoa_r+0x288>
 801340c:	f04f 0b01 	mov.w	fp, #1
 8013410:	46da      	mov	sl, fp
 8013412:	465a      	mov	r2, fp
 8013414:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8013418:	f8d9 701c 	ldr.w	r7, [r9, #28]
 801341c:	2100      	movs	r1, #0
 801341e:	2004      	movs	r0, #4
 8013420:	f100 0614 	add.w	r6, r0, #20
 8013424:	4296      	cmp	r6, r2
 8013426:	d930      	bls.n	801348a <_dtoa_r+0x292>
 8013428:	6079      	str	r1, [r7, #4]
 801342a:	4648      	mov	r0, r9
 801342c:	9304      	str	r3, [sp, #16]
 801342e:	f000 fd39 	bl	8013ea4 <_Balloc>
 8013432:	9b04      	ldr	r3, [sp, #16]
 8013434:	4607      	mov	r7, r0
 8013436:	2800      	cmp	r0, #0
 8013438:	d146      	bne.n	80134c8 <_dtoa_r+0x2d0>
 801343a:	4b22      	ldr	r3, [pc, #136]	@ (80134c4 <_dtoa_r+0x2cc>)
 801343c:	4602      	mov	r2, r0
 801343e:	f240 11af 	movw	r1, #431	@ 0x1af
 8013442:	e6f2      	b.n	801322a <_dtoa_r+0x32>
 8013444:	2201      	movs	r2, #1
 8013446:	e7dd      	b.n	8013404 <_dtoa_r+0x20c>
 8013448:	2200      	movs	r2, #0
 801344a:	9208      	str	r2, [sp, #32]
 801344c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801344e:	eb08 0b02 	add.w	fp, r8, r2
 8013452:	f10b 0a01 	add.w	sl, fp, #1
 8013456:	4652      	mov	r2, sl
 8013458:	2a01      	cmp	r2, #1
 801345a:	bfb8      	it	lt
 801345c:	2201      	movlt	r2, #1
 801345e:	e7db      	b.n	8013418 <_dtoa_r+0x220>
 8013460:	2201      	movs	r2, #1
 8013462:	e7f2      	b.n	801344a <_dtoa_r+0x252>
 8013464:	2401      	movs	r4, #1
 8013466:	2200      	movs	r2, #0
 8013468:	e9cd 2407 	strd	r2, r4, [sp, #28]
 801346c:	f04f 3bff 	mov.w	fp, #4294967295
 8013470:	2100      	movs	r1, #0
 8013472:	46da      	mov	sl, fp
 8013474:	2212      	movs	r2, #18
 8013476:	9109      	str	r1, [sp, #36]	@ 0x24
 8013478:	e7ce      	b.n	8013418 <_dtoa_r+0x220>
 801347a:	2201      	movs	r2, #1
 801347c:	9208      	str	r2, [sp, #32]
 801347e:	e7f5      	b.n	801346c <_dtoa_r+0x274>
 8013480:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 8013484:	46da      	mov	sl, fp
 8013486:	465a      	mov	r2, fp
 8013488:	e7c6      	b.n	8013418 <_dtoa_r+0x220>
 801348a:	3101      	adds	r1, #1
 801348c:	0040      	lsls	r0, r0, #1
 801348e:	e7c7      	b.n	8013420 <_dtoa_r+0x228>
 8013490:	636f4361 	.word	0x636f4361
 8013494:	3fd287a7 	.word	0x3fd287a7
 8013498:	8b60c8b3 	.word	0x8b60c8b3
 801349c:	3fc68a28 	.word	0x3fc68a28
 80134a0:	509f79fb 	.word	0x509f79fb
 80134a4:	3fd34413 	.word	0x3fd34413
 80134a8:	0801526d 	.word	0x0801526d
 80134ac:	08015284 	.word	0x08015284
 80134b0:	7ff00000 	.word	0x7ff00000
 80134b4:	08015269 	.word	0x08015269
 80134b8:	0801523d 	.word	0x0801523d
 80134bc:	0801523c 	.word	0x0801523c
 80134c0:	08015380 	.word	0x08015380
 80134c4:	080152dc 	.word	0x080152dc
 80134c8:	f8d9 201c 	ldr.w	r2, [r9, #28]
 80134cc:	f1ba 0f0e 	cmp.w	sl, #14
 80134d0:	6010      	str	r0, [r2, #0]
 80134d2:	d86f      	bhi.n	80135b4 <_dtoa_r+0x3bc>
 80134d4:	2c00      	cmp	r4, #0
 80134d6:	d06d      	beq.n	80135b4 <_dtoa_r+0x3bc>
 80134d8:	f1b8 0f00 	cmp.w	r8, #0
 80134dc:	f340 80c2 	ble.w	8013664 <_dtoa_r+0x46c>
 80134e0:	4aca      	ldr	r2, [pc, #808]	@ (801380c <_dtoa_r+0x614>)
 80134e2:	f008 010f 	and.w	r1, r8, #15
 80134e6:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80134ea:	f418 7f80 	tst.w	r8, #256	@ 0x100
 80134ee:	ed92 7b00 	vldr	d7, [r2]
 80134f2:	ea4f 1128 	mov.w	r1, r8, asr #4
 80134f6:	f000 80a9 	beq.w	801364c <_dtoa_r+0x454>
 80134fa:	4ac5      	ldr	r2, [pc, #788]	@ (8013810 <_dtoa_r+0x618>)
 80134fc:	ed92 6b08 	vldr	d6, [r2, #32]
 8013500:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8013504:	ed8d 6b02 	vstr	d6, [sp, #8]
 8013508:	f001 010f 	and.w	r1, r1, #15
 801350c:	2203      	movs	r2, #3
 801350e:	48c0      	ldr	r0, [pc, #768]	@ (8013810 <_dtoa_r+0x618>)
 8013510:	2900      	cmp	r1, #0
 8013512:	f040 809d 	bne.w	8013650 <_dtoa_r+0x458>
 8013516:	ed9d 6b02 	vldr	d6, [sp, #8]
 801351a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801351e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8013522:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8013524:	ed9d 7b02 	vldr	d7, [sp, #8]
 8013528:	2900      	cmp	r1, #0
 801352a:	f000 80c1 	beq.w	80136b0 <_dtoa_r+0x4b8>
 801352e:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8013532:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8013536:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801353a:	f140 80b9 	bpl.w	80136b0 <_dtoa_r+0x4b8>
 801353e:	f1ba 0f00 	cmp.w	sl, #0
 8013542:	f000 80b5 	beq.w	80136b0 <_dtoa_r+0x4b8>
 8013546:	f1bb 0f00 	cmp.w	fp, #0
 801354a:	dd31      	ble.n	80135b0 <_dtoa_r+0x3b8>
 801354c:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8013550:	ee27 7b06 	vmul.f64	d7, d7, d6
 8013554:	ed8d 7b02 	vstr	d7, [sp, #8]
 8013558:	f108 31ff 	add.w	r1, r8, #4294967295
 801355c:	9104      	str	r1, [sp, #16]
 801355e:	3201      	adds	r2, #1
 8013560:	465c      	mov	r4, fp
 8013562:	ed9d 6b02 	vldr	d6, [sp, #8]
 8013566:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 801356a:	ee07 2a90 	vmov	s15, r2
 801356e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8013572:	eea7 5b06 	vfma.f64	d5, d7, d6
 8013576:	ee15 2a90 	vmov	r2, s11
 801357a:	ec51 0b15 	vmov	r0, r1, d5
 801357e:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 8013582:	2c00      	cmp	r4, #0
 8013584:	f040 8098 	bne.w	80136b8 <_dtoa_r+0x4c0>
 8013588:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 801358c:	ee36 6b47 	vsub.f64	d6, d6, d7
 8013590:	ec41 0b17 	vmov	d7, r0, r1
 8013594:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8013598:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801359c:	f300 8261 	bgt.w	8013a62 <_dtoa_r+0x86a>
 80135a0:	eeb1 7b47 	vneg.f64	d7, d7
 80135a4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80135a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80135ac:	f100 80f5 	bmi.w	801379a <_dtoa_r+0x5a2>
 80135b0:	ed8d 8b02 	vstr	d8, [sp, #8]
 80135b4:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80135b6:	2a00      	cmp	r2, #0
 80135b8:	f2c0 812c 	blt.w	8013814 <_dtoa_r+0x61c>
 80135bc:	f1b8 0f0e 	cmp.w	r8, #14
 80135c0:	f300 8128 	bgt.w	8013814 <_dtoa_r+0x61c>
 80135c4:	4b91      	ldr	r3, [pc, #580]	@ (801380c <_dtoa_r+0x614>)
 80135c6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80135ca:	ed93 6b00 	vldr	d6, [r3]
 80135ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80135d0:	2b00      	cmp	r3, #0
 80135d2:	da03      	bge.n	80135dc <_dtoa_r+0x3e4>
 80135d4:	f1ba 0f00 	cmp.w	sl, #0
 80135d8:	f340 80d2 	ble.w	8013780 <_dtoa_r+0x588>
 80135dc:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 80135e0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80135e4:	463e      	mov	r6, r7
 80135e6:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80135ea:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 80135ee:	ee15 3a10 	vmov	r3, s10
 80135f2:	3330      	adds	r3, #48	@ 0x30
 80135f4:	f806 3b01 	strb.w	r3, [r6], #1
 80135f8:	1bf3      	subs	r3, r6, r7
 80135fa:	459a      	cmp	sl, r3
 80135fc:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8013600:	eea3 7b46 	vfms.f64	d7, d3, d6
 8013604:	f040 80f8 	bne.w	80137f8 <_dtoa_r+0x600>
 8013608:	ee37 7b07 	vadd.f64	d7, d7, d7
 801360c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8013610:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013614:	f300 80dd 	bgt.w	80137d2 <_dtoa_r+0x5da>
 8013618:	eeb4 7b46 	vcmp.f64	d7, d6
 801361c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013620:	d104      	bne.n	801362c <_dtoa_r+0x434>
 8013622:	ee15 3a10 	vmov	r3, s10
 8013626:	07db      	lsls	r3, r3, #31
 8013628:	f100 80d3 	bmi.w	80137d2 <_dtoa_r+0x5da>
 801362c:	9901      	ldr	r1, [sp, #4]
 801362e:	4648      	mov	r0, r9
 8013630:	f000 fc78 	bl	8013f24 <_Bfree>
 8013634:	2300      	movs	r3, #0
 8013636:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8013638:	7033      	strb	r3, [r6, #0]
 801363a:	f108 0301 	add.w	r3, r8, #1
 801363e:	6013      	str	r3, [r2, #0]
 8013640:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8013642:	2b00      	cmp	r3, #0
 8013644:	f000 8304 	beq.w	8013c50 <_dtoa_r+0xa58>
 8013648:	601e      	str	r6, [r3, #0]
 801364a:	e301      	b.n	8013c50 <_dtoa_r+0xa58>
 801364c:	2202      	movs	r2, #2
 801364e:	e75e      	b.n	801350e <_dtoa_r+0x316>
 8013650:	07cc      	lsls	r4, r1, #31
 8013652:	d504      	bpl.n	801365e <_dtoa_r+0x466>
 8013654:	ed90 6b00 	vldr	d6, [r0]
 8013658:	3201      	adds	r2, #1
 801365a:	ee27 7b06 	vmul.f64	d7, d7, d6
 801365e:	1049      	asrs	r1, r1, #1
 8013660:	3008      	adds	r0, #8
 8013662:	e755      	b.n	8013510 <_dtoa_r+0x318>
 8013664:	d022      	beq.n	80136ac <_dtoa_r+0x4b4>
 8013666:	f1c8 0100 	rsb	r1, r8, #0
 801366a:	4a68      	ldr	r2, [pc, #416]	@ (801380c <_dtoa_r+0x614>)
 801366c:	f001 000f 	and.w	r0, r1, #15
 8013670:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8013674:	ed92 7b00 	vldr	d7, [r2]
 8013678:	ee28 7b07 	vmul.f64	d7, d8, d7
 801367c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8013680:	4863      	ldr	r0, [pc, #396]	@ (8013810 <_dtoa_r+0x618>)
 8013682:	1109      	asrs	r1, r1, #4
 8013684:	2400      	movs	r4, #0
 8013686:	2202      	movs	r2, #2
 8013688:	b929      	cbnz	r1, 8013696 <_dtoa_r+0x49e>
 801368a:	2c00      	cmp	r4, #0
 801368c:	f43f af49 	beq.w	8013522 <_dtoa_r+0x32a>
 8013690:	ed8d 7b02 	vstr	d7, [sp, #8]
 8013694:	e745      	b.n	8013522 <_dtoa_r+0x32a>
 8013696:	07ce      	lsls	r6, r1, #31
 8013698:	d505      	bpl.n	80136a6 <_dtoa_r+0x4ae>
 801369a:	ed90 6b00 	vldr	d6, [r0]
 801369e:	3201      	adds	r2, #1
 80136a0:	2401      	movs	r4, #1
 80136a2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80136a6:	1049      	asrs	r1, r1, #1
 80136a8:	3008      	adds	r0, #8
 80136aa:	e7ed      	b.n	8013688 <_dtoa_r+0x490>
 80136ac:	2202      	movs	r2, #2
 80136ae:	e738      	b.n	8013522 <_dtoa_r+0x32a>
 80136b0:	f8cd 8010 	str.w	r8, [sp, #16]
 80136b4:	4654      	mov	r4, sl
 80136b6:	e754      	b.n	8013562 <_dtoa_r+0x36a>
 80136b8:	4a54      	ldr	r2, [pc, #336]	@ (801380c <_dtoa_r+0x614>)
 80136ba:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 80136be:	ed12 4b02 	vldr	d4, [r2, #-8]
 80136c2:	9a08      	ldr	r2, [sp, #32]
 80136c4:	ec41 0b17 	vmov	d7, r0, r1
 80136c8:	443c      	add	r4, r7
 80136ca:	b34a      	cbz	r2, 8013720 <_dtoa_r+0x528>
 80136cc:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 80136d0:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 80136d4:	463e      	mov	r6, r7
 80136d6:	ee83 5b04 	vdiv.f64	d5, d3, d4
 80136da:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 80136de:	ee35 7b47 	vsub.f64	d7, d5, d7
 80136e2:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80136e6:	ee14 2a90 	vmov	r2, s9
 80136ea:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80136ee:	3230      	adds	r2, #48	@ 0x30
 80136f0:	ee36 6b45 	vsub.f64	d6, d6, d5
 80136f4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80136f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80136fc:	f806 2b01 	strb.w	r2, [r6], #1
 8013700:	d438      	bmi.n	8013774 <_dtoa_r+0x57c>
 8013702:	ee32 5b46 	vsub.f64	d5, d2, d6
 8013706:	eeb4 5bc7 	vcmpe.f64	d5, d7
 801370a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801370e:	d462      	bmi.n	80137d6 <_dtoa_r+0x5de>
 8013710:	42a6      	cmp	r6, r4
 8013712:	f43f af4d 	beq.w	80135b0 <_dtoa_r+0x3b8>
 8013716:	ee27 7b03 	vmul.f64	d7, d7, d3
 801371a:	ee26 6b03 	vmul.f64	d6, d6, d3
 801371e:	e7e0      	b.n	80136e2 <_dtoa_r+0x4ea>
 8013720:	4621      	mov	r1, r4
 8013722:	463e      	mov	r6, r7
 8013724:	ee27 7b04 	vmul.f64	d7, d7, d4
 8013728:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 801372c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8013730:	ee14 2a90 	vmov	r2, s9
 8013734:	3230      	adds	r2, #48	@ 0x30
 8013736:	f806 2b01 	strb.w	r2, [r6], #1
 801373a:	42a6      	cmp	r6, r4
 801373c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8013740:	ee36 6b45 	vsub.f64	d6, d6, d5
 8013744:	d119      	bne.n	801377a <_dtoa_r+0x582>
 8013746:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 801374a:	ee37 4b05 	vadd.f64	d4, d7, d5
 801374e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8013752:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013756:	dc3e      	bgt.n	80137d6 <_dtoa_r+0x5de>
 8013758:	ee35 5b47 	vsub.f64	d5, d5, d7
 801375c:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8013760:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013764:	f57f af24 	bpl.w	80135b0 <_dtoa_r+0x3b8>
 8013768:	460e      	mov	r6, r1
 801376a:	3901      	subs	r1, #1
 801376c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8013770:	2b30      	cmp	r3, #48	@ 0x30
 8013772:	d0f9      	beq.n	8013768 <_dtoa_r+0x570>
 8013774:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8013778:	e758      	b.n	801362c <_dtoa_r+0x434>
 801377a:	ee26 6b03 	vmul.f64	d6, d6, d3
 801377e:	e7d5      	b.n	801372c <_dtoa_r+0x534>
 8013780:	d10b      	bne.n	801379a <_dtoa_r+0x5a2>
 8013782:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8013786:	ee26 6b07 	vmul.f64	d6, d6, d7
 801378a:	ed9d 7b02 	vldr	d7, [sp, #8]
 801378e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8013792:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013796:	f2c0 8161 	blt.w	8013a5c <_dtoa_r+0x864>
 801379a:	2400      	movs	r4, #0
 801379c:	4625      	mov	r5, r4
 801379e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80137a0:	43db      	mvns	r3, r3
 80137a2:	9304      	str	r3, [sp, #16]
 80137a4:	463e      	mov	r6, r7
 80137a6:	f04f 0800 	mov.w	r8, #0
 80137aa:	4621      	mov	r1, r4
 80137ac:	4648      	mov	r0, r9
 80137ae:	f000 fbb9 	bl	8013f24 <_Bfree>
 80137b2:	2d00      	cmp	r5, #0
 80137b4:	d0de      	beq.n	8013774 <_dtoa_r+0x57c>
 80137b6:	f1b8 0f00 	cmp.w	r8, #0
 80137ba:	d005      	beq.n	80137c8 <_dtoa_r+0x5d0>
 80137bc:	45a8      	cmp	r8, r5
 80137be:	d003      	beq.n	80137c8 <_dtoa_r+0x5d0>
 80137c0:	4641      	mov	r1, r8
 80137c2:	4648      	mov	r0, r9
 80137c4:	f000 fbae 	bl	8013f24 <_Bfree>
 80137c8:	4629      	mov	r1, r5
 80137ca:	4648      	mov	r0, r9
 80137cc:	f000 fbaa 	bl	8013f24 <_Bfree>
 80137d0:	e7d0      	b.n	8013774 <_dtoa_r+0x57c>
 80137d2:	f8cd 8010 	str.w	r8, [sp, #16]
 80137d6:	4633      	mov	r3, r6
 80137d8:	461e      	mov	r6, r3
 80137da:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80137de:	2a39      	cmp	r2, #57	@ 0x39
 80137e0:	d106      	bne.n	80137f0 <_dtoa_r+0x5f8>
 80137e2:	429f      	cmp	r7, r3
 80137e4:	d1f8      	bne.n	80137d8 <_dtoa_r+0x5e0>
 80137e6:	9a04      	ldr	r2, [sp, #16]
 80137e8:	3201      	adds	r2, #1
 80137ea:	9204      	str	r2, [sp, #16]
 80137ec:	2230      	movs	r2, #48	@ 0x30
 80137ee:	703a      	strb	r2, [r7, #0]
 80137f0:	781a      	ldrb	r2, [r3, #0]
 80137f2:	3201      	adds	r2, #1
 80137f4:	701a      	strb	r2, [r3, #0]
 80137f6:	e7bd      	b.n	8013774 <_dtoa_r+0x57c>
 80137f8:	ee27 7b04 	vmul.f64	d7, d7, d4
 80137fc:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8013800:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013804:	f47f aeef 	bne.w	80135e6 <_dtoa_r+0x3ee>
 8013808:	e710      	b.n	801362c <_dtoa_r+0x434>
 801380a:	bf00      	nop
 801380c:	08015380 	.word	0x08015380
 8013810:	08015358 	.word	0x08015358
 8013814:	9908      	ldr	r1, [sp, #32]
 8013816:	2900      	cmp	r1, #0
 8013818:	f000 80e3 	beq.w	80139e2 <_dtoa_r+0x7ea>
 801381c:	9907      	ldr	r1, [sp, #28]
 801381e:	2901      	cmp	r1, #1
 8013820:	f300 80c8 	bgt.w	80139b4 <_dtoa_r+0x7bc>
 8013824:	2d00      	cmp	r5, #0
 8013826:	f000 80c1 	beq.w	80139ac <_dtoa_r+0x7b4>
 801382a:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 801382e:	9e05      	ldr	r6, [sp, #20]
 8013830:	461c      	mov	r4, r3
 8013832:	9304      	str	r3, [sp, #16]
 8013834:	9b05      	ldr	r3, [sp, #20]
 8013836:	4413      	add	r3, r2
 8013838:	9305      	str	r3, [sp, #20]
 801383a:	9b06      	ldr	r3, [sp, #24]
 801383c:	2101      	movs	r1, #1
 801383e:	4413      	add	r3, r2
 8013840:	4648      	mov	r0, r9
 8013842:	9306      	str	r3, [sp, #24]
 8013844:	f000 fc22 	bl	801408c <__i2b>
 8013848:	9b04      	ldr	r3, [sp, #16]
 801384a:	4605      	mov	r5, r0
 801384c:	b166      	cbz	r6, 8013868 <_dtoa_r+0x670>
 801384e:	9a06      	ldr	r2, [sp, #24]
 8013850:	2a00      	cmp	r2, #0
 8013852:	dd09      	ble.n	8013868 <_dtoa_r+0x670>
 8013854:	42b2      	cmp	r2, r6
 8013856:	9905      	ldr	r1, [sp, #20]
 8013858:	bfa8      	it	ge
 801385a:	4632      	movge	r2, r6
 801385c:	1a89      	subs	r1, r1, r2
 801385e:	9105      	str	r1, [sp, #20]
 8013860:	9906      	ldr	r1, [sp, #24]
 8013862:	1ab6      	subs	r6, r6, r2
 8013864:	1a8a      	subs	r2, r1, r2
 8013866:	9206      	str	r2, [sp, #24]
 8013868:	b1fb      	cbz	r3, 80138aa <_dtoa_r+0x6b2>
 801386a:	9a08      	ldr	r2, [sp, #32]
 801386c:	2a00      	cmp	r2, #0
 801386e:	f000 80bc 	beq.w	80139ea <_dtoa_r+0x7f2>
 8013872:	b19c      	cbz	r4, 801389c <_dtoa_r+0x6a4>
 8013874:	4629      	mov	r1, r5
 8013876:	4622      	mov	r2, r4
 8013878:	4648      	mov	r0, r9
 801387a:	930b      	str	r3, [sp, #44]	@ 0x2c
 801387c:	f000 fcc6 	bl	801420c <__pow5mult>
 8013880:	9a01      	ldr	r2, [sp, #4]
 8013882:	4601      	mov	r1, r0
 8013884:	4605      	mov	r5, r0
 8013886:	4648      	mov	r0, r9
 8013888:	f000 fc16 	bl	80140b8 <__multiply>
 801388c:	9901      	ldr	r1, [sp, #4]
 801388e:	9004      	str	r0, [sp, #16]
 8013890:	4648      	mov	r0, r9
 8013892:	f000 fb47 	bl	8013f24 <_Bfree>
 8013896:	9a04      	ldr	r2, [sp, #16]
 8013898:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801389a:	9201      	str	r2, [sp, #4]
 801389c:	1b1a      	subs	r2, r3, r4
 801389e:	d004      	beq.n	80138aa <_dtoa_r+0x6b2>
 80138a0:	9901      	ldr	r1, [sp, #4]
 80138a2:	4648      	mov	r0, r9
 80138a4:	f000 fcb2 	bl	801420c <__pow5mult>
 80138a8:	9001      	str	r0, [sp, #4]
 80138aa:	2101      	movs	r1, #1
 80138ac:	4648      	mov	r0, r9
 80138ae:	f000 fbed 	bl	801408c <__i2b>
 80138b2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80138b4:	4604      	mov	r4, r0
 80138b6:	2b00      	cmp	r3, #0
 80138b8:	f000 81d0 	beq.w	8013c5c <_dtoa_r+0xa64>
 80138bc:	461a      	mov	r2, r3
 80138be:	4601      	mov	r1, r0
 80138c0:	4648      	mov	r0, r9
 80138c2:	f000 fca3 	bl	801420c <__pow5mult>
 80138c6:	9b07      	ldr	r3, [sp, #28]
 80138c8:	2b01      	cmp	r3, #1
 80138ca:	4604      	mov	r4, r0
 80138cc:	f300 8095 	bgt.w	80139fa <_dtoa_r+0x802>
 80138d0:	9b02      	ldr	r3, [sp, #8]
 80138d2:	2b00      	cmp	r3, #0
 80138d4:	f040 808b 	bne.w	80139ee <_dtoa_r+0x7f6>
 80138d8:	9b03      	ldr	r3, [sp, #12]
 80138da:	f3c3 0213 	ubfx	r2, r3, #0, #20
 80138de:	2a00      	cmp	r2, #0
 80138e0:	f040 8087 	bne.w	80139f2 <_dtoa_r+0x7fa>
 80138e4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80138e8:	0d12      	lsrs	r2, r2, #20
 80138ea:	0512      	lsls	r2, r2, #20
 80138ec:	2a00      	cmp	r2, #0
 80138ee:	f000 8082 	beq.w	80139f6 <_dtoa_r+0x7fe>
 80138f2:	9b05      	ldr	r3, [sp, #20]
 80138f4:	3301      	adds	r3, #1
 80138f6:	9305      	str	r3, [sp, #20]
 80138f8:	9b06      	ldr	r3, [sp, #24]
 80138fa:	3301      	adds	r3, #1
 80138fc:	9306      	str	r3, [sp, #24]
 80138fe:	2301      	movs	r3, #1
 8013900:	930b      	str	r3, [sp, #44]	@ 0x2c
 8013902:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013904:	2b00      	cmp	r3, #0
 8013906:	f000 81af 	beq.w	8013c68 <_dtoa_r+0xa70>
 801390a:	6922      	ldr	r2, [r4, #16]
 801390c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8013910:	6910      	ldr	r0, [r2, #16]
 8013912:	f000 fb6f 	bl	8013ff4 <__hi0bits>
 8013916:	f1c0 0020 	rsb	r0, r0, #32
 801391a:	9b06      	ldr	r3, [sp, #24]
 801391c:	4418      	add	r0, r3
 801391e:	f010 001f 	ands.w	r0, r0, #31
 8013922:	d076      	beq.n	8013a12 <_dtoa_r+0x81a>
 8013924:	f1c0 0220 	rsb	r2, r0, #32
 8013928:	2a04      	cmp	r2, #4
 801392a:	dd69      	ble.n	8013a00 <_dtoa_r+0x808>
 801392c:	9b05      	ldr	r3, [sp, #20]
 801392e:	f1c0 001c 	rsb	r0, r0, #28
 8013932:	4403      	add	r3, r0
 8013934:	9305      	str	r3, [sp, #20]
 8013936:	9b06      	ldr	r3, [sp, #24]
 8013938:	4406      	add	r6, r0
 801393a:	4403      	add	r3, r0
 801393c:	9306      	str	r3, [sp, #24]
 801393e:	9b05      	ldr	r3, [sp, #20]
 8013940:	2b00      	cmp	r3, #0
 8013942:	dd05      	ble.n	8013950 <_dtoa_r+0x758>
 8013944:	9901      	ldr	r1, [sp, #4]
 8013946:	461a      	mov	r2, r3
 8013948:	4648      	mov	r0, r9
 801394a:	f000 fcb9 	bl	80142c0 <__lshift>
 801394e:	9001      	str	r0, [sp, #4]
 8013950:	9b06      	ldr	r3, [sp, #24]
 8013952:	2b00      	cmp	r3, #0
 8013954:	dd05      	ble.n	8013962 <_dtoa_r+0x76a>
 8013956:	4621      	mov	r1, r4
 8013958:	461a      	mov	r2, r3
 801395a:	4648      	mov	r0, r9
 801395c:	f000 fcb0 	bl	80142c0 <__lshift>
 8013960:	4604      	mov	r4, r0
 8013962:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013964:	2b00      	cmp	r3, #0
 8013966:	d056      	beq.n	8013a16 <_dtoa_r+0x81e>
 8013968:	9801      	ldr	r0, [sp, #4]
 801396a:	4621      	mov	r1, r4
 801396c:	f000 fd14 	bl	8014398 <__mcmp>
 8013970:	2800      	cmp	r0, #0
 8013972:	da50      	bge.n	8013a16 <_dtoa_r+0x81e>
 8013974:	f108 33ff 	add.w	r3, r8, #4294967295
 8013978:	9304      	str	r3, [sp, #16]
 801397a:	9901      	ldr	r1, [sp, #4]
 801397c:	2300      	movs	r3, #0
 801397e:	220a      	movs	r2, #10
 8013980:	4648      	mov	r0, r9
 8013982:	f000 faf1 	bl	8013f68 <__multadd>
 8013986:	9b08      	ldr	r3, [sp, #32]
 8013988:	9001      	str	r0, [sp, #4]
 801398a:	2b00      	cmp	r3, #0
 801398c:	f000 816e 	beq.w	8013c6c <_dtoa_r+0xa74>
 8013990:	4629      	mov	r1, r5
 8013992:	2300      	movs	r3, #0
 8013994:	220a      	movs	r2, #10
 8013996:	4648      	mov	r0, r9
 8013998:	f000 fae6 	bl	8013f68 <__multadd>
 801399c:	f1bb 0f00 	cmp.w	fp, #0
 80139a0:	4605      	mov	r5, r0
 80139a2:	dc64      	bgt.n	8013a6e <_dtoa_r+0x876>
 80139a4:	9b07      	ldr	r3, [sp, #28]
 80139a6:	2b02      	cmp	r3, #2
 80139a8:	dc3e      	bgt.n	8013a28 <_dtoa_r+0x830>
 80139aa:	e060      	b.n	8013a6e <_dtoa_r+0x876>
 80139ac:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80139ae:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80139b2:	e73c      	b.n	801382e <_dtoa_r+0x636>
 80139b4:	f10a 34ff 	add.w	r4, sl, #4294967295
 80139b8:	42a3      	cmp	r3, r4
 80139ba:	bfbf      	itttt	lt
 80139bc:	1ae2      	sublt	r2, r4, r3
 80139be:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80139c0:	189b      	addlt	r3, r3, r2
 80139c2:	930a      	strlt	r3, [sp, #40]	@ 0x28
 80139c4:	bfae      	itee	ge
 80139c6:	1b1c      	subge	r4, r3, r4
 80139c8:	4623      	movlt	r3, r4
 80139ca:	2400      	movlt	r4, #0
 80139cc:	f1ba 0f00 	cmp.w	sl, #0
 80139d0:	bfb5      	itete	lt
 80139d2:	9a05      	ldrlt	r2, [sp, #20]
 80139d4:	9e05      	ldrge	r6, [sp, #20]
 80139d6:	eba2 060a 	sublt.w	r6, r2, sl
 80139da:	4652      	movge	r2, sl
 80139dc:	bfb8      	it	lt
 80139de:	2200      	movlt	r2, #0
 80139e0:	e727      	b.n	8013832 <_dtoa_r+0x63a>
 80139e2:	9e05      	ldr	r6, [sp, #20]
 80139e4:	9d08      	ldr	r5, [sp, #32]
 80139e6:	461c      	mov	r4, r3
 80139e8:	e730      	b.n	801384c <_dtoa_r+0x654>
 80139ea:	461a      	mov	r2, r3
 80139ec:	e758      	b.n	80138a0 <_dtoa_r+0x6a8>
 80139ee:	2300      	movs	r3, #0
 80139f0:	e786      	b.n	8013900 <_dtoa_r+0x708>
 80139f2:	9b02      	ldr	r3, [sp, #8]
 80139f4:	e784      	b.n	8013900 <_dtoa_r+0x708>
 80139f6:	920b      	str	r2, [sp, #44]	@ 0x2c
 80139f8:	e783      	b.n	8013902 <_dtoa_r+0x70a>
 80139fa:	2300      	movs	r3, #0
 80139fc:	930b      	str	r3, [sp, #44]	@ 0x2c
 80139fe:	e784      	b.n	801390a <_dtoa_r+0x712>
 8013a00:	d09d      	beq.n	801393e <_dtoa_r+0x746>
 8013a02:	9b05      	ldr	r3, [sp, #20]
 8013a04:	321c      	adds	r2, #28
 8013a06:	4413      	add	r3, r2
 8013a08:	9305      	str	r3, [sp, #20]
 8013a0a:	9b06      	ldr	r3, [sp, #24]
 8013a0c:	4416      	add	r6, r2
 8013a0e:	4413      	add	r3, r2
 8013a10:	e794      	b.n	801393c <_dtoa_r+0x744>
 8013a12:	4602      	mov	r2, r0
 8013a14:	e7f5      	b.n	8013a02 <_dtoa_r+0x80a>
 8013a16:	f1ba 0f00 	cmp.w	sl, #0
 8013a1a:	f8cd 8010 	str.w	r8, [sp, #16]
 8013a1e:	46d3      	mov	fp, sl
 8013a20:	dc21      	bgt.n	8013a66 <_dtoa_r+0x86e>
 8013a22:	9b07      	ldr	r3, [sp, #28]
 8013a24:	2b02      	cmp	r3, #2
 8013a26:	dd1e      	ble.n	8013a66 <_dtoa_r+0x86e>
 8013a28:	f1bb 0f00 	cmp.w	fp, #0
 8013a2c:	f47f aeb7 	bne.w	801379e <_dtoa_r+0x5a6>
 8013a30:	4621      	mov	r1, r4
 8013a32:	465b      	mov	r3, fp
 8013a34:	2205      	movs	r2, #5
 8013a36:	4648      	mov	r0, r9
 8013a38:	f000 fa96 	bl	8013f68 <__multadd>
 8013a3c:	4601      	mov	r1, r0
 8013a3e:	4604      	mov	r4, r0
 8013a40:	9801      	ldr	r0, [sp, #4]
 8013a42:	f000 fca9 	bl	8014398 <__mcmp>
 8013a46:	2800      	cmp	r0, #0
 8013a48:	f77f aea9 	ble.w	801379e <_dtoa_r+0x5a6>
 8013a4c:	463e      	mov	r6, r7
 8013a4e:	2331      	movs	r3, #49	@ 0x31
 8013a50:	f806 3b01 	strb.w	r3, [r6], #1
 8013a54:	9b04      	ldr	r3, [sp, #16]
 8013a56:	3301      	adds	r3, #1
 8013a58:	9304      	str	r3, [sp, #16]
 8013a5a:	e6a4      	b.n	80137a6 <_dtoa_r+0x5ae>
 8013a5c:	f8cd 8010 	str.w	r8, [sp, #16]
 8013a60:	4654      	mov	r4, sl
 8013a62:	4625      	mov	r5, r4
 8013a64:	e7f2      	b.n	8013a4c <_dtoa_r+0x854>
 8013a66:	9b08      	ldr	r3, [sp, #32]
 8013a68:	2b00      	cmp	r3, #0
 8013a6a:	f000 8103 	beq.w	8013c74 <_dtoa_r+0xa7c>
 8013a6e:	2e00      	cmp	r6, #0
 8013a70:	dd05      	ble.n	8013a7e <_dtoa_r+0x886>
 8013a72:	4629      	mov	r1, r5
 8013a74:	4632      	mov	r2, r6
 8013a76:	4648      	mov	r0, r9
 8013a78:	f000 fc22 	bl	80142c0 <__lshift>
 8013a7c:	4605      	mov	r5, r0
 8013a7e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013a80:	2b00      	cmp	r3, #0
 8013a82:	d058      	beq.n	8013b36 <_dtoa_r+0x93e>
 8013a84:	6869      	ldr	r1, [r5, #4]
 8013a86:	4648      	mov	r0, r9
 8013a88:	f000 fa0c 	bl	8013ea4 <_Balloc>
 8013a8c:	4606      	mov	r6, r0
 8013a8e:	b928      	cbnz	r0, 8013a9c <_dtoa_r+0x8a4>
 8013a90:	4b82      	ldr	r3, [pc, #520]	@ (8013c9c <_dtoa_r+0xaa4>)
 8013a92:	4602      	mov	r2, r0
 8013a94:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8013a98:	f7ff bbc7 	b.w	801322a <_dtoa_r+0x32>
 8013a9c:	692a      	ldr	r2, [r5, #16]
 8013a9e:	3202      	adds	r2, #2
 8013aa0:	0092      	lsls	r2, r2, #2
 8013aa2:	f105 010c 	add.w	r1, r5, #12
 8013aa6:	300c      	adds	r0, #12
 8013aa8:	f000 ffac 	bl	8014a04 <memcpy>
 8013aac:	2201      	movs	r2, #1
 8013aae:	4631      	mov	r1, r6
 8013ab0:	4648      	mov	r0, r9
 8013ab2:	f000 fc05 	bl	80142c0 <__lshift>
 8013ab6:	1c7b      	adds	r3, r7, #1
 8013ab8:	9305      	str	r3, [sp, #20]
 8013aba:	eb07 030b 	add.w	r3, r7, fp
 8013abe:	9309      	str	r3, [sp, #36]	@ 0x24
 8013ac0:	9b02      	ldr	r3, [sp, #8]
 8013ac2:	f003 0301 	and.w	r3, r3, #1
 8013ac6:	46a8      	mov	r8, r5
 8013ac8:	9308      	str	r3, [sp, #32]
 8013aca:	4605      	mov	r5, r0
 8013acc:	9b05      	ldr	r3, [sp, #20]
 8013ace:	9801      	ldr	r0, [sp, #4]
 8013ad0:	4621      	mov	r1, r4
 8013ad2:	f103 3bff 	add.w	fp, r3, #4294967295
 8013ad6:	f7ff fb04 	bl	80130e2 <quorem>
 8013ada:	4641      	mov	r1, r8
 8013adc:	9002      	str	r0, [sp, #8]
 8013ade:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8013ae2:	9801      	ldr	r0, [sp, #4]
 8013ae4:	f000 fc58 	bl	8014398 <__mcmp>
 8013ae8:	462a      	mov	r2, r5
 8013aea:	9006      	str	r0, [sp, #24]
 8013aec:	4621      	mov	r1, r4
 8013aee:	4648      	mov	r0, r9
 8013af0:	f000 fc6e 	bl	80143d0 <__mdiff>
 8013af4:	68c2      	ldr	r2, [r0, #12]
 8013af6:	4606      	mov	r6, r0
 8013af8:	b9fa      	cbnz	r2, 8013b3a <_dtoa_r+0x942>
 8013afa:	4601      	mov	r1, r0
 8013afc:	9801      	ldr	r0, [sp, #4]
 8013afe:	f000 fc4b 	bl	8014398 <__mcmp>
 8013b02:	4602      	mov	r2, r0
 8013b04:	4631      	mov	r1, r6
 8013b06:	4648      	mov	r0, r9
 8013b08:	920a      	str	r2, [sp, #40]	@ 0x28
 8013b0a:	f000 fa0b 	bl	8013f24 <_Bfree>
 8013b0e:	9b07      	ldr	r3, [sp, #28]
 8013b10:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8013b12:	9e05      	ldr	r6, [sp, #20]
 8013b14:	ea43 0102 	orr.w	r1, r3, r2
 8013b18:	9b08      	ldr	r3, [sp, #32]
 8013b1a:	4319      	orrs	r1, r3
 8013b1c:	d10f      	bne.n	8013b3e <_dtoa_r+0x946>
 8013b1e:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8013b22:	d028      	beq.n	8013b76 <_dtoa_r+0x97e>
 8013b24:	9b06      	ldr	r3, [sp, #24]
 8013b26:	2b00      	cmp	r3, #0
 8013b28:	dd02      	ble.n	8013b30 <_dtoa_r+0x938>
 8013b2a:	9b02      	ldr	r3, [sp, #8]
 8013b2c:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 8013b30:	f88b a000 	strb.w	sl, [fp]
 8013b34:	e639      	b.n	80137aa <_dtoa_r+0x5b2>
 8013b36:	4628      	mov	r0, r5
 8013b38:	e7bd      	b.n	8013ab6 <_dtoa_r+0x8be>
 8013b3a:	2201      	movs	r2, #1
 8013b3c:	e7e2      	b.n	8013b04 <_dtoa_r+0x90c>
 8013b3e:	9b06      	ldr	r3, [sp, #24]
 8013b40:	2b00      	cmp	r3, #0
 8013b42:	db04      	blt.n	8013b4e <_dtoa_r+0x956>
 8013b44:	9907      	ldr	r1, [sp, #28]
 8013b46:	430b      	orrs	r3, r1
 8013b48:	9908      	ldr	r1, [sp, #32]
 8013b4a:	430b      	orrs	r3, r1
 8013b4c:	d120      	bne.n	8013b90 <_dtoa_r+0x998>
 8013b4e:	2a00      	cmp	r2, #0
 8013b50:	ddee      	ble.n	8013b30 <_dtoa_r+0x938>
 8013b52:	9901      	ldr	r1, [sp, #4]
 8013b54:	2201      	movs	r2, #1
 8013b56:	4648      	mov	r0, r9
 8013b58:	f000 fbb2 	bl	80142c0 <__lshift>
 8013b5c:	4621      	mov	r1, r4
 8013b5e:	9001      	str	r0, [sp, #4]
 8013b60:	f000 fc1a 	bl	8014398 <__mcmp>
 8013b64:	2800      	cmp	r0, #0
 8013b66:	dc03      	bgt.n	8013b70 <_dtoa_r+0x978>
 8013b68:	d1e2      	bne.n	8013b30 <_dtoa_r+0x938>
 8013b6a:	f01a 0f01 	tst.w	sl, #1
 8013b6e:	d0df      	beq.n	8013b30 <_dtoa_r+0x938>
 8013b70:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8013b74:	d1d9      	bne.n	8013b2a <_dtoa_r+0x932>
 8013b76:	2339      	movs	r3, #57	@ 0x39
 8013b78:	f88b 3000 	strb.w	r3, [fp]
 8013b7c:	4633      	mov	r3, r6
 8013b7e:	461e      	mov	r6, r3
 8013b80:	3b01      	subs	r3, #1
 8013b82:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8013b86:	2a39      	cmp	r2, #57	@ 0x39
 8013b88:	d053      	beq.n	8013c32 <_dtoa_r+0xa3a>
 8013b8a:	3201      	adds	r2, #1
 8013b8c:	701a      	strb	r2, [r3, #0]
 8013b8e:	e60c      	b.n	80137aa <_dtoa_r+0x5b2>
 8013b90:	2a00      	cmp	r2, #0
 8013b92:	dd07      	ble.n	8013ba4 <_dtoa_r+0x9ac>
 8013b94:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8013b98:	d0ed      	beq.n	8013b76 <_dtoa_r+0x97e>
 8013b9a:	f10a 0301 	add.w	r3, sl, #1
 8013b9e:	f88b 3000 	strb.w	r3, [fp]
 8013ba2:	e602      	b.n	80137aa <_dtoa_r+0x5b2>
 8013ba4:	9b05      	ldr	r3, [sp, #20]
 8013ba6:	9a05      	ldr	r2, [sp, #20]
 8013ba8:	f803 ac01 	strb.w	sl, [r3, #-1]
 8013bac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013bae:	4293      	cmp	r3, r2
 8013bb0:	d029      	beq.n	8013c06 <_dtoa_r+0xa0e>
 8013bb2:	9901      	ldr	r1, [sp, #4]
 8013bb4:	2300      	movs	r3, #0
 8013bb6:	220a      	movs	r2, #10
 8013bb8:	4648      	mov	r0, r9
 8013bba:	f000 f9d5 	bl	8013f68 <__multadd>
 8013bbe:	45a8      	cmp	r8, r5
 8013bc0:	9001      	str	r0, [sp, #4]
 8013bc2:	f04f 0300 	mov.w	r3, #0
 8013bc6:	f04f 020a 	mov.w	r2, #10
 8013bca:	4641      	mov	r1, r8
 8013bcc:	4648      	mov	r0, r9
 8013bce:	d107      	bne.n	8013be0 <_dtoa_r+0x9e8>
 8013bd0:	f000 f9ca 	bl	8013f68 <__multadd>
 8013bd4:	4680      	mov	r8, r0
 8013bd6:	4605      	mov	r5, r0
 8013bd8:	9b05      	ldr	r3, [sp, #20]
 8013bda:	3301      	adds	r3, #1
 8013bdc:	9305      	str	r3, [sp, #20]
 8013bde:	e775      	b.n	8013acc <_dtoa_r+0x8d4>
 8013be0:	f000 f9c2 	bl	8013f68 <__multadd>
 8013be4:	4629      	mov	r1, r5
 8013be6:	4680      	mov	r8, r0
 8013be8:	2300      	movs	r3, #0
 8013bea:	220a      	movs	r2, #10
 8013bec:	4648      	mov	r0, r9
 8013bee:	f000 f9bb 	bl	8013f68 <__multadd>
 8013bf2:	4605      	mov	r5, r0
 8013bf4:	e7f0      	b.n	8013bd8 <_dtoa_r+0x9e0>
 8013bf6:	f1bb 0f00 	cmp.w	fp, #0
 8013bfa:	bfcc      	ite	gt
 8013bfc:	465e      	movgt	r6, fp
 8013bfe:	2601      	movle	r6, #1
 8013c00:	443e      	add	r6, r7
 8013c02:	f04f 0800 	mov.w	r8, #0
 8013c06:	9901      	ldr	r1, [sp, #4]
 8013c08:	2201      	movs	r2, #1
 8013c0a:	4648      	mov	r0, r9
 8013c0c:	f000 fb58 	bl	80142c0 <__lshift>
 8013c10:	4621      	mov	r1, r4
 8013c12:	9001      	str	r0, [sp, #4]
 8013c14:	f000 fbc0 	bl	8014398 <__mcmp>
 8013c18:	2800      	cmp	r0, #0
 8013c1a:	dcaf      	bgt.n	8013b7c <_dtoa_r+0x984>
 8013c1c:	d102      	bne.n	8013c24 <_dtoa_r+0xa2c>
 8013c1e:	f01a 0f01 	tst.w	sl, #1
 8013c22:	d1ab      	bne.n	8013b7c <_dtoa_r+0x984>
 8013c24:	4633      	mov	r3, r6
 8013c26:	461e      	mov	r6, r3
 8013c28:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8013c2c:	2a30      	cmp	r2, #48	@ 0x30
 8013c2e:	d0fa      	beq.n	8013c26 <_dtoa_r+0xa2e>
 8013c30:	e5bb      	b.n	80137aa <_dtoa_r+0x5b2>
 8013c32:	429f      	cmp	r7, r3
 8013c34:	d1a3      	bne.n	8013b7e <_dtoa_r+0x986>
 8013c36:	9b04      	ldr	r3, [sp, #16]
 8013c38:	3301      	adds	r3, #1
 8013c3a:	9304      	str	r3, [sp, #16]
 8013c3c:	2331      	movs	r3, #49	@ 0x31
 8013c3e:	703b      	strb	r3, [r7, #0]
 8013c40:	e5b3      	b.n	80137aa <_dtoa_r+0x5b2>
 8013c42:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8013c44:	4f16      	ldr	r7, [pc, #88]	@ (8013ca0 <_dtoa_r+0xaa8>)
 8013c46:	b11b      	cbz	r3, 8013c50 <_dtoa_r+0xa58>
 8013c48:	f107 0308 	add.w	r3, r7, #8
 8013c4c:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8013c4e:	6013      	str	r3, [r2, #0]
 8013c50:	4638      	mov	r0, r7
 8013c52:	b011      	add	sp, #68	@ 0x44
 8013c54:	ecbd 8b02 	vpop	{d8}
 8013c58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013c5c:	9b07      	ldr	r3, [sp, #28]
 8013c5e:	2b01      	cmp	r3, #1
 8013c60:	f77f ae36 	ble.w	80138d0 <_dtoa_r+0x6d8>
 8013c64:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013c66:	930b      	str	r3, [sp, #44]	@ 0x2c
 8013c68:	2001      	movs	r0, #1
 8013c6a:	e656      	b.n	801391a <_dtoa_r+0x722>
 8013c6c:	f1bb 0f00 	cmp.w	fp, #0
 8013c70:	f77f aed7 	ble.w	8013a22 <_dtoa_r+0x82a>
 8013c74:	463e      	mov	r6, r7
 8013c76:	9801      	ldr	r0, [sp, #4]
 8013c78:	4621      	mov	r1, r4
 8013c7a:	f7ff fa32 	bl	80130e2 <quorem>
 8013c7e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8013c82:	f806 ab01 	strb.w	sl, [r6], #1
 8013c86:	1bf2      	subs	r2, r6, r7
 8013c88:	4593      	cmp	fp, r2
 8013c8a:	ddb4      	ble.n	8013bf6 <_dtoa_r+0x9fe>
 8013c8c:	9901      	ldr	r1, [sp, #4]
 8013c8e:	2300      	movs	r3, #0
 8013c90:	220a      	movs	r2, #10
 8013c92:	4648      	mov	r0, r9
 8013c94:	f000 f968 	bl	8013f68 <__multadd>
 8013c98:	9001      	str	r0, [sp, #4]
 8013c9a:	e7ec      	b.n	8013c76 <_dtoa_r+0xa7e>
 8013c9c:	080152dc 	.word	0x080152dc
 8013ca0:	08015260 	.word	0x08015260

08013ca4 <_free_r>:
 8013ca4:	b538      	push	{r3, r4, r5, lr}
 8013ca6:	4605      	mov	r5, r0
 8013ca8:	2900      	cmp	r1, #0
 8013caa:	d041      	beq.n	8013d30 <_free_r+0x8c>
 8013cac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013cb0:	1f0c      	subs	r4, r1, #4
 8013cb2:	2b00      	cmp	r3, #0
 8013cb4:	bfb8      	it	lt
 8013cb6:	18e4      	addlt	r4, r4, r3
 8013cb8:	f000 f8e8 	bl	8013e8c <__malloc_lock>
 8013cbc:	4a1d      	ldr	r2, [pc, #116]	@ (8013d34 <_free_r+0x90>)
 8013cbe:	6813      	ldr	r3, [r2, #0]
 8013cc0:	b933      	cbnz	r3, 8013cd0 <_free_r+0x2c>
 8013cc2:	6063      	str	r3, [r4, #4]
 8013cc4:	6014      	str	r4, [r2, #0]
 8013cc6:	4628      	mov	r0, r5
 8013cc8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013ccc:	f000 b8e4 	b.w	8013e98 <__malloc_unlock>
 8013cd0:	42a3      	cmp	r3, r4
 8013cd2:	d908      	bls.n	8013ce6 <_free_r+0x42>
 8013cd4:	6820      	ldr	r0, [r4, #0]
 8013cd6:	1821      	adds	r1, r4, r0
 8013cd8:	428b      	cmp	r3, r1
 8013cda:	bf01      	itttt	eq
 8013cdc:	6819      	ldreq	r1, [r3, #0]
 8013cde:	685b      	ldreq	r3, [r3, #4]
 8013ce0:	1809      	addeq	r1, r1, r0
 8013ce2:	6021      	streq	r1, [r4, #0]
 8013ce4:	e7ed      	b.n	8013cc2 <_free_r+0x1e>
 8013ce6:	461a      	mov	r2, r3
 8013ce8:	685b      	ldr	r3, [r3, #4]
 8013cea:	b10b      	cbz	r3, 8013cf0 <_free_r+0x4c>
 8013cec:	42a3      	cmp	r3, r4
 8013cee:	d9fa      	bls.n	8013ce6 <_free_r+0x42>
 8013cf0:	6811      	ldr	r1, [r2, #0]
 8013cf2:	1850      	adds	r0, r2, r1
 8013cf4:	42a0      	cmp	r0, r4
 8013cf6:	d10b      	bne.n	8013d10 <_free_r+0x6c>
 8013cf8:	6820      	ldr	r0, [r4, #0]
 8013cfa:	4401      	add	r1, r0
 8013cfc:	1850      	adds	r0, r2, r1
 8013cfe:	4283      	cmp	r3, r0
 8013d00:	6011      	str	r1, [r2, #0]
 8013d02:	d1e0      	bne.n	8013cc6 <_free_r+0x22>
 8013d04:	6818      	ldr	r0, [r3, #0]
 8013d06:	685b      	ldr	r3, [r3, #4]
 8013d08:	6053      	str	r3, [r2, #4]
 8013d0a:	4408      	add	r0, r1
 8013d0c:	6010      	str	r0, [r2, #0]
 8013d0e:	e7da      	b.n	8013cc6 <_free_r+0x22>
 8013d10:	d902      	bls.n	8013d18 <_free_r+0x74>
 8013d12:	230c      	movs	r3, #12
 8013d14:	602b      	str	r3, [r5, #0]
 8013d16:	e7d6      	b.n	8013cc6 <_free_r+0x22>
 8013d18:	6820      	ldr	r0, [r4, #0]
 8013d1a:	1821      	adds	r1, r4, r0
 8013d1c:	428b      	cmp	r3, r1
 8013d1e:	bf04      	itt	eq
 8013d20:	6819      	ldreq	r1, [r3, #0]
 8013d22:	685b      	ldreq	r3, [r3, #4]
 8013d24:	6063      	str	r3, [r4, #4]
 8013d26:	bf04      	itt	eq
 8013d28:	1809      	addeq	r1, r1, r0
 8013d2a:	6021      	streq	r1, [r4, #0]
 8013d2c:	6054      	str	r4, [r2, #4]
 8013d2e:	e7ca      	b.n	8013cc6 <_free_r+0x22>
 8013d30:	bd38      	pop	{r3, r4, r5, pc}
 8013d32:	bf00      	nop
 8013d34:	240027a4 	.word	0x240027a4

08013d38 <malloc>:
 8013d38:	4b02      	ldr	r3, [pc, #8]	@ (8013d44 <malloc+0xc>)
 8013d3a:	4601      	mov	r1, r0
 8013d3c:	6818      	ldr	r0, [r3, #0]
 8013d3e:	f000 b825 	b.w	8013d8c <_malloc_r>
 8013d42:	bf00      	nop
 8013d44:	2400012c 	.word	0x2400012c

08013d48 <sbrk_aligned>:
 8013d48:	b570      	push	{r4, r5, r6, lr}
 8013d4a:	4e0f      	ldr	r6, [pc, #60]	@ (8013d88 <sbrk_aligned+0x40>)
 8013d4c:	460c      	mov	r4, r1
 8013d4e:	6831      	ldr	r1, [r6, #0]
 8013d50:	4605      	mov	r5, r0
 8013d52:	b911      	cbnz	r1, 8013d5a <sbrk_aligned+0x12>
 8013d54:	f000 fe46 	bl	80149e4 <_sbrk_r>
 8013d58:	6030      	str	r0, [r6, #0]
 8013d5a:	4621      	mov	r1, r4
 8013d5c:	4628      	mov	r0, r5
 8013d5e:	f000 fe41 	bl	80149e4 <_sbrk_r>
 8013d62:	1c43      	adds	r3, r0, #1
 8013d64:	d103      	bne.n	8013d6e <sbrk_aligned+0x26>
 8013d66:	f04f 34ff 	mov.w	r4, #4294967295
 8013d6a:	4620      	mov	r0, r4
 8013d6c:	bd70      	pop	{r4, r5, r6, pc}
 8013d6e:	1cc4      	adds	r4, r0, #3
 8013d70:	f024 0403 	bic.w	r4, r4, #3
 8013d74:	42a0      	cmp	r0, r4
 8013d76:	d0f8      	beq.n	8013d6a <sbrk_aligned+0x22>
 8013d78:	1a21      	subs	r1, r4, r0
 8013d7a:	4628      	mov	r0, r5
 8013d7c:	f000 fe32 	bl	80149e4 <_sbrk_r>
 8013d80:	3001      	adds	r0, #1
 8013d82:	d1f2      	bne.n	8013d6a <sbrk_aligned+0x22>
 8013d84:	e7ef      	b.n	8013d66 <sbrk_aligned+0x1e>
 8013d86:	bf00      	nop
 8013d88:	240027a0 	.word	0x240027a0

08013d8c <_malloc_r>:
 8013d8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013d90:	1ccd      	adds	r5, r1, #3
 8013d92:	f025 0503 	bic.w	r5, r5, #3
 8013d96:	3508      	adds	r5, #8
 8013d98:	2d0c      	cmp	r5, #12
 8013d9a:	bf38      	it	cc
 8013d9c:	250c      	movcc	r5, #12
 8013d9e:	2d00      	cmp	r5, #0
 8013da0:	4606      	mov	r6, r0
 8013da2:	db01      	blt.n	8013da8 <_malloc_r+0x1c>
 8013da4:	42a9      	cmp	r1, r5
 8013da6:	d904      	bls.n	8013db2 <_malloc_r+0x26>
 8013da8:	230c      	movs	r3, #12
 8013daa:	6033      	str	r3, [r6, #0]
 8013dac:	2000      	movs	r0, #0
 8013dae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013db2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8013e88 <_malloc_r+0xfc>
 8013db6:	f000 f869 	bl	8013e8c <__malloc_lock>
 8013dba:	f8d8 3000 	ldr.w	r3, [r8]
 8013dbe:	461c      	mov	r4, r3
 8013dc0:	bb44      	cbnz	r4, 8013e14 <_malloc_r+0x88>
 8013dc2:	4629      	mov	r1, r5
 8013dc4:	4630      	mov	r0, r6
 8013dc6:	f7ff ffbf 	bl	8013d48 <sbrk_aligned>
 8013dca:	1c43      	adds	r3, r0, #1
 8013dcc:	4604      	mov	r4, r0
 8013dce:	d158      	bne.n	8013e82 <_malloc_r+0xf6>
 8013dd0:	f8d8 4000 	ldr.w	r4, [r8]
 8013dd4:	4627      	mov	r7, r4
 8013dd6:	2f00      	cmp	r7, #0
 8013dd8:	d143      	bne.n	8013e62 <_malloc_r+0xd6>
 8013dda:	2c00      	cmp	r4, #0
 8013ddc:	d04b      	beq.n	8013e76 <_malloc_r+0xea>
 8013dde:	6823      	ldr	r3, [r4, #0]
 8013de0:	4639      	mov	r1, r7
 8013de2:	4630      	mov	r0, r6
 8013de4:	eb04 0903 	add.w	r9, r4, r3
 8013de8:	f000 fdfc 	bl	80149e4 <_sbrk_r>
 8013dec:	4581      	cmp	r9, r0
 8013dee:	d142      	bne.n	8013e76 <_malloc_r+0xea>
 8013df0:	6821      	ldr	r1, [r4, #0]
 8013df2:	1a6d      	subs	r5, r5, r1
 8013df4:	4629      	mov	r1, r5
 8013df6:	4630      	mov	r0, r6
 8013df8:	f7ff ffa6 	bl	8013d48 <sbrk_aligned>
 8013dfc:	3001      	adds	r0, #1
 8013dfe:	d03a      	beq.n	8013e76 <_malloc_r+0xea>
 8013e00:	6823      	ldr	r3, [r4, #0]
 8013e02:	442b      	add	r3, r5
 8013e04:	6023      	str	r3, [r4, #0]
 8013e06:	f8d8 3000 	ldr.w	r3, [r8]
 8013e0a:	685a      	ldr	r2, [r3, #4]
 8013e0c:	bb62      	cbnz	r2, 8013e68 <_malloc_r+0xdc>
 8013e0e:	f8c8 7000 	str.w	r7, [r8]
 8013e12:	e00f      	b.n	8013e34 <_malloc_r+0xa8>
 8013e14:	6822      	ldr	r2, [r4, #0]
 8013e16:	1b52      	subs	r2, r2, r5
 8013e18:	d420      	bmi.n	8013e5c <_malloc_r+0xd0>
 8013e1a:	2a0b      	cmp	r2, #11
 8013e1c:	d917      	bls.n	8013e4e <_malloc_r+0xc2>
 8013e1e:	1961      	adds	r1, r4, r5
 8013e20:	42a3      	cmp	r3, r4
 8013e22:	6025      	str	r5, [r4, #0]
 8013e24:	bf18      	it	ne
 8013e26:	6059      	strne	r1, [r3, #4]
 8013e28:	6863      	ldr	r3, [r4, #4]
 8013e2a:	bf08      	it	eq
 8013e2c:	f8c8 1000 	streq.w	r1, [r8]
 8013e30:	5162      	str	r2, [r4, r5]
 8013e32:	604b      	str	r3, [r1, #4]
 8013e34:	4630      	mov	r0, r6
 8013e36:	f000 f82f 	bl	8013e98 <__malloc_unlock>
 8013e3a:	f104 000b 	add.w	r0, r4, #11
 8013e3e:	1d23      	adds	r3, r4, #4
 8013e40:	f020 0007 	bic.w	r0, r0, #7
 8013e44:	1ac2      	subs	r2, r0, r3
 8013e46:	bf1c      	itt	ne
 8013e48:	1a1b      	subne	r3, r3, r0
 8013e4a:	50a3      	strne	r3, [r4, r2]
 8013e4c:	e7af      	b.n	8013dae <_malloc_r+0x22>
 8013e4e:	6862      	ldr	r2, [r4, #4]
 8013e50:	42a3      	cmp	r3, r4
 8013e52:	bf0c      	ite	eq
 8013e54:	f8c8 2000 	streq.w	r2, [r8]
 8013e58:	605a      	strne	r2, [r3, #4]
 8013e5a:	e7eb      	b.n	8013e34 <_malloc_r+0xa8>
 8013e5c:	4623      	mov	r3, r4
 8013e5e:	6864      	ldr	r4, [r4, #4]
 8013e60:	e7ae      	b.n	8013dc0 <_malloc_r+0x34>
 8013e62:	463c      	mov	r4, r7
 8013e64:	687f      	ldr	r7, [r7, #4]
 8013e66:	e7b6      	b.n	8013dd6 <_malloc_r+0x4a>
 8013e68:	461a      	mov	r2, r3
 8013e6a:	685b      	ldr	r3, [r3, #4]
 8013e6c:	42a3      	cmp	r3, r4
 8013e6e:	d1fb      	bne.n	8013e68 <_malloc_r+0xdc>
 8013e70:	2300      	movs	r3, #0
 8013e72:	6053      	str	r3, [r2, #4]
 8013e74:	e7de      	b.n	8013e34 <_malloc_r+0xa8>
 8013e76:	230c      	movs	r3, #12
 8013e78:	6033      	str	r3, [r6, #0]
 8013e7a:	4630      	mov	r0, r6
 8013e7c:	f000 f80c 	bl	8013e98 <__malloc_unlock>
 8013e80:	e794      	b.n	8013dac <_malloc_r+0x20>
 8013e82:	6005      	str	r5, [r0, #0]
 8013e84:	e7d6      	b.n	8013e34 <_malloc_r+0xa8>
 8013e86:	bf00      	nop
 8013e88:	240027a4 	.word	0x240027a4

08013e8c <__malloc_lock>:
 8013e8c:	4801      	ldr	r0, [pc, #4]	@ (8013e94 <__malloc_lock+0x8>)
 8013e8e:	f7ff b926 	b.w	80130de <__retarget_lock_acquire_recursive>
 8013e92:	bf00      	nop
 8013e94:	2400279c 	.word	0x2400279c

08013e98 <__malloc_unlock>:
 8013e98:	4801      	ldr	r0, [pc, #4]	@ (8013ea0 <__malloc_unlock+0x8>)
 8013e9a:	f7ff b921 	b.w	80130e0 <__retarget_lock_release_recursive>
 8013e9e:	bf00      	nop
 8013ea0:	2400279c 	.word	0x2400279c

08013ea4 <_Balloc>:
 8013ea4:	b570      	push	{r4, r5, r6, lr}
 8013ea6:	69c6      	ldr	r6, [r0, #28]
 8013ea8:	4604      	mov	r4, r0
 8013eaa:	460d      	mov	r5, r1
 8013eac:	b976      	cbnz	r6, 8013ecc <_Balloc+0x28>
 8013eae:	2010      	movs	r0, #16
 8013eb0:	f7ff ff42 	bl	8013d38 <malloc>
 8013eb4:	4602      	mov	r2, r0
 8013eb6:	61e0      	str	r0, [r4, #28]
 8013eb8:	b920      	cbnz	r0, 8013ec4 <_Balloc+0x20>
 8013eba:	4b18      	ldr	r3, [pc, #96]	@ (8013f1c <_Balloc+0x78>)
 8013ebc:	4818      	ldr	r0, [pc, #96]	@ (8013f20 <_Balloc+0x7c>)
 8013ebe:	216b      	movs	r1, #107	@ 0x6b
 8013ec0:	f000 fdae 	bl	8014a20 <__assert_func>
 8013ec4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013ec8:	6006      	str	r6, [r0, #0]
 8013eca:	60c6      	str	r6, [r0, #12]
 8013ecc:	69e6      	ldr	r6, [r4, #28]
 8013ece:	68f3      	ldr	r3, [r6, #12]
 8013ed0:	b183      	cbz	r3, 8013ef4 <_Balloc+0x50>
 8013ed2:	69e3      	ldr	r3, [r4, #28]
 8013ed4:	68db      	ldr	r3, [r3, #12]
 8013ed6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8013eda:	b9b8      	cbnz	r0, 8013f0c <_Balloc+0x68>
 8013edc:	2101      	movs	r1, #1
 8013ede:	fa01 f605 	lsl.w	r6, r1, r5
 8013ee2:	1d72      	adds	r2, r6, #5
 8013ee4:	0092      	lsls	r2, r2, #2
 8013ee6:	4620      	mov	r0, r4
 8013ee8:	f000 fdb8 	bl	8014a5c <_calloc_r>
 8013eec:	b160      	cbz	r0, 8013f08 <_Balloc+0x64>
 8013eee:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8013ef2:	e00e      	b.n	8013f12 <_Balloc+0x6e>
 8013ef4:	2221      	movs	r2, #33	@ 0x21
 8013ef6:	2104      	movs	r1, #4
 8013ef8:	4620      	mov	r0, r4
 8013efa:	f000 fdaf 	bl	8014a5c <_calloc_r>
 8013efe:	69e3      	ldr	r3, [r4, #28]
 8013f00:	60f0      	str	r0, [r6, #12]
 8013f02:	68db      	ldr	r3, [r3, #12]
 8013f04:	2b00      	cmp	r3, #0
 8013f06:	d1e4      	bne.n	8013ed2 <_Balloc+0x2e>
 8013f08:	2000      	movs	r0, #0
 8013f0a:	bd70      	pop	{r4, r5, r6, pc}
 8013f0c:	6802      	ldr	r2, [r0, #0]
 8013f0e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8013f12:	2300      	movs	r3, #0
 8013f14:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8013f18:	e7f7      	b.n	8013f0a <_Balloc+0x66>
 8013f1a:	bf00      	nop
 8013f1c:	0801526d 	.word	0x0801526d
 8013f20:	080152ed 	.word	0x080152ed

08013f24 <_Bfree>:
 8013f24:	b570      	push	{r4, r5, r6, lr}
 8013f26:	69c6      	ldr	r6, [r0, #28]
 8013f28:	4605      	mov	r5, r0
 8013f2a:	460c      	mov	r4, r1
 8013f2c:	b976      	cbnz	r6, 8013f4c <_Bfree+0x28>
 8013f2e:	2010      	movs	r0, #16
 8013f30:	f7ff ff02 	bl	8013d38 <malloc>
 8013f34:	4602      	mov	r2, r0
 8013f36:	61e8      	str	r0, [r5, #28]
 8013f38:	b920      	cbnz	r0, 8013f44 <_Bfree+0x20>
 8013f3a:	4b09      	ldr	r3, [pc, #36]	@ (8013f60 <_Bfree+0x3c>)
 8013f3c:	4809      	ldr	r0, [pc, #36]	@ (8013f64 <_Bfree+0x40>)
 8013f3e:	218f      	movs	r1, #143	@ 0x8f
 8013f40:	f000 fd6e 	bl	8014a20 <__assert_func>
 8013f44:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013f48:	6006      	str	r6, [r0, #0]
 8013f4a:	60c6      	str	r6, [r0, #12]
 8013f4c:	b13c      	cbz	r4, 8013f5e <_Bfree+0x3a>
 8013f4e:	69eb      	ldr	r3, [r5, #28]
 8013f50:	6862      	ldr	r2, [r4, #4]
 8013f52:	68db      	ldr	r3, [r3, #12]
 8013f54:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8013f58:	6021      	str	r1, [r4, #0]
 8013f5a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8013f5e:	bd70      	pop	{r4, r5, r6, pc}
 8013f60:	0801526d 	.word	0x0801526d
 8013f64:	080152ed 	.word	0x080152ed

08013f68 <__multadd>:
 8013f68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013f6c:	690d      	ldr	r5, [r1, #16]
 8013f6e:	4607      	mov	r7, r0
 8013f70:	460c      	mov	r4, r1
 8013f72:	461e      	mov	r6, r3
 8013f74:	f101 0c14 	add.w	ip, r1, #20
 8013f78:	2000      	movs	r0, #0
 8013f7a:	f8dc 3000 	ldr.w	r3, [ip]
 8013f7e:	b299      	uxth	r1, r3
 8013f80:	fb02 6101 	mla	r1, r2, r1, r6
 8013f84:	0c1e      	lsrs	r6, r3, #16
 8013f86:	0c0b      	lsrs	r3, r1, #16
 8013f88:	fb02 3306 	mla	r3, r2, r6, r3
 8013f8c:	b289      	uxth	r1, r1
 8013f8e:	3001      	adds	r0, #1
 8013f90:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8013f94:	4285      	cmp	r5, r0
 8013f96:	f84c 1b04 	str.w	r1, [ip], #4
 8013f9a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8013f9e:	dcec      	bgt.n	8013f7a <__multadd+0x12>
 8013fa0:	b30e      	cbz	r6, 8013fe6 <__multadd+0x7e>
 8013fa2:	68a3      	ldr	r3, [r4, #8]
 8013fa4:	42ab      	cmp	r3, r5
 8013fa6:	dc19      	bgt.n	8013fdc <__multadd+0x74>
 8013fa8:	6861      	ldr	r1, [r4, #4]
 8013faa:	4638      	mov	r0, r7
 8013fac:	3101      	adds	r1, #1
 8013fae:	f7ff ff79 	bl	8013ea4 <_Balloc>
 8013fb2:	4680      	mov	r8, r0
 8013fb4:	b928      	cbnz	r0, 8013fc2 <__multadd+0x5a>
 8013fb6:	4602      	mov	r2, r0
 8013fb8:	4b0c      	ldr	r3, [pc, #48]	@ (8013fec <__multadd+0x84>)
 8013fba:	480d      	ldr	r0, [pc, #52]	@ (8013ff0 <__multadd+0x88>)
 8013fbc:	21ba      	movs	r1, #186	@ 0xba
 8013fbe:	f000 fd2f 	bl	8014a20 <__assert_func>
 8013fc2:	6922      	ldr	r2, [r4, #16]
 8013fc4:	3202      	adds	r2, #2
 8013fc6:	f104 010c 	add.w	r1, r4, #12
 8013fca:	0092      	lsls	r2, r2, #2
 8013fcc:	300c      	adds	r0, #12
 8013fce:	f000 fd19 	bl	8014a04 <memcpy>
 8013fd2:	4621      	mov	r1, r4
 8013fd4:	4638      	mov	r0, r7
 8013fd6:	f7ff ffa5 	bl	8013f24 <_Bfree>
 8013fda:	4644      	mov	r4, r8
 8013fdc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8013fe0:	3501      	adds	r5, #1
 8013fe2:	615e      	str	r6, [r3, #20]
 8013fe4:	6125      	str	r5, [r4, #16]
 8013fe6:	4620      	mov	r0, r4
 8013fe8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013fec:	080152dc 	.word	0x080152dc
 8013ff0:	080152ed 	.word	0x080152ed

08013ff4 <__hi0bits>:
 8013ff4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8013ff8:	4603      	mov	r3, r0
 8013ffa:	bf36      	itet	cc
 8013ffc:	0403      	lslcc	r3, r0, #16
 8013ffe:	2000      	movcs	r0, #0
 8014000:	2010      	movcc	r0, #16
 8014002:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8014006:	bf3c      	itt	cc
 8014008:	021b      	lslcc	r3, r3, #8
 801400a:	3008      	addcc	r0, #8
 801400c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8014010:	bf3c      	itt	cc
 8014012:	011b      	lslcc	r3, r3, #4
 8014014:	3004      	addcc	r0, #4
 8014016:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801401a:	bf3c      	itt	cc
 801401c:	009b      	lslcc	r3, r3, #2
 801401e:	3002      	addcc	r0, #2
 8014020:	2b00      	cmp	r3, #0
 8014022:	db05      	blt.n	8014030 <__hi0bits+0x3c>
 8014024:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8014028:	f100 0001 	add.w	r0, r0, #1
 801402c:	bf08      	it	eq
 801402e:	2020      	moveq	r0, #32
 8014030:	4770      	bx	lr

08014032 <__lo0bits>:
 8014032:	6803      	ldr	r3, [r0, #0]
 8014034:	4602      	mov	r2, r0
 8014036:	f013 0007 	ands.w	r0, r3, #7
 801403a:	d00b      	beq.n	8014054 <__lo0bits+0x22>
 801403c:	07d9      	lsls	r1, r3, #31
 801403e:	d421      	bmi.n	8014084 <__lo0bits+0x52>
 8014040:	0798      	lsls	r0, r3, #30
 8014042:	bf49      	itett	mi
 8014044:	085b      	lsrmi	r3, r3, #1
 8014046:	089b      	lsrpl	r3, r3, #2
 8014048:	2001      	movmi	r0, #1
 801404a:	6013      	strmi	r3, [r2, #0]
 801404c:	bf5c      	itt	pl
 801404e:	6013      	strpl	r3, [r2, #0]
 8014050:	2002      	movpl	r0, #2
 8014052:	4770      	bx	lr
 8014054:	b299      	uxth	r1, r3
 8014056:	b909      	cbnz	r1, 801405c <__lo0bits+0x2a>
 8014058:	0c1b      	lsrs	r3, r3, #16
 801405a:	2010      	movs	r0, #16
 801405c:	b2d9      	uxtb	r1, r3
 801405e:	b909      	cbnz	r1, 8014064 <__lo0bits+0x32>
 8014060:	3008      	adds	r0, #8
 8014062:	0a1b      	lsrs	r3, r3, #8
 8014064:	0719      	lsls	r1, r3, #28
 8014066:	bf04      	itt	eq
 8014068:	091b      	lsreq	r3, r3, #4
 801406a:	3004      	addeq	r0, #4
 801406c:	0799      	lsls	r1, r3, #30
 801406e:	bf04      	itt	eq
 8014070:	089b      	lsreq	r3, r3, #2
 8014072:	3002      	addeq	r0, #2
 8014074:	07d9      	lsls	r1, r3, #31
 8014076:	d403      	bmi.n	8014080 <__lo0bits+0x4e>
 8014078:	085b      	lsrs	r3, r3, #1
 801407a:	f100 0001 	add.w	r0, r0, #1
 801407e:	d003      	beq.n	8014088 <__lo0bits+0x56>
 8014080:	6013      	str	r3, [r2, #0]
 8014082:	4770      	bx	lr
 8014084:	2000      	movs	r0, #0
 8014086:	4770      	bx	lr
 8014088:	2020      	movs	r0, #32
 801408a:	4770      	bx	lr

0801408c <__i2b>:
 801408c:	b510      	push	{r4, lr}
 801408e:	460c      	mov	r4, r1
 8014090:	2101      	movs	r1, #1
 8014092:	f7ff ff07 	bl	8013ea4 <_Balloc>
 8014096:	4602      	mov	r2, r0
 8014098:	b928      	cbnz	r0, 80140a6 <__i2b+0x1a>
 801409a:	4b05      	ldr	r3, [pc, #20]	@ (80140b0 <__i2b+0x24>)
 801409c:	4805      	ldr	r0, [pc, #20]	@ (80140b4 <__i2b+0x28>)
 801409e:	f240 1145 	movw	r1, #325	@ 0x145
 80140a2:	f000 fcbd 	bl	8014a20 <__assert_func>
 80140a6:	2301      	movs	r3, #1
 80140a8:	6144      	str	r4, [r0, #20]
 80140aa:	6103      	str	r3, [r0, #16]
 80140ac:	bd10      	pop	{r4, pc}
 80140ae:	bf00      	nop
 80140b0:	080152dc 	.word	0x080152dc
 80140b4:	080152ed 	.word	0x080152ed

080140b8 <__multiply>:
 80140b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80140bc:	4614      	mov	r4, r2
 80140be:	690a      	ldr	r2, [r1, #16]
 80140c0:	6923      	ldr	r3, [r4, #16]
 80140c2:	429a      	cmp	r2, r3
 80140c4:	bfa8      	it	ge
 80140c6:	4623      	movge	r3, r4
 80140c8:	460f      	mov	r7, r1
 80140ca:	bfa4      	itt	ge
 80140cc:	460c      	movge	r4, r1
 80140ce:	461f      	movge	r7, r3
 80140d0:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80140d4:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80140d8:	68a3      	ldr	r3, [r4, #8]
 80140da:	6861      	ldr	r1, [r4, #4]
 80140dc:	eb0a 0609 	add.w	r6, sl, r9
 80140e0:	42b3      	cmp	r3, r6
 80140e2:	b085      	sub	sp, #20
 80140e4:	bfb8      	it	lt
 80140e6:	3101      	addlt	r1, #1
 80140e8:	f7ff fedc 	bl	8013ea4 <_Balloc>
 80140ec:	b930      	cbnz	r0, 80140fc <__multiply+0x44>
 80140ee:	4602      	mov	r2, r0
 80140f0:	4b44      	ldr	r3, [pc, #272]	@ (8014204 <__multiply+0x14c>)
 80140f2:	4845      	ldr	r0, [pc, #276]	@ (8014208 <__multiply+0x150>)
 80140f4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80140f8:	f000 fc92 	bl	8014a20 <__assert_func>
 80140fc:	f100 0514 	add.w	r5, r0, #20
 8014100:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8014104:	462b      	mov	r3, r5
 8014106:	2200      	movs	r2, #0
 8014108:	4543      	cmp	r3, r8
 801410a:	d321      	bcc.n	8014150 <__multiply+0x98>
 801410c:	f107 0114 	add.w	r1, r7, #20
 8014110:	f104 0214 	add.w	r2, r4, #20
 8014114:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8014118:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 801411c:	9302      	str	r3, [sp, #8]
 801411e:	1b13      	subs	r3, r2, r4
 8014120:	3b15      	subs	r3, #21
 8014122:	f023 0303 	bic.w	r3, r3, #3
 8014126:	3304      	adds	r3, #4
 8014128:	f104 0715 	add.w	r7, r4, #21
 801412c:	42ba      	cmp	r2, r7
 801412e:	bf38      	it	cc
 8014130:	2304      	movcc	r3, #4
 8014132:	9301      	str	r3, [sp, #4]
 8014134:	9b02      	ldr	r3, [sp, #8]
 8014136:	9103      	str	r1, [sp, #12]
 8014138:	428b      	cmp	r3, r1
 801413a:	d80c      	bhi.n	8014156 <__multiply+0x9e>
 801413c:	2e00      	cmp	r6, #0
 801413e:	dd03      	ble.n	8014148 <__multiply+0x90>
 8014140:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8014144:	2b00      	cmp	r3, #0
 8014146:	d05b      	beq.n	8014200 <__multiply+0x148>
 8014148:	6106      	str	r6, [r0, #16]
 801414a:	b005      	add	sp, #20
 801414c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014150:	f843 2b04 	str.w	r2, [r3], #4
 8014154:	e7d8      	b.n	8014108 <__multiply+0x50>
 8014156:	f8b1 a000 	ldrh.w	sl, [r1]
 801415a:	f1ba 0f00 	cmp.w	sl, #0
 801415e:	d024      	beq.n	80141aa <__multiply+0xf2>
 8014160:	f104 0e14 	add.w	lr, r4, #20
 8014164:	46a9      	mov	r9, r5
 8014166:	f04f 0c00 	mov.w	ip, #0
 801416a:	f85e 7b04 	ldr.w	r7, [lr], #4
 801416e:	f8d9 3000 	ldr.w	r3, [r9]
 8014172:	fa1f fb87 	uxth.w	fp, r7
 8014176:	b29b      	uxth	r3, r3
 8014178:	fb0a 330b 	mla	r3, sl, fp, r3
 801417c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8014180:	f8d9 7000 	ldr.w	r7, [r9]
 8014184:	4463      	add	r3, ip
 8014186:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801418a:	fb0a c70b 	mla	r7, sl, fp, ip
 801418e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8014192:	b29b      	uxth	r3, r3
 8014194:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8014198:	4572      	cmp	r2, lr
 801419a:	f849 3b04 	str.w	r3, [r9], #4
 801419e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80141a2:	d8e2      	bhi.n	801416a <__multiply+0xb2>
 80141a4:	9b01      	ldr	r3, [sp, #4]
 80141a6:	f845 c003 	str.w	ip, [r5, r3]
 80141aa:	9b03      	ldr	r3, [sp, #12]
 80141ac:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80141b0:	3104      	adds	r1, #4
 80141b2:	f1b9 0f00 	cmp.w	r9, #0
 80141b6:	d021      	beq.n	80141fc <__multiply+0x144>
 80141b8:	682b      	ldr	r3, [r5, #0]
 80141ba:	f104 0c14 	add.w	ip, r4, #20
 80141be:	46ae      	mov	lr, r5
 80141c0:	f04f 0a00 	mov.w	sl, #0
 80141c4:	f8bc b000 	ldrh.w	fp, [ip]
 80141c8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80141cc:	fb09 770b 	mla	r7, r9, fp, r7
 80141d0:	4457      	add	r7, sl
 80141d2:	b29b      	uxth	r3, r3
 80141d4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80141d8:	f84e 3b04 	str.w	r3, [lr], #4
 80141dc:	f85c 3b04 	ldr.w	r3, [ip], #4
 80141e0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80141e4:	f8be 3000 	ldrh.w	r3, [lr]
 80141e8:	fb09 330a 	mla	r3, r9, sl, r3
 80141ec:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80141f0:	4562      	cmp	r2, ip
 80141f2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80141f6:	d8e5      	bhi.n	80141c4 <__multiply+0x10c>
 80141f8:	9f01      	ldr	r7, [sp, #4]
 80141fa:	51eb      	str	r3, [r5, r7]
 80141fc:	3504      	adds	r5, #4
 80141fe:	e799      	b.n	8014134 <__multiply+0x7c>
 8014200:	3e01      	subs	r6, #1
 8014202:	e79b      	b.n	801413c <__multiply+0x84>
 8014204:	080152dc 	.word	0x080152dc
 8014208:	080152ed 	.word	0x080152ed

0801420c <__pow5mult>:
 801420c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014210:	4615      	mov	r5, r2
 8014212:	f012 0203 	ands.w	r2, r2, #3
 8014216:	4607      	mov	r7, r0
 8014218:	460e      	mov	r6, r1
 801421a:	d007      	beq.n	801422c <__pow5mult+0x20>
 801421c:	4c25      	ldr	r4, [pc, #148]	@ (80142b4 <__pow5mult+0xa8>)
 801421e:	3a01      	subs	r2, #1
 8014220:	2300      	movs	r3, #0
 8014222:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8014226:	f7ff fe9f 	bl	8013f68 <__multadd>
 801422a:	4606      	mov	r6, r0
 801422c:	10ad      	asrs	r5, r5, #2
 801422e:	d03d      	beq.n	80142ac <__pow5mult+0xa0>
 8014230:	69fc      	ldr	r4, [r7, #28]
 8014232:	b97c      	cbnz	r4, 8014254 <__pow5mult+0x48>
 8014234:	2010      	movs	r0, #16
 8014236:	f7ff fd7f 	bl	8013d38 <malloc>
 801423a:	4602      	mov	r2, r0
 801423c:	61f8      	str	r0, [r7, #28]
 801423e:	b928      	cbnz	r0, 801424c <__pow5mult+0x40>
 8014240:	4b1d      	ldr	r3, [pc, #116]	@ (80142b8 <__pow5mult+0xac>)
 8014242:	481e      	ldr	r0, [pc, #120]	@ (80142bc <__pow5mult+0xb0>)
 8014244:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8014248:	f000 fbea 	bl	8014a20 <__assert_func>
 801424c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8014250:	6004      	str	r4, [r0, #0]
 8014252:	60c4      	str	r4, [r0, #12]
 8014254:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8014258:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801425c:	b94c      	cbnz	r4, 8014272 <__pow5mult+0x66>
 801425e:	f240 2171 	movw	r1, #625	@ 0x271
 8014262:	4638      	mov	r0, r7
 8014264:	f7ff ff12 	bl	801408c <__i2b>
 8014268:	2300      	movs	r3, #0
 801426a:	f8c8 0008 	str.w	r0, [r8, #8]
 801426e:	4604      	mov	r4, r0
 8014270:	6003      	str	r3, [r0, #0]
 8014272:	f04f 0900 	mov.w	r9, #0
 8014276:	07eb      	lsls	r3, r5, #31
 8014278:	d50a      	bpl.n	8014290 <__pow5mult+0x84>
 801427a:	4631      	mov	r1, r6
 801427c:	4622      	mov	r2, r4
 801427e:	4638      	mov	r0, r7
 8014280:	f7ff ff1a 	bl	80140b8 <__multiply>
 8014284:	4631      	mov	r1, r6
 8014286:	4680      	mov	r8, r0
 8014288:	4638      	mov	r0, r7
 801428a:	f7ff fe4b 	bl	8013f24 <_Bfree>
 801428e:	4646      	mov	r6, r8
 8014290:	106d      	asrs	r5, r5, #1
 8014292:	d00b      	beq.n	80142ac <__pow5mult+0xa0>
 8014294:	6820      	ldr	r0, [r4, #0]
 8014296:	b938      	cbnz	r0, 80142a8 <__pow5mult+0x9c>
 8014298:	4622      	mov	r2, r4
 801429a:	4621      	mov	r1, r4
 801429c:	4638      	mov	r0, r7
 801429e:	f7ff ff0b 	bl	80140b8 <__multiply>
 80142a2:	6020      	str	r0, [r4, #0]
 80142a4:	f8c0 9000 	str.w	r9, [r0]
 80142a8:	4604      	mov	r4, r0
 80142aa:	e7e4      	b.n	8014276 <__pow5mult+0x6a>
 80142ac:	4630      	mov	r0, r6
 80142ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80142b2:	bf00      	nop
 80142b4:	08015348 	.word	0x08015348
 80142b8:	0801526d 	.word	0x0801526d
 80142bc:	080152ed 	.word	0x080152ed

080142c0 <__lshift>:
 80142c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80142c4:	460c      	mov	r4, r1
 80142c6:	6849      	ldr	r1, [r1, #4]
 80142c8:	6923      	ldr	r3, [r4, #16]
 80142ca:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80142ce:	68a3      	ldr	r3, [r4, #8]
 80142d0:	4607      	mov	r7, r0
 80142d2:	4691      	mov	r9, r2
 80142d4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80142d8:	f108 0601 	add.w	r6, r8, #1
 80142dc:	42b3      	cmp	r3, r6
 80142de:	db0b      	blt.n	80142f8 <__lshift+0x38>
 80142e0:	4638      	mov	r0, r7
 80142e2:	f7ff fddf 	bl	8013ea4 <_Balloc>
 80142e6:	4605      	mov	r5, r0
 80142e8:	b948      	cbnz	r0, 80142fe <__lshift+0x3e>
 80142ea:	4602      	mov	r2, r0
 80142ec:	4b28      	ldr	r3, [pc, #160]	@ (8014390 <__lshift+0xd0>)
 80142ee:	4829      	ldr	r0, [pc, #164]	@ (8014394 <__lshift+0xd4>)
 80142f0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80142f4:	f000 fb94 	bl	8014a20 <__assert_func>
 80142f8:	3101      	adds	r1, #1
 80142fa:	005b      	lsls	r3, r3, #1
 80142fc:	e7ee      	b.n	80142dc <__lshift+0x1c>
 80142fe:	2300      	movs	r3, #0
 8014300:	f100 0114 	add.w	r1, r0, #20
 8014304:	f100 0210 	add.w	r2, r0, #16
 8014308:	4618      	mov	r0, r3
 801430a:	4553      	cmp	r3, sl
 801430c:	db33      	blt.n	8014376 <__lshift+0xb6>
 801430e:	6920      	ldr	r0, [r4, #16]
 8014310:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8014314:	f104 0314 	add.w	r3, r4, #20
 8014318:	f019 091f 	ands.w	r9, r9, #31
 801431c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8014320:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8014324:	d02b      	beq.n	801437e <__lshift+0xbe>
 8014326:	f1c9 0e20 	rsb	lr, r9, #32
 801432a:	468a      	mov	sl, r1
 801432c:	2200      	movs	r2, #0
 801432e:	6818      	ldr	r0, [r3, #0]
 8014330:	fa00 f009 	lsl.w	r0, r0, r9
 8014334:	4310      	orrs	r0, r2
 8014336:	f84a 0b04 	str.w	r0, [sl], #4
 801433a:	f853 2b04 	ldr.w	r2, [r3], #4
 801433e:	459c      	cmp	ip, r3
 8014340:	fa22 f20e 	lsr.w	r2, r2, lr
 8014344:	d8f3      	bhi.n	801432e <__lshift+0x6e>
 8014346:	ebac 0304 	sub.w	r3, ip, r4
 801434a:	3b15      	subs	r3, #21
 801434c:	f023 0303 	bic.w	r3, r3, #3
 8014350:	3304      	adds	r3, #4
 8014352:	f104 0015 	add.w	r0, r4, #21
 8014356:	4584      	cmp	ip, r0
 8014358:	bf38      	it	cc
 801435a:	2304      	movcc	r3, #4
 801435c:	50ca      	str	r2, [r1, r3]
 801435e:	b10a      	cbz	r2, 8014364 <__lshift+0xa4>
 8014360:	f108 0602 	add.w	r6, r8, #2
 8014364:	3e01      	subs	r6, #1
 8014366:	4638      	mov	r0, r7
 8014368:	612e      	str	r6, [r5, #16]
 801436a:	4621      	mov	r1, r4
 801436c:	f7ff fdda 	bl	8013f24 <_Bfree>
 8014370:	4628      	mov	r0, r5
 8014372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014376:	f842 0f04 	str.w	r0, [r2, #4]!
 801437a:	3301      	adds	r3, #1
 801437c:	e7c5      	b.n	801430a <__lshift+0x4a>
 801437e:	3904      	subs	r1, #4
 8014380:	f853 2b04 	ldr.w	r2, [r3], #4
 8014384:	f841 2f04 	str.w	r2, [r1, #4]!
 8014388:	459c      	cmp	ip, r3
 801438a:	d8f9      	bhi.n	8014380 <__lshift+0xc0>
 801438c:	e7ea      	b.n	8014364 <__lshift+0xa4>
 801438e:	bf00      	nop
 8014390:	080152dc 	.word	0x080152dc
 8014394:	080152ed 	.word	0x080152ed

08014398 <__mcmp>:
 8014398:	690a      	ldr	r2, [r1, #16]
 801439a:	4603      	mov	r3, r0
 801439c:	6900      	ldr	r0, [r0, #16]
 801439e:	1a80      	subs	r0, r0, r2
 80143a0:	b530      	push	{r4, r5, lr}
 80143a2:	d10e      	bne.n	80143c2 <__mcmp+0x2a>
 80143a4:	3314      	adds	r3, #20
 80143a6:	3114      	adds	r1, #20
 80143a8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80143ac:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80143b0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80143b4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80143b8:	4295      	cmp	r5, r2
 80143ba:	d003      	beq.n	80143c4 <__mcmp+0x2c>
 80143bc:	d205      	bcs.n	80143ca <__mcmp+0x32>
 80143be:	f04f 30ff 	mov.w	r0, #4294967295
 80143c2:	bd30      	pop	{r4, r5, pc}
 80143c4:	42a3      	cmp	r3, r4
 80143c6:	d3f3      	bcc.n	80143b0 <__mcmp+0x18>
 80143c8:	e7fb      	b.n	80143c2 <__mcmp+0x2a>
 80143ca:	2001      	movs	r0, #1
 80143cc:	e7f9      	b.n	80143c2 <__mcmp+0x2a>
	...

080143d0 <__mdiff>:
 80143d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80143d4:	4689      	mov	r9, r1
 80143d6:	4606      	mov	r6, r0
 80143d8:	4611      	mov	r1, r2
 80143da:	4648      	mov	r0, r9
 80143dc:	4614      	mov	r4, r2
 80143de:	f7ff ffdb 	bl	8014398 <__mcmp>
 80143e2:	1e05      	subs	r5, r0, #0
 80143e4:	d112      	bne.n	801440c <__mdiff+0x3c>
 80143e6:	4629      	mov	r1, r5
 80143e8:	4630      	mov	r0, r6
 80143ea:	f7ff fd5b 	bl	8013ea4 <_Balloc>
 80143ee:	4602      	mov	r2, r0
 80143f0:	b928      	cbnz	r0, 80143fe <__mdiff+0x2e>
 80143f2:	4b3f      	ldr	r3, [pc, #252]	@ (80144f0 <__mdiff+0x120>)
 80143f4:	f240 2137 	movw	r1, #567	@ 0x237
 80143f8:	483e      	ldr	r0, [pc, #248]	@ (80144f4 <__mdiff+0x124>)
 80143fa:	f000 fb11 	bl	8014a20 <__assert_func>
 80143fe:	2301      	movs	r3, #1
 8014400:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8014404:	4610      	mov	r0, r2
 8014406:	b003      	add	sp, #12
 8014408:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801440c:	bfbc      	itt	lt
 801440e:	464b      	movlt	r3, r9
 8014410:	46a1      	movlt	r9, r4
 8014412:	4630      	mov	r0, r6
 8014414:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8014418:	bfba      	itte	lt
 801441a:	461c      	movlt	r4, r3
 801441c:	2501      	movlt	r5, #1
 801441e:	2500      	movge	r5, #0
 8014420:	f7ff fd40 	bl	8013ea4 <_Balloc>
 8014424:	4602      	mov	r2, r0
 8014426:	b918      	cbnz	r0, 8014430 <__mdiff+0x60>
 8014428:	4b31      	ldr	r3, [pc, #196]	@ (80144f0 <__mdiff+0x120>)
 801442a:	f240 2145 	movw	r1, #581	@ 0x245
 801442e:	e7e3      	b.n	80143f8 <__mdiff+0x28>
 8014430:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8014434:	6926      	ldr	r6, [r4, #16]
 8014436:	60c5      	str	r5, [r0, #12]
 8014438:	f109 0310 	add.w	r3, r9, #16
 801443c:	f109 0514 	add.w	r5, r9, #20
 8014440:	f104 0e14 	add.w	lr, r4, #20
 8014444:	f100 0b14 	add.w	fp, r0, #20
 8014448:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 801444c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8014450:	9301      	str	r3, [sp, #4]
 8014452:	46d9      	mov	r9, fp
 8014454:	f04f 0c00 	mov.w	ip, #0
 8014458:	9b01      	ldr	r3, [sp, #4]
 801445a:	f85e 0b04 	ldr.w	r0, [lr], #4
 801445e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8014462:	9301      	str	r3, [sp, #4]
 8014464:	fa1f f38a 	uxth.w	r3, sl
 8014468:	4619      	mov	r1, r3
 801446a:	b283      	uxth	r3, r0
 801446c:	1acb      	subs	r3, r1, r3
 801446e:	0c00      	lsrs	r0, r0, #16
 8014470:	4463      	add	r3, ip
 8014472:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8014476:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801447a:	b29b      	uxth	r3, r3
 801447c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8014480:	4576      	cmp	r6, lr
 8014482:	f849 3b04 	str.w	r3, [r9], #4
 8014486:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801448a:	d8e5      	bhi.n	8014458 <__mdiff+0x88>
 801448c:	1b33      	subs	r3, r6, r4
 801448e:	3b15      	subs	r3, #21
 8014490:	f023 0303 	bic.w	r3, r3, #3
 8014494:	3415      	adds	r4, #21
 8014496:	3304      	adds	r3, #4
 8014498:	42a6      	cmp	r6, r4
 801449a:	bf38      	it	cc
 801449c:	2304      	movcc	r3, #4
 801449e:	441d      	add	r5, r3
 80144a0:	445b      	add	r3, fp
 80144a2:	461e      	mov	r6, r3
 80144a4:	462c      	mov	r4, r5
 80144a6:	4544      	cmp	r4, r8
 80144a8:	d30e      	bcc.n	80144c8 <__mdiff+0xf8>
 80144aa:	f108 0103 	add.w	r1, r8, #3
 80144ae:	1b49      	subs	r1, r1, r5
 80144b0:	f021 0103 	bic.w	r1, r1, #3
 80144b4:	3d03      	subs	r5, #3
 80144b6:	45a8      	cmp	r8, r5
 80144b8:	bf38      	it	cc
 80144ba:	2100      	movcc	r1, #0
 80144bc:	440b      	add	r3, r1
 80144be:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80144c2:	b191      	cbz	r1, 80144ea <__mdiff+0x11a>
 80144c4:	6117      	str	r7, [r2, #16]
 80144c6:	e79d      	b.n	8014404 <__mdiff+0x34>
 80144c8:	f854 1b04 	ldr.w	r1, [r4], #4
 80144cc:	46e6      	mov	lr, ip
 80144ce:	0c08      	lsrs	r0, r1, #16
 80144d0:	fa1c fc81 	uxtah	ip, ip, r1
 80144d4:	4471      	add	r1, lr
 80144d6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80144da:	b289      	uxth	r1, r1
 80144dc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80144e0:	f846 1b04 	str.w	r1, [r6], #4
 80144e4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80144e8:	e7dd      	b.n	80144a6 <__mdiff+0xd6>
 80144ea:	3f01      	subs	r7, #1
 80144ec:	e7e7      	b.n	80144be <__mdiff+0xee>
 80144ee:	bf00      	nop
 80144f0:	080152dc 	.word	0x080152dc
 80144f4:	080152ed 	.word	0x080152ed

080144f8 <__d2b>:
 80144f8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80144fc:	460f      	mov	r7, r1
 80144fe:	2101      	movs	r1, #1
 8014500:	ec59 8b10 	vmov	r8, r9, d0
 8014504:	4616      	mov	r6, r2
 8014506:	f7ff fccd 	bl	8013ea4 <_Balloc>
 801450a:	4604      	mov	r4, r0
 801450c:	b930      	cbnz	r0, 801451c <__d2b+0x24>
 801450e:	4602      	mov	r2, r0
 8014510:	4b23      	ldr	r3, [pc, #140]	@ (80145a0 <__d2b+0xa8>)
 8014512:	4824      	ldr	r0, [pc, #144]	@ (80145a4 <__d2b+0xac>)
 8014514:	f240 310f 	movw	r1, #783	@ 0x30f
 8014518:	f000 fa82 	bl	8014a20 <__assert_func>
 801451c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8014520:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8014524:	b10d      	cbz	r5, 801452a <__d2b+0x32>
 8014526:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801452a:	9301      	str	r3, [sp, #4]
 801452c:	f1b8 0300 	subs.w	r3, r8, #0
 8014530:	d023      	beq.n	801457a <__d2b+0x82>
 8014532:	4668      	mov	r0, sp
 8014534:	9300      	str	r3, [sp, #0]
 8014536:	f7ff fd7c 	bl	8014032 <__lo0bits>
 801453a:	e9dd 1200 	ldrd	r1, r2, [sp]
 801453e:	b1d0      	cbz	r0, 8014576 <__d2b+0x7e>
 8014540:	f1c0 0320 	rsb	r3, r0, #32
 8014544:	fa02 f303 	lsl.w	r3, r2, r3
 8014548:	430b      	orrs	r3, r1
 801454a:	40c2      	lsrs	r2, r0
 801454c:	6163      	str	r3, [r4, #20]
 801454e:	9201      	str	r2, [sp, #4]
 8014550:	9b01      	ldr	r3, [sp, #4]
 8014552:	61a3      	str	r3, [r4, #24]
 8014554:	2b00      	cmp	r3, #0
 8014556:	bf0c      	ite	eq
 8014558:	2201      	moveq	r2, #1
 801455a:	2202      	movne	r2, #2
 801455c:	6122      	str	r2, [r4, #16]
 801455e:	b1a5      	cbz	r5, 801458a <__d2b+0x92>
 8014560:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8014564:	4405      	add	r5, r0
 8014566:	603d      	str	r5, [r7, #0]
 8014568:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 801456c:	6030      	str	r0, [r6, #0]
 801456e:	4620      	mov	r0, r4
 8014570:	b003      	add	sp, #12
 8014572:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014576:	6161      	str	r1, [r4, #20]
 8014578:	e7ea      	b.n	8014550 <__d2b+0x58>
 801457a:	a801      	add	r0, sp, #4
 801457c:	f7ff fd59 	bl	8014032 <__lo0bits>
 8014580:	9b01      	ldr	r3, [sp, #4]
 8014582:	6163      	str	r3, [r4, #20]
 8014584:	3020      	adds	r0, #32
 8014586:	2201      	movs	r2, #1
 8014588:	e7e8      	b.n	801455c <__d2b+0x64>
 801458a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801458e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8014592:	6038      	str	r0, [r7, #0]
 8014594:	6918      	ldr	r0, [r3, #16]
 8014596:	f7ff fd2d 	bl	8013ff4 <__hi0bits>
 801459a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801459e:	e7e5      	b.n	801456c <__d2b+0x74>
 80145a0:	080152dc 	.word	0x080152dc
 80145a4:	080152ed 	.word	0x080152ed

080145a8 <__ssputs_r>:
 80145a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80145ac:	688e      	ldr	r6, [r1, #8]
 80145ae:	461f      	mov	r7, r3
 80145b0:	42be      	cmp	r6, r7
 80145b2:	680b      	ldr	r3, [r1, #0]
 80145b4:	4682      	mov	sl, r0
 80145b6:	460c      	mov	r4, r1
 80145b8:	4690      	mov	r8, r2
 80145ba:	d82d      	bhi.n	8014618 <__ssputs_r+0x70>
 80145bc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80145c0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80145c4:	d026      	beq.n	8014614 <__ssputs_r+0x6c>
 80145c6:	6965      	ldr	r5, [r4, #20]
 80145c8:	6909      	ldr	r1, [r1, #16]
 80145ca:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80145ce:	eba3 0901 	sub.w	r9, r3, r1
 80145d2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80145d6:	1c7b      	adds	r3, r7, #1
 80145d8:	444b      	add	r3, r9
 80145da:	106d      	asrs	r5, r5, #1
 80145dc:	429d      	cmp	r5, r3
 80145de:	bf38      	it	cc
 80145e0:	461d      	movcc	r5, r3
 80145e2:	0553      	lsls	r3, r2, #21
 80145e4:	d527      	bpl.n	8014636 <__ssputs_r+0x8e>
 80145e6:	4629      	mov	r1, r5
 80145e8:	f7ff fbd0 	bl	8013d8c <_malloc_r>
 80145ec:	4606      	mov	r6, r0
 80145ee:	b360      	cbz	r0, 801464a <__ssputs_r+0xa2>
 80145f0:	6921      	ldr	r1, [r4, #16]
 80145f2:	464a      	mov	r2, r9
 80145f4:	f000 fa06 	bl	8014a04 <memcpy>
 80145f8:	89a3      	ldrh	r3, [r4, #12]
 80145fa:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80145fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8014602:	81a3      	strh	r3, [r4, #12]
 8014604:	6126      	str	r6, [r4, #16]
 8014606:	6165      	str	r5, [r4, #20]
 8014608:	444e      	add	r6, r9
 801460a:	eba5 0509 	sub.w	r5, r5, r9
 801460e:	6026      	str	r6, [r4, #0]
 8014610:	60a5      	str	r5, [r4, #8]
 8014612:	463e      	mov	r6, r7
 8014614:	42be      	cmp	r6, r7
 8014616:	d900      	bls.n	801461a <__ssputs_r+0x72>
 8014618:	463e      	mov	r6, r7
 801461a:	6820      	ldr	r0, [r4, #0]
 801461c:	4632      	mov	r2, r6
 801461e:	4641      	mov	r1, r8
 8014620:	f000 f9c6 	bl	80149b0 <memmove>
 8014624:	68a3      	ldr	r3, [r4, #8]
 8014626:	1b9b      	subs	r3, r3, r6
 8014628:	60a3      	str	r3, [r4, #8]
 801462a:	6823      	ldr	r3, [r4, #0]
 801462c:	4433      	add	r3, r6
 801462e:	6023      	str	r3, [r4, #0]
 8014630:	2000      	movs	r0, #0
 8014632:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014636:	462a      	mov	r2, r5
 8014638:	f000 fa36 	bl	8014aa8 <_realloc_r>
 801463c:	4606      	mov	r6, r0
 801463e:	2800      	cmp	r0, #0
 8014640:	d1e0      	bne.n	8014604 <__ssputs_r+0x5c>
 8014642:	6921      	ldr	r1, [r4, #16]
 8014644:	4650      	mov	r0, sl
 8014646:	f7ff fb2d 	bl	8013ca4 <_free_r>
 801464a:	230c      	movs	r3, #12
 801464c:	f8ca 3000 	str.w	r3, [sl]
 8014650:	89a3      	ldrh	r3, [r4, #12]
 8014652:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014656:	81a3      	strh	r3, [r4, #12]
 8014658:	f04f 30ff 	mov.w	r0, #4294967295
 801465c:	e7e9      	b.n	8014632 <__ssputs_r+0x8a>
	...

08014660 <_svfiprintf_r>:
 8014660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014664:	4698      	mov	r8, r3
 8014666:	898b      	ldrh	r3, [r1, #12]
 8014668:	061b      	lsls	r3, r3, #24
 801466a:	b09d      	sub	sp, #116	@ 0x74
 801466c:	4607      	mov	r7, r0
 801466e:	460d      	mov	r5, r1
 8014670:	4614      	mov	r4, r2
 8014672:	d510      	bpl.n	8014696 <_svfiprintf_r+0x36>
 8014674:	690b      	ldr	r3, [r1, #16]
 8014676:	b973      	cbnz	r3, 8014696 <_svfiprintf_r+0x36>
 8014678:	2140      	movs	r1, #64	@ 0x40
 801467a:	f7ff fb87 	bl	8013d8c <_malloc_r>
 801467e:	6028      	str	r0, [r5, #0]
 8014680:	6128      	str	r0, [r5, #16]
 8014682:	b930      	cbnz	r0, 8014692 <_svfiprintf_r+0x32>
 8014684:	230c      	movs	r3, #12
 8014686:	603b      	str	r3, [r7, #0]
 8014688:	f04f 30ff 	mov.w	r0, #4294967295
 801468c:	b01d      	add	sp, #116	@ 0x74
 801468e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014692:	2340      	movs	r3, #64	@ 0x40
 8014694:	616b      	str	r3, [r5, #20]
 8014696:	2300      	movs	r3, #0
 8014698:	9309      	str	r3, [sp, #36]	@ 0x24
 801469a:	2320      	movs	r3, #32
 801469c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80146a0:	f8cd 800c 	str.w	r8, [sp, #12]
 80146a4:	2330      	movs	r3, #48	@ 0x30
 80146a6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8014844 <_svfiprintf_r+0x1e4>
 80146aa:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80146ae:	f04f 0901 	mov.w	r9, #1
 80146b2:	4623      	mov	r3, r4
 80146b4:	469a      	mov	sl, r3
 80146b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80146ba:	b10a      	cbz	r2, 80146c0 <_svfiprintf_r+0x60>
 80146bc:	2a25      	cmp	r2, #37	@ 0x25
 80146be:	d1f9      	bne.n	80146b4 <_svfiprintf_r+0x54>
 80146c0:	ebba 0b04 	subs.w	fp, sl, r4
 80146c4:	d00b      	beq.n	80146de <_svfiprintf_r+0x7e>
 80146c6:	465b      	mov	r3, fp
 80146c8:	4622      	mov	r2, r4
 80146ca:	4629      	mov	r1, r5
 80146cc:	4638      	mov	r0, r7
 80146ce:	f7ff ff6b 	bl	80145a8 <__ssputs_r>
 80146d2:	3001      	adds	r0, #1
 80146d4:	f000 80a7 	beq.w	8014826 <_svfiprintf_r+0x1c6>
 80146d8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80146da:	445a      	add	r2, fp
 80146dc:	9209      	str	r2, [sp, #36]	@ 0x24
 80146de:	f89a 3000 	ldrb.w	r3, [sl]
 80146e2:	2b00      	cmp	r3, #0
 80146e4:	f000 809f 	beq.w	8014826 <_svfiprintf_r+0x1c6>
 80146e8:	2300      	movs	r3, #0
 80146ea:	f04f 32ff 	mov.w	r2, #4294967295
 80146ee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80146f2:	f10a 0a01 	add.w	sl, sl, #1
 80146f6:	9304      	str	r3, [sp, #16]
 80146f8:	9307      	str	r3, [sp, #28]
 80146fa:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80146fe:	931a      	str	r3, [sp, #104]	@ 0x68
 8014700:	4654      	mov	r4, sl
 8014702:	2205      	movs	r2, #5
 8014704:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014708:	484e      	ldr	r0, [pc, #312]	@ (8014844 <_svfiprintf_r+0x1e4>)
 801470a:	f7eb fde9 	bl	80002e0 <memchr>
 801470e:	9a04      	ldr	r2, [sp, #16]
 8014710:	b9d8      	cbnz	r0, 801474a <_svfiprintf_r+0xea>
 8014712:	06d0      	lsls	r0, r2, #27
 8014714:	bf44      	itt	mi
 8014716:	2320      	movmi	r3, #32
 8014718:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801471c:	0711      	lsls	r1, r2, #28
 801471e:	bf44      	itt	mi
 8014720:	232b      	movmi	r3, #43	@ 0x2b
 8014722:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014726:	f89a 3000 	ldrb.w	r3, [sl]
 801472a:	2b2a      	cmp	r3, #42	@ 0x2a
 801472c:	d015      	beq.n	801475a <_svfiprintf_r+0xfa>
 801472e:	9a07      	ldr	r2, [sp, #28]
 8014730:	4654      	mov	r4, sl
 8014732:	2000      	movs	r0, #0
 8014734:	f04f 0c0a 	mov.w	ip, #10
 8014738:	4621      	mov	r1, r4
 801473a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801473e:	3b30      	subs	r3, #48	@ 0x30
 8014740:	2b09      	cmp	r3, #9
 8014742:	d94b      	bls.n	80147dc <_svfiprintf_r+0x17c>
 8014744:	b1b0      	cbz	r0, 8014774 <_svfiprintf_r+0x114>
 8014746:	9207      	str	r2, [sp, #28]
 8014748:	e014      	b.n	8014774 <_svfiprintf_r+0x114>
 801474a:	eba0 0308 	sub.w	r3, r0, r8
 801474e:	fa09 f303 	lsl.w	r3, r9, r3
 8014752:	4313      	orrs	r3, r2
 8014754:	9304      	str	r3, [sp, #16]
 8014756:	46a2      	mov	sl, r4
 8014758:	e7d2      	b.n	8014700 <_svfiprintf_r+0xa0>
 801475a:	9b03      	ldr	r3, [sp, #12]
 801475c:	1d19      	adds	r1, r3, #4
 801475e:	681b      	ldr	r3, [r3, #0]
 8014760:	9103      	str	r1, [sp, #12]
 8014762:	2b00      	cmp	r3, #0
 8014764:	bfbb      	ittet	lt
 8014766:	425b      	neglt	r3, r3
 8014768:	f042 0202 	orrlt.w	r2, r2, #2
 801476c:	9307      	strge	r3, [sp, #28]
 801476e:	9307      	strlt	r3, [sp, #28]
 8014770:	bfb8      	it	lt
 8014772:	9204      	strlt	r2, [sp, #16]
 8014774:	7823      	ldrb	r3, [r4, #0]
 8014776:	2b2e      	cmp	r3, #46	@ 0x2e
 8014778:	d10a      	bne.n	8014790 <_svfiprintf_r+0x130>
 801477a:	7863      	ldrb	r3, [r4, #1]
 801477c:	2b2a      	cmp	r3, #42	@ 0x2a
 801477e:	d132      	bne.n	80147e6 <_svfiprintf_r+0x186>
 8014780:	9b03      	ldr	r3, [sp, #12]
 8014782:	1d1a      	adds	r2, r3, #4
 8014784:	681b      	ldr	r3, [r3, #0]
 8014786:	9203      	str	r2, [sp, #12]
 8014788:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801478c:	3402      	adds	r4, #2
 801478e:	9305      	str	r3, [sp, #20]
 8014790:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8014854 <_svfiprintf_r+0x1f4>
 8014794:	7821      	ldrb	r1, [r4, #0]
 8014796:	2203      	movs	r2, #3
 8014798:	4650      	mov	r0, sl
 801479a:	f7eb fda1 	bl	80002e0 <memchr>
 801479e:	b138      	cbz	r0, 80147b0 <_svfiprintf_r+0x150>
 80147a0:	9b04      	ldr	r3, [sp, #16]
 80147a2:	eba0 000a 	sub.w	r0, r0, sl
 80147a6:	2240      	movs	r2, #64	@ 0x40
 80147a8:	4082      	lsls	r2, r0
 80147aa:	4313      	orrs	r3, r2
 80147ac:	3401      	adds	r4, #1
 80147ae:	9304      	str	r3, [sp, #16]
 80147b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80147b4:	4824      	ldr	r0, [pc, #144]	@ (8014848 <_svfiprintf_r+0x1e8>)
 80147b6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80147ba:	2206      	movs	r2, #6
 80147bc:	f7eb fd90 	bl	80002e0 <memchr>
 80147c0:	2800      	cmp	r0, #0
 80147c2:	d036      	beq.n	8014832 <_svfiprintf_r+0x1d2>
 80147c4:	4b21      	ldr	r3, [pc, #132]	@ (801484c <_svfiprintf_r+0x1ec>)
 80147c6:	bb1b      	cbnz	r3, 8014810 <_svfiprintf_r+0x1b0>
 80147c8:	9b03      	ldr	r3, [sp, #12]
 80147ca:	3307      	adds	r3, #7
 80147cc:	f023 0307 	bic.w	r3, r3, #7
 80147d0:	3308      	adds	r3, #8
 80147d2:	9303      	str	r3, [sp, #12]
 80147d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80147d6:	4433      	add	r3, r6
 80147d8:	9309      	str	r3, [sp, #36]	@ 0x24
 80147da:	e76a      	b.n	80146b2 <_svfiprintf_r+0x52>
 80147dc:	fb0c 3202 	mla	r2, ip, r2, r3
 80147e0:	460c      	mov	r4, r1
 80147e2:	2001      	movs	r0, #1
 80147e4:	e7a8      	b.n	8014738 <_svfiprintf_r+0xd8>
 80147e6:	2300      	movs	r3, #0
 80147e8:	3401      	adds	r4, #1
 80147ea:	9305      	str	r3, [sp, #20]
 80147ec:	4619      	mov	r1, r3
 80147ee:	f04f 0c0a 	mov.w	ip, #10
 80147f2:	4620      	mov	r0, r4
 80147f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80147f8:	3a30      	subs	r2, #48	@ 0x30
 80147fa:	2a09      	cmp	r2, #9
 80147fc:	d903      	bls.n	8014806 <_svfiprintf_r+0x1a6>
 80147fe:	2b00      	cmp	r3, #0
 8014800:	d0c6      	beq.n	8014790 <_svfiprintf_r+0x130>
 8014802:	9105      	str	r1, [sp, #20]
 8014804:	e7c4      	b.n	8014790 <_svfiprintf_r+0x130>
 8014806:	fb0c 2101 	mla	r1, ip, r1, r2
 801480a:	4604      	mov	r4, r0
 801480c:	2301      	movs	r3, #1
 801480e:	e7f0      	b.n	80147f2 <_svfiprintf_r+0x192>
 8014810:	ab03      	add	r3, sp, #12
 8014812:	9300      	str	r3, [sp, #0]
 8014814:	462a      	mov	r2, r5
 8014816:	4b0e      	ldr	r3, [pc, #56]	@ (8014850 <_svfiprintf_r+0x1f0>)
 8014818:	a904      	add	r1, sp, #16
 801481a:	4638      	mov	r0, r7
 801481c:	f7fd ff14 	bl	8012648 <_printf_float>
 8014820:	1c42      	adds	r2, r0, #1
 8014822:	4606      	mov	r6, r0
 8014824:	d1d6      	bne.n	80147d4 <_svfiprintf_r+0x174>
 8014826:	89ab      	ldrh	r3, [r5, #12]
 8014828:	065b      	lsls	r3, r3, #25
 801482a:	f53f af2d 	bmi.w	8014688 <_svfiprintf_r+0x28>
 801482e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8014830:	e72c      	b.n	801468c <_svfiprintf_r+0x2c>
 8014832:	ab03      	add	r3, sp, #12
 8014834:	9300      	str	r3, [sp, #0]
 8014836:	462a      	mov	r2, r5
 8014838:	4b05      	ldr	r3, [pc, #20]	@ (8014850 <_svfiprintf_r+0x1f0>)
 801483a:	a904      	add	r1, sp, #16
 801483c:	4638      	mov	r0, r7
 801483e:	f7fe f98b 	bl	8012b58 <_printf_i>
 8014842:	e7ed      	b.n	8014820 <_svfiprintf_r+0x1c0>
 8014844:	08015448 	.word	0x08015448
 8014848:	08015452 	.word	0x08015452
 801484c:	08012649 	.word	0x08012649
 8014850:	080145a9 	.word	0x080145a9
 8014854:	0801544e 	.word	0x0801544e

08014858 <__sflush_r>:
 8014858:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801485c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014860:	0716      	lsls	r6, r2, #28
 8014862:	4605      	mov	r5, r0
 8014864:	460c      	mov	r4, r1
 8014866:	d454      	bmi.n	8014912 <__sflush_r+0xba>
 8014868:	684b      	ldr	r3, [r1, #4]
 801486a:	2b00      	cmp	r3, #0
 801486c:	dc02      	bgt.n	8014874 <__sflush_r+0x1c>
 801486e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8014870:	2b00      	cmp	r3, #0
 8014872:	dd48      	ble.n	8014906 <__sflush_r+0xae>
 8014874:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8014876:	2e00      	cmp	r6, #0
 8014878:	d045      	beq.n	8014906 <__sflush_r+0xae>
 801487a:	2300      	movs	r3, #0
 801487c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8014880:	682f      	ldr	r7, [r5, #0]
 8014882:	6a21      	ldr	r1, [r4, #32]
 8014884:	602b      	str	r3, [r5, #0]
 8014886:	d030      	beq.n	80148ea <__sflush_r+0x92>
 8014888:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801488a:	89a3      	ldrh	r3, [r4, #12]
 801488c:	0759      	lsls	r1, r3, #29
 801488e:	d505      	bpl.n	801489c <__sflush_r+0x44>
 8014890:	6863      	ldr	r3, [r4, #4]
 8014892:	1ad2      	subs	r2, r2, r3
 8014894:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8014896:	b10b      	cbz	r3, 801489c <__sflush_r+0x44>
 8014898:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801489a:	1ad2      	subs	r2, r2, r3
 801489c:	2300      	movs	r3, #0
 801489e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80148a0:	6a21      	ldr	r1, [r4, #32]
 80148a2:	4628      	mov	r0, r5
 80148a4:	47b0      	blx	r6
 80148a6:	1c43      	adds	r3, r0, #1
 80148a8:	89a3      	ldrh	r3, [r4, #12]
 80148aa:	d106      	bne.n	80148ba <__sflush_r+0x62>
 80148ac:	6829      	ldr	r1, [r5, #0]
 80148ae:	291d      	cmp	r1, #29
 80148b0:	d82b      	bhi.n	801490a <__sflush_r+0xb2>
 80148b2:	4a2a      	ldr	r2, [pc, #168]	@ (801495c <__sflush_r+0x104>)
 80148b4:	410a      	asrs	r2, r1
 80148b6:	07d6      	lsls	r6, r2, #31
 80148b8:	d427      	bmi.n	801490a <__sflush_r+0xb2>
 80148ba:	2200      	movs	r2, #0
 80148bc:	6062      	str	r2, [r4, #4]
 80148be:	04d9      	lsls	r1, r3, #19
 80148c0:	6922      	ldr	r2, [r4, #16]
 80148c2:	6022      	str	r2, [r4, #0]
 80148c4:	d504      	bpl.n	80148d0 <__sflush_r+0x78>
 80148c6:	1c42      	adds	r2, r0, #1
 80148c8:	d101      	bne.n	80148ce <__sflush_r+0x76>
 80148ca:	682b      	ldr	r3, [r5, #0]
 80148cc:	b903      	cbnz	r3, 80148d0 <__sflush_r+0x78>
 80148ce:	6560      	str	r0, [r4, #84]	@ 0x54
 80148d0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80148d2:	602f      	str	r7, [r5, #0]
 80148d4:	b1b9      	cbz	r1, 8014906 <__sflush_r+0xae>
 80148d6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80148da:	4299      	cmp	r1, r3
 80148dc:	d002      	beq.n	80148e4 <__sflush_r+0x8c>
 80148de:	4628      	mov	r0, r5
 80148e0:	f7ff f9e0 	bl	8013ca4 <_free_r>
 80148e4:	2300      	movs	r3, #0
 80148e6:	6363      	str	r3, [r4, #52]	@ 0x34
 80148e8:	e00d      	b.n	8014906 <__sflush_r+0xae>
 80148ea:	2301      	movs	r3, #1
 80148ec:	4628      	mov	r0, r5
 80148ee:	47b0      	blx	r6
 80148f0:	4602      	mov	r2, r0
 80148f2:	1c50      	adds	r0, r2, #1
 80148f4:	d1c9      	bne.n	801488a <__sflush_r+0x32>
 80148f6:	682b      	ldr	r3, [r5, #0]
 80148f8:	2b00      	cmp	r3, #0
 80148fa:	d0c6      	beq.n	801488a <__sflush_r+0x32>
 80148fc:	2b1d      	cmp	r3, #29
 80148fe:	d001      	beq.n	8014904 <__sflush_r+0xac>
 8014900:	2b16      	cmp	r3, #22
 8014902:	d11e      	bne.n	8014942 <__sflush_r+0xea>
 8014904:	602f      	str	r7, [r5, #0]
 8014906:	2000      	movs	r0, #0
 8014908:	e022      	b.n	8014950 <__sflush_r+0xf8>
 801490a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801490e:	b21b      	sxth	r3, r3
 8014910:	e01b      	b.n	801494a <__sflush_r+0xf2>
 8014912:	690f      	ldr	r7, [r1, #16]
 8014914:	2f00      	cmp	r7, #0
 8014916:	d0f6      	beq.n	8014906 <__sflush_r+0xae>
 8014918:	0793      	lsls	r3, r2, #30
 801491a:	680e      	ldr	r6, [r1, #0]
 801491c:	bf08      	it	eq
 801491e:	694b      	ldreq	r3, [r1, #20]
 8014920:	600f      	str	r7, [r1, #0]
 8014922:	bf18      	it	ne
 8014924:	2300      	movne	r3, #0
 8014926:	eba6 0807 	sub.w	r8, r6, r7
 801492a:	608b      	str	r3, [r1, #8]
 801492c:	f1b8 0f00 	cmp.w	r8, #0
 8014930:	dde9      	ble.n	8014906 <__sflush_r+0xae>
 8014932:	6a21      	ldr	r1, [r4, #32]
 8014934:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8014936:	4643      	mov	r3, r8
 8014938:	463a      	mov	r2, r7
 801493a:	4628      	mov	r0, r5
 801493c:	47b0      	blx	r6
 801493e:	2800      	cmp	r0, #0
 8014940:	dc08      	bgt.n	8014954 <__sflush_r+0xfc>
 8014942:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014946:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801494a:	81a3      	strh	r3, [r4, #12]
 801494c:	f04f 30ff 	mov.w	r0, #4294967295
 8014950:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014954:	4407      	add	r7, r0
 8014956:	eba8 0800 	sub.w	r8, r8, r0
 801495a:	e7e7      	b.n	801492c <__sflush_r+0xd4>
 801495c:	dfbffffe 	.word	0xdfbffffe

08014960 <_fflush_r>:
 8014960:	b538      	push	{r3, r4, r5, lr}
 8014962:	690b      	ldr	r3, [r1, #16]
 8014964:	4605      	mov	r5, r0
 8014966:	460c      	mov	r4, r1
 8014968:	b913      	cbnz	r3, 8014970 <_fflush_r+0x10>
 801496a:	2500      	movs	r5, #0
 801496c:	4628      	mov	r0, r5
 801496e:	bd38      	pop	{r3, r4, r5, pc}
 8014970:	b118      	cbz	r0, 801497a <_fflush_r+0x1a>
 8014972:	6a03      	ldr	r3, [r0, #32]
 8014974:	b90b      	cbnz	r3, 801497a <_fflush_r+0x1a>
 8014976:	f7fe fa9b 	bl	8012eb0 <__sinit>
 801497a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801497e:	2b00      	cmp	r3, #0
 8014980:	d0f3      	beq.n	801496a <_fflush_r+0xa>
 8014982:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8014984:	07d0      	lsls	r0, r2, #31
 8014986:	d404      	bmi.n	8014992 <_fflush_r+0x32>
 8014988:	0599      	lsls	r1, r3, #22
 801498a:	d402      	bmi.n	8014992 <_fflush_r+0x32>
 801498c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801498e:	f7fe fba6 	bl	80130de <__retarget_lock_acquire_recursive>
 8014992:	4628      	mov	r0, r5
 8014994:	4621      	mov	r1, r4
 8014996:	f7ff ff5f 	bl	8014858 <__sflush_r>
 801499a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801499c:	07da      	lsls	r2, r3, #31
 801499e:	4605      	mov	r5, r0
 80149a0:	d4e4      	bmi.n	801496c <_fflush_r+0xc>
 80149a2:	89a3      	ldrh	r3, [r4, #12]
 80149a4:	059b      	lsls	r3, r3, #22
 80149a6:	d4e1      	bmi.n	801496c <_fflush_r+0xc>
 80149a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80149aa:	f7fe fb99 	bl	80130e0 <__retarget_lock_release_recursive>
 80149ae:	e7dd      	b.n	801496c <_fflush_r+0xc>

080149b0 <memmove>:
 80149b0:	4288      	cmp	r0, r1
 80149b2:	b510      	push	{r4, lr}
 80149b4:	eb01 0402 	add.w	r4, r1, r2
 80149b8:	d902      	bls.n	80149c0 <memmove+0x10>
 80149ba:	4284      	cmp	r4, r0
 80149bc:	4623      	mov	r3, r4
 80149be:	d807      	bhi.n	80149d0 <memmove+0x20>
 80149c0:	1e43      	subs	r3, r0, #1
 80149c2:	42a1      	cmp	r1, r4
 80149c4:	d008      	beq.n	80149d8 <memmove+0x28>
 80149c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80149ca:	f803 2f01 	strb.w	r2, [r3, #1]!
 80149ce:	e7f8      	b.n	80149c2 <memmove+0x12>
 80149d0:	4402      	add	r2, r0
 80149d2:	4601      	mov	r1, r0
 80149d4:	428a      	cmp	r2, r1
 80149d6:	d100      	bne.n	80149da <memmove+0x2a>
 80149d8:	bd10      	pop	{r4, pc}
 80149da:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80149de:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80149e2:	e7f7      	b.n	80149d4 <memmove+0x24>

080149e4 <_sbrk_r>:
 80149e4:	b538      	push	{r3, r4, r5, lr}
 80149e6:	4d06      	ldr	r5, [pc, #24]	@ (8014a00 <_sbrk_r+0x1c>)
 80149e8:	2300      	movs	r3, #0
 80149ea:	4604      	mov	r4, r0
 80149ec:	4608      	mov	r0, r1
 80149ee:	602b      	str	r3, [r5, #0]
 80149f0:	f7ed f8fa 	bl	8001be8 <_sbrk>
 80149f4:	1c43      	adds	r3, r0, #1
 80149f6:	d102      	bne.n	80149fe <_sbrk_r+0x1a>
 80149f8:	682b      	ldr	r3, [r5, #0]
 80149fa:	b103      	cbz	r3, 80149fe <_sbrk_r+0x1a>
 80149fc:	6023      	str	r3, [r4, #0]
 80149fe:	bd38      	pop	{r3, r4, r5, pc}
 8014a00:	24002798 	.word	0x24002798

08014a04 <memcpy>:
 8014a04:	440a      	add	r2, r1
 8014a06:	4291      	cmp	r1, r2
 8014a08:	f100 33ff 	add.w	r3, r0, #4294967295
 8014a0c:	d100      	bne.n	8014a10 <memcpy+0xc>
 8014a0e:	4770      	bx	lr
 8014a10:	b510      	push	{r4, lr}
 8014a12:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014a16:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014a1a:	4291      	cmp	r1, r2
 8014a1c:	d1f9      	bne.n	8014a12 <memcpy+0xe>
 8014a1e:	bd10      	pop	{r4, pc}

08014a20 <__assert_func>:
 8014a20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014a22:	4614      	mov	r4, r2
 8014a24:	461a      	mov	r2, r3
 8014a26:	4b09      	ldr	r3, [pc, #36]	@ (8014a4c <__assert_func+0x2c>)
 8014a28:	681b      	ldr	r3, [r3, #0]
 8014a2a:	4605      	mov	r5, r0
 8014a2c:	68d8      	ldr	r0, [r3, #12]
 8014a2e:	b954      	cbnz	r4, 8014a46 <__assert_func+0x26>
 8014a30:	4b07      	ldr	r3, [pc, #28]	@ (8014a50 <__assert_func+0x30>)
 8014a32:	461c      	mov	r4, r3
 8014a34:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8014a38:	9100      	str	r1, [sp, #0]
 8014a3a:	462b      	mov	r3, r5
 8014a3c:	4905      	ldr	r1, [pc, #20]	@ (8014a54 <__assert_func+0x34>)
 8014a3e:	f000 f86f 	bl	8014b20 <fiprintf>
 8014a42:	f000 f87f 	bl	8014b44 <abort>
 8014a46:	4b04      	ldr	r3, [pc, #16]	@ (8014a58 <__assert_func+0x38>)
 8014a48:	e7f4      	b.n	8014a34 <__assert_func+0x14>
 8014a4a:	bf00      	nop
 8014a4c:	2400012c 	.word	0x2400012c
 8014a50:	0801549e 	.word	0x0801549e
 8014a54:	08015470 	.word	0x08015470
 8014a58:	08015463 	.word	0x08015463

08014a5c <_calloc_r>:
 8014a5c:	b570      	push	{r4, r5, r6, lr}
 8014a5e:	fba1 5402 	umull	r5, r4, r1, r2
 8014a62:	b93c      	cbnz	r4, 8014a74 <_calloc_r+0x18>
 8014a64:	4629      	mov	r1, r5
 8014a66:	f7ff f991 	bl	8013d8c <_malloc_r>
 8014a6a:	4606      	mov	r6, r0
 8014a6c:	b928      	cbnz	r0, 8014a7a <_calloc_r+0x1e>
 8014a6e:	2600      	movs	r6, #0
 8014a70:	4630      	mov	r0, r6
 8014a72:	bd70      	pop	{r4, r5, r6, pc}
 8014a74:	220c      	movs	r2, #12
 8014a76:	6002      	str	r2, [r0, #0]
 8014a78:	e7f9      	b.n	8014a6e <_calloc_r+0x12>
 8014a7a:	462a      	mov	r2, r5
 8014a7c:	4621      	mov	r1, r4
 8014a7e:	f7fe fab0 	bl	8012fe2 <memset>
 8014a82:	e7f5      	b.n	8014a70 <_calloc_r+0x14>

08014a84 <__ascii_mbtowc>:
 8014a84:	b082      	sub	sp, #8
 8014a86:	b901      	cbnz	r1, 8014a8a <__ascii_mbtowc+0x6>
 8014a88:	a901      	add	r1, sp, #4
 8014a8a:	b142      	cbz	r2, 8014a9e <__ascii_mbtowc+0x1a>
 8014a8c:	b14b      	cbz	r3, 8014aa2 <__ascii_mbtowc+0x1e>
 8014a8e:	7813      	ldrb	r3, [r2, #0]
 8014a90:	600b      	str	r3, [r1, #0]
 8014a92:	7812      	ldrb	r2, [r2, #0]
 8014a94:	1e10      	subs	r0, r2, #0
 8014a96:	bf18      	it	ne
 8014a98:	2001      	movne	r0, #1
 8014a9a:	b002      	add	sp, #8
 8014a9c:	4770      	bx	lr
 8014a9e:	4610      	mov	r0, r2
 8014aa0:	e7fb      	b.n	8014a9a <__ascii_mbtowc+0x16>
 8014aa2:	f06f 0001 	mvn.w	r0, #1
 8014aa6:	e7f8      	b.n	8014a9a <__ascii_mbtowc+0x16>

08014aa8 <_realloc_r>:
 8014aa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014aac:	4680      	mov	r8, r0
 8014aae:	4615      	mov	r5, r2
 8014ab0:	460c      	mov	r4, r1
 8014ab2:	b921      	cbnz	r1, 8014abe <_realloc_r+0x16>
 8014ab4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014ab8:	4611      	mov	r1, r2
 8014aba:	f7ff b967 	b.w	8013d8c <_malloc_r>
 8014abe:	b92a      	cbnz	r2, 8014acc <_realloc_r+0x24>
 8014ac0:	f7ff f8f0 	bl	8013ca4 <_free_r>
 8014ac4:	2400      	movs	r4, #0
 8014ac6:	4620      	mov	r0, r4
 8014ac8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014acc:	f000 f841 	bl	8014b52 <_malloc_usable_size_r>
 8014ad0:	4285      	cmp	r5, r0
 8014ad2:	4606      	mov	r6, r0
 8014ad4:	d802      	bhi.n	8014adc <_realloc_r+0x34>
 8014ad6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8014ada:	d8f4      	bhi.n	8014ac6 <_realloc_r+0x1e>
 8014adc:	4629      	mov	r1, r5
 8014ade:	4640      	mov	r0, r8
 8014ae0:	f7ff f954 	bl	8013d8c <_malloc_r>
 8014ae4:	4607      	mov	r7, r0
 8014ae6:	2800      	cmp	r0, #0
 8014ae8:	d0ec      	beq.n	8014ac4 <_realloc_r+0x1c>
 8014aea:	42b5      	cmp	r5, r6
 8014aec:	462a      	mov	r2, r5
 8014aee:	4621      	mov	r1, r4
 8014af0:	bf28      	it	cs
 8014af2:	4632      	movcs	r2, r6
 8014af4:	f7ff ff86 	bl	8014a04 <memcpy>
 8014af8:	4621      	mov	r1, r4
 8014afa:	4640      	mov	r0, r8
 8014afc:	f7ff f8d2 	bl	8013ca4 <_free_r>
 8014b00:	463c      	mov	r4, r7
 8014b02:	e7e0      	b.n	8014ac6 <_realloc_r+0x1e>

08014b04 <__ascii_wctomb>:
 8014b04:	4603      	mov	r3, r0
 8014b06:	4608      	mov	r0, r1
 8014b08:	b141      	cbz	r1, 8014b1c <__ascii_wctomb+0x18>
 8014b0a:	2aff      	cmp	r2, #255	@ 0xff
 8014b0c:	d904      	bls.n	8014b18 <__ascii_wctomb+0x14>
 8014b0e:	228a      	movs	r2, #138	@ 0x8a
 8014b10:	601a      	str	r2, [r3, #0]
 8014b12:	f04f 30ff 	mov.w	r0, #4294967295
 8014b16:	4770      	bx	lr
 8014b18:	700a      	strb	r2, [r1, #0]
 8014b1a:	2001      	movs	r0, #1
 8014b1c:	4770      	bx	lr
	...

08014b20 <fiprintf>:
 8014b20:	b40e      	push	{r1, r2, r3}
 8014b22:	b503      	push	{r0, r1, lr}
 8014b24:	4601      	mov	r1, r0
 8014b26:	ab03      	add	r3, sp, #12
 8014b28:	4805      	ldr	r0, [pc, #20]	@ (8014b40 <fiprintf+0x20>)
 8014b2a:	f853 2b04 	ldr.w	r2, [r3], #4
 8014b2e:	6800      	ldr	r0, [r0, #0]
 8014b30:	9301      	str	r3, [sp, #4]
 8014b32:	f000 f83f 	bl	8014bb4 <_vfiprintf_r>
 8014b36:	b002      	add	sp, #8
 8014b38:	f85d eb04 	ldr.w	lr, [sp], #4
 8014b3c:	b003      	add	sp, #12
 8014b3e:	4770      	bx	lr
 8014b40:	2400012c 	.word	0x2400012c

08014b44 <abort>:
 8014b44:	b508      	push	{r3, lr}
 8014b46:	2006      	movs	r0, #6
 8014b48:	f000 fa08 	bl	8014f5c <raise>
 8014b4c:	2001      	movs	r0, #1
 8014b4e:	f7ec ffd3 	bl	8001af8 <_exit>

08014b52 <_malloc_usable_size_r>:
 8014b52:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014b56:	1f18      	subs	r0, r3, #4
 8014b58:	2b00      	cmp	r3, #0
 8014b5a:	bfbc      	itt	lt
 8014b5c:	580b      	ldrlt	r3, [r1, r0]
 8014b5e:	18c0      	addlt	r0, r0, r3
 8014b60:	4770      	bx	lr

08014b62 <__sfputc_r>:
 8014b62:	6893      	ldr	r3, [r2, #8]
 8014b64:	3b01      	subs	r3, #1
 8014b66:	2b00      	cmp	r3, #0
 8014b68:	b410      	push	{r4}
 8014b6a:	6093      	str	r3, [r2, #8]
 8014b6c:	da08      	bge.n	8014b80 <__sfputc_r+0x1e>
 8014b6e:	6994      	ldr	r4, [r2, #24]
 8014b70:	42a3      	cmp	r3, r4
 8014b72:	db01      	blt.n	8014b78 <__sfputc_r+0x16>
 8014b74:	290a      	cmp	r1, #10
 8014b76:	d103      	bne.n	8014b80 <__sfputc_r+0x1e>
 8014b78:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014b7c:	f000 b932 	b.w	8014de4 <__swbuf_r>
 8014b80:	6813      	ldr	r3, [r2, #0]
 8014b82:	1c58      	adds	r0, r3, #1
 8014b84:	6010      	str	r0, [r2, #0]
 8014b86:	7019      	strb	r1, [r3, #0]
 8014b88:	4608      	mov	r0, r1
 8014b8a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014b8e:	4770      	bx	lr

08014b90 <__sfputs_r>:
 8014b90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014b92:	4606      	mov	r6, r0
 8014b94:	460f      	mov	r7, r1
 8014b96:	4614      	mov	r4, r2
 8014b98:	18d5      	adds	r5, r2, r3
 8014b9a:	42ac      	cmp	r4, r5
 8014b9c:	d101      	bne.n	8014ba2 <__sfputs_r+0x12>
 8014b9e:	2000      	movs	r0, #0
 8014ba0:	e007      	b.n	8014bb2 <__sfputs_r+0x22>
 8014ba2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014ba6:	463a      	mov	r2, r7
 8014ba8:	4630      	mov	r0, r6
 8014baa:	f7ff ffda 	bl	8014b62 <__sfputc_r>
 8014bae:	1c43      	adds	r3, r0, #1
 8014bb0:	d1f3      	bne.n	8014b9a <__sfputs_r+0xa>
 8014bb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08014bb4 <_vfiprintf_r>:
 8014bb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014bb8:	460d      	mov	r5, r1
 8014bba:	b09d      	sub	sp, #116	@ 0x74
 8014bbc:	4614      	mov	r4, r2
 8014bbe:	4698      	mov	r8, r3
 8014bc0:	4606      	mov	r6, r0
 8014bc2:	b118      	cbz	r0, 8014bcc <_vfiprintf_r+0x18>
 8014bc4:	6a03      	ldr	r3, [r0, #32]
 8014bc6:	b90b      	cbnz	r3, 8014bcc <_vfiprintf_r+0x18>
 8014bc8:	f7fe f972 	bl	8012eb0 <__sinit>
 8014bcc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014bce:	07d9      	lsls	r1, r3, #31
 8014bd0:	d405      	bmi.n	8014bde <_vfiprintf_r+0x2a>
 8014bd2:	89ab      	ldrh	r3, [r5, #12]
 8014bd4:	059a      	lsls	r2, r3, #22
 8014bd6:	d402      	bmi.n	8014bde <_vfiprintf_r+0x2a>
 8014bd8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8014bda:	f7fe fa80 	bl	80130de <__retarget_lock_acquire_recursive>
 8014bde:	89ab      	ldrh	r3, [r5, #12]
 8014be0:	071b      	lsls	r3, r3, #28
 8014be2:	d501      	bpl.n	8014be8 <_vfiprintf_r+0x34>
 8014be4:	692b      	ldr	r3, [r5, #16]
 8014be6:	b99b      	cbnz	r3, 8014c10 <_vfiprintf_r+0x5c>
 8014be8:	4629      	mov	r1, r5
 8014bea:	4630      	mov	r0, r6
 8014bec:	f000 f938 	bl	8014e60 <__swsetup_r>
 8014bf0:	b170      	cbz	r0, 8014c10 <_vfiprintf_r+0x5c>
 8014bf2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014bf4:	07dc      	lsls	r4, r3, #31
 8014bf6:	d504      	bpl.n	8014c02 <_vfiprintf_r+0x4e>
 8014bf8:	f04f 30ff 	mov.w	r0, #4294967295
 8014bfc:	b01d      	add	sp, #116	@ 0x74
 8014bfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014c02:	89ab      	ldrh	r3, [r5, #12]
 8014c04:	0598      	lsls	r0, r3, #22
 8014c06:	d4f7      	bmi.n	8014bf8 <_vfiprintf_r+0x44>
 8014c08:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8014c0a:	f7fe fa69 	bl	80130e0 <__retarget_lock_release_recursive>
 8014c0e:	e7f3      	b.n	8014bf8 <_vfiprintf_r+0x44>
 8014c10:	2300      	movs	r3, #0
 8014c12:	9309      	str	r3, [sp, #36]	@ 0x24
 8014c14:	2320      	movs	r3, #32
 8014c16:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8014c1a:	f8cd 800c 	str.w	r8, [sp, #12]
 8014c1e:	2330      	movs	r3, #48	@ 0x30
 8014c20:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8014dd0 <_vfiprintf_r+0x21c>
 8014c24:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8014c28:	f04f 0901 	mov.w	r9, #1
 8014c2c:	4623      	mov	r3, r4
 8014c2e:	469a      	mov	sl, r3
 8014c30:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014c34:	b10a      	cbz	r2, 8014c3a <_vfiprintf_r+0x86>
 8014c36:	2a25      	cmp	r2, #37	@ 0x25
 8014c38:	d1f9      	bne.n	8014c2e <_vfiprintf_r+0x7a>
 8014c3a:	ebba 0b04 	subs.w	fp, sl, r4
 8014c3e:	d00b      	beq.n	8014c58 <_vfiprintf_r+0xa4>
 8014c40:	465b      	mov	r3, fp
 8014c42:	4622      	mov	r2, r4
 8014c44:	4629      	mov	r1, r5
 8014c46:	4630      	mov	r0, r6
 8014c48:	f7ff ffa2 	bl	8014b90 <__sfputs_r>
 8014c4c:	3001      	adds	r0, #1
 8014c4e:	f000 80a7 	beq.w	8014da0 <_vfiprintf_r+0x1ec>
 8014c52:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014c54:	445a      	add	r2, fp
 8014c56:	9209      	str	r2, [sp, #36]	@ 0x24
 8014c58:	f89a 3000 	ldrb.w	r3, [sl]
 8014c5c:	2b00      	cmp	r3, #0
 8014c5e:	f000 809f 	beq.w	8014da0 <_vfiprintf_r+0x1ec>
 8014c62:	2300      	movs	r3, #0
 8014c64:	f04f 32ff 	mov.w	r2, #4294967295
 8014c68:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014c6c:	f10a 0a01 	add.w	sl, sl, #1
 8014c70:	9304      	str	r3, [sp, #16]
 8014c72:	9307      	str	r3, [sp, #28]
 8014c74:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8014c78:	931a      	str	r3, [sp, #104]	@ 0x68
 8014c7a:	4654      	mov	r4, sl
 8014c7c:	2205      	movs	r2, #5
 8014c7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014c82:	4853      	ldr	r0, [pc, #332]	@ (8014dd0 <_vfiprintf_r+0x21c>)
 8014c84:	f7eb fb2c 	bl	80002e0 <memchr>
 8014c88:	9a04      	ldr	r2, [sp, #16]
 8014c8a:	b9d8      	cbnz	r0, 8014cc4 <_vfiprintf_r+0x110>
 8014c8c:	06d1      	lsls	r1, r2, #27
 8014c8e:	bf44      	itt	mi
 8014c90:	2320      	movmi	r3, #32
 8014c92:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014c96:	0713      	lsls	r3, r2, #28
 8014c98:	bf44      	itt	mi
 8014c9a:	232b      	movmi	r3, #43	@ 0x2b
 8014c9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014ca0:	f89a 3000 	ldrb.w	r3, [sl]
 8014ca4:	2b2a      	cmp	r3, #42	@ 0x2a
 8014ca6:	d015      	beq.n	8014cd4 <_vfiprintf_r+0x120>
 8014ca8:	9a07      	ldr	r2, [sp, #28]
 8014caa:	4654      	mov	r4, sl
 8014cac:	2000      	movs	r0, #0
 8014cae:	f04f 0c0a 	mov.w	ip, #10
 8014cb2:	4621      	mov	r1, r4
 8014cb4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014cb8:	3b30      	subs	r3, #48	@ 0x30
 8014cba:	2b09      	cmp	r3, #9
 8014cbc:	d94b      	bls.n	8014d56 <_vfiprintf_r+0x1a2>
 8014cbe:	b1b0      	cbz	r0, 8014cee <_vfiprintf_r+0x13a>
 8014cc0:	9207      	str	r2, [sp, #28]
 8014cc2:	e014      	b.n	8014cee <_vfiprintf_r+0x13a>
 8014cc4:	eba0 0308 	sub.w	r3, r0, r8
 8014cc8:	fa09 f303 	lsl.w	r3, r9, r3
 8014ccc:	4313      	orrs	r3, r2
 8014cce:	9304      	str	r3, [sp, #16]
 8014cd0:	46a2      	mov	sl, r4
 8014cd2:	e7d2      	b.n	8014c7a <_vfiprintf_r+0xc6>
 8014cd4:	9b03      	ldr	r3, [sp, #12]
 8014cd6:	1d19      	adds	r1, r3, #4
 8014cd8:	681b      	ldr	r3, [r3, #0]
 8014cda:	9103      	str	r1, [sp, #12]
 8014cdc:	2b00      	cmp	r3, #0
 8014cde:	bfbb      	ittet	lt
 8014ce0:	425b      	neglt	r3, r3
 8014ce2:	f042 0202 	orrlt.w	r2, r2, #2
 8014ce6:	9307      	strge	r3, [sp, #28]
 8014ce8:	9307      	strlt	r3, [sp, #28]
 8014cea:	bfb8      	it	lt
 8014cec:	9204      	strlt	r2, [sp, #16]
 8014cee:	7823      	ldrb	r3, [r4, #0]
 8014cf0:	2b2e      	cmp	r3, #46	@ 0x2e
 8014cf2:	d10a      	bne.n	8014d0a <_vfiprintf_r+0x156>
 8014cf4:	7863      	ldrb	r3, [r4, #1]
 8014cf6:	2b2a      	cmp	r3, #42	@ 0x2a
 8014cf8:	d132      	bne.n	8014d60 <_vfiprintf_r+0x1ac>
 8014cfa:	9b03      	ldr	r3, [sp, #12]
 8014cfc:	1d1a      	adds	r2, r3, #4
 8014cfe:	681b      	ldr	r3, [r3, #0]
 8014d00:	9203      	str	r2, [sp, #12]
 8014d02:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8014d06:	3402      	adds	r4, #2
 8014d08:	9305      	str	r3, [sp, #20]
 8014d0a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8014de0 <_vfiprintf_r+0x22c>
 8014d0e:	7821      	ldrb	r1, [r4, #0]
 8014d10:	2203      	movs	r2, #3
 8014d12:	4650      	mov	r0, sl
 8014d14:	f7eb fae4 	bl	80002e0 <memchr>
 8014d18:	b138      	cbz	r0, 8014d2a <_vfiprintf_r+0x176>
 8014d1a:	9b04      	ldr	r3, [sp, #16]
 8014d1c:	eba0 000a 	sub.w	r0, r0, sl
 8014d20:	2240      	movs	r2, #64	@ 0x40
 8014d22:	4082      	lsls	r2, r0
 8014d24:	4313      	orrs	r3, r2
 8014d26:	3401      	adds	r4, #1
 8014d28:	9304      	str	r3, [sp, #16]
 8014d2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014d2e:	4829      	ldr	r0, [pc, #164]	@ (8014dd4 <_vfiprintf_r+0x220>)
 8014d30:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8014d34:	2206      	movs	r2, #6
 8014d36:	f7eb fad3 	bl	80002e0 <memchr>
 8014d3a:	2800      	cmp	r0, #0
 8014d3c:	d03f      	beq.n	8014dbe <_vfiprintf_r+0x20a>
 8014d3e:	4b26      	ldr	r3, [pc, #152]	@ (8014dd8 <_vfiprintf_r+0x224>)
 8014d40:	bb1b      	cbnz	r3, 8014d8a <_vfiprintf_r+0x1d6>
 8014d42:	9b03      	ldr	r3, [sp, #12]
 8014d44:	3307      	adds	r3, #7
 8014d46:	f023 0307 	bic.w	r3, r3, #7
 8014d4a:	3308      	adds	r3, #8
 8014d4c:	9303      	str	r3, [sp, #12]
 8014d4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014d50:	443b      	add	r3, r7
 8014d52:	9309      	str	r3, [sp, #36]	@ 0x24
 8014d54:	e76a      	b.n	8014c2c <_vfiprintf_r+0x78>
 8014d56:	fb0c 3202 	mla	r2, ip, r2, r3
 8014d5a:	460c      	mov	r4, r1
 8014d5c:	2001      	movs	r0, #1
 8014d5e:	e7a8      	b.n	8014cb2 <_vfiprintf_r+0xfe>
 8014d60:	2300      	movs	r3, #0
 8014d62:	3401      	adds	r4, #1
 8014d64:	9305      	str	r3, [sp, #20]
 8014d66:	4619      	mov	r1, r3
 8014d68:	f04f 0c0a 	mov.w	ip, #10
 8014d6c:	4620      	mov	r0, r4
 8014d6e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014d72:	3a30      	subs	r2, #48	@ 0x30
 8014d74:	2a09      	cmp	r2, #9
 8014d76:	d903      	bls.n	8014d80 <_vfiprintf_r+0x1cc>
 8014d78:	2b00      	cmp	r3, #0
 8014d7a:	d0c6      	beq.n	8014d0a <_vfiprintf_r+0x156>
 8014d7c:	9105      	str	r1, [sp, #20]
 8014d7e:	e7c4      	b.n	8014d0a <_vfiprintf_r+0x156>
 8014d80:	fb0c 2101 	mla	r1, ip, r1, r2
 8014d84:	4604      	mov	r4, r0
 8014d86:	2301      	movs	r3, #1
 8014d88:	e7f0      	b.n	8014d6c <_vfiprintf_r+0x1b8>
 8014d8a:	ab03      	add	r3, sp, #12
 8014d8c:	9300      	str	r3, [sp, #0]
 8014d8e:	462a      	mov	r2, r5
 8014d90:	4b12      	ldr	r3, [pc, #72]	@ (8014ddc <_vfiprintf_r+0x228>)
 8014d92:	a904      	add	r1, sp, #16
 8014d94:	4630      	mov	r0, r6
 8014d96:	f7fd fc57 	bl	8012648 <_printf_float>
 8014d9a:	4607      	mov	r7, r0
 8014d9c:	1c78      	adds	r0, r7, #1
 8014d9e:	d1d6      	bne.n	8014d4e <_vfiprintf_r+0x19a>
 8014da0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014da2:	07d9      	lsls	r1, r3, #31
 8014da4:	d405      	bmi.n	8014db2 <_vfiprintf_r+0x1fe>
 8014da6:	89ab      	ldrh	r3, [r5, #12]
 8014da8:	059a      	lsls	r2, r3, #22
 8014daa:	d402      	bmi.n	8014db2 <_vfiprintf_r+0x1fe>
 8014dac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8014dae:	f7fe f997 	bl	80130e0 <__retarget_lock_release_recursive>
 8014db2:	89ab      	ldrh	r3, [r5, #12]
 8014db4:	065b      	lsls	r3, r3, #25
 8014db6:	f53f af1f 	bmi.w	8014bf8 <_vfiprintf_r+0x44>
 8014dba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8014dbc:	e71e      	b.n	8014bfc <_vfiprintf_r+0x48>
 8014dbe:	ab03      	add	r3, sp, #12
 8014dc0:	9300      	str	r3, [sp, #0]
 8014dc2:	462a      	mov	r2, r5
 8014dc4:	4b05      	ldr	r3, [pc, #20]	@ (8014ddc <_vfiprintf_r+0x228>)
 8014dc6:	a904      	add	r1, sp, #16
 8014dc8:	4630      	mov	r0, r6
 8014dca:	f7fd fec5 	bl	8012b58 <_printf_i>
 8014dce:	e7e4      	b.n	8014d9a <_vfiprintf_r+0x1e6>
 8014dd0:	08015448 	.word	0x08015448
 8014dd4:	08015452 	.word	0x08015452
 8014dd8:	08012649 	.word	0x08012649
 8014ddc:	08014b91 	.word	0x08014b91
 8014de0:	0801544e 	.word	0x0801544e

08014de4 <__swbuf_r>:
 8014de4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014de6:	460e      	mov	r6, r1
 8014de8:	4614      	mov	r4, r2
 8014dea:	4605      	mov	r5, r0
 8014dec:	b118      	cbz	r0, 8014df6 <__swbuf_r+0x12>
 8014dee:	6a03      	ldr	r3, [r0, #32]
 8014df0:	b90b      	cbnz	r3, 8014df6 <__swbuf_r+0x12>
 8014df2:	f7fe f85d 	bl	8012eb0 <__sinit>
 8014df6:	69a3      	ldr	r3, [r4, #24]
 8014df8:	60a3      	str	r3, [r4, #8]
 8014dfa:	89a3      	ldrh	r3, [r4, #12]
 8014dfc:	071a      	lsls	r2, r3, #28
 8014dfe:	d501      	bpl.n	8014e04 <__swbuf_r+0x20>
 8014e00:	6923      	ldr	r3, [r4, #16]
 8014e02:	b943      	cbnz	r3, 8014e16 <__swbuf_r+0x32>
 8014e04:	4621      	mov	r1, r4
 8014e06:	4628      	mov	r0, r5
 8014e08:	f000 f82a 	bl	8014e60 <__swsetup_r>
 8014e0c:	b118      	cbz	r0, 8014e16 <__swbuf_r+0x32>
 8014e0e:	f04f 37ff 	mov.w	r7, #4294967295
 8014e12:	4638      	mov	r0, r7
 8014e14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014e16:	6823      	ldr	r3, [r4, #0]
 8014e18:	6922      	ldr	r2, [r4, #16]
 8014e1a:	1a98      	subs	r0, r3, r2
 8014e1c:	6963      	ldr	r3, [r4, #20]
 8014e1e:	b2f6      	uxtb	r6, r6
 8014e20:	4283      	cmp	r3, r0
 8014e22:	4637      	mov	r7, r6
 8014e24:	dc05      	bgt.n	8014e32 <__swbuf_r+0x4e>
 8014e26:	4621      	mov	r1, r4
 8014e28:	4628      	mov	r0, r5
 8014e2a:	f7ff fd99 	bl	8014960 <_fflush_r>
 8014e2e:	2800      	cmp	r0, #0
 8014e30:	d1ed      	bne.n	8014e0e <__swbuf_r+0x2a>
 8014e32:	68a3      	ldr	r3, [r4, #8]
 8014e34:	3b01      	subs	r3, #1
 8014e36:	60a3      	str	r3, [r4, #8]
 8014e38:	6823      	ldr	r3, [r4, #0]
 8014e3a:	1c5a      	adds	r2, r3, #1
 8014e3c:	6022      	str	r2, [r4, #0]
 8014e3e:	701e      	strb	r6, [r3, #0]
 8014e40:	6962      	ldr	r2, [r4, #20]
 8014e42:	1c43      	adds	r3, r0, #1
 8014e44:	429a      	cmp	r2, r3
 8014e46:	d004      	beq.n	8014e52 <__swbuf_r+0x6e>
 8014e48:	89a3      	ldrh	r3, [r4, #12]
 8014e4a:	07db      	lsls	r3, r3, #31
 8014e4c:	d5e1      	bpl.n	8014e12 <__swbuf_r+0x2e>
 8014e4e:	2e0a      	cmp	r6, #10
 8014e50:	d1df      	bne.n	8014e12 <__swbuf_r+0x2e>
 8014e52:	4621      	mov	r1, r4
 8014e54:	4628      	mov	r0, r5
 8014e56:	f7ff fd83 	bl	8014960 <_fflush_r>
 8014e5a:	2800      	cmp	r0, #0
 8014e5c:	d0d9      	beq.n	8014e12 <__swbuf_r+0x2e>
 8014e5e:	e7d6      	b.n	8014e0e <__swbuf_r+0x2a>

08014e60 <__swsetup_r>:
 8014e60:	b538      	push	{r3, r4, r5, lr}
 8014e62:	4b29      	ldr	r3, [pc, #164]	@ (8014f08 <__swsetup_r+0xa8>)
 8014e64:	4605      	mov	r5, r0
 8014e66:	6818      	ldr	r0, [r3, #0]
 8014e68:	460c      	mov	r4, r1
 8014e6a:	b118      	cbz	r0, 8014e74 <__swsetup_r+0x14>
 8014e6c:	6a03      	ldr	r3, [r0, #32]
 8014e6e:	b90b      	cbnz	r3, 8014e74 <__swsetup_r+0x14>
 8014e70:	f7fe f81e 	bl	8012eb0 <__sinit>
 8014e74:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014e78:	0719      	lsls	r1, r3, #28
 8014e7a:	d422      	bmi.n	8014ec2 <__swsetup_r+0x62>
 8014e7c:	06da      	lsls	r2, r3, #27
 8014e7e:	d407      	bmi.n	8014e90 <__swsetup_r+0x30>
 8014e80:	2209      	movs	r2, #9
 8014e82:	602a      	str	r2, [r5, #0]
 8014e84:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014e88:	81a3      	strh	r3, [r4, #12]
 8014e8a:	f04f 30ff 	mov.w	r0, #4294967295
 8014e8e:	e033      	b.n	8014ef8 <__swsetup_r+0x98>
 8014e90:	0758      	lsls	r0, r3, #29
 8014e92:	d512      	bpl.n	8014eba <__swsetup_r+0x5a>
 8014e94:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8014e96:	b141      	cbz	r1, 8014eaa <__swsetup_r+0x4a>
 8014e98:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8014e9c:	4299      	cmp	r1, r3
 8014e9e:	d002      	beq.n	8014ea6 <__swsetup_r+0x46>
 8014ea0:	4628      	mov	r0, r5
 8014ea2:	f7fe feff 	bl	8013ca4 <_free_r>
 8014ea6:	2300      	movs	r3, #0
 8014ea8:	6363      	str	r3, [r4, #52]	@ 0x34
 8014eaa:	89a3      	ldrh	r3, [r4, #12]
 8014eac:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8014eb0:	81a3      	strh	r3, [r4, #12]
 8014eb2:	2300      	movs	r3, #0
 8014eb4:	6063      	str	r3, [r4, #4]
 8014eb6:	6923      	ldr	r3, [r4, #16]
 8014eb8:	6023      	str	r3, [r4, #0]
 8014eba:	89a3      	ldrh	r3, [r4, #12]
 8014ebc:	f043 0308 	orr.w	r3, r3, #8
 8014ec0:	81a3      	strh	r3, [r4, #12]
 8014ec2:	6923      	ldr	r3, [r4, #16]
 8014ec4:	b94b      	cbnz	r3, 8014eda <__swsetup_r+0x7a>
 8014ec6:	89a3      	ldrh	r3, [r4, #12]
 8014ec8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8014ecc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8014ed0:	d003      	beq.n	8014eda <__swsetup_r+0x7a>
 8014ed2:	4621      	mov	r1, r4
 8014ed4:	4628      	mov	r0, r5
 8014ed6:	f000 f883 	bl	8014fe0 <__smakebuf_r>
 8014eda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014ede:	f013 0201 	ands.w	r2, r3, #1
 8014ee2:	d00a      	beq.n	8014efa <__swsetup_r+0x9a>
 8014ee4:	2200      	movs	r2, #0
 8014ee6:	60a2      	str	r2, [r4, #8]
 8014ee8:	6962      	ldr	r2, [r4, #20]
 8014eea:	4252      	negs	r2, r2
 8014eec:	61a2      	str	r2, [r4, #24]
 8014eee:	6922      	ldr	r2, [r4, #16]
 8014ef0:	b942      	cbnz	r2, 8014f04 <__swsetup_r+0xa4>
 8014ef2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8014ef6:	d1c5      	bne.n	8014e84 <__swsetup_r+0x24>
 8014ef8:	bd38      	pop	{r3, r4, r5, pc}
 8014efa:	0799      	lsls	r1, r3, #30
 8014efc:	bf58      	it	pl
 8014efe:	6962      	ldrpl	r2, [r4, #20]
 8014f00:	60a2      	str	r2, [r4, #8]
 8014f02:	e7f4      	b.n	8014eee <__swsetup_r+0x8e>
 8014f04:	2000      	movs	r0, #0
 8014f06:	e7f7      	b.n	8014ef8 <__swsetup_r+0x98>
 8014f08:	2400012c 	.word	0x2400012c

08014f0c <_raise_r>:
 8014f0c:	291f      	cmp	r1, #31
 8014f0e:	b538      	push	{r3, r4, r5, lr}
 8014f10:	4605      	mov	r5, r0
 8014f12:	460c      	mov	r4, r1
 8014f14:	d904      	bls.n	8014f20 <_raise_r+0x14>
 8014f16:	2316      	movs	r3, #22
 8014f18:	6003      	str	r3, [r0, #0]
 8014f1a:	f04f 30ff 	mov.w	r0, #4294967295
 8014f1e:	bd38      	pop	{r3, r4, r5, pc}
 8014f20:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8014f22:	b112      	cbz	r2, 8014f2a <_raise_r+0x1e>
 8014f24:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8014f28:	b94b      	cbnz	r3, 8014f3e <_raise_r+0x32>
 8014f2a:	4628      	mov	r0, r5
 8014f2c:	f000 f830 	bl	8014f90 <_getpid_r>
 8014f30:	4622      	mov	r2, r4
 8014f32:	4601      	mov	r1, r0
 8014f34:	4628      	mov	r0, r5
 8014f36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014f3a:	f000 b817 	b.w	8014f6c <_kill_r>
 8014f3e:	2b01      	cmp	r3, #1
 8014f40:	d00a      	beq.n	8014f58 <_raise_r+0x4c>
 8014f42:	1c59      	adds	r1, r3, #1
 8014f44:	d103      	bne.n	8014f4e <_raise_r+0x42>
 8014f46:	2316      	movs	r3, #22
 8014f48:	6003      	str	r3, [r0, #0]
 8014f4a:	2001      	movs	r0, #1
 8014f4c:	e7e7      	b.n	8014f1e <_raise_r+0x12>
 8014f4e:	2100      	movs	r1, #0
 8014f50:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8014f54:	4620      	mov	r0, r4
 8014f56:	4798      	blx	r3
 8014f58:	2000      	movs	r0, #0
 8014f5a:	e7e0      	b.n	8014f1e <_raise_r+0x12>

08014f5c <raise>:
 8014f5c:	4b02      	ldr	r3, [pc, #8]	@ (8014f68 <raise+0xc>)
 8014f5e:	4601      	mov	r1, r0
 8014f60:	6818      	ldr	r0, [r3, #0]
 8014f62:	f7ff bfd3 	b.w	8014f0c <_raise_r>
 8014f66:	bf00      	nop
 8014f68:	2400012c 	.word	0x2400012c

08014f6c <_kill_r>:
 8014f6c:	b538      	push	{r3, r4, r5, lr}
 8014f6e:	4d07      	ldr	r5, [pc, #28]	@ (8014f8c <_kill_r+0x20>)
 8014f70:	2300      	movs	r3, #0
 8014f72:	4604      	mov	r4, r0
 8014f74:	4608      	mov	r0, r1
 8014f76:	4611      	mov	r1, r2
 8014f78:	602b      	str	r3, [r5, #0]
 8014f7a:	f7ec fdad 	bl	8001ad8 <_kill>
 8014f7e:	1c43      	adds	r3, r0, #1
 8014f80:	d102      	bne.n	8014f88 <_kill_r+0x1c>
 8014f82:	682b      	ldr	r3, [r5, #0]
 8014f84:	b103      	cbz	r3, 8014f88 <_kill_r+0x1c>
 8014f86:	6023      	str	r3, [r4, #0]
 8014f88:	bd38      	pop	{r3, r4, r5, pc}
 8014f8a:	bf00      	nop
 8014f8c:	24002798 	.word	0x24002798

08014f90 <_getpid_r>:
 8014f90:	f7ec bd9a 	b.w	8001ac8 <_getpid>

08014f94 <__swhatbuf_r>:
 8014f94:	b570      	push	{r4, r5, r6, lr}
 8014f96:	460c      	mov	r4, r1
 8014f98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014f9c:	2900      	cmp	r1, #0
 8014f9e:	b096      	sub	sp, #88	@ 0x58
 8014fa0:	4615      	mov	r5, r2
 8014fa2:	461e      	mov	r6, r3
 8014fa4:	da0d      	bge.n	8014fc2 <__swhatbuf_r+0x2e>
 8014fa6:	89a3      	ldrh	r3, [r4, #12]
 8014fa8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8014fac:	f04f 0100 	mov.w	r1, #0
 8014fb0:	bf14      	ite	ne
 8014fb2:	2340      	movne	r3, #64	@ 0x40
 8014fb4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8014fb8:	2000      	movs	r0, #0
 8014fba:	6031      	str	r1, [r6, #0]
 8014fbc:	602b      	str	r3, [r5, #0]
 8014fbe:	b016      	add	sp, #88	@ 0x58
 8014fc0:	bd70      	pop	{r4, r5, r6, pc}
 8014fc2:	466a      	mov	r2, sp
 8014fc4:	f000 f848 	bl	8015058 <_fstat_r>
 8014fc8:	2800      	cmp	r0, #0
 8014fca:	dbec      	blt.n	8014fa6 <__swhatbuf_r+0x12>
 8014fcc:	9901      	ldr	r1, [sp, #4]
 8014fce:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8014fd2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8014fd6:	4259      	negs	r1, r3
 8014fd8:	4159      	adcs	r1, r3
 8014fda:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8014fde:	e7eb      	b.n	8014fb8 <__swhatbuf_r+0x24>

08014fe0 <__smakebuf_r>:
 8014fe0:	898b      	ldrh	r3, [r1, #12]
 8014fe2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014fe4:	079d      	lsls	r5, r3, #30
 8014fe6:	4606      	mov	r6, r0
 8014fe8:	460c      	mov	r4, r1
 8014fea:	d507      	bpl.n	8014ffc <__smakebuf_r+0x1c>
 8014fec:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8014ff0:	6023      	str	r3, [r4, #0]
 8014ff2:	6123      	str	r3, [r4, #16]
 8014ff4:	2301      	movs	r3, #1
 8014ff6:	6163      	str	r3, [r4, #20]
 8014ff8:	b003      	add	sp, #12
 8014ffa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014ffc:	ab01      	add	r3, sp, #4
 8014ffe:	466a      	mov	r2, sp
 8015000:	f7ff ffc8 	bl	8014f94 <__swhatbuf_r>
 8015004:	9f00      	ldr	r7, [sp, #0]
 8015006:	4605      	mov	r5, r0
 8015008:	4639      	mov	r1, r7
 801500a:	4630      	mov	r0, r6
 801500c:	f7fe febe 	bl	8013d8c <_malloc_r>
 8015010:	b948      	cbnz	r0, 8015026 <__smakebuf_r+0x46>
 8015012:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015016:	059a      	lsls	r2, r3, #22
 8015018:	d4ee      	bmi.n	8014ff8 <__smakebuf_r+0x18>
 801501a:	f023 0303 	bic.w	r3, r3, #3
 801501e:	f043 0302 	orr.w	r3, r3, #2
 8015022:	81a3      	strh	r3, [r4, #12]
 8015024:	e7e2      	b.n	8014fec <__smakebuf_r+0xc>
 8015026:	89a3      	ldrh	r3, [r4, #12]
 8015028:	6020      	str	r0, [r4, #0]
 801502a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801502e:	81a3      	strh	r3, [r4, #12]
 8015030:	9b01      	ldr	r3, [sp, #4]
 8015032:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8015036:	b15b      	cbz	r3, 8015050 <__smakebuf_r+0x70>
 8015038:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801503c:	4630      	mov	r0, r6
 801503e:	f000 f81d 	bl	801507c <_isatty_r>
 8015042:	b128      	cbz	r0, 8015050 <__smakebuf_r+0x70>
 8015044:	89a3      	ldrh	r3, [r4, #12]
 8015046:	f023 0303 	bic.w	r3, r3, #3
 801504a:	f043 0301 	orr.w	r3, r3, #1
 801504e:	81a3      	strh	r3, [r4, #12]
 8015050:	89a3      	ldrh	r3, [r4, #12]
 8015052:	431d      	orrs	r5, r3
 8015054:	81a5      	strh	r5, [r4, #12]
 8015056:	e7cf      	b.n	8014ff8 <__smakebuf_r+0x18>

08015058 <_fstat_r>:
 8015058:	b538      	push	{r3, r4, r5, lr}
 801505a:	4d07      	ldr	r5, [pc, #28]	@ (8015078 <_fstat_r+0x20>)
 801505c:	2300      	movs	r3, #0
 801505e:	4604      	mov	r4, r0
 8015060:	4608      	mov	r0, r1
 8015062:	4611      	mov	r1, r2
 8015064:	602b      	str	r3, [r5, #0]
 8015066:	f7ec fd97 	bl	8001b98 <_fstat>
 801506a:	1c43      	adds	r3, r0, #1
 801506c:	d102      	bne.n	8015074 <_fstat_r+0x1c>
 801506e:	682b      	ldr	r3, [r5, #0]
 8015070:	b103      	cbz	r3, 8015074 <_fstat_r+0x1c>
 8015072:	6023      	str	r3, [r4, #0]
 8015074:	bd38      	pop	{r3, r4, r5, pc}
 8015076:	bf00      	nop
 8015078:	24002798 	.word	0x24002798

0801507c <_isatty_r>:
 801507c:	b538      	push	{r3, r4, r5, lr}
 801507e:	4d06      	ldr	r5, [pc, #24]	@ (8015098 <_isatty_r+0x1c>)
 8015080:	2300      	movs	r3, #0
 8015082:	4604      	mov	r4, r0
 8015084:	4608      	mov	r0, r1
 8015086:	602b      	str	r3, [r5, #0]
 8015088:	f7ec fd96 	bl	8001bb8 <_isatty>
 801508c:	1c43      	adds	r3, r0, #1
 801508e:	d102      	bne.n	8015096 <_isatty_r+0x1a>
 8015090:	682b      	ldr	r3, [r5, #0]
 8015092:	b103      	cbz	r3, 8015096 <_isatty_r+0x1a>
 8015094:	6023      	str	r3, [r4, #0]
 8015096:	bd38      	pop	{r3, r4, r5, pc}
 8015098:	24002798 	.word	0x24002798

0801509c <lrintf>:
 801509c:	ee10 3a10 	vmov	r3, s0
 80150a0:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80150a4:	f1a2 007f 	sub.w	r0, r2, #127	@ 0x7f
 80150a8:	281e      	cmp	r0, #30
 80150aa:	b082      	sub	sp, #8
 80150ac:	dc2f      	bgt.n	801510e <lrintf+0x72>
 80150ae:	1c41      	adds	r1, r0, #1
 80150b0:	da02      	bge.n	80150b8 <lrintf+0x1c>
 80150b2:	2000      	movs	r0, #0
 80150b4:	b002      	add	sp, #8
 80150b6:	4770      	bx	lr
 80150b8:	2816      	cmp	r0, #22
 80150ba:	ea4f 71d3 	mov.w	r1, r3, lsr #31
 80150be:	dd0a      	ble.n	80150d6 <lrintf+0x3a>
 80150c0:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80150c4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80150c8:	3a96      	subs	r2, #150	@ 0x96
 80150ca:	fa03 f002 	lsl.w	r0, r3, r2
 80150ce:	2900      	cmp	r1, #0
 80150d0:	d0f0      	beq.n	80150b4 <lrintf+0x18>
 80150d2:	4240      	negs	r0, r0
 80150d4:	e7ee      	b.n	80150b4 <lrintf+0x18>
 80150d6:	4b10      	ldr	r3, [pc, #64]	@ (8015118 <lrintf+0x7c>)
 80150d8:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 80150dc:	ed93 7a00 	vldr	s14, [r3]
 80150e0:	ee37 0a00 	vadd.f32	s0, s14, s0
 80150e4:	ed8d 0a01 	vstr	s0, [sp, #4]
 80150e8:	eddd 7a01 	vldr	s15, [sp, #4]
 80150ec:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80150f0:	ee17 3a90 	vmov	r3, s15
 80150f4:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 80150f8:	d0db      	beq.n	80150b2 <lrintf+0x16>
 80150fa:	f3c3 0016 	ubfx	r0, r3, #0, #23
 80150fe:	f3c3 53c7 	ubfx	r3, r3, #23, #8
 8015102:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8015106:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 801510a:	40d8      	lsrs	r0, r3
 801510c:	e7df      	b.n	80150ce <lrintf+0x32>
 801510e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8015112:	ee17 0a90 	vmov	r0, s15
 8015116:	e7cd      	b.n	80150b4 <lrintf+0x18>
 8015118:	080155a0 	.word	0x080155a0

0801511c <_init>:
 801511c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801511e:	bf00      	nop
 8015120:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015122:	bc08      	pop	{r3}
 8015124:	469e      	mov	lr, r3
 8015126:	4770      	bx	lr

08015128 <_fini>:
 8015128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801512a:	bf00      	nop
 801512c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801512e:	bc08      	pop	{r3}
 8015130:	469e      	mov	lr, r3
 8015132:	4770      	bx	lr
