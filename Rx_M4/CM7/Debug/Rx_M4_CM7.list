
Rx_M4_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014704  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000408  080149a8  080149a8  000159a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014db0  08014db0  000162f4  2**0
                  CONTENTS
  4 .ARM          00000008  08014db0  08014db0  00015db0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014db8  08014db8  000162f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014db8  08014db8  00015db8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08014dbc  08014dbc  00015dbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002f4  24000000  08014dc0  00016000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002484  240002f4  080150b4  000162f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24002778  080150b4  00016778  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000162f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002960c  00000000  00000000  00016322  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000055ee  00000000  00000000  0003f92e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001f58  00000000  00000000  00044f20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001811  00000000  00000000  00046e78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00042939  00000000  00000000  00048689  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002d969  00000000  00000000  0008afc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001a2d15  00000000  00000000  000b892b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0025b640  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000093fc  00000000  00000000  0025b684  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004e  00000000  00000000  00264a80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240002f4 	.word	0x240002f4
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0801498c 	.word	0x0801498c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240002f8 	.word	0x240002f8
 80002dc:	0801498c 	.word	0x0801498c

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96a 	b.w	800067c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	460c      	mov	r4, r1
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d14e      	bne.n	800046a <__udivmoddi4+0xaa>
 80003cc:	4694      	mov	ip, r2
 80003ce:	458c      	cmp	ip, r1
 80003d0:	4686      	mov	lr, r0
 80003d2:	fab2 f282 	clz	r2, r2
 80003d6:	d962      	bls.n	800049e <__udivmoddi4+0xde>
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0320 	rsb	r3, r2, #32
 80003de:	4091      	lsls	r1, r2
 80003e0:	fa20 f303 	lsr.w	r3, r0, r3
 80003e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003e8:	4319      	orrs	r1, r3
 80003ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80003ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003f2:	fa1f f68c 	uxth.w	r6, ip
 80003f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000402:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000406:	fb04 f106 	mul.w	r1, r4, r6
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f104 30ff 	add.w	r0, r4, #4294967295
 8000416:	f080 8112 	bcs.w	800063e <__udivmoddi4+0x27e>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 810f 	bls.w	800063e <__udivmoddi4+0x27e>
 8000420:	3c02      	subs	r4, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a59      	subs	r1, r3, r1
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb1 f0f7 	udiv	r0, r1, r7
 800042e:	fb07 1110 	mls	r1, r7, r0, r1
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f606 	mul.w	r6, r0, r6
 800043a:	429e      	cmp	r6, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x94>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 31ff 	add.w	r1, r0, #4294967295
 8000446:	f080 80fc 	bcs.w	8000642 <__udivmoddi4+0x282>
 800044a:	429e      	cmp	r6, r3
 800044c:	f240 80f9 	bls.w	8000642 <__udivmoddi4+0x282>
 8000450:	4463      	add	r3, ip
 8000452:	3802      	subs	r0, #2
 8000454:	1b9b      	subs	r3, r3, r6
 8000456:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800045a:	2100      	movs	r1, #0
 800045c:	b11d      	cbz	r5, 8000466 <__udivmoddi4+0xa6>
 800045e:	40d3      	lsrs	r3, r2
 8000460:	2200      	movs	r2, #0
 8000462:	e9c5 3200 	strd	r3, r2, [r5]
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d905      	bls.n	800047a <__udivmoddi4+0xba>
 800046e:	b10d      	cbz	r5, 8000474 <__udivmoddi4+0xb4>
 8000470:	e9c5 0100 	strd	r0, r1, [r5]
 8000474:	2100      	movs	r1, #0
 8000476:	4608      	mov	r0, r1
 8000478:	e7f5      	b.n	8000466 <__udivmoddi4+0xa6>
 800047a:	fab3 f183 	clz	r1, r3
 800047e:	2900      	cmp	r1, #0
 8000480:	d146      	bne.n	8000510 <__udivmoddi4+0x150>
 8000482:	42a3      	cmp	r3, r4
 8000484:	d302      	bcc.n	800048c <__udivmoddi4+0xcc>
 8000486:	4290      	cmp	r0, r2
 8000488:	f0c0 80f0 	bcc.w	800066c <__udivmoddi4+0x2ac>
 800048c:	1a86      	subs	r6, r0, r2
 800048e:	eb64 0303 	sbc.w	r3, r4, r3
 8000492:	2001      	movs	r0, #1
 8000494:	2d00      	cmp	r5, #0
 8000496:	d0e6      	beq.n	8000466 <__udivmoddi4+0xa6>
 8000498:	e9c5 6300 	strd	r6, r3, [r5]
 800049c:	e7e3      	b.n	8000466 <__udivmoddi4+0xa6>
 800049e:	2a00      	cmp	r2, #0
 80004a0:	f040 8090 	bne.w	80005c4 <__udivmoddi4+0x204>
 80004a4:	eba1 040c 	sub.w	r4, r1, ip
 80004a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ac:	fa1f f78c 	uxth.w	r7, ip
 80004b0:	2101      	movs	r1, #1
 80004b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ba:	fb08 4416 	mls	r4, r8, r6, r4
 80004be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004c2:	fb07 f006 	mul.w	r0, r7, r6
 80004c6:	4298      	cmp	r0, r3
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x11c>
 80004ca:	eb1c 0303 	adds.w	r3, ip, r3
 80004ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x11a>
 80004d4:	4298      	cmp	r0, r3
 80004d6:	f200 80cd 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004da:	4626      	mov	r6, r4
 80004dc:	1a1c      	subs	r4, r3, r0
 80004de:	fa1f f38e 	uxth.w	r3, lr
 80004e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004e6:	fb08 4410 	mls	r4, r8, r0, r4
 80004ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004ee:	fb00 f707 	mul.w	r7, r0, r7
 80004f2:	429f      	cmp	r7, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x148>
 80004f6:	eb1c 0303 	adds.w	r3, ip, r3
 80004fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80004fe:	d202      	bcs.n	8000506 <__udivmoddi4+0x146>
 8000500:	429f      	cmp	r7, r3
 8000502:	f200 80b0 	bhi.w	8000666 <__udivmoddi4+0x2a6>
 8000506:	4620      	mov	r0, r4
 8000508:	1bdb      	subs	r3, r3, r7
 800050a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800050e:	e7a5      	b.n	800045c <__udivmoddi4+0x9c>
 8000510:	f1c1 0620 	rsb	r6, r1, #32
 8000514:	408b      	lsls	r3, r1
 8000516:	fa22 f706 	lsr.w	r7, r2, r6
 800051a:	431f      	orrs	r7, r3
 800051c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000520:	fa04 f301 	lsl.w	r3, r4, r1
 8000524:	ea43 030c 	orr.w	r3, r3, ip
 8000528:	40f4      	lsrs	r4, r6
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	0c38      	lsrs	r0, r7, #16
 8000530:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000534:	fbb4 fef0 	udiv	lr, r4, r0
 8000538:	fa1f fc87 	uxth.w	ip, r7
 800053c:	fb00 441e 	mls	r4, r0, lr, r4
 8000540:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000544:	fb0e f90c 	mul.w	r9, lr, ip
 8000548:	45a1      	cmp	r9, r4
 800054a:	fa02 f201 	lsl.w	r2, r2, r1
 800054e:	d90a      	bls.n	8000566 <__udivmoddi4+0x1a6>
 8000550:	193c      	adds	r4, r7, r4
 8000552:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000556:	f080 8084 	bcs.w	8000662 <__udivmoddi4+0x2a2>
 800055a:	45a1      	cmp	r9, r4
 800055c:	f240 8081 	bls.w	8000662 <__udivmoddi4+0x2a2>
 8000560:	f1ae 0e02 	sub.w	lr, lr, #2
 8000564:	443c      	add	r4, r7
 8000566:	eba4 0409 	sub.w	r4, r4, r9
 800056a:	fa1f f983 	uxth.w	r9, r3
 800056e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000572:	fb00 4413 	mls	r4, r0, r3, r4
 8000576:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800057a:	fb03 fc0c 	mul.w	ip, r3, ip
 800057e:	45a4      	cmp	ip, r4
 8000580:	d907      	bls.n	8000592 <__udivmoddi4+0x1d2>
 8000582:	193c      	adds	r4, r7, r4
 8000584:	f103 30ff 	add.w	r0, r3, #4294967295
 8000588:	d267      	bcs.n	800065a <__udivmoddi4+0x29a>
 800058a:	45a4      	cmp	ip, r4
 800058c:	d965      	bls.n	800065a <__udivmoddi4+0x29a>
 800058e:	3b02      	subs	r3, #2
 8000590:	443c      	add	r4, r7
 8000592:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000596:	fba0 9302 	umull	r9, r3, r0, r2
 800059a:	eba4 040c 	sub.w	r4, r4, ip
 800059e:	429c      	cmp	r4, r3
 80005a0:	46ce      	mov	lr, r9
 80005a2:	469c      	mov	ip, r3
 80005a4:	d351      	bcc.n	800064a <__udivmoddi4+0x28a>
 80005a6:	d04e      	beq.n	8000646 <__udivmoddi4+0x286>
 80005a8:	b155      	cbz	r5, 80005c0 <__udivmoddi4+0x200>
 80005aa:	ebb8 030e 	subs.w	r3, r8, lr
 80005ae:	eb64 040c 	sbc.w	r4, r4, ip
 80005b2:	fa04 f606 	lsl.w	r6, r4, r6
 80005b6:	40cb      	lsrs	r3, r1
 80005b8:	431e      	orrs	r6, r3
 80005ba:	40cc      	lsrs	r4, r1
 80005bc:	e9c5 6400 	strd	r6, r4, [r5]
 80005c0:	2100      	movs	r1, #0
 80005c2:	e750      	b.n	8000466 <__udivmoddi4+0xa6>
 80005c4:	f1c2 0320 	rsb	r3, r2, #32
 80005c8:	fa20 f103 	lsr.w	r1, r0, r3
 80005cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d0:	fa24 f303 	lsr.w	r3, r4, r3
 80005d4:	4094      	lsls	r4, r2
 80005d6:	430c      	orrs	r4, r1
 80005d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80005e0:	fa1f f78c 	uxth.w	r7, ip
 80005e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005e8:	fb08 3110 	mls	r1, r8, r0, r3
 80005ec:	0c23      	lsrs	r3, r4, #16
 80005ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005f2:	fb00 f107 	mul.w	r1, r0, r7
 80005f6:	4299      	cmp	r1, r3
 80005f8:	d908      	bls.n	800060c <__udivmoddi4+0x24c>
 80005fa:	eb1c 0303 	adds.w	r3, ip, r3
 80005fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000602:	d22c      	bcs.n	800065e <__udivmoddi4+0x29e>
 8000604:	4299      	cmp	r1, r3
 8000606:	d92a      	bls.n	800065e <__udivmoddi4+0x29e>
 8000608:	3802      	subs	r0, #2
 800060a:	4463      	add	r3, ip
 800060c:	1a5b      	subs	r3, r3, r1
 800060e:	b2a4      	uxth	r4, r4
 8000610:	fbb3 f1f8 	udiv	r1, r3, r8
 8000614:	fb08 3311 	mls	r3, r8, r1, r3
 8000618:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800061c:	fb01 f307 	mul.w	r3, r1, r7
 8000620:	42a3      	cmp	r3, r4
 8000622:	d908      	bls.n	8000636 <__udivmoddi4+0x276>
 8000624:	eb1c 0404 	adds.w	r4, ip, r4
 8000628:	f101 36ff 	add.w	r6, r1, #4294967295
 800062c:	d213      	bcs.n	8000656 <__udivmoddi4+0x296>
 800062e:	42a3      	cmp	r3, r4
 8000630:	d911      	bls.n	8000656 <__udivmoddi4+0x296>
 8000632:	3902      	subs	r1, #2
 8000634:	4464      	add	r4, ip
 8000636:	1ae4      	subs	r4, r4, r3
 8000638:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800063c:	e739      	b.n	80004b2 <__udivmoddi4+0xf2>
 800063e:	4604      	mov	r4, r0
 8000640:	e6f0      	b.n	8000424 <__udivmoddi4+0x64>
 8000642:	4608      	mov	r0, r1
 8000644:	e706      	b.n	8000454 <__udivmoddi4+0x94>
 8000646:	45c8      	cmp	r8, r9
 8000648:	d2ae      	bcs.n	80005a8 <__udivmoddi4+0x1e8>
 800064a:	ebb9 0e02 	subs.w	lr, r9, r2
 800064e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000652:	3801      	subs	r0, #1
 8000654:	e7a8      	b.n	80005a8 <__udivmoddi4+0x1e8>
 8000656:	4631      	mov	r1, r6
 8000658:	e7ed      	b.n	8000636 <__udivmoddi4+0x276>
 800065a:	4603      	mov	r3, r0
 800065c:	e799      	b.n	8000592 <__udivmoddi4+0x1d2>
 800065e:	4630      	mov	r0, r6
 8000660:	e7d4      	b.n	800060c <__udivmoddi4+0x24c>
 8000662:	46d6      	mov	lr, sl
 8000664:	e77f      	b.n	8000566 <__udivmoddi4+0x1a6>
 8000666:	4463      	add	r3, ip
 8000668:	3802      	subs	r0, #2
 800066a:	e74d      	b.n	8000508 <__udivmoddi4+0x148>
 800066c:	4606      	mov	r6, r0
 800066e:	4623      	mov	r3, r4
 8000670:	4608      	mov	r0, r1
 8000672:	e70f      	b.n	8000494 <__udivmoddi4+0xd4>
 8000674:	3e02      	subs	r6, #2
 8000676:	4463      	add	r3, ip
 8000678:	e730      	b.n	80004dc <__udivmoddi4+0x11c>
 800067a:	bf00      	nop

0800067c <__aeabi_idiv0>:
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop

08000680 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000680:	b480      	push	{r7}
 8000682:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000684:	4b3d      	ldr	r3, [pc, #244]	@ (800077c <SystemInit+0xfc>)
 8000686:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800068a:	4a3c      	ldr	r2, [pc, #240]	@ (800077c <SystemInit+0xfc>)
 800068c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000690:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000694:	4b39      	ldr	r3, [pc, #228]	@ (800077c <SystemInit+0xfc>)
 8000696:	691b      	ldr	r3, [r3, #16]
 8000698:	4a38      	ldr	r2, [pc, #224]	@ (800077c <SystemInit+0xfc>)
 800069a:	f043 0310 	orr.w	r3, r3, #16
 800069e:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006a0:	4b37      	ldr	r3, [pc, #220]	@ (8000780 <SystemInit+0x100>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	f003 030f 	and.w	r3, r3, #15
 80006a8:	2b06      	cmp	r3, #6
 80006aa:	d807      	bhi.n	80006bc <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006ac:	4b34      	ldr	r3, [pc, #208]	@ (8000780 <SystemInit+0x100>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	f023 030f 	bic.w	r3, r3, #15
 80006b4:	4a32      	ldr	r2, [pc, #200]	@ (8000780 <SystemInit+0x100>)
 80006b6:	f043 0307 	orr.w	r3, r3, #7
 80006ba:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006bc:	4b31      	ldr	r3, [pc, #196]	@ (8000784 <SystemInit+0x104>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	4a30      	ldr	r2, [pc, #192]	@ (8000784 <SystemInit+0x104>)
 80006c2:	f043 0301 	orr.w	r3, r3, #1
 80006c6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006c8:	4b2e      	ldr	r3, [pc, #184]	@ (8000784 <SystemInit+0x104>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006ce:	4b2d      	ldr	r3, [pc, #180]	@ (8000784 <SystemInit+0x104>)
 80006d0:	681a      	ldr	r2, [r3, #0]
 80006d2:	492c      	ldr	r1, [pc, #176]	@ (8000784 <SystemInit+0x104>)
 80006d4:	4b2c      	ldr	r3, [pc, #176]	@ (8000788 <SystemInit+0x108>)
 80006d6:	4013      	ands	r3, r2
 80006d8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006da:	4b29      	ldr	r3, [pc, #164]	@ (8000780 <SystemInit+0x100>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	f003 0308 	and.w	r3, r3, #8
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d007      	beq.n	80006f6 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006e6:	4b26      	ldr	r3, [pc, #152]	@ (8000780 <SystemInit+0x100>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	f023 030f 	bic.w	r3, r3, #15
 80006ee:	4a24      	ldr	r2, [pc, #144]	@ (8000780 <SystemInit+0x100>)
 80006f0:	f043 0307 	orr.w	r3, r3, #7
 80006f4:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80006f6:	4b23      	ldr	r3, [pc, #140]	@ (8000784 <SystemInit+0x104>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80006fc:	4b21      	ldr	r3, [pc, #132]	@ (8000784 <SystemInit+0x104>)
 80006fe:	2200      	movs	r2, #0
 8000700:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000702:	4b20      	ldr	r3, [pc, #128]	@ (8000784 <SystemInit+0x104>)
 8000704:	2200      	movs	r2, #0
 8000706:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000708:	4b1e      	ldr	r3, [pc, #120]	@ (8000784 <SystemInit+0x104>)
 800070a:	4a20      	ldr	r2, [pc, #128]	@ (800078c <SystemInit+0x10c>)
 800070c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800070e:	4b1d      	ldr	r3, [pc, #116]	@ (8000784 <SystemInit+0x104>)
 8000710:	4a1f      	ldr	r2, [pc, #124]	@ (8000790 <SystemInit+0x110>)
 8000712:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000714:	4b1b      	ldr	r3, [pc, #108]	@ (8000784 <SystemInit+0x104>)
 8000716:	4a1f      	ldr	r2, [pc, #124]	@ (8000794 <SystemInit+0x114>)
 8000718:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800071a:	4b1a      	ldr	r3, [pc, #104]	@ (8000784 <SystemInit+0x104>)
 800071c:	2200      	movs	r2, #0
 800071e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000720:	4b18      	ldr	r3, [pc, #96]	@ (8000784 <SystemInit+0x104>)
 8000722:	4a1c      	ldr	r2, [pc, #112]	@ (8000794 <SystemInit+0x114>)
 8000724:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000726:	4b17      	ldr	r3, [pc, #92]	@ (8000784 <SystemInit+0x104>)
 8000728:	2200      	movs	r2, #0
 800072a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800072c:	4b15      	ldr	r3, [pc, #84]	@ (8000784 <SystemInit+0x104>)
 800072e:	4a19      	ldr	r2, [pc, #100]	@ (8000794 <SystemInit+0x114>)
 8000730:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000732:	4b14      	ldr	r3, [pc, #80]	@ (8000784 <SystemInit+0x104>)
 8000734:	2200      	movs	r2, #0
 8000736:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000738:	4b12      	ldr	r3, [pc, #72]	@ (8000784 <SystemInit+0x104>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	4a11      	ldr	r2, [pc, #68]	@ (8000784 <SystemInit+0x104>)
 800073e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000742:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000744:	4b0f      	ldr	r3, [pc, #60]	@ (8000784 <SystemInit+0x104>)
 8000746:	2200      	movs	r2, #0
 8000748:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800074a:	4b13      	ldr	r3, [pc, #76]	@ (8000798 <SystemInit+0x118>)
 800074c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800074e:	4a12      	ldr	r2, [pc, #72]	@ (8000798 <SystemInit+0x118>)
 8000750:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000754:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000756:	4b11      	ldr	r3, [pc, #68]	@ (800079c <SystemInit+0x11c>)
 8000758:	681a      	ldr	r2, [r3, #0]
 800075a:	4b11      	ldr	r3, [pc, #68]	@ (80007a0 <SystemInit+0x120>)
 800075c:	4013      	ands	r3, r2
 800075e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000762:	d202      	bcs.n	800076a <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000764:	4b0f      	ldr	r3, [pc, #60]	@ (80007a4 <SystemInit+0x124>)
 8000766:	2201      	movs	r2, #1
 8000768:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800076a:	4b0f      	ldr	r3, [pc, #60]	@ (80007a8 <SystemInit+0x128>)
 800076c:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000770:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000772:	bf00      	nop
 8000774:	46bd      	mov	sp, r7
 8000776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077a:	4770      	bx	lr
 800077c:	e000ed00 	.word	0xe000ed00
 8000780:	52002000 	.word	0x52002000
 8000784:	58024400 	.word	0x58024400
 8000788:	eaf6ed7f 	.word	0xeaf6ed7f
 800078c:	02020200 	.word	0x02020200
 8000790:	01ff0000 	.word	0x01ff0000
 8000794:	01010280 	.word	0x01010280
 8000798:	580000c0 	.word	0x580000c0
 800079c:	5c001000 	.word	0x5c001000
 80007a0:	ffff0000 	.word	0xffff0000
 80007a4:	51008108 	.word	0x51008108
 80007a8:	52004000 	.word	0x52004000

080007ac <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b08a      	sub	sp, #40	@ 0x28
 80007b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80007b2:	f107 031c 	add.w	r3, r7, #28
 80007b6:	2200      	movs	r2, #0
 80007b8:	601a      	str	r2, [r3, #0]
 80007ba:	605a      	str	r2, [r3, #4]
 80007bc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80007be:	463b      	mov	r3, r7
 80007c0:	2200      	movs	r2, #0
 80007c2:	601a      	str	r2, [r3, #0]
 80007c4:	605a      	str	r2, [r3, #4]
 80007c6:	609a      	str	r2, [r3, #8]
 80007c8:	60da      	str	r2, [r3, #12]
 80007ca:	611a      	str	r2, [r3, #16]
 80007cc:	615a      	str	r2, [r3, #20]
 80007ce:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80007d0:	4b30      	ldr	r3, [pc, #192]	@ (8000894 <MX_ADC1_Init+0xe8>)
 80007d2:	4a31      	ldr	r2, [pc, #196]	@ (8000898 <MX_ADC1_Init+0xec>)
 80007d4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 80007d6:	4b2f      	ldr	r3, [pc, #188]	@ (8000894 <MX_ADC1_Init+0xe8>)
 80007d8:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80007dc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 80007de:	4b2d      	ldr	r3, [pc, #180]	@ (8000894 <MX_ADC1_Init+0xe8>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007e4:	4b2b      	ldr	r3, [pc, #172]	@ (8000894 <MX_ADC1_Init+0xe8>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007ea:	4b2a      	ldr	r3, [pc, #168]	@ (8000894 <MX_ADC1_Init+0xe8>)
 80007ec:	2204      	movs	r2, #4
 80007ee:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80007f0:	4b28      	ldr	r3, [pc, #160]	@ (8000894 <MX_ADC1_Init+0xe8>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80007f6:	4b27      	ldr	r3, [pc, #156]	@ (8000894 <MX_ADC1_Init+0xe8>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 80007fc:	4b25      	ldr	r3, [pc, #148]	@ (8000894 <MX_ADC1_Init+0xe8>)
 80007fe:	2201      	movs	r2, #1
 8000800:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000802:	4b24      	ldr	r3, [pc, #144]	@ (8000894 <MX_ADC1_Init+0xe8>)
 8000804:	2200      	movs	r2, #0
 8000806:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000808:	4b22      	ldr	r3, [pc, #136]	@ (8000894 <MX_ADC1_Init+0xe8>)
 800080a:	2200      	movs	r2, #0
 800080c:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800080e:	4b21      	ldr	r3, [pc, #132]	@ (8000894 <MX_ADC1_Init+0xe8>)
 8000810:	2200      	movs	r2, #0
 8000812:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000814:	4b1f      	ldr	r3, [pc, #124]	@ (8000894 <MX_ADC1_Init+0xe8>)
 8000816:	2200      	movs	r2, #0
 8000818:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800081a:	4b1e      	ldr	r3, [pc, #120]	@ (8000894 <MX_ADC1_Init+0xe8>)
 800081c:	2200      	movs	r2, #0
 800081e:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000820:	4b1c      	ldr	r3, [pc, #112]	@ (8000894 <MX_ADC1_Init+0xe8>)
 8000822:	2200      	movs	r2, #0
 8000824:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000826:	4b1b      	ldr	r3, [pc, #108]	@ (8000894 <MX_ADC1_Init+0xe8>)
 8000828:	2200      	movs	r2, #0
 800082a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800082e:	4819      	ldr	r0, [pc, #100]	@ (8000894 <MX_ADC1_Init+0xe8>)
 8000830:	f002 fa7a 	bl	8002d28 <HAL_ADC_Init>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800083a:	f000 fd5c 	bl	80012f6 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800083e:	2300      	movs	r3, #0
 8000840:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000842:	f107 031c 	add.w	r3, r7, #28
 8000846:	4619      	mov	r1, r3
 8000848:	4812      	ldr	r0, [pc, #72]	@ (8000894 <MX_ADC1_Init+0xe8>)
 800084a:	f003 f89d 	bl	8003988 <HAL_ADCEx_MultiModeConfigChannel>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d001      	beq.n	8000858 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000854:	f000 fd4f 	bl	80012f6 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000858:	4b10      	ldr	r3, [pc, #64]	@ (800089c <MX_ADC1_Init+0xf0>)
 800085a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800085c:	2306      	movs	r3, #6
 800085e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000860:	2300      	movs	r3, #0
 8000862:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000864:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000868:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800086a:	2304      	movs	r3, #4
 800086c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800086e:	2300      	movs	r3, #0
 8000870:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000872:	2300      	movs	r3, #0
 8000874:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000876:	463b      	mov	r3, r7
 8000878:	4619      	mov	r1, r3
 800087a:	4806      	ldr	r0, [pc, #24]	@ (8000894 <MX_ADC1_Init+0xe8>)
 800087c:	f002 fbf6 	bl	800306c <HAL_ADC_ConfigChannel>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000886:	f000 fd36 	bl	80012f6 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800088a:	bf00      	nop
 800088c:	3728      	adds	r7, #40	@ 0x28
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	24000310 	.word	0x24000310
 8000898:	40022000 	.word	0x40022000
 800089c:	2a000400 	.word	0x2a000400

080008a0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b08a      	sub	sp, #40	@ 0x28
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a8:	f107 0314 	add.w	r3, r7, #20
 80008ac:	2200      	movs	r2, #0
 80008ae:	601a      	str	r2, [r3, #0]
 80008b0:	605a      	str	r2, [r3, #4]
 80008b2:	609a      	str	r2, [r3, #8]
 80008b4:	60da      	str	r2, [r3, #12]
 80008b6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	4a18      	ldr	r2, [pc, #96]	@ (8000920 <HAL_ADC_MspInit+0x80>)
 80008be:	4293      	cmp	r3, r2
 80008c0:	d129      	bne.n	8000916 <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80008c2:	4b18      	ldr	r3, [pc, #96]	@ (8000924 <HAL_ADC_MspInit+0x84>)
 80008c4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80008c8:	4a16      	ldr	r2, [pc, #88]	@ (8000924 <HAL_ADC_MspInit+0x84>)
 80008ca:	f043 0320 	orr.w	r3, r3, #32
 80008ce:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80008d2:	4b14      	ldr	r3, [pc, #80]	@ (8000924 <HAL_ADC_MspInit+0x84>)
 80008d4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80008d8:	f003 0320 	and.w	r3, r3, #32
 80008dc:	613b      	str	r3, [r7, #16]
 80008de:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80008e0:	4b10      	ldr	r3, [pc, #64]	@ (8000924 <HAL_ADC_MspInit+0x84>)
 80008e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008e6:	4a0f      	ldr	r2, [pc, #60]	@ (8000924 <HAL_ADC_MspInit+0x84>)
 80008e8:	f043 0304 	orr.w	r3, r3, #4
 80008ec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80008f0:	4b0c      	ldr	r3, [pc, #48]	@ (8000924 <HAL_ADC_MspInit+0x84>)
 80008f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008f6:	f003 0304 	and.w	r3, r3, #4
 80008fa:	60fb      	str	r3, [r7, #12]
 80008fc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_INP10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80008fe:	2301      	movs	r3, #1
 8000900:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000902:	2303      	movs	r3, #3
 8000904:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000906:	2300      	movs	r3, #0
 8000908:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800090a:	f107 0314 	add.w	r3, r7, #20
 800090e:	4619      	mov	r1, r3
 8000910:	4805      	ldr	r0, [pc, #20]	@ (8000928 <HAL_ADC_MspInit+0x88>)
 8000912:	f005 fb83 	bl	800601c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000916:	bf00      	nop
 8000918:	3728      	adds	r7, #40	@ 0x28
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	40022000 	.word	0x40022000
 8000924:	58024400 	.word	0x58024400
 8000928:	58020800 	.word	0x58020800

0800092c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b082      	sub	sp, #8
 8000930:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000932:	4b19      	ldr	r3, [pc, #100]	@ (8000998 <MX_DMA_Init+0x6c>)
 8000934:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000938:	4a17      	ldr	r2, [pc, #92]	@ (8000998 <MX_DMA_Init+0x6c>)
 800093a:	f043 0301 	orr.w	r3, r3, #1
 800093e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000942:	4b15      	ldr	r3, [pc, #84]	@ (8000998 <MX_DMA_Init+0x6c>)
 8000944:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000948:	f003 0301 	and.w	r3, r3, #1
 800094c:	607b      	str	r3, [r7, #4]
 800094e:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000950:	2200      	movs	r2, #0
 8000952:	2100      	movs	r1, #0
 8000954:	200c      	movs	r0, #12
 8000956:	f003 f9d0 	bl	8003cfa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800095a:	200c      	movs	r0, #12
 800095c:	f003 f9e7 	bl	8003d2e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000960:	2200      	movs	r2, #0
 8000962:	2100      	movs	r1, #0
 8000964:	200e      	movs	r0, #14
 8000966:	f003 f9c8 	bl	8003cfa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 800096a:	200e      	movs	r0, #14
 800096c:	f003 f9df 	bl	8003d2e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8000970:	2200      	movs	r2, #0
 8000972:	2100      	movs	r1, #0
 8000974:	200f      	movs	r0, #15
 8000976:	f003 f9c0 	bl	8003cfa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 800097a:	200f      	movs	r0, #15
 800097c:	f003 f9d7 	bl	8003d2e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000980:	2200      	movs	r2, #0
 8000982:	2100      	movs	r1, #0
 8000984:	2010      	movs	r0, #16
 8000986:	f003 f9b8 	bl	8003cfa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800098a:	2010      	movs	r0, #16
 800098c:	f003 f9cf 	bl	8003d2e <HAL_NVIC_EnableIRQ>

}
 8000990:	bf00      	nop
 8000992:	3708      	adds	r7, #8
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}
 8000998:	58024400 	.word	0x58024400

0800099c <dshot_init>:
static void dshot_enable_dma_request();


/* Functions */
void dshot_init(dshot_type_e dshot_type)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b082      	sub	sp, #8
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	4603      	mov	r3, r0
 80009a4:	71fb      	strb	r3, [r7, #7]
	dshot_set_timer(dshot_type);
 80009a6:	79fb      	ldrb	r3, [r7, #7]
 80009a8:	4618      	mov	r0, r3
 80009aa:	f000 f833 	bl	8000a14 <dshot_set_timer>
	dshot_put_tc_callback_function();
 80009ae:	f000 f8d3 	bl	8000b58 <dshot_put_tc_callback_function>
	dshot_start_pwm();
 80009b2:	f000 f8ef 	bl	8000b94 <dshot_start_pwm>
}
 80009b6:	bf00      	nop
 80009b8:	3708      	adds	r7, #8
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}

080009be <dshot_write>:

void dshot_write(uint16_t* motor_value)
{
 80009be:	b580      	push	{r7, lr}
 80009c0:	b082      	sub	sp, #8
 80009c2:	af00      	add	r7, sp, #0
 80009c4:	6078      	str	r0, [r7, #4]
	dshot_prepare_dmabuffer_all(motor_value);
 80009c6:	6878      	ldr	r0, [r7, #4]
 80009c8:	f000 f962 	bl	8000c90 <dshot_prepare_dmabuffer_all>
	dshot_dma_start();
 80009cc:	f000 f98c 	bl	8000ce8 <dshot_dma_start>
	dshot_enable_dma_request();
 80009d0:	f000 f9c2 	bl	8000d58 <dshot_enable_dma_request>
}
 80009d4:	bf00      	nop
 80009d6:	3708      	adds	r7, #8
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}

080009dc <dshot_choose_type>:


/* Static functions */
static uint32_t dshot_choose_type(dshot_type_e dshot_type)
{
 80009dc:	b480      	push	{r7}
 80009de:	b083      	sub	sp, #12
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	4603      	mov	r3, r0
 80009e4:	71fb      	strb	r3, [r7, #7]
	switch (dshot_type)
 80009e6:	79fb      	ldrb	r3, [r7, #7]
 80009e8:	2b01      	cmp	r3, #1
 80009ea:	d003      	beq.n	80009f4 <dshot_choose_type+0x18>
 80009ec:	2b02      	cmp	r3, #2
 80009ee:	d103      	bne.n	80009f8 <dshot_choose_type+0x1c>
	{
		case(DSHOT600):
				return DSHOT600_HZ;
 80009f0:	4b05      	ldr	r3, [pc, #20]	@ (8000a08 <dshot_choose_type+0x2c>)
 80009f2:	e002      	b.n	80009fa <dshot_choose_type+0x1e>

		case(DSHOT300):
				return DSHOT300_HZ;
 80009f4:	4b05      	ldr	r3, [pc, #20]	@ (8000a0c <dshot_choose_type+0x30>)
 80009f6:	e000      	b.n	80009fa <dshot_choose_type+0x1e>

		default:
		case(DSHOT150):
				return DSHOT150_HZ;
 80009f8:	4b05      	ldr	r3, [pc, #20]	@ (8000a10 <dshot_choose_type+0x34>)
	}
}
 80009fa:	4618      	mov	r0, r3
 80009fc:	370c      	adds	r7, #12
 80009fe:	46bd      	mov	sp, r7
 8000a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop
 8000a08:	00b71b00 	.word	0x00b71b00
 8000a0c:	005b8d80 	.word	0x005b8d80
 8000a10:	002dc6c0 	.word	0x002dc6c0

08000a14 <dshot_set_timer>:

static void dshot_set_timer(dshot_type_e dshot_type)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	ed2d 8b02 	vpush	{d8}
 8000a1a:	b084      	sub	sp, #16
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	4603      	mov	r3, r0
 8000a20:	71fb      	strb	r3, [r7, #7]
	uint16_t dshot_prescaler;
	uint32_t timer_clock = TIMER_CLOCK; // all timer clock is same as SystemCoreClock in stm32f411
 8000a22:	4b27      	ldr	r3, [pc, #156]	@ (8000ac0 <dshot_set_timer+0xac>)
 8000a24:	60fb      	str	r3, [r7, #12]

	// Calculate prescaler by dshot type
	dshot_prescaler = lrintf((float) timer_clock / dshot_choose_type(dshot_type) + 0.01f) - 1;
 8000a26:	68fb      	ldr	r3, [r7, #12]
 8000a28:	ee07 3a90 	vmov	s15, r3
 8000a2c:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8000a30:	79fb      	ldrb	r3, [r7, #7]
 8000a32:	4618      	mov	r0, r3
 8000a34:	f7ff ffd2 	bl	80009dc <dshot_choose_type>
 8000a38:	ee07 0a90 	vmov	s15, r0
 8000a3c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000a40:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8000a44:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 8000ac4 <dshot_set_timer+0xb0>
 8000a48:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000a4c:	eeb0 0a67 	vmov.f32	s0, s15
 8000a50:	f013 ff5c 	bl	801490c <lrintf>
 8000a54:	4603      	mov	r3, r0
 8000a56:	b29b      	uxth	r3, r3
 8000a58:	3b01      	subs	r3, #1
 8000a5a:	817b      	strh	r3, [r7, #10]

	// motor1
	__HAL_TIM_SET_PRESCALER(MOTOR_1_TIM, dshot_prescaler);
 8000a5c:	4b1a      	ldr	r3, [pc, #104]	@ (8000ac8 <dshot_set_timer+0xb4>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	897a      	ldrh	r2, [r7, #10]
 8000a62:	629a      	str	r2, [r3, #40]	@ 0x28
	__HAL_TIM_SET_AUTORELOAD(MOTOR_1_TIM, MOTOR_BITLENGTH);
 8000a64:	4b18      	ldr	r3, [pc, #96]	@ (8000ac8 <dshot_set_timer+0xb4>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	2214      	movs	r2, #20
 8000a6a:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000a6c:	4b16      	ldr	r3, [pc, #88]	@ (8000ac8 <dshot_set_timer+0xb4>)
 8000a6e:	2214      	movs	r2, #20
 8000a70:	60da      	str	r2, [r3, #12]

	// motor2
	__HAL_TIM_SET_PRESCALER(MOTOR_2_TIM, dshot_prescaler);
 8000a72:	4b16      	ldr	r3, [pc, #88]	@ (8000acc <dshot_set_timer+0xb8>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	897a      	ldrh	r2, [r7, #10]
 8000a78:	629a      	str	r2, [r3, #40]	@ 0x28
	__HAL_TIM_SET_AUTORELOAD(MOTOR_2_TIM, MOTOR_BITLENGTH);
 8000a7a:	4b14      	ldr	r3, [pc, #80]	@ (8000acc <dshot_set_timer+0xb8>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	2214      	movs	r2, #20
 8000a80:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000a82:	4b12      	ldr	r3, [pc, #72]	@ (8000acc <dshot_set_timer+0xb8>)
 8000a84:	2214      	movs	r2, #20
 8000a86:	60da      	str	r2, [r3, #12]

	// motor3
	__HAL_TIM_SET_PRESCALER(MOTOR_3_TIM, dshot_prescaler);
 8000a88:	4b10      	ldr	r3, [pc, #64]	@ (8000acc <dshot_set_timer+0xb8>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	897a      	ldrh	r2, [r7, #10]
 8000a8e:	629a      	str	r2, [r3, #40]	@ 0x28
	__HAL_TIM_SET_AUTORELOAD(MOTOR_3_TIM, MOTOR_BITLENGTH);
 8000a90:	4b0e      	ldr	r3, [pc, #56]	@ (8000acc <dshot_set_timer+0xb8>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	2214      	movs	r2, #20
 8000a96:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000a98:	4b0c      	ldr	r3, [pc, #48]	@ (8000acc <dshot_set_timer+0xb8>)
 8000a9a:	2214      	movs	r2, #20
 8000a9c:	60da      	str	r2, [r3, #12]

	// motor4
	__HAL_TIM_SET_PRESCALER(MOTOR_4_TIM, dshot_prescaler);
 8000a9e:	4b0a      	ldr	r3, [pc, #40]	@ (8000ac8 <dshot_set_timer+0xb4>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	897a      	ldrh	r2, [r7, #10]
 8000aa4:	629a      	str	r2, [r3, #40]	@ 0x28
	__HAL_TIM_SET_AUTORELOAD(MOTOR_4_TIM, MOTOR_BITLENGTH);
 8000aa6:	4b08      	ldr	r3, [pc, #32]	@ (8000ac8 <dshot_set_timer+0xb4>)
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	2214      	movs	r2, #20
 8000aac:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000aae:	4b06      	ldr	r3, [pc, #24]	@ (8000ac8 <dshot_set_timer+0xb4>)
 8000ab0:	2214      	movs	r2, #20
 8000ab2:	60da      	str	r2, [r3, #12]
}
 8000ab4:	bf00      	nop
 8000ab6:	3710      	adds	r7, #16
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	ecbd 8b02 	vpop	{d8}
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	0bebc200 	.word	0x0bebc200
 8000ac4:	3c23d70a 	.word	0x3c23d70a
 8000ac8:	240006e0 	.word	0x240006e0
 8000acc:	240005fc 	.word	0x240005fc

08000ad0 <dshot_dma_tc_callback>:

// __HAL_TIM_DISABLE_DMA is needed to eliminate the delay between different dshot signals
// I don't know why :(
static void dshot_dma_tc_callback(DMA_HandleTypeDef *hdma)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	b085      	sub	sp, #20
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
	TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000adc:	60fb      	str	r3, [r7, #12]

	if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8000ade:	68fb      	ldr	r3, [r7, #12]
 8000ae0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ae2:	687a      	ldr	r2, [r7, #4]
 8000ae4:	429a      	cmp	r2, r3
 8000ae6:	d108      	bne.n	8000afa <dshot_dma_tc_callback+0x2a>
	{
		__HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	68da      	ldr	r2, [r3, #12]
 8000aee:	68fb      	ldr	r3, [r7, #12]
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8000af6:	60da      	str	r2, [r3, #12]
	}
	else if(hdma == htim->hdma[TIM_DMA_ID_CC4])
	{
		__HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
	}
}
 8000af8:	e028      	b.n	8000b4c <dshot_dma_tc_callback+0x7c>
	else if(hdma == htim->hdma[TIM_DMA_ID_CC2])
 8000afa:	68fb      	ldr	r3, [r7, #12]
 8000afc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000afe:	687a      	ldr	r2, [r7, #4]
 8000b00:	429a      	cmp	r2, r3
 8000b02:	d108      	bne.n	8000b16 <dshot_dma_tc_callback+0x46>
		__HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	68da      	ldr	r2, [r3, #12]
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8000b12:	60da      	str	r2, [r3, #12]
}
 8000b14:	e01a      	b.n	8000b4c <dshot_dma_tc_callback+0x7c>
	else if(hdma == htim->hdma[TIM_DMA_ID_CC3])
 8000b16:	68fb      	ldr	r3, [r7, #12]
 8000b18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b1a:	687a      	ldr	r2, [r7, #4]
 8000b1c:	429a      	cmp	r2, r3
 8000b1e:	d108      	bne.n	8000b32 <dshot_dma_tc_callback+0x62>
		__HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	68da      	ldr	r2, [r3, #12]
 8000b26:	68fb      	ldr	r3, [r7, #12]
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8000b2e:	60da      	str	r2, [r3, #12]
}
 8000b30:	e00c      	b.n	8000b4c <dshot_dma_tc_callback+0x7c>
	else if(hdma == htim->hdma[TIM_DMA_ID_CC4])
 8000b32:	68fb      	ldr	r3, [r7, #12]
 8000b34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b36:	687a      	ldr	r2, [r7, #4]
 8000b38:	429a      	cmp	r2, r3
 8000b3a:	d107      	bne.n	8000b4c <dshot_dma_tc_callback+0x7c>
		__HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	68da      	ldr	r2, [r3, #12]
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8000b4a:	60da      	str	r2, [r3, #12]
}
 8000b4c:	bf00      	nop
 8000b4e:	3714      	adds	r7, #20
 8000b50:	46bd      	mov	sp, r7
 8000b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b56:	4770      	bx	lr

08000b58 <dshot_put_tc_callback_function>:

static void dshot_put_tc_callback_function()
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
	// TIM_DMA_ID_CCx depends on timer channel
	MOTOR_1_TIM->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = dshot_dma_tc_callback;
 8000b5c:	4b0a      	ldr	r3, [pc, #40]	@ (8000b88 <dshot_put_tc_callback_function+0x30>)
 8000b5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b60:	4a0a      	ldr	r2, [pc, #40]	@ (8000b8c <dshot_put_tc_callback_function+0x34>)
 8000b62:	63da      	str	r2, [r3, #60]	@ 0x3c
	MOTOR_2_TIM->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = dshot_dma_tc_callback;
 8000b64:	4b0a      	ldr	r3, [pc, #40]	@ (8000b90 <dshot_put_tc_callback_function+0x38>)
 8000b66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b68:	4a08      	ldr	r2, [pc, #32]	@ (8000b8c <dshot_put_tc_callback_function+0x34>)
 8000b6a:	63da      	str	r2, [r3, #60]	@ 0x3c
	MOTOR_3_TIM->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = dshot_dma_tc_callback;
 8000b6c:	4b08      	ldr	r3, [pc, #32]	@ (8000b90 <dshot_put_tc_callback_function+0x38>)
 8000b6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b70:	4a06      	ldr	r2, [pc, #24]	@ (8000b8c <dshot_put_tc_callback_function+0x34>)
 8000b72:	63da      	str	r2, [r3, #60]	@ 0x3c
	MOTOR_4_TIM->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = dshot_dma_tc_callback;
 8000b74:	4b04      	ldr	r3, [pc, #16]	@ (8000b88 <dshot_put_tc_callback_function+0x30>)
 8000b76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000b78:	4a04      	ldr	r2, [pc, #16]	@ (8000b8c <dshot_put_tc_callback_function+0x34>)
 8000b7a:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8000b7c:	bf00      	nop
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop
 8000b88:	240006e0 	.word	0x240006e0
 8000b8c:	08000ad1 	.word	0x08000ad1
 8000b90:	240005fc 	.word	0x240005fc

08000b94 <dshot_start_pwm>:

static void dshot_start_pwm()
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
	// Start the timer channel now.
    // Enabling/disabling DMA request can restart a new cycle without PWM start/stop.
  	HAL_TIM_PWM_Start(MOTOR_1_TIM, MOTOR_1_TIM_CHANNEL);
 8000b98:	210c      	movs	r1, #12
 8000b9a:	4808      	ldr	r0, [pc, #32]	@ (8000bbc <dshot_start_pwm+0x28>)
 8000b9c:	f00a fd64 	bl	800b668 <HAL_TIM_PWM_Start>
  	HAL_TIM_PWM_Start(MOTOR_2_TIM, MOTOR_2_TIM_CHANNEL);
 8000ba0:	2108      	movs	r1, #8
 8000ba2:	4807      	ldr	r0, [pc, #28]	@ (8000bc0 <dshot_start_pwm+0x2c>)
 8000ba4:	f00a fd60 	bl	800b668 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(MOTOR_3_TIM, MOTOR_3_TIM_CHANNEL);
 8000ba8:	2100      	movs	r1, #0
 8000baa:	4805      	ldr	r0, [pc, #20]	@ (8000bc0 <dshot_start_pwm+0x2c>)
 8000bac:	f00a fd5c 	bl	800b668 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(MOTOR_4_TIM, MOTOR_4_TIM_CHANNEL);
 8000bb0:	2104      	movs	r1, #4
 8000bb2:	4802      	ldr	r0, [pc, #8]	@ (8000bbc <dshot_start_pwm+0x28>)
 8000bb4:	f00a fd58 	bl	800b668 <HAL_TIM_PWM_Start>
}
 8000bb8:	bf00      	nop
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	240006e0 	.word	0x240006e0
 8000bc0:	240005fc 	.word	0x240005fc

08000bc4 <dshot_prepare_packet>:

static uint16_t dshot_prepare_packet(uint16_t value)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b087      	sub	sp, #28
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	4603      	mov	r3, r0
 8000bcc:	80fb      	strh	r3, [r7, #6]
	uint16_t packet;
	bool dshot_telemetry = false;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	72fb      	strb	r3, [r7, #11]

	packet = (value << 1) | (dshot_telemetry ? 1 : 0);
 8000bd2:	88fb      	ldrh	r3, [r7, #6]
 8000bd4:	005b      	lsls	r3, r3, #1
 8000bd6:	b21a      	sxth	r2, r3
 8000bd8:	7afb      	ldrb	r3, [r7, #11]
 8000bda:	b21b      	sxth	r3, r3
 8000bdc:	4313      	orrs	r3, r2
 8000bde:	b21b      	sxth	r3, r3
 8000be0:	813b      	strh	r3, [r7, #8]

	// compute checksum
	unsigned csum = 0;
 8000be2:	2300      	movs	r3, #0
 8000be4:	617b      	str	r3, [r7, #20]
	unsigned csum_data = packet;
 8000be6:	893b      	ldrh	r3, [r7, #8]
 8000be8:	613b      	str	r3, [r7, #16]

	for(int i = 0; i < 3; i++)
 8000bea:	2300      	movs	r3, #0
 8000bec:	60fb      	str	r3, [r7, #12]
 8000bee:	e009      	b.n	8000c04 <dshot_prepare_packet+0x40>
	{
        csum ^=  csum_data; // xor data by nibbles
 8000bf0:	697a      	ldr	r2, [r7, #20]
 8000bf2:	693b      	ldr	r3, [r7, #16]
 8000bf4:	4053      	eors	r3, r2
 8000bf6:	617b      	str	r3, [r7, #20]
        csum_data >>= 4;
 8000bf8:	693b      	ldr	r3, [r7, #16]
 8000bfa:	091b      	lsrs	r3, r3, #4
 8000bfc:	613b      	str	r3, [r7, #16]
	for(int i = 0; i < 3; i++)
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	3301      	adds	r3, #1
 8000c02:	60fb      	str	r3, [r7, #12]
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	2b02      	cmp	r3, #2
 8000c08:	ddf2      	ble.n	8000bf0 <dshot_prepare_packet+0x2c>
	}

	csum &= 0xf;
 8000c0a:	697b      	ldr	r3, [r7, #20]
 8000c0c:	f003 030f 	and.w	r3, r3, #15
 8000c10:	617b      	str	r3, [r7, #20]
	packet = (packet << 4) | csum;
 8000c12:	893b      	ldrh	r3, [r7, #8]
 8000c14:	011b      	lsls	r3, r3, #4
 8000c16:	b29a      	uxth	r2, r3
 8000c18:	697b      	ldr	r3, [r7, #20]
 8000c1a:	b29b      	uxth	r3, r3
 8000c1c:	4313      	orrs	r3, r2
 8000c1e:	813b      	strh	r3, [r7, #8]

	return packet;
 8000c20:	893b      	ldrh	r3, [r7, #8]
}
 8000c22:	4618      	mov	r0, r3
 8000c24:	371c      	adds	r7, #28
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr

08000c2e <dshot_prepare_dmabuffer>:

// Convert 16 bits packet to 16 pwm signal
static void dshot_prepare_dmabuffer(uint32_t* motor_dmabuffer, uint16_t value)
{
 8000c2e:	b580      	push	{r7, lr}
 8000c30:	b084      	sub	sp, #16
 8000c32:	af00      	add	r7, sp, #0
 8000c34:	6078      	str	r0, [r7, #4]
 8000c36:	460b      	mov	r3, r1
 8000c38:	807b      	strh	r3, [r7, #2]
	uint16_t packet;
	packet = dshot_prepare_packet(value);
 8000c3a:	887b      	ldrh	r3, [r7, #2]
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f7ff ffc1 	bl	8000bc4 <dshot_prepare_packet>
 8000c42:	4603      	mov	r3, r0
 8000c44:	81fb      	strh	r3, [r7, #14]

	for(int i = 0; i < 16; i++)
 8000c46:	2300      	movs	r3, #0
 8000c48:	60bb      	str	r3, [r7, #8]
 8000c4a:	e011      	b.n	8000c70 <dshot_prepare_dmabuffer+0x42>
	{
		motor_dmabuffer[i] = (packet & 0x8000) ? MOTOR_BIT_1 : MOTOR_BIT_0;
 8000c4c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	da01      	bge.n	8000c58 <dshot_prepare_dmabuffer+0x2a>
 8000c54:	220e      	movs	r2, #14
 8000c56:	e000      	b.n	8000c5a <dshot_prepare_dmabuffer+0x2c>
 8000c58:	2207      	movs	r2, #7
 8000c5a:	68bb      	ldr	r3, [r7, #8]
 8000c5c:	009b      	lsls	r3, r3, #2
 8000c5e:	6879      	ldr	r1, [r7, #4]
 8000c60:	440b      	add	r3, r1
 8000c62:	601a      	str	r2, [r3, #0]
		packet <<= 1;
 8000c64:	89fb      	ldrh	r3, [r7, #14]
 8000c66:	005b      	lsls	r3, r3, #1
 8000c68:	81fb      	strh	r3, [r7, #14]
	for(int i = 0; i < 16; i++)
 8000c6a:	68bb      	ldr	r3, [r7, #8]
 8000c6c:	3301      	adds	r3, #1
 8000c6e:	60bb      	str	r3, [r7, #8]
 8000c70:	68bb      	ldr	r3, [r7, #8]
 8000c72:	2b0f      	cmp	r3, #15
 8000c74:	ddea      	ble.n	8000c4c <dshot_prepare_dmabuffer+0x1e>
	}

	motor_dmabuffer[16] = 0;
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	3340      	adds	r3, #64	@ 0x40
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	601a      	str	r2, [r3, #0]
	motor_dmabuffer[17] = 0;
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	3344      	adds	r3, #68	@ 0x44
 8000c82:	2200      	movs	r2, #0
 8000c84:	601a      	str	r2, [r3, #0]
}
 8000c86:	bf00      	nop
 8000c88:	3710      	adds	r7, #16
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
	...

08000c90 <dshot_prepare_dmabuffer_all>:

static void dshot_prepare_dmabuffer_all(uint16_t* motor_value)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b082      	sub	sp, #8
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
	dshot_prepare_dmabuffer(motor1_dmabuffer, motor_value[0]);
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	881b      	ldrh	r3, [r3, #0]
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	480e      	ldr	r0, [pc, #56]	@ (8000cd8 <dshot_prepare_dmabuffer_all+0x48>)
 8000ca0:	f7ff ffc5 	bl	8000c2e <dshot_prepare_dmabuffer>
	dshot_prepare_dmabuffer(motor2_dmabuffer, motor_value[1]);
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	3302      	adds	r3, #2
 8000ca8:	881b      	ldrh	r3, [r3, #0]
 8000caa:	4619      	mov	r1, r3
 8000cac:	480b      	ldr	r0, [pc, #44]	@ (8000cdc <dshot_prepare_dmabuffer_all+0x4c>)
 8000cae:	f7ff ffbe 	bl	8000c2e <dshot_prepare_dmabuffer>
	dshot_prepare_dmabuffer(motor3_dmabuffer, motor_value[2]);
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	3304      	adds	r3, #4
 8000cb6:	881b      	ldrh	r3, [r3, #0]
 8000cb8:	4619      	mov	r1, r3
 8000cba:	4809      	ldr	r0, [pc, #36]	@ (8000ce0 <dshot_prepare_dmabuffer_all+0x50>)
 8000cbc:	f7ff ffb7 	bl	8000c2e <dshot_prepare_dmabuffer>
	dshot_prepare_dmabuffer(motor4_dmabuffer, motor_value[3]);
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	3306      	adds	r3, #6
 8000cc4:	881b      	ldrh	r3, [r3, #0]
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	4806      	ldr	r0, [pc, #24]	@ (8000ce4 <dshot_prepare_dmabuffer_all+0x54>)
 8000cca:	f7ff ffb0 	bl	8000c2e <dshot_prepare_dmabuffer>
}
 8000cce:	bf00      	nop
 8000cd0:	3708      	adds	r7, #8
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	24000374 	.word	0x24000374
 8000cdc:	240003bc 	.word	0x240003bc
 8000ce0:	24000404 	.word	0x24000404
 8000ce4:	2400044c 	.word	0x2400044c

08000ce8 <dshot_dma_start>:

static void dshot_dma_start()
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0
	HAL_DMA_Start_IT(MOTOR_1_TIM->hdma[TIM_DMA_ID_CC4], (uint32_t)motor1_dmabuffer, (uint32_t)&MOTOR_1_TIM->Instance->CCR4, DSHOT_DMA_BUFFER_SIZE);
 8000cec:	4b14      	ldr	r3, [pc, #80]	@ (8000d40 <dshot_dma_start+0x58>)
 8000cee:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8000cf0:	4914      	ldr	r1, [pc, #80]	@ (8000d44 <dshot_dma_start+0x5c>)
 8000cf2:	4b13      	ldr	r3, [pc, #76]	@ (8000d40 <dshot_dma_start+0x58>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	3340      	adds	r3, #64	@ 0x40
 8000cf8:	461a      	mov	r2, r3
 8000cfa:	2312      	movs	r3, #18
 8000cfc:	f003 fba2 	bl	8004444 <HAL_DMA_Start_IT>
	HAL_DMA_Start_IT(MOTOR_2_TIM->hdma[TIM_DMA_ID_CC3], (uint32_t)motor2_dmabuffer, (uint32_t)&MOTOR_2_TIM->Instance->CCR3, DSHOT_DMA_BUFFER_SIZE);
 8000d00:	4b11      	ldr	r3, [pc, #68]	@ (8000d48 <dshot_dma_start+0x60>)
 8000d02:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8000d04:	4911      	ldr	r1, [pc, #68]	@ (8000d4c <dshot_dma_start+0x64>)
 8000d06:	4b10      	ldr	r3, [pc, #64]	@ (8000d48 <dshot_dma_start+0x60>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	333c      	adds	r3, #60	@ 0x3c
 8000d0c:	461a      	mov	r2, r3
 8000d0e:	2312      	movs	r3, #18
 8000d10:	f003 fb98 	bl	8004444 <HAL_DMA_Start_IT>
	HAL_DMA_Start_IT(MOTOR_3_TIM->hdma[TIM_DMA_ID_CC1], (uint32_t)motor3_dmabuffer, (uint32_t)&MOTOR_3_TIM->Instance->CCR1, DSHOT_DMA_BUFFER_SIZE);
 8000d14:	4b0c      	ldr	r3, [pc, #48]	@ (8000d48 <dshot_dma_start+0x60>)
 8000d16:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8000d18:	490d      	ldr	r1, [pc, #52]	@ (8000d50 <dshot_dma_start+0x68>)
 8000d1a:	4b0b      	ldr	r3, [pc, #44]	@ (8000d48 <dshot_dma_start+0x60>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	3334      	adds	r3, #52	@ 0x34
 8000d20:	461a      	mov	r2, r3
 8000d22:	2312      	movs	r3, #18
 8000d24:	f003 fb8e 	bl	8004444 <HAL_DMA_Start_IT>
	HAL_DMA_Start_IT(MOTOR_4_TIM->hdma[TIM_DMA_ID_CC2], (uint32_t)motor4_dmabuffer, (uint32_t)&MOTOR_4_TIM->Instance->CCR2, DSHOT_DMA_BUFFER_SIZE);
 8000d28:	4b05      	ldr	r3, [pc, #20]	@ (8000d40 <dshot_dma_start+0x58>)
 8000d2a:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8000d2c:	4909      	ldr	r1, [pc, #36]	@ (8000d54 <dshot_dma_start+0x6c>)
 8000d2e:	4b04      	ldr	r3, [pc, #16]	@ (8000d40 <dshot_dma_start+0x58>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	3338      	adds	r3, #56	@ 0x38
 8000d34:	461a      	mov	r2, r3
 8000d36:	2312      	movs	r3, #18
 8000d38:	f003 fb84 	bl	8004444 <HAL_DMA_Start_IT>
}
 8000d3c:	bf00      	nop
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	240006e0 	.word	0x240006e0
 8000d44:	24000374 	.word	0x24000374
 8000d48:	240005fc 	.word	0x240005fc
 8000d4c:	240003bc 	.word	0x240003bc
 8000d50:	24000404 	.word	0x24000404
 8000d54:	2400044c 	.word	0x2400044c

08000d58 <dshot_enable_dma_request>:

static void dshot_enable_dma_request()
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
	__HAL_TIM_ENABLE_DMA(MOTOR_1_TIM, TIM_DMA_CC4);
 8000d5c:	4b12      	ldr	r3, [pc, #72]	@ (8000da8 <dshot_enable_dma_request+0x50>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	68da      	ldr	r2, [r3, #12]
 8000d62:	4b11      	ldr	r3, [pc, #68]	@ (8000da8 <dshot_enable_dma_request+0x50>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8000d6a:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_DMA(MOTOR_2_TIM, TIM_DMA_CC3);
 8000d6c:	4b0f      	ldr	r3, [pc, #60]	@ (8000dac <dshot_enable_dma_request+0x54>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	68da      	ldr	r2, [r3, #12]
 8000d72:	4b0e      	ldr	r3, [pc, #56]	@ (8000dac <dshot_enable_dma_request+0x54>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8000d7a:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_DMA(MOTOR_3_TIM, TIM_DMA_CC1);
 8000d7c:	4b0b      	ldr	r3, [pc, #44]	@ (8000dac <dshot_enable_dma_request+0x54>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	68da      	ldr	r2, [r3, #12]
 8000d82:	4b0a      	ldr	r3, [pc, #40]	@ (8000dac <dshot_enable_dma_request+0x54>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000d8a:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_DMA(MOTOR_4_TIM, TIM_DMA_CC2);
 8000d8c:	4b06      	ldr	r3, [pc, #24]	@ (8000da8 <dshot_enable_dma_request+0x50>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	68da      	ldr	r2, [r3, #12]
 8000d92:	4b05      	ldr	r3, [pc, #20]	@ (8000da8 <dshot_enable_dma_request+0x50>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8000d9a:	60da      	str	r2, [r3, #12]
}
 8000d9c:	bf00      	nop
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop
 8000da8:	240006e0 	.word	0x240006e0
 8000dac:	240005fc 	.word	0x240005fc

08000db0 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b087      	sub	sp, #28
 8000db4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000db6:	4b28      	ldr	r3, [pc, #160]	@ (8000e58 <MX_GPIO_Init+0xa8>)
 8000db8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dbc:	4a26      	ldr	r2, [pc, #152]	@ (8000e58 <MX_GPIO_Init+0xa8>)
 8000dbe:	f043 0304 	orr.w	r3, r3, #4
 8000dc2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000dc6:	4b24      	ldr	r3, [pc, #144]	@ (8000e58 <MX_GPIO_Init+0xa8>)
 8000dc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dcc:	f003 0304 	and.w	r3, r3, #4
 8000dd0:	617b      	str	r3, [r7, #20]
 8000dd2:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dd4:	4b20      	ldr	r3, [pc, #128]	@ (8000e58 <MX_GPIO_Init+0xa8>)
 8000dd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dda:	4a1f      	ldr	r2, [pc, #124]	@ (8000e58 <MX_GPIO_Init+0xa8>)
 8000ddc:	f043 0301 	orr.w	r3, r3, #1
 8000de0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000de4:	4b1c      	ldr	r3, [pc, #112]	@ (8000e58 <MX_GPIO_Init+0xa8>)
 8000de6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dea:	f003 0301 	and.w	r3, r3, #1
 8000dee:	613b      	str	r3, [r7, #16]
 8000df0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000df2:	4b19      	ldr	r3, [pc, #100]	@ (8000e58 <MX_GPIO_Init+0xa8>)
 8000df4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000df8:	4a17      	ldr	r2, [pc, #92]	@ (8000e58 <MX_GPIO_Init+0xa8>)
 8000dfa:	f043 0310 	orr.w	r3, r3, #16
 8000dfe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e02:	4b15      	ldr	r3, [pc, #84]	@ (8000e58 <MX_GPIO_Init+0xa8>)
 8000e04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e08:	f003 0310 	and.w	r3, r3, #16
 8000e0c:	60fb      	str	r3, [r7, #12]
 8000e0e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e10:	4b11      	ldr	r3, [pc, #68]	@ (8000e58 <MX_GPIO_Init+0xa8>)
 8000e12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e16:	4a10      	ldr	r2, [pc, #64]	@ (8000e58 <MX_GPIO_Init+0xa8>)
 8000e18:	f043 0308 	orr.w	r3, r3, #8
 8000e1c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e20:	4b0d      	ldr	r3, [pc, #52]	@ (8000e58 <MX_GPIO_Init+0xa8>)
 8000e22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e26:	f003 0308 	and.w	r3, r3, #8
 8000e2a:	60bb      	str	r3, [r7, #8]
 8000e2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e2e:	4b0a      	ldr	r3, [pc, #40]	@ (8000e58 <MX_GPIO_Init+0xa8>)
 8000e30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e34:	4a08      	ldr	r2, [pc, #32]	@ (8000e58 <MX_GPIO_Init+0xa8>)
 8000e36:	f043 0302 	orr.w	r3, r3, #2
 8000e3a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e3e:	4b06      	ldr	r3, [pc, #24]	@ (8000e58 <MX_GPIO_Init+0xa8>)
 8000e40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e44:	f003 0302 	and.w	r3, r3, #2
 8000e48:	607b      	str	r3, [r7, #4]
 8000e4a:	687b      	ldr	r3, [r7, #4]

}
 8000e4c:	bf00      	nop
 8000e4e:	371c      	adds	r7, #28
 8000e50:	46bd      	mov	sp, r7
 8000e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e56:	4770      	bx	lr
 8000e58:	58024400 	.word	0x58024400

08000e5c <get_M4>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t * get_M4() // get data from M4 to M7 buffer
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b083      	sub	sp, #12
 8000e60:	af00      	add	r7, sp, #0
	static int buffer[6]; // buffer to receive data
	if (xfr_ptr->sts_4to7 == 1) // if M4 to M7 buffer has data
 8000e62:	4b15      	ldr	r3, [pc, #84]	@ (8000eb8 <get_M4+0x5c>)
 8000e64:	781b      	ldrb	r3, [r3, #0]
 8000e66:	b2db      	uxtb	r3, r3
 8000e68:	2b01      	cmp	r3, #1
 8000e6a:	d11d      	bne.n	8000ea8 <get_M4+0x4c>
	{
		xfr_ptr->sts_4to7 = 2; // lock the M4 to M7 buffer
 8000e6c:	4b12      	ldr	r3, [pc, #72]	@ (8000eb8 <get_M4+0x5c>)
 8000e6e:	2202      	movs	r2, #2
 8000e70:	701a      	strb	r2, [r3, #0]
		for(int n = 0; n < 6; n++)
 8000e72:	2300      	movs	r3, #0
 8000e74:	607b      	str	r3, [r7, #4]
 8000e76:	e011      	b.n	8000e9c <get_M4+0x40>
		{
			buffer[n] = xfr_ptr->M4toM7[n]; // transfer data
 8000e78:	4a0f      	ldr	r2, [pc, #60]	@ (8000eb8 <get_M4+0x5c>)
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	009b      	lsls	r3, r3, #2
 8000e7e:	4413      	add	r3, r2
 8000e80:	685a      	ldr	r2, [r3, #4]
 8000e82:	490e      	ldr	r1, [pc, #56]	@ (8000ebc <get_M4+0x60>)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			xfr_ptr->M4toM7[n] = 0; // clear M4 to M7 buffer
 8000e8a:	4a0b      	ldr	r2, [pc, #44]	@ (8000eb8 <get_M4+0x5c>)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	009b      	lsls	r3, r3, #2
 8000e90:	4413      	add	r3, r2
 8000e92:	2200      	movs	r2, #0
 8000e94:	605a      	str	r2, [r3, #4]
		for(int n = 0; n < 6; n++)
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	3301      	adds	r3, #1
 8000e9a:	607b      	str	r3, [r7, #4]
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	2b05      	cmp	r3, #5
 8000ea0:	ddea      	ble.n	8000e78 <get_M4+0x1c>
		}
		xfr_ptr->sts_4to7 = 0; // M4 to M7 buffer is empty
 8000ea2:	4b05      	ldr	r3, [pc, #20]	@ (8000eb8 <get_M4+0x5c>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	701a      	strb	r2, [r3, #0]
	}
	return buffer; // return the buffer (pointer)
 8000ea8:	4b04      	ldr	r3, [pc, #16]	@ (8000ebc <get_M4+0x60>)
}
 8000eaa:	4618      	mov	r0, r3
 8000eac:	370c      	adds	r7, #12
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop
 8000eb8:	38001000 	.word	0x38001000
 8000ebc:	240004f8 	.word	0x240004f8

08000ec0 <HAL_TIM_IC_CaptureCallback>:
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8000ec0:	b480      	push	{r7}
 8000ec2:	b083      	sub	sp, #12
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
	contador = __HAL_TIM_GET_COUNTER(&htim4);
 8000ec8:	4b05      	ldr	r3, [pc, #20]	@ (8000ee0 <HAL_TIM_IC_CaptureCallback+0x20>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ece:	4a05      	ldr	r2, [pc, #20]	@ (8000ee4 <HAL_TIM_IC_CaptureCallback+0x24>)
 8000ed0:	6013      	str	r3, [r2, #0]
}
 8000ed2:	bf00      	nop
 8000ed4:	370c      	adds	r7, #12
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop
 8000ee0:	24000694 	.word	0x24000694
 8000ee4:	240004d4 	.word	0x240004d4

08000ee8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b09e      	sub	sp, #120	@ 0x78
 8000eec:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000eee:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000ef2:	677b      	str	r3, [r7, #116]	@ 0x74
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000ef4:	bf00      	nop
 8000ef6:	4b99      	ldr	r3, [pc, #612]	@ (800115c <main+0x274>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d004      	beq.n	8000f0c <main+0x24>
 8000f02:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000f04:	1e5a      	subs	r2, r3, #1
 8000f06:	677a      	str	r2, [r7, #116]	@ 0x74
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	dcf4      	bgt.n	8000ef6 <main+0xe>
  if ( timeout < 0 )
 8000f0c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	da01      	bge.n	8000f16 <main+0x2e>
  {
  Error_Handler();
 8000f12:	f000 f9f0 	bl	80012f6 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f16:	f001 fcb9 	bl	800288c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f1a:	f000 f939 	bl	8001190 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000f1e:	f000 f9b7 	bl	8001290 <PeriphCommonClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000f22:	4b8e      	ldr	r3, [pc, #568]	@ (800115c <main+0x274>)
 8000f24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f28:	4a8c      	ldr	r2, [pc, #560]	@ (800115c <main+0x274>)
 8000f2a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000f2e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f32:	4b8a      	ldr	r3, [pc, #552]	@ (800115c <main+0x274>)
 8000f34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f38:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000f3c:	603b      	str	r3, [r7, #0]
 8000f3e:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000f40:	2000      	movs	r0, #0
 8000f42:	f005 fa4f 	bl	80063e4 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000f46:	2100      	movs	r1, #0
 8000f48:	2000      	movs	r0, #0
 8000f4a:	f005 fa65 	bl	8006418 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000f4e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000f52:	677b      	str	r3, [r7, #116]	@ 0x74
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000f54:	bf00      	nop
 8000f56:	4b81      	ldr	r3, [pc, #516]	@ (800115c <main+0x274>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d104      	bne.n	8000f6c <main+0x84>
 8000f62:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000f64:	1e5a      	subs	r2, r3, #1
 8000f66:	677a      	str	r2, [r7, #116]	@ 0x74
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	dcf4      	bgt.n	8000f56 <main+0x6e>
if ( timeout < 0 )
 8000f6c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	da01      	bge.n	8000f76 <main+0x8e>
{
Error_Handler();
 8000f72:	f000 f9c0 	bl	80012f6 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f76:	f7ff ff1b 	bl	8000db0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f7a:	f7ff fcd7 	bl	800092c <MX_DMA_Init>
  MX_TIM2_Init();
 8000f7e:	f000 fda7 	bl	8001ad0 <MX_TIM2_Init>
  MX_TIM5_Init();
 8000f82:	f000 feb5 	bl	8001cf0 <MX_TIM5_Init>
  MX_TIM3_Init();
 8000f86:	f000 fe07 	bl	8001b98 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000f8a:	f000 fe5b 	bl	8001c44 <MX_TIM4_Init>
  MX_USB_DEVICE_Init();
 8000f8e:	f010 f9b5 	bl	80112fc <MX_USB_DEVICE_Init>
  MX_TIM1_Init();
 8000f92:	f000 fd43 	bl	8001a1c <MX_TIM1_Init>
  MX_TIM8_Init();
 8000f96:	f000 ff0f 	bl	8001db8 <MX_TIM8_Init>
  MX_TIM15_Init();
 8000f9a:	f000 ff67 	bl	8001e6c <MX_TIM15_Init>
  MX_ADC1_Init();
 8000f9e:	f7ff fc05 	bl	80007ac <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  int count = 0;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	66bb      	str	r3, [r7, #104]	@ 0x68
  HAL_TIM_Encoder_Start_IT(&htim4, TIM_CHANNEL_ALL);
 8000fa6:	213c      	movs	r1, #60	@ 0x3c
 8000fa8:	486d      	ldr	r0, [pc, #436]	@ (8001160 <main+0x278>)
 8000faa:	f00a fd11 	bl	800b9d0 <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim1, TIM_CHANNEL_ALL);
 8000fae:	213c      	movs	r1, #60	@ 0x3c
 8000fb0:	486c      	ldr	r0, [pc, #432]	@ (8001164 <main+0x27c>)
 8000fb2:	f00a fd0d 	bl	800b9d0 <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim8, TIM_CHANNEL_ALL);
 8000fb6:	213c      	movs	r1, #60	@ 0x3c
 8000fb8:	486b      	ldr	r0, [pc, #428]	@ (8001168 <main+0x280>)
 8000fba:	f00a fd09 	bl	800b9d0 <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim3, TIM_CHANNEL_ALL);
 8000fbe:	213c      	movs	r1, #60	@ 0x3c
 8000fc0:	486a      	ldr	r0, [pc, #424]	@ (800116c <main+0x284>)
 8000fc2:	f00a fd05 	bl	800b9d0 <HAL_TIM_Encoder_Start_IT>
	uint8_t * xfr_data; // pointer to transfer data


	//initialize inter-core status pointers
	xfr_ptr->sts_4to7 = 0;
 8000fc6:	4b6a      	ldr	r3, [pc, #424]	@ (8001170 <main+0x288>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	701a      	strb	r2, [r3, #0]
	xfr_ptr->sts_7to4 = 0;
 8000fcc:	4b68      	ldr	r3, [pc, #416]	@ (8001170 <main+0x288>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	705a      	strb	r2, [r3, #1]


	  if (HAL_TIM_Base_Start_IT(&htim15) != HAL_OK)
 8000fd2:	4868      	ldr	r0, [pc, #416]	@ (8001174 <main+0x28c>)
 8000fd4:	f00a fa78 	bl	800b4c8 <HAL_TIM_Base_Start_IT>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d001      	beq.n	8000fe2 <main+0xfa>
	    {
	      /* Starting Error */
	      Error_Handler();
 8000fde:	f000 f98a 	bl	80012f6 <Error_Handler>
	    }
	  dshot_init(DSHOT300);
 8000fe2:	2001      	movs	r0, #1
 8000fe4:	f7ff fcda 	bl	800099c <dshot_init>
  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 8000fe8:	2000      	movs	r0, #0
 8000fea:	f001 fa6b 	bl	80024c4 <BSP_LED_Init>
  BSP_LED_Init(LED_YELLOW);
 8000fee:	2001      	movs	r0, #1
 8000ff0:	f001 fa68 	bl	80024c4 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 8000ff4:	2002      	movs	r0, #2
 8000ff6:	f001 fa65 	bl	80024c4 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8000ffa:	2101      	movs	r1, #1
 8000ffc:	2000      	movs	r0, #0
 8000ffe:	f001 fad7 	bl	80025b0 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 8001002:	4b5d      	ldr	r3, [pc, #372]	@ (8001178 <main+0x290>)
 8001004:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001008:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 800100a:	4b5b      	ldr	r3, [pc, #364]	@ (8001178 <main+0x290>)
 800100c:	2200      	movs	r2, #0
 800100e:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 8001010:	4b59      	ldr	r3, [pc, #356]	@ (8001178 <main+0x290>)
 8001012:	2200      	movs	r2, #0
 8001014:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 8001016:	4b58      	ldr	r3, [pc, #352]	@ (8001178 <main+0x290>)
 8001018:	2200      	movs	r2, #0
 800101a:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 800101c:	4b56      	ldr	r3, [pc, #344]	@ (8001178 <main+0x290>)
 800101e:	2200      	movs	r2, #0
 8001020:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 8001022:	4955      	ldr	r1, [pc, #340]	@ (8001178 <main+0x290>)
 8001024:	2000      	movs	r0, #0
 8001026:	f001 fb53 	bl	80026d0 <BSP_COM_Init>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d001      	beq.n	8001034 <main+0x14c>
  {
    Error_Handler();
 8001030:	f000 f961 	bl	80012f6 <Error_Handler>
  }

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  char message[100]={'\0'};
 8001034:	2300      	movs	r3, #0
 8001036:	607b      	str	r3, [r7, #4]
 8001038:	f107 0308 	add.w	r3, r7, #8
 800103c:	2260      	movs	r2, #96	@ 0x60
 800103e:	2100      	movs	r1, #0
 8001040:	4618      	mov	r0, r3
 8001042:	f011 fc06 	bl	8012852 <memset>
  //Inicializa referencia como zero
  for(uint8_t i =0;i<4;i++){
 8001046:	2300      	movs	r3, #0
 8001048:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 800104c:	e00c      	b.n	8001068 <main+0x180>
	  ref[i] =0;
 800104e:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8001052:	4a4a      	ldr	r2, [pc, #296]	@ (800117c <main+0x294>)
 8001054:	009b      	lsls	r3, r3, #2
 8001056:	4413      	add	r3, r2
 8001058:	f04f 0200 	mov.w	r2, #0
 800105c:	601a      	str	r2, [r3, #0]
  for(uint8_t i =0;i<4;i++){
 800105e:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8001062:	3301      	adds	r3, #1
 8001064:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 8001068:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800106c:	2b03      	cmp	r3, #3
 800106e:	d9ee      	bls.n	800104e <main+0x166>
  }
  HAL_Delay(7000);
 8001070:	f641 3058 	movw	r0, #7000	@ 0x1b58
 8001074:	f001 fc9c 	bl	80029b0 <HAL_Delay>
  while (1)
  {
	      //comunicacao entre cores
	  	  if (xfr_ptr->sts_4to7 == 1)
 8001078:	4b3d      	ldr	r3, [pc, #244]	@ (8001170 <main+0x288>)
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	b2db      	uxtb	r3, r3
 800107e:	2b01      	cmp	r3, #1
 8001080:	d102      	bne.n	8001088 <main+0x1a0>
	  	  {
	  		  xfr_data = get_M4(); // get data sent from M4 to M7
 8001082:	f7ff feeb 	bl	8000e5c <get_M4>
 8001086:	6738      	str	r0, [r7, #112]	@ 0x70
	  	  }

	  	  for(uint8_t n = 0; n<32;n++){
 8001088:	2300      	movs	r3, #0
 800108a:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
 800108e:	e00f      	b.n	80010b0 <main+0x1c8>
	  		  new_mensagem[n] = xfr_data[n]; //guarda numa variavel local a data recebida do outro core
 8001090:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8001094:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8001096:	4413      	add	r3, r2
 8001098:	781a      	ldrb	r2, [r3, #0]
 800109a:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 800109e:	4611      	mov	r1, r2
 80010a0:	4a37      	ldr	r2, [pc, #220]	@ (8001180 <main+0x298>)
 80010a2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	  	  for(uint8_t n = 0; n<32;n++){
 80010a6:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80010aa:	3301      	adds	r3, #1
 80010ac:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
 80010b0:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80010b4:	2b1f      	cmp	r3, #31
 80010b6:	d9eb      	bls.n	8001090 <main+0x1a8>
	  	  }

	  	  //validacao da mensagem, utilizamos 111 como um ID de inicio e 112 de final

	  	  if((new_mensagem[0]==111)&&(new_mensagem[31]==112)){
 80010b8:	4b31      	ldr	r3, [pc, #196]	@ (8001180 <main+0x298>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	2b6f      	cmp	r3, #111	@ 0x6f
 80010be:	d11a      	bne.n	80010f6 <main+0x20e>
 80010c0:	4b2f      	ldr	r3, [pc, #188]	@ (8001180 <main+0x298>)
 80010c2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80010c4:	2b70      	cmp	r3, #112	@ 0x70
 80010c6:	d116      	bne.n	80010f6 <main+0x20e>
	  		for(uint8_t n=0;n<32;n++)
 80010c8:	2300      	movs	r3, #0
 80010ca:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
 80010ce:	e00e      	b.n	80010ee <main+0x206>
	  		  old_mensagem[n] = new_mensagem[n];
 80010d0:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 80010d4:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80010d8:	4929      	ldr	r1, [pc, #164]	@ (8001180 <main+0x298>)
 80010da:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80010de:	4929      	ldr	r1, [pc, #164]	@ (8001184 <main+0x29c>)
 80010e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	  		for(uint8_t n=0;n<32;n++)
 80010e4:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80010e8:	3301      	adds	r3, #1
 80010ea:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
 80010ee:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80010f2:	2b1f      	cmp	r3, #31
 80010f4:	d9ec      	bls.n	80010d0 <main+0x1e8>
	  	  }

	  	  for(uint8_t n=0; n<4;n++)
 80010f6:	2300      	movs	r3, #0
 80010f8:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
 80010fc:	e015      	b.n	800112a <main+0x242>
	  		 ref[n] = old_mensagem[n+1];
 80010fe:	f897 306c 	ldrb.w	r3, [r7, #108]	@ 0x6c
 8001102:	3301      	adds	r3, #1
 8001104:	4a1f      	ldr	r2, [pc, #124]	@ (8001184 <main+0x29c>)
 8001106:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800110a:	f897 306c 	ldrb.w	r3, [r7, #108]	@ 0x6c
 800110e:	ee07 2a90 	vmov	s15, r2
 8001112:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001116:	4a19      	ldr	r2, [pc, #100]	@ (800117c <main+0x294>)
 8001118:	009b      	lsls	r3, r3, #2
 800111a:	4413      	add	r3, r2
 800111c:	edc3 7a00 	vstr	s15, [r3]
	  	  for(uint8_t n=0; n<4;n++)
 8001120:	f897 306c 	ldrb.w	r3, [r7, #108]	@ 0x6c
 8001124:	3301      	adds	r3, #1
 8001126:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
 800112a:	f897 306c 	ldrb.w	r3, [r7, #108]	@ 0x6c
 800112e:	2b03      	cmp	r3, #3
 8001130:	d9e5      	bls.n	80010fe <main+0x216>


	  	  //print para o putty
	  	  sprintf(message, "%f\n \r",velocidade[3]);
 8001132:	4b15      	ldr	r3, [pc, #84]	@ (8001188 <main+0x2a0>)
 8001134:	edd3 7a03 	vldr	s15, [r3, #12]
 8001138:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800113c:	1d38      	adds	r0, r7, #4
 800113e:	ec53 2b17 	vmov	r2, r3, d7
 8001142:	4912      	ldr	r1, [pc, #72]	@ (800118c <main+0x2a4>)
 8001144:	f011 fb22 	bl	801278c <siprintf>
	  	  CDC_Transmit_FS(message,sizeof(message));
 8001148:	1d3b      	adds	r3, r7, #4
 800114a:	2164      	movs	r1, #100	@ 0x64
 800114c:	4618      	mov	r0, r3
 800114e:	f010 f995 	bl	801147c <CDC_Transmit_FS>

	  	  //delay
	  	  HAL_Delay(10);
 8001152:	200a      	movs	r0, #10
 8001154:	f001 fc2c 	bl	80029b0 <HAL_Delay>
  {
 8001158:	e78e      	b.n	8001078 <main+0x190>
 800115a:	bf00      	nop
 800115c:	58024400 	.word	0x58024400
 8001160:	24000694 	.word	0x24000694
 8001164:	240005b0 	.word	0x240005b0
 8001168:	2400072c 	.word	0x2400072c
 800116c:	24000648 	.word	0x24000648
 8001170:	38001000 	.word	0x38001000
 8001174:	24000778 	.word	0x24000778
 8001178:	24000494 	.word	0x24000494
 800117c:	240004e8 	.word	0x240004e8
 8001180:	240004a4 	.word	0x240004a4
 8001184:	240004bc 	.word	0x240004bc
 8001188:	240004d8 	.word	0x240004d8
 800118c:	080149a8 	.word	0x080149a8

08001190 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b09c      	sub	sp, #112	@ 0x70
 8001194:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001196:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800119a:	224c      	movs	r2, #76	@ 0x4c
 800119c:	2100      	movs	r1, #0
 800119e:	4618      	mov	r0, r3
 80011a0:	f011 fb57 	bl	8012852 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011a4:	1d3b      	adds	r3, r7, #4
 80011a6:	2220      	movs	r2, #32
 80011a8:	2100      	movs	r1, #0
 80011aa:	4618      	mov	r0, r3
 80011ac:	f011 fb51 	bl	8012852 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80011b0:	2004      	movs	r0, #4
 80011b2:	f006 fbe3 	bl	800797c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80011b6:	2300      	movs	r3, #0
 80011b8:	603b      	str	r3, [r7, #0]
 80011ba:	4b33      	ldr	r3, [pc, #204]	@ (8001288 <SystemClock_Config+0xf8>)
 80011bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011be:	4a32      	ldr	r2, [pc, #200]	@ (8001288 <SystemClock_Config+0xf8>)
 80011c0:	f023 0301 	bic.w	r3, r3, #1
 80011c4:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80011c6:	4b30      	ldr	r3, [pc, #192]	@ (8001288 <SystemClock_Config+0xf8>)
 80011c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011ca:	f003 0301 	and.w	r3, r3, #1
 80011ce:	603b      	str	r3, [r7, #0]
 80011d0:	4b2e      	ldr	r3, [pc, #184]	@ (800128c <SystemClock_Config+0xfc>)
 80011d2:	699b      	ldr	r3, [r3, #24]
 80011d4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80011d8:	4a2c      	ldr	r2, [pc, #176]	@ (800128c <SystemClock_Config+0xfc>)
 80011da:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011de:	6193      	str	r3, [r2, #24]
 80011e0:	4b2a      	ldr	r3, [pc, #168]	@ (800128c <SystemClock_Config+0xfc>)
 80011e2:	699b      	ldr	r3, [r3, #24]
 80011e4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80011e8:	603b      	str	r3, [r7, #0]
 80011ea:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80011ec:	bf00      	nop
 80011ee:	4b27      	ldr	r3, [pc, #156]	@ (800128c <SystemClock_Config+0xfc>)
 80011f0:	699b      	ldr	r3, [r3, #24]
 80011f2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80011f6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80011fa:	d1f8      	bne.n	80011ee <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 80011fc:	2322      	movs	r3, #34	@ 0x22
 80011fe:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001200:	2301      	movs	r3, #1
 8001202:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001204:	2340      	movs	r3, #64	@ 0x40
 8001206:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001208:	2301      	movs	r3, #1
 800120a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800120c:	2302      	movs	r3, #2
 800120e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001210:	2300      	movs	r3, #0
 8001212:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001214:	2304      	movs	r3, #4
 8001216:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 25;
 8001218:	2319      	movs	r3, #25
 800121a:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800121c:	2302      	movs	r3, #2
 800121e:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8001220:	2305      	movs	r3, #5
 8001222:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001224:	2302      	movs	r3, #2
 8001226:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001228:	230c      	movs	r3, #12
 800122a:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800122c:	2300      	movs	r3, #0
 800122e:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001230:	2300      	movs	r3, #0
 8001232:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001234:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001238:	4618      	mov	r0, r3
 800123a:	f006 fc09 	bl	8007a50 <HAL_RCC_OscConfig>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d001      	beq.n	8001248 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8001244:	f000 f857 	bl	80012f6 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001248:	233f      	movs	r3, #63	@ 0x3f
 800124a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800124c:	2303      	movs	r3, #3
 800124e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001250:	2300      	movs	r3, #0
 8001252:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001254:	2300      	movs	r3, #0
 8001256:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001258:	2340      	movs	r3, #64	@ 0x40
 800125a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800125c:	2340      	movs	r3, #64	@ 0x40
 800125e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001260:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001264:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001266:	2340      	movs	r3, #64	@ 0x40
 8001268:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800126a:	1d3b      	adds	r3, r7, #4
 800126c:	2104      	movs	r1, #4
 800126e:	4618      	mov	r0, r3
 8001270:	f007 f848 	bl	8008304 <HAL_RCC_ClockConfig>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d001      	beq.n	800127e <SystemClock_Config+0xee>
  {
    Error_Handler();
 800127a:	f000 f83c 	bl	80012f6 <Error_Handler>
  }
}
 800127e:	bf00      	nop
 8001280:	3770      	adds	r7, #112	@ 0x70
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	58000400 	.word	0x58000400
 800128c:	58024800 	.word	0x58024800

08001290 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b0b0      	sub	sp, #192	@ 0xc0
 8001294:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001296:	463b      	mov	r3, r7
 8001298:	22c0      	movs	r2, #192	@ 0xc0
 800129a:	2100      	movs	r1, #0
 800129c:	4618      	mov	r0, r3
 800129e:	f011 fad8 	bl	8012852 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_SPI1;
 80012a2:	f44f 2201 	mov.w	r2, #528384	@ 0x81000
 80012a6:	f04f 0300 	mov.w	r3, #0
 80012aa:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 80012ae:	2304      	movs	r3, #4
 80012b0:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 9;
 80012b2:	2309      	movs	r3, #9
 80012b4:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 80012b6:	2302      	movs	r3, #2
 80012b8:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80012ba:	2302      	movs	r3, #2
 80012bc:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80012be:	2302      	movs	r3, #2
 80012c0:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80012c2:	23c0      	movs	r3, #192	@ 0xc0
 80012c4:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 80012c6:	2320      	movs	r3, #32
 80012c8:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 3072;
 80012ca:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80012ce:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 80012d0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012d4:	663b      	str	r3, [r7, #96]	@ 0x60
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80012d6:	2300      	movs	r3, #0
 80012d8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012dc:	463b      	mov	r3, r7
 80012de:	4618      	mov	r0, r3
 80012e0:	f007 fb9c 	bl	8008a1c <HAL_RCCEx_PeriphCLKConfig>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <PeriphCommonClock_Config+0x5e>
  {
    Error_Handler();
 80012ea:	f000 f804 	bl	80012f6 <Error_Handler>
  }
}
 80012ee:	bf00      	nop
 80012f0:	37c0      	adds	r7, #192	@ 0xc0
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}

080012f6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012f6:	b480      	push	{r7}
 80012f8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012fa:	b672      	cpsid	i
}
 80012fc:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012fe:	bf00      	nop
 8001300:	e7fd      	b.n	80012fe <Error_Handler+0x8>
	...

08001304 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001304:	b480      	push	{r7}
 8001306:	b083      	sub	sp, #12
 8001308:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800130a:	4b0a      	ldr	r3, [pc, #40]	@ (8001334 <HAL_MspInit+0x30>)
 800130c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001310:	4a08      	ldr	r2, [pc, #32]	@ (8001334 <HAL_MspInit+0x30>)
 8001312:	f043 0302 	orr.w	r3, r3, #2
 8001316:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800131a:	4b06      	ldr	r3, [pc, #24]	@ (8001334 <HAL_MspInit+0x30>)
 800131c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001320:	f003 0302 	and.w	r3, r3, #2
 8001324:	607b      	str	r3, [r7, #4]
 8001326:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001328:	bf00      	nop
 800132a:	370c      	adds	r7, #12
 800132c:	46bd      	mov	sp, r7
 800132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001332:	4770      	bx	lr
 8001334:	58024400 	.word	0x58024400

08001338 <map>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

//Função de mapeamento
uint16_t map(float x, int in_min, int in_max, int out_min, int out_max) {
 8001338:	b480      	push	{r7}
 800133a:	b087      	sub	sp, #28
 800133c:	af00      	add	r7, sp, #0
 800133e:	ed87 0a05 	vstr	s0, [r7, #20]
 8001342:	6138      	str	r0, [r7, #16]
 8001344:	60f9      	str	r1, [r7, #12]
 8001346:	60ba      	str	r2, [r7, #8]
 8001348:	607b      	str	r3, [r7, #4]
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 800134a:	693b      	ldr	r3, [r7, #16]
 800134c:	ee07 3a90 	vmov	s15, r3
 8001350:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001354:	ed97 7a05 	vldr	s14, [r7, #20]
 8001358:	ee37 7a67 	vsub.f32	s14, s14, s15
 800135c:	687a      	ldr	r2, [r7, #4]
 800135e:	68bb      	ldr	r3, [r7, #8]
 8001360:	1ad3      	subs	r3, r2, r3
 8001362:	ee07 3a90 	vmov	s15, r3
 8001366:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800136a:	ee67 6a27 	vmul.f32	s13, s14, s15
 800136e:	68fa      	ldr	r2, [r7, #12]
 8001370:	693b      	ldr	r3, [r7, #16]
 8001372:	1ad3      	subs	r3, r2, r3
 8001374:	ee07 3a90 	vmov	s15, r3
 8001378:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800137c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001380:	68bb      	ldr	r3, [r7, #8]
 8001382:	ee07 3a90 	vmov	s15, r3
 8001386:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800138a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800138e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001392:	ee17 3a90 	vmov	r3, s15
 8001396:	b29b      	uxth	r3, r3
}
 8001398:	4618      	mov	r0, r3
 800139a:	371c      	adds	r7, #28
 800139c:	46bd      	mov	sp, r7
 800139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a2:	4770      	bx	lr

080013a4 <Controle>:

void Controle(){
 80013a4:	b590      	push	{r4, r7, lr}
 80013a6:	b083      	sub	sp, #12
 80013a8:	af00      	add	r7, sp, #0
	for(uint8_t n=0;n<4;n++){
 80013aa:	2300      	movs	r3, #0
 80013ac:	71fb      	strb	r3, [r7, #7]
 80013ae:	e0e9      	b.n	8001584 <Controle+0x1e0>
		//Calculo de erro
		error[n] =ref[n] -  speed[n];
 80013b0:	79fb      	ldrb	r3, [r7, #7]
 80013b2:	4aa3      	ldr	r2, [pc, #652]	@ (8001640 <Controle+0x29c>)
 80013b4:	009b      	lsls	r3, r3, #2
 80013b6:	4413      	add	r3, r2
 80013b8:	ed93 7a00 	vldr	s14, [r3]
 80013bc:	79fb      	ldrb	r3, [r7, #7]
 80013be:	4aa1      	ldr	r2, [pc, #644]	@ (8001644 <Controle+0x2a0>)
 80013c0:	009b      	lsls	r3, r3, #2
 80013c2:	4413      	add	r3, r2
 80013c4:	edd3 7a00 	vldr	s15, [r3]
 80013c8:	79fb      	ldrb	r3, [r7, #7]
 80013ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013ce:	4a9e      	ldr	r2, [pc, #632]	@ (8001648 <Controle+0x2a4>)
 80013d0:	009b      	lsls	r3, r3, #2
 80013d2:	4413      	add	r3, r2
 80013d4:	edc3 7a00 	vstr	s15, [r3]
		//Variação da ação de controle para esta iteração
		deltaU[n] = Kc*(error[n]- preverror[n]) + error[n]*Ki -Kd*(speed[n]-2*prevspeed[n] + prevspeed2[n]);
 80013d8:	79fb      	ldrb	r3, [r7, #7]
 80013da:	4a9b      	ldr	r2, [pc, #620]	@ (8001648 <Controle+0x2a4>)
 80013dc:	009b      	lsls	r3, r3, #2
 80013de:	4413      	add	r3, r2
 80013e0:	ed93 7a00 	vldr	s14, [r3]
 80013e4:	79fb      	ldrb	r3, [r7, #7]
 80013e6:	4a99      	ldr	r2, [pc, #612]	@ (800164c <Controle+0x2a8>)
 80013e8:	009b      	lsls	r3, r3, #2
 80013ea:	4413      	add	r3, r2
 80013ec:	edd3 7a00 	vldr	s15, [r3]
 80013f0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80013f4:	4b96      	ldr	r3, [pc, #600]	@ (8001650 <Controle+0x2ac>)
 80013f6:	edd3 7a00 	vldr	s15, [r3]
 80013fa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013fe:	79fb      	ldrb	r3, [r7, #7]
 8001400:	4a91      	ldr	r2, [pc, #580]	@ (8001648 <Controle+0x2a4>)
 8001402:	009b      	lsls	r3, r3, #2
 8001404:	4413      	add	r3, r2
 8001406:	edd3 6a00 	vldr	s13, [r3]
 800140a:	4b92      	ldr	r3, [pc, #584]	@ (8001654 <Controle+0x2b0>)
 800140c:	edd3 7a00 	vldr	s15, [r3]
 8001410:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001414:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001418:	79fb      	ldrb	r3, [r7, #7]
 800141a:	4a8a      	ldr	r2, [pc, #552]	@ (8001644 <Controle+0x2a0>)
 800141c:	009b      	lsls	r3, r3, #2
 800141e:	4413      	add	r3, r2
 8001420:	edd3 6a00 	vldr	s13, [r3]
 8001424:	79fb      	ldrb	r3, [r7, #7]
 8001426:	4a8c      	ldr	r2, [pc, #560]	@ (8001658 <Controle+0x2b4>)
 8001428:	009b      	lsls	r3, r3, #2
 800142a:	4413      	add	r3, r2
 800142c:	edd3 7a00 	vldr	s15, [r3]
 8001430:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001434:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001438:	79fb      	ldrb	r3, [r7, #7]
 800143a:	4a88      	ldr	r2, [pc, #544]	@ (800165c <Controle+0x2b8>)
 800143c:	009b      	lsls	r3, r3, #2
 800143e:	4413      	add	r3, r2
 8001440:	edd3 7a00 	vldr	s15, [r3]
 8001444:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001448:	4b85      	ldr	r3, [pc, #532]	@ (8001660 <Controle+0x2bc>)
 800144a:	edd3 7a00 	vldr	s15, [r3]
 800144e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001452:	79fb      	ldrb	r3, [r7, #7]
 8001454:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001458:	4a82      	ldr	r2, [pc, #520]	@ (8001664 <Controle+0x2c0>)
 800145a:	009b      	lsls	r3, r3, #2
 800145c:	4413      	add	r3, r2
 800145e:	edc3 7a00 	vstr	s15, [r3]
		//Ação de controle
		uM[n] = uM[n] + deltaU[n];
 8001462:	79fb      	ldrb	r3, [r7, #7]
 8001464:	4a80      	ldr	r2, [pc, #512]	@ (8001668 <Controle+0x2c4>)
 8001466:	009b      	lsls	r3, r3, #2
 8001468:	4413      	add	r3, r2
 800146a:	ed93 7a00 	vldr	s14, [r3]
 800146e:	79fb      	ldrb	r3, [r7, #7]
 8001470:	4a7c      	ldr	r2, [pc, #496]	@ (8001664 <Controle+0x2c0>)
 8001472:	009b      	lsls	r3, r3, #2
 8001474:	4413      	add	r3, r2
 8001476:	edd3 7a00 	vldr	s15, [r3]
 800147a:	79fb      	ldrb	r3, [r7, #7]
 800147c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001480:	4a79      	ldr	r2, [pc, #484]	@ (8001668 <Controle+0x2c4>)
 8001482:	009b      	lsls	r3, r3, #2
 8001484:	4413      	add	r3, r2
 8001486:	edc3 7a00 	vstr	s15, [r3]
		//Saturado para evitar que a ação de controle ultrapasse o limite
		if( uM[n] < -1023){
 800148a:	79fb      	ldrb	r3, [r7, #7]
 800148c:	4a76      	ldr	r2, [pc, #472]	@ (8001668 <Controle+0x2c4>)
 800148e:	009b      	lsls	r3, r3, #2
 8001490:	4413      	add	r3, r2
 8001492:	edd3 7a00 	vldr	s15, [r3]
 8001496:	ed9f 7a75 	vldr	s14, [pc, #468]	@ 800166c <Controle+0x2c8>
 800149a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800149e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014a2:	d505      	bpl.n	80014b0 <Controle+0x10c>
			uM[n]= -1023;
 80014a4:	79fb      	ldrb	r3, [r7, #7]
 80014a6:	4a70      	ldr	r2, [pc, #448]	@ (8001668 <Controle+0x2c4>)
 80014a8:	009b      	lsls	r3, r3, #2
 80014aa:	4413      	add	r3, r2
 80014ac:	4a70      	ldr	r2, [pc, #448]	@ (8001670 <Controle+0x2cc>)
 80014ae:	601a      	str	r2, [r3, #0]
		}
		if(uM[n]>1023){
 80014b0:	79fb      	ldrb	r3, [r7, #7]
 80014b2:	4a6d      	ldr	r2, [pc, #436]	@ (8001668 <Controle+0x2c4>)
 80014b4:	009b      	lsls	r3, r3, #2
 80014b6:	4413      	add	r3, r2
 80014b8:	edd3 7a00 	vldr	s15, [r3]
 80014bc:	ed9f 7a6d 	vldr	s14, [pc, #436]	@ 8001674 <Controle+0x2d0>
 80014c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014c8:	dd05      	ble.n	80014d6 <Controle+0x132>
			uM[n]= 1023;
 80014ca:	79fb      	ldrb	r3, [r7, #7]
 80014cc:	4a66      	ldr	r2, [pc, #408]	@ (8001668 <Controle+0x2c4>)
 80014ce:	009b      	lsls	r3, r3, #2
 80014d0:	4413      	add	r3, r2
 80014d2:	4a69      	ldr	r2, [pc, #420]	@ (8001678 <Controle+0x2d4>)
 80014d4:	601a      	str	r2, [r3, #0]
		}
		//Mapeamento da variavel de ação de controle no alcançe dado
		if(ref[n]==0){
 80014d6:	79fb      	ldrb	r3, [r7, #7]
 80014d8:	4a59      	ldr	r2, [pc, #356]	@ (8001640 <Controle+0x29c>)
 80014da:	009b      	lsls	r3, r3, #2
 80014dc:	4413      	add	r3, r2
 80014de:	edd3 7a00 	vldr	s15, [r3]
 80014e2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80014e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014ea:	d105      	bne.n	80014f8 <Controle+0x154>
			D[n]=0;
 80014ec:	79fb      	ldrb	r3, [r7, #7]
 80014ee:	4a63      	ldr	r2, [pc, #396]	@ (800167c <Controle+0x2d8>)
 80014f0:	2100      	movs	r1, #0
 80014f2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80014f6:	e042      	b.n	800157e <Controle+0x1da>
		}else if(uM[n]>=0 ){
 80014f8:	79fb      	ldrb	r3, [r7, #7]
 80014fa:	4a5b      	ldr	r2, [pc, #364]	@ (8001668 <Controle+0x2c4>)
 80014fc:	009b      	lsls	r3, r3, #2
 80014fe:	4413      	add	r3, r2
 8001500:	edd3 7a00 	vldr	s15, [r3]
 8001504:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001508:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800150c:	db16      	blt.n	800153c <Controle+0x198>
			D[n] = map(uM[n],0,1023,0,1023);
 800150e:	79fb      	ldrb	r3, [r7, #7]
 8001510:	4a55      	ldr	r2, [pc, #340]	@ (8001668 <Controle+0x2c4>)
 8001512:	009b      	lsls	r3, r3, #2
 8001514:	4413      	add	r3, r2
 8001516:	edd3 7a00 	vldr	s15, [r3]
 800151a:	79fc      	ldrb	r4, [r7, #7]
 800151c:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 8001520:	2200      	movs	r2, #0
 8001522:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8001526:	2000      	movs	r0, #0
 8001528:	eeb0 0a67 	vmov.f32	s0, s15
 800152c:	f7ff ff04 	bl	8001338 <map>
 8001530:	4603      	mov	r3, r0
 8001532:	461a      	mov	r2, r3
 8001534:	4b51      	ldr	r3, [pc, #324]	@ (800167c <Controle+0x2d8>)
 8001536:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
 800153a:	e020      	b.n	800157e <Controle+0x1da>
		}else if(uM[n]<0){
 800153c:	79fb      	ldrb	r3, [r7, #7]
 800153e:	4a4a      	ldr	r2, [pc, #296]	@ (8001668 <Controle+0x2c4>)
 8001540:	009b      	lsls	r3, r3, #2
 8001542:	4413      	add	r3, r2
 8001544:	edd3 7a00 	vldr	s15, [r3]
 8001548:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800154c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001550:	d515      	bpl.n	800157e <Controle+0x1da>
			D[n]= map(uM[n],-1023,0,2047,1023);
 8001552:	79fb      	ldrb	r3, [r7, #7]
 8001554:	4a44      	ldr	r2, [pc, #272]	@ (8001668 <Controle+0x2c4>)
 8001556:	009b      	lsls	r3, r3, #2
 8001558:	4413      	add	r3, r2
 800155a:	edd3 7a00 	vldr	s15, [r3]
 800155e:	79fc      	ldrb	r4, [r7, #7]
 8001560:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 8001564:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8001568:	2100      	movs	r1, #0
 800156a:	4845      	ldr	r0, [pc, #276]	@ (8001680 <Controle+0x2dc>)
 800156c:	eeb0 0a67 	vmov.f32	s0, s15
 8001570:	f7ff fee2 	bl	8001338 <map>
 8001574:	4603      	mov	r3, r0
 8001576:	461a      	mov	r2, r3
 8001578:	4b40      	ldr	r3, [pc, #256]	@ (800167c <Controle+0x2d8>)
 800157a:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
	for(uint8_t n=0;n<4;n++){
 800157e:	79fb      	ldrb	r3, [r7, #7]
 8001580:	3301      	adds	r3, #1
 8001582:	71fb      	strb	r3, [r7, #7]
 8001584:	79fb      	ldrb	r3, [r7, #7]
 8001586:	2b03      	cmp	r3, #3
 8001588:	f67f af12 	bls.w	80013b0 <Controle+0xc>
		}
	}

	//Logica para salvar o erro e a velocidade anterior
	cont = cont +1;
 800158c:	4b3d      	ldr	r3, [pc, #244]	@ (8001684 <Controle+0x2e0>)
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	3301      	adds	r3, #1
 8001592:	b2da      	uxtb	r2, r3
 8001594:	4b3b      	ldr	r3, [pc, #236]	@ (8001684 <Controle+0x2e0>)
 8001596:	701a      	strb	r2, [r3, #0]
	if(cont == 1){
 8001598:	4b3a      	ldr	r3, [pc, #232]	@ (8001684 <Controle+0x2e0>)
 800159a:	781b      	ldrb	r3, [r3, #0]
 800159c:	2b01      	cmp	r3, #1
 800159e:	d11d      	bne.n	80015dc <Controle+0x238>
		for(uint8_t n=0;n<4;n++){
 80015a0:	2300      	movs	r3, #0
 80015a2:	71bb      	strb	r3, [r7, #6]
 80015a4:	e016      	b.n	80015d4 <Controle+0x230>
			prevspeed[n] = speed[n];
 80015a6:	79ba      	ldrb	r2, [r7, #6]
 80015a8:	79bb      	ldrb	r3, [r7, #6]
 80015aa:	4926      	ldr	r1, [pc, #152]	@ (8001644 <Controle+0x2a0>)
 80015ac:	0092      	lsls	r2, r2, #2
 80015ae:	440a      	add	r2, r1
 80015b0:	6812      	ldr	r2, [r2, #0]
 80015b2:	4929      	ldr	r1, [pc, #164]	@ (8001658 <Controle+0x2b4>)
 80015b4:	009b      	lsls	r3, r3, #2
 80015b6:	440b      	add	r3, r1
 80015b8:	601a      	str	r2, [r3, #0]
			preverror[n] = error[n];
 80015ba:	79ba      	ldrb	r2, [r7, #6]
 80015bc:	79bb      	ldrb	r3, [r7, #6]
 80015be:	4922      	ldr	r1, [pc, #136]	@ (8001648 <Controle+0x2a4>)
 80015c0:	0092      	lsls	r2, r2, #2
 80015c2:	440a      	add	r2, r1
 80015c4:	6812      	ldr	r2, [r2, #0]
 80015c6:	4921      	ldr	r1, [pc, #132]	@ (800164c <Controle+0x2a8>)
 80015c8:	009b      	lsls	r3, r3, #2
 80015ca:	440b      	add	r3, r1
 80015cc:	601a      	str	r2, [r3, #0]
		for(uint8_t n=0;n<4;n++){
 80015ce:	79bb      	ldrb	r3, [r7, #6]
 80015d0:	3301      	adds	r3, #1
 80015d2:	71bb      	strb	r3, [r7, #6]
 80015d4:	79bb      	ldrb	r3, [r7, #6]
 80015d6:	2b03      	cmp	r3, #3
 80015d8:	d9e5      	bls.n	80015a6 <Controle+0x202>
			prevspeed[n] = speed[n];
			preverror[n] = error[n];
		}
		cont = 1;
	}
}
 80015da:	e02d      	b.n	8001638 <Controle+0x294>
	} else if(cont ==2){
 80015dc:	4b29      	ldr	r3, [pc, #164]	@ (8001684 <Controle+0x2e0>)
 80015de:	781b      	ldrb	r3, [r3, #0]
 80015e0:	2b02      	cmp	r3, #2
 80015e2:	d129      	bne.n	8001638 <Controle+0x294>
		for(uint8_t n=0;n<4;n++){
 80015e4:	2300      	movs	r3, #0
 80015e6:	717b      	strb	r3, [r7, #5]
 80015e8:	e020      	b.n	800162c <Controle+0x288>
			prevspeed2[n] = prevspeed[n];
 80015ea:	797a      	ldrb	r2, [r7, #5]
 80015ec:	797b      	ldrb	r3, [r7, #5]
 80015ee:	491a      	ldr	r1, [pc, #104]	@ (8001658 <Controle+0x2b4>)
 80015f0:	0092      	lsls	r2, r2, #2
 80015f2:	440a      	add	r2, r1
 80015f4:	6812      	ldr	r2, [r2, #0]
 80015f6:	4919      	ldr	r1, [pc, #100]	@ (800165c <Controle+0x2b8>)
 80015f8:	009b      	lsls	r3, r3, #2
 80015fa:	440b      	add	r3, r1
 80015fc:	601a      	str	r2, [r3, #0]
			prevspeed[n] = speed[n];
 80015fe:	797a      	ldrb	r2, [r7, #5]
 8001600:	797b      	ldrb	r3, [r7, #5]
 8001602:	4910      	ldr	r1, [pc, #64]	@ (8001644 <Controle+0x2a0>)
 8001604:	0092      	lsls	r2, r2, #2
 8001606:	440a      	add	r2, r1
 8001608:	6812      	ldr	r2, [r2, #0]
 800160a:	4913      	ldr	r1, [pc, #76]	@ (8001658 <Controle+0x2b4>)
 800160c:	009b      	lsls	r3, r3, #2
 800160e:	440b      	add	r3, r1
 8001610:	601a      	str	r2, [r3, #0]
			preverror[n] = error[n];
 8001612:	797a      	ldrb	r2, [r7, #5]
 8001614:	797b      	ldrb	r3, [r7, #5]
 8001616:	490c      	ldr	r1, [pc, #48]	@ (8001648 <Controle+0x2a4>)
 8001618:	0092      	lsls	r2, r2, #2
 800161a:	440a      	add	r2, r1
 800161c:	6812      	ldr	r2, [r2, #0]
 800161e:	490b      	ldr	r1, [pc, #44]	@ (800164c <Controle+0x2a8>)
 8001620:	009b      	lsls	r3, r3, #2
 8001622:	440b      	add	r3, r1
 8001624:	601a      	str	r2, [r3, #0]
		for(uint8_t n=0;n<4;n++){
 8001626:	797b      	ldrb	r3, [r7, #5]
 8001628:	3301      	adds	r3, #1
 800162a:	717b      	strb	r3, [r7, #5]
 800162c:	797b      	ldrb	r3, [r7, #5]
 800162e:	2b03      	cmp	r3, #3
 8001630:	d9db      	bls.n	80015ea <Controle+0x246>
		cont = 1;
 8001632:	4b14      	ldr	r3, [pc, #80]	@ (8001684 <Controle+0x2e0>)
 8001634:	2201      	movs	r2, #1
 8001636:	701a      	strb	r2, [r3, #0]
}
 8001638:	bf00      	nop
 800163a:	370c      	adds	r7, #12
 800163c:	46bd      	mov	sp, r7
 800163e:	bd90      	pop	{r4, r7, pc}
 8001640:	240004e8 	.word	0x240004e8
 8001644:	2400059c 	.word	0x2400059c
 8001648:	24000510 	.word	0x24000510
 800164c:	24000560 	.word	0x24000560
 8001650:	24000008 	.word	0x24000008
 8001654:	2400000c 	.word	0x2400000c
 8001658:	24000540 	.word	0x24000540
 800165c:	24000550 	.word	0x24000550
 8001660:	24000010 	.word	0x24000010
 8001664:	24000520 	.word	0x24000520
 8001668:	24000530 	.word	0x24000530
 800166c:	c47fc000 	.word	0xc47fc000
 8001670:	c47fc000 	.word	0xc47fc000
 8001674:	447fc000 	.word	0x447fc000
 8001678:	447fc000 	.word	0x447fc000
 800167c:	24000574 	.word	0x24000574
 8001680:	fffffc01 	.word	0xfffffc01
 8001684:	24000570 	.word	0x24000570

08001688 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800168c:	bf00      	nop
 800168e:	e7fd      	b.n	800168c <NMI_Handler+0x4>

08001690 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001690:	b480      	push	{r7}
 8001692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001694:	bf00      	nop
 8001696:	e7fd      	b.n	8001694 <HardFault_Handler+0x4>

08001698 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001698:	b480      	push	{r7}
 800169a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800169c:	bf00      	nop
 800169e:	e7fd      	b.n	800169c <MemManage_Handler+0x4>

080016a0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016a4:	bf00      	nop
 80016a6:	e7fd      	b.n	80016a4 <BusFault_Handler+0x4>

080016a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016ac:	bf00      	nop
 80016ae:	e7fd      	b.n	80016ac <UsageFault_Handler+0x4>

080016b0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016b4:	bf00      	nop
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr

080016be <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016be:	b480      	push	{r7}
 80016c0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016c2:	bf00      	nop
 80016c4:	46bd      	mov	sp, r7
 80016c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ca:	4770      	bx	lr

080016cc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016d0:	bf00      	nop
 80016d2:	46bd      	mov	sp, r7
 80016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d8:	4770      	bx	lr

080016da <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016da:	b580      	push	{r7, lr}
 80016dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016de:	f001 f947 	bl	8002970 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016e2:	bf00      	nop
 80016e4:	bd80      	pop	{r7, pc}
	...

080016e8 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch3);
 80016ec:	4802      	ldr	r0, [pc, #8]	@ (80016f8 <DMA1_Stream1_IRQHandler+0x10>)
 80016ee:	f003 f913 	bl	8004918 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80016f2:	bf00      	nop
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	2400083c 	.word	0x2400083c

080016fc <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch4);
 8001700:	4802      	ldr	r0, [pc, #8]	@ (800170c <DMA1_Stream3_IRQHandler+0x10>)
 8001702:	f003 f909 	bl	8004918 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001706:	bf00      	nop
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	240008b4 	.word	0x240008b4

08001710 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch2);
 8001714:	4802      	ldr	r0, [pc, #8]	@ (8001720 <DMA1_Stream4_IRQHandler+0x10>)
 8001716:	f003 f8ff 	bl	8004918 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800171a:	bf00      	nop
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	2400092c 	.word	0x2400092c

08001724 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 8001728:	4802      	ldr	r0, [pc, #8]	@ (8001734 <DMA1_Stream5_IRQHandler+0x10>)
 800172a:	f003 f8f5 	bl	8004918 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800172e:	bf00      	nop
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	240007c4 	.word	0x240007c4

08001738 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800173c:	4802      	ldr	r0, [pc, #8]	@ (8001748 <TIM4_IRQHandler+0x10>)
 800173e:	f00a f9f5 	bl	800bb2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001742:	bf00      	nop
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	24000694 	.word	0x24000694

0800174c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 8001750:	2000      	movs	r0, #0
 8001752:	f000 ff9f 	bl	8002694 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001756:	bf00      	nop
 8001758:	bd80      	pop	{r7, pc}
	...

0800175c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001760:	4802      	ldr	r0, [pc, #8]	@ (800176c <OTG_FS_IRQHandler+0x10>)
 8001762:	f004 ffae 	bl	80066c2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001766:	bf00      	nop
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	24001f28 	.word	0x24001f28

08001770 <TIM15_IRQHandler>:

/**
  * @brief This function handles TIM15 global interrupt.
  */
void TIM15_IRQHandler(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b082      	sub	sp, #8
 8001774:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM15_IRQn 0 */

  /* USER CODE END TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 8001776:	483a      	ldr	r0, [pc, #232]	@ (8001860 <TIM15_IRQHandler+0xf0>)
 8001778:	f00a f9d8 	bl	800bb2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM15_IRQn 1 */
  //
  Enc[0] = TIM4->CNT;
 800177c:	4b39      	ldr	r3, [pc, #228]	@ (8001864 <TIM15_IRQHandler+0xf4>)
 800177e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001780:	4a39      	ldr	r2, [pc, #228]	@ (8001868 <TIM15_IRQHandler+0xf8>)
 8001782:	6013      	str	r3, [r2, #0]
  Enc[1] = TIM1->CNT;
 8001784:	4b39      	ldr	r3, [pc, #228]	@ (800186c <TIM15_IRQHandler+0xfc>)
 8001786:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001788:	4a37      	ldr	r2, [pc, #220]	@ (8001868 <TIM15_IRQHandler+0xf8>)
 800178a:	6053      	str	r3, [r2, #4]
  Enc[2] = TIM8->CNT;
 800178c:	4b38      	ldr	r3, [pc, #224]	@ (8001870 <TIM15_IRQHandler+0x100>)
 800178e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001790:	4a35      	ldr	r2, [pc, #212]	@ (8001868 <TIM15_IRQHandler+0xf8>)
 8001792:	6093      	str	r3, [r2, #8]
  Enc[3] = TIM3->CNT;
 8001794:	4b37      	ldr	r3, [pc, #220]	@ (8001874 <TIM15_IRQHandler+0x104>)
 8001796:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001798:	4a33      	ldr	r2, [pc, #204]	@ (8001868 <TIM15_IRQHandler+0xf8>)
 800179a:	60d3      	str	r3, [r2, #12]
  TIM4->CNT = 0;
 800179c:	4b31      	ldr	r3, [pc, #196]	@ (8001864 <TIM15_IRQHandler+0xf4>)
 800179e:	2200      	movs	r2, #0
 80017a0:	625a      	str	r2, [r3, #36]	@ 0x24
  TIM1->CNT = 0;
 80017a2:	4b32      	ldr	r3, [pc, #200]	@ (800186c <TIM15_IRQHandler+0xfc>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	625a      	str	r2, [r3, #36]	@ 0x24
  TIM8->CNT = 0;
 80017a8:	4b31      	ldr	r3, [pc, #196]	@ (8001870 <TIM15_IRQHandler+0x100>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	625a      	str	r2, [r3, #36]	@ 0x24
  TIM3->CNT = 0;
 80017ae:	4b31      	ldr	r3, [pc, #196]	@ (8001874 <TIM15_IRQHandler+0x104>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	625a      	str	r2, [r3, #36]	@ 0x24

  for(uint8_t i=0;i<4;i++){
 80017b4:	2300      	movs	r3, #0
 80017b6:	71fb      	strb	r3, [r7, #7]
 80017b8:	e03b      	b.n	8001832 <TIM15_IRQHandler+0xc2>
	  vel[i] = Enc[i];
 80017ba:	79fb      	ldrb	r3, [r7, #7]
 80017bc:	4a2a      	ldr	r2, [pc, #168]	@ (8001868 <TIM15_IRQHandler+0xf8>)
 80017be:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80017c2:	79fb      	ldrb	r3, [r7, #7]
 80017c4:	4611      	mov	r1, r2
 80017c6:	4a2c      	ldr	r2, [pc, #176]	@ (8001878 <TIM15_IRQHandler+0x108>)
 80017c8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	  if(vel[i]>60000){
 80017cc:	79fb      	ldrb	r3, [r7, #7]
 80017ce:	4a2a      	ldr	r2, [pc, #168]	@ (8001878 <TIM15_IRQHandler+0x108>)
 80017d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017d4:	f64e 2260 	movw	r2, #60000	@ 0xea60
 80017d8:	4293      	cmp	r3, r2
 80017da:	dd09      	ble.n	80017f0 <TIM15_IRQHandler+0x80>
			  vel[i] = vel[i] - 65356;
 80017dc:	79fb      	ldrb	r3, [r7, #7]
 80017de:	4a26      	ldr	r2, [pc, #152]	@ (8001878 <TIM15_IRQHandler+0x108>)
 80017e0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80017e4:	79fa      	ldrb	r2, [r7, #7]
 80017e6:	4b25      	ldr	r3, [pc, #148]	@ (800187c <TIM15_IRQHandler+0x10c>)
 80017e8:	440b      	add	r3, r1
 80017ea:	4923      	ldr	r1, [pc, #140]	@ (8001878 <TIM15_IRQHandler+0x108>)
 80017ec:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
	  }
	  speed[i] = vel[i]/(81.92);
 80017f0:	79fb      	ldrb	r3, [r7, #7]
 80017f2:	4a21      	ldr	r2, [pc, #132]	@ (8001878 <TIM15_IRQHandler+0x108>)
 80017f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017f8:	ee07 3a90 	vmov	s15, r3
 80017fc:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001800:	ed9f 5b15 	vldr	d5, [pc, #84]	@ 8001858 <TIM15_IRQHandler+0xe8>
 8001804:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001808:	79fb      	ldrb	r3, [r7, #7]
 800180a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800180e:	4a1c      	ldr	r2, [pc, #112]	@ (8001880 <TIM15_IRQHandler+0x110>)
 8001810:	009b      	lsls	r3, r3, #2
 8001812:	4413      	add	r3, r2
 8001814:	edc3 7a00 	vstr	s15, [r3]
	  velocidade[i] = speed[i];
 8001818:	79fa      	ldrb	r2, [r7, #7]
 800181a:	79fb      	ldrb	r3, [r7, #7]
 800181c:	4918      	ldr	r1, [pc, #96]	@ (8001880 <TIM15_IRQHandler+0x110>)
 800181e:	0092      	lsls	r2, r2, #2
 8001820:	440a      	add	r2, r1
 8001822:	6812      	ldr	r2, [r2, #0]
 8001824:	4917      	ldr	r1, [pc, #92]	@ (8001884 <TIM15_IRQHandler+0x114>)
 8001826:	009b      	lsls	r3, r3, #2
 8001828:	440b      	add	r3, r1
 800182a:	601a      	str	r2, [r3, #0]
  for(uint8_t i=0;i<4;i++){
 800182c:	79fb      	ldrb	r3, [r7, #7]
 800182e:	3301      	adds	r3, #1
 8001830:	71fb      	strb	r3, [r7, #7]
 8001832:	79fb      	ldrb	r3, [r7, #7]
 8001834:	2b03      	cmp	r3, #3
 8001836:	d9c0      	bls.n	80017ba <TIM15_IRQHandler+0x4a>
  }

  //velocidade = speed[0];
  Controle();
 8001838:	f7ff fdb4 	bl	80013a4 <Controle>

  dshot_write(D);
 800183c:	4812      	ldr	r0, [pc, #72]	@ (8001888 <TIM15_IRQHandler+0x118>)
 800183e:	f7ff f8be 	bl	80009be <dshot_write>

  HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_14);
 8001842:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001846:	4811      	ldr	r0, [pc, #68]	@ (800188c <TIM15_IRQHandler+0x11c>)
 8001848:	f004 fdb1 	bl	80063ae <HAL_GPIO_TogglePin>
  /* USER CODE END TIM15_IRQn 1 */
}
 800184c:	bf00      	nop
 800184e:	3708      	adds	r7, #8
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}
 8001854:	f3af 8000 	nop.w
 8001858:	47ae147b 	.word	0x47ae147b
 800185c:	40547ae1 	.word	0x40547ae1
 8001860:	24000778 	.word	0x24000778
 8001864:	40000800 	.word	0x40000800
 8001868:	2400057c 	.word	0x2400057c
 800186c:	40010000 	.word	0x40010000
 8001870:	40010400 	.word	0x40010400
 8001874:	40000400 	.word	0x40000400
 8001878:	2400058c 	.word	0x2400058c
 800187c:	ffff00b4 	.word	0xffff00b4
 8001880:	2400059c 	.word	0x2400059c
 8001884:	240004d8 	.word	0x240004d8
 8001888:	24000574 	.word	0x24000574
 800188c:	58020400 	.word	0x58020400

08001890 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001890:	b480      	push	{r7}
 8001892:	af00      	add	r7, sp, #0
  return 1;
 8001894:	2301      	movs	r3, #1
}
 8001896:	4618      	mov	r0, r3
 8001898:	46bd      	mov	sp, r7
 800189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189e:	4770      	bx	lr

080018a0 <_kill>:

int _kill(int pid, int sig)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b082      	sub	sp, #8
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
 80018a8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80018aa:	f011 f825 	bl	80128f8 <__errno>
 80018ae:	4603      	mov	r3, r0
 80018b0:	2216      	movs	r2, #22
 80018b2:	601a      	str	r2, [r3, #0]
  return -1;
 80018b4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018b8:	4618      	mov	r0, r3
 80018ba:	3708      	adds	r7, #8
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}

080018c0 <_exit>:

void _exit (int status)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b082      	sub	sp, #8
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80018c8:	f04f 31ff 	mov.w	r1, #4294967295
 80018cc:	6878      	ldr	r0, [r7, #4]
 80018ce:	f7ff ffe7 	bl	80018a0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80018d2:	bf00      	nop
 80018d4:	e7fd      	b.n	80018d2 <_exit+0x12>

080018d6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018d6:	b580      	push	{r7, lr}
 80018d8:	b086      	sub	sp, #24
 80018da:	af00      	add	r7, sp, #0
 80018dc:	60f8      	str	r0, [r7, #12]
 80018de:	60b9      	str	r1, [r7, #8]
 80018e0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018e2:	2300      	movs	r3, #0
 80018e4:	617b      	str	r3, [r7, #20]
 80018e6:	e00a      	b.n	80018fe <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80018e8:	f3af 8000 	nop.w
 80018ec:	4601      	mov	r1, r0
 80018ee:	68bb      	ldr	r3, [r7, #8]
 80018f0:	1c5a      	adds	r2, r3, #1
 80018f2:	60ba      	str	r2, [r7, #8]
 80018f4:	b2ca      	uxtb	r2, r1
 80018f6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	3301      	adds	r3, #1
 80018fc:	617b      	str	r3, [r7, #20]
 80018fe:	697a      	ldr	r2, [r7, #20]
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	429a      	cmp	r2, r3
 8001904:	dbf0      	blt.n	80018e8 <_read+0x12>
  }

  return len;
 8001906:	687b      	ldr	r3, [r7, #4]
}
 8001908:	4618      	mov	r0, r3
 800190a:	3718      	adds	r7, #24
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}

08001910 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b086      	sub	sp, #24
 8001914:	af00      	add	r7, sp, #0
 8001916:	60f8      	str	r0, [r7, #12]
 8001918:	60b9      	str	r1, [r7, #8]
 800191a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800191c:	2300      	movs	r3, #0
 800191e:	617b      	str	r3, [r7, #20]
 8001920:	e009      	b.n	8001936 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001922:	68bb      	ldr	r3, [r7, #8]
 8001924:	1c5a      	adds	r2, r3, #1
 8001926:	60ba      	str	r2, [r7, #8]
 8001928:	781b      	ldrb	r3, [r3, #0]
 800192a:	4618      	mov	r0, r3
 800192c:	f000 ff32 	bl	8002794 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	3301      	adds	r3, #1
 8001934:	617b      	str	r3, [r7, #20]
 8001936:	697a      	ldr	r2, [r7, #20]
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	429a      	cmp	r2, r3
 800193c:	dbf1      	blt.n	8001922 <_write+0x12>
  }
  return len;
 800193e:	687b      	ldr	r3, [r7, #4]
}
 8001940:	4618      	mov	r0, r3
 8001942:	3718      	adds	r7, #24
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}

08001948 <_close>:

int _close(int file)
{
 8001948:	b480      	push	{r7}
 800194a:	b083      	sub	sp, #12
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001950:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001954:	4618      	mov	r0, r3
 8001956:	370c      	adds	r7, #12
 8001958:	46bd      	mov	sp, r7
 800195a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195e:	4770      	bx	lr

08001960 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001960:	b480      	push	{r7}
 8001962:	b083      	sub	sp, #12
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
 8001968:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001970:	605a      	str	r2, [r3, #4]
  return 0;
 8001972:	2300      	movs	r3, #0
}
 8001974:	4618      	mov	r0, r3
 8001976:	370c      	adds	r7, #12
 8001978:	46bd      	mov	sp, r7
 800197a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197e:	4770      	bx	lr

08001980 <_isatty>:

int _isatty(int file)
{
 8001980:	b480      	push	{r7}
 8001982:	b083      	sub	sp, #12
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001988:	2301      	movs	r3, #1
}
 800198a:	4618      	mov	r0, r3
 800198c:	370c      	adds	r7, #12
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr

08001996 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001996:	b480      	push	{r7}
 8001998:	b085      	sub	sp, #20
 800199a:	af00      	add	r7, sp, #0
 800199c:	60f8      	str	r0, [r7, #12]
 800199e:	60b9      	str	r1, [r7, #8]
 80019a0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80019a2:	2300      	movs	r3, #0
}
 80019a4:	4618      	mov	r0, r3
 80019a6:	3714      	adds	r7, #20
 80019a8:	46bd      	mov	sp, r7
 80019aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ae:	4770      	bx	lr

080019b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b086      	sub	sp, #24
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019b8:	4a14      	ldr	r2, [pc, #80]	@ (8001a0c <_sbrk+0x5c>)
 80019ba:	4b15      	ldr	r3, [pc, #84]	@ (8001a10 <_sbrk+0x60>)
 80019bc:	1ad3      	subs	r3, r2, r3
 80019be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019c4:	4b13      	ldr	r3, [pc, #76]	@ (8001a14 <_sbrk+0x64>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d102      	bne.n	80019d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019cc:	4b11      	ldr	r3, [pc, #68]	@ (8001a14 <_sbrk+0x64>)
 80019ce:	4a12      	ldr	r2, [pc, #72]	@ (8001a18 <_sbrk+0x68>)
 80019d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019d2:	4b10      	ldr	r3, [pc, #64]	@ (8001a14 <_sbrk+0x64>)
 80019d4:	681a      	ldr	r2, [r3, #0]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	4413      	add	r3, r2
 80019da:	693a      	ldr	r2, [r7, #16]
 80019dc:	429a      	cmp	r2, r3
 80019de:	d207      	bcs.n	80019f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019e0:	f010 ff8a 	bl	80128f8 <__errno>
 80019e4:	4603      	mov	r3, r0
 80019e6:	220c      	movs	r2, #12
 80019e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019ea:	f04f 33ff 	mov.w	r3, #4294967295
 80019ee:	e009      	b.n	8001a04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019f0:	4b08      	ldr	r3, [pc, #32]	@ (8001a14 <_sbrk+0x64>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019f6:	4b07      	ldr	r3, [pc, #28]	@ (8001a14 <_sbrk+0x64>)
 80019f8:	681a      	ldr	r2, [r3, #0]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	4413      	add	r3, r2
 80019fe:	4a05      	ldr	r2, [pc, #20]	@ (8001a14 <_sbrk+0x64>)
 8001a00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a02:	68fb      	ldr	r3, [r7, #12]
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	3718      	adds	r7, #24
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	24080000 	.word	0x24080000
 8001a10:	00000400 	.word	0x00000400
 8001a14:	240005ac 	.word	0x240005ac
 8001a18:	24002778 	.word	0x24002778

08001a1c <MX_TIM1_Init>:
DMA_HandleTypeDef hdma_tim5_ch4;
DMA_HandleTypeDef hdma_tim5_ch2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b08c      	sub	sp, #48	@ 0x30
 8001a20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001a22:	f107 030c 	add.w	r3, r7, #12
 8001a26:	2224      	movs	r2, #36	@ 0x24
 8001a28:	2100      	movs	r1, #0
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f010 ff11 	bl	8012852 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a30:	463b      	mov	r3, r7
 8001a32:	2200      	movs	r2, #0
 8001a34:	601a      	str	r2, [r3, #0]
 8001a36:	605a      	str	r2, [r3, #4]
 8001a38:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001a3a:	4b23      	ldr	r3, [pc, #140]	@ (8001ac8 <MX_TIM1_Init+0xac>)
 8001a3c:	4a23      	ldr	r2, [pc, #140]	@ (8001acc <MX_TIM1_Init+0xb0>)
 8001a3e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001a40:	4b21      	ldr	r3, [pc, #132]	@ (8001ac8 <MX_TIM1_Init+0xac>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a46:	4b20      	ldr	r3, [pc, #128]	@ (8001ac8 <MX_TIM1_Init+0xac>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001a4c:	4b1e      	ldr	r3, [pc, #120]	@ (8001ac8 <MX_TIM1_Init+0xac>)
 8001a4e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001a52:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a54:	4b1c      	ldr	r3, [pc, #112]	@ (8001ac8 <MX_TIM1_Init+0xac>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001a5a:	4b1b      	ldr	r3, [pc, #108]	@ (8001ac8 <MX_TIM1_Init+0xac>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a60:	4b19      	ldr	r3, [pc, #100]	@ (8001ac8 <MX_TIM1_Init+0xac>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001a66:	2303      	movs	r3, #3
 8001a68:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8001a6a:	2302      	movs	r3, #2
 8001a6c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001a72:	2300      	movs	r3, #0
 8001a74:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001a76:	2300      	movs	r3, #0
 8001a78:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8001a7a:	2302      	movs	r3, #2
 8001a7c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001a82:	2300      	movs	r3, #0
 8001a84:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001a86:	2300      	movs	r3, #0
 8001a88:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001a8a:	f107 030c 	add.w	r3, r7, #12
 8001a8e:	4619      	mov	r1, r3
 8001a90:	480d      	ldr	r0, [pc, #52]	@ (8001ac8 <MX_TIM1_Init+0xac>)
 8001a92:	f009 fef7 	bl	800b884 <HAL_TIM_Encoder_Init>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d001      	beq.n	8001aa0 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8001a9c:	f7ff fc2b 	bl	80012f6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001aac:	463b      	mov	r3, r7
 8001aae:	4619      	mov	r1, r3
 8001ab0:	4805      	ldr	r0, [pc, #20]	@ (8001ac8 <MX_TIM1_Init+0xac>)
 8001ab2:	f00a ffb7 	bl	800ca24 <HAL_TIMEx_MasterConfigSynchronization>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d001      	beq.n	8001ac0 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8001abc:	f7ff fc1b 	bl	80012f6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001ac0:	bf00      	nop
 8001ac2:	3730      	adds	r7, #48	@ 0x30
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	240005b0 	.word	0x240005b0
 8001acc:	40010000 	.word	0x40010000

08001ad0 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b08a      	sub	sp, #40	@ 0x28
 8001ad4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ad6:	f107 031c 	add.w	r3, r7, #28
 8001ada:	2200      	movs	r2, #0
 8001adc:	601a      	str	r2, [r3, #0]
 8001ade:	605a      	str	r2, [r3, #4]
 8001ae0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ae2:	463b      	mov	r3, r7
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	601a      	str	r2, [r3, #0]
 8001ae8:	605a      	str	r2, [r3, #4]
 8001aea:	609a      	str	r2, [r3, #8]
 8001aec:	60da      	str	r2, [r3, #12]
 8001aee:	611a      	str	r2, [r3, #16]
 8001af0:	615a      	str	r2, [r3, #20]
 8001af2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001af4:	4b27      	ldr	r3, [pc, #156]	@ (8001b94 <MX_TIM2_Init+0xc4>)
 8001af6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001afa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001afc:	4b25      	ldr	r3, [pc, #148]	@ (8001b94 <MX_TIM2_Init+0xc4>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b02:	4b24      	ldr	r3, [pc, #144]	@ (8001b94 <MX_TIM2_Init+0xc4>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 8001b08:	4b22      	ldr	r3, [pc, #136]	@ (8001b94 <MX_TIM2_Init+0xc4>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b0e:	4b21      	ldr	r3, [pc, #132]	@ (8001b94 <MX_TIM2_Init+0xc4>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b14:	4b1f      	ldr	r3, [pc, #124]	@ (8001b94 <MX_TIM2_Init+0xc4>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001b1a:	481e      	ldr	r0, [pc, #120]	@ (8001b94 <MX_TIM2_Init+0xc4>)
 8001b1c:	f009 fd4c 	bl	800b5b8 <HAL_TIM_PWM_Init>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d001      	beq.n	8001b2a <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001b26:	f7ff fbe6 	bl	80012f6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b32:	f107 031c 	add.w	r3, r7, #28
 8001b36:	4619      	mov	r1, r3
 8001b38:	4816      	ldr	r0, [pc, #88]	@ (8001b94 <MX_TIM2_Init+0xc4>)
 8001b3a:	f00a ff73 	bl	800ca24 <HAL_TIMEx_MasterConfigSynchronization>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d001      	beq.n	8001b48 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001b44:	f7ff fbd7 	bl	80012f6 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b48:	2360      	movs	r3, #96	@ 0x60
 8001b4a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b50:	2300      	movs	r3, #0
 8001b52:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b54:	2300      	movs	r3, #0
 8001b56:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b58:	463b      	mov	r3, r7
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	480d      	ldr	r0, [pc, #52]	@ (8001b94 <MX_TIM2_Init+0xc4>)
 8001b60:	f00a f8ec 	bl	800bd3c <HAL_TIM_PWM_ConfigChannel>
 8001b64:	4603      	mov	r3, r0
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d001      	beq.n	8001b6e <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8001b6a:	f7ff fbc4 	bl	80012f6 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001b6e:	463b      	mov	r3, r7
 8001b70:	2208      	movs	r2, #8
 8001b72:	4619      	mov	r1, r3
 8001b74:	4807      	ldr	r0, [pc, #28]	@ (8001b94 <MX_TIM2_Init+0xc4>)
 8001b76:	f00a f8e1 	bl	800bd3c <HAL_TIM_PWM_ConfigChannel>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d001      	beq.n	8001b84 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001b80:	f7ff fbb9 	bl	80012f6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001b84:	4803      	ldr	r0, [pc, #12]	@ (8001b94 <MX_TIM2_Init+0xc4>)
 8001b86:	f000 fc13 	bl	80023b0 <HAL_TIM_MspPostInit>

}
 8001b8a:	bf00      	nop
 8001b8c:	3728      	adds	r7, #40	@ 0x28
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	240005fc 	.word	0x240005fc

08001b98 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b08c      	sub	sp, #48	@ 0x30
 8001b9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001b9e:	f107 030c 	add.w	r3, r7, #12
 8001ba2:	2224      	movs	r2, #36	@ 0x24
 8001ba4:	2100      	movs	r1, #0
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f010 fe53 	bl	8012852 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bac:	463b      	mov	r3, r7
 8001bae:	2200      	movs	r2, #0
 8001bb0:	601a      	str	r2, [r3, #0]
 8001bb2:	605a      	str	r2, [r3, #4]
 8001bb4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001bb6:	4b21      	ldr	r3, [pc, #132]	@ (8001c3c <MX_TIM3_Init+0xa4>)
 8001bb8:	4a21      	ldr	r2, [pc, #132]	@ (8001c40 <MX_TIM3_Init+0xa8>)
 8001bba:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001bbc:	4b1f      	ldr	r3, [pc, #124]	@ (8001c3c <MX_TIM3_Init+0xa4>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bc2:	4b1e      	ldr	r3, [pc, #120]	@ (8001c3c <MX_TIM3_Init+0xa4>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001bc8:	4b1c      	ldr	r3, [pc, #112]	@ (8001c3c <MX_TIM3_Init+0xa4>)
 8001bca:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001bce:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bd0:	4b1a      	ldr	r3, [pc, #104]	@ (8001c3c <MX_TIM3_Init+0xa4>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bd6:	4b19      	ldr	r3, [pc, #100]	@ (8001c3c <MX_TIM3_Init+0xa4>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001bdc:	2303      	movs	r3, #3
 8001bde:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8001be0:	2302      	movs	r3, #2
 8001be2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001be4:	2301      	movs	r3, #1
 8001be6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001be8:	2300      	movs	r3, #0
 8001bea:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001bec:	2300      	movs	r3, #0
 8001bee:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8001bf0:	2302      	movs	r3, #2
 8001bf2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001c00:	f107 030c 	add.w	r3, r7, #12
 8001c04:	4619      	mov	r1, r3
 8001c06:	480d      	ldr	r0, [pc, #52]	@ (8001c3c <MX_TIM3_Init+0xa4>)
 8001c08:	f009 fe3c 	bl	800b884 <HAL_TIM_Encoder_Init>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d001      	beq.n	8001c16 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8001c12:	f7ff fb70 	bl	80012f6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c16:	2300      	movs	r3, #0
 8001c18:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001c1e:	463b      	mov	r3, r7
 8001c20:	4619      	mov	r1, r3
 8001c22:	4806      	ldr	r0, [pc, #24]	@ (8001c3c <MX_TIM3_Init+0xa4>)
 8001c24:	f00a fefe 	bl	800ca24 <HAL_TIMEx_MasterConfigSynchronization>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d001      	beq.n	8001c32 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8001c2e:	f7ff fb62 	bl	80012f6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001c32:	bf00      	nop
 8001c34:	3730      	adds	r7, #48	@ 0x30
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	24000648 	.word	0x24000648
 8001c40:	40000400 	.word	0x40000400

08001c44 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b08c      	sub	sp, #48	@ 0x30
 8001c48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001c4a:	f107 030c 	add.w	r3, r7, #12
 8001c4e:	2224      	movs	r2, #36	@ 0x24
 8001c50:	2100      	movs	r1, #0
 8001c52:	4618      	mov	r0, r3
 8001c54:	f010 fdfd 	bl	8012852 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c58:	463b      	mov	r3, r7
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	601a      	str	r2, [r3, #0]
 8001c5e:	605a      	str	r2, [r3, #4]
 8001c60:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001c62:	4b21      	ldr	r3, [pc, #132]	@ (8001ce8 <MX_TIM4_Init+0xa4>)
 8001c64:	4a21      	ldr	r2, [pc, #132]	@ (8001cec <MX_TIM4_Init+0xa8>)
 8001c66:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001c68:	4b1f      	ldr	r3, [pc, #124]	@ (8001ce8 <MX_TIM4_Init+0xa4>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c6e:	4b1e      	ldr	r3, [pc, #120]	@ (8001ce8 <MX_TIM4_Init+0xa4>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001c74:	4b1c      	ldr	r3, [pc, #112]	@ (8001ce8 <MX_TIM4_Init+0xa4>)
 8001c76:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001c7a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c7c:	4b1a      	ldr	r3, [pc, #104]	@ (8001ce8 <MX_TIM4_Init+0xa4>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c82:	4b19      	ldr	r3, [pc, #100]	@ (8001ce8 <MX_TIM4_Init+0xa4>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001c88:	2303      	movs	r3, #3
 8001c8a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8001c8c:	2302      	movs	r3, #2
 8001c8e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001c90:	2301      	movs	r3, #1
 8001c92:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001c94:	2300      	movs	r3, #0
 8001c96:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8001c9c:	2302      	movs	r3, #2
 8001c9e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001cac:	f107 030c 	add.w	r3, r7, #12
 8001cb0:	4619      	mov	r1, r3
 8001cb2:	480d      	ldr	r0, [pc, #52]	@ (8001ce8 <MX_TIM4_Init+0xa4>)
 8001cb4:	f009 fde6 	bl	800b884 <HAL_TIM_Encoder_Init>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d001      	beq.n	8001cc2 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8001cbe:	f7ff fb1a 	bl	80012f6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001cca:	463b      	mov	r3, r7
 8001ccc:	4619      	mov	r1, r3
 8001cce:	4806      	ldr	r0, [pc, #24]	@ (8001ce8 <MX_TIM4_Init+0xa4>)
 8001cd0:	f00a fea8 	bl	800ca24 <HAL_TIMEx_MasterConfigSynchronization>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d001      	beq.n	8001cde <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8001cda:	f7ff fb0c 	bl	80012f6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001cde:	bf00      	nop
 8001ce0:	3730      	adds	r7, #48	@ 0x30
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	24000694 	.word	0x24000694
 8001cec:	40000800 	.word	0x40000800

08001cf0 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b08a      	sub	sp, #40	@ 0x28
 8001cf4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cf6:	f107 031c 	add.w	r3, r7, #28
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	601a      	str	r2, [r3, #0]
 8001cfe:	605a      	str	r2, [r3, #4]
 8001d00:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d02:	463b      	mov	r3, r7
 8001d04:	2200      	movs	r2, #0
 8001d06:	601a      	str	r2, [r3, #0]
 8001d08:	605a      	str	r2, [r3, #4]
 8001d0a:	609a      	str	r2, [r3, #8]
 8001d0c:	60da      	str	r2, [r3, #12]
 8001d0e:	611a      	str	r2, [r3, #16]
 8001d10:	615a      	str	r2, [r3, #20]
 8001d12:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001d14:	4b26      	ldr	r3, [pc, #152]	@ (8001db0 <MX_TIM5_Init+0xc0>)
 8001d16:	4a27      	ldr	r2, [pc, #156]	@ (8001db4 <MX_TIM5_Init+0xc4>)
 8001d18:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001d1a:	4b25      	ldr	r3, [pc, #148]	@ (8001db0 <MX_TIM5_Init+0xc0>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d20:	4b23      	ldr	r3, [pc, #140]	@ (8001db0 <MX_TIM5_Init+0xc0>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 0;
 8001d26:	4b22      	ldr	r3, [pc, #136]	@ (8001db0 <MX_TIM5_Init+0xc0>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d2c:	4b20      	ldr	r3, [pc, #128]	@ (8001db0 <MX_TIM5_Init+0xc0>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d32:	4b1f      	ldr	r3, [pc, #124]	@ (8001db0 <MX_TIM5_Init+0xc0>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001d38:	481d      	ldr	r0, [pc, #116]	@ (8001db0 <MX_TIM5_Init+0xc0>)
 8001d3a:	f009 fc3d 	bl	800b5b8 <HAL_TIM_PWM_Init>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d001      	beq.n	8001d48 <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 8001d44:	f7ff fad7 	bl	80012f6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001d50:	f107 031c 	add.w	r3, r7, #28
 8001d54:	4619      	mov	r1, r3
 8001d56:	4816      	ldr	r0, [pc, #88]	@ (8001db0 <MX_TIM5_Init+0xc0>)
 8001d58:	f00a fe64 	bl	800ca24 <HAL_TIMEx_MasterConfigSynchronization>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d001      	beq.n	8001d66 <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 8001d62:	f7ff fac8 	bl	80012f6 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d66:	2360      	movs	r3, #96	@ 0x60
 8001d68:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d72:	2300      	movs	r3, #0
 8001d74:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001d76:	463b      	mov	r3, r7
 8001d78:	2204      	movs	r2, #4
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	480c      	ldr	r0, [pc, #48]	@ (8001db0 <MX_TIM5_Init+0xc0>)
 8001d7e:	f009 ffdd 	bl	800bd3c <HAL_TIM_PWM_ConfigChannel>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d001      	beq.n	8001d8c <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 8001d88:	f7ff fab5 	bl	80012f6 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001d8c:	463b      	mov	r3, r7
 8001d8e:	220c      	movs	r2, #12
 8001d90:	4619      	mov	r1, r3
 8001d92:	4807      	ldr	r0, [pc, #28]	@ (8001db0 <MX_TIM5_Init+0xc0>)
 8001d94:	f009 ffd2 	bl	800bd3c <HAL_TIM_PWM_ConfigChannel>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d001      	beq.n	8001da2 <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 8001d9e:	f7ff faaa 	bl	80012f6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001da2:	4803      	ldr	r0, [pc, #12]	@ (8001db0 <MX_TIM5_Init+0xc0>)
 8001da4:	f000 fb04 	bl	80023b0 <HAL_TIM_MspPostInit>

}
 8001da8:	bf00      	nop
 8001daa:	3728      	adds	r7, #40	@ 0x28
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}
 8001db0:	240006e0 	.word	0x240006e0
 8001db4:	40000c00 	.word	0x40000c00

08001db8 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b08c      	sub	sp, #48	@ 0x30
 8001dbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001dbe:	f107 030c 	add.w	r3, r7, #12
 8001dc2:	2224      	movs	r2, #36	@ 0x24
 8001dc4:	2100      	movs	r1, #0
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f010 fd43 	bl	8012852 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dcc:	463b      	mov	r3, r7
 8001dce:	2200      	movs	r2, #0
 8001dd0:	601a      	str	r2, [r3, #0]
 8001dd2:	605a      	str	r2, [r3, #4]
 8001dd4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001dd6:	4b23      	ldr	r3, [pc, #140]	@ (8001e64 <MX_TIM8_Init+0xac>)
 8001dd8:	4a23      	ldr	r2, [pc, #140]	@ (8001e68 <MX_TIM8_Init+0xb0>)
 8001dda:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001ddc:	4b21      	ldr	r3, [pc, #132]	@ (8001e64 <MX_TIM8_Init+0xac>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001de2:	4b20      	ldr	r3, [pc, #128]	@ (8001e64 <MX_TIM8_Init+0xac>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001de8:	4b1e      	ldr	r3, [pc, #120]	@ (8001e64 <MX_TIM8_Init+0xac>)
 8001dea:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001dee:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001df0:	4b1c      	ldr	r3, [pc, #112]	@ (8001e64 <MX_TIM8_Init+0xac>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001df6:	4b1b      	ldr	r3, [pc, #108]	@ (8001e64 <MX_TIM8_Init+0xac>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dfc:	4b19      	ldr	r3, [pc, #100]	@ (8001e64 <MX_TIM8_Init+0xac>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001e02:	2303      	movs	r3, #3
 8001e04:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8001e06:	2302      	movs	r3, #2
 8001e08:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001e12:	2300      	movs	r3, #0
 8001e14:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8001e16:	2302      	movs	r3, #2
 8001e18:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001e22:	2300      	movs	r3, #0
 8001e24:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8001e26:	f107 030c 	add.w	r3, r7, #12
 8001e2a:	4619      	mov	r1, r3
 8001e2c:	480d      	ldr	r0, [pc, #52]	@ (8001e64 <MX_TIM8_Init+0xac>)
 8001e2e:	f009 fd29 	bl	800b884 <HAL_TIM_Encoder_Init>
 8001e32:	4603      	mov	r3, r0
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d001      	beq.n	8001e3c <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 8001e38:	f7ff fa5d 	bl	80012f6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001e40:	2300      	movs	r3, #0
 8001e42:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e44:	2300      	movs	r3, #0
 8001e46:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001e48:	463b      	mov	r3, r7
 8001e4a:	4619      	mov	r1, r3
 8001e4c:	4805      	ldr	r0, [pc, #20]	@ (8001e64 <MX_TIM8_Init+0xac>)
 8001e4e:	f00a fde9 	bl	800ca24 <HAL_TIMEx_MasterConfigSynchronization>
 8001e52:	4603      	mov	r3, r0
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d001      	beq.n	8001e5c <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8001e58:	f7ff fa4d 	bl	80012f6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001e5c:	bf00      	nop
 8001e5e:	3730      	adds	r7, #48	@ 0x30
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd80      	pop	{r7, pc}
 8001e64:	2400072c 	.word	0x2400072c
 8001e68:	40010400 	.word	0x40010400

08001e6c <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b088      	sub	sp, #32
 8001e70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e72:	f107 0310 	add.w	r3, r7, #16
 8001e76:	2200      	movs	r2, #0
 8001e78:	601a      	str	r2, [r3, #0]
 8001e7a:	605a      	str	r2, [r3, #4]
 8001e7c:	609a      	str	r2, [r3, #8]
 8001e7e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e80:	1d3b      	adds	r3, r7, #4
 8001e82:	2200      	movs	r2, #0
 8001e84:	601a      	str	r2, [r3, #0]
 8001e86:	605a      	str	r2, [r3, #4]
 8001e88:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8001e8a:	4b1f      	ldr	r3, [pc, #124]	@ (8001f08 <MX_TIM15_Init+0x9c>)
 8001e8c:	4a1f      	ldr	r2, [pc, #124]	@ (8001f0c <MX_TIM15_Init+0xa0>)
 8001e8e:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 19999;
 8001e90:	4b1d      	ldr	r3, [pc, #116]	@ (8001f08 <MX_TIM15_Init+0x9c>)
 8001e92:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8001e96:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e98:	4b1b      	ldr	r3, [pc, #108]	@ (8001f08 <MX_TIM15_Init+0x9c>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 99;
 8001e9e:	4b1a      	ldr	r3, [pc, #104]	@ (8001f08 <MX_TIM15_Init+0x9c>)
 8001ea0:	2263      	movs	r2, #99	@ 0x63
 8001ea2:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ea4:	4b18      	ldr	r3, [pc, #96]	@ (8001f08 <MX_TIM15_Init+0x9c>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001eaa:	4b17      	ldr	r3, [pc, #92]	@ (8001f08 <MX_TIM15_Init+0x9c>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001eb0:	4b15      	ldr	r3, [pc, #84]	@ (8001f08 <MX_TIM15_Init+0x9c>)
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8001eb6:	4814      	ldr	r0, [pc, #80]	@ (8001f08 <MX_TIM15_Init+0x9c>)
 8001eb8:	f009 faae 	bl	800b418 <HAL_TIM_Base_Init>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d001      	beq.n	8001ec6 <MX_TIM15_Init+0x5a>
  {
    Error_Handler();
 8001ec2:	f7ff fa18 	bl	80012f6 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ec6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001eca:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8001ecc:	f107 0310 	add.w	r3, r7, #16
 8001ed0:	4619      	mov	r1, r3
 8001ed2:	480d      	ldr	r0, [pc, #52]	@ (8001f08 <MX_TIM15_Init+0x9c>)
 8001ed4:	f00a f846 	bl	800bf64 <HAL_TIM_ConfigClockSource>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d001      	beq.n	8001ee2 <MX_TIM15_Init+0x76>
  {
    Error_Handler();
 8001ede:	f7ff fa0a 	bl	80012f6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001eea:	1d3b      	adds	r3, r7, #4
 8001eec:	4619      	mov	r1, r3
 8001eee:	4806      	ldr	r0, [pc, #24]	@ (8001f08 <MX_TIM15_Init+0x9c>)
 8001ef0:	f00a fd98 	bl	800ca24 <HAL_TIMEx_MasterConfigSynchronization>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d001      	beq.n	8001efe <MX_TIM15_Init+0x92>
  {
    Error_Handler();
 8001efa:	f7ff f9fc 	bl	80012f6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8001efe:	bf00      	nop
 8001f00:	3720      	adds	r7, #32
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	24000778 	.word	0x24000778
 8001f0c:	40014000 	.word	0x40014000

08001f10 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b090      	sub	sp, #64	@ 0x40
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f18:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	601a      	str	r2, [r3, #0]
 8001f20:	605a      	str	r2, [r3, #4]
 8001f22:	609a      	str	r2, [r3, #8]
 8001f24:	60da      	str	r2, [r3, #12]
 8001f26:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a6d      	ldr	r2, [pc, #436]	@ (80020e4 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d12f      	bne.n	8001f92 <HAL_TIM_Encoder_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001f32:	4b6d      	ldr	r3, [pc, #436]	@ (80020e8 <HAL_TIM_Encoder_MspInit+0x1d8>)
 8001f34:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001f38:	4a6b      	ldr	r2, [pc, #428]	@ (80020e8 <HAL_TIM_Encoder_MspInit+0x1d8>)
 8001f3a:	f043 0301 	orr.w	r3, r3, #1
 8001f3e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001f42:	4b69      	ldr	r3, [pc, #420]	@ (80020e8 <HAL_TIM_Encoder_MspInit+0x1d8>)
 8001f44:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001f48:	f003 0301 	and.w	r3, r3, #1
 8001f4c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001f4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001f50:	4b65      	ldr	r3, [pc, #404]	@ (80020e8 <HAL_TIM_Encoder_MspInit+0x1d8>)
 8001f52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f56:	4a64      	ldr	r2, [pc, #400]	@ (80020e8 <HAL_TIM_Encoder_MspInit+0x1d8>)
 8001f58:	f043 0310 	orr.w	r3, r3, #16
 8001f5c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001f60:	4b61      	ldr	r3, [pc, #388]	@ (80020e8 <HAL_TIM_Encoder_MspInit+0x1d8>)
 8001f62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f66:	f003 0310 	and.w	r3, r3, #16
 8001f6a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = ENC2_A_Pin|ENC2_B_Pin;
 8001f6e:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 8001f72:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f74:	2302      	movs	r3, #2
 8001f76:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001f80:	2301      	movs	r3, #1
 8001f82:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001f84:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001f88:	4619      	mov	r1, r3
 8001f8a:	4858      	ldr	r0, [pc, #352]	@ (80020ec <HAL_TIM_Encoder_MspInit+0x1dc>)
 8001f8c:	f004 f846 	bl	800601c <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8001f90:	e0a3      	b.n	80020da <HAL_TIM_Encoder_MspInit+0x1ca>
  else if(tim_encoderHandle->Instance==TIM3)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a56      	ldr	r2, [pc, #344]	@ (80020f0 <HAL_TIM_Encoder_MspInit+0x1e0>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d12e      	bne.n	8001ffa <HAL_TIM_Encoder_MspInit+0xea>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001f9c:	4b52      	ldr	r3, [pc, #328]	@ (80020e8 <HAL_TIM_Encoder_MspInit+0x1d8>)
 8001f9e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001fa2:	4a51      	ldr	r2, [pc, #324]	@ (80020e8 <HAL_TIM_Encoder_MspInit+0x1d8>)
 8001fa4:	f043 0302 	orr.w	r3, r3, #2
 8001fa8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001fac:	4b4e      	ldr	r3, [pc, #312]	@ (80020e8 <HAL_TIM_Encoder_MspInit+0x1d8>)
 8001fae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001fb2:	f003 0302 	and.w	r3, r3, #2
 8001fb6:	623b      	str	r3, [r7, #32]
 8001fb8:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fba:	4b4b      	ldr	r3, [pc, #300]	@ (80020e8 <HAL_TIM_Encoder_MspInit+0x1d8>)
 8001fbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001fc0:	4a49      	ldr	r2, [pc, #292]	@ (80020e8 <HAL_TIM_Encoder_MspInit+0x1d8>)
 8001fc2:	f043 0302 	orr.w	r3, r3, #2
 8001fc6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001fca:	4b47      	ldr	r3, [pc, #284]	@ (80020e8 <HAL_TIM_Encoder_MspInit+0x1d8>)
 8001fcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001fd0:	f003 0302 	and.w	r3, r3, #2
 8001fd4:	61fb      	str	r3, [r7, #28]
 8001fd6:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = ENC4_A_Pin|ENC4_B_Pin;
 8001fd8:	2330      	movs	r3, #48	@ 0x30
 8001fda:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fdc:	2302      	movs	r3, #2
 8001fde:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001fe8:	2302      	movs	r3, #2
 8001fea:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fec:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001ff0:	4619      	mov	r1, r3
 8001ff2:	4840      	ldr	r0, [pc, #256]	@ (80020f4 <HAL_TIM_Encoder_MspInit+0x1e4>)
 8001ff4:	f004 f812 	bl	800601c <HAL_GPIO_Init>
}
 8001ff8:	e06f      	b.n	80020da <HAL_TIM_Encoder_MspInit+0x1ca>
  else if(tim_encoderHandle->Instance==TIM4)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4a3e      	ldr	r2, [pc, #248]	@ (80020f8 <HAL_TIM_Encoder_MspInit+0x1e8>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d137      	bne.n	8002074 <HAL_TIM_Encoder_MspInit+0x164>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002004:	4b38      	ldr	r3, [pc, #224]	@ (80020e8 <HAL_TIM_Encoder_MspInit+0x1d8>)
 8002006:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800200a:	4a37      	ldr	r2, [pc, #220]	@ (80020e8 <HAL_TIM_Encoder_MspInit+0x1d8>)
 800200c:	f043 0304 	orr.w	r3, r3, #4
 8002010:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002014:	4b34      	ldr	r3, [pc, #208]	@ (80020e8 <HAL_TIM_Encoder_MspInit+0x1d8>)
 8002016:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800201a:	f003 0304 	and.w	r3, r3, #4
 800201e:	61bb      	str	r3, [r7, #24]
 8002020:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002022:	4b31      	ldr	r3, [pc, #196]	@ (80020e8 <HAL_TIM_Encoder_MspInit+0x1d8>)
 8002024:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002028:	4a2f      	ldr	r2, [pc, #188]	@ (80020e8 <HAL_TIM_Encoder_MspInit+0x1d8>)
 800202a:	f043 0308 	orr.w	r3, r3, #8
 800202e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002032:	4b2d      	ldr	r3, [pc, #180]	@ (80020e8 <HAL_TIM_Encoder_MspInit+0x1d8>)
 8002034:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002038:	f003 0308 	and.w	r3, r3, #8
 800203c:	617b      	str	r3, [r7, #20]
 800203e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ENC1_A_Pin|ENC1_B_Pin;
 8002040:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8002044:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002046:	2302      	movs	r3, #2
 8002048:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800204a:	2300      	movs	r3, #0
 800204c:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800204e:	2300      	movs	r3, #0
 8002050:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002052:	2302      	movs	r3, #2
 8002054:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002056:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800205a:	4619      	mov	r1, r3
 800205c:	4827      	ldr	r0, [pc, #156]	@ (80020fc <HAL_TIM_Encoder_MspInit+0x1ec>)
 800205e:	f003 ffdd 	bl	800601c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002062:	2200      	movs	r2, #0
 8002064:	2100      	movs	r1, #0
 8002066:	201e      	movs	r0, #30
 8002068:	f001 fe47 	bl	8003cfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800206c:	201e      	movs	r0, #30
 800206e:	f001 fe5e 	bl	8003d2e <HAL_NVIC_EnableIRQ>
}
 8002072:	e032      	b.n	80020da <HAL_TIM_Encoder_MspInit+0x1ca>
  else if(tim_encoderHandle->Instance==TIM8)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a21      	ldr	r2, [pc, #132]	@ (8002100 <HAL_TIM_Encoder_MspInit+0x1f0>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d12d      	bne.n	80020da <HAL_TIM_Encoder_MspInit+0x1ca>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800207e:	4b1a      	ldr	r3, [pc, #104]	@ (80020e8 <HAL_TIM_Encoder_MspInit+0x1d8>)
 8002080:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002084:	4a18      	ldr	r2, [pc, #96]	@ (80020e8 <HAL_TIM_Encoder_MspInit+0x1d8>)
 8002086:	f043 0302 	orr.w	r3, r3, #2
 800208a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800208e:	4b16      	ldr	r3, [pc, #88]	@ (80020e8 <HAL_TIM_Encoder_MspInit+0x1d8>)
 8002090:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002094:	f003 0302 	and.w	r3, r3, #2
 8002098:	613b      	str	r3, [r7, #16]
 800209a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800209c:	4b12      	ldr	r3, [pc, #72]	@ (80020e8 <HAL_TIM_Encoder_MspInit+0x1d8>)
 800209e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020a2:	4a11      	ldr	r2, [pc, #68]	@ (80020e8 <HAL_TIM_Encoder_MspInit+0x1d8>)
 80020a4:	f043 0304 	orr.w	r3, r3, #4
 80020a8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80020ac:	4b0e      	ldr	r3, [pc, #56]	@ (80020e8 <HAL_TIM_Encoder_MspInit+0x1d8>)
 80020ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020b2:	f003 0304 	and.w	r3, r3, #4
 80020b6:	60fb      	str	r3, [r7, #12]
 80020b8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ENC3_A_Pin|ENC3_B_Pin;
 80020ba:	23c0      	movs	r3, #192	@ 0xc0
 80020bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020be:	2302      	movs	r3, #2
 80020c0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c2:	2300      	movs	r3, #0
 80020c4:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020c6:	2300      	movs	r3, #0
 80020c8:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80020ca:	2303      	movs	r3, #3
 80020cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020ce:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80020d2:	4619      	mov	r1, r3
 80020d4:	480b      	ldr	r0, [pc, #44]	@ (8002104 <HAL_TIM_Encoder_MspInit+0x1f4>)
 80020d6:	f003 ffa1 	bl	800601c <HAL_GPIO_Init>
}
 80020da:	bf00      	nop
 80020dc:	3740      	adds	r7, #64	@ 0x40
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	40010000 	.word	0x40010000
 80020e8:	58024400 	.word	0x58024400
 80020ec:	58021000 	.word	0x58021000
 80020f0:	40000400 	.word	0x40000400
 80020f4:	58020400 	.word	0x58020400
 80020f8:	40000800 	.word	0x40000800
 80020fc:	58020c00 	.word	0x58020c00
 8002100:	40010400 	.word	0x40010400
 8002104:	58020800 	.word	0x58020800

08002108 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b084      	sub	sp, #16
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002118:	f040 8082 	bne.w	8002220 <HAL_TIM_PWM_MspInit+0x118>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800211c:	4b86      	ldr	r3, [pc, #536]	@ (8002338 <HAL_TIM_PWM_MspInit+0x230>)
 800211e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002122:	4a85      	ldr	r2, [pc, #532]	@ (8002338 <HAL_TIM_PWM_MspInit+0x230>)
 8002124:	f043 0301 	orr.w	r3, r3, #1
 8002128:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800212c:	4b82      	ldr	r3, [pc, #520]	@ (8002338 <HAL_TIM_PWM_MspInit+0x230>)
 800212e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002132:	f003 0301 	and.w	r3, r3, #1
 8002136:	60fb      	str	r3, [r7, #12]
 8002138:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 DMA Init */
    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Stream5;
 800213a:	4b80      	ldr	r3, [pc, #512]	@ (800233c <HAL_TIM_PWM_MspInit+0x234>)
 800213c:	4a80      	ldr	r2, [pc, #512]	@ (8002340 <HAL_TIM_PWM_MspInit+0x238>)
 800213e:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Request = DMA_REQUEST_TIM2_CH1;
 8002140:	4b7e      	ldr	r3, [pc, #504]	@ (800233c <HAL_TIM_PWM_MspInit+0x234>)
 8002142:	2212      	movs	r2, #18
 8002144:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002146:	4b7d      	ldr	r3, [pc, #500]	@ (800233c <HAL_TIM_PWM_MspInit+0x234>)
 8002148:	2240      	movs	r2, #64	@ 0x40
 800214a:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800214c:	4b7b      	ldr	r3, [pc, #492]	@ (800233c <HAL_TIM_PWM_MspInit+0x234>)
 800214e:	2200      	movs	r2, #0
 8002150:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8002152:	4b7a      	ldr	r3, [pc, #488]	@ (800233c <HAL_TIM_PWM_MspInit+0x234>)
 8002154:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002158:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800215a:	4b78      	ldr	r3, [pc, #480]	@ (800233c <HAL_TIM_PWM_MspInit+0x234>)
 800215c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002160:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002162:	4b76      	ldr	r3, [pc, #472]	@ (800233c <HAL_TIM_PWM_MspInit+0x234>)
 8002164:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002168:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Mode = DMA_NORMAL;
 800216a:	4b74      	ldr	r3, [pc, #464]	@ (800233c <HAL_TIM_PWM_MspInit+0x234>)
 800216c:	2200      	movs	r2, #0
 800216e:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 8002170:	4b72      	ldr	r3, [pc, #456]	@ (800233c <HAL_TIM_PWM_MspInit+0x234>)
 8002172:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002176:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002178:	4b70      	ldr	r3, [pc, #448]	@ (800233c <HAL_TIM_PWM_MspInit+0x234>)
 800217a:	2204      	movs	r2, #4
 800217c:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_tim2_ch1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 800217e:	4b6f      	ldr	r3, [pc, #444]	@ (800233c <HAL_TIM_PWM_MspInit+0x234>)
 8002180:	2200      	movs	r2, #0
 8002182:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_tim2_ch1.Init.MemBurst = DMA_MBURST_SINGLE;
 8002184:	4b6d      	ldr	r3, [pc, #436]	@ (800233c <HAL_TIM_PWM_MspInit+0x234>)
 8002186:	2200      	movs	r2, #0
 8002188:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_tim2_ch1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800218a:	4b6c      	ldr	r3, [pc, #432]	@ (800233c <HAL_TIM_PWM_MspInit+0x234>)
 800218c:	2200      	movs	r2, #0
 800218e:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 8002190:	486a      	ldr	r0, [pc, #424]	@ (800233c <HAL_TIM_PWM_MspInit+0x234>)
 8002192:	f001 fdfb 	bl	8003d8c <HAL_DMA_Init>
 8002196:	4603      	mov	r3, r0
 8002198:	2b00      	cmp	r3, #0
 800219a:	d001      	beq.n	80021a0 <HAL_TIM_PWM_MspInit+0x98>
    {
      Error_Handler();
 800219c:	f7ff f8ab 	bl	80012f6 <Error_Handler>
    }

    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	4a66      	ldr	r2, [pc, #408]	@ (800233c <HAL_TIM_PWM_MspInit+0x234>)
 80021a4:	625a      	str	r2, [r3, #36]	@ 0x24
 80021a6:	4a65      	ldr	r2, [pc, #404]	@ (800233c <HAL_TIM_PWM_MspInit+0x234>)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6393      	str	r3, [r2, #56]	@ 0x38

    /* TIM2_CH3 Init */
    hdma_tim2_ch3.Instance = DMA1_Stream1;
 80021ac:	4b65      	ldr	r3, [pc, #404]	@ (8002344 <HAL_TIM_PWM_MspInit+0x23c>)
 80021ae:	4a66      	ldr	r2, [pc, #408]	@ (8002348 <HAL_TIM_PWM_MspInit+0x240>)
 80021b0:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch3.Init.Request = DMA_REQUEST_TIM2_CH3;
 80021b2:	4b64      	ldr	r3, [pc, #400]	@ (8002344 <HAL_TIM_PWM_MspInit+0x23c>)
 80021b4:	2214      	movs	r2, #20
 80021b6:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80021b8:	4b62      	ldr	r3, [pc, #392]	@ (8002344 <HAL_TIM_PWM_MspInit+0x23c>)
 80021ba:	2240      	movs	r2, #64	@ 0x40
 80021bc:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 80021be:	4b61      	ldr	r3, [pc, #388]	@ (8002344 <HAL_TIM_PWM_MspInit+0x23c>)
 80021c0:	2200      	movs	r2, #0
 80021c2:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch3.Init.MemInc = DMA_MINC_ENABLE;
 80021c4:	4b5f      	ldr	r3, [pc, #380]	@ (8002344 <HAL_TIM_PWM_MspInit+0x23c>)
 80021c6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80021ca:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80021cc:	4b5d      	ldr	r3, [pc, #372]	@ (8002344 <HAL_TIM_PWM_MspInit+0x23c>)
 80021ce:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80021d2:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80021d4:	4b5b      	ldr	r3, [pc, #364]	@ (8002344 <HAL_TIM_PWM_MspInit+0x23c>)
 80021d6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80021da:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch3.Init.Mode = DMA_NORMAL;
 80021dc:	4b59      	ldr	r3, [pc, #356]	@ (8002344 <HAL_TIM_PWM_MspInit+0x23c>)
 80021de:	2200      	movs	r2, #0
 80021e0:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch3.Init.Priority = DMA_PRIORITY_HIGH;
 80021e2:	4b58      	ldr	r3, [pc, #352]	@ (8002344 <HAL_TIM_PWM_MspInit+0x23c>)
 80021e4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80021e8:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch3.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80021ea:	4b56      	ldr	r3, [pc, #344]	@ (8002344 <HAL_TIM_PWM_MspInit+0x23c>)
 80021ec:	2204      	movs	r2, #4
 80021ee:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_tim2_ch3.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 80021f0:	4b54      	ldr	r3, [pc, #336]	@ (8002344 <HAL_TIM_PWM_MspInit+0x23c>)
 80021f2:	2200      	movs	r2, #0
 80021f4:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_tim2_ch3.Init.MemBurst = DMA_MBURST_SINGLE;
 80021f6:	4b53      	ldr	r3, [pc, #332]	@ (8002344 <HAL_TIM_PWM_MspInit+0x23c>)
 80021f8:	2200      	movs	r2, #0
 80021fa:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_tim2_ch3.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80021fc:	4b51      	ldr	r3, [pc, #324]	@ (8002344 <HAL_TIM_PWM_MspInit+0x23c>)
 80021fe:	2200      	movs	r2, #0
 8002200:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_tim2_ch3) != HAL_OK)
 8002202:	4850      	ldr	r0, [pc, #320]	@ (8002344 <HAL_TIM_PWM_MspInit+0x23c>)
 8002204:	f001 fdc2 	bl	8003d8c <HAL_DMA_Init>
 8002208:	4603      	mov	r3, r0
 800220a:	2b00      	cmp	r3, #0
 800220c:	d001      	beq.n	8002212 <HAL_TIM_PWM_MspInit+0x10a>
    {
      Error_Handler();
 800220e:	f7ff f872 	bl	80012f6 <Error_Handler>
    }

    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC3],hdma_tim2_ch3);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	4a4b      	ldr	r2, [pc, #300]	@ (8002344 <HAL_TIM_PWM_MspInit+0x23c>)
 8002216:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002218:	4a4a      	ldr	r2, [pc, #296]	@ (8002344 <HAL_TIM_PWM_MspInit+0x23c>)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 800221e:	e086      	b.n	800232e <HAL_TIM_PWM_MspInit+0x226>
  else if(tim_pwmHandle->Instance==TIM5)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a49      	ldr	r2, [pc, #292]	@ (800234c <HAL_TIM_PWM_MspInit+0x244>)
 8002226:	4293      	cmp	r3, r2
 8002228:	f040 8081 	bne.w	800232e <HAL_TIM_PWM_MspInit+0x226>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800222c:	4b42      	ldr	r3, [pc, #264]	@ (8002338 <HAL_TIM_PWM_MspInit+0x230>)
 800222e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002232:	4a41      	ldr	r2, [pc, #260]	@ (8002338 <HAL_TIM_PWM_MspInit+0x230>)
 8002234:	f043 0308 	orr.w	r3, r3, #8
 8002238:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800223c:	4b3e      	ldr	r3, [pc, #248]	@ (8002338 <HAL_TIM_PWM_MspInit+0x230>)
 800223e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002242:	f003 0308 	and.w	r3, r3, #8
 8002246:	60bb      	str	r3, [r7, #8]
 8002248:	68bb      	ldr	r3, [r7, #8]
    hdma_tim5_ch4.Instance = DMA1_Stream3;
 800224a:	4b41      	ldr	r3, [pc, #260]	@ (8002350 <HAL_TIM_PWM_MspInit+0x248>)
 800224c:	4a41      	ldr	r2, [pc, #260]	@ (8002354 <HAL_TIM_PWM_MspInit+0x24c>)
 800224e:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch4.Init.Request = DMA_REQUEST_TIM5_CH4;
 8002250:	4b3f      	ldr	r3, [pc, #252]	@ (8002350 <HAL_TIM_PWM_MspInit+0x248>)
 8002252:	223a      	movs	r2, #58	@ 0x3a
 8002254:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002256:	4b3e      	ldr	r3, [pc, #248]	@ (8002350 <HAL_TIM_PWM_MspInit+0x248>)
 8002258:	2240      	movs	r2, #64	@ 0x40
 800225a:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 800225c:	4b3c      	ldr	r3, [pc, #240]	@ (8002350 <HAL_TIM_PWM_MspInit+0x248>)
 800225e:	2200      	movs	r2, #0
 8002260:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch4.Init.MemInc = DMA_MINC_ENABLE;
 8002262:	4b3b      	ldr	r3, [pc, #236]	@ (8002350 <HAL_TIM_PWM_MspInit+0x248>)
 8002264:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002268:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800226a:	4b39      	ldr	r3, [pc, #228]	@ (8002350 <HAL_TIM_PWM_MspInit+0x248>)
 800226c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002270:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002272:	4b37      	ldr	r3, [pc, #220]	@ (8002350 <HAL_TIM_PWM_MspInit+0x248>)
 8002274:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002278:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch4.Init.Mode = DMA_NORMAL;
 800227a:	4b35      	ldr	r3, [pc, #212]	@ (8002350 <HAL_TIM_PWM_MspInit+0x248>)
 800227c:	2200      	movs	r2, #0
 800227e:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch4.Init.Priority = DMA_PRIORITY_HIGH;
 8002280:	4b33      	ldr	r3, [pc, #204]	@ (8002350 <HAL_TIM_PWM_MspInit+0x248>)
 8002282:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002286:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch4.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002288:	4b31      	ldr	r3, [pc, #196]	@ (8002350 <HAL_TIM_PWM_MspInit+0x248>)
 800228a:	2204      	movs	r2, #4
 800228c:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_tim5_ch4.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 800228e:	4b30      	ldr	r3, [pc, #192]	@ (8002350 <HAL_TIM_PWM_MspInit+0x248>)
 8002290:	2200      	movs	r2, #0
 8002292:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_tim5_ch4.Init.MemBurst = DMA_MBURST_SINGLE;
 8002294:	4b2e      	ldr	r3, [pc, #184]	@ (8002350 <HAL_TIM_PWM_MspInit+0x248>)
 8002296:	2200      	movs	r2, #0
 8002298:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_tim5_ch4.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800229a:	4b2d      	ldr	r3, [pc, #180]	@ (8002350 <HAL_TIM_PWM_MspInit+0x248>)
 800229c:	2200      	movs	r2, #0
 800229e:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_tim5_ch4) != HAL_OK)
 80022a0:	482b      	ldr	r0, [pc, #172]	@ (8002350 <HAL_TIM_PWM_MspInit+0x248>)
 80022a2:	f001 fd73 	bl	8003d8c <HAL_DMA_Init>
 80022a6:	4603      	mov	r3, r0
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d001      	beq.n	80022b0 <HAL_TIM_PWM_MspInit+0x1a8>
      Error_Handler();
 80022ac:	f7ff f823 	bl	80012f6 <Error_Handler>
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC4],hdma_tim5_ch4);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	4a27      	ldr	r2, [pc, #156]	@ (8002350 <HAL_TIM_PWM_MspInit+0x248>)
 80022b4:	631a      	str	r2, [r3, #48]	@ 0x30
 80022b6:	4a26      	ldr	r2, [pc, #152]	@ (8002350 <HAL_TIM_PWM_MspInit+0x248>)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_tim5_ch2.Instance = DMA1_Stream4;
 80022bc:	4b26      	ldr	r3, [pc, #152]	@ (8002358 <HAL_TIM_PWM_MspInit+0x250>)
 80022be:	4a27      	ldr	r2, [pc, #156]	@ (800235c <HAL_TIM_PWM_MspInit+0x254>)
 80022c0:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch2.Init.Request = DMA_REQUEST_TIM5_CH2;
 80022c2:	4b25      	ldr	r3, [pc, #148]	@ (8002358 <HAL_TIM_PWM_MspInit+0x250>)
 80022c4:	2238      	movs	r2, #56	@ 0x38
 80022c6:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80022c8:	4b23      	ldr	r3, [pc, #140]	@ (8002358 <HAL_TIM_PWM_MspInit+0x250>)
 80022ca:	2240      	movs	r2, #64	@ 0x40
 80022cc:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 80022ce:	4b22      	ldr	r3, [pc, #136]	@ (8002358 <HAL_TIM_PWM_MspInit+0x250>)
 80022d0:	2200      	movs	r2, #0
 80022d2:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch2.Init.MemInc = DMA_MINC_ENABLE;
 80022d4:	4b20      	ldr	r3, [pc, #128]	@ (8002358 <HAL_TIM_PWM_MspInit+0x250>)
 80022d6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80022da:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80022dc:	4b1e      	ldr	r3, [pc, #120]	@ (8002358 <HAL_TIM_PWM_MspInit+0x250>)
 80022de:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80022e2:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80022e4:	4b1c      	ldr	r3, [pc, #112]	@ (8002358 <HAL_TIM_PWM_MspInit+0x250>)
 80022e6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80022ea:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch2.Init.Mode = DMA_NORMAL;
 80022ec:	4b1a      	ldr	r3, [pc, #104]	@ (8002358 <HAL_TIM_PWM_MspInit+0x250>)
 80022ee:	2200      	movs	r2, #0
 80022f0:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch2.Init.Priority = DMA_PRIORITY_HIGH;
 80022f2:	4b19      	ldr	r3, [pc, #100]	@ (8002358 <HAL_TIM_PWM_MspInit+0x250>)
 80022f4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80022f8:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch2.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80022fa:	4b17      	ldr	r3, [pc, #92]	@ (8002358 <HAL_TIM_PWM_MspInit+0x250>)
 80022fc:	2204      	movs	r2, #4
 80022fe:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_tim5_ch2.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 8002300:	4b15      	ldr	r3, [pc, #84]	@ (8002358 <HAL_TIM_PWM_MspInit+0x250>)
 8002302:	2200      	movs	r2, #0
 8002304:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_tim5_ch2.Init.MemBurst = DMA_MBURST_SINGLE;
 8002306:	4b14      	ldr	r3, [pc, #80]	@ (8002358 <HAL_TIM_PWM_MspInit+0x250>)
 8002308:	2200      	movs	r2, #0
 800230a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_tim5_ch2.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800230c:	4b12      	ldr	r3, [pc, #72]	@ (8002358 <HAL_TIM_PWM_MspInit+0x250>)
 800230e:	2200      	movs	r2, #0
 8002310:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_tim5_ch2) != HAL_OK)
 8002312:	4811      	ldr	r0, [pc, #68]	@ (8002358 <HAL_TIM_PWM_MspInit+0x250>)
 8002314:	f001 fd3a 	bl	8003d8c <HAL_DMA_Init>
 8002318:	4603      	mov	r3, r0
 800231a:	2b00      	cmp	r3, #0
 800231c:	d001      	beq.n	8002322 <HAL_TIM_PWM_MspInit+0x21a>
      Error_Handler();
 800231e:	f7fe ffea 	bl	80012f6 <Error_Handler>
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC2],hdma_tim5_ch2);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	4a0c      	ldr	r2, [pc, #48]	@ (8002358 <HAL_TIM_PWM_MspInit+0x250>)
 8002326:	629a      	str	r2, [r3, #40]	@ 0x28
 8002328:	4a0b      	ldr	r2, [pc, #44]	@ (8002358 <HAL_TIM_PWM_MspInit+0x250>)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6393      	str	r3, [r2, #56]	@ 0x38
}
 800232e:	bf00      	nop
 8002330:	3710      	adds	r7, #16
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}
 8002336:	bf00      	nop
 8002338:	58024400 	.word	0x58024400
 800233c:	240007c4 	.word	0x240007c4
 8002340:	40020088 	.word	0x40020088
 8002344:	2400083c 	.word	0x2400083c
 8002348:	40020028 	.word	0x40020028
 800234c:	40000c00 	.word	0x40000c00
 8002350:	240008b4 	.word	0x240008b4
 8002354:	40020058 	.word	0x40020058
 8002358:	2400092c 	.word	0x2400092c
 800235c:	40020070 	.word	0x40020070

08002360 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b084      	sub	sp, #16
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM15)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a0e      	ldr	r2, [pc, #56]	@ (80023a8 <HAL_TIM_Base_MspInit+0x48>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d116      	bne.n	80023a0 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* TIM15 clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 8002372:	4b0e      	ldr	r3, [pc, #56]	@ (80023ac <HAL_TIM_Base_MspInit+0x4c>)
 8002374:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002378:	4a0c      	ldr	r2, [pc, #48]	@ (80023ac <HAL_TIM_Base_MspInit+0x4c>)
 800237a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800237e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002382:	4b0a      	ldr	r3, [pc, #40]	@ (80023ac <HAL_TIM_Base_MspInit+0x4c>)
 8002384:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002388:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800238c:	60fb      	str	r3, [r7, #12]
 800238e:	68fb      	ldr	r3, [r7, #12]

    /* TIM15 interrupt Init */
    HAL_NVIC_SetPriority(TIM15_IRQn, 0, 0);
 8002390:	2200      	movs	r2, #0
 8002392:	2100      	movs	r1, #0
 8002394:	2074      	movs	r0, #116	@ 0x74
 8002396:	f001 fcb0 	bl	8003cfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
 800239a:	2074      	movs	r0, #116	@ 0x74
 800239c:	f001 fcc7 	bl	8003d2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 80023a0:	bf00      	nop
 80023a2:	3710      	adds	r7, #16
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd80      	pop	{r7, pc}
 80023a8:	40014000 	.word	0x40014000
 80023ac:	58024400 	.word	0x58024400

080023b0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b08a      	sub	sp, #40	@ 0x28
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023b8:	f107 0314 	add.w	r3, r7, #20
 80023bc:	2200      	movs	r2, #0
 80023be:	601a      	str	r2, [r3, #0]
 80023c0:	605a      	str	r2, [r3, #4]
 80023c2:	609a      	str	r2, [r3, #8]
 80023c4:	60da      	str	r2, [r3, #12]
 80023c6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80023d0:	d11f      	bne.n	8002412 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023d2:	4b24      	ldr	r3, [pc, #144]	@ (8002464 <HAL_TIM_MspPostInit+0xb4>)
 80023d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80023d8:	4a22      	ldr	r2, [pc, #136]	@ (8002464 <HAL_TIM_MspPostInit+0xb4>)
 80023da:	f043 0301 	orr.w	r3, r3, #1
 80023de:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80023e2:	4b20      	ldr	r3, [pc, #128]	@ (8002464 <HAL_TIM_MspPostInit+0xb4>)
 80023e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80023e8:	f003 0301 	and.w	r3, r3, #1
 80023ec:	613b      	str	r3, [r7, #16]
 80023ee:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = M3_Pin|M2_Pin;
 80023f0:	2305      	movs	r3, #5
 80023f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023f4:	2302      	movs	r3, #2
 80023f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023f8:	2300      	movs	r3, #0
 80023fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023fc:	2300      	movs	r3, #0
 80023fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002400:	2301      	movs	r3, #1
 8002402:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002404:	f107 0314 	add.w	r3, r7, #20
 8002408:	4619      	mov	r1, r3
 800240a:	4817      	ldr	r0, [pc, #92]	@ (8002468 <HAL_TIM_MspPostInit+0xb8>)
 800240c:	f003 fe06 	bl	800601c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8002410:	e023      	b.n	800245a <HAL_TIM_MspPostInit+0xaa>
  else if(timHandle->Instance==TIM5)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a15      	ldr	r2, [pc, #84]	@ (800246c <HAL_TIM_MspPostInit+0xbc>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d11e      	bne.n	800245a <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800241c:	4b11      	ldr	r3, [pc, #68]	@ (8002464 <HAL_TIM_MspPostInit+0xb4>)
 800241e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002422:	4a10      	ldr	r2, [pc, #64]	@ (8002464 <HAL_TIM_MspPostInit+0xb4>)
 8002424:	f043 0301 	orr.w	r3, r3, #1
 8002428:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800242c:	4b0d      	ldr	r3, [pc, #52]	@ (8002464 <HAL_TIM_MspPostInit+0xb4>)
 800242e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002432:	f003 0301 	and.w	r3, r3, #1
 8002436:	60fb      	str	r3, [r7, #12]
 8002438:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = M4_Pin|M1_Pin;
 800243a:	230a      	movs	r3, #10
 800243c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800243e:	2302      	movs	r3, #2
 8002440:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002442:	2300      	movs	r3, #0
 8002444:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002446:	2300      	movs	r3, #0
 8002448:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800244a:	2302      	movs	r3, #2
 800244c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800244e:	f107 0314 	add.w	r3, r7, #20
 8002452:	4619      	mov	r1, r3
 8002454:	4804      	ldr	r0, [pc, #16]	@ (8002468 <HAL_TIM_MspPostInit+0xb8>)
 8002456:	f003 fde1 	bl	800601c <HAL_GPIO_Init>
}
 800245a:	bf00      	nop
 800245c:	3728      	adds	r7, #40	@ 0x28
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}
 8002462:	bf00      	nop
 8002464:	58024400 	.word	0x58024400
 8002468:	58020000 	.word	0x58020000
 800246c:	40000c00 	.word	0x40000c00

08002470 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002470:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80024a8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002474:	f7fe f904 	bl	8000680 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002478:	480c      	ldr	r0, [pc, #48]	@ (80024ac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800247a:	490d      	ldr	r1, [pc, #52]	@ (80024b0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800247c:	4a0d      	ldr	r2, [pc, #52]	@ (80024b4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800247e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002480:	e002      	b.n	8002488 <LoopCopyDataInit>

08002482 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002482:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002484:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002486:	3304      	adds	r3, #4

08002488 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002488:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800248a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800248c:	d3f9      	bcc.n	8002482 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800248e:	4a0a      	ldr	r2, [pc, #40]	@ (80024b8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002490:	4c0a      	ldr	r4, [pc, #40]	@ (80024bc <LoopFillZerobss+0x22>)
  movs r3, #0
 8002492:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002494:	e001      	b.n	800249a <LoopFillZerobss>

08002496 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002496:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002498:	3204      	adds	r2, #4

0800249a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800249a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800249c:	d3fb      	bcc.n	8002496 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800249e:	f010 fa31 	bl	8012904 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80024a2:	f7fe fd21 	bl	8000ee8 <main>
  bx  lr
 80024a6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80024a8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80024ac:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80024b0:	240002f4 	.word	0x240002f4
  ldr r2, =_sidata
 80024b4:	08014dc0 	.word	0x08014dc0
  ldr r2, =_sbss
 80024b8:	240002f4 	.word	0x240002f4
  ldr r4, =_ebss
 80024bc:	24002778 	.word	0x24002778

080024c0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80024c0:	e7fe      	b.n	80024c0 <ADC3_IRQHandler>
	...

080024c4 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b08c      	sub	sp, #48	@ 0x30
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	4603      	mov	r3, r0
 80024cc:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80024ce:	2300      	movs	r3, #0
 80024d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 80024d2:	79fb      	ldrb	r3, [r7, #7]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d009      	beq.n	80024ec <BSP_LED_Init+0x28>
 80024d8:	79fb      	ldrb	r3, [r7, #7]
 80024da:	2b01      	cmp	r3, #1
 80024dc:	d006      	beq.n	80024ec <BSP_LED_Init+0x28>
 80024de:	79fb      	ldrb	r3, [r7, #7]
 80024e0:	2b02      	cmp	r3, #2
 80024e2:	d003      	beq.n	80024ec <BSP_LED_Init+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80024e4:	f06f 0301 	mvn.w	r3, #1
 80024e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80024ea:	e055      	b.n	8002598 <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if(Led == LED1)
 80024ec:	79fb      	ldrb	r3, [r7, #7]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d10f      	bne.n	8002512 <BSP_LED_Init+0x4e>
    {
      LED1_GPIO_CLK_ENABLE();
 80024f2:	4b2c      	ldr	r3, [pc, #176]	@ (80025a4 <BSP_LED_Init+0xe0>)
 80024f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80024f8:	4a2a      	ldr	r2, [pc, #168]	@ (80025a4 <BSP_LED_Init+0xe0>)
 80024fa:	f043 0302 	orr.w	r3, r3, #2
 80024fe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002502:	4b28      	ldr	r3, [pc, #160]	@ (80025a4 <BSP_LED_Init+0xe0>)
 8002504:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002508:	f003 0302 	and.w	r3, r3, #2
 800250c:	617b      	str	r3, [r7, #20]
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	e021      	b.n	8002556 <BSP_LED_Init+0x92>
    }
    else if(Led == LED2)
 8002512:	79fb      	ldrb	r3, [r7, #7]
 8002514:	2b01      	cmp	r3, #1
 8002516:	d10f      	bne.n	8002538 <BSP_LED_Init+0x74>
    {
      LED2_GPIO_CLK_ENABLE();
 8002518:	4b22      	ldr	r3, [pc, #136]	@ (80025a4 <BSP_LED_Init+0xe0>)
 800251a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800251e:	4a21      	ldr	r2, [pc, #132]	@ (80025a4 <BSP_LED_Init+0xe0>)
 8002520:	f043 0310 	orr.w	r3, r3, #16
 8002524:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002528:	4b1e      	ldr	r3, [pc, #120]	@ (80025a4 <BSP_LED_Init+0xe0>)
 800252a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800252e:	f003 0310 	and.w	r3, r3, #16
 8002532:	613b      	str	r3, [r7, #16]
 8002534:	693b      	ldr	r3, [r7, #16]
 8002536:	e00e      	b.n	8002556 <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 8002538:	4b1a      	ldr	r3, [pc, #104]	@ (80025a4 <BSP_LED_Init+0xe0>)
 800253a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800253e:	4a19      	ldr	r2, [pc, #100]	@ (80025a4 <BSP_LED_Init+0xe0>)
 8002540:	f043 0302 	orr.w	r3, r3, #2
 8002544:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002548:	4b16      	ldr	r3, [pc, #88]	@ (80025a4 <BSP_LED_Init+0xe0>)
 800254a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800254e:	f003 0302 	and.w	r3, r3, #2
 8002552:	60fb      	str	r3, [r7, #12]
 8002554:	68fb      	ldr	r3, [r7, #12]
    }
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 8002556:	79fb      	ldrb	r3, [r7, #7]
 8002558:	4a13      	ldr	r2, [pc, #76]	@ (80025a8 <BSP_LED_Init+0xe4>)
 800255a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800255e:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8002560:	2301      	movs	r3, #1
 8002562:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8002564:	2300      	movs	r3, #0
 8002566:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002568:	2303      	movs	r3, #3
 800256a:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 800256c:	79fb      	ldrb	r3, [r7, #7]
 800256e:	4a0f      	ldr	r2, [pc, #60]	@ (80025ac <BSP_LED_Init+0xe8>)
 8002570:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002574:	f107 0218 	add.w	r2, r7, #24
 8002578:	4611      	mov	r1, r2
 800257a:	4618      	mov	r0, r3
 800257c:	f003 fd4e 	bl	800601c <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8002580:	79fb      	ldrb	r3, [r7, #7]
 8002582:	4a0a      	ldr	r2, [pc, #40]	@ (80025ac <BSP_LED_Init+0xe8>)
 8002584:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002588:	79fb      	ldrb	r3, [r7, #7]
 800258a:	4a07      	ldr	r2, [pc, #28]	@ (80025a8 <BSP_LED_Init+0xe4>)
 800258c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002590:	2200      	movs	r2, #0
 8002592:	4619      	mov	r1, r3
 8002594:	f003 fef2 	bl	800637c <HAL_GPIO_WritePin>
  }

  return ret;
 8002598:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800259a:	4618      	mov	r0, r3
 800259c:	3730      	adds	r7, #48	@ 0x30
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	bf00      	nop
 80025a4:	58024400 	.word	0x58024400
 80025a8:	08014a08 	.word	0x08014a08
 80025ac:	24000018 	.word	0x24000018

080025b0 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b088      	sub	sp, #32
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	4603      	mov	r3, r0
 80025b8:	460a      	mov	r2, r1
 80025ba:	71fb      	strb	r3, [r7, #7]
 80025bc:	4613      	mov	r3, r2
 80025be:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 80025c0:	4b2e      	ldr	r3, [pc, #184]	@ (800267c <BSP_PB_Init+0xcc>)
 80025c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80025c6:	4a2d      	ldr	r2, [pc, #180]	@ (800267c <BSP_PB_Init+0xcc>)
 80025c8:	f043 0304 	orr.w	r3, r3, #4
 80025cc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80025d0:	4b2a      	ldr	r3, [pc, #168]	@ (800267c <BSP_PB_Init+0xcc>)
 80025d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80025d6:	f003 0304 	and.w	r3, r3, #4
 80025da:	60bb      	str	r3, [r7, #8]
 80025dc:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 80025de:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80025e2:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 80025e4:	2302      	movs	r3, #2
 80025e6:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80025e8:	2302      	movs	r3, #2
 80025ea:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 80025ec:	79bb      	ldrb	r3, [r7, #6]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d10c      	bne.n	800260c <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 80025f2:	2300      	movs	r3, #0
 80025f4:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 80025f6:	79fb      	ldrb	r3, [r7, #7]
 80025f8:	4a21      	ldr	r2, [pc, #132]	@ (8002680 <BSP_PB_Init+0xd0>)
 80025fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025fe:	f107 020c 	add.w	r2, r7, #12
 8002602:	4611      	mov	r1, r2
 8002604:	4618      	mov	r0, r3
 8002606:	f003 fd09 	bl	800601c <HAL_GPIO_Init>
 800260a:	e031      	b.n	8002670 <BSP_PB_Init+0xc0>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 800260c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002610:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8002612:	79fb      	ldrb	r3, [r7, #7]
 8002614:	4a1a      	ldr	r2, [pc, #104]	@ (8002680 <BSP_PB_Init+0xd0>)
 8002616:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800261a:	f107 020c 	add.w	r2, r7, #12
 800261e:	4611      	mov	r1, r2
 8002620:	4618      	mov	r0, r3
 8002622:	f003 fcfb 	bl	800601c <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8002626:	79fb      	ldrb	r3, [r7, #7]
 8002628:	00db      	lsls	r3, r3, #3
 800262a:	4a16      	ldr	r2, [pc, #88]	@ (8002684 <BSP_PB_Init+0xd4>)
 800262c:	441a      	add	r2, r3
 800262e:	79fb      	ldrb	r3, [r7, #7]
 8002630:	4915      	ldr	r1, [pc, #84]	@ (8002688 <BSP_PB_Init+0xd8>)
 8002632:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002636:	4619      	mov	r1, r3
 8002638:	4610      	mov	r0, r2
 800263a:	f003 fc9e 	bl	8005f7a <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 800263e:	79fb      	ldrb	r3, [r7, #7]
 8002640:	00db      	lsls	r3, r3, #3
 8002642:	4a10      	ldr	r2, [pc, #64]	@ (8002684 <BSP_PB_Init+0xd4>)
 8002644:	1898      	adds	r0, r3, r2
 8002646:	79fb      	ldrb	r3, [r7, #7]
 8002648:	4a10      	ldr	r2, [pc, #64]	@ (800268c <BSP_PB_Init+0xdc>)
 800264a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800264e:	461a      	mov	r2, r3
 8002650:	2100      	movs	r1, #0
 8002652:	f003 fc73 	bl	8005f3c <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8002656:	2028      	movs	r0, #40	@ 0x28
 8002658:	79fb      	ldrb	r3, [r7, #7]
 800265a:	4a0d      	ldr	r2, [pc, #52]	@ (8002690 <BSP_PB_Init+0xe0>)
 800265c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002660:	2200      	movs	r2, #0
 8002662:	4619      	mov	r1, r3
 8002664:	f001 fb49 	bl	8003cfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8002668:	2328      	movs	r3, #40	@ 0x28
 800266a:	4618      	mov	r0, r3
 800266c:	f001 fb5f 	bl	8003d2e <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8002670:	2300      	movs	r3, #0
}
 8002672:	4618      	mov	r0, r3
 8002674:	3720      	adds	r7, #32
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}
 800267a:	bf00      	nop
 800267c:	58024400 	.word	0x58024400
 8002680:	24000024 	.word	0x24000024
 8002684:	240009a4 	.word	0x240009a4
 8002688:	08014a10 	.word	0x08014a10
 800268c:	24000028 	.word	0x24000028
 8002690:	2400002c 	.word	0x2400002c

08002694 <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b082      	sub	sp, #8
 8002698:	af00      	add	r7, sp, #0
 800269a:	4603      	mov	r3, r0
 800269c:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 800269e:	79fb      	ldrb	r3, [r7, #7]
 80026a0:	00db      	lsls	r3, r3, #3
 80026a2:	4a04      	ldr	r2, [pc, #16]	@ (80026b4 <BSP_PB_IRQHandler+0x20>)
 80026a4:	4413      	add	r3, r2
 80026a6:	4618      	mov	r0, r3
 80026a8:	f003 fc7c 	bl	8005fa4 <HAL_EXTI_IRQHandler>
}
 80026ac:	bf00      	nop
 80026ae:	3708      	adds	r7, #8
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}
 80026b4:	240009a4 	.word	0x240009a4

080026b8 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 80026b8:	b480      	push	{r7}
 80026ba:	b083      	sub	sp, #12
 80026bc:	af00      	add	r7, sp, #0
 80026be:	4603      	mov	r3, r0
 80026c0:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 80026c2:	bf00      	nop
 80026c4:	370c      	adds	r7, #12
 80026c6:	46bd      	mov	sp, r7
 80026c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026cc:	4770      	bx	lr
	...

080026d0 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b084      	sub	sp, #16
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	4603      	mov	r3, r0
 80026d8:	6039      	str	r1, [r7, #0]
 80026da:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80026dc:	2300      	movs	r3, #0
 80026de:	60fb      	str	r3, [r7, #12]

  if(COM >= COMn)
 80026e0:	79fb      	ldrb	r3, [r7, #7]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d003      	beq.n	80026ee <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80026e6:	f06f 0301 	mvn.w	r3, #1
 80026ea:	60fb      	str	r3, [r7, #12]
 80026ec:	e018      	b.n	8002720 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 80026ee:	79fb      	ldrb	r3, [r7, #7]
 80026f0:	2294      	movs	r2, #148	@ 0x94
 80026f2:	fb02 f303 	mul.w	r3, r2, r3
 80026f6:	4a0d      	ldr	r2, [pc, #52]	@ (800272c <BSP_COM_Init+0x5c>)
 80026f8:	4413      	add	r3, r2
 80026fa:	4618      	mov	r0, r3
 80026fc:	f000 f86e 	bl	80027dc <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_USART3_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8002700:	79fb      	ldrb	r3, [r7, #7]
 8002702:	2294      	movs	r2, #148	@ 0x94
 8002704:	fb02 f303 	mul.w	r3, r2, r3
 8002708:	4a08      	ldr	r2, [pc, #32]	@ (800272c <BSP_COM_Init+0x5c>)
 800270a:	4413      	add	r3, r2
 800270c:	6839      	ldr	r1, [r7, #0]
 800270e:	4618      	mov	r0, r3
 8002710:	f000 f80e 	bl	8002730 <MX_USART3_Init>
 8002714:	4603      	mov	r3, r0
 8002716:	2b00      	cmp	r3, #0
 8002718:	d002      	beq.n	8002720 <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800271a:	f06f 0303 	mvn.w	r3, #3
 800271e:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8002720:	68fb      	ldr	r3, [r7, #12]
}
 8002722:	4618      	mov	r0, r3
 8002724:	3710      	adds	r7, #16
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}
 800272a:	bf00      	nop
 800272c:	240009ac 	.word	0x240009ac

08002730 <MX_USART3_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART3_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b082      	sub	sp, #8
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
 8002738:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 800273a:	4b15      	ldr	r3, [pc, #84]	@ (8002790 <MX_USART3_Init+0x60>)
 800273c:	681a      	ldr	r2, [r3, #0]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	681a      	ldr	r2, [r3, #0]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	220c      	movs	r2, #12
 800274e:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	895b      	ldrh	r3, [r3, #10]
 8002754:	461a      	mov	r2, r3
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = (uint32_t)COM_Init->WordLength;
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	685a      	ldr	r2, [r3, #4]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	891b      	ldrh	r3, [r3, #8]
 8002766:	461a      	mov	r2, r3
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	899b      	ldrh	r3, [r3, #12]
 8002770:	461a      	mov	r2, r3
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800277c:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 800277e:	6878      	ldr	r0, [r7, #4]
 8002780:	f00a f9fc 	bl	800cb7c <HAL_UART_Init>
 8002784:	4603      	mov	r3, r0
}
 8002786:	4618      	mov	r0, r3
 8002788:	3708      	adds	r7, #8
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}
 800278e:	bf00      	nop
 8002790:	24000014 	.word	0x24000014

08002794 <__io_putchar>:
 #ifdef __GNUC__
 int __io_putchar (int ch)
 #else
 int fputc (int ch, FILE *f)
 #endif /* __GNUC__ */
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b082      	sub	sp, #8
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit (&hcom_uart [COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 800279c:	4b09      	ldr	r3, [pc, #36]	@ (80027c4 <__io_putchar+0x30>)
 800279e:	781b      	ldrb	r3, [r3, #0]
 80027a0:	461a      	mov	r2, r3
 80027a2:	2394      	movs	r3, #148	@ 0x94
 80027a4:	fb02 f303 	mul.w	r3, r2, r3
 80027a8:	4a07      	ldr	r2, [pc, #28]	@ (80027c8 <__io_putchar+0x34>)
 80027aa:	1898      	adds	r0, r3, r2
 80027ac:	1d39      	adds	r1, r7, #4
 80027ae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80027b2:	2201      	movs	r2, #1
 80027b4:	f00a fa3c 	bl	800cc30 <HAL_UART_Transmit>
  return ch;
 80027b8:	687b      	ldr	r3, [r7, #4]
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	3708      	adds	r7, #8
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}
 80027c2:	bf00      	nop
 80027c4:	24000a40 	.word	0x24000a40
 80027c8:	240009ac 	.word	0x240009ac

080027cc <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 80027d0:	2000      	movs	r0, #0
 80027d2:	f7ff ff71 	bl	80026b8 <BSP_PB_Callback>
}
 80027d6:	bf00      	nop
 80027d8:	bd80      	pop	{r7, pc}
	...

080027dc <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b08a      	sub	sp, #40	@ 0x28
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 80027e4:	4b27      	ldr	r3, [pc, #156]	@ (8002884 <COM1_MspInit+0xa8>)
 80027e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80027ea:	4a26      	ldr	r2, [pc, #152]	@ (8002884 <COM1_MspInit+0xa8>)
 80027ec:	f043 0308 	orr.w	r3, r3, #8
 80027f0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80027f4:	4b23      	ldr	r3, [pc, #140]	@ (8002884 <COM1_MspInit+0xa8>)
 80027f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80027fa:	f003 0308 	and.w	r3, r3, #8
 80027fe:	613b      	str	r3, [r7, #16]
 8002800:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 8002802:	4b20      	ldr	r3, [pc, #128]	@ (8002884 <COM1_MspInit+0xa8>)
 8002804:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002808:	4a1e      	ldr	r2, [pc, #120]	@ (8002884 <COM1_MspInit+0xa8>)
 800280a:	f043 0308 	orr.w	r3, r3, #8
 800280e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002812:	4b1c      	ldr	r3, [pc, #112]	@ (8002884 <COM1_MspInit+0xa8>)
 8002814:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002818:	f003 0308 	and.w	r3, r3, #8
 800281c:	60fb      	str	r3, [r7, #12]
 800281e:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8002820:	4b18      	ldr	r3, [pc, #96]	@ (8002884 <COM1_MspInit+0xa8>)
 8002822:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002826:	4a17      	ldr	r2, [pc, #92]	@ (8002884 <COM1_MspInit+0xa8>)
 8002828:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800282c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002830:	4b14      	ldr	r3, [pc, #80]	@ (8002884 <COM1_MspInit+0xa8>)
 8002832:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002836:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800283a:	60bb      	str	r3, [r7, #8]
 800283c:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin = COM1_TX_PIN;
 800283e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002842:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8002844:	2302      	movs	r3, #2
 8002846:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8002848:	2302      	movs	r3, #2
 800284a:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_PULLUP;
 800284c:	2301      	movs	r3, #1
 800284e:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8002850:	2307      	movs	r3, #7
 8002852:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8002854:	f107 0314 	add.w	r3, r7, #20
 8002858:	4619      	mov	r1, r3
 800285a:	480b      	ldr	r0, [pc, #44]	@ (8002888 <COM1_MspInit+0xac>)
 800285c:	f003 fbde 	bl	800601c <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 8002860:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002864:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8002866:	2302      	movs	r3, #2
 8002868:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 800286a:	2307      	movs	r3, #7
 800286c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 800286e:	f107 0314 	add.w	r3, r7, #20
 8002872:	4619      	mov	r1, r3
 8002874:	4804      	ldr	r0, [pc, #16]	@ (8002888 <COM1_MspInit+0xac>)
 8002876:	f003 fbd1 	bl	800601c <HAL_GPIO_Init>
}
 800287a:	bf00      	nop
 800287c:	3728      	adds	r7, #40	@ 0x28
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}
 8002882:	bf00      	nop
 8002884:	58024400 	.word	0x58024400
 8002888:	58020c00 	.word	0x58020c00

0800288c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b082      	sub	sp, #8
 8002890:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002892:	2003      	movs	r0, #3
 8002894:	f001 fa26 	bl	8003ce4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002898:	f005 feea 	bl	8008670 <HAL_RCC_GetSysClockFreq>
 800289c:	4602      	mov	r2, r0
 800289e:	4b15      	ldr	r3, [pc, #84]	@ (80028f4 <HAL_Init+0x68>)
 80028a0:	699b      	ldr	r3, [r3, #24]
 80028a2:	0a1b      	lsrs	r3, r3, #8
 80028a4:	f003 030f 	and.w	r3, r3, #15
 80028a8:	4913      	ldr	r1, [pc, #76]	@ (80028f8 <HAL_Init+0x6c>)
 80028aa:	5ccb      	ldrb	r3, [r1, r3]
 80028ac:	f003 031f 	and.w	r3, r3, #31
 80028b0:	fa22 f303 	lsr.w	r3, r2, r3
 80028b4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80028b6:	4b0f      	ldr	r3, [pc, #60]	@ (80028f4 <HAL_Init+0x68>)
 80028b8:	699b      	ldr	r3, [r3, #24]
 80028ba:	f003 030f 	and.w	r3, r3, #15
 80028be:	4a0e      	ldr	r2, [pc, #56]	@ (80028f8 <HAL_Init+0x6c>)
 80028c0:	5cd3      	ldrb	r3, [r2, r3]
 80028c2:	f003 031f 	and.w	r3, r3, #31
 80028c6:	687a      	ldr	r2, [r7, #4]
 80028c8:	fa22 f303 	lsr.w	r3, r2, r3
 80028cc:	4a0b      	ldr	r2, [pc, #44]	@ (80028fc <HAL_Init+0x70>)
 80028ce:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80028d0:	4a0b      	ldr	r2, [pc, #44]	@ (8002900 <HAL_Init+0x74>)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80028d6:	2000      	movs	r0, #0
 80028d8:	f000 f814 	bl	8002904 <HAL_InitTick>
 80028dc:	4603      	mov	r3, r0
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d001      	beq.n	80028e6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
 80028e4:	e002      	b.n	80028ec <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80028e6:	f7fe fd0d 	bl	8001304 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80028ea:	2300      	movs	r3, #0
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	3708      	adds	r7, #8
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}
 80028f4:	58024400 	.word	0x58024400
 80028f8:	080149f8 	.word	0x080149f8
 80028fc:	24000004 	.word	0x24000004
 8002900:	24000000 	.word	0x24000000

08002904 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b082      	sub	sp, #8
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800290c:	4b15      	ldr	r3, [pc, #84]	@ (8002964 <HAL_InitTick+0x60>)
 800290e:	781b      	ldrb	r3, [r3, #0]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d101      	bne.n	8002918 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002914:	2301      	movs	r3, #1
 8002916:	e021      	b.n	800295c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002918:	4b13      	ldr	r3, [pc, #76]	@ (8002968 <HAL_InitTick+0x64>)
 800291a:	681a      	ldr	r2, [r3, #0]
 800291c:	4b11      	ldr	r3, [pc, #68]	@ (8002964 <HAL_InitTick+0x60>)
 800291e:	781b      	ldrb	r3, [r3, #0]
 8002920:	4619      	mov	r1, r3
 8002922:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002926:	fbb3 f3f1 	udiv	r3, r3, r1
 800292a:	fbb2 f3f3 	udiv	r3, r2, r3
 800292e:	4618      	mov	r0, r3
 8002930:	f001 fa0b 	bl	8003d4a <HAL_SYSTICK_Config>
 8002934:	4603      	mov	r3, r0
 8002936:	2b00      	cmp	r3, #0
 8002938:	d001      	beq.n	800293e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	e00e      	b.n	800295c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2b0f      	cmp	r3, #15
 8002942:	d80a      	bhi.n	800295a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002944:	2200      	movs	r2, #0
 8002946:	6879      	ldr	r1, [r7, #4]
 8002948:	f04f 30ff 	mov.w	r0, #4294967295
 800294c:	f001 f9d5 	bl	8003cfa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002950:	4a06      	ldr	r2, [pc, #24]	@ (800296c <HAL_InitTick+0x68>)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002956:	2300      	movs	r3, #0
 8002958:	e000      	b.n	800295c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800295a:	2301      	movs	r3, #1
}
 800295c:	4618      	mov	r0, r3
 800295e:	3708      	adds	r7, #8
 8002960:	46bd      	mov	sp, r7
 8002962:	bd80      	pop	{r7, pc}
 8002964:	24000034 	.word	0x24000034
 8002968:	24000000 	.word	0x24000000
 800296c:	24000030 	.word	0x24000030

08002970 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002970:	b480      	push	{r7}
 8002972:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002974:	4b06      	ldr	r3, [pc, #24]	@ (8002990 <HAL_IncTick+0x20>)
 8002976:	781b      	ldrb	r3, [r3, #0]
 8002978:	461a      	mov	r2, r3
 800297a:	4b06      	ldr	r3, [pc, #24]	@ (8002994 <HAL_IncTick+0x24>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4413      	add	r3, r2
 8002980:	4a04      	ldr	r2, [pc, #16]	@ (8002994 <HAL_IncTick+0x24>)
 8002982:	6013      	str	r3, [r2, #0]
}
 8002984:	bf00      	nop
 8002986:	46bd      	mov	sp, r7
 8002988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298c:	4770      	bx	lr
 800298e:	bf00      	nop
 8002990:	24000034 	.word	0x24000034
 8002994:	24000a44 	.word	0x24000a44

08002998 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002998:	b480      	push	{r7}
 800299a:	af00      	add	r7, sp, #0
  return uwTick;
 800299c:	4b03      	ldr	r3, [pc, #12]	@ (80029ac <HAL_GetTick+0x14>)
 800299e:	681b      	ldr	r3, [r3, #0]
}
 80029a0:	4618      	mov	r0, r3
 80029a2:	46bd      	mov	sp, r7
 80029a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a8:	4770      	bx	lr
 80029aa:	bf00      	nop
 80029ac:	24000a44 	.word	0x24000a44

080029b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b084      	sub	sp, #16
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80029b8:	f7ff ffee 	bl	8002998 <HAL_GetTick>
 80029bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029c8:	d005      	beq.n	80029d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80029ca:	4b0a      	ldr	r3, [pc, #40]	@ (80029f4 <HAL_Delay+0x44>)
 80029cc:	781b      	ldrb	r3, [r3, #0]
 80029ce:	461a      	mov	r2, r3
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	4413      	add	r3, r2
 80029d4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80029d6:	bf00      	nop
 80029d8:	f7ff ffde 	bl	8002998 <HAL_GetTick>
 80029dc:	4602      	mov	r2, r0
 80029de:	68bb      	ldr	r3, [r7, #8]
 80029e0:	1ad3      	subs	r3, r2, r3
 80029e2:	68fa      	ldr	r2, [r7, #12]
 80029e4:	429a      	cmp	r2, r3
 80029e6:	d8f7      	bhi.n	80029d8 <HAL_Delay+0x28>
  {
  }
}
 80029e8:	bf00      	nop
 80029ea:	bf00      	nop
 80029ec:	3710      	adds	r7, #16
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}
 80029f2:	bf00      	nop
 80029f4:	24000034 	.word	0x24000034

080029f8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80029f8:	b480      	push	{r7}
 80029fa:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80029fc:	4b03      	ldr	r3, [pc, #12]	@ (8002a0c <HAL_GetREVID+0x14>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	0c1b      	lsrs	r3, r3, #16
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	46bd      	mov	sp, r7
 8002a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0a:	4770      	bx	lr
 8002a0c:	5c001000 	.word	0x5c001000

08002a10 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b083      	sub	sp, #12
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
 8002a18:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	689b      	ldr	r3, [r3, #8]
 8002a1e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	431a      	orrs	r2, r3
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	609a      	str	r2, [r3, #8]
}
 8002a2a:	bf00      	nop
 8002a2c:	370c      	adds	r7, #12
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a34:	4770      	bx	lr

08002a36 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002a36:	b480      	push	{r7}
 8002a38:	b083      	sub	sp, #12
 8002a3a:	af00      	add	r7, sp, #0
 8002a3c:	6078      	str	r0, [r7, #4]
 8002a3e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	431a      	orrs	r2, r3
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	609a      	str	r2, [r3, #8]
}
 8002a50:	bf00      	nop
 8002a52:	370c      	adds	r7, #12
 8002a54:	46bd      	mov	sp, r7
 8002a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5a:	4770      	bx	lr

08002a5c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b083      	sub	sp, #12
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	370c      	adds	r7, #12
 8002a70:	46bd      	mov	sp, r7
 8002a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a76:	4770      	bx	lr

08002a78 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b087      	sub	sp, #28
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	60f8      	str	r0, [r7, #12]
 8002a80:	60b9      	str	r1, [r7, #8]
 8002a82:	607a      	str	r2, [r7, #4]
 8002a84:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	3360      	adds	r3, #96	@ 0x60
 8002a8a:	461a      	mov	r2, r3
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	009b      	lsls	r3, r3, #2
 8002a90:	4413      	add	r3, r2
 8002a92:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	430b      	orrs	r3, r1
 8002aa6:	431a      	orrs	r2, r3
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8002aac:	bf00      	nop
 8002aae:	371c      	adds	r7, #28
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab6:	4770      	bx	lr

08002ab8 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b085      	sub	sp, #20
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	60f8      	str	r0, [r7, #12]
 8002ac0:	60b9      	str	r1, [r7, #8]
 8002ac2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	691b      	ldr	r3, [r3, #16]
 8002ac8:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	f003 031f 	and.w	r3, r3, #31
 8002ad2:	6879      	ldr	r1, [r7, #4]
 8002ad4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ad8:	431a      	orrs	r2, r3
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	611a      	str	r2, [r3, #16]
}
 8002ade:	bf00      	nop
 8002ae0:	3714      	adds	r7, #20
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae8:	4770      	bx	lr

08002aea <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002aea:	b480      	push	{r7}
 8002aec:	b087      	sub	sp, #28
 8002aee:	af00      	add	r7, sp, #0
 8002af0:	60f8      	str	r0, [r7, #12]
 8002af2:	60b9      	str	r1, [r7, #8]
 8002af4:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	3360      	adds	r3, #96	@ 0x60
 8002afa:	461a      	mov	r2, r3
 8002afc:	68bb      	ldr	r3, [r7, #8]
 8002afe:	009b      	lsls	r3, r3, #2
 8002b00:	4413      	add	r3, r2
 8002b02:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002b04:	697b      	ldr	r3, [r7, #20]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	431a      	orrs	r2, r3
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	601a      	str	r2, [r3, #0]
  }
}
 8002b14:	bf00      	nop
 8002b16:	371c      	adds	r7, #28
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1e:	4770      	bx	lr

08002b20 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002b20:	b480      	push	{r7}
 8002b22:	b087      	sub	sp, #28
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	60f8      	str	r0, [r7, #12]
 8002b28:	60b9      	str	r1, [r7, #8]
 8002b2a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	3330      	adds	r3, #48	@ 0x30
 8002b30:	461a      	mov	r2, r3
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	0a1b      	lsrs	r3, r3, #8
 8002b36:	009b      	lsls	r3, r3, #2
 8002b38:	f003 030c 	and.w	r3, r3, #12
 8002b3c:	4413      	add	r3, r2
 8002b3e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	681a      	ldr	r2, [r3, #0]
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	f003 031f 	and.w	r3, r3, #31
 8002b4a:	211f      	movs	r1, #31
 8002b4c:	fa01 f303 	lsl.w	r3, r1, r3
 8002b50:	43db      	mvns	r3, r3
 8002b52:	401a      	ands	r2, r3
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	0e9b      	lsrs	r3, r3, #26
 8002b58:	f003 011f 	and.w	r1, r3, #31
 8002b5c:	68bb      	ldr	r3, [r7, #8]
 8002b5e:	f003 031f 	and.w	r3, r3, #31
 8002b62:	fa01 f303 	lsl.w	r3, r1, r3
 8002b66:	431a      	orrs	r2, r3
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002b6c:	bf00      	nop
 8002b6e:	371c      	adds	r7, #28
 8002b70:	46bd      	mov	sp, r7
 8002b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b76:	4770      	bx	lr

08002b78 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b087      	sub	sp, #28
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	60f8      	str	r0, [r7, #12]
 8002b80:	60b9      	str	r1, [r7, #8]
 8002b82:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	3314      	adds	r3, #20
 8002b88:	461a      	mov	r2, r3
 8002b8a:	68bb      	ldr	r3, [r7, #8]
 8002b8c:	0e5b      	lsrs	r3, r3, #25
 8002b8e:	009b      	lsls	r3, r3, #2
 8002b90:	f003 0304 	and.w	r3, r3, #4
 8002b94:	4413      	add	r3, r2
 8002b96:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	681a      	ldr	r2, [r3, #0]
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	0d1b      	lsrs	r3, r3, #20
 8002ba0:	f003 031f 	and.w	r3, r3, #31
 8002ba4:	2107      	movs	r1, #7
 8002ba6:	fa01 f303 	lsl.w	r3, r1, r3
 8002baa:	43db      	mvns	r3, r3
 8002bac:	401a      	ands	r2, r3
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	0d1b      	lsrs	r3, r3, #20
 8002bb2:	f003 031f 	and.w	r3, r3, #31
 8002bb6:	6879      	ldr	r1, [r7, #4]
 8002bb8:	fa01 f303 	lsl.w	r3, r1, r3
 8002bbc:	431a      	orrs	r2, r3
 8002bbe:	697b      	ldr	r3, [r7, #20]
 8002bc0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002bc2:	bf00      	nop
 8002bc4:	371c      	adds	r7, #28
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bcc:	4770      	bx	lr
	...

08002bd0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b085      	sub	sp, #20
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	60f8      	str	r0, [r7, #12]
 8002bd8:	60b9      	str	r1, [r7, #8]
 8002bda:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8002be2:	68bb      	ldr	r3, [r7, #8]
 8002be4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002be8:	43db      	mvns	r3, r3
 8002bea:	401a      	ands	r2, r3
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	f003 0318 	and.w	r3, r3, #24
 8002bf2:	4908      	ldr	r1, [pc, #32]	@ (8002c14 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002bf4:	40d9      	lsrs	r1, r3
 8002bf6:	68bb      	ldr	r3, [r7, #8]
 8002bf8:	400b      	ands	r3, r1
 8002bfa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002bfe:	431a      	orrs	r2, r3
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8002c06:	bf00      	nop
 8002c08:	3714      	adds	r7, #20
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c10:	4770      	bx	lr
 8002c12:	bf00      	nop
 8002c14:	000fffff 	.word	0x000fffff

08002c18 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b083      	sub	sp, #12
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	689a      	ldr	r2, [r3, #8]
 8002c24:	4b04      	ldr	r3, [pc, #16]	@ (8002c38 <LL_ADC_DisableDeepPowerDown+0x20>)
 8002c26:	4013      	ands	r3, r2
 8002c28:	687a      	ldr	r2, [r7, #4]
 8002c2a:	6093      	str	r3, [r2, #8]
}
 8002c2c:	bf00      	nop
 8002c2e:	370c      	adds	r7, #12
 8002c30:	46bd      	mov	sp, r7
 8002c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c36:	4770      	bx	lr
 8002c38:	5fffffc0 	.word	0x5fffffc0

08002c3c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b083      	sub	sp, #12
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002c4c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002c50:	d101      	bne.n	8002c56 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002c52:	2301      	movs	r3, #1
 8002c54:	e000      	b.n	8002c58 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002c56:	2300      	movs	r3, #0
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	370c      	adds	r7, #12
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c62:	4770      	bx	lr

08002c64 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b083      	sub	sp, #12
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	689a      	ldr	r2, [r3, #8]
 8002c70:	4b05      	ldr	r3, [pc, #20]	@ (8002c88 <LL_ADC_EnableInternalRegulator+0x24>)
 8002c72:	4013      	ands	r3, r2
 8002c74:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002c7c:	bf00      	nop
 8002c7e:	370c      	adds	r7, #12
 8002c80:	46bd      	mov	sp, r7
 8002c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c86:	4770      	bx	lr
 8002c88:	6fffffc0 	.word	0x6fffffc0

08002c8c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b083      	sub	sp, #12
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	689b      	ldr	r3, [r3, #8]
 8002c98:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c9c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002ca0:	d101      	bne.n	8002ca6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	e000      	b.n	8002ca8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002ca6:	2300      	movs	r3, #0
}
 8002ca8:	4618      	mov	r0, r3
 8002caa:	370c      	adds	r7, #12
 8002cac:	46bd      	mov	sp, r7
 8002cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb2:	4770      	bx	lr

08002cb4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b083      	sub	sp, #12
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	689b      	ldr	r3, [r3, #8]
 8002cc0:	f003 0301 	and.w	r3, r3, #1
 8002cc4:	2b01      	cmp	r3, #1
 8002cc6:	d101      	bne.n	8002ccc <LL_ADC_IsEnabled+0x18>
 8002cc8:	2301      	movs	r3, #1
 8002cca:	e000      	b.n	8002cce <LL_ADC_IsEnabled+0x1a>
 8002ccc:	2300      	movs	r3, #0
}
 8002cce:	4618      	mov	r0, r3
 8002cd0:	370c      	adds	r7, #12
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd8:	4770      	bx	lr

08002cda <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002cda:	b480      	push	{r7}
 8002cdc:	b083      	sub	sp, #12
 8002cde:	af00      	add	r7, sp, #0
 8002ce0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	689b      	ldr	r3, [r3, #8]
 8002ce6:	f003 0304 	and.w	r3, r3, #4
 8002cea:	2b04      	cmp	r3, #4
 8002cec:	d101      	bne.n	8002cf2 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e000      	b.n	8002cf4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002cf2:	2300      	movs	r3, #0
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	370c      	adds	r7, #12
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfe:	4770      	bx	lr

08002d00 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b083      	sub	sp, #12
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	689b      	ldr	r3, [r3, #8]
 8002d0c:	f003 0308 	and.w	r3, r3, #8
 8002d10:	2b08      	cmp	r3, #8
 8002d12:	d101      	bne.n	8002d18 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002d14:	2301      	movs	r3, #1
 8002d16:	e000      	b.n	8002d1a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002d18:	2300      	movs	r3, #0
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	370c      	adds	r7, #12
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d24:	4770      	bx	lr
	...

08002d28 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002d28:	b590      	push	{r4, r7, lr}
 8002d2a:	b089      	sub	sp, #36	@ 0x24
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d30:	2300      	movs	r3, #0
 8002d32:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002d34:	2300      	movs	r3, #0
 8002d36:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d101      	bne.n	8002d42 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e18f      	b.n	8003062 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	68db      	ldr	r3, [r3, #12]
 8002d46:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d109      	bne.n	8002d64 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002d50:	6878      	ldr	r0, [r7, #4]
 8002d52:	f7fd fda5 	bl	80008a0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f7ff ff67 	bl	8002c3c <LL_ADC_IsDeepPowerDownEnabled>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d004      	beq.n	8002d7e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f7ff ff4d 	bl	8002c18 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4618      	mov	r0, r3
 8002d84:	f7ff ff82 	bl	8002c8c <LL_ADC_IsInternalRegulatorEnabled>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d114      	bne.n	8002db8 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4618      	mov	r0, r3
 8002d94:	f7ff ff66 	bl	8002c64 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002d98:	4b87      	ldr	r3, [pc, #540]	@ (8002fb8 <HAL_ADC_Init+0x290>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	099b      	lsrs	r3, r3, #6
 8002d9e:	4a87      	ldr	r2, [pc, #540]	@ (8002fbc <HAL_ADC_Init+0x294>)
 8002da0:	fba2 2303 	umull	r2, r3, r2, r3
 8002da4:	099b      	lsrs	r3, r3, #6
 8002da6:	3301      	adds	r3, #1
 8002da8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002daa:	e002      	b.n	8002db2 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8002dac:	68bb      	ldr	r3, [r7, #8]
 8002dae:	3b01      	subs	r3, #1
 8002db0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002db2:	68bb      	ldr	r3, [r7, #8]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d1f9      	bne.n	8002dac <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f7ff ff65 	bl	8002c8c <LL_ADC_IsInternalRegulatorEnabled>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d10d      	bne.n	8002de4 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002dcc:	f043 0210 	orr.w	r2, r3, #16
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dd8:	f043 0201 	orr.w	r2, r3, #1
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002de0:	2301      	movs	r3, #1
 8002de2:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4618      	mov	r0, r3
 8002dea:	f7ff ff76 	bl	8002cda <LL_ADC_REG_IsConversionOngoing>
 8002dee:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002df4:	f003 0310 	and.w	r3, r3, #16
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	f040 8129 	bne.w	8003050 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	f040 8125 	bne.w	8003050 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e0a:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002e0e:	f043 0202 	orr.w	r2, r3, #2
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	f7ff ff4a 	bl	8002cb4 <LL_ADC_IsEnabled>
 8002e20:	4603      	mov	r3, r0
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d136      	bne.n	8002e94 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a65      	ldr	r2, [pc, #404]	@ (8002fc0 <HAL_ADC_Init+0x298>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d004      	beq.n	8002e3a <HAL_ADC_Init+0x112>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a63      	ldr	r2, [pc, #396]	@ (8002fc4 <HAL_ADC_Init+0x29c>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d10e      	bne.n	8002e58 <HAL_ADC_Init+0x130>
 8002e3a:	4861      	ldr	r0, [pc, #388]	@ (8002fc0 <HAL_ADC_Init+0x298>)
 8002e3c:	f7ff ff3a 	bl	8002cb4 <LL_ADC_IsEnabled>
 8002e40:	4604      	mov	r4, r0
 8002e42:	4860      	ldr	r0, [pc, #384]	@ (8002fc4 <HAL_ADC_Init+0x29c>)
 8002e44:	f7ff ff36 	bl	8002cb4 <LL_ADC_IsEnabled>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	4323      	orrs	r3, r4
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	bf0c      	ite	eq
 8002e50:	2301      	moveq	r3, #1
 8002e52:	2300      	movne	r3, #0
 8002e54:	b2db      	uxtb	r3, r3
 8002e56:	e008      	b.n	8002e6a <HAL_ADC_Init+0x142>
 8002e58:	485b      	ldr	r0, [pc, #364]	@ (8002fc8 <HAL_ADC_Init+0x2a0>)
 8002e5a:	f7ff ff2b 	bl	8002cb4 <LL_ADC_IsEnabled>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	bf0c      	ite	eq
 8002e64:	2301      	moveq	r3, #1
 8002e66:	2300      	movne	r3, #0
 8002e68:	b2db      	uxtb	r3, r3
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d012      	beq.n	8002e94 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4a53      	ldr	r2, [pc, #332]	@ (8002fc0 <HAL_ADC_Init+0x298>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d004      	beq.n	8002e82 <HAL_ADC_Init+0x15a>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a51      	ldr	r2, [pc, #324]	@ (8002fc4 <HAL_ADC_Init+0x29c>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d101      	bne.n	8002e86 <HAL_ADC_Init+0x15e>
 8002e82:	4a52      	ldr	r2, [pc, #328]	@ (8002fcc <HAL_ADC_Init+0x2a4>)
 8002e84:	e000      	b.n	8002e88 <HAL_ADC_Init+0x160>
 8002e86:	4a52      	ldr	r2, [pc, #328]	@ (8002fd0 <HAL_ADC_Init+0x2a8>)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	4619      	mov	r1, r3
 8002e8e:	4610      	mov	r0, r2
 8002e90:	f7ff fdbe 	bl	8002a10 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8002e94:	f7ff fdb0 	bl	80029f8 <HAL_GetREVID>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d914      	bls.n	8002ecc <HAL_ADC_Init+0x1a4>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	689b      	ldr	r3, [r3, #8]
 8002ea6:	2b10      	cmp	r3, #16
 8002ea8:	d110      	bne.n	8002ecc <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	7d5b      	ldrb	r3, [r3, #21]
 8002eae:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002eb4:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002eba:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	7f1b      	ldrb	r3, [r3, #28]
 8002ec0:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002ec2:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002ec4:	f043 030c 	orr.w	r3, r3, #12
 8002ec8:	61bb      	str	r3, [r7, #24]
 8002eca:	e00d      	b.n	8002ee8 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	7d5b      	ldrb	r3, [r3, #21]
 8002ed0:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002ed6:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002edc:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	7f1b      	ldrb	r3, [r3, #28]
 8002ee2:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	7f1b      	ldrb	r3, [r3, #28]
 8002eec:	2b01      	cmp	r3, #1
 8002eee:	d106      	bne.n	8002efe <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6a1b      	ldr	r3, [r3, #32]
 8002ef4:	3b01      	subs	r3, #1
 8002ef6:	045b      	lsls	r3, r3, #17
 8002ef8:	69ba      	ldr	r2, [r7, #24]
 8002efa:	4313      	orrs	r3, r2
 8002efc:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d009      	beq.n	8002f1a <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f0a:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f12:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002f14:	69ba      	ldr	r2, [r7, #24]
 8002f16:	4313      	orrs	r3, r2
 8002f18:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	68da      	ldr	r2, [r3, #12]
 8002f20:	4b2c      	ldr	r3, [pc, #176]	@ (8002fd4 <HAL_ADC_Init+0x2ac>)
 8002f22:	4013      	ands	r3, r2
 8002f24:	687a      	ldr	r2, [r7, #4]
 8002f26:	6812      	ldr	r2, [r2, #0]
 8002f28:	69b9      	ldr	r1, [r7, #24]
 8002f2a:	430b      	orrs	r3, r1
 8002f2c:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4618      	mov	r0, r3
 8002f34:	f7ff fed1 	bl	8002cda <LL_ADC_REG_IsConversionOngoing>
 8002f38:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f7ff fede 	bl	8002d00 <LL_ADC_INJ_IsConversionOngoing>
 8002f44:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002f46:	693b      	ldr	r3, [r7, #16]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d15f      	bne.n	800300c <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d15c      	bne.n	800300c <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	7d1b      	ldrb	r3, [r3, #20]
 8002f56:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	68da      	ldr	r2, [r3, #12]
 8002f66:	4b1c      	ldr	r3, [pc, #112]	@ (8002fd8 <HAL_ADC_Init+0x2b0>)
 8002f68:	4013      	ands	r3, r2
 8002f6a:	687a      	ldr	r2, [r7, #4]
 8002f6c:	6812      	ldr	r2, [r2, #0]
 8002f6e:	69b9      	ldr	r1, [r7, #24]
 8002f70:	430b      	orrs	r3, r1
 8002f72:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002f7a:	2b01      	cmp	r3, #1
 8002f7c:	d130      	bne.n	8002fe0 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f82:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	691a      	ldr	r2, [r3, #16]
 8002f8a:	4b14      	ldr	r3, [pc, #80]	@ (8002fdc <HAL_ADC_Init+0x2b4>)
 8002f8c:	4013      	ands	r3, r2
 8002f8e:	687a      	ldr	r2, [r7, #4]
 8002f90:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002f92:	3a01      	subs	r2, #1
 8002f94:	0411      	lsls	r1, r2, #16
 8002f96:	687a      	ldr	r2, [r7, #4]
 8002f98:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002f9a:	4311      	orrs	r1, r2
 8002f9c:	687a      	ldr	r2, [r7, #4]
 8002f9e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002fa0:	4311      	orrs	r1, r2
 8002fa2:	687a      	ldr	r2, [r7, #4]
 8002fa4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002fa6:	430a      	orrs	r2, r1
 8002fa8:	431a      	orrs	r2, r3
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f042 0201 	orr.w	r2, r2, #1
 8002fb2:	611a      	str	r2, [r3, #16]
 8002fb4:	e01c      	b.n	8002ff0 <HAL_ADC_Init+0x2c8>
 8002fb6:	bf00      	nop
 8002fb8:	24000000 	.word	0x24000000
 8002fbc:	053e2d63 	.word	0x053e2d63
 8002fc0:	40022000 	.word	0x40022000
 8002fc4:	40022100 	.word	0x40022100
 8002fc8:	58026000 	.word	0x58026000
 8002fcc:	40022300 	.word	0x40022300
 8002fd0:	58026300 	.word	0x58026300
 8002fd4:	fff0c003 	.word	0xfff0c003
 8002fd8:	ffffbffc 	.word	0xffffbffc
 8002fdc:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	691a      	ldr	r2, [r3, #16]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f022 0201 	bic.w	r2, r2, #1
 8002fee:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	691b      	ldr	r3, [r3, #16]
 8002ff6:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	430a      	orrs	r2, r1
 8003004:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8003006:	6878      	ldr	r0, [r7, #4]
 8003008:	f000 fb8c 	bl	8003724 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	68db      	ldr	r3, [r3, #12]
 8003010:	2b01      	cmp	r3, #1
 8003012:	d10c      	bne.n	800302e <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800301a:	f023 010f 	bic.w	r1, r3, #15
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	699b      	ldr	r3, [r3, #24]
 8003022:	1e5a      	subs	r2, r3, #1
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	430a      	orrs	r2, r1
 800302a:	631a      	str	r2, [r3, #48]	@ 0x30
 800302c:	e007      	b.n	800303e <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f022 020f 	bic.w	r2, r2, #15
 800303c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003042:	f023 0303 	bic.w	r3, r3, #3
 8003046:	f043 0201 	orr.w	r2, r3, #1
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	655a      	str	r2, [r3, #84]	@ 0x54
 800304e:	e007      	b.n	8003060 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003054:	f043 0210 	orr.w	r2, r3, #16
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800305c:	2301      	movs	r3, #1
 800305e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003060:	7ffb      	ldrb	r3, [r7, #31]
}
 8003062:	4618      	mov	r0, r3
 8003064:	3724      	adds	r7, #36	@ 0x24
 8003066:	46bd      	mov	sp, r7
 8003068:	bd90      	pop	{r4, r7, pc}
 800306a:	bf00      	nop

0800306c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800306c:	b590      	push	{r4, r7, lr}
 800306e:	b0a1      	sub	sp, #132	@ 0x84
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
 8003074:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003076:	2300      	movs	r3, #0
 8003078:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 800307c:	2300      	movs	r3, #0
 800307e:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	68db      	ldr	r3, [r3, #12]
 8003084:	4a65      	ldr	r2, [pc, #404]	@ (800321c <HAL_ADC_ConfigChannel+0x1b0>)
 8003086:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800308e:	2b01      	cmp	r3, #1
 8003090:	d101      	bne.n	8003096 <HAL_ADC_ConfigChannel+0x2a>
 8003092:	2302      	movs	r3, #2
 8003094:	e32e      	b.n	80036f4 <HAL_ADC_ConfigChannel+0x688>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2201      	movs	r2, #1
 800309a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4618      	mov	r0, r3
 80030a4:	f7ff fe19 	bl	8002cda <LL_ADC_REG_IsConversionOngoing>
 80030a8:	4603      	mov	r3, r0
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	f040 8313 	bne.w	80036d6 <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	db2c      	blt.n	8003112 <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d108      	bne.n	80030d6 <HAL_ADC_ConfigChannel+0x6a>
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	0e9b      	lsrs	r3, r3, #26
 80030ca:	f003 031f 	and.w	r3, r3, #31
 80030ce:	2201      	movs	r2, #1
 80030d0:	fa02 f303 	lsl.w	r3, r2, r3
 80030d4:	e016      	b.n	8003104 <HAL_ADC_ConfigChannel+0x98>
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	667b      	str	r3, [r7, #100]	@ 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030dc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80030de:	fa93 f3a3 	rbit	r3, r3
 80030e2:	663b      	str	r3, [r7, #96]	@ 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80030e4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80030e6:	66bb      	str	r3, [r7, #104]	@ 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80030e8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d101      	bne.n	80030f2 <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 80030ee:	2320      	movs	r3, #32
 80030f0:	e003      	b.n	80030fa <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 80030f2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80030f4:	fab3 f383 	clz	r3, r3
 80030f8:	b2db      	uxtb	r3, r3
 80030fa:	f003 031f 	and.w	r3, r3, #31
 80030fe:	2201      	movs	r2, #1
 8003100:	fa02 f303 	lsl.w	r3, r2, r3
 8003104:	687a      	ldr	r2, [r7, #4]
 8003106:	6812      	ldr	r2, [r2, #0]
 8003108:	69d1      	ldr	r1, [r2, #28]
 800310a:	687a      	ldr	r2, [r7, #4]
 800310c:	6812      	ldr	r2, [r2, #0]
 800310e:	430b      	orrs	r3, r1
 8003110:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6818      	ldr	r0, [r3, #0]
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	6859      	ldr	r1, [r3, #4]
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	461a      	mov	r2, r3
 8003120:	f7ff fcfe 	bl	8002b20 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4618      	mov	r0, r3
 800312a:	f7ff fdd6 	bl	8002cda <LL_ADC_REG_IsConversionOngoing>
 800312e:	67b8      	str	r0, [r7, #120]	@ 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4618      	mov	r0, r3
 8003136:	f7ff fde3 	bl	8002d00 <LL_ADC_INJ_IsConversionOngoing>
 800313a:	6778      	str	r0, [r7, #116]	@ 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800313c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800313e:	2b00      	cmp	r3, #0
 8003140:	f040 80b8 	bne.w	80032b4 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003144:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003146:	2b00      	cmp	r3, #0
 8003148:	f040 80b4 	bne.w	80032b4 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6818      	ldr	r0, [r3, #0]
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	6819      	ldr	r1, [r3, #0]
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	689b      	ldr	r3, [r3, #8]
 8003158:	461a      	mov	r2, r3
 800315a:	f7ff fd0d 	bl	8002b78 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800315e:	4b30      	ldr	r3, [pc, #192]	@ (8003220 <HAL_ADC_ConfigChannel+0x1b4>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8003166:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800316a:	d10b      	bne.n	8003184 <HAL_ADC_ConfigChannel+0x118>
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	695a      	ldr	r2, [r3, #20]
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	68db      	ldr	r3, [r3, #12]
 8003176:	089b      	lsrs	r3, r3, #2
 8003178:	f003 0307 	and.w	r3, r3, #7
 800317c:	005b      	lsls	r3, r3, #1
 800317e:	fa02 f303 	lsl.w	r3, r2, r3
 8003182:	e01d      	b.n	80031c0 <HAL_ADC_ConfigChannel+0x154>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	68db      	ldr	r3, [r3, #12]
 800318a:	f003 0310 	and.w	r3, r3, #16
 800318e:	2b00      	cmp	r3, #0
 8003190:	d10b      	bne.n	80031aa <HAL_ADC_ConfigChannel+0x13e>
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	695a      	ldr	r2, [r3, #20]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	68db      	ldr	r3, [r3, #12]
 800319c:	089b      	lsrs	r3, r3, #2
 800319e:	f003 0307 	and.w	r3, r3, #7
 80031a2:	005b      	lsls	r3, r3, #1
 80031a4:	fa02 f303 	lsl.w	r3, r2, r3
 80031a8:	e00a      	b.n	80031c0 <HAL_ADC_ConfigChannel+0x154>
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	695a      	ldr	r2, [r3, #20]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	68db      	ldr	r3, [r3, #12]
 80031b4:	089b      	lsrs	r3, r3, #2
 80031b6:	f003 0304 	and.w	r3, r3, #4
 80031ba:	005b      	lsls	r3, r3, #1
 80031bc:	fa02 f303 	lsl.w	r3, r2, r3
 80031c0:	673b      	str	r3, [r7, #112]	@ 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	691b      	ldr	r3, [r3, #16]
 80031c6:	2b04      	cmp	r3, #4
 80031c8:	d02c      	beq.n	8003224 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6818      	ldr	r0, [r3, #0]
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	6919      	ldr	r1, [r3, #16]
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	681a      	ldr	r2, [r3, #0]
 80031d6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80031d8:	f7ff fc4e 	bl	8002a78 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6818      	ldr	r0, [r3, #0]
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	6919      	ldr	r1, [r3, #16]
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	7e5b      	ldrb	r3, [r3, #25]
 80031e8:	2b01      	cmp	r3, #1
 80031ea:	d102      	bne.n	80031f2 <HAL_ADC_ConfigChannel+0x186>
 80031ec:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80031f0:	e000      	b.n	80031f4 <HAL_ADC_ConfigChannel+0x188>
 80031f2:	2300      	movs	r3, #0
 80031f4:	461a      	mov	r2, r3
 80031f6:	f7ff fc78 	bl	8002aea <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6818      	ldr	r0, [r3, #0]
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	6919      	ldr	r1, [r3, #16]
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	7e1b      	ldrb	r3, [r3, #24]
 8003206:	2b01      	cmp	r3, #1
 8003208:	d102      	bne.n	8003210 <HAL_ADC_ConfigChannel+0x1a4>
 800320a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800320e:	e000      	b.n	8003212 <HAL_ADC_ConfigChannel+0x1a6>
 8003210:	2300      	movs	r3, #0
 8003212:	461a      	mov	r2, r3
 8003214:	f7ff fc50 	bl	8002ab8 <LL_ADC_SetDataRightShift>
 8003218:	e04c      	b.n	80032b4 <HAL_ADC_ConfigChannel+0x248>
 800321a:	bf00      	nop
 800321c:	47ff0000 	.word	0x47ff0000
 8003220:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800322a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	069b      	lsls	r3, r3, #26
 8003234:	429a      	cmp	r2, r3
 8003236:	d107      	bne.n	8003248 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003246:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800324e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	069b      	lsls	r3, r3, #26
 8003258:	429a      	cmp	r2, r3
 800325a:	d107      	bne.n	800326c <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800326a:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003272:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	069b      	lsls	r3, r3, #26
 800327c:	429a      	cmp	r2, r3
 800327e:	d107      	bne.n	8003290 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800328e:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003296:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	069b      	lsls	r3, r3, #26
 80032a0:	429a      	cmp	r2, r3
 80032a2:	d107      	bne.n	80032b4 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80032b2:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4618      	mov	r0, r3
 80032ba:	f7ff fcfb 	bl	8002cb4 <LL_ADC_IsEnabled>
 80032be:	4603      	mov	r3, r0
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	f040 8211 	bne.w	80036e8 <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6818      	ldr	r0, [r3, #0]
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	6819      	ldr	r1, [r3, #0]
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	68db      	ldr	r3, [r3, #12]
 80032d2:	461a      	mov	r2, r3
 80032d4:	f7ff fc7c 	bl	8002bd0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	68db      	ldr	r3, [r3, #12]
 80032dc:	4aa1      	ldr	r2, [pc, #644]	@ (8003564 <HAL_ADC_ConfigChannel+0x4f8>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	f040 812e 	bne.w	8003540 <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d10b      	bne.n	800330c <HAL_ADC_ConfigChannel+0x2a0>
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	0e9b      	lsrs	r3, r3, #26
 80032fa:	3301      	adds	r3, #1
 80032fc:	f003 031f 	and.w	r3, r3, #31
 8003300:	2b09      	cmp	r3, #9
 8003302:	bf94      	ite	ls
 8003304:	2301      	movls	r3, #1
 8003306:	2300      	movhi	r3, #0
 8003308:	b2db      	uxtb	r3, r3
 800330a:	e019      	b.n	8003340 <HAL_ADC_ConfigChannel+0x2d4>
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003312:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003314:	fa93 f3a3 	rbit	r3, r3
 8003318:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 800331a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800331c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 800331e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003320:	2b00      	cmp	r3, #0
 8003322:	d101      	bne.n	8003328 <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 8003324:	2320      	movs	r3, #32
 8003326:	e003      	b.n	8003330 <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 8003328:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800332a:	fab3 f383 	clz	r3, r3
 800332e:	b2db      	uxtb	r3, r3
 8003330:	3301      	adds	r3, #1
 8003332:	f003 031f 	and.w	r3, r3, #31
 8003336:	2b09      	cmp	r3, #9
 8003338:	bf94      	ite	ls
 800333a:	2301      	movls	r3, #1
 800333c:	2300      	movhi	r3, #0
 800333e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003340:	2b00      	cmp	r3, #0
 8003342:	d079      	beq.n	8003438 <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800334c:	2b00      	cmp	r3, #0
 800334e:	d107      	bne.n	8003360 <HAL_ADC_ConfigChannel+0x2f4>
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	0e9b      	lsrs	r3, r3, #26
 8003356:	3301      	adds	r3, #1
 8003358:	069b      	lsls	r3, r3, #26
 800335a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800335e:	e015      	b.n	800338c <HAL_ADC_ConfigChannel+0x320>
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003366:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003368:	fa93 f3a3 	rbit	r3, r3
 800336c:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 800336e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003370:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8003372:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003374:	2b00      	cmp	r3, #0
 8003376:	d101      	bne.n	800337c <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 8003378:	2320      	movs	r3, #32
 800337a:	e003      	b.n	8003384 <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 800337c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800337e:	fab3 f383 	clz	r3, r3
 8003382:	b2db      	uxtb	r3, r3
 8003384:	3301      	adds	r3, #1
 8003386:	069b      	lsls	r3, r3, #26
 8003388:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003394:	2b00      	cmp	r3, #0
 8003396:	d109      	bne.n	80033ac <HAL_ADC_ConfigChannel+0x340>
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	0e9b      	lsrs	r3, r3, #26
 800339e:	3301      	adds	r3, #1
 80033a0:	f003 031f 	and.w	r3, r3, #31
 80033a4:	2101      	movs	r1, #1
 80033a6:	fa01 f303 	lsl.w	r3, r1, r3
 80033aa:	e017      	b.n	80033dc <HAL_ADC_ConfigChannel+0x370>
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80033b4:	fa93 f3a3 	rbit	r3, r3
 80033b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 80033ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80033bc:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 80033be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d101      	bne.n	80033c8 <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 80033c4:	2320      	movs	r3, #32
 80033c6:	e003      	b.n	80033d0 <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 80033c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80033ca:	fab3 f383 	clz	r3, r3
 80033ce:	b2db      	uxtb	r3, r3
 80033d0:	3301      	adds	r3, #1
 80033d2:	f003 031f 	and.w	r3, r3, #31
 80033d6:	2101      	movs	r1, #1
 80033d8:	fa01 f303 	lsl.w	r3, r1, r3
 80033dc:	ea42 0103 	orr.w	r1, r2, r3
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d10a      	bne.n	8003402 <HAL_ADC_ConfigChannel+0x396>
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	0e9b      	lsrs	r3, r3, #26
 80033f2:	3301      	adds	r3, #1
 80033f4:	f003 021f 	and.w	r2, r3, #31
 80033f8:	4613      	mov	r3, r2
 80033fa:	005b      	lsls	r3, r3, #1
 80033fc:	4413      	add	r3, r2
 80033fe:	051b      	lsls	r3, r3, #20
 8003400:	e018      	b.n	8003434 <HAL_ADC_ConfigChannel+0x3c8>
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003408:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800340a:	fa93 f3a3 	rbit	r3, r3
 800340e:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8003410:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003412:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8003414:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003416:	2b00      	cmp	r3, #0
 8003418:	d101      	bne.n	800341e <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 800341a:	2320      	movs	r3, #32
 800341c:	e003      	b.n	8003426 <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 800341e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003420:	fab3 f383 	clz	r3, r3
 8003424:	b2db      	uxtb	r3, r3
 8003426:	3301      	adds	r3, #1
 8003428:	f003 021f 	and.w	r2, r3, #31
 800342c:	4613      	mov	r3, r2
 800342e:	005b      	lsls	r3, r3, #1
 8003430:	4413      	add	r3, r2
 8003432:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003434:	430b      	orrs	r3, r1
 8003436:	e07e      	b.n	8003536 <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003440:	2b00      	cmp	r3, #0
 8003442:	d107      	bne.n	8003454 <HAL_ADC_ConfigChannel+0x3e8>
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	0e9b      	lsrs	r3, r3, #26
 800344a:	3301      	adds	r3, #1
 800344c:	069b      	lsls	r3, r3, #26
 800344e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003452:	e015      	b.n	8003480 <HAL_ADC_ConfigChannel+0x414>
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800345a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800345c:	fa93 f3a3 	rbit	r3, r3
 8003460:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8003462:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003464:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8003466:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003468:	2b00      	cmp	r3, #0
 800346a:	d101      	bne.n	8003470 <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 800346c:	2320      	movs	r3, #32
 800346e:	e003      	b.n	8003478 <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 8003470:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003472:	fab3 f383 	clz	r3, r3
 8003476:	b2db      	uxtb	r3, r3
 8003478:	3301      	adds	r3, #1
 800347a:	069b      	lsls	r3, r3, #26
 800347c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003488:	2b00      	cmp	r3, #0
 800348a:	d109      	bne.n	80034a0 <HAL_ADC_ConfigChannel+0x434>
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	0e9b      	lsrs	r3, r3, #26
 8003492:	3301      	adds	r3, #1
 8003494:	f003 031f 	and.w	r3, r3, #31
 8003498:	2101      	movs	r1, #1
 800349a:	fa01 f303 	lsl.w	r3, r1, r3
 800349e:	e017      	b.n	80034d0 <HAL_ADC_ConfigChannel+0x464>
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034a6:	69fb      	ldr	r3, [r7, #28]
 80034a8:	fa93 f3a3 	rbit	r3, r3
 80034ac:	61bb      	str	r3, [r7, #24]
  return result;
 80034ae:	69bb      	ldr	r3, [r7, #24]
 80034b0:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80034b2:	6a3b      	ldr	r3, [r7, #32]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d101      	bne.n	80034bc <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 80034b8:	2320      	movs	r3, #32
 80034ba:	e003      	b.n	80034c4 <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 80034bc:	6a3b      	ldr	r3, [r7, #32]
 80034be:	fab3 f383 	clz	r3, r3
 80034c2:	b2db      	uxtb	r3, r3
 80034c4:	3301      	adds	r3, #1
 80034c6:	f003 031f 	and.w	r3, r3, #31
 80034ca:	2101      	movs	r1, #1
 80034cc:	fa01 f303 	lsl.w	r3, r1, r3
 80034d0:	ea42 0103 	orr.w	r1, r2, r3
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d10d      	bne.n	80034fc <HAL_ADC_ConfigChannel+0x490>
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	0e9b      	lsrs	r3, r3, #26
 80034e6:	3301      	adds	r3, #1
 80034e8:	f003 021f 	and.w	r2, r3, #31
 80034ec:	4613      	mov	r3, r2
 80034ee:	005b      	lsls	r3, r3, #1
 80034f0:	4413      	add	r3, r2
 80034f2:	3b1e      	subs	r3, #30
 80034f4:	051b      	lsls	r3, r3, #20
 80034f6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80034fa:	e01b      	b.n	8003534 <HAL_ADC_ConfigChannel+0x4c8>
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003502:	693b      	ldr	r3, [r7, #16]
 8003504:	fa93 f3a3 	rbit	r3, r3
 8003508:	60fb      	str	r3, [r7, #12]
  return result;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800350e:	697b      	ldr	r3, [r7, #20]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d101      	bne.n	8003518 <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 8003514:	2320      	movs	r3, #32
 8003516:	e003      	b.n	8003520 <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	fab3 f383 	clz	r3, r3
 800351e:	b2db      	uxtb	r3, r3
 8003520:	3301      	adds	r3, #1
 8003522:	f003 021f 	and.w	r2, r3, #31
 8003526:	4613      	mov	r3, r2
 8003528:	005b      	lsls	r3, r3, #1
 800352a:	4413      	add	r3, r2
 800352c:	3b1e      	subs	r3, #30
 800352e:	051b      	lsls	r3, r3, #20
 8003530:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003534:	430b      	orrs	r3, r1
 8003536:	683a      	ldr	r2, [r7, #0]
 8003538:	6892      	ldr	r2, [r2, #8]
 800353a:	4619      	mov	r1, r3
 800353c:	f7ff fb1c 	bl	8002b78 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	2b00      	cmp	r3, #0
 8003546:	f280 80cf 	bge.w	80036e8 <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a06      	ldr	r2, [pc, #24]	@ (8003568 <HAL_ADC_ConfigChannel+0x4fc>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d004      	beq.n	800355e <HAL_ADC_ConfigChannel+0x4f2>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a04      	ldr	r2, [pc, #16]	@ (800356c <HAL_ADC_ConfigChannel+0x500>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d10a      	bne.n	8003574 <HAL_ADC_ConfigChannel+0x508>
 800355e:	4b04      	ldr	r3, [pc, #16]	@ (8003570 <HAL_ADC_ConfigChannel+0x504>)
 8003560:	e009      	b.n	8003576 <HAL_ADC_ConfigChannel+0x50a>
 8003562:	bf00      	nop
 8003564:	47ff0000 	.word	0x47ff0000
 8003568:	40022000 	.word	0x40022000
 800356c:	40022100 	.word	0x40022100
 8003570:	40022300 	.word	0x40022300
 8003574:	4b61      	ldr	r3, [pc, #388]	@ (80036fc <HAL_ADC_ConfigChannel+0x690>)
 8003576:	4618      	mov	r0, r3
 8003578:	f7ff fa70 	bl	8002a5c <LL_ADC_GetCommonPathInternalCh>
 800357c:	66f8      	str	r0, [r7, #108]	@ 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a5f      	ldr	r2, [pc, #380]	@ (8003700 <HAL_ADC_ConfigChannel+0x694>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d004      	beq.n	8003592 <HAL_ADC_ConfigChannel+0x526>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a5d      	ldr	r2, [pc, #372]	@ (8003704 <HAL_ADC_ConfigChannel+0x698>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d10e      	bne.n	80035b0 <HAL_ADC_ConfigChannel+0x544>
 8003592:	485b      	ldr	r0, [pc, #364]	@ (8003700 <HAL_ADC_ConfigChannel+0x694>)
 8003594:	f7ff fb8e 	bl	8002cb4 <LL_ADC_IsEnabled>
 8003598:	4604      	mov	r4, r0
 800359a:	485a      	ldr	r0, [pc, #360]	@ (8003704 <HAL_ADC_ConfigChannel+0x698>)
 800359c:	f7ff fb8a 	bl	8002cb4 <LL_ADC_IsEnabled>
 80035a0:	4603      	mov	r3, r0
 80035a2:	4323      	orrs	r3, r4
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	bf0c      	ite	eq
 80035a8:	2301      	moveq	r3, #1
 80035aa:	2300      	movne	r3, #0
 80035ac:	b2db      	uxtb	r3, r3
 80035ae:	e008      	b.n	80035c2 <HAL_ADC_ConfigChannel+0x556>
 80035b0:	4855      	ldr	r0, [pc, #340]	@ (8003708 <HAL_ADC_ConfigChannel+0x69c>)
 80035b2:	f7ff fb7f 	bl	8002cb4 <LL_ADC_IsEnabled>
 80035b6:	4603      	mov	r3, r0
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	bf0c      	ite	eq
 80035bc:	2301      	moveq	r3, #1
 80035be:	2300      	movne	r3, #0
 80035c0:	b2db      	uxtb	r3, r3
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d07d      	beq.n	80036c2 <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4a50      	ldr	r2, [pc, #320]	@ (800370c <HAL_ADC_ConfigChannel+0x6a0>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d130      	bne.n	8003632 <HAL_ADC_ConfigChannel+0x5c6>
 80035d0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80035d2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d12b      	bne.n	8003632 <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4a4a      	ldr	r2, [pc, #296]	@ (8003708 <HAL_ADC_ConfigChannel+0x69c>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	f040 8081 	bne.w	80036e8 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a45      	ldr	r2, [pc, #276]	@ (8003700 <HAL_ADC_ConfigChannel+0x694>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d004      	beq.n	80035fa <HAL_ADC_ConfigChannel+0x58e>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a43      	ldr	r2, [pc, #268]	@ (8003704 <HAL_ADC_ConfigChannel+0x698>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d101      	bne.n	80035fe <HAL_ADC_ConfigChannel+0x592>
 80035fa:	4a45      	ldr	r2, [pc, #276]	@ (8003710 <HAL_ADC_ConfigChannel+0x6a4>)
 80035fc:	e000      	b.n	8003600 <HAL_ADC_ConfigChannel+0x594>
 80035fe:	4a3f      	ldr	r2, [pc, #252]	@ (80036fc <HAL_ADC_ConfigChannel+0x690>)
 8003600:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003602:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003606:	4619      	mov	r1, r3
 8003608:	4610      	mov	r0, r2
 800360a:	f7ff fa14 	bl	8002a36 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800360e:	4b41      	ldr	r3, [pc, #260]	@ (8003714 <HAL_ADC_ConfigChannel+0x6a8>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	099b      	lsrs	r3, r3, #6
 8003614:	4a40      	ldr	r2, [pc, #256]	@ (8003718 <HAL_ADC_ConfigChannel+0x6ac>)
 8003616:	fba2 2303 	umull	r2, r3, r2, r3
 800361a:	099b      	lsrs	r3, r3, #6
 800361c:	3301      	adds	r3, #1
 800361e:	005b      	lsls	r3, r3, #1
 8003620:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003622:	e002      	b.n	800362a <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	3b01      	subs	r3, #1
 8003628:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800362a:	68bb      	ldr	r3, [r7, #8]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d1f9      	bne.n	8003624 <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003630:	e05a      	b.n	80036e8 <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a39      	ldr	r2, [pc, #228]	@ (800371c <HAL_ADC_ConfigChannel+0x6b0>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d11e      	bne.n	800367a <HAL_ADC_ConfigChannel+0x60e>
 800363c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800363e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003642:	2b00      	cmp	r3, #0
 8003644:	d119      	bne.n	800367a <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a2f      	ldr	r2, [pc, #188]	@ (8003708 <HAL_ADC_ConfigChannel+0x69c>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d14b      	bne.n	80036e8 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a2a      	ldr	r2, [pc, #168]	@ (8003700 <HAL_ADC_ConfigChannel+0x694>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d004      	beq.n	8003664 <HAL_ADC_ConfigChannel+0x5f8>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4a29      	ldr	r2, [pc, #164]	@ (8003704 <HAL_ADC_ConfigChannel+0x698>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d101      	bne.n	8003668 <HAL_ADC_ConfigChannel+0x5fc>
 8003664:	4a2a      	ldr	r2, [pc, #168]	@ (8003710 <HAL_ADC_ConfigChannel+0x6a4>)
 8003666:	e000      	b.n	800366a <HAL_ADC_ConfigChannel+0x5fe>
 8003668:	4a24      	ldr	r2, [pc, #144]	@ (80036fc <HAL_ADC_ConfigChannel+0x690>)
 800366a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800366c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003670:	4619      	mov	r1, r3
 8003672:	4610      	mov	r0, r2
 8003674:	f7ff f9df 	bl	8002a36 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003678:	e036      	b.n	80036e8 <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a28      	ldr	r2, [pc, #160]	@ (8003720 <HAL_ADC_ConfigChannel+0x6b4>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d131      	bne.n	80036e8 <HAL_ADC_ConfigChannel+0x67c>
 8003684:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003686:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800368a:	2b00      	cmp	r3, #0
 800368c:	d12c      	bne.n	80036e8 <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a1d      	ldr	r2, [pc, #116]	@ (8003708 <HAL_ADC_ConfigChannel+0x69c>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d127      	bne.n	80036e8 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a18      	ldr	r2, [pc, #96]	@ (8003700 <HAL_ADC_ConfigChannel+0x694>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d004      	beq.n	80036ac <HAL_ADC_ConfigChannel+0x640>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a17      	ldr	r2, [pc, #92]	@ (8003704 <HAL_ADC_ConfigChannel+0x698>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d101      	bne.n	80036b0 <HAL_ADC_ConfigChannel+0x644>
 80036ac:	4a18      	ldr	r2, [pc, #96]	@ (8003710 <HAL_ADC_ConfigChannel+0x6a4>)
 80036ae:	e000      	b.n	80036b2 <HAL_ADC_ConfigChannel+0x646>
 80036b0:	4a12      	ldr	r2, [pc, #72]	@ (80036fc <HAL_ADC_ConfigChannel+0x690>)
 80036b2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80036b4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80036b8:	4619      	mov	r1, r3
 80036ba:	4610      	mov	r0, r2
 80036bc:	f7ff f9bb 	bl	8002a36 <LL_ADC_SetCommonPathInternalCh>
 80036c0:	e012      	b.n	80036e8 <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036c6:	f043 0220 	orr.w	r2, r3, #32
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 80036ce:	2301      	movs	r3, #1
 80036d0:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80036d4:	e008      	b.n	80036e8 <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036da:	f043 0220 	orr.w	r2, r3, #32
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80036e2:	2301      	movs	r3, #1
 80036e4:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2200      	movs	r2, #0
 80036ec:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80036f0:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80036f4:	4618      	mov	r0, r3
 80036f6:	3784      	adds	r7, #132	@ 0x84
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bd90      	pop	{r4, r7, pc}
 80036fc:	58026300 	.word	0x58026300
 8003700:	40022000 	.word	0x40022000
 8003704:	40022100 	.word	0x40022100
 8003708:	58026000 	.word	0x58026000
 800370c:	cb840000 	.word	0xcb840000
 8003710:	40022300 	.word	0x40022300
 8003714:	24000000 	.word	0x24000000
 8003718:	053e2d63 	.word	0x053e2d63
 800371c:	c7520000 	.word	0xc7520000
 8003720:	cfb80000 	.word	0xcfb80000

08003724 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b084      	sub	sp, #16
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a7a      	ldr	r2, [pc, #488]	@ (800391c <ADC_ConfigureBoostMode+0x1f8>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d004      	beq.n	8003740 <ADC_ConfigureBoostMode+0x1c>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4a79      	ldr	r2, [pc, #484]	@ (8003920 <ADC_ConfigureBoostMode+0x1fc>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d109      	bne.n	8003754 <ADC_ConfigureBoostMode+0x30>
 8003740:	4b78      	ldr	r3, [pc, #480]	@ (8003924 <ADC_ConfigureBoostMode+0x200>)
 8003742:	689b      	ldr	r3, [r3, #8]
 8003744:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003748:	2b00      	cmp	r3, #0
 800374a:	bf14      	ite	ne
 800374c:	2301      	movne	r3, #1
 800374e:	2300      	moveq	r3, #0
 8003750:	b2db      	uxtb	r3, r3
 8003752:	e008      	b.n	8003766 <ADC_ConfigureBoostMode+0x42>
 8003754:	4b74      	ldr	r3, [pc, #464]	@ (8003928 <ADC_ConfigureBoostMode+0x204>)
 8003756:	689b      	ldr	r3, [r3, #8]
 8003758:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800375c:	2b00      	cmp	r3, #0
 800375e:	bf14      	ite	ne
 8003760:	2301      	movne	r3, #1
 8003762:	2300      	moveq	r3, #0
 8003764:	b2db      	uxtb	r3, r3
 8003766:	2b00      	cmp	r3, #0
 8003768:	d01c      	beq.n	80037a4 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800376a:	f005 f8fb 	bl	8008964 <HAL_RCC_GetHCLKFreq>
 800376e:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003778:	d010      	beq.n	800379c <ADC_ConfigureBoostMode+0x78>
 800377a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800377e:	d873      	bhi.n	8003868 <ADC_ConfigureBoostMode+0x144>
 8003780:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003784:	d002      	beq.n	800378c <ADC_ConfigureBoostMode+0x68>
 8003786:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800378a:	d16d      	bne.n	8003868 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	0c1b      	lsrs	r3, r3, #16
 8003792:	68fa      	ldr	r2, [r7, #12]
 8003794:	fbb2 f3f3 	udiv	r3, r2, r3
 8003798:	60fb      	str	r3, [r7, #12]
        break;
 800379a:	e068      	b.n	800386e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	089b      	lsrs	r3, r3, #2
 80037a0:	60fb      	str	r3, [r7, #12]
        break;
 80037a2:	e064      	b.n	800386e <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80037a4:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80037a8:	f04f 0100 	mov.w	r1, #0
 80037ac:	f006 fb40 	bl	8009e30 <HAL_RCCEx_GetPeriphCLKFreq>
 80037b0:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 80037ba:	d051      	beq.n	8003860 <ADC_ConfigureBoostMode+0x13c>
 80037bc:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 80037c0:	d854      	bhi.n	800386c <ADC_ConfigureBoostMode+0x148>
 80037c2:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 80037c6:	d047      	beq.n	8003858 <ADC_ConfigureBoostMode+0x134>
 80037c8:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 80037cc:	d84e      	bhi.n	800386c <ADC_ConfigureBoostMode+0x148>
 80037ce:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80037d2:	d03d      	beq.n	8003850 <ADC_ConfigureBoostMode+0x12c>
 80037d4:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80037d8:	d848      	bhi.n	800386c <ADC_ConfigureBoostMode+0x148>
 80037da:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80037de:	d033      	beq.n	8003848 <ADC_ConfigureBoostMode+0x124>
 80037e0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80037e4:	d842      	bhi.n	800386c <ADC_ConfigureBoostMode+0x148>
 80037e6:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80037ea:	d029      	beq.n	8003840 <ADC_ConfigureBoostMode+0x11c>
 80037ec:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80037f0:	d83c      	bhi.n	800386c <ADC_ConfigureBoostMode+0x148>
 80037f2:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80037f6:	d01a      	beq.n	800382e <ADC_ConfigureBoostMode+0x10a>
 80037f8:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80037fc:	d836      	bhi.n	800386c <ADC_ConfigureBoostMode+0x148>
 80037fe:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8003802:	d014      	beq.n	800382e <ADC_ConfigureBoostMode+0x10a>
 8003804:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8003808:	d830      	bhi.n	800386c <ADC_ConfigureBoostMode+0x148>
 800380a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800380e:	d00e      	beq.n	800382e <ADC_ConfigureBoostMode+0x10a>
 8003810:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003814:	d82a      	bhi.n	800386c <ADC_ConfigureBoostMode+0x148>
 8003816:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800381a:	d008      	beq.n	800382e <ADC_ConfigureBoostMode+0x10a>
 800381c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003820:	d824      	bhi.n	800386c <ADC_ConfigureBoostMode+0x148>
 8003822:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003826:	d002      	beq.n	800382e <ADC_ConfigureBoostMode+0x10a>
 8003828:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800382c:	d11e      	bne.n	800386c <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	0c9b      	lsrs	r3, r3, #18
 8003834:	005b      	lsls	r3, r3, #1
 8003836:	68fa      	ldr	r2, [r7, #12]
 8003838:	fbb2 f3f3 	udiv	r3, r2, r3
 800383c:	60fb      	str	r3, [r7, #12]
        break;
 800383e:	e016      	b.n	800386e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	091b      	lsrs	r3, r3, #4
 8003844:	60fb      	str	r3, [r7, #12]
        break;
 8003846:	e012      	b.n	800386e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	095b      	lsrs	r3, r3, #5
 800384c:	60fb      	str	r3, [r7, #12]
        break;
 800384e:	e00e      	b.n	800386e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	099b      	lsrs	r3, r3, #6
 8003854:	60fb      	str	r3, [r7, #12]
        break;
 8003856:	e00a      	b.n	800386e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	09db      	lsrs	r3, r3, #7
 800385c:	60fb      	str	r3, [r7, #12]
        break;
 800385e:	e006      	b.n	800386e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	0a1b      	lsrs	r3, r3, #8
 8003864:	60fb      	str	r3, [r7, #12]
        break;
 8003866:	e002      	b.n	800386e <ADC_ConfigureBoostMode+0x14a>
        break;
 8003868:	bf00      	nop
 800386a:	e000      	b.n	800386e <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 800386c:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 800386e:	f7ff f8c3 	bl	80029f8 <HAL_GetREVID>
 8003872:	4603      	mov	r3, r0
 8003874:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003878:	4293      	cmp	r3, r2
 800387a:	d815      	bhi.n	80038a8 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	4a2b      	ldr	r2, [pc, #172]	@ (800392c <ADC_ConfigureBoostMode+0x208>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d908      	bls.n	8003896 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	689a      	ldr	r2, [r3, #8]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003892:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8003894:	e03e      	b.n	8003914 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	689a      	ldr	r2, [r3, #8]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80038a4:	609a      	str	r2, [r3, #8]
}
 80038a6:	e035      	b.n	8003914 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	085b      	lsrs	r3, r3, #1
 80038ac:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	4a1f      	ldr	r2, [pc, #124]	@ (8003930 <ADC_ConfigureBoostMode+0x20c>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d808      	bhi.n	80038c8 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	689a      	ldr	r2, [r3, #8]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80038c4:	609a      	str	r2, [r3, #8]
}
 80038c6:	e025      	b.n	8003914 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	4a1a      	ldr	r2, [pc, #104]	@ (8003934 <ADC_ConfigureBoostMode+0x210>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d80a      	bhi.n	80038e6 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	689b      	ldr	r3, [r3, #8]
 80038d6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80038e2:	609a      	str	r2, [r3, #8]
}
 80038e4:	e016      	b.n	8003914 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	4a13      	ldr	r2, [pc, #76]	@ (8003938 <ADC_ConfigureBoostMode+0x214>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d80a      	bhi.n	8003904 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	689b      	ldr	r3, [r3, #8]
 80038f4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003900:	609a      	str	r2, [r3, #8]
}
 8003902:	e007      	b.n	8003914 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	689a      	ldr	r2, [r3, #8]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8003912:	609a      	str	r2, [r3, #8]
}
 8003914:	bf00      	nop
 8003916:	3710      	adds	r7, #16
 8003918:	46bd      	mov	sp, r7
 800391a:	bd80      	pop	{r7, pc}
 800391c:	40022000 	.word	0x40022000
 8003920:	40022100 	.word	0x40022100
 8003924:	40022300 	.word	0x40022300
 8003928:	58026300 	.word	0x58026300
 800392c:	01312d00 	.word	0x01312d00
 8003930:	005f5e10 	.word	0x005f5e10
 8003934:	00bebc20 	.word	0x00bebc20
 8003938:	017d7840 	.word	0x017d7840

0800393c <LL_ADC_IsEnabled>:
{
 800393c:	b480      	push	{r7}
 800393e:	b083      	sub	sp, #12
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	689b      	ldr	r3, [r3, #8]
 8003948:	f003 0301 	and.w	r3, r3, #1
 800394c:	2b01      	cmp	r3, #1
 800394e:	d101      	bne.n	8003954 <LL_ADC_IsEnabled+0x18>
 8003950:	2301      	movs	r3, #1
 8003952:	e000      	b.n	8003956 <LL_ADC_IsEnabled+0x1a>
 8003954:	2300      	movs	r3, #0
}
 8003956:	4618      	mov	r0, r3
 8003958:	370c      	adds	r7, #12
 800395a:	46bd      	mov	sp, r7
 800395c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003960:	4770      	bx	lr

08003962 <LL_ADC_REG_IsConversionOngoing>:
{
 8003962:	b480      	push	{r7}
 8003964:	b083      	sub	sp, #12
 8003966:	af00      	add	r7, sp, #0
 8003968:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	689b      	ldr	r3, [r3, #8]
 800396e:	f003 0304 	and.w	r3, r3, #4
 8003972:	2b04      	cmp	r3, #4
 8003974:	d101      	bne.n	800397a <LL_ADC_REG_IsConversionOngoing+0x18>
 8003976:	2301      	movs	r3, #1
 8003978:	e000      	b.n	800397c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800397a:	2300      	movs	r3, #0
}
 800397c:	4618      	mov	r0, r3
 800397e:	370c      	adds	r7, #12
 8003980:	46bd      	mov	sp, r7
 8003982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003986:	4770      	bx	lr

08003988 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003988:	b590      	push	{r4, r7, lr}
 800398a:	b09f      	sub	sp, #124	@ 0x7c
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
 8003990:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003992:	2300      	movs	r3, #0
 8003994:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800399e:	2b01      	cmp	r3, #1
 80039a0:	d101      	bne.n	80039a6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80039a2:	2302      	movs	r3, #2
 80039a4:	e0be      	b.n	8003b24 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2201      	movs	r2, #1
 80039aa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80039ae:	2300      	movs	r3, #0
 80039b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80039b2:	2300      	movs	r3, #0
 80039b4:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4a5c      	ldr	r2, [pc, #368]	@ (8003b2c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d102      	bne.n	80039c6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80039c0:	4b5b      	ldr	r3, [pc, #364]	@ (8003b30 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80039c2:	60bb      	str	r3, [r7, #8]
 80039c4:	e001      	b.n	80039ca <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80039c6:	2300      	movs	r3, #0
 80039c8:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80039ca:	68bb      	ldr	r3, [r7, #8]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d10b      	bne.n	80039e8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039d4:	f043 0220 	orr.w	r2, r3, #32
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2200      	movs	r2, #0
 80039e0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 80039e4:	2301      	movs	r3, #1
 80039e6:	e09d      	b.n	8003b24 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	4618      	mov	r0, r3
 80039ec:	f7ff ffb9 	bl	8003962 <LL_ADC_REG_IsConversionOngoing>
 80039f0:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4618      	mov	r0, r3
 80039f8:	f7ff ffb3 	bl	8003962 <LL_ADC_REG_IsConversionOngoing>
 80039fc:	4603      	mov	r3, r0
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d17f      	bne.n	8003b02 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003a02:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d17c      	bne.n	8003b02 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a47      	ldr	r2, [pc, #284]	@ (8003b2c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d004      	beq.n	8003a1c <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a46      	ldr	r2, [pc, #280]	@ (8003b30 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d101      	bne.n	8003a20 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8003a1c:	4b45      	ldr	r3, [pc, #276]	@ (8003b34 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003a1e:	e000      	b.n	8003a22 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8003a20:	4b45      	ldr	r3, [pc, #276]	@ (8003b38 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003a22:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d039      	beq.n	8003aa0 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8003a2c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003a2e:	689b      	ldr	r3, [r3, #8]
 8003a30:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	431a      	orrs	r2, r3
 8003a3a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003a3c:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a3a      	ldr	r2, [pc, #232]	@ (8003b2c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d004      	beq.n	8003a52 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a38      	ldr	r2, [pc, #224]	@ (8003b30 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d10e      	bne.n	8003a70 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8003a52:	4836      	ldr	r0, [pc, #216]	@ (8003b2c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003a54:	f7ff ff72 	bl	800393c <LL_ADC_IsEnabled>
 8003a58:	4604      	mov	r4, r0
 8003a5a:	4835      	ldr	r0, [pc, #212]	@ (8003b30 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003a5c:	f7ff ff6e 	bl	800393c <LL_ADC_IsEnabled>
 8003a60:	4603      	mov	r3, r0
 8003a62:	4323      	orrs	r3, r4
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	bf0c      	ite	eq
 8003a68:	2301      	moveq	r3, #1
 8003a6a:	2300      	movne	r3, #0
 8003a6c:	b2db      	uxtb	r3, r3
 8003a6e:	e008      	b.n	8003a82 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8003a70:	4832      	ldr	r0, [pc, #200]	@ (8003b3c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8003a72:	f7ff ff63 	bl	800393c <LL_ADC_IsEnabled>
 8003a76:	4603      	mov	r3, r0
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	bf0c      	ite	eq
 8003a7c:	2301      	moveq	r3, #1
 8003a7e:	2300      	movne	r3, #0
 8003a80:	b2db      	uxtb	r3, r3
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d047      	beq.n	8003b16 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003a86:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003a88:	689a      	ldr	r2, [r3, #8]
 8003a8a:	4b2d      	ldr	r3, [pc, #180]	@ (8003b40 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8003a8c:	4013      	ands	r3, r2
 8003a8e:	683a      	ldr	r2, [r7, #0]
 8003a90:	6811      	ldr	r1, [r2, #0]
 8003a92:	683a      	ldr	r2, [r7, #0]
 8003a94:	6892      	ldr	r2, [r2, #8]
 8003a96:	430a      	orrs	r2, r1
 8003a98:	431a      	orrs	r2, r3
 8003a9a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003a9c:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003a9e:	e03a      	b.n	8003b16 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8003aa0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003aa2:	689b      	ldr	r3, [r3, #8]
 8003aa4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003aa8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003aaa:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a1e      	ldr	r2, [pc, #120]	@ (8003b2c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d004      	beq.n	8003ac0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4a1d      	ldr	r2, [pc, #116]	@ (8003b30 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d10e      	bne.n	8003ade <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8003ac0:	481a      	ldr	r0, [pc, #104]	@ (8003b2c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003ac2:	f7ff ff3b 	bl	800393c <LL_ADC_IsEnabled>
 8003ac6:	4604      	mov	r4, r0
 8003ac8:	4819      	ldr	r0, [pc, #100]	@ (8003b30 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003aca:	f7ff ff37 	bl	800393c <LL_ADC_IsEnabled>
 8003ace:	4603      	mov	r3, r0
 8003ad0:	4323      	orrs	r3, r4
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	bf0c      	ite	eq
 8003ad6:	2301      	moveq	r3, #1
 8003ad8:	2300      	movne	r3, #0
 8003ada:	b2db      	uxtb	r3, r3
 8003adc:	e008      	b.n	8003af0 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8003ade:	4817      	ldr	r0, [pc, #92]	@ (8003b3c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8003ae0:	f7ff ff2c 	bl	800393c <LL_ADC_IsEnabled>
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	bf0c      	ite	eq
 8003aea:	2301      	moveq	r3, #1
 8003aec:	2300      	movne	r3, #0
 8003aee:	b2db      	uxtb	r3, r3
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d010      	beq.n	8003b16 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003af4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003af6:	689a      	ldr	r2, [r3, #8]
 8003af8:	4b11      	ldr	r3, [pc, #68]	@ (8003b40 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8003afa:	4013      	ands	r3, r2
 8003afc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003afe:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003b00:	e009      	b.n	8003b16 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b06:	f043 0220 	orr.w	r2, r3, #32
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8003b14:	e000      	b.n	8003b18 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003b16:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8003b20:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8003b24:	4618      	mov	r0, r3
 8003b26:	377c      	adds	r7, #124	@ 0x7c
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	bd90      	pop	{r4, r7, pc}
 8003b2c:	40022000 	.word	0x40022000
 8003b30:	40022100 	.word	0x40022100
 8003b34:	40022300 	.word	0x40022300
 8003b38:	58026300 	.word	0x58026300
 8003b3c:	58026000 	.word	0x58026000
 8003b40:	fffff0e0 	.word	0xfffff0e0

08003b44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b44:	b480      	push	{r7}
 8003b46:	b085      	sub	sp, #20
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	f003 0307 	and.w	r3, r3, #7
 8003b52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003b54:	4b0b      	ldr	r3, [pc, #44]	@ (8003b84 <__NVIC_SetPriorityGrouping+0x40>)
 8003b56:	68db      	ldr	r3, [r3, #12]
 8003b58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003b5a:	68ba      	ldr	r2, [r7, #8]
 8003b5c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003b60:	4013      	ands	r3, r2
 8003b62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003b6c:	4b06      	ldr	r3, [pc, #24]	@ (8003b88 <__NVIC_SetPriorityGrouping+0x44>)
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003b72:	4a04      	ldr	r2, [pc, #16]	@ (8003b84 <__NVIC_SetPriorityGrouping+0x40>)
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	60d3      	str	r3, [r2, #12]
}
 8003b78:	bf00      	nop
 8003b7a:	3714      	adds	r7, #20
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b82:	4770      	bx	lr
 8003b84:	e000ed00 	.word	0xe000ed00
 8003b88:	05fa0000 	.word	0x05fa0000

08003b8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003b90:	4b04      	ldr	r3, [pc, #16]	@ (8003ba4 <__NVIC_GetPriorityGrouping+0x18>)
 8003b92:	68db      	ldr	r3, [r3, #12]
 8003b94:	0a1b      	lsrs	r3, r3, #8
 8003b96:	f003 0307 	and.w	r3, r3, #7
}
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba2:	4770      	bx	lr
 8003ba4:	e000ed00 	.word	0xe000ed00

08003ba8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	b083      	sub	sp, #12
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	4603      	mov	r3, r0
 8003bb0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003bb2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	db0b      	blt.n	8003bd2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003bba:	88fb      	ldrh	r3, [r7, #6]
 8003bbc:	f003 021f 	and.w	r2, r3, #31
 8003bc0:	4907      	ldr	r1, [pc, #28]	@ (8003be0 <__NVIC_EnableIRQ+0x38>)
 8003bc2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003bc6:	095b      	lsrs	r3, r3, #5
 8003bc8:	2001      	movs	r0, #1
 8003bca:	fa00 f202 	lsl.w	r2, r0, r2
 8003bce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003bd2:	bf00      	nop
 8003bd4:	370c      	adds	r7, #12
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bdc:	4770      	bx	lr
 8003bde:	bf00      	nop
 8003be0:	e000e100 	.word	0xe000e100

08003be4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003be4:	b480      	push	{r7}
 8003be6:	b083      	sub	sp, #12
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	4603      	mov	r3, r0
 8003bec:	6039      	str	r1, [r7, #0]
 8003bee:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003bf0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	db0a      	blt.n	8003c0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	b2da      	uxtb	r2, r3
 8003bfc:	490c      	ldr	r1, [pc, #48]	@ (8003c30 <__NVIC_SetPriority+0x4c>)
 8003bfe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003c02:	0112      	lsls	r2, r2, #4
 8003c04:	b2d2      	uxtb	r2, r2
 8003c06:	440b      	add	r3, r1
 8003c08:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003c0c:	e00a      	b.n	8003c24 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	b2da      	uxtb	r2, r3
 8003c12:	4908      	ldr	r1, [pc, #32]	@ (8003c34 <__NVIC_SetPriority+0x50>)
 8003c14:	88fb      	ldrh	r3, [r7, #6]
 8003c16:	f003 030f 	and.w	r3, r3, #15
 8003c1a:	3b04      	subs	r3, #4
 8003c1c:	0112      	lsls	r2, r2, #4
 8003c1e:	b2d2      	uxtb	r2, r2
 8003c20:	440b      	add	r3, r1
 8003c22:	761a      	strb	r2, [r3, #24]
}
 8003c24:	bf00      	nop
 8003c26:	370c      	adds	r7, #12
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2e:	4770      	bx	lr
 8003c30:	e000e100 	.word	0xe000e100
 8003c34:	e000ed00 	.word	0xe000ed00

08003c38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b089      	sub	sp, #36	@ 0x24
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	60f8      	str	r0, [r7, #12]
 8003c40:	60b9      	str	r1, [r7, #8]
 8003c42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	f003 0307 	and.w	r3, r3, #7
 8003c4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003c4c:	69fb      	ldr	r3, [r7, #28]
 8003c4e:	f1c3 0307 	rsb	r3, r3, #7
 8003c52:	2b04      	cmp	r3, #4
 8003c54:	bf28      	it	cs
 8003c56:	2304      	movcs	r3, #4
 8003c58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c5a:	69fb      	ldr	r3, [r7, #28]
 8003c5c:	3304      	adds	r3, #4
 8003c5e:	2b06      	cmp	r3, #6
 8003c60:	d902      	bls.n	8003c68 <NVIC_EncodePriority+0x30>
 8003c62:	69fb      	ldr	r3, [r7, #28]
 8003c64:	3b03      	subs	r3, #3
 8003c66:	e000      	b.n	8003c6a <NVIC_EncodePriority+0x32>
 8003c68:	2300      	movs	r3, #0
 8003c6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c6c:	f04f 32ff 	mov.w	r2, #4294967295
 8003c70:	69bb      	ldr	r3, [r7, #24]
 8003c72:	fa02 f303 	lsl.w	r3, r2, r3
 8003c76:	43da      	mvns	r2, r3
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	401a      	ands	r2, r3
 8003c7c:	697b      	ldr	r3, [r7, #20]
 8003c7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003c80:	f04f 31ff 	mov.w	r1, #4294967295
 8003c84:	697b      	ldr	r3, [r7, #20]
 8003c86:	fa01 f303 	lsl.w	r3, r1, r3
 8003c8a:	43d9      	mvns	r1, r3
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c90:	4313      	orrs	r3, r2
         );
}
 8003c92:	4618      	mov	r0, r3
 8003c94:	3724      	adds	r7, #36	@ 0x24
 8003c96:	46bd      	mov	sp, r7
 8003c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9c:	4770      	bx	lr
	...

08003ca0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b082      	sub	sp, #8
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	3b01      	subs	r3, #1
 8003cac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003cb0:	d301      	bcc.n	8003cb6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	e00f      	b.n	8003cd6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003cb6:	4a0a      	ldr	r2, [pc, #40]	@ (8003ce0 <SysTick_Config+0x40>)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	3b01      	subs	r3, #1
 8003cbc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003cbe:	210f      	movs	r1, #15
 8003cc0:	f04f 30ff 	mov.w	r0, #4294967295
 8003cc4:	f7ff ff8e 	bl	8003be4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003cc8:	4b05      	ldr	r3, [pc, #20]	@ (8003ce0 <SysTick_Config+0x40>)
 8003cca:	2200      	movs	r2, #0
 8003ccc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003cce:	4b04      	ldr	r3, [pc, #16]	@ (8003ce0 <SysTick_Config+0x40>)
 8003cd0:	2207      	movs	r2, #7
 8003cd2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003cd4:	2300      	movs	r3, #0
}
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	3708      	adds	r7, #8
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}
 8003cde:	bf00      	nop
 8003ce0:	e000e010 	.word	0xe000e010

08003ce4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b082      	sub	sp, #8
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003cec:	6878      	ldr	r0, [r7, #4]
 8003cee:	f7ff ff29 	bl	8003b44 <__NVIC_SetPriorityGrouping>
}
 8003cf2:	bf00      	nop
 8003cf4:	3708      	adds	r7, #8
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bd80      	pop	{r7, pc}

08003cfa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003cfa:	b580      	push	{r7, lr}
 8003cfc:	b086      	sub	sp, #24
 8003cfe:	af00      	add	r7, sp, #0
 8003d00:	4603      	mov	r3, r0
 8003d02:	60b9      	str	r1, [r7, #8]
 8003d04:	607a      	str	r2, [r7, #4]
 8003d06:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003d08:	f7ff ff40 	bl	8003b8c <__NVIC_GetPriorityGrouping>
 8003d0c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003d0e:	687a      	ldr	r2, [r7, #4]
 8003d10:	68b9      	ldr	r1, [r7, #8]
 8003d12:	6978      	ldr	r0, [r7, #20]
 8003d14:	f7ff ff90 	bl	8003c38 <NVIC_EncodePriority>
 8003d18:	4602      	mov	r2, r0
 8003d1a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003d1e:	4611      	mov	r1, r2
 8003d20:	4618      	mov	r0, r3
 8003d22:	f7ff ff5f 	bl	8003be4 <__NVIC_SetPriority>
}
 8003d26:	bf00      	nop
 8003d28:	3718      	adds	r7, #24
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bd80      	pop	{r7, pc}

08003d2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d2e:	b580      	push	{r7, lr}
 8003d30:	b082      	sub	sp, #8
 8003d32:	af00      	add	r7, sp, #0
 8003d34:	4603      	mov	r3, r0
 8003d36:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003d38:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	f7ff ff33 	bl	8003ba8 <__NVIC_EnableIRQ>
}
 8003d42:	bf00      	nop
 8003d44:	3708      	adds	r7, #8
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bd80      	pop	{r7, pc}

08003d4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003d4a:	b580      	push	{r7, lr}
 8003d4c:	b082      	sub	sp, #8
 8003d4e:	af00      	add	r7, sp, #0
 8003d50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003d52:	6878      	ldr	r0, [r7, #4]
 8003d54:	f7ff ffa4 	bl	8003ca0 <SysTick_Config>
 8003d58:	4603      	mov	r3, r0
}
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	3708      	adds	r7, #8
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bd80      	pop	{r7, pc}
	...

08003d64 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8003d64:	b480      	push	{r7}
 8003d66:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8003d68:	4b07      	ldr	r3, [pc, #28]	@ (8003d88 <HAL_GetCurrentCPUID+0x24>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	091b      	lsrs	r3, r3, #4
 8003d6e:	f003 030f 	and.w	r3, r3, #15
 8003d72:	2b07      	cmp	r3, #7
 8003d74:	d101      	bne.n	8003d7a <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 8003d76:	2303      	movs	r3, #3
 8003d78:	e000      	b.n	8003d7c <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 8003d7a:	2301      	movs	r3, #1
  }
}
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d84:	4770      	bx	lr
 8003d86:	bf00      	nop
 8003d88:	e000ed00 	.word	0xe000ed00

08003d8c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b086      	sub	sp, #24
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8003d94:	f7fe fe00 	bl	8002998 <HAL_GetTick>
 8003d98:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d101      	bne.n	8003da4 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8003da0:	2301      	movs	r3, #1
 8003da2:	e316      	b.n	80043d2 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a66      	ldr	r2, [pc, #408]	@ (8003f44 <HAL_DMA_Init+0x1b8>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d04a      	beq.n	8003e44 <HAL_DMA_Init+0xb8>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4a65      	ldr	r2, [pc, #404]	@ (8003f48 <HAL_DMA_Init+0x1bc>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d045      	beq.n	8003e44 <HAL_DMA_Init+0xb8>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4a63      	ldr	r2, [pc, #396]	@ (8003f4c <HAL_DMA_Init+0x1c0>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d040      	beq.n	8003e44 <HAL_DMA_Init+0xb8>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a62      	ldr	r2, [pc, #392]	@ (8003f50 <HAL_DMA_Init+0x1c4>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d03b      	beq.n	8003e44 <HAL_DMA_Init+0xb8>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a60      	ldr	r2, [pc, #384]	@ (8003f54 <HAL_DMA_Init+0x1c8>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d036      	beq.n	8003e44 <HAL_DMA_Init+0xb8>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a5f      	ldr	r2, [pc, #380]	@ (8003f58 <HAL_DMA_Init+0x1cc>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d031      	beq.n	8003e44 <HAL_DMA_Init+0xb8>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a5d      	ldr	r2, [pc, #372]	@ (8003f5c <HAL_DMA_Init+0x1d0>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d02c      	beq.n	8003e44 <HAL_DMA_Init+0xb8>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4a5c      	ldr	r2, [pc, #368]	@ (8003f60 <HAL_DMA_Init+0x1d4>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d027      	beq.n	8003e44 <HAL_DMA_Init+0xb8>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a5a      	ldr	r2, [pc, #360]	@ (8003f64 <HAL_DMA_Init+0x1d8>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d022      	beq.n	8003e44 <HAL_DMA_Init+0xb8>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4a59      	ldr	r2, [pc, #356]	@ (8003f68 <HAL_DMA_Init+0x1dc>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d01d      	beq.n	8003e44 <HAL_DMA_Init+0xb8>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a57      	ldr	r2, [pc, #348]	@ (8003f6c <HAL_DMA_Init+0x1e0>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d018      	beq.n	8003e44 <HAL_DMA_Init+0xb8>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a56      	ldr	r2, [pc, #344]	@ (8003f70 <HAL_DMA_Init+0x1e4>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d013      	beq.n	8003e44 <HAL_DMA_Init+0xb8>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a54      	ldr	r2, [pc, #336]	@ (8003f74 <HAL_DMA_Init+0x1e8>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d00e      	beq.n	8003e44 <HAL_DMA_Init+0xb8>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a53      	ldr	r2, [pc, #332]	@ (8003f78 <HAL_DMA_Init+0x1ec>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d009      	beq.n	8003e44 <HAL_DMA_Init+0xb8>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a51      	ldr	r2, [pc, #324]	@ (8003f7c <HAL_DMA_Init+0x1f0>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d004      	beq.n	8003e44 <HAL_DMA_Init+0xb8>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a50      	ldr	r2, [pc, #320]	@ (8003f80 <HAL_DMA_Init+0x1f4>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d101      	bne.n	8003e48 <HAL_DMA_Init+0xbc>
 8003e44:	2301      	movs	r3, #1
 8003e46:	e000      	b.n	8003e4a <HAL_DMA_Init+0xbe>
 8003e48:	2300      	movs	r3, #0
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	f000 813b 	beq.w	80040c6 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2202      	movs	r2, #2
 8003e54:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4a37      	ldr	r2, [pc, #220]	@ (8003f44 <HAL_DMA_Init+0x1b8>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d04a      	beq.n	8003f00 <HAL_DMA_Init+0x174>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4a36      	ldr	r2, [pc, #216]	@ (8003f48 <HAL_DMA_Init+0x1bc>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d045      	beq.n	8003f00 <HAL_DMA_Init+0x174>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a34      	ldr	r2, [pc, #208]	@ (8003f4c <HAL_DMA_Init+0x1c0>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d040      	beq.n	8003f00 <HAL_DMA_Init+0x174>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4a33      	ldr	r2, [pc, #204]	@ (8003f50 <HAL_DMA_Init+0x1c4>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d03b      	beq.n	8003f00 <HAL_DMA_Init+0x174>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a31      	ldr	r2, [pc, #196]	@ (8003f54 <HAL_DMA_Init+0x1c8>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d036      	beq.n	8003f00 <HAL_DMA_Init+0x174>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4a30      	ldr	r2, [pc, #192]	@ (8003f58 <HAL_DMA_Init+0x1cc>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d031      	beq.n	8003f00 <HAL_DMA_Init+0x174>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4a2e      	ldr	r2, [pc, #184]	@ (8003f5c <HAL_DMA_Init+0x1d0>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d02c      	beq.n	8003f00 <HAL_DMA_Init+0x174>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4a2d      	ldr	r2, [pc, #180]	@ (8003f60 <HAL_DMA_Init+0x1d4>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d027      	beq.n	8003f00 <HAL_DMA_Init+0x174>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a2b      	ldr	r2, [pc, #172]	@ (8003f64 <HAL_DMA_Init+0x1d8>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d022      	beq.n	8003f00 <HAL_DMA_Init+0x174>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4a2a      	ldr	r2, [pc, #168]	@ (8003f68 <HAL_DMA_Init+0x1dc>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d01d      	beq.n	8003f00 <HAL_DMA_Init+0x174>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a28      	ldr	r2, [pc, #160]	@ (8003f6c <HAL_DMA_Init+0x1e0>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d018      	beq.n	8003f00 <HAL_DMA_Init+0x174>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4a27      	ldr	r2, [pc, #156]	@ (8003f70 <HAL_DMA_Init+0x1e4>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d013      	beq.n	8003f00 <HAL_DMA_Init+0x174>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a25      	ldr	r2, [pc, #148]	@ (8003f74 <HAL_DMA_Init+0x1e8>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d00e      	beq.n	8003f00 <HAL_DMA_Init+0x174>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4a24      	ldr	r2, [pc, #144]	@ (8003f78 <HAL_DMA_Init+0x1ec>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d009      	beq.n	8003f00 <HAL_DMA_Init+0x174>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a22      	ldr	r2, [pc, #136]	@ (8003f7c <HAL_DMA_Init+0x1f0>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d004      	beq.n	8003f00 <HAL_DMA_Init+0x174>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4a21      	ldr	r2, [pc, #132]	@ (8003f80 <HAL_DMA_Init+0x1f4>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d108      	bne.n	8003f12 <HAL_DMA_Init+0x186>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	681a      	ldr	r2, [r3, #0]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f022 0201 	bic.w	r2, r2, #1
 8003f0e:	601a      	str	r2, [r3, #0]
 8003f10:	e007      	b.n	8003f22 <HAL_DMA_Init+0x196>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	681a      	ldr	r2, [r3, #0]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f022 0201 	bic.w	r2, r2, #1
 8003f20:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003f22:	e02f      	b.n	8003f84 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003f24:	f7fe fd38 	bl	8002998 <HAL_GetTick>
 8003f28:	4602      	mov	r2, r0
 8003f2a:	693b      	ldr	r3, [r7, #16]
 8003f2c:	1ad3      	subs	r3, r2, r3
 8003f2e:	2b05      	cmp	r3, #5
 8003f30:	d928      	bls.n	8003f84 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2220      	movs	r2, #32
 8003f36:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2203      	movs	r2, #3
 8003f3c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8003f40:	2301      	movs	r3, #1
 8003f42:	e246      	b.n	80043d2 <HAL_DMA_Init+0x646>
 8003f44:	40020010 	.word	0x40020010
 8003f48:	40020028 	.word	0x40020028
 8003f4c:	40020040 	.word	0x40020040
 8003f50:	40020058 	.word	0x40020058
 8003f54:	40020070 	.word	0x40020070
 8003f58:	40020088 	.word	0x40020088
 8003f5c:	400200a0 	.word	0x400200a0
 8003f60:	400200b8 	.word	0x400200b8
 8003f64:	40020410 	.word	0x40020410
 8003f68:	40020428 	.word	0x40020428
 8003f6c:	40020440 	.word	0x40020440
 8003f70:	40020458 	.word	0x40020458
 8003f74:	40020470 	.word	0x40020470
 8003f78:	40020488 	.word	0x40020488
 8003f7c:	400204a0 	.word	0x400204a0
 8003f80:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f003 0301 	and.w	r3, r3, #1
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d1c8      	bne.n	8003f24 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003f9a:	697a      	ldr	r2, [r7, #20]
 8003f9c:	4b83      	ldr	r3, [pc, #524]	@ (80041ac <HAL_DMA_Init+0x420>)
 8003f9e:	4013      	ands	r3, r2
 8003fa0:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8003faa:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	691b      	ldr	r3, [r3, #16]
 8003fb0:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003fb6:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	699b      	ldr	r3, [r3, #24]
 8003fbc:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003fc2:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6a1b      	ldr	r3, [r3, #32]
 8003fc8:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8003fca:	697a      	ldr	r2, [r7, #20]
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fd4:	2b04      	cmp	r3, #4
 8003fd6:	d107      	bne.n	8003fe8 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	697a      	ldr	r2, [r7, #20]
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8003fe8:	4b71      	ldr	r3, [pc, #452]	@ (80041b0 <HAL_DMA_Init+0x424>)
 8003fea:	681a      	ldr	r2, [r3, #0]
 8003fec:	4b71      	ldr	r3, [pc, #452]	@ (80041b4 <HAL_DMA_Init+0x428>)
 8003fee:	4013      	ands	r3, r2
 8003ff0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003ff4:	d328      	bcc.n	8004048 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	2b28      	cmp	r3, #40	@ 0x28
 8003ffc:	d903      	bls.n	8004006 <HAL_DMA_Init+0x27a>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	2b2e      	cmp	r3, #46	@ 0x2e
 8004004:	d917      	bls.n	8004036 <HAL_DMA_Init+0x2aa>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	2b3e      	cmp	r3, #62	@ 0x3e
 800400c:	d903      	bls.n	8004016 <HAL_DMA_Init+0x28a>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	2b42      	cmp	r3, #66	@ 0x42
 8004014:	d90f      	bls.n	8004036 <HAL_DMA_Init+0x2aa>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	2b46      	cmp	r3, #70	@ 0x46
 800401c:	d903      	bls.n	8004026 <HAL_DMA_Init+0x29a>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	2b48      	cmp	r3, #72	@ 0x48
 8004024:	d907      	bls.n	8004036 <HAL_DMA_Init+0x2aa>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	2b4e      	cmp	r3, #78	@ 0x4e
 800402c:	d905      	bls.n	800403a <HAL_DMA_Init+0x2ae>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	2b52      	cmp	r3, #82	@ 0x52
 8004034:	d801      	bhi.n	800403a <HAL_DMA_Init+0x2ae>
 8004036:	2301      	movs	r3, #1
 8004038:	e000      	b.n	800403c <HAL_DMA_Init+0x2b0>
 800403a:	2300      	movs	r3, #0
 800403c:	2b00      	cmp	r3, #0
 800403e:	d003      	beq.n	8004048 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8004040:	697b      	ldr	r3, [r7, #20]
 8004042:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004046:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	697a      	ldr	r2, [r7, #20]
 800404e:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	695b      	ldr	r3, [r3, #20]
 8004056:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004058:	697b      	ldr	r3, [r7, #20]
 800405a:	f023 0307 	bic.w	r3, r3, #7
 800405e:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004064:	697a      	ldr	r2, [r7, #20]
 8004066:	4313      	orrs	r3, r2
 8004068:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800406e:	2b04      	cmp	r3, #4
 8004070:	d117      	bne.n	80040a2 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004076:	697a      	ldr	r2, [r7, #20]
 8004078:	4313      	orrs	r3, r2
 800407a:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004080:	2b00      	cmp	r3, #0
 8004082:	d00e      	beq.n	80040a2 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004084:	6878      	ldr	r0, [r7, #4]
 8004086:	f001 fdcf 	bl	8005c28 <DMA_CheckFifoParam>
 800408a:	4603      	mov	r3, r0
 800408c:	2b00      	cmp	r3, #0
 800408e:	d008      	beq.n	80040a2 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2240      	movs	r2, #64	@ 0x40
 8004094:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2201      	movs	r2, #1
 800409a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 800409e:	2301      	movs	r3, #1
 80040a0:	e197      	b.n	80043d2 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	697a      	ldr	r2, [r7, #20]
 80040a8:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80040aa:	6878      	ldr	r0, [r7, #4]
 80040ac:	f001 fd0a 	bl	8005ac4 <DMA_CalcBaseAndBitshift>
 80040b0:	4603      	mov	r3, r0
 80040b2:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040b8:	f003 031f 	and.w	r3, r3, #31
 80040bc:	223f      	movs	r2, #63	@ 0x3f
 80040be:	409a      	lsls	r2, r3
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	609a      	str	r2, [r3, #8]
 80040c4:	e0cd      	b.n	8004262 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4a3b      	ldr	r2, [pc, #236]	@ (80041b8 <HAL_DMA_Init+0x42c>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d022      	beq.n	8004116 <HAL_DMA_Init+0x38a>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a39      	ldr	r2, [pc, #228]	@ (80041bc <HAL_DMA_Init+0x430>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d01d      	beq.n	8004116 <HAL_DMA_Init+0x38a>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4a38      	ldr	r2, [pc, #224]	@ (80041c0 <HAL_DMA_Init+0x434>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d018      	beq.n	8004116 <HAL_DMA_Init+0x38a>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4a36      	ldr	r2, [pc, #216]	@ (80041c4 <HAL_DMA_Init+0x438>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d013      	beq.n	8004116 <HAL_DMA_Init+0x38a>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4a35      	ldr	r2, [pc, #212]	@ (80041c8 <HAL_DMA_Init+0x43c>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d00e      	beq.n	8004116 <HAL_DMA_Init+0x38a>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4a33      	ldr	r2, [pc, #204]	@ (80041cc <HAL_DMA_Init+0x440>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d009      	beq.n	8004116 <HAL_DMA_Init+0x38a>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4a32      	ldr	r2, [pc, #200]	@ (80041d0 <HAL_DMA_Init+0x444>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d004      	beq.n	8004116 <HAL_DMA_Init+0x38a>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a30      	ldr	r2, [pc, #192]	@ (80041d4 <HAL_DMA_Init+0x448>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d101      	bne.n	800411a <HAL_DMA_Init+0x38e>
 8004116:	2301      	movs	r3, #1
 8004118:	e000      	b.n	800411c <HAL_DMA_Init+0x390>
 800411a:	2300      	movs	r3, #0
 800411c:	2b00      	cmp	r3, #0
 800411e:	f000 8097 	beq.w	8004250 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a24      	ldr	r2, [pc, #144]	@ (80041b8 <HAL_DMA_Init+0x42c>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d021      	beq.n	8004170 <HAL_DMA_Init+0x3e4>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4a22      	ldr	r2, [pc, #136]	@ (80041bc <HAL_DMA_Init+0x430>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d01c      	beq.n	8004170 <HAL_DMA_Init+0x3e4>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4a21      	ldr	r2, [pc, #132]	@ (80041c0 <HAL_DMA_Init+0x434>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d017      	beq.n	8004170 <HAL_DMA_Init+0x3e4>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a1f      	ldr	r2, [pc, #124]	@ (80041c4 <HAL_DMA_Init+0x438>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d012      	beq.n	8004170 <HAL_DMA_Init+0x3e4>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4a1e      	ldr	r2, [pc, #120]	@ (80041c8 <HAL_DMA_Init+0x43c>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d00d      	beq.n	8004170 <HAL_DMA_Init+0x3e4>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4a1c      	ldr	r2, [pc, #112]	@ (80041cc <HAL_DMA_Init+0x440>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d008      	beq.n	8004170 <HAL_DMA_Init+0x3e4>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4a1b      	ldr	r2, [pc, #108]	@ (80041d0 <HAL_DMA_Init+0x444>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d003      	beq.n	8004170 <HAL_DMA_Init+0x3e4>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a19      	ldr	r2, [pc, #100]	@ (80041d4 <HAL_DMA_Init+0x448>)
 800416e:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2202      	movs	r2, #2
 8004174:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2200      	movs	r2, #0
 800417c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8004188:	697a      	ldr	r2, [r7, #20]
 800418a:	4b13      	ldr	r3, [pc, #76]	@ (80041d8 <HAL_DMA_Init+0x44c>)
 800418c:	4013      	ands	r3, r2
 800418e:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	689b      	ldr	r3, [r3, #8]
 8004194:	2b40      	cmp	r3, #64	@ 0x40
 8004196:	d021      	beq.n	80041dc <HAL_DMA_Init+0x450>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	689b      	ldr	r3, [r3, #8]
 800419c:	2b80      	cmp	r3, #128	@ 0x80
 800419e:	d102      	bne.n	80041a6 <HAL_DMA_Init+0x41a>
 80041a0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80041a4:	e01b      	b.n	80041de <HAL_DMA_Init+0x452>
 80041a6:	2300      	movs	r3, #0
 80041a8:	e019      	b.n	80041de <HAL_DMA_Init+0x452>
 80041aa:	bf00      	nop
 80041ac:	fe10803f 	.word	0xfe10803f
 80041b0:	5c001000 	.word	0x5c001000
 80041b4:	ffff0000 	.word	0xffff0000
 80041b8:	58025408 	.word	0x58025408
 80041bc:	5802541c 	.word	0x5802541c
 80041c0:	58025430 	.word	0x58025430
 80041c4:	58025444 	.word	0x58025444
 80041c8:	58025458 	.word	0x58025458
 80041cc:	5802546c 	.word	0x5802546c
 80041d0:	58025480 	.word	0x58025480
 80041d4:	58025494 	.word	0x58025494
 80041d8:	fffe000f 	.word	0xfffe000f
 80041dc:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80041de:	687a      	ldr	r2, [r7, #4]
 80041e0:	68d2      	ldr	r2, [r2, #12]
 80041e2:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80041e4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	691b      	ldr	r3, [r3, #16]
 80041ea:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80041ec:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	695b      	ldr	r3, [r3, #20]
 80041f2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80041f4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	699b      	ldr	r3, [r3, #24]
 80041fa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80041fc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	69db      	ldr	r3, [r3, #28]
 8004202:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004204:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6a1b      	ldr	r3, [r3, #32]
 800420a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800420c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800420e:	697a      	ldr	r2, [r7, #20]
 8004210:	4313      	orrs	r3, r2
 8004212:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	697a      	ldr	r2, [r7, #20]
 800421a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	461a      	mov	r2, r3
 8004222:	4b6e      	ldr	r3, [pc, #440]	@ (80043dc <HAL_DMA_Init+0x650>)
 8004224:	4413      	add	r3, r2
 8004226:	4a6e      	ldr	r2, [pc, #440]	@ (80043e0 <HAL_DMA_Init+0x654>)
 8004228:	fba2 2303 	umull	r2, r3, r2, r3
 800422c:	091b      	lsrs	r3, r3, #4
 800422e:	009a      	lsls	r2, r3, #2
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004234:	6878      	ldr	r0, [r7, #4]
 8004236:	f001 fc45 	bl	8005ac4 <DMA_CalcBaseAndBitshift>
 800423a:	4603      	mov	r3, r0
 800423c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004242:	f003 031f 	and.w	r3, r3, #31
 8004246:	2201      	movs	r2, #1
 8004248:	409a      	lsls	r2, r3
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	605a      	str	r2, [r3, #4]
 800424e:	e008      	b.n	8004262 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2240      	movs	r2, #64	@ 0x40
 8004254:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2203      	movs	r2, #3
 800425a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 800425e:	2301      	movs	r3, #1
 8004260:	e0b7      	b.n	80043d2 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a5f      	ldr	r2, [pc, #380]	@ (80043e4 <HAL_DMA_Init+0x658>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d072      	beq.n	8004352 <HAL_DMA_Init+0x5c6>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a5d      	ldr	r2, [pc, #372]	@ (80043e8 <HAL_DMA_Init+0x65c>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d06d      	beq.n	8004352 <HAL_DMA_Init+0x5c6>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4a5c      	ldr	r2, [pc, #368]	@ (80043ec <HAL_DMA_Init+0x660>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d068      	beq.n	8004352 <HAL_DMA_Init+0x5c6>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a5a      	ldr	r2, [pc, #360]	@ (80043f0 <HAL_DMA_Init+0x664>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d063      	beq.n	8004352 <HAL_DMA_Init+0x5c6>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4a59      	ldr	r2, [pc, #356]	@ (80043f4 <HAL_DMA_Init+0x668>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d05e      	beq.n	8004352 <HAL_DMA_Init+0x5c6>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a57      	ldr	r2, [pc, #348]	@ (80043f8 <HAL_DMA_Init+0x66c>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d059      	beq.n	8004352 <HAL_DMA_Init+0x5c6>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a56      	ldr	r2, [pc, #344]	@ (80043fc <HAL_DMA_Init+0x670>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d054      	beq.n	8004352 <HAL_DMA_Init+0x5c6>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a54      	ldr	r2, [pc, #336]	@ (8004400 <HAL_DMA_Init+0x674>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d04f      	beq.n	8004352 <HAL_DMA_Init+0x5c6>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4a53      	ldr	r2, [pc, #332]	@ (8004404 <HAL_DMA_Init+0x678>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d04a      	beq.n	8004352 <HAL_DMA_Init+0x5c6>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a51      	ldr	r2, [pc, #324]	@ (8004408 <HAL_DMA_Init+0x67c>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d045      	beq.n	8004352 <HAL_DMA_Init+0x5c6>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a50      	ldr	r2, [pc, #320]	@ (800440c <HAL_DMA_Init+0x680>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d040      	beq.n	8004352 <HAL_DMA_Init+0x5c6>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a4e      	ldr	r2, [pc, #312]	@ (8004410 <HAL_DMA_Init+0x684>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d03b      	beq.n	8004352 <HAL_DMA_Init+0x5c6>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4a4d      	ldr	r2, [pc, #308]	@ (8004414 <HAL_DMA_Init+0x688>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d036      	beq.n	8004352 <HAL_DMA_Init+0x5c6>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a4b      	ldr	r2, [pc, #300]	@ (8004418 <HAL_DMA_Init+0x68c>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d031      	beq.n	8004352 <HAL_DMA_Init+0x5c6>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4a4a      	ldr	r2, [pc, #296]	@ (800441c <HAL_DMA_Init+0x690>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d02c      	beq.n	8004352 <HAL_DMA_Init+0x5c6>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4a48      	ldr	r2, [pc, #288]	@ (8004420 <HAL_DMA_Init+0x694>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d027      	beq.n	8004352 <HAL_DMA_Init+0x5c6>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4a47      	ldr	r2, [pc, #284]	@ (8004424 <HAL_DMA_Init+0x698>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d022      	beq.n	8004352 <HAL_DMA_Init+0x5c6>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a45      	ldr	r2, [pc, #276]	@ (8004428 <HAL_DMA_Init+0x69c>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d01d      	beq.n	8004352 <HAL_DMA_Init+0x5c6>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4a44      	ldr	r2, [pc, #272]	@ (800442c <HAL_DMA_Init+0x6a0>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d018      	beq.n	8004352 <HAL_DMA_Init+0x5c6>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4a42      	ldr	r2, [pc, #264]	@ (8004430 <HAL_DMA_Init+0x6a4>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d013      	beq.n	8004352 <HAL_DMA_Init+0x5c6>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4a41      	ldr	r2, [pc, #260]	@ (8004434 <HAL_DMA_Init+0x6a8>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d00e      	beq.n	8004352 <HAL_DMA_Init+0x5c6>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4a3f      	ldr	r2, [pc, #252]	@ (8004438 <HAL_DMA_Init+0x6ac>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d009      	beq.n	8004352 <HAL_DMA_Init+0x5c6>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4a3e      	ldr	r2, [pc, #248]	@ (800443c <HAL_DMA_Init+0x6b0>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d004      	beq.n	8004352 <HAL_DMA_Init+0x5c6>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4a3c      	ldr	r2, [pc, #240]	@ (8004440 <HAL_DMA_Init+0x6b4>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d101      	bne.n	8004356 <HAL_DMA_Init+0x5ca>
 8004352:	2301      	movs	r3, #1
 8004354:	e000      	b.n	8004358 <HAL_DMA_Init+0x5cc>
 8004356:	2300      	movs	r3, #0
 8004358:	2b00      	cmp	r3, #0
 800435a:	d032      	beq.n	80043c2 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800435c:	6878      	ldr	r0, [r7, #4]
 800435e:	f001 fcdf 	bl	8005d20 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	689b      	ldr	r3, [r3, #8]
 8004366:	2b80      	cmp	r3, #128	@ 0x80
 8004368:	d102      	bne.n	8004370 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2200      	movs	r2, #0
 800436e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	685a      	ldr	r2, [r3, #4]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004378:	b2d2      	uxtb	r2, r2
 800437a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004380:	687a      	ldr	r2, [r7, #4]
 8004382:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004384:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d010      	beq.n	80043b0 <HAL_DMA_Init+0x624>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	2b08      	cmp	r3, #8
 8004394:	d80c      	bhi.n	80043b0 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004396:	6878      	ldr	r0, [r7, #4]
 8004398:	f001 fd5c 	bl	8005e54 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80043a0:	2200      	movs	r2, #0
 80043a2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043a8:	687a      	ldr	r2, [r7, #4]
 80043aa:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80043ac:	605a      	str	r2, [r3, #4]
 80043ae:	e008      	b.n	80043c2 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2200      	movs	r2, #0
 80043b4:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2200      	movs	r2, #0
 80043ba:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2200      	movs	r2, #0
 80043c0:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2200      	movs	r2, #0
 80043c6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2201      	movs	r2, #1
 80043cc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80043d0:	2300      	movs	r3, #0
}
 80043d2:	4618      	mov	r0, r3
 80043d4:	3718      	adds	r7, #24
 80043d6:	46bd      	mov	sp, r7
 80043d8:	bd80      	pop	{r7, pc}
 80043da:	bf00      	nop
 80043dc:	a7fdabf8 	.word	0xa7fdabf8
 80043e0:	cccccccd 	.word	0xcccccccd
 80043e4:	40020010 	.word	0x40020010
 80043e8:	40020028 	.word	0x40020028
 80043ec:	40020040 	.word	0x40020040
 80043f0:	40020058 	.word	0x40020058
 80043f4:	40020070 	.word	0x40020070
 80043f8:	40020088 	.word	0x40020088
 80043fc:	400200a0 	.word	0x400200a0
 8004400:	400200b8 	.word	0x400200b8
 8004404:	40020410 	.word	0x40020410
 8004408:	40020428 	.word	0x40020428
 800440c:	40020440 	.word	0x40020440
 8004410:	40020458 	.word	0x40020458
 8004414:	40020470 	.word	0x40020470
 8004418:	40020488 	.word	0x40020488
 800441c:	400204a0 	.word	0x400204a0
 8004420:	400204b8 	.word	0x400204b8
 8004424:	58025408 	.word	0x58025408
 8004428:	5802541c 	.word	0x5802541c
 800442c:	58025430 	.word	0x58025430
 8004430:	58025444 	.word	0x58025444
 8004434:	58025458 	.word	0x58025458
 8004438:	5802546c 	.word	0x5802546c
 800443c:	58025480 	.word	0x58025480
 8004440:	58025494 	.word	0x58025494

08004444 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b086      	sub	sp, #24
 8004448:	af00      	add	r7, sp, #0
 800444a:	60f8      	str	r0, [r7, #12]
 800444c:	60b9      	str	r1, [r7, #8]
 800444e:	607a      	str	r2, [r7, #4]
 8004450:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004452:	2300      	movs	r3, #0
 8004454:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d101      	bne.n	8004460 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 800445c:	2301      	movs	r3, #1
 800445e:	e226      	b.n	80048ae <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004466:	2b01      	cmp	r3, #1
 8004468:	d101      	bne.n	800446e <HAL_DMA_Start_IT+0x2a>
 800446a:	2302      	movs	r3, #2
 800446c:	e21f      	b.n	80048ae <HAL_DMA_Start_IT+0x46a>
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	2201      	movs	r2, #1
 8004472:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800447c:	b2db      	uxtb	r3, r3
 800447e:	2b01      	cmp	r3, #1
 8004480:	f040 820a 	bne.w	8004898 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	2202      	movs	r2, #2
 8004488:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	2200      	movs	r2, #0
 8004490:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a68      	ldr	r2, [pc, #416]	@ (8004638 <HAL_DMA_Start_IT+0x1f4>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d04a      	beq.n	8004532 <HAL_DMA_Start_IT+0xee>
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a66      	ldr	r2, [pc, #408]	@ (800463c <HAL_DMA_Start_IT+0x1f8>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d045      	beq.n	8004532 <HAL_DMA_Start_IT+0xee>
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a65      	ldr	r2, [pc, #404]	@ (8004640 <HAL_DMA_Start_IT+0x1fc>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d040      	beq.n	8004532 <HAL_DMA_Start_IT+0xee>
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a63      	ldr	r2, [pc, #396]	@ (8004644 <HAL_DMA_Start_IT+0x200>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d03b      	beq.n	8004532 <HAL_DMA_Start_IT+0xee>
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a62      	ldr	r2, [pc, #392]	@ (8004648 <HAL_DMA_Start_IT+0x204>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d036      	beq.n	8004532 <HAL_DMA_Start_IT+0xee>
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a60      	ldr	r2, [pc, #384]	@ (800464c <HAL_DMA_Start_IT+0x208>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d031      	beq.n	8004532 <HAL_DMA_Start_IT+0xee>
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4a5f      	ldr	r2, [pc, #380]	@ (8004650 <HAL_DMA_Start_IT+0x20c>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d02c      	beq.n	8004532 <HAL_DMA_Start_IT+0xee>
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a5d      	ldr	r2, [pc, #372]	@ (8004654 <HAL_DMA_Start_IT+0x210>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d027      	beq.n	8004532 <HAL_DMA_Start_IT+0xee>
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4a5c      	ldr	r2, [pc, #368]	@ (8004658 <HAL_DMA_Start_IT+0x214>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d022      	beq.n	8004532 <HAL_DMA_Start_IT+0xee>
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4a5a      	ldr	r2, [pc, #360]	@ (800465c <HAL_DMA_Start_IT+0x218>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d01d      	beq.n	8004532 <HAL_DMA_Start_IT+0xee>
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4a59      	ldr	r2, [pc, #356]	@ (8004660 <HAL_DMA_Start_IT+0x21c>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d018      	beq.n	8004532 <HAL_DMA_Start_IT+0xee>
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a57      	ldr	r2, [pc, #348]	@ (8004664 <HAL_DMA_Start_IT+0x220>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d013      	beq.n	8004532 <HAL_DMA_Start_IT+0xee>
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a56      	ldr	r2, [pc, #344]	@ (8004668 <HAL_DMA_Start_IT+0x224>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d00e      	beq.n	8004532 <HAL_DMA_Start_IT+0xee>
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4a54      	ldr	r2, [pc, #336]	@ (800466c <HAL_DMA_Start_IT+0x228>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d009      	beq.n	8004532 <HAL_DMA_Start_IT+0xee>
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4a53      	ldr	r2, [pc, #332]	@ (8004670 <HAL_DMA_Start_IT+0x22c>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d004      	beq.n	8004532 <HAL_DMA_Start_IT+0xee>
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4a51      	ldr	r2, [pc, #324]	@ (8004674 <HAL_DMA_Start_IT+0x230>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d108      	bne.n	8004544 <HAL_DMA_Start_IT+0x100>
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	681a      	ldr	r2, [r3, #0]
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f022 0201 	bic.w	r2, r2, #1
 8004540:	601a      	str	r2, [r3, #0]
 8004542:	e007      	b.n	8004554 <HAL_DMA_Start_IT+0x110>
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	681a      	ldr	r2, [r3, #0]
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f022 0201 	bic.w	r2, r2, #1
 8004552:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	687a      	ldr	r2, [r7, #4]
 8004558:	68b9      	ldr	r1, [r7, #8]
 800455a:	68f8      	ldr	r0, [r7, #12]
 800455c:	f001 f906 	bl	800576c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4a34      	ldr	r2, [pc, #208]	@ (8004638 <HAL_DMA_Start_IT+0x1f4>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d04a      	beq.n	8004600 <HAL_DMA_Start_IT+0x1bc>
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4a33      	ldr	r2, [pc, #204]	@ (800463c <HAL_DMA_Start_IT+0x1f8>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d045      	beq.n	8004600 <HAL_DMA_Start_IT+0x1bc>
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4a31      	ldr	r2, [pc, #196]	@ (8004640 <HAL_DMA_Start_IT+0x1fc>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d040      	beq.n	8004600 <HAL_DMA_Start_IT+0x1bc>
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4a30      	ldr	r2, [pc, #192]	@ (8004644 <HAL_DMA_Start_IT+0x200>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d03b      	beq.n	8004600 <HAL_DMA_Start_IT+0x1bc>
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4a2e      	ldr	r2, [pc, #184]	@ (8004648 <HAL_DMA_Start_IT+0x204>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d036      	beq.n	8004600 <HAL_DMA_Start_IT+0x1bc>
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4a2d      	ldr	r2, [pc, #180]	@ (800464c <HAL_DMA_Start_IT+0x208>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d031      	beq.n	8004600 <HAL_DMA_Start_IT+0x1bc>
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a2b      	ldr	r2, [pc, #172]	@ (8004650 <HAL_DMA_Start_IT+0x20c>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d02c      	beq.n	8004600 <HAL_DMA_Start_IT+0x1bc>
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	4a2a      	ldr	r2, [pc, #168]	@ (8004654 <HAL_DMA_Start_IT+0x210>)
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d027      	beq.n	8004600 <HAL_DMA_Start_IT+0x1bc>
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a28      	ldr	r2, [pc, #160]	@ (8004658 <HAL_DMA_Start_IT+0x214>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d022      	beq.n	8004600 <HAL_DMA_Start_IT+0x1bc>
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4a27      	ldr	r2, [pc, #156]	@ (800465c <HAL_DMA_Start_IT+0x218>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d01d      	beq.n	8004600 <HAL_DMA_Start_IT+0x1bc>
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4a25      	ldr	r2, [pc, #148]	@ (8004660 <HAL_DMA_Start_IT+0x21c>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d018      	beq.n	8004600 <HAL_DMA_Start_IT+0x1bc>
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4a24      	ldr	r2, [pc, #144]	@ (8004664 <HAL_DMA_Start_IT+0x220>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d013      	beq.n	8004600 <HAL_DMA_Start_IT+0x1bc>
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4a22      	ldr	r2, [pc, #136]	@ (8004668 <HAL_DMA_Start_IT+0x224>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d00e      	beq.n	8004600 <HAL_DMA_Start_IT+0x1bc>
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4a21      	ldr	r2, [pc, #132]	@ (800466c <HAL_DMA_Start_IT+0x228>)
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d009      	beq.n	8004600 <HAL_DMA_Start_IT+0x1bc>
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a1f      	ldr	r2, [pc, #124]	@ (8004670 <HAL_DMA_Start_IT+0x22c>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d004      	beq.n	8004600 <HAL_DMA_Start_IT+0x1bc>
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4a1e      	ldr	r2, [pc, #120]	@ (8004674 <HAL_DMA_Start_IT+0x230>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d101      	bne.n	8004604 <HAL_DMA_Start_IT+0x1c0>
 8004600:	2301      	movs	r3, #1
 8004602:	e000      	b.n	8004606 <HAL_DMA_Start_IT+0x1c2>
 8004604:	2300      	movs	r3, #0
 8004606:	2b00      	cmp	r3, #0
 8004608:	d036      	beq.n	8004678 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f023 021e 	bic.w	r2, r3, #30
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f042 0216 	orr.w	r2, r2, #22
 800461c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004622:	2b00      	cmp	r3, #0
 8004624:	d03e      	beq.n	80046a4 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	681a      	ldr	r2, [r3, #0]
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f042 0208 	orr.w	r2, r2, #8
 8004634:	601a      	str	r2, [r3, #0]
 8004636:	e035      	b.n	80046a4 <HAL_DMA_Start_IT+0x260>
 8004638:	40020010 	.word	0x40020010
 800463c:	40020028 	.word	0x40020028
 8004640:	40020040 	.word	0x40020040
 8004644:	40020058 	.word	0x40020058
 8004648:	40020070 	.word	0x40020070
 800464c:	40020088 	.word	0x40020088
 8004650:	400200a0 	.word	0x400200a0
 8004654:	400200b8 	.word	0x400200b8
 8004658:	40020410 	.word	0x40020410
 800465c:	40020428 	.word	0x40020428
 8004660:	40020440 	.word	0x40020440
 8004664:	40020458 	.word	0x40020458
 8004668:	40020470 	.word	0x40020470
 800466c:	40020488 	.word	0x40020488
 8004670:	400204a0 	.word	0x400204a0
 8004674:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f023 020e 	bic.w	r2, r3, #14
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f042 020a 	orr.w	r2, r2, #10
 800468a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004690:	2b00      	cmp	r3, #0
 8004692:	d007      	beq.n	80046a4 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	681a      	ldr	r2, [r3, #0]
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f042 0204 	orr.w	r2, r2, #4
 80046a2:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4a83      	ldr	r2, [pc, #524]	@ (80048b8 <HAL_DMA_Start_IT+0x474>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d072      	beq.n	8004794 <HAL_DMA_Start_IT+0x350>
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4a82      	ldr	r2, [pc, #520]	@ (80048bc <HAL_DMA_Start_IT+0x478>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d06d      	beq.n	8004794 <HAL_DMA_Start_IT+0x350>
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4a80      	ldr	r2, [pc, #512]	@ (80048c0 <HAL_DMA_Start_IT+0x47c>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d068      	beq.n	8004794 <HAL_DMA_Start_IT+0x350>
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4a7f      	ldr	r2, [pc, #508]	@ (80048c4 <HAL_DMA_Start_IT+0x480>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d063      	beq.n	8004794 <HAL_DMA_Start_IT+0x350>
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4a7d      	ldr	r2, [pc, #500]	@ (80048c8 <HAL_DMA_Start_IT+0x484>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d05e      	beq.n	8004794 <HAL_DMA_Start_IT+0x350>
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a7c      	ldr	r2, [pc, #496]	@ (80048cc <HAL_DMA_Start_IT+0x488>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d059      	beq.n	8004794 <HAL_DMA_Start_IT+0x350>
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a7a      	ldr	r2, [pc, #488]	@ (80048d0 <HAL_DMA_Start_IT+0x48c>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d054      	beq.n	8004794 <HAL_DMA_Start_IT+0x350>
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4a79      	ldr	r2, [pc, #484]	@ (80048d4 <HAL_DMA_Start_IT+0x490>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d04f      	beq.n	8004794 <HAL_DMA_Start_IT+0x350>
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4a77      	ldr	r2, [pc, #476]	@ (80048d8 <HAL_DMA_Start_IT+0x494>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d04a      	beq.n	8004794 <HAL_DMA_Start_IT+0x350>
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4a76      	ldr	r2, [pc, #472]	@ (80048dc <HAL_DMA_Start_IT+0x498>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d045      	beq.n	8004794 <HAL_DMA_Start_IT+0x350>
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a74      	ldr	r2, [pc, #464]	@ (80048e0 <HAL_DMA_Start_IT+0x49c>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d040      	beq.n	8004794 <HAL_DMA_Start_IT+0x350>
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4a73      	ldr	r2, [pc, #460]	@ (80048e4 <HAL_DMA_Start_IT+0x4a0>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d03b      	beq.n	8004794 <HAL_DMA_Start_IT+0x350>
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a71      	ldr	r2, [pc, #452]	@ (80048e8 <HAL_DMA_Start_IT+0x4a4>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d036      	beq.n	8004794 <HAL_DMA_Start_IT+0x350>
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4a70      	ldr	r2, [pc, #448]	@ (80048ec <HAL_DMA_Start_IT+0x4a8>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d031      	beq.n	8004794 <HAL_DMA_Start_IT+0x350>
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4a6e      	ldr	r2, [pc, #440]	@ (80048f0 <HAL_DMA_Start_IT+0x4ac>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d02c      	beq.n	8004794 <HAL_DMA_Start_IT+0x350>
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4a6d      	ldr	r2, [pc, #436]	@ (80048f4 <HAL_DMA_Start_IT+0x4b0>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d027      	beq.n	8004794 <HAL_DMA_Start_IT+0x350>
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4a6b      	ldr	r2, [pc, #428]	@ (80048f8 <HAL_DMA_Start_IT+0x4b4>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d022      	beq.n	8004794 <HAL_DMA_Start_IT+0x350>
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4a6a      	ldr	r2, [pc, #424]	@ (80048fc <HAL_DMA_Start_IT+0x4b8>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d01d      	beq.n	8004794 <HAL_DMA_Start_IT+0x350>
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a68      	ldr	r2, [pc, #416]	@ (8004900 <HAL_DMA_Start_IT+0x4bc>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d018      	beq.n	8004794 <HAL_DMA_Start_IT+0x350>
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4a67      	ldr	r2, [pc, #412]	@ (8004904 <HAL_DMA_Start_IT+0x4c0>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d013      	beq.n	8004794 <HAL_DMA_Start_IT+0x350>
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4a65      	ldr	r2, [pc, #404]	@ (8004908 <HAL_DMA_Start_IT+0x4c4>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d00e      	beq.n	8004794 <HAL_DMA_Start_IT+0x350>
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4a64      	ldr	r2, [pc, #400]	@ (800490c <HAL_DMA_Start_IT+0x4c8>)
 800477c:	4293      	cmp	r3, r2
 800477e:	d009      	beq.n	8004794 <HAL_DMA_Start_IT+0x350>
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a62      	ldr	r2, [pc, #392]	@ (8004910 <HAL_DMA_Start_IT+0x4cc>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d004      	beq.n	8004794 <HAL_DMA_Start_IT+0x350>
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4a61      	ldr	r2, [pc, #388]	@ (8004914 <HAL_DMA_Start_IT+0x4d0>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d101      	bne.n	8004798 <HAL_DMA_Start_IT+0x354>
 8004794:	2301      	movs	r3, #1
 8004796:	e000      	b.n	800479a <HAL_DMA_Start_IT+0x356>
 8004798:	2300      	movs	r3, #0
 800479a:	2b00      	cmp	r3, #0
 800479c:	d01a      	beq.n	80047d4 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d007      	beq.n	80047bc <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80047b0:	681a      	ldr	r2, [r3, #0]
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80047b6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80047ba:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d007      	beq.n	80047d4 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80047c8:	681a      	ldr	r2, [r3, #0]
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80047ce:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80047d2:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4a37      	ldr	r2, [pc, #220]	@ (80048b8 <HAL_DMA_Start_IT+0x474>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d04a      	beq.n	8004874 <HAL_DMA_Start_IT+0x430>
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4a36      	ldr	r2, [pc, #216]	@ (80048bc <HAL_DMA_Start_IT+0x478>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d045      	beq.n	8004874 <HAL_DMA_Start_IT+0x430>
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4a34      	ldr	r2, [pc, #208]	@ (80048c0 <HAL_DMA_Start_IT+0x47c>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d040      	beq.n	8004874 <HAL_DMA_Start_IT+0x430>
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4a33      	ldr	r2, [pc, #204]	@ (80048c4 <HAL_DMA_Start_IT+0x480>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d03b      	beq.n	8004874 <HAL_DMA_Start_IT+0x430>
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a31      	ldr	r2, [pc, #196]	@ (80048c8 <HAL_DMA_Start_IT+0x484>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d036      	beq.n	8004874 <HAL_DMA_Start_IT+0x430>
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4a30      	ldr	r2, [pc, #192]	@ (80048cc <HAL_DMA_Start_IT+0x488>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d031      	beq.n	8004874 <HAL_DMA_Start_IT+0x430>
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4a2e      	ldr	r2, [pc, #184]	@ (80048d0 <HAL_DMA_Start_IT+0x48c>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d02c      	beq.n	8004874 <HAL_DMA_Start_IT+0x430>
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	4a2d      	ldr	r2, [pc, #180]	@ (80048d4 <HAL_DMA_Start_IT+0x490>)
 8004820:	4293      	cmp	r3, r2
 8004822:	d027      	beq.n	8004874 <HAL_DMA_Start_IT+0x430>
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4a2b      	ldr	r2, [pc, #172]	@ (80048d8 <HAL_DMA_Start_IT+0x494>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d022      	beq.n	8004874 <HAL_DMA_Start_IT+0x430>
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4a2a      	ldr	r2, [pc, #168]	@ (80048dc <HAL_DMA_Start_IT+0x498>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d01d      	beq.n	8004874 <HAL_DMA_Start_IT+0x430>
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4a28      	ldr	r2, [pc, #160]	@ (80048e0 <HAL_DMA_Start_IT+0x49c>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d018      	beq.n	8004874 <HAL_DMA_Start_IT+0x430>
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	4a27      	ldr	r2, [pc, #156]	@ (80048e4 <HAL_DMA_Start_IT+0x4a0>)
 8004848:	4293      	cmp	r3, r2
 800484a:	d013      	beq.n	8004874 <HAL_DMA_Start_IT+0x430>
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4a25      	ldr	r2, [pc, #148]	@ (80048e8 <HAL_DMA_Start_IT+0x4a4>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d00e      	beq.n	8004874 <HAL_DMA_Start_IT+0x430>
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4a24      	ldr	r2, [pc, #144]	@ (80048ec <HAL_DMA_Start_IT+0x4a8>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d009      	beq.n	8004874 <HAL_DMA_Start_IT+0x430>
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4a22      	ldr	r2, [pc, #136]	@ (80048f0 <HAL_DMA_Start_IT+0x4ac>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d004      	beq.n	8004874 <HAL_DMA_Start_IT+0x430>
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4a21      	ldr	r2, [pc, #132]	@ (80048f4 <HAL_DMA_Start_IT+0x4b0>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d108      	bne.n	8004886 <HAL_DMA_Start_IT+0x442>
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	681a      	ldr	r2, [r3, #0]
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f042 0201 	orr.w	r2, r2, #1
 8004882:	601a      	str	r2, [r3, #0]
 8004884:	e012      	b.n	80048ac <HAL_DMA_Start_IT+0x468>
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	681a      	ldr	r2, [r3, #0]
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f042 0201 	orr.w	r2, r2, #1
 8004894:	601a      	str	r2, [r3, #0]
 8004896:	e009      	b.n	80048ac <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800489e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	2200      	movs	r2, #0
 80048a4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 80048a8:	2301      	movs	r3, #1
 80048aa:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80048ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80048ae:	4618      	mov	r0, r3
 80048b0:	3718      	adds	r7, #24
 80048b2:	46bd      	mov	sp, r7
 80048b4:	bd80      	pop	{r7, pc}
 80048b6:	bf00      	nop
 80048b8:	40020010 	.word	0x40020010
 80048bc:	40020028 	.word	0x40020028
 80048c0:	40020040 	.word	0x40020040
 80048c4:	40020058 	.word	0x40020058
 80048c8:	40020070 	.word	0x40020070
 80048cc:	40020088 	.word	0x40020088
 80048d0:	400200a0 	.word	0x400200a0
 80048d4:	400200b8 	.word	0x400200b8
 80048d8:	40020410 	.word	0x40020410
 80048dc:	40020428 	.word	0x40020428
 80048e0:	40020440 	.word	0x40020440
 80048e4:	40020458 	.word	0x40020458
 80048e8:	40020470 	.word	0x40020470
 80048ec:	40020488 	.word	0x40020488
 80048f0:	400204a0 	.word	0x400204a0
 80048f4:	400204b8 	.word	0x400204b8
 80048f8:	58025408 	.word	0x58025408
 80048fc:	5802541c 	.word	0x5802541c
 8004900:	58025430 	.word	0x58025430
 8004904:	58025444 	.word	0x58025444
 8004908:	58025458 	.word	0x58025458
 800490c:	5802546c 	.word	0x5802546c
 8004910:	58025480 	.word	0x58025480
 8004914:	58025494 	.word	0x58025494

08004918 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b08a      	sub	sp, #40	@ 0x28
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8004920:	2300      	movs	r3, #0
 8004922:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004924:	4b67      	ldr	r3, [pc, #412]	@ (8004ac4 <HAL_DMA_IRQHandler+0x1ac>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4a67      	ldr	r2, [pc, #412]	@ (8004ac8 <HAL_DMA_IRQHandler+0x1b0>)
 800492a:	fba2 2303 	umull	r2, r3, r2, r3
 800492e:	0a9b      	lsrs	r3, r3, #10
 8004930:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004936:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800493c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800493e:	6a3b      	ldr	r3, [r7, #32]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8004944:	69fb      	ldr	r3, [r7, #28]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4a5f      	ldr	r2, [pc, #380]	@ (8004acc <HAL_DMA_IRQHandler+0x1b4>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d04a      	beq.n	80049ea <HAL_DMA_IRQHandler+0xd2>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a5d      	ldr	r2, [pc, #372]	@ (8004ad0 <HAL_DMA_IRQHandler+0x1b8>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d045      	beq.n	80049ea <HAL_DMA_IRQHandler+0xd2>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4a5c      	ldr	r2, [pc, #368]	@ (8004ad4 <HAL_DMA_IRQHandler+0x1bc>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d040      	beq.n	80049ea <HAL_DMA_IRQHandler+0xd2>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a5a      	ldr	r2, [pc, #360]	@ (8004ad8 <HAL_DMA_IRQHandler+0x1c0>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d03b      	beq.n	80049ea <HAL_DMA_IRQHandler+0xd2>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4a59      	ldr	r2, [pc, #356]	@ (8004adc <HAL_DMA_IRQHandler+0x1c4>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d036      	beq.n	80049ea <HAL_DMA_IRQHandler+0xd2>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a57      	ldr	r2, [pc, #348]	@ (8004ae0 <HAL_DMA_IRQHandler+0x1c8>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d031      	beq.n	80049ea <HAL_DMA_IRQHandler+0xd2>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4a56      	ldr	r2, [pc, #344]	@ (8004ae4 <HAL_DMA_IRQHandler+0x1cc>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d02c      	beq.n	80049ea <HAL_DMA_IRQHandler+0xd2>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4a54      	ldr	r2, [pc, #336]	@ (8004ae8 <HAL_DMA_IRQHandler+0x1d0>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d027      	beq.n	80049ea <HAL_DMA_IRQHandler+0xd2>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4a53      	ldr	r2, [pc, #332]	@ (8004aec <HAL_DMA_IRQHandler+0x1d4>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d022      	beq.n	80049ea <HAL_DMA_IRQHandler+0xd2>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4a51      	ldr	r2, [pc, #324]	@ (8004af0 <HAL_DMA_IRQHandler+0x1d8>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d01d      	beq.n	80049ea <HAL_DMA_IRQHandler+0xd2>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4a50      	ldr	r2, [pc, #320]	@ (8004af4 <HAL_DMA_IRQHandler+0x1dc>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d018      	beq.n	80049ea <HAL_DMA_IRQHandler+0xd2>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4a4e      	ldr	r2, [pc, #312]	@ (8004af8 <HAL_DMA_IRQHandler+0x1e0>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d013      	beq.n	80049ea <HAL_DMA_IRQHandler+0xd2>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4a4d      	ldr	r2, [pc, #308]	@ (8004afc <HAL_DMA_IRQHandler+0x1e4>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d00e      	beq.n	80049ea <HAL_DMA_IRQHandler+0xd2>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4a4b      	ldr	r2, [pc, #300]	@ (8004b00 <HAL_DMA_IRQHandler+0x1e8>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d009      	beq.n	80049ea <HAL_DMA_IRQHandler+0xd2>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4a4a      	ldr	r2, [pc, #296]	@ (8004b04 <HAL_DMA_IRQHandler+0x1ec>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d004      	beq.n	80049ea <HAL_DMA_IRQHandler+0xd2>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4a48      	ldr	r2, [pc, #288]	@ (8004b08 <HAL_DMA_IRQHandler+0x1f0>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d101      	bne.n	80049ee <HAL_DMA_IRQHandler+0xd6>
 80049ea:	2301      	movs	r3, #1
 80049ec:	e000      	b.n	80049f0 <HAL_DMA_IRQHandler+0xd8>
 80049ee:	2300      	movs	r3, #0
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	f000 842b 	beq.w	800524c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049fa:	f003 031f 	and.w	r3, r3, #31
 80049fe:	2208      	movs	r2, #8
 8004a00:	409a      	lsls	r2, r3
 8004a02:	69bb      	ldr	r3, [r7, #24]
 8004a04:	4013      	ands	r3, r2
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	f000 80a2 	beq.w	8004b50 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4a2e      	ldr	r2, [pc, #184]	@ (8004acc <HAL_DMA_IRQHandler+0x1b4>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d04a      	beq.n	8004aac <HAL_DMA_IRQHandler+0x194>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4a2d      	ldr	r2, [pc, #180]	@ (8004ad0 <HAL_DMA_IRQHandler+0x1b8>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d045      	beq.n	8004aac <HAL_DMA_IRQHandler+0x194>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4a2b      	ldr	r2, [pc, #172]	@ (8004ad4 <HAL_DMA_IRQHandler+0x1bc>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d040      	beq.n	8004aac <HAL_DMA_IRQHandler+0x194>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4a2a      	ldr	r2, [pc, #168]	@ (8004ad8 <HAL_DMA_IRQHandler+0x1c0>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d03b      	beq.n	8004aac <HAL_DMA_IRQHandler+0x194>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4a28      	ldr	r2, [pc, #160]	@ (8004adc <HAL_DMA_IRQHandler+0x1c4>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d036      	beq.n	8004aac <HAL_DMA_IRQHandler+0x194>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4a27      	ldr	r2, [pc, #156]	@ (8004ae0 <HAL_DMA_IRQHandler+0x1c8>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d031      	beq.n	8004aac <HAL_DMA_IRQHandler+0x194>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4a25      	ldr	r2, [pc, #148]	@ (8004ae4 <HAL_DMA_IRQHandler+0x1cc>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d02c      	beq.n	8004aac <HAL_DMA_IRQHandler+0x194>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4a24      	ldr	r2, [pc, #144]	@ (8004ae8 <HAL_DMA_IRQHandler+0x1d0>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d027      	beq.n	8004aac <HAL_DMA_IRQHandler+0x194>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4a22      	ldr	r2, [pc, #136]	@ (8004aec <HAL_DMA_IRQHandler+0x1d4>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d022      	beq.n	8004aac <HAL_DMA_IRQHandler+0x194>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4a21      	ldr	r2, [pc, #132]	@ (8004af0 <HAL_DMA_IRQHandler+0x1d8>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d01d      	beq.n	8004aac <HAL_DMA_IRQHandler+0x194>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4a1f      	ldr	r2, [pc, #124]	@ (8004af4 <HAL_DMA_IRQHandler+0x1dc>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d018      	beq.n	8004aac <HAL_DMA_IRQHandler+0x194>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4a1e      	ldr	r2, [pc, #120]	@ (8004af8 <HAL_DMA_IRQHandler+0x1e0>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d013      	beq.n	8004aac <HAL_DMA_IRQHandler+0x194>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a1c      	ldr	r2, [pc, #112]	@ (8004afc <HAL_DMA_IRQHandler+0x1e4>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d00e      	beq.n	8004aac <HAL_DMA_IRQHandler+0x194>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4a1b      	ldr	r2, [pc, #108]	@ (8004b00 <HAL_DMA_IRQHandler+0x1e8>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d009      	beq.n	8004aac <HAL_DMA_IRQHandler+0x194>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a19      	ldr	r2, [pc, #100]	@ (8004b04 <HAL_DMA_IRQHandler+0x1ec>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d004      	beq.n	8004aac <HAL_DMA_IRQHandler+0x194>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4a18      	ldr	r2, [pc, #96]	@ (8004b08 <HAL_DMA_IRQHandler+0x1f0>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d12f      	bne.n	8004b0c <HAL_DMA_IRQHandler+0x1f4>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f003 0304 	and.w	r3, r3, #4
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	bf14      	ite	ne
 8004aba:	2301      	movne	r3, #1
 8004abc:	2300      	moveq	r3, #0
 8004abe:	b2db      	uxtb	r3, r3
 8004ac0:	e02e      	b.n	8004b20 <HAL_DMA_IRQHandler+0x208>
 8004ac2:	bf00      	nop
 8004ac4:	24000000 	.word	0x24000000
 8004ac8:	1b4e81b5 	.word	0x1b4e81b5
 8004acc:	40020010 	.word	0x40020010
 8004ad0:	40020028 	.word	0x40020028
 8004ad4:	40020040 	.word	0x40020040
 8004ad8:	40020058 	.word	0x40020058
 8004adc:	40020070 	.word	0x40020070
 8004ae0:	40020088 	.word	0x40020088
 8004ae4:	400200a0 	.word	0x400200a0
 8004ae8:	400200b8 	.word	0x400200b8
 8004aec:	40020410 	.word	0x40020410
 8004af0:	40020428 	.word	0x40020428
 8004af4:	40020440 	.word	0x40020440
 8004af8:	40020458 	.word	0x40020458
 8004afc:	40020470 	.word	0x40020470
 8004b00:	40020488 	.word	0x40020488
 8004b04:	400204a0 	.word	0x400204a0
 8004b08:	400204b8 	.word	0x400204b8
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f003 0308 	and.w	r3, r3, #8
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	bf14      	ite	ne
 8004b1a:	2301      	movne	r3, #1
 8004b1c:	2300      	moveq	r3, #0
 8004b1e:	b2db      	uxtb	r3, r3
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d015      	beq.n	8004b50 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	681a      	ldr	r2, [r3, #0]
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f022 0204 	bic.w	r2, r2, #4
 8004b32:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b38:	f003 031f 	and.w	r3, r3, #31
 8004b3c:	2208      	movs	r2, #8
 8004b3e:	409a      	lsls	r2, r3
 8004b40:	6a3b      	ldr	r3, [r7, #32]
 8004b42:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b48:	f043 0201 	orr.w	r2, r3, #1
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b54:	f003 031f 	and.w	r3, r3, #31
 8004b58:	69ba      	ldr	r2, [r7, #24]
 8004b5a:	fa22 f303 	lsr.w	r3, r2, r3
 8004b5e:	f003 0301 	and.w	r3, r3, #1
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d06e      	beq.n	8004c44 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4a69      	ldr	r2, [pc, #420]	@ (8004d10 <HAL_DMA_IRQHandler+0x3f8>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d04a      	beq.n	8004c06 <HAL_DMA_IRQHandler+0x2ee>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4a67      	ldr	r2, [pc, #412]	@ (8004d14 <HAL_DMA_IRQHandler+0x3fc>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d045      	beq.n	8004c06 <HAL_DMA_IRQHandler+0x2ee>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4a66      	ldr	r2, [pc, #408]	@ (8004d18 <HAL_DMA_IRQHandler+0x400>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d040      	beq.n	8004c06 <HAL_DMA_IRQHandler+0x2ee>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a64      	ldr	r2, [pc, #400]	@ (8004d1c <HAL_DMA_IRQHandler+0x404>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d03b      	beq.n	8004c06 <HAL_DMA_IRQHandler+0x2ee>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4a63      	ldr	r2, [pc, #396]	@ (8004d20 <HAL_DMA_IRQHandler+0x408>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d036      	beq.n	8004c06 <HAL_DMA_IRQHandler+0x2ee>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4a61      	ldr	r2, [pc, #388]	@ (8004d24 <HAL_DMA_IRQHandler+0x40c>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d031      	beq.n	8004c06 <HAL_DMA_IRQHandler+0x2ee>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	4a60      	ldr	r2, [pc, #384]	@ (8004d28 <HAL_DMA_IRQHandler+0x410>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d02c      	beq.n	8004c06 <HAL_DMA_IRQHandler+0x2ee>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4a5e      	ldr	r2, [pc, #376]	@ (8004d2c <HAL_DMA_IRQHandler+0x414>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d027      	beq.n	8004c06 <HAL_DMA_IRQHandler+0x2ee>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4a5d      	ldr	r2, [pc, #372]	@ (8004d30 <HAL_DMA_IRQHandler+0x418>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d022      	beq.n	8004c06 <HAL_DMA_IRQHandler+0x2ee>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4a5b      	ldr	r2, [pc, #364]	@ (8004d34 <HAL_DMA_IRQHandler+0x41c>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d01d      	beq.n	8004c06 <HAL_DMA_IRQHandler+0x2ee>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4a5a      	ldr	r2, [pc, #360]	@ (8004d38 <HAL_DMA_IRQHandler+0x420>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d018      	beq.n	8004c06 <HAL_DMA_IRQHandler+0x2ee>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4a58      	ldr	r2, [pc, #352]	@ (8004d3c <HAL_DMA_IRQHandler+0x424>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d013      	beq.n	8004c06 <HAL_DMA_IRQHandler+0x2ee>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4a57      	ldr	r2, [pc, #348]	@ (8004d40 <HAL_DMA_IRQHandler+0x428>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d00e      	beq.n	8004c06 <HAL_DMA_IRQHandler+0x2ee>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4a55      	ldr	r2, [pc, #340]	@ (8004d44 <HAL_DMA_IRQHandler+0x42c>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d009      	beq.n	8004c06 <HAL_DMA_IRQHandler+0x2ee>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4a54      	ldr	r2, [pc, #336]	@ (8004d48 <HAL_DMA_IRQHandler+0x430>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d004      	beq.n	8004c06 <HAL_DMA_IRQHandler+0x2ee>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4a52      	ldr	r2, [pc, #328]	@ (8004d4c <HAL_DMA_IRQHandler+0x434>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d10a      	bne.n	8004c1c <HAL_DMA_IRQHandler+0x304>
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	695b      	ldr	r3, [r3, #20]
 8004c0c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	bf14      	ite	ne
 8004c14:	2301      	movne	r3, #1
 8004c16:	2300      	moveq	r3, #0
 8004c18:	b2db      	uxtb	r3, r3
 8004c1a:	e003      	b.n	8004c24 <HAL_DMA_IRQHandler+0x30c>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	2300      	movs	r3, #0
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d00d      	beq.n	8004c44 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c2c:	f003 031f 	and.w	r3, r3, #31
 8004c30:	2201      	movs	r2, #1
 8004c32:	409a      	lsls	r2, r3
 8004c34:	6a3b      	ldr	r3, [r7, #32]
 8004c36:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c3c:	f043 0202 	orr.w	r2, r3, #2
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c48:	f003 031f 	and.w	r3, r3, #31
 8004c4c:	2204      	movs	r2, #4
 8004c4e:	409a      	lsls	r2, r3
 8004c50:	69bb      	ldr	r3, [r7, #24]
 8004c52:	4013      	ands	r3, r2
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	f000 808f 	beq.w	8004d78 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4a2c      	ldr	r2, [pc, #176]	@ (8004d10 <HAL_DMA_IRQHandler+0x3f8>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d04a      	beq.n	8004cfa <HAL_DMA_IRQHandler+0x3e2>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4a2a      	ldr	r2, [pc, #168]	@ (8004d14 <HAL_DMA_IRQHandler+0x3fc>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d045      	beq.n	8004cfa <HAL_DMA_IRQHandler+0x3e2>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4a29      	ldr	r2, [pc, #164]	@ (8004d18 <HAL_DMA_IRQHandler+0x400>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d040      	beq.n	8004cfa <HAL_DMA_IRQHandler+0x3e2>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4a27      	ldr	r2, [pc, #156]	@ (8004d1c <HAL_DMA_IRQHandler+0x404>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d03b      	beq.n	8004cfa <HAL_DMA_IRQHandler+0x3e2>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4a26      	ldr	r2, [pc, #152]	@ (8004d20 <HAL_DMA_IRQHandler+0x408>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d036      	beq.n	8004cfa <HAL_DMA_IRQHandler+0x3e2>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4a24      	ldr	r2, [pc, #144]	@ (8004d24 <HAL_DMA_IRQHandler+0x40c>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d031      	beq.n	8004cfa <HAL_DMA_IRQHandler+0x3e2>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4a23      	ldr	r2, [pc, #140]	@ (8004d28 <HAL_DMA_IRQHandler+0x410>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d02c      	beq.n	8004cfa <HAL_DMA_IRQHandler+0x3e2>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4a21      	ldr	r2, [pc, #132]	@ (8004d2c <HAL_DMA_IRQHandler+0x414>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d027      	beq.n	8004cfa <HAL_DMA_IRQHandler+0x3e2>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4a20      	ldr	r2, [pc, #128]	@ (8004d30 <HAL_DMA_IRQHandler+0x418>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d022      	beq.n	8004cfa <HAL_DMA_IRQHandler+0x3e2>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4a1e      	ldr	r2, [pc, #120]	@ (8004d34 <HAL_DMA_IRQHandler+0x41c>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d01d      	beq.n	8004cfa <HAL_DMA_IRQHandler+0x3e2>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4a1d      	ldr	r2, [pc, #116]	@ (8004d38 <HAL_DMA_IRQHandler+0x420>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d018      	beq.n	8004cfa <HAL_DMA_IRQHandler+0x3e2>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4a1b      	ldr	r2, [pc, #108]	@ (8004d3c <HAL_DMA_IRQHandler+0x424>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d013      	beq.n	8004cfa <HAL_DMA_IRQHandler+0x3e2>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4a1a      	ldr	r2, [pc, #104]	@ (8004d40 <HAL_DMA_IRQHandler+0x428>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d00e      	beq.n	8004cfa <HAL_DMA_IRQHandler+0x3e2>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4a18      	ldr	r2, [pc, #96]	@ (8004d44 <HAL_DMA_IRQHandler+0x42c>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d009      	beq.n	8004cfa <HAL_DMA_IRQHandler+0x3e2>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4a17      	ldr	r2, [pc, #92]	@ (8004d48 <HAL_DMA_IRQHandler+0x430>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d004      	beq.n	8004cfa <HAL_DMA_IRQHandler+0x3e2>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4a15      	ldr	r2, [pc, #84]	@ (8004d4c <HAL_DMA_IRQHandler+0x434>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d12a      	bne.n	8004d50 <HAL_DMA_IRQHandler+0x438>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f003 0302 	and.w	r3, r3, #2
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	bf14      	ite	ne
 8004d08:	2301      	movne	r3, #1
 8004d0a:	2300      	moveq	r3, #0
 8004d0c:	b2db      	uxtb	r3, r3
 8004d0e:	e023      	b.n	8004d58 <HAL_DMA_IRQHandler+0x440>
 8004d10:	40020010 	.word	0x40020010
 8004d14:	40020028 	.word	0x40020028
 8004d18:	40020040 	.word	0x40020040
 8004d1c:	40020058 	.word	0x40020058
 8004d20:	40020070 	.word	0x40020070
 8004d24:	40020088 	.word	0x40020088
 8004d28:	400200a0 	.word	0x400200a0
 8004d2c:	400200b8 	.word	0x400200b8
 8004d30:	40020410 	.word	0x40020410
 8004d34:	40020428 	.word	0x40020428
 8004d38:	40020440 	.word	0x40020440
 8004d3c:	40020458 	.word	0x40020458
 8004d40:	40020470 	.word	0x40020470
 8004d44:	40020488 	.word	0x40020488
 8004d48:	400204a0 	.word	0x400204a0
 8004d4c:	400204b8 	.word	0x400204b8
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	2300      	movs	r3, #0
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d00d      	beq.n	8004d78 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d60:	f003 031f 	and.w	r3, r3, #31
 8004d64:	2204      	movs	r2, #4
 8004d66:	409a      	lsls	r2, r3
 8004d68:	6a3b      	ldr	r3, [r7, #32]
 8004d6a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d70:	f043 0204 	orr.w	r2, r3, #4
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d7c:	f003 031f 	and.w	r3, r3, #31
 8004d80:	2210      	movs	r2, #16
 8004d82:	409a      	lsls	r2, r3
 8004d84:	69bb      	ldr	r3, [r7, #24]
 8004d86:	4013      	ands	r3, r2
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	f000 80a6 	beq.w	8004eda <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	4a85      	ldr	r2, [pc, #532]	@ (8004fa8 <HAL_DMA_IRQHandler+0x690>)
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d04a      	beq.n	8004e2e <HAL_DMA_IRQHandler+0x516>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4a83      	ldr	r2, [pc, #524]	@ (8004fac <HAL_DMA_IRQHandler+0x694>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d045      	beq.n	8004e2e <HAL_DMA_IRQHandler+0x516>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	4a82      	ldr	r2, [pc, #520]	@ (8004fb0 <HAL_DMA_IRQHandler+0x698>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d040      	beq.n	8004e2e <HAL_DMA_IRQHandler+0x516>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	4a80      	ldr	r2, [pc, #512]	@ (8004fb4 <HAL_DMA_IRQHandler+0x69c>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d03b      	beq.n	8004e2e <HAL_DMA_IRQHandler+0x516>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4a7f      	ldr	r2, [pc, #508]	@ (8004fb8 <HAL_DMA_IRQHandler+0x6a0>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d036      	beq.n	8004e2e <HAL_DMA_IRQHandler+0x516>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	4a7d      	ldr	r2, [pc, #500]	@ (8004fbc <HAL_DMA_IRQHandler+0x6a4>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d031      	beq.n	8004e2e <HAL_DMA_IRQHandler+0x516>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4a7c      	ldr	r2, [pc, #496]	@ (8004fc0 <HAL_DMA_IRQHandler+0x6a8>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d02c      	beq.n	8004e2e <HAL_DMA_IRQHandler+0x516>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4a7a      	ldr	r2, [pc, #488]	@ (8004fc4 <HAL_DMA_IRQHandler+0x6ac>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d027      	beq.n	8004e2e <HAL_DMA_IRQHandler+0x516>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4a79      	ldr	r2, [pc, #484]	@ (8004fc8 <HAL_DMA_IRQHandler+0x6b0>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d022      	beq.n	8004e2e <HAL_DMA_IRQHandler+0x516>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4a77      	ldr	r2, [pc, #476]	@ (8004fcc <HAL_DMA_IRQHandler+0x6b4>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d01d      	beq.n	8004e2e <HAL_DMA_IRQHandler+0x516>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4a76      	ldr	r2, [pc, #472]	@ (8004fd0 <HAL_DMA_IRQHandler+0x6b8>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d018      	beq.n	8004e2e <HAL_DMA_IRQHandler+0x516>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4a74      	ldr	r2, [pc, #464]	@ (8004fd4 <HAL_DMA_IRQHandler+0x6bc>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d013      	beq.n	8004e2e <HAL_DMA_IRQHandler+0x516>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4a73      	ldr	r2, [pc, #460]	@ (8004fd8 <HAL_DMA_IRQHandler+0x6c0>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d00e      	beq.n	8004e2e <HAL_DMA_IRQHandler+0x516>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4a71      	ldr	r2, [pc, #452]	@ (8004fdc <HAL_DMA_IRQHandler+0x6c4>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d009      	beq.n	8004e2e <HAL_DMA_IRQHandler+0x516>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4a70      	ldr	r2, [pc, #448]	@ (8004fe0 <HAL_DMA_IRQHandler+0x6c8>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d004      	beq.n	8004e2e <HAL_DMA_IRQHandler+0x516>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4a6e      	ldr	r2, [pc, #440]	@ (8004fe4 <HAL_DMA_IRQHandler+0x6cc>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d10a      	bne.n	8004e44 <HAL_DMA_IRQHandler+0x52c>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f003 0308 	and.w	r3, r3, #8
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	bf14      	ite	ne
 8004e3c:	2301      	movne	r3, #1
 8004e3e:	2300      	moveq	r3, #0
 8004e40:	b2db      	uxtb	r3, r3
 8004e42:	e009      	b.n	8004e58 <HAL_DMA_IRQHandler+0x540>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f003 0304 	and.w	r3, r3, #4
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	bf14      	ite	ne
 8004e52:	2301      	movne	r3, #1
 8004e54:	2300      	moveq	r3, #0
 8004e56:	b2db      	uxtb	r3, r3
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d03e      	beq.n	8004eda <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e60:	f003 031f 	and.w	r3, r3, #31
 8004e64:	2210      	movs	r2, #16
 8004e66:	409a      	lsls	r2, r3
 8004e68:	6a3b      	ldr	r3, [r7, #32]
 8004e6a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d018      	beq.n	8004eac <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d108      	bne.n	8004e9a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d024      	beq.n	8004eda <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e94:	6878      	ldr	r0, [r7, #4]
 8004e96:	4798      	blx	r3
 8004e98:	e01f      	b.n	8004eda <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d01b      	beq.n	8004eda <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ea6:	6878      	ldr	r0, [r7, #4]
 8004ea8:	4798      	blx	r3
 8004eaa:	e016      	b.n	8004eda <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d107      	bne.n	8004eca <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	681a      	ldr	r2, [r3, #0]
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f022 0208 	bic.w	r2, r2, #8
 8004ec8:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d003      	beq.n	8004eda <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ed6:	6878      	ldr	r0, [r7, #4]
 8004ed8:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ede:	f003 031f 	and.w	r3, r3, #31
 8004ee2:	2220      	movs	r2, #32
 8004ee4:	409a      	lsls	r2, r3
 8004ee6:	69bb      	ldr	r3, [r7, #24]
 8004ee8:	4013      	ands	r3, r2
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	f000 8110 	beq.w	8005110 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4a2c      	ldr	r2, [pc, #176]	@ (8004fa8 <HAL_DMA_IRQHandler+0x690>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d04a      	beq.n	8004f90 <HAL_DMA_IRQHandler+0x678>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	4a2b      	ldr	r2, [pc, #172]	@ (8004fac <HAL_DMA_IRQHandler+0x694>)
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d045      	beq.n	8004f90 <HAL_DMA_IRQHandler+0x678>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4a29      	ldr	r2, [pc, #164]	@ (8004fb0 <HAL_DMA_IRQHandler+0x698>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d040      	beq.n	8004f90 <HAL_DMA_IRQHandler+0x678>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4a28      	ldr	r2, [pc, #160]	@ (8004fb4 <HAL_DMA_IRQHandler+0x69c>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d03b      	beq.n	8004f90 <HAL_DMA_IRQHandler+0x678>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4a26      	ldr	r2, [pc, #152]	@ (8004fb8 <HAL_DMA_IRQHandler+0x6a0>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d036      	beq.n	8004f90 <HAL_DMA_IRQHandler+0x678>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4a25      	ldr	r2, [pc, #148]	@ (8004fbc <HAL_DMA_IRQHandler+0x6a4>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d031      	beq.n	8004f90 <HAL_DMA_IRQHandler+0x678>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4a23      	ldr	r2, [pc, #140]	@ (8004fc0 <HAL_DMA_IRQHandler+0x6a8>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d02c      	beq.n	8004f90 <HAL_DMA_IRQHandler+0x678>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4a22      	ldr	r2, [pc, #136]	@ (8004fc4 <HAL_DMA_IRQHandler+0x6ac>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d027      	beq.n	8004f90 <HAL_DMA_IRQHandler+0x678>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4a20      	ldr	r2, [pc, #128]	@ (8004fc8 <HAL_DMA_IRQHandler+0x6b0>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d022      	beq.n	8004f90 <HAL_DMA_IRQHandler+0x678>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	4a1f      	ldr	r2, [pc, #124]	@ (8004fcc <HAL_DMA_IRQHandler+0x6b4>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d01d      	beq.n	8004f90 <HAL_DMA_IRQHandler+0x678>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4a1d      	ldr	r2, [pc, #116]	@ (8004fd0 <HAL_DMA_IRQHandler+0x6b8>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d018      	beq.n	8004f90 <HAL_DMA_IRQHandler+0x678>
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	4a1c      	ldr	r2, [pc, #112]	@ (8004fd4 <HAL_DMA_IRQHandler+0x6bc>)
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d013      	beq.n	8004f90 <HAL_DMA_IRQHandler+0x678>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4a1a      	ldr	r2, [pc, #104]	@ (8004fd8 <HAL_DMA_IRQHandler+0x6c0>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d00e      	beq.n	8004f90 <HAL_DMA_IRQHandler+0x678>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	4a19      	ldr	r2, [pc, #100]	@ (8004fdc <HAL_DMA_IRQHandler+0x6c4>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d009      	beq.n	8004f90 <HAL_DMA_IRQHandler+0x678>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4a17      	ldr	r2, [pc, #92]	@ (8004fe0 <HAL_DMA_IRQHandler+0x6c8>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d004      	beq.n	8004f90 <HAL_DMA_IRQHandler+0x678>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	4a16      	ldr	r2, [pc, #88]	@ (8004fe4 <HAL_DMA_IRQHandler+0x6cc>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d12b      	bne.n	8004fe8 <HAL_DMA_IRQHandler+0x6d0>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f003 0310 	and.w	r3, r3, #16
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	bf14      	ite	ne
 8004f9e:	2301      	movne	r3, #1
 8004fa0:	2300      	moveq	r3, #0
 8004fa2:	b2db      	uxtb	r3, r3
 8004fa4:	e02a      	b.n	8004ffc <HAL_DMA_IRQHandler+0x6e4>
 8004fa6:	bf00      	nop
 8004fa8:	40020010 	.word	0x40020010
 8004fac:	40020028 	.word	0x40020028
 8004fb0:	40020040 	.word	0x40020040
 8004fb4:	40020058 	.word	0x40020058
 8004fb8:	40020070 	.word	0x40020070
 8004fbc:	40020088 	.word	0x40020088
 8004fc0:	400200a0 	.word	0x400200a0
 8004fc4:	400200b8 	.word	0x400200b8
 8004fc8:	40020410 	.word	0x40020410
 8004fcc:	40020428 	.word	0x40020428
 8004fd0:	40020440 	.word	0x40020440
 8004fd4:	40020458 	.word	0x40020458
 8004fd8:	40020470 	.word	0x40020470
 8004fdc:	40020488 	.word	0x40020488
 8004fe0:	400204a0 	.word	0x400204a0
 8004fe4:	400204b8 	.word	0x400204b8
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f003 0302 	and.w	r3, r3, #2
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	bf14      	ite	ne
 8004ff6:	2301      	movne	r3, #1
 8004ff8:	2300      	moveq	r3, #0
 8004ffa:	b2db      	uxtb	r3, r3
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	f000 8087 	beq.w	8005110 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005006:	f003 031f 	and.w	r3, r3, #31
 800500a:	2220      	movs	r2, #32
 800500c:	409a      	lsls	r2, r3
 800500e:	6a3b      	ldr	r3, [r7, #32]
 8005010:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005018:	b2db      	uxtb	r3, r3
 800501a:	2b04      	cmp	r3, #4
 800501c:	d139      	bne.n	8005092 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	681a      	ldr	r2, [r3, #0]
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f022 0216 	bic.w	r2, r2, #22
 800502c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	695a      	ldr	r2, [r3, #20]
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800503c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005042:	2b00      	cmp	r3, #0
 8005044:	d103      	bne.n	800504e <HAL_DMA_IRQHandler+0x736>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800504a:	2b00      	cmp	r3, #0
 800504c:	d007      	beq.n	800505e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	681a      	ldr	r2, [r3, #0]
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f022 0208 	bic.w	r2, r2, #8
 800505c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005062:	f003 031f 	and.w	r3, r3, #31
 8005066:	223f      	movs	r2, #63	@ 0x3f
 8005068:	409a      	lsls	r2, r3
 800506a:	6a3b      	ldr	r3, [r7, #32]
 800506c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2201      	movs	r2, #1
 8005072:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2200      	movs	r2, #0
 800507a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005082:	2b00      	cmp	r3, #0
 8005084:	f000 834a 	beq.w	800571c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800508c:	6878      	ldr	r0, [r7, #4]
 800508e:	4798      	blx	r3
          }
          return;
 8005090:	e344      	b.n	800571c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800509c:	2b00      	cmp	r3, #0
 800509e:	d018      	beq.n	80050d2 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d108      	bne.n	80050c0 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d02c      	beq.n	8005110 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050ba:	6878      	ldr	r0, [r7, #4]
 80050bc:	4798      	blx	r3
 80050be:	e027      	b.n	8005110 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d023      	beq.n	8005110 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050cc:	6878      	ldr	r0, [r7, #4]
 80050ce:	4798      	blx	r3
 80050d0:	e01e      	b.n	8005110 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d10f      	bne.n	8005100 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	681a      	ldr	r2, [r3, #0]
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f022 0210 	bic.w	r2, r2, #16
 80050ee:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2201      	movs	r2, #1
 80050f4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2200      	movs	r2, #0
 80050fc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005104:	2b00      	cmp	r3, #0
 8005106:	d003      	beq.n	8005110 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800510c:	6878      	ldr	r0, [r7, #4]
 800510e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005114:	2b00      	cmp	r3, #0
 8005116:	f000 8306 	beq.w	8005726 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800511e:	f003 0301 	and.w	r3, r3, #1
 8005122:	2b00      	cmp	r3, #0
 8005124:	f000 8088 	beq.w	8005238 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2204      	movs	r2, #4
 800512c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	4a7a      	ldr	r2, [pc, #488]	@ (8005320 <HAL_DMA_IRQHandler+0xa08>)
 8005136:	4293      	cmp	r3, r2
 8005138:	d04a      	beq.n	80051d0 <HAL_DMA_IRQHandler+0x8b8>
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	4a79      	ldr	r2, [pc, #484]	@ (8005324 <HAL_DMA_IRQHandler+0xa0c>)
 8005140:	4293      	cmp	r3, r2
 8005142:	d045      	beq.n	80051d0 <HAL_DMA_IRQHandler+0x8b8>
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	4a77      	ldr	r2, [pc, #476]	@ (8005328 <HAL_DMA_IRQHandler+0xa10>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d040      	beq.n	80051d0 <HAL_DMA_IRQHandler+0x8b8>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	4a76      	ldr	r2, [pc, #472]	@ (800532c <HAL_DMA_IRQHandler+0xa14>)
 8005154:	4293      	cmp	r3, r2
 8005156:	d03b      	beq.n	80051d0 <HAL_DMA_IRQHandler+0x8b8>
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	4a74      	ldr	r2, [pc, #464]	@ (8005330 <HAL_DMA_IRQHandler+0xa18>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d036      	beq.n	80051d0 <HAL_DMA_IRQHandler+0x8b8>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	4a73      	ldr	r2, [pc, #460]	@ (8005334 <HAL_DMA_IRQHandler+0xa1c>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d031      	beq.n	80051d0 <HAL_DMA_IRQHandler+0x8b8>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	4a71      	ldr	r2, [pc, #452]	@ (8005338 <HAL_DMA_IRQHandler+0xa20>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d02c      	beq.n	80051d0 <HAL_DMA_IRQHandler+0x8b8>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4a70      	ldr	r2, [pc, #448]	@ (800533c <HAL_DMA_IRQHandler+0xa24>)
 800517c:	4293      	cmp	r3, r2
 800517e:	d027      	beq.n	80051d0 <HAL_DMA_IRQHandler+0x8b8>
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	4a6e      	ldr	r2, [pc, #440]	@ (8005340 <HAL_DMA_IRQHandler+0xa28>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d022      	beq.n	80051d0 <HAL_DMA_IRQHandler+0x8b8>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	4a6d      	ldr	r2, [pc, #436]	@ (8005344 <HAL_DMA_IRQHandler+0xa2c>)
 8005190:	4293      	cmp	r3, r2
 8005192:	d01d      	beq.n	80051d0 <HAL_DMA_IRQHandler+0x8b8>
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	4a6b      	ldr	r2, [pc, #428]	@ (8005348 <HAL_DMA_IRQHandler+0xa30>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d018      	beq.n	80051d0 <HAL_DMA_IRQHandler+0x8b8>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	4a6a      	ldr	r2, [pc, #424]	@ (800534c <HAL_DMA_IRQHandler+0xa34>)
 80051a4:	4293      	cmp	r3, r2
 80051a6:	d013      	beq.n	80051d0 <HAL_DMA_IRQHandler+0x8b8>
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	4a68      	ldr	r2, [pc, #416]	@ (8005350 <HAL_DMA_IRQHandler+0xa38>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d00e      	beq.n	80051d0 <HAL_DMA_IRQHandler+0x8b8>
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	4a67      	ldr	r2, [pc, #412]	@ (8005354 <HAL_DMA_IRQHandler+0xa3c>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d009      	beq.n	80051d0 <HAL_DMA_IRQHandler+0x8b8>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4a65      	ldr	r2, [pc, #404]	@ (8005358 <HAL_DMA_IRQHandler+0xa40>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d004      	beq.n	80051d0 <HAL_DMA_IRQHandler+0x8b8>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4a64      	ldr	r2, [pc, #400]	@ (800535c <HAL_DMA_IRQHandler+0xa44>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d108      	bne.n	80051e2 <HAL_DMA_IRQHandler+0x8ca>
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	681a      	ldr	r2, [r3, #0]
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f022 0201 	bic.w	r2, r2, #1
 80051de:	601a      	str	r2, [r3, #0]
 80051e0:	e007      	b.n	80051f2 <HAL_DMA_IRQHandler+0x8da>
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	681a      	ldr	r2, [r3, #0]
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f022 0201 	bic.w	r2, r2, #1
 80051f0:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	3301      	adds	r3, #1
 80051f6:	60fb      	str	r3, [r7, #12]
 80051f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80051fa:	429a      	cmp	r2, r3
 80051fc:	d307      	bcc.n	800520e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f003 0301 	and.w	r3, r3, #1
 8005208:	2b00      	cmp	r3, #0
 800520a:	d1f2      	bne.n	80051f2 <HAL_DMA_IRQHandler+0x8da>
 800520c:	e000      	b.n	8005210 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800520e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f003 0301 	and.w	r3, r3, #1
 800521a:	2b00      	cmp	r3, #0
 800521c:	d004      	beq.n	8005228 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2203      	movs	r2, #3
 8005222:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8005226:	e003      	b.n	8005230 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2201      	movs	r2, #1
 800522c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2200      	movs	r2, #0
 8005234:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800523c:	2b00      	cmp	r3, #0
 800523e:	f000 8272 	beq.w	8005726 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005246:	6878      	ldr	r0, [r7, #4]
 8005248:	4798      	blx	r3
 800524a:	e26c      	b.n	8005726 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4a43      	ldr	r2, [pc, #268]	@ (8005360 <HAL_DMA_IRQHandler+0xa48>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d022      	beq.n	800529c <HAL_DMA_IRQHandler+0x984>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	4a42      	ldr	r2, [pc, #264]	@ (8005364 <HAL_DMA_IRQHandler+0xa4c>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d01d      	beq.n	800529c <HAL_DMA_IRQHandler+0x984>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	4a40      	ldr	r2, [pc, #256]	@ (8005368 <HAL_DMA_IRQHandler+0xa50>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d018      	beq.n	800529c <HAL_DMA_IRQHandler+0x984>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4a3f      	ldr	r2, [pc, #252]	@ (800536c <HAL_DMA_IRQHandler+0xa54>)
 8005270:	4293      	cmp	r3, r2
 8005272:	d013      	beq.n	800529c <HAL_DMA_IRQHandler+0x984>
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4a3d      	ldr	r2, [pc, #244]	@ (8005370 <HAL_DMA_IRQHandler+0xa58>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d00e      	beq.n	800529c <HAL_DMA_IRQHandler+0x984>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4a3c      	ldr	r2, [pc, #240]	@ (8005374 <HAL_DMA_IRQHandler+0xa5c>)
 8005284:	4293      	cmp	r3, r2
 8005286:	d009      	beq.n	800529c <HAL_DMA_IRQHandler+0x984>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	4a3a      	ldr	r2, [pc, #232]	@ (8005378 <HAL_DMA_IRQHandler+0xa60>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d004      	beq.n	800529c <HAL_DMA_IRQHandler+0x984>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	4a39      	ldr	r2, [pc, #228]	@ (800537c <HAL_DMA_IRQHandler+0xa64>)
 8005298:	4293      	cmp	r3, r2
 800529a:	d101      	bne.n	80052a0 <HAL_DMA_IRQHandler+0x988>
 800529c:	2301      	movs	r3, #1
 800529e:	e000      	b.n	80052a2 <HAL_DMA_IRQHandler+0x98a>
 80052a0:	2300      	movs	r3, #0
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	f000 823f 	beq.w	8005726 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80052b4:	f003 031f 	and.w	r3, r3, #31
 80052b8:	2204      	movs	r2, #4
 80052ba:	409a      	lsls	r2, r3
 80052bc:	697b      	ldr	r3, [r7, #20]
 80052be:	4013      	ands	r3, r2
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	f000 80cd 	beq.w	8005460 <HAL_DMA_IRQHandler+0xb48>
 80052c6:	693b      	ldr	r3, [r7, #16]
 80052c8:	f003 0304 	and.w	r3, r3, #4
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	f000 80c7 	beq.w	8005460 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80052d6:	f003 031f 	and.w	r3, r3, #31
 80052da:	2204      	movs	r2, #4
 80052dc:	409a      	lsls	r2, r3
 80052de:	69fb      	ldr	r3, [r7, #28]
 80052e0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80052e2:	693b      	ldr	r3, [r7, #16]
 80052e4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d049      	beq.n	8005380 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80052ec:	693b      	ldr	r3, [r7, #16]
 80052ee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d109      	bne.n	800530a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	f000 8210 	beq.w	8005720 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005304:	6878      	ldr	r0, [r7, #4]
 8005306:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005308:	e20a      	b.n	8005720 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800530e:	2b00      	cmp	r3, #0
 8005310:	f000 8206 	beq.w	8005720 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005318:	6878      	ldr	r0, [r7, #4]
 800531a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800531c:	e200      	b.n	8005720 <HAL_DMA_IRQHandler+0xe08>
 800531e:	bf00      	nop
 8005320:	40020010 	.word	0x40020010
 8005324:	40020028 	.word	0x40020028
 8005328:	40020040 	.word	0x40020040
 800532c:	40020058 	.word	0x40020058
 8005330:	40020070 	.word	0x40020070
 8005334:	40020088 	.word	0x40020088
 8005338:	400200a0 	.word	0x400200a0
 800533c:	400200b8 	.word	0x400200b8
 8005340:	40020410 	.word	0x40020410
 8005344:	40020428 	.word	0x40020428
 8005348:	40020440 	.word	0x40020440
 800534c:	40020458 	.word	0x40020458
 8005350:	40020470 	.word	0x40020470
 8005354:	40020488 	.word	0x40020488
 8005358:	400204a0 	.word	0x400204a0
 800535c:	400204b8 	.word	0x400204b8
 8005360:	58025408 	.word	0x58025408
 8005364:	5802541c 	.word	0x5802541c
 8005368:	58025430 	.word	0x58025430
 800536c:	58025444 	.word	0x58025444
 8005370:	58025458 	.word	0x58025458
 8005374:	5802546c 	.word	0x5802546c
 8005378:	58025480 	.word	0x58025480
 800537c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005380:	693b      	ldr	r3, [r7, #16]
 8005382:	f003 0320 	and.w	r3, r3, #32
 8005386:	2b00      	cmp	r3, #0
 8005388:	d160      	bne.n	800544c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	4a7f      	ldr	r2, [pc, #508]	@ (800558c <HAL_DMA_IRQHandler+0xc74>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d04a      	beq.n	800542a <HAL_DMA_IRQHandler+0xb12>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4a7d      	ldr	r2, [pc, #500]	@ (8005590 <HAL_DMA_IRQHandler+0xc78>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d045      	beq.n	800542a <HAL_DMA_IRQHandler+0xb12>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	4a7c      	ldr	r2, [pc, #496]	@ (8005594 <HAL_DMA_IRQHandler+0xc7c>)
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d040      	beq.n	800542a <HAL_DMA_IRQHandler+0xb12>
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4a7a      	ldr	r2, [pc, #488]	@ (8005598 <HAL_DMA_IRQHandler+0xc80>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d03b      	beq.n	800542a <HAL_DMA_IRQHandler+0xb12>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4a79      	ldr	r2, [pc, #484]	@ (800559c <HAL_DMA_IRQHandler+0xc84>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d036      	beq.n	800542a <HAL_DMA_IRQHandler+0xb12>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	4a77      	ldr	r2, [pc, #476]	@ (80055a0 <HAL_DMA_IRQHandler+0xc88>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d031      	beq.n	800542a <HAL_DMA_IRQHandler+0xb12>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	4a76      	ldr	r2, [pc, #472]	@ (80055a4 <HAL_DMA_IRQHandler+0xc8c>)
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d02c      	beq.n	800542a <HAL_DMA_IRQHandler+0xb12>
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	4a74      	ldr	r2, [pc, #464]	@ (80055a8 <HAL_DMA_IRQHandler+0xc90>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d027      	beq.n	800542a <HAL_DMA_IRQHandler+0xb12>
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	4a73      	ldr	r2, [pc, #460]	@ (80055ac <HAL_DMA_IRQHandler+0xc94>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d022      	beq.n	800542a <HAL_DMA_IRQHandler+0xb12>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	4a71      	ldr	r2, [pc, #452]	@ (80055b0 <HAL_DMA_IRQHandler+0xc98>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d01d      	beq.n	800542a <HAL_DMA_IRQHandler+0xb12>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	4a70      	ldr	r2, [pc, #448]	@ (80055b4 <HAL_DMA_IRQHandler+0xc9c>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d018      	beq.n	800542a <HAL_DMA_IRQHandler+0xb12>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4a6e      	ldr	r2, [pc, #440]	@ (80055b8 <HAL_DMA_IRQHandler+0xca0>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d013      	beq.n	800542a <HAL_DMA_IRQHandler+0xb12>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	4a6d      	ldr	r2, [pc, #436]	@ (80055bc <HAL_DMA_IRQHandler+0xca4>)
 8005408:	4293      	cmp	r3, r2
 800540a:	d00e      	beq.n	800542a <HAL_DMA_IRQHandler+0xb12>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4a6b      	ldr	r2, [pc, #428]	@ (80055c0 <HAL_DMA_IRQHandler+0xca8>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d009      	beq.n	800542a <HAL_DMA_IRQHandler+0xb12>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	4a6a      	ldr	r2, [pc, #424]	@ (80055c4 <HAL_DMA_IRQHandler+0xcac>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d004      	beq.n	800542a <HAL_DMA_IRQHandler+0xb12>
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	4a68      	ldr	r2, [pc, #416]	@ (80055c8 <HAL_DMA_IRQHandler+0xcb0>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d108      	bne.n	800543c <HAL_DMA_IRQHandler+0xb24>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	681a      	ldr	r2, [r3, #0]
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f022 0208 	bic.w	r2, r2, #8
 8005438:	601a      	str	r2, [r3, #0]
 800543a:	e007      	b.n	800544c <HAL_DMA_IRQHandler+0xb34>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	681a      	ldr	r2, [r3, #0]
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f022 0204 	bic.w	r2, r2, #4
 800544a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005450:	2b00      	cmp	r3, #0
 8005452:	f000 8165 	beq.w	8005720 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800545a:	6878      	ldr	r0, [r7, #4]
 800545c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800545e:	e15f      	b.n	8005720 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005464:	f003 031f 	and.w	r3, r3, #31
 8005468:	2202      	movs	r2, #2
 800546a:	409a      	lsls	r2, r3
 800546c:	697b      	ldr	r3, [r7, #20]
 800546e:	4013      	ands	r3, r2
 8005470:	2b00      	cmp	r3, #0
 8005472:	f000 80c5 	beq.w	8005600 <HAL_DMA_IRQHandler+0xce8>
 8005476:	693b      	ldr	r3, [r7, #16]
 8005478:	f003 0302 	and.w	r3, r3, #2
 800547c:	2b00      	cmp	r3, #0
 800547e:	f000 80bf 	beq.w	8005600 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005486:	f003 031f 	and.w	r3, r3, #31
 800548a:	2202      	movs	r2, #2
 800548c:	409a      	lsls	r2, r3
 800548e:	69fb      	ldr	r3, [r7, #28]
 8005490:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005492:	693b      	ldr	r3, [r7, #16]
 8005494:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005498:	2b00      	cmp	r3, #0
 800549a:	d018      	beq.n	80054ce <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800549c:	693b      	ldr	r3, [r7, #16]
 800549e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d109      	bne.n	80054ba <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	f000 813a 	beq.w	8005724 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054b4:	6878      	ldr	r0, [r7, #4]
 80054b6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80054b8:	e134      	b.n	8005724 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054be:	2b00      	cmp	r3, #0
 80054c0:	f000 8130 	beq.w	8005724 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054c8:	6878      	ldr	r0, [r7, #4]
 80054ca:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80054cc:	e12a      	b.n	8005724 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80054ce:	693b      	ldr	r3, [r7, #16]
 80054d0:	f003 0320 	and.w	r3, r3, #32
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	f040 8089 	bne.w	80055ec <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	4a2b      	ldr	r2, [pc, #172]	@ (800558c <HAL_DMA_IRQHandler+0xc74>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d04a      	beq.n	800557a <HAL_DMA_IRQHandler+0xc62>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4a29      	ldr	r2, [pc, #164]	@ (8005590 <HAL_DMA_IRQHandler+0xc78>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d045      	beq.n	800557a <HAL_DMA_IRQHandler+0xc62>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	4a28      	ldr	r2, [pc, #160]	@ (8005594 <HAL_DMA_IRQHandler+0xc7c>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d040      	beq.n	800557a <HAL_DMA_IRQHandler+0xc62>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4a26      	ldr	r2, [pc, #152]	@ (8005598 <HAL_DMA_IRQHandler+0xc80>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d03b      	beq.n	800557a <HAL_DMA_IRQHandler+0xc62>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	4a25      	ldr	r2, [pc, #148]	@ (800559c <HAL_DMA_IRQHandler+0xc84>)
 8005508:	4293      	cmp	r3, r2
 800550a:	d036      	beq.n	800557a <HAL_DMA_IRQHandler+0xc62>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4a23      	ldr	r2, [pc, #140]	@ (80055a0 <HAL_DMA_IRQHandler+0xc88>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d031      	beq.n	800557a <HAL_DMA_IRQHandler+0xc62>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	4a22      	ldr	r2, [pc, #136]	@ (80055a4 <HAL_DMA_IRQHandler+0xc8c>)
 800551c:	4293      	cmp	r3, r2
 800551e:	d02c      	beq.n	800557a <HAL_DMA_IRQHandler+0xc62>
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	4a20      	ldr	r2, [pc, #128]	@ (80055a8 <HAL_DMA_IRQHandler+0xc90>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d027      	beq.n	800557a <HAL_DMA_IRQHandler+0xc62>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	4a1f      	ldr	r2, [pc, #124]	@ (80055ac <HAL_DMA_IRQHandler+0xc94>)
 8005530:	4293      	cmp	r3, r2
 8005532:	d022      	beq.n	800557a <HAL_DMA_IRQHandler+0xc62>
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	4a1d      	ldr	r2, [pc, #116]	@ (80055b0 <HAL_DMA_IRQHandler+0xc98>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d01d      	beq.n	800557a <HAL_DMA_IRQHandler+0xc62>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	4a1c      	ldr	r2, [pc, #112]	@ (80055b4 <HAL_DMA_IRQHandler+0xc9c>)
 8005544:	4293      	cmp	r3, r2
 8005546:	d018      	beq.n	800557a <HAL_DMA_IRQHandler+0xc62>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	4a1a      	ldr	r2, [pc, #104]	@ (80055b8 <HAL_DMA_IRQHandler+0xca0>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d013      	beq.n	800557a <HAL_DMA_IRQHandler+0xc62>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	4a19      	ldr	r2, [pc, #100]	@ (80055bc <HAL_DMA_IRQHandler+0xca4>)
 8005558:	4293      	cmp	r3, r2
 800555a:	d00e      	beq.n	800557a <HAL_DMA_IRQHandler+0xc62>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	4a17      	ldr	r2, [pc, #92]	@ (80055c0 <HAL_DMA_IRQHandler+0xca8>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d009      	beq.n	800557a <HAL_DMA_IRQHandler+0xc62>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	4a16      	ldr	r2, [pc, #88]	@ (80055c4 <HAL_DMA_IRQHandler+0xcac>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d004      	beq.n	800557a <HAL_DMA_IRQHandler+0xc62>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	4a14      	ldr	r2, [pc, #80]	@ (80055c8 <HAL_DMA_IRQHandler+0xcb0>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d128      	bne.n	80055cc <HAL_DMA_IRQHandler+0xcb4>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	681a      	ldr	r2, [r3, #0]
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f022 0214 	bic.w	r2, r2, #20
 8005588:	601a      	str	r2, [r3, #0]
 800558a:	e027      	b.n	80055dc <HAL_DMA_IRQHandler+0xcc4>
 800558c:	40020010 	.word	0x40020010
 8005590:	40020028 	.word	0x40020028
 8005594:	40020040 	.word	0x40020040
 8005598:	40020058 	.word	0x40020058
 800559c:	40020070 	.word	0x40020070
 80055a0:	40020088 	.word	0x40020088
 80055a4:	400200a0 	.word	0x400200a0
 80055a8:	400200b8 	.word	0x400200b8
 80055ac:	40020410 	.word	0x40020410
 80055b0:	40020428 	.word	0x40020428
 80055b4:	40020440 	.word	0x40020440
 80055b8:	40020458 	.word	0x40020458
 80055bc:	40020470 	.word	0x40020470
 80055c0:	40020488 	.word	0x40020488
 80055c4:	400204a0 	.word	0x400204a0
 80055c8:	400204b8 	.word	0x400204b8
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	681a      	ldr	r2, [r3, #0]
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f022 020a 	bic.w	r2, r2, #10
 80055da:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2201      	movs	r2, #1
 80055e0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2200      	movs	r2, #0
 80055e8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	f000 8097 	beq.w	8005724 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055fa:	6878      	ldr	r0, [r7, #4]
 80055fc:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80055fe:	e091      	b.n	8005724 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005604:	f003 031f 	and.w	r3, r3, #31
 8005608:	2208      	movs	r2, #8
 800560a:	409a      	lsls	r2, r3
 800560c:	697b      	ldr	r3, [r7, #20]
 800560e:	4013      	ands	r3, r2
 8005610:	2b00      	cmp	r3, #0
 8005612:	f000 8088 	beq.w	8005726 <HAL_DMA_IRQHandler+0xe0e>
 8005616:	693b      	ldr	r3, [r7, #16]
 8005618:	f003 0308 	and.w	r3, r3, #8
 800561c:	2b00      	cmp	r3, #0
 800561e:	f000 8082 	beq.w	8005726 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4a41      	ldr	r2, [pc, #260]	@ (800572c <HAL_DMA_IRQHandler+0xe14>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d04a      	beq.n	80056c2 <HAL_DMA_IRQHandler+0xdaa>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	4a3f      	ldr	r2, [pc, #252]	@ (8005730 <HAL_DMA_IRQHandler+0xe18>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d045      	beq.n	80056c2 <HAL_DMA_IRQHandler+0xdaa>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	4a3e      	ldr	r2, [pc, #248]	@ (8005734 <HAL_DMA_IRQHandler+0xe1c>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d040      	beq.n	80056c2 <HAL_DMA_IRQHandler+0xdaa>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4a3c      	ldr	r2, [pc, #240]	@ (8005738 <HAL_DMA_IRQHandler+0xe20>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d03b      	beq.n	80056c2 <HAL_DMA_IRQHandler+0xdaa>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	4a3b      	ldr	r2, [pc, #236]	@ (800573c <HAL_DMA_IRQHandler+0xe24>)
 8005650:	4293      	cmp	r3, r2
 8005652:	d036      	beq.n	80056c2 <HAL_DMA_IRQHandler+0xdaa>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	4a39      	ldr	r2, [pc, #228]	@ (8005740 <HAL_DMA_IRQHandler+0xe28>)
 800565a:	4293      	cmp	r3, r2
 800565c:	d031      	beq.n	80056c2 <HAL_DMA_IRQHandler+0xdaa>
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	4a38      	ldr	r2, [pc, #224]	@ (8005744 <HAL_DMA_IRQHandler+0xe2c>)
 8005664:	4293      	cmp	r3, r2
 8005666:	d02c      	beq.n	80056c2 <HAL_DMA_IRQHandler+0xdaa>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	4a36      	ldr	r2, [pc, #216]	@ (8005748 <HAL_DMA_IRQHandler+0xe30>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d027      	beq.n	80056c2 <HAL_DMA_IRQHandler+0xdaa>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	4a35      	ldr	r2, [pc, #212]	@ (800574c <HAL_DMA_IRQHandler+0xe34>)
 8005678:	4293      	cmp	r3, r2
 800567a:	d022      	beq.n	80056c2 <HAL_DMA_IRQHandler+0xdaa>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	4a33      	ldr	r2, [pc, #204]	@ (8005750 <HAL_DMA_IRQHandler+0xe38>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d01d      	beq.n	80056c2 <HAL_DMA_IRQHandler+0xdaa>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	4a32      	ldr	r2, [pc, #200]	@ (8005754 <HAL_DMA_IRQHandler+0xe3c>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d018      	beq.n	80056c2 <HAL_DMA_IRQHandler+0xdaa>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4a30      	ldr	r2, [pc, #192]	@ (8005758 <HAL_DMA_IRQHandler+0xe40>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d013      	beq.n	80056c2 <HAL_DMA_IRQHandler+0xdaa>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	4a2f      	ldr	r2, [pc, #188]	@ (800575c <HAL_DMA_IRQHandler+0xe44>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d00e      	beq.n	80056c2 <HAL_DMA_IRQHandler+0xdaa>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	4a2d      	ldr	r2, [pc, #180]	@ (8005760 <HAL_DMA_IRQHandler+0xe48>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d009      	beq.n	80056c2 <HAL_DMA_IRQHandler+0xdaa>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	4a2c      	ldr	r2, [pc, #176]	@ (8005764 <HAL_DMA_IRQHandler+0xe4c>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d004      	beq.n	80056c2 <HAL_DMA_IRQHandler+0xdaa>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	4a2a      	ldr	r2, [pc, #168]	@ (8005768 <HAL_DMA_IRQHandler+0xe50>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d108      	bne.n	80056d4 <HAL_DMA_IRQHandler+0xdbc>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	681a      	ldr	r2, [r3, #0]
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f022 021c 	bic.w	r2, r2, #28
 80056d0:	601a      	str	r2, [r3, #0]
 80056d2:	e007      	b.n	80056e4 <HAL_DMA_IRQHandler+0xdcc>
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	681a      	ldr	r2, [r3, #0]
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f022 020e 	bic.w	r2, r2, #14
 80056e2:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80056e8:	f003 031f 	and.w	r3, r3, #31
 80056ec:	2201      	movs	r2, #1
 80056ee:	409a      	lsls	r2, r3
 80056f0:	69fb      	ldr	r3, [r7, #28]
 80056f2:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2201      	movs	r2, #1
 80056f8:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2201      	movs	r2, #1
 80056fe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2200      	movs	r2, #0
 8005706:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800570e:	2b00      	cmp	r3, #0
 8005710:	d009      	beq.n	8005726 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005716:	6878      	ldr	r0, [r7, #4]
 8005718:	4798      	blx	r3
 800571a:	e004      	b.n	8005726 <HAL_DMA_IRQHandler+0xe0e>
          return;
 800571c:	bf00      	nop
 800571e:	e002      	b.n	8005726 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005720:	bf00      	nop
 8005722:	e000      	b.n	8005726 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005724:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005726:	3728      	adds	r7, #40	@ 0x28
 8005728:	46bd      	mov	sp, r7
 800572a:	bd80      	pop	{r7, pc}
 800572c:	40020010 	.word	0x40020010
 8005730:	40020028 	.word	0x40020028
 8005734:	40020040 	.word	0x40020040
 8005738:	40020058 	.word	0x40020058
 800573c:	40020070 	.word	0x40020070
 8005740:	40020088 	.word	0x40020088
 8005744:	400200a0 	.word	0x400200a0
 8005748:	400200b8 	.word	0x400200b8
 800574c:	40020410 	.word	0x40020410
 8005750:	40020428 	.word	0x40020428
 8005754:	40020440 	.word	0x40020440
 8005758:	40020458 	.word	0x40020458
 800575c:	40020470 	.word	0x40020470
 8005760:	40020488 	.word	0x40020488
 8005764:	400204a0 	.word	0x400204a0
 8005768:	400204b8 	.word	0x400204b8

0800576c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800576c:	b480      	push	{r7}
 800576e:	b087      	sub	sp, #28
 8005770:	af00      	add	r7, sp, #0
 8005772:	60f8      	str	r0, [r7, #12]
 8005774:	60b9      	str	r1, [r7, #8]
 8005776:	607a      	str	r2, [r7, #4]
 8005778:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800577e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005784:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	4a7f      	ldr	r2, [pc, #508]	@ (8005988 <DMA_SetConfig+0x21c>)
 800578c:	4293      	cmp	r3, r2
 800578e:	d072      	beq.n	8005876 <DMA_SetConfig+0x10a>
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	4a7d      	ldr	r2, [pc, #500]	@ (800598c <DMA_SetConfig+0x220>)
 8005796:	4293      	cmp	r3, r2
 8005798:	d06d      	beq.n	8005876 <DMA_SetConfig+0x10a>
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	4a7c      	ldr	r2, [pc, #496]	@ (8005990 <DMA_SetConfig+0x224>)
 80057a0:	4293      	cmp	r3, r2
 80057a2:	d068      	beq.n	8005876 <DMA_SetConfig+0x10a>
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	4a7a      	ldr	r2, [pc, #488]	@ (8005994 <DMA_SetConfig+0x228>)
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d063      	beq.n	8005876 <DMA_SetConfig+0x10a>
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	4a79      	ldr	r2, [pc, #484]	@ (8005998 <DMA_SetConfig+0x22c>)
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d05e      	beq.n	8005876 <DMA_SetConfig+0x10a>
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	4a77      	ldr	r2, [pc, #476]	@ (800599c <DMA_SetConfig+0x230>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d059      	beq.n	8005876 <DMA_SetConfig+0x10a>
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	4a76      	ldr	r2, [pc, #472]	@ (80059a0 <DMA_SetConfig+0x234>)
 80057c8:	4293      	cmp	r3, r2
 80057ca:	d054      	beq.n	8005876 <DMA_SetConfig+0x10a>
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	4a74      	ldr	r2, [pc, #464]	@ (80059a4 <DMA_SetConfig+0x238>)
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d04f      	beq.n	8005876 <DMA_SetConfig+0x10a>
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	4a73      	ldr	r2, [pc, #460]	@ (80059a8 <DMA_SetConfig+0x23c>)
 80057dc:	4293      	cmp	r3, r2
 80057de:	d04a      	beq.n	8005876 <DMA_SetConfig+0x10a>
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	4a71      	ldr	r2, [pc, #452]	@ (80059ac <DMA_SetConfig+0x240>)
 80057e6:	4293      	cmp	r3, r2
 80057e8:	d045      	beq.n	8005876 <DMA_SetConfig+0x10a>
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	4a70      	ldr	r2, [pc, #448]	@ (80059b0 <DMA_SetConfig+0x244>)
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d040      	beq.n	8005876 <DMA_SetConfig+0x10a>
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	4a6e      	ldr	r2, [pc, #440]	@ (80059b4 <DMA_SetConfig+0x248>)
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d03b      	beq.n	8005876 <DMA_SetConfig+0x10a>
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	4a6d      	ldr	r2, [pc, #436]	@ (80059b8 <DMA_SetConfig+0x24c>)
 8005804:	4293      	cmp	r3, r2
 8005806:	d036      	beq.n	8005876 <DMA_SetConfig+0x10a>
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	4a6b      	ldr	r2, [pc, #428]	@ (80059bc <DMA_SetConfig+0x250>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d031      	beq.n	8005876 <DMA_SetConfig+0x10a>
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	4a6a      	ldr	r2, [pc, #424]	@ (80059c0 <DMA_SetConfig+0x254>)
 8005818:	4293      	cmp	r3, r2
 800581a:	d02c      	beq.n	8005876 <DMA_SetConfig+0x10a>
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	4a68      	ldr	r2, [pc, #416]	@ (80059c4 <DMA_SetConfig+0x258>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d027      	beq.n	8005876 <DMA_SetConfig+0x10a>
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	4a67      	ldr	r2, [pc, #412]	@ (80059c8 <DMA_SetConfig+0x25c>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d022      	beq.n	8005876 <DMA_SetConfig+0x10a>
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	4a65      	ldr	r2, [pc, #404]	@ (80059cc <DMA_SetConfig+0x260>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d01d      	beq.n	8005876 <DMA_SetConfig+0x10a>
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	4a64      	ldr	r2, [pc, #400]	@ (80059d0 <DMA_SetConfig+0x264>)
 8005840:	4293      	cmp	r3, r2
 8005842:	d018      	beq.n	8005876 <DMA_SetConfig+0x10a>
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4a62      	ldr	r2, [pc, #392]	@ (80059d4 <DMA_SetConfig+0x268>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d013      	beq.n	8005876 <DMA_SetConfig+0x10a>
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	4a61      	ldr	r2, [pc, #388]	@ (80059d8 <DMA_SetConfig+0x26c>)
 8005854:	4293      	cmp	r3, r2
 8005856:	d00e      	beq.n	8005876 <DMA_SetConfig+0x10a>
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	4a5f      	ldr	r2, [pc, #380]	@ (80059dc <DMA_SetConfig+0x270>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d009      	beq.n	8005876 <DMA_SetConfig+0x10a>
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	4a5e      	ldr	r2, [pc, #376]	@ (80059e0 <DMA_SetConfig+0x274>)
 8005868:	4293      	cmp	r3, r2
 800586a:	d004      	beq.n	8005876 <DMA_SetConfig+0x10a>
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	4a5c      	ldr	r2, [pc, #368]	@ (80059e4 <DMA_SetConfig+0x278>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d101      	bne.n	800587a <DMA_SetConfig+0x10e>
 8005876:	2301      	movs	r3, #1
 8005878:	e000      	b.n	800587c <DMA_SetConfig+0x110>
 800587a:	2300      	movs	r3, #0
 800587c:	2b00      	cmp	r3, #0
 800587e:	d00d      	beq.n	800589c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005884:	68fa      	ldr	r2, [r7, #12]
 8005886:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005888:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800588e:	2b00      	cmp	r3, #0
 8005890:	d004      	beq.n	800589c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005896:	68fa      	ldr	r2, [r7, #12]
 8005898:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800589a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	4a39      	ldr	r2, [pc, #228]	@ (8005988 <DMA_SetConfig+0x21c>)
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d04a      	beq.n	800593c <DMA_SetConfig+0x1d0>
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	4a38      	ldr	r2, [pc, #224]	@ (800598c <DMA_SetConfig+0x220>)
 80058ac:	4293      	cmp	r3, r2
 80058ae:	d045      	beq.n	800593c <DMA_SetConfig+0x1d0>
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	4a36      	ldr	r2, [pc, #216]	@ (8005990 <DMA_SetConfig+0x224>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d040      	beq.n	800593c <DMA_SetConfig+0x1d0>
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	4a35      	ldr	r2, [pc, #212]	@ (8005994 <DMA_SetConfig+0x228>)
 80058c0:	4293      	cmp	r3, r2
 80058c2:	d03b      	beq.n	800593c <DMA_SetConfig+0x1d0>
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	4a33      	ldr	r2, [pc, #204]	@ (8005998 <DMA_SetConfig+0x22c>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d036      	beq.n	800593c <DMA_SetConfig+0x1d0>
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	4a32      	ldr	r2, [pc, #200]	@ (800599c <DMA_SetConfig+0x230>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d031      	beq.n	800593c <DMA_SetConfig+0x1d0>
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	4a30      	ldr	r2, [pc, #192]	@ (80059a0 <DMA_SetConfig+0x234>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d02c      	beq.n	800593c <DMA_SetConfig+0x1d0>
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	4a2f      	ldr	r2, [pc, #188]	@ (80059a4 <DMA_SetConfig+0x238>)
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d027      	beq.n	800593c <DMA_SetConfig+0x1d0>
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	4a2d      	ldr	r2, [pc, #180]	@ (80059a8 <DMA_SetConfig+0x23c>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d022      	beq.n	800593c <DMA_SetConfig+0x1d0>
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	4a2c      	ldr	r2, [pc, #176]	@ (80059ac <DMA_SetConfig+0x240>)
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d01d      	beq.n	800593c <DMA_SetConfig+0x1d0>
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	4a2a      	ldr	r2, [pc, #168]	@ (80059b0 <DMA_SetConfig+0x244>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d018      	beq.n	800593c <DMA_SetConfig+0x1d0>
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	4a29      	ldr	r2, [pc, #164]	@ (80059b4 <DMA_SetConfig+0x248>)
 8005910:	4293      	cmp	r3, r2
 8005912:	d013      	beq.n	800593c <DMA_SetConfig+0x1d0>
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	4a27      	ldr	r2, [pc, #156]	@ (80059b8 <DMA_SetConfig+0x24c>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d00e      	beq.n	800593c <DMA_SetConfig+0x1d0>
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	4a26      	ldr	r2, [pc, #152]	@ (80059bc <DMA_SetConfig+0x250>)
 8005924:	4293      	cmp	r3, r2
 8005926:	d009      	beq.n	800593c <DMA_SetConfig+0x1d0>
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	4a24      	ldr	r2, [pc, #144]	@ (80059c0 <DMA_SetConfig+0x254>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d004      	beq.n	800593c <DMA_SetConfig+0x1d0>
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	4a23      	ldr	r2, [pc, #140]	@ (80059c4 <DMA_SetConfig+0x258>)
 8005938:	4293      	cmp	r3, r2
 800593a:	d101      	bne.n	8005940 <DMA_SetConfig+0x1d4>
 800593c:	2301      	movs	r3, #1
 800593e:	e000      	b.n	8005942 <DMA_SetConfig+0x1d6>
 8005940:	2300      	movs	r3, #0
 8005942:	2b00      	cmp	r3, #0
 8005944:	d059      	beq.n	80059fa <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800594a:	f003 031f 	and.w	r3, r3, #31
 800594e:	223f      	movs	r2, #63	@ 0x3f
 8005950:	409a      	lsls	r2, r3
 8005952:	697b      	ldr	r3, [r7, #20]
 8005954:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	681a      	ldr	r2, [r3, #0]
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005964:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	683a      	ldr	r2, [r7, #0]
 800596c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	689b      	ldr	r3, [r3, #8]
 8005972:	2b40      	cmp	r3, #64	@ 0x40
 8005974:	d138      	bne.n	80059e8 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	687a      	ldr	r2, [r7, #4]
 800597c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	68ba      	ldr	r2, [r7, #8]
 8005984:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005986:	e086      	b.n	8005a96 <DMA_SetConfig+0x32a>
 8005988:	40020010 	.word	0x40020010
 800598c:	40020028 	.word	0x40020028
 8005990:	40020040 	.word	0x40020040
 8005994:	40020058 	.word	0x40020058
 8005998:	40020070 	.word	0x40020070
 800599c:	40020088 	.word	0x40020088
 80059a0:	400200a0 	.word	0x400200a0
 80059a4:	400200b8 	.word	0x400200b8
 80059a8:	40020410 	.word	0x40020410
 80059ac:	40020428 	.word	0x40020428
 80059b0:	40020440 	.word	0x40020440
 80059b4:	40020458 	.word	0x40020458
 80059b8:	40020470 	.word	0x40020470
 80059bc:	40020488 	.word	0x40020488
 80059c0:	400204a0 	.word	0x400204a0
 80059c4:	400204b8 	.word	0x400204b8
 80059c8:	58025408 	.word	0x58025408
 80059cc:	5802541c 	.word	0x5802541c
 80059d0:	58025430 	.word	0x58025430
 80059d4:	58025444 	.word	0x58025444
 80059d8:	58025458 	.word	0x58025458
 80059dc:	5802546c 	.word	0x5802546c
 80059e0:	58025480 	.word	0x58025480
 80059e4:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	68ba      	ldr	r2, [r7, #8]
 80059ee:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	687a      	ldr	r2, [r7, #4]
 80059f6:	60da      	str	r2, [r3, #12]
}
 80059f8:	e04d      	b.n	8005a96 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	4a29      	ldr	r2, [pc, #164]	@ (8005aa4 <DMA_SetConfig+0x338>)
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d022      	beq.n	8005a4a <DMA_SetConfig+0x2de>
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	4a27      	ldr	r2, [pc, #156]	@ (8005aa8 <DMA_SetConfig+0x33c>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d01d      	beq.n	8005a4a <DMA_SetConfig+0x2de>
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	4a26      	ldr	r2, [pc, #152]	@ (8005aac <DMA_SetConfig+0x340>)
 8005a14:	4293      	cmp	r3, r2
 8005a16:	d018      	beq.n	8005a4a <DMA_SetConfig+0x2de>
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	4a24      	ldr	r2, [pc, #144]	@ (8005ab0 <DMA_SetConfig+0x344>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d013      	beq.n	8005a4a <DMA_SetConfig+0x2de>
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	4a23      	ldr	r2, [pc, #140]	@ (8005ab4 <DMA_SetConfig+0x348>)
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	d00e      	beq.n	8005a4a <DMA_SetConfig+0x2de>
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	4a21      	ldr	r2, [pc, #132]	@ (8005ab8 <DMA_SetConfig+0x34c>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d009      	beq.n	8005a4a <DMA_SetConfig+0x2de>
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	4a20      	ldr	r2, [pc, #128]	@ (8005abc <DMA_SetConfig+0x350>)
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d004      	beq.n	8005a4a <DMA_SetConfig+0x2de>
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	4a1e      	ldr	r2, [pc, #120]	@ (8005ac0 <DMA_SetConfig+0x354>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d101      	bne.n	8005a4e <DMA_SetConfig+0x2e2>
 8005a4a:	2301      	movs	r3, #1
 8005a4c:	e000      	b.n	8005a50 <DMA_SetConfig+0x2e4>
 8005a4e:	2300      	movs	r3, #0
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d020      	beq.n	8005a96 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a58:	f003 031f 	and.w	r3, r3, #31
 8005a5c:	2201      	movs	r2, #1
 8005a5e:	409a      	lsls	r2, r3
 8005a60:	693b      	ldr	r3, [r7, #16]
 8005a62:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	683a      	ldr	r2, [r7, #0]
 8005a6a:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	689b      	ldr	r3, [r3, #8]
 8005a70:	2b40      	cmp	r3, #64	@ 0x40
 8005a72:	d108      	bne.n	8005a86 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	687a      	ldr	r2, [r7, #4]
 8005a7a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	68ba      	ldr	r2, [r7, #8]
 8005a82:	60da      	str	r2, [r3, #12]
}
 8005a84:	e007      	b.n	8005a96 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	68ba      	ldr	r2, [r7, #8]
 8005a8c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	687a      	ldr	r2, [r7, #4]
 8005a94:	60da      	str	r2, [r3, #12]
}
 8005a96:	bf00      	nop
 8005a98:	371c      	adds	r7, #28
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa0:	4770      	bx	lr
 8005aa2:	bf00      	nop
 8005aa4:	58025408 	.word	0x58025408
 8005aa8:	5802541c 	.word	0x5802541c
 8005aac:	58025430 	.word	0x58025430
 8005ab0:	58025444 	.word	0x58025444
 8005ab4:	58025458 	.word	0x58025458
 8005ab8:	5802546c 	.word	0x5802546c
 8005abc:	58025480 	.word	0x58025480
 8005ac0:	58025494 	.word	0x58025494

08005ac4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005ac4:	b480      	push	{r7}
 8005ac6:	b085      	sub	sp, #20
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	4a42      	ldr	r2, [pc, #264]	@ (8005bdc <DMA_CalcBaseAndBitshift+0x118>)
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d04a      	beq.n	8005b6c <DMA_CalcBaseAndBitshift+0xa8>
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	4a41      	ldr	r2, [pc, #260]	@ (8005be0 <DMA_CalcBaseAndBitshift+0x11c>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d045      	beq.n	8005b6c <DMA_CalcBaseAndBitshift+0xa8>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	4a3f      	ldr	r2, [pc, #252]	@ (8005be4 <DMA_CalcBaseAndBitshift+0x120>)
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	d040      	beq.n	8005b6c <DMA_CalcBaseAndBitshift+0xa8>
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	4a3e      	ldr	r2, [pc, #248]	@ (8005be8 <DMA_CalcBaseAndBitshift+0x124>)
 8005af0:	4293      	cmp	r3, r2
 8005af2:	d03b      	beq.n	8005b6c <DMA_CalcBaseAndBitshift+0xa8>
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	4a3c      	ldr	r2, [pc, #240]	@ (8005bec <DMA_CalcBaseAndBitshift+0x128>)
 8005afa:	4293      	cmp	r3, r2
 8005afc:	d036      	beq.n	8005b6c <DMA_CalcBaseAndBitshift+0xa8>
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	4a3b      	ldr	r2, [pc, #236]	@ (8005bf0 <DMA_CalcBaseAndBitshift+0x12c>)
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d031      	beq.n	8005b6c <DMA_CalcBaseAndBitshift+0xa8>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	4a39      	ldr	r2, [pc, #228]	@ (8005bf4 <DMA_CalcBaseAndBitshift+0x130>)
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d02c      	beq.n	8005b6c <DMA_CalcBaseAndBitshift+0xa8>
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	4a38      	ldr	r2, [pc, #224]	@ (8005bf8 <DMA_CalcBaseAndBitshift+0x134>)
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	d027      	beq.n	8005b6c <DMA_CalcBaseAndBitshift+0xa8>
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	4a36      	ldr	r2, [pc, #216]	@ (8005bfc <DMA_CalcBaseAndBitshift+0x138>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d022      	beq.n	8005b6c <DMA_CalcBaseAndBitshift+0xa8>
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	4a35      	ldr	r2, [pc, #212]	@ (8005c00 <DMA_CalcBaseAndBitshift+0x13c>)
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	d01d      	beq.n	8005b6c <DMA_CalcBaseAndBitshift+0xa8>
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	4a33      	ldr	r2, [pc, #204]	@ (8005c04 <DMA_CalcBaseAndBitshift+0x140>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d018      	beq.n	8005b6c <DMA_CalcBaseAndBitshift+0xa8>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	4a32      	ldr	r2, [pc, #200]	@ (8005c08 <DMA_CalcBaseAndBitshift+0x144>)
 8005b40:	4293      	cmp	r3, r2
 8005b42:	d013      	beq.n	8005b6c <DMA_CalcBaseAndBitshift+0xa8>
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	4a30      	ldr	r2, [pc, #192]	@ (8005c0c <DMA_CalcBaseAndBitshift+0x148>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d00e      	beq.n	8005b6c <DMA_CalcBaseAndBitshift+0xa8>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	4a2f      	ldr	r2, [pc, #188]	@ (8005c10 <DMA_CalcBaseAndBitshift+0x14c>)
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d009      	beq.n	8005b6c <DMA_CalcBaseAndBitshift+0xa8>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	4a2d      	ldr	r2, [pc, #180]	@ (8005c14 <DMA_CalcBaseAndBitshift+0x150>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d004      	beq.n	8005b6c <DMA_CalcBaseAndBitshift+0xa8>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	4a2c      	ldr	r2, [pc, #176]	@ (8005c18 <DMA_CalcBaseAndBitshift+0x154>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d101      	bne.n	8005b70 <DMA_CalcBaseAndBitshift+0xac>
 8005b6c:	2301      	movs	r3, #1
 8005b6e:	e000      	b.n	8005b72 <DMA_CalcBaseAndBitshift+0xae>
 8005b70:	2300      	movs	r3, #0
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d024      	beq.n	8005bc0 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	b2db      	uxtb	r3, r3
 8005b7c:	3b10      	subs	r3, #16
 8005b7e:	4a27      	ldr	r2, [pc, #156]	@ (8005c1c <DMA_CalcBaseAndBitshift+0x158>)
 8005b80:	fba2 2303 	umull	r2, r3, r2, r3
 8005b84:	091b      	lsrs	r3, r3, #4
 8005b86:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	f003 0307 	and.w	r3, r3, #7
 8005b8e:	4a24      	ldr	r2, [pc, #144]	@ (8005c20 <DMA_CalcBaseAndBitshift+0x15c>)
 8005b90:	5cd3      	ldrb	r3, [r2, r3]
 8005b92:	461a      	mov	r2, r3
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	2b03      	cmp	r3, #3
 8005b9c:	d908      	bls.n	8005bb0 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	461a      	mov	r2, r3
 8005ba4:	4b1f      	ldr	r3, [pc, #124]	@ (8005c24 <DMA_CalcBaseAndBitshift+0x160>)
 8005ba6:	4013      	ands	r3, r2
 8005ba8:	1d1a      	adds	r2, r3, #4
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	659a      	str	r2, [r3, #88]	@ 0x58
 8005bae:	e00d      	b.n	8005bcc <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	461a      	mov	r2, r3
 8005bb6:	4b1b      	ldr	r3, [pc, #108]	@ (8005c24 <DMA_CalcBaseAndBitshift+0x160>)
 8005bb8:	4013      	ands	r3, r2
 8005bba:	687a      	ldr	r2, [r7, #4]
 8005bbc:	6593      	str	r3, [r2, #88]	@ 0x58
 8005bbe:	e005      	b.n	8005bcc <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	3714      	adds	r7, #20
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bda:	4770      	bx	lr
 8005bdc:	40020010 	.word	0x40020010
 8005be0:	40020028 	.word	0x40020028
 8005be4:	40020040 	.word	0x40020040
 8005be8:	40020058 	.word	0x40020058
 8005bec:	40020070 	.word	0x40020070
 8005bf0:	40020088 	.word	0x40020088
 8005bf4:	400200a0 	.word	0x400200a0
 8005bf8:	400200b8 	.word	0x400200b8
 8005bfc:	40020410 	.word	0x40020410
 8005c00:	40020428 	.word	0x40020428
 8005c04:	40020440 	.word	0x40020440
 8005c08:	40020458 	.word	0x40020458
 8005c0c:	40020470 	.word	0x40020470
 8005c10:	40020488 	.word	0x40020488
 8005c14:	400204a0 	.word	0x400204a0
 8005c18:	400204b8 	.word	0x400204b8
 8005c1c:	aaaaaaab 	.word	0xaaaaaaab
 8005c20:	08014a14 	.word	0x08014a14
 8005c24:	fffffc00 	.word	0xfffffc00

08005c28 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005c28:	b480      	push	{r7}
 8005c2a:	b085      	sub	sp, #20
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005c30:	2300      	movs	r3, #0
 8005c32:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	699b      	ldr	r3, [r3, #24]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d120      	bne.n	8005c7e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c40:	2b03      	cmp	r3, #3
 8005c42:	d858      	bhi.n	8005cf6 <DMA_CheckFifoParam+0xce>
 8005c44:	a201      	add	r2, pc, #4	@ (adr r2, 8005c4c <DMA_CheckFifoParam+0x24>)
 8005c46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c4a:	bf00      	nop
 8005c4c:	08005c5d 	.word	0x08005c5d
 8005c50:	08005c6f 	.word	0x08005c6f
 8005c54:	08005c5d 	.word	0x08005c5d
 8005c58:	08005cf7 	.word	0x08005cf7
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c60:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d048      	beq.n	8005cfa <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8005c68:	2301      	movs	r3, #1
 8005c6a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005c6c:	e045      	b.n	8005cfa <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c72:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005c76:	d142      	bne.n	8005cfe <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8005c78:	2301      	movs	r3, #1
 8005c7a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005c7c:	e03f      	b.n	8005cfe <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	699b      	ldr	r3, [r3, #24]
 8005c82:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005c86:	d123      	bne.n	8005cd0 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c8c:	2b03      	cmp	r3, #3
 8005c8e:	d838      	bhi.n	8005d02 <DMA_CheckFifoParam+0xda>
 8005c90:	a201      	add	r2, pc, #4	@ (adr r2, 8005c98 <DMA_CheckFifoParam+0x70>)
 8005c92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c96:	bf00      	nop
 8005c98:	08005ca9 	.word	0x08005ca9
 8005c9c:	08005caf 	.word	0x08005caf
 8005ca0:	08005ca9 	.word	0x08005ca9
 8005ca4:	08005cc1 	.word	0x08005cc1
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8005ca8:	2301      	movs	r3, #1
 8005caa:	73fb      	strb	r3, [r7, #15]
        break;
 8005cac:	e030      	b.n	8005d10 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cb2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d025      	beq.n	8005d06 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8005cba:	2301      	movs	r3, #1
 8005cbc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005cbe:	e022      	b.n	8005d06 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cc4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005cc8:	d11f      	bne.n	8005d0a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8005cca:	2301      	movs	r3, #1
 8005ccc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005cce:	e01c      	b.n	8005d0a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cd4:	2b02      	cmp	r3, #2
 8005cd6:	d902      	bls.n	8005cde <DMA_CheckFifoParam+0xb6>
 8005cd8:	2b03      	cmp	r3, #3
 8005cda:	d003      	beq.n	8005ce4 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8005cdc:	e018      	b.n	8005d10 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8005cde:	2301      	movs	r3, #1
 8005ce0:	73fb      	strb	r3, [r7, #15]
        break;
 8005ce2:	e015      	b.n	8005d10 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ce8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d00e      	beq.n	8005d0e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8005cf0:	2301      	movs	r3, #1
 8005cf2:	73fb      	strb	r3, [r7, #15]
    break;
 8005cf4:	e00b      	b.n	8005d0e <DMA_CheckFifoParam+0xe6>
        break;
 8005cf6:	bf00      	nop
 8005cf8:	e00a      	b.n	8005d10 <DMA_CheckFifoParam+0xe8>
        break;
 8005cfa:	bf00      	nop
 8005cfc:	e008      	b.n	8005d10 <DMA_CheckFifoParam+0xe8>
        break;
 8005cfe:	bf00      	nop
 8005d00:	e006      	b.n	8005d10 <DMA_CheckFifoParam+0xe8>
        break;
 8005d02:	bf00      	nop
 8005d04:	e004      	b.n	8005d10 <DMA_CheckFifoParam+0xe8>
        break;
 8005d06:	bf00      	nop
 8005d08:	e002      	b.n	8005d10 <DMA_CheckFifoParam+0xe8>
        break;
 8005d0a:	bf00      	nop
 8005d0c:	e000      	b.n	8005d10 <DMA_CheckFifoParam+0xe8>
    break;
 8005d0e:	bf00      	nop
    }
  }

  return status;
 8005d10:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d12:	4618      	mov	r0, r3
 8005d14:	3714      	adds	r7, #20
 8005d16:	46bd      	mov	sp, r7
 8005d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1c:	4770      	bx	lr
 8005d1e:	bf00      	nop

08005d20 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005d20:	b480      	push	{r7}
 8005d22:	b085      	sub	sp, #20
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	4a38      	ldr	r2, [pc, #224]	@ (8005e14 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d022      	beq.n	8005d7e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	4a36      	ldr	r2, [pc, #216]	@ (8005e18 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d01d      	beq.n	8005d7e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	4a35      	ldr	r2, [pc, #212]	@ (8005e1c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d018      	beq.n	8005d7e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	4a33      	ldr	r2, [pc, #204]	@ (8005e20 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d013      	beq.n	8005d7e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	4a32      	ldr	r2, [pc, #200]	@ (8005e24 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d00e      	beq.n	8005d7e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	4a30      	ldr	r2, [pc, #192]	@ (8005e28 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d009      	beq.n	8005d7e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	4a2f      	ldr	r2, [pc, #188]	@ (8005e2c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8005d70:	4293      	cmp	r3, r2
 8005d72:	d004      	beq.n	8005d7e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	4a2d      	ldr	r2, [pc, #180]	@ (8005e30 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d101      	bne.n	8005d82 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8005d7e:	2301      	movs	r3, #1
 8005d80:	e000      	b.n	8005d84 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8005d82:	2300      	movs	r3, #0
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d01a      	beq.n	8005dbe <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	b2db      	uxtb	r3, r3
 8005d8e:	3b08      	subs	r3, #8
 8005d90:	4a28      	ldr	r2, [pc, #160]	@ (8005e34 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8005d92:	fba2 2303 	umull	r2, r3, r2, r3
 8005d96:	091b      	lsrs	r3, r3, #4
 8005d98:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8005d9a:	68fa      	ldr	r2, [r7, #12]
 8005d9c:	4b26      	ldr	r3, [pc, #152]	@ (8005e38 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8005d9e:	4413      	add	r3, r2
 8005da0:	009b      	lsls	r3, r3, #2
 8005da2:	461a      	mov	r2, r3
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	4a24      	ldr	r2, [pc, #144]	@ (8005e3c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8005dac:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	f003 031f 	and.w	r3, r3, #31
 8005db4:	2201      	movs	r2, #1
 8005db6:	409a      	lsls	r2, r3
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8005dbc:	e024      	b.n	8005e08 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	b2db      	uxtb	r3, r3
 8005dc4:	3b10      	subs	r3, #16
 8005dc6:	4a1e      	ldr	r2, [pc, #120]	@ (8005e40 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8005dc8:	fba2 2303 	umull	r2, r3, r2, r3
 8005dcc:	091b      	lsrs	r3, r3, #4
 8005dce:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8005dd0:	68bb      	ldr	r3, [r7, #8]
 8005dd2:	4a1c      	ldr	r2, [pc, #112]	@ (8005e44 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8005dd4:	4293      	cmp	r3, r2
 8005dd6:	d806      	bhi.n	8005de6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8005dd8:	68bb      	ldr	r3, [r7, #8]
 8005dda:	4a1b      	ldr	r2, [pc, #108]	@ (8005e48 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8005ddc:	4293      	cmp	r3, r2
 8005dde:	d902      	bls.n	8005de6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	3308      	adds	r3, #8
 8005de4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8005de6:	68fa      	ldr	r2, [r7, #12]
 8005de8:	4b18      	ldr	r3, [pc, #96]	@ (8005e4c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8005dea:	4413      	add	r3, r2
 8005dec:	009b      	lsls	r3, r3, #2
 8005dee:	461a      	mov	r2, r3
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	4a16      	ldr	r2, [pc, #88]	@ (8005e50 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005df8:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	f003 031f 	and.w	r3, r3, #31
 8005e00:	2201      	movs	r2, #1
 8005e02:	409a      	lsls	r2, r3
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005e08:	bf00      	nop
 8005e0a:	3714      	adds	r7, #20
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e12:	4770      	bx	lr
 8005e14:	58025408 	.word	0x58025408
 8005e18:	5802541c 	.word	0x5802541c
 8005e1c:	58025430 	.word	0x58025430
 8005e20:	58025444 	.word	0x58025444
 8005e24:	58025458 	.word	0x58025458
 8005e28:	5802546c 	.word	0x5802546c
 8005e2c:	58025480 	.word	0x58025480
 8005e30:	58025494 	.word	0x58025494
 8005e34:	cccccccd 	.word	0xcccccccd
 8005e38:	16009600 	.word	0x16009600
 8005e3c:	58025880 	.word	0x58025880
 8005e40:	aaaaaaab 	.word	0xaaaaaaab
 8005e44:	400204b8 	.word	0x400204b8
 8005e48:	4002040f 	.word	0x4002040f
 8005e4c:	10008200 	.word	0x10008200
 8005e50:	40020880 	.word	0x40020880

08005e54 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005e54:	b480      	push	{r7}
 8005e56:	b085      	sub	sp, #20
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	685b      	ldr	r3, [r3, #4]
 8005e60:	b2db      	uxtb	r3, r3
 8005e62:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d04a      	beq.n	8005f00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	2b08      	cmp	r3, #8
 8005e6e:	d847      	bhi.n	8005f00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	4a25      	ldr	r2, [pc, #148]	@ (8005f0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d022      	beq.n	8005ec0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	4a24      	ldr	r2, [pc, #144]	@ (8005f10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d01d      	beq.n	8005ec0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	4a22      	ldr	r2, [pc, #136]	@ (8005f14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d018      	beq.n	8005ec0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	4a21      	ldr	r2, [pc, #132]	@ (8005f18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8005e94:	4293      	cmp	r3, r2
 8005e96:	d013      	beq.n	8005ec0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	4a1f      	ldr	r2, [pc, #124]	@ (8005f1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d00e      	beq.n	8005ec0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	4a1e      	ldr	r2, [pc, #120]	@ (8005f20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	d009      	beq.n	8005ec0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	4a1c      	ldr	r2, [pc, #112]	@ (8005f24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d004      	beq.n	8005ec0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	4a1b      	ldr	r2, [pc, #108]	@ (8005f28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8005ebc:	4293      	cmp	r3, r2
 8005ebe:	d101      	bne.n	8005ec4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8005ec0:	2301      	movs	r3, #1
 8005ec2:	e000      	b.n	8005ec6 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d00a      	beq.n	8005ee0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8005eca:	68fa      	ldr	r2, [r7, #12]
 8005ecc:	4b17      	ldr	r3, [pc, #92]	@ (8005f2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8005ece:	4413      	add	r3, r2
 8005ed0:	009b      	lsls	r3, r3, #2
 8005ed2:	461a      	mov	r2, r3
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	4a15      	ldr	r2, [pc, #84]	@ (8005f30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8005edc:	671a      	str	r2, [r3, #112]	@ 0x70
 8005ede:	e009      	b.n	8005ef4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005ee0:	68fa      	ldr	r2, [r7, #12]
 8005ee2:	4b14      	ldr	r3, [pc, #80]	@ (8005f34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8005ee4:	4413      	add	r3, r2
 8005ee6:	009b      	lsls	r3, r3, #2
 8005ee8:	461a      	mov	r2, r3
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	4a11      	ldr	r2, [pc, #68]	@ (8005f38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8005ef2:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	3b01      	subs	r3, #1
 8005ef8:	2201      	movs	r2, #1
 8005efa:	409a      	lsls	r2, r3
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8005f00:	bf00      	nop
 8005f02:	3714      	adds	r7, #20
 8005f04:	46bd      	mov	sp, r7
 8005f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0a:	4770      	bx	lr
 8005f0c:	58025408 	.word	0x58025408
 8005f10:	5802541c 	.word	0x5802541c
 8005f14:	58025430 	.word	0x58025430
 8005f18:	58025444 	.word	0x58025444
 8005f1c:	58025458 	.word	0x58025458
 8005f20:	5802546c 	.word	0x5802546c
 8005f24:	58025480 	.word	0x58025480
 8005f28:	58025494 	.word	0x58025494
 8005f2c:	1600963f 	.word	0x1600963f
 8005f30:	58025940 	.word	0x58025940
 8005f34:	1000823f 	.word	0x1000823f
 8005f38:	40020940 	.word	0x40020940

08005f3c <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8005f3c:	b480      	push	{r7}
 8005f3e:	b087      	sub	sp, #28
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	60f8      	str	r0, [r7, #12]
 8005f44:	460b      	mov	r3, r1
 8005f46:	607a      	str	r2, [r7, #4]
 8005f48:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	75fb      	strb	r3, [r7, #23]

  /* Check null pointer */
  if (hexti == NULL)
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d101      	bne.n	8005f58 <HAL_EXTI_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8005f54:	2301      	movs	r3, #1
 8005f56:	e00a      	b.n	8005f6e <HAL_EXTI_RegisterCallback+0x32>
  }

  switch (CallbackID)
 8005f58:	7afb      	ldrb	r3, [r7, #11]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d103      	bne.n	8005f66 <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	687a      	ldr	r2, [r7, #4]
 8005f62:	605a      	str	r2, [r3, #4]
      break;
 8005f64:	e002      	b.n	8005f6c <HAL_EXTI_RegisterCallback+0x30>

    default:
      status = HAL_ERROR;
 8005f66:	2301      	movs	r3, #1
 8005f68:	75fb      	strb	r3, [r7, #23]
      break;
 8005f6a:	bf00      	nop
  }

  return status;
 8005f6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f6e:	4618      	mov	r0, r3
 8005f70:	371c      	adds	r7, #28
 8005f72:	46bd      	mov	sp, r7
 8005f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f78:	4770      	bx	lr

08005f7a <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8005f7a:	b480      	push	{r7}
 8005f7c:	b083      	sub	sp, #12
 8005f7e:	af00      	add	r7, sp, #0
 8005f80:	6078      	str	r0, [r7, #4]
 8005f82:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d101      	bne.n	8005f8e <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8005f8a:	2301      	movs	r3, #1
 8005f8c:	e003      	b.n	8005f96 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	683a      	ldr	r2, [r7, #0]
 8005f92:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8005f94:	2300      	movs	r3, #0
  }
}
 8005f96:	4618      	mov	r0, r3
 8005f98:	370c      	adds	r7, #12
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa0:	4770      	bx	lr
	...

08005fa4 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b086      	sub	sp, #24
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	0c1b      	lsrs	r3, r3, #16
 8005fb2:	f003 0303 	and.w	r3, r3, #3
 8005fb6:	613b      	str	r3, [r7, #16]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f003 031f 	and.w	r3, r3, #31
 8005fc0:	2201      	movs	r2, #1
 8005fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8005fc6:	60fb      	str	r3, [r7, #12]

#if defined(DUAL_CORE)
  if (HAL_GetCurrentCPUID() == CM7_CPUID)
 8005fc8:	f7fd fecc 	bl	8003d64 <HAL_GetCurrentCPUID>
 8005fcc:	4603      	mov	r3, r0
 8005fce:	2b03      	cmp	r3, #3
 8005fd0:	d105      	bne.n	8005fde <HAL_EXTI_IRQHandler+0x3a>
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
 8005fd2:	693b      	ldr	r3, [r7, #16]
 8005fd4:	011a      	lsls	r2, r3, #4
 8005fd6:	4b0f      	ldr	r3, [pc, #60]	@ (8006014 <HAL_EXTI_IRQHandler+0x70>)
 8005fd8:	4413      	add	r3, r2
 8005fda:	617b      	str	r3, [r7, #20]
 8005fdc:	e004      	b.n	8005fe8 <HAL_EXTI_IRQHandler+0x44>
  }
  else /* Cortex-M4*/
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->C2PR1 + (EXTI_MODE_OFFSET * offset));
 8005fde:	693b      	ldr	r3, [r7, #16]
 8005fe0:	011a      	lsls	r2, r3, #4
 8005fe2:	4b0d      	ldr	r3, [pc, #52]	@ (8006018 <HAL_EXTI_IRQHandler+0x74>)
 8005fe4:	4413      	add	r3, r2
 8005fe6:	617b      	str	r3, [r7, #20]
#else
  regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
#endif /* DUAL_CORE */

  /* Get pending bit  */
  regval = (*regaddr & maskline);
 8005fe8:	697b      	ldr	r3, [r7, #20]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	68fa      	ldr	r2, [r7, #12]
 8005fee:	4013      	ands	r3, r2
 8005ff0:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00U)
 8005ff2:	68bb      	ldr	r3, [r7, #8]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d009      	beq.n	800600c <HAL_EXTI_IRQHandler+0x68>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8005ff8:	697b      	ldr	r3, [r7, #20]
 8005ffa:	68fa      	ldr	r2, [r7, #12]
 8005ffc:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	685b      	ldr	r3, [r3, #4]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d002      	beq.n	800600c <HAL_EXTI_IRQHandler+0x68>
    {
      hexti->PendingCallback();
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	685b      	ldr	r3, [r3, #4]
 800600a:	4798      	blx	r3
    }
  }
}
 800600c:	bf00      	nop
 800600e:	3718      	adds	r7, #24
 8006010:	46bd      	mov	sp, r7
 8006012:	bd80      	pop	{r7, pc}
 8006014:	58000088 	.word	0x58000088
 8006018:	580000c8 	.word	0x580000c8

0800601c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800601c:	b480      	push	{r7}
 800601e:	b089      	sub	sp, #36	@ 0x24
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
 8006024:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006026:	2300      	movs	r3, #0
 8006028:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800602a:	4b89      	ldr	r3, [pc, #548]	@ (8006250 <HAL_GPIO_Init+0x234>)
 800602c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800602e:	e194      	b.n	800635a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	681a      	ldr	r2, [r3, #0]
 8006034:	2101      	movs	r1, #1
 8006036:	69fb      	ldr	r3, [r7, #28]
 8006038:	fa01 f303 	lsl.w	r3, r1, r3
 800603c:	4013      	ands	r3, r2
 800603e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8006040:	693b      	ldr	r3, [r7, #16]
 8006042:	2b00      	cmp	r3, #0
 8006044:	f000 8186 	beq.w	8006354 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	685b      	ldr	r3, [r3, #4]
 800604c:	f003 0303 	and.w	r3, r3, #3
 8006050:	2b01      	cmp	r3, #1
 8006052:	d005      	beq.n	8006060 <HAL_GPIO_Init+0x44>
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	685b      	ldr	r3, [r3, #4]
 8006058:	f003 0303 	and.w	r3, r3, #3
 800605c:	2b02      	cmp	r3, #2
 800605e:	d130      	bne.n	80060c2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	689b      	ldr	r3, [r3, #8]
 8006064:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006066:	69fb      	ldr	r3, [r7, #28]
 8006068:	005b      	lsls	r3, r3, #1
 800606a:	2203      	movs	r2, #3
 800606c:	fa02 f303 	lsl.w	r3, r2, r3
 8006070:	43db      	mvns	r3, r3
 8006072:	69ba      	ldr	r2, [r7, #24]
 8006074:	4013      	ands	r3, r2
 8006076:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	68da      	ldr	r2, [r3, #12]
 800607c:	69fb      	ldr	r3, [r7, #28]
 800607e:	005b      	lsls	r3, r3, #1
 8006080:	fa02 f303 	lsl.w	r3, r2, r3
 8006084:	69ba      	ldr	r2, [r7, #24]
 8006086:	4313      	orrs	r3, r2
 8006088:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	69ba      	ldr	r2, [r7, #24]
 800608e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	685b      	ldr	r3, [r3, #4]
 8006094:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006096:	2201      	movs	r2, #1
 8006098:	69fb      	ldr	r3, [r7, #28]
 800609a:	fa02 f303 	lsl.w	r3, r2, r3
 800609e:	43db      	mvns	r3, r3
 80060a0:	69ba      	ldr	r2, [r7, #24]
 80060a2:	4013      	ands	r3, r2
 80060a4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	685b      	ldr	r3, [r3, #4]
 80060aa:	091b      	lsrs	r3, r3, #4
 80060ac:	f003 0201 	and.w	r2, r3, #1
 80060b0:	69fb      	ldr	r3, [r7, #28]
 80060b2:	fa02 f303 	lsl.w	r3, r2, r3
 80060b6:	69ba      	ldr	r2, [r7, #24]
 80060b8:	4313      	orrs	r3, r2
 80060ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	69ba      	ldr	r2, [r7, #24]
 80060c0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	685b      	ldr	r3, [r3, #4]
 80060c6:	f003 0303 	and.w	r3, r3, #3
 80060ca:	2b03      	cmp	r3, #3
 80060cc:	d017      	beq.n	80060fe <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	68db      	ldr	r3, [r3, #12]
 80060d2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80060d4:	69fb      	ldr	r3, [r7, #28]
 80060d6:	005b      	lsls	r3, r3, #1
 80060d8:	2203      	movs	r2, #3
 80060da:	fa02 f303 	lsl.w	r3, r2, r3
 80060de:	43db      	mvns	r3, r3
 80060e0:	69ba      	ldr	r2, [r7, #24]
 80060e2:	4013      	ands	r3, r2
 80060e4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80060e6:	683b      	ldr	r3, [r7, #0]
 80060e8:	689a      	ldr	r2, [r3, #8]
 80060ea:	69fb      	ldr	r3, [r7, #28]
 80060ec:	005b      	lsls	r3, r3, #1
 80060ee:	fa02 f303 	lsl.w	r3, r2, r3
 80060f2:	69ba      	ldr	r2, [r7, #24]
 80060f4:	4313      	orrs	r3, r2
 80060f6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	69ba      	ldr	r2, [r7, #24]
 80060fc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	685b      	ldr	r3, [r3, #4]
 8006102:	f003 0303 	and.w	r3, r3, #3
 8006106:	2b02      	cmp	r3, #2
 8006108:	d123      	bne.n	8006152 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800610a:	69fb      	ldr	r3, [r7, #28]
 800610c:	08da      	lsrs	r2, r3, #3
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	3208      	adds	r2, #8
 8006112:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006116:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006118:	69fb      	ldr	r3, [r7, #28]
 800611a:	f003 0307 	and.w	r3, r3, #7
 800611e:	009b      	lsls	r3, r3, #2
 8006120:	220f      	movs	r2, #15
 8006122:	fa02 f303 	lsl.w	r3, r2, r3
 8006126:	43db      	mvns	r3, r3
 8006128:	69ba      	ldr	r2, [r7, #24]
 800612a:	4013      	ands	r3, r2
 800612c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	691a      	ldr	r2, [r3, #16]
 8006132:	69fb      	ldr	r3, [r7, #28]
 8006134:	f003 0307 	and.w	r3, r3, #7
 8006138:	009b      	lsls	r3, r3, #2
 800613a:	fa02 f303 	lsl.w	r3, r2, r3
 800613e:	69ba      	ldr	r2, [r7, #24]
 8006140:	4313      	orrs	r3, r2
 8006142:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006144:	69fb      	ldr	r3, [r7, #28]
 8006146:	08da      	lsrs	r2, r3, #3
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	3208      	adds	r2, #8
 800614c:	69b9      	ldr	r1, [r7, #24]
 800614e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006158:	69fb      	ldr	r3, [r7, #28]
 800615a:	005b      	lsls	r3, r3, #1
 800615c:	2203      	movs	r2, #3
 800615e:	fa02 f303 	lsl.w	r3, r2, r3
 8006162:	43db      	mvns	r3, r3
 8006164:	69ba      	ldr	r2, [r7, #24]
 8006166:	4013      	ands	r3, r2
 8006168:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	685b      	ldr	r3, [r3, #4]
 800616e:	f003 0203 	and.w	r2, r3, #3
 8006172:	69fb      	ldr	r3, [r7, #28]
 8006174:	005b      	lsls	r3, r3, #1
 8006176:	fa02 f303 	lsl.w	r3, r2, r3
 800617a:	69ba      	ldr	r2, [r7, #24]
 800617c:	4313      	orrs	r3, r2
 800617e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	69ba      	ldr	r2, [r7, #24]
 8006184:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	685b      	ldr	r3, [r3, #4]
 800618a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800618e:	2b00      	cmp	r3, #0
 8006190:	f000 80e0 	beq.w	8006354 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006194:	4b2f      	ldr	r3, [pc, #188]	@ (8006254 <HAL_GPIO_Init+0x238>)
 8006196:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800619a:	4a2e      	ldr	r2, [pc, #184]	@ (8006254 <HAL_GPIO_Init+0x238>)
 800619c:	f043 0302 	orr.w	r3, r3, #2
 80061a0:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80061a4:	4b2b      	ldr	r3, [pc, #172]	@ (8006254 <HAL_GPIO_Init+0x238>)
 80061a6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80061aa:	f003 0302 	and.w	r3, r3, #2
 80061ae:	60fb      	str	r3, [r7, #12]
 80061b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80061b2:	4a29      	ldr	r2, [pc, #164]	@ (8006258 <HAL_GPIO_Init+0x23c>)
 80061b4:	69fb      	ldr	r3, [r7, #28]
 80061b6:	089b      	lsrs	r3, r3, #2
 80061b8:	3302      	adds	r3, #2
 80061ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80061be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80061c0:	69fb      	ldr	r3, [r7, #28]
 80061c2:	f003 0303 	and.w	r3, r3, #3
 80061c6:	009b      	lsls	r3, r3, #2
 80061c8:	220f      	movs	r2, #15
 80061ca:	fa02 f303 	lsl.w	r3, r2, r3
 80061ce:	43db      	mvns	r3, r3
 80061d0:	69ba      	ldr	r2, [r7, #24]
 80061d2:	4013      	ands	r3, r2
 80061d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	4a20      	ldr	r2, [pc, #128]	@ (800625c <HAL_GPIO_Init+0x240>)
 80061da:	4293      	cmp	r3, r2
 80061dc:	d052      	beq.n	8006284 <HAL_GPIO_Init+0x268>
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	4a1f      	ldr	r2, [pc, #124]	@ (8006260 <HAL_GPIO_Init+0x244>)
 80061e2:	4293      	cmp	r3, r2
 80061e4:	d031      	beq.n	800624a <HAL_GPIO_Init+0x22e>
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	4a1e      	ldr	r2, [pc, #120]	@ (8006264 <HAL_GPIO_Init+0x248>)
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d02b      	beq.n	8006246 <HAL_GPIO_Init+0x22a>
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	4a1d      	ldr	r2, [pc, #116]	@ (8006268 <HAL_GPIO_Init+0x24c>)
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d025      	beq.n	8006242 <HAL_GPIO_Init+0x226>
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	4a1c      	ldr	r2, [pc, #112]	@ (800626c <HAL_GPIO_Init+0x250>)
 80061fa:	4293      	cmp	r3, r2
 80061fc:	d01f      	beq.n	800623e <HAL_GPIO_Init+0x222>
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	4a1b      	ldr	r2, [pc, #108]	@ (8006270 <HAL_GPIO_Init+0x254>)
 8006202:	4293      	cmp	r3, r2
 8006204:	d019      	beq.n	800623a <HAL_GPIO_Init+0x21e>
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	4a1a      	ldr	r2, [pc, #104]	@ (8006274 <HAL_GPIO_Init+0x258>)
 800620a:	4293      	cmp	r3, r2
 800620c:	d013      	beq.n	8006236 <HAL_GPIO_Init+0x21a>
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	4a19      	ldr	r2, [pc, #100]	@ (8006278 <HAL_GPIO_Init+0x25c>)
 8006212:	4293      	cmp	r3, r2
 8006214:	d00d      	beq.n	8006232 <HAL_GPIO_Init+0x216>
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	4a18      	ldr	r2, [pc, #96]	@ (800627c <HAL_GPIO_Init+0x260>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d007      	beq.n	800622e <HAL_GPIO_Init+0x212>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	4a17      	ldr	r2, [pc, #92]	@ (8006280 <HAL_GPIO_Init+0x264>)
 8006222:	4293      	cmp	r3, r2
 8006224:	d101      	bne.n	800622a <HAL_GPIO_Init+0x20e>
 8006226:	2309      	movs	r3, #9
 8006228:	e02d      	b.n	8006286 <HAL_GPIO_Init+0x26a>
 800622a:	230a      	movs	r3, #10
 800622c:	e02b      	b.n	8006286 <HAL_GPIO_Init+0x26a>
 800622e:	2308      	movs	r3, #8
 8006230:	e029      	b.n	8006286 <HAL_GPIO_Init+0x26a>
 8006232:	2307      	movs	r3, #7
 8006234:	e027      	b.n	8006286 <HAL_GPIO_Init+0x26a>
 8006236:	2306      	movs	r3, #6
 8006238:	e025      	b.n	8006286 <HAL_GPIO_Init+0x26a>
 800623a:	2305      	movs	r3, #5
 800623c:	e023      	b.n	8006286 <HAL_GPIO_Init+0x26a>
 800623e:	2304      	movs	r3, #4
 8006240:	e021      	b.n	8006286 <HAL_GPIO_Init+0x26a>
 8006242:	2303      	movs	r3, #3
 8006244:	e01f      	b.n	8006286 <HAL_GPIO_Init+0x26a>
 8006246:	2302      	movs	r3, #2
 8006248:	e01d      	b.n	8006286 <HAL_GPIO_Init+0x26a>
 800624a:	2301      	movs	r3, #1
 800624c:	e01b      	b.n	8006286 <HAL_GPIO_Init+0x26a>
 800624e:	bf00      	nop
 8006250:	58000080 	.word	0x58000080
 8006254:	58024400 	.word	0x58024400
 8006258:	58000400 	.word	0x58000400
 800625c:	58020000 	.word	0x58020000
 8006260:	58020400 	.word	0x58020400
 8006264:	58020800 	.word	0x58020800
 8006268:	58020c00 	.word	0x58020c00
 800626c:	58021000 	.word	0x58021000
 8006270:	58021400 	.word	0x58021400
 8006274:	58021800 	.word	0x58021800
 8006278:	58021c00 	.word	0x58021c00
 800627c:	58022000 	.word	0x58022000
 8006280:	58022400 	.word	0x58022400
 8006284:	2300      	movs	r3, #0
 8006286:	69fa      	ldr	r2, [r7, #28]
 8006288:	f002 0203 	and.w	r2, r2, #3
 800628c:	0092      	lsls	r2, r2, #2
 800628e:	4093      	lsls	r3, r2
 8006290:	69ba      	ldr	r2, [r7, #24]
 8006292:	4313      	orrs	r3, r2
 8006294:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006296:	4938      	ldr	r1, [pc, #224]	@ (8006378 <HAL_GPIO_Init+0x35c>)
 8006298:	69fb      	ldr	r3, [r7, #28]
 800629a:	089b      	lsrs	r3, r3, #2
 800629c:	3302      	adds	r3, #2
 800629e:	69ba      	ldr	r2, [r7, #24]
 80062a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80062a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80062ac:	693b      	ldr	r3, [r7, #16]
 80062ae:	43db      	mvns	r3, r3
 80062b0:	69ba      	ldr	r2, [r7, #24]
 80062b2:	4013      	ands	r3, r2
 80062b4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80062b6:	683b      	ldr	r3, [r7, #0]
 80062b8:	685b      	ldr	r3, [r3, #4]
 80062ba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d003      	beq.n	80062ca <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80062c2:	69ba      	ldr	r2, [r7, #24]
 80062c4:	693b      	ldr	r3, [r7, #16]
 80062c6:	4313      	orrs	r3, r2
 80062c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80062ca:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80062ce:	69bb      	ldr	r3, [r7, #24]
 80062d0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80062d2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80062d6:	685b      	ldr	r3, [r3, #4]
 80062d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80062da:	693b      	ldr	r3, [r7, #16]
 80062dc:	43db      	mvns	r3, r3
 80062de:	69ba      	ldr	r2, [r7, #24]
 80062e0:	4013      	ands	r3, r2
 80062e2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	685b      	ldr	r3, [r3, #4]
 80062e8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d003      	beq.n	80062f8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80062f0:	69ba      	ldr	r2, [r7, #24]
 80062f2:	693b      	ldr	r3, [r7, #16]
 80062f4:	4313      	orrs	r3, r2
 80062f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80062f8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80062fc:	69bb      	ldr	r3, [r7, #24]
 80062fe:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8006300:	697b      	ldr	r3, [r7, #20]
 8006302:	685b      	ldr	r3, [r3, #4]
 8006304:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006306:	693b      	ldr	r3, [r7, #16]
 8006308:	43db      	mvns	r3, r3
 800630a:	69ba      	ldr	r2, [r7, #24]
 800630c:	4013      	ands	r3, r2
 800630e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	685b      	ldr	r3, [r3, #4]
 8006314:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006318:	2b00      	cmp	r3, #0
 800631a:	d003      	beq.n	8006324 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800631c:	69ba      	ldr	r2, [r7, #24]
 800631e:	693b      	ldr	r3, [r7, #16]
 8006320:	4313      	orrs	r3, r2
 8006322:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006324:	697b      	ldr	r3, [r7, #20]
 8006326:	69ba      	ldr	r2, [r7, #24]
 8006328:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800632a:	697b      	ldr	r3, [r7, #20]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006330:	693b      	ldr	r3, [r7, #16]
 8006332:	43db      	mvns	r3, r3
 8006334:	69ba      	ldr	r2, [r7, #24]
 8006336:	4013      	ands	r3, r2
 8006338:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	685b      	ldr	r3, [r3, #4]
 800633e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006342:	2b00      	cmp	r3, #0
 8006344:	d003      	beq.n	800634e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8006346:	69ba      	ldr	r2, [r7, #24]
 8006348:	693b      	ldr	r3, [r7, #16]
 800634a:	4313      	orrs	r3, r2
 800634c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800634e:	697b      	ldr	r3, [r7, #20]
 8006350:	69ba      	ldr	r2, [r7, #24]
 8006352:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8006354:	69fb      	ldr	r3, [r7, #28]
 8006356:	3301      	adds	r3, #1
 8006358:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	681a      	ldr	r2, [r3, #0]
 800635e:	69fb      	ldr	r3, [r7, #28]
 8006360:	fa22 f303 	lsr.w	r3, r2, r3
 8006364:	2b00      	cmp	r3, #0
 8006366:	f47f ae63 	bne.w	8006030 <HAL_GPIO_Init+0x14>
  }
}
 800636a:	bf00      	nop
 800636c:	bf00      	nop
 800636e:	3724      	adds	r7, #36	@ 0x24
 8006370:	46bd      	mov	sp, r7
 8006372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006376:	4770      	bx	lr
 8006378:	58000400 	.word	0x58000400

0800637c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800637c:	b480      	push	{r7}
 800637e:	b083      	sub	sp, #12
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
 8006384:	460b      	mov	r3, r1
 8006386:	807b      	strh	r3, [r7, #2]
 8006388:	4613      	mov	r3, r2
 800638a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800638c:	787b      	ldrb	r3, [r7, #1]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d003      	beq.n	800639a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006392:	887a      	ldrh	r2, [r7, #2]
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8006398:	e003      	b.n	80063a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800639a:	887b      	ldrh	r3, [r7, #2]
 800639c:	041a      	lsls	r2, r3, #16
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	619a      	str	r2, [r3, #24]
}
 80063a2:	bf00      	nop
 80063a4:	370c      	adds	r7, #12
 80063a6:	46bd      	mov	sp, r7
 80063a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ac:	4770      	bx	lr

080063ae <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80063ae:	b480      	push	{r7}
 80063b0:	b085      	sub	sp, #20
 80063b2:	af00      	add	r7, sp, #0
 80063b4:	6078      	str	r0, [r7, #4]
 80063b6:	460b      	mov	r3, r1
 80063b8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	695b      	ldr	r3, [r3, #20]
 80063be:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80063c0:	887a      	ldrh	r2, [r7, #2]
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	4013      	ands	r3, r2
 80063c6:	041a      	lsls	r2, r3, #16
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	43d9      	mvns	r1, r3
 80063cc:	887b      	ldrh	r3, [r7, #2]
 80063ce:	400b      	ands	r3, r1
 80063d0:	431a      	orrs	r2, r3
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	619a      	str	r2, [r3, #24]
}
 80063d6:	bf00      	nop
 80063d8:	3714      	adds	r7, #20
 80063da:	46bd      	mov	sp, r7
 80063dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e0:	4770      	bx	lr
	...

080063e4 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 80063e4:	b480      	push	{r7}
 80063e6:	b083      	sub	sp, #12
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 80063ec:	4a08      	ldr	r2, [pc, #32]	@ (8006410 <HAL_HSEM_FastTake+0x2c>)
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	3320      	adds	r3, #32
 80063f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80063f6:	4a07      	ldr	r2, [pc, #28]	@ (8006414 <HAL_HSEM_FastTake+0x30>)
 80063f8:	4293      	cmp	r3, r2
 80063fa:	d101      	bne.n	8006400 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 80063fc:	2300      	movs	r3, #0
 80063fe:	e000      	b.n	8006402 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8006400:	2301      	movs	r3, #1
}
 8006402:	4618      	mov	r0, r3
 8006404:	370c      	adds	r7, #12
 8006406:	46bd      	mov	sp, r7
 8006408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640c:	4770      	bx	lr
 800640e:	bf00      	nop
 8006410:	58026400 	.word	0x58026400
 8006414:	80000300 	.word	0x80000300

08006418 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8006418:	b480      	push	{r7}
 800641a:	b083      	sub	sp, #12
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
 8006420:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8006422:	4906      	ldr	r1, [pc, #24]	@ (800643c <HAL_HSEM_Release+0x24>)
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8006430:	bf00      	nop
 8006432:	370c      	adds	r7, #12
 8006434:	46bd      	mov	sp, r7
 8006436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643a:	4770      	bx	lr
 800643c:	58026400 	.word	0x58026400

08006440 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b086      	sub	sp, #24
 8006444:	af02      	add	r7, sp, #8
 8006446:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d101      	bne.n	8006452 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800644e:	2301      	movs	r3, #1
 8006450:	e0fe      	b.n	8006650 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8006458:	b2db      	uxtb	r3, r3
 800645a:	2b00      	cmp	r3, #0
 800645c:	d106      	bne.n	800646c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	2200      	movs	r2, #0
 8006462:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006466:	6878      	ldr	r0, [r7, #4]
 8006468:	f00b f950 	bl	801170c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2203      	movs	r2, #3
 8006470:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	4618      	mov	r0, r3
 800647a:	f007 fd14 	bl	800dea6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6818      	ldr	r0, [r3, #0]
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	7c1a      	ldrb	r2, [r3, #16]
 8006486:	f88d 2000 	strb.w	r2, [sp]
 800648a:	3304      	adds	r3, #4
 800648c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800648e:	f007 fbe5 	bl	800dc5c <USB_CoreInit>
 8006492:	4603      	mov	r3, r0
 8006494:	2b00      	cmp	r3, #0
 8006496:	d005      	beq.n	80064a4 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2202      	movs	r2, #2
 800649c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80064a0:	2301      	movs	r3, #1
 80064a2:	e0d5      	b.n	8006650 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	2100      	movs	r1, #0
 80064aa:	4618      	mov	r0, r3
 80064ac:	f007 fd0c 	bl	800dec8 <USB_SetCurrentMode>
 80064b0:	4603      	mov	r3, r0
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d005      	beq.n	80064c2 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	2202      	movs	r2, #2
 80064ba:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80064be:	2301      	movs	r3, #1
 80064c0:	e0c6      	b.n	8006650 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80064c2:	2300      	movs	r3, #0
 80064c4:	73fb      	strb	r3, [r7, #15]
 80064c6:	e04a      	b.n	800655e <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80064c8:	7bfa      	ldrb	r2, [r7, #15]
 80064ca:	6879      	ldr	r1, [r7, #4]
 80064cc:	4613      	mov	r3, r2
 80064ce:	00db      	lsls	r3, r3, #3
 80064d0:	4413      	add	r3, r2
 80064d2:	009b      	lsls	r3, r3, #2
 80064d4:	440b      	add	r3, r1
 80064d6:	3315      	adds	r3, #21
 80064d8:	2201      	movs	r2, #1
 80064da:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80064dc:	7bfa      	ldrb	r2, [r7, #15]
 80064de:	6879      	ldr	r1, [r7, #4]
 80064e0:	4613      	mov	r3, r2
 80064e2:	00db      	lsls	r3, r3, #3
 80064e4:	4413      	add	r3, r2
 80064e6:	009b      	lsls	r3, r3, #2
 80064e8:	440b      	add	r3, r1
 80064ea:	3314      	adds	r3, #20
 80064ec:	7bfa      	ldrb	r2, [r7, #15]
 80064ee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80064f0:	7bfa      	ldrb	r2, [r7, #15]
 80064f2:	7bfb      	ldrb	r3, [r7, #15]
 80064f4:	b298      	uxth	r0, r3
 80064f6:	6879      	ldr	r1, [r7, #4]
 80064f8:	4613      	mov	r3, r2
 80064fa:	00db      	lsls	r3, r3, #3
 80064fc:	4413      	add	r3, r2
 80064fe:	009b      	lsls	r3, r3, #2
 8006500:	440b      	add	r3, r1
 8006502:	332e      	adds	r3, #46	@ 0x2e
 8006504:	4602      	mov	r2, r0
 8006506:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006508:	7bfa      	ldrb	r2, [r7, #15]
 800650a:	6879      	ldr	r1, [r7, #4]
 800650c:	4613      	mov	r3, r2
 800650e:	00db      	lsls	r3, r3, #3
 8006510:	4413      	add	r3, r2
 8006512:	009b      	lsls	r3, r3, #2
 8006514:	440b      	add	r3, r1
 8006516:	3318      	adds	r3, #24
 8006518:	2200      	movs	r2, #0
 800651a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800651c:	7bfa      	ldrb	r2, [r7, #15]
 800651e:	6879      	ldr	r1, [r7, #4]
 8006520:	4613      	mov	r3, r2
 8006522:	00db      	lsls	r3, r3, #3
 8006524:	4413      	add	r3, r2
 8006526:	009b      	lsls	r3, r3, #2
 8006528:	440b      	add	r3, r1
 800652a:	331c      	adds	r3, #28
 800652c:	2200      	movs	r2, #0
 800652e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006530:	7bfa      	ldrb	r2, [r7, #15]
 8006532:	6879      	ldr	r1, [r7, #4]
 8006534:	4613      	mov	r3, r2
 8006536:	00db      	lsls	r3, r3, #3
 8006538:	4413      	add	r3, r2
 800653a:	009b      	lsls	r3, r3, #2
 800653c:	440b      	add	r3, r1
 800653e:	3320      	adds	r3, #32
 8006540:	2200      	movs	r2, #0
 8006542:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006544:	7bfa      	ldrb	r2, [r7, #15]
 8006546:	6879      	ldr	r1, [r7, #4]
 8006548:	4613      	mov	r3, r2
 800654a:	00db      	lsls	r3, r3, #3
 800654c:	4413      	add	r3, r2
 800654e:	009b      	lsls	r3, r3, #2
 8006550:	440b      	add	r3, r1
 8006552:	3324      	adds	r3, #36	@ 0x24
 8006554:	2200      	movs	r2, #0
 8006556:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006558:	7bfb      	ldrb	r3, [r7, #15]
 800655a:	3301      	adds	r3, #1
 800655c:	73fb      	strb	r3, [r7, #15]
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	791b      	ldrb	r3, [r3, #4]
 8006562:	7bfa      	ldrb	r2, [r7, #15]
 8006564:	429a      	cmp	r2, r3
 8006566:	d3af      	bcc.n	80064c8 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006568:	2300      	movs	r3, #0
 800656a:	73fb      	strb	r3, [r7, #15]
 800656c:	e044      	b.n	80065f8 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800656e:	7bfa      	ldrb	r2, [r7, #15]
 8006570:	6879      	ldr	r1, [r7, #4]
 8006572:	4613      	mov	r3, r2
 8006574:	00db      	lsls	r3, r3, #3
 8006576:	4413      	add	r3, r2
 8006578:	009b      	lsls	r3, r3, #2
 800657a:	440b      	add	r3, r1
 800657c:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8006580:	2200      	movs	r2, #0
 8006582:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006584:	7bfa      	ldrb	r2, [r7, #15]
 8006586:	6879      	ldr	r1, [r7, #4]
 8006588:	4613      	mov	r3, r2
 800658a:	00db      	lsls	r3, r3, #3
 800658c:	4413      	add	r3, r2
 800658e:	009b      	lsls	r3, r3, #2
 8006590:	440b      	add	r3, r1
 8006592:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8006596:	7bfa      	ldrb	r2, [r7, #15]
 8006598:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800659a:	7bfa      	ldrb	r2, [r7, #15]
 800659c:	6879      	ldr	r1, [r7, #4]
 800659e:	4613      	mov	r3, r2
 80065a0:	00db      	lsls	r3, r3, #3
 80065a2:	4413      	add	r3, r2
 80065a4:	009b      	lsls	r3, r3, #2
 80065a6:	440b      	add	r3, r1
 80065a8:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80065ac:	2200      	movs	r2, #0
 80065ae:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80065b0:	7bfa      	ldrb	r2, [r7, #15]
 80065b2:	6879      	ldr	r1, [r7, #4]
 80065b4:	4613      	mov	r3, r2
 80065b6:	00db      	lsls	r3, r3, #3
 80065b8:	4413      	add	r3, r2
 80065ba:	009b      	lsls	r3, r3, #2
 80065bc:	440b      	add	r3, r1
 80065be:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80065c2:	2200      	movs	r2, #0
 80065c4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80065c6:	7bfa      	ldrb	r2, [r7, #15]
 80065c8:	6879      	ldr	r1, [r7, #4]
 80065ca:	4613      	mov	r3, r2
 80065cc:	00db      	lsls	r3, r3, #3
 80065ce:	4413      	add	r3, r2
 80065d0:	009b      	lsls	r3, r3, #2
 80065d2:	440b      	add	r3, r1
 80065d4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80065d8:	2200      	movs	r2, #0
 80065da:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80065dc:	7bfa      	ldrb	r2, [r7, #15]
 80065de:	6879      	ldr	r1, [r7, #4]
 80065e0:	4613      	mov	r3, r2
 80065e2:	00db      	lsls	r3, r3, #3
 80065e4:	4413      	add	r3, r2
 80065e6:	009b      	lsls	r3, r3, #2
 80065e8:	440b      	add	r3, r1
 80065ea:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80065ee:	2200      	movs	r2, #0
 80065f0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80065f2:	7bfb      	ldrb	r3, [r7, #15]
 80065f4:	3301      	adds	r3, #1
 80065f6:	73fb      	strb	r3, [r7, #15]
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	791b      	ldrb	r3, [r3, #4]
 80065fc:	7bfa      	ldrb	r2, [r7, #15]
 80065fe:	429a      	cmp	r2, r3
 8006600:	d3b5      	bcc.n	800656e <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6818      	ldr	r0, [r3, #0]
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	7c1a      	ldrb	r2, [r3, #16]
 800660a:	f88d 2000 	strb.w	r2, [sp]
 800660e:	3304      	adds	r3, #4
 8006610:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006612:	f007 fca5 	bl	800df60 <USB_DevInit>
 8006616:	4603      	mov	r3, r0
 8006618:	2b00      	cmp	r3, #0
 800661a:	d005      	beq.n	8006628 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2202      	movs	r2, #2
 8006620:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8006624:	2301      	movs	r3, #1
 8006626:	e013      	b.n	8006650 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2200      	movs	r2, #0
 800662c:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	2201      	movs	r2, #1
 8006632:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	7b1b      	ldrb	r3, [r3, #12]
 800663a:	2b01      	cmp	r3, #1
 800663c:	d102      	bne.n	8006644 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800663e:	6878      	ldr	r0, [r7, #4]
 8006640:	f001 f96c 	bl	800791c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	4618      	mov	r0, r3
 800664a:	f008 fce4 	bl	800f016 <USB_DevDisconnect>

  return HAL_OK;
 800664e:	2300      	movs	r3, #0
}
 8006650:	4618      	mov	r0, r3
 8006652:	3710      	adds	r7, #16
 8006654:	46bd      	mov	sp, r7
 8006656:	bd80      	pop	{r7, pc}

08006658 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8006658:	b580      	push	{r7, lr}
 800665a:	b084      	sub	sp, #16
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800666c:	2b01      	cmp	r3, #1
 800666e:	d101      	bne.n	8006674 <HAL_PCD_Start+0x1c>
 8006670:	2302      	movs	r3, #2
 8006672:	e022      	b.n	80066ba <HAL_PCD_Start+0x62>
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2201      	movs	r2, #1
 8006678:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	68db      	ldr	r3, [r3, #12]
 8006680:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006684:	2b00      	cmp	r3, #0
 8006686:	d009      	beq.n	800669c <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800668c:	2b01      	cmp	r3, #1
 800668e:	d105      	bne.n	800669c <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006694:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	4618      	mov	r0, r3
 80066a2:	f007 fbef 	bl	800de84 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	4618      	mov	r0, r3
 80066ac:	f008 fc92 	bl	800efd4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2200      	movs	r2, #0
 80066b4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80066b8:	2300      	movs	r3, #0
}
 80066ba:	4618      	mov	r0, r3
 80066bc:	3710      	adds	r7, #16
 80066be:	46bd      	mov	sp, r7
 80066c0:	bd80      	pop	{r7, pc}

080066c2 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80066c2:	b590      	push	{r4, r7, lr}
 80066c4:	b08d      	sub	sp, #52	@ 0x34
 80066c6:	af00      	add	r7, sp, #0
 80066c8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066d0:	6a3b      	ldr	r3, [r7, #32]
 80066d2:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	4618      	mov	r0, r3
 80066da:	f008 fd50 	bl	800f17e <USB_GetMode>
 80066de:	4603      	mov	r3, r0
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	f040 84b9 	bne.w	8007058 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	4618      	mov	r0, r3
 80066ec:	f008 fcb4 	bl	800f058 <USB_ReadInterrupts>
 80066f0:	4603      	mov	r3, r0
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	f000 84af 	beq.w	8007056 <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80066f8:	69fb      	ldr	r3, [r7, #28]
 80066fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80066fe:	689b      	ldr	r3, [r3, #8]
 8006700:	0a1b      	lsrs	r3, r3, #8
 8006702:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	4618      	mov	r0, r3
 8006712:	f008 fca1 	bl	800f058 <USB_ReadInterrupts>
 8006716:	4603      	mov	r3, r0
 8006718:	f003 0302 	and.w	r3, r3, #2
 800671c:	2b02      	cmp	r3, #2
 800671e:	d107      	bne.n	8006730 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	695a      	ldr	r2, [r3, #20]
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f002 0202 	and.w	r2, r2, #2
 800672e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	4618      	mov	r0, r3
 8006736:	f008 fc8f 	bl	800f058 <USB_ReadInterrupts>
 800673a:	4603      	mov	r3, r0
 800673c:	f003 0310 	and.w	r3, r3, #16
 8006740:	2b10      	cmp	r3, #16
 8006742:	d161      	bne.n	8006808 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	699a      	ldr	r2, [r3, #24]
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f022 0210 	bic.w	r2, r2, #16
 8006752:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8006754:	6a3b      	ldr	r3, [r7, #32]
 8006756:	6a1b      	ldr	r3, [r3, #32]
 8006758:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800675a:	69bb      	ldr	r3, [r7, #24]
 800675c:	f003 020f 	and.w	r2, r3, #15
 8006760:	4613      	mov	r3, r2
 8006762:	00db      	lsls	r3, r3, #3
 8006764:	4413      	add	r3, r2
 8006766:	009b      	lsls	r3, r3, #2
 8006768:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800676c:	687a      	ldr	r2, [r7, #4]
 800676e:	4413      	add	r3, r2
 8006770:	3304      	adds	r3, #4
 8006772:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8006774:	69bb      	ldr	r3, [r7, #24]
 8006776:	0c5b      	lsrs	r3, r3, #17
 8006778:	f003 030f 	and.w	r3, r3, #15
 800677c:	2b02      	cmp	r3, #2
 800677e:	d124      	bne.n	80067ca <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8006780:	69ba      	ldr	r2, [r7, #24]
 8006782:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8006786:	4013      	ands	r3, r2
 8006788:	2b00      	cmp	r3, #0
 800678a:	d035      	beq.n	80067f8 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800678c:	697b      	ldr	r3, [r7, #20]
 800678e:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8006790:	69bb      	ldr	r3, [r7, #24]
 8006792:	091b      	lsrs	r3, r3, #4
 8006794:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006796:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800679a:	b29b      	uxth	r3, r3
 800679c:	461a      	mov	r2, r3
 800679e:	6a38      	ldr	r0, [r7, #32]
 80067a0:	f008 fac6 	bl	800ed30 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80067a4:	697b      	ldr	r3, [r7, #20]
 80067a6:	68da      	ldr	r2, [r3, #12]
 80067a8:	69bb      	ldr	r3, [r7, #24]
 80067aa:	091b      	lsrs	r3, r3, #4
 80067ac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80067b0:	441a      	add	r2, r3
 80067b2:	697b      	ldr	r3, [r7, #20]
 80067b4:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80067b6:	697b      	ldr	r3, [r7, #20]
 80067b8:	695a      	ldr	r2, [r3, #20]
 80067ba:	69bb      	ldr	r3, [r7, #24]
 80067bc:	091b      	lsrs	r3, r3, #4
 80067be:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80067c2:	441a      	add	r2, r3
 80067c4:	697b      	ldr	r3, [r7, #20]
 80067c6:	615a      	str	r2, [r3, #20]
 80067c8:	e016      	b.n	80067f8 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80067ca:	69bb      	ldr	r3, [r7, #24]
 80067cc:	0c5b      	lsrs	r3, r3, #17
 80067ce:	f003 030f 	and.w	r3, r3, #15
 80067d2:	2b06      	cmp	r3, #6
 80067d4:	d110      	bne.n	80067f8 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80067dc:	2208      	movs	r2, #8
 80067de:	4619      	mov	r1, r3
 80067e0:	6a38      	ldr	r0, [r7, #32]
 80067e2:	f008 faa5 	bl	800ed30 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80067e6:	697b      	ldr	r3, [r7, #20]
 80067e8:	695a      	ldr	r2, [r3, #20]
 80067ea:	69bb      	ldr	r3, [r7, #24]
 80067ec:	091b      	lsrs	r3, r3, #4
 80067ee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80067f2:	441a      	add	r2, r3
 80067f4:	697b      	ldr	r3, [r7, #20]
 80067f6:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	699a      	ldr	r2, [r3, #24]
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f042 0210 	orr.w	r2, r2, #16
 8006806:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	4618      	mov	r0, r3
 800680e:	f008 fc23 	bl	800f058 <USB_ReadInterrupts>
 8006812:	4603      	mov	r3, r0
 8006814:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006818:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800681c:	f040 80a7 	bne.w	800696e <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8006820:	2300      	movs	r3, #0
 8006822:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	4618      	mov	r0, r3
 800682a:	f008 fc28 	bl	800f07e <USB_ReadDevAllOutEpInterrupt>
 800682e:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8006830:	e099      	b.n	8006966 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8006832:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006834:	f003 0301 	and.w	r3, r3, #1
 8006838:	2b00      	cmp	r3, #0
 800683a:	f000 808e 	beq.w	800695a <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006844:	b2d2      	uxtb	r2, r2
 8006846:	4611      	mov	r1, r2
 8006848:	4618      	mov	r0, r3
 800684a:	f008 fc4c 	bl	800f0e6 <USB_ReadDevOutEPInterrupt>
 800684e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8006850:	693b      	ldr	r3, [r7, #16]
 8006852:	f003 0301 	and.w	r3, r3, #1
 8006856:	2b00      	cmp	r3, #0
 8006858:	d00c      	beq.n	8006874 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800685a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800685c:	015a      	lsls	r2, r3, #5
 800685e:	69fb      	ldr	r3, [r7, #28]
 8006860:	4413      	add	r3, r2
 8006862:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006866:	461a      	mov	r2, r3
 8006868:	2301      	movs	r3, #1
 800686a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800686c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800686e:	6878      	ldr	r0, [r7, #4]
 8006870:	f000 fece 	bl	8007610 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8006874:	693b      	ldr	r3, [r7, #16]
 8006876:	f003 0308 	and.w	r3, r3, #8
 800687a:	2b00      	cmp	r3, #0
 800687c:	d00c      	beq.n	8006898 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800687e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006880:	015a      	lsls	r2, r3, #5
 8006882:	69fb      	ldr	r3, [r7, #28]
 8006884:	4413      	add	r3, r2
 8006886:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800688a:	461a      	mov	r2, r3
 800688c:	2308      	movs	r3, #8
 800688e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8006890:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006892:	6878      	ldr	r0, [r7, #4]
 8006894:	f000 ffa4 	bl	80077e0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8006898:	693b      	ldr	r3, [r7, #16]
 800689a:	f003 0310 	and.w	r3, r3, #16
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d008      	beq.n	80068b4 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80068a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068a4:	015a      	lsls	r2, r3, #5
 80068a6:	69fb      	ldr	r3, [r7, #28]
 80068a8:	4413      	add	r3, r2
 80068aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80068ae:	461a      	mov	r2, r3
 80068b0:	2310      	movs	r3, #16
 80068b2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80068b4:	693b      	ldr	r3, [r7, #16]
 80068b6:	f003 0302 	and.w	r3, r3, #2
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d030      	beq.n	8006920 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80068be:	6a3b      	ldr	r3, [r7, #32]
 80068c0:	695b      	ldr	r3, [r3, #20]
 80068c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80068c6:	2b80      	cmp	r3, #128	@ 0x80
 80068c8:	d109      	bne.n	80068de <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80068ca:	69fb      	ldr	r3, [r7, #28]
 80068cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80068d0:	685b      	ldr	r3, [r3, #4]
 80068d2:	69fa      	ldr	r2, [r7, #28]
 80068d4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80068d8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80068dc:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80068de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80068e0:	4613      	mov	r3, r2
 80068e2:	00db      	lsls	r3, r3, #3
 80068e4:	4413      	add	r3, r2
 80068e6:	009b      	lsls	r3, r3, #2
 80068e8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80068ec:	687a      	ldr	r2, [r7, #4]
 80068ee:	4413      	add	r3, r2
 80068f0:	3304      	adds	r3, #4
 80068f2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80068f4:	697b      	ldr	r3, [r7, #20]
 80068f6:	78db      	ldrb	r3, [r3, #3]
 80068f8:	2b01      	cmp	r3, #1
 80068fa:	d108      	bne.n	800690e <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80068fc:	697b      	ldr	r3, [r7, #20]
 80068fe:	2200      	movs	r2, #0
 8006900:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8006902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006904:	b2db      	uxtb	r3, r3
 8006906:	4619      	mov	r1, r3
 8006908:	6878      	ldr	r0, [r7, #4]
 800690a:	f00b f835 	bl	8011978 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800690e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006910:	015a      	lsls	r2, r3, #5
 8006912:	69fb      	ldr	r3, [r7, #28]
 8006914:	4413      	add	r3, r2
 8006916:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800691a:	461a      	mov	r2, r3
 800691c:	2302      	movs	r3, #2
 800691e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006920:	693b      	ldr	r3, [r7, #16]
 8006922:	f003 0320 	and.w	r3, r3, #32
 8006926:	2b00      	cmp	r3, #0
 8006928:	d008      	beq.n	800693c <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800692a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800692c:	015a      	lsls	r2, r3, #5
 800692e:	69fb      	ldr	r3, [r7, #28]
 8006930:	4413      	add	r3, r2
 8006932:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006936:	461a      	mov	r2, r3
 8006938:	2320      	movs	r3, #32
 800693a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800693c:	693b      	ldr	r3, [r7, #16]
 800693e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006942:	2b00      	cmp	r3, #0
 8006944:	d009      	beq.n	800695a <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8006946:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006948:	015a      	lsls	r2, r3, #5
 800694a:	69fb      	ldr	r3, [r7, #28]
 800694c:	4413      	add	r3, r2
 800694e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006952:	461a      	mov	r2, r3
 8006954:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006958:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800695a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800695c:	3301      	adds	r3, #1
 800695e:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8006960:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006962:	085b      	lsrs	r3, r3, #1
 8006964:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8006966:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006968:	2b00      	cmp	r3, #0
 800696a:	f47f af62 	bne.w	8006832 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	4618      	mov	r0, r3
 8006974:	f008 fb70 	bl	800f058 <USB_ReadInterrupts>
 8006978:	4603      	mov	r3, r0
 800697a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800697e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006982:	f040 80db 	bne.w	8006b3c <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	4618      	mov	r0, r3
 800698c:	f008 fb91 	bl	800f0b2 <USB_ReadDevAllInEpInterrupt>
 8006990:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8006992:	2300      	movs	r3, #0
 8006994:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8006996:	e0cd      	b.n	8006b34 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8006998:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800699a:	f003 0301 	and.w	r3, r3, #1
 800699e:	2b00      	cmp	r3, #0
 80069a0:	f000 80c2 	beq.w	8006b28 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80069aa:	b2d2      	uxtb	r2, r2
 80069ac:	4611      	mov	r1, r2
 80069ae:	4618      	mov	r0, r3
 80069b0:	f008 fbb7 	bl	800f122 <USB_ReadDevInEPInterrupt>
 80069b4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80069b6:	693b      	ldr	r3, [r7, #16]
 80069b8:	f003 0301 	and.w	r3, r3, #1
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d057      	beq.n	8006a70 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80069c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069c2:	f003 030f 	and.w	r3, r3, #15
 80069c6:	2201      	movs	r2, #1
 80069c8:	fa02 f303 	lsl.w	r3, r2, r3
 80069cc:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80069ce:	69fb      	ldr	r3, [r7, #28]
 80069d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80069d4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	43db      	mvns	r3, r3
 80069da:	69f9      	ldr	r1, [r7, #28]
 80069dc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80069e0:	4013      	ands	r3, r2
 80069e2:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80069e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069e6:	015a      	lsls	r2, r3, #5
 80069e8:	69fb      	ldr	r3, [r7, #28]
 80069ea:	4413      	add	r3, r2
 80069ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80069f0:	461a      	mov	r2, r3
 80069f2:	2301      	movs	r3, #1
 80069f4:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	799b      	ldrb	r3, [r3, #6]
 80069fa:	2b01      	cmp	r3, #1
 80069fc:	d132      	bne.n	8006a64 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80069fe:	6879      	ldr	r1, [r7, #4]
 8006a00:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a02:	4613      	mov	r3, r2
 8006a04:	00db      	lsls	r3, r3, #3
 8006a06:	4413      	add	r3, r2
 8006a08:	009b      	lsls	r3, r3, #2
 8006a0a:	440b      	add	r3, r1
 8006a0c:	3320      	adds	r3, #32
 8006a0e:	6819      	ldr	r1, [r3, #0]
 8006a10:	6878      	ldr	r0, [r7, #4]
 8006a12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a14:	4613      	mov	r3, r2
 8006a16:	00db      	lsls	r3, r3, #3
 8006a18:	4413      	add	r3, r2
 8006a1a:	009b      	lsls	r3, r3, #2
 8006a1c:	4403      	add	r3, r0
 8006a1e:	331c      	adds	r3, #28
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	4419      	add	r1, r3
 8006a24:	6878      	ldr	r0, [r7, #4]
 8006a26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a28:	4613      	mov	r3, r2
 8006a2a:	00db      	lsls	r3, r3, #3
 8006a2c:	4413      	add	r3, r2
 8006a2e:	009b      	lsls	r3, r3, #2
 8006a30:	4403      	add	r3, r0
 8006a32:	3320      	adds	r3, #32
 8006a34:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8006a36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d113      	bne.n	8006a64 <HAL_PCD_IRQHandler+0x3a2>
 8006a3c:	6879      	ldr	r1, [r7, #4]
 8006a3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a40:	4613      	mov	r3, r2
 8006a42:	00db      	lsls	r3, r3, #3
 8006a44:	4413      	add	r3, r2
 8006a46:	009b      	lsls	r3, r3, #2
 8006a48:	440b      	add	r3, r1
 8006a4a:	3324      	adds	r3, #36	@ 0x24
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d108      	bne.n	8006a64 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	6818      	ldr	r0, [r3, #0]
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006a5c:	461a      	mov	r2, r3
 8006a5e:	2101      	movs	r1, #1
 8006a60:	f008 fbc0 	bl	800f1e4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8006a64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a66:	b2db      	uxtb	r3, r3
 8006a68:	4619      	mov	r1, r3
 8006a6a:	6878      	ldr	r0, [r7, #4]
 8006a6c:	f00a feff 	bl	801186e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8006a70:	693b      	ldr	r3, [r7, #16]
 8006a72:	f003 0308 	and.w	r3, r3, #8
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d008      	beq.n	8006a8c <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8006a7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a7c:	015a      	lsls	r2, r3, #5
 8006a7e:	69fb      	ldr	r3, [r7, #28]
 8006a80:	4413      	add	r3, r2
 8006a82:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a86:	461a      	mov	r2, r3
 8006a88:	2308      	movs	r3, #8
 8006a8a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8006a8c:	693b      	ldr	r3, [r7, #16]
 8006a8e:	f003 0310 	and.w	r3, r3, #16
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d008      	beq.n	8006aa8 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8006a96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a98:	015a      	lsls	r2, r3, #5
 8006a9a:	69fb      	ldr	r3, [r7, #28]
 8006a9c:	4413      	add	r3, r2
 8006a9e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006aa2:	461a      	mov	r2, r3
 8006aa4:	2310      	movs	r3, #16
 8006aa6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8006aa8:	693b      	ldr	r3, [r7, #16]
 8006aaa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d008      	beq.n	8006ac4 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8006ab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ab4:	015a      	lsls	r2, r3, #5
 8006ab6:	69fb      	ldr	r3, [r7, #28]
 8006ab8:	4413      	add	r3, r2
 8006aba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006abe:	461a      	mov	r2, r3
 8006ac0:	2340      	movs	r3, #64	@ 0x40
 8006ac2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8006ac4:	693b      	ldr	r3, [r7, #16]
 8006ac6:	f003 0302 	and.w	r3, r3, #2
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d023      	beq.n	8006b16 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8006ace:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006ad0:	6a38      	ldr	r0, [r7, #32]
 8006ad2:	f007 fba3 	bl	800e21c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8006ad6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006ad8:	4613      	mov	r3, r2
 8006ada:	00db      	lsls	r3, r3, #3
 8006adc:	4413      	add	r3, r2
 8006ade:	009b      	lsls	r3, r3, #2
 8006ae0:	3310      	adds	r3, #16
 8006ae2:	687a      	ldr	r2, [r7, #4]
 8006ae4:	4413      	add	r3, r2
 8006ae6:	3304      	adds	r3, #4
 8006ae8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8006aea:	697b      	ldr	r3, [r7, #20]
 8006aec:	78db      	ldrb	r3, [r3, #3]
 8006aee:	2b01      	cmp	r3, #1
 8006af0:	d108      	bne.n	8006b04 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8006af2:	697b      	ldr	r3, [r7, #20]
 8006af4:	2200      	movs	r2, #0
 8006af6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8006af8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006afa:	b2db      	uxtb	r3, r3
 8006afc:	4619      	mov	r1, r3
 8006afe:	6878      	ldr	r0, [r7, #4]
 8006b00:	f00a ff4c 	bl	801199c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8006b04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b06:	015a      	lsls	r2, r3, #5
 8006b08:	69fb      	ldr	r3, [r7, #28]
 8006b0a:	4413      	add	r3, r2
 8006b0c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b10:	461a      	mov	r2, r3
 8006b12:	2302      	movs	r3, #2
 8006b14:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8006b16:	693b      	ldr	r3, [r7, #16]
 8006b18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d003      	beq.n	8006b28 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8006b20:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006b22:	6878      	ldr	r0, [r7, #4]
 8006b24:	f000 fce8 	bl	80074f8 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8006b28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b2a:	3301      	adds	r3, #1
 8006b2c:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8006b2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b30:	085b      	lsrs	r3, r3, #1
 8006b32:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8006b34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	f47f af2e 	bne.w	8006998 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	4618      	mov	r0, r3
 8006b42:	f008 fa89 	bl	800f058 <USB_ReadInterrupts>
 8006b46:	4603      	mov	r3, r0
 8006b48:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006b4c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006b50:	d122      	bne.n	8006b98 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006b52:	69fb      	ldr	r3, [r7, #28]
 8006b54:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b58:	685b      	ldr	r3, [r3, #4]
 8006b5a:	69fa      	ldr	r2, [r7, #28]
 8006b5c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006b60:	f023 0301 	bic.w	r3, r3, #1
 8006b64:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8006b6c:	2b01      	cmp	r3, #1
 8006b6e:	d108      	bne.n	8006b82 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2200      	movs	r2, #0
 8006b74:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8006b78:	2100      	movs	r1, #0
 8006b7a:	6878      	ldr	r0, [r7, #4]
 8006b7c:	f000 fef2 	bl	8007964 <HAL_PCDEx_LPM_Callback>
 8006b80:	e002      	b.n	8006b88 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8006b82:	6878      	ldr	r0, [r7, #4]
 8006b84:	f00a feea 	bl	801195c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	695a      	ldr	r2, [r3, #20]
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8006b96:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	f008 fa5b 	bl	800f058 <USB_ReadInterrupts>
 8006ba2:	4603      	mov	r3, r0
 8006ba4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006ba8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006bac:	d112      	bne.n	8006bd4 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8006bae:	69fb      	ldr	r3, [r7, #28]
 8006bb0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006bb4:	689b      	ldr	r3, [r3, #8]
 8006bb6:	f003 0301 	and.w	r3, r3, #1
 8006bba:	2b01      	cmp	r3, #1
 8006bbc:	d102      	bne.n	8006bc4 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8006bbe:	6878      	ldr	r0, [r7, #4]
 8006bc0:	f00a fea6 	bl	8011910 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	695a      	ldr	r2, [r3, #20]
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8006bd2:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	4618      	mov	r0, r3
 8006bda:	f008 fa3d 	bl	800f058 <USB_ReadInterrupts>
 8006bde:	4603      	mov	r3, r0
 8006be0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006be4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006be8:	d121      	bne.n	8006c2e <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	695a      	ldr	r2, [r3, #20]
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8006bf8:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d111      	bne.n	8006c28 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2201      	movs	r2, #1
 8006c08:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c12:	089b      	lsrs	r3, r3, #2
 8006c14:	f003 020f 	and.w	r2, r3, #15
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8006c1e:	2101      	movs	r1, #1
 8006c20:	6878      	ldr	r0, [r7, #4]
 8006c22:	f000 fe9f 	bl	8007964 <HAL_PCDEx_LPM_Callback>
 8006c26:	e002      	b.n	8006c2e <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8006c28:	6878      	ldr	r0, [r7, #4]
 8006c2a:	f00a fe71 	bl	8011910 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	4618      	mov	r0, r3
 8006c34:	f008 fa10 	bl	800f058 <USB_ReadInterrupts>
 8006c38:	4603      	mov	r3, r0
 8006c3a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006c3e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006c42:	f040 80b7 	bne.w	8006db4 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006c46:	69fb      	ldr	r3, [r7, #28]
 8006c48:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c4c:	685b      	ldr	r3, [r3, #4]
 8006c4e:	69fa      	ldr	r2, [r7, #28]
 8006c50:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006c54:	f023 0301 	bic.w	r3, r3, #1
 8006c58:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	2110      	movs	r1, #16
 8006c60:	4618      	mov	r0, r3
 8006c62:	f007 fadb 	bl	800e21c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006c66:	2300      	movs	r3, #0
 8006c68:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006c6a:	e046      	b.n	8006cfa <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8006c6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c6e:	015a      	lsls	r2, r3, #5
 8006c70:	69fb      	ldr	r3, [r7, #28]
 8006c72:	4413      	add	r3, r2
 8006c74:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c78:	461a      	mov	r2, r3
 8006c7a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006c7e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006c80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c82:	015a      	lsls	r2, r3, #5
 8006c84:	69fb      	ldr	r3, [r7, #28]
 8006c86:	4413      	add	r3, r2
 8006c88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006c90:	0151      	lsls	r1, r2, #5
 8006c92:	69fa      	ldr	r2, [r7, #28]
 8006c94:	440a      	add	r2, r1
 8006c96:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006c9a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006c9e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8006ca0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ca2:	015a      	lsls	r2, r3, #5
 8006ca4:	69fb      	ldr	r3, [r7, #28]
 8006ca6:	4413      	add	r3, r2
 8006ca8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006cac:	461a      	mov	r2, r3
 8006cae:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006cb2:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006cb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cb6:	015a      	lsls	r2, r3, #5
 8006cb8:	69fb      	ldr	r3, [r7, #28]
 8006cba:	4413      	add	r3, r2
 8006cbc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006cc4:	0151      	lsls	r1, r2, #5
 8006cc6:	69fa      	ldr	r2, [r7, #28]
 8006cc8:	440a      	add	r2, r1
 8006cca:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006cce:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006cd2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006cd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cd6:	015a      	lsls	r2, r3, #5
 8006cd8:	69fb      	ldr	r3, [r7, #28]
 8006cda:	4413      	add	r3, r2
 8006cdc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006ce4:	0151      	lsls	r1, r2, #5
 8006ce6:	69fa      	ldr	r2, [r7, #28]
 8006ce8:	440a      	add	r2, r1
 8006cea:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006cee:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006cf2:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006cf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cf6:	3301      	adds	r3, #1
 8006cf8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	791b      	ldrb	r3, [r3, #4]
 8006cfe:	461a      	mov	r2, r3
 8006d00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d02:	4293      	cmp	r3, r2
 8006d04:	d3b2      	bcc.n	8006c6c <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8006d06:	69fb      	ldr	r3, [r7, #28]
 8006d08:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d0c:	69db      	ldr	r3, [r3, #28]
 8006d0e:	69fa      	ldr	r2, [r7, #28]
 8006d10:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006d14:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8006d18:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	7bdb      	ldrb	r3, [r3, #15]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d016      	beq.n	8006d50 <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8006d22:	69fb      	ldr	r3, [r7, #28]
 8006d24:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d28:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006d2c:	69fa      	ldr	r2, [r7, #28]
 8006d2e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006d32:	f043 030b 	orr.w	r3, r3, #11
 8006d36:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8006d3a:	69fb      	ldr	r3, [r7, #28]
 8006d3c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d42:	69fa      	ldr	r2, [r7, #28]
 8006d44:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006d48:	f043 030b 	orr.w	r3, r3, #11
 8006d4c:	6453      	str	r3, [r2, #68]	@ 0x44
 8006d4e:	e015      	b.n	8006d7c <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8006d50:	69fb      	ldr	r3, [r7, #28]
 8006d52:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d56:	695a      	ldr	r2, [r3, #20]
 8006d58:	69fb      	ldr	r3, [r7, #28]
 8006d5a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d5e:	4619      	mov	r1, r3
 8006d60:	f242 032b 	movw	r3, #8235	@ 0x202b
 8006d64:	4313      	orrs	r3, r2
 8006d66:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8006d68:	69fb      	ldr	r3, [r7, #28]
 8006d6a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d6e:	691b      	ldr	r3, [r3, #16]
 8006d70:	69fa      	ldr	r2, [r7, #28]
 8006d72:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006d76:	f043 030b 	orr.w	r3, r3, #11
 8006d7a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8006d7c:	69fb      	ldr	r3, [r7, #28]
 8006d7e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	69fa      	ldr	r2, [r7, #28]
 8006d86:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006d8a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8006d8e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	6818      	ldr	r0, [r3, #0]
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006d9e:	461a      	mov	r2, r3
 8006da0:	f008 fa20 	bl	800f1e4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	695a      	ldr	r2, [r3, #20]
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8006db2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	4618      	mov	r0, r3
 8006dba:	f008 f94d 	bl	800f058 <USB_ReadInterrupts>
 8006dbe:	4603      	mov	r3, r0
 8006dc0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006dc4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006dc8:	d123      	bne.n	8006e12 <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	4618      	mov	r0, r3
 8006dd0:	f008 f9e4 	bl	800f19c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	4618      	mov	r0, r3
 8006dda:	f007 fa98 	bl	800e30e <USB_GetDevSpeed>
 8006dde:	4603      	mov	r3, r0
 8006de0:	461a      	mov	r2, r3
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681c      	ldr	r4, [r3, #0]
 8006dea:	f001 fdbb 	bl	8008964 <HAL_RCC_GetHCLKFreq>
 8006dee:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006df4:	461a      	mov	r2, r3
 8006df6:	4620      	mov	r0, r4
 8006df8:	f006 ffa2 	bl	800dd40 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8006dfc:	6878      	ldr	r0, [r7, #4]
 8006dfe:	f00a fd5e 	bl	80118be <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	695a      	ldr	r2, [r3, #20]
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8006e10:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	4618      	mov	r0, r3
 8006e18:	f008 f91e 	bl	800f058 <USB_ReadInterrupts>
 8006e1c:	4603      	mov	r3, r0
 8006e1e:	f003 0308 	and.w	r3, r3, #8
 8006e22:	2b08      	cmp	r3, #8
 8006e24:	d10a      	bne.n	8006e3c <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8006e26:	6878      	ldr	r0, [r7, #4]
 8006e28:	f00a fd3b 	bl	80118a2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	695a      	ldr	r2, [r3, #20]
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f002 0208 	and.w	r2, r2, #8
 8006e3a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	4618      	mov	r0, r3
 8006e42:	f008 f909 	bl	800f058 <USB_ReadInterrupts>
 8006e46:	4603      	mov	r3, r0
 8006e48:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e4c:	2b80      	cmp	r3, #128	@ 0x80
 8006e4e:	d123      	bne.n	8006e98 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8006e50:	6a3b      	ldr	r3, [r7, #32]
 8006e52:	699b      	ldr	r3, [r3, #24]
 8006e54:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006e58:	6a3b      	ldr	r3, [r7, #32]
 8006e5a:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006e5c:	2301      	movs	r3, #1
 8006e5e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006e60:	e014      	b.n	8006e8c <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8006e62:	6879      	ldr	r1, [r7, #4]
 8006e64:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006e66:	4613      	mov	r3, r2
 8006e68:	00db      	lsls	r3, r3, #3
 8006e6a:	4413      	add	r3, r2
 8006e6c:	009b      	lsls	r3, r3, #2
 8006e6e:	440b      	add	r3, r1
 8006e70:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8006e74:	781b      	ldrb	r3, [r3, #0]
 8006e76:	2b01      	cmp	r3, #1
 8006e78:	d105      	bne.n	8006e86 <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8006e7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e7c:	b2db      	uxtb	r3, r3
 8006e7e:	4619      	mov	r1, r3
 8006e80:	6878      	ldr	r0, [r7, #4]
 8006e82:	f000 fb08 	bl	8007496 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006e86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e88:	3301      	adds	r3, #1
 8006e8a:	627b      	str	r3, [r7, #36]	@ 0x24
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	791b      	ldrb	r3, [r3, #4]
 8006e90:	461a      	mov	r2, r3
 8006e92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e94:	4293      	cmp	r3, r2
 8006e96:	d3e4      	bcc.n	8006e62 <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	f008 f8db 	bl	800f058 <USB_ReadInterrupts>
 8006ea2:	4603      	mov	r3, r0
 8006ea4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006ea8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006eac:	d13c      	bne.n	8006f28 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006eae:	2301      	movs	r3, #1
 8006eb0:	627b      	str	r3, [r7, #36]	@ 0x24
 8006eb2:	e02b      	b.n	8006f0c <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8006eb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eb6:	015a      	lsls	r2, r3, #5
 8006eb8:	69fb      	ldr	r3, [r7, #28]
 8006eba:	4413      	add	r3, r2
 8006ebc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8006ec4:	6879      	ldr	r1, [r7, #4]
 8006ec6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006ec8:	4613      	mov	r3, r2
 8006eca:	00db      	lsls	r3, r3, #3
 8006ecc:	4413      	add	r3, r2
 8006ece:	009b      	lsls	r3, r3, #2
 8006ed0:	440b      	add	r3, r1
 8006ed2:	3318      	adds	r3, #24
 8006ed4:	781b      	ldrb	r3, [r3, #0]
 8006ed6:	2b01      	cmp	r3, #1
 8006ed8:	d115      	bne.n	8006f06 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8006eda:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	da12      	bge.n	8006f06 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8006ee0:	6879      	ldr	r1, [r7, #4]
 8006ee2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006ee4:	4613      	mov	r3, r2
 8006ee6:	00db      	lsls	r3, r3, #3
 8006ee8:	4413      	add	r3, r2
 8006eea:	009b      	lsls	r3, r3, #2
 8006eec:	440b      	add	r3, r1
 8006eee:	3317      	adds	r3, #23
 8006ef0:	2201      	movs	r2, #1
 8006ef2:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8006ef4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ef6:	b2db      	uxtb	r3, r3
 8006ef8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006efc:	b2db      	uxtb	r3, r3
 8006efe:	4619      	mov	r1, r3
 8006f00:	6878      	ldr	r0, [r7, #4]
 8006f02:	f000 fac8 	bl	8007496 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006f06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f08:	3301      	adds	r3, #1
 8006f0a:	627b      	str	r3, [r7, #36]	@ 0x24
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	791b      	ldrb	r3, [r3, #4]
 8006f10:	461a      	mov	r2, r3
 8006f12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f14:	4293      	cmp	r3, r2
 8006f16:	d3cd      	bcc.n	8006eb4 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	695a      	ldr	r2, [r3, #20]
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8006f26:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	f008 f893 	bl	800f058 <USB_ReadInterrupts>
 8006f32:	4603      	mov	r3, r0
 8006f34:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006f38:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006f3c:	d156      	bne.n	8006fec <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006f3e:	2301      	movs	r3, #1
 8006f40:	627b      	str	r3, [r7, #36]	@ 0x24
 8006f42:	e045      	b.n	8006fd0 <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8006f44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f46:	015a      	lsls	r2, r3, #5
 8006f48:	69fb      	ldr	r3, [r7, #28]
 8006f4a:	4413      	add	r3, r2
 8006f4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8006f54:	6879      	ldr	r1, [r7, #4]
 8006f56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006f58:	4613      	mov	r3, r2
 8006f5a:	00db      	lsls	r3, r3, #3
 8006f5c:	4413      	add	r3, r2
 8006f5e:	009b      	lsls	r3, r3, #2
 8006f60:	440b      	add	r3, r1
 8006f62:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8006f66:	781b      	ldrb	r3, [r3, #0]
 8006f68:	2b01      	cmp	r3, #1
 8006f6a:	d12e      	bne.n	8006fca <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8006f6c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	da2b      	bge.n	8006fca <HAL_PCD_IRQHandler+0x908>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8006f72:	69bb      	ldr	r3, [r7, #24]
 8006f74:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8006f7e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8006f82:	429a      	cmp	r2, r3
 8006f84:	d121      	bne.n	8006fca <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8006f86:	6879      	ldr	r1, [r7, #4]
 8006f88:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006f8a:	4613      	mov	r3, r2
 8006f8c:	00db      	lsls	r3, r3, #3
 8006f8e:	4413      	add	r3, r2
 8006f90:	009b      	lsls	r3, r3, #2
 8006f92:	440b      	add	r3, r1
 8006f94:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8006f98:	2201      	movs	r2, #1
 8006f9a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8006f9c:	6a3b      	ldr	r3, [r7, #32]
 8006f9e:	699b      	ldr	r3, [r3, #24]
 8006fa0:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006fa4:	6a3b      	ldr	r3, [r7, #32]
 8006fa6:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8006fa8:	6a3b      	ldr	r3, [r7, #32]
 8006faa:	695b      	ldr	r3, [r3, #20]
 8006fac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d10a      	bne.n	8006fca <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8006fb4:	69fb      	ldr	r3, [r7, #28]
 8006fb6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006fba:	685b      	ldr	r3, [r3, #4]
 8006fbc:	69fa      	ldr	r2, [r7, #28]
 8006fbe:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006fc2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006fc6:	6053      	str	r3, [r2, #4]
            break;
 8006fc8:	e008      	b.n	8006fdc <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006fca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fcc:	3301      	adds	r3, #1
 8006fce:	627b      	str	r3, [r7, #36]	@ 0x24
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	791b      	ldrb	r3, [r3, #4]
 8006fd4:	461a      	mov	r2, r3
 8006fd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fd8:	4293      	cmp	r3, r2
 8006fda:	d3b3      	bcc.n	8006f44 <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	695a      	ldr	r2, [r3, #20]
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8006fea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	f008 f831 	bl	800f058 <USB_ReadInterrupts>
 8006ff6:	4603      	mov	r3, r0
 8006ff8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8006ffc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007000:	d10a      	bne.n	8007018 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8007002:	6878      	ldr	r0, [r7, #4]
 8007004:	f00a fcdc 	bl	80119c0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	695a      	ldr	r2, [r3, #20]
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8007016:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	4618      	mov	r0, r3
 800701e:	f008 f81b 	bl	800f058 <USB_ReadInterrupts>
 8007022:	4603      	mov	r3, r0
 8007024:	f003 0304 	and.w	r3, r3, #4
 8007028:	2b04      	cmp	r3, #4
 800702a:	d115      	bne.n	8007058 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	685b      	ldr	r3, [r3, #4]
 8007032:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8007034:	69bb      	ldr	r3, [r7, #24]
 8007036:	f003 0304 	and.w	r3, r3, #4
 800703a:	2b00      	cmp	r3, #0
 800703c:	d002      	beq.n	8007044 <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800703e:	6878      	ldr	r0, [r7, #4]
 8007040:	f00a fccc 	bl	80119dc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	6859      	ldr	r1, [r3, #4]
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	69ba      	ldr	r2, [r7, #24]
 8007050:	430a      	orrs	r2, r1
 8007052:	605a      	str	r2, [r3, #4]
 8007054:	e000      	b.n	8007058 <HAL_PCD_IRQHandler+0x996>
      return;
 8007056:	bf00      	nop
    }
  }
}
 8007058:	3734      	adds	r7, #52	@ 0x34
 800705a:	46bd      	mov	sp, r7
 800705c:	bd90      	pop	{r4, r7, pc}

0800705e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800705e:	b580      	push	{r7, lr}
 8007060:	b082      	sub	sp, #8
 8007062:	af00      	add	r7, sp, #0
 8007064:	6078      	str	r0, [r7, #4]
 8007066:	460b      	mov	r3, r1
 8007068:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8007070:	2b01      	cmp	r3, #1
 8007072:	d101      	bne.n	8007078 <HAL_PCD_SetAddress+0x1a>
 8007074:	2302      	movs	r3, #2
 8007076:	e012      	b.n	800709e <HAL_PCD_SetAddress+0x40>
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2201      	movs	r2, #1
 800707c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	78fa      	ldrb	r2, [r7, #3]
 8007084:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	78fa      	ldrb	r2, [r7, #3]
 800708c:	4611      	mov	r1, r2
 800708e:	4618      	mov	r0, r3
 8007090:	f007 ff7a 	bl	800ef88 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2200      	movs	r2, #0
 8007098:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800709c:	2300      	movs	r3, #0
}
 800709e:	4618      	mov	r0, r3
 80070a0:	3708      	adds	r7, #8
 80070a2:	46bd      	mov	sp, r7
 80070a4:	bd80      	pop	{r7, pc}

080070a6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80070a6:	b580      	push	{r7, lr}
 80070a8:	b084      	sub	sp, #16
 80070aa:	af00      	add	r7, sp, #0
 80070ac:	6078      	str	r0, [r7, #4]
 80070ae:	4608      	mov	r0, r1
 80070b0:	4611      	mov	r1, r2
 80070b2:	461a      	mov	r2, r3
 80070b4:	4603      	mov	r3, r0
 80070b6:	70fb      	strb	r3, [r7, #3]
 80070b8:	460b      	mov	r3, r1
 80070ba:	803b      	strh	r3, [r7, #0]
 80070bc:	4613      	mov	r3, r2
 80070be:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80070c0:	2300      	movs	r3, #0
 80070c2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80070c4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	da0f      	bge.n	80070ec <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80070cc:	78fb      	ldrb	r3, [r7, #3]
 80070ce:	f003 020f 	and.w	r2, r3, #15
 80070d2:	4613      	mov	r3, r2
 80070d4:	00db      	lsls	r3, r3, #3
 80070d6:	4413      	add	r3, r2
 80070d8:	009b      	lsls	r3, r3, #2
 80070da:	3310      	adds	r3, #16
 80070dc:	687a      	ldr	r2, [r7, #4]
 80070de:	4413      	add	r3, r2
 80070e0:	3304      	adds	r3, #4
 80070e2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	2201      	movs	r2, #1
 80070e8:	705a      	strb	r2, [r3, #1]
 80070ea:	e00f      	b.n	800710c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80070ec:	78fb      	ldrb	r3, [r7, #3]
 80070ee:	f003 020f 	and.w	r2, r3, #15
 80070f2:	4613      	mov	r3, r2
 80070f4:	00db      	lsls	r3, r3, #3
 80070f6:	4413      	add	r3, r2
 80070f8:	009b      	lsls	r3, r3, #2
 80070fa:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80070fe:	687a      	ldr	r2, [r7, #4]
 8007100:	4413      	add	r3, r2
 8007102:	3304      	adds	r3, #4
 8007104:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	2200      	movs	r2, #0
 800710a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800710c:	78fb      	ldrb	r3, [r7, #3]
 800710e:	f003 030f 	and.w	r3, r3, #15
 8007112:	b2da      	uxtb	r2, r3
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8007118:	883a      	ldrh	r2, [r7, #0]
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	78ba      	ldrb	r2, [r7, #2]
 8007122:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	785b      	ldrb	r3, [r3, #1]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d004      	beq.n	8007136 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	781b      	ldrb	r3, [r3, #0]
 8007130:	461a      	mov	r2, r3
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8007136:	78bb      	ldrb	r3, [r7, #2]
 8007138:	2b02      	cmp	r3, #2
 800713a:	d102      	bne.n	8007142 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	2200      	movs	r2, #0
 8007140:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8007148:	2b01      	cmp	r3, #1
 800714a:	d101      	bne.n	8007150 <HAL_PCD_EP_Open+0xaa>
 800714c:	2302      	movs	r3, #2
 800714e:	e00e      	b.n	800716e <HAL_PCD_EP_Open+0xc8>
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2201      	movs	r2, #1
 8007154:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	68f9      	ldr	r1, [r7, #12]
 800715e:	4618      	mov	r0, r3
 8007160:	f007 f8fa 	bl	800e358 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2200      	movs	r2, #0
 8007168:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 800716c:	7afb      	ldrb	r3, [r7, #11]
}
 800716e:	4618      	mov	r0, r3
 8007170:	3710      	adds	r7, #16
 8007172:	46bd      	mov	sp, r7
 8007174:	bd80      	pop	{r7, pc}

08007176 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007176:	b580      	push	{r7, lr}
 8007178:	b084      	sub	sp, #16
 800717a:	af00      	add	r7, sp, #0
 800717c:	6078      	str	r0, [r7, #4]
 800717e:	460b      	mov	r3, r1
 8007180:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007182:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007186:	2b00      	cmp	r3, #0
 8007188:	da0f      	bge.n	80071aa <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800718a:	78fb      	ldrb	r3, [r7, #3]
 800718c:	f003 020f 	and.w	r2, r3, #15
 8007190:	4613      	mov	r3, r2
 8007192:	00db      	lsls	r3, r3, #3
 8007194:	4413      	add	r3, r2
 8007196:	009b      	lsls	r3, r3, #2
 8007198:	3310      	adds	r3, #16
 800719a:	687a      	ldr	r2, [r7, #4]
 800719c:	4413      	add	r3, r2
 800719e:	3304      	adds	r3, #4
 80071a0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	2201      	movs	r2, #1
 80071a6:	705a      	strb	r2, [r3, #1]
 80071a8:	e00f      	b.n	80071ca <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80071aa:	78fb      	ldrb	r3, [r7, #3]
 80071ac:	f003 020f 	and.w	r2, r3, #15
 80071b0:	4613      	mov	r3, r2
 80071b2:	00db      	lsls	r3, r3, #3
 80071b4:	4413      	add	r3, r2
 80071b6:	009b      	lsls	r3, r3, #2
 80071b8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80071bc:	687a      	ldr	r2, [r7, #4]
 80071be:	4413      	add	r3, r2
 80071c0:	3304      	adds	r3, #4
 80071c2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	2200      	movs	r2, #0
 80071c8:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80071ca:	78fb      	ldrb	r3, [r7, #3]
 80071cc:	f003 030f 	and.w	r3, r3, #15
 80071d0:	b2da      	uxtb	r2, r3
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80071dc:	2b01      	cmp	r3, #1
 80071de:	d101      	bne.n	80071e4 <HAL_PCD_EP_Close+0x6e>
 80071e0:	2302      	movs	r3, #2
 80071e2:	e00e      	b.n	8007202 <HAL_PCD_EP_Close+0x8c>
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2201      	movs	r2, #1
 80071e8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	68f9      	ldr	r1, [r7, #12]
 80071f2:	4618      	mov	r0, r3
 80071f4:	f007 f938 	bl	800e468 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	2200      	movs	r2, #0
 80071fc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8007200:	2300      	movs	r3, #0
}
 8007202:	4618      	mov	r0, r3
 8007204:	3710      	adds	r7, #16
 8007206:	46bd      	mov	sp, r7
 8007208:	bd80      	pop	{r7, pc}

0800720a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800720a:	b580      	push	{r7, lr}
 800720c:	b086      	sub	sp, #24
 800720e:	af00      	add	r7, sp, #0
 8007210:	60f8      	str	r0, [r7, #12]
 8007212:	607a      	str	r2, [r7, #4]
 8007214:	603b      	str	r3, [r7, #0]
 8007216:	460b      	mov	r3, r1
 8007218:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800721a:	7afb      	ldrb	r3, [r7, #11]
 800721c:	f003 020f 	and.w	r2, r3, #15
 8007220:	4613      	mov	r3, r2
 8007222:	00db      	lsls	r3, r3, #3
 8007224:	4413      	add	r3, r2
 8007226:	009b      	lsls	r3, r3, #2
 8007228:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800722c:	68fa      	ldr	r2, [r7, #12]
 800722e:	4413      	add	r3, r2
 8007230:	3304      	adds	r3, #4
 8007232:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007234:	697b      	ldr	r3, [r7, #20]
 8007236:	687a      	ldr	r2, [r7, #4]
 8007238:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800723a:	697b      	ldr	r3, [r7, #20]
 800723c:	683a      	ldr	r2, [r7, #0]
 800723e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8007240:	697b      	ldr	r3, [r7, #20]
 8007242:	2200      	movs	r2, #0
 8007244:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8007246:	697b      	ldr	r3, [r7, #20]
 8007248:	2200      	movs	r2, #0
 800724a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800724c:	7afb      	ldrb	r3, [r7, #11]
 800724e:	f003 030f 	and.w	r3, r3, #15
 8007252:	b2da      	uxtb	r2, r3
 8007254:	697b      	ldr	r3, [r7, #20]
 8007256:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	799b      	ldrb	r3, [r3, #6]
 800725c:	2b01      	cmp	r3, #1
 800725e:	d102      	bne.n	8007266 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8007260:	687a      	ldr	r2, [r7, #4]
 8007262:	697b      	ldr	r3, [r7, #20]
 8007264:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	6818      	ldr	r0, [r3, #0]
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	799b      	ldrb	r3, [r3, #6]
 800726e:	461a      	mov	r2, r3
 8007270:	6979      	ldr	r1, [r7, #20]
 8007272:	f007 f9d5 	bl	800e620 <USB_EPStartXfer>

  return HAL_OK;
 8007276:	2300      	movs	r3, #0
}
 8007278:	4618      	mov	r0, r3
 800727a:	3718      	adds	r7, #24
 800727c:	46bd      	mov	sp, r7
 800727e:	bd80      	pop	{r7, pc}

08007280 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8007280:	b480      	push	{r7}
 8007282:	b083      	sub	sp, #12
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
 8007288:	460b      	mov	r3, r1
 800728a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800728c:	78fb      	ldrb	r3, [r7, #3]
 800728e:	f003 020f 	and.w	r2, r3, #15
 8007292:	6879      	ldr	r1, [r7, #4]
 8007294:	4613      	mov	r3, r2
 8007296:	00db      	lsls	r3, r3, #3
 8007298:	4413      	add	r3, r2
 800729a:	009b      	lsls	r3, r3, #2
 800729c:	440b      	add	r3, r1
 800729e:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 80072a2:	681b      	ldr	r3, [r3, #0]
}
 80072a4:	4618      	mov	r0, r3
 80072a6:	370c      	adds	r7, #12
 80072a8:	46bd      	mov	sp, r7
 80072aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ae:	4770      	bx	lr

080072b0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80072b0:	b580      	push	{r7, lr}
 80072b2:	b086      	sub	sp, #24
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	60f8      	str	r0, [r7, #12]
 80072b8:	607a      	str	r2, [r7, #4]
 80072ba:	603b      	str	r3, [r7, #0]
 80072bc:	460b      	mov	r3, r1
 80072be:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80072c0:	7afb      	ldrb	r3, [r7, #11]
 80072c2:	f003 020f 	and.w	r2, r3, #15
 80072c6:	4613      	mov	r3, r2
 80072c8:	00db      	lsls	r3, r3, #3
 80072ca:	4413      	add	r3, r2
 80072cc:	009b      	lsls	r3, r3, #2
 80072ce:	3310      	adds	r3, #16
 80072d0:	68fa      	ldr	r2, [r7, #12]
 80072d2:	4413      	add	r3, r2
 80072d4:	3304      	adds	r3, #4
 80072d6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80072d8:	697b      	ldr	r3, [r7, #20]
 80072da:	687a      	ldr	r2, [r7, #4]
 80072dc:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80072de:	697b      	ldr	r3, [r7, #20]
 80072e0:	683a      	ldr	r2, [r7, #0]
 80072e2:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80072e4:	697b      	ldr	r3, [r7, #20]
 80072e6:	2200      	movs	r2, #0
 80072e8:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80072ea:	697b      	ldr	r3, [r7, #20]
 80072ec:	2201      	movs	r2, #1
 80072ee:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80072f0:	7afb      	ldrb	r3, [r7, #11]
 80072f2:	f003 030f 	and.w	r3, r3, #15
 80072f6:	b2da      	uxtb	r2, r3
 80072f8:	697b      	ldr	r3, [r7, #20]
 80072fa:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	799b      	ldrb	r3, [r3, #6]
 8007300:	2b01      	cmp	r3, #1
 8007302:	d102      	bne.n	800730a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8007304:	687a      	ldr	r2, [r7, #4]
 8007306:	697b      	ldr	r3, [r7, #20]
 8007308:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	6818      	ldr	r0, [r3, #0]
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	799b      	ldrb	r3, [r3, #6]
 8007312:	461a      	mov	r2, r3
 8007314:	6979      	ldr	r1, [r7, #20]
 8007316:	f007 f983 	bl	800e620 <USB_EPStartXfer>

  return HAL_OK;
 800731a:	2300      	movs	r3, #0
}
 800731c:	4618      	mov	r0, r3
 800731e:	3718      	adds	r7, #24
 8007320:	46bd      	mov	sp, r7
 8007322:	bd80      	pop	{r7, pc}

08007324 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007324:	b580      	push	{r7, lr}
 8007326:	b084      	sub	sp, #16
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
 800732c:	460b      	mov	r3, r1
 800732e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8007330:	78fb      	ldrb	r3, [r7, #3]
 8007332:	f003 030f 	and.w	r3, r3, #15
 8007336:	687a      	ldr	r2, [r7, #4]
 8007338:	7912      	ldrb	r2, [r2, #4]
 800733a:	4293      	cmp	r3, r2
 800733c:	d901      	bls.n	8007342 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800733e:	2301      	movs	r3, #1
 8007340:	e04f      	b.n	80073e2 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007342:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007346:	2b00      	cmp	r3, #0
 8007348:	da0f      	bge.n	800736a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800734a:	78fb      	ldrb	r3, [r7, #3]
 800734c:	f003 020f 	and.w	r2, r3, #15
 8007350:	4613      	mov	r3, r2
 8007352:	00db      	lsls	r3, r3, #3
 8007354:	4413      	add	r3, r2
 8007356:	009b      	lsls	r3, r3, #2
 8007358:	3310      	adds	r3, #16
 800735a:	687a      	ldr	r2, [r7, #4]
 800735c:	4413      	add	r3, r2
 800735e:	3304      	adds	r3, #4
 8007360:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	2201      	movs	r2, #1
 8007366:	705a      	strb	r2, [r3, #1]
 8007368:	e00d      	b.n	8007386 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800736a:	78fa      	ldrb	r2, [r7, #3]
 800736c:	4613      	mov	r3, r2
 800736e:	00db      	lsls	r3, r3, #3
 8007370:	4413      	add	r3, r2
 8007372:	009b      	lsls	r3, r3, #2
 8007374:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007378:	687a      	ldr	r2, [r7, #4]
 800737a:	4413      	add	r3, r2
 800737c:	3304      	adds	r3, #4
 800737e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	2200      	movs	r2, #0
 8007384:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	2201      	movs	r2, #1
 800738a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800738c:	78fb      	ldrb	r3, [r7, #3]
 800738e:	f003 030f 	and.w	r3, r3, #15
 8007392:	b2da      	uxtb	r2, r3
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800739e:	2b01      	cmp	r3, #1
 80073a0:	d101      	bne.n	80073a6 <HAL_PCD_EP_SetStall+0x82>
 80073a2:	2302      	movs	r3, #2
 80073a4:	e01d      	b.n	80073e2 <HAL_PCD_EP_SetStall+0xbe>
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	2201      	movs	r2, #1
 80073aa:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	68f9      	ldr	r1, [r7, #12]
 80073b4:	4618      	mov	r0, r3
 80073b6:	f007 fd13 	bl	800ede0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80073ba:	78fb      	ldrb	r3, [r7, #3]
 80073bc:	f003 030f 	and.w	r3, r3, #15
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d109      	bne.n	80073d8 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	6818      	ldr	r0, [r3, #0]
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	7999      	ldrb	r1, [r3, #6]
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80073d2:	461a      	mov	r2, r3
 80073d4:	f007 ff06 	bl	800f1e4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	2200      	movs	r2, #0
 80073dc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80073e0:	2300      	movs	r3, #0
}
 80073e2:	4618      	mov	r0, r3
 80073e4:	3710      	adds	r7, #16
 80073e6:	46bd      	mov	sp, r7
 80073e8:	bd80      	pop	{r7, pc}

080073ea <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80073ea:	b580      	push	{r7, lr}
 80073ec:	b084      	sub	sp, #16
 80073ee:	af00      	add	r7, sp, #0
 80073f0:	6078      	str	r0, [r7, #4]
 80073f2:	460b      	mov	r3, r1
 80073f4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80073f6:	78fb      	ldrb	r3, [r7, #3]
 80073f8:	f003 030f 	and.w	r3, r3, #15
 80073fc:	687a      	ldr	r2, [r7, #4]
 80073fe:	7912      	ldrb	r2, [r2, #4]
 8007400:	4293      	cmp	r3, r2
 8007402:	d901      	bls.n	8007408 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8007404:	2301      	movs	r3, #1
 8007406:	e042      	b.n	800748e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007408:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800740c:	2b00      	cmp	r3, #0
 800740e:	da0f      	bge.n	8007430 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007410:	78fb      	ldrb	r3, [r7, #3]
 8007412:	f003 020f 	and.w	r2, r3, #15
 8007416:	4613      	mov	r3, r2
 8007418:	00db      	lsls	r3, r3, #3
 800741a:	4413      	add	r3, r2
 800741c:	009b      	lsls	r3, r3, #2
 800741e:	3310      	adds	r3, #16
 8007420:	687a      	ldr	r2, [r7, #4]
 8007422:	4413      	add	r3, r2
 8007424:	3304      	adds	r3, #4
 8007426:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	2201      	movs	r2, #1
 800742c:	705a      	strb	r2, [r3, #1]
 800742e:	e00f      	b.n	8007450 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007430:	78fb      	ldrb	r3, [r7, #3]
 8007432:	f003 020f 	and.w	r2, r3, #15
 8007436:	4613      	mov	r3, r2
 8007438:	00db      	lsls	r3, r3, #3
 800743a:	4413      	add	r3, r2
 800743c:	009b      	lsls	r3, r3, #2
 800743e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007442:	687a      	ldr	r2, [r7, #4]
 8007444:	4413      	add	r3, r2
 8007446:	3304      	adds	r3, #4
 8007448:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	2200      	movs	r2, #0
 800744e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	2200      	movs	r2, #0
 8007454:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007456:	78fb      	ldrb	r3, [r7, #3]
 8007458:	f003 030f 	and.w	r3, r3, #15
 800745c:	b2da      	uxtb	r2, r3
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8007468:	2b01      	cmp	r3, #1
 800746a:	d101      	bne.n	8007470 <HAL_PCD_EP_ClrStall+0x86>
 800746c:	2302      	movs	r3, #2
 800746e:	e00e      	b.n	800748e <HAL_PCD_EP_ClrStall+0xa4>
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2201      	movs	r2, #1
 8007474:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	68f9      	ldr	r1, [r7, #12]
 800747e:	4618      	mov	r0, r3
 8007480:	f007 fd1c 	bl	800eebc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2200      	movs	r2, #0
 8007488:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800748c:	2300      	movs	r3, #0
}
 800748e:	4618      	mov	r0, r3
 8007490:	3710      	adds	r7, #16
 8007492:	46bd      	mov	sp, r7
 8007494:	bd80      	pop	{r7, pc}

08007496 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007496:	b580      	push	{r7, lr}
 8007498:	b084      	sub	sp, #16
 800749a:	af00      	add	r7, sp, #0
 800749c:	6078      	str	r0, [r7, #4]
 800749e:	460b      	mov	r3, r1
 80074a0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80074a2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	da0c      	bge.n	80074c4 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80074aa:	78fb      	ldrb	r3, [r7, #3]
 80074ac:	f003 020f 	and.w	r2, r3, #15
 80074b0:	4613      	mov	r3, r2
 80074b2:	00db      	lsls	r3, r3, #3
 80074b4:	4413      	add	r3, r2
 80074b6:	009b      	lsls	r3, r3, #2
 80074b8:	3310      	adds	r3, #16
 80074ba:	687a      	ldr	r2, [r7, #4]
 80074bc:	4413      	add	r3, r2
 80074be:	3304      	adds	r3, #4
 80074c0:	60fb      	str	r3, [r7, #12]
 80074c2:	e00c      	b.n	80074de <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80074c4:	78fb      	ldrb	r3, [r7, #3]
 80074c6:	f003 020f 	and.w	r2, r3, #15
 80074ca:	4613      	mov	r3, r2
 80074cc:	00db      	lsls	r3, r3, #3
 80074ce:	4413      	add	r3, r2
 80074d0:	009b      	lsls	r3, r3, #2
 80074d2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80074d6:	687a      	ldr	r2, [r7, #4]
 80074d8:	4413      	add	r3, r2
 80074da:	3304      	adds	r3, #4
 80074dc:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	68f9      	ldr	r1, [r7, #12]
 80074e4:	4618      	mov	r0, r3
 80074e6:	f007 fb3b 	bl	800eb60 <USB_EPStopXfer>
 80074ea:	4603      	mov	r3, r0
 80074ec:	72fb      	strb	r3, [r7, #11]

  return ret;
 80074ee:	7afb      	ldrb	r3, [r7, #11]
}
 80074f0:	4618      	mov	r0, r3
 80074f2:	3710      	adds	r7, #16
 80074f4:	46bd      	mov	sp, r7
 80074f6:	bd80      	pop	{r7, pc}

080074f8 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80074f8:	b580      	push	{r7, lr}
 80074fa:	b08a      	sub	sp, #40	@ 0x28
 80074fc:	af02      	add	r7, sp, #8
 80074fe:	6078      	str	r0, [r7, #4]
 8007500:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007508:	697b      	ldr	r3, [r7, #20]
 800750a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800750c:	683a      	ldr	r2, [r7, #0]
 800750e:	4613      	mov	r3, r2
 8007510:	00db      	lsls	r3, r3, #3
 8007512:	4413      	add	r3, r2
 8007514:	009b      	lsls	r3, r3, #2
 8007516:	3310      	adds	r3, #16
 8007518:	687a      	ldr	r2, [r7, #4]
 800751a:	4413      	add	r3, r2
 800751c:	3304      	adds	r3, #4
 800751e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	695a      	ldr	r2, [r3, #20]
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	691b      	ldr	r3, [r3, #16]
 8007528:	429a      	cmp	r2, r3
 800752a:	d901      	bls.n	8007530 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800752c:	2301      	movs	r3, #1
 800752e:	e06b      	b.n	8007608 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	691a      	ldr	r2, [r3, #16]
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	695b      	ldr	r3, [r3, #20]
 8007538:	1ad3      	subs	r3, r2, r3
 800753a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	689b      	ldr	r3, [r3, #8]
 8007540:	69fa      	ldr	r2, [r7, #28]
 8007542:	429a      	cmp	r2, r3
 8007544:	d902      	bls.n	800754c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	689b      	ldr	r3, [r3, #8]
 800754a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800754c:	69fb      	ldr	r3, [r7, #28]
 800754e:	3303      	adds	r3, #3
 8007550:	089b      	lsrs	r3, r3, #2
 8007552:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007554:	e02a      	b.n	80075ac <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	691a      	ldr	r2, [r3, #16]
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	695b      	ldr	r3, [r3, #20]
 800755e:	1ad3      	subs	r3, r2, r3
 8007560:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	689b      	ldr	r3, [r3, #8]
 8007566:	69fa      	ldr	r2, [r7, #28]
 8007568:	429a      	cmp	r2, r3
 800756a:	d902      	bls.n	8007572 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	689b      	ldr	r3, [r3, #8]
 8007570:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8007572:	69fb      	ldr	r3, [r7, #28]
 8007574:	3303      	adds	r3, #3
 8007576:	089b      	lsrs	r3, r3, #2
 8007578:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	68d9      	ldr	r1, [r3, #12]
 800757e:	683b      	ldr	r3, [r7, #0]
 8007580:	b2da      	uxtb	r2, r3
 8007582:	69fb      	ldr	r3, [r7, #28]
 8007584:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800758a:	9300      	str	r3, [sp, #0]
 800758c:	4603      	mov	r3, r0
 800758e:	6978      	ldr	r0, [r7, #20]
 8007590:	f007 fb90 	bl	800ecb4 <USB_WritePacket>

    ep->xfer_buff  += len;
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	68da      	ldr	r2, [r3, #12]
 8007598:	69fb      	ldr	r3, [r7, #28]
 800759a:	441a      	add	r2, r3
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	695a      	ldr	r2, [r3, #20]
 80075a4:	69fb      	ldr	r3, [r7, #28]
 80075a6:	441a      	add	r2, r3
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80075ac:	683b      	ldr	r3, [r7, #0]
 80075ae:	015a      	lsls	r2, r3, #5
 80075b0:	693b      	ldr	r3, [r7, #16]
 80075b2:	4413      	add	r3, r2
 80075b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80075b8:	699b      	ldr	r3, [r3, #24]
 80075ba:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80075bc:	69ba      	ldr	r2, [r7, #24]
 80075be:	429a      	cmp	r2, r3
 80075c0:	d809      	bhi.n	80075d6 <PCD_WriteEmptyTxFifo+0xde>
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	695a      	ldr	r2, [r3, #20]
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80075ca:	429a      	cmp	r2, r3
 80075cc:	d203      	bcs.n	80075d6 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	691b      	ldr	r3, [r3, #16]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d1bf      	bne.n	8007556 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	691a      	ldr	r2, [r3, #16]
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	695b      	ldr	r3, [r3, #20]
 80075de:	429a      	cmp	r2, r3
 80075e0:	d811      	bhi.n	8007606 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80075e2:	683b      	ldr	r3, [r7, #0]
 80075e4:	f003 030f 	and.w	r3, r3, #15
 80075e8:	2201      	movs	r2, #1
 80075ea:	fa02 f303 	lsl.w	r3, r2, r3
 80075ee:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80075f0:	693b      	ldr	r3, [r7, #16]
 80075f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80075f6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80075f8:	68bb      	ldr	r3, [r7, #8]
 80075fa:	43db      	mvns	r3, r3
 80075fc:	6939      	ldr	r1, [r7, #16]
 80075fe:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007602:	4013      	ands	r3, r2
 8007604:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8007606:	2300      	movs	r3, #0
}
 8007608:	4618      	mov	r0, r3
 800760a:	3720      	adds	r7, #32
 800760c:	46bd      	mov	sp, r7
 800760e:	bd80      	pop	{r7, pc}

08007610 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007610:	b580      	push	{r7, lr}
 8007612:	b088      	sub	sp, #32
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
 8007618:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007620:	69fb      	ldr	r3, [r7, #28]
 8007622:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8007624:	69fb      	ldr	r3, [r7, #28]
 8007626:	333c      	adds	r3, #60	@ 0x3c
 8007628:	3304      	adds	r3, #4
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800762e:	683b      	ldr	r3, [r7, #0]
 8007630:	015a      	lsls	r2, r3, #5
 8007632:	69bb      	ldr	r3, [r7, #24]
 8007634:	4413      	add	r3, r2
 8007636:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800763a:	689b      	ldr	r3, [r3, #8]
 800763c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	799b      	ldrb	r3, [r3, #6]
 8007642:	2b01      	cmp	r3, #1
 8007644:	d17b      	bne.n	800773e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8007646:	693b      	ldr	r3, [r7, #16]
 8007648:	f003 0308 	and.w	r3, r3, #8
 800764c:	2b00      	cmp	r3, #0
 800764e:	d015      	beq.n	800767c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007650:	697b      	ldr	r3, [r7, #20]
 8007652:	4a61      	ldr	r2, [pc, #388]	@ (80077d8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8007654:	4293      	cmp	r3, r2
 8007656:	f240 80b9 	bls.w	80077cc <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800765a:	693b      	ldr	r3, [r7, #16]
 800765c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007660:	2b00      	cmp	r3, #0
 8007662:	f000 80b3 	beq.w	80077cc <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007666:	683b      	ldr	r3, [r7, #0]
 8007668:	015a      	lsls	r2, r3, #5
 800766a:	69bb      	ldr	r3, [r7, #24]
 800766c:	4413      	add	r3, r2
 800766e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007672:	461a      	mov	r2, r3
 8007674:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007678:	6093      	str	r3, [r2, #8]
 800767a:	e0a7      	b.n	80077cc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800767c:	693b      	ldr	r3, [r7, #16]
 800767e:	f003 0320 	and.w	r3, r3, #32
 8007682:	2b00      	cmp	r3, #0
 8007684:	d009      	beq.n	800769a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007686:	683b      	ldr	r3, [r7, #0]
 8007688:	015a      	lsls	r2, r3, #5
 800768a:	69bb      	ldr	r3, [r7, #24]
 800768c:	4413      	add	r3, r2
 800768e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007692:	461a      	mov	r2, r3
 8007694:	2320      	movs	r3, #32
 8007696:	6093      	str	r3, [r2, #8]
 8007698:	e098      	b.n	80077cc <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800769a:	693b      	ldr	r3, [r7, #16]
 800769c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	f040 8093 	bne.w	80077cc <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80076a6:	697b      	ldr	r3, [r7, #20]
 80076a8:	4a4b      	ldr	r2, [pc, #300]	@ (80077d8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80076aa:	4293      	cmp	r3, r2
 80076ac:	d90f      	bls.n	80076ce <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80076ae:	693b      	ldr	r3, [r7, #16]
 80076b0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d00a      	beq.n	80076ce <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80076b8:	683b      	ldr	r3, [r7, #0]
 80076ba:	015a      	lsls	r2, r3, #5
 80076bc:	69bb      	ldr	r3, [r7, #24]
 80076be:	4413      	add	r3, r2
 80076c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80076c4:	461a      	mov	r2, r3
 80076c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80076ca:	6093      	str	r3, [r2, #8]
 80076cc:	e07e      	b.n	80077cc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80076ce:	683a      	ldr	r2, [r7, #0]
 80076d0:	4613      	mov	r3, r2
 80076d2:	00db      	lsls	r3, r3, #3
 80076d4:	4413      	add	r3, r2
 80076d6:	009b      	lsls	r3, r3, #2
 80076d8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80076dc:	687a      	ldr	r2, [r7, #4]
 80076de:	4413      	add	r3, r2
 80076e0:	3304      	adds	r3, #4
 80076e2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	6a1a      	ldr	r2, [r3, #32]
 80076e8:	683b      	ldr	r3, [r7, #0]
 80076ea:	0159      	lsls	r1, r3, #5
 80076ec:	69bb      	ldr	r3, [r7, #24]
 80076ee:	440b      	add	r3, r1
 80076f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80076f4:	691b      	ldr	r3, [r3, #16]
 80076f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80076fa:	1ad2      	subs	r2, r2, r3
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8007700:	683b      	ldr	r3, [r7, #0]
 8007702:	2b00      	cmp	r3, #0
 8007704:	d114      	bne.n	8007730 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	691b      	ldr	r3, [r3, #16]
 800770a:	2b00      	cmp	r3, #0
 800770c:	d109      	bne.n	8007722 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	6818      	ldr	r0, [r3, #0]
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007718:	461a      	mov	r2, r3
 800771a:	2101      	movs	r1, #1
 800771c:	f007 fd62 	bl	800f1e4 <USB_EP0_OutStart>
 8007720:	e006      	b.n	8007730 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	68da      	ldr	r2, [r3, #12]
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	695b      	ldr	r3, [r3, #20]
 800772a:	441a      	add	r2, r3
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007730:	683b      	ldr	r3, [r7, #0]
 8007732:	b2db      	uxtb	r3, r3
 8007734:	4619      	mov	r1, r3
 8007736:	6878      	ldr	r0, [r7, #4]
 8007738:	f00a f87e 	bl	8011838 <HAL_PCD_DataOutStageCallback>
 800773c:	e046      	b.n	80077cc <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800773e:	697b      	ldr	r3, [r7, #20]
 8007740:	4a26      	ldr	r2, [pc, #152]	@ (80077dc <PCD_EP_OutXfrComplete_int+0x1cc>)
 8007742:	4293      	cmp	r3, r2
 8007744:	d124      	bne.n	8007790 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8007746:	693b      	ldr	r3, [r7, #16]
 8007748:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800774c:	2b00      	cmp	r3, #0
 800774e:	d00a      	beq.n	8007766 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007750:	683b      	ldr	r3, [r7, #0]
 8007752:	015a      	lsls	r2, r3, #5
 8007754:	69bb      	ldr	r3, [r7, #24]
 8007756:	4413      	add	r3, r2
 8007758:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800775c:	461a      	mov	r2, r3
 800775e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007762:	6093      	str	r3, [r2, #8]
 8007764:	e032      	b.n	80077cc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8007766:	693b      	ldr	r3, [r7, #16]
 8007768:	f003 0320 	and.w	r3, r3, #32
 800776c:	2b00      	cmp	r3, #0
 800776e:	d008      	beq.n	8007782 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007770:	683b      	ldr	r3, [r7, #0]
 8007772:	015a      	lsls	r2, r3, #5
 8007774:	69bb      	ldr	r3, [r7, #24]
 8007776:	4413      	add	r3, r2
 8007778:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800777c:	461a      	mov	r2, r3
 800777e:	2320      	movs	r3, #32
 8007780:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007782:	683b      	ldr	r3, [r7, #0]
 8007784:	b2db      	uxtb	r3, r3
 8007786:	4619      	mov	r1, r3
 8007788:	6878      	ldr	r0, [r7, #4]
 800778a:	f00a f855 	bl	8011838 <HAL_PCD_DataOutStageCallback>
 800778e:	e01d      	b.n	80077cc <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8007790:	683b      	ldr	r3, [r7, #0]
 8007792:	2b00      	cmp	r3, #0
 8007794:	d114      	bne.n	80077c0 <PCD_EP_OutXfrComplete_int+0x1b0>
 8007796:	6879      	ldr	r1, [r7, #4]
 8007798:	683a      	ldr	r2, [r7, #0]
 800779a:	4613      	mov	r3, r2
 800779c:	00db      	lsls	r3, r3, #3
 800779e:	4413      	add	r3, r2
 80077a0:	009b      	lsls	r3, r3, #2
 80077a2:	440b      	add	r3, r1
 80077a4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d108      	bne.n	80077c0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	6818      	ldr	r0, [r3, #0]
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80077b8:	461a      	mov	r2, r3
 80077ba:	2100      	movs	r1, #0
 80077bc:	f007 fd12 	bl	800f1e4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80077c0:	683b      	ldr	r3, [r7, #0]
 80077c2:	b2db      	uxtb	r3, r3
 80077c4:	4619      	mov	r1, r3
 80077c6:	6878      	ldr	r0, [r7, #4]
 80077c8:	f00a f836 	bl	8011838 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80077cc:	2300      	movs	r3, #0
}
 80077ce:	4618      	mov	r0, r3
 80077d0:	3720      	adds	r7, #32
 80077d2:	46bd      	mov	sp, r7
 80077d4:	bd80      	pop	{r7, pc}
 80077d6:	bf00      	nop
 80077d8:	4f54300a 	.word	0x4f54300a
 80077dc:	4f54310a 	.word	0x4f54310a

080077e0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80077e0:	b580      	push	{r7, lr}
 80077e2:	b086      	sub	sp, #24
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
 80077e8:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077f0:	697b      	ldr	r3, [r7, #20]
 80077f2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80077f4:	697b      	ldr	r3, [r7, #20]
 80077f6:	333c      	adds	r3, #60	@ 0x3c
 80077f8:	3304      	adds	r3, #4
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80077fe:	683b      	ldr	r3, [r7, #0]
 8007800:	015a      	lsls	r2, r3, #5
 8007802:	693b      	ldr	r3, [r7, #16]
 8007804:	4413      	add	r3, r2
 8007806:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800780a:	689b      	ldr	r3, [r3, #8]
 800780c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	4a15      	ldr	r2, [pc, #84]	@ (8007868 <PCD_EP_OutSetupPacket_int+0x88>)
 8007812:	4293      	cmp	r3, r2
 8007814:	d90e      	bls.n	8007834 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007816:	68bb      	ldr	r3, [r7, #8]
 8007818:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800781c:	2b00      	cmp	r3, #0
 800781e:	d009      	beq.n	8007834 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007820:	683b      	ldr	r3, [r7, #0]
 8007822:	015a      	lsls	r2, r3, #5
 8007824:	693b      	ldr	r3, [r7, #16]
 8007826:	4413      	add	r3, r2
 8007828:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800782c:	461a      	mov	r2, r3
 800782e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007832:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8007834:	6878      	ldr	r0, [r7, #4]
 8007836:	f009 ffed 	bl	8011814 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	4a0a      	ldr	r2, [pc, #40]	@ (8007868 <PCD_EP_OutSetupPacket_int+0x88>)
 800783e:	4293      	cmp	r3, r2
 8007840:	d90c      	bls.n	800785c <PCD_EP_OutSetupPacket_int+0x7c>
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	799b      	ldrb	r3, [r3, #6]
 8007846:	2b01      	cmp	r3, #1
 8007848:	d108      	bne.n	800785c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	6818      	ldr	r0, [r3, #0]
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007854:	461a      	mov	r2, r3
 8007856:	2101      	movs	r1, #1
 8007858:	f007 fcc4 	bl	800f1e4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800785c:	2300      	movs	r3, #0
}
 800785e:	4618      	mov	r0, r3
 8007860:	3718      	adds	r7, #24
 8007862:	46bd      	mov	sp, r7
 8007864:	bd80      	pop	{r7, pc}
 8007866:	bf00      	nop
 8007868:	4f54300a 	.word	0x4f54300a

0800786c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800786c:	b480      	push	{r7}
 800786e:	b085      	sub	sp, #20
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
 8007874:	460b      	mov	r3, r1
 8007876:	70fb      	strb	r3, [r7, #3]
 8007878:	4613      	mov	r3, r2
 800787a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007882:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8007884:	78fb      	ldrb	r3, [r7, #3]
 8007886:	2b00      	cmp	r3, #0
 8007888:	d107      	bne.n	800789a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800788a:	883b      	ldrh	r3, [r7, #0]
 800788c:	0419      	lsls	r1, r3, #16
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	68ba      	ldr	r2, [r7, #8]
 8007894:	430a      	orrs	r2, r1
 8007896:	629a      	str	r2, [r3, #40]	@ 0x28
 8007898:	e028      	b.n	80078ec <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078a0:	0c1b      	lsrs	r3, r3, #16
 80078a2:	68ba      	ldr	r2, [r7, #8]
 80078a4:	4413      	add	r3, r2
 80078a6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80078a8:	2300      	movs	r3, #0
 80078aa:	73fb      	strb	r3, [r7, #15]
 80078ac:	e00d      	b.n	80078ca <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681a      	ldr	r2, [r3, #0]
 80078b2:	7bfb      	ldrb	r3, [r7, #15]
 80078b4:	3340      	adds	r3, #64	@ 0x40
 80078b6:	009b      	lsls	r3, r3, #2
 80078b8:	4413      	add	r3, r2
 80078ba:	685b      	ldr	r3, [r3, #4]
 80078bc:	0c1b      	lsrs	r3, r3, #16
 80078be:	68ba      	ldr	r2, [r7, #8]
 80078c0:	4413      	add	r3, r2
 80078c2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80078c4:	7bfb      	ldrb	r3, [r7, #15]
 80078c6:	3301      	adds	r3, #1
 80078c8:	73fb      	strb	r3, [r7, #15]
 80078ca:	7bfa      	ldrb	r2, [r7, #15]
 80078cc:	78fb      	ldrb	r3, [r7, #3]
 80078ce:	3b01      	subs	r3, #1
 80078d0:	429a      	cmp	r2, r3
 80078d2:	d3ec      	bcc.n	80078ae <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80078d4:	883b      	ldrh	r3, [r7, #0]
 80078d6:	0418      	lsls	r0, r3, #16
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	6819      	ldr	r1, [r3, #0]
 80078dc:	78fb      	ldrb	r3, [r7, #3]
 80078de:	3b01      	subs	r3, #1
 80078e0:	68ba      	ldr	r2, [r7, #8]
 80078e2:	4302      	orrs	r2, r0
 80078e4:	3340      	adds	r3, #64	@ 0x40
 80078e6:	009b      	lsls	r3, r3, #2
 80078e8:	440b      	add	r3, r1
 80078ea:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80078ec:	2300      	movs	r3, #0
}
 80078ee:	4618      	mov	r0, r3
 80078f0:	3714      	adds	r7, #20
 80078f2:	46bd      	mov	sp, r7
 80078f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f8:	4770      	bx	lr

080078fa <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80078fa:	b480      	push	{r7}
 80078fc:	b083      	sub	sp, #12
 80078fe:	af00      	add	r7, sp, #0
 8007900:	6078      	str	r0, [r7, #4]
 8007902:	460b      	mov	r3, r1
 8007904:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	887a      	ldrh	r2, [r7, #2]
 800790c:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800790e:	2300      	movs	r3, #0
}
 8007910:	4618      	mov	r0, r3
 8007912:	370c      	adds	r7, #12
 8007914:	46bd      	mov	sp, r7
 8007916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791a:	4770      	bx	lr

0800791c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800791c:	b480      	push	{r7}
 800791e:	b085      	sub	sp, #20
 8007920:	af00      	add	r7, sp, #0
 8007922:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	2201      	movs	r2, #1
 800792e:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	2200      	movs	r2, #0
 8007936:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	699b      	ldr	r3, [r3, #24]
 800793e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800794a:	4b05      	ldr	r3, [pc, #20]	@ (8007960 <HAL_PCDEx_ActivateLPM+0x44>)
 800794c:	4313      	orrs	r3, r2
 800794e:	68fa      	ldr	r2, [r7, #12]
 8007950:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8007952:	2300      	movs	r3, #0
}
 8007954:	4618      	mov	r0, r3
 8007956:	3714      	adds	r7, #20
 8007958:	46bd      	mov	sp, r7
 800795a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795e:	4770      	bx	lr
 8007960:	10000003 	.word	0x10000003

08007964 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8007964:	b480      	push	{r7}
 8007966:	b083      	sub	sp, #12
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
 800796c:	460b      	mov	r3, r1
 800796e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8007970:	bf00      	nop
 8007972:	370c      	adds	r7, #12
 8007974:	46bd      	mov	sp, r7
 8007976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797a:	4770      	bx	lr

0800797c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800797c:	b580      	push	{r7, lr}
 800797e:	b084      	sub	sp, #16
 8007980:	af00      	add	r7, sp, #0
 8007982:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8007984:	4b29      	ldr	r3, [pc, #164]	@ (8007a2c <HAL_PWREx_ConfigSupply+0xb0>)
 8007986:	68db      	ldr	r3, [r3, #12]
 8007988:	f003 0307 	and.w	r3, r3, #7
 800798c:	2b06      	cmp	r3, #6
 800798e:	d00a      	beq.n	80079a6 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8007990:	4b26      	ldr	r3, [pc, #152]	@ (8007a2c <HAL_PWREx_ConfigSupply+0xb0>)
 8007992:	68db      	ldr	r3, [r3, #12]
 8007994:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007998:	687a      	ldr	r2, [r7, #4]
 800799a:	429a      	cmp	r2, r3
 800799c:	d001      	beq.n	80079a2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800799e:	2301      	movs	r3, #1
 80079a0:	e040      	b.n	8007a24 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80079a2:	2300      	movs	r3, #0
 80079a4:	e03e      	b.n	8007a24 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80079a6:	4b21      	ldr	r3, [pc, #132]	@ (8007a2c <HAL_PWREx_ConfigSupply+0xb0>)
 80079a8:	68db      	ldr	r3, [r3, #12]
 80079aa:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 80079ae:	491f      	ldr	r1, [pc, #124]	@ (8007a2c <HAL_PWREx_ConfigSupply+0xb0>)
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	4313      	orrs	r3, r2
 80079b4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80079b6:	f7fa ffef 	bl	8002998 <HAL_GetTick>
 80079ba:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80079bc:	e009      	b.n	80079d2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80079be:	f7fa ffeb 	bl	8002998 <HAL_GetTick>
 80079c2:	4602      	mov	r2, r0
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	1ad3      	subs	r3, r2, r3
 80079c8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80079cc:	d901      	bls.n	80079d2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80079ce:	2301      	movs	r3, #1
 80079d0:	e028      	b.n	8007a24 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80079d2:	4b16      	ldr	r3, [pc, #88]	@ (8007a2c <HAL_PWREx_ConfigSupply+0xb0>)
 80079d4:	685b      	ldr	r3, [r3, #4]
 80079d6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80079da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80079de:	d1ee      	bne.n	80079be <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	2b1e      	cmp	r3, #30
 80079e4:	d008      	beq.n	80079f8 <HAL_PWREx_ConfigSupply+0x7c>
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	2b2e      	cmp	r3, #46	@ 0x2e
 80079ea:	d005      	beq.n	80079f8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	2b1d      	cmp	r3, #29
 80079f0:	d002      	beq.n	80079f8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	2b2d      	cmp	r3, #45	@ 0x2d
 80079f6:	d114      	bne.n	8007a22 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80079f8:	f7fa ffce 	bl	8002998 <HAL_GetTick>
 80079fc:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80079fe:	e009      	b.n	8007a14 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007a00:	f7fa ffca 	bl	8002998 <HAL_GetTick>
 8007a04:	4602      	mov	r2, r0
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	1ad3      	subs	r3, r2, r3
 8007a0a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007a0e:	d901      	bls.n	8007a14 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8007a10:	2301      	movs	r3, #1
 8007a12:	e007      	b.n	8007a24 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8007a14:	4b05      	ldr	r3, [pc, #20]	@ (8007a2c <HAL_PWREx_ConfigSupply+0xb0>)
 8007a16:	68db      	ldr	r3, [r3, #12]
 8007a18:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007a1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007a20:	d1ee      	bne.n	8007a00 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8007a22:	2300      	movs	r3, #0
}
 8007a24:	4618      	mov	r0, r3
 8007a26:	3710      	adds	r7, #16
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	bd80      	pop	{r7, pc}
 8007a2c:	58024800 	.word	0x58024800

08007a30 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8007a30:	b480      	push	{r7}
 8007a32:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8007a34:	4b05      	ldr	r3, [pc, #20]	@ (8007a4c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8007a36:	68db      	ldr	r3, [r3, #12]
 8007a38:	4a04      	ldr	r2, [pc, #16]	@ (8007a4c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8007a3a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007a3e:	60d3      	str	r3, [r2, #12]
}
 8007a40:	bf00      	nop
 8007a42:	46bd      	mov	sp, r7
 8007a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a48:	4770      	bx	lr
 8007a4a:	bf00      	nop
 8007a4c:	58024800 	.word	0x58024800

08007a50 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007a50:	b580      	push	{r7, lr}
 8007a52:	b08c      	sub	sp, #48	@ 0x30
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d102      	bne.n	8007a64 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8007a5e:	2301      	movs	r3, #1
 8007a60:	f000 bc48 	b.w	80082f4 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	f003 0301 	and.w	r3, r3, #1
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	f000 8088 	beq.w	8007b82 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007a72:	4b99      	ldr	r3, [pc, #612]	@ (8007cd8 <HAL_RCC_OscConfig+0x288>)
 8007a74:	691b      	ldr	r3, [r3, #16]
 8007a76:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007a7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007a7c:	4b96      	ldr	r3, [pc, #600]	@ (8007cd8 <HAL_RCC_OscConfig+0x288>)
 8007a7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a80:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8007a82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a84:	2b10      	cmp	r3, #16
 8007a86:	d007      	beq.n	8007a98 <HAL_RCC_OscConfig+0x48>
 8007a88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a8a:	2b18      	cmp	r3, #24
 8007a8c:	d111      	bne.n	8007ab2 <HAL_RCC_OscConfig+0x62>
 8007a8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a90:	f003 0303 	and.w	r3, r3, #3
 8007a94:	2b02      	cmp	r3, #2
 8007a96:	d10c      	bne.n	8007ab2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007a98:	4b8f      	ldr	r3, [pc, #572]	@ (8007cd8 <HAL_RCC_OscConfig+0x288>)
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d06d      	beq.n	8007b80 <HAL_RCC_OscConfig+0x130>
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	685b      	ldr	r3, [r3, #4]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d169      	bne.n	8007b80 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8007aac:	2301      	movs	r3, #1
 8007aae:	f000 bc21 	b.w	80082f4 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	685b      	ldr	r3, [r3, #4]
 8007ab6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007aba:	d106      	bne.n	8007aca <HAL_RCC_OscConfig+0x7a>
 8007abc:	4b86      	ldr	r3, [pc, #536]	@ (8007cd8 <HAL_RCC_OscConfig+0x288>)
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	4a85      	ldr	r2, [pc, #532]	@ (8007cd8 <HAL_RCC_OscConfig+0x288>)
 8007ac2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007ac6:	6013      	str	r3, [r2, #0]
 8007ac8:	e02e      	b.n	8007b28 <HAL_RCC_OscConfig+0xd8>
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	685b      	ldr	r3, [r3, #4]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d10c      	bne.n	8007aec <HAL_RCC_OscConfig+0x9c>
 8007ad2:	4b81      	ldr	r3, [pc, #516]	@ (8007cd8 <HAL_RCC_OscConfig+0x288>)
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	4a80      	ldr	r2, [pc, #512]	@ (8007cd8 <HAL_RCC_OscConfig+0x288>)
 8007ad8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007adc:	6013      	str	r3, [r2, #0]
 8007ade:	4b7e      	ldr	r3, [pc, #504]	@ (8007cd8 <HAL_RCC_OscConfig+0x288>)
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	4a7d      	ldr	r2, [pc, #500]	@ (8007cd8 <HAL_RCC_OscConfig+0x288>)
 8007ae4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007ae8:	6013      	str	r3, [r2, #0]
 8007aea:	e01d      	b.n	8007b28 <HAL_RCC_OscConfig+0xd8>
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	685b      	ldr	r3, [r3, #4]
 8007af0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007af4:	d10c      	bne.n	8007b10 <HAL_RCC_OscConfig+0xc0>
 8007af6:	4b78      	ldr	r3, [pc, #480]	@ (8007cd8 <HAL_RCC_OscConfig+0x288>)
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	4a77      	ldr	r2, [pc, #476]	@ (8007cd8 <HAL_RCC_OscConfig+0x288>)
 8007afc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007b00:	6013      	str	r3, [r2, #0]
 8007b02:	4b75      	ldr	r3, [pc, #468]	@ (8007cd8 <HAL_RCC_OscConfig+0x288>)
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	4a74      	ldr	r2, [pc, #464]	@ (8007cd8 <HAL_RCC_OscConfig+0x288>)
 8007b08:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007b0c:	6013      	str	r3, [r2, #0]
 8007b0e:	e00b      	b.n	8007b28 <HAL_RCC_OscConfig+0xd8>
 8007b10:	4b71      	ldr	r3, [pc, #452]	@ (8007cd8 <HAL_RCC_OscConfig+0x288>)
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	4a70      	ldr	r2, [pc, #448]	@ (8007cd8 <HAL_RCC_OscConfig+0x288>)
 8007b16:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007b1a:	6013      	str	r3, [r2, #0]
 8007b1c:	4b6e      	ldr	r3, [pc, #440]	@ (8007cd8 <HAL_RCC_OscConfig+0x288>)
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	4a6d      	ldr	r2, [pc, #436]	@ (8007cd8 <HAL_RCC_OscConfig+0x288>)
 8007b22:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007b26:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	685b      	ldr	r3, [r3, #4]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d013      	beq.n	8007b58 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b30:	f7fa ff32 	bl	8002998 <HAL_GetTick>
 8007b34:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007b36:	e008      	b.n	8007b4a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007b38:	f7fa ff2e 	bl	8002998 <HAL_GetTick>
 8007b3c:	4602      	mov	r2, r0
 8007b3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b40:	1ad3      	subs	r3, r2, r3
 8007b42:	2b64      	cmp	r3, #100	@ 0x64
 8007b44:	d901      	bls.n	8007b4a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007b46:	2303      	movs	r3, #3
 8007b48:	e3d4      	b.n	80082f4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007b4a:	4b63      	ldr	r3, [pc, #396]	@ (8007cd8 <HAL_RCC_OscConfig+0x288>)
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d0f0      	beq.n	8007b38 <HAL_RCC_OscConfig+0xe8>
 8007b56:	e014      	b.n	8007b82 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b58:	f7fa ff1e 	bl	8002998 <HAL_GetTick>
 8007b5c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007b5e:	e008      	b.n	8007b72 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007b60:	f7fa ff1a 	bl	8002998 <HAL_GetTick>
 8007b64:	4602      	mov	r2, r0
 8007b66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b68:	1ad3      	subs	r3, r2, r3
 8007b6a:	2b64      	cmp	r3, #100	@ 0x64
 8007b6c:	d901      	bls.n	8007b72 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8007b6e:	2303      	movs	r3, #3
 8007b70:	e3c0      	b.n	80082f4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007b72:	4b59      	ldr	r3, [pc, #356]	@ (8007cd8 <HAL_RCC_OscConfig+0x288>)
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d1f0      	bne.n	8007b60 <HAL_RCC_OscConfig+0x110>
 8007b7e:	e000      	b.n	8007b82 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007b80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	f003 0302 	and.w	r3, r3, #2
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	f000 80ca 	beq.w	8007d24 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007b90:	4b51      	ldr	r3, [pc, #324]	@ (8007cd8 <HAL_RCC_OscConfig+0x288>)
 8007b92:	691b      	ldr	r3, [r3, #16]
 8007b94:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007b98:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007b9a:	4b4f      	ldr	r3, [pc, #316]	@ (8007cd8 <HAL_RCC_OscConfig+0x288>)
 8007b9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b9e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007ba0:	6a3b      	ldr	r3, [r7, #32]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d007      	beq.n	8007bb6 <HAL_RCC_OscConfig+0x166>
 8007ba6:	6a3b      	ldr	r3, [r7, #32]
 8007ba8:	2b18      	cmp	r3, #24
 8007baa:	d156      	bne.n	8007c5a <HAL_RCC_OscConfig+0x20a>
 8007bac:	69fb      	ldr	r3, [r7, #28]
 8007bae:	f003 0303 	and.w	r3, r3, #3
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d151      	bne.n	8007c5a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007bb6:	4b48      	ldr	r3, [pc, #288]	@ (8007cd8 <HAL_RCC_OscConfig+0x288>)
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	f003 0304 	and.w	r3, r3, #4
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d005      	beq.n	8007bce <HAL_RCC_OscConfig+0x17e>
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	68db      	ldr	r3, [r3, #12]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d101      	bne.n	8007bce <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8007bca:	2301      	movs	r3, #1
 8007bcc:	e392      	b.n	80082f4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007bce:	4b42      	ldr	r3, [pc, #264]	@ (8007cd8 <HAL_RCC_OscConfig+0x288>)
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	f023 0219 	bic.w	r2, r3, #25
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	68db      	ldr	r3, [r3, #12]
 8007bda:	493f      	ldr	r1, [pc, #252]	@ (8007cd8 <HAL_RCC_OscConfig+0x288>)
 8007bdc:	4313      	orrs	r3, r2
 8007bde:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007be0:	f7fa feda 	bl	8002998 <HAL_GetTick>
 8007be4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007be6:	e008      	b.n	8007bfa <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007be8:	f7fa fed6 	bl	8002998 <HAL_GetTick>
 8007bec:	4602      	mov	r2, r0
 8007bee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bf0:	1ad3      	subs	r3, r2, r3
 8007bf2:	2b02      	cmp	r3, #2
 8007bf4:	d901      	bls.n	8007bfa <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8007bf6:	2303      	movs	r3, #3
 8007bf8:	e37c      	b.n	80082f4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007bfa:	4b37      	ldr	r3, [pc, #220]	@ (8007cd8 <HAL_RCC_OscConfig+0x288>)
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	f003 0304 	and.w	r3, r3, #4
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d0f0      	beq.n	8007be8 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007c06:	f7fa fef7 	bl	80029f8 <HAL_GetREVID>
 8007c0a:	4603      	mov	r3, r0
 8007c0c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8007c10:	4293      	cmp	r3, r2
 8007c12:	d817      	bhi.n	8007c44 <HAL_RCC_OscConfig+0x1f4>
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	691b      	ldr	r3, [r3, #16]
 8007c18:	2b40      	cmp	r3, #64	@ 0x40
 8007c1a:	d108      	bne.n	8007c2e <HAL_RCC_OscConfig+0x1de>
 8007c1c:	4b2e      	ldr	r3, [pc, #184]	@ (8007cd8 <HAL_RCC_OscConfig+0x288>)
 8007c1e:	685b      	ldr	r3, [r3, #4]
 8007c20:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8007c24:	4a2c      	ldr	r2, [pc, #176]	@ (8007cd8 <HAL_RCC_OscConfig+0x288>)
 8007c26:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007c2a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007c2c:	e07a      	b.n	8007d24 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007c2e:	4b2a      	ldr	r3, [pc, #168]	@ (8007cd8 <HAL_RCC_OscConfig+0x288>)
 8007c30:	685b      	ldr	r3, [r3, #4]
 8007c32:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	691b      	ldr	r3, [r3, #16]
 8007c3a:	031b      	lsls	r3, r3, #12
 8007c3c:	4926      	ldr	r1, [pc, #152]	@ (8007cd8 <HAL_RCC_OscConfig+0x288>)
 8007c3e:	4313      	orrs	r3, r2
 8007c40:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007c42:	e06f      	b.n	8007d24 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007c44:	4b24      	ldr	r3, [pc, #144]	@ (8007cd8 <HAL_RCC_OscConfig+0x288>)
 8007c46:	685b      	ldr	r3, [r3, #4]
 8007c48:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	691b      	ldr	r3, [r3, #16]
 8007c50:	061b      	lsls	r3, r3, #24
 8007c52:	4921      	ldr	r1, [pc, #132]	@ (8007cd8 <HAL_RCC_OscConfig+0x288>)
 8007c54:	4313      	orrs	r3, r2
 8007c56:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007c58:	e064      	b.n	8007d24 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	68db      	ldr	r3, [r3, #12]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d047      	beq.n	8007cf2 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007c62:	4b1d      	ldr	r3, [pc, #116]	@ (8007cd8 <HAL_RCC_OscConfig+0x288>)
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	f023 0219 	bic.w	r2, r3, #25
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	68db      	ldr	r3, [r3, #12]
 8007c6e:	491a      	ldr	r1, [pc, #104]	@ (8007cd8 <HAL_RCC_OscConfig+0x288>)
 8007c70:	4313      	orrs	r3, r2
 8007c72:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c74:	f7fa fe90 	bl	8002998 <HAL_GetTick>
 8007c78:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007c7a:	e008      	b.n	8007c8e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007c7c:	f7fa fe8c 	bl	8002998 <HAL_GetTick>
 8007c80:	4602      	mov	r2, r0
 8007c82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c84:	1ad3      	subs	r3, r2, r3
 8007c86:	2b02      	cmp	r3, #2
 8007c88:	d901      	bls.n	8007c8e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8007c8a:	2303      	movs	r3, #3
 8007c8c:	e332      	b.n	80082f4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007c8e:	4b12      	ldr	r3, [pc, #72]	@ (8007cd8 <HAL_RCC_OscConfig+0x288>)
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	f003 0304 	and.w	r3, r3, #4
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d0f0      	beq.n	8007c7c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007c9a:	f7fa fead 	bl	80029f8 <HAL_GetREVID>
 8007c9e:	4603      	mov	r3, r0
 8007ca0:	f241 0203 	movw	r2, #4099	@ 0x1003
 8007ca4:	4293      	cmp	r3, r2
 8007ca6:	d819      	bhi.n	8007cdc <HAL_RCC_OscConfig+0x28c>
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	691b      	ldr	r3, [r3, #16]
 8007cac:	2b40      	cmp	r3, #64	@ 0x40
 8007cae:	d108      	bne.n	8007cc2 <HAL_RCC_OscConfig+0x272>
 8007cb0:	4b09      	ldr	r3, [pc, #36]	@ (8007cd8 <HAL_RCC_OscConfig+0x288>)
 8007cb2:	685b      	ldr	r3, [r3, #4]
 8007cb4:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8007cb8:	4a07      	ldr	r2, [pc, #28]	@ (8007cd8 <HAL_RCC_OscConfig+0x288>)
 8007cba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007cbe:	6053      	str	r3, [r2, #4]
 8007cc0:	e030      	b.n	8007d24 <HAL_RCC_OscConfig+0x2d4>
 8007cc2:	4b05      	ldr	r3, [pc, #20]	@ (8007cd8 <HAL_RCC_OscConfig+0x288>)
 8007cc4:	685b      	ldr	r3, [r3, #4]
 8007cc6:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	691b      	ldr	r3, [r3, #16]
 8007cce:	031b      	lsls	r3, r3, #12
 8007cd0:	4901      	ldr	r1, [pc, #4]	@ (8007cd8 <HAL_RCC_OscConfig+0x288>)
 8007cd2:	4313      	orrs	r3, r2
 8007cd4:	604b      	str	r3, [r1, #4]
 8007cd6:	e025      	b.n	8007d24 <HAL_RCC_OscConfig+0x2d4>
 8007cd8:	58024400 	.word	0x58024400
 8007cdc:	4b9a      	ldr	r3, [pc, #616]	@ (8007f48 <HAL_RCC_OscConfig+0x4f8>)
 8007cde:	685b      	ldr	r3, [r3, #4]
 8007ce0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	691b      	ldr	r3, [r3, #16]
 8007ce8:	061b      	lsls	r3, r3, #24
 8007cea:	4997      	ldr	r1, [pc, #604]	@ (8007f48 <HAL_RCC_OscConfig+0x4f8>)
 8007cec:	4313      	orrs	r3, r2
 8007cee:	604b      	str	r3, [r1, #4]
 8007cf0:	e018      	b.n	8007d24 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007cf2:	4b95      	ldr	r3, [pc, #596]	@ (8007f48 <HAL_RCC_OscConfig+0x4f8>)
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	4a94      	ldr	r2, [pc, #592]	@ (8007f48 <HAL_RCC_OscConfig+0x4f8>)
 8007cf8:	f023 0301 	bic.w	r3, r3, #1
 8007cfc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007cfe:	f7fa fe4b 	bl	8002998 <HAL_GetTick>
 8007d02:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007d04:	e008      	b.n	8007d18 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007d06:	f7fa fe47 	bl	8002998 <HAL_GetTick>
 8007d0a:	4602      	mov	r2, r0
 8007d0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d0e:	1ad3      	subs	r3, r2, r3
 8007d10:	2b02      	cmp	r3, #2
 8007d12:	d901      	bls.n	8007d18 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8007d14:	2303      	movs	r3, #3
 8007d16:	e2ed      	b.n	80082f4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007d18:	4b8b      	ldr	r3, [pc, #556]	@ (8007f48 <HAL_RCC_OscConfig+0x4f8>)
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	f003 0304 	and.w	r3, r3, #4
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d1f0      	bne.n	8007d06 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	f003 0310 	and.w	r3, r3, #16
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	f000 80a9 	beq.w	8007e84 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007d32:	4b85      	ldr	r3, [pc, #532]	@ (8007f48 <HAL_RCC_OscConfig+0x4f8>)
 8007d34:	691b      	ldr	r3, [r3, #16]
 8007d36:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007d3a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007d3c:	4b82      	ldr	r3, [pc, #520]	@ (8007f48 <HAL_RCC_OscConfig+0x4f8>)
 8007d3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d40:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8007d42:	69bb      	ldr	r3, [r7, #24]
 8007d44:	2b08      	cmp	r3, #8
 8007d46:	d007      	beq.n	8007d58 <HAL_RCC_OscConfig+0x308>
 8007d48:	69bb      	ldr	r3, [r7, #24]
 8007d4a:	2b18      	cmp	r3, #24
 8007d4c:	d13a      	bne.n	8007dc4 <HAL_RCC_OscConfig+0x374>
 8007d4e:	697b      	ldr	r3, [r7, #20]
 8007d50:	f003 0303 	and.w	r3, r3, #3
 8007d54:	2b01      	cmp	r3, #1
 8007d56:	d135      	bne.n	8007dc4 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007d58:	4b7b      	ldr	r3, [pc, #492]	@ (8007f48 <HAL_RCC_OscConfig+0x4f8>)
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d005      	beq.n	8007d70 <HAL_RCC_OscConfig+0x320>
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	69db      	ldr	r3, [r3, #28]
 8007d68:	2b80      	cmp	r3, #128	@ 0x80
 8007d6a:	d001      	beq.n	8007d70 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8007d6c:	2301      	movs	r3, #1
 8007d6e:	e2c1      	b.n	80082f4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007d70:	f7fa fe42 	bl	80029f8 <HAL_GetREVID>
 8007d74:	4603      	mov	r3, r0
 8007d76:	f241 0203 	movw	r2, #4099	@ 0x1003
 8007d7a:	4293      	cmp	r3, r2
 8007d7c:	d817      	bhi.n	8007dae <HAL_RCC_OscConfig+0x35e>
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	6a1b      	ldr	r3, [r3, #32]
 8007d82:	2b20      	cmp	r3, #32
 8007d84:	d108      	bne.n	8007d98 <HAL_RCC_OscConfig+0x348>
 8007d86:	4b70      	ldr	r3, [pc, #448]	@ (8007f48 <HAL_RCC_OscConfig+0x4f8>)
 8007d88:	685b      	ldr	r3, [r3, #4]
 8007d8a:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8007d8e:	4a6e      	ldr	r2, [pc, #440]	@ (8007f48 <HAL_RCC_OscConfig+0x4f8>)
 8007d90:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007d94:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007d96:	e075      	b.n	8007e84 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007d98:	4b6b      	ldr	r3, [pc, #428]	@ (8007f48 <HAL_RCC_OscConfig+0x4f8>)
 8007d9a:	685b      	ldr	r3, [r3, #4]
 8007d9c:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	6a1b      	ldr	r3, [r3, #32]
 8007da4:	069b      	lsls	r3, r3, #26
 8007da6:	4968      	ldr	r1, [pc, #416]	@ (8007f48 <HAL_RCC_OscConfig+0x4f8>)
 8007da8:	4313      	orrs	r3, r2
 8007daa:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007dac:	e06a      	b.n	8007e84 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007dae:	4b66      	ldr	r3, [pc, #408]	@ (8007f48 <HAL_RCC_OscConfig+0x4f8>)
 8007db0:	68db      	ldr	r3, [r3, #12]
 8007db2:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	6a1b      	ldr	r3, [r3, #32]
 8007dba:	061b      	lsls	r3, r3, #24
 8007dbc:	4962      	ldr	r1, [pc, #392]	@ (8007f48 <HAL_RCC_OscConfig+0x4f8>)
 8007dbe:	4313      	orrs	r3, r2
 8007dc0:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007dc2:	e05f      	b.n	8007e84 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	69db      	ldr	r3, [r3, #28]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d042      	beq.n	8007e52 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8007dcc:	4b5e      	ldr	r3, [pc, #376]	@ (8007f48 <HAL_RCC_OscConfig+0x4f8>)
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	4a5d      	ldr	r2, [pc, #372]	@ (8007f48 <HAL_RCC_OscConfig+0x4f8>)
 8007dd2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007dd6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007dd8:	f7fa fdde 	bl	8002998 <HAL_GetTick>
 8007ddc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007dde:	e008      	b.n	8007df2 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8007de0:	f7fa fdda 	bl	8002998 <HAL_GetTick>
 8007de4:	4602      	mov	r2, r0
 8007de6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007de8:	1ad3      	subs	r3, r2, r3
 8007dea:	2b02      	cmp	r3, #2
 8007dec:	d901      	bls.n	8007df2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8007dee:	2303      	movs	r3, #3
 8007df0:	e280      	b.n	80082f4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007df2:	4b55      	ldr	r3, [pc, #340]	@ (8007f48 <HAL_RCC_OscConfig+0x4f8>)
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d0f0      	beq.n	8007de0 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007dfe:	f7fa fdfb 	bl	80029f8 <HAL_GetREVID>
 8007e02:	4603      	mov	r3, r0
 8007e04:	f241 0203 	movw	r2, #4099	@ 0x1003
 8007e08:	4293      	cmp	r3, r2
 8007e0a:	d817      	bhi.n	8007e3c <HAL_RCC_OscConfig+0x3ec>
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	6a1b      	ldr	r3, [r3, #32]
 8007e10:	2b20      	cmp	r3, #32
 8007e12:	d108      	bne.n	8007e26 <HAL_RCC_OscConfig+0x3d6>
 8007e14:	4b4c      	ldr	r3, [pc, #304]	@ (8007f48 <HAL_RCC_OscConfig+0x4f8>)
 8007e16:	685b      	ldr	r3, [r3, #4]
 8007e18:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8007e1c:	4a4a      	ldr	r2, [pc, #296]	@ (8007f48 <HAL_RCC_OscConfig+0x4f8>)
 8007e1e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007e22:	6053      	str	r3, [r2, #4]
 8007e24:	e02e      	b.n	8007e84 <HAL_RCC_OscConfig+0x434>
 8007e26:	4b48      	ldr	r3, [pc, #288]	@ (8007f48 <HAL_RCC_OscConfig+0x4f8>)
 8007e28:	685b      	ldr	r3, [r3, #4]
 8007e2a:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	6a1b      	ldr	r3, [r3, #32]
 8007e32:	069b      	lsls	r3, r3, #26
 8007e34:	4944      	ldr	r1, [pc, #272]	@ (8007f48 <HAL_RCC_OscConfig+0x4f8>)
 8007e36:	4313      	orrs	r3, r2
 8007e38:	604b      	str	r3, [r1, #4]
 8007e3a:	e023      	b.n	8007e84 <HAL_RCC_OscConfig+0x434>
 8007e3c:	4b42      	ldr	r3, [pc, #264]	@ (8007f48 <HAL_RCC_OscConfig+0x4f8>)
 8007e3e:	68db      	ldr	r3, [r3, #12]
 8007e40:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	6a1b      	ldr	r3, [r3, #32]
 8007e48:	061b      	lsls	r3, r3, #24
 8007e4a:	493f      	ldr	r1, [pc, #252]	@ (8007f48 <HAL_RCC_OscConfig+0x4f8>)
 8007e4c:	4313      	orrs	r3, r2
 8007e4e:	60cb      	str	r3, [r1, #12]
 8007e50:	e018      	b.n	8007e84 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8007e52:	4b3d      	ldr	r3, [pc, #244]	@ (8007f48 <HAL_RCC_OscConfig+0x4f8>)
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	4a3c      	ldr	r2, [pc, #240]	@ (8007f48 <HAL_RCC_OscConfig+0x4f8>)
 8007e58:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007e5c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e5e:	f7fa fd9b 	bl	8002998 <HAL_GetTick>
 8007e62:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007e64:	e008      	b.n	8007e78 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8007e66:	f7fa fd97 	bl	8002998 <HAL_GetTick>
 8007e6a:	4602      	mov	r2, r0
 8007e6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e6e:	1ad3      	subs	r3, r2, r3
 8007e70:	2b02      	cmp	r3, #2
 8007e72:	d901      	bls.n	8007e78 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007e74:	2303      	movs	r3, #3
 8007e76:	e23d      	b.n	80082f4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007e78:	4b33      	ldr	r3, [pc, #204]	@ (8007f48 <HAL_RCC_OscConfig+0x4f8>)
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d1f0      	bne.n	8007e66 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	f003 0308 	and.w	r3, r3, #8
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d036      	beq.n	8007efe <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	695b      	ldr	r3, [r3, #20]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d019      	beq.n	8007ecc <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007e98:	4b2b      	ldr	r3, [pc, #172]	@ (8007f48 <HAL_RCC_OscConfig+0x4f8>)
 8007e9a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007e9c:	4a2a      	ldr	r2, [pc, #168]	@ (8007f48 <HAL_RCC_OscConfig+0x4f8>)
 8007e9e:	f043 0301 	orr.w	r3, r3, #1
 8007ea2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ea4:	f7fa fd78 	bl	8002998 <HAL_GetTick>
 8007ea8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007eaa:	e008      	b.n	8007ebe <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007eac:	f7fa fd74 	bl	8002998 <HAL_GetTick>
 8007eb0:	4602      	mov	r2, r0
 8007eb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007eb4:	1ad3      	subs	r3, r2, r3
 8007eb6:	2b02      	cmp	r3, #2
 8007eb8:	d901      	bls.n	8007ebe <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8007eba:	2303      	movs	r3, #3
 8007ebc:	e21a      	b.n	80082f4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007ebe:	4b22      	ldr	r3, [pc, #136]	@ (8007f48 <HAL_RCC_OscConfig+0x4f8>)
 8007ec0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007ec2:	f003 0302 	and.w	r3, r3, #2
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d0f0      	beq.n	8007eac <HAL_RCC_OscConfig+0x45c>
 8007eca:	e018      	b.n	8007efe <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007ecc:	4b1e      	ldr	r3, [pc, #120]	@ (8007f48 <HAL_RCC_OscConfig+0x4f8>)
 8007ece:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007ed0:	4a1d      	ldr	r2, [pc, #116]	@ (8007f48 <HAL_RCC_OscConfig+0x4f8>)
 8007ed2:	f023 0301 	bic.w	r3, r3, #1
 8007ed6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ed8:	f7fa fd5e 	bl	8002998 <HAL_GetTick>
 8007edc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007ede:	e008      	b.n	8007ef2 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007ee0:	f7fa fd5a 	bl	8002998 <HAL_GetTick>
 8007ee4:	4602      	mov	r2, r0
 8007ee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ee8:	1ad3      	subs	r3, r2, r3
 8007eea:	2b02      	cmp	r3, #2
 8007eec:	d901      	bls.n	8007ef2 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8007eee:	2303      	movs	r3, #3
 8007ef0:	e200      	b.n	80082f4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007ef2:	4b15      	ldr	r3, [pc, #84]	@ (8007f48 <HAL_RCC_OscConfig+0x4f8>)
 8007ef4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007ef6:	f003 0302 	and.w	r3, r3, #2
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d1f0      	bne.n	8007ee0 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	f003 0320 	and.w	r3, r3, #32
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d039      	beq.n	8007f7e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	699b      	ldr	r3, [r3, #24]
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d01c      	beq.n	8007f4c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007f12:	4b0d      	ldr	r3, [pc, #52]	@ (8007f48 <HAL_RCC_OscConfig+0x4f8>)
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	4a0c      	ldr	r2, [pc, #48]	@ (8007f48 <HAL_RCC_OscConfig+0x4f8>)
 8007f18:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8007f1c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007f1e:	f7fa fd3b 	bl	8002998 <HAL_GetTick>
 8007f22:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007f24:	e008      	b.n	8007f38 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007f26:	f7fa fd37 	bl	8002998 <HAL_GetTick>
 8007f2a:	4602      	mov	r2, r0
 8007f2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f2e:	1ad3      	subs	r3, r2, r3
 8007f30:	2b02      	cmp	r3, #2
 8007f32:	d901      	bls.n	8007f38 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8007f34:	2303      	movs	r3, #3
 8007f36:	e1dd      	b.n	80082f4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007f38:	4b03      	ldr	r3, [pc, #12]	@ (8007f48 <HAL_RCC_OscConfig+0x4f8>)
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d0f0      	beq.n	8007f26 <HAL_RCC_OscConfig+0x4d6>
 8007f44:	e01b      	b.n	8007f7e <HAL_RCC_OscConfig+0x52e>
 8007f46:	bf00      	nop
 8007f48:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007f4c:	4b9b      	ldr	r3, [pc, #620]	@ (80081bc <HAL_RCC_OscConfig+0x76c>)
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	4a9a      	ldr	r2, [pc, #616]	@ (80081bc <HAL_RCC_OscConfig+0x76c>)
 8007f52:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007f56:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007f58:	f7fa fd1e 	bl	8002998 <HAL_GetTick>
 8007f5c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007f5e:	e008      	b.n	8007f72 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007f60:	f7fa fd1a 	bl	8002998 <HAL_GetTick>
 8007f64:	4602      	mov	r2, r0
 8007f66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f68:	1ad3      	subs	r3, r2, r3
 8007f6a:	2b02      	cmp	r3, #2
 8007f6c:	d901      	bls.n	8007f72 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8007f6e:	2303      	movs	r3, #3
 8007f70:	e1c0      	b.n	80082f4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007f72:	4b92      	ldr	r3, [pc, #584]	@ (80081bc <HAL_RCC_OscConfig+0x76c>)
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d1f0      	bne.n	8007f60 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	f003 0304 	and.w	r3, r3, #4
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	f000 8081 	beq.w	800808e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007f8c:	4b8c      	ldr	r3, [pc, #560]	@ (80081c0 <HAL_RCC_OscConfig+0x770>)
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	4a8b      	ldr	r2, [pc, #556]	@ (80081c0 <HAL_RCC_OscConfig+0x770>)
 8007f92:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007f96:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007f98:	f7fa fcfe 	bl	8002998 <HAL_GetTick>
 8007f9c:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007f9e:	e008      	b.n	8007fb2 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007fa0:	f7fa fcfa 	bl	8002998 <HAL_GetTick>
 8007fa4:	4602      	mov	r2, r0
 8007fa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fa8:	1ad3      	subs	r3, r2, r3
 8007faa:	2b64      	cmp	r3, #100	@ 0x64
 8007fac:	d901      	bls.n	8007fb2 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8007fae:	2303      	movs	r3, #3
 8007fb0:	e1a0      	b.n	80082f4 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007fb2:	4b83      	ldr	r3, [pc, #524]	@ (80081c0 <HAL_RCC_OscConfig+0x770>)
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d0f0      	beq.n	8007fa0 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	689b      	ldr	r3, [r3, #8]
 8007fc2:	2b01      	cmp	r3, #1
 8007fc4:	d106      	bne.n	8007fd4 <HAL_RCC_OscConfig+0x584>
 8007fc6:	4b7d      	ldr	r3, [pc, #500]	@ (80081bc <HAL_RCC_OscConfig+0x76c>)
 8007fc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007fca:	4a7c      	ldr	r2, [pc, #496]	@ (80081bc <HAL_RCC_OscConfig+0x76c>)
 8007fcc:	f043 0301 	orr.w	r3, r3, #1
 8007fd0:	6713      	str	r3, [r2, #112]	@ 0x70
 8007fd2:	e02d      	b.n	8008030 <HAL_RCC_OscConfig+0x5e0>
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	689b      	ldr	r3, [r3, #8]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d10c      	bne.n	8007ff6 <HAL_RCC_OscConfig+0x5a6>
 8007fdc:	4b77      	ldr	r3, [pc, #476]	@ (80081bc <HAL_RCC_OscConfig+0x76c>)
 8007fde:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007fe0:	4a76      	ldr	r2, [pc, #472]	@ (80081bc <HAL_RCC_OscConfig+0x76c>)
 8007fe2:	f023 0301 	bic.w	r3, r3, #1
 8007fe6:	6713      	str	r3, [r2, #112]	@ 0x70
 8007fe8:	4b74      	ldr	r3, [pc, #464]	@ (80081bc <HAL_RCC_OscConfig+0x76c>)
 8007fea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007fec:	4a73      	ldr	r2, [pc, #460]	@ (80081bc <HAL_RCC_OscConfig+0x76c>)
 8007fee:	f023 0304 	bic.w	r3, r3, #4
 8007ff2:	6713      	str	r3, [r2, #112]	@ 0x70
 8007ff4:	e01c      	b.n	8008030 <HAL_RCC_OscConfig+0x5e0>
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	689b      	ldr	r3, [r3, #8]
 8007ffa:	2b05      	cmp	r3, #5
 8007ffc:	d10c      	bne.n	8008018 <HAL_RCC_OscConfig+0x5c8>
 8007ffe:	4b6f      	ldr	r3, [pc, #444]	@ (80081bc <HAL_RCC_OscConfig+0x76c>)
 8008000:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008002:	4a6e      	ldr	r2, [pc, #440]	@ (80081bc <HAL_RCC_OscConfig+0x76c>)
 8008004:	f043 0304 	orr.w	r3, r3, #4
 8008008:	6713      	str	r3, [r2, #112]	@ 0x70
 800800a:	4b6c      	ldr	r3, [pc, #432]	@ (80081bc <HAL_RCC_OscConfig+0x76c>)
 800800c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800800e:	4a6b      	ldr	r2, [pc, #428]	@ (80081bc <HAL_RCC_OscConfig+0x76c>)
 8008010:	f043 0301 	orr.w	r3, r3, #1
 8008014:	6713      	str	r3, [r2, #112]	@ 0x70
 8008016:	e00b      	b.n	8008030 <HAL_RCC_OscConfig+0x5e0>
 8008018:	4b68      	ldr	r3, [pc, #416]	@ (80081bc <HAL_RCC_OscConfig+0x76c>)
 800801a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800801c:	4a67      	ldr	r2, [pc, #412]	@ (80081bc <HAL_RCC_OscConfig+0x76c>)
 800801e:	f023 0301 	bic.w	r3, r3, #1
 8008022:	6713      	str	r3, [r2, #112]	@ 0x70
 8008024:	4b65      	ldr	r3, [pc, #404]	@ (80081bc <HAL_RCC_OscConfig+0x76c>)
 8008026:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008028:	4a64      	ldr	r2, [pc, #400]	@ (80081bc <HAL_RCC_OscConfig+0x76c>)
 800802a:	f023 0304 	bic.w	r3, r3, #4
 800802e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	689b      	ldr	r3, [r3, #8]
 8008034:	2b00      	cmp	r3, #0
 8008036:	d015      	beq.n	8008064 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008038:	f7fa fcae 	bl	8002998 <HAL_GetTick>
 800803c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800803e:	e00a      	b.n	8008056 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008040:	f7fa fcaa 	bl	8002998 <HAL_GetTick>
 8008044:	4602      	mov	r2, r0
 8008046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008048:	1ad3      	subs	r3, r2, r3
 800804a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800804e:	4293      	cmp	r3, r2
 8008050:	d901      	bls.n	8008056 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8008052:	2303      	movs	r3, #3
 8008054:	e14e      	b.n	80082f4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008056:	4b59      	ldr	r3, [pc, #356]	@ (80081bc <HAL_RCC_OscConfig+0x76c>)
 8008058:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800805a:	f003 0302 	and.w	r3, r3, #2
 800805e:	2b00      	cmp	r3, #0
 8008060:	d0ee      	beq.n	8008040 <HAL_RCC_OscConfig+0x5f0>
 8008062:	e014      	b.n	800808e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008064:	f7fa fc98 	bl	8002998 <HAL_GetTick>
 8008068:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800806a:	e00a      	b.n	8008082 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800806c:	f7fa fc94 	bl	8002998 <HAL_GetTick>
 8008070:	4602      	mov	r2, r0
 8008072:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008074:	1ad3      	subs	r3, r2, r3
 8008076:	f241 3288 	movw	r2, #5000	@ 0x1388
 800807a:	4293      	cmp	r3, r2
 800807c:	d901      	bls.n	8008082 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800807e:	2303      	movs	r3, #3
 8008080:	e138      	b.n	80082f4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008082:	4b4e      	ldr	r3, [pc, #312]	@ (80081bc <HAL_RCC_OscConfig+0x76c>)
 8008084:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008086:	f003 0302 	and.w	r3, r3, #2
 800808a:	2b00      	cmp	r3, #0
 800808c:	d1ee      	bne.n	800806c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008092:	2b00      	cmp	r3, #0
 8008094:	f000 812d 	beq.w	80082f2 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8008098:	4b48      	ldr	r3, [pc, #288]	@ (80081bc <HAL_RCC_OscConfig+0x76c>)
 800809a:	691b      	ldr	r3, [r3, #16]
 800809c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80080a0:	2b18      	cmp	r3, #24
 80080a2:	f000 80bd 	beq.w	8008220 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080aa:	2b02      	cmp	r3, #2
 80080ac:	f040 809e 	bne.w	80081ec <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80080b0:	4b42      	ldr	r3, [pc, #264]	@ (80081bc <HAL_RCC_OscConfig+0x76c>)
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	4a41      	ldr	r2, [pc, #260]	@ (80081bc <HAL_RCC_OscConfig+0x76c>)
 80080b6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80080ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80080bc:	f7fa fc6c 	bl	8002998 <HAL_GetTick>
 80080c0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80080c2:	e008      	b.n	80080d6 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80080c4:	f7fa fc68 	bl	8002998 <HAL_GetTick>
 80080c8:	4602      	mov	r2, r0
 80080ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080cc:	1ad3      	subs	r3, r2, r3
 80080ce:	2b02      	cmp	r3, #2
 80080d0:	d901      	bls.n	80080d6 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80080d2:	2303      	movs	r3, #3
 80080d4:	e10e      	b.n	80082f4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80080d6:	4b39      	ldr	r3, [pc, #228]	@ (80081bc <HAL_RCC_OscConfig+0x76c>)
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d1f0      	bne.n	80080c4 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80080e2:	4b36      	ldr	r3, [pc, #216]	@ (80081bc <HAL_RCC_OscConfig+0x76c>)
 80080e4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80080e6:	4b37      	ldr	r3, [pc, #220]	@ (80081c4 <HAL_RCC_OscConfig+0x774>)
 80080e8:	4013      	ands	r3, r2
 80080ea:	687a      	ldr	r2, [r7, #4]
 80080ec:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80080ee:	687a      	ldr	r2, [r7, #4]
 80080f0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80080f2:	0112      	lsls	r2, r2, #4
 80080f4:	430a      	orrs	r2, r1
 80080f6:	4931      	ldr	r1, [pc, #196]	@ (80081bc <HAL_RCC_OscConfig+0x76c>)
 80080f8:	4313      	orrs	r3, r2
 80080fa:	628b      	str	r3, [r1, #40]	@ 0x28
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008100:	3b01      	subs	r3, #1
 8008102:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800810a:	3b01      	subs	r3, #1
 800810c:	025b      	lsls	r3, r3, #9
 800810e:	b29b      	uxth	r3, r3
 8008110:	431a      	orrs	r2, r3
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008116:	3b01      	subs	r3, #1
 8008118:	041b      	lsls	r3, r3, #16
 800811a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800811e:	431a      	orrs	r2, r3
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008124:	3b01      	subs	r3, #1
 8008126:	061b      	lsls	r3, r3, #24
 8008128:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800812c:	4923      	ldr	r1, [pc, #140]	@ (80081bc <HAL_RCC_OscConfig+0x76c>)
 800812e:	4313      	orrs	r3, r2
 8008130:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8008132:	4b22      	ldr	r3, [pc, #136]	@ (80081bc <HAL_RCC_OscConfig+0x76c>)
 8008134:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008136:	4a21      	ldr	r2, [pc, #132]	@ (80081bc <HAL_RCC_OscConfig+0x76c>)
 8008138:	f023 0301 	bic.w	r3, r3, #1
 800813c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800813e:	4b1f      	ldr	r3, [pc, #124]	@ (80081bc <HAL_RCC_OscConfig+0x76c>)
 8008140:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008142:	4b21      	ldr	r3, [pc, #132]	@ (80081c8 <HAL_RCC_OscConfig+0x778>)
 8008144:	4013      	ands	r3, r2
 8008146:	687a      	ldr	r2, [r7, #4]
 8008148:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800814a:	00d2      	lsls	r2, r2, #3
 800814c:	491b      	ldr	r1, [pc, #108]	@ (80081bc <HAL_RCC_OscConfig+0x76c>)
 800814e:	4313      	orrs	r3, r2
 8008150:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8008152:	4b1a      	ldr	r3, [pc, #104]	@ (80081bc <HAL_RCC_OscConfig+0x76c>)
 8008154:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008156:	f023 020c 	bic.w	r2, r3, #12
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800815e:	4917      	ldr	r1, [pc, #92]	@ (80081bc <HAL_RCC_OscConfig+0x76c>)
 8008160:	4313      	orrs	r3, r2
 8008162:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8008164:	4b15      	ldr	r3, [pc, #84]	@ (80081bc <HAL_RCC_OscConfig+0x76c>)
 8008166:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008168:	f023 0202 	bic.w	r2, r3, #2
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008170:	4912      	ldr	r1, [pc, #72]	@ (80081bc <HAL_RCC_OscConfig+0x76c>)
 8008172:	4313      	orrs	r3, r2
 8008174:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008176:	4b11      	ldr	r3, [pc, #68]	@ (80081bc <HAL_RCC_OscConfig+0x76c>)
 8008178:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800817a:	4a10      	ldr	r2, [pc, #64]	@ (80081bc <HAL_RCC_OscConfig+0x76c>)
 800817c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008180:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008182:	4b0e      	ldr	r3, [pc, #56]	@ (80081bc <HAL_RCC_OscConfig+0x76c>)
 8008184:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008186:	4a0d      	ldr	r2, [pc, #52]	@ (80081bc <HAL_RCC_OscConfig+0x76c>)
 8008188:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800818c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800818e:	4b0b      	ldr	r3, [pc, #44]	@ (80081bc <HAL_RCC_OscConfig+0x76c>)
 8008190:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008192:	4a0a      	ldr	r2, [pc, #40]	@ (80081bc <HAL_RCC_OscConfig+0x76c>)
 8008194:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008198:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800819a:	4b08      	ldr	r3, [pc, #32]	@ (80081bc <HAL_RCC_OscConfig+0x76c>)
 800819c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800819e:	4a07      	ldr	r2, [pc, #28]	@ (80081bc <HAL_RCC_OscConfig+0x76c>)
 80081a0:	f043 0301 	orr.w	r3, r3, #1
 80081a4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80081a6:	4b05      	ldr	r3, [pc, #20]	@ (80081bc <HAL_RCC_OscConfig+0x76c>)
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	4a04      	ldr	r2, [pc, #16]	@ (80081bc <HAL_RCC_OscConfig+0x76c>)
 80081ac:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80081b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80081b2:	f7fa fbf1 	bl	8002998 <HAL_GetTick>
 80081b6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80081b8:	e011      	b.n	80081de <HAL_RCC_OscConfig+0x78e>
 80081ba:	bf00      	nop
 80081bc:	58024400 	.word	0x58024400
 80081c0:	58024800 	.word	0x58024800
 80081c4:	fffffc0c 	.word	0xfffffc0c
 80081c8:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80081cc:	f7fa fbe4 	bl	8002998 <HAL_GetTick>
 80081d0:	4602      	mov	r2, r0
 80081d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081d4:	1ad3      	subs	r3, r2, r3
 80081d6:	2b02      	cmp	r3, #2
 80081d8:	d901      	bls.n	80081de <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80081da:	2303      	movs	r3, #3
 80081dc:	e08a      	b.n	80082f4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80081de:	4b47      	ldr	r3, [pc, #284]	@ (80082fc <HAL_RCC_OscConfig+0x8ac>)
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d0f0      	beq.n	80081cc <HAL_RCC_OscConfig+0x77c>
 80081ea:	e082      	b.n	80082f2 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80081ec:	4b43      	ldr	r3, [pc, #268]	@ (80082fc <HAL_RCC_OscConfig+0x8ac>)
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	4a42      	ldr	r2, [pc, #264]	@ (80082fc <HAL_RCC_OscConfig+0x8ac>)
 80081f2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80081f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80081f8:	f7fa fbce 	bl	8002998 <HAL_GetTick>
 80081fc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80081fe:	e008      	b.n	8008212 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008200:	f7fa fbca 	bl	8002998 <HAL_GetTick>
 8008204:	4602      	mov	r2, r0
 8008206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008208:	1ad3      	subs	r3, r2, r3
 800820a:	2b02      	cmp	r3, #2
 800820c:	d901      	bls.n	8008212 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800820e:	2303      	movs	r3, #3
 8008210:	e070      	b.n	80082f4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008212:	4b3a      	ldr	r3, [pc, #232]	@ (80082fc <HAL_RCC_OscConfig+0x8ac>)
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800821a:	2b00      	cmp	r3, #0
 800821c:	d1f0      	bne.n	8008200 <HAL_RCC_OscConfig+0x7b0>
 800821e:	e068      	b.n	80082f2 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8008220:	4b36      	ldr	r3, [pc, #216]	@ (80082fc <HAL_RCC_OscConfig+0x8ac>)
 8008222:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008224:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8008226:	4b35      	ldr	r3, [pc, #212]	@ (80082fc <HAL_RCC_OscConfig+0x8ac>)
 8008228:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800822a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008230:	2b01      	cmp	r3, #1
 8008232:	d031      	beq.n	8008298 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008234:	693b      	ldr	r3, [r7, #16]
 8008236:	f003 0203 	and.w	r2, r3, #3
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800823e:	429a      	cmp	r2, r3
 8008240:	d12a      	bne.n	8008298 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008242:	693b      	ldr	r3, [r7, #16]
 8008244:	091b      	lsrs	r3, r3, #4
 8008246:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800824e:	429a      	cmp	r2, r3
 8008250:	d122      	bne.n	8008298 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800825c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800825e:	429a      	cmp	r2, r3
 8008260:	d11a      	bne.n	8008298 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	0a5b      	lsrs	r3, r3, #9
 8008266:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800826e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008270:	429a      	cmp	r2, r3
 8008272:	d111      	bne.n	8008298 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	0c1b      	lsrs	r3, r3, #16
 8008278:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008280:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008282:	429a      	cmp	r2, r3
 8008284:	d108      	bne.n	8008298 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	0e1b      	lsrs	r3, r3, #24
 800828a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008292:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008294:	429a      	cmp	r2, r3
 8008296:	d001      	beq.n	800829c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8008298:	2301      	movs	r3, #1
 800829a:	e02b      	b.n	80082f4 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800829c:	4b17      	ldr	r3, [pc, #92]	@ (80082fc <HAL_RCC_OscConfig+0x8ac>)
 800829e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80082a0:	08db      	lsrs	r3, r3, #3
 80082a2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80082a6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80082ac:	693a      	ldr	r2, [r7, #16]
 80082ae:	429a      	cmp	r2, r3
 80082b0:	d01f      	beq.n	80082f2 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80082b2:	4b12      	ldr	r3, [pc, #72]	@ (80082fc <HAL_RCC_OscConfig+0x8ac>)
 80082b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082b6:	4a11      	ldr	r2, [pc, #68]	@ (80082fc <HAL_RCC_OscConfig+0x8ac>)
 80082b8:	f023 0301 	bic.w	r3, r3, #1
 80082bc:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80082be:	f7fa fb6b 	bl	8002998 <HAL_GetTick>
 80082c2:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80082c4:	bf00      	nop
 80082c6:	f7fa fb67 	bl	8002998 <HAL_GetTick>
 80082ca:	4602      	mov	r2, r0
 80082cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082ce:	4293      	cmp	r3, r2
 80082d0:	d0f9      	beq.n	80082c6 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80082d2:	4b0a      	ldr	r3, [pc, #40]	@ (80082fc <HAL_RCC_OscConfig+0x8ac>)
 80082d4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80082d6:	4b0a      	ldr	r3, [pc, #40]	@ (8008300 <HAL_RCC_OscConfig+0x8b0>)
 80082d8:	4013      	ands	r3, r2
 80082da:	687a      	ldr	r2, [r7, #4]
 80082dc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80082de:	00d2      	lsls	r2, r2, #3
 80082e0:	4906      	ldr	r1, [pc, #24]	@ (80082fc <HAL_RCC_OscConfig+0x8ac>)
 80082e2:	4313      	orrs	r3, r2
 80082e4:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80082e6:	4b05      	ldr	r3, [pc, #20]	@ (80082fc <HAL_RCC_OscConfig+0x8ac>)
 80082e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082ea:	4a04      	ldr	r2, [pc, #16]	@ (80082fc <HAL_RCC_OscConfig+0x8ac>)
 80082ec:	f043 0301 	orr.w	r3, r3, #1
 80082f0:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80082f2:	2300      	movs	r3, #0
}
 80082f4:	4618      	mov	r0, r3
 80082f6:	3730      	adds	r7, #48	@ 0x30
 80082f8:	46bd      	mov	sp, r7
 80082fa:	bd80      	pop	{r7, pc}
 80082fc:	58024400 	.word	0x58024400
 8008300:	ffff0007 	.word	0xffff0007

08008304 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008304:	b580      	push	{r7, lr}
 8008306:	b086      	sub	sp, #24
 8008308:	af00      	add	r7, sp, #0
 800830a:	6078      	str	r0, [r7, #4]
 800830c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	2b00      	cmp	r3, #0
 8008312:	d101      	bne.n	8008318 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008314:	2301      	movs	r3, #1
 8008316:	e19c      	b.n	8008652 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008318:	4b8a      	ldr	r3, [pc, #552]	@ (8008544 <HAL_RCC_ClockConfig+0x240>)
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	f003 030f 	and.w	r3, r3, #15
 8008320:	683a      	ldr	r2, [r7, #0]
 8008322:	429a      	cmp	r2, r3
 8008324:	d910      	bls.n	8008348 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008326:	4b87      	ldr	r3, [pc, #540]	@ (8008544 <HAL_RCC_ClockConfig+0x240>)
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	f023 020f 	bic.w	r2, r3, #15
 800832e:	4985      	ldr	r1, [pc, #532]	@ (8008544 <HAL_RCC_ClockConfig+0x240>)
 8008330:	683b      	ldr	r3, [r7, #0]
 8008332:	4313      	orrs	r3, r2
 8008334:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008336:	4b83      	ldr	r3, [pc, #524]	@ (8008544 <HAL_RCC_ClockConfig+0x240>)
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	f003 030f 	and.w	r3, r3, #15
 800833e:	683a      	ldr	r2, [r7, #0]
 8008340:	429a      	cmp	r2, r3
 8008342:	d001      	beq.n	8008348 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008344:	2301      	movs	r3, #1
 8008346:	e184      	b.n	8008652 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	f003 0304 	and.w	r3, r3, #4
 8008350:	2b00      	cmp	r3, #0
 8008352:	d010      	beq.n	8008376 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	691a      	ldr	r2, [r3, #16]
 8008358:	4b7b      	ldr	r3, [pc, #492]	@ (8008548 <HAL_RCC_ClockConfig+0x244>)
 800835a:	699b      	ldr	r3, [r3, #24]
 800835c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008360:	429a      	cmp	r2, r3
 8008362:	d908      	bls.n	8008376 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008364:	4b78      	ldr	r3, [pc, #480]	@ (8008548 <HAL_RCC_ClockConfig+0x244>)
 8008366:	699b      	ldr	r3, [r3, #24]
 8008368:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	691b      	ldr	r3, [r3, #16]
 8008370:	4975      	ldr	r1, [pc, #468]	@ (8008548 <HAL_RCC_ClockConfig+0x244>)
 8008372:	4313      	orrs	r3, r2
 8008374:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	f003 0308 	and.w	r3, r3, #8
 800837e:	2b00      	cmp	r3, #0
 8008380:	d010      	beq.n	80083a4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	695a      	ldr	r2, [r3, #20]
 8008386:	4b70      	ldr	r3, [pc, #448]	@ (8008548 <HAL_RCC_ClockConfig+0x244>)
 8008388:	69db      	ldr	r3, [r3, #28]
 800838a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800838e:	429a      	cmp	r2, r3
 8008390:	d908      	bls.n	80083a4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008392:	4b6d      	ldr	r3, [pc, #436]	@ (8008548 <HAL_RCC_ClockConfig+0x244>)
 8008394:	69db      	ldr	r3, [r3, #28]
 8008396:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	695b      	ldr	r3, [r3, #20]
 800839e:	496a      	ldr	r1, [pc, #424]	@ (8008548 <HAL_RCC_ClockConfig+0x244>)
 80083a0:	4313      	orrs	r3, r2
 80083a2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	f003 0310 	and.w	r3, r3, #16
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d010      	beq.n	80083d2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	699a      	ldr	r2, [r3, #24]
 80083b4:	4b64      	ldr	r3, [pc, #400]	@ (8008548 <HAL_RCC_ClockConfig+0x244>)
 80083b6:	69db      	ldr	r3, [r3, #28]
 80083b8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80083bc:	429a      	cmp	r2, r3
 80083be:	d908      	bls.n	80083d2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80083c0:	4b61      	ldr	r3, [pc, #388]	@ (8008548 <HAL_RCC_ClockConfig+0x244>)
 80083c2:	69db      	ldr	r3, [r3, #28]
 80083c4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	699b      	ldr	r3, [r3, #24]
 80083cc:	495e      	ldr	r1, [pc, #376]	@ (8008548 <HAL_RCC_ClockConfig+0x244>)
 80083ce:	4313      	orrs	r3, r2
 80083d0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	f003 0320 	and.w	r3, r3, #32
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d010      	beq.n	8008400 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	69da      	ldr	r2, [r3, #28]
 80083e2:	4b59      	ldr	r3, [pc, #356]	@ (8008548 <HAL_RCC_ClockConfig+0x244>)
 80083e4:	6a1b      	ldr	r3, [r3, #32]
 80083e6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80083ea:	429a      	cmp	r2, r3
 80083ec:	d908      	bls.n	8008400 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80083ee:	4b56      	ldr	r3, [pc, #344]	@ (8008548 <HAL_RCC_ClockConfig+0x244>)
 80083f0:	6a1b      	ldr	r3, [r3, #32]
 80083f2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	69db      	ldr	r3, [r3, #28]
 80083fa:	4953      	ldr	r1, [pc, #332]	@ (8008548 <HAL_RCC_ClockConfig+0x244>)
 80083fc:	4313      	orrs	r3, r2
 80083fe:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	f003 0302 	and.w	r3, r3, #2
 8008408:	2b00      	cmp	r3, #0
 800840a:	d010      	beq.n	800842e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	68da      	ldr	r2, [r3, #12]
 8008410:	4b4d      	ldr	r3, [pc, #308]	@ (8008548 <HAL_RCC_ClockConfig+0x244>)
 8008412:	699b      	ldr	r3, [r3, #24]
 8008414:	f003 030f 	and.w	r3, r3, #15
 8008418:	429a      	cmp	r2, r3
 800841a:	d908      	bls.n	800842e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800841c:	4b4a      	ldr	r3, [pc, #296]	@ (8008548 <HAL_RCC_ClockConfig+0x244>)
 800841e:	699b      	ldr	r3, [r3, #24]
 8008420:	f023 020f 	bic.w	r2, r3, #15
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	68db      	ldr	r3, [r3, #12]
 8008428:	4947      	ldr	r1, [pc, #284]	@ (8008548 <HAL_RCC_ClockConfig+0x244>)
 800842a:	4313      	orrs	r3, r2
 800842c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	f003 0301 	and.w	r3, r3, #1
 8008436:	2b00      	cmp	r3, #0
 8008438:	d055      	beq.n	80084e6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800843a:	4b43      	ldr	r3, [pc, #268]	@ (8008548 <HAL_RCC_ClockConfig+0x244>)
 800843c:	699b      	ldr	r3, [r3, #24]
 800843e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	689b      	ldr	r3, [r3, #8]
 8008446:	4940      	ldr	r1, [pc, #256]	@ (8008548 <HAL_RCC_ClockConfig+0x244>)
 8008448:	4313      	orrs	r3, r2
 800844a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	685b      	ldr	r3, [r3, #4]
 8008450:	2b02      	cmp	r3, #2
 8008452:	d107      	bne.n	8008464 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008454:	4b3c      	ldr	r3, [pc, #240]	@ (8008548 <HAL_RCC_ClockConfig+0x244>)
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800845c:	2b00      	cmp	r3, #0
 800845e:	d121      	bne.n	80084a4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008460:	2301      	movs	r3, #1
 8008462:	e0f6      	b.n	8008652 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	685b      	ldr	r3, [r3, #4]
 8008468:	2b03      	cmp	r3, #3
 800846a:	d107      	bne.n	800847c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800846c:	4b36      	ldr	r3, [pc, #216]	@ (8008548 <HAL_RCC_ClockConfig+0x244>)
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008474:	2b00      	cmp	r3, #0
 8008476:	d115      	bne.n	80084a4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008478:	2301      	movs	r3, #1
 800847a:	e0ea      	b.n	8008652 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	685b      	ldr	r3, [r3, #4]
 8008480:	2b01      	cmp	r3, #1
 8008482:	d107      	bne.n	8008494 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008484:	4b30      	ldr	r3, [pc, #192]	@ (8008548 <HAL_RCC_ClockConfig+0x244>)
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800848c:	2b00      	cmp	r3, #0
 800848e:	d109      	bne.n	80084a4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008490:	2301      	movs	r3, #1
 8008492:	e0de      	b.n	8008652 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008494:	4b2c      	ldr	r3, [pc, #176]	@ (8008548 <HAL_RCC_ClockConfig+0x244>)
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	f003 0304 	and.w	r3, r3, #4
 800849c:	2b00      	cmp	r3, #0
 800849e:	d101      	bne.n	80084a4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80084a0:	2301      	movs	r3, #1
 80084a2:	e0d6      	b.n	8008652 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80084a4:	4b28      	ldr	r3, [pc, #160]	@ (8008548 <HAL_RCC_ClockConfig+0x244>)
 80084a6:	691b      	ldr	r3, [r3, #16]
 80084a8:	f023 0207 	bic.w	r2, r3, #7
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	685b      	ldr	r3, [r3, #4]
 80084b0:	4925      	ldr	r1, [pc, #148]	@ (8008548 <HAL_RCC_ClockConfig+0x244>)
 80084b2:	4313      	orrs	r3, r2
 80084b4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80084b6:	f7fa fa6f 	bl	8002998 <HAL_GetTick>
 80084ba:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80084bc:	e00a      	b.n	80084d4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80084be:	f7fa fa6b 	bl	8002998 <HAL_GetTick>
 80084c2:	4602      	mov	r2, r0
 80084c4:	697b      	ldr	r3, [r7, #20]
 80084c6:	1ad3      	subs	r3, r2, r3
 80084c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80084cc:	4293      	cmp	r3, r2
 80084ce:	d901      	bls.n	80084d4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80084d0:	2303      	movs	r3, #3
 80084d2:	e0be      	b.n	8008652 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80084d4:	4b1c      	ldr	r3, [pc, #112]	@ (8008548 <HAL_RCC_ClockConfig+0x244>)
 80084d6:	691b      	ldr	r3, [r3, #16]
 80084d8:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	685b      	ldr	r3, [r3, #4]
 80084e0:	00db      	lsls	r3, r3, #3
 80084e2:	429a      	cmp	r2, r3
 80084e4:	d1eb      	bne.n	80084be <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	f003 0302 	and.w	r3, r3, #2
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d010      	beq.n	8008514 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	68da      	ldr	r2, [r3, #12]
 80084f6:	4b14      	ldr	r3, [pc, #80]	@ (8008548 <HAL_RCC_ClockConfig+0x244>)
 80084f8:	699b      	ldr	r3, [r3, #24]
 80084fa:	f003 030f 	and.w	r3, r3, #15
 80084fe:	429a      	cmp	r2, r3
 8008500:	d208      	bcs.n	8008514 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008502:	4b11      	ldr	r3, [pc, #68]	@ (8008548 <HAL_RCC_ClockConfig+0x244>)
 8008504:	699b      	ldr	r3, [r3, #24]
 8008506:	f023 020f 	bic.w	r2, r3, #15
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	68db      	ldr	r3, [r3, #12]
 800850e:	490e      	ldr	r1, [pc, #56]	@ (8008548 <HAL_RCC_ClockConfig+0x244>)
 8008510:	4313      	orrs	r3, r2
 8008512:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008514:	4b0b      	ldr	r3, [pc, #44]	@ (8008544 <HAL_RCC_ClockConfig+0x240>)
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	f003 030f 	and.w	r3, r3, #15
 800851c:	683a      	ldr	r2, [r7, #0]
 800851e:	429a      	cmp	r2, r3
 8008520:	d214      	bcs.n	800854c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008522:	4b08      	ldr	r3, [pc, #32]	@ (8008544 <HAL_RCC_ClockConfig+0x240>)
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	f023 020f 	bic.w	r2, r3, #15
 800852a:	4906      	ldr	r1, [pc, #24]	@ (8008544 <HAL_RCC_ClockConfig+0x240>)
 800852c:	683b      	ldr	r3, [r7, #0]
 800852e:	4313      	orrs	r3, r2
 8008530:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008532:	4b04      	ldr	r3, [pc, #16]	@ (8008544 <HAL_RCC_ClockConfig+0x240>)
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	f003 030f 	and.w	r3, r3, #15
 800853a:	683a      	ldr	r2, [r7, #0]
 800853c:	429a      	cmp	r2, r3
 800853e:	d005      	beq.n	800854c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8008540:	2301      	movs	r3, #1
 8008542:	e086      	b.n	8008652 <HAL_RCC_ClockConfig+0x34e>
 8008544:	52002000 	.word	0x52002000
 8008548:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	f003 0304 	and.w	r3, r3, #4
 8008554:	2b00      	cmp	r3, #0
 8008556:	d010      	beq.n	800857a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	691a      	ldr	r2, [r3, #16]
 800855c:	4b3f      	ldr	r3, [pc, #252]	@ (800865c <HAL_RCC_ClockConfig+0x358>)
 800855e:	699b      	ldr	r3, [r3, #24]
 8008560:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008564:	429a      	cmp	r2, r3
 8008566:	d208      	bcs.n	800857a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008568:	4b3c      	ldr	r3, [pc, #240]	@ (800865c <HAL_RCC_ClockConfig+0x358>)
 800856a:	699b      	ldr	r3, [r3, #24]
 800856c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	691b      	ldr	r3, [r3, #16]
 8008574:	4939      	ldr	r1, [pc, #228]	@ (800865c <HAL_RCC_ClockConfig+0x358>)
 8008576:	4313      	orrs	r3, r2
 8008578:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	f003 0308 	and.w	r3, r3, #8
 8008582:	2b00      	cmp	r3, #0
 8008584:	d010      	beq.n	80085a8 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	695a      	ldr	r2, [r3, #20]
 800858a:	4b34      	ldr	r3, [pc, #208]	@ (800865c <HAL_RCC_ClockConfig+0x358>)
 800858c:	69db      	ldr	r3, [r3, #28]
 800858e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008592:	429a      	cmp	r2, r3
 8008594:	d208      	bcs.n	80085a8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008596:	4b31      	ldr	r3, [pc, #196]	@ (800865c <HAL_RCC_ClockConfig+0x358>)
 8008598:	69db      	ldr	r3, [r3, #28]
 800859a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	695b      	ldr	r3, [r3, #20]
 80085a2:	492e      	ldr	r1, [pc, #184]	@ (800865c <HAL_RCC_ClockConfig+0x358>)
 80085a4:	4313      	orrs	r3, r2
 80085a6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	f003 0310 	and.w	r3, r3, #16
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d010      	beq.n	80085d6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	699a      	ldr	r2, [r3, #24]
 80085b8:	4b28      	ldr	r3, [pc, #160]	@ (800865c <HAL_RCC_ClockConfig+0x358>)
 80085ba:	69db      	ldr	r3, [r3, #28]
 80085bc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80085c0:	429a      	cmp	r2, r3
 80085c2:	d208      	bcs.n	80085d6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80085c4:	4b25      	ldr	r3, [pc, #148]	@ (800865c <HAL_RCC_ClockConfig+0x358>)
 80085c6:	69db      	ldr	r3, [r3, #28]
 80085c8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	699b      	ldr	r3, [r3, #24]
 80085d0:	4922      	ldr	r1, [pc, #136]	@ (800865c <HAL_RCC_ClockConfig+0x358>)
 80085d2:	4313      	orrs	r3, r2
 80085d4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	f003 0320 	and.w	r3, r3, #32
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d010      	beq.n	8008604 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	69da      	ldr	r2, [r3, #28]
 80085e6:	4b1d      	ldr	r3, [pc, #116]	@ (800865c <HAL_RCC_ClockConfig+0x358>)
 80085e8:	6a1b      	ldr	r3, [r3, #32]
 80085ea:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80085ee:	429a      	cmp	r2, r3
 80085f0:	d208      	bcs.n	8008604 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80085f2:	4b1a      	ldr	r3, [pc, #104]	@ (800865c <HAL_RCC_ClockConfig+0x358>)
 80085f4:	6a1b      	ldr	r3, [r3, #32]
 80085f6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	69db      	ldr	r3, [r3, #28]
 80085fe:	4917      	ldr	r1, [pc, #92]	@ (800865c <HAL_RCC_ClockConfig+0x358>)
 8008600:	4313      	orrs	r3, r2
 8008602:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008604:	f000 f834 	bl	8008670 <HAL_RCC_GetSysClockFreq>
 8008608:	4602      	mov	r2, r0
 800860a:	4b14      	ldr	r3, [pc, #80]	@ (800865c <HAL_RCC_ClockConfig+0x358>)
 800860c:	699b      	ldr	r3, [r3, #24]
 800860e:	0a1b      	lsrs	r3, r3, #8
 8008610:	f003 030f 	and.w	r3, r3, #15
 8008614:	4912      	ldr	r1, [pc, #72]	@ (8008660 <HAL_RCC_ClockConfig+0x35c>)
 8008616:	5ccb      	ldrb	r3, [r1, r3]
 8008618:	f003 031f 	and.w	r3, r3, #31
 800861c:	fa22 f303 	lsr.w	r3, r2, r3
 8008620:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008622:	4b0e      	ldr	r3, [pc, #56]	@ (800865c <HAL_RCC_ClockConfig+0x358>)
 8008624:	699b      	ldr	r3, [r3, #24]
 8008626:	f003 030f 	and.w	r3, r3, #15
 800862a:	4a0d      	ldr	r2, [pc, #52]	@ (8008660 <HAL_RCC_ClockConfig+0x35c>)
 800862c:	5cd3      	ldrb	r3, [r2, r3]
 800862e:	f003 031f 	and.w	r3, r3, #31
 8008632:	693a      	ldr	r2, [r7, #16]
 8008634:	fa22 f303 	lsr.w	r3, r2, r3
 8008638:	4a0a      	ldr	r2, [pc, #40]	@ (8008664 <HAL_RCC_ClockConfig+0x360>)
 800863a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800863c:	4a0a      	ldr	r2, [pc, #40]	@ (8008668 <HAL_RCC_ClockConfig+0x364>)
 800863e:	693b      	ldr	r3, [r7, #16]
 8008640:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8008642:	4b0a      	ldr	r3, [pc, #40]	@ (800866c <HAL_RCC_ClockConfig+0x368>)
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	4618      	mov	r0, r3
 8008648:	f7fa f95c 	bl	8002904 <HAL_InitTick>
 800864c:	4603      	mov	r3, r0
 800864e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8008650:	7bfb      	ldrb	r3, [r7, #15]
}
 8008652:	4618      	mov	r0, r3
 8008654:	3718      	adds	r7, #24
 8008656:	46bd      	mov	sp, r7
 8008658:	bd80      	pop	{r7, pc}
 800865a:	bf00      	nop
 800865c:	58024400 	.word	0x58024400
 8008660:	080149f8 	.word	0x080149f8
 8008664:	24000004 	.word	0x24000004
 8008668:	24000000 	.word	0x24000000
 800866c:	24000030 	.word	0x24000030

08008670 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008670:	b480      	push	{r7}
 8008672:	b089      	sub	sp, #36	@ 0x24
 8008674:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008676:	4bb3      	ldr	r3, [pc, #716]	@ (8008944 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008678:	691b      	ldr	r3, [r3, #16]
 800867a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800867e:	2b18      	cmp	r3, #24
 8008680:	f200 8155 	bhi.w	800892e <HAL_RCC_GetSysClockFreq+0x2be>
 8008684:	a201      	add	r2, pc, #4	@ (adr r2, 800868c <HAL_RCC_GetSysClockFreq+0x1c>)
 8008686:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800868a:	bf00      	nop
 800868c:	080086f1 	.word	0x080086f1
 8008690:	0800892f 	.word	0x0800892f
 8008694:	0800892f 	.word	0x0800892f
 8008698:	0800892f 	.word	0x0800892f
 800869c:	0800892f 	.word	0x0800892f
 80086a0:	0800892f 	.word	0x0800892f
 80086a4:	0800892f 	.word	0x0800892f
 80086a8:	0800892f 	.word	0x0800892f
 80086ac:	08008717 	.word	0x08008717
 80086b0:	0800892f 	.word	0x0800892f
 80086b4:	0800892f 	.word	0x0800892f
 80086b8:	0800892f 	.word	0x0800892f
 80086bc:	0800892f 	.word	0x0800892f
 80086c0:	0800892f 	.word	0x0800892f
 80086c4:	0800892f 	.word	0x0800892f
 80086c8:	0800892f 	.word	0x0800892f
 80086cc:	0800871d 	.word	0x0800871d
 80086d0:	0800892f 	.word	0x0800892f
 80086d4:	0800892f 	.word	0x0800892f
 80086d8:	0800892f 	.word	0x0800892f
 80086dc:	0800892f 	.word	0x0800892f
 80086e0:	0800892f 	.word	0x0800892f
 80086e4:	0800892f 	.word	0x0800892f
 80086e8:	0800892f 	.word	0x0800892f
 80086ec:	08008723 	.word	0x08008723
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80086f0:	4b94      	ldr	r3, [pc, #592]	@ (8008944 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	f003 0320 	and.w	r3, r3, #32
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d009      	beq.n	8008710 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80086fc:	4b91      	ldr	r3, [pc, #580]	@ (8008944 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	08db      	lsrs	r3, r3, #3
 8008702:	f003 0303 	and.w	r3, r3, #3
 8008706:	4a90      	ldr	r2, [pc, #576]	@ (8008948 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008708:	fa22 f303 	lsr.w	r3, r2, r3
 800870c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800870e:	e111      	b.n	8008934 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008710:	4b8d      	ldr	r3, [pc, #564]	@ (8008948 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008712:	61bb      	str	r3, [r7, #24]
      break;
 8008714:	e10e      	b.n	8008934 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8008716:	4b8d      	ldr	r3, [pc, #564]	@ (800894c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008718:	61bb      	str	r3, [r7, #24]
      break;
 800871a:	e10b      	b.n	8008934 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800871c:	4b8c      	ldr	r3, [pc, #560]	@ (8008950 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800871e:	61bb      	str	r3, [r7, #24]
      break;
 8008720:	e108      	b.n	8008934 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008722:	4b88      	ldr	r3, [pc, #544]	@ (8008944 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008724:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008726:	f003 0303 	and.w	r3, r3, #3
 800872a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800872c:	4b85      	ldr	r3, [pc, #532]	@ (8008944 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800872e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008730:	091b      	lsrs	r3, r3, #4
 8008732:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008736:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008738:	4b82      	ldr	r3, [pc, #520]	@ (8008944 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800873a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800873c:	f003 0301 	and.w	r3, r3, #1
 8008740:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8008742:	4b80      	ldr	r3, [pc, #512]	@ (8008944 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008744:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008746:	08db      	lsrs	r3, r3, #3
 8008748:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800874c:	68fa      	ldr	r2, [r7, #12]
 800874e:	fb02 f303 	mul.w	r3, r2, r3
 8008752:	ee07 3a90 	vmov	s15, r3
 8008756:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800875a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800875e:	693b      	ldr	r3, [r7, #16]
 8008760:	2b00      	cmp	r3, #0
 8008762:	f000 80e1 	beq.w	8008928 <HAL_RCC_GetSysClockFreq+0x2b8>
 8008766:	697b      	ldr	r3, [r7, #20]
 8008768:	2b02      	cmp	r3, #2
 800876a:	f000 8083 	beq.w	8008874 <HAL_RCC_GetSysClockFreq+0x204>
 800876e:	697b      	ldr	r3, [r7, #20]
 8008770:	2b02      	cmp	r3, #2
 8008772:	f200 80a1 	bhi.w	80088b8 <HAL_RCC_GetSysClockFreq+0x248>
 8008776:	697b      	ldr	r3, [r7, #20]
 8008778:	2b00      	cmp	r3, #0
 800877a:	d003      	beq.n	8008784 <HAL_RCC_GetSysClockFreq+0x114>
 800877c:	697b      	ldr	r3, [r7, #20]
 800877e:	2b01      	cmp	r3, #1
 8008780:	d056      	beq.n	8008830 <HAL_RCC_GetSysClockFreq+0x1c0>
 8008782:	e099      	b.n	80088b8 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008784:	4b6f      	ldr	r3, [pc, #444]	@ (8008944 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	f003 0320 	and.w	r3, r3, #32
 800878c:	2b00      	cmp	r3, #0
 800878e:	d02d      	beq.n	80087ec <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008790:	4b6c      	ldr	r3, [pc, #432]	@ (8008944 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	08db      	lsrs	r3, r3, #3
 8008796:	f003 0303 	and.w	r3, r3, #3
 800879a:	4a6b      	ldr	r2, [pc, #428]	@ (8008948 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800879c:	fa22 f303 	lsr.w	r3, r2, r3
 80087a0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	ee07 3a90 	vmov	s15, r3
 80087a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80087ac:	693b      	ldr	r3, [r7, #16]
 80087ae:	ee07 3a90 	vmov	s15, r3
 80087b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80087ba:	4b62      	ldr	r3, [pc, #392]	@ (8008944 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80087bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80087be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087c2:	ee07 3a90 	vmov	s15, r3
 80087c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80087ca:	ed97 6a02 	vldr	s12, [r7, #8]
 80087ce:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8008954 <HAL_RCC_GetSysClockFreq+0x2e4>
 80087d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80087d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80087da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80087de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80087e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80087e6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80087ea:	e087      	b.n	80088fc <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80087ec:	693b      	ldr	r3, [r7, #16]
 80087ee:	ee07 3a90 	vmov	s15, r3
 80087f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087f6:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8008958 <HAL_RCC_GetSysClockFreq+0x2e8>
 80087fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80087fe:	4b51      	ldr	r3, [pc, #324]	@ (8008944 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008802:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008806:	ee07 3a90 	vmov	s15, r3
 800880a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800880e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008812:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8008954 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008816:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800881a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800881e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008822:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008826:	ee67 7a27 	vmul.f32	s15, s14, s15
 800882a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800882e:	e065      	b.n	80088fc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008830:	693b      	ldr	r3, [r7, #16]
 8008832:	ee07 3a90 	vmov	s15, r3
 8008836:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800883a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800895c <HAL_RCC_GetSysClockFreq+0x2ec>
 800883e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008842:	4b40      	ldr	r3, [pc, #256]	@ (8008944 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008846:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800884a:	ee07 3a90 	vmov	s15, r3
 800884e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008852:	ed97 6a02 	vldr	s12, [r7, #8]
 8008856:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8008954 <HAL_RCC_GetSysClockFreq+0x2e4>
 800885a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800885e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008862:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008866:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800886a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800886e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008872:	e043      	b.n	80088fc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008874:	693b      	ldr	r3, [r7, #16]
 8008876:	ee07 3a90 	vmov	s15, r3
 800887a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800887e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8008960 <HAL_RCC_GetSysClockFreq+0x2f0>
 8008882:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008886:	4b2f      	ldr	r3, [pc, #188]	@ (8008944 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800888a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800888e:	ee07 3a90 	vmov	s15, r3
 8008892:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008896:	ed97 6a02 	vldr	s12, [r7, #8]
 800889a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8008954 <HAL_RCC_GetSysClockFreq+0x2e4>
 800889e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80088a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80088a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80088aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80088ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80088b2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80088b6:	e021      	b.n	80088fc <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80088b8:	693b      	ldr	r3, [r7, #16]
 80088ba:	ee07 3a90 	vmov	s15, r3
 80088be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088c2:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800895c <HAL_RCC_GetSysClockFreq+0x2ec>
 80088c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80088ca:	4b1e      	ldr	r3, [pc, #120]	@ (8008944 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80088cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80088ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088d2:	ee07 3a90 	vmov	s15, r3
 80088d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80088da:	ed97 6a02 	vldr	s12, [r7, #8]
 80088de:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8008954 <HAL_RCC_GetSysClockFreq+0x2e4>
 80088e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80088e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80088ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80088ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80088f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80088f6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80088fa:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80088fc:	4b11      	ldr	r3, [pc, #68]	@ (8008944 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80088fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008900:	0a5b      	lsrs	r3, r3, #9
 8008902:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008906:	3301      	adds	r3, #1
 8008908:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800890a:	683b      	ldr	r3, [r7, #0]
 800890c:	ee07 3a90 	vmov	s15, r3
 8008910:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008914:	edd7 6a07 	vldr	s13, [r7, #28]
 8008918:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800891c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008920:	ee17 3a90 	vmov	r3, s15
 8008924:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8008926:	e005      	b.n	8008934 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8008928:	2300      	movs	r3, #0
 800892a:	61bb      	str	r3, [r7, #24]
      break;
 800892c:	e002      	b.n	8008934 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800892e:	4b07      	ldr	r3, [pc, #28]	@ (800894c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008930:	61bb      	str	r3, [r7, #24]
      break;
 8008932:	bf00      	nop
  }

  return sysclockfreq;
 8008934:	69bb      	ldr	r3, [r7, #24]
}
 8008936:	4618      	mov	r0, r3
 8008938:	3724      	adds	r7, #36	@ 0x24
 800893a:	46bd      	mov	sp, r7
 800893c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008940:	4770      	bx	lr
 8008942:	bf00      	nop
 8008944:	58024400 	.word	0x58024400
 8008948:	03d09000 	.word	0x03d09000
 800894c:	003d0900 	.word	0x003d0900
 8008950:	017d7840 	.word	0x017d7840
 8008954:	46000000 	.word	0x46000000
 8008958:	4c742400 	.word	0x4c742400
 800895c:	4a742400 	.word	0x4a742400
 8008960:	4bbebc20 	.word	0x4bbebc20

08008964 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008964:	b580      	push	{r7, lr}
 8008966:	b082      	sub	sp, #8
 8008968:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800896a:	f7ff fe81 	bl	8008670 <HAL_RCC_GetSysClockFreq>
 800896e:	4602      	mov	r2, r0
 8008970:	4b10      	ldr	r3, [pc, #64]	@ (80089b4 <HAL_RCC_GetHCLKFreq+0x50>)
 8008972:	699b      	ldr	r3, [r3, #24]
 8008974:	0a1b      	lsrs	r3, r3, #8
 8008976:	f003 030f 	and.w	r3, r3, #15
 800897a:	490f      	ldr	r1, [pc, #60]	@ (80089b8 <HAL_RCC_GetHCLKFreq+0x54>)
 800897c:	5ccb      	ldrb	r3, [r1, r3]
 800897e:	f003 031f 	and.w	r3, r3, #31
 8008982:	fa22 f303 	lsr.w	r3, r2, r3
 8008986:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008988:	4b0a      	ldr	r3, [pc, #40]	@ (80089b4 <HAL_RCC_GetHCLKFreq+0x50>)
 800898a:	699b      	ldr	r3, [r3, #24]
 800898c:	f003 030f 	and.w	r3, r3, #15
 8008990:	4a09      	ldr	r2, [pc, #36]	@ (80089b8 <HAL_RCC_GetHCLKFreq+0x54>)
 8008992:	5cd3      	ldrb	r3, [r2, r3]
 8008994:	f003 031f 	and.w	r3, r3, #31
 8008998:	687a      	ldr	r2, [r7, #4]
 800899a:	fa22 f303 	lsr.w	r3, r2, r3
 800899e:	4a07      	ldr	r2, [pc, #28]	@ (80089bc <HAL_RCC_GetHCLKFreq+0x58>)
 80089a0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80089a2:	4a07      	ldr	r2, [pc, #28]	@ (80089c0 <HAL_RCC_GetHCLKFreq+0x5c>)
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80089a8:	4b04      	ldr	r3, [pc, #16]	@ (80089bc <HAL_RCC_GetHCLKFreq+0x58>)
 80089aa:	681b      	ldr	r3, [r3, #0]
}
 80089ac:	4618      	mov	r0, r3
 80089ae:	3708      	adds	r7, #8
 80089b0:	46bd      	mov	sp, r7
 80089b2:	bd80      	pop	{r7, pc}
 80089b4:	58024400 	.word	0x58024400
 80089b8:	080149f8 	.word	0x080149f8
 80089bc:	24000004 	.word	0x24000004
 80089c0:	24000000 	.word	0x24000000

080089c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80089c4:	b580      	push	{r7, lr}
 80089c6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80089c8:	f7ff ffcc 	bl	8008964 <HAL_RCC_GetHCLKFreq>
 80089cc:	4602      	mov	r2, r0
 80089ce:	4b06      	ldr	r3, [pc, #24]	@ (80089e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80089d0:	69db      	ldr	r3, [r3, #28]
 80089d2:	091b      	lsrs	r3, r3, #4
 80089d4:	f003 0307 	and.w	r3, r3, #7
 80089d8:	4904      	ldr	r1, [pc, #16]	@ (80089ec <HAL_RCC_GetPCLK1Freq+0x28>)
 80089da:	5ccb      	ldrb	r3, [r1, r3]
 80089dc:	f003 031f 	and.w	r3, r3, #31
 80089e0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80089e4:	4618      	mov	r0, r3
 80089e6:	bd80      	pop	{r7, pc}
 80089e8:	58024400 	.word	0x58024400
 80089ec:	080149f8 	.word	0x080149f8

080089f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80089f0:	b580      	push	{r7, lr}
 80089f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80089f4:	f7ff ffb6 	bl	8008964 <HAL_RCC_GetHCLKFreq>
 80089f8:	4602      	mov	r2, r0
 80089fa:	4b06      	ldr	r3, [pc, #24]	@ (8008a14 <HAL_RCC_GetPCLK2Freq+0x24>)
 80089fc:	69db      	ldr	r3, [r3, #28]
 80089fe:	0a1b      	lsrs	r3, r3, #8
 8008a00:	f003 0307 	and.w	r3, r3, #7
 8008a04:	4904      	ldr	r1, [pc, #16]	@ (8008a18 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008a06:	5ccb      	ldrb	r3, [r1, r3]
 8008a08:	f003 031f 	and.w	r3, r3, #31
 8008a0c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8008a10:	4618      	mov	r0, r3
 8008a12:	bd80      	pop	{r7, pc}
 8008a14:	58024400 	.word	0x58024400
 8008a18:	080149f8 	.word	0x080149f8

08008a1c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008a1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008a20:	b0ca      	sub	sp, #296	@ 0x128
 8008a22:	af00      	add	r7, sp, #0
 8008a24:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008a28:	2300      	movs	r3, #0
 8008a2a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008a2e:	2300      	movs	r3, #0
 8008a30:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008a34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a3c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8008a40:	2500      	movs	r5, #0
 8008a42:	ea54 0305 	orrs.w	r3, r4, r5
 8008a46:	d049      	beq.n	8008adc <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8008a48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a4c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008a4e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008a52:	d02f      	beq.n	8008ab4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8008a54:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008a58:	d828      	bhi.n	8008aac <HAL_RCCEx_PeriphCLKConfig+0x90>
 8008a5a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008a5e:	d01a      	beq.n	8008a96 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8008a60:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008a64:	d822      	bhi.n	8008aac <HAL_RCCEx_PeriphCLKConfig+0x90>
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d003      	beq.n	8008a72 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8008a6a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008a6e:	d007      	beq.n	8008a80 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008a70:	e01c      	b.n	8008aac <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008a72:	4bb8      	ldr	r3, [pc, #736]	@ (8008d54 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008a74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a76:	4ab7      	ldr	r2, [pc, #732]	@ (8008d54 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008a78:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008a7c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008a7e:	e01a      	b.n	8008ab6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008a80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a84:	3308      	adds	r3, #8
 8008a86:	2102      	movs	r1, #2
 8008a88:	4618      	mov	r0, r3
 8008a8a:	f002 fb61 	bl	800b150 <RCCEx_PLL2_Config>
 8008a8e:	4603      	mov	r3, r0
 8008a90:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008a94:	e00f      	b.n	8008ab6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008a96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a9a:	3328      	adds	r3, #40	@ 0x28
 8008a9c:	2102      	movs	r1, #2
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	f002 fc08 	bl	800b2b4 <RCCEx_PLL3_Config>
 8008aa4:	4603      	mov	r3, r0
 8008aa6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008aaa:	e004      	b.n	8008ab6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008aac:	2301      	movs	r3, #1
 8008aae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008ab2:	e000      	b.n	8008ab6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8008ab4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008ab6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d10a      	bne.n	8008ad4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8008abe:	4ba5      	ldr	r3, [pc, #660]	@ (8008d54 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008ac0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008ac2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8008ac6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008aca:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008acc:	4aa1      	ldr	r2, [pc, #644]	@ (8008d54 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008ace:	430b      	orrs	r3, r1
 8008ad0:	6513      	str	r3, [r2, #80]	@ 0x50
 8008ad2:	e003      	b.n	8008adc <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ad4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008ad8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008adc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ae4:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8008ae8:	f04f 0900 	mov.w	r9, #0
 8008aec:	ea58 0309 	orrs.w	r3, r8, r9
 8008af0:	d047      	beq.n	8008b82 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8008af2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008af6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008af8:	2b04      	cmp	r3, #4
 8008afa:	d82a      	bhi.n	8008b52 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8008afc:	a201      	add	r2, pc, #4	@ (adr r2, 8008b04 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8008afe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b02:	bf00      	nop
 8008b04:	08008b19 	.word	0x08008b19
 8008b08:	08008b27 	.word	0x08008b27
 8008b0c:	08008b3d 	.word	0x08008b3d
 8008b10:	08008b5b 	.word	0x08008b5b
 8008b14:	08008b5b 	.word	0x08008b5b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008b18:	4b8e      	ldr	r3, [pc, #568]	@ (8008d54 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008b1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b1c:	4a8d      	ldr	r2, [pc, #564]	@ (8008d54 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008b1e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008b22:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008b24:	e01a      	b.n	8008b5c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008b26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b2a:	3308      	adds	r3, #8
 8008b2c:	2100      	movs	r1, #0
 8008b2e:	4618      	mov	r0, r3
 8008b30:	f002 fb0e 	bl	800b150 <RCCEx_PLL2_Config>
 8008b34:	4603      	mov	r3, r0
 8008b36:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008b3a:	e00f      	b.n	8008b5c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008b3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b40:	3328      	adds	r3, #40	@ 0x28
 8008b42:	2100      	movs	r1, #0
 8008b44:	4618      	mov	r0, r3
 8008b46:	f002 fbb5 	bl	800b2b4 <RCCEx_PLL3_Config>
 8008b4a:	4603      	mov	r3, r0
 8008b4c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008b50:	e004      	b.n	8008b5c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008b52:	2301      	movs	r3, #1
 8008b54:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008b58:	e000      	b.n	8008b5c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8008b5a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008b5c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d10a      	bne.n	8008b7a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008b64:	4b7b      	ldr	r3, [pc, #492]	@ (8008d54 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008b66:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008b68:	f023 0107 	bic.w	r1, r3, #7
 8008b6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008b72:	4a78      	ldr	r2, [pc, #480]	@ (8008d54 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008b74:	430b      	orrs	r3, r1
 8008b76:	6513      	str	r3, [r2, #80]	@ 0x50
 8008b78:	e003      	b.n	8008b82 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b7a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008b7e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8008b82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b8a:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8008b8e:	f04f 0b00 	mov.w	fp, #0
 8008b92:	ea5a 030b 	orrs.w	r3, sl, fp
 8008b96:	d04c      	beq.n	8008c32 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8008b98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008b9e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008ba2:	d030      	beq.n	8008c06 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8008ba4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008ba8:	d829      	bhi.n	8008bfe <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8008baa:	2bc0      	cmp	r3, #192	@ 0xc0
 8008bac:	d02d      	beq.n	8008c0a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8008bae:	2bc0      	cmp	r3, #192	@ 0xc0
 8008bb0:	d825      	bhi.n	8008bfe <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8008bb2:	2b80      	cmp	r3, #128	@ 0x80
 8008bb4:	d018      	beq.n	8008be8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8008bb6:	2b80      	cmp	r3, #128	@ 0x80
 8008bb8:	d821      	bhi.n	8008bfe <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d002      	beq.n	8008bc4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8008bbe:	2b40      	cmp	r3, #64	@ 0x40
 8008bc0:	d007      	beq.n	8008bd2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8008bc2:	e01c      	b.n	8008bfe <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008bc4:	4b63      	ldr	r3, [pc, #396]	@ (8008d54 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008bc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bc8:	4a62      	ldr	r2, [pc, #392]	@ (8008d54 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008bca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008bce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8008bd0:	e01c      	b.n	8008c0c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008bd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008bd6:	3308      	adds	r3, #8
 8008bd8:	2100      	movs	r1, #0
 8008bda:	4618      	mov	r0, r3
 8008bdc:	f002 fab8 	bl	800b150 <RCCEx_PLL2_Config>
 8008be0:	4603      	mov	r3, r0
 8008be2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8008be6:	e011      	b.n	8008c0c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008be8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008bec:	3328      	adds	r3, #40	@ 0x28
 8008bee:	2100      	movs	r1, #0
 8008bf0:	4618      	mov	r0, r3
 8008bf2:	f002 fb5f 	bl	800b2b4 <RCCEx_PLL3_Config>
 8008bf6:	4603      	mov	r3, r0
 8008bf8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8008bfc:	e006      	b.n	8008c0c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008bfe:	2301      	movs	r3, #1
 8008c00:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008c04:	e002      	b.n	8008c0c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8008c06:	bf00      	nop
 8008c08:	e000      	b.n	8008c0c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8008c0a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008c0c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d10a      	bne.n	8008c2a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8008c14:	4b4f      	ldr	r3, [pc, #316]	@ (8008d54 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008c16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008c18:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8008c1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008c22:	4a4c      	ldr	r2, [pc, #304]	@ (8008d54 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008c24:	430b      	orrs	r3, r1
 8008c26:	6513      	str	r3, [r2, #80]	@ 0x50
 8008c28:	e003      	b.n	8008c32 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c2a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008c2e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8008c32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c3a:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8008c3e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8008c42:	2300      	movs	r3, #0
 8008c44:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8008c48:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8008c4c:	460b      	mov	r3, r1
 8008c4e:	4313      	orrs	r3, r2
 8008c50:	d053      	beq.n	8008cfa <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8008c52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c56:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8008c5a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008c5e:	d035      	beq.n	8008ccc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8008c60:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008c64:	d82e      	bhi.n	8008cc4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8008c66:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008c6a:	d031      	beq.n	8008cd0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8008c6c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008c70:	d828      	bhi.n	8008cc4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8008c72:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008c76:	d01a      	beq.n	8008cae <HAL_RCCEx_PeriphCLKConfig+0x292>
 8008c78:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008c7c:	d822      	bhi.n	8008cc4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d003      	beq.n	8008c8a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8008c82:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008c86:	d007      	beq.n	8008c98 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8008c88:	e01c      	b.n	8008cc4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008c8a:	4b32      	ldr	r3, [pc, #200]	@ (8008d54 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008c8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c8e:	4a31      	ldr	r2, [pc, #196]	@ (8008d54 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008c90:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008c94:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008c96:	e01c      	b.n	8008cd2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008c98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c9c:	3308      	adds	r3, #8
 8008c9e:	2100      	movs	r1, #0
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	f002 fa55 	bl	800b150 <RCCEx_PLL2_Config>
 8008ca6:	4603      	mov	r3, r0
 8008ca8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8008cac:	e011      	b.n	8008cd2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008cae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008cb2:	3328      	adds	r3, #40	@ 0x28
 8008cb4:	2100      	movs	r1, #0
 8008cb6:	4618      	mov	r0, r3
 8008cb8:	f002 fafc 	bl	800b2b4 <RCCEx_PLL3_Config>
 8008cbc:	4603      	mov	r3, r0
 8008cbe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008cc2:	e006      	b.n	8008cd2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8008cc4:	2301      	movs	r3, #1
 8008cc6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008cca:	e002      	b.n	8008cd2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8008ccc:	bf00      	nop
 8008cce:	e000      	b.n	8008cd2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8008cd0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008cd2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d10b      	bne.n	8008cf2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8008cda:	4b1e      	ldr	r3, [pc, #120]	@ (8008d54 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008cdc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008cde:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8008ce2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ce6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8008cea:	4a1a      	ldr	r2, [pc, #104]	@ (8008d54 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008cec:	430b      	orrs	r3, r1
 8008cee:	6593      	str	r3, [r2, #88]	@ 0x58
 8008cf0:	e003      	b.n	8008cfa <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008cf2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008cf6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8008cfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008cfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d02:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8008d06:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8008d0a:	2300      	movs	r3, #0
 8008d0c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8008d10:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8008d14:	460b      	mov	r3, r1
 8008d16:	4313      	orrs	r3, r2
 8008d18:	d056      	beq.n	8008dc8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8008d1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d1e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8008d22:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008d26:	d038      	beq.n	8008d9a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8008d28:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008d2c:	d831      	bhi.n	8008d92 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008d2e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008d32:	d034      	beq.n	8008d9e <HAL_RCCEx_PeriphCLKConfig+0x382>
 8008d34:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008d38:	d82b      	bhi.n	8008d92 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008d3a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008d3e:	d01d      	beq.n	8008d7c <HAL_RCCEx_PeriphCLKConfig+0x360>
 8008d40:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008d44:	d825      	bhi.n	8008d92 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d006      	beq.n	8008d58 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8008d4a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008d4e:	d00a      	beq.n	8008d66 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8008d50:	e01f      	b.n	8008d92 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008d52:	bf00      	nop
 8008d54:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008d58:	4ba2      	ldr	r3, [pc, #648]	@ (8008fe4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008d5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d5c:	4aa1      	ldr	r2, [pc, #644]	@ (8008fe4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008d5e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008d62:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008d64:	e01c      	b.n	8008da0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008d66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d6a:	3308      	adds	r3, #8
 8008d6c:	2100      	movs	r1, #0
 8008d6e:	4618      	mov	r0, r3
 8008d70:	f002 f9ee 	bl	800b150 <RCCEx_PLL2_Config>
 8008d74:	4603      	mov	r3, r0
 8008d76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8008d7a:	e011      	b.n	8008da0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008d7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d80:	3328      	adds	r3, #40	@ 0x28
 8008d82:	2100      	movs	r1, #0
 8008d84:	4618      	mov	r0, r3
 8008d86:	f002 fa95 	bl	800b2b4 <RCCEx_PLL3_Config>
 8008d8a:	4603      	mov	r3, r0
 8008d8c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008d90:	e006      	b.n	8008da0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8008d92:	2301      	movs	r3, #1
 8008d94:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008d98:	e002      	b.n	8008da0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8008d9a:	bf00      	nop
 8008d9c:	e000      	b.n	8008da0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8008d9e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008da0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d10b      	bne.n	8008dc0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8008da8:	4b8e      	ldr	r3, [pc, #568]	@ (8008fe4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008daa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008dac:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8008db0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008db4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8008db8:	4a8a      	ldr	r2, [pc, #552]	@ (8008fe4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008dba:	430b      	orrs	r3, r1
 8008dbc:	6593      	str	r3, [r2, #88]	@ 0x58
 8008dbe:	e003      	b.n	8008dc8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008dc0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008dc4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8008dc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dd0:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8008dd4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8008dd8:	2300      	movs	r3, #0
 8008dda:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8008dde:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8008de2:	460b      	mov	r3, r1
 8008de4:	4313      	orrs	r3, r2
 8008de6:	d03a      	beq.n	8008e5e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8008de8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008dec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008dee:	2b30      	cmp	r3, #48	@ 0x30
 8008df0:	d01f      	beq.n	8008e32 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8008df2:	2b30      	cmp	r3, #48	@ 0x30
 8008df4:	d819      	bhi.n	8008e2a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8008df6:	2b20      	cmp	r3, #32
 8008df8:	d00c      	beq.n	8008e14 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8008dfa:	2b20      	cmp	r3, #32
 8008dfc:	d815      	bhi.n	8008e2a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d019      	beq.n	8008e36 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8008e02:	2b10      	cmp	r3, #16
 8008e04:	d111      	bne.n	8008e2a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008e06:	4b77      	ldr	r3, [pc, #476]	@ (8008fe4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008e08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e0a:	4a76      	ldr	r2, [pc, #472]	@ (8008fe4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008e0c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008e10:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8008e12:	e011      	b.n	8008e38 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008e14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e18:	3308      	adds	r3, #8
 8008e1a:	2102      	movs	r1, #2
 8008e1c:	4618      	mov	r0, r3
 8008e1e:	f002 f997 	bl	800b150 <RCCEx_PLL2_Config>
 8008e22:	4603      	mov	r3, r0
 8008e24:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8008e28:	e006      	b.n	8008e38 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8008e2a:	2301      	movs	r3, #1
 8008e2c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008e30:	e002      	b.n	8008e38 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8008e32:	bf00      	nop
 8008e34:	e000      	b.n	8008e38 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8008e36:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008e38:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d10a      	bne.n	8008e56 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8008e40:	4b68      	ldr	r3, [pc, #416]	@ (8008fe4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008e42:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008e44:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8008e48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008e4e:	4a65      	ldr	r2, [pc, #404]	@ (8008fe4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008e50:	430b      	orrs	r3, r1
 8008e52:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008e54:	e003      	b.n	8008e5e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e56:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008e5a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8008e5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e66:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8008e6a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8008e6e:	2300      	movs	r3, #0
 8008e70:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8008e74:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8008e78:	460b      	mov	r3, r1
 8008e7a:	4313      	orrs	r3, r2
 8008e7c:	d051      	beq.n	8008f22 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8008e7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e82:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008e84:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008e88:	d035      	beq.n	8008ef6 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8008e8a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008e8e:	d82e      	bhi.n	8008eee <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8008e90:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008e94:	d031      	beq.n	8008efa <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8008e96:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008e9a:	d828      	bhi.n	8008eee <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8008e9c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008ea0:	d01a      	beq.n	8008ed8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8008ea2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008ea6:	d822      	bhi.n	8008eee <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d003      	beq.n	8008eb4 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8008eac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008eb0:	d007      	beq.n	8008ec2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8008eb2:	e01c      	b.n	8008eee <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008eb4:	4b4b      	ldr	r3, [pc, #300]	@ (8008fe4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008eb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008eb8:	4a4a      	ldr	r2, [pc, #296]	@ (8008fe4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008eba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008ebe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008ec0:	e01c      	b.n	8008efc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008ec2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ec6:	3308      	adds	r3, #8
 8008ec8:	2100      	movs	r1, #0
 8008eca:	4618      	mov	r0, r3
 8008ecc:	f002 f940 	bl	800b150 <RCCEx_PLL2_Config>
 8008ed0:	4603      	mov	r3, r0
 8008ed2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008ed6:	e011      	b.n	8008efc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008ed8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008edc:	3328      	adds	r3, #40	@ 0x28
 8008ede:	2100      	movs	r1, #0
 8008ee0:	4618      	mov	r0, r3
 8008ee2:	f002 f9e7 	bl	800b2b4 <RCCEx_PLL3_Config>
 8008ee6:	4603      	mov	r3, r0
 8008ee8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008eec:	e006      	b.n	8008efc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008eee:	2301      	movs	r3, #1
 8008ef0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008ef4:	e002      	b.n	8008efc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8008ef6:	bf00      	nop
 8008ef8:	e000      	b.n	8008efc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8008efa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008efc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d10a      	bne.n	8008f1a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8008f04:	4b37      	ldr	r3, [pc, #220]	@ (8008fe4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008f06:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008f08:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8008f0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f10:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008f12:	4a34      	ldr	r2, [pc, #208]	@ (8008fe4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008f14:	430b      	orrs	r3, r1
 8008f16:	6513      	str	r3, [r2, #80]	@ 0x50
 8008f18:	e003      	b.n	8008f22 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f1a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008f1e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8008f22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f2a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8008f2e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008f32:	2300      	movs	r3, #0
 8008f34:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8008f38:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8008f3c:	460b      	mov	r3, r1
 8008f3e:	4313      	orrs	r3, r2
 8008f40:	d056      	beq.n	8008ff0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8008f42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f46:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008f48:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008f4c:	d033      	beq.n	8008fb6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8008f4e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008f52:	d82c      	bhi.n	8008fae <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008f54:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008f58:	d02f      	beq.n	8008fba <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8008f5a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008f5e:	d826      	bhi.n	8008fae <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008f60:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008f64:	d02b      	beq.n	8008fbe <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8008f66:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008f6a:	d820      	bhi.n	8008fae <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008f6c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008f70:	d012      	beq.n	8008f98 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8008f72:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008f76:	d81a      	bhi.n	8008fae <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d022      	beq.n	8008fc2 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8008f7c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008f80:	d115      	bne.n	8008fae <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008f82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f86:	3308      	adds	r3, #8
 8008f88:	2101      	movs	r1, #1
 8008f8a:	4618      	mov	r0, r3
 8008f8c:	f002 f8e0 	bl	800b150 <RCCEx_PLL2_Config>
 8008f90:	4603      	mov	r3, r0
 8008f92:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8008f96:	e015      	b.n	8008fc4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008f98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f9c:	3328      	adds	r3, #40	@ 0x28
 8008f9e:	2101      	movs	r1, #1
 8008fa0:	4618      	mov	r0, r3
 8008fa2:	f002 f987 	bl	800b2b4 <RCCEx_PLL3_Config>
 8008fa6:	4603      	mov	r3, r0
 8008fa8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8008fac:	e00a      	b.n	8008fc4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008fae:	2301      	movs	r3, #1
 8008fb0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008fb4:	e006      	b.n	8008fc4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8008fb6:	bf00      	nop
 8008fb8:	e004      	b.n	8008fc4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8008fba:	bf00      	nop
 8008fbc:	e002      	b.n	8008fc4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8008fbe:	bf00      	nop
 8008fc0:	e000      	b.n	8008fc4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8008fc2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008fc4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d10d      	bne.n	8008fe8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8008fcc:	4b05      	ldr	r3, [pc, #20]	@ (8008fe4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008fce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008fd0:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8008fd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008fd8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008fda:	4a02      	ldr	r2, [pc, #8]	@ (8008fe4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008fdc:	430b      	orrs	r3, r1
 8008fde:	6513      	str	r3, [r2, #80]	@ 0x50
 8008fe0:	e006      	b.n	8008ff0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8008fe2:	bf00      	nop
 8008fe4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008fe8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008fec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8008ff0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ff8:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8008ffc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009000:	2300      	movs	r3, #0
 8009002:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009006:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800900a:	460b      	mov	r3, r1
 800900c:	4313      	orrs	r3, r2
 800900e:	d055      	beq.n	80090bc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8009010:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009014:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8009018:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800901c:	d033      	beq.n	8009086 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800901e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009022:	d82c      	bhi.n	800907e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009024:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009028:	d02f      	beq.n	800908a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800902a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800902e:	d826      	bhi.n	800907e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009030:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009034:	d02b      	beq.n	800908e <HAL_RCCEx_PeriphCLKConfig+0x672>
 8009036:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800903a:	d820      	bhi.n	800907e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800903c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009040:	d012      	beq.n	8009068 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8009042:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009046:	d81a      	bhi.n	800907e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009048:	2b00      	cmp	r3, #0
 800904a:	d022      	beq.n	8009092 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800904c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009050:	d115      	bne.n	800907e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009052:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009056:	3308      	adds	r3, #8
 8009058:	2101      	movs	r1, #1
 800905a:	4618      	mov	r0, r3
 800905c:	f002 f878 	bl	800b150 <RCCEx_PLL2_Config>
 8009060:	4603      	mov	r3, r0
 8009062:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009066:	e015      	b.n	8009094 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009068:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800906c:	3328      	adds	r3, #40	@ 0x28
 800906e:	2101      	movs	r1, #1
 8009070:	4618      	mov	r0, r3
 8009072:	f002 f91f 	bl	800b2b4 <RCCEx_PLL3_Config>
 8009076:	4603      	mov	r3, r0
 8009078:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800907c:	e00a      	b.n	8009094 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800907e:	2301      	movs	r3, #1
 8009080:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009084:	e006      	b.n	8009094 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009086:	bf00      	nop
 8009088:	e004      	b.n	8009094 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800908a:	bf00      	nop
 800908c:	e002      	b.n	8009094 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800908e:	bf00      	nop
 8009090:	e000      	b.n	8009094 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009092:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009094:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009098:	2b00      	cmp	r3, #0
 800909a:	d10b      	bne.n	80090b4 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800909c:	4ba3      	ldr	r3, [pc, #652]	@ (800932c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800909e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80090a0:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80090a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80090a8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80090ac:	4a9f      	ldr	r2, [pc, #636]	@ (800932c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80090ae:	430b      	orrs	r3, r1
 80090b0:	6593      	str	r3, [r2, #88]	@ 0x58
 80090b2:	e003      	b.n	80090bc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80090b4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80090b8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80090bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80090c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090c4:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80090c8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80090cc:	2300      	movs	r3, #0
 80090ce:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80090d2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80090d6:	460b      	mov	r3, r1
 80090d8:	4313      	orrs	r3, r2
 80090da:	d037      	beq.n	800914c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80090dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80090e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80090e2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80090e6:	d00e      	beq.n	8009106 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80090e8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80090ec:	d816      	bhi.n	800911c <HAL_RCCEx_PeriphCLKConfig+0x700>
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d018      	beq.n	8009124 <HAL_RCCEx_PeriphCLKConfig+0x708>
 80090f2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80090f6:	d111      	bne.n	800911c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80090f8:	4b8c      	ldr	r3, [pc, #560]	@ (800932c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80090fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090fc:	4a8b      	ldr	r2, [pc, #556]	@ (800932c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80090fe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009102:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8009104:	e00f      	b.n	8009126 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009106:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800910a:	3308      	adds	r3, #8
 800910c:	2101      	movs	r1, #1
 800910e:	4618      	mov	r0, r3
 8009110:	f002 f81e 	bl	800b150 <RCCEx_PLL2_Config>
 8009114:	4603      	mov	r3, r0
 8009116:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800911a:	e004      	b.n	8009126 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800911c:	2301      	movs	r3, #1
 800911e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009122:	e000      	b.n	8009126 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8009124:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009126:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800912a:	2b00      	cmp	r3, #0
 800912c:	d10a      	bne.n	8009144 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800912e:	4b7f      	ldr	r3, [pc, #508]	@ (800932c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009130:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009132:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8009136:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800913a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800913c:	4a7b      	ldr	r2, [pc, #492]	@ (800932c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800913e:	430b      	orrs	r3, r1
 8009140:	6513      	str	r3, [r2, #80]	@ 0x50
 8009142:	e003      	b.n	800914c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009144:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009148:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800914c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009154:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8009158:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800915c:	2300      	movs	r3, #0
 800915e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8009162:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8009166:	460b      	mov	r3, r1
 8009168:	4313      	orrs	r3, r2
 800916a:	d039      	beq.n	80091e0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800916c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009170:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009172:	2b03      	cmp	r3, #3
 8009174:	d81c      	bhi.n	80091b0 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8009176:	a201      	add	r2, pc, #4	@ (adr r2, 800917c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8009178:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800917c:	080091b9 	.word	0x080091b9
 8009180:	0800918d 	.word	0x0800918d
 8009184:	0800919b 	.word	0x0800919b
 8009188:	080091b9 	.word	0x080091b9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800918c:	4b67      	ldr	r3, [pc, #412]	@ (800932c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800918e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009190:	4a66      	ldr	r2, [pc, #408]	@ (800932c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009192:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009196:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8009198:	e00f      	b.n	80091ba <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800919a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800919e:	3308      	adds	r3, #8
 80091a0:	2102      	movs	r1, #2
 80091a2:	4618      	mov	r0, r3
 80091a4:	f001 ffd4 	bl	800b150 <RCCEx_PLL2_Config>
 80091a8:	4603      	mov	r3, r0
 80091aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80091ae:	e004      	b.n	80091ba <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80091b0:	2301      	movs	r3, #1
 80091b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80091b6:	e000      	b.n	80091ba <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80091b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80091ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d10a      	bne.n	80091d8 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80091c2:	4b5a      	ldr	r3, [pc, #360]	@ (800932c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80091c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80091c6:	f023 0103 	bic.w	r1, r3, #3
 80091ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80091ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80091d0:	4a56      	ldr	r2, [pc, #344]	@ (800932c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80091d2:	430b      	orrs	r3, r1
 80091d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80091d6:	e003      	b.n	80091e0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80091d8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80091dc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80091e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80091e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091e8:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80091ec:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80091f0:	2300      	movs	r3, #0
 80091f2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80091f6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80091fa:	460b      	mov	r3, r1
 80091fc:	4313      	orrs	r3, r2
 80091fe:	f000 809f 	beq.w	8009340 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009202:	4b4b      	ldr	r3, [pc, #300]	@ (8009330 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	4a4a      	ldr	r2, [pc, #296]	@ (8009330 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8009208:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800920c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800920e:	f7f9 fbc3 	bl	8002998 <HAL_GetTick>
 8009212:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009216:	e00b      	b.n	8009230 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009218:	f7f9 fbbe 	bl	8002998 <HAL_GetTick>
 800921c:	4602      	mov	r2, r0
 800921e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8009222:	1ad3      	subs	r3, r2, r3
 8009224:	2b64      	cmp	r3, #100	@ 0x64
 8009226:	d903      	bls.n	8009230 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8009228:	2303      	movs	r3, #3
 800922a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800922e:	e005      	b.n	800923c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009230:	4b3f      	ldr	r3, [pc, #252]	@ (8009330 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009238:	2b00      	cmp	r3, #0
 800923a:	d0ed      	beq.n	8009218 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800923c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009240:	2b00      	cmp	r3, #0
 8009242:	d179      	bne.n	8009338 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8009244:	4b39      	ldr	r3, [pc, #228]	@ (800932c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009246:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8009248:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800924c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009250:	4053      	eors	r3, r2
 8009252:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009256:	2b00      	cmp	r3, #0
 8009258:	d015      	beq.n	8009286 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800925a:	4b34      	ldr	r3, [pc, #208]	@ (800932c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800925c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800925e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009262:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009266:	4b31      	ldr	r3, [pc, #196]	@ (800932c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009268:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800926a:	4a30      	ldr	r2, [pc, #192]	@ (800932c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800926c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009270:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009272:	4b2e      	ldr	r3, [pc, #184]	@ (800932c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009274:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009276:	4a2d      	ldr	r2, [pc, #180]	@ (800932c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009278:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800927c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800927e:	4a2b      	ldr	r2, [pc, #172]	@ (800932c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009280:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009284:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8009286:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800928a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800928e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009292:	d118      	bne.n	80092c6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009294:	f7f9 fb80 	bl	8002998 <HAL_GetTick>
 8009298:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800929c:	e00d      	b.n	80092ba <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800929e:	f7f9 fb7b 	bl	8002998 <HAL_GetTick>
 80092a2:	4602      	mov	r2, r0
 80092a4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80092a8:	1ad2      	subs	r2, r2, r3
 80092aa:	f241 3388 	movw	r3, #5000	@ 0x1388
 80092ae:	429a      	cmp	r2, r3
 80092b0:	d903      	bls.n	80092ba <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80092b2:	2303      	movs	r3, #3
 80092b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 80092b8:	e005      	b.n	80092c6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80092ba:	4b1c      	ldr	r3, [pc, #112]	@ (800932c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80092bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80092be:	f003 0302 	and.w	r3, r3, #2
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d0eb      	beq.n	800929e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80092c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d129      	bne.n	8009322 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80092ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80092d2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80092d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80092da:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80092de:	d10e      	bne.n	80092fe <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80092e0:	4b12      	ldr	r3, [pc, #72]	@ (800932c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80092e2:	691b      	ldr	r3, [r3, #16]
 80092e4:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80092e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80092ec:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80092f0:	091a      	lsrs	r2, r3, #4
 80092f2:	4b10      	ldr	r3, [pc, #64]	@ (8009334 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80092f4:	4013      	ands	r3, r2
 80092f6:	4a0d      	ldr	r2, [pc, #52]	@ (800932c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80092f8:	430b      	orrs	r3, r1
 80092fa:	6113      	str	r3, [r2, #16]
 80092fc:	e005      	b.n	800930a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80092fe:	4b0b      	ldr	r3, [pc, #44]	@ (800932c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009300:	691b      	ldr	r3, [r3, #16]
 8009302:	4a0a      	ldr	r2, [pc, #40]	@ (800932c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009304:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8009308:	6113      	str	r3, [r2, #16]
 800930a:	4b08      	ldr	r3, [pc, #32]	@ (800932c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800930c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800930e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009312:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009316:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800931a:	4a04      	ldr	r2, [pc, #16]	@ (800932c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800931c:	430b      	orrs	r3, r1
 800931e:	6713      	str	r3, [r2, #112]	@ 0x70
 8009320:	e00e      	b.n	8009340 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009322:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009326:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800932a:	e009      	b.n	8009340 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800932c:	58024400 	.word	0x58024400
 8009330:	58024800 	.word	0x58024800
 8009334:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009338:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800933c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009340:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009344:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009348:	f002 0301 	and.w	r3, r2, #1
 800934c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009350:	2300      	movs	r3, #0
 8009352:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009356:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800935a:	460b      	mov	r3, r1
 800935c:	4313      	orrs	r3, r2
 800935e:	f000 8089 	beq.w	8009474 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8009362:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009366:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009368:	2b28      	cmp	r3, #40	@ 0x28
 800936a:	d86b      	bhi.n	8009444 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800936c:	a201      	add	r2, pc, #4	@ (adr r2, 8009374 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800936e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009372:	bf00      	nop
 8009374:	0800944d 	.word	0x0800944d
 8009378:	08009445 	.word	0x08009445
 800937c:	08009445 	.word	0x08009445
 8009380:	08009445 	.word	0x08009445
 8009384:	08009445 	.word	0x08009445
 8009388:	08009445 	.word	0x08009445
 800938c:	08009445 	.word	0x08009445
 8009390:	08009445 	.word	0x08009445
 8009394:	08009419 	.word	0x08009419
 8009398:	08009445 	.word	0x08009445
 800939c:	08009445 	.word	0x08009445
 80093a0:	08009445 	.word	0x08009445
 80093a4:	08009445 	.word	0x08009445
 80093a8:	08009445 	.word	0x08009445
 80093ac:	08009445 	.word	0x08009445
 80093b0:	08009445 	.word	0x08009445
 80093b4:	0800942f 	.word	0x0800942f
 80093b8:	08009445 	.word	0x08009445
 80093bc:	08009445 	.word	0x08009445
 80093c0:	08009445 	.word	0x08009445
 80093c4:	08009445 	.word	0x08009445
 80093c8:	08009445 	.word	0x08009445
 80093cc:	08009445 	.word	0x08009445
 80093d0:	08009445 	.word	0x08009445
 80093d4:	0800944d 	.word	0x0800944d
 80093d8:	08009445 	.word	0x08009445
 80093dc:	08009445 	.word	0x08009445
 80093e0:	08009445 	.word	0x08009445
 80093e4:	08009445 	.word	0x08009445
 80093e8:	08009445 	.word	0x08009445
 80093ec:	08009445 	.word	0x08009445
 80093f0:	08009445 	.word	0x08009445
 80093f4:	0800944d 	.word	0x0800944d
 80093f8:	08009445 	.word	0x08009445
 80093fc:	08009445 	.word	0x08009445
 8009400:	08009445 	.word	0x08009445
 8009404:	08009445 	.word	0x08009445
 8009408:	08009445 	.word	0x08009445
 800940c:	08009445 	.word	0x08009445
 8009410:	08009445 	.word	0x08009445
 8009414:	0800944d 	.word	0x0800944d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009418:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800941c:	3308      	adds	r3, #8
 800941e:	2101      	movs	r1, #1
 8009420:	4618      	mov	r0, r3
 8009422:	f001 fe95 	bl	800b150 <RCCEx_PLL2_Config>
 8009426:	4603      	mov	r3, r0
 8009428:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800942c:	e00f      	b.n	800944e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800942e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009432:	3328      	adds	r3, #40	@ 0x28
 8009434:	2101      	movs	r1, #1
 8009436:	4618      	mov	r0, r3
 8009438:	f001 ff3c 	bl	800b2b4 <RCCEx_PLL3_Config>
 800943c:	4603      	mov	r3, r0
 800943e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8009442:	e004      	b.n	800944e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009444:	2301      	movs	r3, #1
 8009446:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800944a:	e000      	b.n	800944e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800944c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800944e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009452:	2b00      	cmp	r3, #0
 8009454:	d10a      	bne.n	800946c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8009456:	4bbf      	ldr	r3, [pc, #764]	@ (8009754 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009458:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800945a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800945e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009462:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009464:	4abb      	ldr	r2, [pc, #748]	@ (8009754 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009466:	430b      	orrs	r3, r1
 8009468:	6553      	str	r3, [r2, #84]	@ 0x54
 800946a:	e003      	b.n	8009474 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800946c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009470:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009474:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800947c:	f002 0302 	and.w	r3, r2, #2
 8009480:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009484:	2300      	movs	r3, #0
 8009486:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800948a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800948e:	460b      	mov	r3, r1
 8009490:	4313      	orrs	r3, r2
 8009492:	d041      	beq.n	8009518 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8009494:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009498:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800949a:	2b05      	cmp	r3, #5
 800949c:	d824      	bhi.n	80094e8 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800949e:	a201      	add	r2, pc, #4	@ (adr r2, 80094a4 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80094a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094a4:	080094f1 	.word	0x080094f1
 80094a8:	080094bd 	.word	0x080094bd
 80094ac:	080094d3 	.word	0x080094d3
 80094b0:	080094f1 	.word	0x080094f1
 80094b4:	080094f1 	.word	0x080094f1
 80094b8:	080094f1 	.word	0x080094f1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80094bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80094c0:	3308      	adds	r3, #8
 80094c2:	2101      	movs	r1, #1
 80094c4:	4618      	mov	r0, r3
 80094c6:	f001 fe43 	bl	800b150 <RCCEx_PLL2_Config>
 80094ca:	4603      	mov	r3, r0
 80094cc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80094d0:	e00f      	b.n	80094f2 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80094d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80094d6:	3328      	adds	r3, #40	@ 0x28
 80094d8:	2101      	movs	r1, #1
 80094da:	4618      	mov	r0, r3
 80094dc:	f001 feea 	bl	800b2b4 <RCCEx_PLL3_Config>
 80094e0:	4603      	mov	r3, r0
 80094e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80094e6:	e004      	b.n	80094f2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80094e8:	2301      	movs	r3, #1
 80094ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80094ee:	e000      	b.n	80094f2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80094f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80094f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d10a      	bne.n	8009510 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80094fa:	4b96      	ldr	r3, [pc, #600]	@ (8009754 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80094fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80094fe:	f023 0107 	bic.w	r1, r3, #7
 8009502:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009506:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009508:	4a92      	ldr	r2, [pc, #584]	@ (8009754 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800950a:	430b      	orrs	r3, r1
 800950c:	6553      	str	r3, [r2, #84]	@ 0x54
 800950e:	e003      	b.n	8009518 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009510:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009514:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009518:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800951c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009520:	f002 0304 	and.w	r3, r2, #4
 8009524:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009528:	2300      	movs	r3, #0
 800952a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800952e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8009532:	460b      	mov	r3, r1
 8009534:	4313      	orrs	r3, r2
 8009536:	d044      	beq.n	80095c2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8009538:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800953c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009540:	2b05      	cmp	r3, #5
 8009542:	d825      	bhi.n	8009590 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8009544:	a201      	add	r2, pc, #4	@ (adr r2, 800954c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8009546:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800954a:	bf00      	nop
 800954c:	08009599 	.word	0x08009599
 8009550:	08009565 	.word	0x08009565
 8009554:	0800957b 	.word	0x0800957b
 8009558:	08009599 	.word	0x08009599
 800955c:	08009599 	.word	0x08009599
 8009560:	08009599 	.word	0x08009599
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009564:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009568:	3308      	adds	r3, #8
 800956a:	2101      	movs	r1, #1
 800956c:	4618      	mov	r0, r3
 800956e:	f001 fdef 	bl	800b150 <RCCEx_PLL2_Config>
 8009572:	4603      	mov	r3, r0
 8009574:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8009578:	e00f      	b.n	800959a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800957a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800957e:	3328      	adds	r3, #40	@ 0x28
 8009580:	2101      	movs	r1, #1
 8009582:	4618      	mov	r0, r3
 8009584:	f001 fe96 	bl	800b2b4 <RCCEx_PLL3_Config>
 8009588:	4603      	mov	r3, r0
 800958a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800958e:	e004      	b.n	800959a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009590:	2301      	movs	r3, #1
 8009592:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009596:	e000      	b.n	800959a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8009598:	bf00      	nop
    }

    if (ret == HAL_OK)
 800959a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d10b      	bne.n	80095ba <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80095a2:	4b6c      	ldr	r3, [pc, #432]	@ (8009754 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80095a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80095a6:	f023 0107 	bic.w	r1, r3, #7
 80095aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80095ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80095b2:	4a68      	ldr	r2, [pc, #416]	@ (8009754 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80095b4:	430b      	orrs	r3, r1
 80095b6:	6593      	str	r3, [r2, #88]	@ 0x58
 80095b8:	e003      	b.n	80095c2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80095ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80095be:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80095c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80095c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095ca:	f002 0320 	and.w	r3, r2, #32
 80095ce:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80095d2:	2300      	movs	r3, #0
 80095d4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80095d8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80095dc:	460b      	mov	r3, r1
 80095de:	4313      	orrs	r3, r2
 80095e0:	d055      	beq.n	800968e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80095e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80095e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80095ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80095ee:	d033      	beq.n	8009658 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80095f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80095f4:	d82c      	bhi.n	8009650 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80095f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80095fa:	d02f      	beq.n	800965c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80095fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009600:	d826      	bhi.n	8009650 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009602:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009606:	d02b      	beq.n	8009660 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8009608:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800960c:	d820      	bhi.n	8009650 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800960e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009612:	d012      	beq.n	800963a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8009614:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009618:	d81a      	bhi.n	8009650 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800961a:	2b00      	cmp	r3, #0
 800961c:	d022      	beq.n	8009664 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800961e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009622:	d115      	bne.n	8009650 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009624:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009628:	3308      	adds	r3, #8
 800962a:	2100      	movs	r1, #0
 800962c:	4618      	mov	r0, r3
 800962e:	f001 fd8f 	bl	800b150 <RCCEx_PLL2_Config>
 8009632:	4603      	mov	r3, r0
 8009634:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8009638:	e015      	b.n	8009666 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800963a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800963e:	3328      	adds	r3, #40	@ 0x28
 8009640:	2102      	movs	r1, #2
 8009642:	4618      	mov	r0, r3
 8009644:	f001 fe36 	bl	800b2b4 <RCCEx_PLL3_Config>
 8009648:	4603      	mov	r3, r0
 800964a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800964e:	e00a      	b.n	8009666 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009650:	2301      	movs	r3, #1
 8009652:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009656:	e006      	b.n	8009666 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009658:	bf00      	nop
 800965a:	e004      	b.n	8009666 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800965c:	bf00      	nop
 800965e:	e002      	b.n	8009666 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009660:	bf00      	nop
 8009662:	e000      	b.n	8009666 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009664:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009666:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800966a:	2b00      	cmp	r3, #0
 800966c:	d10b      	bne.n	8009686 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800966e:	4b39      	ldr	r3, [pc, #228]	@ (8009754 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009670:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009672:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8009676:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800967a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800967e:	4a35      	ldr	r2, [pc, #212]	@ (8009754 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009680:	430b      	orrs	r3, r1
 8009682:	6553      	str	r3, [r2, #84]	@ 0x54
 8009684:	e003      	b.n	800968e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009686:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800968a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800968e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009696:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800969a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800969e:	2300      	movs	r3, #0
 80096a0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80096a4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80096a8:	460b      	mov	r3, r1
 80096aa:	4313      	orrs	r3, r2
 80096ac:	d058      	beq.n	8009760 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80096ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80096b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80096b6:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80096ba:	d033      	beq.n	8009724 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80096bc:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80096c0:	d82c      	bhi.n	800971c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80096c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80096c6:	d02f      	beq.n	8009728 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80096c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80096cc:	d826      	bhi.n	800971c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80096ce:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80096d2:	d02b      	beq.n	800972c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80096d4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80096d8:	d820      	bhi.n	800971c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80096da:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80096de:	d012      	beq.n	8009706 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80096e0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80096e4:	d81a      	bhi.n	800971c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d022      	beq.n	8009730 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80096ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80096ee:	d115      	bne.n	800971c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80096f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80096f4:	3308      	adds	r3, #8
 80096f6:	2100      	movs	r1, #0
 80096f8:	4618      	mov	r0, r3
 80096fa:	f001 fd29 	bl	800b150 <RCCEx_PLL2_Config>
 80096fe:	4603      	mov	r3, r0
 8009700:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8009704:	e015      	b.n	8009732 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009706:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800970a:	3328      	adds	r3, #40	@ 0x28
 800970c:	2102      	movs	r1, #2
 800970e:	4618      	mov	r0, r3
 8009710:	f001 fdd0 	bl	800b2b4 <RCCEx_PLL3_Config>
 8009714:	4603      	mov	r3, r0
 8009716:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800971a:	e00a      	b.n	8009732 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800971c:	2301      	movs	r3, #1
 800971e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009722:	e006      	b.n	8009732 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009724:	bf00      	nop
 8009726:	e004      	b.n	8009732 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009728:	bf00      	nop
 800972a:	e002      	b.n	8009732 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800972c:	bf00      	nop
 800972e:	e000      	b.n	8009732 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009730:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009732:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009736:	2b00      	cmp	r3, #0
 8009738:	d10e      	bne.n	8009758 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800973a:	4b06      	ldr	r3, [pc, #24]	@ (8009754 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800973c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800973e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8009742:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009746:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800974a:	4a02      	ldr	r2, [pc, #8]	@ (8009754 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800974c:	430b      	orrs	r3, r1
 800974e:	6593      	str	r3, [r2, #88]	@ 0x58
 8009750:	e006      	b.n	8009760 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8009752:	bf00      	nop
 8009754:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009758:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800975c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009760:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009768:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800976c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009770:	2300      	movs	r3, #0
 8009772:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009776:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800977a:	460b      	mov	r3, r1
 800977c:	4313      	orrs	r3, r2
 800977e:	d055      	beq.n	800982c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8009780:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009784:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009788:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800978c:	d033      	beq.n	80097f6 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800978e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8009792:	d82c      	bhi.n	80097ee <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009794:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009798:	d02f      	beq.n	80097fa <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800979a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800979e:	d826      	bhi.n	80097ee <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80097a0:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80097a4:	d02b      	beq.n	80097fe <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80097a6:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80097aa:	d820      	bhi.n	80097ee <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80097ac:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80097b0:	d012      	beq.n	80097d8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80097b2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80097b6:	d81a      	bhi.n	80097ee <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d022      	beq.n	8009802 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80097bc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80097c0:	d115      	bne.n	80097ee <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80097c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80097c6:	3308      	adds	r3, #8
 80097c8:	2100      	movs	r1, #0
 80097ca:	4618      	mov	r0, r3
 80097cc:	f001 fcc0 	bl	800b150 <RCCEx_PLL2_Config>
 80097d0:	4603      	mov	r3, r0
 80097d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80097d6:	e015      	b.n	8009804 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80097d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80097dc:	3328      	adds	r3, #40	@ 0x28
 80097de:	2102      	movs	r1, #2
 80097e0:	4618      	mov	r0, r3
 80097e2:	f001 fd67 	bl	800b2b4 <RCCEx_PLL3_Config>
 80097e6:	4603      	mov	r3, r0
 80097e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80097ec:	e00a      	b.n	8009804 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80097ee:	2301      	movs	r3, #1
 80097f0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80097f4:	e006      	b.n	8009804 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80097f6:	bf00      	nop
 80097f8:	e004      	b.n	8009804 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80097fa:	bf00      	nop
 80097fc:	e002      	b.n	8009804 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80097fe:	bf00      	nop
 8009800:	e000      	b.n	8009804 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009802:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009804:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009808:	2b00      	cmp	r3, #0
 800980a:	d10b      	bne.n	8009824 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800980c:	4ba1      	ldr	r3, [pc, #644]	@ (8009a94 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800980e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009810:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8009814:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009818:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800981c:	4a9d      	ldr	r2, [pc, #628]	@ (8009a94 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800981e:	430b      	orrs	r3, r1
 8009820:	6593      	str	r3, [r2, #88]	@ 0x58
 8009822:	e003      	b.n	800982c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009824:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009828:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800982c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009830:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009834:	f002 0308 	and.w	r3, r2, #8
 8009838:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800983c:	2300      	movs	r3, #0
 800983e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009842:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8009846:	460b      	mov	r3, r1
 8009848:	4313      	orrs	r3, r2
 800984a:	d01e      	beq.n	800988a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800984c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009850:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009854:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009858:	d10c      	bne.n	8009874 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800985a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800985e:	3328      	adds	r3, #40	@ 0x28
 8009860:	2102      	movs	r1, #2
 8009862:	4618      	mov	r0, r3
 8009864:	f001 fd26 	bl	800b2b4 <RCCEx_PLL3_Config>
 8009868:	4603      	mov	r3, r0
 800986a:	2b00      	cmp	r3, #0
 800986c:	d002      	beq.n	8009874 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800986e:	2301      	movs	r3, #1
 8009870:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8009874:	4b87      	ldr	r3, [pc, #540]	@ (8009a94 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009876:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009878:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800987c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009880:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009884:	4a83      	ldr	r2, [pc, #524]	@ (8009a94 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009886:	430b      	orrs	r3, r1
 8009888:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800988a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800988e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009892:	f002 0310 	and.w	r3, r2, #16
 8009896:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800989a:	2300      	movs	r3, #0
 800989c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80098a0:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80098a4:	460b      	mov	r3, r1
 80098a6:	4313      	orrs	r3, r2
 80098a8:	d01e      	beq.n	80098e8 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80098aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80098ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80098b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80098b6:	d10c      	bne.n	80098d2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80098b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80098bc:	3328      	adds	r3, #40	@ 0x28
 80098be:	2102      	movs	r1, #2
 80098c0:	4618      	mov	r0, r3
 80098c2:	f001 fcf7 	bl	800b2b4 <RCCEx_PLL3_Config>
 80098c6:	4603      	mov	r3, r0
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d002      	beq.n	80098d2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80098cc:	2301      	movs	r3, #1
 80098ce:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80098d2:	4b70      	ldr	r3, [pc, #448]	@ (8009a94 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80098d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80098d6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80098da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80098de:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80098e2:	4a6c      	ldr	r2, [pc, #432]	@ (8009a94 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80098e4:	430b      	orrs	r3, r1
 80098e6:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80098e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80098ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098f0:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80098f4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80098f8:	2300      	movs	r3, #0
 80098fa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80098fe:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8009902:	460b      	mov	r3, r1
 8009904:	4313      	orrs	r3, r2
 8009906:	d03e      	beq.n	8009986 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8009908:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800990c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009910:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009914:	d022      	beq.n	800995c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8009916:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800991a:	d81b      	bhi.n	8009954 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800991c:	2b00      	cmp	r3, #0
 800991e:	d003      	beq.n	8009928 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8009920:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009924:	d00b      	beq.n	800993e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8009926:	e015      	b.n	8009954 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009928:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800992c:	3308      	adds	r3, #8
 800992e:	2100      	movs	r1, #0
 8009930:	4618      	mov	r0, r3
 8009932:	f001 fc0d 	bl	800b150 <RCCEx_PLL2_Config>
 8009936:	4603      	mov	r3, r0
 8009938:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800993c:	e00f      	b.n	800995e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800993e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009942:	3328      	adds	r3, #40	@ 0x28
 8009944:	2102      	movs	r1, #2
 8009946:	4618      	mov	r0, r3
 8009948:	f001 fcb4 	bl	800b2b4 <RCCEx_PLL3_Config>
 800994c:	4603      	mov	r3, r0
 800994e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8009952:	e004      	b.n	800995e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009954:	2301      	movs	r3, #1
 8009956:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800995a:	e000      	b.n	800995e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800995c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800995e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009962:	2b00      	cmp	r3, #0
 8009964:	d10b      	bne.n	800997e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009966:	4b4b      	ldr	r3, [pc, #300]	@ (8009a94 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009968:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800996a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800996e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009972:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009976:	4a47      	ldr	r2, [pc, #284]	@ (8009a94 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009978:	430b      	orrs	r3, r1
 800997a:	6593      	str	r3, [r2, #88]	@ 0x58
 800997c:	e003      	b.n	8009986 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800997e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009982:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009986:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800998a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800998e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8009992:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009994:	2300      	movs	r3, #0
 8009996:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009998:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800999c:	460b      	mov	r3, r1
 800999e:	4313      	orrs	r3, r2
 80099a0:	d03b      	beq.n	8009a1a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80099a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80099a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80099aa:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80099ae:	d01f      	beq.n	80099f0 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80099b0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80099b4:	d818      	bhi.n	80099e8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80099b6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80099ba:	d003      	beq.n	80099c4 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80099bc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80099c0:	d007      	beq.n	80099d2 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80099c2:	e011      	b.n	80099e8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80099c4:	4b33      	ldr	r3, [pc, #204]	@ (8009a94 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80099c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099c8:	4a32      	ldr	r2, [pc, #200]	@ (8009a94 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80099ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80099ce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80099d0:	e00f      	b.n	80099f2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80099d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80099d6:	3328      	adds	r3, #40	@ 0x28
 80099d8:	2101      	movs	r1, #1
 80099da:	4618      	mov	r0, r3
 80099dc:	f001 fc6a 	bl	800b2b4 <RCCEx_PLL3_Config>
 80099e0:	4603      	mov	r3, r0
 80099e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80099e6:	e004      	b.n	80099f2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80099e8:	2301      	movs	r3, #1
 80099ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80099ee:	e000      	b.n	80099f2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80099f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80099f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d10b      	bne.n	8009a12 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80099fa:	4b26      	ldr	r3, [pc, #152]	@ (8009a94 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80099fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80099fe:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8009a02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009a0a:	4a22      	ldr	r2, [pc, #136]	@ (8009a94 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009a0c:	430b      	orrs	r3, r1
 8009a0e:	6553      	str	r3, [r2, #84]	@ 0x54
 8009a10:	e003      	b.n	8009a1a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009a16:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8009a1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a22:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8009a26:	673b      	str	r3, [r7, #112]	@ 0x70
 8009a28:	2300      	movs	r3, #0
 8009a2a:	677b      	str	r3, [r7, #116]	@ 0x74
 8009a2c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8009a30:	460b      	mov	r3, r1
 8009a32:	4313      	orrs	r3, r2
 8009a34:	d034      	beq.n	8009aa0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8009a36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d003      	beq.n	8009a48 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8009a40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009a44:	d007      	beq.n	8009a56 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8009a46:	e011      	b.n	8009a6c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009a48:	4b12      	ldr	r3, [pc, #72]	@ (8009a94 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009a4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a4c:	4a11      	ldr	r2, [pc, #68]	@ (8009a94 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009a4e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009a52:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8009a54:	e00e      	b.n	8009a74 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009a56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a5a:	3308      	adds	r3, #8
 8009a5c:	2102      	movs	r1, #2
 8009a5e:	4618      	mov	r0, r3
 8009a60:	f001 fb76 	bl	800b150 <RCCEx_PLL2_Config>
 8009a64:	4603      	mov	r3, r0
 8009a66:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8009a6a:	e003      	b.n	8009a74 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8009a6c:	2301      	movs	r3, #1
 8009a6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009a72:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009a74:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d10d      	bne.n	8009a98 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8009a7c:	4b05      	ldr	r3, [pc, #20]	@ (8009a94 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009a7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009a80:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009a84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a88:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009a8a:	4a02      	ldr	r2, [pc, #8]	@ (8009a94 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009a8c:	430b      	orrs	r3, r1
 8009a8e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009a90:	e006      	b.n	8009aa0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8009a92:	bf00      	nop
 8009a94:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a98:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009a9c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009aa0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009aa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aa8:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8009aac:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009aae:	2300      	movs	r3, #0
 8009ab0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009ab2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8009ab6:	460b      	mov	r3, r1
 8009ab8:	4313      	orrs	r3, r2
 8009aba:	d00c      	beq.n	8009ad6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009abc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ac0:	3328      	adds	r3, #40	@ 0x28
 8009ac2:	2102      	movs	r1, #2
 8009ac4:	4618      	mov	r0, r3
 8009ac6:	f001 fbf5 	bl	800b2b4 <RCCEx_PLL3_Config>
 8009aca:	4603      	mov	r3, r0
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d002      	beq.n	8009ad6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8009ad0:	2301      	movs	r3, #1
 8009ad2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009ad6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ada:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ade:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8009ae2:	663b      	str	r3, [r7, #96]	@ 0x60
 8009ae4:	2300      	movs	r3, #0
 8009ae6:	667b      	str	r3, [r7, #100]	@ 0x64
 8009ae8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8009aec:	460b      	mov	r3, r1
 8009aee:	4313      	orrs	r3, r2
 8009af0:	d038      	beq.n	8009b64 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8009af2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009af6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009afa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009afe:	d018      	beq.n	8009b32 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8009b00:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009b04:	d811      	bhi.n	8009b2a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8009b06:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009b0a:	d014      	beq.n	8009b36 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8009b0c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009b10:	d80b      	bhi.n	8009b2a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d011      	beq.n	8009b3a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8009b16:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009b1a:	d106      	bne.n	8009b2a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009b1c:	4bc3      	ldr	r3, [pc, #780]	@ (8009e2c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009b1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b20:	4ac2      	ldr	r2, [pc, #776]	@ (8009e2c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009b22:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009b26:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8009b28:	e008      	b.n	8009b3c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009b2a:	2301      	movs	r3, #1
 8009b2c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009b30:	e004      	b.n	8009b3c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8009b32:	bf00      	nop
 8009b34:	e002      	b.n	8009b3c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8009b36:	bf00      	nop
 8009b38:	e000      	b.n	8009b3c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8009b3a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009b3c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d10b      	bne.n	8009b5c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009b44:	4bb9      	ldr	r3, [pc, #740]	@ (8009e2c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009b46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009b48:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8009b4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b50:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009b54:	4ab5      	ldr	r2, [pc, #724]	@ (8009e2c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009b56:	430b      	orrs	r3, r1
 8009b58:	6553      	str	r3, [r2, #84]	@ 0x54
 8009b5a:	e003      	b.n	8009b64 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b5c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009b60:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009b64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b6c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8009b70:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009b72:	2300      	movs	r3, #0
 8009b74:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009b76:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8009b7a:	460b      	mov	r3, r1
 8009b7c:	4313      	orrs	r3, r2
 8009b7e:	d009      	beq.n	8009b94 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009b80:	4baa      	ldr	r3, [pc, #680]	@ (8009e2c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009b82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009b84:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8009b88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b8c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009b8e:	4aa7      	ldr	r2, [pc, #668]	@ (8009e2c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009b90:	430b      	orrs	r3, r1
 8009b92:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8009b94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b9c:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8009ba0:	653b      	str	r3, [r7, #80]	@ 0x50
 8009ba2:	2300      	movs	r3, #0
 8009ba4:	657b      	str	r3, [r7, #84]	@ 0x54
 8009ba6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8009baa:	460b      	mov	r3, r1
 8009bac:	4313      	orrs	r3, r2
 8009bae:	d00a      	beq.n	8009bc6 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8009bb0:	4b9e      	ldr	r3, [pc, #632]	@ (8009e2c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009bb2:	691b      	ldr	r3, [r3, #16]
 8009bb4:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8009bb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009bbc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8009bc0:	4a9a      	ldr	r2, [pc, #616]	@ (8009e2c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009bc2:	430b      	orrs	r3, r1
 8009bc4:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009bc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009bca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bce:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8009bd2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009bd4:	2300      	movs	r3, #0
 8009bd6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009bd8:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8009bdc:	460b      	mov	r3, r1
 8009bde:	4313      	orrs	r3, r2
 8009be0:	d009      	beq.n	8009bf6 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009be2:	4b92      	ldr	r3, [pc, #584]	@ (8009e2c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009be4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009be6:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8009bea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009bee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009bf0:	4a8e      	ldr	r2, [pc, #568]	@ (8009e2c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009bf2:	430b      	orrs	r3, r1
 8009bf4:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8009bf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bfe:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8009c02:	643b      	str	r3, [r7, #64]	@ 0x40
 8009c04:	2300      	movs	r3, #0
 8009c06:	647b      	str	r3, [r7, #68]	@ 0x44
 8009c08:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8009c0c:	460b      	mov	r3, r1
 8009c0e:	4313      	orrs	r3, r2
 8009c10:	d00e      	beq.n	8009c30 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009c12:	4b86      	ldr	r3, [pc, #536]	@ (8009e2c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009c14:	691b      	ldr	r3, [r3, #16]
 8009c16:	4a85      	ldr	r2, [pc, #532]	@ (8009e2c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009c18:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009c1c:	6113      	str	r3, [r2, #16]
 8009c1e:	4b83      	ldr	r3, [pc, #524]	@ (8009e2c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009c20:	6919      	ldr	r1, [r3, #16]
 8009c22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c26:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8009c2a:	4a80      	ldr	r2, [pc, #512]	@ (8009e2c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009c2c:	430b      	orrs	r3, r1
 8009c2e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8009c30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c38:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8009c3c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009c3e:	2300      	movs	r3, #0
 8009c40:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009c42:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8009c46:	460b      	mov	r3, r1
 8009c48:	4313      	orrs	r3, r2
 8009c4a:	d009      	beq.n	8009c60 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8009c4c:	4b77      	ldr	r3, [pc, #476]	@ (8009e2c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009c4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009c50:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8009c54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009c5a:	4a74      	ldr	r2, [pc, #464]	@ (8009e2c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009c5c:	430b      	orrs	r3, r1
 8009c5e:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009c60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c68:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8009c6c:	633b      	str	r3, [r7, #48]	@ 0x30
 8009c6e:	2300      	movs	r3, #0
 8009c70:	637b      	str	r3, [r7, #52]	@ 0x34
 8009c72:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8009c76:	460b      	mov	r3, r1
 8009c78:	4313      	orrs	r3, r2
 8009c7a:	d00a      	beq.n	8009c92 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009c7c:	4b6b      	ldr	r3, [pc, #428]	@ (8009e2c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009c7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009c80:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8009c84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c88:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009c8c:	4a67      	ldr	r2, [pc, #412]	@ (8009e2c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009c8e:	430b      	orrs	r3, r1
 8009c90:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8009c92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c9a:	2100      	movs	r1, #0
 8009c9c:	62b9      	str	r1, [r7, #40]	@ 0x28
 8009c9e:	f003 0301 	and.w	r3, r3, #1
 8009ca2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009ca4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8009ca8:	460b      	mov	r3, r1
 8009caa:	4313      	orrs	r3, r2
 8009cac:	d011      	beq.n	8009cd2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009cae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009cb2:	3308      	adds	r3, #8
 8009cb4:	2100      	movs	r1, #0
 8009cb6:	4618      	mov	r0, r3
 8009cb8:	f001 fa4a 	bl	800b150 <RCCEx_PLL2_Config>
 8009cbc:	4603      	mov	r3, r0
 8009cbe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8009cc2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d003      	beq.n	8009cd2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009cca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009cce:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8009cd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cda:	2100      	movs	r1, #0
 8009cdc:	6239      	str	r1, [r7, #32]
 8009cde:	f003 0302 	and.w	r3, r3, #2
 8009ce2:	627b      	str	r3, [r7, #36]	@ 0x24
 8009ce4:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8009ce8:	460b      	mov	r3, r1
 8009cea:	4313      	orrs	r3, r2
 8009cec:	d011      	beq.n	8009d12 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009cee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009cf2:	3308      	adds	r3, #8
 8009cf4:	2101      	movs	r1, #1
 8009cf6:	4618      	mov	r0, r3
 8009cf8:	f001 fa2a 	bl	800b150 <RCCEx_PLL2_Config>
 8009cfc:	4603      	mov	r3, r0
 8009cfe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8009d02:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d003      	beq.n	8009d12 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d0a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009d0e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8009d12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d1a:	2100      	movs	r1, #0
 8009d1c:	61b9      	str	r1, [r7, #24]
 8009d1e:	f003 0304 	and.w	r3, r3, #4
 8009d22:	61fb      	str	r3, [r7, #28]
 8009d24:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8009d28:	460b      	mov	r3, r1
 8009d2a:	4313      	orrs	r3, r2
 8009d2c:	d011      	beq.n	8009d52 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009d2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d32:	3308      	adds	r3, #8
 8009d34:	2102      	movs	r1, #2
 8009d36:	4618      	mov	r0, r3
 8009d38:	f001 fa0a 	bl	800b150 <RCCEx_PLL2_Config>
 8009d3c:	4603      	mov	r3, r0
 8009d3e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8009d42:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d003      	beq.n	8009d52 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d4a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009d4e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8009d52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d5a:	2100      	movs	r1, #0
 8009d5c:	6139      	str	r1, [r7, #16]
 8009d5e:	f003 0308 	and.w	r3, r3, #8
 8009d62:	617b      	str	r3, [r7, #20]
 8009d64:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8009d68:	460b      	mov	r3, r1
 8009d6a:	4313      	orrs	r3, r2
 8009d6c:	d011      	beq.n	8009d92 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009d6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d72:	3328      	adds	r3, #40	@ 0x28
 8009d74:	2100      	movs	r1, #0
 8009d76:	4618      	mov	r0, r3
 8009d78:	f001 fa9c 	bl	800b2b4 <RCCEx_PLL3_Config>
 8009d7c:	4603      	mov	r3, r0
 8009d7e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8009d82:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d003      	beq.n	8009d92 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d8a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009d8e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8009d92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d9a:	2100      	movs	r1, #0
 8009d9c:	60b9      	str	r1, [r7, #8]
 8009d9e:	f003 0310 	and.w	r3, r3, #16
 8009da2:	60fb      	str	r3, [r7, #12]
 8009da4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8009da8:	460b      	mov	r3, r1
 8009daa:	4313      	orrs	r3, r2
 8009dac:	d011      	beq.n	8009dd2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009dae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009db2:	3328      	adds	r3, #40	@ 0x28
 8009db4:	2101      	movs	r1, #1
 8009db6:	4618      	mov	r0, r3
 8009db8:	f001 fa7c 	bl	800b2b4 <RCCEx_PLL3_Config>
 8009dbc:	4603      	mov	r3, r0
 8009dbe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8009dc2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d003      	beq.n	8009dd2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009dca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009dce:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8009dd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009dd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dda:	2100      	movs	r1, #0
 8009ddc:	6039      	str	r1, [r7, #0]
 8009dde:	f003 0320 	and.w	r3, r3, #32
 8009de2:	607b      	str	r3, [r7, #4]
 8009de4:	e9d7 1200 	ldrd	r1, r2, [r7]
 8009de8:	460b      	mov	r3, r1
 8009dea:	4313      	orrs	r3, r2
 8009dec:	d011      	beq.n	8009e12 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009dee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009df2:	3328      	adds	r3, #40	@ 0x28
 8009df4:	2102      	movs	r1, #2
 8009df6:	4618      	mov	r0, r3
 8009df8:	f001 fa5c 	bl	800b2b4 <RCCEx_PLL3_Config>
 8009dfc:	4603      	mov	r3, r0
 8009dfe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8009e02:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d003      	beq.n	8009e12 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e0a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009e0e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8009e12:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d101      	bne.n	8009e1e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8009e1a:	2300      	movs	r3, #0
 8009e1c:	e000      	b.n	8009e20 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8009e1e:	2301      	movs	r3, #1
}
 8009e20:	4618      	mov	r0, r3
 8009e22:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8009e26:	46bd      	mov	sp, r7
 8009e28:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009e2c:	58024400 	.word	0x58024400

08009e30 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8009e30:	b580      	push	{r7, lr}
 8009e32:	b090      	sub	sp, #64	@ 0x40
 8009e34:	af00      	add	r7, sp, #0
 8009e36:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8009e3a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009e3e:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8009e42:	430b      	orrs	r3, r1
 8009e44:	f040 8094 	bne.w	8009f70 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8009e48:	4b9e      	ldr	r3, [pc, #632]	@ (800a0c4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009e4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009e4c:	f003 0307 	and.w	r3, r3, #7
 8009e50:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8009e52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e54:	2b04      	cmp	r3, #4
 8009e56:	f200 8087 	bhi.w	8009f68 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8009e5a:	a201      	add	r2, pc, #4	@ (adr r2, 8009e60 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8009e5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e60:	08009e75 	.word	0x08009e75
 8009e64:	08009e9d 	.word	0x08009e9d
 8009e68:	08009ec5 	.word	0x08009ec5
 8009e6c:	08009f61 	.word	0x08009f61
 8009e70:	08009eed 	.word	0x08009eed
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009e74:	4b93      	ldr	r3, [pc, #588]	@ (800a0c4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009e7c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009e80:	d108      	bne.n	8009e94 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009e82:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009e86:	4618      	mov	r0, r3
 8009e88:	f001 f810 	bl	800aeac <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009e8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009e90:	f000 bd45 	b.w	800a91e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009e94:	2300      	movs	r3, #0
 8009e96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009e98:	f000 bd41 	b.w	800a91e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009e9c:	4b89      	ldr	r3, [pc, #548]	@ (800a0c4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009ea4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009ea8:	d108      	bne.n	8009ebc <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009eaa:	f107 0318 	add.w	r3, r7, #24
 8009eae:	4618      	mov	r0, r3
 8009eb0:	f000 fd54 	bl	800a95c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009eb4:	69bb      	ldr	r3, [r7, #24]
 8009eb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009eb8:	f000 bd31 	b.w	800a91e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009ebc:	2300      	movs	r3, #0
 8009ebe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009ec0:	f000 bd2d 	b.w	800a91e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009ec4:	4b7f      	ldr	r3, [pc, #508]	@ (800a0c4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009ecc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009ed0:	d108      	bne.n	8009ee4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009ed2:	f107 030c 	add.w	r3, r7, #12
 8009ed6:	4618      	mov	r0, r3
 8009ed8:	f000 fe94 	bl	800ac04 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009ee0:	f000 bd1d 	b.w	800a91e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009ee4:	2300      	movs	r3, #0
 8009ee6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009ee8:	f000 bd19 	b.w	800a91e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009eec:	4b75      	ldr	r3, [pc, #468]	@ (800a0c4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009eee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009ef0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009ef4:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009ef6:	4b73      	ldr	r3, [pc, #460]	@ (800a0c4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	f003 0304 	and.w	r3, r3, #4
 8009efe:	2b04      	cmp	r3, #4
 8009f00:	d10c      	bne.n	8009f1c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8009f02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d109      	bne.n	8009f1c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009f08:	4b6e      	ldr	r3, [pc, #440]	@ (800a0c4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	08db      	lsrs	r3, r3, #3
 8009f0e:	f003 0303 	and.w	r3, r3, #3
 8009f12:	4a6d      	ldr	r2, [pc, #436]	@ (800a0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8009f14:	fa22 f303 	lsr.w	r3, r2, r3
 8009f18:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009f1a:	e01f      	b.n	8009f5c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009f1c:	4b69      	ldr	r3, [pc, #420]	@ (800a0c4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009f24:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009f28:	d106      	bne.n	8009f38 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8009f2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f2c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009f30:	d102      	bne.n	8009f38 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009f32:	4b66      	ldr	r3, [pc, #408]	@ (800a0cc <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8009f34:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009f36:	e011      	b.n	8009f5c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009f38:	4b62      	ldr	r3, [pc, #392]	@ (800a0c4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009f40:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009f44:	d106      	bne.n	8009f54 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8009f46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f48:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009f4c:	d102      	bne.n	8009f54 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009f4e:	4b60      	ldr	r3, [pc, #384]	@ (800a0d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8009f50:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009f52:	e003      	b.n	8009f5c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009f54:	2300      	movs	r3, #0
 8009f56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009f58:	f000 bce1 	b.w	800a91e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009f5c:	f000 bcdf 	b.w	800a91e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009f60:	4b5c      	ldr	r3, [pc, #368]	@ (800a0d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8009f62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f64:	f000 bcdb 	b.w	800a91e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8009f68:	2300      	movs	r3, #0
 8009f6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f6c:	f000 bcd7 	b.w	800a91e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8009f70:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009f74:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8009f78:	430b      	orrs	r3, r1
 8009f7a:	f040 80ad 	bne.w	800a0d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8009f7e:	4b51      	ldr	r3, [pc, #324]	@ (800a0c4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009f80:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009f82:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8009f86:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8009f88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f8a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009f8e:	d056      	beq.n	800a03e <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8009f90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f92:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009f96:	f200 8090 	bhi.w	800a0ba <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8009f9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f9c:	2bc0      	cmp	r3, #192	@ 0xc0
 8009f9e:	f000 8088 	beq.w	800a0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8009fa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fa4:	2bc0      	cmp	r3, #192	@ 0xc0
 8009fa6:	f200 8088 	bhi.w	800a0ba <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8009faa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fac:	2b80      	cmp	r3, #128	@ 0x80
 8009fae:	d032      	beq.n	800a016 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8009fb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fb2:	2b80      	cmp	r3, #128	@ 0x80
 8009fb4:	f200 8081 	bhi.w	800a0ba <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8009fb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d003      	beq.n	8009fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8009fbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fc0:	2b40      	cmp	r3, #64	@ 0x40
 8009fc2:	d014      	beq.n	8009fee <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8009fc4:	e079      	b.n	800a0ba <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009fc6:	4b3f      	ldr	r3, [pc, #252]	@ (800a0c4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009fce:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009fd2:	d108      	bne.n	8009fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009fd4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009fd8:	4618      	mov	r0, r3
 8009fda:	f000 ff67 	bl	800aeac <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009fde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fe0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009fe2:	f000 bc9c 	b.w	800a91e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009fe6:	2300      	movs	r3, #0
 8009fe8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009fea:	f000 bc98 	b.w	800a91e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009fee:	4b35      	ldr	r3, [pc, #212]	@ (800a0c4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009ff6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009ffa:	d108      	bne.n	800a00e <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009ffc:	f107 0318 	add.w	r3, r7, #24
 800a000:	4618      	mov	r0, r3
 800a002:	f000 fcab 	bl	800a95c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a006:	69bb      	ldr	r3, [r7, #24]
 800a008:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a00a:	f000 bc88 	b.w	800a91e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a00e:	2300      	movs	r3, #0
 800a010:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a012:	f000 bc84 	b.w	800a91e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a016:	4b2b      	ldr	r3, [pc, #172]	@ (800a0c4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a01e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a022:	d108      	bne.n	800a036 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a024:	f107 030c 	add.w	r3, r7, #12
 800a028:	4618      	mov	r0, r3
 800a02a:	f000 fdeb 	bl	800ac04 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a032:	f000 bc74 	b.w	800a91e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a036:	2300      	movs	r3, #0
 800a038:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a03a:	f000 bc70 	b.w	800a91e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a03e:	4b21      	ldr	r3, [pc, #132]	@ (800a0c4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a040:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a042:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a046:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a048:	4b1e      	ldr	r3, [pc, #120]	@ (800a0c4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	f003 0304 	and.w	r3, r3, #4
 800a050:	2b04      	cmp	r3, #4
 800a052:	d10c      	bne.n	800a06e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800a054:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a056:	2b00      	cmp	r3, #0
 800a058:	d109      	bne.n	800a06e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a05a:	4b1a      	ldr	r3, [pc, #104]	@ (800a0c4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	08db      	lsrs	r3, r3, #3
 800a060:	f003 0303 	and.w	r3, r3, #3
 800a064:	4a18      	ldr	r2, [pc, #96]	@ (800a0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a066:	fa22 f303 	lsr.w	r3, r2, r3
 800a06a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a06c:	e01f      	b.n	800a0ae <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a06e:	4b15      	ldr	r3, [pc, #84]	@ (800a0c4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a076:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a07a:	d106      	bne.n	800a08a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800a07c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a07e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a082:	d102      	bne.n	800a08a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a084:	4b11      	ldr	r3, [pc, #68]	@ (800a0cc <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800a086:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a088:	e011      	b.n	800a0ae <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a08a:	4b0e      	ldr	r3, [pc, #56]	@ (800a0c4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a092:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a096:	d106      	bne.n	800a0a6 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800a098:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a09a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a09e:	d102      	bne.n	800a0a6 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a0a0:	4b0b      	ldr	r3, [pc, #44]	@ (800a0d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800a0a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a0a4:	e003      	b.n	800a0ae <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a0a6:	2300      	movs	r3, #0
 800a0a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a0aa:	f000 bc38 	b.w	800a91e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a0ae:	f000 bc36 	b.w	800a91e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a0b2:	4b08      	ldr	r3, [pc, #32]	@ (800a0d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800a0b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a0b6:	f000 bc32 	b.w	800a91e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a0ba:	2300      	movs	r3, #0
 800a0bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a0be:	f000 bc2e 	b.w	800a91e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a0c2:	bf00      	nop
 800a0c4:	58024400 	.word	0x58024400
 800a0c8:	03d09000 	.word	0x03d09000
 800a0cc:	003d0900 	.word	0x003d0900
 800a0d0:	017d7840 	.word	0x017d7840
 800a0d4:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800a0d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a0dc:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800a0e0:	430b      	orrs	r3, r1
 800a0e2:	f040 809c 	bne.w	800a21e <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800a0e6:	4b9e      	ldr	r3, [pc, #632]	@ (800a360 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a0e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a0ea:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800a0ee:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a0f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0f2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a0f6:	d054      	beq.n	800a1a2 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800a0f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0fa:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a0fe:	f200 808b 	bhi.w	800a218 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800a102:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a104:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800a108:	f000 8083 	beq.w	800a212 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800a10c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a10e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800a112:	f200 8081 	bhi.w	800a218 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800a116:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a118:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a11c:	d02f      	beq.n	800a17e <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800a11e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a120:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a124:	d878      	bhi.n	800a218 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800a126:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d004      	beq.n	800a136 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800a12c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a12e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a132:	d012      	beq.n	800a15a <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800a134:	e070      	b.n	800a218 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a136:	4b8a      	ldr	r3, [pc, #552]	@ (800a360 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a13e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a142:	d107      	bne.n	800a154 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a144:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a148:	4618      	mov	r0, r3
 800a14a:	f000 feaf 	bl	800aeac <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a14e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a150:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a152:	e3e4      	b.n	800a91e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a154:	2300      	movs	r3, #0
 800a156:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a158:	e3e1      	b.n	800a91e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a15a:	4b81      	ldr	r3, [pc, #516]	@ (800a360 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a162:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a166:	d107      	bne.n	800a178 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a168:	f107 0318 	add.w	r3, r7, #24
 800a16c:	4618      	mov	r0, r3
 800a16e:	f000 fbf5 	bl	800a95c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a172:	69bb      	ldr	r3, [r7, #24]
 800a174:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a176:	e3d2      	b.n	800a91e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a178:	2300      	movs	r3, #0
 800a17a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a17c:	e3cf      	b.n	800a91e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a17e:	4b78      	ldr	r3, [pc, #480]	@ (800a360 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a186:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a18a:	d107      	bne.n	800a19c <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a18c:	f107 030c 	add.w	r3, r7, #12
 800a190:	4618      	mov	r0, r3
 800a192:	f000 fd37 	bl	800ac04 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a19a:	e3c0      	b.n	800a91e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a19c:	2300      	movs	r3, #0
 800a19e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a1a0:	e3bd      	b.n	800a91e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a1a2:	4b6f      	ldr	r3, [pc, #444]	@ (800a360 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a1a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a1a6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a1aa:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a1ac:	4b6c      	ldr	r3, [pc, #432]	@ (800a360 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	f003 0304 	and.w	r3, r3, #4
 800a1b4:	2b04      	cmp	r3, #4
 800a1b6:	d10c      	bne.n	800a1d2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800a1b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d109      	bne.n	800a1d2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a1be:	4b68      	ldr	r3, [pc, #416]	@ (800a360 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	08db      	lsrs	r3, r3, #3
 800a1c4:	f003 0303 	and.w	r3, r3, #3
 800a1c8:	4a66      	ldr	r2, [pc, #408]	@ (800a364 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800a1ca:	fa22 f303 	lsr.w	r3, r2, r3
 800a1ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a1d0:	e01e      	b.n	800a210 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a1d2:	4b63      	ldr	r3, [pc, #396]	@ (800a360 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a1da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a1de:	d106      	bne.n	800a1ee <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800a1e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a1e2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a1e6:	d102      	bne.n	800a1ee <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a1e8:	4b5f      	ldr	r3, [pc, #380]	@ (800a368 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800a1ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a1ec:	e010      	b.n	800a210 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a1ee:	4b5c      	ldr	r3, [pc, #368]	@ (800a360 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a1f6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a1fa:	d106      	bne.n	800a20a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800a1fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a1fe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a202:	d102      	bne.n	800a20a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a204:	4b59      	ldr	r3, [pc, #356]	@ (800a36c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800a206:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a208:	e002      	b.n	800a210 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a20a:	2300      	movs	r3, #0
 800a20c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a20e:	e386      	b.n	800a91e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a210:	e385      	b.n	800a91e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a212:	4b57      	ldr	r3, [pc, #348]	@ (800a370 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800a214:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a216:	e382      	b.n	800a91e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800a218:	2300      	movs	r3, #0
 800a21a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a21c:	e37f      	b.n	800a91e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800a21e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a222:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800a226:	430b      	orrs	r3, r1
 800a228:	f040 80a7 	bne.w	800a37a <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800a22c:	4b4c      	ldr	r3, [pc, #304]	@ (800a360 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a22e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a230:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800a234:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a236:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a238:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a23c:	d055      	beq.n	800a2ea <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800a23e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a240:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a244:	f200 8096 	bhi.w	800a374 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800a248:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a24a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a24e:	f000 8084 	beq.w	800a35a <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800a252:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a254:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a258:	f200 808c 	bhi.w	800a374 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800a25c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a25e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a262:	d030      	beq.n	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800a264:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a266:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a26a:	f200 8083 	bhi.w	800a374 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800a26e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a270:	2b00      	cmp	r3, #0
 800a272:	d004      	beq.n	800a27e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800a274:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a276:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a27a:	d012      	beq.n	800a2a2 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800a27c:	e07a      	b.n	800a374 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a27e:	4b38      	ldr	r3, [pc, #224]	@ (800a360 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a286:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a28a:	d107      	bne.n	800a29c <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a28c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a290:	4618      	mov	r0, r3
 800a292:	f000 fe0b 	bl	800aeac <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a296:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a298:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a29a:	e340      	b.n	800a91e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a29c:	2300      	movs	r3, #0
 800a29e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a2a0:	e33d      	b.n	800a91e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a2a2:	4b2f      	ldr	r3, [pc, #188]	@ (800a360 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a2aa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a2ae:	d107      	bne.n	800a2c0 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a2b0:	f107 0318 	add.w	r3, r7, #24
 800a2b4:	4618      	mov	r0, r3
 800a2b6:	f000 fb51 	bl	800a95c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a2ba:	69bb      	ldr	r3, [r7, #24]
 800a2bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a2be:	e32e      	b.n	800a91e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a2c0:	2300      	movs	r3, #0
 800a2c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a2c4:	e32b      	b.n	800a91e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a2c6:	4b26      	ldr	r3, [pc, #152]	@ (800a360 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a2ce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a2d2:	d107      	bne.n	800a2e4 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a2d4:	f107 030c 	add.w	r3, r7, #12
 800a2d8:	4618      	mov	r0, r3
 800a2da:	f000 fc93 	bl	800ac04 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a2e2:	e31c      	b.n	800a91e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a2e4:	2300      	movs	r3, #0
 800a2e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a2e8:	e319      	b.n	800a91e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a2ea:	4b1d      	ldr	r3, [pc, #116]	@ (800a360 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a2ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a2ee:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a2f2:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a2f4:	4b1a      	ldr	r3, [pc, #104]	@ (800a360 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	f003 0304 	and.w	r3, r3, #4
 800a2fc:	2b04      	cmp	r3, #4
 800a2fe:	d10c      	bne.n	800a31a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800a300:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a302:	2b00      	cmp	r3, #0
 800a304:	d109      	bne.n	800a31a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a306:	4b16      	ldr	r3, [pc, #88]	@ (800a360 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	08db      	lsrs	r3, r3, #3
 800a30c:	f003 0303 	and.w	r3, r3, #3
 800a310:	4a14      	ldr	r2, [pc, #80]	@ (800a364 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800a312:	fa22 f303 	lsr.w	r3, r2, r3
 800a316:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a318:	e01e      	b.n	800a358 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a31a:	4b11      	ldr	r3, [pc, #68]	@ (800a360 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a322:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a326:	d106      	bne.n	800a336 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800a328:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a32a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a32e:	d102      	bne.n	800a336 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a330:	4b0d      	ldr	r3, [pc, #52]	@ (800a368 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800a332:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a334:	e010      	b.n	800a358 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a336:	4b0a      	ldr	r3, [pc, #40]	@ (800a360 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a33e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a342:	d106      	bne.n	800a352 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800a344:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a346:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a34a:	d102      	bne.n	800a352 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a34c:	4b07      	ldr	r3, [pc, #28]	@ (800a36c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800a34e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a350:	e002      	b.n	800a358 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a352:	2300      	movs	r3, #0
 800a354:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a356:	e2e2      	b.n	800a91e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a358:	e2e1      	b.n	800a91e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a35a:	4b05      	ldr	r3, [pc, #20]	@ (800a370 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800a35c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a35e:	e2de      	b.n	800a91e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a360:	58024400 	.word	0x58024400
 800a364:	03d09000 	.word	0x03d09000
 800a368:	003d0900 	.word	0x003d0900
 800a36c:	017d7840 	.word	0x017d7840
 800a370:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800a374:	2300      	movs	r3, #0
 800a376:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a378:	e2d1      	b.n	800a91e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800a37a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a37e:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800a382:	430b      	orrs	r3, r1
 800a384:	f040 809c 	bne.w	800a4c0 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800a388:	4b93      	ldr	r3, [pc, #588]	@ (800a5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a38a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a38c:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800a390:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a392:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a394:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a398:	d054      	beq.n	800a444 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800a39a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a39c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a3a0:	f200 808b 	bhi.w	800a4ba <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800a3a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3a6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a3aa:	f000 8083 	beq.w	800a4b4 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800a3ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3b0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a3b4:	f200 8081 	bhi.w	800a4ba <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800a3b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3ba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a3be:	d02f      	beq.n	800a420 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800a3c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3c2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a3c6:	d878      	bhi.n	800a4ba <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800a3c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d004      	beq.n	800a3d8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800a3ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3d0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a3d4:	d012      	beq.n	800a3fc <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800a3d6:	e070      	b.n	800a4ba <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a3d8:	4b7f      	ldr	r3, [pc, #508]	@ (800a5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a3e0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a3e4:	d107      	bne.n	800a3f6 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a3e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a3ea:	4618      	mov	r0, r3
 800a3ec:	f000 fd5e 	bl	800aeac <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a3f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a3f4:	e293      	b.n	800a91e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a3f6:	2300      	movs	r3, #0
 800a3f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a3fa:	e290      	b.n	800a91e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a3fc:	4b76      	ldr	r3, [pc, #472]	@ (800a5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a404:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a408:	d107      	bne.n	800a41a <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a40a:	f107 0318 	add.w	r3, r7, #24
 800a40e:	4618      	mov	r0, r3
 800a410:	f000 faa4 	bl	800a95c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a414:	69bb      	ldr	r3, [r7, #24]
 800a416:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a418:	e281      	b.n	800a91e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a41a:	2300      	movs	r3, #0
 800a41c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a41e:	e27e      	b.n	800a91e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a420:	4b6d      	ldr	r3, [pc, #436]	@ (800a5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a428:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a42c:	d107      	bne.n	800a43e <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a42e:	f107 030c 	add.w	r3, r7, #12
 800a432:	4618      	mov	r0, r3
 800a434:	f000 fbe6 	bl	800ac04 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a43c:	e26f      	b.n	800a91e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a43e:	2300      	movs	r3, #0
 800a440:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a442:	e26c      	b.n	800a91e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a444:	4b64      	ldr	r3, [pc, #400]	@ (800a5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a446:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a448:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a44c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a44e:	4b62      	ldr	r3, [pc, #392]	@ (800a5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	f003 0304 	and.w	r3, r3, #4
 800a456:	2b04      	cmp	r3, #4
 800a458:	d10c      	bne.n	800a474 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800a45a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d109      	bne.n	800a474 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a460:	4b5d      	ldr	r3, [pc, #372]	@ (800a5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	08db      	lsrs	r3, r3, #3
 800a466:	f003 0303 	and.w	r3, r3, #3
 800a46a:	4a5c      	ldr	r2, [pc, #368]	@ (800a5dc <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800a46c:	fa22 f303 	lsr.w	r3, r2, r3
 800a470:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a472:	e01e      	b.n	800a4b2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a474:	4b58      	ldr	r3, [pc, #352]	@ (800a5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a47c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a480:	d106      	bne.n	800a490 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800a482:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a484:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a488:	d102      	bne.n	800a490 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a48a:	4b55      	ldr	r3, [pc, #340]	@ (800a5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800a48c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a48e:	e010      	b.n	800a4b2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a490:	4b51      	ldr	r3, [pc, #324]	@ (800a5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a498:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a49c:	d106      	bne.n	800a4ac <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800a49e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a4a0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a4a4:	d102      	bne.n	800a4ac <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a4a6:	4b4f      	ldr	r3, [pc, #316]	@ (800a5e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800a4a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a4aa:	e002      	b.n	800a4b2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a4ac:	2300      	movs	r3, #0
 800a4ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a4b0:	e235      	b.n	800a91e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a4b2:	e234      	b.n	800a91e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a4b4:	4b4c      	ldr	r3, [pc, #304]	@ (800a5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800a4b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a4b8:	e231      	b.n	800a91e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a4ba:	2300      	movs	r3, #0
 800a4bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a4be:	e22e      	b.n	800a91e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800a4c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a4c4:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800a4c8:	430b      	orrs	r3, r1
 800a4ca:	f040 808f 	bne.w	800a5ec <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800a4ce:	4b42      	ldr	r3, [pc, #264]	@ (800a5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a4d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a4d2:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800a4d6:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800a4d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4da:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a4de:	d06b      	beq.n	800a5b8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800a4e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4e2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a4e6:	d874      	bhi.n	800a5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a4e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4ea:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a4ee:	d056      	beq.n	800a59e <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800a4f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4f2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a4f6:	d86c      	bhi.n	800a5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a4f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4fa:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a4fe:	d03b      	beq.n	800a578 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800a500:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a502:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a506:	d864      	bhi.n	800a5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a508:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a50a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a50e:	d021      	beq.n	800a554 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800a510:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a512:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a516:	d85c      	bhi.n	800a5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a518:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d004      	beq.n	800a528 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800a51e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a520:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a524:	d004      	beq.n	800a530 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800a526:	e054      	b.n	800a5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800a528:	f7fe fa4c 	bl	80089c4 <HAL_RCC_GetPCLK1Freq>
 800a52c:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a52e:	e1f6      	b.n	800a91e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a530:	4b29      	ldr	r3, [pc, #164]	@ (800a5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a538:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a53c:	d107      	bne.n	800a54e <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a53e:	f107 0318 	add.w	r3, r7, #24
 800a542:	4618      	mov	r0, r3
 800a544:	f000 fa0a 	bl	800a95c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a548:	69fb      	ldr	r3, [r7, #28]
 800a54a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a54c:	e1e7      	b.n	800a91e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a54e:	2300      	movs	r3, #0
 800a550:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a552:	e1e4      	b.n	800a91e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a554:	4b20      	ldr	r3, [pc, #128]	@ (800a5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a55c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a560:	d107      	bne.n	800a572 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a562:	f107 030c 	add.w	r3, r7, #12
 800a566:	4618      	mov	r0, r3
 800a568:	f000 fb4c 	bl	800ac04 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a56c:	693b      	ldr	r3, [r7, #16]
 800a56e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a570:	e1d5      	b.n	800a91e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a572:	2300      	movs	r3, #0
 800a574:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a576:	e1d2      	b.n	800a91e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a578:	4b17      	ldr	r3, [pc, #92]	@ (800a5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	f003 0304 	and.w	r3, r3, #4
 800a580:	2b04      	cmp	r3, #4
 800a582:	d109      	bne.n	800a598 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a584:	4b14      	ldr	r3, [pc, #80]	@ (800a5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	08db      	lsrs	r3, r3, #3
 800a58a:	f003 0303 	and.w	r3, r3, #3
 800a58e:	4a13      	ldr	r2, [pc, #76]	@ (800a5dc <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800a590:	fa22 f303 	lsr.w	r3, r2, r3
 800a594:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a596:	e1c2      	b.n	800a91e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a598:	2300      	movs	r3, #0
 800a59a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a59c:	e1bf      	b.n	800a91e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800a59e:	4b0e      	ldr	r3, [pc, #56]	@ (800a5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a5a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a5aa:	d102      	bne.n	800a5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800a5ac:	4b0c      	ldr	r3, [pc, #48]	@ (800a5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800a5ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a5b0:	e1b5      	b.n	800a91e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a5b2:	2300      	movs	r3, #0
 800a5b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a5b6:	e1b2      	b.n	800a91e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a5b8:	4b07      	ldr	r3, [pc, #28]	@ (800a5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a5c0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a5c4:	d102      	bne.n	800a5cc <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800a5c6:	4b07      	ldr	r3, [pc, #28]	@ (800a5e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800a5c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a5ca:	e1a8      	b.n	800a91e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a5cc:	2300      	movs	r3, #0
 800a5ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a5d0:	e1a5      	b.n	800a91e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a5d2:	2300      	movs	r3, #0
 800a5d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a5d6:	e1a2      	b.n	800a91e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a5d8:	58024400 	.word	0x58024400
 800a5dc:	03d09000 	.word	0x03d09000
 800a5e0:	003d0900 	.word	0x003d0900
 800a5e4:	017d7840 	.word	0x017d7840
 800a5e8:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800a5ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a5f0:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800a5f4:	430b      	orrs	r3, r1
 800a5f6:	d173      	bne.n	800a6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800a5f8:	4b9c      	ldr	r3, [pc, #624]	@ (800a86c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a5fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a5fc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800a600:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a602:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a604:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a608:	d02f      	beq.n	800a66a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800a60a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a60c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a610:	d863      	bhi.n	800a6da <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800a612:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a614:	2b00      	cmp	r3, #0
 800a616:	d004      	beq.n	800a622 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800a618:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a61a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a61e:	d012      	beq.n	800a646 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800a620:	e05b      	b.n	800a6da <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a622:	4b92      	ldr	r3, [pc, #584]	@ (800a86c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a62a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a62e:	d107      	bne.n	800a640 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a630:	f107 0318 	add.w	r3, r7, #24
 800a634:	4618      	mov	r0, r3
 800a636:	f000 f991 	bl	800a95c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a63a:	69bb      	ldr	r3, [r7, #24]
 800a63c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a63e:	e16e      	b.n	800a91e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a640:	2300      	movs	r3, #0
 800a642:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a644:	e16b      	b.n	800a91e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a646:	4b89      	ldr	r3, [pc, #548]	@ (800a86c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a64e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a652:	d107      	bne.n	800a664 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a654:	f107 030c 	add.w	r3, r7, #12
 800a658:	4618      	mov	r0, r3
 800a65a:	f000 fad3 	bl	800ac04 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800a65e:	697b      	ldr	r3, [r7, #20]
 800a660:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a662:	e15c      	b.n	800a91e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a664:	2300      	movs	r3, #0
 800a666:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a668:	e159      	b.n	800a91e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a66a:	4b80      	ldr	r3, [pc, #512]	@ (800a86c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a66c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a66e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a672:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a674:	4b7d      	ldr	r3, [pc, #500]	@ (800a86c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	f003 0304 	and.w	r3, r3, #4
 800a67c:	2b04      	cmp	r3, #4
 800a67e:	d10c      	bne.n	800a69a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800a680:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a682:	2b00      	cmp	r3, #0
 800a684:	d109      	bne.n	800a69a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a686:	4b79      	ldr	r3, [pc, #484]	@ (800a86c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	08db      	lsrs	r3, r3, #3
 800a68c:	f003 0303 	and.w	r3, r3, #3
 800a690:	4a77      	ldr	r2, [pc, #476]	@ (800a870 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800a692:	fa22 f303 	lsr.w	r3, r2, r3
 800a696:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a698:	e01e      	b.n	800a6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a69a:	4b74      	ldr	r3, [pc, #464]	@ (800a86c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a6a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a6a6:	d106      	bne.n	800a6b6 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800a6a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a6aa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a6ae:	d102      	bne.n	800a6b6 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a6b0:	4b70      	ldr	r3, [pc, #448]	@ (800a874 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800a6b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a6b4:	e010      	b.n	800a6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a6b6:	4b6d      	ldr	r3, [pc, #436]	@ (800a86c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a6be:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a6c2:	d106      	bne.n	800a6d2 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800a6c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a6c6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a6ca:	d102      	bne.n	800a6d2 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a6cc:	4b6a      	ldr	r3, [pc, #424]	@ (800a878 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800a6ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a6d0:	e002      	b.n	800a6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a6d2:	2300      	movs	r3, #0
 800a6d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a6d6:	e122      	b.n	800a91e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a6d8:	e121      	b.n	800a91e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800a6da:	2300      	movs	r3, #0
 800a6dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a6de:	e11e      	b.n	800a91e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800a6e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a6e4:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800a6e8:	430b      	orrs	r3, r1
 800a6ea:	d133      	bne.n	800a754 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800a6ec:	4b5f      	ldr	r3, [pc, #380]	@ (800a86c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a6ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a6f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a6f4:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a6f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d004      	beq.n	800a706 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800a6fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6fe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a702:	d012      	beq.n	800a72a <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800a704:	e023      	b.n	800a74e <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a706:	4b59      	ldr	r3, [pc, #356]	@ (800a86c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a70e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a712:	d107      	bne.n	800a724 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a714:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a718:	4618      	mov	r0, r3
 800a71a:	f000 fbc7 	bl	800aeac <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a71e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a720:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a722:	e0fc      	b.n	800a91e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a724:	2300      	movs	r3, #0
 800a726:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a728:	e0f9      	b.n	800a91e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a72a:	4b50      	ldr	r3, [pc, #320]	@ (800a86c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a732:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a736:	d107      	bne.n	800a748 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a738:	f107 0318 	add.w	r3, r7, #24
 800a73c:	4618      	mov	r0, r3
 800a73e:	f000 f90d 	bl	800a95c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800a742:	6a3b      	ldr	r3, [r7, #32]
 800a744:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a746:	e0ea      	b.n	800a91e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a748:	2300      	movs	r3, #0
 800a74a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a74c:	e0e7      	b.n	800a91e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800a74e:	2300      	movs	r3, #0
 800a750:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a752:	e0e4      	b.n	800a91e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800a754:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a758:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800a75c:	430b      	orrs	r3, r1
 800a75e:	f040 808d 	bne.w	800a87c <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800a762:	4b42      	ldr	r3, [pc, #264]	@ (800a86c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a764:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a766:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800a76a:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a76c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a76e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a772:	d06b      	beq.n	800a84c <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800a774:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a776:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a77a:	d874      	bhi.n	800a866 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800a77c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a77e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a782:	d056      	beq.n	800a832 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800a784:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a786:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a78a:	d86c      	bhi.n	800a866 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800a78c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a78e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a792:	d03b      	beq.n	800a80c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800a794:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a796:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a79a:	d864      	bhi.n	800a866 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800a79c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a79e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a7a2:	d021      	beq.n	800a7e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800a7a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a7aa:	d85c      	bhi.n	800a866 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800a7ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d004      	beq.n	800a7bc <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800a7b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7b4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a7b8:	d004      	beq.n	800a7c4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800a7ba:	e054      	b.n	800a866 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800a7bc:	f000 f8b8 	bl	800a930 <HAL_RCCEx_GetD3PCLK1Freq>
 800a7c0:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a7c2:	e0ac      	b.n	800a91e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a7c4:	4b29      	ldr	r3, [pc, #164]	@ (800a86c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a7cc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a7d0:	d107      	bne.n	800a7e2 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a7d2:	f107 0318 	add.w	r3, r7, #24
 800a7d6:	4618      	mov	r0, r3
 800a7d8:	f000 f8c0 	bl	800a95c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a7dc:	69fb      	ldr	r3, [r7, #28]
 800a7de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a7e0:	e09d      	b.n	800a91e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a7e2:	2300      	movs	r3, #0
 800a7e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a7e6:	e09a      	b.n	800a91e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a7e8:	4b20      	ldr	r3, [pc, #128]	@ (800a86c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a7f0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a7f4:	d107      	bne.n	800a806 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a7f6:	f107 030c 	add.w	r3, r7, #12
 800a7fa:	4618      	mov	r0, r3
 800a7fc:	f000 fa02 	bl	800ac04 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a800:	693b      	ldr	r3, [r7, #16]
 800a802:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a804:	e08b      	b.n	800a91e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a806:	2300      	movs	r3, #0
 800a808:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a80a:	e088      	b.n	800a91e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a80c:	4b17      	ldr	r3, [pc, #92]	@ (800a86c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	f003 0304 	and.w	r3, r3, #4
 800a814:	2b04      	cmp	r3, #4
 800a816:	d109      	bne.n	800a82c <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a818:	4b14      	ldr	r3, [pc, #80]	@ (800a86c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	08db      	lsrs	r3, r3, #3
 800a81e:	f003 0303 	and.w	r3, r3, #3
 800a822:	4a13      	ldr	r2, [pc, #76]	@ (800a870 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800a824:	fa22 f303 	lsr.w	r3, r2, r3
 800a828:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a82a:	e078      	b.n	800a91e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a82c:	2300      	movs	r3, #0
 800a82e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a830:	e075      	b.n	800a91e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800a832:	4b0e      	ldr	r3, [pc, #56]	@ (800a86c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a83a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a83e:	d102      	bne.n	800a846 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800a840:	4b0c      	ldr	r3, [pc, #48]	@ (800a874 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800a842:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a844:	e06b      	b.n	800a91e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a846:	2300      	movs	r3, #0
 800a848:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a84a:	e068      	b.n	800a91e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a84c:	4b07      	ldr	r3, [pc, #28]	@ (800a86c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a854:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a858:	d102      	bne.n	800a860 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800a85a:	4b07      	ldr	r3, [pc, #28]	@ (800a878 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800a85c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a85e:	e05e      	b.n	800a91e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a860:	2300      	movs	r3, #0
 800a862:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a864:	e05b      	b.n	800a91e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800a866:	2300      	movs	r3, #0
 800a868:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a86a:	e058      	b.n	800a91e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a86c:	58024400 	.word	0x58024400
 800a870:	03d09000 	.word	0x03d09000
 800a874:	003d0900 	.word	0x003d0900
 800a878:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800a87c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a880:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800a884:	430b      	orrs	r3, r1
 800a886:	d148      	bne.n	800a91a <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800a888:	4b27      	ldr	r3, [pc, #156]	@ (800a928 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800a88a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a88c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a890:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a892:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a894:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a898:	d02a      	beq.n	800a8f0 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800a89a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a89c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a8a0:	d838      	bhi.n	800a914 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800a8a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d004      	beq.n	800a8b2 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800a8a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8aa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a8ae:	d00d      	beq.n	800a8cc <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800a8b0:	e030      	b.n	800a914 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a8b2:	4b1d      	ldr	r3, [pc, #116]	@ (800a928 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a8ba:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a8be:	d102      	bne.n	800a8c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800a8c0:	4b1a      	ldr	r3, [pc, #104]	@ (800a92c <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800a8c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a8c4:	e02b      	b.n	800a91e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a8c6:	2300      	movs	r3, #0
 800a8c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a8ca:	e028      	b.n	800a91e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a8cc:	4b16      	ldr	r3, [pc, #88]	@ (800a928 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a8d4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a8d8:	d107      	bne.n	800a8ea <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a8da:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a8de:	4618      	mov	r0, r3
 800a8e0:	f000 fae4 	bl	800aeac <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a8e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a8e8:	e019      	b.n	800a91e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a8ea:	2300      	movs	r3, #0
 800a8ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a8ee:	e016      	b.n	800a91e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a8f0:	4b0d      	ldr	r3, [pc, #52]	@ (800a928 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a8f8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a8fc:	d107      	bne.n	800a90e <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a8fe:	f107 0318 	add.w	r3, r7, #24
 800a902:	4618      	mov	r0, r3
 800a904:	f000 f82a 	bl	800a95c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a908:	69fb      	ldr	r3, [r7, #28]
 800a90a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a90c:	e007      	b.n	800a91e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a90e:	2300      	movs	r3, #0
 800a910:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a912:	e004      	b.n	800a91e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a914:	2300      	movs	r3, #0
 800a916:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a918:	e001      	b.n	800a91e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800a91a:	2300      	movs	r3, #0
 800a91c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800a91e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800a920:	4618      	mov	r0, r3
 800a922:	3740      	adds	r7, #64	@ 0x40
 800a924:	46bd      	mov	sp, r7
 800a926:	bd80      	pop	{r7, pc}
 800a928:	58024400 	.word	0x58024400
 800a92c:	017d7840 	.word	0x017d7840

0800a930 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800a930:	b580      	push	{r7, lr}
 800a932:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800a934:	f7fe f816 	bl	8008964 <HAL_RCC_GetHCLKFreq>
 800a938:	4602      	mov	r2, r0
 800a93a:	4b06      	ldr	r3, [pc, #24]	@ (800a954 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800a93c:	6a1b      	ldr	r3, [r3, #32]
 800a93e:	091b      	lsrs	r3, r3, #4
 800a940:	f003 0307 	and.w	r3, r3, #7
 800a944:	4904      	ldr	r1, [pc, #16]	@ (800a958 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800a946:	5ccb      	ldrb	r3, [r1, r3]
 800a948:	f003 031f 	and.w	r3, r3, #31
 800a94c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800a950:	4618      	mov	r0, r3
 800a952:	bd80      	pop	{r7, pc}
 800a954:	58024400 	.word	0x58024400
 800a958:	080149f8 	.word	0x080149f8

0800a95c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800a95c:	b480      	push	{r7}
 800a95e:	b089      	sub	sp, #36	@ 0x24
 800a960:	af00      	add	r7, sp, #0
 800a962:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a964:	4ba1      	ldr	r3, [pc, #644]	@ (800abec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a966:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a968:	f003 0303 	and.w	r3, r3, #3
 800a96c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800a96e:	4b9f      	ldr	r3, [pc, #636]	@ (800abec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a970:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a972:	0b1b      	lsrs	r3, r3, #12
 800a974:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a978:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800a97a:	4b9c      	ldr	r3, [pc, #624]	@ (800abec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a97c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a97e:	091b      	lsrs	r3, r3, #4
 800a980:	f003 0301 	and.w	r3, r3, #1
 800a984:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800a986:	4b99      	ldr	r3, [pc, #612]	@ (800abec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a988:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a98a:	08db      	lsrs	r3, r3, #3
 800a98c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a990:	693a      	ldr	r2, [r7, #16]
 800a992:	fb02 f303 	mul.w	r3, r2, r3
 800a996:	ee07 3a90 	vmov	s15, r3
 800a99a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a99e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800a9a2:	697b      	ldr	r3, [r7, #20]
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	f000 8111 	beq.w	800abcc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800a9aa:	69bb      	ldr	r3, [r7, #24]
 800a9ac:	2b02      	cmp	r3, #2
 800a9ae:	f000 8083 	beq.w	800aab8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800a9b2:	69bb      	ldr	r3, [r7, #24]
 800a9b4:	2b02      	cmp	r3, #2
 800a9b6:	f200 80a1 	bhi.w	800aafc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800a9ba:	69bb      	ldr	r3, [r7, #24]
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d003      	beq.n	800a9c8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800a9c0:	69bb      	ldr	r3, [r7, #24]
 800a9c2:	2b01      	cmp	r3, #1
 800a9c4:	d056      	beq.n	800aa74 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800a9c6:	e099      	b.n	800aafc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a9c8:	4b88      	ldr	r3, [pc, #544]	@ (800abec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	f003 0320 	and.w	r3, r3, #32
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d02d      	beq.n	800aa30 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a9d4:	4b85      	ldr	r3, [pc, #532]	@ (800abec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	08db      	lsrs	r3, r3, #3
 800a9da:	f003 0303 	and.w	r3, r3, #3
 800a9de:	4a84      	ldr	r2, [pc, #528]	@ (800abf0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800a9e0:	fa22 f303 	lsr.w	r3, r2, r3
 800a9e4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a9e6:	68bb      	ldr	r3, [r7, #8]
 800a9e8:	ee07 3a90 	vmov	s15, r3
 800a9ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a9f0:	697b      	ldr	r3, [r7, #20]
 800a9f2:	ee07 3a90 	vmov	s15, r3
 800a9f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a9fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a9fe:	4b7b      	ldr	r3, [pc, #492]	@ (800abec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aa00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa06:	ee07 3a90 	vmov	s15, r3
 800aa0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa0e:	ed97 6a03 	vldr	s12, [r7, #12]
 800aa12:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800abf4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800aa16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aa1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aa1e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800aa22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aa26:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa2a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800aa2e:	e087      	b.n	800ab40 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800aa30:	697b      	ldr	r3, [r7, #20]
 800aa32:	ee07 3a90 	vmov	s15, r3
 800aa36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa3a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800abf8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800aa3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aa42:	4b6a      	ldr	r3, [pc, #424]	@ (800abec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aa44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa4a:	ee07 3a90 	vmov	s15, r3
 800aa4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa52:	ed97 6a03 	vldr	s12, [r7, #12]
 800aa56:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800abf4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800aa5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aa5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aa62:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800aa66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aa6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa6e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800aa72:	e065      	b.n	800ab40 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800aa74:	697b      	ldr	r3, [r7, #20]
 800aa76:	ee07 3a90 	vmov	s15, r3
 800aa7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa7e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800abfc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800aa82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aa86:	4b59      	ldr	r3, [pc, #356]	@ (800abec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aa88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa8e:	ee07 3a90 	vmov	s15, r3
 800aa92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa96:	ed97 6a03 	vldr	s12, [r7, #12]
 800aa9a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800abf4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800aa9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aaa2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aaa6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800aaaa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aaae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aab2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800aab6:	e043      	b.n	800ab40 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800aab8:	697b      	ldr	r3, [r7, #20]
 800aaba:	ee07 3a90 	vmov	s15, r3
 800aabe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aac2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800ac00 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800aac6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aaca:	4b48      	ldr	r3, [pc, #288]	@ (800abec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aacc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aace:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aad2:	ee07 3a90 	vmov	s15, r3
 800aad6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aada:	ed97 6a03 	vldr	s12, [r7, #12]
 800aade:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800abf4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800aae2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aae6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aaea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800aaee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aaf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aaf6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800aafa:	e021      	b.n	800ab40 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800aafc:	697b      	ldr	r3, [r7, #20]
 800aafe:	ee07 3a90 	vmov	s15, r3
 800ab02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab06:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800abfc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800ab0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ab0e:	4b37      	ldr	r3, [pc, #220]	@ (800abec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ab10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab16:	ee07 3a90 	vmov	s15, r3
 800ab1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab1e:	ed97 6a03 	vldr	s12, [r7, #12]
 800ab22:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800abf4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ab26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ab2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ab2e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ab32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ab36:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab3a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ab3e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800ab40:	4b2a      	ldr	r3, [pc, #168]	@ (800abec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ab42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab44:	0a5b      	lsrs	r3, r3, #9
 800ab46:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ab4a:	ee07 3a90 	vmov	s15, r3
 800ab4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab52:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ab56:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ab5a:	edd7 6a07 	vldr	s13, [r7, #28]
 800ab5e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ab62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ab66:	ee17 2a90 	vmov	r2, s15
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800ab6e:	4b1f      	ldr	r3, [pc, #124]	@ (800abec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ab70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab72:	0c1b      	lsrs	r3, r3, #16
 800ab74:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ab78:	ee07 3a90 	vmov	s15, r3
 800ab7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab80:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ab84:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ab88:	edd7 6a07 	vldr	s13, [r7, #28]
 800ab8c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ab90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ab94:	ee17 2a90 	vmov	r2, s15
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800ab9c:	4b13      	ldr	r3, [pc, #76]	@ (800abec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ab9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aba0:	0e1b      	lsrs	r3, r3, #24
 800aba2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800aba6:	ee07 3a90 	vmov	s15, r3
 800abaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800abae:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800abb2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800abb6:	edd7 6a07 	vldr	s13, [r7, #28]
 800abba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800abbe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800abc2:	ee17 2a90 	vmov	r2, s15
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800abca:	e008      	b.n	800abde <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	2200      	movs	r2, #0
 800abd0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	2200      	movs	r2, #0
 800abd6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	2200      	movs	r2, #0
 800abdc:	609a      	str	r2, [r3, #8]
}
 800abde:	bf00      	nop
 800abe0:	3724      	adds	r7, #36	@ 0x24
 800abe2:	46bd      	mov	sp, r7
 800abe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe8:	4770      	bx	lr
 800abea:	bf00      	nop
 800abec:	58024400 	.word	0x58024400
 800abf0:	03d09000 	.word	0x03d09000
 800abf4:	46000000 	.word	0x46000000
 800abf8:	4c742400 	.word	0x4c742400
 800abfc:	4a742400 	.word	0x4a742400
 800ac00:	4bbebc20 	.word	0x4bbebc20

0800ac04 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800ac04:	b480      	push	{r7}
 800ac06:	b089      	sub	sp, #36	@ 0x24
 800ac08:	af00      	add	r7, sp, #0
 800ac0a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ac0c:	4ba1      	ldr	r3, [pc, #644]	@ (800ae94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ac0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac10:	f003 0303 	and.w	r3, r3, #3
 800ac14:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800ac16:	4b9f      	ldr	r3, [pc, #636]	@ (800ae94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ac18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac1a:	0d1b      	lsrs	r3, r3, #20
 800ac1c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ac20:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800ac22:	4b9c      	ldr	r3, [pc, #624]	@ (800ae94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ac24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac26:	0a1b      	lsrs	r3, r3, #8
 800ac28:	f003 0301 	and.w	r3, r3, #1
 800ac2c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800ac2e:	4b99      	ldr	r3, [pc, #612]	@ (800ae94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ac30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ac32:	08db      	lsrs	r3, r3, #3
 800ac34:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ac38:	693a      	ldr	r2, [r7, #16]
 800ac3a:	fb02 f303 	mul.w	r3, r2, r3
 800ac3e:	ee07 3a90 	vmov	s15, r3
 800ac42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac46:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800ac4a:	697b      	ldr	r3, [r7, #20]
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	f000 8111 	beq.w	800ae74 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800ac52:	69bb      	ldr	r3, [r7, #24]
 800ac54:	2b02      	cmp	r3, #2
 800ac56:	f000 8083 	beq.w	800ad60 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800ac5a:	69bb      	ldr	r3, [r7, #24]
 800ac5c:	2b02      	cmp	r3, #2
 800ac5e:	f200 80a1 	bhi.w	800ada4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800ac62:	69bb      	ldr	r3, [r7, #24]
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d003      	beq.n	800ac70 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800ac68:	69bb      	ldr	r3, [r7, #24]
 800ac6a:	2b01      	cmp	r3, #1
 800ac6c:	d056      	beq.n	800ad1c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800ac6e:	e099      	b.n	800ada4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ac70:	4b88      	ldr	r3, [pc, #544]	@ (800ae94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	f003 0320 	and.w	r3, r3, #32
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d02d      	beq.n	800acd8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ac7c:	4b85      	ldr	r3, [pc, #532]	@ (800ae94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	08db      	lsrs	r3, r3, #3
 800ac82:	f003 0303 	and.w	r3, r3, #3
 800ac86:	4a84      	ldr	r2, [pc, #528]	@ (800ae98 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800ac88:	fa22 f303 	lsr.w	r3, r2, r3
 800ac8c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ac8e:	68bb      	ldr	r3, [r7, #8]
 800ac90:	ee07 3a90 	vmov	s15, r3
 800ac94:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac98:	697b      	ldr	r3, [r7, #20]
 800ac9a:	ee07 3a90 	vmov	s15, r3
 800ac9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aca2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aca6:	4b7b      	ldr	r3, [pc, #492]	@ (800ae94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aca8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800acaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800acae:	ee07 3a90 	vmov	s15, r3
 800acb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800acb6:	ed97 6a03 	vldr	s12, [r7, #12]
 800acba:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800ae9c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800acbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800acc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800acc6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800acca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800acce:	ee67 7a27 	vmul.f32	s15, s14, s15
 800acd2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800acd6:	e087      	b.n	800ade8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800acd8:	697b      	ldr	r3, [r7, #20]
 800acda:	ee07 3a90 	vmov	s15, r3
 800acde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ace2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800aea0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800ace6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800acea:	4b6a      	ldr	r3, [pc, #424]	@ (800ae94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800acec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800acee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800acf2:	ee07 3a90 	vmov	s15, r3
 800acf6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800acfa:	ed97 6a03 	vldr	s12, [r7, #12]
 800acfe:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800ae9c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ad02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad0a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ad0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ad12:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad16:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ad1a:	e065      	b.n	800ade8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ad1c:	697b      	ldr	r3, [r7, #20]
 800ad1e:	ee07 3a90 	vmov	s15, r3
 800ad22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad26:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800aea4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800ad2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad2e:	4b59      	ldr	r3, [pc, #356]	@ (800ae94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ad30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad36:	ee07 3a90 	vmov	s15, r3
 800ad3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad3e:	ed97 6a03 	vldr	s12, [r7, #12]
 800ad42:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800ae9c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ad46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad4e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ad52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ad56:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad5a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ad5e:	e043      	b.n	800ade8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ad60:	697b      	ldr	r3, [r7, #20]
 800ad62:	ee07 3a90 	vmov	s15, r3
 800ad66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad6a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800aea8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800ad6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad72:	4b48      	ldr	r3, [pc, #288]	@ (800ae94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ad74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad7a:	ee07 3a90 	vmov	s15, r3
 800ad7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad82:	ed97 6a03 	vldr	s12, [r7, #12]
 800ad86:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800ae9c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ad8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad92:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ad96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ad9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad9e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ada2:	e021      	b.n	800ade8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ada4:	697b      	ldr	r3, [r7, #20]
 800ada6:	ee07 3a90 	vmov	s15, r3
 800adaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800adae:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800aea4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800adb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800adb6:	4b37      	ldr	r3, [pc, #220]	@ (800ae94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800adb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800adba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800adbe:	ee07 3a90 	vmov	s15, r3
 800adc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800adc6:	ed97 6a03 	vldr	s12, [r7, #12]
 800adca:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800ae9c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800adce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800add2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800add6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800adda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800adde:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ade2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ade6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800ade8:	4b2a      	ldr	r3, [pc, #168]	@ (800ae94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800adea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800adec:	0a5b      	lsrs	r3, r3, #9
 800adee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800adf2:	ee07 3a90 	vmov	s15, r3
 800adf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800adfa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800adfe:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ae02:	edd7 6a07 	vldr	s13, [r7, #28]
 800ae06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ae0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ae0e:	ee17 2a90 	vmov	r2, s15
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800ae16:	4b1f      	ldr	r3, [pc, #124]	@ (800ae94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ae18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae1a:	0c1b      	lsrs	r3, r3, #16
 800ae1c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ae20:	ee07 3a90 	vmov	s15, r3
 800ae24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae28:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ae2c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ae30:	edd7 6a07 	vldr	s13, [r7, #28]
 800ae34:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ae38:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ae3c:	ee17 2a90 	vmov	r2, s15
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800ae44:	4b13      	ldr	r3, [pc, #76]	@ (800ae94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ae46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae48:	0e1b      	lsrs	r3, r3, #24
 800ae4a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ae4e:	ee07 3a90 	vmov	s15, r3
 800ae52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae56:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ae5a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ae5e:	edd7 6a07 	vldr	s13, [r7, #28]
 800ae62:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ae66:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ae6a:	ee17 2a90 	vmov	r2, s15
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800ae72:	e008      	b.n	800ae86 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	2200      	movs	r2, #0
 800ae78:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	2200      	movs	r2, #0
 800ae7e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	2200      	movs	r2, #0
 800ae84:	609a      	str	r2, [r3, #8]
}
 800ae86:	bf00      	nop
 800ae88:	3724      	adds	r7, #36	@ 0x24
 800ae8a:	46bd      	mov	sp, r7
 800ae8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae90:	4770      	bx	lr
 800ae92:	bf00      	nop
 800ae94:	58024400 	.word	0x58024400
 800ae98:	03d09000 	.word	0x03d09000
 800ae9c:	46000000 	.word	0x46000000
 800aea0:	4c742400 	.word	0x4c742400
 800aea4:	4a742400 	.word	0x4a742400
 800aea8:	4bbebc20 	.word	0x4bbebc20

0800aeac <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800aeac:	b480      	push	{r7}
 800aeae:	b089      	sub	sp, #36	@ 0x24
 800aeb0:	af00      	add	r7, sp, #0
 800aeb2:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800aeb4:	4ba0      	ldr	r3, [pc, #640]	@ (800b138 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800aeb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aeb8:	f003 0303 	and.w	r3, r3, #3
 800aebc:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800aebe:	4b9e      	ldr	r3, [pc, #632]	@ (800b138 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800aec0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aec2:	091b      	lsrs	r3, r3, #4
 800aec4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800aec8:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800aeca:	4b9b      	ldr	r3, [pc, #620]	@ (800b138 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800aecc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aece:	f003 0301 	and.w	r3, r3, #1
 800aed2:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800aed4:	4b98      	ldr	r3, [pc, #608]	@ (800b138 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800aed6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aed8:	08db      	lsrs	r3, r3, #3
 800aeda:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800aede:	693a      	ldr	r2, [r7, #16]
 800aee0:	fb02 f303 	mul.w	r3, r2, r3
 800aee4:	ee07 3a90 	vmov	s15, r3
 800aee8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aeec:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800aef0:	697b      	ldr	r3, [r7, #20]
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	f000 8111 	beq.w	800b11a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800aef8:	69bb      	ldr	r3, [r7, #24]
 800aefa:	2b02      	cmp	r3, #2
 800aefc:	f000 8083 	beq.w	800b006 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800af00:	69bb      	ldr	r3, [r7, #24]
 800af02:	2b02      	cmp	r3, #2
 800af04:	f200 80a1 	bhi.w	800b04a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800af08:	69bb      	ldr	r3, [r7, #24]
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d003      	beq.n	800af16 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800af0e:	69bb      	ldr	r3, [r7, #24]
 800af10:	2b01      	cmp	r3, #1
 800af12:	d056      	beq.n	800afc2 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800af14:	e099      	b.n	800b04a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800af16:	4b88      	ldr	r3, [pc, #544]	@ (800b138 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	f003 0320 	and.w	r3, r3, #32
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d02d      	beq.n	800af7e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800af22:	4b85      	ldr	r3, [pc, #532]	@ (800b138 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	08db      	lsrs	r3, r3, #3
 800af28:	f003 0303 	and.w	r3, r3, #3
 800af2c:	4a83      	ldr	r2, [pc, #524]	@ (800b13c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800af2e:	fa22 f303 	lsr.w	r3, r2, r3
 800af32:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800af34:	68bb      	ldr	r3, [r7, #8]
 800af36:	ee07 3a90 	vmov	s15, r3
 800af3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af3e:	697b      	ldr	r3, [r7, #20]
 800af40:	ee07 3a90 	vmov	s15, r3
 800af44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af48:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800af4c:	4b7a      	ldr	r3, [pc, #488]	@ (800b138 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800af4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800af50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af54:	ee07 3a90 	vmov	s15, r3
 800af58:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af5c:	ed97 6a03 	vldr	s12, [r7, #12]
 800af60:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800b140 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800af64:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800af68:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800af6c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800af70:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800af74:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af78:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800af7c:	e087      	b.n	800b08e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800af7e:	697b      	ldr	r3, [r7, #20]
 800af80:	ee07 3a90 	vmov	s15, r3
 800af84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af88:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800b144 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800af8c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800af90:	4b69      	ldr	r3, [pc, #420]	@ (800b138 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800af92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800af94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af98:	ee07 3a90 	vmov	s15, r3
 800af9c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800afa0:	ed97 6a03 	vldr	s12, [r7, #12]
 800afa4:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800b140 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800afa8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800afac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800afb0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800afb4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800afb8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800afbc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800afc0:	e065      	b.n	800b08e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800afc2:	697b      	ldr	r3, [r7, #20]
 800afc4:	ee07 3a90 	vmov	s15, r3
 800afc8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800afcc:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800b148 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800afd0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800afd4:	4b58      	ldr	r3, [pc, #352]	@ (800b138 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800afd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800afd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800afdc:	ee07 3a90 	vmov	s15, r3
 800afe0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800afe4:	ed97 6a03 	vldr	s12, [r7, #12]
 800afe8:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800b140 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800afec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aff0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aff4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800aff8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800affc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b000:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b004:	e043      	b.n	800b08e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b006:	697b      	ldr	r3, [r7, #20]
 800b008:	ee07 3a90 	vmov	s15, r3
 800b00c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b010:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800b14c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800b014:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b018:	4b47      	ldr	r3, [pc, #284]	@ (800b138 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b01a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b01c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b020:	ee07 3a90 	vmov	s15, r3
 800b024:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b028:	ed97 6a03 	vldr	s12, [r7, #12]
 800b02c:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800b140 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b030:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b034:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b038:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b03c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b040:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b044:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b048:	e021      	b.n	800b08e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b04a:	697b      	ldr	r3, [r7, #20]
 800b04c:	ee07 3a90 	vmov	s15, r3
 800b050:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b054:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800b144 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b058:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b05c:	4b36      	ldr	r3, [pc, #216]	@ (800b138 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b05e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b060:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b064:	ee07 3a90 	vmov	s15, r3
 800b068:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b06c:	ed97 6a03 	vldr	s12, [r7, #12]
 800b070:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800b140 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b074:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b078:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b07c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b080:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b084:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b088:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b08c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800b08e:	4b2a      	ldr	r3, [pc, #168]	@ (800b138 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b090:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b092:	0a5b      	lsrs	r3, r3, #9
 800b094:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b098:	ee07 3a90 	vmov	s15, r3
 800b09c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b0a0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b0a4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b0a8:	edd7 6a07 	vldr	s13, [r7, #28]
 800b0ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b0b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b0b4:	ee17 2a90 	vmov	r2, s15
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800b0bc:	4b1e      	ldr	r3, [pc, #120]	@ (800b138 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b0be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b0c0:	0c1b      	lsrs	r3, r3, #16
 800b0c2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b0c6:	ee07 3a90 	vmov	s15, r3
 800b0ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b0ce:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b0d2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b0d6:	edd7 6a07 	vldr	s13, [r7, #28]
 800b0da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b0de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b0e2:	ee17 2a90 	vmov	r2, s15
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800b0ea:	4b13      	ldr	r3, [pc, #76]	@ (800b138 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b0ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b0ee:	0e1b      	lsrs	r3, r3, #24
 800b0f0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b0f4:	ee07 3a90 	vmov	s15, r3
 800b0f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b0fc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b100:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b104:	edd7 6a07 	vldr	s13, [r7, #28]
 800b108:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b10c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b110:	ee17 2a90 	vmov	r2, s15
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800b118:	e008      	b.n	800b12c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	2200      	movs	r2, #0
 800b11e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	2200      	movs	r2, #0
 800b124:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	2200      	movs	r2, #0
 800b12a:	609a      	str	r2, [r3, #8]
}
 800b12c:	bf00      	nop
 800b12e:	3724      	adds	r7, #36	@ 0x24
 800b130:	46bd      	mov	sp, r7
 800b132:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b136:	4770      	bx	lr
 800b138:	58024400 	.word	0x58024400
 800b13c:	03d09000 	.word	0x03d09000
 800b140:	46000000 	.word	0x46000000
 800b144:	4c742400 	.word	0x4c742400
 800b148:	4a742400 	.word	0x4a742400
 800b14c:	4bbebc20 	.word	0x4bbebc20

0800b150 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800b150:	b580      	push	{r7, lr}
 800b152:	b084      	sub	sp, #16
 800b154:	af00      	add	r7, sp, #0
 800b156:	6078      	str	r0, [r7, #4]
 800b158:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b15a:	2300      	movs	r3, #0
 800b15c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b15e:	4b53      	ldr	r3, [pc, #332]	@ (800b2ac <RCCEx_PLL2_Config+0x15c>)
 800b160:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b162:	f003 0303 	and.w	r3, r3, #3
 800b166:	2b03      	cmp	r3, #3
 800b168:	d101      	bne.n	800b16e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800b16a:	2301      	movs	r3, #1
 800b16c:	e099      	b.n	800b2a2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800b16e:	4b4f      	ldr	r3, [pc, #316]	@ (800b2ac <RCCEx_PLL2_Config+0x15c>)
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	4a4e      	ldr	r2, [pc, #312]	@ (800b2ac <RCCEx_PLL2_Config+0x15c>)
 800b174:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b178:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b17a:	f7f7 fc0d 	bl	8002998 <HAL_GetTick>
 800b17e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b180:	e008      	b.n	800b194 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b182:	f7f7 fc09 	bl	8002998 <HAL_GetTick>
 800b186:	4602      	mov	r2, r0
 800b188:	68bb      	ldr	r3, [r7, #8]
 800b18a:	1ad3      	subs	r3, r2, r3
 800b18c:	2b02      	cmp	r3, #2
 800b18e:	d901      	bls.n	800b194 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b190:	2303      	movs	r3, #3
 800b192:	e086      	b.n	800b2a2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b194:	4b45      	ldr	r3, [pc, #276]	@ (800b2ac <RCCEx_PLL2_Config+0x15c>)
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d1f0      	bne.n	800b182 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800b1a0:	4b42      	ldr	r3, [pc, #264]	@ (800b2ac <RCCEx_PLL2_Config+0x15c>)
 800b1a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b1a4:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	031b      	lsls	r3, r3, #12
 800b1ae:	493f      	ldr	r1, [pc, #252]	@ (800b2ac <RCCEx_PLL2_Config+0x15c>)
 800b1b0:	4313      	orrs	r3, r2
 800b1b2:	628b      	str	r3, [r1, #40]	@ 0x28
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	685b      	ldr	r3, [r3, #4]
 800b1b8:	3b01      	subs	r3, #1
 800b1ba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	689b      	ldr	r3, [r3, #8]
 800b1c2:	3b01      	subs	r3, #1
 800b1c4:	025b      	lsls	r3, r3, #9
 800b1c6:	b29b      	uxth	r3, r3
 800b1c8:	431a      	orrs	r2, r3
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	68db      	ldr	r3, [r3, #12]
 800b1ce:	3b01      	subs	r3, #1
 800b1d0:	041b      	lsls	r3, r3, #16
 800b1d2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800b1d6:	431a      	orrs	r2, r3
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	691b      	ldr	r3, [r3, #16]
 800b1dc:	3b01      	subs	r3, #1
 800b1de:	061b      	lsls	r3, r3, #24
 800b1e0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800b1e4:	4931      	ldr	r1, [pc, #196]	@ (800b2ac <RCCEx_PLL2_Config+0x15c>)
 800b1e6:	4313      	orrs	r3, r2
 800b1e8:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800b1ea:	4b30      	ldr	r3, [pc, #192]	@ (800b2ac <RCCEx_PLL2_Config+0x15c>)
 800b1ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b1ee:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	695b      	ldr	r3, [r3, #20]
 800b1f6:	492d      	ldr	r1, [pc, #180]	@ (800b2ac <RCCEx_PLL2_Config+0x15c>)
 800b1f8:	4313      	orrs	r3, r2
 800b1fa:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800b1fc:	4b2b      	ldr	r3, [pc, #172]	@ (800b2ac <RCCEx_PLL2_Config+0x15c>)
 800b1fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b200:	f023 0220 	bic.w	r2, r3, #32
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	699b      	ldr	r3, [r3, #24]
 800b208:	4928      	ldr	r1, [pc, #160]	@ (800b2ac <RCCEx_PLL2_Config+0x15c>)
 800b20a:	4313      	orrs	r3, r2
 800b20c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800b20e:	4b27      	ldr	r3, [pc, #156]	@ (800b2ac <RCCEx_PLL2_Config+0x15c>)
 800b210:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b212:	4a26      	ldr	r2, [pc, #152]	@ (800b2ac <RCCEx_PLL2_Config+0x15c>)
 800b214:	f023 0310 	bic.w	r3, r3, #16
 800b218:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800b21a:	4b24      	ldr	r3, [pc, #144]	@ (800b2ac <RCCEx_PLL2_Config+0x15c>)
 800b21c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b21e:	4b24      	ldr	r3, [pc, #144]	@ (800b2b0 <RCCEx_PLL2_Config+0x160>)
 800b220:	4013      	ands	r3, r2
 800b222:	687a      	ldr	r2, [r7, #4]
 800b224:	69d2      	ldr	r2, [r2, #28]
 800b226:	00d2      	lsls	r2, r2, #3
 800b228:	4920      	ldr	r1, [pc, #128]	@ (800b2ac <RCCEx_PLL2_Config+0x15c>)
 800b22a:	4313      	orrs	r3, r2
 800b22c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800b22e:	4b1f      	ldr	r3, [pc, #124]	@ (800b2ac <RCCEx_PLL2_Config+0x15c>)
 800b230:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b232:	4a1e      	ldr	r2, [pc, #120]	@ (800b2ac <RCCEx_PLL2_Config+0x15c>)
 800b234:	f043 0310 	orr.w	r3, r3, #16
 800b238:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b23a:	683b      	ldr	r3, [r7, #0]
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d106      	bne.n	800b24e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800b240:	4b1a      	ldr	r3, [pc, #104]	@ (800b2ac <RCCEx_PLL2_Config+0x15c>)
 800b242:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b244:	4a19      	ldr	r2, [pc, #100]	@ (800b2ac <RCCEx_PLL2_Config+0x15c>)
 800b246:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b24a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b24c:	e00f      	b.n	800b26e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b24e:	683b      	ldr	r3, [r7, #0]
 800b250:	2b01      	cmp	r3, #1
 800b252:	d106      	bne.n	800b262 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800b254:	4b15      	ldr	r3, [pc, #84]	@ (800b2ac <RCCEx_PLL2_Config+0x15c>)
 800b256:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b258:	4a14      	ldr	r2, [pc, #80]	@ (800b2ac <RCCEx_PLL2_Config+0x15c>)
 800b25a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b25e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b260:	e005      	b.n	800b26e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800b262:	4b12      	ldr	r3, [pc, #72]	@ (800b2ac <RCCEx_PLL2_Config+0x15c>)
 800b264:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b266:	4a11      	ldr	r2, [pc, #68]	@ (800b2ac <RCCEx_PLL2_Config+0x15c>)
 800b268:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800b26c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800b26e:	4b0f      	ldr	r3, [pc, #60]	@ (800b2ac <RCCEx_PLL2_Config+0x15c>)
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	4a0e      	ldr	r2, [pc, #56]	@ (800b2ac <RCCEx_PLL2_Config+0x15c>)
 800b274:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800b278:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b27a:	f7f7 fb8d 	bl	8002998 <HAL_GetTick>
 800b27e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b280:	e008      	b.n	800b294 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b282:	f7f7 fb89 	bl	8002998 <HAL_GetTick>
 800b286:	4602      	mov	r2, r0
 800b288:	68bb      	ldr	r3, [r7, #8]
 800b28a:	1ad3      	subs	r3, r2, r3
 800b28c:	2b02      	cmp	r3, #2
 800b28e:	d901      	bls.n	800b294 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b290:	2303      	movs	r3, #3
 800b292:	e006      	b.n	800b2a2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b294:	4b05      	ldr	r3, [pc, #20]	@ (800b2ac <RCCEx_PLL2_Config+0x15c>)
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d0f0      	beq.n	800b282 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800b2a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2a2:	4618      	mov	r0, r3
 800b2a4:	3710      	adds	r7, #16
 800b2a6:	46bd      	mov	sp, r7
 800b2a8:	bd80      	pop	{r7, pc}
 800b2aa:	bf00      	nop
 800b2ac:	58024400 	.word	0x58024400
 800b2b0:	ffff0007 	.word	0xffff0007

0800b2b4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800b2b4:	b580      	push	{r7, lr}
 800b2b6:	b084      	sub	sp, #16
 800b2b8:	af00      	add	r7, sp, #0
 800b2ba:	6078      	str	r0, [r7, #4]
 800b2bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b2be:	2300      	movs	r3, #0
 800b2c0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b2c2:	4b53      	ldr	r3, [pc, #332]	@ (800b410 <RCCEx_PLL3_Config+0x15c>)
 800b2c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b2c6:	f003 0303 	and.w	r3, r3, #3
 800b2ca:	2b03      	cmp	r3, #3
 800b2cc:	d101      	bne.n	800b2d2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800b2ce:	2301      	movs	r3, #1
 800b2d0:	e099      	b.n	800b406 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800b2d2:	4b4f      	ldr	r3, [pc, #316]	@ (800b410 <RCCEx_PLL3_Config+0x15c>)
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	4a4e      	ldr	r2, [pc, #312]	@ (800b410 <RCCEx_PLL3_Config+0x15c>)
 800b2d8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b2dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b2de:	f7f7 fb5b 	bl	8002998 <HAL_GetTick>
 800b2e2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b2e4:	e008      	b.n	800b2f8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b2e6:	f7f7 fb57 	bl	8002998 <HAL_GetTick>
 800b2ea:	4602      	mov	r2, r0
 800b2ec:	68bb      	ldr	r3, [r7, #8]
 800b2ee:	1ad3      	subs	r3, r2, r3
 800b2f0:	2b02      	cmp	r3, #2
 800b2f2:	d901      	bls.n	800b2f8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b2f4:	2303      	movs	r3, #3
 800b2f6:	e086      	b.n	800b406 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b2f8:	4b45      	ldr	r3, [pc, #276]	@ (800b410 <RCCEx_PLL3_Config+0x15c>)
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b300:	2b00      	cmp	r3, #0
 800b302:	d1f0      	bne.n	800b2e6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800b304:	4b42      	ldr	r3, [pc, #264]	@ (800b410 <RCCEx_PLL3_Config+0x15c>)
 800b306:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b308:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	051b      	lsls	r3, r3, #20
 800b312:	493f      	ldr	r1, [pc, #252]	@ (800b410 <RCCEx_PLL3_Config+0x15c>)
 800b314:	4313      	orrs	r3, r2
 800b316:	628b      	str	r3, [r1, #40]	@ 0x28
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	685b      	ldr	r3, [r3, #4]
 800b31c:	3b01      	subs	r3, #1
 800b31e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	689b      	ldr	r3, [r3, #8]
 800b326:	3b01      	subs	r3, #1
 800b328:	025b      	lsls	r3, r3, #9
 800b32a:	b29b      	uxth	r3, r3
 800b32c:	431a      	orrs	r2, r3
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	68db      	ldr	r3, [r3, #12]
 800b332:	3b01      	subs	r3, #1
 800b334:	041b      	lsls	r3, r3, #16
 800b336:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800b33a:	431a      	orrs	r2, r3
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	691b      	ldr	r3, [r3, #16]
 800b340:	3b01      	subs	r3, #1
 800b342:	061b      	lsls	r3, r3, #24
 800b344:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800b348:	4931      	ldr	r1, [pc, #196]	@ (800b410 <RCCEx_PLL3_Config+0x15c>)
 800b34a:	4313      	orrs	r3, r2
 800b34c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800b34e:	4b30      	ldr	r3, [pc, #192]	@ (800b410 <RCCEx_PLL3_Config+0x15c>)
 800b350:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b352:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	695b      	ldr	r3, [r3, #20]
 800b35a:	492d      	ldr	r1, [pc, #180]	@ (800b410 <RCCEx_PLL3_Config+0x15c>)
 800b35c:	4313      	orrs	r3, r2
 800b35e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800b360:	4b2b      	ldr	r3, [pc, #172]	@ (800b410 <RCCEx_PLL3_Config+0x15c>)
 800b362:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b364:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	699b      	ldr	r3, [r3, #24]
 800b36c:	4928      	ldr	r1, [pc, #160]	@ (800b410 <RCCEx_PLL3_Config+0x15c>)
 800b36e:	4313      	orrs	r3, r2
 800b370:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800b372:	4b27      	ldr	r3, [pc, #156]	@ (800b410 <RCCEx_PLL3_Config+0x15c>)
 800b374:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b376:	4a26      	ldr	r2, [pc, #152]	@ (800b410 <RCCEx_PLL3_Config+0x15c>)
 800b378:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b37c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800b37e:	4b24      	ldr	r3, [pc, #144]	@ (800b410 <RCCEx_PLL3_Config+0x15c>)
 800b380:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b382:	4b24      	ldr	r3, [pc, #144]	@ (800b414 <RCCEx_PLL3_Config+0x160>)
 800b384:	4013      	ands	r3, r2
 800b386:	687a      	ldr	r2, [r7, #4]
 800b388:	69d2      	ldr	r2, [r2, #28]
 800b38a:	00d2      	lsls	r2, r2, #3
 800b38c:	4920      	ldr	r1, [pc, #128]	@ (800b410 <RCCEx_PLL3_Config+0x15c>)
 800b38e:	4313      	orrs	r3, r2
 800b390:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800b392:	4b1f      	ldr	r3, [pc, #124]	@ (800b410 <RCCEx_PLL3_Config+0x15c>)
 800b394:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b396:	4a1e      	ldr	r2, [pc, #120]	@ (800b410 <RCCEx_PLL3_Config+0x15c>)
 800b398:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b39c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b39e:	683b      	ldr	r3, [r7, #0]
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d106      	bne.n	800b3b2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800b3a4:	4b1a      	ldr	r3, [pc, #104]	@ (800b410 <RCCEx_PLL3_Config+0x15c>)
 800b3a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b3a8:	4a19      	ldr	r2, [pc, #100]	@ (800b410 <RCCEx_PLL3_Config+0x15c>)
 800b3aa:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800b3ae:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b3b0:	e00f      	b.n	800b3d2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b3b2:	683b      	ldr	r3, [r7, #0]
 800b3b4:	2b01      	cmp	r3, #1
 800b3b6:	d106      	bne.n	800b3c6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800b3b8:	4b15      	ldr	r3, [pc, #84]	@ (800b410 <RCCEx_PLL3_Config+0x15c>)
 800b3ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b3bc:	4a14      	ldr	r2, [pc, #80]	@ (800b410 <RCCEx_PLL3_Config+0x15c>)
 800b3be:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800b3c2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b3c4:	e005      	b.n	800b3d2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800b3c6:	4b12      	ldr	r3, [pc, #72]	@ (800b410 <RCCEx_PLL3_Config+0x15c>)
 800b3c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b3ca:	4a11      	ldr	r2, [pc, #68]	@ (800b410 <RCCEx_PLL3_Config+0x15c>)
 800b3cc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800b3d0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800b3d2:	4b0f      	ldr	r3, [pc, #60]	@ (800b410 <RCCEx_PLL3_Config+0x15c>)
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	4a0e      	ldr	r2, [pc, #56]	@ (800b410 <RCCEx_PLL3_Config+0x15c>)
 800b3d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b3dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b3de:	f7f7 fadb 	bl	8002998 <HAL_GetTick>
 800b3e2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b3e4:	e008      	b.n	800b3f8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b3e6:	f7f7 fad7 	bl	8002998 <HAL_GetTick>
 800b3ea:	4602      	mov	r2, r0
 800b3ec:	68bb      	ldr	r3, [r7, #8]
 800b3ee:	1ad3      	subs	r3, r2, r3
 800b3f0:	2b02      	cmp	r3, #2
 800b3f2:	d901      	bls.n	800b3f8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b3f4:	2303      	movs	r3, #3
 800b3f6:	e006      	b.n	800b406 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b3f8:	4b05      	ldr	r3, [pc, #20]	@ (800b410 <RCCEx_PLL3_Config+0x15c>)
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b400:	2b00      	cmp	r3, #0
 800b402:	d0f0      	beq.n	800b3e6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800b404:	7bfb      	ldrb	r3, [r7, #15]
}
 800b406:	4618      	mov	r0, r3
 800b408:	3710      	adds	r7, #16
 800b40a:	46bd      	mov	sp, r7
 800b40c:	bd80      	pop	{r7, pc}
 800b40e:	bf00      	nop
 800b410:	58024400 	.word	0x58024400
 800b414:	ffff0007 	.word	0xffff0007

0800b418 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b418:	b580      	push	{r7, lr}
 800b41a:	b082      	sub	sp, #8
 800b41c:	af00      	add	r7, sp, #0
 800b41e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	2b00      	cmp	r3, #0
 800b424:	d101      	bne.n	800b42a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b426:	2301      	movs	r3, #1
 800b428:	e049      	b.n	800b4be <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b430:	b2db      	uxtb	r3, r3
 800b432:	2b00      	cmp	r3, #0
 800b434:	d106      	bne.n	800b444 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	2200      	movs	r2, #0
 800b43a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b43e:	6878      	ldr	r0, [r7, #4]
 800b440:	f7f6 ff8e 	bl	8002360 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	2202      	movs	r2, #2
 800b448:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	681a      	ldr	r2, [r3, #0]
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	3304      	adds	r3, #4
 800b454:	4619      	mov	r1, r3
 800b456:	4610      	mov	r0, r2
 800b458:	f000 fea4 	bl	800c1a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	2201      	movs	r2, #1
 800b460:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	2201      	movs	r2, #1
 800b468:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	2201      	movs	r2, #1
 800b470:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	2201      	movs	r2, #1
 800b478:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	2201      	movs	r2, #1
 800b480:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	2201      	movs	r2, #1
 800b488:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	2201      	movs	r2, #1
 800b490:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	2201      	movs	r2, #1
 800b498:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	2201      	movs	r2, #1
 800b4a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	2201      	movs	r2, #1
 800b4a8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	2201      	movs	r2, #1
 800b4b0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	2201      	movs	r2, #1
 800b4b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b4bc:	2300      	movs	r3, #0
}
 800b4be:	4618      	mov	r0, r3
 800b4c0:	3708      	adds	r7, #8
 800b4c2:	46bd      	mov	sp, r7
 800b4c4:	bd80      	pop	{r7, pc}
	...

0800b4c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b4c8:	b480      	push	{r7}
 800b4ca:	b085      	sub	sp, #20
 800b4cc:	af00      	add	r7, sp, #0
 800b4ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b4d6:	b2db      	uxtb	r3, r3
 800b4d8:	2b01      	cmp	r3, #1
 800b4da:	d001      	beq.n	800b4e0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b4dc:	2301      	movs	r3, #1
 800b4de:	e054      	b.n	800b58a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	2202      	movs	r2, #2
 800b4e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	68da      	ldr	r2, [r3, #12]
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	f042 0201 	orr.w	r2, r2, #1
 800b4f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	4a26      	ldr	r2, [pc, #152]	@ (800b598 <HAL_TIM_Base_Start_IT+0xd0>)
 800b4fe:	4293      	cmp	r3, r2
 800b500:	d022      	beq.n	800b548 <HAL_TIM_Base_Start_IT+0x80>
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b50a:	d01d      	beq.n	800b548 <HAL_TIM_Base_Start_IT+0x80>
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	4a22      	ldr	r2, [pc, #136]	@ (800b59c <HAL_TIM_Base_Start_IT+0xd4>)
 800b512:	4293      	cmp	r3, r2
 800b514:	d018      	beq.n	800b548 <HAL_TIM_Base_Start_IT+0x80>
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	4a21      	ldr	r2, [pc, #132]	@ (800b5a0 <HAL_TIM_Base_Start_IT+0xd8>)
 800b51c:	4293      	cmp	r3, r2
 800b51e:	d013      	beq.n	800b548 <HAL_TIM_Base_Start_IT+0x80>
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	4a1f      	ldr	r2, [pc, #124]	@ (800b5a4 <HAL_TIM_Base_Start_IT+0xdc>)
 800b526:	4293      	cmp	r3, r2
 800b528:	d00e      	beq.n	800b548 <HAL_TIM_Base_Start_IT+0x80>
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	4a1e      	ldr	r2, [pc, #120]	@ (800b5a8 <HAL_TIM_Base_Start_IT+0xe0>)
 800b530:	4293      	cmp	r3, r2
 800b532:	d009      	beq.n	800b548 <HAL_TIM_Base_Start_IT+0x80>
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	4a1c      	ldr	r2, [pc, #112]	@ (800b5ac <HAL_TIM_Base_Start_IT+0xe4>)
 800b53a:	4293      	cmp	r3, r2
 800b53c:	d004      	beq.n	800b548 <HAL_TIM_Base_Start_IT+0x80>
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	4a1b      	ldr	r2, [pc, #108]	@ (800b5b0 <HAL_TIM_Base_Start_IT+0xe8>)
 800b544:	4293      	cmp	r3, r2
 800b546:	d115      	bne.n	800b574 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	689a      	ldr	r2, [r3, #8]
 800b54e:	4b19      	ldr	r3, [pc, #100]	@ (800b5b4 <HAL_TIM_Base_Start_IT+0xec>)
 800b550:	4013      	ands	r3, r2
 800b552:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	2b06      	cmp	r3, #6
 800b558:	d015      	beq.n	800b586 <HAL_TIM_Base_Start_IT+0xbe>
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b560:	d011      	beq.n	800b586 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	681a      	ldr	r2, [r3, #0]
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	f042 0201 	orr.w	r2, r2, #1
 800b570:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b572:	e008      	b.n	800b586 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	681a      	ldr	r2, [r3, #0]
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	f042 0201 	orr.w	r2, r2, #1
 800b582:	601a      	str	r2, [r3, #0]
 800b584:	e000      	b.n	800b588 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b586:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b588:	2300      	movs	r3, #0
}
 800b58a:	4618      	mov	r0, r3
 800b58c:	3714      	adds	r7, #20
 800b58e:	46bd      	mov	sp, r7
 800b590:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b594:	4770      	bx	lr
 800b596:	bf00      	nop
 800b598:	40010000 	.word	0x40010000
 800b59c:	40000400 	.word	0x40000400
 800b5a0:	40000800 	.word	0x40000800
 800b5a4:	40000c00 	.word	0x40000c00
 800b5a8:	40010400 	.word	0x40010400
 800b5ac:	40001800 	.word	0x40001800
 800b5b0:	40014000 	.word	0x40014000
 800b5b4:	00010007 	.word	0x00010007

0800b5b8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b5b8:	b580      	push	{r7, lr}
 800b5ba:	b082      	sub	sp, #8
 800b5bc:	af00      	add	r7, sp, #0
 800b5be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d101      	bne.n	800b5ca <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b5c6:	2301      	movs	r3, #1
 800b5c8:	e049      	b.n	800b65e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b5d0:	b2db      	uxtb	r3, r3
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d106      	bne.n	800b5e4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	2200      	movs	r2, #0
 800b5da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b5de:	6878      	ldr	r0, [r7, #4]
 800b5e0:	f7f6 fd92 	bl	8002108 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	2202      	movs	r2, #2
 800b5e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	681a      	ldr	r2, [r3, #0]
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	3304      	adds	r3, #4
 800b5f4:	4619      	mov	r1, r3
 800b5f6:	4610      	mov	r0, r2
 800b5f8:	f000 fdd4 	bl	800c1a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	2201      	movs	r2, #1
 800b600:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	2201      	movs	r2, #1
 800b608:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	2201      	movs	r2, #1
 800b610:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	2201      	movs	r2, #1
 800b618:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	2201      	movs	r2, #1
 800b620:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	2201      	movs	r2, #1
 800b628:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	2201      	movs	r2, #1
 800b630:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	2201      	movs	r2, #1
 800b638:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	2201      	movs	r2, #1
 800b640:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	2201      	movs	r2, #1
 800b648:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	2201      	movs	r2, #1
 800b650:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	2201      	movs	r2, #1
 800b658:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b65c:	2300      	movs	r3, #0
}
 800b65e:	4618      	mov	r0, r3
 800b660:	3708      	adds	r7, #8
 800b662:	46bd      	mov	sp, r7
 800b664:	bd80      	pop	{r7, pc}
	...

0800b668 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b668:	b580      	push	{r7, lr}
 800b66a:	b084      	sub	sp, #16
 800b66c:	af00      	add	r7, sp, #0
 800b66e:	6078      	str	r0, [r7, #4]
 800b670:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800b672:	683b      	ldr	r3, [r7, #0]
 800b674:	2b00      	cmp	r3, #0
 800b676:	d109      	bne.n	800b68c <HAL_TIM_PWM_Start+0x24>
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800b67e:	b2db      	uxtb	r3, r3
 800b680:	2b01      	cmp	r3, #1
 800b682:	bf14      	ite	ne
 800b684:	2301      	movne	r3, #1
 800b686:	2300      	moveq	r3, #0
 800b688:	b2db      	uxtb	r3, r3
 800b68a:	e03c      	b.n	800b706 <HAL_TIM_PWM_Start+0x9e>
 800b68c:	683b      	ldr	r3, [r7, #0]
 800b68e:	2b04      	cmp	r3, #4
 800b690:	d109      	bne.n	800b6a6 <HAL_TIM_PWM_Start+0x3e>
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800b698:	b2db      	uxtb	r3, r3
 800b69a:	2b01      	cmp	r3, #1
 800b69c:	bf14      	ite	ne
 800b69e:	2301      	movne	r3, #1
 800b6a0:	2300      	moveq	r3, #0
 800b6a2:	b2db      	uxtb	r3, r3
 800b6a4:	e02f      	b.n	800b706 <HAL_TIM_PWM_Start+0x9e>
 800b6a6:	683b      	ldr	r3, [r7, #0]
 800b6a8:	2b08      	cmp	r3, #8
 800b6aa:	d109      	bne.n	800b6c0 <HAL_TIM_PWM_Start+0x58>
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800b6b2:	b2db      	uxtb	r3, r3
 800b6b4:	2b01      	cmp	r3, #1
 800b6b6:	bf14      	ite	ne
 800b6b8:	2301      	movne	r3, #1
 800b6ba:	2300      	moveq	r3, #0
 800b6bc:	b2db      	uxtb	r3, r3
 800b6be:	e022      	b.n	800b706 <HAL_TIM_PWM_Start+0x9e>
 800b6c0:	683b      	ldr	r3, [r7, #0]
 800b6c2:	2b0c      	cmp	r3, #12
 800b6c4:	d109      	bne.n	800b6da <HAL_TIM_PWM_Start+0x72>
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b6cc:	b2db      	uxtb	r3, r3
 800b6ce:	2b01      	cmp	r3, #1
 800b6d0:	bf14      	ite	ne
 800b6d2:	2301      	movne	r3, #1
 800b6d4:	2300      	moveq	r3, #0
 800b6d6:	b2db      	uxtb	r3, r3
 800b6d8:	e015      	b.n	800b706 <HAL_TIM_PWM_Start+0x9e>
 800b6da:	683b      	ldr	r3, [r7, #0]
 800b6dc:	2b10      	cmp	r3, #16
 800b6de:	d109      	bne.n	800b6f4 <HAL_TIM_PWM_Start+0x8c>
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800b6e6:	b2db      	uxtb	r3, r3
 800b6e8:	2b01      	cmp	r3, #1
 800b6ea:	bf14      	ite	ne
 800b6ec:	2301      	movne	r3, #1
 800b6ee:	2300      	moveq	r3, #0
 800b6f0:	b2db      	uxtb	r3, r3
 800b6f2:	e008      	b.n	800b706 <HAL_TIM_PWM_Start+0x9e>
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800b6fa:	b2db      	uxtb	r3, r3
 800b6fc:	2b01      	cmp	r3, #1
 800b6fe:	bf14      	ite	ne
 800b700:	2301      	movne	r3, #1
 800b702:	2300      	moveq	r3, #0
 800b704:	b2db      	uxtb	r3, r3
 800b706:	2b00      	cmp	r3, #0
 800b708:	d001      	beq.n	800b70e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800b70a:	2301      	movs	r3, #1
 800b70c:	e0a1      	b.n	800b852 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b70e:	683b      	ldr	r3, [r7, #0]
 800b710:	2b00      	cmp	r3, #0
 800b712:	d104      	bne.n	800b71e <HAL_TIM_PWM_Start+0xb6>
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	2202      	movs	r2, #2
 800b718:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b71c:	e023      	b.n	800b766 <HAL_TIM_PWM_Start+0xfe>
 800b71e:	683b      	ldr	r3, [r7, #0]
 800b720:	2b04      	cmp	r3, #4
 800b722:	d104      	bne.n	800b72e <HAL_TIM_PWM_Start+0xc6>
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	2202      	movs	r2, #2
 800b728:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b72c:	e01b      	b.n	800b766 <HAL_TIM_PWM_Start+0xfe>
 800b72e:	683b      	ldr	r3, [r7, #0]
 800b730:	2b08      	cmp	r3, #8
 800b732:	d104      	bne.n	800b73e <HAL_TIM_PWM_Start+0xd6>
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	2202      	movs	r2, #2
 800b738:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b73c:	e013      	b.n	800b766 <HAL_TIM_PWM_Start+0xfe>
 800b73e:	683b      	ldr	r3, [r7, #0]
 800b740:	2b0c      	cmp	r3, #12
 800b742:	d104      	bne.n	800b74e <HAL_TIM_PWM_Start+0xe6>
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	2202      	movs	r2, #2
 800b748:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b74c:	e00b      	b.n	800b766 <HAL_TIM_PWM_Start+0xfe>
 800b74e:	683b      	ldr	r3, [r7, #0]
 800b750:	2b10      	cmp	r3, #16
 800b752:	d104      	bne.n	800b75e <HAL_TIM_PWM_Start+0xf6>
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	2202      	movs	r2, #2
 800b758:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b75c:	e003      	b.n	800b766 <HAL_TIM_PWM_Start+0xfe>
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	2202      	movs	r2, #2
 800b762:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	2201      	movs	r2, #1
 800b76c:	6839      	ldr	r1, [r7, #0]
 800b76e:	4618      	mov	r0, r3
 800b770:	f001 f932 	bl	800c9d8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	4a38      	ldr	r2, [pc, #224]	@ (800b85c <HAL_TIM_PWM_Start+0x1f4>)
 800b77a:	4293      	cmp	r3, r2
 800b77c:	d013      	beq.n	800b7a6 <HAL_TIM_PWM_Start+0x13e>
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	4a37      	ldr	r2, [pc, #220]	@ (800b860 <HAL_TIM_PWM_Start+0x1f8>)
 800b784:	4293      	cmp	r3, r2
 800b786:	d00e      	beq.n	800b7a6 <HAL_TIM_PWM_Start+0x13e>
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	4a35      	ldr	r2, [pc, #212]	@ (800b864 <HAL_TIM_PWM_Start+0x1fc>)
 800b78e:	4293      	cmp	r3, r2
 800b790:	d009      	beq.n	800b7a6 <HAL_TIM_PWM_Start+0x13e>
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	4a34      	ldr	r2, [pc, #208]	@ (800b868 <HAL_TIM_PWM_Start+0x200>)
 800b798:	4293      	cmp	r3, r2
 800b79a:	d004      	beq.n	800b7a6 <HAL_TIM_PWM_Start+0x13e>
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	4a32      	ldr	r2, [pc, #200]	@ (800b86c <HAL_TIM_PWM_Start+0x204>)
 800b7a2:	4293      	cmp	r3, r2
 800b7a4:	d101      	bne.n	800b7aa <HAL_TIM_PWM_Start+0x142>
 800b7a6:	2301      	movs	r3, #1
 800b7a8:	e000      	b.n	800b7ac <HAL_TIM_PWM_Start+0x144>
 800b7aa:	2300      	movs	r3, #0
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d007      	beq.n	800b7c0 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800b7be:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	4a25      	ldr	r2, [pc, #148]	@ (800b85c <HAL_TIM_PWM_Start+0x1f4>)
 800b7c6:	4293      	cmp	r3, r2
 800b7c8:	d022      	beq.n	800b810 <HAL_TIM_PWM_Start+0x1a8>
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b7d2:	d01d      	beq.n	800b810 <HAL_TIM_PWM_Start+0x1a8>
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	4a25      	ldr	r2, [pc, #148]	@ (800b870 <HAL_TIM_PWM_Start+0x208>)
 800b7da:	4293      	cmp	r3, r2
 800b7dc:	d018      	beq.n	800b810 <HAL_TIM_PWM_Start+0x1a8>
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	4a24      	ldr	r2, [pc, #144]	@ (800b874 <HAL_TIM_PWM_Start+0x20c>)
 800b7e4:	4293      	cmp	r3, r2
 800b7e6:	d013      	beq.n	800b810 <HAL_TIM_PWM_Start+0x1a8>
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	4a22      	ldr	r2, [pc, #136]	@ (800b878 <HAL_TIM_PWM_Start+0x210>)
 800b7ee:	4293      	cmp	r3, r2
 800b7f0:	d00e      	beq.n	800b810 <HAL_TIM_PWM_Start+0x1a8>
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	4a1a      	ldr	r2, [pc, #104]	@ (800b860 <HAL_TIM_PWM_Start+0x1f8>)
 800b7f8:	4293      	cmp	r3, r2
 800b7fa:	d009      	beq.n	800b810 <HAL_TIM_PWM_Start+0x1a8>
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	4a1e      	ldr	r2, [pc, #120]	@ (800b87c <HAL_TIM_PWM_Start+0x214>)
 800b802:	4293      	cmp	r3, r2
 800b804:	d004      	beq.n	800b810 <HAL_TIM_PWM_Start+0x1a8>
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	4a16      	ldr	r2, [pc, #88]	@ (800b864 <HAL_TIM_PWM_Start+0x1fc>)
 800b80c:	4293      	cmp	r3, r2
 800b80e:	d115      	bne.n	800b83c <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	689a      	ldr	r2, [r3, #8]
 800b816:	4b1a      	ldr	r3, [pc, #104]	@ (800b880 <HAL_TIM_PWM_Start+0x218>)
 800b818:	4013      	ands	r3, r2
 800b81a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	2b06      	cmp	r3, #6
 800b820:	d015      	beq.n	800b84e <HAL_TIM_PWM_Start+0x1e6>
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b828:	d011      	beq.n	800b84e <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	681a      	ldr	r2, [r3, #0]
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	f042 0201 	orr.w	r2, r2, #1
 800b838:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b83a:	e008      	b.n	800b84e <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	681a      	ldr	r2, [r3, #0]
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	f042 0201 	orr.w	r2, r2, #1
 800b84a:	601a      	str	r2, [r3, #0]
 800b84c:	e000      	b.n	800b850 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b84e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b850:	2300      	movs	r3, #0
}
 800b852:	4618      	mov	r0, r3
 800b854:	3710      	adds	r7, #16
 800b856:	46bd      	mov	sp, r7
 800b858:	bd80      	pop	{r7, pc}
 800b85a:	bf00      	nop
 800b85c:	40010000 	.word	0x40010000
 800b860:	40010400 	.word	0x40010400
 800b864:	40014000 	.word	0x40014000
 800b868:	40014400 	.word	0x40014400
 800b86c:	40014800 	.word	0x40014800
 800b870:	40000400 	.word	0x40000400
 800b874:	40000800 	.word	0x40000800
 800b878:	40000c00 	.word	0x40000c00
 800b87c:	40001800 	.word	0x40001800
 800b880:	00010007 	.word	0x00010007

0800b884 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800b884:	b580      	push	{r7, lr}
 800b886:	b086      	sub	sp, #24
 800b888:	af00      	add	r7, sp, #0
 800b88a:	6078      	str	r0, [r7, #4]
 800b88c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	2b00      	cmp	r3, #0
 800b892:	d101      	bne.n	800b898 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800b894:	2301      	movs	r3, #1
 800b896:	e08f      	b.n	800b9b8 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b89e:	b2db      	uxtb	r3, r3
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d106      	bne.n	800b8b2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	2200      	movs	r2, #0
 800b8a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800b8ac:	6878      	ldr	r0, [r7, #4]
 800b8ae:	f7f6 fb2f 	bl	8001f10 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	2202      	movs	r2, #2
 800b8b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	6899      	ldr	r1, [r3, #8]
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	681a      	ldr	r2, [r3, #0]
 800b8c4:	4b3e      	ldr	r3, [pc, #248]	@ (800b9c0 <HAL_TIM_Encoder_Init+0x13c>)
 800b8c6:	400b      	ands	r3, r1
 800b8c8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	681a      	ldr	r2, [r3, #0]
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	3304      	adds	r3, #4
 800b8d2:	4619      	mov	r1, r3
 800b8d4:	4610      	mov	r0, r2
 800b8d6:	f000 fc65 	bl	800c1a4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	689b      	ldr	r3, [r3, #8]
 800b8e0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	699b      	ldr	r3, [r3, #24]
 800b8e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	6a1b      	ldr	r3, [r3, #32]
 800b8f0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800b8f2:	683b      	ldr	r3, [r7, #0]
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	697a      	ldr	r2, [r7, #20]
 800b8f8:	4313      	orrs	r3, r2
 800b8fa:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800b8fc:	693a      	ldr	r2, [r7, #16]
 800b8fe:	4b31      	ldr	r3, [pc, #196]	@ (800b9c4 <HAL_TIM_Encoder_Init+0x140>)
 800b900:	4013      	ands	r3, r2
 800b902:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800b904:	683b      	ldr	r3, [r7, #0]
 800b906:	689a      	ldr	r2, [r3, #8]
 800b908:	683b      	ldr	r3, [r7, #0]
 800b90a:	699b      	ldr	r3, [r3, #24]
 800b90c:	021b      	lsls	r3, r3, #8
 800b90e:	4313      	orrs	r3, r2
 800b910:	693a      	ldr	r2, [r7, #16]
 800b912:	4313      	orrs	r3, r2
 800b914:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800b916:	693a      	ldr	r2, [r7, #16]
 800b918:	4b2b      	ldr	r3, [pc, #172]	@ (800b9c8 <HAL_TIM_Encoder_Init+0x144>)
 800b91a:	4013      	ands	r3, r2
 800b91c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800b91e:	693a      	ldr	r2, [r7, #16]
 800b920:	4b2a      	ldr	r3, [pc, #168]	@ (800b9cc <HAL_TIM_Encoder_Init+0x148>)
 800b922:	4013      	ands	r3, r2
 800b924:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800b926:	683b      	ldr	r3, [r7, #0]
 800b928:	68da      	ldr	r2, [r3, #12]
 800b92a:	683b      	ldr	r3, [r7, #0]
 800b92c:	69db      	ldr	r3, [r3, #28]
 800b92e:	021b      	lsls	r3, r3, #8
 800b930:	4313      	orrs	r3, r2
 800b932:	693a      	ldr	r2, [r7, #16]
 800b934:	4313      	orrs	r3, r2
 800b936:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800b938:	683b      	ldr	r3, [r7, #0]
 800b93a:	691b      	ldr	r3, [r3, #16]
 800b93c:	011a      	lsls	r2, r3, #4
 800b93e:	683b      	ldr	r3, [r7, #0]
 800b940:	6a1b      	ldr	r3, [r3, #32]
 800b942:	031b      	lsls	r3, r3, #12
 800b944:	4313      	orrs	r3, r2
 800b946:	693a      	ldr	r2, [r7, #16]
 800b948:	4313      	orrs	r3, r2
 800b94a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800b952:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800b95a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800b95c:	683b      	ldr	r3, [r7, #0]
 800b95e:	685a      	ldr	r2, [r3, #4]
 800b960:	683b      	ldr	r3, [r7, #0]
 800b962:	695b      	ldr	r3, [r3, #20]
 800b964:	011b      	lsls	r3, r3, #4
 800b966:	4313      	orrs	r3, r2
 800b968:	68fa      	ldr	r2, [r7, #12]
 800b96a:	4313      	orrs	r3, r2
 800b96c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	697a      	ldr	r2, [r7, #20]
 800b974:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	693a      	ldr	r2, [r7, #16]
 800b97c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	68fa      	ldr	r2, [r7, #12]
 800b984:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	2201      	movs	r2, #1
 800b98a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	2201      	movs	r2, #1
 800b992:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	2201      	movs	r2, #1
 800b99a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	2201      	movs	r2, #1
 800b9a2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	2201      	movs	r2, #1
 800b9aa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	2201      	movs	r2, #1
 800b9b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b9b6:	2300      	movs	r3, #0
}
 800b9b8:	4618      	mov	r0, r3
 800b9ba:	3718      	adds	r7, #24
 800b9bc:	46bd      	mov	sp, r7
 800b9be:	bd80      	pop	{r7, pc}
 800b9c0:	fffebff8 	.word	0xfffebff8
 800b9c4:	fffffcfc 	.word	0xfffffcfc
 800b9c8:	fffff3f3 	.word	0xfffff3f3
 800b9cc:	ffff0f0f 	.word	0xffff0f0f

0800b9d0 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b9d0:	b580      	push	{r7, lr}
 800b9d2:	b084      	sub	sp, #16
 800b9d4:	af00      	add	r7, sp, #0
 800b9d6:	6078      	str	r0, [r7, #4]
 800b9d8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800b9e0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800b9e8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b9f0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b9f8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800b9fa:	683b      	ldr	r3, [r7, #0]
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d110      	bne.n	800ba22 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800ba00:	7bfb      	ldrb	r3, [r7, #15]
 800ba02:	2b01      	cmp	r3, #1
 800ba04:	d102      	bne.n	800ba0c <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800ba06:	7b7b      	ldrb	r3, [r7, #13]
 800ba08:	2b01      	cmp	r3, #1
 800ba0a:	d001      	beq.n	800ba10 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 800ba0c:	2301      	movs	r3, #1
 800ba0e:	e089      	b.n	800bb24 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	2202      	movs	r2, #2
 800ba14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	2202      	movs	r2, #2
 800ba1c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ba20:	e031      	b.n	800ba86 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800ba22:	683b      	ldr	r3, [r7, #0]
 800ba24:	2b04      	cmp	r3, #4
 800ba26:	d110      	bne.n	800ba4a <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800ba28:	7bbb      	ldrb	r3, [r7, #14]
 800ba2a:	2b01      	cmp	r3, #1
 800ba2c:	d102      	bne.n	800ba34 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800ba2e:	7b3b      	ldrb	r3, [r7, #12]
 800ba30:	2b01      	cmp	r3, #1
 800ba32:	d001      	beq.n	800ba38 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 800ba34:	2301      	movs	r3, #1
 800ba36:	e075      	b.n	800bb24 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	2202      	movs	r2, #2
 800ba3c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	2202      	movs	r2, #2
 800ba44:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ba48:	e01d      	b.n	800ba86 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800ba4a:	7bfb      	ldrb	r3, [r7, #15]
 800ba4c:	2b01      	cmp	r3, #1
 800ba4e:	d108      	bne.n	800ba62 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800ba50:	7bbb      	ldrb	r3, [r7, #14]
 800ba52:	2b01      	cmp	r3, #1
 800ba54:	d105      	bne.n	800ba62 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800ba56:	7b7b      	ldrb	r3, [r7, #13]
 800ba58:	2b01      	cmp	r3, #1
 800ba5a:	d102      	bne.n	800ba62 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800ba5c:	7b3b      	ldrb	r3, [r7, #12]
 800ba5e:	2b01      	cmp	r3, #1
 800ba60:	d001      	beq.n	800ba66 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 800ba62:	2301      	movs	r3, #1
 800ba64:	e05e      	b.n	800bb24 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	2202      	movs	r2, #2
 800ba6a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	2202      	movs	r2, #2
 800ba72:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	2202      	movs	r2, #2
 800ba7a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	2202      	movs	r2, #2
 800ba82:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 800ba86:	683b      	ldr	r3, [r7, #0]
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d003      	beq.n	800ba94 <HAL_TIM_Encoder_Start_IT+0xc4>
 800ba8c:	683b      	ldr	r3, [r7, #0]
 800ba8e:	2b04      	cmp	r3, #4
 800ba90:	d010      	beq.n	800bab4 <HAL_TIM_Encoder_Start_IT+0xe4>
 800ba92:	e01f      	b.n	800bad4 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	2201      	movs	r2, #1
 800ba9a:	2100      	movs	r1, #0
 800ba9c:	4618      	mov	r0, r3
 800ba9e:	f000 ff9b 	bl	800c9d8 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	68da      	ldr	r2, [r3, #12]
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	f042 0202 	orr.w	r2, r2, #2
 800bab0:	60da      	str	r2, [r3, #12]
      break;
 800bab2:	e02e      	b.n	800bb12 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	2201      	movs	r2, #1
 800baba:	2104      	movs	r1, #4
 800babc:	4618      	mov	r0, r3
 800babe:	f000 ff8b 	bl	800c9d8 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	68da      	ldr	r2, [r3, #12]
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	f042 0204 	orr.w	r2, r2, #4
 800bad0:	60da      	str	r2, [r3, #12]
      break;
 800bad2:	e01e      	b.n	800bb12 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	2201      	movs	r2, #1
 800bada:	2100      	movs	r1, #0
 800badc:	4618      	mov	r0, r3
 800bade:	f000 ff7b 	bl	800c9d8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	2201      	movs	r2, #1
 800bae8:	2104      	movs	r1, #4
 800baea:	4618      	mov	r0, r3
 800baec:	f000 ff74 	bl	800c9d8 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	68da      	ldr	r2, [r3, #12]
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	f042 0202 	orr.w	r2, r2, #2
 800bafe:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	68da      	ldr	r2, [r3, #12]
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	f042 0204 	orr.w	r2, r2, #4
 800bb0e:	60da      	str	r2, [r3, #12]
      break;
 800bb10:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	681a      	ldr	r2, [r3, #0]
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	f042 0201 	orr.w	r2, r2, #1
 800bb20:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800bb22:	2300      	movs	r3, #0
}
 800bb24:	4618      	mov	r0, r3
 800bb26:	3710      	adds	r7, #16
 800bb28:	46bd      	mov	sp, r7
 800bb2a:	bd80      	pop	{r7, pc}

0800bb2c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800bb2c:	b580      	push	{r7, lr}
 800bb2e:	b084      	sub	sp, #16
 800bb30:	af00      	add	r7, sp, #0
 800bb32:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	68db      	ldr	r3, [r3, #12]
 800bb3a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	691b      	ldr	r3, [r3, #16]
 800bb42:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800bb44:	68bb      	ldr	r3, [r7, #8]
 800bb46:	f003 0302 	and.w	r3, r3, #2
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d020      	beq.n	800bb90 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	f003 0302 	and.w	r3, r3, #2
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d01b      	beq.n	800bb90 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	f06f 0202 	mvn.w	r2, #2
 800bb60:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	2201      	movs	r2, #1
 800bb66:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	699b      	ldr	r3, [r3, #24]
 800bb6e:	f003 0303 	and.w	r3, r3, #3
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d003      	beq.n	800bb7e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800bb76:	6878      	ldr	r0, [r7, #4]
 800bb78:	f7f5 f9a2 	bl	8000ec0 <HAL_TIM_IC_CaptureCallback>
 800bb7c:	e005      	b.n	800bb8a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800bb7e:	6878      	ldr	r0, [r7, #4]
 800bb80:	f000 faf2 	bl	800c168 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bb84:	6878      	ldr	r0, [r7, #4]
 800bb86:	f000 faf9 	bl	800c17c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	2200      	movs	r2, #0
 800bb8e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800bb90:	68bb      	ldr	r3, [r7, #8]
 800bb92:	f003 0304 	and.w	r3, r3, #4
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d020      	beq.n	800bbdc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	f003 0304 	and.w	r3, r3, #4
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d01b      	beq.n	800bbdc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	f06f 0204 	mvn.w	r2, #4
 800bbac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	2202      	movs	r2, #2
 800bbb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	699b      	ldr	r3, [r3, #24]
 800bbba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d003      	beq.n	800bbca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bbc2:	6878      	ldr	r0, [r7, #4]
 800bbc4:	f7f5 f97c 	bl	8000ec0 <HAL_TIM_IC_CaptureCallback>
 800bbc8:	e005      	b.n	800bbd6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bbca:	6878      	ldr	r0, [r7, #4]
 800bbcc:	f000 facc 	bl	800c168 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bbd0:	6878      	ldr	r0, [r7, #4]
 800bbd2:	f000 fad3 	bl	800c17c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	2200      	movs	r2, #0
 800bbda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800bbdc:	68bb      	ldr	r3, [r7, #8]
 800bbde:	f003 0308 	and.w	r3, r3, #8
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d020      	beq.n	800bc28 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	f003 0308 	and.w	r3, r3, #8
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d01b      	beq.n	800bc28 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	f06f 0208 	mvn.w	r2, #8
 800bbf8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	2204      	movs	r2, #4
 800bbfe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	69db      	ldr	r3, [r3, #28]
 800bc06:	f003 0303 	and.w	r3, r3, #3
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d003      	beq.n	800bc16 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bc0e:	6878      	ldr	r0, [r7, #4]
 800bc10:	f7f5 f956 	bl	8000ec0 <HAL_TIM_IC_CaptureCallback>
 800bc14:	e005      	b.n	800bc22 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bc16:	6878      	ldr	r0, [r7, #4]
 800bc18:	f000 faa6 	bl	800c168 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bc1c:	6878      	ldr	r0, [r7, #4]
 800bc1e:	f000 faad 	bl	800c17c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	2200      	movs	r2, #0
 800bc26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800bc28:	68bb      	ldr	r3, [r7, #8]
 800bc2a:	f003 0310 	and.w	r3, r3, #16
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d020      	beq.n	800bc74 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	f003 0310 	and.w	r3, r3, #16
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d01b      	beq.n	800bc74 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	f06f 0210 	mvn.w	r2, #16
 800bc44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	2208      	movs	r2, #8
 800bc4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	69db      	ldr	r3, [r3, #28]
 800bc52:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d003      	beq.n	800bc62 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bc5a:	6878      	ldr	r0, [r7, #4]
 800bc5c:	f7f5 f930 	bl	8000ec0 <HAL_TIM_IC_CaptureCallback>
 800bc60:	e005      	b.n	800bc6e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bc62:	6878      	ldr	r0, [r7, #4]
 800bc64:	f000 fa80 	bl	800c168 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bc68:	6878      	ldr	r0, [r7, #4]
 800bc6a:	f000 fa87 	bl	800c17c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	2200      	movs	r2, #0
 800bc72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800bc74:	68bb      	ldr	r3, [r7, #8]
 800bc76:	f003 0301 	and.w	r3, r3, #1
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	d00c      	beq.n	800bc98 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	f003 0301 	and.w	r3, r3, #1
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d007      	beq.n	800bc98 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	f06f 0201 	mvn.w	r2, #1
 800bc90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800bc92:	6878      	ldr	r0, [r7, #4]
 800bc94:	f000 fa5e 	bl	800c154 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800bc98:	68bb      	ldr	r3, [r7, #8]
 800bc9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d104      	bne.n	800bcac <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800bca2:	68bb      	ldr	r3, [r7, #8]
 800bca4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d00c      	beq.n	800bcc6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d007      	beq.n	800bcc6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800bcbe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800bcc0:	6878      	ldr	r0, [r7, #4]
 800bcc2:	f000 ff47 	bl	800cb54 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800bcc6:	68bb      	ldr	r3, [r7, #8]
 800bcc8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d00c      	beq.n	800bcea <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d007      	beq.n	800bcea <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800bce2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800bce4:	6878      	ldr	r0, [r7, #4]
 800bce6:	f000 ff3f 	bl	800cb68 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800bcea:	68bb      	ldr	r3, [r7, #8]
 800bcec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	d00c      	beq.n	800bd0e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d007      	beq.n	800bd0e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800bd06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800bd08:	6878      	ldr	r0, [r7, #4]
 800bd0a:	f000 fa41 	bl	800c190 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800bd0e:	68bb      	ldr	r3, [r7, #8]
 800bd10:	f003 0320 	and.w	r3, r3, #32
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	d00c      	beq.n	800bd32 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800bd18:	68fb      	ldr	r3, [r7, #12]
 800bd1a:	f003 0320 	and.w	r3, r3, #32
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	d007      	beq.n	800bd32 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	f06f 0220 	mvn.w	r2, #32
 800bd2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800bd2c:	6878      	ldr	r0, [r7, #4]
 800bd2e:	f000 ff07 	bl	800cb40 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800bd32:	bf00      	nop
 800bd34:	3710      	adds	r7, #16
 800bd36:	46bd      	mov	sp, r7
 800bd38:	bd80      	pop	{r7, pc}
	...

0800bd3c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800bd3c:	b580      	push	{r7, lr}
 800bd3e:	b086      	sub	sp, #24
 800bd40:	af00      	add	r7, sp, #0
 800bd42:	60f8      	str	r0, [r7, #12]
 800bd44:	60b9      	str	r1, [r7, #8]
 800bd46:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bd48:	2300      	movs	r3, #0
 800bd4a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800bd52:	2b01      	cmp	r3, #1
 800bd54:	d101      	bne.n	800bd5a <HAL_TIM_PWM_ConfigChannel+0x1e>
 800bd56:	2302      	movs	r3, #2
 800bd58:	e0ff      	b.n	800bf5a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800bd5a:	68fb      	ldr	r3, [r7, #12]
 800bd5c:	2201      	movs	r2, #1
 800bd5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	2b14      	cmp	r3, #20
 800bd66:	f200 80f0 	bhi.w	800bf4a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800bd6a:	a201      	add	r2, pc, #4	@ (adr r2, 800bd70 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800bd6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd70:	0800bdc5 	.word	0x0800bdc5
 800bd74:	0800bf4b 	.word	0x0800bf4b
 800bd78:	0800bf4b 	.word	0x0800bf4b
 800bd7c:	0800bf4b 	.word	0x0800bf4b
 800bd80:	0800be05 	.word	0x0800be05
 800bd84:	0800bf4b 	.word	0x0800bf4b
 800bd88:	0800bf4b 	.word	0x0800bf4b
 800bd8c:	0800bf4b 	.word	0x0800bf4b
 800bd90:	0800be47 	.word	0x0800be47
 800bd94:	0800bf4b 	.word	0x0800bf4b
 800bd98:	0800bf4b 	.word	0x0800bf4b
 800bd9c:	0800bf4b 	.word	0x0800bf4b
 800bda0:	0800be87 	.word	0x0800be87
 800bda4:	0800bf4b 	.word	0x0800bf4b
 800bda8:	0800bf4b 	.word	0x0800bf4b
 800bdac:	0800bf4b 	.word	0x0800bf4b
 800bdb0:	0800bec9 	.word	0x0800bec9
 800bdb4:	0800bf4b 	.word	0x0800bf4b
 800bdb8:	0800bf4b 	.word	0x0800bf4b
 800bdbc:	0800bf4b 	.word	0x0800bf4b
 800bdc0:	0800bf09 	.word	0x0800bf09
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	68b9      	ldr	r1, [r7, #8]
 800bdca:	4618      	mov	r0, r3
 800bdcc:	f000 fa90 	bl	800c2f0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800bdd0:	68fb      	ldr	r3, [r7, #12]
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	699a      	ldr	r2, [r3, #24]
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	f042 0208 	orr.w	r2, r2, #8
 800bdde:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	699a      	ldr	r2, [r3, #24]
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	f022 0204 	bic.w	r2, r2, #4
 800bdee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	6999      	ldr	r1, [r3, #24]
 800bdf6:	68bb      	ldr	r3, [r7, #8]
 800bdf8:	691a      	ldr	r2, [r3, #16]
 800bdfa:	68fb      	ldr	r3, [r7, #12]
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	430a      	orrs	r2, r1
 800be00:	619a      	str	r2, [r3, #24]
      break;
 800be02:	e0a5      	b.n	800bf50 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	68b9      	ldr	r1, [r7, #8]
 800be0a:	4618      	mov	r0, r3
 800be0c:	f000 fb00 	bl	800c410 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800be10:	68fb      	ldr	r3, [r7, #12]
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	699a      	ldr	r2, [r3, #24]
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800be1e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	699a      	ldr	r2, [r3, #24]
 800be26:	68fb      	ldr	r3, [r7, #12]
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800be2e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800be30:	68fb      	ldr	r3, [r7, #12]
 800be32:	681b      	ldr	r3, [r3, #0]
 800be34:	6999      	ldr	r1, [r3, #24]
 800be36:	68bb      	ldr	r3, [r7, #8]
 800be38:	691b      	ldr	r3, [r3, #16]
 800be3a:	021a      	lsls	r2, r3, #8
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	430a      	orrs	r2, r1
 800be42:	619a      	str	r2, [r3, #24]
      break;
 800be44:	e084      	b.n	800bf50 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	68b9      	ldr	r1, [r7, #8]
 800be4c:	4618      	mov	r0, r3
 800be4e:	f000 fb69 	bl	800c524 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800be52:	68fb      	ldr	r3, [r7, #12]
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	69da      	ldr	r2, [r3, #28]
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	f042 0208 	orr.w	r2, r2, #8
 800be60:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	69da      	ldr	r2, [r3, #28]
 800be68:	68fb      	ldr	r3, [r7, #12]
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	f022 0204 	bic.w	r2, r2, #4
 800be70:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800be72:	68fb      	ldr	r3, [r7, #12]
 800be74:	681b      	ldr	r3, [r3, #0]
 800be76:	69d9      	ldr	r1, [r3, #28]
 800be78:	68bb      	ldr	r3, [r7, #8]
 800be7a:	691a      	ldr	r2, [r3, #16]
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	430a      	orrs	r2, r1
 800be82:	61da      	str	r2, [r3, #28]
      break;
 800be84:	e064      	b.n	800bf50 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	68b9      	ldr	r1, [r7, #8]
 800be8c:	4618      	mov	r0, r3
 800be8e:	f000 fbd1 	bl	800c634 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	69da      	ldr	r2, [r3, #28]
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800bea0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	69da      	ldr	r2, [r3, #28]
 800bea8:	68fb      	ldr	r3, [r7, #12]
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800beb0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800beb2:	68fb      	ldr	r3, [r7, #12]
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	69d9      	ldr	r1, [r3, #28]
 800beb8:	68bb      	ldr	r3, [r7, #8]
 800beba:	691b      	ldr	r3, [r3, #16]
 800bebc:	021a      	lsls	r2, r3, #8
 800bebe:	68fb      	ldr	r3, [r7, #12]
 800bec0:	681b      	ldr	r3, [r3, #0]
 800bec2:	430a      	orrs	r2, r1
 800bec4:	61da      	str	r2, [r3, #28]
      break;
 800bec6:	e043      	b.n	800bf50 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800bec8:	68fb      	ldr	r3, [r7, #12]
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	68b9      	ldr	r1, [r7, #8]
 800bece:	4618      	mov	r0, r3
 800bed0:	f000 fc1a 	bl	800c708 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800beda:	68fb      	ldr	r3, [r7, #12]
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	f042 0208 	orr.w	r2, r2, #8
 800bee2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800bee4:	68fb      	ldr	r3, [r7, #12]
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800beea:	68fb      	ldr	r3, [r7, #12]
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	f022 0204 	bic.w	r2, r2, #4
 800bef2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800bef4:	68fb      	ldr	r3, [r7, #12]
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800befa:	68bb      	ldr	r3, [r7, #8]
 800befc:	691a      	ldr	r2, [r3, #16]
 800befe:	68fb      	ldr	r3, [r7, #12]
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	430a      	orrs	r2, r1
 800bf04:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800bf06:	e023      	b.n	800bf50 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800bf08:	68fb      	ldr	r3, [r7, #12]
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	68b9      	ldr	r1, [r7, #8]
 800bf0e:	4618      	mov	r0, r3
 800bf10:	f000 fc5e 	bl	800c7d0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800bf22:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800bf24:	68fb      	ldr	r3, [r7, #12]
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800bf2a:	68fb      	ldr	r3, [r7, #12]
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800bf32:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800bf3a:	68bb      	ldr	r3, [r7, #8]
 800bf3c:	691b      	ldr	r3, [r3, #16]
 800bf3e:	021a      	lsls	r2, r3, #8
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	430a      	orrs	r2, r1
 800bf46:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800bf48:	e002      	b.n	800bf50 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800bf4a:	2301      	movs	r3, #1
 800bf4c:	75fb      	strb	r3, [r7, #23]
      break;
 800bf4e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800bf50:	68fb      	ldr	r3, [r7, #12]
 800bf52:	2200      	movs	r2, #0
 800bf54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800bf58:	7dfb      	ldrb	r3, [r7, #23]
}
 800bf5a:	4618      	mov	r0, r3
 800bf5c:	3718      	adds	r7, #24
 800bf5e:	46bd      	mov	sp, r7
 800bf60:	bd80      	pop	{r7, pc}
 800bf62:	bf00      	nop

0800bf64 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800bf64:	b580      	push	{r7, lr}
 800bf66:	b084      	sub	sp, #16
 800bf68:	af00      	add	r7, sp, #0
 800bf6a:	6078      	str	r0, [r7, #4]
 800bf6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800bf6e:	2300      	movs	r3, #0
 800bf70:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800bf78:	2b01      	cmp	r3, #1
 800bf7a:	d101      	bne.n	800bf80 <HAL_TIM_ConfigClockSource+0x1c>
 800bf7c:	2302      	movs	r3, #2
 800bf7e:	e0dc      	b.n	800c13a <HAL_TIM_ConfigClockSource+0x1d6>
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	2201      	movs	r2, #1
 800bf84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	2202      	movs	r2, #2
 800bf8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	689b      	ldr	r3, [r3, #8]
 800bf96:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800bf98:	68ba      	ldr	r2, [r7, #8]
 800bf9a:	4b6a      	ldr	r3, [pc, #424]	@ (800c144 <HAL_TIM_ConfigClockSource+0x1e0>)
 800bf9c:	4013      	ands	r3, r2
 800bf9e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bfa0:	68bb      	ldr	r3, [r7, #8]
 800bfa2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800bfa6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	68ba      	ldr	r2, [r7, #8]
 800bfae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800bfb0:	683b      	ldr	r3, [r7, #0]
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	4a64      	ldr	r2, [pc, #400]	@ (800c148 <HAL_TIM_ConfigClockSource+0x1e4>)
 800bfb6:	4293      	cmp	r3, r2
 800bfb8:	f000 80a9 	beq.w	800c10e <HAL_TIM_ConfigClockSource+0x1aa>
 800bfbc:	4a62      	ldr	r2, [pc, #392]	@ (800c148 <HAL_TIM_ConfigClockSource+0x1e4>)
 800bfbe:	4293      	cmp	r3, r2
 800bfc0:	f200 80ae 	bhi.w	800c120 <HAL_TIM_ConfigClockSource+0x1bc>
 800bfc4:	4a61      	ldr	r2, [pc, #388]	@ (800c14c <HAL_TIM_ConfigClockSource+0x1e8>)
 800bfc6:	4293      	cmp	r3, r2
 800bfc8:	f000 80a1 	beq.w	800c10e <HAL_TIM_ConfigClockSource+0x1aa>
 800bfcc:	4a5f      	ldr	r2, [pc, #380]	@ (800c14c <HAL_TIM_ConfigClockSource+0x1e8>)
 800bfce:	4293      	cmp	r3, r2
 800bfd0:	f200 80a6 	bhi.w	800c120 <HAL_TIM_ConfigClockSource+0x1bc>
 800bfd4:	4a5e      	ldr	r2, [pc, #376]	@ (800c150 <HAL_TIM_ConfigClockSource+0x1ec>)
 800bfd6:	4293      	cmp	r3, r2
 800bfd8:	f000 8099 	beq.w	800c10e <HAL_TIM_ConfigClockSource+0x1aa>
 800bfdc:	4a5c      	ldr	r2, [pc, #368]	@ (800c150 <HAL_TIM_ConfigClockSource+0x1ec>)
 800bfde:	4293      	cmp	r3, r2
 800bfe0:	f200 809e 	bhi.w	800c120 <HAL_TIM_ConfigClockSource+0x1bc>
 800bfe4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800bfe8:	f000 8091 	beq.w	800c10e <HAL_TIM_ConfigClockSource+0x1aa>
 800bfec:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800bff0:	f200 8096 	bhi.w	800c120 <HAL_TIM_ConfigClockSource+0x1bc>
 800bff4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bff8:	f000 8089 	beq.w	800c10e <HAL_TIM_ConfigClockSource+0x1aa>
 800bffc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c000:	f200 808e 	bhi.w	800c120 <HAL_TIM_ConfigClockSource+0x1bc>
 800c004:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c008:	d03e      	beq.n	800c088 <HAL_TIM_ConfigClockSource+0x124>
 800c00a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c00e:	f200 8087 	bhi.w	800c120 <HAL_TIM_ConfigClockSource+0x1bc>
 800c012:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c016:	f000 8086 	beq.w	800c126 <HAL_TIM_ConfigClockSource+0x1c2>
 800c01a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c01e:	d87f      	bhi.n	800c120 <HAL_TIM_ConfigClockSource+0x1bc>
 800c020:	2b70      	cmp	r3, #112	@ 0x70
 800c022:	d01a      	beq.n	800c05a <HAL_TIM_ConfigClockSource+0xf6>
 800c024:	2b70      	cmp	r3, #112	@ 0x70
 800c026:	d87b      	bhi.n	800c120 <HAL_TIM_ConfigClockSource+0x1bc>
 800c028:	2b60      	cmp	r3, #96	@ 0x60
 800c02a:	d050      	beq.n	800c0ce <HAL_TIM_ConfigClockSource+0x16a>
 800c02c:	2b60      	cmp	r3, #96	@ 0x60
 800c02e:	d877      	bhi.n	800c120 <HAL_TIM_ConfigClockSource+0x1bc>
 800c030:	2b50      	cmp	r3, #80	@ 0x50
 800c032:	d03c      	beq.n	800c0ae <HAL_TIM_ConfigClockSource+0x14a>
 800c034:	2b50      	cmp	r3, #80	@ 0x50
 800c036:	d873      	bhi.n	800c120 <HAL_TIM_ConfigClockSource+0x1bc>
 800c038:	2b40      	cmp	r3, #64	@ 0x40
 800c03a:	d058      	beq.n	800c0ee <HAL_TIM_ConfigClockSource+0x18a>
 800c03c:	2b40      	cmp	r3, #64	@ 0x40
 800c03e:	d86f      	bhi.n	800c120 <HAL_TIM_ConfigClockSource+0x1bc>
 800c040:	2b30      	cmp	r3, #48	@ 0x30
 800c042:	d064      	beq.n	800c10e <HAL_TIM_ConfigClockSource+0x1aa>
 800c044:	2b30      	cmp	r3, #48	@ 0x30
 800c046:	d86b      	bhi.n	800c120 <HAL_TIM_ConfigClockSource+0x1bc>
 800c048:	2b20      	cmp	r3, #32
 800c04a:	d060      	beq.n	800c10e <HAL_TIM_ConfigClockSource+0x1aa>
 800c04c:	2b20      	cmp	r3, #32
 800c04e:	d867      	bhi.n	800c120 <HAL_TIM_ConfigClockSource+0x1bc>
 800c050:	2b00      	cmp	r3, #0
 800c052:	d05c      	beq.n	800c10e <HAL_TIM_ConfigClockSource+0x1aa>
 800c054:	2b10      	cmp	r3, #16
 800c056:	d05a      	beq.n	800c10e <HAL_TIM_ConfigClockSource+0x1aa>
 800c058:	e062      	b.n	800c120 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c05e:	683b      	ldr	r3, [r7, #0]
 800c060:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c062:	683b      	ldr	r3, [r7, #0]
 800c064:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c066:	683b      	ldr	r3, [r7, #0]
 800c068:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c06a:	f000 fc95 	bl	800c998 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	689b      	ldr	r3, [r3, #8]
 800c074:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c076:	68bb      	ldr	r3, [r7, #8]
 800c078:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800c07c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	681b      	ldr	r3, [r3, #0]
 800c082:	68ba      	ldr	r2, [r7, #8]
 800c084:	609a      	str	r2, [r3, #8]
      break;
 800c086:	e04f      	b.n	800c128 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c08c:	683b      	ldr	r3, [r7, #0]
 800c08e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c090:	683b      	ldr	r3, [r7, #0]
 800c092:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c094:	683b      	ldr	r3, [r7, #0]
 800c096:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c098:	f000 fc7e 	bl	800c998 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	689a      	ldr	r2, [r3, #8]
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	681b      	ldr	r3, [r3, #0]
 800c0a6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800c0aa:	609a      	str	r2, [r3, #8]
      break;
 800c0ac:	e03c      	b.n	800c128 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c0b2:	683b      	ldr	r3, [r7, #0]
 800c0b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c0b6:	683b      	ldr	r3, [r7, #0]
 800c0b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c0ba:	461a      	mov	r2, r3
 800c0bc:	f000 fbee 	bl	800c89c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	2150      	movs	r1, #80	@ 0x50
 800c0c6:	4618      	mov	r0, r3
 800c0c8:	f000 fc48 	bl	800c95c <TIM_ITRx_SetConfig>
      break;
 800c0cc:	e02c      	b.n	800c128 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c0d2:	683b      	ldr	r3, [r7, #0]
 800c0d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c0d6:	683b      	ldr	r3, [r7, #0]
 800c0d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800c0da:	461a      	mov	r2, r3
 800c0dc:	f000 fc0d 	bl	800c8fa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	2160      	movs	r1, #96	@ 0x60
 800c0e6:	4618      	mov	r0, r3
 800c0e8:	f000 fc38 	bl	800c95c <TIM_ITRx_SetConfig>
      break;
 800c0ec:	e01c      	b.n	800c128 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c0f2:	683b      	ldr	r3, [r7, #0]
 800c0f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c0f6:	683b      	ldr	r3, [r7, #0]
 800c0f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c0fa:	461a      	mov	r2, r3
 800c0fc:	f000 fbce 	bl	800c89c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	2140      	movs	r1, #64	@ 0x40
 800c106:	4618      	mov	r0, r3
 800c108:	f000 fc28 	bl	800c95c <TIM_ITRx_SetConfig>
      break;
 800c10c:	e00c      	b.n	800c128 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	681a      	ldr	r2, [r3, #0]
 800c112:	683b      	ldr	r3, [r7, #0]
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	4619      	mov	r1, r3
 800c118:	4610      	mov	r0, r2
 800c11a:	f000 fc1f 	bl	800c95c <TIM_ITRx_SetConfig>
      break;
 800c11e:	e003      	b.n	800c128 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800c120:	2301      	movs	r3, #1
 800c122:	73fb      	strb	r3, [r7, #15]
      break;
 800c124:	e000      	b.n	800c128 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800c126:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	2201      	movs	r2, #1
 800c12c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	2200      	movs	r2, #0
 800c134:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800c138:	7bfb      	ldrb	r3, [r7, #15]
}
 800c13a:	4618      	mov	r0, r3
 800c13c:	3710      	adds	r7, #16
 800c13e:	46bd      	mov	sp, r7
 800c140:	bd80      	pop	{r7, pc}
 800c142:	bf00      	nop
 800c144:	ffceff88 	.word	0xffceff88
 800c148:	00100040 	.word	0x00100040
 800c14c:	00100030 	.word	0x00100030
 800c150:	00100020 	.word	0x00100020

0800c154 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c154:	b480      	push	{r7}
 800c156:	b083      	sub	sp, #12
 800c158:	af00      	add	r7, sp, #0
 800c15a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800c15c:	bf00      	nop
 800c15e:	370c      	adds	r7, #12
 800c160:	46bd      	mov	sp, r7
 800c162:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c166:	4770      	bx	lr

0800c168 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c168:	b480      	push	{r7}
 800c16a:	b083      	sub	sp, #12
 800c16c:	af00      	add	r7, sp, #0
 800c16e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c170:	bf00      	nop
 800c172:	370c      	adds	r7, #12
 800c174:	46bd      	mov	sp, r7
 800c176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c17a:	4770      	bx	lr

0800c17c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c17c:	b480      	push	{r7}
 800c17e:	b083      	sub	sp, #12
 800c180:	af00      	add	r7, sp, #0
 800c182:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c184:	bf00      	nop
 800c186:	370c      	adds	r7, #12
 800c188:	46bd      	mov	sp, r7
 800c18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c18e:	4770      	bx	lr

0800c190 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c190:	b480      	push	{r7}
 800c192:	b083      	sub	sp, #12
 800c194:	af00      	add	r7, sp, #0
 800c196:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c198:	bf00      	nop
 800c19a:	370c      	adds	r7, #12
 800c19c:	46bd      	mov	sp, r7
 800c19e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1a2:	4770      	bx	lr

0800c1a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800c1a4:	b480      	push	{r7}
 800c1a6:	b085      	sub	sp, #20
 800c1a8:	af00      	add	r7, sp, #0
 800c1aa:	6078      	str	r0, [r7, #4]
 800c1ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	681b      	ldr	r3, [r3, #0]
 800c1b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	4a46      	ldr	r2, [pc, #280]	@ (800c2d0 <TIM_Base_SetConfig+0x12c>)
 800c1b8:	4293      	cmp	r3, r2
 800c1ba:	d013      	beq.n	800c1e4 <TIM_Base_SetConfig+0x40>
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c1c2:	d00f      	beq.n	800c1e4 <TIM_Base_SetConfig+0x40>
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	4a43      	ldr	r2, [pc, #268]	@ (800c2d4 <TIM_Base_SetConfig+0x130>)
 800c1c8:	4293      	cmp	r3, r2
 800c1ca:	d00b      	beq.n	800c1e4 <TIM_Base_SetConfig+0x40>
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	4a42      	ldr	r2, [pc, #264]	@ (800c2d8 <TIM_Base_SetConfig+0x134>)
 800c1d0:	4293      	cmp	r3, r2
 800c1d2:	d007      	beq.n	800c1e4 <TIM_Base_SetConfig+0x40>
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	4a41      	ldr	r2, [pc, #260]	@ (800c2dc <TIM_Base_SetConfig+0x138>)
 800c1d8:	4293      	cmp	r3, r2
 800c1da:	d003      	beq.n	800c1e4 <TIM_Base_SetConfig+0x40>
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	4a40      	ldr	r2, [pc, #256]	@ (800c2e0 <TIM_Base_SetConfig+0x13c>)
 800c1e0:	4293      	cmp	r3, r2
 800c1e2:	d108      	bne.n	800c1f6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c1ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c1ec:	683b      	ldr	r3, [r7, #0]
 800c1ee:	685b      	ldr	r3, [r3, #4]
 800c1f0:	68fa      	ldr	r2, [r7, #12]
 800c1f2:	4313      	orrs	r3, r2
 800c1f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	4a35      	ldr	r2, [pc, #212]	@ (800c2d0 <TIM_Base_SetConfig+0x12c>)
 800c1fa:	4293      	cmp	r3, r2
 800c1fc:	d01f      	beq.n	800c23e <TIM_Base_SetConfig+0x9a>
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c204:	d01b      	beq.n	800c23e <TIM_Base_SetConfig+0x9a>
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	4a32      	ldr	r2, [pc, #200]	@ (800c2d4 <TIM_Base_SetConfig+0x130>)
 800c20a:	4293      	cmp	r3, r2
 800c20c:	d017      	beq.n	800c23e <TIM_Base_SetConfig+0x9a>
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	4a31      	ldr	r2, [pc, #196]	@ (800c2d8 <TIM_Base_SetConfig+0x134>)
 800c212:	4293      	cmp	r3, r2
 800c214:	d013      	beq.n	800c23e <TIM_Base_SetConfig+0x9a>
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	4a30      	ldr	r2, [pc, #192]	@ (800c2dc <TIM_Base_SetConfig+0x138>)
 800c21a:	4293      	cmp	r3, r2
 800c21c:	d00f      	beq.n	800c23e <TIM_Base_SetConfig+0x9a>
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	4a2f      	ldr	r2, [pc, #188]	@ (800c2e0 <TIM_Base_SetConfig+0x13c>)
 800c222:	4293      	cmp	r3, r2
 800c224:	d00b      	beq.n	800c23e <TIM_Base_SetConfig+0x9a>
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	4a2e      	ldr	r2, [pc, #184]	@ (800c2e4 <TIM_Base_SetConfig+0x140>)
 800c22a:	4293      	cmp	r3, r2
 800c22c:	d007      	beq.n	800c23e <TIM_Base_SetConfig+0x9a>
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	4a2d      	ldr	r2, [pc, #180]	@ (800c2e8 <TIM_Base_SetConfig+0x144>)
 800c232:	4293      	cmp	r3, r2
 800c234:	d003      	beq.n	800c23e <TIM_Base_SetConfig+0x9a>
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	4a2c      	ldr	r2, [pc, #176]	@ (800c2ec <TIM_Base_SetConfig+0x148>)
 800c23a:	4293      	cmp	r3, r2
 800c23c:	d108      	bne.n	800c250 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c23e:	68fb      	ldr	r3, [r7, #12]
 800c240:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c244:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c246:	683b      	ldr	r3, [r7, #0]
 800c248:	68db      	ldr	r3, [r3, #12]
 800c24a:	68fa      	ldr	r2, [r7, #12]
 800c24c:	4313      	orrs	r3, r2
 800c24e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c250:	68fb      	ldr	r3, [r7, #12]
 800c252:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800c256:	683b      	ldr	r3, [r7, #0]
 800c258:	695b      	ldr	r3, [r3, #20]
 800c25a:	4313      	orrs	r3, r2
 800c25c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	68fa      	ldr	r2, [r7, #12]
 800c262:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c264:	683b      	ldr	r3, [r7, #0]
 800c266:	689a      	ldr	r2, [r3, #8]
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c26c:	683b      	ldr	r3, [r7, #0]
 800c26e:	681a      	ldr	r2, [r3, #0]
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	4a16      	ldr	r2, [pc, #88]	@ (800c2d0 <TIM_Base_SetConfig+0x12c>)
 800c278:	4293      	cmp	r3, r2
 800c27a:	d00f      	beq.n	800c29c <TIM_Base_SetConfig+0xf8>
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	4a18      	ldr	r2, [pc, #96]	@ (800c2e0 <TIM_Base_SetConfig+0x13c>)
 800c280:	4293      	cmp	r3, r2
 800c282:	d00b      	beq.n	800c29c <TIM_Base_SetConfig+0xf8>
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	4a17      	ldr	r2, [pc, #92]	@ (800c2e4 <TIM_Base_SetConfig+0x140>)
 800c288:	4293      	cmp	r3, r2
 800c28a:	d007      	beq.n	800c29c <TIM_Base_SetConfig+0xf8>
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	4a16      	ldr	r2, [pc, #88]	@ (800c2e8 <TIM_Base_SetConfig+0x144>)
 800c290:	4293      	cmp	r3, r2
 800c292:	d003      	beq.n	800c29c <TIM_Base_SetConfig+0xf8>
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	4a15      	ldr	r2, [pc, #84]	@ (800c2ec <TIM_Base_SetConfig+0x148>)
 800c298:	4293      	cmp	r3, r2
 800c29a:	d103      	bne.n	800c2a4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c29c:	683b      	ldr	r3, [r7, #0]
 800c29e:	691a      	ldr	r2, [r3, #16]
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	2201      	movs	r2, #1
 800c2a8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	691b      	ldr	r3, [r3, #16]
 800c2ae:	f003 0301 	and.w	r3, r3, #1
 800c2b2:	2b01      	cmp	r3, #1
 800c2b4:	d105      	bne.n	800c2c2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	691b      	ldr	r3, [r3, #16]
 800c2ba:	f023 0201 	bic.w	r2, r3, #1
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	611a      	str	r2, [r3, #16]
  }
}
 800c2c2:	bf00      	nop
 800c2c4:	3714      	adds	r7, #20
 800c2c6:	46bd      	mov	sp, r7
 800c2c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2cc:	4770      	bx	lr
 800c2ce:	bf00      	nop
 800c2d0:	40010000 	.word	0x40010000
 800c2d4:	40000400 	.word	0x40000400
 800c2d8:	40000800 	.word	0x40000800
 800c2dc:	40000c00 	.word	0x40000c00
 800c2e0:	40010400 	.word	0x40010400
 800c2e4:	40014000 	.word	0x40014000
 800c2e8:	40014400 	.word	0x40014400
 800c2ec:	40014800 	.word	0x40014800

0800c2f0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c2f0:	b480      	push	{r7}
 800c2f2:	b087      	sub	sp, #28
 800c2f4:	af00      	add	r7, sp, #0
 800c2f6:	6078      	str	r0, [r7, #4]
 800c2f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	6a1b      	ldr	r3, [r3, #32]
 800c2fe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	6a1b      	ldr	r3, [r3, #32]
 800c304:	f023 0201 	bic.w	r2, r3, #1
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	685b      	ldr	r3, [r3, #4]
 800c310:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	699b      	ldr	r3, [r3, #24]
 800c316:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c318:	68fa      	ldr	r2, [r7, #12]
 800c31a:	4b37      	ldr	r3, [pc, #220]	@ (800c3f8 <TIM_OC1_SetConfig+0x108>)
 800c31c:	4013      	ands	r3, r2
 800c31e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c320:	68fb      	ldr	r3, [r7, #12]
 800c322:	f023 0303 	bic.w	r3, r3, #3
 800c326:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c328:	683b      	ldr	r3, [r7, #0]
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	68fa      	ldr	r2, [r7, #12]
 800c32e:	4313      	orrs	r3, r2
 800c330:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c332:	697b      	ldr	r3, [r7, #20]
 800c334:	f023 0302 	bic.w	r3, r3, #2
 800c338:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c33a:	683b      	ldr	r3, [r7, #0]
 800c33c:	689b      	ldr	r3, [r3, #8]
 800c33e:	697a      	ldr	r2, [r7, #20]
 800c340:	4313      	orrs	r3, r2
 800c342:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	4a2d      	ldr	r2, [pc, #180]	@ (800c3fc <TIM_OC1_SetConfig+0x10c>)
 800c348:	4293      	cmp	r3, r2
 800c34a:	d00f      	beq.n	800c36c <TIM_OC1_SetConfig+0x7c>
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	4a2c      	ldr	r2, [pc, #176]	@ (800c400 <TIM_OC1_SetConfig+0x110>)
 800c350:	4293      	cmp	r3, r2
 800c352:	d00b      	beq.n	800c36c <TIM_OC1_SetConfig+0x7c>
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	4a2b      	ldr	r2, [pc, #172]	@ (800c404 <TIM_OC1_SetConfig+0x114>)
 800c358:	4293      	cmp	r3, r2
 800c35a:	d007      	beq.n	800c36c <TIM_OC1_SetConfig+0x7c>
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	4a2a      	ldr	r2, [pc, #168]	@ (800c408 <TIM_OC1_SetConfig+0x118>)
 800c360:	4293      	cmp	r3, r2
 800c362:	d003      	beq.n	800c36c <TIM_OC1_SetConfig+0x7c>
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	4a29      	ldr	r2, [pc, #164]	@ (800c40c <TIM_OC1_SetConfig+0x11c>)
 800c368:	4293      	cmp	r3, r2
 800c36a:	d10c      	bne.n	800c386 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c36c:	697b      	ldr	r3, [r7, #20]
 800c36e:	f023 0308 	bic.w	r3, r3, #8
 800c372:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c374:	683b      	ldr	r3, [r7, #0]
 800c376:	68db      	ldr	r3, [r3, #12]
 800c378:	697a      	ldr	r2, [r7, #20]
 800c37a:	4313      	orrs	r3, r2
 800c37c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c37e:	697b      	ldr	r3, [r7, #20]
 800c380:	f023 0304 	bic.w	r3, r3, #4
 800c384:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	4a1c      	ldr	r2, [pc, #112]	@ (800c3fc <TIM_OC1_SetConfig+0x10c>)
 800c38a:	4293      	cmp	r3, r2
 800c38c:	d00f      	beq.n	800c3ae <TIM_OC1_SetConfig+0xbe>
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	4a1b      	ldr	r2, [pc, #108]	@ (800c400 <TIM_OC1_SetConfig+0x110>)
 800c392:	4293      	cmp	r3, r2
 800c394:	d00b      	beq.n	800c3ae <TIM_OC1_SetConfig+0xbe>
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	4a1a      	ldr	r2, [pc, #104]	@ (800c404 <TIM_OC1_SetConfig+0x114>)
 800c39a:	4293      	cmp	r3, r2
 800c39c:	d007      	beq.n	800c3ae <TIM_OC1_SetConfig+0xbe>
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	4a19      	ldr	r2, [pc, #100]	@ (800c408 <TIM_OC1_SetConfig+0x118>)
 800c3a2:	4293      	cmp	r3, r2
 800c3a4:	d003      	beq.n	800c3ae <TIM_OC1_SetConfig+0xbe>
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	4a18      	ldr	r2, [pc, #96]	@ (800c40c <TIM_OC1_SetConfig+0x11c>)
 800c3aa:	4293      	cmp	r3, r2
 800c3ac:	d111      	bne.n	800c3d2 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c3ae:	693b      	ldr	r3, [r7, #16]
 800c3b0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c3b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c3b6:	693b      	ldr	r3, [r7, #16]
 800c3b8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800c3bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c3be:	683b      	ldr	r3, [r7, #0]
 800c3c0:	695b      	ldr	r3, [r3, #20]
 800c3c2:	693a      	ldr	r2, [r7, #16]
 800c3c4:	4313      	orrs	r3, r2
 800c3c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c3c8:	683b      	ldr	r3, [r7, #0]
 800c3ca:	699b      	ldr	r3, [r3, #24]
 800c3cc:	693a      	ldr	r2, [r7, #16]
 800c3ce:	4313      	orrs	r3, r2
 800c3d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	693a      	ldr	r2, [r7, #16]
 800c3d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	68fa      	ldr	r2, [r7, #12]
 800c3dc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c3de:	683b      	ldr	r3, [r7, #0]
 800c3e0:	685a      	ldr	r2, [r3, #4]
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	697a      	ldr	r2, [r7, #20]
 800c3ea:	621a      	str	r2, [r3, #32]
}
 800c3ec:	bf00      	nop
 800c3ee:	371c      	adds	r7, #28
 800c3f0:	46bd      	mov	sp, r7
 800c3f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3f6:	4770      	bx	lr
 800c3f8:	fffeff8f 	.word	0xfffeff8f
 800c3fc:	40010000 	.word	0x40010000
 800c400:	40010400 	.word	0x40010400
 800c404:	40014000 	.word	0x40014000
 800c408:	40014400 	.word	0x40014400
 800c40c:	40014800 	.word	0x40014800

0800c410 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c410:	b480      	push	{r7}
 800c412:	b087      	sub	sp, #28
 800c414:	af00      	add	r7, sp, #0
 800c416:	6078      	str	r0, [r7, #4]
 800c418:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	6a1b      	ldr	r3, [r3, #32]
 800c41e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	6a1b      	ldr	r3, [r3, #32]
 800c424:	f023 0210 	bic.w	r2, r3, #16
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	685b      	ldr	r3, [r3, #4]
 800c430:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	699b      	ldr	r3, [r3, #24]
 800c436:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c438:	68fa      	ldr	r2, [r7, #12]
 800c43a:	4b34      	ldr	r3, [pc, #208]	@ (800c50c <TIM_OC2_SetConfig+0xfc>)
 800c43c:	4013      	ands	r3, r2
 800c43e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c440:	68fb      	ldr	r3, [r7, #12]
 800c442:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c446:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c448:	683b      	ldr	r3, [r7, #0]
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	021b      	lsls	r3, r3, #8
 800c44e:	68fa      	ldr	r2, [r7, #12]
 800c450:	4313      	orrs	r3, r2
 800c452:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c454:	697b      	ldr	r3, [r7, #20]
 800c456:	f023 0320 	bic.w	r3, r3, #32
 800c45a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c45c:	683b      	ldr	r3, [r7, #0]
 800c45e:	689b      	ldr	r3, [r3, #8]
 800c460:	011b      	lsls	r3, r3, #4
 800c462:	697a      	ldr	r2, [r7, #20]
 800c464:	4313      	orrs	r3, r2
 800c466:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	4a29      	ldr	r2, [pc, #164]	@ (800c510 <TIM_OC2_SetConfig+0x100>)
 800c46c:	4293      	cmp	r3, r2
 800c46e:	d003      	beq.n	800c478 <TIM_OC2_SetConfig+0x68>
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	4a28      	ldr	r2, [pc, #160]	@ (800c514 <TIM_OC2_SetConfig+0x104>)
 800c474:	4293      	cmp	r3, r2
 800c476:	d10d      	bne.n	800c494 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c478:	697b      	ldr	r3, [r7, #20]
 800c47a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c47e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c480:	683b      	ldr	r3, [r7, #0]
 800c482:	68db      	ldr	r3, [r3, #12]
 800c484:	011b      	lsls	r3, r3, #4
 800c486:	697a      	ldr	r2, [r7, #20]
 800c488:	4313      	orrs	r3, r2
 800c48a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c48c:	697b      	ldr	r3, [r7, #20]
 800c48e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c492:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	4a1e      	ldr	r2, [pc, #120]	@ (800c510 <TIM_OC2_SetConfig+0x100>)
 800c498:	4293      	cmp	r3, r2
 800c49a:	d00f      	beq.n	800c4bc <TIM_OC2_SetConfig+0xac>
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	4a1d      	ldr	r2, [pc, #116]	@ (800c514 <TIM_OC2_SetConfig+0x104>)
 800c4a0:	4293      	cmp	r3, r2
 800c4a2:	d00b      	beq.n	800c4bc <TIM_OC2_SetConfig+0xac>
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	4a1c      	ldr	r2, [pc, #112]	@ (800c518 <TIM_OC2_SetConfig+0x108>)
 800c4a8:	4293      	cmp	r3, r2
 800c4aa:	d007      	beq.n	800c4bc <TIM_OC2_SetConfig+0xac>
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	4a1b      	ldr	r2, [pc, #108]	@ (800c51c <TIM_OC2_SetConfig+0x10c>)
 800c4b0:	4293      	cmp	r3, r2
 800c4b2:	d003      	beq.n	800c4bc <TIM_OC2_SetConfig+0xac>
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	4a1a      	ldr	r2, [pc, #104]	@ (800c520 <TIM_OC2_SetConfig+0x110>)
 800c4b8:	4293      	cmp	r3, r2
 800c4ba:	d113      	bne.n	800c4e4 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c4bc:	693b      	ldr	r3, [r7, #16]
 800c4be:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800c4c2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c4c4:	693b      	ldr	r3, [r7, #16]
 800c4c6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800c4ca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c4cc:	683b      	ldr	r3, [r7, #0]
 800c4ce:	695b      	ldr	r3, [r3, #20]
 800c4d0:	009b      	lsls	r3, r3, #2
 800c4d2:	693a      	ldr	r2, [r7, #16]
 800c4d4:	4313      	orrs	r3, r2
 800c4d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c4d8:	683b      	ldr	r3, [r7, #0]
 800c4da:	699b      	ldr	r3, [r3, #24]
 800c4dc:	009b      	lsls	r3, r3, #2
 800c4de:	693a      	ldr	r2, [r7, #16]
 800c4e0:	4313      	orrs	r3, r2
 800c4e2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	693a      	ldr	r2, [r7, #16]
 800c4e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	68fa      	ldr	r2, [r7, #12]
 800c4ee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c4f0:	683b      	ldr	r3, [r7, #0]
 800c4f2:	685a      	ldr	r2, [r3, #4]
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	697a      	ldr	r2, [r7, #20]
 800c4fc:	621a      	str	r2, [r3, #32]
}
 800c4fe:	bf00      	nop
 800c500:	371c      	adds	r7, #28
 800c502:	46bd      	mov	sp, r7
 800c504:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c508:	4770      	bx	lr
 800c50a:	bf00      	nop
 800c50c:	feff8fff 	.word	0xfeff8fff
 800c510:	40010000 	.word	0x40010000
 800c514:	40010400 	.word	0x40010400
 800c518:	40014000 	.word	0x40014000
 800c51c:	40014400 	.word	0x40014400
 800c520:	40014800 	.word	0x40014800

0800c524 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c524:	b480      	push	{r7}
 800c526:	b087      	sub	sp, #28
 800c528:	af00      	add	r7, sp, #0
 800c52a:	6078      	str	r0, [r7, #4]
 800c52c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	6a1b      	ldr	r3, [r3, #32]
 800c532:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	6a1b      	ldr	r3, [r3, #32]
 800c538:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	685b      	ldr	r3, [r3, #4]
 800c544:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	69db      	ldr	r3, [r3, #28]
 800c54a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c54c:	68fa      	ldr	r2, [r7, #12]
 800c54e:	4b33      	ldr	r3, [pc, #204]	@ (800c61c <TIM_OC3_SetConfig+0xf8>)
 800c550:	4013      	ands	r3, r2
 800c552:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c554:	68fb      	ldr	r3, [r7, #12]
 800c556:	f023 0303 	bic.w	r3, r3, #3
 800c55a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c55c:	683b      	ldr	r3, [r7, #0]
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	68fa      	ldr	r2, [r7, #12]
 800c562:	4313      	orrs	r3, r2
 800c564:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c566:	697b      	ldr	r3, [r7, #20]
 800c568:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800c56c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c56e:	683b      	ldr	r3, [r7, #0]
 800c570:	689b      	ldr	r3, [r3, #8]
 800c572:	021b      	lsls	r3, r3, #8
 800c574:	697a      	ldr	r2, [r7, #20]
 800c576:	4313      	orrs	r3, r2
 800c578:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	4a28      	ldr	r2, [pc, #160]	@ (800c620 <TIM_OC3_SetConfig+0xfc>)
 800c57e:	4293      	cmp	r3, r2
 800c580:	d003      	beq.n	800c58a <TIM_OC3_SetConfig+0x66>
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	4a27      	ldr	r2, [pc, #156]	@ (800c624 <TIM_OC3_SetConfig+0x100>)
 800c586:	4293      	cmp	r3, r2
 800c588:	d10d      	bne.n	800c5a6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c58a:	697b      	ldr	r3, [r7, #20]
 800c58c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800c590:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c592:	683b      	ldr	r3, [r7, #0]
 800c594:	68db      	ldr	r3, [r3, #12]
 800c596:	021b      	lsls	r3, r3, #8
 800c598:	697a      	ldr	r2, [r7, #20]
 800c59a:	4313      	orrs	r3, r2
 800c59c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c59e:	697b      	ldr	r3, [r7, #20]
 800c5a0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800c5a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	4a1d      	ldr	r2, [pc, #116]	@ (800c620 <TIM_OC3_SetConfig+0xfc>)
 800c5aa:	4293      	cmp	r3, r2
 800c5ac:	d00f      	beq.n	800c5ce <TIM_OC3_SetConfig+0xaa>
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	4a1c      	ldr	r2, [pc, #112]	@ (800c624 <TIM_OC3_SetConfig+0x100>)
 800c5b2:	4293      	cmp	r3, r2
 800c5b4:	d00b      	beq.n	800c5ce <TIM_OC3_SetConfig+0xaa>
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	4a1b      	ldr	r2, [pc, #108]	@ (800c628 <TIM_OC3_SetConfig+0x104>)
 800c5ba:	4293      	cmp	r3, r2
 800c5bc:	d007      	beq.n	800c5ce <TIM_OC3_SetConfig+0xaa>
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	4a1a      	ldr	r2, [pc, #104]	@ (800c62c <TIM_OC3_SetConfig+0x108>)
 800c5c2:	4293      	cmp	r3, r2
 800c5c4:	d003      	beq.n	800c5ce <TIM_OC3_SetConfig+0xaa>
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	4a19      	ldr	r2, [pc, #100]	@ (800c630 <TIM_OC3_SetConfig+0x10c>)
 800c5ca:	4293      	cmp	r3, r2
 800c5cc:	d113      	bne.n	800c5f6 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c5ce:	693b      	ldr	r3, [r7, #16]
 800c5d0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c5d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c5d6:	693b      	ldr	r3, [r7, #16]
 800c5d8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800c5dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c5de:	683b      	ldr	r3, [r7, #0]
 800c5e0:	695b      	ldr	r3, [r3, #20]
 800c5e2:	011b      	lsls	r3, r3, #4
 800c5e4:	693a      	ldr	r2, [r7, #16]
 800c5e6:	4313      	orrs	r3, r2
 800c5e8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c5ea:	683b      	ldr	r3, [r7, #0]
 800c5ec:	699b      	ldr	r3, [r3, #24]
 800c5ee:	011b      	lsls	r3, r3, #4
 800c5f0:	693a      	ldr	r2, [r7, #16]
 800c5f2:	4313      	orrs	r3, r2
 800c5f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	693a      	ldr	r2, [r7, #16]
 800c5fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	68fa      	ldr	r2, [r7, #12]
 800c600:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c602:	683b      	ldr	r3, [r7, #0]
 800c604:	685a      	ldr	r2, [r3, #4]
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	697a      	ldr	r2, [r7, #20]
 800c60e:	621a      	str	r2, [r3, #32]
}
 800c610:	bf00      	nop
 800c612:	371c      	adds	r7, #28
 800c614:	46bd      	mov	sp, r7
 800c616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c61a:	4770      	bx	lr
 800c61c:	fffeff8f 	.word	0xfffeff8f
 800c620:	40010000 	.word	0x40010000
 800c624:	40010400 	.word	0x40010400
 800c628:	40014000 	.word	0x40014000
 800c62c:	40014400 	.word	0x40014400
 800c630:	40014800 	.word	0x40014800

0800c634 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c634:	b480      	push	{r7}
 800c636:	b087      	sub	sp, #28
 800c638:	af00      	add	r7, sp, #0
 800c63a:	6078      	str	r0, [r7, #4]
 800c63c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	6a1b      	ldr	r3, [r3, #32]
 800c642:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	6a1b      	ldr	r3, [r3, #32]
 800c648:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	685b      	ldr	r3, [r3, #4]
 800c654:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	69db      	ldr	r3, [r3, #28]
 800c65a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c65c:	68fa      	ldr	r2, [r7, #12]
 800c65e:	4b24      	ldr	r3, [pc, #144]	@ (800c6f0 <TIM_OC4_SetConfig+0xbc>)
 800c660:	4013      	ands	r3, r2
 800c662:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c664:	68fb      	ldr	r3, [r7, #12]
 800c666:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c66a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c66c:	683b      	ldr	r3, [r7, #0]
 800c66e:	681b      	ldr	r3, [r3, #0]
 800c670:	021b      	lsls	r3, r3, #8
 800c672:	68fa      	ldr	r2, [r7, #12]
 800c674:	4313      	orrs	r3, r2
 800c676:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c678:	693b      	ldr	r3, [r7, #16]
 800c67a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800c67e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c680:	683b      	ldr	r3, [r7, #0]
 800c682:	689b      	ldr	r3, [r3, #8]
 800c684:	031b      	lsls	r3, r3, #12
 800c686:	693a      	ldr	r2, [r7, #16]
 800c688:	4313      	orrs	r3, r2
 800c68a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	4a19      	ldr	r2, [pc, #100]	@ (800c6f4 <TIM_OC4_SetConfig+0xc0>)
 800c690:	4293      	cmp	r3, r2
 800c692:	d00f      	beq.n	800c6b4 <TIM_OC4_SetConfig+0x80>
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	4a18      	ldr	r2, [pc, #96]	@ (800c6f8 <TIM_OC4_SetConfig+0xc4>)
 800c698:	4293      	cmp	r3, r2
 800c69a:	d00b      	beq.n	800c6b4 <TIM_OC4_SetConfig+0x80>
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	4a17      	ldr	r2, [pc, #92]	@ (800c6fc <TIM_OC4_SetConfig+0xc8>)
 800c6a0:	4293      	cmp	r3, r2
 800c6a2:	d007      	beq.n	800c6b4 <TIM_OC4_SetConfig+0x80>
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	4a16      	ldr	r2, [pc, #88]	@ (800c700 <TIM_OC4_SetConfig+0xcc>)
 800c6a8:	4293      	cmp	r3, r2
 800c6aa:	d003      	beq.n	800c6b4 <TIM_OC4_SetConfig+0x80>
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	4a15      	ldr	r2, [pc, #84]	@ (800c704 <TIM_OC4_SetConfig+0xd0>)
 800c6b0:	4293      	cmp	r3, r2
 800c6b2:	d109      	bne.n	800c6c8 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c6b4:	697b      	ldr	r3, [r7, #20]
 800c6b6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c6ba:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c6bc:	683b      	ldr	r3, [r7, #0]
 800c6be:	695b      	ldr	r3, [r3, #20]
 800c6c0:	019b      	lsls	r3, r3, #6
 800c6c2:	697a      	ldr	r2, [r7, #20]
 800c6c4:	4313      	orrs	r3, r2
 800c6c6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	697a      	ldr	r2, [r7, #20]
 800c6cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	68fa      	ldr	r2, [r7, #12]
 800c6d2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c6d4:	683b      	ldr	r3, [r7, #0]
 800c6d6:	685a      	ldr	r2, [r3, #4]
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	693a      	ldr	r2, [r7, #16]
 800c6e0:	621a      	str	r2, [r3, #32]
}
 800c6e2:	bf00      	nop
 800c6e4:	371c      	adds	r7, #28
 800c6e6:	46bd      	mov	sp, r7
 800c6e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ec:	4770      	bx	lr
 800c6ee:	bf00      	nop
 800c6f0:	feff8fff 	.word	0xfeff8fff
 800c6f4:	40010000 	.word	0x40010000
 800c6f8:	40010400 	.word	0x40010400
 800c6fc:	40014000 	.word	0x40014000
 800c700:	40014400 	.word	0x40014400
 800c704:	40014800 	.word	0x40014800

0800c708 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800c708:	b480      	push	{r7}
 800c70a:	b087      	sub	sp, #28
 800c70c:	af00      	add	r7, sp, #0
 800c70e:	6078      	str	r0, [r7, #4]
 800c710:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	6a1b      	ldr	r3, [r3, #32]
 800c716:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	6a1b      	ldr	r3, [r3, #32]
 800c71c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	685b      	ldr	r3, [r3, #4]
 800c728:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c72e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800c730:	68fa      	ldr	r2, [r7, #12]
 800c732:	4b21      	ldr	r3, [pc, #132]	@ (800c7b8 <TIM_OC5_SetConfig+0xb0>)
 800c734:	4013      	ands	r3, r2
 800c736:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c738:	683b      	ldr	r3, [r7, #0]
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	68fa      	ldr	r2, [r7, #12]
 800c73e:	4313      	orrs	r3, r2
 800c740:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800c742:	693b      	ldr	r3, [r7, #16]
 800c744:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800c748:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800c74a:	683b      	ldr	r3, [r7, #0]
 800c74c:	689b      	ldr	r3, [r3, #8]
 800c74e:	041b      	lsls	r3, r3, #16
 800c750:	693a      	ldr	r2, [r7, #16]
 800c752:	4313      	orrs	r3, r2
 800c754:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	4a18      	ldr	r2, [pc, #96]	@ (800c7bc <TIM_OC5_SetConfig+0xb4>)
 800c75a:	4293      	cmp	r3, r2
 800c75c:	d00f      	beq.n	800c77e <TIM_OC5_SetConfig+0x76>
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	4a17      	ldr	r2, [pc, #92]	@ (800c7c0 <TIM_OC5_SetConfig+0xb8>)
 800c762:	4293      	cmp	r3, r2
 800c764:	d00b      	beq.n	800c77e <TIM_OC5_SetConfig+0x76>
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	4a16      	ldr	r2, [pc, #88]	@ (800c7c4 <TIM_OC5_SetConfig+0xbc>)
 800c76a:	4293      	cmp	r3, r2
 800c76c:	d007      	beq.n	800c77e <TIM_OC5_SetConfig+0x76>
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	4a15      	ldr	r2, [pc, #84]	@ (800c7c8 <TIM_OC5_SetConfig+0xc0>)
 800c772:	4293      	cmp	r3, r2
 800c774:	d003      	beq.n	800c77e <TIM_OC5_SetConfig+0x76>
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	4a14      	ldr	r2, [pc, #80]	@ (800c7cc <TIM_OC5_SetConfig+0xc4>)
 800c77a:	4293      	cmp	r3, r2
 800c77c:	d109      	bne.n	800c792 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800c77e:	697b      	ldr	r3, [r7, #20]
 800c780:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c784:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800c786:	683b      	ldr	r3, [r7, #0]
 800c788:	695b      	ldr	r3, [r3, #20]
 800c78a:	021b      	lsls	r3, r3, #8
 800c78c:	697a      	ldr	r2, [r7, #20]
 800c78e:	4313      	orrs	r3, r2
 800c790:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	697a      	ldr	r2, [r7, #20]
 800c796:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	68fa      	ldr	r2, [r7, #12]
 800c79c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800c79e:	683b      	ldr	r3, [r7, #0]
 800c7a0:	685a      	ldr	r2, [r3, #4]
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	693a      	ldr	r2, [r7, #16]
 800c7aa:	621a      	str	r2, [r3, #32]
}
 800c7ac:	bf00      	nop
 800c7ae:	371c      	adds	r7, #28
 800c7b0:	46bd      	mov	sp, r7
 800c7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7b6:	4770      	bx	lr
 800c7b8:	fffeff8f 	.word	0xfffeff8f
 800c7bc:	40010000 	.word	0x40010000
 800c7c0:	40010400 	.word	0x40010400
 800c7c4:	40014000 	.word	0x40014000
 800c7c8:	40014400 	.word	0x40014400
 800c7cc:	40014800 	.word	0x40014800

0800c7d0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800c7d0:	b480      	push	{r7}
 800c7d2:	b087      	sub	sp, #28
 800c7d4:	af00      	add	r7, sp, #0
 800c7d6:	6078      	str	r0, [r7, #4]
 800c7d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	6a1b      	ldr	r3, [r3, #32]
 800c7de:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	6a1b      	ldr	r3, [r3, #32]
 800c7e4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	685b      	ldr	r3, [r3, #4]
 800c7f0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c7f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800c7f8:	68fa      	ldr	r2, [r7, #12]
 800c7fa:	4b22      	ldr	r3, [pc, #136]	@ (800c884 <TIM_OC6_SetConfig+0xb4>)
 800c7fc:	4013      	ands	r3, r2
 800c7fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c800:	683b      	ldr	r3, [r7, #0]
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	021b      	lsls	r3, r3, #8
 800c806:	68fa      	ldr	r2, [r7, #12]
 800c808:	4313      	orrs	r3, r2
 800c80a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800c80c:	693b      	ldr	r3, [r7, #16]
 800c80e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800c812:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800c814:	683b      	ldr	r3, [r7, #0]
 800c816:	689b      	ldr	r3, [r3, #8]
 800c818:	051b      	lsls	r3, r3, #20
 800c81a:	693a      	ldr	r2, [r7, #16]
 800c81c:	4313      	orrs	r3, r2
 800c81e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	4a19      	ldr	r2, [pc, #100]	@ (800c888 <TIM_OC6_SetConfig+0xb8>)
 800c824:	4293      	cmp	r3, r2
 800c826:	d00f      	beq.n	800c848 <TIM_OC6_SetConfig+0x78>
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	4a18      	ldr	r2, [pc, #96]	@ (800c88c <TIM_OC6_SetConfig+0xbc>)
 800c82c:	4293      	cmp	r3, r2
 800c82e:	d00b      	beq.n	800c848 <TIM_OC6_SetConfig+0x78>
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	4a17      	ldr	r2, [pc, #92]	@ (800c890 <TIM_OC6_SetConfig+0xc0>)
 800c834:	4293      	cmp	r3, r2
 800c836:	d007      	beq.n	800c848 <TIM_OC6_SetConfig+0x78>
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	4a16      	ldr	r2, [pc, #88]	@ (800c894 <TIM_OC6_SetConfig+0xc4>)
 800c83c:	4293      	cmp	r3, r2
 800c83e:	d003      	beq.n	800c848 <TIM_OC6_SetConfig+0x78>
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	4a15      	ldr	r2, [pc, #84]	@ (800c898 <TIM_OC6_SetConfig+0xc8>)
 800c844:	4293      	cmp	r3, r2
 800c846:	d109      	bne.n	800c85c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800c848:	697b      	ldr	r3, [r7, #20]
 800c84a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800c84e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800c850:	683b      	ldr	r3, [r7, #0]
 800c852:	695b      	ldr	r3, [r3, #20]
 800c854:	029b      	lsls	r3, r3, #10
 800c856:	697a      	ldr	r2, [r7, #20]
 800c858:	4313      	orrs	r3, r2
 800c85a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	697a      	ldr	r2, [r7, #20]
 800c860:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	68fa      	ldr	r2, [r7, #12]
 800c866:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800c868:	683b      	ldr	r3, [r7, #0]
 800c86a:	685a      	ldr	r2, [r3, #4]
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	693a      	ldr	r2, [r7, #16]
 800c874:	621a      	str	r2, [r3, #32]
}
 800c876:	bf00      	nop
 800c878:	371c      	adds	r7, #28
 800c87a:	46bd      	mov	sp, r7
 800c87c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c880:	4770      	bx	lr
 800c882:	bf00      	nop
 800c884:	feff8fff 	.word	0xfeff8fff
 800c888:	40010000 	.word	0x40010000
 800c88c:	40010400 	.word	0x40010400
 800c890:	40014000 	.word	0x40014000
 800c894:	40014400 	.word	0x40014400
 800c898:	40014800 	.word	0x40014800

0800c89c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c89c:	b480      	push	{r7}
 800c89e:	b087      	sub	sp, #28
 800c8a0:	af00      	add	r7, sp, #0
 800c8a2:	60f8      	str	r0, [r7, #12]
 800c8a4:	60b9      	str	r1, [r7, #8]
 800c8a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	6a1b      	ldr	r3, [r3, #32]
 800c8ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c8ae:	68fb      	ldr	r3, [r7, #12]
 800c8b0:	6a1b      	ldr	r3, [r3, #32]
 800c8b2:	f023 0201 	bic.w	r2, r3, #1
 800c8b6:	68fb      	ldr	r3, [r7, #12]
 800c8b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c8ba:	68fb      	ldr	r3, [r7, #12]
 800c8bc:	699b      	ldr	r3, [r3, #24]
 800c8be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c8c0:	693b      	ldr	r3, [r7, #16]
 800c8c2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800c8c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	011b      	lsls	r3, r3, #4
 800c8cc:	693a      	ldr	r2, [r7, #16]
 800c8ce:	4313      	orrs	r3, r2
 800c8d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c8d2:	697b      	ldr	r3, [r7, #20]
 800c8d4:	f023 030a 	bic.w	r3, r3, #10
 800c8d8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c8da:	697a      	ldr	r2, [r7, #20]
 800c8dc:	68bb      	ldr	r3, [r7, #8]
 800c8de:	4313      	orrs	r3, r2
 800c8e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c8e2:	68fb      	ldr	r3, [r7, #12]
 800c8e4:	693a      	ldr	r2, [r7, #16]
 800c8e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c8e8:	68fb      	ldr	r3, [r7, #12]
 800c8ea:	697a      	ldr	r2, [r7, #20]
 800c8ec:	621a      	str	r2, [r3, #32]
}
 800c8ee:	bf00      	nop
 800c8f0:	371c      	adds	r7, #28
 800c8f2:	46bd      	mov	sp, r7
 800c8f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8f8:	4770      	bx	lr

0800c8fa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c8fa:	b480      	push	{r7}
 800c8fc:	b087      	sub	sp, #28
 800c8fe:	af00      	add	r7, sp, #0
 800c900:	60f8      	str	r0, [r7, #12]
 800c902:	60b9      	str	r1, [r7, #8]
 800c904:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800c906:	68fb      	ldr	r3, [r7, #12]
 800c908:	6a1b      	ldr	r3, [r3, #32]
 800c90a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c90c:	68fb      	ldr	r3, [r7, #12]
 800c90e:	6a1b      	ldr	r3, [r3, #32]
 800c910:	f023 0210 	bic.w	r2, r3, #16
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c918:	68fb      	ldr	r3, [r7, #12]
 800c91a:	699b      	ldr	r3, [r3, #24]
 800c91c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c91e:	693b      	ldr	r3, [r7, #16]
 800c920:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800c924:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	031b      	lsls	r3, r3, #12
 800c92a:	693a      	ldr	r2, [r7, #16]
 800c92c:	4313      	orrs	r3, r2
 800c92e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c930:	697b      	ldr	r3, [r7, #20]
 800c932:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800c936:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c938:	68bb      	ldr	r3, [r7, #8]
 800c93a:	011b      	lsls	r3, r3, #4
 800c93c:	697a      	ldr	r2, [r7, #20]
 800c93e:	4313      	orrs	r3, r2
 800c940:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c942:	68fb      	ldr	r3, [r7, #12]
 800c944:	693a      	ldr	r2, [r7, #16]
 800c946:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c948:	68fb      	ldr	r3, [r7, #12]
 800c94a:	697a      	ldr	r2, [r7, #20]
 800c94c:	621a      	str	r2, [r3, #32]
}
 800c94e:	bf00      	nop
 800c950:	371c      	adds	r7, #28
 800c952:	46bd      	mov	sp, r7
 800c954:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c958:	4770      	bx	lr
	...

0800c95c <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c95c:	b480      	push	{r7}
 800c95e:	b085      	sub	sp, #20
 800c960:	af00      	add	r7, sp, #0
 800c962:	6078      	str	r0, [r7, #4]
 800c964:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	689b      	ldr	r3, [r3, #8]
 800c96a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c96c:	68fa      	ldr	r2, [r7, #12]
 800c96e:	4b09      	ldr	r3, [pc, #36]	@ (800c994 <TIM_ITRx_SetConfig+0x38>)
 800c970:	4013      	ands	r3, r2
 800c972:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c974:	683a      	ldr	r2, [r7, #0]
 800c976:	68fb      	ldr	r3, [r7, #12]
 800c978:	4313      	orrs	r3, r2
 800c97a:	f043 0307 	orr.w	r3, r3, #7
 800c97e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	68fa      	ldr	r2, [r7, #12]
 800c984:	609a      	str	r2, [r3, #8]
}
 800c986:	bf00      	nop
 800c988:	3714      	adds	r7, #20
 800c98a:	46bd      	mov	sp, r7
 800c98c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c990:	4770      	bx	lr
 800c992:	bf00      	nop
 800c994:	ffcfff8f 	.word	0xffcfff8f

0800c998 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c998:	b480      	push	{r7}
 800c99a:	b087      	sub	sp, #28
 800c99c:	af00      	add	r7, sp, #0
 800c99e:	60f8      	str	r0, [r7, #12]
 800c9a0:	60b9      	str	r1, [r7, #8]
 800c9a2:	607a      	str	r2, [r7, #4]
 800c9a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c9a6:	68fb      	ldr	r3, [r7, #12]
 800c9a8:	689b      	ldr	r3, [r3, #8]
 800c9aa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c9ac:	697b      	ldr	r3, [r7, #20]
 800c9ae:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c9b2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c9b4:	683b      	ldr	r3, [r7, #0]
 800c9b6:	021a      	lsls	r2, r3, #8
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	431a      	orrs	r2, r3
 800c9bc:	68bb      	ldr	r3, [r7, #8]
 800c9be:	4313      	orrs	r3, r2
 800c9c0:	697a      	ldr	r2, [r7, #20]
 800c9c2:	4313      	orrs	r3, r2
 800c9c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c9c6:	68fb      	ldr	r3, [r7, #12]
 800c9c8:	697a      	ldr	r2, [r7, #20]
 800c9ca:	609a      	str	r2, [r3, #8]
}
 800c9cc:	bf00      	nop
 800c9ce:	371c      	adds	r7, #28
 800c9d0:	46bd      	mov	sp, r7
 800c9d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9d6:	4770      	bx	lr

0800c9d8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800c9d8:	b480      	push	{r7}
 800c9da:	b087      	sub	sp, #28
 800c9dc:	af00      	add	r7, sp, #0
 800c9de:	60f8      	str	r0, [r7, #12]
 800c9e0:	60b9      	str	r1, [r7, #8]
 800c9e2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c9e4:	68bb      	ldr	r3, [r7, #8]
 800c9e6:	f003 031f 	and.w	r3, r3, #31
 800c9ea:	2201      	movs	r2, #1
 800c9ec:	fa02 f303 	lsl.w	r3, r2, r3
 800c9f0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800c9f2:	68fb      	ldr	r3, [r7, #12]
 800c9f4:	6a1a      	ldr	r2, [r3, #32]
 800c9f6:	697b      	ldr	r3, [r7, #20]
 800c9f8:	43db      	mvns	r3, r3
 800c9fa:	401a      	ands	r2, r3
 800c9fc:	68fb      	ldr	r3, [r7, #12]
 800c9fe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ca00:	68fb      	ldr	r3, [r7, #12]
 800ca02:	6a1a      	ldr	r2, [r3, #32]
 800ca04:	68bb      	ldr	r3, [r7, #8]
 800ca06:	f003 031f 	and.w	r3, r3, #31
 800ca0a:	6879      	ldr	r1, [r7, #4]
 800ca0c:	fa01 f303 	lsl.w	r3, r1, r3
 800ca10:	431a      	orrs	r2, r3
 800ca12:	68fb      	ldr	r3, [r7, #12]
 800ca14:	621a      	str	r2, [r3, #32]
}
 800ca16:	bf00      	nop
 800ca18:	371c      	adds	r7, #28
 800ca1a:	46bd      	mov	sp, r7
 800ca1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca20:	4770      	bx	lr
	...

0800ca24 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ca24:	b480      	push	{r7}
 800ca26:	b085      	sub	sp, #20
 800ca28:	af00      	add	r7, sp, #0
 800ca2a:	6078      	str	r0, [r7, #4]
 800ca2c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ca34:	2b01      	cmp	r3, #1
 800ca36:	d101      	bne.n	800ca3c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ca38:	2302      	movs	r3, #2
 800ca3a:	e06d      	b.n	800cb18 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	2201      	movs	r2, #1
 800ca40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	2202      	movs	r2, #2
 800ca48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	685b      	ldr	r3, [r3, #4]
 800ca52:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	681b      	ldr	r3, [r3, #0]
 800ca58:	689b      	ldr	r3, [r3, #8]
 800ca5a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	4a30      	ldr	r2, [pc, #192]	@ (800cb24 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800ca62:	4293      	cmp	r3, r2
 800ca64:	d004      	beq.n	800ca70 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	681b      	ldr	r3, [r3, #0]
 800ca6a:	4a2f      	ldr	r2, [pc, #188]	@ (800cb28 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800ca6c:	4293      	cmp	r3, r2
 800ca6e:	d108      	bne.n	800ca82 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800ca70:	68fb      	ldr	r3, [r7, #12]
 800ca72:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800ca76:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800ca78:	683b      	ldr	r3, [r7, #0]
 800ca7a:	685b      	ldr	r3, [r3, #4]
 800ca7c:	68fa      	ldr	r2, [r7, #12]
 800ca7e:	4313      	orrs	r3, r2
 800ca80:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ca82:	68fb      	ldr	r3, [r7, #12]
 800ca84:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ca88:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ca8a:	683b      	ldr	r3, [r7, #0]
 800ca8c:	681b      	ldr	r3, [r3, #0]
 800ca8e:	68fa      	ldr	r2, [r7, #12]
 800ca90:	4313      	orrs	r3, r2
 800ca92:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	681b      	ldr	r3, [r3, #0]
 800ca98:	68fa      	ldr	r2, [r7, #12]
 800ca9a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	681b      	ldr	r3, [r3, #0]
 800caa0:	4a20      	ldr	r2, [pc, #128]	@ (800cb24 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800caa2:	4293      	cmp	r3, r2
 800caa4:	d022      	beq.n	800caec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	681b      	ldr	r3, [r3, #0]
 800caaa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800caae:	d01d      	beq.n	800caec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	681b      	ldr	r3, [r3, #0]
 800cab4:	4a1d      	ldr	r2, [pc, #116]	@ (800cb2c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800cab6:	4293      	cmp	r3, r2
 800cab8:	d018      	beq.n	800caec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	681b      	ldr	r3, [r3, #0]
 800cabe:	4a1c      	ldr	r2, [pc, #112]	@ (800cb30 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800cac0:	4293      	cmp	r3, r2
 800cac2:	d013      	beq.n	800caec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	681b      	ldr	r3, [r3, #0]
 800cac8:	4a1a      	ldr	r2, [pc, #104]	@ (800cb34 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800caca:	4293      	cmp	r3, r2
 800cacc:	d00e      	beq.n	800caec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	681b      	ldr	r3, [r3, #0]
 800cad2:	4a15      	ldr	r2, [pc, #84]	@ (800cb28 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800cad4:	4293      	cmp	r3, r2
 800cad6:	d009      	beq.n	800caec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	681b      	ldr	r3, [r3, #0]
 800cadc:	4a16      	ldr	r2, [pc, #88]	@ (800cb38 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800cade:	4293      	cmp	r3, r2
 800cae0:	d004      	beq.n	800caec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	681b      	ldr	r3, [r3, #0]
 800cae6:	4a15      	ldr	r2, [pc, #84]	@ (800cb3c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800cae8:	4293      	cmp	r3, r2
 800caea:	d10c      	bne.n	800cb06 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800caec:	68bb      	ldr	r3, [r7, #8]
 800caee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800caf2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800caf4:	683b      	ldr	r3, [r7, #0]
 800caf6:	689b      	ldr	r3, [r3, #8]
 800caf8:	68ba      	ldr	r2, [r7, #8]
 800cafa:	4313      	orrs	r3, r2
 800cafc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	681b      	ldr	r3, [r3, #0]
 800cb02:	68ba      	ldr	r2, [r7, #8]
 800cb04:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	2201      	movs	r2, #1
 800cb0a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	2200      	movs	r2, #0
 800cb12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800cb16:	2300      	movs	r3, #0
}
 800cb18:	4618      	mov	r0, r3
 800cb1a:	3714      	adds	r7, #20
 800cb1c:	46bd      	mov	sp, r7
 800cb1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb22:	4770      	bx	lr
 800cb24:	40010000 	.word	0x40010000
 800cb28:	40010400 	.word	0x40010400
 800cb2c:	40000400 	.word	0x40000400
 800cb30:	40000800 	.word	0x40000800
 800cb34:	40000c00 	.word	0x40000c00
 800cb38:	40001800 	.word	0x40001800
 800cb3c:	40014000 	.word	0x40014000

0800cb40 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800cb40:	b480      	push	{r7}
 800cb42:	b083      	sub	sp, #12
 800cb44:	af00      	add	r7, sp, #0
 800cb46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800cb48:	bf00      	nop
 800cb4a:	370c      	adds	r7, #12
 800cb4c:	46bd      	mov	sp, r7
 800cb4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb52:	4770      	bx	lr

0800cb54 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800cb54:	b480      	push	{r7}
 800cb56:	b083      	sub	sp, #12
 800cb58:	af00      	add	r7, sp, #0
 800cb5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800cb5c:	bf00      	nop
 800cb5e:	370c      	adds	r7, #12
 800cb60:	46bd      	mov	sp, r7
 800cb62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb66:	4770      	bx	lr

0800cb68 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800cb68:	b480      	push	{r7}
 800cb6a:	b083      	sub	sp, #12
 800cb6c:	af00      	add	r7, sp, #0
 800cb6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800cb70:	bf00      	nop
 800cb72:	370c      	adds	r7, #12
 800cb74:	46bd      	mov	sp, r7
 800cb76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb7a:	4770      	bx	lr

0800cb7c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800cb7c:	b580      	push	{r7, lr}
 800cb7e:	b082      	sub	sp, #8
 800cb80:	af00      	add	r7, sp, #0
 800cb82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	d101      	bne.n	800cb8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800cb8a:	2301      	movs	r3, #1
 800cb8c:	e042      	b.n	800cc14 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	d106      	bne.n	800cba6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	2200      	movs	r2, #0
 800cb9c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800cba0:	6878      	ldr	r0, [r7, #4]
 800cba2:	f000 f83b 	bl	800cc1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	2224      	movs	r2, #36	@ 0x24
 800cbaa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	681b      	ldr	r3, [r3, #0]
 800cbb2:	681a      	ldr	r2, [r3, #0]
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	f022 0201 	bic.w	r2, r2, #1
 800cbbc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cbc2:	2b00      	cmp	r3, #0
 800cbc4:	d002      	beq.n	800cbcc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800cbc6:	6878      	ldr	r0, [r7, #4]
 800cbc8:	f000 fe28 	bl	800d81c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800cbcc:	6878      	ldr	r0, [r7, #4]
 800cbce:	f000 f8bd 	bl	800cd4c <UART_SetConfig>
 800cbd2:	4603      	mov	r3, r0
 800cbd4:	2b01      	cmp	r3, #1
 800cbd6:	d101      	bne.n	800cbdc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800cbd8:	2301      	movs	r3, #1
 800cbda:	e01b      	b.n	800cc14 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	681b      	ldr	r3, [r3, #0]
 800cbe0:	685a      	ldr	r2, [r3, #4]
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800cbea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	681b      	ldr	r3, [r3, #0]
 800cbf0:	689a      	ldr	r2, [r3, #8]
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	681b      	ldr	r3, [r3, #0]
 800cbf6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800cbfa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	681b      	ldr	r3, [r3, #0]
 800cc00:	681a      	ldr	r2, [r3, #0]
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	681b      	ldr	r3, [r3, #0]
 800cc06:	f042 0201 	orr.w	r2, r2, #1
 800cc0a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800cc0c:	6878      	ldr	r0, [r7, #4]
 800cc0e:	f000 fea7 	bl	800d960 <UART_CheckIdleState>
 800cc12:	4603      	mov	r3, r0
}
 800cc14:	4618      	mov	r0, r3
 800cc16:	3708      	adds	r7, #8
 800cc18:	46bd      	mov	sp, r7
 800cc1a:	bd80      	pop	{r7, pc}

0800cc1c <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 800cc1c:	b480      	push	{r7}
 800cc1e:	b083      	sub	sp, #12
 800cc20:	af00      	add	r7, sp, #0
 800cc22:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 800cc24:	bf00      	nop
 800cc26:	370c      	adds	r7, #12
 800cc28:	46bd      	mov	sp, r7
 800cc2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc2e:	4770      	bx	lr

0800cc30 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800cc30:	b580      	push	{r7, lr}
 800cc32:	b08a      	sub	sp, #40	@ 0x28
 800cc34:	af02      	add	r7, sp, #8
 800cc36:	60f8      	str	r0, [r7, #12]
 800cc38:	60b9      	str	r1, [r7, #8]
 800cc3a:	603b      	str	r3, [r7, #0]
 800cc3c:	4613      	mov	r3, r2
 800cc3e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800cc40:	68fb      	ldr	r3, [r7, #12]
 800cc42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cc46:	2b20      	cmp	r3, #32
 800cc48:	d17b      	bne.n	800cd42 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800cc4a:	68bb      	ldr	r3, [r7, #8]
 800cc4c:	2b00      	cmp	r3, #0
 800cc4e:	d002      	beq.n	800cc56 <HAL_UART_Transmit+0x26>
 800cc50:	88fb      	ldrh	r3, [r7, #6]
 800cc52:	2b00      	cmp	r3, #0
 800cc54:	d101      	bne.n	800cc5a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800cc56:	2301      	movs	r3, #1
 800cc58:	e074      	b.n	800cd44 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cc5a:	68fb      	ldr	r3, [r7, #12]
 800cc5c:	2200      	movs	r2, #0
 800cc5e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800cc62:	68fb      	ldr	r3, [r7, #12]
 800cc64:	2221      	movs	r2, #33	@ 0x21
 800cc66:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800cc6a:	f7f5 fe95 	bl	8002998 <HAL_GetTick>
 800cc6e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800cc70:	68fb      	ldr	r3, [r7, #12]
 800cc72:	88fa      	ldrh	r2, [r7, #6]
 800cc74:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800cc78:	68fb      	ldr	r3, [r7, #12]
 800cc7a:	88fa      	ldrh	r2, [r7, #6]
 800cc7c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cc80:	68fb      	ldr	r3, [r7, #12]
 800cc82:	689b      	ldr	r3, [r3, #8]
 800cc84:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cc88:	d108      	bne.n	800cc9c <HAL_UART_Transmit+0x6c>
 800cc8a:	68fb      	ldr	r3, [r7, #12]
 800cc8c:	691b      	ldr	r3, [r3, #16]
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	d104      	bne.n	800cc9c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800cc92:	2300      	movs	r3, #0
 800cc94:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800cc96:	68bb      	ldr	r3, [r7, #8]
 800cc98:	61bb      	str	r3, [r7, #24]
 800cc9a:	e003      	b.n	800cca4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800cc9c:	68bb      	ldr	r3, [r7, #8]
 800cc9e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800cca0:	2300      	movs	r3, #0
 800cca2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800cca4:	e030      	b.n	800cd08 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800cca6:	683b      	ldr	r3, [r7, #0]
 800cca8:	9300      	str	r3, [sp, #0]
 800ccaa:	697b      	ldr	r3, [r7, #20]
 800ccac:	2200      	movs	r2, #0
 800ccae:	2180      	movs	r1, #128	@ 0x80
 800ccb0:	68f8      	ldr	r0, [r7, #12]
 800ccb2:	f000 feff 	bl	800dab4 <UART_WaitOnFlagUntilTimeout>
 800ccb6:	4603      	mov	r3, r0
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	d005      	beq.n	800ccc8 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800ccbc:	68fb      	ldr	r3, [r7, #12]
 800ccbe:	2220      	movs	r2, #32
 800ccc0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800ccc4:	2303      	movs	r3, #3
 800ccc6:	e03d      	b.n	800cd44 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800ccc8:	69fb      	ldr	r3, [r7, #28]
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	d10b      	bne.n	800cce6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800ccce:	69bb      	ldr	r3, [r7, #24]
 800ccd0:	881b      	ldrh	r3, [r3, #0]
 800ccd2:	461a      	mov	r2, r3
 800ccd4:	68fb      	ldr	r3, [r7, #12]
 800ccd6:	681b      	ldr	r3, [r3, #0]
 800ccd8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ccdc:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800ccde:	69bb      	ldr	r3, [r7, #24]
 800cce0:	3302      	adds	r3, #2
 800cce2:	61bb      	str	r3, [r7, #24]
 800cce4:	e007      	b.n	800ccf6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800cce6:	69fb      	ldr	r3, [r7, #28]
 800cce8:	781a      	ldrb	r2, [r3, #0]
 800ccea:	68fb      	ldr	r3, [r7, #12]
 800ccec:	681b      	ldr	r3, [r3, #0]
 800ccee:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800ccf0:	69fb      	ldr	r3, [r7, #28]
 800ccf2:	3301      	adds	r3, #1
 800ccf4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800ccf6:	68fb      	ldr	r3, [r7, #12]
 800ccf8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800ccfc:	b29b      	uxth	r3, r3
 800ccfe:	3b01      	subs	r3, #1
 800cd00:	b29a      	uxth	r2, r3
 800cd02:	68fb      	ldr	r3, [r7, #12]
 800cd04:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800cd08:	68fb      	ldr	r3, [r7, #12]
 800cd0a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800cd0e:	b29b      	uxth	r3, r3
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	d1c8      	bne.n	800cca6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800cd14:	683b      	ldr	r3, [r7, #0]
 800cd16:	9300      	str	r3, [sp, #0]
 800cd18:	697b      	ldr	r3, [r7, #20]
 800cd1a:	2200      	movs	r2, #0
 800cd1c:	2140      	movs	r1, #64	@ 0x40
 800cd1e:	68f8      	ldr	r0, [r7, #12]
 800cd20:	f000 fec8 	bl	800dab4 <UART_WaitOnFlagUntilTimeout>
 800cd24:	4603      	mov	r3, r0
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	d005      	beq.n	800cd36 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800cd2a:	68fb      	ldr	r3, [r7, #12]
 800cd2c:	2220      	movs	r2, #32
 800cd2e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800cd32:	2303      	movs	r3, #3
 800cd34:	e006      	b.n	800cd44 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800cd36:	68fb      	ldr	r3, [r7, #12]
 800cd38:	2220      	movs	r2, #32
 800cd3a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800cd3e:	2300      	movs	r3, #0
 800cd40:	e000      	b.n	800cd44 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800cd42:	2302      	movs	r3, #2
  }
}
 800cd44:	4618      	mov	r0, r3
 800cd46:	3720      	adds	r7, #32
 800cd48:	46bd      	mov	sp, r7
 800cd4a:	bd80      	pop	{r7, pc}

0800cd4c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800cd4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800cd50:	b092      	sub	sp, #72	@ 0x48
 800cd52:	af00      	add	r7, sp, #0
 800cd54:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800cd56:	2300      	movs	r3, #0
 800cd58:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800cd5c:	697b      	ldr	r3, [r7, #20]
 800cd5e:	689a      	ldr	r2, [r3, #8]
 800cd60:	697b      	ldr	r3, [r7, #20]
 800cd62:	691b      	ldr	r3, [r3, #16]
 800cd64:	431a      	orrs	r2, r3
 800cd66:	697b      	ldr	r3, [r7, #20]
 800cd68:	695b      	ldr	r3, [r3, #20]
 800cd6a:	431a      	orrs	r2, r3
 800cd6c:	697b      	ldr	r3, [r7, #20]
 800cd6e:	69db      	ldr	r3, [r3, #28]
 800cd70:	4313      	orrs	r3, r2
 800cd72:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800cd74:	697b      	ldr	r3, [r7, #20]
 800cd76:	681b      	ldr	r3, [r3, #0]
 800cd78:	681a      	ldr	r2, [r3, #0]
 800cd7a:	4bbe      	ldr	r3, [pc, #760]	@ (800d074 <UART_SetConfig+0x328>)
 800cd7c:	4013      	ands	r3, r2
 800cd7e:	697a      	ldr	r2, [r7, #20]
 800cd80:	6812      	ldr	r2, [r2, #0]
 800cd82:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800cd84:	430b      	orrs	r3, r1
 800cd86:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800cd88:	697b      	ldr	r3, [r7, #20]
 800cd8a:	681b      	ldr	r3, [r3, #0]
 800cd8c:	685b      	ldr	r3, [r3, #4]
 800cd8e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800cd92:	697b      	ldr	r3, [r7, #20]
 800cd94:	68da      	ldr	r2, [r3, #12]
 800cd96:	697b      	ldr	r3, [r7, #20]
 800cd98:	681b      	ldr	r3, [r3, #0]
 800cd9a:	430a      	orrs	r2, r1
 800cd9c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800cd9e:	697b      	ldr	r3, [r7, #20]
 800cda0:	699b      	ldr	r3, [r3, #24]
 800cda2:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800cda4:	697b      	ldr	r3, [r7, #20]
 800cda6:	681b      	ldr	r3, [r3, #0]
 800cda8:	4ab3      	ldr	r2, [pc, #716]	@ (800d078 <UART_SetConfig+0x32c>)
 800cdaa:	4293      	cmp	r3, r2
 800cdac:	d004      	beq.n	800cdb8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800cdae:	697b      	ldr	r3, [r7, #20]
 800cdb0:	6a1b      	ldr	r3, [r3, #32]
 800cdb2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800cdb4:	4313      	orrs	r3, r2
 800cdb6:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800cdb8:	697b      	ldr	r3, [r7, #20]
 800cdba:	681b      	ldr	r3, [r3, #0]
 800cdbc:	689a      	ldr	r2, [r3, #8]
 800cdbe:	4baf      	ldr	r3, [pc, #700]	@ (800d07c <UART_SetConfig+0x330>)
 800cdc0:	4013      	ands	r3, r2
 800cdc2:	697a      	ldr	r2, [r7, #20]
 800cdc4:	6812      	ldr	r2, [r2, #0]
 800cdc6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800cdc8:	430b      	orrs	r3, r1
 800cdca:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800cdcc:	697b      	ldr	r3, [r7, #20]
 800cdce:	681b      	ldr	r3, [r3, #0]
 800cdd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cdd2:	f023 010f 	bic.w	r1, r3, #15
 800cdd6:	697b      	ldr	r3, [r7, #20]
 800cdd8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800cdda:	697b      	ldr	r3, [r7, #20]
 800cddc:	681b      	ldr	r3, [r3, #0]
 800cdde:	430a      	orrs	r2, r1
 800cde0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800cde2:	697b      	ldr	r3, [r7, #20]
 800cde4:	681b      	ldr	r3, [r3, #0]
 800cde6:	4aa6      	ldr	r2, [pc, #664]	@ (800d080 <UART_SetConfig+0x334>)
 800cde8:	4293      	cmp	r3, r2
 800cdea:	d177      	bne.n	800cedc <UART_SetConfig+0x190>
 800cdec:	4ba5      	ldr	r3, [pc, #660]	@ (800d084 <UART_SetConfig+0x338>)
 800cdee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cdf0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800cdf4:	2b28      	cmp	r3, #40	@ 0x28
 800cdf6:	d86d      	bhi.n	800ced4 <UART_SetConfig+0x188>
 800cdf8:	a201      	add	r2, pc, #4	@ (adr r2, 800ce00 <UART_SetConfig+0xb4>)
 800cdfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cdfe:	bf00      	nop
 800ce00:	0800cea5 	.word	0x0800cea5
 800ce04:	0800ced5 	.word	0x0800ced5
 800ce08:	0800ced5 	.word	0x0800ced5
 800ce0c:	0800ced5 	.word	0x0800ced5
 800ce10:	0800ced5 	.word	0x0800ced5
 800ce14:	0800ced5 	.word	0x0800ced5
 800ce18:	0800ced5 	.word	0x0800ced5
 800ce1c:	0800ced5 	.word	0x0800ced5
 800ce20:	0800cead 	.word	0x0800cead
 800ce24:	0800ced5 	.word	0x0800ced5
 800ce28:	0800ced5 	.word	0x0800ced5
 800ce2c:	0800ced5 	.word	0x0800ced5
 800ce30:	0800ced5 	.word	0x0800ced5
 800ce34:	0800ced5 	.word	0x0800ced5
 800ce38:	0800ced5 	.word	0x0800ced5
 800ce3c:	0800ced5 	.word	0x0800ced5
 800ce40:	0800ceb5 	.word	0x0800ceb5
 800ce44:	0800ced5 	.word	0x0800ced5
 800ce48:	0800ced5 	.word	0x0800ced5
 800ce4c:	0800ced5 	.word	0x0800ced5
 800ce50:	0800ced5 	.word	0x0800ced5
 800ce54:	0800ced5 	.word	0x0800ced5
 800ce58:	0800ced5 	.word	0x0800ced5
 800ce5c:	0800ced5 	.word	0x0800ced5
 800ce60:	0800cebd 	.word	0x0800cebd
 800ce64:	0800ced5 	.word	0x0800ced5
 800ce68:	0800ced5 	.word	0x0800ced5
 800ce6c:	0800ced5 	.word	0x0800ced5
 800ce70:	0800ced5 	.word	0x0800ced5
 800ce74:	0800ced5 	.word	0x0800ced5
 800ce78:	0800ced5 	.word	0x0800ced5
 800ce7c:	0800ced5 	.word	0x0800ced5
 800ce80:	0800cec5 	.word	0x0800cec5
 800ce84:	0800ced5 	.word	0x0800ced5
 800ce88:	0800ced5 	.word	0x0800ced5
 800ce8c:	0800ced5 	.word	0x0800ced5
 800ce90:	0800ced5 	.word	0x0800ced5
 800ce94:	0800ced5 	.word	0x0800ced5
 800ce98:	0800ced5 	.word	0x0800ced5
 800ce9c:	0800ced5 	.word	0x0800ced5
 800cea0:	0800cecd 	.word	0x0800cecd
 800cea4:	2301      	movs	r3, #1
 800cea6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ceaa:	e222      	b.n	800d2f2 <UART_SetConfig+0x5a6>
 800ceac:	2304      	movs	r3, #4
 800ceae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ceb2:	e21e      	b.n	800d2f2 <UART_SetConfig+0x5a6>
 800ceb4:	2308      	movs	r3, #8
 800ceb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ceba:	e21a      	b.n	800d2f2 <UART_SetConfig+0x5a6>
 800cebc:	2310      	movs	r3, #16
 800cebe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cec2:	e216      	b.n	800d2f2 <UART_SetConfig+0x5a6>
 800cec4:	2320      	movs	r3, #32
 800cec6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ceca:	e212      	b.n	800d2f2 <UART_SetConfig+0x5a6>
 800cecc:	2340      	movs	r3, #64	@ 0x40
 800cece:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ced2:	e20e      	b.n	800d2f2 <UART_SetConfig+0x5a6>
 800ced4:	2380      	movs	r3, #128	@ 0x80
 800ced6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ceda:	e20a      	b.n	800d2f2 <UART_SetConfig+0x5a6>
 800cedc:	697b      	ldr	r3, [r7, #20]
 800cede:	681b      	ldr	r3, [r3, #0]
 800cee0:	4a69      	ldr	r2, [pc, #420]	@ (800d088 <UART_SetConfig+0x33c>)
 800cee2:	4293      	cmp	r3, r2
 800cee4:	d130      	bne.n	800cf48 <UART_SetConfig+0x1fc>
 800cee6:	4b67      	ldr	r3, [pc, #412]	@ (800d084 <UART_SetConfig+0x338>)
 800cee8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ceea:	f003 0307 	and.w	r3, r3, #7
 800ceee:	2b05      	cmp	r3, #5
 800cef0:	d826      	bhi.n	800cf40 <UART_SetConfig+0x1f4>
 800cef2:	a201      	add	r2, pc, #4	@ (adr r2, 800cef8 <UART_SetConfig+0x1ac>)
 800cef4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cef8:	0800cf11 	.word	0x0800cf11
 800cefc:	0800cf19 	.word	0x0800cf19
 800cf00:	0800cf21 	.word	0x0800cf21
 800cf04:	0800cf29 	.word	0x0800cf29
 800cf08:	0800cf31 	.word	0x0800cf31
 800cf0c:	0800cf39 	.word	0x0800cf39
 800cf10:	2300      	movs	r3, #0
 800cf12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cf16:	e1ec      	b.n	800d2f2 <UART_SetConfig+0x5a6>
 800cf18:	2304      	movs	r3, #4
 800cf1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cf1e:	e1e8      	b.n	800d2f2 <UART_SetConfig+0x5a6>
 800cf20:	2308      	movs	r3, #8
 800cf22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cf26:	e1e4      	b.n	800d2f2 <UART_SetConfig+0x5a6>
 800cf28:	2310      	movs	r3, #16
 800cf2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cf2e:	e1e0      	b.n	800d2f2 <UART_SetConfig+0x5a6>
 800cf30:	2320      	movs	r3, #32
 800cf32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cf36:	e1dc      	b.n	800d2f2 <UART_SetConfig+0x5a6>
 800cf38:	2340      	movs	r3, #64	@ 0x40
 800cf3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cf3e:	e1d8      	b.n	800d2f2 <UART_SetConfig+0x5a6>
 800cf40:	2380      	movs	r3, #128	@ 0x80
 800cf42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cf46:	e1d4      	b.n	800d2f2 <UART_SetConfig+0x5a6>
 800cf48:	697b      	ldr	r3, [r7, #20]
 800cf4a:	681b      	ldr	r3, [r3, #0]
 800cf4c:	4a4f      	ldr	r2, [pc, #316]	@ (800d08c <UART_SetConfig+0x340>)
 800cf4e:	4293      	cmp	r3, r2
 800cf50:	d130      	bne.n	800cfb4 <UART_SetConfig+0x268>
 800cf52:	4b4c      	ldr	r3, [pc, #304]	@ (800d084 <UART_SetConfig+0x338>)
 800cf54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cf56:	f003 0307 	and.w	r3, r3, #7
 800cf5a:	2b05      	cmp	r3, #5
 800cf5c:	d826      	bhi.n	800cfac <UART_SetConfig+0x260>
 800cf5e:	a201      	add	r2, pc, #4	@ (adr r2, 800cf64 <UART_SetConfig+0x218>)
 800cf60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf64:	0800cf7d 	.word	0x0800cf7d
 800cf68:	0800cf85 	.word	0x0800cf85
 800cf6c:	0800cf8d 	.word	0x0800cf8d
 800cf70:	0800cf95 	.word	0x0800cf95
 800cf74:	0800cf9d 	.word	0x0800cf9d
 800cf78:	0800cfa5 	.word	0x0800cfa5
 800cf7c:	2300      	movs	r3, #0
 800cf7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cf82:	e1b6      	b.n	800d2f2 <UART_SetConfig+0x5a6>
 800cf84:	2304      	movs	r3, #4
 800cf86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cf8a:	e1b2      	b.n	800d2f2 <UART_SetConfig+0x5a6>
 800cf8c:	2308      	movs	r3, #8
 800cf8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cf92:	e1ae      	b.n	800d2f2 <UART_SetConfig+0x5a6>
 800cf94:	2310      	movs	r3, #16
 800cf96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cf9a:	e1aa      	b.n	800d2f2 <UART_SetConfig+0x5a6>
 800cf9c:	2320      	movs	r3, #32
 800cf9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cfa2:	e1a6      	b.n	800d2f2 <UART_SetConfig+0x5a6>
 800cfa4:	2340      	movs	r3, #64	@ 0x40
 800cfa6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cfaa:	e1a2      	b.n	800d2f2 <UART_SetConfig+0x5a6>
 800cfac:	2380      	movs	r3, #128	@ 0x80
 800cfae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cfb2:	e19e      	b.n	800d2f2 <UART_SetConfig+0x5a6>
 800cfb4:	697b      	ldr	r3, [r7, #20]
 800cfb6:	681b      	ldr	r3, [r3, #0]
 800cfb8:	4a35      	ldr	r2, [pc, #212]	@ (800d090 <UART_SetConfig+0x344>)
 800cfba:	4293      	cmp	r3, r2
 800cfbc:	d130      	bne.n	800d020 <UART_SetConfig+0x2d4>
 800cfbe:	4b31      	ldr	r3, [pc, #196]	@ (800d084 <UART_SetConfig+0x338>)
 800cfc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cfc2:	f003 0307 	and.w	r3, r3, #7
 800cfc6:	2b05      	cmp	r3, #5
 800cfc8:	d826      	bhi.n	800d018 <UART_SetConfig+0x2cc>
 800cfca:	a201      	add	r2, pc, #4	@ (adr r2, 800cfd0 <UART_SetConfig+0x284>)
 800cfcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cfd0:	0800cfe9 	.word	0x0800cfe9
 800cfd4:	0800cff1 	.word	0x0800cff1
 800cfd8:	0800cff9 	.word	0x0800cff9
 800cfdc:	0800d001 	.word	0x0800d001
 800cfe0:	0800d009 	.word	0x0800d009
 800cfe4:	0800d011 	.word	0x0800d011
 800cfe8:	2300      	movs	r3, #0
 800cfea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cfee:	e180      	b.n	800d2f2 <UART_SetConfig+0x5a6>
 800cff0:	2304      	movs	r3, #4
 800cff2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cff6:	e17c      	b.n	800d2f2 <UART_SetConfig+0x5a6>
 800cff8:	2308      	movs	r3, #8
 800cffa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cffe:	e178      	b.n	800d2f2 <UART_SetConfig+0x5a6>
 800d000:	2310      	movs	r3, #16
 800d002:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d006:	e174      	b.n	800d2f2 <UART_SetConfig+0x5a6>
 800d008:	2320      	movs	r3, #32
 800d00a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d00e:	e170      	b.n	800d2f2 <UART_SetConfig+0x5a6>
 800d010:	2340      	movs	r3, #64	@ 0x40
 800d012:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d016:	e16c      	b.n	800d2f2 <UART_SetConfig+0x5a6>
 800d018:	2380      	movs	r3, #128	@ 0x80
 800d01a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d01e:	e168      	b.n	800d2f2 <UART_SetConfig+0x5a6>
 800d020:	697b      	ldr	r3, [r7, #20]
 800d022:	681b      	ldr	r3, [r3, #0]
 800d024:	4a1b      	ldr	r2, [pc, #108]	@ (800d094 <UART_SetConfig+0x348>)
 800d026:	4293      	cmp	r3, r2
 800d028:	d142      	bne.n	800d0b0 <UART_SetConfig+0x364>
 800d02a:	4b16      	ldr	r3, [pc, #88]	@ (800d084 <UART_SetConfig+0x338>)
 800d02c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d02e:	f003 0307 	and.w	r3, r3, #7
 800d032:	2b05      	cmp	r3, #5
 800d034:	d838      	bhi.n	800d0a8 <UART_SetConfig+0x35c>
 800d036:	a201      	add	r2, pc, #4	@ (adr r2, 800d03c <UART_SetConfig+0x2f0>)
 800d038:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d03c:	0800d055 	.word	0x0800d055
 800d040:	0800d05d 	.word	0x0800d05d
 800d044:	0800d065 	.word	0x0800d065
 800d048:	0800d06d 	.word	0x0800d06d
 800d04c:	0800d099 	.word	0x0800d099
 800d050:	0800d0a1 	.word	0x0800d0a1
 800d054:	2300      	movs	r3, #0
 800d056:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d05a:	e14a      	b.n	800d2f2 <UART_SetConfig+0x5a6>
 800d05c:	2304      	movs	r3, #4
 800d05e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d062:	e146      	b.n	800d2f2 <UART_SetConfig+0x5a6>
 800d064:	2308      	movs	r3, #8
 800d066:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d06a:	e142      	b.n	800d2f2 <UART_SetConfig+0x5a6>
 800d06c:	2310      	movs	r3, #16
 800d06e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d072:	e13e      	b.n	800d2f2 <UART_SetConfig+0x5a6>
 800d074:	cfff69f3 	.word	0xcfff69f3
 800d078:	58000c00 	.word	0x58000c00
 800d07c:	11fff4ff 	.word	0x11fff4ff
 800d080:	40011000 	.word	0x40011000
 800d084:	58024400 	.word	0x58024400
 800d088:	40004400 	.word	0x40004400
 800d08c:	40004800 	.word	0x40004800
 800d090:	40004c00 	.word	0x40004c00
 800d094:	40005000 	.word	0x40005000
 800d098:	2320      	movs	r3, #32
 800d09a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d09e:	e128      	b.n	800d2f2 <UART_SetConfig+0x5a6>
 800d0a0:	2340      	movs	r3, #64	@ 0x40
 800d0a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d0a6:	e124      	b.n	800d2f2 <UART_SetConfig+0x5a6>
 800d0a8:	2380      	movs	r3, #128	@ 0x80
 800d0aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d0ae:	e120      	b.n	800d2f2 <UART_SetConfig+0x5a6>
 800d0b0:	697b      	ldr	r3, [r7, #20]
 800d0b2:	681b      	ldr	r3, [r3, #0]
 800d0b4:	4acb      	ldr	r2, [pc, #812]	@ (800d3e4 <UART_SetConfig+0x698>)
 800d0b6:	4293      	cmp	r3, r2
 800d0b8:	d176      	bne.n	800d1a8 <UART_SetConfig+0x45c>
 800d0ba:	4bcb      	ldr	r3, [pc, #812]	@ (800d3e8 <UART_SetConfig+0x69c>)
 800d0bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d0be:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d0c2:	2b28      	cmp	r3, #40	@ 0x28
 800d0c4:	d86c      	bhi.n	800d1a0 <UART_SetConfig+0x454>
 800d0c6:	a201      	add	r2, pc, #4	@ (adr r2, 800d0cc <UART_SetConfig+0x380>)
 800d0c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d0cc:	0800d171 	.word	0x0800d171
 800d0d0:	0800d1a1 	.word	0x0800d1a1
 800d0d4:	0800d1a1 	.word	0x0800d1a1
 800d0d8:	0800d1a1 	.word	0x0800d1a1
 800d0dc:	0800d1a1 	.word	0x0800d1a1
 800d0e0:	0800d1a1 	.word	0x0800d1a1
 800d0e4:	0800d1a1 	.word	0x0800d1a1
 800d0e8:	0800d1a1 	.word	0x0800d1a1
 800d0ec:	0800d179 	.word	0x0800d179
 800d0f0:	0800d1a1 	.word	0x0800d1a1
 800d0f4:	0800d1a1 	.word	0x0800d1a1
 800d0f8:	0800d1a1 	.word	0x0800d1a1
 800d0fc:	0800d1a1 	.word	0x0800d1a1
 800d100:	0800d1a1 	.word	0x0800d1a1
 800d104:	0800d1a1 	.word	0x0800d1a1
 800d108:	0800d1a1 	.word	0x0800d1a1
 800d10c:	0800d181 	.word	0x0800d181
 800d110:	0800d1a1 	.word	0x0800d1a1
 800d114:	0800d1a1 	.word	0x0800d1a1
 800d118:	0800d1a1 	.word	0x0800d1a1
 800d11c:	0800d1a1 	.word	0x0800d1a1
 800d120:	0800d1a1 	.word	0x0800d1a1
 800d124:	0800d1a1 	.word	0x0800d1a1
 800d128:	0800d1a1 	.word	0x0800d1a1
 800d12c:	0800d189 	.word	0x0800d189
 800d130:	0800d1a1 	.word	0x0800d1a1
 800d134:	0800d1a1 	.word	0x0800d1a1
 800d138:	0800d1a1 	.word	0x0800d1a1
 800d13c:	0800d1a1 	.word	0x0800d1a1
 800d140:	0800d1a1 	.word	0x0800d1a1
 800d144:	0800d1a1 	.word	0x0800d1a1
 800d148:	0800d1a1 	.word	0x0800d1a1
 800d14c:	0800d191 	.word	0x0800d191
 800d150:	0800d1a1 	.word	0x0800d1a1
 800d154:	0800d1a1 	.word	0x0800d1a1
 800d158:	0800d1a1 	.word	0x0800d1a1
 800d15c:	0800d1a1 	.word	0x0800d1a1
 800d160:	0800d1a1 	.word	0x0800d1a1
 800d164:	0800d1a1 	.word	0x0800d1a1
 800d168:	0800d1a1 	.word	0x0800d1a1
 800d16c:	0800d199 	.word	0x0800d199
 800d170:	2301      	movs	r3, #1
 800d172:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d176:	e0bc      	b.n	800d2f2 <UART_SetConfig+0x5a6>
 800d178:	2304      	movs	r3, #4
 800d17a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d17e:	e0b8      	b.n	800d2f2 <UART_SetConfig+0x5a6>
 800d180:	2308      	movs	r3, #8
 800d182:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d186:	e0b4      	b.n	800d2f2 <UART_SetConfig+0x5a6>
 800d188:	2310      	movs	r3, #16
 800d18a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d18e:	e0b0      	b.n	800d2f2 <UART_SetConfig+0x5a6>
 800d190:	2320      	movs	r3, #32
 800d192:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d196:	e0ac      	b.n	800d2f2 <UART_SetConfig+0x5a6>
 800d198:	2340      	movs	r3, #64	@ 0x40
 800d19a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d19e:	e0a8      	b.n	800d2f2 <UART_SetConfig+0x5a6>
 800d1a0:	2380      	movs	r3, #128	@ 0x80
 800d1a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d1a6:	e0a4      	b.n	800d2f2 <UART_SetConfig+0x5a6>
 800d1a8:	697b      	ldr	r3, [r7, #20]
 800d1aa:	681b      	ldr	r3, [r3, #0]
 800d1ac:	4a8f      	ldr	r2, [pc, #572]	@ (800d3ec <UART_SetConfig+0x6a0>)
 800d1ae:	4293      	cmp	r3, r2
 800d1b0:	d130      	bne.n	800d214 <UART_SetConfig+0x4c8>
 800d1b2:	4b8d      	ldr	r3, [pc, #564]	@ (800d3e8 <UART_SetConfig+0x69c>)
 800d1b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d1b6:	f003 0307 	and.w	r3, r3, #7
 800d1ba:	2b05      	cmp	r3, #5
 800d1bc:	d826      	bhi.n	800d20c <UART_SetConfig+0x4c0>
 800d1be:	a201      	add	r2, pc, #4	@ (adr r2, 800d1c4 <UART_SetConfig+0x478>)
 800d1c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d1c4:	0800d1dd 	.word	0x0800d1dd
 800d1c8:	0800d1e5 	.word	0x0800d1e5
 800d1cc:	0800d1ed 	.word	0x0800d1ed
 800d1d0:	0800d1f5 	.word	0x0800d1f5
 800d1d4:	0800d1fd 	.word	0x0800d1fd
 800d1d8:	0800d205 	.word	0x0800d205
 800d1dc:	2300      	movs	r3, #0
 800d1de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d1e2:	e086      	b.n	800d2f2 <UART_SetConfig+0x5a6>
 800d1e4:	2304      	movs	r3, #4
 800d1e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d1ea:	e082      	b.n	800d2f2 <UART_SetConfig+0x5a6>
 800d1ec:	2308      	movs	r3, #8
 800d1ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d1f2:	e07e      	b.n	800d2f2 <UART_SetConfig+0x5a6>
 800d1f4:	2310      	movs	r3, #16
 800d1f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d1fa:	e07a      	b.n	800d2f2 <UART_SetConfig+0x5a6>
 800d1fc:	2320      	movs	r3, #32
 800d1fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d202:	e076      	b.n	800d2f2 <UART_SetConfig+0x5a6>
 800d204:	2340      	movs	r3, #64	@ 0x40
 800d206:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d20a:	e072      	b.n	800d2f2 <UART_SetConfig+0x5a6>
 800d20c:	2380      	movs	r3, #128	@ 0x80
 800d20e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d212:	e06e      	b.n	800d2f2 <UART_SetConfig+0x5a6>
 800d214:	697b      	ldr	r3, [r7, #20]
 800d216:	681b      	ldr	r3, [r3, #0]
 800d218:	4a75      	ldr	r2, [pc, #468]	@ (800d3f0 <UART_SetConfig+0x6a4>)
 800d21a:	4293      	cmp	r3, r2
 800d21c:	d130      	bne.n	800d280 <UART_SetConfig+0x534>
 800d21e:	4b72      	ldr	r3, [pc, #456]	@ (800d3e8 <UART_SetConfig+0x69c>)
 800d220:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d222:	f003 0307 	and.w	r3, r3, #7
 800d226:	2b05      	cmp	r3, #5
 800d228:	d826      	bhi.n	800d278 <UART_SetConfig+0x52c>
 800d22a:	a201      	add	r2, pc, #4	@ (adr r2, 800d230 <UART_SetConfig+0x4e4>)
 800d22c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d230:	0800d249 	.word	0x0800d249
 800d234:	0800d251 	.word	0x0800d251
 800d238:	0800d259 	.word	0x0800d259
 800d23c:	0800d261 	.word	0x0800d261
 800d240:	0800d269 	.word	0x0800d269
 800d244:	0800d271 	.word	0x0800d271
 800d248:	2300      	movs	r3, #0
 800d24a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d24e:	e050      	b.n	800d2f2 <UART_SetConfig+0x5a6>
 800d250:	2304      	movs	r3, #4
 800d252:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d256:	e04c      	b.n	800d2f2 <UART_SetConfig+0x5a6>
 800d258:	2308      	movs	r3, #8
 800d25a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d25e:	e048      	b.n	800d2f2 <UART_SetConfig+0x5a6>
 800d260:	2310      	movs	r3, #16
 800d262:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d266:	e044      	b.n	800d2f2 <UART_SetConfig+0x5a6>
 800d268:	2320      	movs	r3, #32
 800d26a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d26e:	e040      	b.n	800d2f2 <UART_SetConfig+0x5a6>
 800d270:	2340      	movs	r3, #64	@ 0x40
 800d272:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d276:	e03c      	b.n	800d2f2 <UART_SetConfig+0x5a6>
 800d278:	2380      	movs	r3, #128	@ 0x80
 800d27a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d27e:	e038      	b.n	800d2f2 <UART_SetConfig+0x5a6>
 800d280:	697b      	ldr	r3, [r7, #20]
 800d282:	681b      	ldr	r3, [r3, #0]
 800d284:	4a5b      	ldr	r2, [pc, #364]	@ (800d3f4 <UART_SetConfig+0x6a8>)
 800d286:	4293      	cmp	r3, r2
 800d288:	d130      	bne.n	800d2ec <UART_SetConfig+0x5a0>
 800d28a:	4b57      	ldr	r3, [pc, #348]	@ (800d3e8 <UART_SetConfig+0x69c>)
 800d28c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d28e:	f003 0307 	and.w	r3, r3, #7
 800d292:	2b05      	cmp	r3, #5
 800d294:	d826      	bhi.n	800d2e4 <UART_SetConfig+0x598>
 800d296:	a201      	add	r2, pc, #4	@ (adr r2, 800d29c <UART_SetConfig+0x550>)
 800d298:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d29c:	0800d2b5 	.word	0x0800d2b5
 800d2a0:	0800d2bd 	.word	0x0800d2bd
 800d2a4:	0800d2c5 	.word	0x0800d2c5
 800d2a8:	0800d2cd 	.word	0x0800d2cd
 800d2ac:	0800d2d5 	.word	0x0800d2d5
 800d2b0:	0800d2dd 	.word	0x0800d2dd
 800d2b4:	2302      	movs	r3, #2
 800d2b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d2ba:	e01a      	b.n	800d2f2 <UART_SetConfig+0x5a6>
 800d2bc:	2304      	movs	r3, #4
 800d2be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d2c2:	e016      	b.n	800d2f2 <UART_SetConfig+0x5a6>
 800d2c4:	2308      	movs	r3, #8
 800d2c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d2ca:	e012      	b.n	800d2f2 <UART_SetConfig+0x5a6>
 800d2cc:	2310      	movs	r3, #16
 800d2ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d2d2:	e00e      	b.n	800d2f2 <UART_SetConfig+0x5a6>
 800d2d4:	2320      	movs	r3, #32
 800d2d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d2da:	e00a      	b.n	800d2f2 <UART_SetConfig+0x5a6>
 800d2dc:	2340      	movs	r3, #64	@ 0x40
 800d2de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d2e2:	e006      	b.n	800d2f2 <UART_SetConfig+0x5a6>
 800d2e4:	2380      	movs	r3, #128	@ 0x80
 800d2e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d2ea:	e002      	b.n	800d2f2 <UART_SetConfig+0x5a6>
 800d2ec:	2380      	movs	r3, #128	@ 0x80
 800d2ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800d2f2:	697b      	ldr	r3, [r7, #20]
 800d2f4:	681b      	ldr	r3, [r3, #0]
 800d2f6:	4a3f      	ldr	r2, [pc, #252]	@ (800d3f4 <UART_SetConfig+0x6a8>)
 800d2f8:	4293      	cmp	r3, r2
 800d2fa:	f040 80f8 	bne.w	800d4ee <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800d2fe:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800d302:	2b20      	cmp	r3, #32
 800d304:	dc46      	bgt.n	800d394 <UART_SetConfig+0x648>
 800d306:	2b02      	cmp	r3, #2
 800d308:	f2c0 8082 	blt.w	800d410 <UART_SetConfig+0x6c4>
 800d30c:	3b02      	subs	r3, #2
 800d30e:	2b1e      	cmp	r3, #30
 800d310:	d87e      	bhi.n	800d410 <UART_SetConfig+0x6c4>
 800d312:	a201      	add	r2, pc, #4	@ (adr r2, 800d318 <UART_SetConfig+0x5cc>)
 800d314:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d318:	0800d39b 	.word	0x0800d39b
 800d31c:	0800d411 	.word	0x0800d411
 800d320:	0800d3a3 	.word	0x0800d3a3
 800d324:	0800d411 	.word	0x0800d411
 800d328:	0800d411 	.word	0x0800d411
 800d32c:	0800d411 	.word	0x0800d411
 800d330:	0800d3b3 	.word	0x0800d3b3
 800d334:	0800d411 	.word	0x0800d411
 800d338:	0800d411 	.word	0x0800d411
 800d33c:	0800d411 	.word	0x0800d411
 800d340:	0800d411 	.word	0x0800d411
 800d344:	0800d411 	.word	0x0800d411
 800d348:	0800d411 	.word	0x0800d411
 800d34c:	0800d411 	.word	0x0800d411
 800d350:	0800d3c3 	.word	0x0800d3c3
 800d354:	0800d411 	.word	0x0800d411
 800d358:	0800d411 	.word	0x0800d411
 800d35c:	0800d411 	.word	0x0800d411
 800d360:	0800d411 	.word	0x0800d411
 800d364:	0800d411 	.word	0x0800d411
 800d368:	0800d411 	.word	0x0800d411
 800d36c:	0800d411 	.word	0x0800d411
 800d370:	0800d411 	.word	0x0800d411
 800d374:	0800d411 	.word	0x0800d411
 800d378:	0800d411 	.word	0x0800d411
 800d37c:	0800d411 	.word	0x0800d411
 800d380:	0800d411 	.word	0x0800d411
 800d384:	0800d411 	.word	0x0800d411
 800d388:	0800d411 	.word	0x0800d411
 800d38c:	0800d411 	.word	0x0800d411
 800d390:	0800d403 	.word	0x0800d403
 800d394:	2b40      	cmp	r3, #64	@ 0x40
 800d396:	d037      	beq.n	800d408 <UART_SetConfig+0x6bc>
 800d398:	e03a      	b.n	800d410 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800d39a:	f7fd fac9 	bl	800a930 <HAL_RCCEx_GetD3PCLK1Freq>
 800d39e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d3a0:	e03c      	b.n	800d41c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d3a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d3a6:	4618      	mov	r0, r3
 800d3a8:	f7fd fad8 	bl	800a95c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d3ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d3ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d3b0:	e034      	b.n	800d41c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d3b2:	f107 0318 	add.w	r3, r7, #24
 800d3b6:	4618      	mov	r0, r3
 800d3b8:	f7fd fc24 	bl	800ac04 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d3bc:	69fb      	ldr	r3, [r7, #28]
 800d3be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d3c0:	e02c      	b.n	800d41c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d3c2:	4b09      	ldr	r3, [pc, #36]	@ (800d3e8 <UART_SetConfig+0x69c>)
 800d3c4:	681b      	ldr	r3, [r3, #0]
 800d3c6:	f003 0320 	and.w	r3, r3, #32
 800d3ca:	2b00      	cmp	r3, #0
 800d3cc:	d016      	beq.n	800d3fc <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d3ce:	4b06      	ldr	r3, [pc, #24]	@ (800d3e8 <UART_SetConfig+0x69c>)
 800d3d0:	681b      	ldr	r3, [r3, #0]
 800d3d2:	08db      	lsrs	r3, r3, #3
 800d3d4:	f003 0303 	and.w	r3, r3, #3
 800d3d8:	4a07      	ldr	r2, [pc, #28]	@ (800d3f8 <UART_SetConfig+0x6ac>)
 800d3da:	fa22 f303 	lsr.w	r3, r2, r3
 800d3de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d3e0:	e01c      	b.n	800d41c <UART_SetConfig+0x6d0>
 800d3e2:	bf00      	nop
 800d3e4:	40011400 	.word	0x40011400
 800d3e8:	58024400 	.word	0x58024400
 800d3ec:	40007800 	.word	0x40007800
 800d3f0:	40007c00 	.word	0x40007c00
 800d3f4:	58000c00 	.word	0x58000c00
 800d3f8:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800d3fc:	4b9d      	ldr	r3, [pc, #628]	@ (800d674 <UART_SetConfig+0x928>)
 800d3fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d400:	e00c      	b.n	800d41c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d402:	4b9d      	ldr	r3, [pc, #628]	@ (800d678 <UART_SetConfig+0x92c>)
 800d404:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d406:	e009      	b.n	800d41c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d408:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d40c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d40e:	e005      	b.n	800d41c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800d410:	2300      	movs	r3, #0
 800d412:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800d414:	2301      	movs	r3, #1
 800d416:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800d41a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800d41c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d41e:	2b00      	cmp	r3, #0
 800d420:	f000 81de 	beq.w	800d7e0 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800d424:	697b      	ldr	r3, [r7, #20]
 800d426:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d428:	4a94      	ldr	r2, [pc, #592]	@ (800d67c <UART_SetConfig+0x930>)
 800d42a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d42e:	461a      	mov	r2, r3
 800d430:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d432:	fbb3 f3f2 	udiv	r3, r3, r2
 800d436:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d438:	697b      	ldr	r3, [r7, #20]
 800d43a:	685a      	ldr	r2, [r3, #4]
 800d43c:	4613      	mov	r3, r2
 800d43e:	005b      	lsls	r3, r3, #1
 800d440:	4413      	add	r3, r2
 800d442:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d444:	429a      	cmp	r2, r3
 800d446:	d305      	bcc.n	800d454 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800d448:	697b      	ldr	r3, [r7, #20]
 800d44a:	685b      	ldr	r3, [r3, #4]
 800d44c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d44e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d450:	429a      	cmp	r2, r3
 800d452:	d903      	bls.n	800d45c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800d454:	2301      	movs	r3, #1
 800d456:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800d45a:	e1c1      	b.n	800d7e0 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d45c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d45e:	2200      	movs	r2, #0
 800d460:	60bb      	str	r3, [r7, #8]
 800d462:	60fa      	str	r2, [r7, #12]
 800d464:	697b      	ldr	r3, [r7, #20]
 800d466:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d468:	4a84      	ldr	r2, [pc, #528]	@ (800d67c <UART_SetConfig+0x930>)
 800d46a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d46e:	b29b      	uxth	r3, r3
 800d470:	2200      	movs	r2, #0
 800d472:	603b      	str	r3, [r7, #0]
 800d474:	607a      	str	r2, [r7, #4]
 800d476:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d47a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800d47e:	f7f2 ff87 	bl	8000390 <__aeabi_uldivmod>
 800d482:	4602      	mov	r2, r0
 800d484:	460b      	mov	r3, r1
 800d486:	4610      	mov	r0, r2
 800d488:	4619      	mov	r1, r3
 800d48a:	f04f 0200 	mov.w	r2, #0
 800d48e:	f04f 0300 	mov.w	r3, #0
 800d492:	020b      	lsls	r3, r1, #8
 800d494:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800d498:	0202      	lsls	r2, r0, #8
 800d49a:	6979      	ldr	r1, [r7, #20]
 800d49c:	6849      	ldr	r1, [r1, #4]
 800d49e:	0849      	lsrs	r1, r1, #1
 800d4a0:	2000      	movs	r0, #0
 800d4a2:	460c      	mov	r4, r1
 800d4a4:	4605      	mov	r5, r0
 800d4a6:	eb12 0804 	adds.w	r8, r2, r4
 800d4aa:	eb43 0905 	adc.w	r9, r3, r5
 800d4ae:	697b      	ldr	r3, [r7, #20]
 800d4b0:	685b      	ldr	r3, [r3, #4]
 800d4b2:	2200      	movs	r2, #0
 800d4b4:	469a      	mov	sl, r3
 800d4b6:	4693      	mov	fp, r2
 800d4b8:	4652      	mov	r2, sl
 800d4ba:	465b      	mov	r3, fp
 800d4bc:	4640      	mov	r0, r8
 800d4be:	4649      	mov	r1, r9
 800d4c0:	f7f2 ff66 	bl	8000390 <__aeabi_uldivmod>
 800d4c4:	4602      	mov	r2, r0
 800d4c6:	460b      	mov	r3, r1
 800d4c8:	4613      	mov	r3, r2
 800d4ca:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d4cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d4ce:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d4d2:	d308      	bcc.n	800d4e6 <UART_SetConfig+0x79a>
 800d4d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d4d6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d4da:	d204      	bcs.n	800d4e6 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800d4dc:	697b      	ldr	r3, [r7, #20]
 800d4de:	681b      	ldr	r3, [r3, #0]
 800d4e0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d4e2:	60da      	str	r2, [r3, #12]
 800d4e4:	e17c      	b.n	800d7e0 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800d4e6:	2301      	movs	r3, #1
 800d4e8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800d4ec:	e178      	b.n	800d7e0 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d4ee:	697b      	ldr	r3, [r7, #20]
 800d4f0:	69db      	ldr	r3, [r3, #28]
 800d4f2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d4f6:	f040 80c5 	bne.w	800d684 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800d4fa:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800d4fe:	2b20      	cmp	r3, #32
 800d500:	dc48      	bgt.n	800d594 <UART_SetConfig+0x848>
 800d502:	2b00      	cmp	r3, #0
 800d504:	db7b      	blt.n	800d5fe <UART_SetConfig+0x8b2>
 800d506:	2b20      	cmp	r3, #32
 800d508:	d879      	bhi.n	800d5fe <UART_SetConfig+0x8b2>
 800d50a:	a201      	add	r2, pc, #4	@ (adr r2, 800d510 <UART_SetConfig+0x7c4>)
 800d50c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d510:	0800d59b 	.word	0x0800d59b
 800d514:	0800d5a3 	.word	0x0800d5a3
 800d518:	0800d5ff 	.word	0x0800d5ff
 800d51c:	0800d5ff 	.word	0x0800d5ff
 800d520:	0800d5ab 	.word	0x0800d5ab
 800d524:	0800d5ff 	.word	0x0800d5ff
 800d528:	0800d5ff 	.word	0x0800d5ff
 800d52c:	0800d5ff 	.word	0x0800d5ff
 800d530:	0800d5bb 	.word	0x0800d5bb
 800d534:	0800d5ff 	.word	0x0800d5ff
 800d538:	0800d5ff 	.word	0x0800d5ff
 800d53c:	0800d5ff 	.word	0x0800d5ff
 800d540:	0800d5ff 	.word	0x0800d5ff
 800d544:	0800d5ff 	.word	0x0800d5ff
 800d548:	0800d5ff 	.word	0x0800d5ff
 800d54c:	0800d5ff 	.word	0x0800d5ff
 800d550:	0800d5cb 	.word	0x0800d5cb
 800d554:	0800d5ff 	.word	0x0800d5ff
 800d558:	0800d5ff 	.word	0x0800d5ff
 800d55c:	0800d5ff 	.word	0x0800d5ff
 800d560:	0800d5ff 	.word	0x0800d5ff
 800d564:	0800d5ff 	.word	0x0800d5ff
 800d568:	0800d5ff 	.word	0x0800d5ff
 800d56c:	0800d5ff 	.word	0x0800d5ff
 800d570:	0800d5ff 	.word	0x0800d5ff
 800d574:	0800d5ff 	.word	0x0800d5ff
 800d578:	0800d5ff 	.word	0x0800d5ff
 800d57c:	0800d5ff 	.word	0x0800d5ff
 800d580:	0800d5ff 	.word	0x0800d5ff
 800d584:	0800d5ff 	.word	0x0800d5ff
 800d588:	0800d5ff 	.word	0x0800d5ff
 800d58c:	0800d5ff 	.word	0x0800d5ff
 800d590:	0800d5f1 	.word	0x0800d5f1
 800d594:	2b40      	cmp	r3, #64	@ 0x40
 800d596:	d02e      	beq.n	800d5f6 <UART_SetConfig+0x8aa>
 800d598:	e031      	b.n	800d5fe <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d59a:	f7fb fa13 	bl	80089c4 <HAL_RCC_GetPCLK1Freq>
 800d59e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d5a0:	e033      	b.n	800d60a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d5a2:	f7fb fa25 	bl	80089f0 <HAL_RCC_GetPCLK2Freq>
 800d5a6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d5a8:	e02f      	b.n	800d60a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d5aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d5ae:	4618      	mov	r0, r3
 800d5b0:	f7fd f9d4 	bl	800a95c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d5b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d5b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d5b8:	e027      	b.n	800d60a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d5ba:	f107 0318 	add.w	r3, r7, #24
 800d5be:	4618      	mov	r0, r3
 800d5c0:	f7fd fb20 	bl	800ac04 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d5c4:	69fb      	ldr	r3, [r7, #28]
 800d5c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d5c8:	e01f      	b.n	800d60a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d5ca:	4b2d      	ldr	r3, [pc, #180]	@ (800d680 <UART_SetConfig+0x934>)
 800d5cc:	681b      	ldr	r3, [r3, #0]
 800d5ce:	f003 0320 	and.w	r3, r3, #32
 800d5d2:	2b00      	cmp	r3, #0
 800d5d4:	d009      	beq.n	800d5ea <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d5d6:	4b2a      	ldr	r3, [pc, #168]	@ (800d680 <UART_SetConfig+0x934>)
 800d5d8:	681b      	ldr	r3, [r3, #0]
 800d5da:	08db      	lsrs	r3, r3, #3
 800d5dc:	f003 0303 	and.w	r3, r3, #3
 800d5e0:	4a24      	ldr	r2, [pc, #144]	@ (800d674 <UART_SetConfig+0x928>)
 800d5e2:	fa22 f303 	lsr.w	r3, r2, r3
 800d5e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d5e8:	e00f      	b.n	800d60a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800d5ea:	4b22      	ldr	r3, [pc, #136]	@ (800d674 <UART_SetConfig+0x928>)
 800d5ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d5ee:	e00c      	b.n	800d60a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d5f0:	4b21      	ldr	r3, [pc, #132]	@ (800d678 <UART_SetConfig+0x92c>)
 800d5f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d5f4:	e009      	b.n	800d60a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d5f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d5fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d5fc:	e005      	b.n	800d60a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800d5fe:	2300      	movs	r3, #0
 800d600:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800d602:	2301      	movs	r3, #1
 800d604:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800d608:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d60a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	f000 80e7 	beq.w	800d7e0 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d612:	697b      	ldr	r3, [r7, #20]
 800d614:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d616:	4a19      	ldr	r2, [pc, #100]	@ (800d67c <UART_SetConfig+0x930>)
 800d618:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d61c:	461a      	mov	r2, r3
 800d61e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d620:	fbb3 f3f2 	udiv	r3, r3, r2
 800d624:	005a      	lsls	r2, r3, #1
 800d626:	697b      	ldr	r3, [r7, #20]
 800d628:	685b      	ldr	r3, [r3, #4]
 800d62a:	085b      	lsrs	r3, r3, #1
 800d62c:	441a      	add	r2, r3
 800d62e:	697b      	ldr	r3, [r7, #20]
 800d630:	685b      	ldr	r3, [r3, #4]
 800d632:	fbb2 f3f3 	udiv	r3, r2, r3
 800d636:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d638:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d63a:	2b0f      	cmp	r3, #15
 800d63c:	d916      	bls.n	800d66c <UART_SetConfig+0x920>
 800d63e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d640:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d644:	d212      	bcs.n	800d66c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d646:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d648:	b29b      	uxth	r3, r3
 800d64a:	f023 030f 	bic.w	r3, r3, #15
 800d64e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d650:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d652:	085b      	lsrs	r3, r3, #1
 800d654:	b29b      	uxth	r3, r3
 800d656:	f003 0307 	and.w	r3, r3, #7
 800d65a:	b29a      	uxth	r2, r3
 800d65c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800d65e:	4313      	orrs	r3, r2
 800d660:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800d662:	697b      	ldr	r3, [r7, #20]
 800d664:	681b      	ldr	r3, [r3, #0]
 800d666:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800d668:	60da      	str	r2, [r3, #12]
 800d66a:	e0b9      	b.n	800d7e0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800d66c:	2301      	movs	r3, #1
 800d66e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800d672:	e0b5      	b.n	800d7e0 <UART_SetConfig+0xa94>
 800d674:	03d09000 	.word	0x03d09000
 800d678:	003d0900 	.word	0x003d0900
 800d67c:	08014a1c 	.word	0x08014a1c
 800d680:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800d684:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800d688:	2b20      	cmp	r3, #32
 800d68a:	dc49      	bgt.n	800d720 <UART_SetConfig+0x9d4>
 800d68c:	2b00      	cmp	r3, #0
 800d68e:	db7c      	blt.n	800d78a <UART_SetConfig+0xa3e>
 800d690:	2b20      	cmp	r3, #32
 800d692:	d87a      	bhi.n	800d78a <UART_SetConfig+0xa3e>
 800d694:	a201      	add	r2, pc, #4	@ (adr r2, 800d69c <UART_SetConfig+0x950>)
 800d696:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d69a:	bf00      	nop
 800d69c:	0800d727 	.word	0x0800d727
 800d6a0:	0800d72f 	.word	0x0800d72f
 800d6a4:	0800d78b 	.word	0x0800d78b
 800d6a8:	0800d78b 	.word	0x0800d78b
 800d6ac:	0800d737 	.word	0x0800d737
 800d6b0:	0800d78b 	.word	0x0800d78b
 800d6b4:	0800d78b 	.word	0x0800d78b
 800d6b8:	0800d78b 	.word	0x0800d78b
 800d6bc:	0800d747 	.word	0x0800d747
 800d6c0:	0800d78b 	.word	0x0800d78b
 800d6c4:	0800d78b 	.word	0x0800d78b
 800d6c8:	0800d78b 	.word	0x0800d78b
 800d6cc:	0800d78b 	.word	0x0800d78b
 800d6d0:	0800d78b 	.word	0x0800d78b
 800d6d4:	0800d78b 	.word	0x0800d78b
 800d6d8:	0800d78b 	.word	0x0800d78b
 800d6dc:	0800d757 	.word	0x0800d757
 800d6e0:	0800d78b 	.word	0x0800d78b
 800d6e4:	0800d78b 	.word	0x0800d78b
 800d6e8:	0800d78b 	.word	0x0800d78b
 800d6ec:	0800d78b 	.word	0x0800d78b
 800d6f0:	0800d78b 	.word	0x0800d78b
 800d6f4:	0800d78b 	.word	0x0800d78b
 800d6f8:	0800d78b 	.word	0x0800d78b
 800d6fc:	0800d78b 	.word	0x0800d78b
 800d700:	0800d78b 	.word	0x0800d78b
 800d704:	0800d78b 	.word	0x0800d78b
 800d708:	0800d78b 	.word	0x0800d78b
 800d70c:	0800d78b 	.word	0x0800d78b
 800d710:	0800d78b 	.word	0x0800d78b
 800d714:	0800d78b 	.word	0x0800d78b
 800d718:	0800d78b 	.word	0x0800d78b
 800d71c:	0800d77d 	.word	0x0800d77d
 800d720:	2b40      	cmp	r3, #64	@ 0x40
 800d722:	d02e      	beq.n	800d782 <UART_SetConfig+0xa36>
 800d724:	e031      	b.n	800d78a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d726:	f7fb f94d 	bl	80089c4 <HAL_RCC_GetPCLK1Freq>
 800d72a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d72c:	e033      	b.n	800d796 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d72e:	f7fb f95f 	bl	80089f0 <HAL_RCC_GetPCLK2Freq>
 800d732:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d734:	e02f      	b.n	800d796 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d736:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d73a:	4618      	mov	r0, r3
 800d73c:	f7fd f90e 	bl	800a95c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d740:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d742:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d744:	e027      	b.n	800d796 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d746:	f107 0318 	add.w	r3, r7, #24
 800d74a:	4618      	mov	r0, r3
 800d74c:	f7fd fa5a 	bl	800ac04 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d750:	69fb      	ldr	r3, [r7, #28]
 800d752:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d754:	e01f      	b.n	800d796 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d756:	4b2d      	ldr	r3, [pc, #180]	@ (800d80c <UART_SetConfig+0xac0>)
 800d758:	681b      	ldr	r3, [r3, #0]
 800d75a:	f003 0320 	and.w	r3, r3, #32
 800d75e:	2b00      	cmp	r3, #0
 800d760:	d009      	beq.n	800d776 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d762:	4b2a      	ldr	r3, [pc, #168]	@ (800d80c <UART_SetConfig+0xac0>)
 800d764:	681b      	ldr	r3, [r3, #0]
 800d766:	08db      	lsrs	r3, r3, #3
 800d768:	f003 0303 	and.w	r3, r3, #3
 800d76c:	4a28      	ldr	r2, [pc, #160]	@ (800d810 <UART_SetConfig+0xac4>)
 800d76e:	fa22 f303 	lsr.w	r3, r2, r3
 800d772:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d774:	e00f      	b.n	800d796 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800d776:	4b26      	ldr	r3, [pc, #152]	@ (800d810 <UART_SetConfig+0xac4>)
 800d778:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d77a:	e00c      	b.n	800d796 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d77c:	4b25      	ldr	r3, [pc, #148]	@ (800d814 <UART_SetConfig+0xac8>)
 800d77e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d780:	e009      	b.n	800d796 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d782:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d786:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d788:	e005      	b.n	800d796 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800d78a:	2300      	movs	r3, #0
 800d78c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800d78e:	2301      	movs	r3, #1
 800d790:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800d794:	bf00      	nop
    }

    if (pclk != 0U)
 800d796:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d798:	2b00      	cmp	r3, #0
 800d79a:	d021      	beq.n	800d7e0 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d79c:	697b      	ldr	r3, [r7, #20]
 800d79e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d7a0:	4a1d      	ldr	r2, [pc, #116]	@ (800d818 <UART_SetConfig+0xacc>)
 800d7a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d7a6:	461a      	mov	r2, r3
 800d7a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d7aa:	fbb3 f2f2 	udiv	r2, r3, r2
 800d7ae:	697b      	ldr	r3, [r7, #20]
 800d7b0:	685b      	ldr	r3, [r3, #4]
 800d7b2:	085b      	lsrs	r3, r3, #1
 800d7b4:	441a      	add	r2, r3
 800d7b6:	697b      	ldr	r3, [r7, #20]
 800d7b8:	685b      	ldr	r3, [r3, #4]
 800d7ba:	fbb2 f3f3 	udiv	r3, r2, r3
 800d7be:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d7c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d7c2:	2b0f      	cmp	r3, #15
 800d7c4:	d909      	bls.n	800d7da <UART_SetConfig+0xa8e>
 800d7c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d7c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d7cc:	d205      	bcs.n	800d7da <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800d7ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d7d0:	b29a      	uxth	r2, r3
 800d7d2:	697b      	ldr	r3, [r7, #20]
 800d7d4:	681b      	ldr	r3, [r3, #0]
 800d7d6:	60da      	str	r2, [r3, #12]
 800d7d8:	e002      	b.n	800d7e0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800d7da:	2301      	movs	r3, #1
 800d7dc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800d7e0:	697b      	ldr	r3, [r7, #20]
 800d7e2:	2201      	movs	r2, #1
 800d7e4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800d7e8:	697b      	ldr	r3, [r7, #20]
 800d7ea:	2201      	movs	r2, #1
 800d7ec:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d7f0:	697b      	ldr	r3, [r7, #20]
 800d7f2:	2200      	movs	r2, #0
 800d7f4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800d7f6:	697b      	ldr	r3, [r7, #20]
 800d7f8:	2200      	movs	r2, #0
 800d7fa:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800d7fc:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800d800:	4618      	mov	r0, r3
 800d802:	3748      	adds	r7, #72	@ 0x48
 800d804:	46bd      	mov	sp, r7
 800d806:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d80a:	bf00      	nop
 800d80c:	58024400 	.word	0x58024400
 800d810:	03d09000 	.word	0x03d09000
 800d814:	003d0900 	.word	0x003d0900
 800d818:	08014a1c 	.word	0x08014a1c

0800d81c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d81c:	b480      	push	{r7}
 800d81e:	b083      	sub	sp, #12
 800d820:	af00      	add	r7, sp, #0
 800d822:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d828:	f003 0308 	and.w	r3, r3, #8
 800d82c:	2b00      	cmp	r3, #0
 800d82e:	d00a      	beq.n	800d846 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	681b      	ldr	r3, [r3, #0]
 800d834:	685b      	ldr	r3, [r3, #4]
 800d836:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	681b      	ldr	r3, [r3, #0]
 800d842:	430a      	orrs	r2, r1
 800d844:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d84a:	f003 0301 	and.w	r3, r3, #1
 800d84e:	2b00      	cmp	r3, #0
 800d850:	d00a      	beq.n	800d868 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	681b      	ldr	r3, [r3, #0]
 800d856:	685b      	ldr	r3, [r3, #4]
 800d858:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	681b      	ldr	r3, [r3, #0]
 800d864:	430a      	orrs	r2, r1
 800d866:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d86c:	f003 0302 	and.w	r3, r3, #2
 800d870:	2b00      	cmp	r3, #0
 800d872:	d00a      	beq.n	800d88a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	681b      	ldr	r3, [r3, #0]
 800d878:	685b      	ldr	r3, [r3, #4]
 800d87a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	681b      	ldr	r3, [r3, #0]
 800d886:	430a      	orrs	r2, r1
 800d888:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d88e:	f003 0304 	and.w	r3, r3, #4
 800d892:	2b00      	cmp	r3, #0
 800d894:	d00a      	beq.n	800d8ac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	681b      	ldr	r3, [r3, #0]
 800d89a:	685b      	ldr	r3, [r3, #4]
 800d89c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	681b      	ldr	r3, [r3, #0]
 800d8a8:	430a      	orrs	r2, r1
 800d8aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d8b0:	f003 0310 	and.w	r3, r3, #16
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	d00a      	beq.n	800d8ce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	681b      	ldr	r3, [r3, #0]
 800d8bc:	689b      	ldr	r3, [r3, #8]
 800d8be:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	681b      	ldr	r3, [r3, #0]
 800d8ca:	430a      	orrs	r2, r1
 800d8cc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d8d2:	f003 0320 	and.w	r3, r3, #32
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	d00a      	beq.n	800d8f0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	681b      	ldr	r3, [r3, #0]
 800d8de:	689b      	ldr	r3, [r3, #8]
 800d8e0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	681b      	ldr	r3, [r3, #0]
 800d8ec:	430a      	orrs	r2, r1
 800d8ee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d8f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d8f8:	2b00      	cmp	r3, #0
 800d8fa:	d01a      	beq.n	800d932 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	681b      	ldr	r3, [r3, #0]
 800d900:	685b      	ldr	r3, [r3, #4]
 800d902:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	681b      	ldr	r3, [r3, #0]
 800d90e:	430a      	orrs	r2, r1
 800d910:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d916:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d91a:	d10a      	bne.n	800d932 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	681b      	ldr	r3, [r3, #0]
 800d920:	685b      	ldr	r3, [r3, #4]
 800d922:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	681b      	ldr	r3, [r3, #0]
 800d92e:	430a      	orrs	r2, r1
 800d930:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d936:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	d00a      	beq.n	800d954 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	681b      	ldr	r3, [r3, #0]
 800d942:	685b      	ldr	r3, [r3, #4]
 800d944:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	681b      	ldr	r3, [r3, #0]
 800d950:	430a      	orrs	r2, r1
 800d952:	605a      	str	r2, [r3, #4]
  }
}
 800d954:	bf00      	nop
 800d956:	370c      	adds	r7, #12
 800d958:	46bd      	mov	sp, r7
 800d95a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d95e:	4770      	bx	lr

0800d960 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d960:	b580      	push	{r7, lr}
 800d962:	b098      	sub	sp, #96	@ 0x60
 800d964:	af02      	add	r7, sp, #8
 800d966:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	2200      	movs	r2, #0
 800d96c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d970:	f7f5 f812 	bl	8002998 <HAL_GetTick>
 800d974:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	681b      	ldr	r3, [r3, #0]
 800d97a:	681b      	ldr	r3, [r3, #0]
 800d97c:	f003 0308 	and.w	r3, r3, #8
 800d980:	2b08      	cmp	r3, #8
 800d982:	d12f      	bne.n	800d9e4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d984:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800d988:	9300      	str	r3, [sp, #0]
 800d98a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d98c:	2200      	movs	r2, #0
 800d98e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800d992:	6878      	ldr	r0, [r7, #4]
 800d994:	f000 f88e 	bl	800dab4 <UART_WaitOnFlagUntilTimeout>
 800d998:	4603      	mov	r3, r0
 800d99a:	2b00      	cmp	r3, #0
 800d99c:	d022      	beq.n	800d9e4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	681b      	ldr	r3, [r3, #0]
 800d9a2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d9a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d9a6:	e853 3f00 	ldrex	r3, [r3]
 800d9aa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d9ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d9ae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d9b2:	653b      	str	r3, [r7, #80]	@ 0x50
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	681b      	ldr	r3, [r3, #0]
 800d9b8:	461a      	mov	r2, r3
 800d9ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d9bc:	647b      	str	r3, [r7, #68]	@ 0x44
 800d9be:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d9c0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d9c2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d9c4:	e841 2300 	strex	r3, r2, [r1]
 800d9c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d9ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d9cc:	2b00      	cmp	r3, #0
 800d9ce:	d1e6      	bne.n	800d99e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	2220      	movs	r2, #32
 800d9d4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	2200      	movs	r2, #0
 800d9dc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d9e0:	2303      	movs	r3, #3
 800d9e2:	e063      	b.n	800daac <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	681b      	ldr	r3, [r3, #0]
 800d9e8:	681b      	ldr	r3, [r3, #0]
 800d9ea:	f003 0304 	and.w	r3, r3, #4
 800d9ee:	2b04      	cmp	r3, #4
 800d9f0:	d149      	bne.n	800da86 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d9f2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800d9f6:	9300      	str	r3, [sp, #0]
 800d9f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d9fa:	2200      	movs	r2, #0
 800d9fc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800da00:	6878      	ldr	r0, [r7, #4]
 800da02:	f000 f857 	bl	800dab4 <UART_WaitOnFlagUntilTimeout>
 800da06:	4603      	mov	r3, r0
 800da08:	2b00      	cmp	r3, #0
 800da0a:	d03c      	beq.n	800da86 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	681b      	ldr	r3, [r3, #0]
 800da10:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da14:	e853 3f00 	ldrex	r3, [r3]
 800da18:	623b      	str	r3, [r7, #32]
   return(result);
 800da1a:	6a3b      	ldr	r3, [r7, #32]
 800da1c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800da20:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	681b      	ldr	r3, [r3, #0]
 800da26:	461a      	mov	r2, r3
 800da28:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800da2a:	633b      	str	r3, [r7, #48]	@ 0x30
 800da2c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da2e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800da30:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800da32:	e841 2300 	strex	r3, r2, [r1]
 800da36:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800da38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	d1e6      	bne.n	800da0c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	681b      	ldr	r3, [r3, #0]
 800da42:	3308      	adds	r3, #8
 800da44:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da46:	693b      	ldr	r3, [r7, #16]
 800da48:	e853 3f00 	ldrex	r3, [r3]
 800da4c:	60fb      	str	r3, [r7, #12]
   return(result);
 800da4e:	68fb      	ldr	r3, [r7, #12]
 800da50:	f023 0301 	bic.w	r3, r3, #1
 800da54:	64bb      	str	r3, [r7, #72]	@ 0x48
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	681b      	ldr	r3, [r3, #0]
 800da5a:	3308      	adds	r3, #8
 800da5c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800da5e:	61fa      	str	r2, [r7, #28]
 800da60:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da62:	69b9      	ldr	r1, [r7, #24]
 800da64:	69fa      	ldr	r2, [r7, #28]
 800da66:	e841 2300 	strex	r3, r2, [r1]
 800da6a:	617b      	str	r3, [r7, #20]
   return(result);
 800da6c:	697b      	ldr	r3, [r7, #20]
 800da6e:	2b00      	cmp	r3, #0
 800da70:	d1e5      	bne.n	800da3e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	2220      	movs	r2, #32
 800da76:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	2200      	movs	r2, #0
 800da7e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800da82:	2303      	movs	r3, #3
 800da84:	e012      	b.n	800daac <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	2220      	movs	r2, #32
 800da8a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	2220      	movs	r2, #32
 800da92:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	2200      	movs	r2, #0
 800da9a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	2200      	movs	r2, #0
 800daa0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	2200      	movs	r2, #0
 800daa6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800daaa:	2300      	movs	r3, #0
}
 800daac:	4618      	mov	r0, r3
 800daae:	3758      	adds	r7, #88	@ 0x58
 800dab0:	46bd      	mov	sp, r7
 800dab2:	bd80      	pop	{r7, pc}

0800dab4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800dab4:	b580      	push	{r7, lr}
 800dab6:	b084      	sub	sp, #16
 800dab8:	af00      	add	r7, sp, #0
 800daba:	60f8      	str	r0, [r7, #12]
 800dabc:	60b9      	str	r1, [r7, #8]
 800dabe:	603b      	str	r3, [r7, #0]
 800dac0:	4613      	mov	r3, r2
 800dac2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800dac4:	e04f      	b.n	800db66 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800dac6:	69bb      	ldr	r3, [r7, #24]
 800dac8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dacc:	d04b      	beq.n	800db66 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800dace:	f7f4 ff63 	bl	8002998 <HAL_GetTick>
 800dad2:	4602      	mov	r2, r0
 800dad4:	683b      	ldr	r3, [r7, #0]
 800dad6:	1ad3      	subs	r3, r2, r3
 800dad8:	69ba      	ldr	r2, [r7, #24]
 800dada:	429a      	cmp	r2, r3
 800dadc:	d302      	bcc.n	800dae4 <UART_WaitOnFlagUntilTimeout+0x30>
 800dade:	69bb      	ldr	r3, [r7, #24]
 800dae0:	2b00      	cmp	r3, #0
 800dae2:	d101      	bne.n	800dae8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800dae4:	2303      	movs	r3, #3
 800dae6:	e04e      	b.n	800db86 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800dae8:	68fb      	ldr	r3, [r7, #12]
 800daea:	681b      	ldr	r3, [r3, #0]
 800daec:	681b      	ldr	r3, [r3, #0]
 800daee:	f003 0304 	and.w	r3, r3, #4
 800daf2:	2b00      	cmp	r3, #0
 800daf4:	d037      	beq.n	800db66 <UART_WaitOnFlagUntilTimeout+0xb2>
 800daf6:	68bb      	ldr	r3, [r7, #8]
 800daf8:	2b80      	cmp	r3, #128	@ 0x80
 800dafa:	d034      	beq.n	800db66 <UART_WaitOnFlagUntilTimeout+0xb2>
 800dafc:	68bb      	ldr	r3, [r7, #8]
 800dafe:	2b40      	cmp	r3, #64	@ 0x40
 800db00:	d031      	beq.n	800db66 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800db02:	68fb      	ldr	r3, [r7, #12]
 800db04:	681b      	ldr	r3, [r3, #0]
 800db06:	69db      	ldr	r3, [r3, #28]
 800db08:	f003 0308 	and.w	r3, r3, #8
 800db0c:	2b08      	cmp	r3, #8
 800db0e:	d110      	bne.n	800db32 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800db10:	68fb      	ldr	r3, [r7, #12]
 800db12:	681b      	ldr	r3, [r3, #0]
 800db14:	2208      	movs	r2, #8
 800db16:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800db18:	68f8      	ldr	r0, [r7, #12]
 800db1a:	f000 f839 	bl	800db90 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800db1e:	68fb      	ldr	r3, [r7, #12]
 800db20:	2208      	movs	r2, #8
 800db22:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800db26:	68fb      	ldr	r3, [r7, #12]
 800db28:	2200      	movs	r2, #0
 800db2a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800db2e:	2301      	movs	r3, #1
 800db30:	e029      	b.n	800db86 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800db32:	68fb      	ldr	r3, [r7, #12]
 800db34:	681b      	ldr	r3, [r3, #0]
 800db36:	69db      	ldr	r3, [r3, #28]
 800db38:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800db3c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800db40:	d111      	bne.n	800db66 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800db42:	68fb      	ldr	r3, [r7, #12]
 800db44:	681b      	ldr	r3, [r3, #0]
 800db46:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800db4a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800db4c:	68f8      	ldr	r0, [r7, #12]
 800db4e:	f000 f81f 	bl	800db90 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800db52:	68fb      	ldr	r3, [r7, #12]
 800db54:	2220      	movs	r2, #32
 800db56:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800db5a:	68fb      	ldr	r3, [r7, #12]
 800db5c:	2200      	movs	r2, #0
 800db5e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800db62:	2303      	movs	r3, #3
 800db64:	e00f      	b.n	800db86 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800db66:	68fb      	ldr	r3, [r7, #12]
 800db68:	681b      	ldr	r3, [r3, #0]
 800db6a:	69da      	ldr	r2, [r3, #28]
 800db6c:	68bb      	ldr	r3, [r7, #8]
 800db6e:	4013      	ands	r3, r2
 800db70:	68ba      	ldr	r2, [r7, #8]
 800db72:	429a      	cmp	r2, r3
 800db74:	bf0c      	ite	eq
 800db76:	2301      	moveq	r3, #1
 800db78:	2300      	movne	r3, #0
 800db7a:	b2db      	uxtb	r3, r3
 800db7c:	461a      	mov	r2, r3
 800db7e:	79fb      	ldrb	r3, [r7, #7]
 800db80:	429a      	cmp	r2, r3
 800db82:	d0a0      	beq.n	800dac6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800db84:	2300      	movs	r3, #0
}
 800db86:	4618      	mov	r0, r3
 800db88:	3710      	adds	r7, #16
 800db8a:	46bd      	mov	sp, r7
 800db8c:	bd80      	pop	{r7, pc}
	...

0800db90 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800db90:	b480      	push	{r7}
 800db92:	b095      	sub	sp, #84	@ 0x54
 800db94:	af00      	add	r7, sp, #0
 800db96:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	681b      	ldr	r3, [r3, #0]
 800db9c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dba0:	e853 3f00 	ldrex	r3, [r3]
 800dba4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800dba6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dba8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800dbac:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	681b      	ldr	r3, [r3, #0]
 800dbb2:	461a      	mov	r2, r3
 800dbb4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dbb6:	643b      	str	r3, [r7, #64]	@ 0x40
 800dbb8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dbba:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800dbbc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800dbbe:	e841 2300 	strex	r3, r2, [r1]
 800dbc2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800dbc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dbc6:	2b00      	cmp	r3, #0
 800dbc8:	d1e6      	bne.n	800db98 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	681b      	ldr	r3, [r3, #0]
 800dbce:	3308      	adds	r3, #8
 800dbd0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dbd2:	6a3b      	ldr	r3, [r7, #32]
 800dbd4:	e853 3f00 	ldrex	r3, [r3]
 800dbd8:	61fb      	str	r3, [r7, #28]
   return(result);
 800dbda:	69fa      	ldr	r2, [r7, #28]
 800dbdc:	4b1e      	ldr	r3, [pc, #120]	@ (800dc58 <UART_EndRxTransfer+0xc8>)
 800dbde:	4013      	ands	r3, r2
 800dbe0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	681b      	ldr	r3, [r3, #0]
 800dbe6:	3308      	adds	r3, #8
 800dbe8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800dbea:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800dbec:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dbee:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800dbf0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800dbf2:	e841 2300 	strex	r3, r2, [r1]
 800dbf6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800dbf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dbfa:	2b00      	cmp	r3, #0
 800dbfc:	d1e5      	bne.n	800dbca <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800dc02:	2b01      	cmp	r3, #1
 800dc04:	d118      	bne.n	800dc38 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	681b      	ldr	r3, [r3, #0]
 800dc0a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc0c:	68fb      	ldr	r3, [r7, #12]
 800dc0e:	e853 3f00 	ldrex	r3, [r3]
 800dc12:	60bb      	str	r3, [r7, #8]
   return(result);
 800dc14:	68bb      	ldr	r3, [r7, #8]
 800dc16:	f023 0310 	bic.w	r3, r3, #16
 800dc1a:	647b      	str	r3, [r7, #68]	@ 0x44
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	681b      	ldr	r3, [r3, #0]
 800dc20:	461a      	mov	r2, r3
 800dc22:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800dc24:	61bb      	str	r3, [r7, #24]
 800dc26:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc28:	6979      	ldr	r1, [r7, #20]
 800dc2a:	69ba      	ldr	r2, [r7, #24]
 800dc2c:	e841 2300 	strex	r3, r2, [r1]
 800dc30:	613b      	str	r3, [r7, #16]
   return(result);
 800dc32:	693b      	ldr	r3, [r7, #16]
 800dc34:	2b00      	cmp	r3, #0
 800dc36:	d1e6      	bne.n	800dc06 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	2220      	movs	r2, #32
 800dc3c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	2200      	movs	r2, #0
 800dc44:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	2200      	movs	r2, #0
 800dc4a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800dc4c:	bf00      	nop
 800dc4e:	3754      	adds	r7, #84	@ 0x54
 800dc50:	46bd      	mov	sp, r7
 800dc52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc56:	4770      	bx	lr
 800dc58:	effffffe 	.word	0xeffffffe

0800dc5c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800dc5c:	b084      	sub	sp, #16
 800dc5e:	b580      	push	{r7, lr}
 800dc60:	b084      	sub	sp, #16
 800dc62:	af00      	add	r7, sp, #0
 800dc64:	6078      	str	r0, [r7, #4]
 800dc66:	f107 001c 	add.w	r0, r7, #28
 800dc6a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800dc6e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800dc72:	2b01      	cmp	r3, #1
 800dc74:	d121      	bne.n	800dcba <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dc7a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	68da      	ldr	r2, [r3, #12]
 800dc86:	4b2c      	ldr	r3, [pc, #176]	@ (800dd38 <USB_CoreInit+0xdc>)
 800dc88:	4013      	ands	r3, r2
 800dc8a:	687a      	ldr	r2, [r7, #4]
 800dc8c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	68db      	ldr	r3, [r3, #12]
 800dc92:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800dc9a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800dc9e:	2b01      	cmp	r3, #1
 800dca0:	d105      	bne.n	800dcae <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	68db      	ldr	r3, [r3, #12]
 800dca6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800dcae:	6878      	ldr	r0, [r7, #4]
 800dcb0:	f001 faf6 	bl	800f2a0 <USB_CoreReset>
 800dcb4:	4603      	mov	r3, r0
 800dcb6:	73fb      	strb	r3, [r7, #15]
 800dcb8:	e01b      	b.n	800dcf2 <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	68db      	ldr	r3, [r3, #12]
 800dcbe:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800dcc6:	6878      	ldr	r0, [r7, #4]
 800dcc8:	f001 faea 	bl	800f2a0 <USB_CoreReset>
 800dccc:	4603      	mov	r3, r0
 800dcce:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800dcd0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800dcd4:	2b00      	cmp	r3, #0
 800dcd6:	d106      	bne.n	800dce6 <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dcdc:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	639a      	str	r2, [r3, #56]	@ 0x38
 800dce4:	e005      	b.n	800dcf2 <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dcea:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800dcf2:	7fbb      	ldrb	r3, [r7, #30]
 800dcf4:	2b01      	cmp	r3, #1
 800dcf6:	d116      	bne.n	800dd26 <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800dcfc:	b29a      	uxth	r2, r3
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800dd06:	4b0d      	ldr	r3, [pc, #52]	@ (800dd3c <USB_CoreInit+0xe0>)
 800dd08:	4313      	orrs	r3, r2
 800dd0a:	687a      	ldr	r2, [r7, #4]
 800dd0c:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	689b      	ldr	r3, [r3, #8]
 800dd12:	f043 0206 	orr.w	r2, r3, #6
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	689b      	ldr	r3, [r3, #8]
 800dd1e:	f043 0220 	orr.w	r2, r3, #32
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800dd26:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd28:	4618      	mov	r0, r3
 800dd2a:	3710      	adds	r7, #16
 800dd2c:	46bd      	mov	sp, r7
 800dd2e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800dd32:	b004      	add	sp, #16
 800dd34:	4770      	bx	lr
 800dd36:	bf00      	nop
 800dd38:	ffbdffbf 	.word	0xffbdffbf
 800dd3c:	03ee0000 	.word	0x03ee0000

0800dd40 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800dd40:	b480      	push	{r7}
 800dd42:	b087      	sub	sp, #28
 800dd44:	af00      	add	r7, sp, #0
 800dd46:	60f8      	str	r0, [r7, #12]
 800dd48:	60b9      	str	r1, [r7, #8]
 800dd4a:	4613      	mov	r3, r2
 800dd4c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800dd4e:	79fb      	ldrb	r3, [r7, #7]
 800dd50:	2b02      	cmp	r3, #2
 800dd52:	d165      	bne.n	800de20 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800dd54:	68bb      	ldr	r3, [r7, #8]
 800dd56:	4a41      	ldr	r2, [pc, #260]	@ (800de5c <USB_SetTurnaroundTime+0x11c>)
 800dd58:	4293      	cmp	r3, r2
 800dd5a:	d906      	bls.n	800dd6a <USB_SetTurnaroundTime+0x2a>
 800dd5c:	68bb      	ldr	r3, [r7, #8]
 800dd5e:	4a40      	ldr	r2, [pc, #256]	@ (800de60 <USB_SetTurnaroundTime+0x120>)
 800dd60:	4293      	cmp	r3, r2
 800dd62:	d202      	bcs.n	800dd6a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800dd64:	230f      	movs	r3, #15
 800dd66:	617b      	str	r3, [r7, #20]
 800dd68:	e062      	b.n	800de30 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800dd6a:	68bb      	ldr	r3, [r7, #8]
 800dd6c:	4a3c      	ldr	r2, [pc, #240]	@ (800de60 <USB_SetTurnaroundTime+0x120>)
 800dd6e:	4293      	cmp	r3, r2
 800dd70:	d306      	bcc.n	800dd80 <USB_SetTurnaroundTime+0x40>
 800dd72:	68bb      	ldr	r3, [r7, #8]
 800dd74:	4a3b      	ldr	r2, [pc, #236]	@ (800de64 <USB_SetTurnaroundTime+0x124>)
 800dd76:	4293      	cmp	r3, r2
 800dd78:	d202      	bcs.n	800dd80 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800dd7a:	230e      	movs	r3, #14
 800dd7c:	617b      	str	r3, [r7, #20]
 800dd7e:	e057      	b.n	800de30 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800dd80:	68bb      	ldr	r3, [r7, #8]
 800dd82:	4a38      	ldr	r2, [pc, #224]	@ (800de64 <USB_SetTurnaroundTime+0x124>)
 800dd84:	4293      	cmp	r3, r2
 800dd86:	d306      	bcc.n	800dd96 <USB_SetTurnaroundTime+0x56>
 800dd88:	68bb      	ldr	r3, [r7, #8]
 800dd8a:	4a37      	ldr	r2, [pc, #220]	@ (800de68 <USB_SetTurnaroundTime+0x128>)
 800dd8c:	4293      	cmp	r3, r2
 800dd8e:	d202      	bcs.n	800dd96 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800dd90:	230d      	movs	r3, #13
 800dd92:	617b      	str	r3, [r7, #20]
 800dd94:	e04c      	b.n	800de30 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800dd96:	68bb      	ldr	r3, [r7, #8]
 800dd98:	4a33      	ldr	r2, [pc, #204]	@ (800de68 <USB_SetTurnaroundTime+0x128>)
 800dd9a:	4293      	cmp	r3, r2
 800dd9c:	d306      	bcc.n	800ddac <USB_SetTurnaroundTime+0x6c>
 800dd9e:	68bb      	ldr	r3, [r7, #8]
 800dda0:	4a32      	ldr	r2, [pc, #200]	@ (800de6c <USB_SetTurnaroundTime+0x12c>)
 800dda2:	4293      	cmp	r3, r2
 800dda4:	d802      	bhi.n	800ddac <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800dda6:	230c      	movs	r3, #12
 800dda8:	617b      	str	r3, [r7, #20]
 800ddaa:	e041      	b.n	800de30 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800ddac:	68bb      	ldr	r3, [r7, #8]
 800ddae:	4a2f      	ldr	r2, [pc, #188]	@ (800de6c <USB_SetTurnaroundTime+0x12c>)
 800ddb0:	4293      	cmp	r3, r2
 800ddb2:	d906      	bls.n	800ddc2 <USB_SetTurnaroundTime+0x82>
 800ddb4:	68bb      	ldr	r3, [r7, #8]
 800ddb6:	4a2e      	ldr	r2, [pc, #184]	@ (800de70 <USB_SetTurnaroundTime+0x130>)
 800ddb8:	4293      	cmp	r3, r2
 800ddba:	d802      	bhi.n	800ddc2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800ddbc:	230b      	movs	r3, #11
 800ddbe:	617b      	str	r3, [r7, #20]
 800ddc0:	e036      	b.n	800de30 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800ddc2:	68bb      	ldr	r3, [r7, #8]
 800ddc4:	4a2a      	ldr	r2, [pc, #168]	@ (800de70 <USB_SetTurnaroundTime+0x130>)
 800ddc6:	4293      	cmp	r3, r2
 800ddc8:	d906      	bls.n	800ddd8 <USB_SetTurnaroundTime+0x98>
 800ddca:	68bb      	ldr	r3, [r7, #8]
 800ddcc:	4a29      	ldr	r2, [pc, #164]	@ (800de74 <USB_SetTurnaroundTime+0x134>)
 800ddce:	4293      	cmp	r3, r2
 800ddd0:	d802      	bhi.n	800ddd8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800ddd2:	230a      	movs	r3, #10
 800ddd4:	617b      	str	r3, [r7, #20]
 800ddd6:	e02b      	b.n	800de30 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800ddd8:	68bb      	ldr	r3, [r7, #8]
 800ddda:	4a26      	ldr	r2, [pc, #152]	@ (800de74 <USB_SetTurnaroundTime+0x134>)
 800dddc:	4293      	cmp	r3, r2
 800ddde:	d906      	bls.n	800ddee <USB_SetTurnaroundTime+0xae>
 800dde0:	68bb      	ldr	r3, [r7, #8]
 800dde2:	4a25      	ldr	r2, [pc, #148]	@ (800de78 <USB_SetTurnaroundTime+0x138>)
 800dde4:	4293      	cmp	r3, r2
 800dde6:	d202      	bcs.n	800ddee <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800dde8:	2309      	movs	r3, #9
 800ddea:	617b      	str	r3, [r7, #20]
 800ddec:	e020      	b.n	800de30 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800ddee:	68bb      	ldr	r3, [r7, #8]
 800ddf0:	4a21      	ldr	r2, [pc, #132]	@ (800de78 <USB_SetTurnaroundTime+0x138>)
 800ddf2:	4293      	cmp	r3, r2
 800ddf4:	d306      	bcc.n	800de04 <USB_SetTurnaroundTime+0xc4>
 800ddf6:	68bb      	ldr	r3, [r7, #8]
 800ddf8:	4a20      	ldr	r2, [pc, #128]	@ (800de7c <USB_SetTurnaroundTime+0x13c>)
 800ddfa:	4293      	cmp	r3, r2
 800ddfc:	d802      	bhi.n	800de04 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800ddfe:	2308      	movs	r3, #8
 800de00:	617b      	str	r3, [r7, #20]
 800de02:	e015      	b.n	800de30 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800de04:	68bb      	ldr	r3, [r7, #8]
 800de06:	4a1d      	ldr	r2, [pc, #116]	@ (800de7c <USB_SetTurnaroundTime+0x13c>)
 800de08:	4293      	cmp	r3, r2
 800de0a:	d906      	bls.n	800de1a <USB_SetTurnaroundTime+0xda>
 800de0c:	68bb      	ldr	r3, [r7, #8]
 800de0e:	4a1c      	ldr	r2, [pc, #112]	@ (800de80 <USB_SetTurnaroundTime+0x140>)
 800de10:	4293      	cmp	r3, r2
 800de12:	d202      	bcs.n	800de1a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800de14:	2307      	movs	r3, #7
 800de16:	617b      	str	r3, [r7, #20]
 800de18:	e00a      	b.n	800de30 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800de1a:	2306      	movs	r3, #6
 800de1c:	617b      	str	r3, [r7, #20]
 800de1e:	e007      	b.n	800de30 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800de20:	79fb      	ldrb	r3, [r7, #7]
 800de22:	2b00      	cmp	r3, #0
 800de24:	d102      	bne.n	800de2c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800de26:	2309      	movs	r3, #9
 800de28:	617b      	str	r3, [r7, #20]
 800de2a:	e001      	b.n	800de30 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800de2c:	2309      	movs	r3, #9
 800de2e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800de30:	68fb      	ldr	r3, [r7, #12]
 800de32:	68db      	ldr	r3, [r3, #12]
 800de34:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800de38:	68fb      	ldr	r3, [r7, #12]
 800de3a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800de3c:	68fb      	ldr	r3, [r7, #12]
 800de3e:	68da      	ldr	r2, [r3, #12]
 800de40:	697b      	ldr	r3, [r7, #20]
 800de42:	029b      	lsls	r3, r3, #10
 800de44:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800de48:	431a      	orrs	r2, r3
 800de4a:	68fb      	ldr	r3, [r7, #12]
 800de4c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800de4e:	2300      	movs	r3, #0
}
 800de50:	4618      	mov	r0, r3
 800de52:	371c      	adds	r7, #28
 800de54:	46bd      	mov	sp, r7
 800de56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de5a:	4770      	bx	lr
 800de5c:	00d8acbf 	.word	0x00d8acbf
 800de60:	00e4e1c0 	.word	0x00e4e1c0
 800de64:	00f42400 	.word	0x00f42400
 800de68:	01067380 	.word	0x01067380
 800de6c:	011a499f 	.word	0x011a499f
 800de70:	01312cff 	.word	0x01312cff
 800de74:	014ca43f 	.word	0x014ca43f
 800de78:	016e3600 	.word	0x016e3600
 800de7c:	01a6ab1f 	.word	0x01a6ab1f
 800de80:	01e84800 	.word	0x01e84800

0800de84 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800de84:	b480      	push	{r7}
 800de86:	b083      	sub	sp, #12
 800de88:	af00      	add	r7, sp, #0
 800de8a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	689b      	ldr	r3, [r3, #8]
 800de90:	f043 0201 	orr.w	r2, r3, #1
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800de98:	2300      	movs	r3, #0
}
 800de9a:	4618      	mov	r0, r3
 800de9c:	370c      	adds	r7, #12
 800de9e:	46bd      	mov	sp, r7
 800dea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dea4:	4770      	bx	lr

0800dea6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800dea6:	b480      	push	{r7}
 800dea8:	b083      	sub	sp, #12
 800deaa:	af00      	add	r7, sp, #0
 800deac:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	689b      	ldr	r3, [r3, #8]
 800deb2:	f023 0201 	bic.w	r2, r3, #1
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800deba:	2300      	movs	r3, #0
}
 800debc:	4618      	mov	r0, r3
 800debe:	370c      	adds	r7, #12
 800dec0:	46bd      	mov	sp, r7
 800dec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dec6:	4770      	bx	lr

0800dec8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800dec8:	b580      	push	{r7, lr}
 800deca:	b084      	sub	sp, #16
 800decc:	af00      	add	r7, sp, #0
 800dece:	6078      	str	r0, [r7, #4]
 800ded0:	460b      	mov	r3, r1
 800ded2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800ded4:	2300      	movs	r3, #0
 800ded6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	68db      	ldr	r3, [r3, #12]
 800dedc:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800dee4:	78fb      	ldrb	r3, [r7, #3]
 800dee6:	2b01      	cmp	r3, #1
 800dee8:	d115      	bne.n	800df16 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	68db      	ldr	r3, [r3, #12]
 800deee:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800def6:	200a      	movs	r0, #10
 800def8:	f7f4 fd5a 	bl	80029b0 <HAL_Delay>
      ms += 10U;
 800defc:	68fb      	ldr	r3, [r7, #12]
 800defe:	330a      	adds	r3, #10
 800df00:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800df02:	6878      	ldr	r0, [r7, #4]
 800df04:	f001 f93b 	bl	800f17e <USB_GetMode>
 800df08:	4603      	mov	r3, r0
 800df0a:	2b01      	cmp	r3, #1
 800df0c:	d01e      	beq.n	800df4c <USB_SetCurrentMode+0x84>
 800df0e:	68fb      	ldr	r3, [r7, #12]
 800df10:	2bc7      	cmp	r3, #199	@ 0xc7
 800df12:	d9f0      	bls.n	800def6 <USB_SetCurrentMode+0x2e>
 800df14:	e01a      	b.n	800df4c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800df16:	78fb      	ldrb	r3, [r7, #3]
 800df18:	2b00      	cmp	r3, #0
 800df1a:	d115      	bne.n	800df48 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	68db      	ldr	r3, [r3, #12]
 800df20:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800df28:	200a      	movs	r0, #10
 800df2a:	f7f4 fd41 	bl	80029b0 <HAL_Delay>
      ms += 10U;
 800df2e:	68fb      	ldr	r3, [r7, #12]
 800df30:	330a      	adds	r3, #10
 800df32:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800df34:	6878      	ldr	r0, [r7, #4]
 800df36:	f001 f922 	bl	800f17e <USB_GetMode>
 800df3a:	4603      	mov	r3, r0
 800df3c:	2b00      	cmp	r3, #0
 800df3e:	d005      	beq.n	800df4c <USB_SetCurrentMode+0x84>
 800df40:	68fb      	ldr	r3, [r7, #12]
 800df42:	2bc7      	cmp	r3, #199	@ 0xc7
 800df44:	d9f0      	bls.n	800df28 <USB_SetCurrentMode+0x60>
 800df46:	e001      	b.n	800df4c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800df48:	2301      	movs	r3, #1
 800df4a:	e005      	b.n	800df58 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800df4c:	68fb      	ldr	r3, [r7, #12]
 800df4e:	2bc8      	cmp	r3, #200	@ 0xc8
 800df50:	d101      	bne.n	800df56 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800df52:	2301      	movs	r3, #1
 800df54:	e000      	b.n	800df58 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800df56:	2300      	movs	r3, #0
}
 800df58:	4618      	mov	r0, r3
 800df5a:	3710      	adds	r7, #16
 800df5c:	46bd      	mov	sp, r7
 800df5e:	bd80      	pop	{r7, pc}

0800df60 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800df60:	b084      	sub	sp, #16
 800df62:	b580      	push	{r7, lr}
 800df64:	b086      	sub	sp, #24
 800df66:	af00      	add	r7, sp, #0
 800df68:	6078      	str	r0, [r7, #4]
 800df6a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800df6e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800df72:	2300      	movs	r3, #0
 800df74:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800df7a:	2300      	movs	r3, #0
 800df7c:	613b      	str	r3, [r7, #16]
 800df7e:	e009      	b.n	800df94 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800df80:	687a      	ldr	r2, [r7, #4]
 800df82:	693b      	ldr	r3, [r7, #16]
 800df84:	3340      	adds	r3, #64	@ 0x40
 800df86:	009b      	lsls	r3, r3, #2
 800df88:	4413      	add	r3, r2
 800df8a:	2200      	movs	r2, #0
 800df8c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800df8e:	693b      	ldr	r3, [r7, #16]
 800df90:	3301      	adds	r3, #1
 800df92:	613b      	str	r3, [r7, #16]
 800df94:	693b      	ldr	r3, [r7, #16]
 800df96:	2b0e      	cmp	r3, #14
 800df98:	d9f2      	bls.n	800df80 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800df9a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800df9e:	2b00      	cmp	r3, #0
 800dfa0:	d11c      	bne.n	800dfdc <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800dfa2:	68fb      	ldr	r3, [r7, #12]
 800dfa4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800dfa8:	685b      	ldr	r3, [r3, #4]
 800dfaa:	68fa      	ldr	r2, [r7, #12]
 800dfac:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800dfb0:	f043 0302 	orr.w	r3, r3, #2
 800dfb4:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dfba:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	681b      	ldr	r3, [r3, #0]
 800dfc6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	681b      	ldr	r3, [r3, #0]
 800dfd2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	601a      	str	r2, [r3, #0]
 800dfda:	e005      	b.n	800dfe8 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dfe0:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800dfe8:	68fb      	ldr	r3, [r7, #12]
 800dfea:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800dfee:	461a      	mov	r2, r3
 800dff0:	2300      	movs	r3, #0
 800dff2:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800dff4:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800dff8:	2b01      	cmp	r3, #1
 800dffa:	d10d      	bne.n	800e018 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800dffc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e000:	2b00      	cmp	r3, #0
 800e002:	d104      	bne.n	800e00e <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800e004:	2100      	movs	r1, #0
 800e006:	6878      	ldr	r0, [r7, #4]
 800e008:	f000 f968 	bl	800e2dc <USB_SetDevSpeed>
 800e00c:	e008      	b.n	800e020 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800e00e:	2101      	movs	r1, #1
 800e010:	6878      	ldr	r0, [r7, #4]
 800e012:	f000 f963 	bl	800e2dc <USB_SetDevSpeed>
 800e016:	e003      	b.n	800e020 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800e018:	2103      	movs	r1, #3
 800e01a:	6878      	ldr	r0, [r7, #4]
 800e01c:	f000 f95e 	bl	800e2dc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800e020:	2110      	movs	r1, #16
 800e022:	6878      	ldr	r0, [r7, #4]
 800e024:	f000 f8fa 	bl	800e21c <USB_FlushTxFifo>
 800e028:	4603      	mov	r3, r0
 800e02a:	2b00      	cmp	r3, #0
 800e02c:	d001      	beq.n	800e032 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800e02e:	2301      	movs	r3, #1
 800e030:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800e032:	6878      	ldr	r0, [r7, #4]
 800e034:	f000 f924 	bl	800e280 <USB_FlushRxFifo>
 800e038:	4603      	mov	r3, r0
 800e03a:	2b00      	cmp	r3, #0
 800e03c:	d001      	beq.n	800e042 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800e03e:	2301      	movs	r3, #1
 800e040:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800e042:	68fb      	ldr	r3, [r7, #12]
 800e044:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e048:	461a      	mov	r2, r3
 800e04a:	2300      	movs	r3, #0
 800e04c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800e04e:	68fb      	ldr	r3, [r7, #12]
 800e050:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e054:	461a      	mov	r2, r3
 800e056:	2300      	movs	r3, #0
 800e058:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800e05a:	68fb      	ldr	r3, [r7, #12]
 800e05c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e060:	461a      	mov	r2, r3
 800e062:	2300      	movs	r3, #0
 800e064:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e066:	2300      	movs	r3, #0
 800e068:	613b      	str	r3, [r7, #16]
 800e06a:	e043      	b.n	800e0f4 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800e06c:	693b      	ldr	r3, [r7, #16]
 800e06e:	015a      	lsls	r2, r3, #5
 800e070:	68fb      	ldr	r3, [r7, #12]
 800e072:	4413      	add	r3, r2
 800e074:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e078:	681b      	ldr	r3, [r3, #0]
 800e07a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e07e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e082:	d118      	bne.n	800e0b6 <USB_DevInit+0x156>
    {
      if (i == 0U)
 800e084:	693b      	ldr	r3, [r7, #16]
 800e086:	2b00      	cmp	r3, #0
 800e088:	d10a      	bne.n	800e0a0 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800e08a:	693b      	ldr	r3, [r7, #16]
 800e08c:	015a      	lsls	r2, r3, #5
 800e08e:	68fb      	ldr	r3, [r7, #12]
 800e090:	4413      	add	r3, r2
 800e092:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e096:	461a      	mov	r2, r3
 800e098:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800e09c:	6013      	str	r3, [r2, #0]
 800e09e:	e013      	b.n	800e0c8 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800e0a0:	693b      	ldr	r3, [r7, #16]
 800e0a2:	015a      	lsls	r2, r3, #5
 800e0a4:	68fb      	ldr	r3, [r7, #12]
 800e0a6:	4413      	add	r3, r2
 800e0a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e0ac:	461a      	mov	r2, r3
 800e0ae:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800e0b2:	6013      	str	r3, [r2, #0]
 800e0b4:	e008      	b.n	800e0c8 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800e0b6:	693b      	ldr	r3, [r7, #16]
 800e0b8:	015a      	lsls	r2, r3, #5
 800e0ba:	68fb      	ldr	r3, [r7, #12]
 800e0bc:	4413      	add	r3, r2
 800e0be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e0c2:	461a      	mov	r2, r3
 800e0c4:	2300      	movs	r3, #0
 800e0c6:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800e0c8:	693b      	ldr	r3, [r7, #16]
 800e0ca:	015a      	lsls	r2, r3, #5
 800e0cc:	68fb      	ldr	r3, [r7, #12]
 800e0ce:	4413      	add	r3, r2
 800e0d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e0d4:	461a      	mov	r2, r3
 800e0d6:	2300      	movs	r3, #0
 800e0d8:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800e0da:	693b      	ldr	r3, [r7, #16]
 800e0dc:	015a      	lsls	r2, r3, #5
 800e0de:	68fb      	ldr	r3, [r7, #12]
 800e0e0:	4413      	add	r3, r2
 800e0e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e0e6:	461a      	mov	r2, r3
 800e0e8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800e0ec:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e0ee:	693b      	ldr	r3, [r7, #16]
 800e0f0:	3301      	adds	r3, #1
 800e0f2:	613b      	str	r3, [r7, #16]
 800e0f4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800e0f8:	461a      	mov	r2, r3
 800e0fa:	693b      	ldr	r3, [r7, #16]
 800e0fc:	4293      	cmp	r3, r2
 800e0fe:	d3b5      	bcc.n	800e06c <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e100:	2300      	movs	r3, #0
 800e102:	613b      	str	r3, [r7, #16]
 800e104:	e043      	b.n	800e18e <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e106:	693b      	ldr	r3, [r7, #16]
 800e108:	015a      	lsls	r2, r3, #5
 800e10a:	68fb      	ldr	r3, [r7, #12]
 800e10c:	4413      	add	r3, r2
 800e10e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e112:	681b      	ldr	r3, [r3, #0]
 800e114:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e118:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e11c:	d118      	bne.n	800e150 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800e11e:	693b      	ldr	r3, [r7, #16]
 800e120:	2b00      	cmp	r3, #0
 800e122:	d10a      	bne.n	800e13a <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800e124:	693b      	ldr	r3, [r7, #16]
 800e126:	015a      	lsls	r2, r3, #5
 800e128:	68fb      	ldr	r3, [r7, #12]
 800e12a:	4413      	add	r3, r2
 800e12c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e130:	461a      	mov	r2, r3
 800e132:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800e136:	6013      	str	r3, [r2, #0]
 800e138:	e013      	b.n	800e162 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800e13a:	693b      	ldr	r3, [r7, #16]
 800e13c:	015a      	lsls	r2, r3, #5
 800e13e:	68fb      	ldr	r3, [r7, #12]
 800e140:	4413      	add	r3, r2
 800e142:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e146:	461a      	mov	r2, r3
 800e148:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800e14c:	6013      	str	r3, [r2, #0]
 800e14e:	e008      	b.n	800e162 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800e150:	693b      	ldr	r3, [r7, #16]
 800e152:	015a      	lsls	r2, r3, #5
 800e154:	68fb      	ldr	r3, [r7, #12]
 800e156:	4413      	add	r3, r2
 800e158:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e15c:	461a      	mov	r2, r3
 800e15e:	2300      	movs	r3, #0
 800e160:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800e162:	693b      	ldr	r3, [r7, #16]
 800e164:	015a      	lsls	r2, r3, #5
 800e166:	68fb      	ldr	r3, [r7, #12]
 800e168:	4413      	add	r3, r2
 800e16a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e16e:	461a      	mov	r2, r3
 800e170:	2300      	movs	r3, #0
 800e172:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800e174:	693b      	ldr	r3, [r7, #16]
 800e176:	015a      	lsls	r2, r3, #5
 800e178:	68fb      	ldr	r3, [r7, #12]
 800e17a:	4413      	add	r3, r2
 800e17c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e180:	461a      	mov	r2, r3
 800e182:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800e186:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e188:	693b      	ldr	r3, [r7, #16]
 800e18a:	3301      	adds	r3, #1
 800e18c:	613b      	str	r3, [r7, #16]
 800e18e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800e192:	461a      	mov	r2, r3
 800e194:	693b      	ldr	r3, [r7, #16]
 800e196:	4293      	cmp	r3, r2
 800e198:	d3b5      	bcc.n	800e106 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800e19a:	68fb      	ldr	r3, [r7, #12]
 800e19c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e1a0:	691b      	ldr	r3, [r3, #16]
 800e1a2:	68fa      	ldr	r2, [r7, #12]
 800e1a4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800e1a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e1ac:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	2200      	movs	r2, #0
 800e1b2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800e1ba:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800e1bc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800e1c0:	2b00      	cmp	r3, #0
 800e1c2:	d105      	bne.n	800e1d0 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	699b      	ldr	r3, [r3, #24]
 800e1c8:	f043 0210 	orr.w	r2, r3, #16
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	699a      	ldr	r2, [r3, #24]
 800e1d4:	4b0f      	ldr	r3, [pc, #60]	@ (800e214 <USB_DevInit+0x2b4>)
 800e1d6:	4313      	orrs	r3, r2
 800e1d8:	687a      	ldr	r2, [r7, #4]
 800e1da:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800e1dc:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800e1e0:	2b00      	cmp	r3, #0
 800e1e2:	d005      	beq.n	800e1f0 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	699b      	ldr	r3, [r3, #24]
 800e1e8:	f043 0208 	orr.w	r2, r3, #8
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800e1f0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800e1f4:	2b01      	cmp	r3, #1
 800e1f6:	d105      	bne.n	800e204 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	699a      	ldr	r2, [r3, #24]
 800e1fc:	4b06      	ldr	r3, [pc, #24]	@ (800e218 <USB_DevInit+0x2b8>)
 800e1fe:	4313      	orrs	r3, r2
 800e200:	687a      	ldr	r2, [r7, #4]
 800e202:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800e204:	7dfb      	ldrb	r3, [r7, #23]
}
 800e206:	4618      	mov	r0, r3
 800e208:	3718      	adds	r7, #24
 800e20a:	46bd      	mov	sp, r7
 800e20c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e210:	b004      	add	sp, #16
 800e212:	4770      	bx	lr
 800e214:	803c3800 	.word	0x803c3800
 800e218:	40000004 	.word	0x40000004

0800e21c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800e21c:	b480      	push	{r7}
 800e21e:	b085      	sub	sp, #20
 800e220:	af00      	add	r7, sp, #0
 800e222:	6078      	str	r0, [r7, #4]
 800e224:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800e226:	2300      	movs	r3, #0
 800e228:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800e22a:	68fb      	ldr	r3, [r7, #12]
 800e22c:	3301      	adds	r3, #1
 800e22e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800e230:	68fb      	ldr	r3, [r7, #12]
 800e232:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800e236:	d901      	bls.n	800e23c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800e238:	2303      	movs	r3, #3
 800e23a:	e01b      	b.n	800e274 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	691b      	ldr	r3, [r3, #16]
 800e240:	2b00      	cmp	r3, #0
 800e242:	daf2      	bge.n	800e22a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800e244:	2300      	movs	r3, #0
 800e246:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800e248:	683b      	ldr	r3, [r7, #0]
 800e24a:	019b      	lsls	r3, r3, #6
 800e24c:	f043 0220 	orr.w	r2, r3, #32
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800e254:	68fb      	ldr	r3, [r7, #12]
 800e256:	3301      	adds	r3, #1
 800e258:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800e25a:	68fb      	ldr	r3, [r7, #12]
 800e25c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800e260:	d901      	bls.n	800e266 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800e262:	2303      	movs	r3, #3
 800e264:	e006      	b.n	800e274 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	691b      	ldr	r3, [r3, #16]
 800e26a:	f003 0320 	and.w	r3, r3, #32
 800e26e:	2b20      	cmp	r3, #32
 800e270:	d0f0      	beq.n	800e254 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800e272:	2300      	movs	r3, #0
}
 800e274:	4618      	mov	r0, r3
 800e276:	3714      	adds	r7, #20
 800e278:	46bd      	mov	sp, r7
 800e27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e27e:	4770      	bx	lr

0800e280 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800e280:	b480      	push	{r7}
 800e282:	b085      	sub	sp, #20
 800e284:	af00      	add	r7, sp, #0
 800e286:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e288:	2300      	movs	r3, #0
 800e28a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800e28c:	68fb      	ldr	r3, [r7, #12]
 800e28e:	3301      	adds	r3, #1
 800e290:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800e292:	68fb      	ldr	r3, [r7, #12]
 800e294:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800e298:	d901      	bls.n	800e29e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800e29a:	2303      	movs	r3, #3
 800e29c:	e018      	b.n	800e2d0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	691b      	ldr	r3, [r3, #16]
 800e2a2:	2b00      	cmp	r3, #0
 800e2a4:	daf2      	bge.n	800e28c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800e2a6:	2300      	movs	r3, #0
 800e2a8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	2210      	movs	r2, #16
 800e2ae:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800e2b0:	68fb      	ldr	r3, [r7, #12]
 800e2b2:	3301      	adds	r3, #1
 800e2b4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800e2b6:	68fb      	ldr	r3, [r7, #12]
 800e2b8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800e2bc:	d901      	bls.n	800e2c2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800e2be:	2303      	movs	r3, #3
 800e2c0:	e006      	b.n	800e2d0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	691b      	ldr	r3, [r3, #16]
 800e2c6:	f003 0310 	and.w	r3, r3, #16
 800e2ca:	2b10      	cmp	r3, #16
 800e2cc:	d0f0      	beq.n	800e2b0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800e2ce:	2300      	movs	r3, #0
}
 800e2d0:	4618      	mov	r0, r3
 800e2d2:	3714      	adds	r7, #20
 800e2d4:	46bd      	mov	sp, r7
 800e2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2da:	4770      	bx	lr

0800e2dc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800e2dc:	b480      	push	{r7}
 800e2de:	b085      	sub	sp, #20
 800e2e0:	af00      	add	r7, sp, #0
 800e2e2:	6078      	str	r0, [r7, #4]
 800e2e4:	460b      	mov	r3, r1
 800e2e6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800e2ec:	68fb      	ldr	r3, [r7, #12]
 800e2ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e2f2:	681a      	ldr	r2, [r3, #0]
 800e2f4:	78fb      	ldrb	r3, [r7, #3]
 800e2f6:	68f9      	ldr	r1, [r7, #12]
 800e2f8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e2fc:	4313      	orrs	r3, r2
 800e2fe:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800e300:	2300      	movs	r3, #0
}
 800e302:	4618      	mov	r0, r3
 800e304:	3714      	adds	r7, #20
 800e306:	46bd      	mov	sp, r7
 800e308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e30c:	4770      	bx	lr

0800e30e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800e30e:	b480      	push	{r7}
 800e310:	b087      	sub	sp, #28
 800e312:	af00      	add	r7, sp, #0
 800e314:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800e31a:	693b      	ldr	r3, [r7, #16]
 800e31c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e320:	689b      	ldr	r3, [r3, #8]
 800e322:	f003 0306 	and.w	r3, r3, #6
 800e326:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800e328:	68fb      	ldr	r3, [r7, #12]
 800e32a:	2b00      	cmp	r3, #0
 800e32c:	d102      	bne.n	800e334 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800e32e:	2300      	movs	r3, #0
 800e330:	75fb      	strb	r3, [r7, #23]
 800e332:	e00a      	b.n	800e34a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800e334:	68fb      	ldr	r3, [r7, #12]
 800e336:	2b02      	cmp	r3, #2
 800e338:	d002      	beq.n	800e340 <USB_GetDevSpeed+0x32>
 800e33a:	68fb      	ldr	r3, [r7, #12]
 800e33c:	2b06      	cmp	r3, #6
 800e33e:	d102      	bne.n	800e346 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800e340:	2302      	movs	r3, #2
 800e342:	75fb      	strb	r3, [r7, #23]
 800e344:	e001      	b.n	800e34a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800e346:	230f      	movs	r3, #15
 800e348:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800e34a:	7dfb      	ldrb	r3, [r7, #23]
}
 800e34c:	4618      	mov	r0, r3
 800e34e:	371c      	adds	r7, #28
 800e350:	46bd      	mov	sp, r7
 800e352:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e356:	4770      	bx	lr

0800e358 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800e358:	b480      	push	{r7}
 800e35a:	b085      	sub	sp, #20
 800e35c:	af00      	add	r7, sp, #0
 800e35e:	6078      	str	r0, [r7, #4]
 800e360:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e366:	683b      	ldr	r3, [r7, #0]
 800e368:	781b      	ldrb	r3, [r3, #0]
 800e36a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800e36c:	683b      	ldr	r3, [r7, #0]
 800e36e:	785b      	ldrb	r3, [r3, #1]
 800e370:	2b01      	cmp	r3, #1
 800e372:	d139      	bne.n	800e3e8 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800e374:	68fb      	ldr	r3, [r7, #12]
 800e376:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e37a:	69da      	ldr	r2, [r3, #28]
 800e37c:	683b      	ldr	r3, [r7, #0]
 800e37e:	781b      	ldrb	r3, [r3, #0]
 800e380:	f003 030f 	and.w	r3, r3, #15
 800e384:	2101      	movs	r1, #1
 800e386:	fa01 f303 	lsl.w	r3, r1, r3
 800e38a:	b29b      	uxth	r3, r3
 800e38c:	68f9      	ldr	r1, [r7, #12]
 800e38e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e392:	4313      	orrs	r3, r2
 800e394:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800e396:	68bb      	ldr	r3, [r7, #8]
 800e398:	015a      	lsls	r2, r3, #5
 800e39a:	68fb      	ldr	r3, [r7, #12]
 800e39c:	4413      	add	r3, r2
 800e39e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e3a2:	681b      	ldr	r3, [r3, #0]
 800e3a4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800e3a8:	2b00      	cmp	r3, #0
 800e3aa:	d153      	bne.n	800e454 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800e3ac:	68bb      	ldr	r3, [r7, #8]
 800e3ae:	015a      	lsls	r2, r3, #5
 800e3b0:	68fb      	ldr	r3, [r7, #12]
 800e3b2:	4413      	add	r3, r2
 800e3b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e3b8:	681a      	ldr	r2, [r3, #0]
 800e3ba:	683b      	ldr	r3, [r7, #0]
 800e3bc:	689b      	ldr	r3, [r3, #8]
 800e3be:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800e3c2:	683b      	ldr	r3, [r7, #0]
 800e3c4:	791b      	ldrb	r3, [r3, #4]
 800e3c6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800e3c8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800e3ca:	68bb      	ldr	r3, [r7, #8]
 800e3cc:	059b      	lsls	r3, r3, #22
 800e3ce:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800e3d0:	431a      	orrs	r2, r3
 800e3d2:	68bb      	ldr	r3, [r7, #8]
 800e3d4:	0159      	lsls	r1, r3, #5
 800e3d6:	68fb      	ldr	r3, [r7, #12]
 800e3d8:	440b      	add	r3, r1
 800e3da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e3de:	4619      	mov	r1, r3
 800e3e0:	4b20      	ldr	r3, [pc, #128]	@ (800e464 <USB_ActivateEndpoint+0x10c>)
 800e3e2:	4313      	orrs	r3, r2
 800e3e4:	600b      	str	r3, [r1, #0]
 800e3e6:	e035      	b.n	800e454 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800e3e8:	68fb      	ldr	r3, [r7, #12]
 800e3ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e3ee:	69da      	ldr	r2, [r3, #28]
 800e3f0:	683b      	ldr	r3, [r7, #0]
 800e3f2:	781b      	ldrb	r3, [r3, #0]
 800e3f4:	f003 030f 	and.w	r3, r3, #15
 800e3f8:	2101      	movs	r1, #1
 800e3fa:	fa01 f303 	lsl.w	r3, r1, r3
 800e3fe:	041b      	lsls	r3, r3, #16
 800e400:	68f9      	ldr	r1, [r7, #12]
 800e402:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e406:	4313      	orrs	r3, r2
 800e408:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800e40a:	68bb      	ldr	r3, [r7, #8]
 800e40c:	015a      	lsls	r2, r3, #5
 800e40e:	68fb      	ldr	r3, [r7, #12]
 800e410:	4413      	add	r3, r2
 800e412:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e416:	681b      	ldr	r3, [r3, #0]
 800e418:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800e41c:	2b00      	cmp	r3, #0
 800e41e:	d119      	bne.n	800e454 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800e420:	68bb      	ldr	r3, [r7, #8]
 800e422:	015a      	lsls	r2, r3, #5
 800e424:	68fb      	ldr	r3, [r7, #12]
 800e426:	4413      	add	r3, r2
 800e428:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e42c:	681a      	ldr	r2, [r3, #0]
 800e42e:	683b      	ldr	r3, [r7, #0]
 800e430:	689b      	ldr	r3, [r3, #8]
 800e432:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800e436:	683b      	ldr	r3, [r7, #0]
 800e438:	791b      	ldrb	r3, [r3, #4]
 800e43a:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800e43c:	430b      	orrs	r3, r1
 800e43e:	431a      	orrs	r2, r3
 800e440:	68bb      	ldr	r3, [r7, #8]
 800e442:	0159      	lsls	r1, r3, #5
 800e444:	68fb      	ldr	r3, [r7, #12]
 800e446:	440b      	add	r3, r1
 800e448:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e44c:	4619      	mov	r1, r3
 800e44e:	4b05      	ldr	r3, [pc, #20]	@ (800e464 <USB_ActivateEndpoint+0x10c>)
 800e450:	4313      	orrs	r3, r2
 800e452:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800e454:	2300      	movs	r3, #0
}
 800e456:	4618      	mov	r0, r3
 800e458:	3714      	adds	r7, #20
 800e45a:	46bd      	mov	sp, r7
 800e45c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e460:	4770      	bx	lr
 800e462:	bf00      	nop
 800e464:	10008000 	.word	0x10008000

0800e468 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800e468:	b480      	push	{r7}
 800e46a:	b085      	sub	sp, #20
 800e46c:	af00      	add	r7, sp, #0
 800e46e:	6078      	str	r0, [r7, #4]
 800e470:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e476:	683b      	ldr	r3, [r7, #0]
 800e478:	781b      	ldrb	r3, [r3, #0]
 800e47a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800e47c:	683b      	ldr	r3, [r7, #0]
 800e47e:	785b      	ldrb	r3, [r3, #1]
 800e480:	2b01      	cmp	r3, #1
 800e482:	d161      	bne.n	800e548 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800e484:	68bb      	ldr	r3, [r7, #8]
 800e486:	015a      	lsls	r2, r3, #5
 800e488:	68fb      	ldr	r3, [r7, #12]
 800e48a:	4413      	add	r3, r2
 800e48c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e490:	681b      	ldr	r3, [r3, #0]
 800e492:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e496:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e49a:	d11f      	bne.n	800e4dc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800e49c:	68bb      	ldr	r3, [r7, #8]
 800e49e:	015a      	lsls	r2, r3, #5
 800e4a0:	68fb      	ldr	r3, [r7, #12]
 800e4a2:	4413      	add	r3, r2
 800e4a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e4a8:	681b      	ldr	r3, [r3, #0]
 800e4aa:	68ba      	ldr	r2, [r7, #8]
 800e4ac:	0151      	lsls	r1, r2, #5
 800e4ae:	68fa      	ldr	r2, [r7, #12]
 800e4b0:	440a      	add	r2, r1
 800e4b2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e4b6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800e4ba:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800e4bc:	68bb      	ldr	r3, [r7, #8]
 800e4be:	015a      	lsls	r2, r3, #5
 800e4c0:	68fb      	ldr	r3, [r7, #12]
 800e4c2:	4413      	add	r3, r2
 800e4c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e4c8:	681b      	ldr	r3, [r3, #0]
 800e4ca:	68ba      	ldr	r2, [r7, #8]
 800e4cc:	0151      	lsls	r1, r2, #5
 800e4ce:	68fa      	ldr	r2, [r7, #12]
 800e4d0:	440a      	add	r2, r1
 800e4d2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e4d6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800e4da:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800e4dc:	68fb      	ldr	r3, [r7, #12]
 800e4de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e4e2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800e4e4:	683b      	ldr	r3, [r7, #0]
 800e4e6:	781b      	ldrb	r3, [r3, #0]
 800e4e8:	f003 030f 	and.w	r3, r3, #15
 800e4ec:	2101      	movs	r1, #1
 800e4ee:	fa01 f303 	lsl.w	r3, r1, r3
 800e4f2:	b29b      	uxth	r3, r3
 800e4f4:	43db      	mvns	r3, r3
 800e4f6:	68f9      	ldr	r1, [r7, #12]
 800e4f8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e4fc:	4013      	ands	r3, r2
 800e4fe:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800e500:	68fb      	ldr	r3, [r7, #12]
 800e502:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e506:	69da      	ldr	r2, [r3, #28]
 800e508:	683b      	ldr	r3, [r7, #0]
 800e50a:	781b      	ldrb	r3, [r3, #0]
 800e50c:	f003 030f 	and.w	r3, r3, #15
 800e510:	2101      	movs	r1, #1
 800e512:	fa01 f303 	lsl.w	r3, r1, r3
 800e516:	b29b      	uxth	r3, r3
 800e518:	43db      	mvns	r3, r3
 800e51a:	68f9      	ldr	r1, [r7, #12]
 800e51c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e520:	4013      	ands	r3, r2
 800e522:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800e524:	68bb      	ldr	r3, [r7, #8]
 800e526:	015a      	lsls	r2, r3, #5
 800e528:	68fb      	ldr	r3, [r7, #12]
 800e52a:	4413      	add	r3, r2
 800e52c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e530:	681a      	ldr	r2, [r3, #0]
 800e532:	68bb      	ldr	r3, [r7, #8]
 800e534:	0159      	lsls	r1, r3, #5
 800e536:	68fb      	ldr	r3, [r7, #12]
 800e538:	440b      	add	r3, r1
 800e53a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e53e:	4619      	mov	r1, r3
 800e540:	4b35      	ldr	r3, [pc, #212]	@ (800e618 <USB_DeactivateEndpoint+0x1b0>)
 800e542:	4013      	ands	r3, r2
 800e544:	600b      	str	r3, [r1, #0]
 800e546:	e060      	b.n	800e60a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e548:	68bb      	ldr	r3, [r7, #8]
 800e54a:	015a      	lsls	r2, r3, #5
 800e54c:	68fb      	ldr	r3, [r7, #12]
 800e54e:	4413      	add	r3, r2
 800e550:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e554:	681b      	ldr	r3, [r3, #0]
 800e556:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e55a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e55e:	d11f      	bne.n	800e5a0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800e560:	68bb      	ldr	r3, [r7, #8]
 800e562:	015a      	lsls	r2, r3, #5
 800e564:	68fb      	ldr	r3, [r7, #12]
 800e566:	4413      	add	r3, r2
 800e568:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e56c:	681b      	ldr	r3, [r3, #0]
 800e56e:	68ba      	ldr	r2, [r7, #8]
 800e570:	0151      	lsls	r1, r2, #5
 800e572:	68fa      	ldr	r2, [r7, #12]
 800e574:	440a      	add	r2, r1
 800e576:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e57a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800e57e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800e580:	68bb      	ldr	r3, [r7, #8]
 800e582:	015a      	lsls	r2, r3, #5
 800e584:	68fb      	ldr	r3, [r7, #12]
 800e586:	4413      	add	r3, r2
 800e588:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e58c:	681b      	ldr	r3, [r3, #0]
 800e58e:	68ba      	ldr	r2, [r7, #8]
 800e590:	0151      	lsls	r1, r2, #5
 800e592:	68fa      	ldr	r2, [r7, #12]
 800e594:	440a      	add	r2, r1
 800e596:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e59a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800e59e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800e5a0:	68fb      	ldr	r3, [r7, #12]
 800e5a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e5a6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800e5a8:	683b      	ldr	r3, [r7, #0]
 800e5aa:	781b      	ldrb	r3, [r3, #0]
 800e5ac:	f003 030f 	and.w	r3, r3, #15
 800e5b0:	2101      	movs	r1, #1
 800e5b2:	fa01 f303 	lsl.w	r3, r1, r3
 800e5b6:	041b      	lsls	r3, r3, #16
 800e5b8:	43db      	mvns	r3, r3
 800e5ba:	68f9      	ldr	r1, [r7, #12]
 800e5bc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e5c0:	4013      	ands	r3, r2
 800e5c2:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800e5c4:	68fb      	ldr	r3, [r7, #12]
 800e5c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e5ca:	69da      	ldr	r2, [r3, #28]
 800e5cc:	683b      	ldr	r3, [r7, #0]
 800e5ce:	781b      	ldrb	r3, [r3, #0]
 800e5d0:	f003 030f 	and.w	r3, r3, #15
 800e5d4:	2101      	movs	r1, #1
 800e5d6:	fa01 f303 	lsl.w	r3, r1, r3
 800e5da:	041b      	lsls	r3, r3, #16
 800e5dc:	43db      	mvns	r3, r3
 800e5de:	68f9      	ldr	r1, [r7, #12]
 800e5e0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e5e4:	4013      	ands	r3, r2
 800e5e6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800e5e8:	68bb      	ldr	r3, [r7, #8]
 800e5ea:	015a      	lsls	r2, r3, #5
 800e5ec:	68fb      	ldr	r3, [r7, #12]
 800e5ee:	4413      	add	r3, r2
 800e5f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e5f4:	681a      	ldr	r2, [r3, #0]
 800e5f6:	68bb      	ldr	r3, [r7, #8]
 800e5f8:	0159      	lsls	r1, r3, #5
 800e5fa:	68fb      	ldr	r3, [r7, #12]
 800e5fc:	440b      	add	r3, r1
 800e5fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e602:	4619      	mov	r1, r3
 800e604:	4b05      	ldr	r3, [pc, #20]	@ (800e61c <USB_DeactivateEndpoint+0x1b4>)
 800e606:	4013      	ands	r3, r2
 800e608:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800e60a:	2300      	movs	r3, #0
}
 800e60c:	4618      	mov	r0, r3
 800e60e:	3714      	adds	r7, #20
 800e610:	46bd      	mov	sp, r7
 800e612:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e616:	4770      	bx	lr
 800e618:	ec337800 	.word	0xec337800
 800e61c:	eff37800 	.word	0xeff37800

0800e620 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800e620:	b580      	push	{r7, lr}
 800e622:	b08a      	sub	sp, #40	@ 0x28
 800e624:	af02      	add	r7, sp, #8
 800e626:	60f8      	str	r0, [r7, #12]
 800e628:	60b9      	str	r1, [r7, #8]
 800e62a:	4613      	mov	r3, r2
 800e62c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e62e:	68fb      	ldr	r3, [r7, #12]
 800e630:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800e632:	68bb      	ldr	r3, [r7, #8]
 800e634:	781b      	ldrb	r3, [r3, #0]
 800e636:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800e638:	68bb      	ldr	r3, [r7, #8]
 800e63a:	785b      	ldrb	r3, [r3, #1]
 800e63c:	2b01      	cmp	r3, #1
 800e63e:	f040 8181 	bne.w	800e944 <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800e642:	68bb      	ldr	r3, [r7, #8]
 800e644:	691b      	ldr	r3, [r3, #16]
 800e646:	2b00      	cmp	r3, #0
 800e648:	d132      	bne.n	800e6b0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e64a:	69bb      	ldr	r3, [r7, #24]
 800e64c:	015a      	lsls	r2, r3, #5
 800e64e:	69fb      	ldr	r3, [r7, #28]
 800e650:	4413      	add	r3, r2
 800e652:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e656:	691a      	ldr	r2, [r3, #16]
 800e658:	69bb      	ldr	r3, [r7, #24]
 800e65a:	0159      	lsls	r1, r3, #5
 800e65c:	69fb      	ldr	r3, [r7, #28]
 800e65e:	440b      	add	r3, r1
 800e660:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e664:	4619      	mov	r1, r3
 800e666:	4ba5      	ldr	r3, [pc, #660]	@ (800e8fc <USB_EPStartXfer+0x2dc>)
 800e668:	4013      	ands	r3, r2
 800e66a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800e66c:	69bb      	ldr	r3, [r7, #24]
 800e66e:	015a      	lsls	r2, r3, #5
 800e670:	69fb      	ldr	r3, [r7, #28]
 800e672:	4413      	add	r3, r2
 800e674:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e678:	691b      	ldr	r3, [r3, #16]
 800e67a:	69ba      	ldr	r2, [r7, #24]
 800e67c:	0151      	lsls	r1, r2, #5
 800e67e:	69fa      	ldr	r2, [r7, #28]
 800e680:	440a      	add	r2, r1
 800e682:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e686:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800e68a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e68c:	69bb      	ldr	r3, [r7, #24]
 800e68e:	015a      	lsls	r2, r3, #5
 800e690:	69fb      	ldr	r3, [r7, #28]
 800e692:	4413      	add	r3, r2
 800e694:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e698:	691a      	ldr	r2, [r3, #16]
 800e69a:	69bb      	ldr	r3, [r7, #24]
 800e69c:	0159      	lsls	r1, r3, #5
 800e69e:	69fb      	ldr	r3, [r7, #28]
 800e6a0:	440b      	add	r3, r1
 800e6a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e6a6:	4619      	mov	r1, r3
 800e6a8:	4b95      	ldr	r3, [pc, #596]	@ (800e900 <USB_EPStartXfer+0x2e0>)
 800e6aa:	4013      	ands	r3, r2
 800e6ac:	610b      	str	r3, [r1, #16]
 800e6ae:	e092      	b.n	800e7d6 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e6b0:	69bb      	ldr	r3, [r7, #24]
 800e6b2:	015a      	lsls	r2, r3, #5
 800e6b4:	69fb      	ldr	r3, [r7, #28]
 800e6b6:	4413      	add	r3, r2
 800e6b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e6bc:	691a      	ldr	r2, [r3, #16]
 800e6be:	69bb      	ldr	r3, [r7, #24]
 800e6c0:	0159      	lsls	r1, r3, #5
 800e6c2:	69fb      	ldr	r3, [r7, #28]
 800e6c4:	440b      	add	r3, r1
 800e6c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e6ca:	4619      	mov	r1, r3
 800e6cc:	4b8c      	ldr	r3, [pc, #560]	@ (800e900 <USB_EPStartXfer+0x2e0>)
 800e6ce:	4013      	ands	r3, r2
 800e6d0:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e6d2:	69bb      	ldr	r3, [r7, #24]
 800e6d4:	015a      	lsls	r2, r3, #5
 800e6d6:	69fb      	ldr	r3, [r7, #28]
 800e6d8:	4413      	add	r3, r2
 800e6da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e6de:	691a      	ldr	r2, [r3, #16]
 800e6e0:	69bb      	ldr	r3, [r7, #24]
 800e6e2:	0159      	lsls	r1, r3, #5
 800e6e4:	69fb      	ldr	r3, [r7, #28]
 800e6e6:	440b      	add	r3, r1
 800e6e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e6ec:	4619      	mov	r1, r3
 800e6ee:	4b83      	ldr	r3, [pc, #524]	@ (800e8fc <USB_EPStartXfer+0x2dc>)
 800e6f0:	4013      	ands	r3, r2
 800e6f2:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 800e6f4:	69bb      	ldr	r3, [r7, #24]
 800e6f6:	2b00      	cmp	r3, #0
 800e6f8:	d11a      	bne.n	800e730 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800e6fa:	68bb      	ldr	r3, [r7, #8]
 800e6fc:	691a      	ldr	r2, [r3, #16]
 800e6fe:	68bb      	ldr	r3, [r7, #8]
 800e700:	689b      	ldr	r3, [r3, #8]
 800e702:	429a      	cmp	r2, r3
 800e704:	d903      	bls.n	800e70e <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800e706:	68bb      	ldr	r3, [r7, #8]
 800e708:	689a      	ldr	r2, [r3, #8]
 800e70a:	68bb      	ldr	r3, [r7, #8]
 800e70c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800e70e:	69bb      	ldr	r3, [r7, #24]
 800e710:	015a      	lsls	r2, r3, #5
 800e712:	69fb      	ldr	r3, [r7, #28]
 800e714:	4413      	add	r3, r2
 800e716:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e71a:	691b      	ldr	r3, [r3, #16]
 800e71c:	69ba      	ldr	r2, [r7, #24]
 800e71e:	0151      	lsls	r1, r2, #5
 800e720:	69fa      	ldr	r2, [r7, #28]
 800e722:	440a      	add	r2, r1
 800e724:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e728:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800e72c:	6113      	str	r3, [r2, #16]
 800e72e:	e01b      	b.n	800e768 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800e730:	69bb      	ldr	r3, [r7, #24]
 800e732:	015a      	lsls	r2, r3, #5
 800e734:	69fb      	ldr	r3, [r7, #28]
 800e736:	4413      	add	r3, r2
 800e738:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e73c:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800e73e:	68bb      	ldr	r3, [r7, #8]
 800e740:	6919      	ldr	r1, [r3, #16]
 800e742:	68bb      	ldr	r3, [r7, #8]
 800e744:	689b      	ldr	r3, [r3, #8]
 800e746:	440b      	add	r3, r1
 800e748:	1e59      	subs	r1, r3, #1
 800e74a:	68bb      	ldr	r3, [r7, #8]
 800e74c:	689b      	ldr	r3, [r3, #8]
 800e74e:	fbb1 f3f3 	udiv	r3, r1, r3
 800e752:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800e754:	4b6b      	ldr	r3, [pc, #428]	@ (800e904 <USB_EPStartXfer+0x2e4>)
 800e756:	400b      	ands	r3, r1
 800e758:	69b9      	ldr	r1, [r7, #24]
 800e75a:	0148      	lsls	r0, r1, #5
 800e75c:	69f9      	ldr	r1, [r7, #28]
 800e75e:	4401      	add	r1, r0
 800e760:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800e764:	4313      	orrs	r3, r2
 800e766:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800e768:	69bb      	ldr	r3, [r7, #24]
 800e76a:	015a      	lsls	r2, r3, #5
 800e76c:	69fb      	ldr	r3, [r7, #28]
 800e76e:	4413      	add	r3, r2
 800e770:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e774:	691a      	ldr	r2, [r3, #16]
 800e776:	68bb      	ldr	r3, [r7, #8]
 800e778:	691b      	ldr	r3, [r3, #16]
 800e77a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e77e:	69b9      	ldr	r1, [r7, #24]
 800e780:	0148      	lsls	r0, r1, #5
 800e782:	69f9      	ldr	r1, [r7, #28]
 800e784:	4401      	add	r1, r0
 800e786:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800e78a:	4313      	orrs	r3, r2
 800e78c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800e78e:	68bb      	ldr	r3, [r7, #8]
 800e790:	791b      	ldrb	r3, [r3, #4]
 800e792:	2b01      	cmp	r3, #1
 800e794:	d11f      	bne.n	800e7d6 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800e796:	69bb      	ldr	r3, [r7, #24]
 800e798:	015a      	lsls	r2, r3, #5
 800e79a:	69fb      	ldr	r3, [r7, #28]
 800e79c:	4413      	add	r3, r2
 800e79e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e7a2:	691b      	ldr	r3, [r3, #16]
 800e7a4:	69ba      	ldr	r2, [r7, #24]
 800e7a6:	0151      	lsls	r1, r2, #5
 800e7a8:	69fa      	ldr	r2, [r7, #28]
 800e7aa:	440a      	add	r2, r1
 800e7ac:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e7b0:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800e7b4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800e7b6:	69bb      	ldr	r3, [r7, #24]
 800e7b8:	015a      	lsls	r2, r3, #5
 800e7ba:	69fb      	ldr	r3, [r7, #28]
 800e7bc:	4413      	add	r3, r2
 800e7be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e7c2:	691b      	ldr	r3, [r3, #16]
 800e7c4:	69ba      	ldr	r2, [r7, #24]
 800e7c6:	0151      	lsls	r1, r2, #5
 800e7c8:	69fa      	ldr	r2, [r7, #28]
 800e7ca:	440a      	add	r2, r1
 800e7cc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e7d0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800e7d4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800e7d6:	79fb      	ldrb	r3, [r7, #7]
 800e7d8:	2b01      	cmp	r3, #1
 800e7da:	d14b      	bne.n	800e874 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800e7dc:	68bb      	ldr	r3, [r7, #8]
 800e7de:	69db      	ldr	r3, [r3, #28]
 800e7e0:	2b00      	cmp	r3, #0
 800e7e2:	d009      	beq.n	800e7f8 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800e7e4:	69bb      	ldr	r3, [r7, #24]
 800e7e6:	015a      	lsls	r2, r3, #5
 800e7e8:	69fb      	ldr	r3, [r7, #28]
 800e7ea:	4413      	add	r3, r2
 800e7ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e7f0:	461a      	mov	r2, r3
 800e7f2:	68bb      	ldr	r3, [r7, #8]
 800e7f4:	69db      	ldr	r3, [r3, #28]
 800e7f6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800e7f8:	68bb      	ldr	r3, [r7, #8]
 800e7fa:	791b      	ldrb	r3, [r3, #4]
 800e7fc:	2b01      	cmp	r3, #1
 800e7fe:	d128      	bne.n	800e852 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800e800:	69fb      	ldr	r3, [r7, #28]
 800e802:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e806:	689b      	ldr	r3, [r3, #8]
 800e808:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e80c:	2b00      	cmp	r3, #0
 800e80e:	d110      	bne.n	800e832 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800e810:	69bb      	ldr	r3, [r7, #24]
 800e812:	015a      	lsls	r2, r3, #5
 800e814:	69fb      	ldr	r3, [r7, #28]
 800e816:	4413      	add	r3, r2
 800e818:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e81c:	681b      	ldr	r3, [r3, #0]
 800e81e:	69ba      	ldr	r2, [r7, #24]
 800e820:	0151      	lsls	r1, r2, #5
 800e822:	69fa      	ldr	r2, [r7, #28]
 800e824:	440a      	add	r2, r1
 800e826:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e82a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800e82e:	6013      	str	r3, [r2, #0]
 800e830:	e00f      	b.n	800e852 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800e832:	69bb      	ldr	r3, [r7, #24]
 800e834:	015a      	lsls	r2, r3, #5
 800e836:	69fb      	ldr	r3, [r7, #28]
 800e838:	4413      	add	r3, r2
 800e83a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e83e:	681b      	ldr	r3, [r3, #0]
 800e840:	69ba      	ldr	r2, [r7, #24]
 800e842:	0151      	lsls	r1, r2, #5
 800e844:	69fa      	ldr	r2, [r7, #28]
 800e846:	440a      	add	r2, r1
 800e848:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e84c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800e850:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800e852:	69bb      	ldr	r3, [r7, #24]
 800e854:	015a      	lsls	r2, r3, #5
 800e856:	69fb      	ldr	r3, [r7, #28]
 800e858:	4413      	add	r3, r2
 800e85a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e85e:	681b      	ldr	r3, [r3, #0]
 800e860:	69ba      	ldr	r2, [r7, #24]
 800e862:	0151      	lsls	r1, r2, #5
 800e864:	69fa      	ldr	r2, [r7, #28]
 800e866:	440a      	add	r2, r1
 800e868:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e86c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800e870:	6013      	str	r3, [r2, #0]
 800e872:	e16a      	b.n	800eb4a <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800e874:	69bb      	ldr	r3, [r7, #24]
 800e876:	015a      	lsls	r2, r3, #5
 800e878:	69fb      	ldr	r3, [r7, #28]
 800e87a:	4413      	add	r3, r2
 800e87c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e880:	681b      	ldr	r3, [r3, #0]
 800e882:	69ba      	ldr	r2, [r7, #24]
 800e884:	0151      	lsls	r1, r2, #5
 800e886:	69fa      	ldr	r2, [r7, #28]
 800e888:	440a      	add	r2, r1
 800e88a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e88e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800e892:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800e894:	68bb      	ldr	r3, [r7, #8]
 800e896:	791b      	ldrb	r3, [r3, #4]
 800e898:	2b01      	cmp	r3, #1
 800e89a:	d015      	beq.n	800e8c8 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800e89c:	68bb      	ldr	r3, [r7, #8]
 800e89e:	691b      	ldr	r3, [r3, #16]
 800e8a0:	2b00      	cmp	r3, #0
 800e8a2:	f000 8152 	beq.w	800eb4a <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800e8a6:	69fb      	ldr	r3, [r7, #28]
 800e8a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e8ac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e8ae:	68bb      	ldr	r3, [r7, #8]
 800e8b0:	781b      	ldrb	r3, [r3, #0]
 800e8b2:	f003 030f 	and.w	r3, r3, #15
 800e8b6:	2101      	movs	r1, #1
 800e8b8:	fa01 f303 	lsl.w	r3, r1, r3
 800e8bc:	69f9      	ldr	r1, [r7, #28]
 800e8be:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e8c2:	4313      	orrs	r3, r2
 800e8c4:	634b      	str	r3, [r1, #52]	@ 0x34
 800e8c6:	e140      	b.n	800eb4a <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800e8c8:	69fb      	ldr	r3, [r7, #28]
 800e8ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e8ce:	689b      	ldr	r3, [r3, #8]
 800e8d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e8d4:	2b00      	cmp	r3, #0
 800e8d6:	d117      	bne.n	800e908 <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800e8d8:	69bb      	ldr	r3, [r7, #24]
 800e8da:	015a      	lsls	r2, r3, #5
 800e8dc:	69fb      	ldr	r3, [r7, #28]
 800e8de:	4413      	add	r3, r2
 800e8e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e8e4:	681b      	ldr	r3, [r3, #0]
 800e8e6:	69ba      	ldr	r2, [r7, #24]
 800e8e8:	0151      	lsls	r1, r2, #5
 800e8ea:	69fa      	ldr	r2, [r7, #28]
 800e8ec:	440a      	add	r2, r1
 800e8ee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e8f2:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800e8f6:	6013      	str	r3, [r2, #0]
 800e8f8:	e016      	b.n	800e928 <USB_EPStartXfer+0x308>
 800e8fa:	bf00      	nop
 800e8fc:	e007ffff 	.word	0xe007ffff
 800e900:	fff80000 	.word	0xfff80000
 800e904:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800e908:	69bb      	ldr	r3, [r7, #24]
 800e90a:	015a      	lsls	r2, r3, #5
 800e90c:	69fb      	ldr	r3, [r7, #28]
 800e90e:	4413      	add	r3, r2
 800e910:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e914:	681b      	ldr	r3, [r3, #0]
 800e916:	69ba      	ldr	r2, [r7, #24]
 800e918:	0151      	lsls	r1, r2, #5
 800e91a:	69fa      	ldr	r2, [r7, #28]
 800e91c:	440a      	add	r2, r1
 800e91e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e922:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800e926:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800e928:	68bb      	ldr	r3, [r7, #8]
 800e92a:	68d9      	ldr	r1, [r3, #12]
 800e92c:	68bb      	ldr	r3, [r7, #8]
 800e92e:	781a      	ldrb	r2, [r3, #0]
 800e930:	68bb      	ldr	r3, [r7, #8]
 800e932:	691b      	ldr	r3, [r3, #16]
 800e934:	b298      	uxth	r0, r3
 800e936:	79fb      	ldrb	r3, [r7, #7]
 800e938:	9300      	str	r3, [sp, #0]
 800e93a:	4603      	mov	r3, r0
 800e93c:	68f8      	ldr	r0, [r7, #12]
 800e93e:	f000 f9b9 	bl	800ecb4 <USB_WritePacket>
 800e942:	e102      	b.n	800eb4a <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800e944:	69bb      	ldr	r3, [r7, #24]
 800e946:	015a      	lsls	r2, r3, #5
 800e948:	69fb      	ldr	r3, [r7, #28]
 800e94a:	4413      	add	r3, r2
 800e94c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e950:	691a      	ldr	r2, [r3, #16]
 800e952:	69bb      	ldr	r3, [r7, #24]
 800e954:	0159      	lsls	r1, r3, #5
 800e956:	69fb      	ldr	r3, [r7, #28]
 800e958:	440b      	add	r3, r1
 800e95a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e95e:	4619      	mov	r1, r3
 800e960:	4b7c      	ldr	r3, [pc, #496]	@ (800eb54 <USB_EPStartXfer+0x534>)
 800e962:	4013      	ands	r3, r2
 800e964:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800e966:	69bb      	ldr	r3, [r7, #24]
 800e968:	015a      	lsls	r2, r3, #5
 800e96a:	69fb      	ldr	r3, [r7, #28]
 800e96c:	4413      	add	r3, r2
 800e96e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e972:	691a      	ldr	r2, [r3, #16]
 800e974:	69bb      	ldr	r3, [r7, #24]
 800e976:	0159      	lsls	r1, r3, #5
 800e978:	69fb      	ldr	r3, [r7, #28]
 800e97a:	440b      	add	r3, r1
 800e97c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e980:	4619      	mov	r1, r3
 800e982:	4b75      	ldr	r3, [pc, #468]	@ (800eb58 <USB_EPStartXfer+0x538>)
 800e984:	4013      	ands	r3, r2
 800e986:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 800e988:	69bb      	ldr	r3, [r7, #24]
 800e98a:	2b00      	cmp	r3, #0
 800e98c:	d12f      	bne.n	800e9ee <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 800e98e:	68bb      	ldr	r3, [r7, #8]
 800e990:	691b      	ldr	r3, [r3, #16]
 800e992:	2b00      	cmp	r3, #0
 800e994:	d003      	beq.n	800e99e <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 800e996:	68bb      	ldr	r3, [r7, #8]
 800e998:	689a      	ldr	r2, [r3, #8]
 800e99a:	68bb      	ldr	r3, [r7, #8]
 800e99c:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800e99e:	68bb      	ldr	r3, [r7, #8]
 800e9a0:	689a      	ldr	r2, [r3, #8]
 800e9a2:	68bb      	ldr	r3, [r7, #8]
 800e9a4:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800e9a6:	69bb      	ldr	r3, [r7, #24]
 800e9a8:	015a      	lsls	r2, r3, #5
 800e9aa:	69fb      	ldr	r3, [r7, #28]
 800e9ac:	4413      	add	r3, r2
 800e9ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e9b2:	691a      	ldr	r2, [r3, #16]
 800e9b4:	68bb      	ldr	r3, [r7, #8]
 800e9b6:	6a1b      	ldr	r3, [r3, #32]
 800e9b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e9bc:	69b9      	ldr	r1, [r7, #24]
 800e9be:	0148      	lsls	r0, r1, #5
 800e9c0:	69f9      	ldr	r1, [r7, #28]
 800e9c2:	4401      	add	r1, r0
 800e9c4:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800e9c8:	4313      	orrs	r3, r2
 800e9ca:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800e9cc:	69bb      	ldr	r3, [r7, #24]
 800e9ce:	015a      	lsls	r2, r3, #5
 800e9d0:	69fb      	ldr	r3, [r7, #28]
 800e9d2:	4413      	add	r3, r2
 800e9d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e9d8:	691b      	ldr	r3, [r3, #16]
 800e9da:	69ba      	ldr	r2, [r7, #24]
 800e9dc:	0151      	lsls	r1, r2, #5
 800e9de:	69fa      	ldr	r2, [r7, #28]
 800e9e0:	440a      	add	r2, r1
 800e9e2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e9e6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800e9ea:	6113      	str	r3, [r2, #16]
 800e9ec:	e05f      	b.n	800eaae <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 800e9ee:	68bb      	ldr	r3, [r7, #8]
 800e9f0:	691b      	ldr	r3, [r3, #16]
 800e9f2:	2b00      	cmp	r3, #0
 800e9f4:	d123      	bne.n	800ea3e <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800e9f6:	69bb      	ldr	r3, [r7, #24]
 800e9f8:	015a      	lsls	r2, r3, #5
 800e9fa:	69fb      	ldr	r3, [r7, #28]
 800e9fc:	4413      	add	r3, r2
 800e9fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ea02:	691a      	ldr	r2, [r3, #16]
 800ea04:	68bb      	ldr	r3, [r7, #8]
 800ea06:	689b      	ldr	r3, [r3, #8]
 800ea08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ea0c:	69b9      	ldr	r1, [r7, #24]
 800ea0e:	0148      	lsls	r0, r1, #5
 800ea10:	69f9      	ldr	r1, [r7, #28]
 800ea12:	4401      	add	r1, r0
 800ea14:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800ea18:	4313      	orrs	r3, r2
 800ea1a:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ea1c:	69bb      	ldr	r3, [r7, #24]
 800ea1e:	015a      	lsls	r2, r3, #5
 800ea20:	69fb      	ldr	r3, [r7, #28]
 800ea22:	4413      	add	r3, r2
 800ea24:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ea28:	691b      	ldr	r3, [r3, #16]
 800ea2a:	69ba      	ldr	r2, [r7, #24]
 800ea2c:	0151      	lsls	r1, r2, #5
 800ea2e:	69fa      	ldr	r2, [r7, #28]
 800ea30:	440a      	add	r2, r1
 800ea32:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ea36:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800ea3a:	6113      	str	r3, [r2, #16]
 800ea3c:	e037      	b.n	800eaae <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800ea3e:	68bb      	ldr	r3, [r7, #8]
 800ea40:	691a      	ldr	r2, [r3, #16]
 800ea42:	68bb      	ldr	r3, [r7, #8]
 800ea44:	689b      	ldr	r3, [r3, #8]
 800ea46:	4413      	add	r3, r2
 800ea48:	1e5a      	subs	r2, r3, #1
 800ea4a:	68bb      	ldr	r3, [r7, #8]
 800ea4c:	689b      	ldr	r3, [r3, #8]
 800ea4e:	fbb2 f3f3 	udiv	r3, r2, r3
 800ea52:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800ea54:	68bb      	ldr	r3, [r7, #8]
 800ea56:	689b      	ldr	r3, [r3, #8]
 800ea58:	8afa      	ldrh	r2, [r7, #22]
 800ea5a:	fb03 f202 	mul.w	r2, r3, r2
 800ea5e:	68bb      	ldr	r3, [r7, #8]
 800ea60:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800ea62:	69bb      	ldr	r3, [r7, #24]
 800ea64:	015a      	lsls	r2, r3, #5
 800ea66:	69fb      	ldr	r3, [r7, #28]
 800ea68:	4413      	add	r3, r2
 800ea6a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ea6e:	691a      	ldr	r2, [r3, #16]
 800ea70:	8afb      	ldrh	r3, [r7, #22]
 800ea72:	04d9      	lsls	r1, r3, #19
 800ea74:	4b39      	ldr	r3, [pc, #228]	@ (800eb5c <USB_EPStartXfer+0x53c>)
 800ea76:	400b      	ands	r3, r1
 800ea78:	69b9      	ldr	r1, [r7, #24]
 800ea7a:	0148      	lsls	r0, r1, #5
 800ea7c:	69f9      	ldr	r1, [r7, #28]
 800ea7e:	4401      	add	r1, r0
 800ea80:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800ea84:	4313      	orrs	r3, r2
 800ea86:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800ea88:	69bb      	ldr	r3, [r7, #24]
 800ea8a:	015a      	lsls	r2, r3, #5
 800ea8c:	69fb      	ldr	r3, [r7, #28]
 800ea8e:	4413      	add	r3, r2
 800ea90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ea94:	691a      	ldr	r2, [r3, #16]
 800ea96:	68bb      	ldr	r3, [r7, #8]
 800ea98:	6a1b      	ldr	r3, [r3, #32]
 800ea9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ea9e:	69b9      	ldr	r1, [r7, #24]
 800eaa0:	0148      	lsls	r0, r1, #5
 800eaa2:	69f9      	ldr	r1, [r7, #28]
 800eaa4:	4401      	add	r1, r0
 800eaa6:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800eaaa:	4313      	orrs	r3, r2
 800eaac:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800eaae:	79fb      	ldrb	r3, [r7, #7]
 800eab0:	2b01      	cmp	r3, #1
 800eab2:	d10d      	bne.n	800ead0 <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800eab4:	68bb      	ldr	r3, [r7, #8]
 800eab6:	68db      	ldr	r3, [r3, #12]
 800eab8:	2b00      	cmp	r3, #0
 800eaba:	d009      	beq.n	800ead0 <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800eabc:	68bb      	ldr	r3, [r7, #8]
 800eabe:	68d9      	ldr	r1, [r3, #12]
 800eac0:	69bb      	ldr	r3, [r7, #24]
 800eac2:	015a      	lsls	r2, r3, #5
 800eac4:	69fb      	ldr	r3, [r7, #28]
 800eac6:	4413      	add	r3, r2
 800eac8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800eacc:	460a      	mov	r2, r1
 800eace:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800ead0:	68bb      	ldr	r3, [r7, #8]
 800ead2:	791b      	ldrb	r3, [r3, #4]
 800ead4:	2b01      	cmp	r3, #1
 800ead6:	d128      	bne.n	800eb2a <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ead8:	69fb      	ldr	r3, [r7, #28]
 800eada:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800eade:	689b      	ldr	r3, [r3, #8]
 800eae0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800eae4:	2b00      	cmp	r3, #0
 800eae6:	d110      	bne.n	800eb0a <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800eae8:	69bb      	ldr	r3, [r7, #24]
 800eaea:	015a      	lsls	r2, r3, #5
 800eaec:	69fb      	ldr	r3, [r7, #28]
 800eaee:	4413      	add	r3, r2
 800eaf0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800eaf4:	681b      	ldr	r3, [r3, #0]
 800eaf6:	69ba      	ldr	r2, [r7, #24]
 800eaf8:	0151      	lsls	r1, r2, #5
 800eafa:	69fa      	ldr	r2, [r7, #28]
 800eafc:	440a      	add	r2, r1
 800eafe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800eb02:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800eb06:	6013      	str	r3, [r2, #0]
 800eb08:	e00f      	b.n	800eb2a <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800eb0a:	69bb      	ldr	r3, [r7, #24]
 800eb0c:	015a      	lsls	r2, r3, #5
 800eb0e:	69fb      	ldr	r3, [r7, #28]
 800eb10:	4413      	add	r3, r2
 800eb12:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800eb16:	681b      	ldr	r3, [r3, #0]
 800eb18:	69ba      	ldr	r2, [r7, #24]
 800eb1a:	0151      	lsls	r1, r2, #5
 800eb1c:	69fa      	ldr	r2, [r7, #28]
 800eb1e:	440a      	add	r2, r1
 800eb20:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800eb24:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800eb28:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800eb2a:	69bb      	ldr	r3, [r7, #24]
 800eb2c:	015a      	lsls	r2, r3, #5
 800eb2e:	69fb      	ldr	r3, [r7, #28]
 800eb30:	4413      	add	r3, r2
 800eb32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800eb36:	681b      	ldr	r3, [r3, #0]
 800eb38:	69ba      	ldr	r2, [r7, #24]
 800eb3a:	0151      	lsls	r1, r2, #5
 800eb3c:	69fa      	ldr	r2, [r7, #28]
 800eb3e:	440a      	add	r2, r1
 800eb40:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800eb44:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800eb48:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800eb4a:	2300      	movs	r3, #0
}
 800eb4c:	4618      	mov	r0, r3
 800eb4e:	3720      	adds	r7, #32
 800eb50:	46bd      	mov	sp, r7
 800eb52:	bd80      	pop	{r7, pc}
 800eb54:	fff80000 	.word	0xfff80000
 800eb58:	e007ffff 	.word	0xe007ffff
 800eb5c:	1ff80000 	.word	0x1ff80000

0800eb60 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800eb60:	b480      	push	{r7}
 800eb62:	b087      	sub	sp, #28
 800eb64:	af00      	add	r7, sp, #0
 800eb66:	6078      	str	r0, [r7, #4]
 800eb68:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800eb6a:	2300      	movs	r3, #0
 800eb6c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800eb6e:	2300      	movs	r3, #0
 800eb70:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800eb76:	683b      	ldr	r3, [r7, #0]
 800eb78:	785b      	ldrb	r3, [r3, #1]
 800eb7a:	2b01      	cmp	r3, #1
 800eb7c:	d14a      	bne.n	800ec14 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800eb7e:	683b      	ldr	r3, [r7, #0]
 800eb80:	781b      	ldrb	r3, [r3, #0]
 800eb82:	015a      	lsls	r2, r3, #5
 800eb84:	693b      	ldr	r3, [r7, #16]
 800eb86:	4413      	add	r3, r2
 800eb88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800eb8c:	681b      	ldr	r3, [r3, #0]
 800eb8e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800eb92:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800eb96:	f040 8086 	bne.w	800eca6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800eb9a:	683b      	ldr	r3, [r7, #0]
 800eb9c:	781b      	ldrb	r3, [r3, #0]
 800eb9e:	015a      	lsls	r2, r3, #5
 800eba0:	693b      	ldr	r3, [r7, #16]
 800eba2:	4413      	add	r3, r2
 800eba4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800eba8:	681b      	ldr	r3, [r3, #0]
 800ebaa:	683a      	ldr	r2, [r7, #0]
 800ebac:	7812      	ldrb	r2, [r2, #0]
 800ebae:	0151      	lsls	r1, r2, #5
 800ebb0:	693a      	ldr	r2, [r7, #16]
 800ebb2:	440a      	add	r2, r1
 800ebb4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ebb8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800ebbc:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800ebbe:	683b      	ldr	r3, [r7, #0]
 800ebc0:	781b      	ldrb	r3, [r3, #0]
 800ebc2:	015a      	lsls	r2, r3, #5
 800ebc4:	693b      	ldr	r3, [r7, #16]
 800ebc6:	4413      	add	r3, r2
 800ebc8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ebcc:	681b      	ldr	r3, [r3, #0]
 800ebce:	683a      	ldr	r2, [r7, #0]
 800ebd0:	7812      	ldrb	r2, [r2, #0]
 800ebd2:	0151      	lsls	r1, r2, #5
 800ebd4:	693a      	ldr	r2, [r7, #16]
 800ebd6:	440a      	add	r2, r1
 800ebd8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ebdc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800ebe0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800ebe2:	68fb      	ldr	r3, [r7, #12]
 800ebe4:	3301      	adds	r3, #1
 800ebe6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800ebe8:	68fb      	ldr	r3, [r7, #12]
 800ebea:	f242 7210 	movw	r2, #10000	@ 0x2710
 800ebee:	4293      	cmp	r3, r2
 800ebf0:	d902      	bls.n	800ebf8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800ebf2:	2301      	movs	r3, #1
 800ebf4:	75fb      	strb	r3, [r7, #23]
          break;
 800ebf6:	e056      	b.n	800eca6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800ebf8:	683b      	ldr	r3, [r7, #0]
 800ebfa:	781b      	ldrb	r3, [r3, #0]
 800ebfc:	015a      	lsls	r2, r3, #5
 800ebfe:	693b      	ldr	r3, [r7, #16]
 800ec00:	4413      	add	r3, r2
 800ec02:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ec06:	681b      	ldr	r3, [r3, #0]
 800ec08:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ec0c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ec10:	d0e7      	beq.n	800ebe2 <USB_EPStopXfer+0x82>
 800ec12:	e048      	b.n	800eca6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ec14:	683b      	ldr	r3, [r7, #0]
 800ec16:	781b      	ldrb	r3, [r3, #0]
 800ec18:	015a      	lsls	r2, r3, #5
 800ec1a:	693b      	ldr	r3, [r7, #16]
 800ec1c:	4413      	add	r3, r2
 800ec1e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ec22:	681b      	ldr	r3, [r3, #0]
 800ec24:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ec28:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ec2c:	d13b      	bne.n	800eca6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800ec2e:	683b      	ldr	r3, [r7, #0]
 800ec30:	781b      	ldrb	r3, [r3, #0]
 800ec32:	015a      	lsls	r2, r3, #5
 800ec34:	693b      	ldr	r3, [r7, #16]
 800ec36:	4413      	add	r3, r2
 800ec38:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ec3c:	681b      	ldr	r3, [r3, #0]
 800ec3e:	683a      	ldr	r2, [r7, #0]
 800ec40:	7812      	ldrb	r2, [r2, #0]
 800ec42:	0151      	lsls	r1, r2, #5
 800ec44:	693a      	ldr	r2, [r7, #16]
 800ec46:	440a      	add	r2, r1
 800ec48:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ec4c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800ec50:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800ec52:	683b      	ldr	r3, [r7, #0]
 800ec54:	781b      	ldrb	r3, [r3, #0]
 800ec56:	015a      	lsls	r2, r3, #5
 800ec58:	693b      	ldr	r3, [r7, #16]
 800ec5a:	4413      	add	r3, r2
 800ec5c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ec60:	681b      	ldr	r3, [r3, #0]
 800ec62:	683a      	ldr	r2, [r7, #0]
 800ec64:	7812      	ldrb	r2, [r2, #0]
 800ec66:	0151      	lsls	r1, r2, #5
 800ec68:	693a      	ldr	r2, [r7, #16]
 800ec6a:	440a      	add	r2, r1
 800ec6c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ec70:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800ec74:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800ec76:	68fb      	ldr	r3, [r7, #12]
 800ec78:	3301      	adds	r3, #1
 800ec7a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800ec7c:	68fb      	ldr	r3, [r7, #12]
 800ec7e:	f242 7210 	movw	r2, #10000	@ 0x2710
 800ec82:	4293      	cmp	r3, r2
 800ec84:	d902      	bls.n	800ec8c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800ec86:	2301      	movs	r3, #1
 800ec88:	75fb      	strb	r3, [r7, #23]
          break;
 800ec8a:	e00c      	b.n	800eca6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800ec8c:	683b      	ldr	r3, [r7, #0]
 800ec8e:	781b      	ldrb	r3, [r3, #0]
 800ec90:	015a      	lsls	r2, r3, #5
 800ec92:	693b      	ldr	r3, [r7, #16]
 800ec94:	4413      	add	r3, r2
 800ec96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ec9a:	681b      	ldr	r3, [r3, #0]
 800ec9c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800eca0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800eca4:	d0e7      	beq.n	800ec76 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800eca6:	7dfb      	ldrb	r3, [r7, #23]
}
 800eca8:	4618      	mov	r0, r3
 800ecaa:	371c      	adds	r7, #28
 800ecac:	46bd      	mov	sp, r7
 800ecae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecb2:	4770      	bx	lr

0800ecb4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800ecb4:	b480      	push	{r7}
 800ecb6:	b089      	sub	sp, #36	@ 0x24
 800ecb8:	af00      	add	r7, sp, #0
 800ecba:	60f8      	str	r0, [r7, #12]
 800ecbc:	60b9      	str	r1, [r7, #8]
 800ecbe:	4611      	mov	r1, r2
 800ecc0:	461a      	mov	r2, r3
 800ecc2:	460b      	mov	r3, r1
 800ecc4:	71fb      	strb	r3, [r7, #7]
 800ecc6:	4613      	mov	r3, r2
 800ecc8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ecca:	68fb      	ldr	r3, [r7, #12]
 800eccc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800ecce:	68bb      	ldr	r3, [r7, #8]
 800ecd0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800ecd2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800ecd6:	2b00      	cmp	r3, #0
 800ecd8:	d123      	bne.n	800ed22 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800ecda:	88bb      	ldrh	r3, [r7, #4]
 800ecdc:	3303      	adds	r3, #3
 800ecde:	089b      	lsrs	r3, r3, #2
 800ece0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800ece2:	2300      	movs	r3, #0
 800ece4:	61bb      	str	r3, [r7, #24]
 800ece6:	e018      	b.n	800ed1a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800ece8:	79fb      	ldrb	r3, [r7, #7]
 800ecea:	031a      	lsls	r2, r3, #12
 800ecec:	697b      	ldr	r3, [r7, #20]
 800ecee:	4413      	add	r3, r2
 800ecf0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ecf4:	461a      	mov	r2, r3
 800ecf6:	69fb      	ldr	r3, [r7, #28]
 800ecf8:	681b      	ldr	r3, [r3, #0]
 800ecfa:	6013      	str	r3, [r2, #0]
      pSrc++;
 800ecfc:	69fb      	ldr	r3, [r7, #28]
 800ecfe:	3301      	adds	r3, #1
 800ed00:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800ed02:	69fb      	ldr	r3, [r7, #28]
 800ed04:	3301      	adds	r3, #1
 800ed06:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800ed08:	69fb      	ldr	r3, [r7, #28]
 800ed0a:	3301      	adds	r3, #1
 800ed0c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800ed0e:	69fb      	ldr	r3, [r7, #28]
 800ed10:	3301      	adds	r3, #1
 800ed12:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800ed14:	69bb      	ldr	r3, [r7, #24]
 800ed16:	3301      	adds	r3, #1
 800ed18:	61bb      	str	r3, [r7, #24]
 800ed1a:	69ba      	ldr	r2, [r7, #24]
 800ed1c:	693b      	ldr	r3, [r7, #16]
 800ed1e:	429a      	cmp	r2, r3
 800ed20:	d3e2      	bcc.n	800ece8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800ed22:	2300      	movs	r3, #0
}
 800ed24:	4618      	mov	r0, r3
 800ed26:	3724      	adds	r7, #36	@ 0x24
 800ed28:	46bd      	mov	sp, r7
 800ed2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed2e:	4770      	bx	lr

0800ed30 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800ed30:	b480      	push	{r7}
 800ed32:	b08b      	sub	sp, #44	@ 0x2c
 800ed34:	af00      	add	r7, sp, #0
 800ed36:	60f8      	str	r0, [r7, #12]
 800ed38:	60b9      	str	r1, [r7, #8]
 800ed3a:	4613      	mov	r3, r2
 800ed3c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ed3e:	68fb      	ldr	r3, [r7, #12]
 800ed40:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800ed42:	68bb      	ldr	r3, [r7, #8]
 800ed44:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800ed46:	88fb      	ldrh	r3, [r7, #6]
 800ed48:	089b      	lsrs	r3, r3, #2
 800ed4a:	b29b      	uxth	r3, r3
 800ed4c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800ed4e:	88fb      	ldrh	r3, [r7, #6]
 800ed50:	f003 0303 	and.w	r3, r3, #3
 800ed54:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800ed56:	2300      	movs	r3, #0
 800ed58:	623b      	str	r3, [r7, #32]
 800ed5a:	e014      	b.n	800ed86 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800ed5c:	69bb      	ldr	r3, [r7, #24]
 800ed5e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ed62:	681a      	ldr	r2, [r3, #0]
 800ed64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ed66:	601a      	str	r2, [r3, #0]
    pDest++;
 800ed68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ed6a:	3301      	adds	r3, #1
 800ed6c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800ed6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ed70:	3301      	adds	r3, #1
 800ed72:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800ed74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ed76:	3301      	adds	r3, #1
 800ed78:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800ed7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ed7c:	3301      	adds	r3, #1
 800ed7e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800ed80:	6a3b      	ldr	r3, [r7, #32]
 800ed82:	3301      	adds	r3, #1
 800ed84:	623b      	str	r3, [r7, #32]
 800ed86:	6a3a      	ldr	r2, [r7, #32]
 800ed88:	697b      	ldr	r3, [r7, #20]
 800ed8a:	429a      	cmp	r2, r3
 800ed8c:	d3e6      	bcc.n	800ed5c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800ed8e:	8bfb      	ldrh	r3, [r7, #30]
 800ed90:	2b00      	cmp	r3, #0
 800ed92:	d01e      	beq.n	800edd2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800ed94:	2300      	movs	r3, #0
 800ed96:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800ed98:	69bb      	ldr	r3, [r7, #24]
 800ed9a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ed9e:	461a      	mov	r2, r3
 800eda0:	f107 0310 	add.w	r3, r7, #16
 800eda4:	6812      	ldr	r2, [r2, #0]
 800eda6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800eda8:	693a      	ldr	r2, [r7, #16]
 800edaa:	6a3b      	ldr	r3, [r7, #32]
 800edac:	b2db      	uxtb	r3, r3
 800edae:	00db      	lsls	r3, r3, #3
 800edb0:	fa22 f303 	lsr.w	r3, r2, r3
 800edb4:	b2da      	uxtb	r2, r3
 800edb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800edb8:	701a      	strb	r2, [r3, #0]
      i++;
 800edba:	6a3b      	ldr	r3, [r7, #32]
 800edbc:	3301      	adds	r3, #1
 800edbe:	623b      	str	r3, [r7, #32]
      pDest++;
 800edc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800edc2:	3301      	adds	r3, #1
 800edc4:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800edc6:	8bfb      	ldrh	r3, [r7, #30]
 800edc8:	3b01      	subs	r3, #1
 800edca:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800edcc:	8bfb      	ldrh	r3, [r7, #30]
 800edce:	2b00      	cmp	r3, #0
 800edd0:	d1ea      	bne.n	800eda8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800edd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800edd4:	4618      	mov	r0, r3
 800edd6:	372c      	adds	r7, #44	@ 0x2c
 800edd8:	46bd      	mov	sp, r7
 800edda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edde:	4770      	bx	lr

0800ede0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800ede0:	b480      	push	{r7}
 800ede2:	b085      	sub	sp, #20
 800ede4:	af00      	add	r7, sp, #0
 800ede6:	6078      	str	r0, [r7, #4]
 800ede8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800edee:	683b      	ldr	r3, [r7, #0]
 800edf0:	781b      	ldrb	r3, [r3, #0]
 800edf2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800edf4:	683b      	ldr	r3, [r7, #0]
 800edf6:	785b      	ldrb	r3, [r3, #1]
 800edf8:	2b01      	cmp	r3, #1
 800edfa:	d12c      	bne.n	800ee56 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800edfc:	68bb      	ldr	r3, [r7, #8]
 800edfe:	015a      	lsls	r2, r3, #5
 800ee00:	68fb      	ldr	r3, [r7, #12]
 800ee02:	4413      	add	r3, r2
 800ee04:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ee08:	681b      	ldr	r3, [r3, #0]
 800ee0a:	2b00      	cmp	r3, #0
 800ee0c:	db12      	blt.n	800ee34 <USB_EPSetStall+0x54>
 800ee0e:	68bb      	ldr	r3, [r7, #8]
 800ee10:	2b00      	cmp	r3, #0
 800ee12:	d00f      	beq.n	800ee34 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800ee14:	68bb      	ldr	r3, [r7, #8]
 800ee16:	015a      	lsls	r2, r3, #5
 800ee18:	68fb      	ldr	r3, [r7, #12]
 800ee1a:	4413      	add	r3, r2
 800ee1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ee20:	681b      	ldr	r3, [r3, #0]
 800ee22:	68ba      	ldr	r2, [r7, #8]
 800ee24:	0151      	lsls	r1, r2, #5
 800ee26:	68fa      	ldr	r2, [r7, #12]
 800ee28:	440a      	add	r2, r1
 800ee2a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ee2e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800ee32:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800ee34:	68bb      	ldr	r3, [r7, #8]
 800ee36:	015a      	lsls	r2, r3, #5
 800ee38:	68fb      	ldr	r3, [r7, #12]
 800ee3a:	4413      	add	r3, r2
 800ee3c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ee40:	681b      	ldr	r3, [r3, #0]
 800ee42:	68ba      	ldr	r2, [r7, #8]
 800ee44:	0151      	lsls	r1, r2, #5
 800ee46:	68fa      	ldr	r2, [r7, #12]
 800ee48:	440a      	add	r2, r1
 800ee4a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ee4e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800ee52:	6013      	str	r3, [r2, #0]
 800ee54:	e02b      	b.n	800eeae <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800ee56:	68bb      	ldr	r3, [r7, #8]
 800ee58:	015a      	lsls	r2, r3, #5
 800ee5a:	68fb      	ldr	r3, [r7, #12]
 800ee5c:	4413      	add	r3, r2
 800ee5e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ee62:	681b      	ldr	r3, [r3, #0]
 800ee64:	2b00      	cmp	r3, #0
 800ee66:	db12      	blt.n	800ee8e <USB_EPSetStall+0xae>
 800ee68:	68bb      	ldr	r3, [r7, #8]
 800ee6a:	2b00      	cmp	r3, #0
 800ee6c:	d00f      	beq.n	800ee8e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800ee6e:	68bb      	ldr	r3, [r7, #8]
 800ee70:	015a      	lsls	r2, r3, #5
 800ee72:	68fb      	ldr	r3, [r7, #12]
 800ee74:	4413      	add	r3, r2
 800ee76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ee7a:	681b      	ldr	r3, [r3, #0]
 800ee7c:	68ba      	ldr	r2, [r7, #8]
 800ee7e:	0151      	lsls	r1, r2, #5
 800ee80:	68fa      	ldr	r2, [r7, #12]
 800ee82:	440a      	add	r2, r1
 800ee84:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ee88:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800ee8c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800ee8e:	68bb      	ldr	r3, [r7, #8]
 800ee90:	015a      	lsls	r2, r3, #5
 800ee92:	68fb      	ldr	r3, [r7, #12]
 800ee94:	4413      	add	r3, r2
 800ee96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ee9a:	681b      	ldr	r3, [r3, #0]
 800ee9c:	68ba      	ldr	r2, [r7, #8]
 800ee9e:	0151      	lsls	r1, r2, #5
 800eea0:	68fa      	ldr	r2, [r7, #12]
 800eea2:	440a      	add	r2, r1
 800eea4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800eea8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800eeac:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800eeae:	2300      	movs	r3, #0
}
 800eeb0:	4618      	mov	r0, r3
 800eeb2:	3714      	adds	r7, #20
 800eeb4:	46bd      	mov	sp, r7
 800eeb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeba:	4770      	bx	lr

0800eebc <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800eebc:	b480      	push	{r7}
 800eebe:	b085      	sub	sp, #20
 800eec0:	af00      	add	r7, sp, #0
 800eec2:	6078      	str	r0, [r7, #4]
 800eec4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eec6:	687b      	ldr	r3, [r7, #4]
 800eec8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800eeca:	683b      	ldr	r3, [r7, #0]
 800eecc:	781b      	ldrb	r3, [r3, #0]
 800eece:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800eed0:	683b      	ldr	r3, [r7, #0]
 800eed2:	785b      	ldrb	r3, [r3, #1]
 800eed4:	2b01      	cmp	r3, #1
 800eed6:	d128      	bne.n	800ef2a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800eed8:	68bb      	ldr	r3, [r7, #8]
 800eeda:	015a      	lsls	r2, r3, #5
 800eedc:	68fb      	ldr	r3, [r7, #12]
 800eede:	4413      	add	r3, r2
 800eee0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800eee4:	681b      	ldr	r3, [r3, #0]
 800eee6:	68ba      	ldr	r2, [r7, #8]
 800eee8:	0151      	lsls	r1, r2, #5
 800eeea:	68fa      	ldr	r2, [r7, #12]
 800eeec:	440a      	add	r2, r1
 800eeee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800eef2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800eef6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800eef8:	683b      	ldr	r3, [r7, #0]
 800eefa:	791b      	ldrb	r3, [r3, #4]
 800eefc:	2b03      	cmp	r3, #3
 800eefe:	d003      	beq.n	800ef08 <USB_EPClearStall+0x4c>
 800ef00:	683b      	ldr	r3, [r7, #0]
 800ef02:	791b      	ldrb	r3, [r3, #4]
 800ef04:	2b02      	cmp	r3, #2
 800ef06:	d138      	bne.n	800ef7a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800ef08:	68bb      	ldr	r3, [r7, #8]
 800ef0a:	015a      	lsls	r2, r3, #5
 800ef0c:	68fb      	ldr	r3, [r7, #12]
 800ef0e:	4413      	add	r3, r2
 800ef10:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ef14:	681b      	ldr	r3, [r3, #0]
 800ef16:	68ba      	ldr	r2, [r7, #8]
 800ef18:	0151      	lsls	r1, r2, #5
 800ef1a:	68fa      	ldr	r2, [r7, #12]
 800ef1c:	440a      	add	r2, r1
 800ef1e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ef22:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ef26:	6013      	str	r3, [r2, #0]
 800ef28:	e027      	b.n	800ef7a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800ef2a:	68bb      	ldr	r3, [r7, #8]
 800ef2c:	015a      	lsls	r2, r3, #5
 800ef2e:	68fb      	ldr	r3, [r7, #12]
 800ef30:	4413      	add	r3, r2
 800ef32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ef36:	681b      	ldr	r3, [r3, #0]
 800ef38:	68ba      	ldr	r2, [r7, #8]
 800ef3a:	0151      	lsls	r1, r2, #5
 800ef3c:	68fa      	ldr	r2, [r7, #12]
 800ef3e:	440a      	add	r2, r1
 800ef40:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ef44:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800ef48:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800ef4a:	683b      	ldr	r3, [r7, #0]
 800ef4c:	791b      	ldrb	r3, [r3, #4]
 800ef4e:	2b03      	cmp	r3, #3
 800ef50:	d003      	beq.n	800ef5a <USB_EPClearStall+0x9e>
 800ef52:	683b      	ldr	r3, [r7, #0]
 800ef54:	791b      	ldrb	r3, [r3, #4]
 800ef56:	2b02      	cmp	r3, #2
 800ef58:	d10f      	bne.n	800ef7a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800ef5a:	68bb      	ldr	r3, [r7, #8]
 800ef5c:	015a      	lsls	r2, r3, #5
 800ef5e:	68fb      	ldr	r3, [r7, #12]
 800ef60:	4413      	add	r3, r2
 800ef62:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ef66:	681b      	ldr	r3, [r3, #0]
 800ef68:	68ba      	ldr	r2, [r7, #8]
 800ef6a:	0151      	lsls	r1, r2, #5
 800ef6c:	68fa      	ldr	r2, [r7, #12]
 800ef6e:	440a      	add	r2, r1
 800ef70:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ef74:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ef78:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800ef7a:	2300      	movs	r3, #0
}
 800ef7c:	4618      	mov	r0, r3
 800ef7e:	3714      	adds	r7, #20
 800ef80:	46bd      	mov	sp, r7
 800ef82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef86:	4770      	bx	lr

0800ef88 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800ef88:	b480      	push	{r7}
 800ef8a:	b085      	sub	sp, #20
 800ef8c:	af00      	add	r7, sp, #0
 800ef8e:	6078      	str	r0, [r7, #4]
 800ef90:	460b      	mov	r3, r1
 800ef92:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800ef98:	68fb      	ldr	r3, [r7, #12]
 800ef9a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ef9e:	681b      	ldr	r3, [r3, #0]
 800efa0:	68fa      	ldr	r2, [r7, #12]
 800efa2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800efa6:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800efaa:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800efac:	68fb      	ldr	r3, [r7, #12]
 800efae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800efb2:	681a      	ldr	r2, [r3, #0]
 800efb4:	78fb      	ldrb	r3, [r7, #3]
 800efb6:	011b      	lsls	r3, r3, #4
 800efb8:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800efbc:	68f9      	ldr	r1, [r7, #12]
 800efbe:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800efc2:	4313      	orrs	r3, r2
 800efc4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800efc6:	2300      	movs	r3, #0
}
 800efc8:	4618      	mov	r0, r3
 800efca:	3714      	adds	r7, #20
 800efcc:	46bd      	mov	sp, r7
 800efce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efd2:	4770      	bx	lr

0800efd4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800efd4:	b480      	push	{r7}
 800efd6:	b085      	sub	sp, #20
 800efd8:	af00      	add	r7, sp, #0
 800efda:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800efe0:	68fb      	ldr	r3, [r7, #12]
 800efe2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800efe6:	681b      	ldr	r3, [r3, #0]
 800efe8:	68fa      	ldr	r2, [r7, #12]
 800efea:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800efee:	f023 0303 	bic.w	r3, r3, #3
 800eff2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800eff4:	68fb      	ldr	r3, [r7, #12]
 800eff6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800effa:	685b      	ldr	r3, [r3, #4]
 800effc:	68fa      	ldr	r2, [r7, #12]
 800effe:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800f002:	f023 0302 	bic.w	r3, r3, #2
 800f006:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800f008:	2300      	movs	r3, #0
}
 800f00a:	4618      	mov	r0, r3
 800f00c:	3714      	adds	r7, #20
 800f00e:	46bd      	mov	sp, r7
 800f010:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f014:	4770      	bx	lr

0800f016 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800f016:	b480      	push	{r7}
 800f018:	b085      	sub	sp, #20
 800f01a:	af00      	add	r7, sp, #0
 800f01c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800f022:	68fb      	ldr	r3, [r7, #12]
 800f024:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800f028:	681b      	ldr	r3, [r3, #0]
 800f02a:	68fa      	ldr	r2, [r7, #12]
 800f02c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800f030:	f023 0303 	bic.w	r3, r3, #3
 800f034:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800f036:	68fb      	ldr	r3, [r7, #12]
 800f038:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f03c:	685b      	ldr	r3, [r3, #4]
 800f03e:	68fa      	ldr	r2, [r7, #12]
 800f040:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800f044:	f043 0302 	orr.w	r3, r3, #2
 800f048:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800f04a:	2300      	movs	r3, #0
}
 800f04c:	4618      	mov	r0, r3
 800f04e:	3714      	adds	r7, #20
 800f050:	46bd      	mov	sp, r7
 800f052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f056:	4770      	bx	lr

0800f058 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800f058:	b480      	push	{r7}
 800f05a:	b085      	sub	sp, #20
 800f05c:	af00      	add	r7, sp, #0
 800f05e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	695b      	ldr	r3, [r3, #20]
 800f064:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800f066:	687b      	ldr	r3, [r7, #4]
 800f068:	699b      	ldr	r3, [r3, #24]
 800f06a:	68fa      	ldr	r2, [r7, #12]
 800f06c:	4013      	ands	r3, r2
 800f06e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800f070:	68fb      	ldr	r3, [r7, #12]
}
 800f072:	4618      	mov	r0, r3
 800f074:	3714      	adds	r7, #20
 800f076:	46bd      	mov	sp, r7
 800f078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f07c:	4770      	bx	lr

0800f07e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800f07e:	b480      	push	{r7}
 800f080:	b085      	sub	sp, #20
 800f082:	af00      	add	r7, sp, #0
 800f084:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800f08a:	68fb      	ldr	r3, [r7, #12]
 800f08c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f090:	699b      	ldr	r3, [r3, #24]
 800f092:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800f094:	68fb      	ldr	r3, [r7, #12]
 800f096:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f09a:	69db      	ldr	r3, [r3, #28]
 800f09c:	68ba      	ldr	r2, [r7, #8]
 800f09e:	4013      	ands	r3, r2
 800f0a0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800f0a2:	68bb      	ldr	r3, [r7, #8]
 800f0a4:	0c1b      	lsrs	r3, r3, #16
}
 800f0a6:	4618      	mov	r0, r3
 800f0a8:	3714      	adds	r7, #20
 800f0aa:	46bd      	mov	sp, r7
 800f0ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0b0:	4770      	bx	lr

0800f0b2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800f0b2:	b480      	push	{r7}
 800f0b4:	b085      	sub	sp, #20
 800f0b6:	af00      	add	r7, sp, #0
 800f0b8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f0ba:	687b      	ldr	r3, [r7, #4]
 800f0bc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800f0be:	68fb      	ldr	r3, [r7, #12]
 800f0c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f0c4:	699b      	ldr	r3, [r3, #24]
 800f0c6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800f0c8:	68fb      	ldr	r3, [r7, #12]
 800f0ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f0ce:	69db      	ldr	r3, [r3, #28]
 800f0d0:	68ba      	ldr	r2, [r7, #8]
 800f0d2:	4013      	ands	r3, r2
 800f0d4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800f0d6:	68bb      	ldr	r3, [r7, #8]
 800f0d8:	b29b      	uxth	r3, r3
}
 800f0da:	4618      	mov	r0, r3
 800f0dc:	3714      	adds	r7, #20
 800f0de:	46bd      	mov	sp, r7
 800f0e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0e4:	4770      	bx	lr

0800f0e6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800f0e6:	b480      	push	{r7}
 800f0e8:	b085      	sub	sp, #20
 800f0ea:	af00      	add	r7, sp, #0
 800f0ec:	6078      	str	r0, [r7, #4]
 800f0ee:	460b      	mov	r3, r1
 800f0f0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800f0f6:	78fb      	ldrb	r3, [r7, #3]
 800f0f8:	015a      	lsls	r2, r3, #5
 800f0fa:	68fb      	ldr	r3, [r7, #12]
 800f0fc:	4413      	add	r3, r2
 800f0fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f102:	689b      	ldr	r3, [r3, #8]
 800f104:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800f106:	68fb      	ldr	r3, [r7, #12]
 800f108:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f10c:	695b      	ldr	r3, [r3, #20]
 800f10e:	68ba      	ldr	r2, [r7, #8]
 800f110:	4013      	ands	r3, r2
 800f112:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800f114:	68bb      	ldr	r3, [r7, #8]
}
 800f116:	4618      	mov	r0, r3
 800f118:	3714      	adds	r7, #20
 800f11a:	46bd      	mov	sp, r7
 800f11c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f120:	4770      	bx	lr

0800f122 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800f122:	b480      	push	{r7}
 800f124:	b087      	sub	sp, #28
 800f126:	af00      	add	r7, sp, #0
 800f128:	6078      	str	r0, [r7, #4]
 800f12a:	460b      	mov	r3, r1
 800f12c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f12e:	687b      	ldr	r3, [r7, #4]
 800f130:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800f132:	697b      	ldr	r3, [r7, #20]
 800f134:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f138:	691b      	ldr	r3, [r3, #16]
 800f13a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800f13c:	697b      	ldr	r3, [r7, #20]
 800f13e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f142:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f144:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800f146:	78fb      	ldrb	r3, [r7, #3]
 800f148:	f003 030f 	and.w	r3, r3, #15
 800f14c:	68fa      	ldr	r2, [r7, #12]
 800f14e:	fa22 f303 	lsr.w	r3, r2, r3
 800f152:	01db      	lsls	r3, r3, #7
 800f154:	b2db      	uxtb	r3, r3
 800f156:	693a      	ldr	r2, [r7, #16]
 800f158:	4313      	orrs	r3, r2
 800f15a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800f15c:	78fb      	ldrb	r3, [r7, #3]
 800f15e:	015a      	lsls	r2, r3, #5
 800f160:	697b      	ldr	r3, [r7, #20]
 800f162:	4413      	add	r3, r2
 800f164:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f168:	689b      	ldr	r3, [r3, #8]
 800f16a:	693a      	ldr	r2, [r7, #16]
 800f16c:	4013      	ands	r3, r2
 800f16e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800f170:	68bb      	ldr	r3, [r7, #8]
}
 800f172:	4618      	mov	r0, r3
 800f174:	371c      	adds	r7, #28
 800f176:	46bd      	mov	sp, r7
 800f178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f17c:	4770      	bx	lr

0800f17e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800f17e:	b480      	push	{r7}
 800f180:	b083      	sub	sp, #12
 800f182:	af00      	add	r7, sp, #0
 800f184:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	695b      	ldr	r3, [r3, #20]
 800f18a:	f003 0301 	and.w	r3, r3, #1
}
 800f18e:	4618      	mov	r0, r3
 800f190:	370c      	adds	r7, #12
 800f192:	46bd      	mov	sp, r7
 800f194:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f198:	4770      	bx	lr
	...

0800f19c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800f19c:	b480      	push	{r7}
 800f19e:	b085      	sub	sp, #20
 800f1a0:	af00      	add	r7, sp, #0
 800f1a2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800f1a8:	68fb      	ldr	r3, [r7, #12]
 800f1aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f1ae:	681a      	ldr	r2, [r3, #0]
 800f1b0:	68fb      	ldr	r3, [r7, #12]
 800f1b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f1b6:	4619      	mov	r1, r3
 800f1b8:	4b09      	ldr	r3, [pc, #36]	@ (800f1e0 <USB_ActivateSetup+0x44>)
 800f1ba:	4013      	ands	r3, r2
 800f1bc:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800f1be:	68fb      	ldr	r3, [r7, #12]
 800f1c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f1c4:	685b      	ldr	r3, [r3, #4]
 800f1c6:	68fa      	ldr	r2, [r7, #12]
 800f1c8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800f1cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800f1d0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800f1d2:	2300      	movs	r3, #0
}
 800f1d4:	4618      	mov	r0, r3
 800f1d6:	3714      	adds	r7, #20
 800f1d8:	46bd      	mov	sp, r7
 800f1da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1de:	4770      	bx	lr
 800f1e0:	fffff800 	.word	0xfffff800

0800f1e4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800f1e4:	b480      	push	{r7}
 800f1e6:	b087      	sub	sp, #28
 800f1e8:	af00      	add	r7, sp, #0
 800f1ea:	60f8      	str	r0, [r7, #12]
 800f1ec:	460b      	mov	r3, r1
 800f1ee:	607a      	str	r2, [r7, #4]
 800f1f0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f1f2:	68fb      	ldr	r3, [r7, #12]
 800f1f4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800f1f6:	68fb      	ldr	r3, [r7, #12]
 800f1f8:	333c      	adds	r3, #60	@ 0x3c
 800f1fa:	3304      	adds	r3, #4
 800f1fc:	681b      	ldr	r3, [r3, #0]
 800f1fe:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800f200:	693b      	ldr	r3, [r7, #16]
 800f202:	4a26      	ldr	r2, [pc, #152]	@ (800f29c <USB_EP0_OutStart+0xb8>)
 800f204:	4293      	cmp	r3, r2
 800f206:	d90a      	bls.n	800f21e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800f208:	697b      	ldr	r3, [r7, #20]
 800f20a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f20e:	681b      	ldr	r3, [r3, #0]
 800f210:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800f214:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800f218:	d101      	bne.n	800f21e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800f21a:	2300      	movs	r3, #0
 800f21c:	e037      	b.n	800f28e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800f21e:	697b      	ldr	r3, [r7, #20]
 800f220:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f224:	461a      	mov	r2, r3
 800f226:	2300      	movs	r3, #0
 800f228:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800f22a:	697b      	ldr	r3, [r7, #20]
 800f22c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f230:	691b      	ldr	r3, [r3, #16]
 800f232:	697a      	ldr	r2, [r7, #20]
 800f234:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f238:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800f23c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800f23e:	697b      	ldr	r3, [r7, #20]
 800f240:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f244:	691b      	ldr	r3, [r3, #16]
 800f246:	697a      	ldr	r2, [r7, #20]
 800f248:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f24c:	f043 0318 	orr.w	r3, r3, #24
 800f250:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800f252:	697b      	ldr	r3, [r7, #20]
 800f254:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f258:	691b      	ldr	r3, [r3, #16]
 800f25a:	697a      	ldr	r2, [r7, #20]
 800f25c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f260:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800f264:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800f266:	7afb      	ldrb	r3, [r7, #11]
 800f268:	2b01      	cmp	r3, #1
 800f26a:	d10f      	bne.n	800f28c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800f26c:	697b      	ldr	r3, [r7, #20]
 800f26e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f272:	461a      	mov	r2, r3
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800f278:	697b      	ldr	r3, [r7, #20]
 800f27a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f27e:	681b      	ldr	r3, [r3, #0]
 800f280:	697a      	ldr	r2, [r7, #20]
 800f282:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f286:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800f28a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800f28c:	2300      	movs	r3, #0
}
 800f28e:	4618      	mov	r0, r3
 800f290:	371c      	adds	r7, #28
 800f292:	46bd      	mov	sp, r7
 800f294:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f298:	4770      	bx	lr
 800f29a:	bf00      	nop
 800f29c:	4f54300a 	.word	0x4f54300a

0800f2a0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800f2a0:	b480      	push	{r7}
 800f2a2:	b085      	sub	sp, #20
 800f2a4:	af00      	add	r7, sp, #0
 800f2a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800f2a8:	2300      	movs	r3, #0
 800f2aa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800f2ac:	68fb      	ldr	r3, [r7, #12]
 800f2ae:	3301      	adds	r3, #1
 800f2b0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800f2b2:	68fb      	ldr	r3, [r7, #12]
 800f2b4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800f2b8:	d901      	bls.n	800f2be <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800f2ba:	2303      	movs	r3, #3
 800f2bc:	e01b      	b.n	800f2f6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	691b      	ldr	r3, [r3, #16]
 800f2c2:	2b00      	cmp	r3, #0
 800f2c4:	daf2      	bge.n	800f2ac <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800f2c6:	2300      	movs	r3, #0
 800f2c8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	691b      	ldr	r3, [r3, #16]
 800f2ce:	f043 0201 	orr.w	r2, r3, #1
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800f2d6:	68fb      	ldr	r3, [r7, #12]
 800f2d8:	3301      	adds	r3, #1
 800f2da:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800f2dc:	68fb      	ldr	r3, [r7, #12]
 800f2de:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800f2e2:	d901      	bls.n	800f2e8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800f2e4:	2303      	movs	r3, #3
 800f2e6:	e006      	b.n	800f2f6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800f2e8:	687b      	ldr	r3, [r7, #4]
 800f2ea:	691b      	ldr	r3, [r3, #16]
 800f2ec:	f003 0301 	and.w	r3, r3, #1
 800f2f0:	2b01      	cmp	r3, #1
 800f2f2:	d0f0      	beq.n	800f2d6 <USB_CoreReset+0x36>

  return HAL_OK;
 800f2f4:	2300      	movs	r3, #0
}
 800f2f6:	4618      	mov	r0, r3
 800f2f8:	3714      	adds	r7, #20
 800f2fa:	46bd      	mov	sp, r7
 800f2fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f300:	4770      	bx	lr
	...

0800f304 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f304:	b580      	push	{r7, lr}
 800f306:	b084      	sub	sp, #16
 800f308:	af00      	add	r7, sp, #0
 800f30a:	6078      	str	r0, [r7, #4]
 800f30c:	460b      	mov	r3, r1
 800f30e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800f310:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800f314:	f002 fcfe 	bl	8011d14 <USBD_static_malloc>
 800f318:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800f31a:	68fb      	ldr	r3, [r7, #12]
 800f31c:	2b00      	cmp	r3, #0
 800f31e:	d109      	bne.n	800f334 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	32b0      	adds	r2, #176	@ 0xb0
 800f32a:	2100      	movs	r1, #0
 800f32c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800f330:	2302      	movs	r3, #2
 800f332:	e0d4      	b.n	800f4de <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800f334:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800f338:	2100      	movs	r1, #0
 800f33a:	68f8      	ldr	r0, [r7, #12]
 800f33c:	f003 fa89 	bl	8012852 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800f340:	687b      	ldr	r3, [r7, #4]
 800f342:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f346:	687b      	ldr	r3, [r7, #4]
 800f348:	32b0      	adds	r2, #176	@ 0xb0
 800f34a:	68f9      	ldr	r1, [r7, #12]
 800f34c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	32b0      	adds	r2, #176	@ 0xb0
 800f35a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f364:	687b      	ldr	r3, [r7, #4]
 800f366:	7c1b      	ldrb	r3, [r3, #16]
 800f368:	2b00      	cmp	r3, #0
 800f36a:	d138      	bne.n	800f3de <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800f36c:	4b5e      	ldr	r3, [pc, #376]	@ (800f4e8 <USBD_CDC_Init+0x1e4>)
 800f36e:	7819      	ldrb	r1, [r3, #0]
 800f370:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800f374:	2202      	movs	r2, #2
 800f376:	6878      	ldr	r0, [r7, #4]
 800f378:	f002 fba9 	bl	8011ace <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800f37c:	4b5a      	ldr	r3, [pc, #360]	@ (800f4e8 <USBD_CDC_Init+0x1e4>)
 800f37e:	781b      	ldrb	r3, [r3, #0]
 800f380:	f003 020f 	and.w	r2, r3, #15
 800f384:	6879      	ldr	r1, [r7, #4]
 800f386:	4613      	mov	r3, r2
 800f388:	009b      	lsls	r3, r3, #2
 800f38a:	4413      	add	r3, r2
 800f38c:	009b      	lsls	r3, r3, #2
 800f38e:	440b      	add	r3, r1
 800f390:	3324      	adds	r3, #36	@ 0x24
 800f392:	2201      	movs	r2, #1
 800f394:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800f396:	4b55      	ldr	r3, [pc, #340]	@ (800f4ec <USBD_CDC_Init+0x1e8>)
 800f398:	7819      	ldrb	r1, [r3, #0]
 800f39a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800f39e:	2202      	movs	r2, #2
 800f3a0:	6878      	ldr	r0, [r7, #4]
 800f3a2:	f002 fb94 	bl	8011ace <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800f3a6:	4b51      	ldr	r3, [pc, #324]	@ (800f4ec <USBD_CDC_Init+0x1e8>)
 800f3a8:	781b      	ldrb	r3, [r3, #0]
 800f3aa:	f003 020f 	and.w	r2, r3, #15
 800f3ae:	6879      	ldr	r1, [r7, #4]
 800f3b0:	4613      	mov	r3, r2
 800f3b2:	009b      	lsls	r3, r3, #2
 800f3b4:	4413      	add	r3, r2
 800f3b6:	009b      	lsls	r3, r3, #2
 800f3b8:	440b      	add	r3, r1
 800f3ba:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800f3be:	2201      	movs	r2, #1
 800f3c0:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800f3c2:	4b4b      	ldr	r3, [pc, #300]	@ (800f4f0 <USBD_CDC_Init+0x1ec>)
 800f3c4:	781b      	ldrb	r3, [r3, #0]
 800f3c6:	f003 020f 	and.w	r2, r3, #15
 800f3ca:	6879      	ldr	r1, [r7, #4]
 800f3cc:	4613      	mov	r3, r2
 800f3ce:	009b      	lsls	r3, r3, #2
 800f3d0:	4413      	add	r3, r2
 800f3d2:	009b      	lsls	r3, r3, #2
 800f3d4:	440b      	add	r3, r1
 800f3d6:	3326      	adds	r3, #38	@ 0x26
 800f3d8:	2210      	movs	r2, #16
 800f3da:	801a      	strh	r2, [r3, #0]
 800f3dc:	e035      	b.n	800f44a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800f3de:	4b42      	ldr	r3, [pc, #264]	@ (800f4e8 <USBD_CDC_Init+0x1e4>)
 800f3e0:	7819      	ldrb	r1, [r3, #0]
 800f3e2:	2340      	movs	r3, #64	@ 0x40
 800f3e4:	2202      	movs	r2, #2
 800f3e6:	6878      	ldr	r0, [r7, #4]
 800f3e8:	f002 fb71 	bl	8011ace <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800f3ec:	4b3e      	ldr	r3, [pc, #248]	@ (800f4e8 <USBD_CDC_Init+0x1e4>)
 800f3ee:	781b      	ldrb	r3, [r3, #0]
 800f3f0:	f003 020f 	and.w	r2, r3, #15
 800f3f4:	6879      	ldr	r1, [r7, #4]
 800f3f6:	4613      	mov	r3, r2
 800f3f8:	009b      	lsls	r3, r3, #2
 800f3fa:	4413      	add	r3, r2
 800f3fc:	009b      	lsls	r3, r3, #2
 800f3fe:	440b      	add	r3, r1
 800f400:	3324      	adds	r3, #36	@ 0x24
 800f402:	2201      	movs	r2, #1
 800f404:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800f406:	4b39      	ldr	r3, [pc, #228]	@ (800f4ec <USBD_CDC_Init+0x1e8>)
 800f408:	7819      	ldrb	r1, [r3, #0]
 800f40a:	2340      	movs	r3, #64	@ 0x40
 800f40c:	2202      	movs	r2, #2
 800f40e:	6878      	ldr	r0, [r7, #4]
 800f410:	f002 fb5d 	bl	8011ace <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800f414:	4b35      	ldr	r3, [pc, #212]	@ (800f4ec <USBD_CDC_Init+0x1e8>)
 800f416:	781b      	ldrb	r3, [r3, #0]
 800f418:	f003 020f 	and.w	r2, r3, #15
 800f41c:	6879      	ldr	r1, [r7, #4]
 800f41e:	4613      	mov	r3, r2
 800f420:	009b      	lsls	r3, r3, #2
 800f422:	4413      	add	r3, r2
 800f424:	009b      	lsls	r3, r3, #2
 800f426:	440b      	add	r3, r1
 800f428:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800f42c:	2201      	movs	r2, #1
 800f42e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800f430:	4b2f      	ldr	r3, [pc, #188]	@ (800f4f0 <USBD_CDC_Init+0x1ec>)
 800f432:	781b      	ldrb	r3, [r3, #0]
 800f434:	f003 020f 	and.w	r2, r3, #15
 800f438:	6879      	ldr	r1, [r7, #4]
 800f43a:	4613      	mov	r3, r2
 800f43c:	009b      	lsls	r3, r3, #2
 800f43e:	4413      	add	r3, r2
 800f440:	009b      	lsls	r3, r3, #2
 800f442:	440b      	add	r3, r1
 800f444:	3326      	adds	r3, #38	@ 0x26
 800f446:	2210      	movs	r2, #16
 800f448:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800f44a:	4b29      	ldr	r3, [pc, #164]	@ (800f4f0 <USBD_CDC_Init+0x1ec>)
 800f44c:	7819      	ldrb	r1, [r3, #0]
 800f44e:	2308      	movs	r3, #8
 800f450:	2203      	movs	r2, #3
 800f452:	6878      	ldr	r0, [r7, #4]
 800f454:	f002 fb3b 	bl	8011ace <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800f458:	4b25      	ldr	r3, [pc, #148]	@ (800f4f0 <USBD_CDC_Init+0x1ec>)
 800f45a:	781b      	ldrb	r3, [r3, #0]
 800f45c:	f003 020f 	and.w	r2, r3, #15
 800f460:	6879      	ldr	r1, [r7, #4]
 800f462:	4613      	mov	r3, r2
 800f464:	009b      	lsls	r3, r3, #2
 800f466:	4413      	add	r3, r2
 800f468:	009b      	lsls	r3, r3, #2
 800f46a:	440b      	add	r3, r1
 800f46c:	3324      	adds	r3, #36	@ 0x24
 800f46e:	2201      	movs	r2, #1
 800f470:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800f472:	68fb      	ldr	r3, [r7, #12]
 800f474:	2200      	movs	r2, #0
 800f476:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800f47a:	687b      	ldr	r3, [r7, #4]
 800f47c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800f480:	687a      	ldr	r2, [r7, #4]
 800f482:	33b0      	adds	r3, #176	@ 0xb0
 800f484:	009b      	lsls	r3, r3, #2
 800f486:	4413      	add	r3, r2
 800f488:	685b      	ldr	r3, [r3, #4]
 800f48a:	681b      	ldr	r3, [r3, #0]
 800f48c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800f48e:	68fb      	ldr	r3, [r7, #12]
 800f490:	2200      	movs	r2, #0
 800f492:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800f496:	68fb      	ldr	r3, [r7, #12]
 800f498:	2200      	movs	r2, #0
 800f49a:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800f49e:	68fb      	ldr	r3, [r7, #12]
 800f4a0:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800f4a4:	2b00      	cmp	r3, #0
 800f4a6:	d101      	bne.n	800f4ac <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800f4a8:	2302      	movs	r3, #2
 800f4aa:	e018      	b.n	800f4de <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f4ac:	687b      	ldr	r3, [r7, #4]
 800f4ae:	7c1b      	ldrb	r3, [r3, #16]
 800f4b0:	2b00      	cmp	r3, #0
 800f4b2:	d10a      	bne.n	800f4ca <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800f4b4:	4b0d      	ldr	r3, [pc, #52]	@ (800f4ec <USBD_CDC_Init+0x1e8>)
 800f4b6:	7819      	ldrb	r1, [r3, #0]
 800f4b8:	68fb      	ldr	r3, [r7, #12]
 800f4ba:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800f4be:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800f4c2:	6878      	ldr	r0, [r7, #4]
 800f4c4:	f002 fbf2 	bl	8011cac <USBD_LL_PrepareReceive>
 800f4c8:	e008      	b.n	800f4dc <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800f4ca:	4b08      	ldr	r3, [pc, #32]	@ (800f4ec <USBD_CDC_Init+0x1e8>)
 800f4cc:	7819      	ldrb	r1, [r3, #0]
 800f4ce:	68fb      	ldr	r3, [r7, #12]
 800f4d0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800f4d4:	2340      	movs	r3, #64	@ 0x40
 800f4d6:	6878      	ldr	r0, [r7, #4]
 800f4d8:	f002 fbe8 	bl	8011cac <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800f4dc:	2300      	movs	r3, #0
}
 800f4de:	4618      	mov	r0, r3
 800f4e0:	3710      	adds	r7, #16
 800f4e2:	46bd      	mov	sp, r7
 800f4e4:	bd80      	pop	{r7, pc}
 800f4e6:	bf00      	nop
 800f4e8:	240000bf 	.word	0x240000bf
 800f4ec:	240000c0 	.word	0x240000c0
 800f4f0:	240000c1 	.word	0x240000c1

0800f4f4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f4f4:	b580      	push	{r7, lr}
 800f4f6:	b082      	sub	sp, #8
 800f4f8:	af00      	add	r7, sp, #0
 800f4fa:	6078      	str	r0, [r7, #4]
 800f4fc:	460b      	mov	r3, r1
 800f4fe:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800f500:	4b3a      	ldr	r3, [pc, #232]	@ (800f5ec <USBD_CDC_DeInit+0xf8>)
 800f502:	781b      	ldrb	r3, [r3, #0]
 800f504:	4619      	mov	r1, r3
 800f506:	6878      	ldr	r0, [r7, #4]
 800f508:	f002 fb07 	bl	8011b1a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800f50c:	4b37      	ldr	r3, [pc, #220]	@ (800f5ec <USBD_CDC_DeInit+0xf8>)
 800f50e:	781b      	ldrb	r3, [r3, #0]
 800f510:	f003 020f 	and.w	r2, r3, #15
 800f514:	6879      	ldr	r1, [r7, #4]
 800f516:	4613      	mov	r3, r2
 800f518:	009b      	lsls	r3, r3, #2
 800f51a:	4413      	add	r3, r2
 800f51c:	009b      	lsls	r3, r3, #2
 800f51e:	440b      	add	r3, r1
 800f520:	3324      	adds	r3, #36	@ 0x24
 800f522:	2200      	movs	r2, #0
 800f524:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800f526:	4b32      	ldr	r3, [pc, #200]	@ (800f5f0 <USBD_CDC_DeInit+0xfc>)
 800f528:	781b      	ldrb	r3, [r3, #0]
 800f52a:	4619      	mov	r1, r3
 800f52c:	6878      	ldr	r0, [r7, #4]
 800f52e:	f002 faf4 	bl	8011b1a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800f532:	4b2f      	ldr	r3, [pc, #188]	@ (800f5f0 <USBD_CDC_DeInit+0xfc>)
 800f534:	781b      	ldrb	r3, [r3, #0]
 800f536:	f003 020f 	and.w	r2, r3, #15
 800f53a:	6879      	ldr	r1, [r7, #4]
 800f53c:	4613      	mov	r3, r2
 800f53e:	009b      	lsls	r3, r3, #2
 800f540:	4413      	add	r3, r2
 800f542:	009b      	lsls	r3, r3, #2
 800f544:	440b      	add	r3, r1
 800f546:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800f54a:	2200      	movs	r2, #0
 800f54c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800f54e:	4b29      	ldr	r3, [pc, #164]	@ (800f5f4 <USBD_CDC_DeInit+0x100>)
 800f550:	781b      	ldrb	r3, [r3, #0]
 800f552:	4619      	mov	r1, r3
 800f554:	6878      	ldr	r0, [r7, #4]
 800f556:	f002 fae0 	bl	8011b1a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800f55a:	4b26      	ldr	r3, [pc, #152]	@ (800f5f4 <USBD_CDC_DeInit+0x100>)
 800f55c:	781b      	ldrb	r3, [r3, #0]
 800f55e:	f003 020f 	and.w	r2, r3, #15
 800f562:	6879      	ldr	r1, [r7, #4]
 800f564:	4613      	mov	r3, r2
 800f566:	009b      	lsls	r3, r3, #2
 800f568:	4413      	add	r3, r2
 800f56a:	009b      	lsls	r3, r3, #2
 800f56c:	440b      	add	r3, r1
 800f56e:	3324      	adds	r3, #36	@ 0x24
 800f570:	2200      	movs	r2, #0
 800f572:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800f574:	4b1f      	ldr	r3, [pc, #124]	@ (800f5f4 <USBD_CDC_DeInit+0x100>)
 800f576:	781b      	ldrb	r3, [r3, #0]
 800f578:	f003 020f 	and.w	r2, r3, #15
 800f57c:	6879      	ldr	r1, [r7, #4]
 800f57e:	4613      	mov	r3, r2
 800f580:	009b      	lsls	r3, r3, #2
 800f582:	4413      	add	r3, r2
 800f584:	009b      	lsls	r3, r3, #2
 800f586:	440b      	add	r3, r1
 800f588:	3326      	adds	r3, #38	@ 0x26
 800f58a:	2200      	movs	r2, #0
 800f58c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800f58e:	687b      	ldr	r3, [r7, #4]
 800f590:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f594:	687b      	ldr	r3, [r7, #4]
 800f596:	32b0      	adds	r2, #176	@ 0xb0
 800f598:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f59c:	2b00      	cmp	r3, #0
 800f59e:	d01f      	beq.n	800f5e0 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800f5a6:	687a      	ldr	r2, [r7, #4]
 800f5a8:	33b0      	adds	r3, #176	@ 0xb0
 800f5aa:	009b      	lsls	r3, r3, #2
 800f5ac:	4413      	add	r3, r2
 800f5ae:	685b      	ldr	r3, [r3, #4]
 800f5b0:	685b      	ldr	r3, [r3, #4]
 800f5b2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	32b0      	adds	r2, #176	@ 0xb0
 800f5be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f5c2:	4618      	mov	r0, r3
 800f5c4:	f002 fbb4 	bl	8011d30 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f5ce:	687b      	ldr	r3, [r7, #4]
 800f5d0:	32b0      	adds	r2, #176	@ 0xb0
 800f5d2:	2100      	movs	r1, #0
 800f5d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	2200      	movs	r2, #0
 800f5dc:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800f5e0:	2300      	movs	r3, #0
}
 800f5e2:	4618      	mov	r0, r3
 800f5e4:	3708      	adds	r7, #8
 800f5e6:	46bd      	mov	sp, r7
 800f5e8:	bd80      	pop	{r7, pc}
 800f5ea:	bf00      	nop
 800f5ec:	240000bf 	.word	0x240000bf
 800f5f0:	240000c0 	.word	0x240000c0
 800f5f4:	240000c1 	.word	0x240000c1

0800f5f8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800f5f8:	b580      	push	{r7, lr}
 800f5fa:	b086      	sub	sp, #24
 800f5fc:	af00      	add	r7, sp, #0
 800f5fe:	6078      	str	r0, [r7, #4]
 800f600:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	32b0      	adds	r2, #176	@ 0xb0
 800f60c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f610:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800f612:	2300      	movs	r3, #0
 800f614:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800f616:	2300      	movs	r3, #0
 800f618:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800f61a:	2300      	movs	r3, #0
 800f61c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800f61e:	693b      	ldr	r3, [r7, #16]
 800f620:	2b00      	cmp	r3, #0
 800f622:	d101      	bne.n	800f628 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800f624:	2303      	movs	r3, #3
 800f626:	e0bf      	b.n	800f7a8 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f628:	683b      	ldr	r3, [r7, #0]
 800f62a:	781b      	ldrb	r3, [r3, #0]
 800f62c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800f630:	2b00      	cmp	r3, #0
 800f632:	d050      	beq.n	800f6d6 <USBD_CDC_Setup+0xde>
 800f634:	2b20      	cmp	r3, #32
 800f636:	f040 80af 	bne.w	800f798 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800f63a:	683b      	ldr	r3, [r7, #0]
 800f63c:	88db      	ldrh	r3, [r3, #6]
 800f63e:	2b00      	cmp	r3, #0
 800f640:	d03a      	beq.n	800f6b8 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800f642:	683b      	ldr	r3, [r7, #0]
 800f644:	781b      	ldrb	r3, [r3, #0]
 800f646:	b25b      	sxtb	r3, r3
 800f648:	2b00      	cmp	r3, #0
 800f64a:	da1b      	bge.n	800f684 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800f652:	687a      	ldr	r2, [r7, #4]
 800f654:	33b0      	adds	r3, #176	@ 0xb0
 800f656:	009b      	lsls	r3, r3, #2
 800f658:	4413      	add	r3, r2
 800f65a:	685b      	ldr	r3, [r3, #4]
 800f65c:	689b      	ldr	r3, [r3, #8]
 800f65e:	683a      	ldr	r2, [r7, #0]
 800f660:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800f662:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800f664:	683a      	ldr	r2, [r7, #0]
 800f666:	88d2      	ldrh	r2, [r2, #6]
 800f668:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800f66a:	683b      	ldr	r3, [r7, #0]
 800f66c:	88db      	ldrh	r3, [r3, #6]
 800f66e:	2b07      	cmp	r3, #7
 800f670:	bf28      	it	cs
 800f672:	2307      	movcs	r3, #7
 800f674:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800f676:	693b      	ldr	r3, [r7, #16]
 800f678:	89fa      	ldrh	r2, [r7, #14]
 800f67a:	4619      	mov	r1, r3
 800f67c:	6878      	ldr	r0, [r7, #4]
 800f67e:	f001 fdbd 	bl	80111fc <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800f682:	e090      	b.n	800f7a6 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800f684:	683b      	ldr	r3, [r7, #0]
 800f686:	785a      	ldrb	r2, [r3, #1]
 800f688:	693b      	ldr	r3, [r7, #16]
 800f68a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800f68e:	683b      	ldr	r3, [r7, #0]
 800f690:	88db      	ldrh	r3, [r3, #6]
 800f692:	2b3f      	cmp	r3, #63	@ 0x3f
 800f694:	d803      	bhi.n	800f69e <USBD_CDC_Setup+0xa6>
 800f696:	683b      	ldr	r3, [r7, #0]
 800f698:	88db      	ldrh	r3, [r3, #6]
 800f69a:	b2da      	uxtb	r2, r3
 800f69c:	e000      	b.n	800f6a0 <USBD_CDC_Setup+0xa8>
 800f69e:	2240      	movs	r2, #64	@ 0x40
 800f6a0:	693b      	ldr	r3, [r7, #16]
 800f6a2:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800f6a6:	6939      	ldr	r1, [r7, #16]
 800f6a8:	693b      	ldr	r3, [r7, #16]
 800f6aa:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800f6ae:	461a      	mov	r2, r3
 800f6b0:	6878      	ldr	r0, [r7, #4]
 800f6b2:	f001 fdcf 	bl	8011254 <USBD_CtlPrepareRx>
      break;
 800f6b6:	e076      	b.n	800f7a6 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800f6be:	687a      	ldr	r2, [r7, #4]
 800f6c0:	33b0      	adds	r3, #176	@ 0xb0
 800f6c2:	009b      	lsls	r3, r3, #2
 800f6c4:	4413      	add	r3, r2
 800f6c6:	685b      	ldr	r3, [r3, #4]
 800f6c8:	689b      	ldr	r3, [r3, #8]
 800f6ca:	683a      	ldr	r2, [r7, #0]
 800f6cc:	7850      	ldrb	r0, [r2, #1]
 800f6ce:	2200      	movs	r2, #0
 800f6d0:	6839      	ldr	r1, [r7, #0]
 800f6d2:	4798      	blx	r3
      break;
 800f6d4:	e067      	b.n	800f7a6 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f6d6:	683b      	ldr	r3, [r7, #0]
 800f6d8:	785b      	ldrb	r3, [r3, #1]
 800f6da:	2b0b      	cmp	r3, #11
 800f6dc:	d851      	bhi.n	800f782 <USBD_CDC_Setup+0x18a>
 800f6de:	a201      	add	r2, pc, #4	@ (adr r2, 800f6e4 <USBD_CDC_Setup+0xec>)
 800f6e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f6e4:	0800f715 	.word	0x0800f715
 800f6e8:	0800f791 	.word	0x0800f791
 800f6ec:	0800f783 	.word	0x0800f783
 800f6f0:	0800f783 	.word	0x0800f783
 800f6f4:	0800f783 	.word	0x0800f783
 800f6f8:	0800f783 	.word	0x0800f783
 800f6fc:	0800f783 	.word	0x0800f783
 800f700:	0800f783 	.word	0x0800f783
 800f704:	0800f783 	.word	0x0800f783
 800f708:	0800f783 	.word	0x0800f783
 800f70c:	0800f73f 	.word	0x0800f73f
 800f710:	0800f769 	.word	0x0800f769
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f71a:	b2db      	uxtb	r3, r3
 800f71c:	2b03      	cmp	r3, #3
 800f71e:	d107      	bne.n	800f730 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800f720:	f107 030a 	add.w	r3, r7, #10
 800f724:	2202      	movs	r2, #2
 800f726:	4619      	mov	r1, r3
 800f728:	6878      	ldr	r0, [r7, #4]
 800f72a:	f001 fd67 	bl	80111fc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800f72e:	e032      	b.n	800f796 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800f730:	6839      	ldr	r1, [r7, #0]
 800f732:	6878      	ldr	r0, [r7, #4]
 800f734:	f001 fce5 	bl	8011102 <USBD_CtlError>
            ret = USBD_FAIL;
 800f738:	2303      	movs	r3, #3
 800f73a:	75fb      	strb	r3, [r7, #23]
          break;
 800f73c:	e02b      	b.n	800f796 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f73e:	687b      	ldr	r3, [r7, #4]
 800f740:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f744:	b2db      	uxtb	r3, r3
 800f746:	2b03      	cmp	r3, #3
 800f748:	d107      	bne.n	800f75a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800f74a:	f107 030d 	add.w	r3, r7, #13
 800f74e:	2201      	movs	r2, #1
 800f750:	4619      	mov	r1, r3
 800f752:	6878      	ldr	r0, [r7, #4]
 800f754:	f001 fd52 	bl	80111fc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800f758:	e01d      	b.n	800f796 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800f75a:	6839      	ldr	r1, [r7, #0]
 800f75c:	6878      	ldr	r0, [r7, #4]
 800f75e:	f001 fcd0 	bl	8011102 <USBD_CtlError>
            ret = USBD_FAIL;
 800f762:	2303      	movs	r3, #3
 800f764:	75fb      	strb	r3, [r7, #23]
          break;
 800f766:	e016      	b.n	800f796 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f76e:	b2db      	uxtb	r3, r3
 800f770:	2b03      	cmp	r3, #3
 800f772:	d00f      	beq.n	800f794 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800f774:	6839      	ldr	r1, [r7, #0]
 800f776:	6878      	ldr	r0, [r7, #4]
 800f778:	f001 fcc3 	bl	8011102 <USBD_CtlError>
            ret = USBD_FAIL;
 800f77c:	2303      	movs	r3, #3
 800f77e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800f780:	e008      	b.n	800f794 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800f782:	6839      	ldr	r1, [r7, #0]
 800f784:	6878      	ldr	r0, [r7, #4]
 800f786:	f001 fcbc 	bl	8011102 <USBD_CtlError>
          ret = USBD_FAIL;
 800f78a:	2303      	movs	r3, #3
 800f78c:	75fb      	strb	r3, [r7, #23]
          break;
 800f78e:	e002      	b.n	800f796 <USBD_CDC_Setup+0x19e>
          break;
 800f790:	bf00      	nop
 800f792:	e008      	b.n	800f7a6 <USBD_CDC_Setup+0x1ae>
          break;
 800f794:	bf00      	nop
      }
      break;
 800f796:	e006      	b.n	800f7a6 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800f798:	6839      	ldr	r1, [r7, #0]
 800f79a:	6878      	ldr	r0, [r7, #4]
 800f79c:	f001 fcb1 	bl	8011102 <USBD_CtlError>
      ret = USBD_FAIL;
 800f7a0:	2303      	movs	r3, #3
 800f7a2:	75fb      	strb	r3, [r7, #23]
      break;
 800f7a4:	bf00      	nop
  }

  return (uint8_t)ret;
 800f7a6:	7dfb      	ldrb	r3, [r7, #23]
}
 800f7a8:	4618      	mov	r0, r3
 800f7aa:	3718      	adds	r7, #24
 800f7ac:	46bd      	mov	sp, r7
 800f7ae:	bd80      	pop	{r7, pc}

0800f7b0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800f7b0:	b580      	push	{r7, lr}
 800f7b2:	b084      	sub	sp, #16
 800f7b4:	af00      	add	r7, sp, #0
 800f7b6:	6078      	str	r0, [r7, #4]
 800f7b8:	460b      	mov	r3, r1
 800f7ba:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f7c2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f7ca:	687b      	ldr	r3, [r7, #4]
 800f7cc:	32b0      	adds	r2, #176	@ 0xb0
 800f7ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f7d2:	2b00      	cmp	r3, #0
 800f7d4:	d101      	bne.n	800f7da <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800f7d6:	2303      	movs	r3, #3
 800f7d8:	e065      	b.n	800f8a6 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f7e0:	687b      	ldr	r3, [r7, #4]
 800f7e2:	32b0      	adds	r2, #176	@ 0xb0
 800f7e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f7e8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800f7ea:	78fb      	ldrb	r3, [r7, #3]
 800f7ec:	f003 020f 	and.w	r2, r3, #15
 800f7f0:	6879      	ldr	r1, [r7, #4]
 800f7f2:	4613      	mov	r3, r2
 800f7f4:	009b      	lsls	r3, r3, #2
 800f7f6:	4413      	add	r3, r2
 800f7f8:	009b      	lsls	r3, r3, #2
 800f7fa:	440b      	add	r3, r1
 800f7fc:	3318      	adds	r3, #24
 800f7fe:	681b      	ldr	r3, [r3, #0]
 800f800:	2b00      	cmp	r3, #0
 800f802:	d02f      	beq.n	800f864 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800f804:	78fb      	ldrb	r3, [r7, #3]
 800f806:	f003 020f 	and.w	r2, r3, #15
 800f80a:	6879      	ldr	r1, [r7, #4]
 800f80c:	4613      	mov	r3, r2
 800f80e:	009b      	lsls	r3, r3, #2
 800f810:	4413      	add	r3, r2
 800f812:	009b      	lsls	r3, r3, #2
 800f814:	440b      	add	r3, r1
 800f816:	3318      	adds	r3, #24
 800f818:	681a      	ldr	r2, [r3, #0]
 800f81a:	78fb      	ldrb	r3, [r7, #3]
 800f81c:	f003 010f 	and.w	r1, r3, #15
 800f820:	68f8      	ldr	r0, [r7, #12]
 800f822:	460b      	mov	r3, r1
 800f824:	00db      	lsls	r3, r3, #3
 800f826:	440b      	add	r3, r1
 800f828:	009b      	lsls	r3, r3, #2
 800f82a:	4403      	add	r3, r0
 800f82c:	331c      	adds	r3, #28
 800f82e:	681b      	ldr	r3, [r3, #0]
 800f830:	fbb2 f1f3 	udiv	r1, r2, r3
 800f834:	fb01 f303 	mul.w	r3, r1, r3
 800f838:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800f83a:	2b00      	cmp	r3, #0
 800f83c:	d112      	bne.n	800f864 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800f83e:	78fb      	ldrb	r3, [r7, #3]
 800f840:	f003 020f 	and.w	r2, r3, #15
 800f844:	6879      	ldr	r1, [r7, #4]
 800f846:	4613      	mov	r3, r2
 800f848:	009b      	lsls	r3, r3, #2
 800f84a:	4413      	add	r3, r2
 800f84c:	009b      	lsls	r3, r3, #2
 800f84e:	440b      	add	r3, r1
 800f850:	3318      	adds	r3, #24
 800f852:	2200      	movs	r2, #0
 800f854:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800f856:	78f9      	ldrb	r1, [r7, #3]
 800f858:	2300      	movs	r3, #0
 800f85a:	2200      	movs	r2, #0
 800f85c:	6878      	ldr	r0, [r7, #4]
 800f85e:	f002 fa04 	bl	8011c6a <USBD_LL_Transmit>
 800f862:	e01f      	b.n	800f8a4 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800f864:	68bb      	ldr	r3, [r7, #8]
 800f866:	2200      	movs	r2, #0
 800f868:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800f872:	687a      	ldr	r2, [r7, #4]
 800f874:	33b0      	adds	r3, #176	@ 0xb0
 800f876:	009b      	lsls	r3, r3, #2
 800f878:	4413      	add	r3, r2
 800f87a:	685b      	ldr	r3, [r3, #4]
 800f87c:	691b      	ldr	r3, [r3, #16]
 800f87e:	2b00      	cmp	r3, #0
 800f880:	d010      	beq.n	800f8a4 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800f888:	687a      	ldr	r2, [r7, #4]
 800f88a:	33b0      	adds	r3, #176	@ 0xb0
 800f88c:	009b      	lsls	r3, r3, #2
 800f88e:	4413      	add	r3, r2
 800f890:	685b      	ldr	r3, [r3, #4]
 800f892:	691b      	ldr	r3, [r3, #16]
 800f894:	68ba      	ldr	r2, [r7, #8]
 800f896:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800f89a:	68ba      	ldr	r2, [r7, #8]
 800f89c:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800f8a0:	78fa      	ldrb	r2, [r7, #3]
 800f8a2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800f8a4:	2300      	movs	r3, #0
}
 800f8a6:	4618      	mov	r0, r3
 800f8a8:	3710      	adds	r7, #16
 800f8aa:	46bd      	mov	sp, r7
 800f8ac:	bd80      	pop	{r7, pc}

0800f8ae <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800f8ae:	b580      	push	{r7, lr}
 800f8b0:	b084      	sub	sp, #16
 800f8b2:	af00      	add	r7, sp, #0
 800f8b4:	6078      	str	r0, [r7, #4]
 800f8b6:	460b      	mov	r3, r1
 800f8b8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f8ba:	687b      	ldr	r3, [r7, #4]
 800f8bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f8c0:	687b      	ldr	r3, [r7, #4]
 800f8c2:	32b0      	adds	r2, #176	@ 0xb0
 800f8c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f8c8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800f8ca:	687b      	ldr	r3, [r7, #4]
 800f8cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	32b0      	adds	r2, #176	@ 0xb0
 800f8d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f8d8:	2b00      	cmp	r3, #0
 800f8da:	d101      	bne.n	800f8e0 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800f8dc:	2303      	movs	r3, #3
 800f8de:	e01a      	b.n	800f916 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800f8e0:	78fb      	ldrb	r3, [r7, #3]
 800f8e2:	4619      	mov	r1, r3
 800f8e4:	6878      	ldr	r0, [r7, #4]
 800f8e6:	f002 fa02 	bl	8011cee <USBD_LL_GetRxDataSize>
 800f8ea:	4602      	mov	r2, r0
 800f8ec:	68fb      	ldr	r3, [r7, #12]
 800f8ee:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800f8f8:	687a      	ldr	r2, [r7, #4]
 800f8fa:	33b0      	adds	r3, #176	@ 0xb0
 800f8fc:	009b      	lsls	r3, r3, #2
 800f8fe:	4413      	add	r3, r2
 800f900:	685b      	ldr	r3, [r3, #4]
 800f902:	68db      	ldr	r3, [r3, #12]
 800f904:	68fa      	ldr	r2, [r7, #12]
 800f906:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800f90a:	68fa      	ldr	r2, [r7, #12]
 800f90c:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800f910:	4611      	mov	r1, r2
 800f912:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800f914:	2300      	movs	r3, #0
}
 800f916:	4618      	mov	r0, r3
 800f918:	3710      	adds	r7, #16
 800f91a:	46bd      	mov	sp, r7
 800f91c:	bd80      	pop	{r7, pc}

0800f91e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800f91e:	b580      	push	{r7, lr}
 800f920:	b084      	sub	sp, #16
 800f922:	af00      	add	r7, sp, #0
 800f924:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f926:	687b      	ldr	r3, [r7, #4]
 800f928:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	32b0      	adds	r2, #176	@ 0xb0
 800f930:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f934:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800f936:	68fb      	ldr	r3, [r7, #12]
 800f938:	2b00      	cmp	r3, #0
 800f93a:	d101      	bne.n	800f940 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800f93c:	2303      	movs	r3, #3
 800f93e:	e024      	b.n	800f98a <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800f940:	687b      	ldr	r3, [r7, #4]
 800f942:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800f946:	687a      	ldr	r2, [r7, #4]
 800f948:	33b0      	adds	r3, #176	@ 0xb0
 800f94a:	009b      	lsls	r3, r3, #2
 800f94c:	4413      	add	r3, r2
 800f94e:	685b      	ldr	r3, [r3, #4]
 800f950:	2b00      	cmp	r3, #0
 800f952:	d019      	beq.n	800f988 <USBD_CDC_EP0_RxReady+0x6a>
 800f954:	68fb      	ldr	r3, [r7, #12]
 800f956:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800f95a:	2bff      	cmp	r3, #255	@ 0xff
 800f95c:	d014      	beq.n	800f988 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800f95e:	687b      	ldr	r3, [r7, #4]
 800f960:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800f964:	687a      	ldr	r2, [r7, #4]
 800f966:	33b0      	adds	r3, #176	@ 0xb0
 800f968:	009b      	lsls	r3, r3, #2
 800f96a:	4413      	add	r3, r2
 800f96c:	685b      	ldr	r3, [r3, #4]
 800f96e:	689b      	ldr	r3, [r3, #8]
 800f970:	68fa      	ldr	r2, [r7, #12]
 800f972:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800f976:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800f978:	68fa      	ldr	r2, [r7, #12]
 800f97a:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800f97e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800f980:	68fb      	ldr	r3, [r7, #12]
 800f982:	22ff      	movs	r2, #255	@ 0xff
 800f984:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800f988:	2300      	movs	r3, #0
}
 800f98a:	4618      	mov	r0, r3
 800f98c:	3710      	adds	r7, #16
 800f98e:	46bd      	mov	sp, r7
 800f990:	bd80      	pop	{r7, pc}
	...

0800f994 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800f994:	b580      	push	{r7, lr}
 800f996:	b086      	sub	sp, #24
 800f998:	af00      	add	r7, sp, #0
 800f99a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800f99c:	2182      	movs	r1, #130	@ 0x82
 800f99e:	4818      	ldr	r0, [pc, #96]	@ (800fa00 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800f9a0:	f000 fd4f 	bl	8010442 <USBD_GetEpDesc>
 800f9a4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800f9a6:	2101      	movs	r1, #1
 800f9a8:	4815      	ldr	r0, [pc, #84]	@ (800fa00 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800f9aa:	f000 fd4a 	bl	8010442 <USBD_GetEpDesc>
 800f9ae:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800f9b0:	2181      	movs	r1, #129	@ 0x81
 800f9b2:	4813      	ldr	r0, [pc, #76]	@ (800fa00 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800f9b4:	f000 fd45 	bl	8010442 <USBD_GetEpDesc>
 800f9b8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800f9ba:	697b      	ldr	r3, [r7, #20]
 800f9bc:	2b00      	cmp	r3, #0
 800f9be:	d002      	beq.n	800f9c6 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800f9c0:	697b      	ldr	r3, [r7, #20]
 800f9c2:	2210      	movs	r2, #16
 800f9c4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800f9c6:	693b      	ldr	r3, [r7, #16]
 800f9c8:	2b00      	cmp	r3, #0
 800f9ca:	d006      	beq.n	800f9da <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800f9cc:	693b      	ldr	r3, [r7, #16]
 800f9ce:	2200      	movs	r2, #0
 800f9d0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800f9d4:	711a      	strb	r2, [r3, #4]
 800f9d6:	2200      	movs	r2, #0
 800f9d8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800f9da:	68fb      	ldr	r3, [r7, #12]
 800f9dc:	2b00      	cmp	r3, #0
 800f9de:	d006      	beq.n	800f9ee <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800f9e0:	68fb      	ldr	r3, [r7, #12]
 800f9e2:	2200      	movs	r2, #0
 800f9e4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800f9e8:	711a      	strb	r2, [r3, #4]
 800f9ea:	2200      	movs	r2, #0
 800f9ec:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800f9ee:	687b      	ldr	r3, [r7, #4]
 800f9f0:	2243      	movs	r2, #67	@ 0x43
 800f9f2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800f9f4:	4b02      	ldr	r3, [pc, #8]	@ (800fa00 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800f9f6:	4618      	mov	r0, r3
 800f9f8:	3718      	adds	r7, #24
 800f9fa:	46bd      	mov	sp, r7
 800f9fc:	bd80      	pop	{r7, pc}
 800f9fe:	bf00      	nop
 800fa00:	2400007c 	.word	0x2400007c

0800fa04 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800fa04:	b580      	push	{r7, lr}
 800fa06:	b086      	sub	sp, #24
 800fa08:	af00      	add	r7, sp, #0
 800fa0a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800fa0c:	2182      	movs	r1, #130	@ 0x82
 800fa0e:	4818      	ldr	r0, [pc, #96]	@ (800fa70 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800fa10:	f000 fd17 	bl	8010442 <USBD_GetEpDesc>
 800fa14:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800fa16:	2101      	movs	r1, #1
 800fa18:	4815      	ldr	r0, [pc, #84]	@ (800fa70 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800fa1a:	f000 fd12 	bl	8010442 <USBD_GetEpDesc>
 800fa1e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800fa20:	2181      	movs	r1, #129	@ 0x81
 800fa22:	4813      	ldr	r0, [pc, #76]	@ (800fa70 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800fa24:	f000 fd0d 	bl	8010442 <USBD_GetEpDesc>
 800fa28:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800fa2a:	697b      	ldr	r3, [r7, #20]
 800fa2c:	2b00      	cmp	r3, #0
 800fa2e:	d002      	beq.n	800fa36 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800fa30:	697b      	ldr	r3, [r7, #20]
 800fa32:	2210      	movs	r2, #16
 800fa34:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800fa36:	693b      	ldr	r3, [r7, #16]
 800fa38:	2b00      	cmp	r3, #0
 800fa3a:	d006      	beq.n	800fa4a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800fa3c:	693b      	ldr	r3, [r7, #16]
 800fa3e:	2200      	movs	r2, #0
 800fa40:	711a      	strb	r2, [r3, #4]
 800fa42:	2200      	movs	r2, #0
 800fa44:	f042 0202 	orr.w	r2, r2, #2
 800fa48:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800fa4a:	68fb      	ldr	r3, [r7, #12]
 800fa4c:	2b00      	cmp	r3, #0
 800fa4e:	d006      	beq.n	800fa5e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800fa50:	68fb      	ldr	r3, [r7, #12]
 800fa52:	2200      	movs	r2, #0
 800fa54:	711a      	strb	r2, [r3, #4]
 800fa56:	2200      	movs	r2, #0
 800fa58:	f042 0202 	orr.w	r2, r2, #2
 800fa5c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800fa5e:	687b      	ldr	r3, [r7, #4]
 800fa60:	2243      	movs	r2, #67	@ 0x43
 800fa62:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800fa64:	4b02      	ldr	r3, [pc, #8]	@ (800fa70 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800fa66:	4618      	mov	r0, r3
 800fa68:	3718      	adds	r7, #24
 800fa6a:	46bd      	mov	sp, r7
 800fa6c:	bd80      	pop	{r7, pc}
 800fa6e:	bf00      	nop
 800fa70:	2400007c 	.word	0x2400007c

0800fa74 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800fa74:	b580      	push	{r7, lr}
 800fa76:	b086      	sub	sp, #24
 800fa78:	af00      	add	r7, sp, #0
 800fa7a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800fa7c:	2182      	movs	r1, #130	@ 0x82
 800fa7e:	4818      	ldr	r0, [pc, #96]	@ (800fae0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800fa80:	f000 fcdf 	bl	8010442 <USBD_GetEpDesc>
 800fa84:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800fa86:	2101      	movs	r1, #1
 800fa88:	4815      	ldr	r0, [pc, #84]	@ (800fae0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800fa8a:	f000 fcda 	bl	8010442 <USBD_GetEpDesc>
 800fa8e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800fa90:	2181      	movs	r1, #129	@ 0x81
 800fa92:	4813      	ldr	r0, [pc, #76]	@ (800fae0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800fa94:	f000 fcd5 	bl	8010442 <USBD_GetEpDesc>
 800fa98:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800fa9a:	697b      	ldr	r3, [r7, #20]
 800fa9c:	2b00      	cmp	r3, #0
 800fa9e:	d002      	beq.n	800faa6 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800faa0:	697b      	ldr	r3, [r7, #20]
 800faa2:	2210      	movs	r2, #16
 800faa4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800faa6:	693b      	ldr	r3, [r7, #16]
 800faa8:	2b00      	cmp	r3, #0
 800faaa:	d006      	beq.n	800faba <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800faac:	693b      	ldr	r3, [r7, #16]
 800faae:	2200      	movs	r2, #0
 800fab0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800fab4:	711a      	strb	r2, [r3, #4]
 800fab6:	2200      	movs	r2, #0
 800fab8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800faba:	68fb      	ldr	r3, [r7, #12]
 800fabc:	2b00      	cmp	r3, #0
 800fabe:	d006      	beq.n	800face <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800fac0:	68fb      	ldr	r3, [r7, #12]
 800fac2:	2200      	movs	r2, #0
 800fac4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800fac8:	711a      	strb	r2, [r3, #4]
 800faca:	2200      	movs	r2, #0
 800facc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800face:	687b      	ldr	r3, [r7, #4]
 800fad0:	2243      	movs	r2, #67	@ 0x43
 800fad2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800fad4:	4b02      	ldr	r3, [pc, #8]	@ (800fae0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800fad6:	4618      	mov	r0, r3
 800fad8:	3718      	adds	r7, #24
 800fada:	46bd      	mov	sp, r7
 800fadc:	bd80      	pop	{r7, pc}
 800fade:	bf00      	nop
 800fae0:	2400007c 	.word	0x2400007c

0800fae4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800fae4:	b480      	push	{r7}
 800fae6:	b083      	sub	sp, #12
 800fae8:	af00      	add	r7, sp, #0
 800faea:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800faec:	687b      	ldr	r3, [r7, #4]
 800faee:	220a      	movs	r2, #10
 800faf0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800faf2:	4b03      	ldr	r3, [pc, #12]	@ (800fb00 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800faf4:	4618      	mov	r0, r3
 800faf6:	370c      	adds	r7, #12
 800faf8:	46bd      	mov	sp, r7
 800fafa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fafe:	4770      	bx	lr
 800fb00:	24000038 	.word	0x24000038

0800fb04 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800fb04:	b480      	push	{r7}
 800fb06:	b083      	sub	sp, #12
 800fb08:	af00      	add	r7, sp, #0
 800fb0a:	6078      	str	r0, [r7, #4]
 800fb0c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800fb0e:	683b      	ldr	r3, [r7, #0]
 800fb10:	2b00      	cmp	r3, #0
 800fb12:	d101      	bne.n	800fb18 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800fb14:	2303      	movs	r3, #3
 800fb16:	e009      	b.n	800fb2c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800fb18:	687b      	ldr	r3, [r7, #4]
 800fb1a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800fb1e:	687a      	ldr	r2, [r7, #4]
 800fb20:	33b0      	adds	r3, #176	@ 0xb0
 800fb22:	009b      	lsls	r3, r3, #2
 800fb24:	4413      	add	r3, r2
 800fb26:	683a      	ldr	r2, [r7, #0]
 800fb28:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800fb2a:	2300      	movs	r3, #0
}
 800fb2c:	4618      	mov	r0, r3
 800fb2e:	370c      	adds	r7, #12
 800fb30:	46bd      	mov	sp, r7
 800fb32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb36:	4770      	bx	lr

0800fb38 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800fb38:	b480      	push	{r7}
 800fb3a:	b087      	sub	sp, #28
 800fb3c:	af00      	add	r7, sp, #0
 800fb3e:	60f8      	str	r0, [r7, #12]
 800fb40:	60b9      	str	r1, [r7, #8]
 800fb42:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800fb44:	68fb      	ldr	r3, [r7, #12]
 800fb46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fb4a:	68fb      	ldr	r3, [r7, #12]
 800fb4c:	32b0      	adds	r2, #176	@ 0xb0
 800fb4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fb52:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800fb54:	697b      	ldr	r3, [r7, #20]
 800fb56:	2b00      	cmp	r3, #0
 800fb58:	d101      	bne.n	800fb5e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800fb5a:	2303      	movs	r3, #3
 800fb5c:	e008      	b.n	800fb70 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800fb5e:	697b      	ldr	r3, [r7, #20]
 800fb60:	68ba      	ldr	r2, [r7, #8]
 800fb62:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800fb66:	697b      	ldr	r3, [r7, #20]
 800fb68:	687a      	ldr	r2, [r7, #4]
 800fb6a:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800fb6e:	2300      	movs	r3, #0
}
 800fb70:	4618      	mov	r0, r3
 800fb72:	371c      	adds	r7, #28
 800fb74:	46bd      	mov	sp, r7
 800fb76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb7a:	4770      	bx	lr

0800fb7c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800fb7c:	b480      	push	{r7}
 800fb7e:	b085      	sub	sp, #20
 800fb80:	af00      	add	r7, sp, #0
 800fb82:	6078      	str	r0, [r7, #4]
 800fb84:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800fb86:	687b      	ldr	r3, [r7, #4]
 800fb88:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fb8c:	687b      	ldr	r3, [r7, #4]
 800fb8e:	32b0      	adds	r2, #176	@ 0xb0
 800fb90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fb94:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800fb96:	68fb      	ldr	r3, [r7, #12]
 800fb98:	2b00      	cmp	r3, #0
 800fb9a:	d101      	bne.n	800fba0 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800fb9c:	2303      	movs	r3, #3
 800fb9e:	e004      	b.n	800fbaa <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800fba0:	68fb      	ldr	r3, [r7, #12]
 800fba2:	683a      	ldr	r2, [r7, #0]
 800fba4:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800fba8:	2300      	movs	r3, #0
}
 800fbaa:	4618      	mov	r0, r3
 800fbac:	3714      	adds	r7, #20
 800fbae:	46bd      	mov	sp, r7
 800fbb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbb4:	4770      	bx	lr
	...

0800fbb8 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800fbb8:	b580      	push	{r7, lr}
 800fbba:	b084      	sub	sp, #16
 800fbbc:	af00      	add	r7, sp, #0
 800fbbe:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800fbc0:	687b      	ldr	r3, [r7, #4]
 800fbc2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fbc6:	687b      	ldr	r3, [r7, #4]
 800fbc8:	32b0      	adds	r2, #176	@ 0xb0
 800fbca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fbce:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800fbd0:	2301      	movs	r3, #1
 800fbd2:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800fbd4:	68bb      	ldr	r3, [r7, #8]
 800fbd6:	2b00      	cmp	r3, #0
 800fbd8:	d101      	bne.n	800fbde <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800fbda:	2303      	movs	r3, #3
 800fbdc:	e025      	b.n	800fc2a <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800fbde:	68bb      	ldr	r3, [r7, #8]
 800fbe0:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800fbe4:	2b00      	cmp	r3, #0
 800fbe6:	d11f      	bne.n	800fc28 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800fbe8:	68bb      	ldr	r3, [r7, #8]
 800fbea:	2201      	movs	r2, #1
 800fbec:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800fbf0:	4b10      	ldr	r3, [pc, #64]	@ (800fc34 <USBD_CDC_TransmitPacket+0x7c>)
 800fbf2:	781b      	ldrb	r3, [r3, #0]
 800fbf4:	f003 020f 	and.w	r2, r3, #15
 800fbf8:	68bb      	ldr	r3, [r7, #8]
 800fbfa:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800fbfe:	6878      	ldr	r0, [r7, #4]
 800fc00:	4613      	mov	r3, r2
 800fc02:	009b      	lsls	r3, r3, #2
 800fc04:	4413      	add	r3, r2
 800fc06:	009b      	lsls	r3, r3, #2
 800fc08:	4403      	add	r3, r0
 800fc0a:	3318      	adds	r3, #24
 800fc0c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800fc0e:	4b09      	ldr	r3, [pc, #36]	@ (800fc34 <USBD_CDC_TransmitPacket+0x7c>)
 800fc10:	7819      	ldrb	r1, [r3, #0]
 800fc12:	68bb      	ldr	r3, [r7, #8]
 800fc14:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800fc18:	68bb      	ldr	r3, [r7, #8]
 800fc1a:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800fc1e:	6878      	ldr	r0, [r7, #4]
 800fc20:	f002 f823 	bl	8011c6a <USBD_LL_Transmit>

    ret = USBD_OK;
 800fc24:	2300      	movs	r3, #0
 800fc26:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800fc28:	7bfb      	ldrb	r3, [r7, #15]
}
 800fc2a:	4618      	mov	r0, r3
 800fc2c:	3710      	adds	r7, #16
 800fc2e:	46bd      	mov	sp, r7
 800fc30:	bd80      	pop	{r7, pc}
 800fc32:	bf00      	nop
 800fc34:	240000bf 	.word	0x240000bf

0800fc38 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800fc38:	b580      	push	{r7, lr}
 800fc3a:	b084      	sub	sp, #16
 800fc3c:	af00      	add	r7, sp, #0
 800fc3e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800fc40:	687b      	ldr	r3, [r7, #4]
 800fc42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fc46:	687b      	ldr	r3, [r7, #4]
 800fc48:	32b0      	adds	r2, #176	@ 0xb0
 800fc4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fc4e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fc56:	687b      	ldr	r3, [r7, #4]
 800fc58:	32b0      	adds	r2, #176	@ 0xb0
 800fc5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fc5e:	2b00      	cmp	r3, #0
 800fc60:	d101      	bne.n	800fc66 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800fc62:	2303      	movs	r3, #3
 800fc64:	e018      	b.n	800fc98 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fc66:	687b      	ldr	r3, [r7, #4]
 800fc68:	7c1b      	ldrb	r3, [r3, #16]
 800fc6a:	2b00      	cmp	r3, #0
 800fc6c:	d10a      	bne.n	800fc84 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800fc6e:	4b0c      	ldr	r3, [pc, #48]	@ (800fca0 <USBD_CDC_ReceivePacket+0x68>)
 800fc70:	7819      	ldrb	r1, [r3, #0]
 800fc72:	68fb      	ldr	r3, [r7, #12]
 800fc74:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800fc78:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800fc7c:	6878      	ldr	r0, [r7, #4]
 800fc7e:	f002 f815 	bl	8011cac <USBD_LL_PrepareReceive>
 800fc82:	e008      	b.n	800fc96 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800fc84:	4b06      	ldr	r3, [pc, #24]	@ (800fca0 <USBD_CDC_ReceivePacket+0x68>)
 800fc86:	7819      	ldrb	r1, [r3, #0]
 800fc88:	68fb      	ldr	r3, [r7, #12]
 800fc8a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800fc8e:	2340      	movs	r3, #64	@ 0x40
 800fc90:	6878      	ldr	r0, [r7, #4]
 800fc92:	f002 f80b 	bl	8011cac <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800fc96:	2300      	movs	r3, #0
}
 800fc98:	4618      	mov	r0, r3
 800fc9a:	3710      	adds	r7, #16
 800fc9c:	46bd      	mov	sp, r7
 800fc9e:	bd80      	pop	{r7, pc}
 800fca0:	240000c0 	.word	0x240000c0

0800fca4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800fca4:	b580      	push	{r7, lr}
 800fca6:	b086      	sub	sp, #24
 800fca8:	af00      	add	r7, sp, #0
 800fcaa:	60f8      	str	r0, [r7, #12]
 800fcac:	60b9      	str	r1, [r7, #8]
 800fcae:	4613      	mov	r3, r2
 800fcb0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800fcb2:	68fb      	ldr	r3, [r7, #12]
 800fcb4:	2b00      	cmp	r3, #0
 800fcb6:	d101      	bne.n	800fcbc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800fcb8:	2303      	movs	r3, #3
 800fcba:	e01f      	b.n	800fcfc <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800fcbc:	68fb      	ldr	r3, [r7, #12]
 800fcbe:	2200      	movs	r2, #0
 800fcc0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800fcc4:	68fb      	ldr	r3, [r7, #12]
 800fcc6:	2200      	movs	r2, #0
 800fcc8:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800fccc:	68fb      	ldr	r3, [r7, #12]
 800fcce:	2200      	movs	r2, #0
 800fcd0:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800fcd4:	68bb      	ldr	r3, [r7, #8]
 800fcd6:	2b00      	cmp	r3, #0
 800fcd8:	d003      	beq.n	800fce2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800fcda:	68fb      	ldr	r3, [r7, #12]
 800fcdc:	68ba      	ldr	r2, [r7, #8]
 800fcde:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800fce2:	68fb      	ldr	r3, [r7, #12]
 800fce4:	2201      	movs	r2, #1
 800fce6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800fcea:	68fb      	ldr	r3, [r7, #12]
 800fcec:	79fa      	ldrb	r2, [r7, #7]
 800fcee:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800fcf0:	68f8      	ldr	r0, [r7, #12]
 800fcf2:	f001 fe81 	bl	80119f8 <USBD_LL_Init>
 800fcf6:	4603      	mov	r3, r0
 800fcf8:	75fb      	strb	r3, [r7, #23]

  return ret;
 800fcfa:	7dfb      	ldrb	r3, [r7, #23]
}
 800fcfc:	4618      	mov	r0, r3
 800fcfe:	3718      	adds	r7, #24
 800fd00:	46bd      	mov	sp, r7
 800fd02:	bd80      	pop	{r7, pc}

0800fd04 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800fd04:	b580      	push	{r7, lr}
 800fd06:	b084      	sub	sp, #16
 800fd08:	af00      	add	r7, sp, #0
 800fd0a:	6078      	str	r0, [r7, #4]
 800fd0c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800fd0e:	2300      	movs	r3, #0
 800fd10:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800fd12:	683b      	ldr	r3, [r7, #0]
 800fd14:	2b00      	cmp	r3, #0
 800fd16:	d101      	bne.n	800fd1c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800fd18:	2303      	movs	r3, #3
 800fd1a:	e025      	b.n	800fd68 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800fd1c:	687b      	ldr	r3, [r7, #4]
 800fd1e:	683a      	ldr	r2, [r7, #0]
 800fd20:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800fd24:	687b      	ldr	r3, [r7, #4]
 800fd26:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fd2a:	687b      	ldr	r3, [r7, #4]
 800fd2c:	32ae      	adds	r2, #174	@ 0xae
 800fd2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fd32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fd34:	2b00      	cmp	r3, #0
 800fd36:	d00f      	beq.n	800fd58 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800fd38:	687b      	ldr	r3, [r7, #4]
 800fd3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fd3e:	687b      	ldr	r3, [r7, #4]
 800fd40:	32ae      	adds	r2, #174	@ 0xae
 800fd42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fd46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fd48:	f107 020e 	add.w	r2, r7, #14
 800fd4c:	4610      	mov	r0, r2
 800fd4e:	4798      	blx	r3
 800fd50:	4602      	mov	r2, r0
 800fd52:	687b      	ldr	r3, [r7, #4]
 800fd54:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800fd58:	687b      	ldr	r3, [r7, #4]
 800fd5a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800fd5e:	1c5a      	adds	r2, r3, #1
 800fd60:	687b      	ldr	r3, [r7, #4]
 800fd62:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800fd66:	2300      	movs	r3, #0
}
 800fd68:	4618      	mov	r0, r3
 800fd6a:	3710      	adds	r7, #16
 800fd6c:	46bd      	mov	sp, r7
 800fd6e:	bd80      	pop	{r7, pc}

0800fd70 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800fd70:	b580      	push	{r7, lr}
 800fd72:	b082      	sub	sp, #8
 800fd74:	af00      	add	r7, sp, #0
 800fd76:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800fd78:	6878      	ldr	r0, [r7, #4]
 800fd7a:	f001 fe8d 	bl	8011a98 <USBD_LL_Start>
 800fd7e:	4603      	mov	r3, r0
}
 800fd80:	4618      	mov	r0, r3
 800fd82:	3708      	adds	r7, #8
 800fd84:	46bd      	mov	sp, r7
 800fd86:	bd80      	pop	{r7, pc}

0800fd88 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800fd88:	b480      	push	{r7}
 800fd8a:	b083      	sub	sp, #12
 800fd8c:	af00      	add	r7, sp, #0
 800fd8e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800fd90:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800fd92:	4618      	mov	r0, r3
 800fd94:	370c      	adds	r7, #12
 800fd96:	46bd      	mov	sp, r7
 800fd98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd9c:	4770      	bx	lr

0800fd9e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800fd9e:	b580      	push	{r7, lr}
 800fda0:	b084      	sub	sp, #16
 800fda2:	af00      	add	r7, sp, #0
 800fda4:	6078      	str	r0, [r7, #4]
 800fda6:	460b      	mov	r3, r1
 800fda8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800fdaa:	2300      	movs	r3, #0
 800fdac:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800fdae:	687b      	ldr	r3, [r7, #4]
 800fdb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fdb4:	2b00      	cmp	r3, #0
 800fdb6:	d009      	beq.n	800fdcc <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800fdb8:	687b      	ldr	r3, [r7, #4]
 800fdba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fdbe:	681b      	ldr	r3, [r3, #0]
 800fdc0:	78fa      	ldrb	r2, [r7, #3]
 800fdc2:	4611      	mov	r1, r2
 800fdc4:	6878      	ldr	r0, [r7, #4]
 800fdc6:	4798      	blx	r3
 800fdc8:	4603      	mov	r3, r0
 800fdca:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800fdcc:	7bfb      	ldrb	r3, [r7, #15]
}
 800fdce:	4618      	mov	r0, r3
 800fdd0:	3710      	adds	r7, #16
 800fdd2:	46bd      	mov	sp, r7
 800fdd4:	bd80      	pop	{r7, pc}

0800fdd6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800fdd6:	b580      	push	{r7, lr}
 800fdd8:	b084      	sub	sp, #16
 800fdda:	af00      	add	r7, sp, #0
 800fddc:	6078      	str	r0, [r7, #4]
 800fdde:	460b      	mov	r3, r1
 800fde0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800fde2:	2300      	movs	r3, #0
 800fde4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800fde6:	687b      	ldr	r3, [r7, #4]
 800fde8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fdec:	685b      	ldr	r3, [r3, #4]
 800fdee:	78fa      	ldrb	r2, [r7, #3]
 800fdf0:	4611      	mov	r1, r2
 800fdf2:	6878      	ldr	r0, [r7, #4]
 800fdf4:	4798      	blx	r3
 800fdf6:	4603      	mov	r3, r0
 800fdf8:	2b00      	cmp	r3, #0
 800fdfa:	d001      	beq.n	800fe00 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800fdfc:	2303      	movs	r3, #3
 800fdfe:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800fe00:	7bfb      	ldrb	r3, [r7, #15]
}
 800fe02:	4618      	mov	r0, r3
 800fe04:	3710      	adds	r7, #16
 800fe06:	46bd      	mov	sp, r7
 800fe08:	bd80      	pop	{r7, pc}

0800fe0a <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800fe0a:	b580      	push	{r7, lr}
 800fe0c:	b084      	sub	sp, #16
 800fe0e:	af00      	add	r7, sp, #0
 800fe10:	6078      	str	r0, [r7, #4]
 800fe12:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800fe14:	687b      	ldr	r3, [r7, #4]
 800fe16:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800fe1a:	6839      	ldr	r1, [r7, #0]
 800fe1c:	4618      	mov	r0, r3
 800fe1e:	f001 f936 	bl	801108e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800fe22:	687b      	ldr	r3, [r7, #4]
 800fe24:	2201      	movs	r2, #1
 800fe26:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800fe2a:	687b      	ldr	r3, [r7, #4]
 800fe2c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800fe30:	461a      	mov	r2, r3
 800fe32:	687b      	ldr	r3, [r7, #4]
 800fe34:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800fe38:	687b      	ldr	r3, [r7, #4]
 800fe3a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800fe3e:	f003 031f 	and.w	r3, r3, #31
 800fe42:	2b02      	cmp	r3, #2
 800fe44:	d01a      	beq.n	800fe7c <USBD_LL_SetupStage+0x72>
 800fe46:	2b02      	cmp	r3, #2
 800fe48:	d822      	bhi.n	800fe90 <USBD_LL_SetupStage+0x86>
 800fe4a:	2b00      	cmp	r3, #0
 800fe4c:	d002      	beq.n	800fe54 <USBD_LL_SetupStage+0x4a>
 800fe4e:	2b01      	cmp	r3, #1
 800fe50:	d00a      	beq.n	800fe68 <USBD_LL_SetupStage+0x5e>
 800fe52:	e01d      	b.n	800fe90 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800fe54:	687b      	ldr	r3, [r7, #4]
 800fe56:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800fe5a:	4619      	mov	r1, r3
 800fe5c:	6878      	ldr	r0, [r7, #4]
 800fe5e:	f000 fb63 	bl	8010528 <USBD_StdDevReq>
 800fe62:	4603      	mov	r3, r0
 800fe64:	73fb      	strb	r3, [r7, #15]
      break;
 800fe66:	e020      	b.n	800feaa <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800fe68:	687b      	ldr	r3, [r7, #4]
 800fe6a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800fe6e:	4619      	mov	r1, r3
 800fe70:	6878      	ldr	r0, [r7, #4]
 800fe72:	f000 fbcb 	bl	801060c <USBD_StdItfReq>
 800fe76:	4603      	mov	r3, r0
 800fe78:	73fb      	strb	r3, [r7, #15]
      break;
 800fe7a:	e016      	b.n	800feaa <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800fe7c:	687b      	ldr	r3, [r7, #4]
 800fe7e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800fe82:	4619      	mov	r1, r3
 800fe84:	6878      	ldr	r0, [r7, #4]
 800fe86:	f000 fc2d 	bl	80106e4 <USBD_StdEPReq>
 800fe8a:	4603      	mov	r3, r0
 800fe8c:	73fb      	strb	r3, [r7, #15]
      break;
 800fe8e:	e00c      	b.n	800feaa <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800fe90:	687b      	ldr	r3, [r7, #4]
 800fe92:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800fe96:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800fe9a:	b2db      	uxtb	r3, r3
 800fe9c:	4619      	mov	r1, r3
 800fe9e:	6878      	ldr	r0, [r7, #4]
 800fea0:	f001 fe5a 	bl	8011b58 <USBD_LL_StallEP>
 800fea4:	4603      	mov	r3, r0
 800fea6:	73fb      	strb	r3, [r7, #15]
      break;
 800fea8:	bf00      	nop
  }

  return ret;
 800feaa:	7bfb      	ldrb	r3, [r7, #15]
}
 800feac:	4618      	mov	r0, r3
 800feae:	3710      	adds	r7, #16
 800feb0:	46bd      	mov	sp, r7
 800feb2:	bd80      	pop	{r7, pc}

0800feb4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800feb4:	b580      	push	{r7, lr}
 800feb6:	b086      	sub	sp, #24
 800feb8:	af00      	add	r7, sp, #0
 800feba:	60f8      	str	r0, [r7, #12]
 800febc:	460b      	mov	r3, r1
 800febe:	607a      	str	r2, [r7, #4]
 800fec0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800fec2:	2300      	movs	r3, #0
 800fec4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800fec6:	7afb      	ldrb	r3, [r7, #11]
 800fec8:	2b00      	cmp	r3, #0
 800feca:	d16e      	bne.n	800ffaa <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800fecc:	68fb      	ldr	r3, [r7, #12]
 800fece:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800fed2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800fed4:	68fb      	ldr	r3, [r7, #12]
 800fed6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800feda:	2b03      	cmp	r3, #3
 800fedc:	f040 8098 	bne.w	8010010 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800fee0:	693b      	ldr	r3, [r7, #16]
 800fee2:	689a      	ldr	r2, [r3, #8]
 800fee4:	693b      	ldr	r3, [r7, #16]
 800fee6:	68db      	ldr	r3, [r3, #12]
 800fee8:	429a      	cmp	r2, r3
 800feea:	d913      	bls.n	800ff14 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800feec:	693b      	ldr	r3, [r7, #16]
 800feee:	689a      	ldr	r2, [r3, #8]
 800fef0:	693b      	ldr	r3, [r7, #16]
 800fef2:	68db      	ldr	r3, [r3, #12]
 800fef4:	1ad2      	subs	r2, r2, r3
 800fef6:	693b      	ldr	r3, [r7, #16]
 800fef8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800fefa:	693b      	ldr	r3, [r7, #16]
 800fefc:	68da      	ldr	r2, [r3, #12]
 800fefe:	693b      	ldr	r3, [r7, #16]
 800ff00:	689b      	ldr	r3, [r3, #8]
 800ff02:	4293      	cmp	r3, r2
 800ff04:	bf28      	it	cs
 800ff06:	4613      	movcs	r3, r2
 800ff08:	461a      	mov	r2, r3
 800ff0a:	6879      	ldr	r1, [r7, #4]
 800ff0c:	68f8      	ldr	r0, [r7, #12]
 800ff0e:	f001 f9be 	bl	801128e <USBD_CtlContinueRx>
 800ff12:	e07d      	b.n	8010010 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800ff14:	68fb      	ldr	r3, [r7, #12]
 800ff16:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800ff1a:	f003 031f 	and.w	r3, r3, #31
 800ff1e:	2b02      	cmp	r3, #2
 800ff20:	d014      	beq.n	800ff4c <USBD_LL_DataOutStage+0x98>
 800ff22:	2b02      	cmp	r3, #2
 800ff24:	d81d      	bhi.n	800ff62 <USBD_LL_DataOutStage+0xae>
 800ff26:	2b00      	cmp	r3, #0
 800ff28:	d002      	beq.n	800ff30 <USBD_LL_DataOutStage+0x7c>
 800ff2a:	2b01      	cmp	r3, #1
 800ff2c:	d003      	beq.n	800ff36 <USBD_LL_DataOutStage+0x82>
 800ff2e:	e018      	b.n	800ff62 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800ff30:	2300      	movs	r3, #0
 800ff32:	75bb      	strb	r3, [r7, #22]
            break;
 800ff34:	e018      	b.n	800ff68 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800ff36:	68fb      	ldr	r3, [r7, #12]
 800ff38:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800ff3c:	b2db      	uxtb	r3, r3
 800ff3e:	4619      	mov	r1, r3
 800ff40:	68f8      	ldr	r0, [r7, #12]
 800ff42:	f000 fa64 	bl	801040e <USBD_CoreFindIF>
 800ff46:	4603      	mov	r3, r0
 800ff48:	75bb      	strb	r3, [r7, #22]
            break;
 800ff4a:	e00d      	b.n	800ff68 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800ff4c:	68fb      	ldr	r3, [r7, #12]
 800ff4e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800ff52:	b2db      	uxtb	r3, r3
 800ff54:	4619      	mov	r1, r3
 800ff56:	68f8      	ldr	r0, [r7, #12]
 800ff58:	f000 fa66 	bl	8010428 <USBD_CoreFindEP>
 800ff5c:	4603      	mov	r3, r0
 800ff5e:	75bb      	strb	r3, [r7, #22]
            break;
 800ff60:	e002      	b.n	800ff68 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800ff62:	2300      	movs	r3, #0
 800ff64:	75bb      	strb	r3, [r7, #22]
            break;
 800ff66:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800ff68:	7dbb      	ldrb	r3, [r7, #22]
 800ff6a:	2b00      	cmp	r3, #0
 800ff6c:	d119      	bne.n	800ffa2 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ff6e:	68fb      	ldr	r3, [r7, #12]
 800ff70:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ff74:	b2db      	uxtb	r3, r3
 800ff76:	2b03      	cmp	r3, #3
 800ff78:	d113      	bne.n	800ffa2 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800ff7a:	7dba      	ldrb	r2, [r7, #22]
 800ff7c:	68fb      	ldr	r3, [r7, #12]
 800ff7e:	32ae      	adds	r2, #174	@ 0xae
 800ff80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ff84:	691b      	ldr	r3, [r3, #16]
 800ff86:	2b00      	cmp	r3, #0
 800ff88:	d00b      	beq.n	800ffa2 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800ff8a:	7dba      	ldrb	r2, [r7, #22]
 800ff8c:	68fb      	ldr	r3, [r7, #12]
 800ff8e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800ff92:	7dba      	ldrb	r2, [r7, #22]
 800ff94:	68fb      	ldr	r3, [r7, #12]
 800ff96:	32ae      	adds	r2, #174	@ 0xae
 800ff98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ff9c:	691b      	ldr	r3, [r3, #16]
 800ff9e:	68f8      	ldr	r0, [r7, #12]
 800ffa0:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800ffa2:	68f8      	ldr	r0, [r7, #12]
 800ffa4:	f001 f984 	bl	80112b0 <USBD_CtlSendStatus>
 800ffa8:	e032      	b.n	8010010 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800ffaa:	7afb      	ldrb	r3, [r7, #11]
 800ffac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ffb0:	b2db      	uxtb	r3, r3
 800ffb2:	4619      	mov	r1, r3
 800ffb4:	68f8      	ldr	r0, [r7, #12]
 800ffb6:	f000 fa37 	bl	8010428 <USBD_CoreFindEP>
 800ffba:	4603      	mov	r3, r0
 800ffbc:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ffbe:	7dbb      	ldrb	r3, [r7, #22]
 800ffc0:	2bff      	cmp	r3, #255	@ 0xff
 800ffc2:	d025      	beq.n	8010010 <USBD_LL_DataOutStage+0x15c>
 800ffc4:	7dbb      	ldrb	r3, [r7, #22]
 800ffc6:	2b00      	cmp	r3, #0
 800ffc8:	d122      	bne.n	8010010 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ffca:	68fb      	ldr	r3, [r7, #12]
 800ffcc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ffd0:	b2db      	uxtb	r3, r3
 800ffd2:	2b03      	cmp	r3, #3
 800ffd4:	d117      	bne.n	8010006 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800ffd6:	7dba      	ldrb	r2, [r7, #22]
 800ffd8:	68fb      	ldr	r3, [r7, #12]
 800ffda:	32ae      	adds	r2, #174	@ 0xae
 800ffdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ffe0:	699b      	ldr	r3, [r3, #24]
 800ffe2:	2b00      	cmp	r3, #0
 800ffe4:	d00f      	beq.n	8010006 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800ffe6:	7dba      	ldrb	r2, [r7, #22]
 800ffe8:	68fb      	ldr	r3, [r7, #12]
 800ffea:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800ffee:	7dba      	ldrb	r2, [r7, #22]
 800fff0:	68fb      	ldr	r3, [r7, #12]
 800fff2:	32ae      	adds	r2, #174	@ 0xae
 800fff4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fff8:	699b      	ldr	r3, [r3, #24]
 800fffa:	7afa      	ldrb	r2, [r7, #11]
 800fffc:	4611      	mov	r1, r2
 800fffe:	68f8      	ldr	r0, [r7, #12]
 8010000:	4798      	blx	r3
 8010002:	4603      	mov	r3, r0
 8010004:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8010006:	7dfb      	ldrb	r3, [r7, #23]
 8010008:	2b00      	cmp	r3, #0
 801000a:	d001      	beq.n	8010010 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 801000c:	7dfb      	ldrb	r3, [r7, #23]
 801000e:	e000      	b.n	8010012 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8010010:	2300      	movs	r3, #0
}
 8010012:	4618      	mov	r0, r3
 8010014:	3718      	adds	r7, #24
 8010016:	46bd      	mov	sp, r7
 8010018:	bd80      	pop	{r7, pc}

0801001a <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 801001a:	b580      	push	{r7, lr}
 801001c:	b086      	sub	sp, #24
 801001e:	af00      	add	r7, sp, #0
 8010020:	60f8      	str	r0, [r7, #12]
 8010022:	460b      	mov	r3, r1
 8010024:	607a      	str	r2, [r7, #4]
 8010026:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8010028:	7afb      	ldrb	r3, [r7, #11]
 801002a:	2b00      	cmp	r3, #0
 801002c:	d16f      	bne.n	801010e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 801002e:	68fb      	ldr	r3, [r7, #12]
 8010030:	3314      	adds	r3, #20
 8010032:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8010034:	68fb      	ldr	r3, [r7, #12]
 8010036:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 801003a:	2b02      	cmp	r3, #2
 801003c:	d15a      	bne.n	80100f4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 801003e:	693b      	ldr	r3, [r7, #16]
 8010040:	689a      	ldr	r2, [r3, #8]
 8010042:	693b      	ldr	r3, [r7, #16]
 8010044:	68db      	ldr	r3, [r3, #12]
 8010046:	429a      	cmp	r2, r3
 8010048:	d914      	bls.n	8010074 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 801004a:	693b      	ldr	r3, [r7, #16]
 801004c:	689a      	ldr	r2, [r3, #8]
 801004e:	693b      	ldr	r3, [r7, #16]
 8010050:	68db      	ldr	r3, [r3, #12]
 8010052:	1ad2      	subs	r2, r2, r3
 8010054:	693b      	ldr	r3, [r7, #16]
 8010056:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8010058:	693b      	ldr	r3, [r7, #16]
 801005a:	689b      	ldr	r3, [r3, #8]
 801005c:	461a      	mov	r2, r3
 801005e:	6879      	ldr	r1, [r7, #4]
 8010060:	68f8      	ldr	r0, [r7, #12]
 8010062:	f001 f8e6 	bl	8011232 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8010066:	2300      	movs	r3, #0
 8010068:	2200      	movs	r2, #0
 801006a:	2100      	movs	r1, #0
 801006c:	68f8      	ldr	r0, [r7, #12]
 801006e:	f001 fe1d 	bl	8011cac <USBD_LL_PrepareReceive>
 8010072:	e03f      	b.n	80100f4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8010074:	693b      	ldr	r3, [r7, #16]
 8010076:	68da      	ldr	r2, [r3, #12]
 8010078:	693b      	ldr	r3, [r7, #16]
 801007a:	689b      	ldr	r3, [r3, #8]
 801007c:	429a      	cmp	r2, r3
 801007e:	d11c      	bne.n	80100ba <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8010080:	693b      	ldr	r3, [r7, #16]
 8010082:	685a      	ldr	r2, [r3, #4]
 8010084:	693b      	ldr	r3, [r7, #16]
 8010086:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8010088:	429a      	cmp	r2, r3
 801008a:	d316      	bcc.n	80100ba <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 801008c:	693b      	ldr	r3, [r7, #16]
 801008e:	685a      	ldr	r2, [r3, #4]
 8010090:	68fb      	ldr	r3, [r7, #12]
 8010092:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8010096:	429a      	cmp	r2, r3
 8010098:	d20f      	bcs.n	80100ba <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 801009a:	2200      	movs	r2, #0
 801009c:	2100      	movs	r1, #0
 801009e:	68f8      	ldr	r0, [r7, #12]
 80100a0:	f001 f8c7 	bl	8011232 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80100a4:	68fb      	ldr	r3, [r7, #12]
 80100a6:	2200      	movs	r2, #0
 80100a8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80100ac:	2300      	movs	r3, #0
 80100ae:	2200      	movs	r2, #0
 80100b0:	2100      	movs	r1, #0
 80100b2:	68f8      	ldr	r0, [r7, #12]
 80100b4:	f001 fdfa 	bl	8011cac <USBD_LL_PrepareReceive>
 80100b8:	e01c      	b.n	80100f4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80100ba:	68fb      	ldr	r3, [r7, #12]
 80100bc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80100c0:	b2db      	uxtb	r3, r3
 80100c2:	2b03      	cmp	r3, #3
 80100c4:	d10f      	bne.n	80100e6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80100c6:	68fb      	ldr	r3, [r7, #12]
 80100c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80100cc:	68db      	ldr	r3, [r3, #12]
 80100ce:	2b00      	cmp	r3, #0
 80100d0:	d009      	beq.n	80100e6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80100d2:	68fb      	ldr	r3, [r7, #12]
 80100d4:	2200      	movs	r2, #0
 80100d6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80100da:	68fb      	ldr	r3, [r7, #12]
 80100dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80100e0:	68db      	ldr	r3, [r3, #12]
 80100e2:	68f8      	ldr	r0, [r7, #12]
 80100e4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80100e6:	2180      	movs	r1, #128	@ 0x80
 80100e8:	68f8      	ldr	r0, [r7, #12]
 80100ea:	f001 fd35 	bl	8011b58 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80100ee:	68f8      	ldr	r0, [r7, #12]
 80100f0:	f001 f8f1 	bl	80112d6 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80100f4:	68fb      	ldr	r3, [r7, #12]
 80100f6:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80100fa:	2b00      	cmp	r3, #0
 80100fc:	d03a      	beq.n	8010174 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80100fe:	68f8      	ldr	r0, [r7, #12]
 8010100:	f7ff fe42 	bl	800fd88 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8010104:	68fb      	ldr	r3, [r7, #12]
 8010106:	2200      	movs	r2, #0
 8010108:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 801010c:	e032      	b.n	8010174 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 801010e:	7afb      	ldrb	r3, [r7, #11]
 8010110:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8010114:	b2db      	uxtb	r3, r3
 8010116:	4619      	mov	r1, r3
 8010118:	68f8      	ldr	r0, [r7, #12]
 801011a:	f000 f985 	bl	8010428 <USBD_CoreFindEP>
 801011e:	4603      	mov	r3, r0
 8010120:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8010122:	7dfb      	ldrb	r3, [r7, #23]
 8010124:	2bff      	cmp	r3, #255	@ 0xff
 8010126:	d025      	beq.n	8010174 <USBD_LL_DataInStage+0x15a>
 8010128:	7dfb      	ldrb	r3, [r7, #23]
 801012a:	2b00      	cmp	r3, #0
 801012c:	d122      	bne.n	8010174 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801012e:	68fb      	ldr	r3, [r7, #12]
 8010130:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010134:	b2db      	uxtb	r3, r3
 8010136:	2b03      	cmp	r3, #3
 8010138:	d11c      	bne.n	8010174 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 801013a:	7dfa      	ldrb	r2, [r7, #23]
 801013c:	68fb      	ldr	r3, [r7, #12]
 801013e:	32ae      	adds	r2, #174	@ 0xae
 8010140:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010144:	695b      	ldr	r3, [r3, #20]
 8010146:	2b00      	cmp	r3, #0
 8010148:	d014      	beq.n	8010174 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 801014a:	7dfa      	ldrb	r2, [r7, #23]
 801014c:	68fb      	ldr	r3, [r7, #12]
 801014e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8010152:	7dfa      	ldrb	r2, [r7, #23]
 8010154:	68fb      	ldr	r3, [r7, #12]
 8010156:	32ae      	adds	r2, #174	@ 0xae
 8010158:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801015c:	695b      	ldr	r3, [r3, #20]
 801015e:	7afa      	ldrb	r2, [r7, #11]
 8010160:	4611      	mov	r1, r2
 8010162:	68f8      	ldr	r0, [r7, #12]
 8010164:	4798      	blx	r3
 8010166:	4603      	mov	r3, r0
 8010168:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 801016a:	7dbb      	ldrb	r3, [r7, #22]
 801016c:	2b00      	cmp	r3, #0
 801016e:	d001      	beq.n	8010174 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8010170:	7dbb      	ldrb	r3, [r7, #22]
 8010172:	e000      	b.n	8010176 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8010174:	2300      	movs	r3, #0
}
 8010176:	4618      	mov	r0, r3
 8010178:	3718      	adds	r7, #24
 801017a:	46bd      	mov	sp, r7
 801017c:	bd80      	pop	{r7, pc}

0801017e <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 801017e:	b580      	push	{r7, lr}
 8010180:	b084      	sub	sp, #16
 8010182:	af00      	add	r7, sp, #0
 8010184:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8010186:	2300      	movs	r3, #0
 8010188:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801018a:	687b      	ldr	r3, [r7, #4]
 801018c:	2201      	movs	r2, #1
 801018e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8010192:	687b      	ldr	r3, [r7, #4]
 8010194:	2200      	movs	r2, #0
 8010196:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 801019a:	687b      	ldr	r3, [r7, #4]
 801019c:	2200      	movs	r2, #0
 801019e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80101a0:	687b      	ldr	r3, [r7, #4]
 80101a2:	2200      	movs	r2, #0
 80101a4:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 80101a8:	687b      	ldr	r3, [r7, #4]
 80101aa:	2200      	movs	r2, #0
 80101ac:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80101b0:	687b      	ldr	r3, [r7, #4]
 80101b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80101b6:	2b00      	cmp	r3, #0
 80101b8:	d014      	beq.n	80101e4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80101ba:	687b      	ldr	r3, [r7, #4]
 80101bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80101c0:	685b      	ldr	r3, [r3, #4]
 80101c2:	2b00      	cmp	r3, #0
 80101c4:	d00e      	beq.n	80101e4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80101c6:	687b      	ldr	r3, [r7, #4]
 80101c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80101cc:	685b      	ldr	r3, [r3, #4]
 80101ce:	687a      	ldr	r2, [r7, #4]
 80101d0:	6852      	ldr	r2, [r2, #4]
 80101d2:	b2d2      	uxtb	r2, r2
 80101d4:	4611      	mov	r1, r2
 80101d6:	6878      	ldr	r0, [r7, #4]
 80101d8:	4798      	blx	r3
 80101da:	4603      	mov	r3, r0
 80101dc:	2b00      	cmp	r3, #0
 80101de:	d001      	beq.n	80101e4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80101e0:	2303      	movs	r3, #3
 80101e2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80101e4:	2340      	movs	r3, #64	@ 0x40
 80101e6:	2200      	movs	r2, #0
 80101e8:	2100      	movs	r1, #0
 80101ea:	6878      	ldr	r0, [r7, #4]
 80101ec:	f001 fc6f 	bl	8011ace <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80101f0:	687b      	ldr	r3, [r7, #4]
 80101f2:	2201      	movs	r2, #1
 80101f4:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80101f8:	687b      	ldr	r3, [r7, #4]
 80101fa:	2240      	movs	r2, #64	@ 0x40
 80101fc:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8010200:	2340      	movs	r3, #64	@ 0x40
 8010202:	2200      	movs	r2, #0
 8010204:	2180      	movs	r1, #128	@ 0x80
 8010206:	6878      	ldr	r0, [r7, #4]
 8010208:	f001 fc61 	bl	8011ace <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 801020c:	687b      	ldr	r3, [r7, #4]
 801020e:	2201      	movs	r2, #1
 8010210:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8010212:	687b      	ldr	r3, [r7, #4]
 8010214:	2240      	movs	r2, #64	@ 0x40
 8010216:	621a      	str	r2, [r3, #32]

  return ret;
 8010218:	7bfb      	ldrb	r3, [r7, #15]
}
 801021a:	4618      	mov	r0, r3
 801021c:	3710      	adds	r7, #16
 801021e:	46bd      	mov	sp, r7
 8010220:	bd80      	pop	{r7, pc}

08010222 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8010222:	b480      	push	{r7}
 8010224:	b083      	sub	sp, #12
 8010226:	af00      	add	r7, sp, #0
 8010228:	6078      	str	r0, [r7, #4]
 801022a:	460b      	mov	r3, r1
 801022c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 801022e:	687b      	ldr	r3, [r7, #4]
 8010230:	78fa      	ldrb	r2, [r7, #3]
 8010232:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8010234:	2300      	movs	r3, #0
}
 8010236:	4618      	mov	r0, r3
 8010238:	370c      	adds	r7, #12
 801023a:	46bd      	mov	sp, r7
 801023c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010240:	4770      	bx	lr

08010242 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8010242:	b480      	push	{r7}
 8010244:	b083      	sub	sp, #12
 8010246:	af00      	add	r7, sp, #0
 8010248:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 801024a:	687b      	ldr	r3, [r7, #4]
 801024c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010250:	b2db      	uxtb	r3, r3
 8010252:	2b04      	cmp	r3, #4
 8010254:	d006      	beq.n	8010264 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8010256:	687b      	ldr	r3, [r7, #4]
 8010258:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801025c:	b2da      	uxtb	r2, r3
 801025e:	687b      	ldr	r3, [r7, #4]
 8010260:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8010264:	687b      	ldr	r3, [r7, #4]
 8010266:	2204      	movs	r2, #4
 8010268:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 801026c:	2300      	movs	r3, #0
}
 801026e:	4618      	mov	r0, r3
 8010270:	370c      	adds	r7, #12
 8010272:	46bd      	mov	sp, r7
 8010274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010278:	4770      	bx	lr

0801027a <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 801027a:	b480      	push	{r7}
 801027c:	b083      	sub	sp, #12
 801027e:	af00      	add	r7, sp, #0
 8010280:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8010282:	687b      	ldr	r3, [r7, #4]
 8010284:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010288:	b2db      	uxtb	r3, r3
 801028a:	2b04      	cmp	r3, #4
 801028c:	d106      	bne.n	801029c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 801028e:	687b      	ldr	r3, [r7, #4]
 8010290:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8010294:	b2da      	uxtb	r2, r3
 8010296:	687b      	ldr	r3, [r7, #4]
 8010298:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 801029c:	2300      	movs	r3, #0
}
 801029e:	4618      	mov	r0, r3
 80102a0:	370c      	adds	r7, #12
 80102a2:	46bd      	mov	sp, r7
 80102a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102a8:	4770      	bx	lr

080102aa <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80102aa:	b580      	push	{r7, lr}
 80102ac:	b082      	sub	sp, #8
 80102ae:	af00      	add	r7, sp, #0
 80102b0:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80102b2:	687b      	ldr	r3, [r7, #4]
 80102b4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80102b8:	b2db      	uxtb	r3, r3
 80102ba:	2b03      	cmp	r3, #3
 80102bc:	d110      	bne.n	80102e0 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80102be:	687b      	ldr	r3, [r7, #4]
 80102c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80102c4:	2b00      	cmp	r3, #0
 80102c6:	d00b      	beq.n	80102e0 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80102c8:	687b      	ldr	r3, [r7, #4]
 80102ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80102ce:	69db      	ldr	r3, [r3, #28]
 80102d0:	2b00      	cmp	r3, #0
 80102d2:	d005      	beq.n	80102e0 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80102da:	69db      	ldr	r3, [r3, #28]
 80102dc:	6878      	ldr	r0, [r7, #4]
 80102de:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80102e0:	2300      	movs	r3, #0
}
 80102e2:	4618      	mov	r0, r3
 80102e4:	3708      	adds	r7, #8
 80102e6:	46bd      	mov	sp, r7
 80102e8:	bd80      	pop	{r7, pc}

080102ea <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80102ea:	b580      	push	{r7, lr}
 80102ec:	b082      	sub	sp, #8
 80102ee:	af00      	add	r7, sp, #0
 80102f0:	6078      	str	r0, [r7, #4]
 80102f2:	460b      	mov	r3, r1
 80102f4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80102f6:	687b      	ldr	r3, [r7, #4]
 80102f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80102fc:	687b      	ldr	r3, [r7, #4]
 80102fe:	32ae      	adds	r2, #174	@ 0xae
 8010300:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010304:	2b00      	cmp	r3, #0
 8010306:	d101      	bne.n	801030c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8010308:	2303      	movs	r3, #3
 801030a:	e01c      	b.n	8010346 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801030c:	687b      	ldr	r3, [r7, #4]
 801030e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010312:	b2db      	uxtb	r3, r3
 8010314:	2b03      	cmp	r3, #3
 8010316:	d115      	bne.n	8010344 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8010318:	687b      	ldr	r3, [r7, #4]
 801031a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801031e:	687b      	ldr	r3, [r7, #4]
 8010320:	32ae      	adds	r2, #174	@ 0xae
 8010322:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010326:	6a1b      	ldr	r3, [r3, #32]
 8010328:	2b00      	cmp	r3, #0
 801032a:	d00b      	beq.n	8010344 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 801032c:	687b      	ldr	r3, [r7, #4]
 801032e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010332:	687b      	ldr	r3, [r7, #4]
 8010334:	32ae      	adds	r2, #174	@ 0xae
 8010336:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801033a:	6a1b      	ldr	r3, [r3, #32]
 801033c:	78fa      	ldrb	r2, [r7, #3]
 801033e:	4611      	mov	r1, r2
 8010340:	6878      	ldr	r0, [r7, #4]
 8010342:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8010344:	2300      	movs	r3, #0
}
 8010346:	4618      	mov	r0, r3
 8010348:	3708      	adds	r7, #8
 801034a:	46bd      	mov	sp, r7
 801034c:	bd80      	pop	{r7, pc}

0801034e <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 801034e:	b580      	push	{r7, lr}
 8010350:	b082      	sub	sp, #8
 8010352:	af00      	add	r7, sp, #0
 8010354:	6078      	str	r0, [r7, #4]
 8010356:	460b      	mov	r3, r1
 8010358:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 801035a:	687b      	ldr	r3, [r7, #4]
 801035c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010360:	687b      	ldr	r3, [r7, #4]
 8010362:	32ae      	adds	r2, #174	@ 0xae
 8010364:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010368:	2b00      	cmp	r3, #0
 801036a:	d101      	bne.n	8010370 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 801036c:	2303      	movs	r3, #3
 801036e:	e01c      	b.n	80103aa <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010370:	687b      	ldr	r3, [r7, #4]
 8010372:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010376:	b2db      	uxtb	r3, r3
 8010378:	2b03      	cmp	r3, #3
 801037a:	d115      	bne.n	80103a8 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 801037c:	687b      	ldr	r3, [r7, #4]
 801037e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010382:	687b      	ldr	r3, [r7, #4]
 8010384:	32ae      	adds	r2, #174	@ 0xae
 8010386:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801038a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801038c:	2b00      	cmp	r3, #0
 801038e:	d00b      	beq.n	80103a8 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8010390:	687b      	ldr	r3, [r7, #4]
 8010392:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010396:	687b      	ldr	r3, [r7, #4]
 8010398:	32ae      	adds	r2, #174	@ 0xae
 801039a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801039e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80103a0:	78fa      	ldrb	r2, [r7, #3]
 80103a2:	4611      	mov	r1, r2
 80103a4:	6878      	ldr	r0, [r7, #4]
 80103a6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80103a8:	2300      	movs	r3, #0
}
 80103aa:	4618      	mov	r0, r3
 80103ac:	3708      	adds	r7, #8
 80103ae:	46bd      	mov	sp, r7
 80103b0:	bd80      	pop	{r7, pc}

080103b2 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80103b2:	b480      	push	{r7}
 80103b4:	b083      	sub	sp, #12
 80103b6:	af00      	add	r7, sp, #0
 80103b8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80103ba:	2300      	movs	r3, #0
}
 80103bc:	4618      	mov	r0, r3
 80103be:	370c      	adds	r7, #12
 80103c0:	46bd      	mov	sp, r7
 80103c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103c6:	4770      	bx	lr

080103c8 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80103c8:	b580      	push	{r7, lr}
 80103ca:	b084      	sub	sp, #16
 80103cc:	af00      	add	r7, sp, #0
 80103ce:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80103d0:	2300      	movs	r3, #0
 80103d2:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80103d4:	687b      	ldr	r3, [r7, #4]
 80103d6:	2201      	movs	r2, #1
 80103d8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80103dc:	687b      	ldr	r3, [r7, #4]
 80103de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80103e2:	2b00      	cmp	r3, #0
 80103e4:	d00e      	beq.n	8010404 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80103e6:	687b      	ldr	r3, [r7, #4]
 80103e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80103ec:	685b      	ldr	r3, [r3, #4]
 80103ee:	687a      	ldr	r2, [r7, #4]
 80103f0:	6852      	ldr	r2, [r2, #4]
 80103f2:	b2d2      	uxtb	r2, r2
 80103f4:	4611      	mov	r1, r2
 80103f6:	6878      	ldr	r0, [r7, #4]
 80103f8:	4798      	blx	r3
 80103fa:	4603      	mov	r3, r0
 80103fc:	2b00      	cmp	r3, #0
 80103fe:	d001      	beq.n	8010404 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8010400:	2303      	movs	r3, #3
 8010402:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8010404:	7bfb      	ldrb	r3, [r7, #15]
}
 8010406:	4618      	mov	r0, r3
 8010408:	3710      	adds	r7, #16
 801040a:	46bd      	mov	sp, r7
 801040c:	bd80      	pop	{r7, pc}

0801040e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 801040e:	b480      	push	{r7}
 8010410:	b083      	sub	sp, #12
 8010412:	af00      	add	r7, sp, #0
 8010414:	6078      	str	r0, [r7, #4]
 8010416:	460b      	mov	r3, r1
 8010418:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 801041a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 801041c:	4618      	mov	r0, r3
 801041e:	370c      	adds	r7, #12
 8010420:	46bd      	mov	sp, r7
 8010422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010426:	4770      	bx	lr

08010428 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8010428:	b480      	push	{r7}
 801042a:	b083      	sub	sp, #12
 801042c:	af00      	add	r7, sp, #0
 801042e:	6078      	str	r0, [r7, #4]
 8010430:	460b      	mov	r3, r1
 8010432:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8010434:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8010436:	4618      	mov	r0, r3
 8010438:	370c      	adds	r7, #12
 801043a:	46bd      	mov	sp, r7
 801043c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010440:	4770      	bx	lr

08010442 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8010442:	b580      	push	{r7, lr}
 8010444:	b086      	sub	sp, #24
 8010446:	af00      	add	r7, sp, #0
 8010448:	6078      	str	r0, [r7, #4]
 801044a:	460b      	mov	r3, r1
 801044c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 801044e:	687b      	ldr	r3, [r7, #4]
 8010450:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8010452:	687b      	ldr	r3, [r7, #4]
 8010454:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8010456:	2300      	movs	r3, #0
 8010458:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 801045a:	68fb      	ldr	r3, [r7, #12]
 801045c:	885b      	ldrh	r3, [r3, #2]
 801045e:	b29b      	uxth	r3, r3
 8010460:	68fa      	ldr	r2, [r7, #12]
 8010462:	7812      	ldrb	r2, [r2, #0]
 8010464:	4293      	cmp	r3, r2
 8010466:	d91f      	bls.n	80104a8 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8010468:	68fb      	ldr	r3, [r7, #12]
 801046a:	781b      	ldrb	r3, [r3, #0]
 801046c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 801046e:	e013      	b.n	8010498 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8010470:	f107 030a 	add.w	r3, r7, #10
 8010474:	4619      	mov	r1, r3
 8010476:	6978      	ldr	r0, [r7, #20]
 8010478:	f000 f81b 	bl	80104b2 <USBD_GetNextDesc>
 801047c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 801047e:	697b      	ldr	r3, [r7, #20]
 8010480:	785b      	ldrb	r3, [r3, #1]
 8010482:	2b05      	cmp	r3, #5
 8010484:	d108      	bne.n	8010498 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8010486:	697b      	ldr	r3, [r7, #20]
 8010488:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 801048a:	693b      	ldr	r3, [r7, #16]
 801048c:	789b      	ldrb	r3, [r3, #2]
 801048e:	78fa      	ldrb	r2, [r7, #3]
 8010490:	429a      	cmp	r2, r3
 8010492:	d008      	beq.n	80104a6 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8010494:	2300      	movs	r3, #0
 8010496:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8010498:	68fb      	ldr	r3, [r7, #12]
 801049a:	885b      	ldrh	r3, [r3, #2]
 801049c:	b29a      	uxth	r2, r3
 801049e:	897b      	ldrh	r3, [r7, #10]
 80104a0:	429a      	cmp	r2, r3
 80104a2:	d8e5      	bhi.n	8010470 <USBD_GetEpDesc+0x2e>
 80104a4:	e000      	b.n	80104a8 <USBD_GetEpDesc+0x66>
          break;
 80104a6:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80104a8:	693b      	ldr	r3, [r7, #16]
}
 80104aa:	4618      	mov	r0, r3
 80104ac:	3718      	adds	r7, #24
 80104ae:	46bd      	mov	sp, r7
 80104b0:	bd80      	pop	{r7, pc}

080104b2 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80104b2:	b480      	push	{r7}
 80104b4:	b085      	sub	sp, #20
 80104b6:	af00      	add	r7, sp, #0
 80104b8:	6078      	str	r0, [r7, #4]
 80104ba:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80104bc:	687b      	ldr	r3, [r7, #4]
 80104be:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80104c0:	683b      	ldr	r3, [r7, #0]
 80104c2:	881b      	ldrh	r3, [r3, #0]
 80104c4:	68fa      	ldr	r2, [r7, #12]
 80104c6:	7812      	ldrb	r2, [r2, #0]
 80104c8:	4413      	add	r3, r2
 80104ca:	b29a      	uxth	r2, r3
 80104cc:	683b      	ldr	r3, [r7, #0]
 80104ce:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80104d0:	68fb      	ldr	r3, [r7, #12]
 80104d2:	781b      	ldrb	r3, [r3, #0]
 80104d4:	461a      	mov	r2, r3
 80104d6:	687b      	ldr	r3, [r7, #4]
 80104d8:	4413      	add	r3, r2
 80104da:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80104dc:	68fb      	ldr	r3, [r7, #12]
}
 80104de:	4618      	mov	r0, r3
 80104e0:	3714      	adds	r7, #20
 80104e2:	46bd      	mov	sp, r7
 80104e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104e8:	4770      	bx	lr

080104ea <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80104ea:	b480      	push	{r7}
 80104ec:	b087      	sub	sp, #28
 80104ee:	af00      	add	r7, sp, #0
 80104f0:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 80104f2:	687b      	ldr	r3, [r7, #4]
 80104f4:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80104f6:	697b      	ldr	r3, [r7, #20]
 80104f8:	781b      	ldrb	r3, [r3, #0]
 80104fa:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80104fc:	697b      	ldr	r3, [r7, #20]
 80104fe:	3301      	adds	r3, #1
 8010500:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8010502:	697b      	ldr	r3, [r7, #20]
 8010504:	781b      	ldrb	r3, [r3, #0]
 8010506:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8010508:	8a3b      	ldrh	r3, [r7, #16]
 801050a:	021b      	lsls	r3, r3, #8
 801050c:	b21a      	sxth	r2, r3
 801050e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8010512:	4313      	orrs	r3, r2
 8010514:	b21b      	sxth	r3, r3
 8010516:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8010518:	89fb      	ldrh	r3, [r7, #14]
}
 801051a:	4618      	mov	r0, r3
 801051c:	371c      	adds	r7, #28
 801051e:	46bd      	mov	sp, r7
 8010520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010524:	4770      	bx	lr
	...

08010528 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010528:	b580      	push	{r7, lr}
 801052a:	b084      	sub	sp, #16
 801052c:	af00      	add	r7, sp, #0
 801052e:	6078      	str	r0, [r7, #4]
 8010530:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8010532:	2300      	movs	r3, #0
 8010534:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010536:	683b      	ldr	r3, [r7, #0]
 8010538:	781b      	ldrb	r3, [r3, #0]
 801053a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801053e:	2b40      	cmp	r3, #64	@ 0x40
 8010540:	d005      	beq.n	801054e <USBD_StdDevReq+0x26>
 8010542:	2b40      	cmp	r3, #64	@ 0x40
 8010544:	d857      	bhi.n	80105f6 <USBD_StdDevReq+0xce>
 8010546:	2b00      	cmp	r3, #0
 8010548:	d00f      	beq.n	801056a <USBD_StdDevReq+0x42>
 801054a:	2b20      	cmp	r3, #32
 801054c:	d153      	bne.n	80105f6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 801054e:	687b      	ldr	r3, [r7, #4]
 8010550:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010554:	687b      	ldr	r3, [r7, #4]
 8010556:	32ae      	adds	r2, #174	@ 0xae
 8010558:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801055c:	689b      	ldr	r3, [r3, #8]
 801055e:	6839      	ldr	r1, [r7, #0]
 8010560:	6878      	ldr	r0, [r7, #4]
 8010562:	4798      	blx	r3
 8010564:	4603      	mov	r3, r0
 8010566:	73fb      	strb	r3, [r7, #15]
      break;
 8010568:	e04a      	b.n	8010600 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801056a:	683b      	ldr	r3, [r7, #0]
 801056c:	785b      	ldrb	r3, [r3, #1]
 801056e:	2b09      	cmp	r3, #9
 8010570:	d83b      	bhi.n	80105ea <USBD_StdDevReq+0xc2>
 8010572:	a201      	add	r2, pc, #4	@ (adr r2, 8010578 <USBD_StdDevReq+0x50>)
 8010574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010578:	080105cd 	.word	0x080105cd
 801057c:	080105e1 	.word	0x080105e1
 8010580:	080105eb 	.word	0x080105eb
 8010584:	080105d7 	.word	0x080105d7
 8010588:	080105eb 	.word	0x080105eb
 801058c:	080105ab 	.word	0x080105ab
 8010590:	080105a1 	.word	0x080105a1
 8010594:	080105eb 	.word	0x080105eb
 8010598:	080105c3 	.word	0x080105c3
 801059c:	080105b5 	.word	0x080105b5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80105a0:	6839      	ldr	r1, [r7, #0]
 80105a2:	6878      	ldr	r0, [r7, #4]
 80105a4:	f000 fa3c 	bl	8010a20 <USBD_GetDescriptor>
          break;
 80105a8:	e024      	b.n	80105f4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80105aa:	6839      	ldr	r1, [r7, #0]
 80105ac:	6878      	ldr	r0, [r7, #4]
 80105ae:	f000 fbcb 	bl	8010d48 <USBD_SetAddress>
          break;
 80105b2:	e01f      	b.n	80105f4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80105b4:	6839      	ldr	r1, [r7, #0]
 80105b6:	6878      	ldr	r0, [r7, #4]
 80105b8:	f000 fc0a 	bl	8010dd0 <USBD_SetConfig>
 80105bc:	4603      	mov	r3, r0
 80105be:	73fb      	strb	r3, [r7, #15]
          break;
 80105c0:	e018      	b.n	80105f4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80105c2:	6839      	ldr	r1, [r7, #0]
 80105c4:	6878      	ldr	r0, [r7, #4]
 80105c6:	f000 fcad 	bl	8010f24 <USBD_GetConfig>
          break;
 80105ca:	e013      	b.n	80105f4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80105cc:	6839      	ldr	r1, [r7, #0]
 80105ce:	6878      	ldr	r0, [r7, #4]
 80105d0:	f000 fcde 	bl	8010f90 <USBD_GetStatus>
          break;
 80105d4:	e00e      	b.n	80105f4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80105d6:	6839      	ldr	r1, [r7, #0]
 80105d8:	6878      	ldr	r0, [r7, #4]
 80105da:	f000 fd0d 	bl	8010ff8 <USBD_SetFeature>
          break;
 80105de:	e009      	b.n	80105f4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80105e0:	6839      	ldr	r1, [r7, #0]
 80105e2:	6878      	ldr	r0, [r7, #4]
 80105e4:	f000 fd31 	bl	801104a <USBD_ClrFeature>
          break;
 80105e8:	e004      	b.n	80105f4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80105ea:	6839      	ldr	r1, [r7, #0]
 80105ec:	6878      	ldr	r0, [r7, #4]
 80105ee:	f000 fd88 	bl	8011102 <USBD_CtlError>
          break;
 80105f2:	bf00      	nop
      }
      break;
 80105f4:	e004      	b.n	8010600 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80105f6:	6839      	ldr	r1, [r7, #0]
 80105f8:	6878      	ldr	r0, [r7, #4]
 80105fa:	f000 fd82 	bl	8011102 <USBD_CtlError>
      break;
 80105fe:	bf00      	nop
  }

  return ret;
 8010600:	7bfb      	ldrb	r3, [r7, #15]
}
 8010602:	4618      	mov	r0, r3
 8010604:	3710      	adds	r7, #16
 8010606:	46bd      	mov	sp, r7
 8010608:	bd80      	pop	{r7, pc}
 801060a:	bf00      	nop

0801060c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801060c:	b580      	push	{r7, lr}
 801060e:	b084      	sub	sp, #16
 8010610:	af00      	add	r7, sp, #0
 8010612:	6078      	str	r0, [r7, #4]
 8010614:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8010616:	2300      	movs	r3, #0
 8010618:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801061a:	683b      	ldr	r3, [r7, #0]
 801061c:	781b      	ldrb	r3, [r3, #0]
 801061e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8010622:	2b40      	cmp	r3, #64	@ 0x40
 8010624:	d005      	beq.n	8010632 <USBD_StdItfReq+0x26>
 8010626:	2b40      	cmp	r3, #64	@ 0x40
 8010628:	d852      	bhi.n	80106d0 <USBD_StdItfReq+0xc4>
 801062a:	2b00      	cmp	r3, #0
 801062c:	d001      	beq.n	8010632 <USBD_StdItfReq+0x26>
 801062e:	2b20      	cmp	r3, #32
 8010630:	d14e      	bne.n	80106d0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8010632:	687b      	ldr	r3, [r7, #4]
 8010634:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010638:	b2db      	uxtb	r3, r3
 801063a:	3b01      	subs	r3, #1
 801063c:	2b02      	cmp	r3, #2
 801063e:	d840      	bhi.n	80106c2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8010640:	683b      	ldr	r3, [r7, #0]
 8010642:	889b      	ldrh	r3, [r3, #4]
 8010644:	b2db      	uxtb	r3, r3
 8010646:	2b01      	cmp	r3, #1
 8010648:	d836      	bhi.n	80106b8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 801064a:	683b      	ldr	r3, [r7, #0]
 801064c:	889b      	ldrh	r3, [r3, #4]
 801064e:	b2db      	uxtb	r3, r3
 8010650:	4619      	mov	r1, r3
 8010652:	6878      	ldr	r0, [r7, #4]
 8010654:	f7ff fedb 	bl	801040e <USBD_CoreFindIF>
 8010658:	4603      	mov	r3, r0
 801065a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801065c:	7bbb      	ldrb	r3, [r7, #14]
 801065e:	2bff      	cmp	r3, #255	@ 0xff
 8010660:	d01d      	beq.n	801069e <USBD_StdItfReq+0x92>
 8010662:	7bbb      	ldrb	r3, [r7, #14]
 8010664:	2b00      	cmp	r3, #0
 8010666:	d11a      	bne.n	801069e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8010668:	7bba      	ldrb	r2, [r7, #14]
 801066a:	687b      	ldr	r3, [r7, #4]
 801066c:	32ae      	adds	r2, #174	@ 0xae
 801066e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010672:	689b      	ldr	r3, [r3, #8]
 8010674:	2b00      	cmp	r3, #0
 8010676:	d00f      	beq.n	8010698 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8010678:	7bba      	ldrb	r2, [r7, #14]
 801067a:	687b      	ldr	r3, [r7, #4]
 801067c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8010680:	7bba      	ldrb	r2, [r7, #14]
 8010682:	687b      	ldr	r3, [r7, #4]
 8010684:	32ae      	adds	r2, #174	@ 0xae
 8010686:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801068a:	689b      	ldr	r3, [r3, #8]
 801068c:	6839      	ldr	r1, [r7, #0]
 801068e:	6878      	ldr	r0, [r7, #4]
 8010690:	4798      	blx	r3
 8010692:	4603      	mov	r3, r0
 8010694:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8010696:	e004      	b.n	80106a2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8010698:	2303      	movs	r3, #3
 801069a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 801069c:	e001      	b.n	80106a2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 801069e:	2303      	movs	r3, #3
 80106a0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80106a2:	683b      	ldr	r3, [r7, #0]
 80106a4:	88db      	ldrh	r3, [r3, #6]
 80106a6:	2b00      	cmp	r3, #0
 80106a8:	d110      	bne.n	80106cc <USBD_StdItfReq+0xc0>
 80106aa:	7bfb      	ldrb	r3, [r7, #15]
 80106ac:	2b00      	cmp	r3, #0
 80106ae:	d10d      	bne.n	80106cc <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80106b0:	6878      	ldr	r0, [r7, #4]
 80106b2:	f000 fdfd 	bl	80112b0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80106b6:	e009      	b.n	80106cc <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80106b8:	6839      	ldr	r1, [r7, #0]
 80106ba:	6878      	ldr	r0, [r7, #4]
 80106bc:	f000 fd21 	bl	8011102 <USBD_CtlError>
          break;
 80106c0:	e004      	b.n	80106cc <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80106c2:	6839      	ldr	r1, [r7, #0]
 80106c4:	6878      	ldr	r0, [r7, #4]
 80106c6:	f000 fd1c 	bl	8011102 <USBD_CtlError>
          break;
 80106ca:	e000      	b.n	80106ce <USBD_StdItfReq+0xc2>
          break;
 80106cc:	bf00      	nop
      }
      break;
 80106ce:	e004      	b.n	80106da <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80106d0:	6839      	ldr	r1, [r7, #0]
 80106d2:	6878      	ldr	r0, [r7, #4]
 80106d4:	f000 fd15 	bl	8011102 <USBD_CtlError>
      break;
 80106d8:	bf00      	nop
  }

  return ret;
 80106da:	7bfb      	ldrb	r3, [r7, #15]
}
 80106dc:	4618      	mov	r0, r3
 80106de:	3710      	adds	r7, #16
 80106e0:	46bd      	mov	sp, r7
 80106e2:	bd80      	pop	{r7, pc}

080106e4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80106e4:	b580      	push	{r7, lr}
 80106e6:	b084      	sub	sp, #16
 80106e8:	af00      	add	r7, sp, #0
 80106ea:	6078      	str	r0, [r7, #4]
 80106ec:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80106ee:	2300      	movs	r3, #0
 80106f0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80106f2:	683b      	ldr	r3, [r7, #0]
 80106f4:	889b      	ldrh	r3, [r3, #4]
 80106f6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80106f8:	683b      	ldr	r3, [r7, #0]
 80106fa:	781b      	ldrb	r3, [r3, #0]
 80106fc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8010700:	2b40      	cmp	r3, #64	@ 0x40
 8010702:	d007      	beq.n	8010714 <USBD_StdEPReq+0x30>
 8010704:	2b40      	cmp	r3, #64	@ 0x40
 8010706:	f200 817f 	bhi.w	8010a08 <USBD_StdEPReq+0x324>
 801070a:	2b00      	cmp	r3, #0
 801070c:	d02a      	beq.n	8010764 <USBD_StdEPReq+0x80>
 801070e:	2b20      	cmp	r3, #32
 8010710:	f040 817a 	bne.w	8010a08 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8010714:	7bbb      	ldrb	r3, [r7, #14]
 8010716:	4619      	mov	r1, r3
 8010718:	6878      	ldr	r0, [r7, #4]
 801071a:	f7ff fe85 	bl	8010428 <USBD_CoreFindEP>
 801071e:	4603      	mov	r3, r0
 8010720:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8010722:	7b7b      	ldrb	r3, [r7, #13]
 8010724:	2bff      	cmp	r3, #255	@ 0xff
 8010726:	f000 8174 	beq.w	8010a12 <USBD_StdEPReq+0x32e>
 801072a:	7b7b      	ldrb	r3, [r7, #13]
 801072c:	2b00      	cmp	r3, #0
 801072e:	f040 8170 	bne.w	8010a12 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8010732:	7b7a      	ldrb	r2, [r7, #13]
 8010734:	687b      	ldr	r3, [r7, #4]
 8010736:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 801073a:	7b7a      	ldrb	r2, [r7, #13]
 801073c:	687b      	ldr	r3, [r7, #4]
 801073e:	32ae      	adds	r2, #174	@ 0xae
 8010740:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010744:	689b      	ldr	r3, [r3, #8]
 8010746:	2b00      	cmp	r3, #0
 8010748:	f000 8163 	beq.w	8010a12 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 801074c:	7b7a      	ldrb	r2, [r7, #13]
 801074e:	687b      	ldr	r3, [r7, #4]
 8010750:	32ae      	adds	r2, #174	@ 0xae
 8010752:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010756:	689b      	ldr	r3, [r3, #8]
 8010758:	6839      	ldr	r1, [r7, #0]
 801075a:	6878      	ldr	r0, [r7, #4]
 801075c:	4798      	blx	r3
 801075e:	4603      	mov	r3, r0
 8010760:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8010762:	e156      	b.n	8010a12 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8010764:	683b      	ldr	r3, [r7, #0]
 8010766:	785b      	ldrb	r3, [r3, #1]
 8010768:	2b03      	cmp	r3, #3
 801076a:	d008      	beq.n	801077e <USBD_StdEPReq+0x9a>
 801076c:	2b03      	cmp	r3, #3
 801076e:	f300 8145 	bgt.w	80109fc <USBD_StdEPReq+0x318>
 8010772:	2b00      	cmp	r3, #0
 8010774:	f000 809b 	beq.w	80108ae <USBD_StdEPReq+0x1ca>
 8010778:	2b01      	cmp	r3, #1
 801077a:	d03c      	beq.n	80107f6 <USBD_StdEPReq+0x112>
 801077c:	e13e      	b.n	80109fc <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 801077e:	687b      	ldr	r3, [r7, #4]
 8010780:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010784:	b2db      	uxtb	r3, r3
 8010786:	2b02      	cmp	r3, #2
 8010788:	d002      	beq.n	8010790 <USBD_StdEPReq+0xac>
 801078a:	2b03      	cmp	r3, #3
 801078c:	d016      	beq.n	80107bc <USBD_StdEPReq+0xd8>
 801078e:	e02c      	b.n	80107ea <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8010790:	7bbb      	ldrb	r3, [r7, #14]
 8010792:	2b00      	cmp	r3, #0
 8010794:	d00d      	beq.n	80107b2 <USBD_StdEPReq+0xce>
 8010796:	7bbb      	ldrb	r3, [r7, #14]
 8010798:	2b80      	cmp	r3, #128	@ 0x80
 801079a:	d00a      	beq.n	80107b2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 801079c:	7bbb      	ldrb	r3, [r7, #14]
 801079e:	4619      	mov	r1, r3
 80107a0:	6878      	ldr	r0, [r7, #4]
 80107a2:	f001 f9d9 	bl	8011b58 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80107a6:	2180      	movs	r1, #128	@ 0x80
 80107a8:	6878      	ldr	r0, [r7, #4]
 80107aa:	f001 f9d5 	bl	8011b58 <USBD_LL_StallEP>
 80107ae:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80107b0:	e020      	b.n	80107f4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80107b2:	6839      	ldr	r1, [r7, #0]
 80107b4:	6878      	ldr	r0, [r7, #4]
 80107b6:	f000 fca4 	bl	8011102 <USBD_CtlError>
              break;
 80107ba:	e01b      	b.n	80107f4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80107bc:	683b      	ldr	r3, [r7, #0]
 80107be:	885b      	ldrh	r3, [r3, #2]
 80107c0:	2b00      	cmp	r3, #0
 80107c2:	d10e      	bne.n	80107e2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80107c4:	7bbb      	ldrb	r3, [r7, #14]
 80107c6:	2b00      	cmp	r3, #0
 80107c8:	d00b      	beq.n	80107e2 <USBD_StdEPReq+0xfe>
 80107ca:	7bbb      	ldrb	r3, [r7, #14]
 80107cc:	2b80      	cmp	r3, #128	@ 0x80
 80107ce:	d008      	beq.n	80107e2 <USBD_StdEPReq+0xfe>
 80107d0:	683b      	ldr	r3, [r7, #0]
 80107d2:	88db      	ldrh	r3, [r3, #6]
 80107d4:	2b00      	cmp	r3, #0
 80107d6:	d104      	bne.n	80107e2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80107d8:	7bbb      	ldrb	r3, [r7, #14]
 80107da:	4619      	mov	r1, r3
 80107dc:	6878      	ldr	r0, [r7, #4]
 80107de:	f001 f9bb 	bl	8011b58 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80107e2:	6878      	ldr	r0, [r7, #4]
 80107e4:	f000 fd64 	bl	80112b0 <USBD_CtlSendStatus>

              break;
 80107e8:	e004      	b.n	80107f4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80107ea:	6839      	ldr	r1, [r7, #0]
 80107ec:	6878      	ldr	r0, [r7, #4]
 80107ee:	f000 fc88 	bl	8011102 <USBD_CtlError>
              break;
 80107f2:	bf00      	nop
          }
          break;
 80107f4:	e107      	b.n	8010a06 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80107f6:	687b      	ldr	r3, [r7, #4]
 80107f8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80107fc:	b2db      	uxtb	r3, r3
 80107fe:	2b02      	cmp	r3, #2
 8010800:	d002      	beq.n	8010808 <USBD_StdEPReq+0x124>
 8010802:	2b03      	cmp	r3, #3
 8010804:	d016      	beq.n	8010834 <USBD_StdEPReq+0x150>
 8010806:	e04b      	b.n	80108a0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8010808:	7bbb      	ldrb	r3, [r7, #14]
 801080a:	2b00      	cmp	r3, #0
 801080c:	d00d      	beq.n	801082a <USBD_StdEPReq+0x146>
 801080e:	7bbb      	ldrb	r3, [r7, #14]
 8010810:	2b80      	cmp	r3, #128	@ 0x80
 8010812:	d00a      	beq.n	801082a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8010814:	7bbb      	ldrb	r3, [r7, #14]
 8010816:	4619      	mov	r1, r3
 8010818:	6878      	ldr	r0, [r7, #4]
 801081a:	f001 f99d 	bl	8011b58 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801081e:	2180      	movs	r1, #128	@ 0x80
 8010820:	6878      	ldr	r0, [r7, #4]
 8010822:	f001 f999 	bl	8011b58 <USBD_LL_StallEP>
 8010826:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8010828:	e040      	b.n	80108ac <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 801082a:	6839      	ldr	r1, [r7, #0]
 801082c:	6878      	ldr	r0, [r7, #4]
 801082e:	f000 fc68 	bl	8011102 <USBD_CtlError>
              break;
 8010832:	e03b      	b.n	80108ac <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8010834:	683b      	ldr	r3, [r7, #0]
 8010836:	885b      	ldrh	r3, [r3, #2]
 8010838:	2b00      	cmp	r3, #0
 801083a:	d136      	bne.n	80108aa <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 801083c:	7bbb      	ldrb	r3, [r7, #14]
 801083e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010842:	2b00      	cmp	r3, #0
 8010844:	d004      	beq.n	8010850 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8010846:	7bbb      	ldrb	r3, [r7, #14]
 8010848:	4619      	mov	r1, r3
 801084a:	6878      	ldr	r0, [r7, #4]
 801084c:	f001 f9a3 	bl	8011b96 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8010850:	6878      	ldr	r0, [r7, #4]
 8010852:	f000 fd2d 	bl	80112b0 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8010856:	7bbb      	ldrb	r3, [r7, #14]
 8010858:	4619      	mov	r1, r3
 801085a:	6878      	ldr	r0, [r7, #4]
 801085c:	f7ff fde4 	bl	8010428 <USBD_CoreFindEP>
 8010860:	4603      	mov	r3, r0
 8010862:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8010864:	7b7b      	ldrb	r3, [r7, #13]
 8010866:	2bff      	cmp	r3, #255	@ 0xff
 8010868:	d01f      	beq.n	80108aa <USBD_StdEPReq+0x1c6>
 801086a:	7b7b      	ldrb	r3, [r7, #13]
 801086c:	2b00      	cmp	r3, #0
 801086e:	d11c      	bne.n	80108aa <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8010870:	7b7a      	ldrb	r2, [r7, #13]
 8010872:	687b      	ldr	r3, [r7, #4]
 8010874:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8010878:	7b7a      	ldrb	r2, [r7, #13]
 801087a:	687b      	ldr	r3, [r7, #4]
 801087c:	32ae      	adds	r2, #174	@ 0xae
 801087e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010882:	689b      	ldr	r3, [r3, #8]
 8010884:	2b00      	cmp	r3, #0
 8010886:	d010      	beq.n	80108aa <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8010888:	7b7a      	ldrb	r2, [r7, #13]
 801088a:	687b      	ldr	r3, [r7, #4]
 801088c:	32ae      	adds	r2, #174	@ 0xae
 801088e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010892:	689b      	ldr	r3, [r3, #8]
 8010894:	6839      	ldr	r1, [r7, #0]
 8010896:	6878      	ldr	r0, [r7, #4]
 8010898:	4798      	blx	r3
 801089a:	4603      	mov	r3, r0
 801089c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 801089e:	e004      	b.n	80108aa <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80108a0:	6839      	ldr	r1, [r7, #0]
 80108a2:	6878      	ldr	r0, [r7, #4]
 80108a4:	f000 fc2d 	bl	8011102 <USBD_CtlError>
              break;
 80108a8:	e000      	b.n	80108ac <USBD_StdEPReq+0x1c8>
              break;
 80108aa:	bf00      	nop
          }
          break;
 80108ac:	e0ab      	b.n	8010a06 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80108ae:	687b      	ldr	r3, [r7, #4]
 80108b0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80108b4:	b2db      	uxtb	r3, r3
 80108b6:	2b02      	cmp	r3, #2
 80108b8:	d002      	beq.n	80108c0 <USBD_StdEPReq+0x1dc>
 80108ba:	2b03      	cmp	r3, #3
 80108bc:	d032      	beq.n	8010924 <USBD_StdEPReq+0x240>
 80108be:	e097      	b.n	80109f0 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80108c0:	7bbb      	ldrb	r3, [r7, #14]
 80108c2:	2b00      	cmp	r3, #0
 80108c4:	d007      	beq.n	80108d6 <USBD_StdEPReq+0x1f2>
 80108c6:	7bbb      	ldrb	r3, [r7, #14]
 80108c8:	2b80      	cmp	r3, #128	@ 0x80
 80108ca:	d004      	beq.n	80108d6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80108cc:	6839      	ldr	r1, [r7, #0]
 80108ce:	6878      	ldr	r0, [r7, #4]
 80108d0:	f000 fc17 	bl	8011102 <USBD_CtlError>
                break;
 80108d4:	e091      	b.n	80109fa <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80108d6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80108da:	2b00      	cmp	r3, #0
 80108dc:	da0b      	bge.n	80108f6 <USBD_StdEPReq+0x212>
 80108de:	7bbb      	ldrb	r3, [r7, #14]
 80108e0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80108e4:	4613      	mov	r3, r2
 80108e6:	009b      	lsls	r3, r3, #2
 80108e8:	4413      	add	r3, r2
 80108ea:	009b      	lsls	r3, r3, #2
 80108ec:	3310      	adds	r3, #16
 80108ee:	687a      	ldr	r2, [r7, #4]
 80108f0:	4413      	add	r3, r2
 80108f2:	3304      	adds	r3, #4
 80108f4:	e00b      	b.n	801090e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80108f6:	7bbb      	ldrb	r3, [r7, #14]
 80108f8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80108fc:	4613      	mov	r3, r2
 80108fe:	009b      	lsls	r3, r3, #2
 8010900:	4413      	add	r3, r2
 8010902:	009b      	lsls	r3, r3, #2
 8010904:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8010908:	687a      	ldr	r2, [r7, #4]
 801090a:	4413      	add	r3, r2
 801090c:	3304      	adds	r3, #4
 801090e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8010910:	68bb      	ldr	r3, [r7, #8]
 8010912:	2200      	movs	r2, #0
 8010914:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8010916:	68bb      	ldr	r3, [r7, #8]
 8010918:	2202      	movs	r2, #2
 801091a:	4619      	mov	r1, r3
 801091c:	6878      	ldr	r0, [r7, #4]
 801091e:	f000 fc6d 	bl	80111fc <USBD_CtlSendData>
              break;
 8010922:	e06a      	b.n	80109fa <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8010924:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010928:	2b00      	cmp	r3, #0
 801092a:	da11      	bge.n	8010950 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 801092c:	7bbb      	ldrb	r3, [r7, #14]
 801092e:	f003 020f 	and.w	r2, r3, #15
 8010932:	6879      	ldr	r1, [r7, #4]
 8010934:	4613      	mov	r3, r2
 8010936:	009b      	lsls	r3, r3, #2
 8010938:	4413      	add	r3, r2
 801093a:	009b      	lsls	r3, r3, #2
 801093c:	440b      	add	r3, r1
 801093e:	3324      	adds	r3, #36	@ 0x24
 8010940:	881b      	ldrh	r3, [r3, #0]
 8010942:	2b00      	cmp	r3, #0
 8010944:	d117      	bne.n	8010976 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8010946:	6839      	ldr	r1, [r7, #0]
 8010948:	6878      	ldr	r0, [r7, #4]
 801094a:	f000 fbda 	bl	8011102 <USBD_CtlError>
                  break;
 801094e:	e054      	b.n	80109fa <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8010950:	7bbb      	ldrb	r3, [r7, #14]
 8010952:	f003 020f 	and.w	r2, r3, #15
 8010956:	6879      	ldr	r1, [r7, #4]
 8010958:	4613      	mov	r3, r2
 801095a:	009b      	lsls	r3, r3, #2
 801095c:	4413      	add	r3, r2
 801095e:	009b      	lsls	r3, r3, #2
 8010960:	440b      	add	r3, r1
 8010962:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8010966:	881b      	ldrh	r3, [r3, #0]
 8010968:	2b00      	cmp	r3, #0
 801096a:	d104      	bne.n	8010976 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 801096c:	6839      	ldr	r1, [r7, #0]
 801096e:	6878      	ldr	r0, [r7, #4]
 8010970:	f000 fbc7 	bl	8011102 <USBD_CtlError>
                  break;
 8010974:	e041      	b.n	80109fa <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010976:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801097a:	2b00      	cmp	r3, #0
 801097c:	da0b      	bge.n	8010996 <USBD_StdEPReq+0x2b2>
 801097e:	7bbb      	ldrb	r3, [r7, #14]
 8010980:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8010984:	4613      	mov	r3, r2
 8010986:	009b      	lsls	r3, r3, #2
 8010988:	4413      	add	r3, r2
 801098a:	009b      	lsls	r3, r3, #2
 801098c:	3310      	adds	r3, #16
 801098e:	687a      	ldr	r2, [r7, #4]
 8010990:	4413      	add	r3, r2
 8010992:	3304      	adds	r3, #4
 8010994:	e00b      	b.n	80109ae <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8010996:	7bbb      	ldrb	r3, [r7, #14]
 8010998:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801099c:	4613      	mov	r3, r2
 801099e:	009b      	lsls	r3, r3, #2
 80109a0:	4413      	add	r3, r2
 80109a2:	009b      	lsls	r3, r3, #2
 80109a4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80109a8:	687a      	ldr	r2, [r7, #4]
 80109aa:	4413      	add	r3, r2
 80109ac:	3304      	adds	r3, #4
 80109ae:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80109b0:	7bbb      	ldrb	r3, [r7, #14]
 80109b2:	2b00      	cmp	r3, #0
 80109b4:	d002      	beq.n	80109bc <USBD_StdEPReq+0x2d8>
 80109b6:	7bbb      	ldrb	r3, [r7, #14]
 80109b8:	2b80      	cmp	r3, #128	@ 0x80
 80109ba:	d103      	bne.n	80109c4 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80109bc:	68bb      	ldr	r3, [r7, #8]
 80109be:	2200      	movs	r2, #0
 80109c0:	601a      	str	r2, [r3, #0]
 80109c2:	e00e      	b.n	80109e2 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80109c4:	7bbb      	ldrb	r3, [r7, #14]
 80109c6:	4619      	mov	r1, r3
 80109c8:	6878      	ldr	r0, [r7, #4]
 80109ca:	f001 f903 	bl	8011bd4 <USBD_LL_IsStallEP>
 80109ce:	4603      	mov	r3, r0
 80109d0:	2b00      	cmp	r3, #0
 80109d2:	d003      	beq.n	80109dc <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80109d4:	68bb      	ldr	r3, [r7, #8]
 80109d6:	2201      	movs	r2, #1
 80109d8:	601a      	str	r2, [r3, #0]
 80109da:	e002      	b.n	80109e2 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80109dc:	68bb      	ldr	r3, [r7, #8]
 80109de:	2200      	movs	r2, #0
 80109e0:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80109e2:	68bb      	ldr	r3, [r7, #8]
 80109e4:	2202      	movs	r2, #2
 80109e6:	4619      	mov	r1, r3
 80109e8:	6878      	ldr	r0, [r7, #4]
 80109ea:	f000 fc07 	bl	80111fc <USBD_CtlSendData>
              break;
 80109ee:	e004      	b.n	80109fa <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80109f0:	6839      	ldr	r1, [r7, #0]
 80109f2:	6878      	ldr	r0, [r7, #4]
 80109f4:	f000 fb85 	bl	8011102 <USBD_CtlError>
              break;
 80109f8:	bf00      	nop
          }
          break;
 80109fa:	e004      	b.n	8010a06 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80109fc:	6839      	ldr	r1, [r7, #0]
 80109fe:	6878      	ldr	r0, [r7, #4]
 8010a00:	f000 fb7f 	bl	8011102 <USBD_CtlError>
          break;
 8010a04:	bf00      	nop
      }
      break;
 8010a06:	e005      	b.n	8010a14 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8010a08:	6839      	ldr	r1, [r7, #0]
 8010a0a:	6878      	ldr	r0, [r7, #4]
 8010a0c:	f000 fb79 	bl	8011102 <USBD_CtlError>
      break;
 8010a10:	e000      	b.n	8010a14 <USBD_StdEPReq+0x330>
      break;
 8010a12:	bf00      	nop
  }

  return ret;
 8010a14:	7bfb      	ldrb	r3, [r7, #15]
}
 8010a16:	4618      	mov	r0, r3
 8010a18:	3710      	adds	r7, #16
 8010a1a:	46bd      	mov	sp, r7
 8010a1c:	bd80      	pop	{r7, pc}
	...

08010a20 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010a20:	b580      	push	{r7, lr}
 8010a22:	b084      	sub	sp, #16
 8010a24:	af00      	add	r7, sp, #0
 8010a26:	6078      	str	r0, [r7, #4]
 8010a28:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8010a2a:	2300      	movs	r3, #0
 8010a2c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8010a2e:	2300      	movs	r3, #0
 8010a30:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8010a32:	2300      	movs	r3, #0
 8010a34:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8010a36:	683b      	ldr	r3, [r7, #0]
 8010a38:	885b      	ldrh	r3, [r3, #2]
 8010a3a:	0a1b      	lsrs	r3, r3, #8
 8010a3c:	b29b      	uxth	r3, r3
 8010a3e:	3b01      	subs	r3, #1
 8010a40:	2b0e      	cmp	r3, #14
 8010a42:	f200 8152 	bhi.w	8010cea <USBD_GetDescriptor+0x2ca>
 8010a46:	a201      	add	r2, pc, #4	@ (adr r2, 8010a4c <USBD_GetDescriptor+0x2c>)
 8010a48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010a4c:	08010abd 	.word	0x08010abd
 8010a50:	08010ad5 	.word	0x08010ad5
 8010a54:	08010b15 	.word	0x08010b15
 8010a58:	08010ceb 	.word	0x08010ceb
 8010a5c:	08010ceb 	.word	0x08010ceb
 8010a60:	08010c8b 	.word	0x08010c8b
 8010a64:	08010cb7 	.word	0x08010cb7
 8010a68:	08010ceb 	.word	0x08010ceb
 8010a6c:	08010ceb 	.word	0x08010ceb
 8010a70:	08010ceb 	.word	0x08010ceb
 8010a74:	08010ceb 	.word	0x08010ceb
 8010a78:	08010ceb 	.word	0x08010ceb
 8010a7c:	08010ceb 	.word	0x08010ceb
 8010a80:	08010ceb 	.word	0x08010ceb
 8010a84:	08010a89 	.word	0x08010a89
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8010a88:	687b      	ldr	r3, [r7, #4]
 8010a8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010a8e:	69db      	ldr	r3, [r3, #28]
 8010a90:	2b00      	cmp	r3, #0
 8010a92:	d00b      	beq.n	8010aac <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8010a94:	687b      	ldr	r3, [r7, #4]
 8010a96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010a9a:	69db      	ldr	r3, [r3, #28]
 8010a9c:	687a      	ldr	r2, [r7, #4]
 8010a9e:	7c12      	ldrb	r2, [r2, #16]
 8010aa0:	f107 0108 	add.w	r1, r7, #8
 8010aa4:	4610      	mov	r0, r2
 8010aa6:	4798      	blx	r3
 8010aa8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8010aaa:	e126      	b.n	8010cfa <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8010aac:	6839      	ldr	r1, [r7, #0]
 8010aae:	6878      	ldr	r0, [r7, #4]
 8010ab0:	f000 fb27 	bl	8011102 <USBD_CtlError>
        err++;
 8010ab4:	7afb      	ldrb	r3, [r7, #11]
 8010ab6:	3301      	adds	r3, #1
 8010ab8:	72fb      	strb	r3, [r7, #11]
      break;
 8010aba:	e11e      	b.n	8010cfa <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8010abc:	687b      	ldr	r3, [r7, #4]
 8010abe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010ac2:	681b      	ldr	r3, [r3, #0]
 8010ac4:	687a      	ldr	r2, [r7, #4]
 8010ac6:	7c12      	ldrb	r2, [r2, #16]
 8010ac8:	f107 0108 	add.w	r1, r7, #8
 8010acc:	4610      	mov	r0, r2
 8010ace:	4798      	blx	r3
 8010ad0:	60f8      	str	r0, [r7, #12]
      break;
 8010ad2:	e112      	b.n	8010cfa <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010ad4:	687b      	ldr	r3, [r7, #4]
 8010ad6:	7c1b      	ldrb	r3, [r3, #16]
 8010ad8:	2b00      	cmp	r3, #0
 8010ada:	d10d      	bne.n	8010af8 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8010adc:	687b      	ldr	r3, [r7, #4]
 8010ade:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010ae2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010ae4:	f107 0208 	add.w	r2, r7, #8
 8010ae8:	4610      	mov	r0, r2
 8010aea:	4798      	blx	r3
 8010aec:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8010aee:	68fb      	ldr	r3, [r7, #12]
 8010af0:	3301      	adds	r3, #1
 8010af2:	2202      	movs	r2, #2
 8010af4:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8010af6:	e100      	b.n	8010cfa <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8010af8:	687b      	ldr	r3, [r7, #4]
 8010afa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010afe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010b00:	f107 0208 	add.w	r2, r7, #8
 8010b04:	4610      	mov	r0, r2
 8010b06:	4798      	blx	r3
 8010b08:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8010b0a:	68fb      	ldr	r3, [r7, #12]
 8010b0c:	3301      	adds	r3, #1
 8010b0e:	2202      	movs	r2, #2
 8010b10:	701a      	strb	r2, [r3, #0]
      break;
 8010b12:	e0f2      	b.n	8010cfa <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8010b14:	683b      	ldr	r3, [r7, #0]
 8010b16:	885b      	ldrh	r3, [r3, #2]
 8010b18:	b2db      	uxtb	r3, r3
 8010b1a:	2b05      	cmp	r3, #5
 8010b1c:	f200 80ac 	bhi.w	8010c78 <USBD_GetDescriptor+0x258>
 8010b20:	a201      	add	r2, pc, #4	@ (adr r2, 8010b28 <USBD_GetDescriptor+0x108>)
 8010b22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010b26:	bf00      	nop
 8010b28:	08010b41 	.word	0x08010b41
 8010b2c:	08010b75 	.word	0x08010b75
 8010b30:	08010ba9 	.word	0x08010ba9
 8010b34:	08010bdd 	.word	0x08010bdd
 8010b38:	08010c11 	.word	0x08010c11
 8010b3c:	08010c45 	.word	0x08010c45
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8010b40:	687b      	ldr	r3, [r7, #4]
 8010b42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010b46:	685b      	ldr	r3, [r3, #4]
 8010b48:	2b00      	cmp	r3, #0
 8010b4a:	d00b      	beq.n	8010b64 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8010b4c:	687b      	ldr	r3, [r7, #4]
 8010b4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010b52:	685b      	ldr	r3, [r3, #4]
 8010b54:	687a      	ldr	r2, [r7, #4]
 8010b56:	7c12      	ldrb	r2, [r2, #16]
 8010b58:	f107 0108 	add.w	r1, r7, #8
 8010b5c:	4610      	mov	r0, r2
 8010b5e:	4798      	blx	r3
 8010b60:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010b62:	e091      	b.n	8010c88 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8010b64:	6839      	ldr	r1, [r7, #0]
 8010b66:	6878      	ldr	r0, [r7, #4]
 8010b68:	f000 facb 	bl	8011102 <USBD_CtlError>
            err++;
 8010b6c:	7afb      	ldrb	r3, [r7, #11]
 8010b6e:	3301      	adds	r3, #1
 8010b70:	72fb      	strb	r3, [r7, #11]
          break;
 8010b72:	e089      	b.n	8010c88 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8010b74:	687b      	ldr	r3, [r7, #4]
 8010b76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010b7a:	689b      	ldr	r3, [r3, #8]
 8010b7c:	2b00      	cmp	r3, #0
 8010b7e:	d00b      	beq.n	8010b98 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8010b80:	687b      	ldr	r3, [r7, #4]
 8010b82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010b86:	689b      	ldr	r3, [r3, #8]
 8010b88:	687a      	ldr	r2, [r7, #4]
 8010b8a:	7c12      	ldrb	r2, [r2, #16]
 8010b8c:	f107 0108 	add.w	r1, r7, #8
 8010b90:	4610      	mov	r0, r2
 8010b92:	4798      	blx	r3
 8010b94:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010b96:	e077      	b.n	8010c88 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8010b98:	6839      	ldr	r1, [r7, #0]
 8010b9a:	6878      	ldr	r0, [r7, #4]
 8010b9c:	f000 fab1 	bl	8011102 <USBD_CtlError>
            err++;
 8010ba0:	7afb      	ldrb	r3, [r7, #11]
 8010ba2:	3301      	adds	r3, #1
 8010ba4:	72fb      	strb	r3, [r7, #11]
          break;
 8010ba6:	e06f      	b.n	8010c88 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8010ba8:	687b      	ldr	r3, [r7, #4]
 8010baa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010bae:	68db      	ldr	r3, [r3, #12]
 8010bb0:	2b00      	cmp	r3, #0
 8010bb2:	d00b      	beq.n	8010bcc <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8010bb4:	687b      	ldr	r3, [r7, #4]
 8010bb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010bba:	68db      	ldr	r3, [r3, #12]
 8010bbc:	687a      	ldr	r2, [r7, #4]
 8010bbe:	7c12      	ldrb	r2, [r2, #16]
 8010bc0:	f107 0108 	add.w	r1, r7, #8
 8010bc4:	4610      	mov	r0, r2
 8010bc6:	4798      	blx	r3
 8010bc8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010bca:	e05d      	b.n	8010c88 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8010bcc:	6839      	ldr	r1, [r7, #0]
 8010bce:	6878      	ldr	r0, [r7, #4]
 8010bd0:	f000 fa97 	bl	8011102 <USBD_CtlError>
            err++;
 8010bd4:	7afb      	ldrb	r3, [r7, #11]
 8010bd6:	3301      	adds	r3, #1
 8010bd8:	72fb      	strb	r3, [r7, #11]
          break;
 8010bda:	e055      	b.n	8010c88 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8010bdc:	687b      	ldr	r3, [r7, #4]
 8010bde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010be2:	691b      	ldr	r3, [r3, #16]
 8010be4:	2b00      	cmp	r3, #0
 8010be6:	d00b      	beq.n	8010c00 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8010be8:	687b      	ldr	r3, [r7, #4]
 8010bea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010bee:	691b      	ldr	r3, [r3, #16]
 8010bf0:	687a      	ldr	r2, [r7, #4]
 8010bf2:	7c12      	ldrb	r2, [r2, #16]
 8010bf4:	f107 0108 	add.w	r1, r7, #8
 8010bf8:	4610      	mov	r0, r2
 8010bfa:	4798      	blx	r3
 8010bfc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010bfe:	e043      	b.n	8010c88 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8010c00:	6839      	ldr	r1, [r7, #0]
 8010c02:	6878      	ldr	r0, [r7, #4]
 8010c04:	f000 fa7d 	bl	8011102 <USBD_CtlError>
            err++;
 8010c08:	7afb      	ldrb	r3, [r7, #11]
 8010c0a:	3301      	adds	r3, #1
 8010c0c:	72fb      	strb	r3, [r7, #11]
          break;
 8010c0e:	e03b      	b.n	8010c88 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8010c10:	687b      	ldr	r3, [r7, #4]
 8010c12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010c16:	695b      	ldr	r3, [r3, #20]
 8010c18:	2b00      	cmp	r3, #0
 8010c1a:	d00b      	beq.n	8010c34 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8010c1c:	687b      	ldr	r3, [r7, #4]
 8010c1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010c22:	695b      	ldr	r3, [r3, #20]
 8010c24:	687a      	ldr	r2, [r7, #4]
 8010c26:	7c12      	ldrb	r2, [r2, #16]
 8010c28:	f107 0108 	add.w	r1, r7, #8
 8010c2c:	4610      	mov	r0, r2
 8010c2e:	4798      	blx	r3
 8010c30:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010c32:	e029      	b.n	8010c88 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8010c34:	6839      	ldr	r1, [r7, #0]
 8010c36:	6878      	ldr	r0, [r7, #4]
 8010c38:	f000 fa63 	bl	8011102 <USBD_CtlError>
            err++;
 8010c3c:	7afb      	ldrb	r3, [r7, #11]
 8010c3e:	3301      	adds	r3, #1
 8010c40:	72fb      	strb	r3, [r7, #11]
          break;
 8010c42:	e021      	b.n	8010c88 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8010c44:	687b      	ldr	r3, [r7, #4]
 8010c46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010c4a:	699b      	ldr	r3, [r3, #24]
 8010c4c:	2b00      	cmp	r3, #0
 8010c4e:	d00b      	beq.n	8010c68 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8010c50:	687b      	ldr	r3, [r7, #4]
 8010c52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010c56:	699b      	ldr	r3, [r3, #24]
 8010c58:	687a      	ldr	r2, [r7, #4]
 8010c5a:	7c12      	ldrb	r2, [r2, #16]
 8010c5c:	f107 0108 	add.w	r1, r7, #8
 8010c60:	4610      	mov	r0, r2
 8010c62:	4798      	blx	r3
 8010c64:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010c66:	e00f      	b.n	8010c88 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8010c68:	6839      	ldr	r1, [r7, #0]
 8010c6a:	6878      	ldr	r0, [r7, #4]
 8010c6c:	f000 fa49 	bl	8011102 <USBD_CtlError>
            err++;
 8010c70:	7afb      	ldrb	r3, [r7, #11]
 8010c72:	3301      	adds	r3, #1
 8010c74:	72fb      	strb	r3, [r7, #11]
          break;
 8010c76:	e007      	b.n	8010c88 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8010c78:	6839      	ldr	r1, [r7, #0]
 8010c7a:	6878      	ldr	r0, [r7, #4]
 8010c7c:	f000 fa41 	bl	8011102 <USBD_CtlError>
          err++;
 8010c80:	7afb      	ldrb	r3, [r7, #11]
 8010c82:	3301      	adds	r3, #1
 8010c84:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8010c86:	bf00      	nop
      }
      break;
 8010c88:	e037      	b.n	8010cfa <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010c8a:	687b      	ldr	r3, [r7, #4]
 8010c8c:	7c1b      	ldrb	r3, [r3, #16]
 8010c8e:	2b00      	cmp	r3, #0
 8010c90:	d109      	bne.n	8010ca6 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8010c92:	687b      	ldr	r3, [r7, #4]
 8010c94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010c98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010c9a:	f107 0208 	add.w	r2, r7, #8
 8010c9e:	4610      	mov	r0, r2
 8010ca0:	4798      	blx	r3
 8010ca2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8010ca4:	e029      	b.n	8010cfa <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8010ca6:	6839      	ldr	r1, [r7, #0]
 8010ca8:	6878      	ldr	r0, [r7, #4]
 8010caa:	f000 fa2a 	bl	8011102 <USBD_CtlError>
        err++;
 8010cae:	7afb      	ldrb	r3, [r7, #11]
 8010cb0:	3301      	adds	r3, #1
 8010cb2:	72fb      	strb	r3, [r7, #11]
      break;
 8010cb4:	e021      	b.n	8010cfa <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010cb6:	687b      	ldr	r3, [r7, #4]
 8010cb8:	7c1b      	ldrb	r3, [r3, #16]
 8010cba:	2b00      	cmp	r3, #0
 8010cbc:	d10d      	bne.n	8010cda <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8010cbe:	687b      	ldr	r3, [r7, #4]
 8010cc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010cc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010cc6:	f107 0208 	add.w	r2, r7, #8
 8010cca:	4610      	mov	r0, r2
 8010ccc:	4798      	blx	r3
 8010cce:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8010cd0:	68fb      	ldr	r3, [r7, #12]
 8010cd2:	3301      	adds	r3, #1
 8010cd4:	2207      	movs	r2, #7
 8010cd6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8010cd8:	e00f      	b.n	8010cfa <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8010cda:	6839      	ldr	r1, [r7, #0]
 8010cdc:	6878      	ldr	r0, [r7, #4]
 8010cde:	f000 fa10 	bl	8011102 <USBD_CtlError>
        err++;
 8010ce2:	7afb      	ldrb	r3, [r7, #11]
 8010ce4:	3301      	adds	r3, #1
 8010ce6:	72fb      	strb	r3, [r7, #11]
      break;
 8010ce8:	e007      	b.n	8010cfa <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8010cea:	6839      	ldr	r1, [r7, #0]
 8010cec:	6878      	ldr	r0, [r7, #4]
 8010cee:	f000 fa08 	bl	8011102 <USBD_CtlError>
      err++;
 8010cf2:	7afb      	ldrb	r3, [r7, #11]
 8010cf4:	3301      	adds	r3, #1
 8010cf6:	72fb      	strb	r3, [r7, #11]
      break;
 8010cf8:	bf00      	nop
  }

  if (err != 0U)
 8010cfa:	7afb      	ldrb	r3, [r7, #11]
 8010cfc:	2b00      	cmp	r3, #0
 8010cfe:	d11e      	bne.n	8010d3e <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8010d00:	683b      	ldr	r3, [r7, #0]
 8010d02:	88db      	ldrh	r3, [r3, #6]
 8010d04:	2b00      	cmp	r3, #0
 8010d06:	d016      	beq.n	8010d36 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8010d08:	893b      	ldrh	r3, [r7, #8]
 8010d0a:	2b00      	cmp	r3, #0
 8010d0c:	d00e      	beq.n	8010d2c <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8010d0e:	683b      	ldr	r3, [r7, #0]
 8010d10:	88da      	ldrh	r2, [r3, #6]
 8010d12:	893b      	ldrh	r3, [r7, #8]
 8010d14:	4293      	cmp	r3, r2
 8010d16:	bf28      	it	cs
 8010d18:	4613      	movcs	r3, r2
 8010d1a:	b29b      	uxth	r3, r3
 8010d1c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8010d1e:	893b      	ldrh	r3, [r7, #8]
 8010d20:	461a      	mov	r2, r3
 8010d22:	68f9      	ldr	r1, [r7, #12]
 8010d24:	6878      	ldr	r0, [r7, #4]
 8010d26:	f000 fa69 	bl	80111fc <USBD_CtlSendData>
 8010d2a:	e009      	b.n	8010d40 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8010d2c:	6839      	ldr	r1, [r7, #0]
 8010d2e:	6878      	ldr	r0, [r7, #4]
 8010d30:	f000 f9e7 	bl	8011102 <USBD_CtlError>
 8010d34:	e004      	b.n	8010d40 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8010d36:	6878      	ldr	r0, [r7, #4]
 8010d38:	f000 faba 	bl	80112b0 <USBD_CtlSendStatus>
 8010d3c:	e000      	b.n	8010d40 <USBD_GetDescriptor+0x320>
    return;
 8010d3e:	bf00      	nop
  }
}
 8010d40:	3710      	adds	r7, #16
 8010d42:	46bd      	mov	sp, r7
 8010d44:	bd80      	pop	{r7, pc}
 8010d46:	bf00      	nop

08010d48 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010d48:	b580      	push	{r7, lr}
 8010d4a:	b084      	sub	sp, #16
 8010d4c:	af00      	add	r7, sp, #0
 8010d4e:	6078      	str	r0, [r7, #4]
 8010d50:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8010d52:	683b      	ldr	r3, [r7, #0]
 8010d54:	889b      	ldrh	r3, [r3, #4]
 8010d56:	2b00      	cmp	r3, #0
 8010d58:	d131      	bne.n	8010dbe <USBD_SetAddress+0x76>
 8010d5a:	683b      	ldr	r3, [r7, #0]
 8010d5c:	88db      	ldrh	r3, [r3, #6]
 8010d5e:	2b00      	cmp	r3, #0
 8010d60:	d12d      	bne.n	8010dbe <USBD_SetAddress+0x76>
 8010d62:	683b      	ldr	r3, [r7, #0]
 8010d64:	885b      	ldrh	r3, [r3, #2]
 8010d66:	2b7f      	cmp	r3, #127	@ 0x7f
 8010d68:	d829      	bhi.n	8010dbe <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8010d6a:	683b      	ldr	r3, [r7, #0]
 8010d6c:	885b      	ldrh	r3, [r3, #2]
 8010d6e:	b2db      	uxtb	r3, r3
 8010d70:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010d74:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010d76:	687b      	ldr	r3, [r7, #4]
 8010d78:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010d7c:	b2db      	uxtb	r3, r3
 8010d7e:	2b03      	cmp	r3, #3
 8010d80:	d104      	bne.n	8010d8c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8010d82:	6839      	ldr	r1, [r7, #0]
 8010d84:	6878      	ldr	r0, [r7, #4]
 8010d86:	f000 f9bc 	bl	8011102 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010d8a:	e01d      	b.n	8010dc8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8010d8c:	687b      	ldr	r3, [r7, #4]
 8010d8e:	7bfa      	ldrb	r2, [r7, #15]
 8010d90:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8010d94:	7bfb      	ldrb	r3, [r7, #15]
 8010d96:	4619      	mov	r1, r3
 8010d98:	6878      	ldr	r0, [r7, #4]
 8010d9a:	f000 ff47 	bl	8011c2c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8010d9e:	6878      	ldr	r0, [r7, #4]
 8010da0:	f000 fa86 	bl	80112b0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8010da4:	7bfb      	ldrb	r3, [r7, #15]
 8010da6:	2b00      	cmp	r3, #0
 8010da8:	d004      	beq.n	8010db4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8010daa:	687b      	ldr	r3, [r7, #4]
 8010dac:	2202      	movs	r2, #2
 8010dae:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010db2:	e009      	b.n	8010dc8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8010db4:	687b      	ldr	r3, [r7, #4]
 8010db6:	2201      	movs	r2, #1
 8010db8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010dbc:	e004      	b.n	8010dc8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8010dbe:	6839      	ldr	r1, [r7, #0]
 8010dc0:	6878      	ldr	r0, [r7, #4]
 8010dc2:	f000 f99e 	bl	8011102 <USBD_CtlError>
  }
}
 8010dc6:	bf00      	nop
 8010dc8:	bf00      	nop
 8010dca:	3710      	adds	r7, #16
 8010dcc:	46bd      	mov	sp, r7
 8010dce:	bd80      	pop	{r7, pc}

08010dd0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010dd0:	b580      	push	{r7, lr}
 8010dd2:	b084      	sub	sp, #16
 8010dd4:	af00      	add	r7, sp, #0
 8010dd6:	6078      	str	r0, [r7, #4]
 8010dd8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8010dda:	2300      	movs	r3, #0
 8010ddc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8010dde:	683b      	ldr	r3, [r7, #0]
 8010de0:	885b      	ldrh	r3, [r3, #2]
 8010de2:	b2da      	uxtb	r2, r3
 8010de4:	4b4e      	ldr	r3, [pc, #312]	@ (8010f20 <USBD_SetConfig+0x150>)
 8010de6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8010de8:	4b4d      	ldr	r3, [pc, #308]	@ (8010f20 <USBD_SetConfig+0x150>)
 8010dea:	781b      	ldrb	r3, [r3, #0]
 8010dec:	2b01      	cmp	r3, #1
 8010dee:	d905      	bls.n	8010dfc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8010df0:	6839      	ldr	r1, [r7, #0]
 8010df2:	6878      	ldr	r0, [r7, #4]
 8010df4:	f000 f985 	bl	8011102 <USBD_CtlError>
    return USBD_FAIL;
 8010df8:	2303      	movs	r3, #3
 8010dfa:	e08c      	b.n	8010f16 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8010dfc:	687b      	ldr	r3, [r7, #4]
 8010dfe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010e02:	b2db      	uxtb	r3, r3
 8010e04:	2b02      	cmp	r3, #2
 8010e06:	d002      	beq.n	8010e0e <USBD_SetConfig+0x3e>
 8010e08:	2b03      	cmp	r3, #3
 8010e0a:	d029      	beq.n	8010e60 <USBD_SetConfig+0x90>
 8010e0c:	e075      	b.n	8010efa <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8010e0e:	4b44      	ldr	r3, [pc, #272]	@ (8010f20 <USBD_SetConfig+0x150>)
 8010e10:	781b      	ldrb	r3, [r3, #0]
 8010e12:	2b00      	cmp	r3, #0
 8010e14:	d020      	beq.n	8010e58 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8010e16:	4b42      	ldr	r3, [pc, #264]	@ (8010f20 <USBD_SetConfig+0x150>)
 8010e18:	781b      	ldrb	r3, [r3, #0]
 8010e1a:	461a      	mov	r2, r3
 8010e1c:	687b      	ldr	r3, [r7, #4]
 8010e1e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8010e20:	4b3f      	ldr	r3, [pc, #252]	@ (8010f20 <USBD_SetConfig+0x150>)
 8010e22:	781b      	ldrb	r3, [r3, #0]
 8010e24:	4619      	mov	r1, r3
 8010e26:	6878      	ldr	r0, [r7, #4]
 8010e28:	f7fe ffb9 	bl	800fd9e <USBD_SetClassConfig>
 8010e2c:	4603      	mov	r3, r0
 8010e2e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8010e30:	7bfb      	ldrb	r3, [r7, #15]
 8010e32:	2b00      	cmp	r3, #0
 8010e34:	d008      	beq.n	8010e48 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8010e36:	6839      	ldr	r1, [r7, #0]
 8010e38:	6878      	ldr	r0, [r7, #4]
 8010e3a:	f000 f962 	bl	8011102 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8010e3e:	687b      	ldr	r3, [r7, #4]
 8010e40:	2202      	movs	r2, #2
 8010e42:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8010e46:	e065      	b.n	8010f14 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8010e48:	6878      	ldr	r0, [r7, #4]
 8010e4a:	f000 fa31 	bl	80112b0 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8010e4e:	687b      	ldr	r3, [r7, #4]
 8010e50:	2203      	movs	r2, #3
 8010e52:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8010e56:	e05d      	b.n	8010f14 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8010e58:	6878      	ldr	r0, [r7, #4]
 8010e5a:	f000 fa29 	bl	80112b0 <USBD_CtlSendStatus>
      break;
 8010e5e:	e059      	b.n	8010f14 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8010e60:	4b2f      	ldr	r3, [pc, #188]	@ (8010f20 <USBD_SetConfig+0x150>)
 8010e62:	781b      	ldrb	r3, [r3, #0]
 8010e64:	2b00      	cmp	r3, #0
 8010e66:	d112      	bne.n	8010e8e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8010e68:	687b      	ldr	r3, [r7, #4]
 8010e6a:	2202      	movs	r2, #2
 8010e6c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8010e70:	4b2b      	ldr	r3, [pc, #172]	@ (8010f20 <USBD_SetConfig+0x150>)
 8010e72:	781b      	ldrb	r3, [r3, #0]
 8010e74:	461a      	mov	r2, r3
 8010e76:	687b      	ldr	r3, [r7, #4]
 8010e78:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8010e7a:	4b29      	ldr	r3, [pc, #164]	@ (8010f20 <USBD_SetConfig+0x150>)
 8010e7c:	781b      	ldrb	r3, [r3, #0]
 8010e7e:	4619      	mov	r1, r3
 8010e80:	6878      	ldr	r0, [r7, #4]
 8010e82:	f7fe ffa8 	bl	800fdd6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8010e86:	6878      	ldr	r0, [r7, #4]
 8010e88:	f000 fa12 	bl	80112b0 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8010e8c:	e042      	b.n	8010f14 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8010e8e:	4b24      	ldr	r3, [pc, #144]	@ (8010f20 <USBD_SetConfig+0x150>)
 8010e90:	781b      	ldrb	r3, [r3, #0]
 8010e92:	461a      	mov	r2, r3
 8010e94:	687b      	ldr	r3, [r7, #4]
 8010e96:	685b      	ldr	r3, [r3, #4]
 8010e98:	429a      	cmp	r2, r3
 8010e9a:	d02a      	beq.n	8010ef2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8010e9c:	687b      	ldr	r3, [r7, #4]
 8010e9e:	685b      	ldr	r3, [r3, #4]
 8010ea0:	b2db      	uxtb	r3, r3
 8010ea2:	4619      	mov	r1, r3
 8010ea4:	6878      	ldr	r0, [r7, #4]
 8010ea6:	f7fe ff96 	bl	800fdd6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8010eaa:	4b1d      	ldr	r3, [pc, #116]	@ (8010f20 <USBD_SetConfig+0x150>)
 8010eac:	781b      	ldrb	r3, [r3, #0]
 8010eae:	461a      	mov	r2, r3
 8010eb0:	687b      	ldr	r3, [r7, #4]
 8010eb2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8010eb4:	4b1a      	ldr	r3, [pc, #104]	@ (8010f20 <USBD_SetConfig+0x150>)
 8010eb6:	781b      	ldrb	r3, [r3, #0]
 8010eb8:	4619      	mov	r1, r3
 8010eba:	6878      	ldr	r0, [r7, #4]
 8010ebc:	f7fe ff6f 	bl	800fd9e <USBD_SetClassConfig>
 8010ec0:	4603      	mov	r3, r0
 8010ec2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8010ec4:	7bfb      	ldrb	r3, [r7, #15]
 8010ec6:	2b00      	cmp	r3, #0
 8010ec8:	d00f      	beq.n	8010eea <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8010eca:	6839      	ldr	r1, [r7, #0]
 8010ecc:	6878      	ldr	r0, [r7, #4]
 8010ece:	f000 f918 	bl	8011102 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8010ed2:	687b      	ldr	r3, [r7, #4]
 8010ed4:	685b      	ldr	r3, [r3, #4]
 8010ed6:	b2db      	uxtb	r3, r3
 8010ed8:	4619      	mov	r1, r3
 8010eda:	6878      	ldr	r0, [r7, #4]
 8010edc:	f7fe ff7b 	bl	800fdd6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8010ee0:	687b      	ldr	r3, [r7, #4]
 8010ee2:	2202      	movs	r2, #2
 8010ee4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8010ee8:	e014      	b.n	8010f14 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8010eea:	6878      	ldr	r0, [r7, #4]
 8010eec:	f000 f9e0 	bl	80112b0 <USBD_CtlSendStatus>
      break;
 8010ef0:	e010      	b.n	8010f14 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8010ef2:	6878      	ldr	r0, [r7, #4]
 8010ef4:	f000 f9dc 	bl	80112b0 <USBD_CtlSendStatus>
      break;
 8010ef8:	e00c      	b.n	8010f14 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8010efa:	6839      	ldr	r1, [r7, #0]
 8010efc:	6878      	ldr	r0, [r7, #4]
 8010efe:	f000 f900 	bl	8011102 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8010f02:	4b07      	ldr	r3, [pc, #28]	@ (8010f20 <USBD_SetConfig+0x150>)
 8010f04:	781b      	ldrb	r3, [r3, #0]
 8010f06:	4619      	mov	r1, r3
 8010f08:	6878      	ldr	r0, [r7, #4]
 8010f0a:	f7fe ff64 	bl	800fdd6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8010f0e:	2303      	movs	r3, #3
 8010f10:	73fb      	strb	r3, [r7, #15]
      break;
 8010f12:	bf00      	nop
  }

  return ret;
 8010f14:	7bfb      	ldrb	r3, [r7, #15]
}
 8010f16:	4618      	mov	r0, r3
 8010f18:	3710      	adds	r7, #16
 8010f1a:	46bd      	mov	sp, r7
 8010f1c:	bd80      	pop	{r7, pc}
 8010f1e:	bf00      	nop
 8010f20:	24000a48 	.word	0x24000a48

08010f24 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010f24:	b580      	push	{r7, lr}
 8010f26:	b082      	sub	sp, #8
 8010f28:	af00      	add	r7, sp, #0
 8010f2a:	6078      	str	r0, [r7, #4]
 8010f2c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8010f2e:	683b      	ldr	r3, [r7, #0]
 8010f30:	88db      	ldrh	r3, [r3, #6]
 8010f32:	2b01      	cmp	r3, #1
 8010f34:	d004      	beq.n	8010f40 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8010f36:	6839      	ldr	r1, [r7, #0]
 8010f38:	6878      	ldr	r0, [r7, #4]
 8010f3a:	f000 f8e2 	bl	8011102 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8010f3e:	e023      	b.n	8010f88 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8010f40:	687b      	ldr	r3, [r7, #4]
 8010f42:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010f46:	b2db      	uxtb	r3, r3
 8010f48:	2b02      	cmp	r3, #2
 8010f4a:	dc02      	bgt.n	8010f52 <USBD_GetConfig+0x2e>
 8010f4c:	2b00      	cmp	r3, #0
 8010f4e:	dc03      	bgt.n	8010f58 <USBD_GetConfig+0x34>
 8010f50:	e015      	b.n	8010f7e <USBD_GetConfig+0x5a>
 8010f52:	2b03      	cmp	r3, #3
 8010f54:	d00b      	beq.n	8010f6e <USBD_GetConfig+0x4a>
 8010f56:	e012      	b.n	8010f7e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8010f58:	687b      	ldr	r3, [r7, #4]
 8010f5a:	2200      	movs	r2, #0
 8010f5c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8010f5e:	687b      	ldr	r3, [r7, #4]
 8010f60:	3308      	adds	r3, #8
 8010f62:	2201      	movs	r2, #1
 8010f64:	4619      	mov	r1, r3
 8010f66:	6878      	ldr	r0, [r7, #4]
 8010f68:	f000 f948 	bl	80111fc <USBD_CtlSendData>
        break;
 8010f6c:	e00c      	b.n	8010f88 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8010f6e:	687b      	ldr	r3, [r7, #4]
 8010f70:	3304      	adds	r3, #4
 8010f72:	2201      	movs	r2, #1
 8010f74:	4619      	mov	r1, r3
 8010f76:	6878      	ldr	r0, [r7, #4]
 8010f78:	f000 f940 	bl	80111fc <USBD_CtlSendData>
        break;
 8010f7c:	e004      	b.n	8010f88 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8010f7e:	6839      	ldr	r1, [r7, #0]
 8010f80:	6878      	ldr	r0, [r7, #4]
 8010f82:	f000 f8be 	bl	8011102 <USBD_CtlError>
        break;
 8010f86:	bf00      	nop
}
 8010f88:	bf00      	nop
 8010f8a:	3708      	adds	r7, #8
 8010f8c:	46bd      	mov	sp, r7
 8010f8e:	bd80      	pop	{r7, pc}

08010f90 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010f90:	b580      	push	{r7, lr}
 8010f92:	b082      	sub	sp, #8
 8010f94:	af00      	add	r7, sp, #0
 8010f96:	6078      	str	r0, [r7, #4]
 8010f98:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8010f9a:	687b      	ldr	r3, [r7, #4]
 8010f9c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010fa0:	b2db      	uxtb	r3, r3
 8010fa2:	3b01      	subs	r3, #1
 8010fa4:	2b02      	cmp	r3, #2
 8010fa6:	d81e      	bhi.n	8010fe6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8010fa8:	683b      	ldr	r3, [r7, #0]
 8010faa:	88db      	ldrh	r3, [r3, #6]
 8010fac:	2b02      	cmp	r3, #2
 8010fae:	d004      	beq.n	8010fba <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8010fb0:	6839      	ldr	r1, [r7, #0]
 8010fb2:	6878      	ldr	r0, [r7, #4]
 8010fb4:	f000 f8a5 	bl	8011102 <USBD_CtlError>
        break;
 8010fb8:	e01a      	b.n	8010ff0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8010fba:	687b      	ldr	r3, [r7, #4]
 8010fbc:	2201      	movs	r2, #1
 8010fbe:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8010fc0:	687b      	ldr	r3, [r7, #4]
 8010fc2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8010fc6:	2b00      	cmp	r3, #0
 8010fc8:	d005      	beq.n	8010fd6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8010fca:	687b      	ldr	r3, [r7, #4]
 8010fcc:	68db      	ldr	r3, [r3, #12]
 8010fce:	f043 0202 	orr.w	r2, r3, #2
 8010fd2:	687b      	ldr	r3, [r7, #4]
 8010fd4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8010fd6:	687b      	ldr	r3, [r7, #4]
 8010fd8:	330c      	adds	r3, #12
 8010fda:	2202      	movs	r2, #2
 8010fdc:	4619      	mov	r1, r3
 8010fde:	6878      	ldr	r0, [r7, #4]
 8010fe0:	f000 f90c 	bl	80111fc <USBD_CtlSendData>
      break;
 8010fe4:	e004      	b.n	8010ff0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8010fe6:	6839      	ldr	r1, [r7, #0]
 8010fe8:	6878      	ldr	r0, [r7, #4]
 8010fea:	f000 f88a 	bl	8011102 <USBD_CtlError>
      break;
 8010fee:	bf00      	nop
  }
}
 8010ff0:	bf00      	nop
 8010ff2:	3708      	adds	r7, #8
 8010ff4:	46bd      	mov	sp, r7
 8010ff6:	bd80      	pop	{r7, pc}

08010ff8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010ff8:	b580      	push	{r7, lr}
 8010ffa:	b082      	sub	sp, #8
 8010ffc:	af00      	add	r7, sp, #0
 8010ffe:	6078      	str	r0, [r7, #4]
 8011000:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8011002:	683b      	ldr	r3, [r7, #0]
 8011004:	885b      	ldrh	r3, [r3, #2]
 8011006:	2b01      	cmp	r3, #1
 8011008:	d107      	bne.n	801101a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 801100a:	687b      	ldr	r3, [r7, #4]
 801100c:	2201      	movs	r2, #1
 801100e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8011012:	6878      	ldr	r0, [r7, #4]
 8011014:	f000 f94c 	bl	80112b0 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8011018:	e013      	b.n	8011042 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 801101a:	683b      	ldr	r3, [r7, #0]
 801101c:	885b      	ldrh	r3, [r3, #2]
 801101e:	2b02      	cmp	r3, #2
 8011020:	d10b      	bne.n	801103a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8011022:	683b      	ldr	r3, [r7, #0]
 8011024:	889b      	ldrh	r3, [r3, #4]
 8011026:	0a1b      	lsrs	r3, r3, #8
 8011028:	b29b      	uxth	r3, r3
 801102a:	b2da      	uxtb	r2, r3
 801102c:	687b      	ldr	r3, [r7, #4]
 801102e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8011032:	6878      	ldr	r0, [r7, #4]
 8011034:	f000 f93c 	bl	80112b0 <USBD_CtlSendStatus>
}
 8011038:	e003      	b.n	8011042 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 801103a:	6839      	ldr	r1, [r7, #0]
 801103c:	6878      	ldr	r0, [r7, #4]
 801103e:	f000 f860 	bl	8011102 <USBD_CtlError>
}
 8011042:	bf00      	nop
 8011044:	3708      	adds	r7, #8
 8011046:	46bd      	mov	sp, r7
 8011048:	bd80      	pop	{r7, pc}

0801104a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801104a:	b580      	push	{r7, lr}
 801104c:	b082      	sub	sp, #8
 801104e:	af00      	add	r7, sp, #0
 8011050:	6078      	str	r0, [r7, #4]
 8011052:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8011054:	687b      	ldr	r3, [r7, #4]
 8011056:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801105a:	b2db      	uxtb	r3, r3
 801105c:	3b01      	subs	r3, #1
 801105e:	2b02      	cmp	r3, #2
 8011060:	d80b      	bhi.n	801107a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8011062:	683b      	ldr	r3, [r7, #0]
 8011064:	885b      	ldrh	r3, [r3, #2]
 8011066:	2b01      	cmp	r3, #1
 8011068:	d10c      	bne.n	8011084 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 801106a:	687b      	ldr	r3, [r7, #4]
 801106c:	2200      	movs	r2, #0
 801106e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8011072:	6878      	ldr	r0, [r7, #4]
 8011074:	f000 f91c 	bl	80112b0 <USBD_CtlSendStatus>
      }
      break;
 8011078:	e004      	b.n	8011084 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 801107a:	6839      	ldr	r1, [r7, #0]
 801107c:	6878      	ldr	r0, [r7, #4]
 801107e:	f000 f840 	bl	8011102 <USBD_CtlError>
      break;
 8011082:	e000      	b.n	8011086 <USBD_ClrFeature+0x3c>
      break;
 8011084:	bf00      	nop
  }
}
 8011086:	bf00      	nop
 8011088:	3708      	adds	r7, #8
 801108a:	46bd      	mov	sp, r7
 801108c:	bd80      	pop	{r7, pc}

0801108e <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 801108e:	b580      	push	{r7, lr}
 8011090:	b084      	sub	sp, #16
 8011092:	af00      	add	r7, sp, #0
 8011094:	6078      	str	r0, [r7, #4]
 8011096:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8011098:	683b      	ldr	r3, [r7, #0]
 801109a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 801109c:	68fb      	ldr	r3, [r7, #12]
 801109e:	781a      	ldrb	r2, [r3, #0]
 80110a0:	687b      	ldr	r3, [r7, #4]
 80110a2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80110a4:	68fb      	ldr	r3, [r7, #12]
 80110a6:	3301      	adds	r3, #1
 80110a8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80110aa:	68fb      	ldr	r3, [r7, #12]
 80110ac:	781a      	ldrb	r2, [r3, #0]
 80110ae:	687b      	ldr	r3, [r7, #4]
 80110b0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80110b2:	68fb      	ldr	r3, [r7, #12]
 80110b4:	3301      	adds	r3, #1
 80110b6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80110b8:	68f8      	ldr	r0, [r7, #12]
 80110ba:	f7ff fa16 	bl	80104ea <SWAPBYTE>
 80110be:	4603      	mov	r3, r0
 80110c0:	461a      	mov	r2, r3
 80110c2:	687b      	ldr	r3, [r7, #4]
 80110c4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80110c6:	68fb      	ldr	r3, [r7, #12]
 80110c8:	3301      	adds	r3, #1
 80110ca:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80110cc:	68fb      	ldr	r3, [r7, #12]
 80110ce:	3301      	adds	r3, #1
 80110d0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80110d2:	68f8      	ldr	r0, [r7, #12]
 80110d4:	f7ff fa09 	bl	80104ea <SWAPBYTE>
 80110d8:	4603      	mov	r3, r0
 80110da:	461a      	mov	r2, r3
 80110dc:	687b      	ldr	r3, [r7, #4]
 80110de:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80110e0:	68fb      	ldr	r3, [r7, #12]
 80110e2:	3301      	adds	r3, #1
 80110e4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80110e6:	68fb      	ldr	r3, [r7, #12]
 80110e8:	3301      	adds	r3, #1
 80110ea:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80110ec:	68f8      	ldr	r0, [r7, #12]
 80110ee:	f7ff f9fc 	bl	80104ea <SWAPBYTE>
 80110f2:	4603      	mov	r3, r0
 80110f4:	461a      	mov	r2, r3
 80110f6:	687b      	ldr	r3, [r7, #4]
 80110f8:	80da      	strh	r2, [r3, #6]
}
 80110fa:	bf00      	nop
 80110fc:	3710      	adds	r7, #16
 80110fe:	46bd      	mov	sp, r7
 8011100:	bd80      	pop	{r7, pc}

08011102 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011102:	b580      	push	{r7, lr}
 8011104:	b082      	sub	sp, #8
 8011106:	af00      	add	r7, sp, #0
 8011108:	6078      	str	r0, [r7, #4]
 801110a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 801110c:	2180      	movs	r1, #128	@ 0x80
 801110e:	6878      	ldr	r0, [r7, #4]
 8011110:	f000 fd22 	bl	8011b58 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8011114:	2100      	movs	r1, #0
 8011116:	6878      	ldr	r0, [r7, #4]
 8011118:	f000 fd1e 	bl	8011b58 <USBD_LL_StallEP>
}
 801111c:	bf00      	nop
 801111e:	3708      	adds	r7, #8
 8011120:	46bd      	mov	sp, r7
 8011122:	bd80      	pop	{r7, pc}

08011124 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8011124:	b580      	push	{r7, lr}
 8011126:	b086      	sub	sp, #24
 8011128:	af00      	add	r7, sp, #0
 801112a:	60f8      	str	r0, [r7, #12]
 801112c:	60b9      	str	r1, [r7, #8]
 801112e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8011130:	2300      	movs	r3, #0
 8011132:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8011134:	68fb      	ldr	r3, [r7, #12]
 8011136:	2b00      	cmp	r3, #0
 8011138:	d042      	beq.n	80111c0 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 801113a:	68fb      	ldr	r3, [r7, #12]
 801113c:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 801113e:	6938      	ldr	r0, [r7, #16]
 8011140:	f000 f842 	bl	80111c8 <USBD_GetLen>
 8011144:	4603      	mov	r3, r0
 8011146:	3301      	adds	r3, #1
 8011148:	005b      	lsls	r3, r3, #1
 801114a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801114e:	d808      	bhi.n	8011162 <USBD_GetString+0x3e>
 8011150:	6938      	ldr	r0, [r7, #16]
 8011152:	f000 f839 	bl	80111c8 <USBD_GetLen>
 8011156:	4603      	mov	r3, r0
 8011158:	3301      	adds	r3, #1
 801115a:	b29b      	uxth	r3, r3
 801115c:	005b      	lsls	r3, r3, #1
 801115e:	b29a      	uxth	r2, r3
 8011160:	e001      	b.n	8011166 <USBD_GetString+0x42>
 8011162:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011166:	687b      	ldr	r3, [r7, #4]
 8011168:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 801116a:	7dfb      	ldrb	r3, [r7, #23]
 801116c:	68ba      	ldr	r2, [r7, #8]
 801116e:	4413      	add	r3, r2
 8011170:	687a      	ldr	r2, [r7, #4]
 8011172:	7812      	ldrb	r2, [r2, #0]
 8011174:	701a      	strb	r2, [r3, #0]
  idx++;
 8011176:	7dfb      	ldrb	r3, [r7, #23]
 8011178:	3301      	adds	r3, #1
 801117a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 801117c:	7dfb      	ldrb	r3, [r7, #23]
 801117e:	68ba      	ldr	r2, [r7, #8]
 8011180:	4413      	add	r3, r2
 8011182:	2203      	movs	r2, #3
 8011184:	701a      	strb	r2, [r3, #0]
  idx++;
 8011186:	7dfb      	ldrb	r3, [r7, #23]
 8011188:	3301      	adds	r3, #1
 801118a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 801118c:	e013      	b.n	80111b6 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 801118e:	7dfb      	ldrb	r3, [r7, #23]
 8011190:	68ba      	ldr	r2, [r7, #8]
 8011192:	4413      	add	r3, r2
 8011194:	693a      	ldr	r2, [r7, #16]
 8011196:	7812      	ldrb	r2, [r2, #0]
 8011198:	701a      	strb	r2, [r3, #0]
    pdesc++;
 801119a:	693b      	ldr	r3, [r7, #16]
 801119c:	3301      	adds	r3, #1
 801119e:	613b      	str	r3, [r7, #16]
    idx++;
 80111a0:	7dfb      	ldrb	r3, [r7, #23]
 80111a2:	3301      	adds	r3, #1
 80111a4:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80111a6:	7dfb      	ldrb	r3, [r7, #23]
 80111a8:	68ba      	ldr	r2, [r7, #8]
 80111aa:	4413      	add	r3, r2
 80111ac:	2200      	movs	r2, #0
 80111ae:	701a      	strb	r2, [r3, #0]
    idx++;
 80111b0:	7dfb      	ldrb	r3, [r7, #23]
 80111b2:	3301      	adds	r3, #1
 80111b4:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80111b6:	693b      	ldr	r3, [r7, #16]
 80111b8:	781b      	ldrb	r3, [r3, #0]
 80111ba:	2b00      	cmp	r3, #0
 80111bc:	d1e7      	bne.n	801118e <USBD_GetString+0x6a>
 80111be:	e000      	b.n	80111c2 <USBD_GetString+0x9e>
    return;
 80111c0:	bf00      	nop
  }
}
 80111c2:	3718      	adds	r7, #24
 80111c4:	46bd      	mov	sp, r7
 80111c6:	bd80      	pop	{r7, pc}

080111c8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80111c8:	b480      	push	{r7}
 80111ca:	b085      	sub	sp, #20
 80111cc:	af00      	add	r7, sp, #0
 80111ce:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80111d0:	2300      	movs	r3, #0
 80111d2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80111d4:	687b      	ldr	r3, [r7, #4]
 80111d6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80111d8:	e005      	b.n	80111e6 <USBD_GetLen+0x1e>
  {
    len++;
 80111da:	7bfb      	ldrb	r3, [r7, #15]
 80111dc:	3301      	adds	r3, #1
 80111de:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80111e0:	68bb      	ldr	r3, [r7, #8]
 80111e2:	3301      	adds	r3, #1
 80111e4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80111e6:	68bb      	ldr	r3, [r7, #8]
 80111e8:	781b      	ldrb	r3, [r3, #0]
 80111ea:	2b00      	cmp	r3, #0
 80111ec:	d1f5      	bne.n	80111da <USBD_GetLen+0x12>
  }

  return len;
 80111ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80111f0:	4618      	mov	r0, r3
 80111f2:	3714      	adds	r7, #20
 80111f4:	46bd      	mov	sp, r7
 80111f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111fa:	4770      	bx	lr

080111fc <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80111fc:	b580      	push	{r7, lr}
 80111fe:	b084      	sub	sp, #16
 8011200:	af00      	add	r7, sp, #0
 8011202:	60f8      	str	r0, [r7, #12]
 8011204:	60b9      	str	r1, [r7, #8]
 8011206:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8011208:	68fb      	ldr	r3, [r7, #12]
 801120a:	2202      	movs	r2, #2
 801120c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8011210:	68fb      	ldr	r3, [r7, #12]
 8011212:	687a      	ldr	r2, [r7, #4]
 8011214:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8011216:	68fb      	ldr	r3, [r7, #12]
 8011218:	687a      	ldr	r2, [r7, #4]
 801121a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801121c:	687b      	ldr	r3, [r7, #4]
 801121e:	68ba      	ldr	r2, [r7, #8]
 8011220:	2100      	movs	r1, #0
 8011222:	68f8      	ldr	r0, [r7, #12]
 8011224:	f000 fd21 	bl	8011c6a <USBD_LL_Transmit>

  return USBD_OK;
 8011228:	2300      	movs	r3, #0
}
 801122a:	4618      	mov	r0, r3
 801122c:	3710      	adds	r7, #16
 801122e:	46bd      	mov	sp, r7
 8011230:	bd80      	pop	{r7, pc}

08011232 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8011232:	b580      	push	{r7, lr}
 8011234:	b084      	sub	sp, #16
 8011236:	af00      	add	r7, sp, #0
 8011238:	60f8      	str	r0, [r7, #12]
 801123a:	60b9      	str	r1, [r7, #8]
 801123c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801123e:	687b      	ldr	r3, [r7, #4]
 8011240:	68ba      	ldr	r2, [r7, #8]
 8011242:	2100      	movs	r1, #0
 8011244:	68f8      	ldr	r0, [r7, #12]
 8011246:	f000 fd10 	bl	8011c6a <USBD_LL_Transmit>

  return USBD_OK;
 801124a:	2300      	movs	r3, #0
}
 801124c:	4618      	mov	r0, r3
 801124e:	3710      	adds	r7, #16
 8011250:	46bd      	mov	sp, r7
 8011252:	bd80      	pop	{r7, pc}

08011254 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8011254:	b580      	push	{r7, lr}
 8011256:	b084      	sub	sp, #16
 8011258:	af00      	add	r7, sp, #0
 801125a:	60f8      	str	r0, [r7, #12]
 801125c:	60b9      	str	r1, [r7, #8]
 801125e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8011260:	68fb      	ldr	r3, [r7, #12]
 8011262:	2203      	movs	r2, #3
 8011264:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8011268:	68fb      	ldr	r3, [r7, #12]
 801126a:	687a      	ldr	r2, [r7, #4]
 801126c:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8011270:	68fb      	ldr	r3, [r7, #12]
 8011272:	687a      	ldr	r2, [r7, #4]
 8011274:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8011278:	687b      	ldr	r3, [r7, #4]
 801127a:	68ba      	ldr	r2, [r7, #8]
 801127c:	2100      	movs	r1, #0
 801127e:	68f8      	ldr	r0, [r7, #12]
 8011280:	f000 fd14 	bl	8011cac <USBD_LL_PrepareReceive>

  return USBD_OK;
 8011284:	2300      	movs	r3, #0
}
 8011286:	4618      	mov	r0, r3
 8011288:	3710      	adds	r7, #16
 801128a:	46bd      	mov	sp, r7
 801128c:	bd80      	pop	{r7, pc}

0801128e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 801128e:	b580      	push	{r7, lr}
 8011290:	b084      	sub	sp, #16
 8011292:	af00      	add	r7, sp, #0
 8011294:	60f8      	str	r0, [r7, #12]
 8011296:	60b9      	str	r1, [r7, #8]
 8011298:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801129a:	687b      	ldr	r3, [r7, #4]
 801129c:	68ba      	ldr	r2, [r7, #8]
 801129e:	2100      	movs	r1, #0
 80112a0:	68f8      	ldr	r0, [r7, #12]
 80112a2:	f000 fd03 	bl	8011cac <USBD_LL_PrepareReceive>

  return USBD_OK;
 80112a6:	2300      	movs	r3, #0
}
 80112a8:	4618      	mov	r0, r3
 80112aa:	3710      	adds	r7, #16
 80112ac:	46bd      	mov	sp, r7
 80112ae:	bd80      	pop	{r7, pc}

080112b0 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80112b0:	b580      	push	{r7, lr}
 80112b2:	b082      	sub	sp, #8
 80112b4:	af00      	add	r7, sp, #0
 80112b6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80112b8:	687b      	ldr	r3, [r7, #4]
 80112ba:	2204      	movs	r2, #4
 80112bc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80112c0:	2300      	movs	r3, #0
 80112c2:	2200      	movs	r2, #0
 80112c4:	2100      	movs	r1, #0
 80112c6:	6878      	ldr	r0, [r7, #4]
 80112c8:	f000 fccf 	bl	8011c6a <USBD_LL_Transmit>

  return USBD_OK;
 80112cc:	2300      	movs	r3, #0
}
 80112ce:	4618      	mov	r0, r3
 80112d0:	3708      	adds	r7, #8
 80112d2:	46bd      	mov	sp, r7
 80112d4:	bd80      	pop	{r7, pc}

080112d6 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80112d6:	b580      	push	{r7, lr}
 80112d8:	b082      	sub	sp, #8
 80112da:	af00      	add	r7, sp, #0
 80112dc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80112de:	687b      	ldr	r3, [r7, #4]
 80112e0:	2205      	movs	r2, #5
 80112e2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80112e6:	2300      	movs	r3, #0
 80112e8:	2200      	movs	r2, #0
 80112ea:	2100      	movs	r1, #0
 80112ec:	6878      	ldr	r0, [r7, #4]
 80112ee:	f000 fcdd 	bl	8011cac <USBD_LL_PrepareReceive>

  return USBD_OK;
 80112f2:	2300      	movs	r3, #0
}
 80112f4:	4618      	mov	r0, r3
 80112f6:	3708      	adds	r7, #8
 80112f8:	46bd      	mov	sp, r7
 80112fa:	bd80      	pop	{r7, pc}

080112fc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80112fc:	b580      	push	{r7, lr}
 80112fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8011300:	2200      	movs	r2, #0
 8011302:	4913      	ldr	r1, [pc, #76]	@ (8011350 <MX_USB_DEVICE_Init+0x54>)
 8011304:	4813      	ldr	r0, [pc, #76]	@ (8011354 <MX_USB_DEVICE_Init+0x58>)
 8011306:	f7fe fccd 	bl	800fca4 <USBD_Init>
 801130a:	4603      	mov	r3, r0
 801130c:	2b00      	cmp	r3, #0
 801130e:	d001      	beq.n	8011314 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8011310:	f7ef fff1 	bl	80012f6 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8011314:	4910      	ldr	r1, [pc, #64]	@ (8011358 <MX_USB_DEVICE_Init+0x5c>)
 8011316:	480f      	ldr	r0, [pc, #60]	@ (8011354 <MX_USB_DEVICE_Init+0x58>)
 8011318:	f7fe fcf4 	bl	800fd04 <USBD_RegisterClass>
 801131c:	4603      	mov	r3, r0
 801131e:	2b00      	cmp	r3, #0
 8011320:	d001      	beq.n	8011326 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8011322:	f7ef ffe8 	bl	80012f6 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8011326:	490d      	ldr	r1, [pc, #52]	@ (801135c <MX_USB_DEVICE_Init+0x60>)
 8011328:	480a      	ldr	r0, [pc, #40]	@ (8011354 <MX_USB_DEVICE_Init+0x58>)
 801132a:	f7fe fbeb 	bl	800fb04 <USBD_CDC_RegisterInterface>
 801132e:	4603      	mov	r3, r0
 8011330:	2b00      	cmp	r3, #0
 8011332:	d001      	beq.n	8011338 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8011334:	f7ef ffdf 	bl	80012f6 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8011338:	4806      	ldr	r0, [pc, #24]	@ (8011354 <MX_USB_DEVICE_Init+0x58>)
 801133a:	f7fe fd19 	bl	800fd70 <USBD_Start>
 801133e:	4603      	mov	r3, r0
 8011340:	2b00      	cmp	r3, #0
 8011342:	d001      	beq.n	8011348 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8011344:	f7ef ffd7 	bl	80012f6 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 8011348:	f7f6 fb72 	bl	8007a30 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 801134c:	bf00      	nop
 801134e:	bd80      	pop	{r7, pc}
 8011350:	240000d8 	.word	0x240000d8
 8011354:	24000a4c 	.word	0x24000a4c
 8011358:	24000044 	.word	0x24000044
 801135c:	240000c4 	.word	0x240000c4

08011360 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8011360:	b580      	push	{r7, lr}
 8011362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8011364:	2200      	movs	r2, #0
 8011366:	4905      	ldr	r1, [pc, #20]	@ (801137c <CDC_Init_FS+0x1c>)
 8011368:	4805      	ldr	r0, [pc, #20]	@ (8011380 <CDC_Init_FS+0x20>)
 801136a:	f7fe fbe5 	bl	800fb38 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801136e:	4905      	ldr	r1, [pc, #20]	@ (8011384 <CDC_Init_FS+0x24>)
 8011370:	4803      	ldr	r0, [pc, #12]	@ (8011380 <CDC_Init_FS+0x20>)
 8011372:	f7fe fc03 	bl	800fb7c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8011376:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8011378:	4618      	mov	r0, r3
 801137a:	bd80      	pop	{r7, pc}
 801137c:	24001528 	.word	0x24001528
 8011380:	24000a4c 	.word	0x24000a4c
 8011384:	24000d28 	.word	0x24000d28

08011388 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8011388:	b480      	push	{r7}
 801138a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 801138c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801138e:	4618      	mov	r0, r3
 8011390:	46bd      	mov	sp, r7
 8011392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011396:	4770      	bx	lr

08011398 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8011398:	b480      	push	{r7}
 801139a:	b083      	sub	sp, #12
 801139c:	af00      	add	r7, sp, #0
 801139e:	4603      	mov	r3, r0
 80113a0:	6039      	str	r1, [r7, #0]
 80113a2:	71fb      	strb	r3, [r7, #7]
 80113a4:	4613      	mov	r3, r2
 80113a6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80113a8:	79fb      	ldrb	r3, [r7, #7]
 80113aa:	2b23      	cmp	r3, #35	@ 0x23
 80113ac:	d84a      	bhi.n	8011444 <CDC_Control_FS+0xac>
 80113ae:	a201      	add	r2, pc, #4	@ (adr r2, 80113b4 <CDC_Control_FS+0x1c>)
 80113b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80113b4:	08011445 	.word	0x08011445
 80113b8:	08011445 	.word	0x08011445
 80113bc:	08011445 	.word	0x08011445
 80113c0:	08011445 	.word	0x08011445
 80113c4:	08011445 	.word	0x08011445
 80113c8:	08011445 	.word	0x08011445
 80113cc:	08011445 	.word	0x08011445
 80113d0:	08011445 	.word	0x08011445
 80113d4:	08011445 	.word	0x08011445
 80113d8:	08011445 	.word	0x08011445
 80113dc:	08011445 	.word	0x08011445
 80113e0:	08011445 	.word	0x08011445
 80113e4:	08011445 	.word	0x08011445
 80113e8:	08011445 	.word	0x08011445
 80113ec:	08011445 	.word	0x08011445
 80113f0:	08011445 	.word	0x08011445
 80113f4:	08011445 	.word	0x08011445
 80113f8:	08011445 	.word	0x08011445
 80113fc:	08011445 	.word	0x08011445
 8011400:	08011445 	.word	0x08011445
 8011404:	08011445 	.word	0x08011445
 8011408:	08011445 	.word	0x08011445
 801140c:	08011445 	.word	0x08011445
 8011410:	08011445 	.word	0x08011445
 8011414:	08011445 	.word	0x08011445
 8011418:	08011445 	.word	0x08011445
 801141c:	08011445 	.word	0x08011445
 8011420:	08011445 	.word	0x08011445
 8011424:	08011445 	.word	0x08011445
 8011428:	08011445 	.word	0x08011445
 801142c:	08011445 	.word	0x08011445
 8011430:	08011445 	.word	0x08011445
 8011434:	08011445 	.word	0x08011445
 8011438:	08011445 	.word	0x08011445
 801143c:	08011445 	.word	0x08011445
 8011440:	08011445 	.word	0x08011445
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8011444:	bf00      	nop
  }

  return (USBD_OK);
 8011446:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8011448:	4618      	mov	r0, r3
 801144a:	370c      	adds	r7, #12
 801144c:	46bd      	mov	sp, r7
 801144e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011452:	4770      	bx	lr

08011454 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8011454:	b580      	push	{r7, lr}
 8011456:	b082      	sub	sp, #8
 8011458:	af00      	add	r7, sp, #0
 801145a:	6078      	str	r0, [r7, #4]
 801145c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801145e:	6879      	ldr	r1, [r7, #4]
 8011460:	4805      	ldr	r0, [pc, #20]	@ (8011478 <CDC_Receive_FS+0x24>)
 8011462:	f7fe fb8b 	bl	800fb7c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8011466:	4804      	ldr	r0, [pc, #16]	@ (8011478 <CDC_Receive_FS+0x24>)
 8011468:	f7fe fbe6 	bl	800fc38 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 801146c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801146e:	4618      	mov	r0, r3
 8011470:	3708      	adds	r7, #8
 8011472:	46bd      	mov	sp, r7
 8011474:	bd80      	pop	{r7, pc}
 8011476:	bf00      	nop
 8011478:	24000a4c 	.word	0x24000a4c

0801147c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 801147c:	b580      	push	{r7, lr}
 801147e:	b084      	sub	sp, #16
 8011480:	af00      	add	r7, sp, #0
 8011482:	6078      	str	r0, [r7, #4]
 8011484:	460b      	mov	r3, r1
 8011486:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8011488:	2300      	movs	r3, #0
 801148a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 801148c:	4b0d      	ldr	r3, [pc, #52]	@ (80114c4 <CDC_Transmit_FS+0x48>)
 801148e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8011492:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8011494:	68bb      	ldr	r3, [r7, #8]
 8011496:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 801149a:	2b00      	cmp	r3, #0
 801149c:	d001      	beq.n	80114a2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 801149e:	2301      	movs	r3, #1
 80114a0:	e00b      	b.n	80114ba <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80114a2:	887b      	ldrh	r3, [r7, #2]
 80114a4:	461a      	mov	r2, r3
 80114a6:	6879      	ldr	r1, [r7, #4]
 80114a8:	4806      	ldr	r0, [pc, #24]	@ (80114c4 <CDC_Transmit_FS+0x48>)
 80114aa:	f7fe fb45 	bl	800fb38 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80114ae:	4805      	ldr	r0, [pc, #20]	@ (80114c4 <CDC_Transmit_FS+0x48>)
 80114b0:	f7fe fb82 	bl	800fbb8 <USBD_CDC_TransmitPacket>
 80114b4:	4603      	mov	r3, r0
 80114b6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80114b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80114ba:	4618      	mov	r0, r3
 80114bc:	3710      	adds	r7, #16
 80114be:	46bd      	mov	sp, r7
 80114c0:	bd80      	pop	{r7, pc}
 80114c2:	bf00      	nop
 80114c4:	24000a4c 	.word	0x24000a4c

080114c8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80114c8:	b480      	push	{r7}
 80114ca:	b087      	sub	sp, #28
 80114cc:	af00      	add	r7, sp, #0
 80114ce:	60f8      	str	r0, [r7, #12]
 80114d0:	60b9      	str	r1, [r7, #8]
 80114d2:	4613      	mov	r3, r2
 80114d4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80114d6:	2300      	movs	r3, #0
 80114d8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80114da:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80114de:	4618      	mov	r0, r3
 80114e0:	371c      	adds	r7, #28
 80114e2:	46bd      	mov	sp, r7
 80114e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114e8:	4770      	bx	lr
	...

080114ec <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80114ec:	b480      	push	{r7}
 80114ee:	b083      	sub	sp, #12
 80114f0:	af00      	add	r7, sp, #0
 80114f2:	4603      	mov	r3, r0
 80114f4:	6039      	str	r1, [r7, #0]
 80114f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80114f8:	683b      	ldr	r3, [r7, #0]
 80114fa:	2212      	movs	r2, #18
 80114fc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80114fe:	4b03      	ldr	r3, [pc, #12]	@ (801150c <USBD_FS_DeviceDescriptor+0x20>)
}
 8011500:	4618      	mov	r0, r3
 8011502:	370c      	adds	r7, #12
 8011504:	46bd      	mov	sp, r7
 8011506:	f85d 7b04 	ldr.w	r7, [sp], #4
 801150a:	4770      	bx	lr
 801150c:	240000f8 	.word	0x240000f8

08011510 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011510:	b480      	push	{r7}
 8011512:	b083      	sub	sp, #12
 8011514:	af00      	add	r7, sp, #0
 8011516:	4603      	mov	r3, r0
 8011518:	6039      	str	r1, [r7, #0]
 801151a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801151c:	683b      	ldr	r3, [r7, #0]
 801151e:	2204      	movs	r2, #4
 8011520:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8011522:	4b03      	ldr	r3, [pc, #12]	@ (8011530 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8011524:	4618      	mov	r0, r3
 8011526:	370c      	adds	r7, #12
 8011528:	46bd      	mov	sp, r7
 801152a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801152e:	4770      	bx	lr
 8011530:	2400010c 	.word	0x2400010c

08011534 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011534:	b580      	push	{r7, lr}
 8011536:	b082      	sub	sp, #8
 8011538:	af00      	add	r7, sp, #0
 801153a:	4603      	mov	r3, r0
 801153c:	6039      	str	r1, [r7, #0]
 801153e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8011540:	79fb      	ldrb	r3, [r7, #7]
 8011542:	2b00      	cmp	r3, #0
 8011544:	d105      	bne.n	8011552 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8011546:	683a      	ldr	r2, [r7, #0]
 8011548:	4907      	ldr	r1, [pc, #28]	@ (8011568 <USBD_FS_ProductStrDescriptor+0x34>)
 801154a:	4808      	ldr	r0, [pc, #32]	@ (801156c <USBD_FS_ProductStrDescriptor+0x38>)
 801154c:	f7ff fdea 	bl	8011124 <USBD_GetString>
 8011550:	e004      	b.n	801155c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8011552:	683a      	ldr	r2, [r7, #0]
 8011554:	4904      	ldr	r1, [pc, #16]	@ (8011568 <USBD_FS_ProductStrDescriptor+0x34>)
 8011556:	4805      	ldr	r0, [pc, #20]	@ (801156c <USBD_FS_ProductStrDescriptor+0x38>)
 8011558:	f7ff fde4 	bl	8011124 <USBD_GetString>
  }
  return USBD_StrDesc;
 801155c:	4b02      	ldr	r3, [pc, #8]	@ (8011568 <USBD_FS_ProductStrDescriptor+0x34>)
}
 801155e:	4618      	mov	r0, r3
 8011560:	3708      	adds	r7, #8
 8011562:	46bd      	mov	sp, r7
 8011564:	bd80      	pop	{r7, pc}
 8011566:	bf00      	nop
 8011568:	24001d28 	.word	0x24001d28
 801156c:	080149b0 	.word	0x080149b0

08011570 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011570:	b580      	push	{r7, lr}
 8011572:	b082      	sub	sp, #8
 8011574:	af00      	add	r7, sp, #0
 8011576:	4603      	mov	r3, r0
 8011578:	6039      	str	r1, [r7, #0]
 801157a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801157c:	683a      	ldr	r2, [r7, #0]
 801157e:	4904      	ldr	r1, [pc, #16]	@ (8011590 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8011580:	4804      	ldr	r0, [pc, #16]	@ (8011594 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8011582:	f7ff fdcf 	bl	8011124 <USBD_GetString>
  return USBD_StrDesc;
 8011586:	4b02      	ldr	r3, [pc, #8]	@ (8011590 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8011588:	4618      	mov	r0, r3
 801158a:	3708      	adds	r7, #8
 801158c:	46bd      	mov	sp, r7
 801158e:	bd80      	pop	{r7, pc}
 8011590:	24001d28 	.word	0x24001d28
 8011594:	080149c8 	.word	0x080149c8

08011598 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011598:	b580      	push	{r7, lr}
 801159a:	b082      	sub	sp, #8
 801159c:	af00      	add	r7, sp, #0
 801159e:	4603      	mov	r3, r0
 80115a0:	6039      	str	r1, [r7, #0]
 80115a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80115a4:	683b      	ldr	r3, [r7, #0]
 80115a6:	221a      	movs	r2, #26
 80115a8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80115aa:	f000 f843 	bl	8011634 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80115ae:	4b02      	ldr	r3, [pc, #8]	@ (80115b8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80115b0:	4618      	mov	r0, r3
 80115b2:	3708      	adds	r7, #8
 80115b4:	46bd      	mov	sp, r7
 80115b6:	bd80      	pop	{r7, pc}
 80115b8:	24000110 	.word	0x24000110

080115bc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80115bc:	b580      	push	{r7, lr}
 80115be:	b082      	sub	sp, #8
 80115c0:	af00      	add	r7, sp, #0
 80115c2:	4603      	mov	r3, r0
 80115c4:	6039      	str	r1, [r7, #0]
 80115c6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80115c8:	79fb      	ldrb	r3, [r7, #7]
 80115ca:	2b00      	cmp	r3, #0
 80115cc:	d105      	bne.n	80115da <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80115ce:	683a      	ldr	r2, [r7, #0]
 80115d0:	4907      	ldr	r1, [pc, #28]	@ (80115f0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80115d2:	4808      	ldr	r0, [pc, #32]	@ (80115f4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80115d4:	f7ff fda6 	bl	8011124 <USBD_GetString>
 80115d8:	e004      	b.n	80115e4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80115da:	683a      	ldr	r2, [r7, #0]
 80115dc:	4904      	ldr	r1, [pc, #16]	@ (80115f0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80115de:	4805      	ldr	r0, [pc, #20]	@ (80115f4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80115e0:	f7ff fda0 	bl	8011124 <USBD_GetString>
  }
  return USBD_StrDesc;
 80115e4:	4b02      	ldr	r3, [pc, #8]	@ (80115f0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80115e6:	4618      	mov	r0, r3
 80115e8:	3708      	adds	r7, #8
 80115ea:	46bd      	mov	sp, r7
 80115ec:	bd80      	pop	{r7, pc}
 80115ee:	bf00      	nop
 80115f0:	24001d28 	.word	0x24001d28
 80115f4:	080149dc 	.word	0x080149dc

080115f8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80115f8:	b580      	push	{r7, lr}
 80115fa:	b082      	sub	sp, #8
 80115fc:	af00      	add	r7, sp, #0
 80115fe:	4603      	mov	r3, r0
 8011600:	6039      	str	r1, [r7, #0]
 8011602:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8011604:	79fb      	ldrb	r3, [r7, #7]
 8011606:	2b00      	cmp	r3, #0
 8011608:	d105      	bne.n	8011616 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801160a:	683a      	ldr	r2, [r7, #0]
 801160c:	4907      	ldr	r1, [pc, #28]	@ (801162c <USBD_FS_InterfaceStrDescriptor+0x34>)
 801160e:	4808      	ldr	r0, [pc, #32]	@ (8011630 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8011610:	f7ff fd88 	bl	8011124 <USBD_GetString>
 8011614:	e004      	b.n	8011620 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8011616:	683a      	ldr	r2, [r7, #0]
 8011618:	4904      	ldr	r1, [pc, #16]	@ (801162c <USBD_FS_InterfaceStrDescriptor+0x34>)
 801161a:	4805      	ldr	r0, [pc, #20]	@ (8011630 <USBD_FS_InterfaceStrDescriptor+0x38>)
 801161c:	f7ff fd82 	bl	8011124 <USBD_GetString>
  }
  return USBD_StrDesc;
 8011620:	4b02      	ldr	r3, [pc, #8]	@ (801162c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8011622:	4618      	mov	r0, r3
 8011624:	3708      	adds	r7, #8
 8011626:	46bd      	mov	sp, r7
 8011628:	bd80      	pop	{r7, pc}
 801162a:	bf00      	nop
 801162c:	24001d28 	.word	0x24001d28
 8011630:	080149e8 	.word	0x080149e8

08011634 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8011634:	b580      	push	{r7, lr}
 8011636:	b084      	sub	sp, #16
 8011638:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801163a:	4b0f      	ldr	r3, [pc, #60]	@ (8011678 <Get_SerialNum+0x44>)
 801163c:	681b      	ldr	r3, [r3, #0]
 801163e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8011640:	4b0e      	ldr	r3, [pc, #56]	@ (801167c <Get_SerialNum+0x48>)
 8011642:	681b      	ldr	r3, [r3, #0]
 8011644:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8011646:	4b0e      	ldr	r3, [pc, #56]	@ (8011680 <Get_SerialNum+0x4c>)
 8011648:	681b      	ldr	r3, [r3, #0]
 801164a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801164c:	68fa      	ldr	r2, [r7, #12]
 801164e:	687b      	ldr	r3, [r7, #4]
 8011650:	4413      	add	r3, r2
 8011652:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8011654:	68fb      	ldr	r3, [r7, #12]
 8011656:	2b00      	cmp	r3, #0
 8011658:	d009      	beq.n	801166e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801165a:	2208      	movs	r2, #8
 801165c:	4909      	ldr	r1, [pc, #36]	@ (8011684 <Get_SerialNum+0x50>)
 801165e:	68f8      	ldr	r0, [r7, #12]
 8011660:	f000 f814 	bl	801168c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8011664:	2204      	movs	r2, #4
 8011666:	4908      	ldr	r1, [pc, #32]	@ (8011688 <Get_SerialNum+0x54>)
 8011668:	68b8      	ldr	r0, [r7, #8]
 801166a:	f000 f80f 	bl	801168c <IntToUnicode>
  }
}
 801166e:	bf00      	nop
 8011670:	3710      	adds	r7, #16
 8011672:	46bd      	mov	sp, r7
 8011674:	bd80      	pop	{r7, pc}
 8011676:	bf00      	nop
 8011678:	1ff1e800 	.word	0x1ff1e800
 801167c:	1ff1e804 	.word	0x1ff1e804
 8011680:	1ff1e808 	.word	0x1ff1e808
 8011684:	24000112 	.word	0x24000112
 8011688:	24000122 	.word	0x24000122

0801168c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801168c:	b480      	push	{r7}
 801168e:	b087      	sub	sp, #28
 8011690:	af00      	add	r7, sp, #0
 8011692:	60f8      	str	r0, [r7, #12]
 8011694:	60b9      	str	r1, [r7, #8]
 8011696:	4613      	mov	r3, r2
 8011698:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801169a:	2300      	movs	r3, #0
 801169c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801169e:	2300      	movs	r3, #0
 80116a0:	75fb      	strb	r3, [r7, #23]
 80116a2:	e027      	b.n	80116f4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80116a4:	68fb      	ldr	r3, [r7, #12]
 80116a6:	0f1b      	lsrs	r3, r3, #28
 80116a8:	2b09      	cmp	r3, #9
 80116aa:	d80b      	bhi.n	80116c4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80116ac:	68fb      	ldr	r3, [r7, #12]
 80116ae:	0f1b      	lsrs	r3, r3, #28
 80116b0:	b2da      	uxtb	r2, r3
 80116b2:	7dfb      	ldrb	r3, [r7, #23]
 80116b4:	005b      	lsls	r3, r3, #1
 80116b6:	4619      	mov	r1, r3
 80116b8:	68bb      	ldr	r3, [r7, #8]
 80116ba:	440b      	add	r3, r1
 80116bc:	3230      	adds	r2, #48	@ 0x30
 80116be:	b2d2      	uxtb	r2, r2
 80116c0:	701a      	strb	r2, [r3, #0]
 80116c2:	e00a      	b.n	80116da <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80116c4:	68fb      	ldr	r3, [r7, #12]
 80116c6:	0f1b      	lsrs	r3, r3, #28
 80116c8:	b2da      	uxtb	r2, r3
 80116ca:	7dfb      	ldrb	r3, [r7, #23]
 80116cc:	005b      	lsls	r3, r3, #1
 80116ce:	4619      	mov	r1, r3
 80116d0:	68bb      	ldr	r3, [r7, #8]
 80116d2:	440b      	add	r3, r1
 80116d4:	3237      	adds	r2, #55	@ 0x37
 80116d6:	b2d2      	uxtb	r2, r2
 80116d8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80116da:	68fb      	ldr	r3, [r7, #12]
 80116dc:	011b      	lsls	r3, r3, #4
 80116de:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80116e0:	7dfb      	ldrb	r3, [r7, #23]
 80116e2:	005b      	lsls	r3, r3, #1
 80116e4:	3301      	adds	r3, #1
 80116e6:	68ba      	ldr	r2, [r7, #8]
 80116e8:	4413      	add	r3, r2
 80116ea:	2200      	movs	r2, #0
 80116ec:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80116ee:	7dfb      	ldrb	r3, [r7, #23]
 80116f0:	3301      	adds	r3, #1
 80116f2:	75fb      	strb	r3, [r7, #23]
 80116f4:	7dfa      	ldrb	r2, [r7, #23]
 80116f6:	79fb      	ldrb	r3, [r7, #7]
 80116f8:	429a      	cmp	r2, r3
 80116fa:	d3d3      	bcc.n	80116a4 <IntToUnicode+0x18>
  }
}
 80116fc:	bf00      	nop
 80116fe:	bf00      	nop
 8011700:	371c      	adds	r7, #28
 8011702:	46bd      	mov	sp, r7
 8011704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011708:	4770      	bx	lr
	...

0801170c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 801170c:	b580      	push	{r7, lr}
 801170e:	b0ba      	sub	sp, #232	@ 0xe8
 8011710:	af00      	add	r7, sp, #0
 8011712:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011714:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8011718:	2200      	movs	r2, #0
 801171a:	601a      	str	r2, [r3, #0]
 801171c:	605a      	str	r2, [r3, #4]
 801171e:	609a      	str	r2, [r3, #8]
 8011720:	60da      	str	r2, [r3, #12]
 8011722:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8011724:	f107 0310 	add.w	r3, r7, #16
 8011728:	22c0      	movs	r2, #192	@ 0xc0
 801172a:	2100      	movs	r1, #0
 801172c:	4618      	mov	r0, r3
 801172e:	f001 f890 	bl	8012852 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8011732:	687b      	ldr	r3, [r7, #4]
 8011734:	681b      	ldr	r3, [r3, #0]
 8011736:	4a34      	ldr	r2, [pc, #208]	@ (8011808 <HAL_PCD_MspInit+0xfc>)
 8011738:	4293      	cmp	r3, r2
 801173a:	d161      	bne.n	8011800 <HAL_PCD_MspInit+0xf4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 801173c:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8011740:	f04f 0300 	mov.w	r3, #0
 8011744:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8011748:	f44f 1340 	mov.w	r3, #3145728	@ 0x300000
 801174c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8011750:	f107 0310 	add.w	r3, r7, #16
 8011754:	4618      	mov	r0, r3
 8011756:	f7f7 f961 	bl	8008a1c <HAL_RCCEx_PeriphCLKConfig>
 801175a:	4603      	mov	r3, r0
 801175c:	2b00      	cmp	r3, #0
 801175e:	d001      	beq.n	8011764 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 8011760:	f7ef fdc9 	bl	80012f6 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8011764:	f7f6 f964 	bl	8007a30 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8011768:	4b28      	ldr	r3, [pc, #160]	@ (801180c <HAL_PCD_MspInit+0x100>)
 801176a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 801176e:	4a27      	ldr	r2, [pc, #156]	@ (801180c <HAL_PCD_MspInit+0x100>)
 8011770:	f043 0301 	orr.w	r3, r3, #1
 8011774:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8011778:	4b24      	ldr	r3, [pc, #144]	@ (801180c <HAL_PCD_MspInit+0x100>)
 801177a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 801177e:	f003 0301 	and.w	r3, r3, #1
 8011782:	60fb      	str	r3, [r7, #12]
 8011784:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8011786:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 801178a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801178e:	2302      	movs	r3, #2
 8011790:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011794:	2300      	movs	r3, #0
 8011796:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801179a:	2300      	movs	r3, #0
 801179c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80117a0:	230a      	movs	r3, #10
 80117a2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80117a6:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80117aa:	4619      	mov	r1, r3
 80117ac:	4818      	ldr	r0, [pc, #96]	@ (8011810 <HAL_PCD_MspInit+0x104>)
 80117ae:	f7f4 fc35 	bl	800601c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80117b2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80117b6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80117ba:	2300      	movs	r3, #0
 80117bc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80117c0:	2300      	movs	r3, #0
 80117c2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80117c6:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80117ca:	4619      	mov	r1, r3
 80117cc:	4810      	ldr	r0, [pc, #64]	@ (8011810 <HAL_PCD_MspInit+0x104>)
 80117ce:	f7f4 fc25 	bl	800601c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80117d2:	4b0e      	ldr	r3, [pc, #56]	@ (801180c <HAL_PCD_MspInit+0x100>)
 80117d4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80117d8:	4a0c      	ldr	r2, [pc, #48]	@ (801180c <HAL_PCD_MspInit+0x100>)
 80117da:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80117de:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80117e2:	4b0a      	ldr	r3, [pc, #40]	@ (801180c <HAL_PCD_MspInit+0x100>)
 80117e4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80117e8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80117ec:	60bb      	str	r3, [r7, #8]
 80117ee:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80117f0:	2200      	movs	r2, #0
 80117f2:	2100      	movs	r1, #0
 80117f4:	2065      	movs	r0, #101	@ 0x65
 80117f6:	f7f2 fa80 	bl	8003cfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80117fa:	2065      	movs	r0, #101	@ 0x65
 80117fc:	f7f2 fa97 	bl	8003d2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8011800:	bf00      	nop
 8011802:	37e8      	adds	r7, #232	@ 0xe8
 8011804:	46bd      	mov	sp, r7
 8011806:	bd80      	pop	{r7, pc}
 8011808:	40080000 	.word	0x40080000
 801180c:	58024400 	.word	0x58024400
 8011810:	58020000 	.word	0x58020000

08011814 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011814:	b580      	push	{r7, lr}
 8011816:	b082      	sub	sp, #8
 8011818:	af00      	add	r7, sp, #0
 801181a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801181c:	687b      	ldr	r3, [r7, #4]
 801181e:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8011822:	687b      	ldr	r3, [r7, #4]
 8011824:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8011828:	4619      	mov	r1, r3
 801182a:	4610      	mov	r0, r2
 801182c:	f7fe faed 	bl	800fe0a <USBD_LL_SetupStage>
}
 8011830:	bf00      	nop
 8011832:	3708      	adds	r7, #8
 8011834:	46bd      	mov	sp, r7
 8011836:	bd80      	pop	{r7, pc}

08011838 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011838:	b580      	push	{r7, lr}
 801183a:	b082      	sub	sp, #8
 801183c:	af00      	add	r7, sp, #0
 801183e:	6078      	str	r0, [r7, #4]
 8011840:	460b      	mov	r3, r1
 8011842:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8011844:	687b      	ldr	r3, [r7, #4]
 8011846:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 801184a:	78fa      	ldrb	r2, [r7, #3]
 801184c:	6879      	ldr	r1, [r7, #4]
 801184e:	4613      	mov	r3, r2
 8011850:	00db      	lsls	r3, r3, #3
 8011852:	4413      	add	r3, r2
 8011854:	009b      	lsls	r3, r3, #2
 8011856:	440b      	add	r3, r1
 8011858:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 801185c:	681a      	ldr	r2, [r3, #0]
 801185e:	78fb      	ldrb	r3, [r7, #3]
 8011860:	4619      	mov	r1, r3
 8011862:	f7fe fb27 	bl	800feb4 <USBD_LL_DataOutStage>
}
 8011866:	bf00      	nop
 8011868:	3708      	adds	r7, #8
 801186a:	46bd      	mov	sp, r7
 801186c:	bd80      	pop	{r7, pc}

0801186e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801186e:	b580      	push	{r7, lr}
 8011870:	b082      	sub	sp, #8
 8011872:	af00      	add	r7, sp, #0
 8011874:	6078      	str	r0, [r7, #4]
 8011876:	460b      	mov	r3, r1
 8011878:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801187a:	687b      	ldr	r3, [r7, #4]
 801187c:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8011880:	78fa      	ldrb	r2, [r7, #3]
 8011882:	6879      	ldr	r1, [r7, #4]
 8011884:	4613      	mov	r3, r2
 8011886:	00db      	lsls	r3, r3, #3
 8011888:	4413      	add	r3, r2
 801188a:	009b      	lsls	r3, r3, #2
 801188c:	440b      	add	r3, r1
 801188e:	3320      	adds	r3, #32
 8011890:	681a      	ldr	r2, [r3, #0]
 8011892:	78fb      	ldrb	r3, [r7, #3]
 8011894:	4619      	mov	r1, r3
 8011896:	f7fe fbc0 	bl	801001a <USBD_LL_DataInStage>
}
 801189a:	bf00      	nop
 801189c:	3708      	adds	r7, #8
 801189e:	46bd      	mov	sp, r7
 80118a0:	bd80      	pop	{r7, pc}

080118a2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80118a2:	b580      	push	{r7, lr}
 80118a4:	b082      	sub	sp, #8
 80118a6:	af00      	add	r7, sp, #0
 80118a8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80118aa:	687b      	ldr	r3, [r7, #4]
 80118ac:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80118b0:	4618      	mov	r0, r3
 80118b2:	f7fe fcfa 	bl	80102aa <USBD_LL_SOF>
}
 80118b6:	bf00      	nop
 80118b8:	3708      	adds	r7, #8
 80118ba:	46bd      	mov	sp, r7
 80118bc:	bd80      	pop	{r7, pc}

080118be <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80118be:	b580      	push	{r7, lr}
 80118c0:	b084      	sub	sp, #16
 80118c2:	af00      	add	r7, sp, #0
 80118c4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80118c6:	2301      	movs	r3, #1
 80118c8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80118ca:	687b      	ldr	r3, [r7, #4]
 80118cc:	79db      	ldrb	r3, [r3, #7]
 80118ce:	2b00      	cmp	r3, #0
 80118d0:	d102      	bne.n	80118d8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80118d2:	2300      	movs	r3, #0
 80118d4:	73fb      	strb	r3, [r7, #15]
 80118d6:	e008      	b.n	80118ea <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80118d8:	687b      	ldr	r3, [r7, #4]
 80118da:	79db      	ldrb	r3, [r3, #7]
 80118dc:	2b02      	cmp	r3, #2
 80118de:	d102      	bne.n	80118e6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80118e0:	2301      	movs	r3, #1
 80118e2:	73fb      	strb	r3, [r7, #15]
 80118e4:	e001      	b.n	80118ea <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80118e6:	f7ef fd06 	bl	80012f6 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80118ea:	687b      	ldr	r3, [r7, #4]
 80118ec:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80118f0:	7bfa      	ldrb	r2, [r7, #15]
 80118f2:	4611      	mov	r1, r2
 80118f4:	4618      	mov	r0, r3
 80118f6:	f7fe fc94 	bl	8010222 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80118fa:	687b      	ldr	r3, [r7, #4]
 80118fc:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8011900:	4618      	mov	r0, r3
 8011902:	f7fe fc3c 	bl	801017e <USBD_LL_Reset>
}
 8011906:	bf00      	nop
 8011908:	3710      	adds	r7, #16
 801190a:	46bd      	mov	sp, r7
 801190c:	bd80      	pop	{r7, pc}
	...

08011910 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011910:	b580      	push	{r7, lr}
 8011912:	b082      	sub	sp, #8
 8011914:	af00      	add	r7, sp, #0
 8011916:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8011918:	687b      	ldr	r3, [r7, #4]
 801191a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801191e:	4618      	mov	r0, r3
 8011920:	f7fe fc8f 	bl	8010242 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8011924:	687b      	ldr	r3, [r7, #4]
 8011926:	681b      	ldr	r3, [r3, #0]
 8011928:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 801192c:	681b      	ldr	r3, [r3, #0]
 801192e:	687a      	ldr	r2, [r7, #4]
 8011930:	6812      	ldr	r2, [r2, #0]
 8011932:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8011936:	f043 0301 	orr.w	r3, r3, #1
 801193a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801193c:	687b      	ldr	r3, [r7, #4]
 801193e:	7adb      	ldrb	r3, [r3, #11]
 8011940:	2b00      	cmp	r3, #0
 8011942:	d005      	beq.n	8011950 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8011944:	4b04      	ldr	r3, [pc, #16]	@ (8011958 <HAL_PCD_SuspendCallback+0x48>)
 8011946:	691b      	ldr	r3, [r3, #16]
 8011948:	4a03      	ldr	r2, [pc, #12]	@ (8011958 <HAL_PCD_SuspendCallback+0x48>)
 801194a:	f043 0306 	orr.w	r3, r3, #6
 801194e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8011950:	bf00      	nop
 8011952:	3708      	adds	r7, #8
 8011954:	46bd      	mov	sp, r7
 8011956:	bd80      	pop	{r7, pc}
 8011958:	e000ed00 	.word	0xe000ed00

0801195c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801195c:	b580      	push	{r7, lr}
 801195e:	b082      	sub	sp, #8
 8011960:	af00      	add	r7, sp, #0
 8011962:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8011964:	687b      	ldr	r3, [r7, #4]
 8011966:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801196a:	4618      	mov	r0, r3
 801196c:	f7fe fc85 	bl	801027a <USBD_LL_Resume>
}
 8011970:	bf00      	nop
 8011972:	3708      	adds	r7, #8
 8011974:	46bd      	mov	sp, r7
 8011976:	bd80      	pop	{r7, pc}

08011978 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011978:	b580      	push	{r7, lr}
 801197a:	b082      	sub	sp, #8
 801197c:	af00      	add	r7, sp, #0
 801197e:	6078      	str	r0, [r7, #4]
 8011980:	460b      	mov	r3, r1
 8011982:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8011984:	687b      	ldr	r3, [r7, #4]
 8011986:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801198a:	78fa      	ldrb	r2, [r7, #3]
 801198c:	4611      	mov	r1, r2
 801198e:	4618      	mov	r0, r3
 8011990:	f7fe fcdd 	bl	801034e <USBD_LL_IsoOUTIncomplete>
}
 8011994:	bf00      	nop
 8011996:	3708      	adds	r7, #8
 8011998:	46bd      	mov	sp, r7
 801199a:	bd80      	pop	{r7, pc}

0801199c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801199c:	b580      	push	{r7, lr}
 801199e:	b082      	sub	sp, #8
 80119a0:	af00      	add	r7, sp, #0
 80119a2:	6078      	str	r0, [r7, #4]
 80119a4:	460b      	mov	r3, r1
 80119a6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80119a8:	687b      	ldr	r3, [r7, #4]
 80119aa:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80119ae:	78fa      	ldrb	r2, [r7, #3]
 80119b0:	4611      	mov	r1, r2
 80119b2:	4618      	mov	r0, r3
 80119b4:	f7fe fc99 	bl	80102ea <USBD_LL_IsoINIncomplete>
}
 80119b8:	bf00      	nop
 80119ba:	3708      	adds	r7, #8
 80119bc:	46bd      	mov	sp, r7
 80119be:	bd80      	pop	{r7, pc}

080119c0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80119c0:	b580      	push	{r7, lr}
 80119c2:	b082      	sub	sp, #8
 80119c4:	af00      	add	r7, sp, #0
 80119c6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80119c8:	687b      	ldr	r3, [r7, #4]
 80119ca:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80119ce:	4618      	mov	r0, r3
 80119d0:	f7fe fcef 	bl	80103b2 <USBD_LL_DevConnected>
}
 80119d4:	bf00      	nop
 80119d6:	3708      	adds	r7, #8
 80119d8:	46bd      	mov	sp, r7
 80119da:	bd80      	pop	{r7, pc}

080119dc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80119dc:	b580      	push	{r7, lr}
 80119de:	b082      	sub	sp, #8
 80119e0:	af00      	add	r7, sp, #0
 80119e2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80119e4:	687b      	ldr	r3, [r7, #4]
 80119e6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80119ea:	4618      	mov	r0, r3
 80119ec:	f7fe fcec 	bl	80103c8 <USBD_LL_DevDisconnected>
}
 80119f0:	bf00      	nop
 80119f2:	3708      	adds	r7, #8
 80119f4:	46bd      	mov	sp, r7
 80119f6:	bd80      	pop	{r7, pc}

080119f8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80119f8:	b580      	push	{r7, lr}
 80119fa:	b082      	sub	sp, #8
 80119fc:	af00      	add	r7, sp, #0
 80119fe:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8011a00:	687b      	ldr	r3, [r7, #4]
 8011a02:	781b      	ldrb	r3, [r3, #0]
 8011a04:	2b00      	cmp	r3, #0
 8011a06:	d13e      	bne.n	8011a86 <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8011a08:	4a21      	ldr	r2, [pc, #132]	@ (8011a90 <USBD_LL_Init+0x98>)
 8011a0a:	687b      	ldr	r3, [r7, #4]
 8011a0c:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8011a10:	687b      	ldr	r3, [r7, #4]
 8011a12:	4a1f      	ldr	r2, [pc, #124]	@ (8011a90 <USBD_LL_Init+0x98>)
 8011a14:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8011a18:	4b1d      	ldr	r3, [pc, #116]	@ (8011a90 <USBD_LL_Init+0x98>)
 8011a1a:	4a1e      	ldr	r2, [pc, #120]	@ (8011a94 <USBD_LL_Init+0x9c>)
 8011a1c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8011a1e:	4b1c      	ldr	r3, [pc, #112]	@ (8011a90 <USBD_LL_Init+0x98>)
 8011a20:	2209      	movs	r2, #9
 8011a22:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8011a24:	4b1a      	ldr	r3, [pc, #104]	@ (8011a90 <USBD_LL_Init+0x98>)
 8011a26:	2202      	movs	r2, #2
 8011a28:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8011a2a:	4b19      	ldr	r3, [pc, #100]	@ (8011a90 <USBD_LL_Init+0x98>)
 8011a2c:	2200      	movs	r2, #0
 8011a2e:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8011a30:	4b17      	ldr	r3, [pc, #92]	@ (8011a90 <USBD_LL_Init+0x98>)
 8011a32:	2202      	movs	r2, #2
 8011a34:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8011a36:	4b16      	ldr	r3, [pc, #88]	@ (8011a90 <USBD_LL_Init+0x98>)
 8011a38:	2201      	movs	r2, #1
 8011a3a:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8011a3c:	4b14      	ldr	r3, [pc, #80]	@ (8011a90 <USBD_LL_Init+0x98>)
 8011a3e:	2200      	movs	r2, #0
 8011a40:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8011a42:	4b13      	ldr	r3, [pc, #76]	@ (8011a90 <USBD_LL_Init+0x98>)
 8011a44:	2200      	movs	r2, #0
 8011a46:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8011a48:	4b11      	ldr	r3, [pc, #68]	@ (8011a90 <USBD_LL_Init+0x98>)
 8011a4a:	2201      	movs	r2, #1
 8011a4c:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8011a4e:	4b10      	ldr	r3, [pc, #64]	@ (8011a90 <USBD_LL_Init+0x98>)
 8011a50:	2201      	movs	r2, #1
 8011a52:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8011a54:	4b0e      	ldr	r3, [pc, #56]	@ (8011a90 <USBD_LL_Init+0x98>)
 8011a56:	2200      	movs	r2, #0
 8011a58:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8011a5a:	480d      	ldr	r0, [pc, #52]	@ (8011a90 <USBD_LL_Init+0x98>)
 8011a5c:	f7f4 fcf0 	bl	8006440 <HAL_PCD_Init>
 8011a60:	4603      	mov	r3, r0
 8011a62:	2b00      	cmp	r3, #0
 8011a64:	d001      	beq.n	8011a6a <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 8011a66:	f7ef fc46 	bl	80012f6 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8011a6a:	2180      	movs	r1, #128	@ 0x80
 8011a6c:	4808      	ldr	r0, [pc, #32]	@ (8011a90 <USBD_LL_Init+0x98>)
 8011a6e:	f7f5 ff44 	bl	80078fa <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8011a72:	2240      	movs	r2, #64	@ 0x40
 8011a74:	2100      	movs	r1, #0
 8011a76:	4806      	ldr	r0, [pc, #24]	@ (8011a90 <USBD_LL_Init+0x98>)
 8011a78:	f7f5 fef8 	bl	800786c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8011a7c:	2280      	movs	r2, #128	@ 0x80
 8011a7e:	2101      	movs	r1, #1
 8011a80:	4803      	ldr	r0, [pc, #12]	@ (8011a90 <USBD_LL_Init+0x98>)
 8011a82:	f7f5 fef3 	bl	800786c <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 8011a86:	2300      	movs	r3, #0
}
 8011a88:	4618      	mov	r0, r3
 8011a8a:	3708      	adds	r7, #8
 8011a8c:	46bd      	mov	sp, r7
 8011a8e:	bd80      	pop	{r7, pc}
 8011a90:	24001f28 	.word	0x24001f28
 8011a94:	40080000 	.word	0x40080000

08011a98 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8011a98:	b580      	push	{r7, lr}
 8011a9a:	b084      	sub	sp, #16
 8011a9c:	af00      	add	r7, sp, #0
 8011a9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011aa0:	2300      	movs	r3, #0
 8011aa2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011aa4:	2300      	movs	r3, #0
 8011aa6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8011aa8:	687b      	ldr	r3, [r7, #4]
 8011aaa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8011aae:	4618      	mov	r0, r3
 8011ab0:	f7f4 fdd2 	bl	8006658 <HAL_PCD_Start>
 8011ab4:	4603      	mov	r3, r0
 8011ab6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011ab8:	7bfb      	ldrb	r3, [r7, #15]
 8011aba:	4618      	mov	r0, r3
 8011abc:	f000 f942 	bl	8011d44 <USBD_Get_USB_Status>
 8011ac0:	4603      	mov	r3, r0
 8011ac2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011ac4:	7bbb      	ldrb	r3, [r7, #14]
}
 8011ac6:	4618      	mov	r0, r3
 8011ac8:	3710      	adds	r7, #16
 8011aca:	46bd      	mov	sp, r7
 8011acc:	bd80      	pop	{r7, pc}

08011ace <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8011ace:	b580      	push	{r7, lr}
 8011ad0:	b084      	sub	sp, #16
 8011ad2:	af00      	add	r7, sp, #0
 8011ad4:	6078      	str	r0, [r7, #4]
 8011ad6:	4608      	mov	r0, r1
 8011ad8:	4611      	mov	r1, r2
 8011ada:	461a      	mov	r2, r3
 8011adc:	4603      	mov	r3, r0
 8011ade:	70fb      	strb	r3, [r7, #3]
 8011ae0:	460b      	mov	r3, r1
 8011ae2:	70bb      	strb	r3, [r7, #2]
 8011ae4:	4613      	mov	r3, r2
 8011ae6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011ae8:	2300      	movs	r3, #0
 8011aea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011aec:	2300      	movs	r3, #0
 8011aee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8011af0:	687b      	ldr	r3, [r7, #4]
 8011af2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8011af6:	78bb      	ldrb	r3, [r7, #2]
 8011af8:	883a      	ldrh	r2, [r7, #0]
 8011afa:	78f9      	ldrb	r1, [r7, #3]
 8011afc:	f7f5 fad3 	bl	80070a6 <HAL_PCD_EP_Open>
 8011b00:	4603      	mov	r3, r0
 8011b02:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011b04:	7bfb      	ldrb	r3, [r7, #15]
 8011b06:	4618      	mov	r0, r3
 8011b08:	f000 f91c 	bl	8011d44 <USBD_Get_USB_Status>
 8011b0c:	4603      	mov	r3, r0
 8011b0e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011b10:	7bbb      	ldrb	r3, [r7, #14]
}
 8011b12:	4618      	mov	r0, r3
 8011b14:	3710      	adds	r7, #16
 8011b16:	46bd      	mov	sp, r7
 8011b18:	bd80      	pop	{r7, pc}

08011b1a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011b1a:	b580      	push	{r7, lr}
 8011b1c:	b084      	sub	sp, #16
 8011b1e:	af00      	add	r7, sp, #0
 8011b20:	6078      	str	r0, [r7, #4]
 8011b22:	460b      	mov	r3, r1
 8011b24:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011b26:	2300      	movs	r3, #0
 8011b28:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011b2a:	2300      	movs	r3, #0
 8011b2c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8011b2e:	687b      	ldr	r3, [r7, #4]
 8011b30:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8011b34:	78fa      	ldrb	r2, [r7, #3]
 8011b36:	4611      	mov	r1, r2
 8011b38:	4618      	mov	r0, r3
 8011b3a:	f7f5 fb1c 	bl	8007176 <HAL_PCD_EP_Close>
 8011b3e:	4603      	mov	r3, r0
 8011b40:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011b42:	7bfb      	ldrb	r3, [r7, #15]
 8011b44:	4618      	mov	r0, r3
 8011b46:	f000 f8fd 	bl	8011d44 <USBD_Get_USB_Status>
 8011b4a:	4603      	mov	r3, r0
 8011b4c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011b4e:	7bbb      	ldrb	r3, [r7, #14]
}
 8011b50:	4618      	mov	r0, r3
 8011b52:	3710      	adds	r7, #16
 8011b54:	46bd      	mov	sp, r7
 8011b56:	bd80      	pop	{r7, pc}

08011b58 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011b58:	b580      	push	{r7, lr}
 8011b5a:	b084      	sub	sp, #16
 8011b5c:	af00      	add	r7, sp, #0
 8011b5e:	6078      	str	r0, [r7, #4]
 8011b60:	460b      	mov	r3, r1
 8011b62:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011b64:	2300      	movs	r3, #0
 8011b66:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011b68:	2300      	movs	r3, #0
 8011b6a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8011b6c:	687b      	ldr	r3, [r7, #4]
 8011b6e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8011b72:	78fa      	ldrb	r2, [r7, #3]
 8011b74:	4611      	mov	r1, r2
 8011b76:	4618      	mov	r0, r3
 8011b78:	f7f5 fbd4 	bl	8007324 <HAL_PCD_EP_SetStall>
 8011b7c:	4603      	mov	r3, r0
 8011b7e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011b80:	7bfb      	ldrb	r3, [r7, #15]
 8011b82:	4618      	mov	r0, r3
 8011b84:	f000 f8de 	bl	8011d44 <USBD_Get_USB_Status>
 8011b88:	4603      	mov	r3, r0
 8011b8a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011b8c:	7bbb      	ldrb	r3, [r7, #14]
}
 8011b8e:	4618      	mov	r0, r3
 8011b90:	3710      	adds	r7, #16
 8011b92:	46bd      	mov	sp, r7
 8011b94:	bd80      	pop	{r7, pc}

08011b96 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011b96:	b580      	push	{r7, lr}
 8011b98:	b084      	sub	sp, #16
 8011b9a:	af00      	add	r7, sp, #0
 8011b9c:	6078      	str	r0, [r7, #4]
 8011b9e:	460b      	mov	r3, r1
 8011ba0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011ba2:	2300      	movs	r3, #0
 8011ba4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011ba6:	2300      	movs	r3, #0
 8011ba8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8011baa:	687b      	ldr	r3, [r7, #4]
 8011bac:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8011bb0:	78fa      	ldrb	r2, [r7, #3]
 8011bb2:	4611      	mov	r1, r2
 8011bb4:	4618      	mov	r0, r3
 8011bb6:	f7f5 fc18 	bl	80073ea <HAL_PCD_EP_ClrStall>
 8011bba:	4603      	mov	r3, r0
 8011bbc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011bbe:	7bfb      	ldrb	r3, [r7, #15]
 8011bc0:	4618      	mov	r0, r3
 8011bc2:	f000 f8bf 	bl	8011d44 <USBD_Get_USB_Status>
 8011bc6:	4603      	mov	r3, r0
 8011bc8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011bca:	7bbb      	ldrb	r3, [r7, #14]
}
 8011bcc:	4618      	mov	r0, r3
 8011bce:	3710      	adds	r7, #16
 8011bd0:	46bd      	mov	sp, r7
 8011bd2:	bd80      	pop	{r7, pc}

08011bd4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011bd4:	b480      	push	{r7}
 8011bd6:	b085      	sub	sp, #20
 8011bd8:	af00      	add	r7, sp, #0
 8011bda:	6078      	str	r0, [r7, #4]
 8011bdc:	460b      	mov	r3, r1
 8011bde:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8011be0:	687b      	ldr	r3, [r7, #4]
 8011be2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8011be6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8011be8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011bec:	2b00      	cmp	r3, #0
 8011bee:	da0b      	bge.n	8011c08 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8011bf0:	78fb      	ldrb	r3, [r7, #3]
 8011bf2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8011bf6:	68f9      	ldr	r1, [r7, #12]
 8011bf8:	4613      	mov	r3, r2
 8011bfa:	00db      	lsls	r3, r3, #3
 8011bfc:	4413      	add	r3, r2
 8011bfe:	009b      	lsls	r3, r3, #2
 8011c00:	440b      	add	r3, r1
 8011c02:	3316      	adds	r3, #22
 8011c04:	781b      	ldrb	r3, [r3, #0]
 8011c06:	e00b      	b.n	8011c20 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8011c08:	78fb      	ldrb	r3, [r7, #3]
 8011c0a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8011c0e:	68f9      	ldr	r1, [r7, #12]
 8011c10:	4613      	mov	r3, r2
 8011c12:	00db      	lsls	r3, r3, #3
 8011c14:	4413      	add	r3, r2
 8011c16:	009b      	lsls	r3, r3, #2
 8011c18:	440b      	add	r3, r1
 8011c1a:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8011c1e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8011c20:	4618      	mov	r0, r3
 8011c22:	3714      	adds	r7, #20
 8011c24:	46bd      	mov	sp, r7
 8011c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c2a:	4770      	bx	lr

08011c2c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8011c2c:	b580      	push	{r7, lr}
 8011c2e:	b084      	sub	sp, #16
 8011c30:	af00      	add	r7, sp, #0
 8011c32:	6078      	str	r0, [r7, #4]
 8011c34:	460b      	mov	r3, r1
 8011c36:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011c38:	2300      	movs	r3, #0
 8011c3a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011c3c:	2300      	movs	r3, #0
 8011c3e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8011c40:	687b      	ldr	r3, [r7, #4]
 8011c42:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8011c46:	78fa      	ldrb	r2, [r7, #3]
 8011c48:	4611      	mov	r1, r2
 8011c4a:	4618      	mov	r0, r3
 8011c4c:	f7f5 fa07 	bl	800705e <HAL_PCD_SetAddress>
 8011c50:	4603      	mov	r3, r0
 8011c52:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011c54:	7bfb      	ldrb	r3, [r7, #15]
 8011c56:	4618      	mov	r0, r3
 8011c58:	f000 f874 	bl	8011d44 <USBD_Get_USB_Status>
 8011c5c:	4603      	mov	r3, r0
 8011c5e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011c60:	7bbb      	ldrb	r3, [r7, #14]
}
 8011c62:	4618      	mov	r0, r3
 8011c64:	3710      	adds	r7, #16
 8011c66:	46bd      	mov	sp, r7
 8011c68:	bd80      	pop	{r7, pc}

08011c6a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8011c6a:	b580      	push	{r7, lr}
 8011c6c:	b086      	sub	sp, #24
 8011c6e:	af00      	add	r7, sp, #0
 8011c70:	60f8      	str	r0, [r7, #12]
 8011c72:	607a      	str	r2, [r7, #4]
 8011c74:	603b      	str	r3, [r7, #0]
 8011c76:	460b      	mov	r3, r1
 8011c78:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011c7a:	2300      	movs	r3, #0
 8011c7c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011c7e:	2300      	movs	r3, #0
 8011c80:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8011c82:	68fb      	ldr	r3, [r7, #12]
 8011c84:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8011c88:	7af9      	ldrb	r1, [r7, #11]
 8011c8a:	683b      	ldr	r3, [r7, #0]
 8011c8c:	687a      	ldr	r2, [r7, #4]
 8011c8e:	f7f5 fb0f 	bl	80072b0 <HAL_PCD_EP_Transmit>
 8011c92:	4603      	mov	r3, r0
 8011c94:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011c96:	7dfb      	ldrb	r3, [r7, #23]
 8011c98:	4618      	mov	r0, r3
 8011c9a:	f000 f853 	bl	8011d44 <USBD_Get_USB_Status>
 8011c9e:	4603      	mov	r3, r0
 8011ca0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8011ca2:	7dbb      	ldrb	r3, [r7, #22]
}
 8011ca4:	4618      	mov	r0, r3
 8011ca6:	3718      	adds	r7, #24
 8011ca8:	46bd      	mov	sp, r7
 8011caa:	bd80      	pop	{r7, pc}

08011cac <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8011cac:	b580      	push	{r7, lr}
 8011cae:	b086      	sub	sp, #24
 8011cb0:	af00      	add	r7, sp, #0
 8011cb2:	60f8      	str	r0, [r7, #12]
 8011cb4:	607a      	str	r2, [r7, #4]
 8011cb6:	603b      	str	r3, [r7, #0]
 8011cb8:	460b      	mov	r3, r1
 8011cba:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011cbc:	2300      	movs	r3, #0
 8011cbe:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011cc0:	2300      	movs	r3, #0
 8011cc2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8011cc4:	68fb      	ldr	r3, [r7, #12]
 8011cc6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8011cca:	7af9      	ldrb	r1, [r7, #11]
 8011ccc:	683b      	ldr	r3, [r7, #0]
 8011cce:	687a      	ldr	r2, [r7, #4]
 8011cd0:	f7f5 fa9b 	bl	800720a <HAL_PCD_EP_Receive>
 8011cd4:	4603      	mov	r3, r0
 8011cd6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011cd8:	7dfb      	ldrb	r3, [r7, #23]
 8011cda:	4618      	mov	r0, r3
 8011cdc:	f000 f832 	bl	8011d44 <USBD_Get_USB_Status>
 8011ce0:	4603      	mov	r3, r0
 8011ce2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8011ce4:	7dbb      	ldrb	r3, [r7, #22]
}
 8011ce6:	4618      	mov	r0, r3
 8011ce8:	3718      	adds	r7, #24
 8011cea:	46bd      	mov	sp, r7
 8011cec:	bd80      	pop	{r7, pc}

08011cee <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011cee:	b580      	push	{r7, lr}
 8011cf0:	b082      	sub	sp, #8
 8011cf2:	af00      	add	r7, sp, #0
 8011cf4:	6078      	str	r0, [r7, #4]
 8011cf6:	460b      	mov	r3, r1
 8011cf8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8011cfa:	687b      	ldr	r3, [r7, #4]
 8011cfc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8011d00:	78fa      	ldrb	r2, [r7, #3]
 8011d02:	4611      	mov	r1, r2
 8011d04:	4618      	mov	r0, r3
 8011d06:	f7f5 fabb 	bl	8007280 <HAL_PCD_EP_GetRxCount>
 8011d0a:	4603      	mov	r3, r0
}
 8011d0c:	4618      	mov	r0, r3
 8011d0e:	3708      	adds	r7, #8
 8011d10:	46bd      	mov	sp, r7
 8011d12:	bd80      	pop	{r7, pc}

08011d14 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8011d14:	b480      	push	{r7}
 8011d16:	b083      	sub	sp, #12
 8011d18:	af00      	add	r7, sp, #0
 8011d1a:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8011d1c:	4b03      	ldr	r3, [pc, #12]	@ (8011d2c <USBD_static_malloc+0x18>)
}
 8011d1e:	4618      	mov	r0, r3
 8011d20:	370c      	adds	r7, #12
 8011d22:	46bd      	mov	sp, r7
 8011d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d28:	4770      	bx	lr
 8011d2a:	bf00      	nop
 8011d2c:	2400240c 	.word	0x2400240c

08011d30 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8011d30:	b480      	push	{r7}
 8011d32:	b083      	sub	sp, #12
 8011d34:	af00      	add	r7, sp, #0
 8011d36:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 8011d38:	bf00      	nop
 8011d3a:	370c      	adds	r7, #12
 8011d3c:	46bd      	mov	sp, r7
 8011d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d42:	4770      	bx	lr

08011d44 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8011d44:	b480      	push	{r7}
 8011d46:	b085      	sub	sp, #20
 8011d48:	af00      	add	r7, sp, #0
 8011d4a:	4603      	mov	r3, r0
 8011d4c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011d4e:	2300      	movs	r3, #0
 8011d50:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8011d52:	79fb      	ldrb	r3, [r7, #7]
 8011d54:	2b03      	cmp	r3, #3
 8011d56:	d817      	bhi.n	8011d88 <USBD_Get_USB_Status+0x44>
 8011d58:	a201      	add	r2, pc, #4	@ (adr r2, 8011d60 <USBD_Get_USB_Status+0x1c>)
 8011d5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011d5e:	bf00      	nop
 8011d60:	08011d71 	.word	0x08011d71
 8011d64:	08011d77 	.word	0x08011d77
 8011d68:	08011d7d 	.word	0x08011d7d
 8011d6c:	08011d83 	.word	0x08011d83
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8011d70:	2300      	movs	r3, #0
 8011d72:	73fb      	strb	r3, [r7, #15]
    break;
 8011d74:	e00b      	b.n	8011d8e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8011d76:	2303      	movs	r3, #3
 8011d78:	73fb      	strb	r3, [r7, #15]
    break;
 8011d7a:	e008      	b.n	8011d8e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8011d7c:	2301      	movs	r3, #1
 8011d7e:	73fb      	strb	r3, [r7, #15]
    break;
 8011d80:	e005      	b.n	8011d8e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8011d82:	2303      	movs	r3, #3
 8011d84:	73fb      	strb	r3, [r7, #15]
    break;
 8011d86:	e002      	b.n	8011d8e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8011d88:	2303      	movs	r3, #3
 8011d8a:	73fb      	strb	r3, [r7, #15]
    break;
 8011d8c:	bf00      	nop
  }
  return usb_status;
 8011d8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8011d90:	4618      	mov	r0, r3
 8011d92:	3714      	adds	r7, #20
 8011d94:	46bd      	mov	sp, r7
 8011d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d9a:	4770      	bx	lr

08011d9c <__cvt>:
 8011d9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011d9e:	ed2d 8b02 	vpush	{d8}
 8011da2:	eeb0 8b40 	vmov.f64	d8, d0
 8011da6:	b085      	sub	sp, #20
 8011da8:	4617      	mov	r7, r2
 8011daa:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8011dac:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8011dae:	ee18 2a90 	vmov	r2, s17
 8011db2:	f025 0520 	bic.w	r5, r5, #32
 8011db6:	2a00      	cmp	r2, #0
 8011db8:	bfb6      	itet	lt
 8011dba:	222d      	movlt	r2, #45	@ 0x2d
 8011dbc:	2200      	movge	r2, #0
 8011dbe:	eeb1 8b40 	vneglt.f64	d8, d0
 8011dc2:	2d46      	cmp	r5, #70	@ 0x46
 8011dc4:	460c      	mov	r4, r1
 8011dc6:	701a      	strb	r2, [r3, #0]
 8011dc8:	d004      	beq.n	8011dd4 <__cvt+0x38>
 8011dca:	2d45      	cmp	r5, #69	@ 0x45
 8011dcc:	d100      	bne.n	8011dd0 <__cvt+0x34>
 8011dce:	3401      	adds	r4, #1
 8011dd0:	2102      	movs	r1, #2
 8011dd2:	e000      	b.n	8011dd6 <__cvt+0x3a>
 8011dd4:	2103      	movs	r1, #3
 8011dd6:	ab03      	add	r3, sp, #12
 8011dd8:	9301      	str	r3, [sp, #4]
 8011dda:	ab02      	add	r3, sp, #8
 8011ddc:	9300      	str	r3, [sp, #0]
 8011dde:	4622      	mov	r2, r4
 8011de0:	4633      	mov	r3, r6
 8011de2:	eeb0 0b48 	vmov.f64	d0, d8
 8011de6:	f000 fe3f 	bl	8012a68 <_dtoa_r>
 8011dea:	2d47      	cmp	r5, #71	@ 0x47
 8011dec:	d114      	bne.n	8011e18 <__cvt+0x7c>
 8011dee:	07fb      	lsls	r3, r7, #31
 8011df0:	d50a      	bpl.n	8011e08 <__cvt+0x6c>
 8011df2:	1902      	adds	r2, r0, r4
 8011df4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8011df8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011dfc:	bf08      	it	eq
 8011dfe:	9203      	streq	r2, [sp, #12]
 8011e00:	2130      	movs	r1, #48	@ 0x30
 8011e02:	9b03      	ldr	r3, [sp, #12]
 8011e04:	4293      	cmp	r3, r2
 8011e06:	d319      	bcc.n	8011e3c <__cvt+0xa0>
 8011e08:	9b03      	ldr	r3, [sp, #12]
 8011e0a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011e0c:	1a1b      	subs	r3, r3, r0
 8011e0e:	6013      	str	r3, [r2, #0]
 8011e10:	b005      	add	sp, #20
 8011e12:	ecbd 8b02 	vpop	{d8}
 8011e16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011e18:	2d46      	cmp	r5, #70	@ 0x46
 8011e1a:	eb00 0204 	add.w	r2, r0, r4
 8011e1e:	d1e9      	bne.n	8011df4 <__cvt+0x58>
 8011e20:	7803      	ldrb	r3, [r0, #0]
 8011e22:	2b30      	cmp	r3, #48	@ 0x30
 8011e24:	d107      	bne.n	8011e36 <__cvt+0x9a>
 8011e26:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8011e2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e2e:	bf1c      	itt	ne
 8011e30:	f1c4 0401 	rsbne	r4, r4, #1
 8011e34:	6034      	strne	r4, [r6, #0]
 8011e36:	6833      	ldr	r3, [r6, #0]
 8011e38:	441a      	add	r2, r3
 8011e3a:	e7db      	b.n	8011df4 <__cvt+0x58>
 8011e3c:	1c5c      	adds	r4, r3, #1
 8011e3e:	9403      	str	r4, [sp, #12]
 8011e40:	7019      	strb	r1, [r3, #0]
 8011e42:	e7de      	b.n	8011e02 <__cvt+0x66>

08011e44 <__exponent>:
 8011e44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011e46:	2900      	cmp	r1, #0
 8011e48:	bfba      	itte	lt
 8011e4a:	4249      	neglt	r1, r1
 8011e4c:	232d      	movlt	r3, #45	@ 0x2d
 8011e4e:	232b      	movge	r3, #43	@ 0x2b
 8011e50:	2909      	cmp	r1, #9
 8011e52:	7002      	strb	r2, [r0, #0]
 8011e54:	7043      	strb	r3, [r0, #1]
 8011e56:	dd29      	ble.n	8011eac <__exponent+0x68>
 8011e58:	f10d 0307 	add.w	r3, sp, #7
 8011e5c:	461d      	mov	r5, r3
 8011e5e:	270a      	movs	r7, #10
 8011e60:	461a      	mov	r2, r3
 8011e62:	fbb1 f6f7 	udiv	r6, r1, r7
 8011e66:	fb07 1416 	mls	r4, r7, r6, r1
 8011e6a:	3430      	adds	r4, #48	@ 0x30
 8011e6c:	f802 4c01 	strb.w	r4, [r2, #-1]
 8011e70:	460c      	mov	r4, r1
 8011e72:	2c63      	cmp	r4, #99	@ 0x63
 8011e74:	f103 33ff 	add.w	r3, r3, #4294967295
 8011e78:	4631      	mov	r1, r6
 8011e7a:	dcf1      	bgt.n	8011e60 <__exponent+0x1c>
 8011e7c:	3130      	adds	r1, #48	@ 0x30
 8011e7e:	1e94      	subs	r4, r2, #2
 8011e80:	f803 1c01 	strb.w	r1, [r3, #-1]
 8011e84:	1c41      	adds	r1, r0, #1
 8011e86:	4623      	mov	r3, r4
 8011e88:	42ab      	cmp	r3, r5
 8011e8a:	d30a      	bcc.n	8011ea2 <__exponent+0x5e>
 8011e8c:	f10d 0309 	add.w	r3, sp, #9
 8011e90:	1a9b      	subs	r3, r3, r2
 8011e92:	42ac      	cmp	r4, r5
 8011e94:	bf88      	it	hi
 8011e96:	2300      	movhi	r3, #0
 8011e98:	3302      	adds	r3, #2
 8011e9a:	4403      	add	r3, r0
 8011e9c:	1a18      	subs	r0, r3, r0
 8011e9e:	b003      	add	sp, #12
 8011ea0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011ea2:	f813 6b01 	ldrb.w	r6, [r3], #1
 8011ea6:	f801 6f01 	strb.w	r6, [r1, #1]!
 8011eaa:	e7ed      	b.n	8011e88 <__exponent+0x44>
 8011eac:	2330      	movs	r3, #48	@ 0x30
 8011eae:	3130      	adds	r1, #48	@ 0x30
 8011eb0:	7083      	strb	r3, [r0, #2]
 8011eb2:	70c1      	strb	r1, [r0, #3]
 8011eb4:	1d03      	adds	r3, r0, #4
 8011eb6:	e7f1      	b.n	8011e9c <__exponent+0x58>

08011eb8 <_printf_float>:
 8011eb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ebc:	b08d      	sub	sp, #52	@ 0x34
 8011ebe:	460c      	mov	r4, r1
 8011ec0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8011ec4:	4616      	mov	r6, r2
 8011ec6:	461f      	mov	r7, r3
 8011ec8:	4605      	mov	r5, r0
 8011eca:	f000 fccb 	bl	8012864 <_localeconv_r>
 8011ece:	f8d0 b000 	ldr.w	fp, [r0]
 8011ed2:	4658      	mov	r0, fp
 8011ed4:	f7ee fa54 	bl	8000380 <strlen>
 8011ed8:	2300      	movs	r3, #0
 8011eda:	930a      	str	r3, [sp, #40]	@ 0x28
 8011edc:	f8d8 3000 	ldr.w	r3, [r8]
 8011ee0:	f894 9018 	ldrb.w	r9, [r4, #24]
 8011ee4:	6822      	ldr	r2, [r4, #0]
 8011ee6:	9005      	str	r0, [sp, #20]
 8011ee8:	3307      	adds	r3, #7
 8011eea:	f023 0307 	bic.w	r3, r3, #7
 8011eee:	f103 0108 	add.w	r1, r3, #8
 8011ef2:	f8c8 1000 	str.w	r1, [r8]
 8011ef6:	ed93 0b00 	vldr	d0, [r3]
 8011efa:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8012158 <_printf_float+0x2a0>
 8011efe:	eeb0 7bc0 	vabs.f64	d7, d0
 8011f02:	eeb4 7b46 	vcmp.f64	d7, d6
 8011f06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f0a:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 8011f0e:	dd24      	ble.n	8011f5a <_printf_float+0xa2>
 8011f10:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8011f14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f18:	d502      	bpl.n	8011f20 <_printf_float+0x68>
 8011f1a:	232d      	movs	r3, #45	@ 0x2d
 8011f1c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011f20:	498f      	ldr	r1, [pc, #572]	@ (8012160 <_printf_float+0x2a8>)
 8011f22:	4b90      	ldr	r3, [pc, #576]	@ (8012164 <_printf_float+0x2ac>)
 8011f24:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8011f28:	bf94      	ite	ls
 8011f2a:	4688      	movls	r8, r1
 8011f2c:	4698      	movhi	r8, r3
 8011f2e:	f022 0204 	bic.w	r2, r2, #4
 8011f32:	2303      	movs	r3, #3
 8011f34:	6123      	str	r3, [r4, #16]
 8011f36:	6022      	str	r2, [r4, #0]
 8011f38:	f04f 0a00 	mov.w	sl, #0
 8011f3c:	9700      	str	r7, [sp, #0]
 8011f3e:	4633      	mov	r3, r6
 8011f40:	aa0b      	add	r2, sp, #44	@ 0x2c
 8011f42:	4621      	mov	r1, r4
 8011f44:	4628      	mov	r0, r5
 8011f46:	f000 f9d1 	bl	80122ec <_printf_common>
 8011f4a:	3001      	adds	r0, #1
 8011f4c:	f040 8089 	bne.w	8012062 <_printf_float+0x1aa>
 8011f50:	f04f 30ff 	mov.w	r0, #4294967295
 8011f54:	b00d      	add	sp, #52	@ 0x34
 8011f56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011f5a:	eeb4 0b40 	vcmp.f64	d0, d0
 8011f5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f62:	d709      	bvc.n	8011f78 <_printf_float+0xc0>
 8011f64:	ee10 3a90 	vmov	r3, s1
 8011f68:	2b00      	cmp	r3, #0
 8011f6a:	bfbc      	itt	lt
 8011f6c:	232d      	movlt	r3, #45	@ 0x2d
 8011f6e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8011f72:	497d      	ldr	r1, [pc, #500]	@ (8012168 <_printf_float+0x2b0>)
 8011f74:	4b7d      	ldr	r3, [pc, #500]	@ (801216c <_printf_float+0x2b4>)
 8011f76:	e7d5      	b.n	8011f24 <_printf_float+0x6c>
 8011f78:	6863      	ldr	r3, [r4, #4]
 8011f7a:	1c59      	adds	r1, r3, #1
 8011f7c:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8011f80:	d139      	bne.n	8011ff6 <_printf_float+0x13e>
 8011f82:	2306      	movs	r3, #6
 8011f84:	6063      	str	r3, [r4, #4]
 8011f86:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8011f8a:	2300      	movs	r3, #0
 8011f8c:	6022      	str	r2, [r4, #0]
 8011f8e:	9303      	str	r3, [sp, #12]
 8011f90:	ab0a      	add	r3, sp, #40	@ 0x28
 8011f92:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8011f96:	ab09      	add	r3, sp, #36	@ 0x24
 8011f98:	9300      	str	r3, [sp, #0]
 8011f9a:	6861      	ldr	r1, [r4, #4]
 8011f9c:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8011fa0:	4628      	mov	r0, r5
 8011fa2:	f7ff fefb 	bl	8011d9c <__cvt>
 8011fa6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8011faa:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8011fac:	4680      	mov	r8, r0
 8011fae:	d129      	bne.n	8012004 <_printf_float+0x14c>
 8011fb0:	1cc8      	adds	r0, r1, #3
 8011fb2:	db02      	blt.n	8011fba <_printf_float+0x102>
 8011fb4:	6863      	ldr	r3, [r4, #4]
 8011fb6:	4299      	cmp	r1, r3
 8011fb8:	dd41      	ble.n	801203e <_printf_float+0x186>
 8011fba:	f1a9 0902 	sub.w	r9, r9, #2
 8011fbe:	fa5f f989 	uxtb.w	r9, r9
 8011fc2:	3901      	subs	r1, #1
 8011fc4:	464a      	mov	r2, r9
 8011fc6:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8011fca:	9109      	str	r1, [sp, #36]	@ 0x24
 8011fcc:	f7ff ff3a 	bl	8011e44 <__exponent>
 8011fd0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011fd2:	1813      	adds	r3, r2, r0
 8011fd4:	2a01      	cmp	r2, #1
 8011fd6:	4682      	mov	sl, r0
 8011fd8:	6123      	str	r3, [r4, #16]
 8011fda:	dc02      	bgt.n	8011fe2 <_printf_float+0x12a>
 8011fdc:	6822      	ldr	r2, [r4, #0]
 8011fde:	07d2      	lsls	r2, r2, #31
 8011fe0:	d501      	bpl.n	8011fe6 <_printf_float+0x12e>
 8011fe2:	3301      	adds	r3, #1
 8011fe4:	6123      	str	r3, [r4, #16]
 8011fe6:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8011fea:	2b00      	cmp	r3, #0
 8011fec:	d0a6      	beq.n	8011f3c <_printf_float+0x84>
 8011fee:	232d      	movs	r3, #45	@ 0x2d
 8011ff0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011ff4:	e7a2      	b.n	8011f3c <_printf_float+0x84>
 8011ff6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8011ffa:	d1c4      	bne.n	8011f86 <_printf_float+0xce>
 8011ffc:	2b00      	cmp	r3, #0
 8011ffe:	d1c2      	bne.n	8011f86 <_printf_float+0xce>
 8012000:	2301      	movs	r3, #1
 8012002:	e7bf      	b.n	8011f84 <_printf_float+0xcc>
 8012004:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8012008:	d9db      	bls.n	8011fc2 <_printf_float+0x10a>
 801200a:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 801200e:	d118      	bne.n	8012042 <_printf_float+0x18a>
 8012010:	2900      	cmp	r1, #0
 8012012:	6863      	ldr	r3, [r4, #4]
 8012014:	dd0b      	ble.n	801202e <_printf_float+0x176>
 8012016:	6121      	str	r1, [r4, #16]
 8012018:	b913      	cbnz	r3, 8012020 <_printf_float+0x168>
 801201a:	6822      	ldr	r2, [r4, #0]
 801201c:	07d0      	lsls	r0, r2, #31
 801201e:	d502      	bpl.n	8012026 <_printf_float+0x16e>
 8012020:	3301      	adds	r3, #1
 8012022:	440b      	add	r3, r1
 8012024:	6123      	str	r3, [r4, #16]
 8012026:	65a1      	str	r1, [r4, #88]	@ 0x58
 8012028:	f04f 0a00 	mov.w	sl, #0
 801202c:	e7db      	b.n	8011fe6 <_printf_float+0x12e>
 801202e:	b913      	cbnz	r3, 8012036 <_printf_float+0x17e>
 8012030:	6822      	ldr	r2, [r4, #0]
 8012032:	07d2      	lsls	r2, r2, #31
 8012034:	d501      	bpl.n	801203a <_printf_float+0x182>
 8012036:	3302      	adds	r3, #2
 8012038:	e7f4      	b.n	8012024 <_printf_float+0x16c>
 801203a:	2301      	movs	r3, #1
 801203c:	e7f2      	b.n	8012024 <_printf_float+0x16c>
 801203e:	f04f 0967 	mov.w	r9, #103	@ 0x67
 8012042:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012044:	4299      	cmp	r1, r3
 8012046:	db05      	blt.n	8012054 <_printf_float+0x19c>
 8012048:	6823      	ldr	r3, [r4, #0]
 801204a:	6121      	str	r1, [r4, #16]
 801204c:	07d8      	lsls	r0, r3, #31
 801204e:	d5ea      	bpl.n	8012026 <_printf_float+0x16e>
 8012050:	1c4b      	adds	r3, r1, #1
 8012052:	e7e7      	b.n	8012024 <_printf_float+0x16c>
 8012054:	2900      	cmp	r1, #0
 8012056:	bfd4      	ite	le
 8012058:	f1c1 0202 	rsble	r2, r1, #2
 801205c:	2201      	movgt	r2, #1
 801205e:	4413      	add	r3, r2
 8012060:	e7e0      	b.n	8012024 <_printf_float+0x16c>
 8012062:	6823      	ldr	r3, [r4, #0]
 8012064:	055a      	lsls	r2, r3, #21
 8012066:	d407      	bmi.n	8012078 <_printf_float+0x1c0>
 8012068:	6923      	ldr	r3, [r4, #16]
 801206a:	4642      	mov	r2, r8
 801206c:	4631      	mov	r1, r6
 801206e:	4628      	mov	r0, r5
 8012070:	47b8      	blx	r7
 8012072:	3001      	adds	r0, #1
 8012074:	d12a      	bne.n	80120cc <_printf_float+0x214>
 8012076:	e76b      	b.n	8011f50 <_printf_float+0x98>
 8012078:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 801207c:	f240 80e0 	bls.w	8012240 <_printf_float+0x388>
 8012080:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8012084:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8012088:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801208c:	d133      	bne.n	80120f6 <_printf_float+0x23e>
 801208e:	4a38      	ldr	r2, [pc, #224]	@ (8012170 <_printf_float+0x2b8>)
 8012090:	2301      	movs	r3, #1
 8012092:	4631      	mov	r1, r6
 8012094:	4628      	mov	r0, r5
 8012096:	47b8      	blx	r7
 8012098:	3001      	adds	r0, #1
 801209a:	f43f af59 	beq.w	8011f50 <_printf_float+0x98>
 801209e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80120a2:	4543      	cmp	r3, r8
 80120a4:	db02      	blt.n	80120ac <_printf_float+0x1f4>
 80120a6:	6823      	ldr	r3, [r4, #0]
 80120a8:	07d8      	lsls	r0, r3, #31
 80120aa:	d50f      	bpl.n	80120cc <_printf_float+0x214>
 80120ac:	9b05      	ldr	r3, [sp, #20]
 80120ae:	465a      	mov	r2, fp
 80120b0:	4631      	mov	r1, r6
 80120b2:	4628      	mov	r0, r5
 80120b4:	47b8      	blx	r7
 80120b6:	3001      	adds	r0, #1
 80120b8:	f43f af4a 	beq.w	8011f50 <_printf_float+0x98>
 80120bc:	f04f 0900 	mov.w	r9, #0
 80120c0:	f108 38ff 	add.w	r8, r8, #4294967295
 80120c4:	f104 0a1a 	add.w	sl, r4, #26
 80120c8:	45c8      	cmp	r8, r9
 80120ca:	dc09      	bgt.n	80120e0 <_printf_float+0x228>
 80120cc:	6823      	ldr	r3, [r4, #0]
 80120ce:	079b      	lsls	r3, r3, #30
 80120d0:	f100 8107 	bmi.w	80122e2 <_printf_float+0x42a>
 80120d4:	68e0      	ldr	r0, [r4, #12]
 80120d6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80120d8:	4298      	cmp	r0, r3
 80120da:	bfb8      	it	lt
 80120dc:	4618      	movlt	r0, r3
 80120de:	e739      	b.n	8011f54 <_printf_float+0x9c>
 80120e0:	2301      	movs	r3, #1
 80120e2:	4652      	mov	r2, sl
 80120e4:	4631      	mov	r1, r6
 80120e6:	4628      	mov	r0, r5
 80120e8:	47b8      	blx	r7
 80120ea:	3001      	adds	r0, #1
 80120ec:	f43f af30 	beq.w	8011f50 <_printf_float+0x98>
 80120f0:	f109 0901 	add.w	r9, r9, #1
 80120f4:	e7e8      	b.n	80120c8 <_printf_float+0x210>
 80120f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80120f8:	2b00      	cmp	r3, #0
 80120fa:	dc3b      	bgt.n	8012174 <_printf_float+0x2bc>
 80120fc:	4a1c      	ldr	r2, [pc, #112]	@ (8012170 <_printf_float+0x2b8>)
 80120fe:	2301      	movs	r3, #1
 8012100:	4631      	mov	r1, r6
 8012102:	4628      	mov	r0, r5
 8012104:	47b8      	blx	r7
 8012106:	3001      	adds	r0, #1
 8012108:	f43f af22 	beq.w	8011f50 <_printf_float+0x98>
 801210c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8012110:	ea59 0303 	orrs.w	r3, r9, r3
 8012114:	d102      	bne.n	801211c <_printf_float+0x264>
 8012116:	6823      	ldr	r3, [r4, #0]
 8012118:	07d9      	lsls	r1, r3, #31
 801211a:	d5d7      	bpl.n	80120cc <_printf_float+0x214>
 801211c:	9b05      	ldr	r3, [sp, #20]
 801211e:	465a      	mov	r2, fp
 8012120:	4631      	mov	r1, r6
 8012122:	4628      	mov	r0, r5
 8012124:	47b8      	blx	r7
 8012126:	3001      	adds	r0, #1
 8012128:	f43f af12 	beq.w	8011f50 <_printf_float+0x98>
 801212c:	f04f 0a00 	mov.w	sl, #0
 8012130:	f104 0b1a 	add.w	fp, r4, #26
 8012134:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012136:	425b      	negs	r3, r3
 8012138:	4553      	cmp	r3, sl
 801213a:	dc01      	bgt.n	8012140 <_printf_float+0x288>
 801213c:	464b      	mov	r3, r9
 801213e:	e794      	b.n	801206a <_printf_float+0x1b2>
 8012140:	2301      	movs	r3, #1
 8012142:	465a      	mov	r2, fp
 8012144:	4631      	mov	r1, r6
 8012146:	4628      	mov	r0, r5
 8012148:	47b8      	blx	r7
 801214a:	3001      	adds	r0, #1
 801214c:	f43f af00 	beq.w	8011f50 <_printf_float+0x98>
 8012150:	f10a 0a01 	add.w	sl, sl, #1
 8012154:	e7ee      	b.n	8012134 <_printf_float+0x27c>
 8012156:	bf00      	nop
 8012158:	ffffffff 	.word	0xffffffff
 801215c:	7fefffff 	.word	0x7fefffff
 8012160:	08014a34 	.word	0x08014a34
 8012164:	08014a38 	.word	0x08014a38
 8012168:	08014a3c 	.word	0x08014a3c
 801216c:	08014a40 	.word	0x08014a40
 8012170:	08014a44 	.word	0x08014a44
 8012174:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8012176:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801217a:	4553      	cmp	r3, sl
 801217c:	bfa8      	it	ge
 801217e:	4653      	movge	r3, sl
 8012180:	2b00      	cmp	r3, #0
 8012182:	4699      	mov	r9, r3
 8012184:	dc37      	bgt.n	80121f6 <_printf_float+0x33e>
 8012186:	2300      	movs	r3, #0
 8012188:	9307      	str	r3, [sp, #28]
 801218a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801218e:	f104 021a 	add.w	r2, r4, #26
 8012192:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8012194:	9907      	ldr	r1, [sp, #28]
 8012196:	9306      	str	r3, [sp, #24]
 8012198:	eba3 0309 	sub.w	r3, r3, r9
 801219c:	428b      	cmp	r3, r1
 801219e:	dc31      	bgt.n	8012204 <_printf_float+0x34c>
 80121a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80121a2:	459a      	cmp	sl, r3
 80121a4:	dc3b      	bgt.n	801221e <_printf_float+0x366>
 80121a6:	6823      	ldr	r3, [r4, #0]
 80121a8:	07da      	lsls	r2, r3, #31
 80121aa:	d438      	bmi.n	801221e <_printf_float+0x366>
 80121ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80121ae:	ebaa 0903 	sub.w	r9, sl, r3
 80121b2:	9b06      	ldr	r3, [sp, #24]
 80121b4:	ebaa 0303 	sub.w	r3, sl, r3
 80121b8:	4599      	cmp	r9, r3
 80121ba:	bfa8      	it	ge
 80121bc:	4699      	movge	r9, r3
 80121be:	f1b9 0f00 	cmp.w	r9, #0
 80121c2:	dc34      	bgt.n	801222e <_printf_float+0x376>
 80121c4:	f04f 0800 	mov.w	r8, #0
 80121c8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80121cc:	f104 0b1a 	add.w	fp, r4, #26
 80121d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80121d2:	ebaa 0303 	sub.w	r3, sl, r3
 80121d6:	eba3 0309 	sub.w	r3, r3, r9
 80121da:	4543      	cmp	r3, r8
 80121dc:	f77f af76 	ble.w	80120cc <_printf_float+0x214>
 80121e0:	2301      	movs	r3, #1
 80121e2:	465a      	mov	r2, fp
 80121e4:	4631      	mov	r1, r6
 80121e6:	4628      	mov	r0, r5
 80121e8:	47b8      	blx	r7
 80121ea:	3001      	adds	r0, #1
 80121ec:	f43f aeb0 	beq.w	8011f50 <_printf_float+0x98>
 80121f0:	f108 0801 	add.w	r8, r8, #1
 80121f4:	e7ec      	b.n	80121d0 <_printf_float+0x318>
 80121f6:	4642      	mov	r2, r8
 80121f8:	4631      	mov	r1, r6
 80121fa:	4628      	mov	r0, r5
 80121fc:	47b8      	blx	r7
 80121fe:	3001      	adds	r0, #1
 8012200:	d1c1      	bne.n	8012186 <_printf_float+0x2ce>
 8012202:	e6a5      	b.n	8011f50 <_printf_float+0x98>
 8012204:	2301      	movs	r3, #1
 8012206:	4631      	mov	r1, r6
 8012208:	4628      	mov	r0, r5
 801220a:	9206      	str	r2, [sp, #24]
 801220c:	47b8      	blx	r7
 801220e:	3001      	adds	r0, #1
 8012210:	f43f ae9e 	beq.w	8011f50 <_printf_float+0x98>
 8012214:	9b07      	ldr	r3, [sp, #28]
 8012216:	9a06      	ldr	r2, [sp, #24]
 8012218:	3301      	adds	r3, #1
 801221a:	9307      	str	r3, [sp, #28]
 801221c:	e7b9      	b.n	8012192 <_printf_float+0x2da>
 801221e:	9b05      	ldr	r3, [sp, #20]
 8012220:	465a      	mov	r2, fp
 8012222:	4631      	mov	r1, r6
 8012224:	4628      	mov	r0, r5
 8012226:	47b8      	blx	r7
 8012228:	3001      	adds	r0, #1
 801222a:	d1bf      	bne.n	80121ac <_printf_float+0x2f4>
 801222c:	e690      	b.n	8011f50 <_printf_float+0x98>
 801222e:	9a06      	ldr	r2, [sp, #24]
 8012230:	464b      	mov	r3, r9
 8012232:	4442      	add	r2, r8
 8012234:	4631      	mov	r1, r6
 8012236:	4628      	mov	r0, r5
 8012238:	47b8      	blx	r7
 801223a:	3001      	adds	r0, #1
 801223c:	d1c2      	bne.n	80121c4 <_printf_float+0x30c>
 801223e:	e687      	b.n	8011f50 <_printf_float+0x98>
 8012240:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8012244:	f1b9 0f01 	cmp.w	r9, #1
 8012248:	dc01      	bgt.n	801224e <_printf_float+0x396>
 801224a:	07db      	lsls	r3, r3, #31
 801224c:	d536      	bpl.n	80122bc <_printf_float+0x404>
 801224e:	2301      	movs	r3, #1
 8012250:	4642      	mov	r2, r8
 8012252:	4631      	mov	r1, r6
 8012254:	4628      	mov	r0, r5
 8012256:	47b8      	blx	r7
 8012258:	3001      	adds	r0, #1
 801225a:	f43f ae79 	beq.w	8011f50 <_printf_float+0x98>
 801225e:	9b05      	ldr	r3, [sp, #20]
 8012260:	465a      	mov	r2, fp
 8012262:	4631      	mov	r1, r6
 8012264:	4628      	mov	r0, r5
 8012266:	47b8      	blx	r7
 8012268:	3001      	adds	r0, #1
 801226a:	f43f ae71 	beq.w	8011f50 <_printf_float+0x98>
 801226e:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8012272:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8012276:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801227a:	f109 39ff 	add.w	r9, r9, #4294967295
 801227e:	d018      	beq.n	80122b2 <_printf_float+0x3fa>
 8012280:	464b      	mov	r3, r9
 8012282:	f108 0201 	add.w	r2, r8, #1
 8012286:	4631      	mov	r1, r6
 8012288:	4628      	mov	r0, r5
 801228a:	47b8      	blx	r7
 801228c:	3001      	adds	r0, #1
 801228e:	d10c      	bne.n	80122aa <_printf_float+0x3f2>
 8012290:	e65e      	b.n	8011f50 <_printf_float+0x98>
 8012292:	2301      	movs	r3, #1
 8012294:	465a      	mov	r2, fp
 8012296:	4631      	mov	r1, r6
 8012298:	4628      	mov	r0, r5
 801229a:	47b8      	blx	r7
 801229c:	3001      	adds	r0, #1
 801229e:	f43f ae57 	beq.w	8011f50 <_printf_float+0x98>
 80122a2:	f108 0801 	add.w	r8, r8, #1
 80122a6:	45c8      	cmp	r8, r9
 80122a8:	dbf3      	blt.n	8012292 <_printf_float+0x3da>
 80122aa:	4653      	mov	r3, sl
 80122ac:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80122b0:	e6dc      	b.n	801206c <_printf_float+0x1b4>
 80122b2:	f04f 0800 	mov.w	r8, #0
 80122b6:	f104 0b1a 	add.w	fp, r4, #26
 80122ba:	e7f4      	b.n	80122a6 <_printf_float+0x3ee>
 80122bc:	2301      	movs	r3, #1
 80122be:	4642      	mov	r2, r8
 80122c0:	e7e1      	b.n	8012286 <_printf_float+0x3ce>
 80122c2:	2301      	movs	r3, #1
 80122c4:	464a      	mov	r2, r9
 80122c6:	4631      	mov	r1, r6
 80122c8:	4628      	mov	r0, r5
 80122ca:	47b8      	blx	r7
 80122cc:	3001      	adds	r0, #1
 80122ce:	f43f ae3f 	beq.w	8011f50 <_printf_float+0x98>
 80122d2:	f108 0801 	add.w	r8, r8, #1
 80122d6:	68e3      	ldr	r3, [r4, #12]
 80122d8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80122da:	1a5b      	subs	r3, r3, r1
 80122dc:	4543      	cmp	r3, r8
 80122de:	dcf0      	bgt.n	80122c2 <_printf_float+0x40a>
 80122e0:	e6f8      	b.n	80120d4 <_printf_float+0x21c>
 80122e2:	f04f 0800 	mov.w	r8, #0
 80122e6:	f104 0919 	add.w	r9, r4, #25
 80122ea:	e7f4      	b.n	80122d6 <_printf_float+0x41e>

080122ec <_printf_common>:
 80122ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80122f0:	4616      	mov	r6, r2
 80122f2:	4698      	mov	r8, r3
 80122f4:	688a      	ldr	r2, [r1, #8]
 80122f6:	690b      	ldr	r3, [r1, #16]
 80122f8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80122fc:	4293      	cmp	r3, r2
 80122fe:	bfb8      	it	lt
 8012300:	4613      	movlt	r3, r2
 8012302:	6033      	str	r3, [r6, #0]
 8012304:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8012308:	4607      	mov	r7, r0
 801230a:	460c      	mov	r4, r1
 801230c:	b10a      	cbz	r2, 8012312 <_printf_common+0x26>
 801230e:	3301      	adds	r3, #1
 8012310:	6033      	str	r3, [r6, #0]
 8012312:	6823      	ldr	r3, [r4, #0]
 8012314:	0699      	lsls	r1, r3, #26
 8012316:	bf42      	ittt	mi
 8012318:	6833      	ldrmi	r3, [r6, #0]
 801231a:	3302      	addmi	r3, #2
 801231c:	6033      	strmi	r3, [r6, #0]
 801231e:	6825      	ldr	r5, [r4, #0]
 8012320:	f015 0506 	ands.w	r5, r5, #6
 8012324:	d106      	bne.n	8012334 <_printf_common+0x48>
 8012326:	f104 0a19 	add.w	sl, r4, #25
 801232a:	68e3      	ldr	r3, [r4, #12]
 801232c:	6832      	ldr	r2, [r6, #0]
 801232e:	1a9b      	subs	r3, r3, r2
 8012330:	42ab      	cmp	r3, r5
 8012332:	dc26      	bgt.n	8012382 <_printf_common+0x96>
 8012334:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8012338:	6822      	ldr	r2, [r4, #0]
 801233a:	3b00      	subs	r3, #0
 801233c:	bf18      	it	ne
 801233e:	2301      	movne	r3, #1
 8012340:	0692      	lsls	r2, r2, #26
 8012342:	d42b      	bmi.n	801239c <_printf_common+0xb0>
 8012344:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8012348:	4641      	mov	r1, r8
 801234a:	4638      	mov	r0, r7
 801234c:	47c8      	blx	r9
 801234e:	3001      	adds	r0, #1
 8012350:	d01e      	beq.n	8012390 <_printf_common+0xa4>
 8012352:	6823      	ldr	r3, [r4, #0]
 8012354:	6922      	ldr	r2, [r4, #16]
 8012356:	f003 0306 	and.w	r3, r3, #6
 801235a:	2b04      	cmp	r3, #4
 801235c:	bf02      	ittt	eq
 801235e:	68e5      	ldreq	r5, [r4, #12]
 8012360:	6833      	ldreq	r3, [r6, #0]
 8012362:	1aed      	subeq	r5, r5, r3
 8012364:	68a3      	ldr	r3, [r4, #8]
 8012366:	bf0c      	ite	eq
 8012368:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801236c:	2500      	movne	r5, #0
 801236e:	4293      	cmp	r3, r2
 8012370:	bfc4      	itt	gt
 8012372:	1a9b      	subgt	r3, r3, r2
 8012374:	18ed      	addgt	r5, r5, r3
 8012376:	2600      	movs	r6, #0
 8012378:	341a      	adds	r4, #26
 801237a:	42b5      	cmp	r5, r6
 801237c:	d11a      	bne.n	80123b4 <_printf_common+0xc8>
 801237e:	2000      	movs	r0, #0
 8012380:	e008      	b.n	8012394 <_printf_common+0xa8>
 8012382:	2301      	movs	r3, #1
 8012384:	4652      	mov	r2, sl
 8012386:	4641      	mov	r1, r8
 8012388:	4638      	mov	r0, r7
 801238a:	47c8      	blx	r9
 801238c:	3001      	adds	r0, #1
 801238e:	d103      	bne.n	8012398 <_printf_common+0xac>
 8012390:	f04f 30ff 	mov.w	r0, #4294967295
 8012394:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012398:	3501      	adds	r5, #1
 801239a:	e7c6      	b.n	801232a <_printf_common+0x3e>
 801239c:	18e1      	adds	r1, r4, r3
 801239e:	1c5a      	adds	r2, r3, #1
 80123a0:	2030      	movs	r0, #48	@ 0x30
 80123a2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80123a6:	4422      	add	r2, r4
 80123a8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80123ac:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80123b0:	3302      	adds	r3, #2
 80123b2:	e7c7      	b.n	8012344 <_printf_common+0x58>
 80123b4:	2301      	movs	r3, #1
 80123b6:	4622      	mov	r2, r4
 80123b8:	4641      	mov	r1, r8
 80123ba:	4638      	mov	r0, r7
 80123bc:	47c8      	blx	r9
 80123be:	3001      	adds	r0, #1
 80123c0:	d0e6      	beq.n	8012390 <_printf_common+0xa4>
 80123c2:	3601      	adds	r6, #1
 80123c4:	e7d9      	b.n	801237a <_printf_common+0x8e>
	...

080123c8 <_printf_i>:
 80123c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80123cc:	7e0f      	ldrb	r7, [r1, #24]
 80123ce:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80123d0:	2f78      	cmp	r7, #120	@ 0x78
 80123d2:	4691      	mov	r9, r2
 80123d4:	4680      	mov	r8, r0
 80123d6:	460c      	mov	r4, r1
 80123d8:	469a      	mov	sl, r3
 80123da:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80123de:	d807      	bhi.n	80123f0 <_printf_i+0x28>
 80123e0:	2f62      	cmp	r7, #98	@ 0x62
 80123e2:	d80a      	bhi.n	80123fa <_printf_i+0x32>
 80123e4:	2f00      	cmp	r7, #0
 80123e6:	f000 80d2 	beq.w	801258e <_printf_i+0x1c6>
 80123ea:	2f58      	cmp	r7, #88	@ 0x58
 80123ec:	f000 80b9 	beq.w	8012562 <_printf_i+0x19a>
 80123f0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80123f4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80123f8:	e03a      	b.n	8012470 <_printf_i+0xa8>
 80123fa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80123fe:	2b15      	cmp	r3, #21
 8012400:	d8f6      	bhi.n	80123f0 <_printf_i+0x28>
 8012402:	a101      	add	r1, pc, #4	@ (adr r1, 8012408 <_printf_i+0x40>)
 8012404:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012408:	08012461 	.word	0x08012461
 801240c:	08012475 	.word	0x08012475
 8012410:	080123f1 	.word	0x080123f1
 8012414:	080123f1 	.word	0x080123f1
 8012418:	080123f1 	.word	0x080123f1
 801241c:	080123f1 	.word	0x080123f1
 8012420:	08012475 	.word	0x08012475
 8012424:	080123f1 	.word	0x080123f1
 8012428:	080123f1 	.word	0x080123f1
 801242c:	080123f1 	.word	0x080123f1
 8012430:	080123f1 	.word	0x080123f1
 8012434:	08012575 	.word	0x08012575
 8012438:	0801249f 	.word	0x0801249f
 801243c:	0801252f 	.word	0x0801252f
 8012440:	080123f1 	.word	0x080123f1
 8012444:	080123f1 	.word	0x080123f1
 8012448:	08012597 	.word	0x08012597
 801244c:	080123f1 	.word	0x080123f1
 8012450:	0801249f 	.word	0x0801249f
 8012454:	080123f1 	.word	0x080123f1
 8012458:	080123f1 	.word	0x080123f1
 801245c:	08012537 	.word	0x08012537
 8012460:	6833      	ldr	r3, [r6, #0]
 8012462:	1d1a      	adds	r2, r3, #4
 8012464:	681b      	ldr	r3, [r3, #0]
 8012466:	6032      	str	r2, [r6, #0]
 8012468:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801246c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8012470:	2301      	movs	r3, #1
 8012472:	e09d      	b.n	80125b0 <_printf_i+0x1e8>
 8012474:	6833      	ldr	r3, [r6, #0]
 8012476:	6820      	ldr	r0, [r4, #0]
 8012478:	1d19      	adds	r1, r3, #4
 801247a:	6031      	str	r1, [r6, #0]
 801247c:	0606      	lsls	r6, r0, #24
 801247e:	d501      	bpl.n	8012484 <_printf_i+0xbc>
 8012480:	681d      	ldr	r5, [r3, #0]
 8012482:	e003      	b.n	801248c <_printf_i+0xc4>
 8012484:	0645      	lsls	r5, r0, #25
 8012486:	d5fb      	bpl.n	8012480 <_printf_i+0xb8>
 8012488:	f9b3 5000 	ldrsh.w	r5, [r3]
 801248c:	2d00      	cmp	r5, #0
 801248e:	da03      	bge.n	8012498 <_printf_i+0xd0>
 8012490:	232d      	movs	r3, #45	@ 0x2d
 8012492:	426d      	negs	r5, r5
 8012494:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012498:	4859      	ldr	r0, [pc, #356]	@ (8012600 <_printf_i+0x238>)
 801249a:	230a      	movs	r3, #10
 801249c:	e011      	b.n	80124c2 <_printf_i+0xfa>
 801249e:	6821      	ldr	r1, [r4, #0]
 80124a0:	6833      	ldr	r3, [r6, #0]
 80124a2:	0608      	lsls	r0, r1, #24
 80124a4:	f853 5b04 	ldr.w	r5, [r3], #4
 80124a8:	d402      	bmi.n	80124b0 <_printf_i+0xe8>
 80124aa:	0649      	lsls	r1, r1, #25
 80124ac:	bf48      	it	mi
 80124ae:	b2ad      	uxthmi	r5, r5
 80124b0:	2f6f      	cmp	r7, #111	@ 0x6f
 80124b2:	4853      	ldr	r0, [pc, #332]	@ (8012600 <_printf_i+0x238>)
 80124b4:	6033      	str	r3, [r6, #0]
 80124b6:	bf14      	ite	ne
 80124b8:	230a      	movne	r3, #10
 80124ba:	2308      	moveq	r3, #8
 80124bc:	2100      	movs	r1, #0
 80124be:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80124c2:	6866      	ldr	r6, [r4, #4]
 80124c4:	60a6      	str	r6, [r4, #8]
 80124c6:	2e00      	cmp	r6, #0
 80124c8:	bfa2      	ittt	ge
 80124ca:	6821      	ldrge	r1, [r4, #0]
 80124cc:	f021 0104 	bicge.w	r1, r1, #4
 80124d0:	6021      	strge	r1, [r4, #0]
 80124d2:	b90d      	cbnz	r5, 80124d8 <_printf_i+0x110>
 80124d4:	2e00      	cmp	r6, #0
 80124d6:	d04b      	beq.n	8012570 <_printf_i+0x1a8>
 80124d8:	4616      	mov	r6, r2
 80124da:	fbb5 f1f3 	udiv	r1, r5, r3
 80124de:	fb03 5711 	mls	r7, r3, r1, r5
 80124e2:	5dc7      	ldrb	r7, [r0, r7]
 80124e4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80124e8:	462f      	mov	r7, r5
 80124ea:	42bb      	cmp	r3, r7
 80124ec:	460d      	mov	r5, r1
 80124ee:	d9f4      	bls.n	80124da <_printf_i+0x112>
 80124f0:	2b08      	cmp	r3, #8
 80124f2:	d10b      	bne.n	801250c <_printf_i+0x144>
 80124f4:	6823      	ldr	r3, [r4, #0]
 80124f6:	07df      	lsls	r7, r3, #31
 80124f8:	d508      	bpl.n	801250c <_printf_i+0x144>
 80124fa:	6923      	ldr	r3, [r4, #16]
 80124fc:	6861      	ldr	r1, [r4, #4]
 80124fe:	4299      	cmp	r1, r3
 8012500:	bfde      	ittt	le
 8012502:	2330      	movle	r3, #48	@ 0x30
 8012504:	f806 3c01 	strble.w	r3, [r6, #-1]
 8012508:	f106 36ff 	addle.w	r6, r6, #4294967295
 801250c:	1b92      	subs	r2, r2, r6
 801250e:	6122      	str	r2, [r4, #16]
 8012510:	f8cd a000 	str.w	sl, [sp]
 8012514:	464b      	mov	r3, r9
 8012516:	aa03      	add	r2, sp, #12
 8012518:	4621      	mov	r1, r4
 801251a:	4640      	mov	r0, r8
 801251c:	f7ff fee6 	bl	80122ec <_printf_common>
 8012520:	3001      	adds	r0, #1
 8012522:	d14a      	bne.n	80125ba <_printf_i+0x1f2>
 8012524:	f04f 30ff 	mov.w	r0, #4294967295
 8012528:	b004      	add	sp, #16
 801252a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801252e:	6823      	ldr	r3, [r4, #0]
 8012530:	f043 0320 	orr.w	r3, r3, #32
 8012534:	6023      	str	r3, [r4, #0]
 8012536:	4833      	ldr	r0, [pc, #204]	@ (8012604 <_printf_i+0x23c>)
 8012538:	2778      	movs	r7, #120	@ 0x78
 801253a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801253e:	6823      	ldr	r3, [r4, #0]
 8012540:	6831      	ldr	r1, [r6, #0]
 8012542:	061f      	lsls	r7, r3, #24
 8012544:	f851 5b04 	ldr.w	r5, [r1], #4
 8012548:	d402      	bmi.n	8012550 <_printf_i+0x188>
 801254a:	065f      	lsls	r7, r3, #25
 801254c:	bf48      	it	mi
 801254e:	b2ad      	uxthmi	r5, r5
 8012550:	6031      	str	r1, [r6, #0]
 8012552:	07d9      	lsls	r1, r3, #31
 8012554:	bf44      	itt	mi
 8012556:	f043 0320 	orrmi.w	r3, r3, #32
 801255a:	6023      	strmi	r3, [r4, #0]
 801255c:	b11d      	cbz	r5, 8012566 <_printf_i+0x19e>
 801255e:	2310      	movs	r3, #16
 8012560:	e7ac      	b.n	80124bc <_printf_i+0xf4>
 8012562:	4827      	ldr	r0, [pc, #156]	@ (8012600 <_printf_i+0x238>)
 8012564:	e7e9      	b.n	801253a <_printf_i+0x172>
 8012566:	6823      	ldr	r3, [r4, #0]
 8012568:	f023 0320 	bic.w	r3, r3, #32
 801256c:	6023      	str	r3, [r4, #0]
 801256e:	e7f6      	b.n	801255e <_printf_i+0x196>
 8012570:	4616      	mov	r6, r2
 8012572:	e7bd      	b.n	80124f0 <_printf_i+0x128>
 8012574:	6833      	ldr	r3, [r6, #0]
 8012576:	6825      	ldr	r5, [r4, #0]
 8012578:	6961      	ldr	r1, [r4, #20]
 801257a:	1d18      	adds	r0, r3, #4
 801257c:	6030      	str	r0, [r6, #0]
 801257e:	062e      	lsls	r6, r5, #24
 8012580:	681b      	ldr	r3, [r3, #0]
 8012582:	d501      	bpl.n	8012588 <_printf_i+0x1c0>
 8012584:	6019      	str	r1, [r3, #0]
 8012586:	e002      	b.n	801258e <_printf_i+0x1c6>
 8012588:	0668      	lsls	r0, r5, #25
 801258a:	d5fb      	bpl.n	8012584 <_printf_i+0x1bc>
 801258c:	8019      	strh	r1, [r3, #0]
 801258e:	2300      	movs	r3, #0
 8012590:	6123      	str	r3, [r4, #16]
 8012592:	4616      	mov	r6, r2
 8012594:	e7bc      	b.n	8012510 <_printf_i+0x148>
 8012596:	6833      	ldr	r3, [r6, #0]
 8012598:	1d1a      	adds	r2, r3, #4
 801259a:	6032      	str	r2, [r6, #0]
 801259c:	681e      	ldr	r6, [r3, #0]
 801259e:	6862      	ldr	r2, [r4, #4]
 80125a0:	2100      	movs	r1, #0
 80125a2:	4630      	mov	r0, r6
 80125a4:	f7ed fe9c 	bl	80002e0 <memchr>
 80125a8:	b108      	cbz	r0, 80125ae <_printf_i+0x1e6>
 80125aa:	1b80      	subs	r0, r0, r6
 80125ac:	6060      	str	r0, [r4, #4]
 80125ae:	6863      	ldr	r3, [r4, #4]
 80125b0:	6123      	str	r3, [r4, #16]
 80125b2:	2300      	movs	r3, #0
 80125b4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80125b8:	e7aa      	b.n	8012510 <_printf_i+0x148>
 80125ba:	6923      	ldr	r3, [r4, #16]
 80125bc:	4632      	mov	r2, r6
 80125be:	4649      	mov	r1, r9
 80125c0:	4640      	mov	r0, r8
 80125c2:	47d0      	blx	sl
 80125c4:	3001      	adds	r0, #1
 80125c6:	d0ad      	beq.n	8012524 <_printf_i+0x15c>
 80125c8:	6823      	ldr	r3, [r4, #0]
 80125ca:	079b      	lsls	r3, r3, #30
 80125cc:	d413      	bmi.n	80125f6 <_printf_i+0x22e>
 80125ce:	68e0      	ldr	r0, [r4, #12]
 80125d0:	9b03      	ldr	r3, [sp, #12]
 80125d2:	4298      	cmp	r0, r3
 80125d4:	bfb8      	it	lt
 80125d6:	4618      	movlt	r0, r3
 80125d8:	e7a6      	b.n	8012528 <_printf_i+0x160>
 80125da:	2301      	movs	r3, #1
 80125dc:	4632      	mov	r2, r6
 80125de:	4649      	mov	r1, r9
 80125e0:	4640      	mov	r0, r8
 80125e2:	47d0      	blx	sl
 80125e4:	3001      	adds	r0, #1
 80125e6:	d09d      	beq.n	8012524 <_printf_i+0x15c>
 80125e8:	3501      	adds	r5, #1
 80125ea:	68e3      	ldr	r3, [r4, #12]
 80125ec:	9903      	ldr	r1, [sp, #12]
 80125ee:	1a5b      	subs	r3, r3, r1
 80125f0:	42ab      	cmp	r3, r5
 80125f2:	dcf2      	bgt.n	80125da <_printf_i+0x212>
 80125f4:	e7eb      	b.n	80125ce <_printf_i+0x206>
 80125f6:	2500      	movs	r5, #0
 80125f8:	f104 0619 	add.w	r6, r4, #25
 80125fc:	e7f5      	b.n	80125ea <_printf_i+0x222>
 80125fe:	bf00      	nop
 8012600:	08014a46 	.word	0x08014a46
 8012604:	08014a57 	.word	0x08014a57

08012608 <std>:
 8012608:	2300      	movs	r3, #0
 801260a:	b510      	push	{r4, lr}
 801260c:	4604      	mov	r4, r0
 801260e:	e9c0 3300 	strd	r3, r3, [r0]
 8012612:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012616:	6083      	str	r3, [r0, #8]
 8012618:	8181      	strh	r1, [r0, #12]
 801261a:	6643      	str	r3, [r0, #100]	@ 0x64
 801261c:	81c2      	strh	r2, [r0, #14]
 801261e:	6183      	str	r3, [r0, #24]
 8012620:	4619      	mov	r1, r3
 8012622:	2208      	movs	r2, #8
 8012624:	305c      	adds	r0, #92	@ 0x5c
 8012626:	f000 f914 	bl	8012852 <memset>
 801262a:	4b0d      	ldr	r3, [pc, #52]	@ (8012660 <std+0x58>)
 801262c:	6263      	str	r3, [r4, #36]	@ 0x24
 801262e:	4b0d      	ldr	r3, [pc, #52]	@ (8012664 <std+0x5c>)
 8012630:	62a3      	str	r3, [r4, #40]	@ 0x28
 8012632:	4b0d      	ldr	r3, [pc, #52]	@ (8012668 <std+0x60>)
 8012634:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8012636:	4b0d      	ldr	r3, [pc, #52]	@ (801266c <std+0x64>)
 8012638:	6323      	str	r3, [r4, #48]	@ 0x30
 801263a:	4b0d      	ldr	r3, [pc, #52]	@ (8012670 <std+0x68>)
 801263c:	6224      	str	r4, [r4, #32]
 801263e:	429c      	cmp	r4, r3
 8012640:	d006      	beq.n	8012650 <std+0x48>
 8012642:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8012646:	4294      	cmp	r4, r2
 8012648:	d002      	beq.n	8012650 <std+0x48>
 801264a:	33d0      	adds	r3, #208	@ 0xd0
 801264c:	429c      	cmp	r4, r3
 801264e:	d105      	bne.n	801265c <std+0x54>
 8012650:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8012654:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012658:	f000 b978 	b.w	801294c <__retarget_lock_init_recursive>
 801265c:	bd10      	pop	{r4, pc}
 801265e:	bf00      	nop
 8012660:	080127cd 	.word	0x080127cd
 8012664:	080127ef 	.word	0x080127ef
 8012668:	08012827 	.word	0x08012827
 801266c:	0801284b 	.word	0x0801284b
 8012670:	2400262c 	.word	0x2400262c

08012674 <stdio_exit_handler>:
 8012674:	4a02      	ldr	r2, [pc, #8]	@ (8012680 <stdio_exit_handler+0xc>)
 8012676:	4903      	ldr	r1, [pc, #12]	@ (8012684 <stdio_exit_handler+0x10>)
 8012678:	4803      	ldr	r0, [pc, #12]	@ (8012688 <stdio_exit_handler+0x14>)
 801267a:	f000 b869 	b.w	8012750 <_fwalk_sglue>
 801267e:	bf00      	nop
 8012680:	2400012c 	.word	0x2400012c
 8012684:	080141d1 	.word	0x080141d1
 8012688:	2400013c 	.word	0x2400013c

0801268c <cleanup_stdio>:
 801268c:	6841      	ldr	r1, [r0, #4]
 801268e:	4b0c      	ldr	r3, [pc, #48]	@ (80126c0 <cleanup_stdio+0x34>)
 8012690:	4299      	cmp	r1, r3
 8012692:	b510      	push	{r4, lr}
 8012694:	4604      	mov	r4, r0
 8012696:	d001      	beq.n	801269c <cleanup_stdio+0x10>
 8012698:	f001 fd9a 	bl	80141d0 <_fflush_r>
 801269c:	68a1      	ldr	r1, [r4, #8]
 801269e:	4b09      	ldr	r3, [pc, #36]	@ (80126c4 <cleanup_stdio+0x38>)
 80126a0:	4299      	cmp	r1, r3
 80126a2:	d002      	beq.n	80126aa <cleanup_stdio+0x1e>
 80126a4:	4620      	mov	r0, r4
 80126a6:	f001 fd93 	bl	80141d0 <_fflush_r>
 80126aa:	68e1      	ldr	r1, [r4, #12]
 80126ac:	4b06      	ldr	r3, [pc, #24]	@ (80126c8 <cleanup_stdio+0x3c>)
 80126ae:	4299      	cmp	r1, r3
 80126b0:	d004      	beq.n	80126bc <cleanup_stdio+0x30>
 80126b2:	4620      	mov	r0, r4
 80126b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80126b8:	f001 bd8a 	b.w	80141d0 <_fflush_r>
 80126bc:	bd10      	pop	{r4, pc}
 80126be:	bf00      	nop
 80126c0:	2400262c 	.word	0x2400262c
 80126c4:	24002694 	.word	0x24002694
 80126c8:	240026fc 	.word	0x240026fc

080126cc <global_stdio_init.part.0>:
 80126cc:	b510      	push	{r4, lr}
 80126ce:	4b0b      	ldr	r3, [pc, #44]	@ (80126fc <global_stdio_init.part.0+0x30>)
 80126d0:	4c0b      	ldr	r4, [pc, #44]	@ (8012700 <global_stdio_init.part.0+0x34>)
 80126d2:	4a0c      	ldr	r2, [pc, #48]	@ (8012704 <global_stdio_init.part.0+0x38>)
 80126d4:	601a      	str	r2, [r3, #0]
 80126d6:	4620      	mov	r0, r4
 80126d8:	2200      	movs	r2, #0
 80126da:	2104      	movs	r1, #4
 80126dc:	f7ff ff94 	bl	8012608 <std>
 80126e0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80126e4:	2201      	movs	r2, #1
 80126e6:	2109      	movs	r1, #9
 80126e8:	f7ff ff8e 	bl	8012608 <std>
 80126ec:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80126f0:	2202      	movs	r2, #2
 80126f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80126f6:	2112      	movs	r1, #18
 80126f8:	f7ff bf86 	b.w	8012608 <std>
 80126fc:	24002764 	.word	0x24002764
 8012700:	2400262c 	.word	0x2400262c
 8012704:	08012675 	.word	0x08012675

08012708 <__sfp_lock_acquire>:
 8012708:	4801      	ldr	r0, [pc, #4]	@ (8012710 <__sfp_lock_acquire+0x8>)
 801270a:	f000 b920 	b.w	801294e <__retarget_lock_acquire_recursive>
 801270e:	bf00      	nop
 8012710:	2400276d 	.word	0x2400276d

08012714 <__sfp_lock_release>:
 8012714:	4801      	ldr	r0, [pc, #4]	@ (801271c <__sfp_lock_release+0x8>)
 8012716:	f000 b91b 	b.w	8012950 <__retarget_lock_release_recursive>
 801271a:	bf00      	nop
 801271c:	2400276d 	.word	0x2400276d

08012720 <__sinit>:
 8012720:	b510      	push	{r4, lr}
 8012722:	4604      	mov	r4, r0
 8012724:	f7ff fff0 	bl	8012708 <__sfp_lock_acquire>
 8012728:	6a23      	ldr	r3, [r4, #32]
 801272a:	b11b      	cbz	r3, 8012734 <__sinit+0x14>
 801272c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012730:	f7ff bff0 	b.w	8012714 <__sfp_lock_release>
 8012734:	4b04      	ldr	r3, [pc, #16]	@ (8012748 <__sinit+0x28>)
 8012736:	6223      	str	r3, [r4, #32]
 8012738:	4b04      	ldr	r3, [pc, #16]	@ (801274c <__sinit+0x2c>)
 801273a:	681b      	ldr	r3, [r3, #0]
 801273c:	2b00      	cmp	r3, #0
 801273e:	d1f5      	bne.n	801272c <__sinit+0xc>
 8012740:	f7ff ffc4 	bl	80126cc <global_stdio_init.part.0>
 8012744:	e7f2      	b.n	801272c <__sinit+0xc>
 8012746:	bf00      	nop
 8012748:	0801268d 	.word	0x0801268d
 801274c:	24002764 	.word	0x24002764

08012750 <_fwalk_sglue>:
 8012750:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012754:	4607      	mov	r7, r0
 8012756:	4688      	mov	r8, r1
 8012758:	4614      	mov	r4, r2
 801275a:	2600      	movs	r6, #0
 801275c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8012760:	f1b9 0901 	subs.w	r9, r9, #1
 8012764:	d505      	bpl.n	8012772 <_fwalk_sglue+0x22>
 8012766:	6824      	ldr	r4, [r4, #0]
 8012768:	2c00      	cmp	r4, #0
 801276a:	d1f7      	bne.n	801275c <_fwalk_sglue+0xc>
 801276c:	4630      	mov	r0, r6
 801276e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012772:	89ab      	ldrh	r3, [r5, #12]
 8012774:	2b01      	cmp	r3, #1
 8012776:	d907      	bls.n	8012788 <_fwalk_sglue+0x38>
 8012778:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801277c:	3301      	adds	r3, #1
 801277e:	d003      	beq.n	8012788 <_fwalk_sglue+0x38>
 8012780:	4629      	mov	r1, r5
 8012782:	4638      	mov	r0, r7
 8012784:	47c0      	blx	r8
 8012786:	4306      	orrs	r6, r0
 8012788:	3568      	adds	r5, #104	@ 0x68
 801278a:	e7e9      	b.n	8012760 <_fwalk_sglue+0x10>

0801278c <siprintf>:
 801278c:	b40e      	push	{r1, r2, r3}
 801278e:	b500      	push	{lr}
 8012790:	b09c      	sub	sp, #112	@ 0x70
 8012792:	ab1d      	add	r3, sp, #116	@ 0x74
 8012794:	9002      	str	r0, [sp, #8]
 8012796:	9006      	str	r0, [sp, #24]
 8012798:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801279c:	4809      	ldr	r0, [pc, #36]	@ (80127c4 <siprintf+0x38>)
 801279e:	9107      	str	r1, [sp, #28]
 80127a0:	9104      	str	r1, [sp, #16]
 80127a2:	4909      	ldr	r1, [pc, #36]	@ (80127c8 <siprintf+0x3c>)
 80127a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80127a8:	9105      	str	r1, [sp, #20]
 80127aa:	6800      	ldr	r0, [r0, #0]
 80127ac:	9301      	str	r3, [sp, #4]
 80127ae:	a902      	add	r1, sp, #8
 80127b0:	f001 fb8e 	bl	8013ed0 <_svfiprintf_r>
 80127b4:	9b02      	ldr	r3, [sp, #8]
 80127b6:	2200      	movs	r2, #0
 80127b8:	701a      	strb	r2, [r3, #0]
 80127ba:	b01c      	add	sp, #112	@ 0x70
 80127bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80127c0:	b003      	add	sp, #12
 80127c2:	4770      	bx	lr
 80127c4:	24000138 	.word	0x24000138
 80127c8:	ffff0208 	.word	0xffff0208

080127cc <__sread>:
 80127cc:	b510      	push	{r4, lr}
 80127ce:	460c      	mov	r4, r1
 80127d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80127d4:	f000 f86c 	bl	80128b0 <_read_r>
 80127d8:	2800      	cmp	r0, #0
 80127da:	bfab      	itete	ge
 80127dc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80127de:	89a3      	ldrhlt	r3, [r4, #12]
 80127e0:	181b      	addge	r3, r3, r0
 80127e2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80127e6:	bfac      	ite	ge
 80127e8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80127ea:	81a3      	strhlt	r3, [r4, #12]
 80127ec:	bd10      	pop	{r4, pc}

080127ee <__swrite>:
 80127ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80127f2:	461f      	mov	r7, r3
 80127f4:	898b      	ldrh	r3, [r1, #12]
 80127f6:	05db      	lsls	r3, r3, #23
 80127f8:	4605      	mov	r5, r0
 80127fa:	460c      	mov	r4, r1
 80127fc:	4616      	mov	r6, r2
 80127fe:	d505      	bpl.n	801280c <__swrite+0x1e>
 8012800:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012804:	2302      	movs	r3, #2
 8012806:	2200      	movs	r2, #0
 8012808:	f000 f840 	bl	801288c <_lseek_r>
 801280c:	89a3      	ldrh	r3, [r4, #12]
 801280e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012812:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8012816:	81a3      	strh	r3, [r4, #12]
 8012818:	4632      	mov	r2, r6
 801281a:	463b      	mov	r3, r7
 801281c:	4628      	mov	r0, r5
 801281e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012822:	f000 b857 	b.w	80128d4 <_write_r>

08012826 <__sseek>:
 8012826:	b510      	push	{r4, lr}
 8012828:	460c      	mov	r4, r1
 801282a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801282e:	f000 f82d 	bl	801288c <_lseek_r>
 8012832:	1c43      	adds	r3, r0, #1
 8012834:	89a3      	ldrh	r3, [r4, #12]
 8012836:	bf15      	itete	ne
 8012838:	6560      	strne	r0, [r4, #84]	@ 0x54
 801283a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801283e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8012842:	81a3      	strheq	r3, [r4, #12]
 8012844:	bf18      	it	ne
 8012846:	81a3      	strhne	r3, [r4, #12]
 8012848:	bd10      	pop	{r4, pc}

0801284a <__sclose>:
 801284a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801284e:	f000 b80d 	b.w	801286c <_close_r>

08012852 <memset>:
 8012852:	4402      	add	r2, r0
 8012854:	4603      	mov	r3, r0
 8012856:	4293      	cmp	r3, r2
 8012858:	d100      	bne.n	801285c <memset+0xa>
 801285a:	4770      	bx	lr
 801285c:	f803 1b01 	strb.w	r1, [r3], #1
 8012860:	e7f9      	b.n	8012856 <memset+0x4>
	...

08012864 <_localeconv_r>:
 8012864:	4800      	ldr	r0, [pc, #0]	@ (8012868 <_localeconv_r+0x4>)
 8012866:	4770      	bx	lr
 8012868:	24000278 	.word	0x24000278

0801286c <_close_r>:
 801286c:	b538      	push	{r3, r4, r5, lr}
 801286e:	4d06      	ldr	r5, [pc, #24]	@ (8012888 <_close_r+0x1c>)
 8012870:	2300      	movs	r3, #0
 8012872:	4604      	mov	r4, r0
 8012874:	4608      	mov	r0, r1
 8012876:	602b      	str	r3, [r5, #0]
 8012878:	f7ef f866 	bl	8001948 <_close>
 801287c:	1c43      	adds	r3, r0, #1
 801287e:	d102      	bne.n	8012886 <_close_r+0x1a>
 8012880:	682b      	ldr	r3, [r5, #0]
 8012882:	b103      	cbz	r3, 8012886 <_close_r+0x1a>
 8012884:	6023      	str	r3, [r4, #0]
 8012886:	bd38      	pop	{r3, r4, r5, pc}
 8012888:	24002768 	.word	0x24002768

0801288c <_lseek_r>:
 801288c:	b538      	push	{r3, r4, r5, lr}
 801288e:	4d07      	ldr	r5, [pc, #28]	@ (80128ac <_lseek_r+0x20>)
 8012890:	4604      	mov	r4, r0
 8012892:	4608      	mov	r0, r1
 8012894:	4611      	mov	r1, r2
 8012896:	2200      	movs	r2, #0
 8012898:	602a      	str	r2, [r5, #0]
 801289a:	461a      	mov	r2, r3
 801289c:	f7ef f87b 	bl	8001996 <_lseek>
 80128a0:	1c43      	adds	r3, r0, #1
 80128a2:	d102      	bne.n	80128aa <_lseek_r+0x1e>
 80128a4:	682b      	ldr	r3, [r5, #0]
 80128a6:	b103      	cbz	r3, 80128aa <_lseek_r+0x1e>
 80128a8:	6023      	str	r3, [r4, #0]
 80128aa:	bd38      	pop	{r3, r4, r5, pc}
 80128ac:	24002768 	.word	0x24002768

080128b0 <_read_r>:
 80128b0:	b538      	push	{r3, r4, r5, lr}
 80128b2:	4d07      	ldr	r5, [pc, #28]	@ (80128d0 <_read_r+0x20>)
 80128b4:	4604      	mov	r4, r0
 80128b6:	4608      	mov	r0, r1
 80128b8:	4611      	mov	r1, r2
 80128ba:	2200      	movs	r2, #0
 80128bc:	602a      	str	r2, [r5, #0]
 80128be:	461a      	mov	r2, r3
 80128c0:	f7ef f809 	bl	80018d6 <_read>
 80128c4:	1c43      	adds	r3, r0, #1
 80128c6:	d102      	bne.n	80128ce <_read_r+0x1e>
 80128c8:	682b      	ldr	r3, [r5, #0]
 80128ca:	b103      	cbz	r3, 80128ce <_read_r+0x1e>
 80128cc:	6023      	str	r3, [r4, #0]
 80128ce:	bd38      	pop	{r3, r4, r5, pc}
 80128d0:	24002768 	.word	0x24002768

080128d4 <_write_r>:
 80128d4:	b538      	push	{r3, r4, r5, lr}
 80128d6:	4d07      	ldr	r5, [pc, #28]	@ (80128f4 <_write_r+0x20>)
 80128d8:	4604      	mov	r4, r0
 80128da:	4608      	mov	r0, r1
 80128dc:	4611      	mov	r1, r2
 80128de:	2200      	movs	r2, #0
 80128e0:	602a      	str	r2, [r5, #0]
 80128e2:	461a      	mov	r2, r3
 80128e4:	f7ef f814 	bl	8001910 <_write>
 80128e8:	1c43      	adds	r3, r0, #1
 80128ea:	d102      	bne.n	80128f2 <_write_r+0x1e>
 80128ec:	682b      	ldr	r3, [r5, #0]
 80128ee:	b103      	cbz	r3, 80128f2 <_write_r+0x1e>
 80128f0:	6023      	str	r3, [r4, #0]
 80128f2:	bd38      	pop	{r3, r4, r5, pc}
 80128f4:	24002768 	.word	0x24002768

080128f8 <__errno>:
 80128f8:	4b01      	ldr	r3, [pc, #4]	@ (8012900 <__errno+0x8>)
 80128fa:	6818      	ldr	r0, [r3, #0]
 80128fc:	4770      	bx	lr
 80128fe:	bf00      	nop
 8012900:	24000138 	.word	0x24000138

08012904 <__libc_init_array>:
 8012904:	b570      	push	{r4, r5, r6, lr}
 8012906:	4d0d      	ldr	r5, [pc, #52]	@ (801293c <__libc_init_array+0x38>)
 8012908:	4c0d      	ldr	r4, [pc, #52]	@ (8012940 <__libc_init_array+0x3c>)
 801290a:	1b64      	subs	r4, r4, r5
 801290c:	10a4      	asrs	r4, r4, #2
 801290e:	2600      	movs	r6, #0
 8012910:	42a6      	cmp	r6, r4
 8012912:	d109      	bne.n	8012928 <__libc_init_array+0x24>
 8012914:	4d0b      	ldr	r5, [pc, #44]	@ (8012944 <__libc_init_array+0x40>)
 8012916:	4c0c      	ldr	r4, [pc, #48]	@ (8012948 <__libc_init_array+0x44>)
 8012918:	f002 f838 	bl	801498c <_init>
 801291c:	1b64      	subs	r4, r4, r5
 801291e:	10a4      	asrs	r4, r4, #2
 8012920:	2600      	movs	r6, #0
 8012922:	42a6      	cmp	r6, r4
 8012924:	d105      	bne.n	8012932 <__libc_init_array+0x2e>
 8012926:	bd70      	pop	{r4, r5, r6, pc}
 8012928:	f855 3b04 	ldr.w	r3, [r5], #4
 801292c:	4798      	blx	r3
 801292e:	3601      	adds	r6, #1
 8012930:	e7ee      	b.n	8012910 <__libc_init_array+0xc>
 8012932:	f855 3b04 	ldr.w	r3, [r5], #4
 8012936:	4798      	blx	r3
 8012938:	3601      	adds	r6, #1
 801293a:	e7f2      	b.n	8012922 <__libc_init_array+0x1e>
 801293c:	08014db8 	.word	0x08014db8
 8012940:	08014db8 	.word	0x08014db8
 8012944:	08014db8 	.word	0x08014db8
 8012948:	08014dbc 	.word	0x08014dbc

0801294c <__retarget_lock_init_recursive>:
 801294c:	4770      	bx	lr

0801294e <__retarget_lock_acquire_recursive>:
 801294e:	4770      	bx	lr

08012950 <__retarget_lock_release_recursive>:
 8012950:	4770      	bx	lr

08012952 <quorem>:
 8012952:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012956:	6903      	ldr	r3, [r0, #16]
 8012958:	690c      	ldr	r4, [r1, #16]
 801295a:	42a3      	cmp	r3, r4
 801295c:	4607      	mov	r7, r0
 801295e:	db7e      	blt.n	8012a5e <quorem+0x10c>
 8012960:	3c01      	subs	r4, #1
 8012962:	f101 0814 	add.w	r8, r1, #20
 8012966:	00a3      	lsls	r3, r4, #2
 8012968:	f100 0514 	add.w	r5, r0, #20
 801296c:	9300      	str	r3, [sp, #0]
 801296e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012972:	9301      	str	r3, [sp, #4]
 8012974:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8012978:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801297c:	3301      	adds	r3, #1
 801297e:	429a      	cmp	r2, r3
 8012980:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8012984:	fbb2 f6f3 	udiv	r6, r2, r3
 8012988:	d32e      	bcc.n	80129e8 <quorem+0x96>
 801298a:	f04f 0a00 	mov.w	sl, #0
 801298e:	46c4      	mov	ip, r8
 8012990:	46ae      	mov	lr, r5
 8012992:	46d3      	mov	fp, sl
 8012994:	f85c 3b04 	ldr.w	r3, [ip], #4
 8012998:	b298      	uxth	r0, r3
 801299a:	fb06 a000 	mla	r0, r6, r0, sl
 801299e:	0c02      	lsrs	r2, r0, #16
 80129a0:	0c1b      	lsrs	r3, r3, #16
 80129a2:	fb06 2303 	mla	r3, r6, r3, r2
 80129a6:	f8de 2000 	ldr.w	r2, [lr]
 80129aa:	b280      	uxth	r0, r0
 80129ac:	b292      	uxth	r2, r2
 80129ae:	1a12      	subs	r2, r2, r0
 80129b0:	445a      	add	r2, fp
 80129b2:	f8de 0000 	ldr.w	r0, [lr]
 80129b6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80129ba:	b29b      	uxth	r3, r3
 80129bc:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80129c0:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80129c4:	b292      	uxth	r2, r2
 80129c6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80129ca:	45e1      	cmp	r9, ip
 80129cc:	f84e 2b04 	str.w	r2, [lr], #4
 80129d0:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80129d4:	d2de      	bcs.n	8012994 <quorem+0x42>
 80129d6:	9b00      	ldr	r3, [sp, #0]
 80129d8:	58eb      	ldr	r3, [r5, r3]
 80129da:	b92b      	cbnz	r3, 80129e8 <quorem+0x96>
 80129dc:	9b01      	ldr	r3, [sp, #4]
 80129de:	3b04      	subs	r3, #4
 80129e0:	429d      	cmp	r5, r3
 80129e2:	461a      	mov	r2, r3
 80129e4:	d32f      	bcc.n	8012a46 <quorem+0xf4>
 80129e6:	613c      	str	r4, [r7, #16]
 80129e8:	4638      	mov	r0, r7
 80129ea:	f001 f90d 	bl	8013c08 <__mcmp>
 80129ee:	2800      	cmp	r0, #0
 80129f0:	db25      	blt.n	8012a3e <quorem+0xec>
 80129f2:	4629      	mov	r1, r5
 80129f4:	2000      	movs	r0, #0
 80129f6:	f858 2b04 	ldr.w	r2, [r8], #4
 80129fa:	f8d1 c000 	ldr.w	ip, [r1]
 80129fe:	fa1f fe82 	uxth.w	lr, r2
 8012a02:	fa1f f38c 	uxth.w	r3, ip
 8012a06:	eba3 030e 	sub.w	r3, r3, lr
 8012a0a:	4403      	add	r3, r0
 8012a0c:	0c12      	lsrs	r2, r2, #16
 8012a0e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8012a12:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8012a16:	b29b      	uxth	r3, r3
 8012a18:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012a1c:	45c1      	cmp	r9, r8
 8012a1e:	f841 3b04 	str.w	r3, [r1], #4
 8012a22:	ea4f 4022 	mov.w	r0, r2, asr #16
 8012a26:	d2e6      	bcs.n	80129f6 <quorem+0xa4>
 8012a28:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012a2c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012a30:	b922      	cbnz	r2, 8012a3c <quorem+0xea>
 8012a32:	3b04      	subs	r3, #4
 8012a34:	429d      	cmp	r5, r3
 8012a36:	461a      	mov	r2, r3
 8012a38:	d30b      	bcc.n	8012a52 <quorem+0x100>
 8012a3a:	613c      	str	r4, [r7, #16]
 8012a3c:	3601      	adds	r6, #1
 8012a3e:	4630      	mov	r0, r6
 8012a40:	b003      	add	sp, #12
 8012a42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012a46:	6812      	ldr	r2, [r2, #0]
 8012a48:	3b04      	subs	r3, #4
 8012a4a:	2a00      	cmp	r2, #0
 8012a4c:	d1cb      	bne.n	80129e6 <quorem+0x94>
 8012a4e:	3c01      	subs	r4, #1
 8012a50:	e7c6      	b.n	80129e0 <quorem+0x8e>
 8012a52:	6812      	ldr	r2, [r2, #0]
 8012a54:	3b04      	subs	r3, #4
 8012a56:	2a00      	cmp	r2, #0
 8012a58:	d1ef      	bne.n	8012a3a <quorem+0xe8>
 8012a5a:	3c01      	subs	r4, #1
 8012a5c:	e7ea      	b.n	8012a34 <quorem+0xe2>
 8012a5e:	2000      	movs	r0, #0
 8012a60:	e7ee      	b.n	8012a40 <quorem+0xee>
 8012a62:	0000      	movs	r0, r0
 8012a64:	0000      	movs	r0, r0
	...

08012a68 <_dtoa_r>:
 8012a68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a6c:	ed2d 8b02 	vpush	{d8}
 8012a70:	69c7      	ldr	r7, [r0, #28]
 8012a72:	b091      	sub	sp, #68	@ 0x44
 8012a74:	ed8d 0b02 	vstr	d0, [sp, #8]
 8012a78:	ec55 4b10 	vmov	r4, r5, d0
 8012a7c:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 8012a7e:	9107      	str	r1, [sp, #28]
 8012a80:	4681      	mov	r9, r0
 8012a82:	9209      	str	r2, [sp, #36]	@ 0x24
 8012a84:	930d      	str	r3, [sp, #52]	@ 0x34
 8012a86:	b97f      	cbnz	r7, 8012aa8 <_dtoa_r+0x40>
 8012a88:	2010      	movs	r0, #16
 8012a8a:	f000 fd8d 	bl	80135a8 <malloc>
 8012a8e:	4602      	mov	r2, r0
 8012a90:	f8c9 001c 	str.w	r0, [r9, #28]
 8012a94:	b920      	cbnz	r0, 8012aa0 <_dtoa_r+0x38>
 8012a96:	4ba0      	ldr	r3, [pc, #640]	@ (8012d18 <_dtoa_r+0x2b0>)
 8012a98:	21ef      	movs	r1, #239	@ 0xef
 8012a9a:	48a0      	ldr	r0, [pc, #640]	@ (8012d1c <_dtoa_r+0x2b4>)
 8012a9c:	f001 fbf8 	bl	8014290 <__assert_func>
 8012aa0:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8012aa4:	6007      	str	r7, [r0, #0]
 8012aa6:	60c7      	str	r7, [r0, #12]
 8012aa8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8012aac:	6819      	ldr	r1, [r3, #0]
 8012aae:	b159      	cbz	r1, 8012ac8 <_dtoa_r+0x60>
 8012ab0:	685a      	ldr	r2, [r3, #4]
 8012ab2:	604a      	str	r2, [r1, #4]
 8012ab4:	2301      	movs	r3, #1
 8012ab6:	4093      	lsls	r3, r2
 8012ab8:	608b      	str	r3, [r1, #8]
 8012aba:	4648      	mov	r0, r9
 8012abc:	f000 fe6a 	bl	8013794 <_Bfree>
 8012ac0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8012ac4:	2200      	movs	r2, #0
 8012ac6:	601a      	str	r2, [r3, #0]
 8012ac8:	1e2b      	subs	r3, r5, #0
 8012aca:	bfbb      	ittet	lt
 8012acc:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8012ad0:	9303      	strlt	r3, [sp, #12]
 8012ad2:	2300      	movge	r3, #0
 8012ad4:	2201      	movlt	r2, #1
 8012ad6:	bfac      	ite	ge
 8012ad8:	6033      	strge	r3, [r6, #0]
 8012ada:	6032      	strlt	r2, [r6, #0]
 8012adc:	4b90      	ldr	r3, [pc, #576]	@ (8012d20 <_dtoa_r+0x2b8>)
 8012ade:	9e03      	ldr	r6, [sp, #12]
 8012ae0:	43b3      	bics	r3, r6
 8012ae2:	d110      	bne.n	8012b06 <_dtoa_r+0x9e>
 8012ae4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8012ae6:	f242 730f 	movw	r3, #9999	@ 0x270f
 8012aea:	6013      	str	r3, [r2, #0]
 8012aec:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8012af0:	4323      	orrs	r3, r4
 8012af2:	f000 84de 	beq.w	80134b2 <_dtoa_r+0xa4a>
 8012af6:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8012af8:	4f8a      	ldr	r7, [pc, #552]	@ (8012d24 <_dtoa_r+0x2bc>)
 8012afa:	2b00      	cmp	r3, #0
 8012afc:	f000 84e0 	beq.w	80134c0 <_dtoa_r+0xa58>
 8012b00:	1cfb      	adds	r3, r7, #3
 8012b02:	f000 bcdb 	b.w	80134bc <_dtoa_r+0xa54>
 8012b06:	ed9d 8b02 	vldr	d8, [sp, #8]
 8012b0a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8012b0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b12:	d10a      	bne.n	8012b2a <_dtoa_r+0xc2>
 8012b14:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8012b16:	2301      	movs	r3, #1
 8012b18:	6013      	str	r3, [r2, #0]
 8012b1a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8012b1c:	b113      	cbz	r3, 8012b24 <_dtoa_r+0xbc>
 8012b1e:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8012b20:	4b81      	ldr	r3, [pc, #516]	@ (8012d28 <_dtoa_r+0x2c0>)
 8012b22:	6013      	str	r3, [r2, #0]
 8012b24:	4f81      	ldr	r7, [pc, #516]	@ (8012d2c <_dtoa_r+0x2c4>)
 8012b26:	f000 bccb 	b.w	80134c0 <_dtoa_r+0xa58>
 8012b2a:	aa0e      	add	r2, sp, #56	@ 0x38
 8012b2c:	a90f      	add	r1, sp, #60	@ 0x3c
 8012b2e:	4648      	mov	r0, r9
 8012b30:	eeb0 0b48 	vmov.f64	d0, d8
 8012b34:	f001 f918 	bl	8013d68 <__d2b>
 8012b38:	f3c6 530a 	ubfx	r3, r6, #20, #11
 8012b3c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8012b3e:	9001      	str	r0, [sp, #4]
 8012b40:	2b00      	cmp	r3, #0
 8012b42:	d045      	beq.n	8012bd0 <_dtoa_r+0x168>
 8012b44:	eeb0 7b48 	vmov.f64	d7, d8
 8012b48:	ee18 1a90 	vmov	r1, s17
 8012b4c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8012b50:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 8012b54:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8012b58:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8012b5c:	2500      	movs	r5, #0
 8012b5e:	ee07 1a90 	vmov	s15, r1
 8012b62:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 8012b66:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8012d00 <_dtoa_r+0x298>
 8012b6a:	ee37 7b46 	vsub.f64	d7, d7, d6
 8012b6e:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8012d08 <_dtoa_r+0x2a0>
 8012b72:	eea7 6b05 	vfma.f64	d6, d7, d5
 8012b76:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8012d10 <_dtoa_r+0x2a8>
 8012b7a:	ee07 3a90 	vmov	s15, r3
 8012b7e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8012b82:	eeb0 7b46 	vmov.f64	d7, d6
 8012b86:	eea4 7b05 	vfma.f64	d7, d4, d5
 8012b8a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8012b8e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8012b92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b96:	ee16 8a90 	vmov	r8, s13
 8012b9a:	d508      	bpl.n	8012bae <_dtoa_r+0x146>
 8012b9c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8012ba0:	eeb4 6b47 	vcmp.f64	d6, d7
 8012ba4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ba8:	bf18      	it	ne
 8012baa:	f108 38ff 	addne.w	r8, r8, #4294967295
 8012bae:	f1b8 0f16 	cmp.w	r8, #22
 8012bb2:	d82b      	bhi.n	8012c0c <_dtoa_r+0x1a4>
 8012bb4:	495e      	ldr	r1, [pc, #376]	@ (8012d30 <_dtoa_r+0x2c8>)
 8012bb6:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 8012bba:	ed91 7b00 	vldr	d7, [r1]
 8012bbe:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8012bc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012bc6:	d501      	bpl.n	8012bcc <_dtoa_r+0x164>
 8012bc8:	f108 38ff 	add.w	r8, r8, #4294967295
 8012bcc:	2100      	movs	r1, #0
 8012bce:	e01e      	b.n	8012c0e <_dtoa_r+0x1a6>
 8012bd0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012bd2:	4413      	add	r3, r2
 8012bd4:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8012bd8:	2920      	cmp	r1, #32
 8012bda:	bfc1      	itttt	gt
 8012bdc:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8012be0:	408e      	lslgt	r6, r1
 8012be2:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 8012be6:	fa24 f101 	lsrgt.w	r1, r4, r1
 8012bea:	bfd6      	itet	le
 8012bec:	f1c1 0120 	rsble	r1, r1, #32
 8012bf0:	4331      	orrgt	r1, r6
 8012bf2:	fa04 f101 	lslle.w	r1, r4, r1
 8012bf6:	ee07 1a90 	vmov	s15, r1
 8012bfa:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8012bfe:	3b01      	subs	r3, #1
 8012c00:	ee17 1a90 	vmov	r1, s15
 8012c04:	2501      	movs	r5, #1
 8012c06:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 8012c0a:	e7a8      	b.n	8012b5e <_dtoa_r+0xf6>
 8012c0c:	2101      	movs	r1, #1
 8012c0e:	1ad2      	subs	r2, r2, r3
 8012c10:	1e53      	subs	r3, r2, #1
 8012c12:	9306      	str	r3, [sp, #24]
 8012c14:	bf45      	ittet	mi
 8012c16:	f1c2 0301 	rsbmi	r3, r2, #1
 8012c1a:	9305      	strmi	r3, [sp, #20]
 8012c1c:	2300      	movpl	r3, #0
 8012c1e:	2300      	movmi	r3, #0
 8012c20:	bf4c      	ite	mi
 8012c22:	9306      	strmi	r3, [sp, #24]
 8012c24:	9305      	strpl	r3, [sp, #20]
 8012c26:	f1b8 0f00 	cmp.w	r8, #0
 8012c2a:	910c      	str	r1, [sp, #48]	@ 0x30
 8012c2c:	db18      	blt.n	8012c60 <_dtoa_r+0x1f8>
 8012c2e:	9b06      	ldr	r3, [sp, #24]
 8012c30:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8012c34:	4443      	add	r3, r8
 8012c36:	9306      	str	r3, [sp, #24]
 8012c38:	2300      	movs	r3, #0
 8012c3a:	9a07      	ldr	r2, [sp, #28]
 8012c3c:	2a09      	cmp	r2, #9
 8012c3e:	d849      	bhi.n	8012cd4 <_dtoa_r+0x26c>
 8012c40:	2a05      	cmp	r2, #5
 8012c42:	bfc4      	itt	gt
 8012c44:	3a04      	subgt	r2, #4
 8012c46:	9207      	strgt	r2, [sp, #28]
 8012c48:	9a07      	ldr	r2, [sp, #28]
 8012c4a:	f1a2 0202 	sub.w	r2, r2, #2
 8012c4e:	bfcc      	ite	gt
 8012c50:	2400      	movgt	r4, #0
 8012c52:	2401      	movle	r4, #1
 8012c54:	2a03      	cmp	r2, #3
 8012c56:	d848      	bhi.n	8012cea <_dtoa_r+0x282>
 8012c58:	e8df f002 	tbb	[pc, r2]
 8012c5c:	3a2c2e0b 	.word	0x3a2c2e0b
 8012c60:	9b05      	ldr	r3, [sp, #20]
 8012c62:	2200      	movs	r2, #0
 8012c64:	eba3 0308 	sub.w	r3, r3, r8
 8012c68:	9305      	str	r3, [sp, #20]
 8012c6a:	920a      	str	r2, [sp, #40]	@ 0x28
 8012c6c:	f1c8 0300 	rsb	r3, r8, #0
 8012c70:	e7e3      	b.n	8012c3a <_dtoa_r+0x1d2>
 8012c72:	2200      	movs	r2, #0
 8012c74:	9208      	str	r2, [sp, #32]
 8012c76:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012c78:	2a00      	cmp	r2, #0
 8012c7a:	dc39      	bgt.n	8012cf0 <_dtoa_r+0x288>
 8012c7c:	f04f 0b01 	mov.w	fp, #1
 8012c80:	46da      	mov	sl, fp
 8012c82:	465a      	mov	r2, fp
 8012c84:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8012c88:	f8d9 701c 	ldr.w	r7, [r9, #28]
 8012c8c:	2100      	movs	r1, #0
 8012c8e:	2004      	movs	r0, #4
 8012c90:	f100 0614 	add.w	r6, r0, #20
 8012c94:	4296      	cmp	r6, r2
 8012c96:	d930      	bls.n	8012cfa <_dtoa_r+0x292>
 8012c98:	6079      	str	r1, [r7, #4]
 8012c9a:	4648      	mov	r0, r9
 8012c9c:	9304      	str	r3, [sp, #16]
 8012c9e:	f000 fd39 	bl	8013714 <_Balloc>
 8012ca2:	9b04      	ldr	r3, [sp, #16]
 8012ca4:	4607      	mov	r7, r0
 8012ca6:	2800      	cmp	r0, #0
 8012ca8:	d146      	bne.n	8012d38 <_dtoa_r+0x2d0>
 8012caa:	4b22      	ldr	r3, [pc, #136]	@ (8012d34 <_dtoa_r+0x2cc>)
 8012cac:	4602      	mov	r2, r0
 8012cae:	f240 11af 	movw	r1, #431	@ 0x1af
 8012cb2:	e6f2      	b.n	8012a9a <_dtoa_r+0x32>
 8012cb4:	2201      	movs	r2, #1
 8012cb6:	e7dd      	b.n	8012c74 <_dtoa_r+0x20c>
 8012cb8:	2200      	movs	r2, #0
 8012cba:	9208      	str	r2, [sp, #32]
 8012cbc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012cbe:	eb08 0b02 	add.w	fp, r8, r2
 8012cc2:	f10b 0a01 	add.w	sl, fp, #1
 8012cc6:	4652      	mov	r2, sl
 8012cc8:	2a01      	cmp	r2, #1
 8012cca:	bfb8      	it	lt
 8012ccc:	2201      	movlt	r2, #1
 8012cce:	e7db      	b.n	8012c88 <_dtoa_r+0x220>
 8012cd0:	2201      	movs	r2, #1
 8012cd2:	e7f2      	b.n	8012cba <_dtoa_r+0x252>
 8012cd4:	2401      	movs	r4, #1
 8012cd6:	2200      	movs	r2, #0
 8012cd8:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8012cdc:	f04f 3bff 	mov.w	fp, #4294967295
 8012ce0:	2100      	movs	r1, #0
 8012ce2:	46da      	mov	sl, fp
 8012ce4:	2212      	movs	r2, #18
 8012ce6:	9109      	str	r1, [sp, #36]	@ 0x24
 8012ce8:	e7ce      	b.n	8012c88 <_dtoa_r+0x220>
 8012cea:	2201      	movs	r2, #1
 8012cec:	9208      	str	r2, [sp, #32]
 8012cee:	e7f5      	b.n	8012cdc <_dtoa_r+0x274>
 8012cf0:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 8012cf4:	46da      	mov	sl, fp
 8012cf6:	465a      	mov	r2, fp
 8012cf8:	e7c6      	b.n	8012c88 <_dtoa_r+0x220>
 8012cfa:	3101      	adds	r1, #1
 8012cfc:	0040      	lsls	r0, r0, #1
 8012cfe:	e7c7      	b.n	8012c90 <_dtoa_r+0x228>
 8012d00:	636f4361 	.word	0x636f4361
 8012d04:	3fd287a7 	.word	0x3fd287a7
 8012d08:	8b60c8b3 	.word	0x8b60c8b3
 8012d0c:	3fc68a28 	.word	0x3fc68a28
 8012d10:	509f79fb 	.word	0x509f79fb
 8012d14:	3fd34413 	.word	0x3fd34413
 8012d18:	08014a75 	.word	0x08014a75
 8012d1c:	08014a8c 	.word	0x08014a8c
 8012d20:	7ff00000 	.word	0x7ff00000
 8012d24:	08014a71 	.word	0x08014a71
 8012d28:	08014a45 	.word	0x08014a45
 8012d2c:	08014a44 	.word	0x08014a44
 8012d30:	08014b88 	.word	0x08014b88
 8012d34:	08014ae4 	.word	0x08014ae4
 8012d38:	f8d9 201c 	ldr.w	r2, [r9, #28]
 8012d3c:	f1ba 0f0e 	cmp.w	sl, #14
 8012d40:	6010      	str	r0, [r2, #0]
 8012d42:	d86f      	bhi.n	8012e24 <_dtoa_r+0x3bc>
 8012d44:	2c00      	cmp	r4, #0
 8012d46:	d06d      	beq.n	8012e24 <_dtoa_r+0x3bc>
 8012d48:	f1b8 0f00 	cmp.w	r8, #0
 8012d4c:	f340 80c2 	ble.w	8012ed4 <_dtoa_r+0x46c>
 8012d50:	4aca      	ldr	r2, [pc, #808]	@ (801307c <_dtoa_r+0x614>)
 8012d52:	f008 010f 	and.w	r1, r8, #15
 8012d56:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8012d5a:	f418 7f80 	tst.w	r8, #256	@ 0x100
 8012d5e:	ed92 7b00 	vldr	d7, [r2]
 8012d62:	ea4f 1128 	mov.w	r1, r8, asr #4
 8012d66:	f000 80a9 	beq.w	8012ebc <_dtoa_r+0x454>
 8012d6a:	4ac5      	ldr	r2, [pc, #788]	@ (8013080 <_dtoa_r+0x618>)
 8012d6c:	ed92 6b08 	vldr	d6, [r2, #32]
 8012d70:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8012d74:	ed8d 6b02 	vstr	d6, [sp, #8]
 8012d78:	f001 010f 	and.w	r1, r1, #15
 8012d7c:	2203      	movs	r2, #3
 8012d7e:	48c0      	ldr	r0, [pc, #768]	@ (8013080 <_dtoa_r+0x618>)
 8012d80:	2900      	cmp	r1, #0
 8012d82:	f040 809d 	bne.w	8012ec0 <_dtoa_r+0x458>
 8012d86:	ed9d 6b02 	vldr	d6, [sp, #8]
 8012d8a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8012d8e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012d92:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8012d94:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012d98:	2900      	cmp	r1, #0
 8012d9a:	f000 80c1 	beq.w	8012f20 <_dtoa_r+0x4b8>
 8012d9e:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8012da2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8012da6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012daa:	f140 80b9 	bpl.w	8012f20 <_dtoa_r+0x4b8>
 8012dae:	f1ba 0f00 	cmp.w	sl, #0
 8012db2:	f000 80b5 	beq.w	8012f20 <_dtoa_r+0x4b8>
 8012db6:	f1bb 0f00 	cmp.w	fp, #0
 8012dba:	dd31      	ble.n	8012e20 <_dtoa_r+0x3b8>
 8012dbc:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8012dc0:	ee27 7b06 	vmul.f64	d7, d7, d6
 8012dc4:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012dc8:	f108 31ff 	add.w	r1, r8, #4294967295
 8012dcc:	9104      	str	r1, [sp, #16]
 8012dce:	3201      	adds	r2, #1
 8012dd0:	465c      	mov	r4, fp
 8012dd2:	ed9d 6b02 	vldr	d6, [sp, #8]
 8012dd6:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 8012dda:	ee07 2a90 	vmov	s15, r2
 8012dde:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8012de2:	eea7 5b06 	vfma.f64	d5, d7, d6
 8012de6:	ee15 2a90 	vmov	r2, s11
 8012dea:	ec51 0b15 	vmov	r0, r1, d5
 8012dee:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 8012df2:	2c00      	cmp	r4, #0
 8012df4:	f040 8098 	bne.w	8012f28 <_dtoa_r+0x4c0>
 8012df8:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8012dfc:	ee36 6b47 	vsub.f64	d6, d6, d7
 8012e00:	ec41 0b17 	vmov	d7, r0, r1
 8012e04:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8012e08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012e0c:	f300 8261 	bgt.w	80132d2 <_dtoa_r+0x86a>
 8012e10:	eeb1 7b47 	vneg.f64	d7, d7
 8012e14:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8012e18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012e1c:	f100 80f5 	bmi.w	801300a <_dtoa_r+0x5a2>
 8012e20:	ed8d 8b02 	vstr	d8, [sp, #8]
 8012e24:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8012e26:	2a00      	cmp	r2, #0
 8012e28:	f2c0 812c 	blt.w	8013084 <_dtoa_r+0x61c>
 8012e2c:	f1b8 0f0e 	cmp.w	r8, #14
 8012e30:	f300 8128 	bgt.w	8013084 <_dtoa_r+0x61c>
 8012e34:	4b91      	ldr	r3, [pc, #580]	@ (801307c <_dtoa_r+0x614>)
 8012e36:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8012e3a:	ed93 6b00 	vldr	d6, [r3]
 8012e3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012e40:	2b00      	cmp	r3, #0
 8012e42:	da03      	bge.n	8012e4c <_dtoa_r+0x3e4>
 8012e44:	f1ba 0f00 	cmp.w	sl, #0
 8012e48:	f340 80d2 	ble.w	8012ff0 <_dtoa_r+0x588>
 8012e4c:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 8012e50:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012e54:	463e      	mov	r6, r7
 8012e56:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8012e5a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8012e5e:	ee15 3a10 	vmov	r3, s10
 8012e62:	3330      	adds	r3, #48	@ 0x30
 8012e64:	f806 3b01 	strb.w	r3, [r6], #1
 8012e68:	1bf3      	subs	r3, r6, r7
 8012e6a:	459a      	cmp	sl, r3
 8012e6c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8012e70:	eea3 7b46 	vfms.f64	d7, d3, d6
 8012e74:	f040 80f8 	bne.w	8013068 <_dtoa_r+0x600>
 8012e78:	ee37 7b07 	vadd.f64	d7, d7, d7
 8012e7c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8012e80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012e84:	f300 80dd 	bgt.w	8013042 <_dtoa_r+0x5da>
 8012e88:	eeb4 7b46 	vcmp.f64	d7, d6
 8012e8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012e90:	d104      	bne.n	8012e9c <_dtoa_r+0x434>
 8012e92:	ee15 3a10 	vmov	r3, s10
 8012e96:	07db      	lsls	r3, r3, #31
 8012e98:	f100 80d3 	bmi.w	8013042 <_dtoa_r+0x5da>
 8012e9c:	9901      	ldr	r1, [sp, #4]
 8012e9e:	4648      	mov	r0, r9
 8012ea0:	f000 fc78 	bl	8013794 <_Bfree>
 8012ea4:	2300      	movs	r3, #0
 8012ea6:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8012ea8:	7033      	strb	r3, [r6, #0]
 8012eaa:	f108 0301 	add.w	r3, r8, #1
 8012eae:	6013      	str	r3, [r2, #0]
 8012eb0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8012eb2:	2b00      	cmp	r3, #0
 8012eb4:	f000 8304 	beq.w	80134c0 <_dtoa_r+0xa58>
 8012eb8:	601e      	str	r6, [r3, #0]
 8012eba:	e301      	b.n	80134c0 <_dtoa_r+0xa58>
 8012ebc:	2202      	movs	r2, #2
 8012ebe:	e75e      	b.n	8012d7e <_dtoa_r+0x316>
 8012ec0:	07cc      	lsls	r4, r1, #31
 8012ec2:	d504      	bpl.n	8012ece <_dtoa_r+0x466>
 8012ec4:	ed90 6b00 	vldr	d6, [r0]
 8012ec8:	3201      	adds	r2, #1
 8012eca:	ee27 7b06 	vmul.f64	d7, d7, d6
 8012ece:	1049      	asrs	r1, r1, #1
 8012ed0:	3008      	adds	r0, #8
 8012ed2:	e755      	b.n	8012d80 <_dtoa_r+0x318>
 8012ed4:	d022      	beq.n	8012f1c <_dtoa_r+0x4b4>
 8012ed6:	f1c8 0100 	rsb	r1, r8, #0
 8012eda:	4a68      	ldr	r2, [pc, #416]	@ (801307c <_dtoa_r+0x614>)
 8012edc:	f001 000f 	and.w	r0, r1, #15
 8012ee0:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8012ee4:	ed92 7b00 	vldr	d7, [r2]
 8012ee8:	ee28 7b07 	vmul.f64	d7, d8, d7
 8012eec:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012ef0:	4863      	ldr	r0, [pc, #396]	@ (8013080 <_dtoa_r+0x618>)
 8012ef2:	1109      	asrs	r1, r1, #4
 8012ef4:	2400      	movs	r4, #0
 8012ef6:	2202      	movs	r2, #2
 8012ef8:	b929      	cbnz	r1, 8012f06 <_dtoa_r+0x49e>
 8012efa:	2c00      	cmp	r4, #0
 8012efc:	f43f af49 	beq.w	8012d92 <_dtoa_r+0x32a>
 8012f00:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012f04:	e745      	b.n	8012d92 <_dtoa_r+0x32a>
 8012f06:	07ce      	lsls	r6, r1, #31
 8012f08:	d505      	bpl.n	8012f16 <_dtoa_r+0x4ae>
 8012f0a:	ed90 6b00 	vldr	d6, [r0]
 8012f0e:	3201      	adds	r2, #1
 8012f10:	2401      	movs	r4, #1
 8012f12:	ee27 7b06 	vmul.f64	d7, d7, d6
 8012f16:	1049      	asrs	r1, r1, #1
 8012f18:	3008      	adds	r0, #8
 8012f1a:	e7ed      	b.n	8012ef8 <_dtoa_r+0x490>
 8012f1c:	2202      	movs	r2, #2
 8012f1e:	e738      	b.n	8012d92 <_dtoa_r+0x32a>
 8012f20:	f8cd 8010 	str.w	r8, [sp, #16]
 8012f24:	4654      	mov	r4, sl
 8012f26:	e754      	b.n	8012dd2 <_dtoa_r+0x36a>
 8012f28:	4a54      	ldr	r2, [pc, #336]	@ (801307c <_dtoa_r+0x614>)
 8012f2a:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8012f2e:	ed12 4b02 	vldr	d4, [r2, #-8]
 8012f32:	9a08      	ldr	r2, [sp, #32]
 8012f34:	ec41 0b17 	vmov	d7, r0, r1
 8012f38:	443c      	add	r4, r7
 8012f3a:	b34a      	cbz	r2, 8012f90 <_dtoa_r+0x528>
 8012f3c:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 8012f40:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 8012f44:	463e      	mov	r6, r7
 8012f46:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8012f4a:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8012f4e:	ee35 7b47 	vsub.f64	d7, d5, d7
 8012f52:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8012f56:	ee14 2a90 	vmov	r2, s9
 8012f5a:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8012f5e:	3230      	adds	r2, #48	@ 0x30
 8012f60:	ee36 6b45 	vsub.f64	d6, d6, d5
 8012f64:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8012f68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012f6c:	f806 2b01 	strb.w	r2, [r6], #1
 8012f70:	d438      	bmi.n	8012fe4 <_dtoa_r+0x57c>
 8012f72:	ee32 5b46 	vsub.f64	d5, d2, d6
 8012f76:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8012f7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012f7e:	d462      	bmi.n	8013046 <_dtoa_r+0x5de>
 8012f80:	42a6      	cmp	r6, r4
 8012f82:	f43f af4d 	beq.w	8012e20 <_dtoa_r+0x3b8>
 8012f86:	ee27 7b03 	vmul.f64	d7, d7, d3
 8012f8a:	ee26 6b03 	vmul.f64	d6, d6, d3
 8012f8e:	e7e0      	b.n	8012f52 <_dtoa_r+0x4ea>
 8012f90:	4621      	mov	r1, r4
 8012f92:	463e      	mov	r6, r7
 8012f94:	ee27 7b04 	vmul.f64	d7, d7, d4
 8012f98:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8012f9c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8012fa0:	ee14 2a90 	vmov	r2, s9
 8012fa4:	3230      	adds	r2, #48	@ 0x30
 8012fa6:	f806 2b01 	strb.w	r2, [r6], #1
 8012faa:	42a6      	cmp	r6, r4
 8012fac:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8012fb0:	ee36 6b45 	vsub.f64	d6, d6, d5
 8012fb4:	d119      	bne.n	8012fea <_dtoa_r+0x582>
 8012fb6:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 8012fba:	ee37 4b05 	vadd.f64	d4, d7, d5
 8012fbe:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8012fc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012fc6:	dc3e      	bgt.n	8013046 <_dtoa_r+0x5de>
 8012fc8:	ee35 5b47 	vsub.f64	d5, d5, d7
 8012fcc:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8012fd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012fd4:	f57f af24 	bpl.w	8012e20 <_dtoa_r+0x3b8>
 8012fd8:	460e      	mov	r6, r1
 8012fda:	3901      	subs	r1, #1
 8012fdc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8012fe0:	2b30      	cmp	r3, #48	@ 0x30
 8012fe2:	d0f9      	beq.n	8012fd8 <_dtoa_r+0x570>
 8012fe4:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8012fe8:	e758      	b.n	8012e9c <_dtoa_r+0x434>
 8012fea:	ee26 6b03 	vmul.f64	d6, d6, d3
 8012fee:	e7d5      	b.n	8012f9c <_dtoa_r+0x534>
 8012ff0:	d10b      	bne.n	801300a <_dtoa_r+0x5a2>
 8012ff2:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8012ff6:	ee26 6b07 	vmul.f64	d6, d6, d7
 8012ffa:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012ffe:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8013002:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013006:	f2c0 8161 	blt.w	80132cc <_dtoa_r+0x864>
 801300a:	2400      	movs	r4, #0
 801300c:	4625      	mov	r5, r4
 801300e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013010:	43db      	mvns	r3, r3
 8013012:	9304      	str	r3, [sp, #16]
 8013014:	463e      	mov	r6, r7
 8013016:	f04f 0800 	mov.w	r8, #0
 801301a:	4621      	mov	r1, r4
 801301c:	4648      	mov	r0, r9
 801301e:	f000 fbb9 	bl	8013794 <_Bfree>
 8013022:	2d00      	cmp	r5, #0
 8013024:	d0de      	beq.n	8012fe4 <_dtoa_r+0x57c>
 8013026:	f1b8 0f00 	cmp.w	r8, #0
 801302a:	d005      	beq.n	8013038 <_dtoa_r+0x5d0>
 801302c:	45a8      	cmp	r8, r5
 801302e:	d003      	beq.n	8013038 <_dtoa_r+0x5d0>
 8013030:	4641      	mov	r1, r8
 8013032:	4648      	mov	r0, r9
 8013034:	f000 fbae 	bl	8013794 <_Bfree>
 8013038:	4629      	mov	r1, r5
 801303a:	4648      	mov	r0, r9
 801303c:	f000 fbaa 	bl	8013794 <_Bfree>
 8013040:	e7d0      	b.n	8012fe4 <_dtoa_r+0x57c>
 8013042:	f8cd 8010 	str.w	r8, [sp, #16]
 8013046:	4633      	mov	r3, r6
 8013048:	461e      	mov	r6, r3
 801304a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801304e:	2a39      	cmp	r2, #57	@ 0x39
 8013050:	d106      	bne.n	8013060 <_dtoa_r+0x5f8>
 8013052:	429f      	cmp	r7, r3
 8013054:	d1f8      	bne.n	8013048 <_dtoa_r+0x5e0>
 8013056:	9a04      	ldr	r2, [sp, #16]
 8013058:	3201      	adds	r2, #1
 801305a:	9204      	str	r2, [sp, #16]
 801305c:	2230      	movs	r2, #48	@ 0x30
 801305e:	703a      	strb	r2, [r7, #0]
 8013060:	781a      	ldrb	r2, [r3, #0]
 8013062:	3201      	adds	r2, #1
 8013064:	701a      	strb	r2, [r3, #0]
 8013066:	e7bd      	b.n	8012fe4 <_dtoa_r+0x57c>
 8013068:	ee27 7b04 	vmul.f64	d7, d7, d4
 801306c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8013070:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013074:	f47f aeef 	bne.w	8012e56 <_dtoa_r+0x3ee>
 8013078:	e710      	b.n	8012e9c <_dtoa_r+0x434>
 801307a:	bf00      	nop
 801307c:	08014b88 	.word	0x08014b88
 8013080:	08014b60 	.word	0x08014b60
 8013084:	9908      	ldr	r1, [sp, #32]
 8013086:	2900      	cmp	r1, #0
 8013088:	f000 80e3 	beq.w	8013252 <_dtoa_r+0x7ea>
 801308c:	9907      	ldr	r1, [sp, #28]
 801308e:	2901      	cmp	r1, #1
 8013090:	f300 80c8 	bgt.w	8013224 <_dtoa_r+0x7bc>
 8013094:	2d00      	cmp	r5, #0
 8013096:	f000 80c1 	beq.w	801321c <_dtoa_r+0x7b4>
 801309a:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 801309e:	9e05      	ldr	r6, [sp, #20]
 80130a0:	461c      	mov	r4, r3
 80130a2:	9304      	str	r3, [sp, #16]
 80130a4:	9b05      	ldr	r3, [sp, #20]
 80130a6:	4413      	add	r3, r2
 80130a8:	9305      	str	r3, [sp, #20]
 80130aa:	9b06      	ldr	r3, [sp, #24]
 80130ac:	2101      	movs	r1, #1
 80130ae:	4413      	add	r3, r2
 80130b0:	4648      	mov	r0, r9
 80130b2:	9306      	str	r3, [sp, #24]
 80130b4:	f000 fc22 	bl	80138fc <__i2b>
 80130b8:	9b04      	ldr	r3, [sp, #16]
 80130ba:	4605      	mov	r5, r0
 80130bc:	b166      	cbz	r6, 80130d8 <_dtoa_r+0x670>
 80130be:	9a06      	ldr	r2, [sp, #24]
 80130c0:	2a00      	cmp	r2, #0
 80130c2:	dd09      	ble.n	80130d8 <_dtoa_r+0x670>
 80130c4:	42b2      	cmp	r2, r6
 80130c6:	9905      	ldr	r1, [sp, #20]
 80130c8:	bfa8      	it	ge
 80130ca:	4632      	movge	r2, r6
 80130cc:	1a89      	subs	r1, r1, r2
 80130ce:	9105      	str	r1, [sp, #20]
 80130d0:	9906      	ldr	r1, [sp, #24]
 80130d2:	1ab6      	subs	r6, r6, r2
 80130d4:	1a8a      	subs	r2, r1, r2
 80130d6:	9206      	str	r2, [sp, #24]
 80130d8:	b1fb      	cbz	r3, 801311a <_dtoa_r+0x6b2>
 80130da:	9a08      	ldr	r2, [sp, #32]
 80130dc:	2a00      	cmp	r2, #0
 80130de:	f000 80bc 	beq.w	801325a <_dtoa_r+0x7f2>
 80130e2:	b19c      	cbz	r4, 801310c <_dtoa_r+0x6a4>
 80130e4:	4629      	mov	r1, r5
 80130e6:	4622      	mov	r2, r4
 80130e8:	4648      	mov	r0, r9
 80130ea:	930b      	str	r3, [sp, #44]	@ 0x2c
 80130ec:	f000 fcc6 	bl	8013a7c <__pow5mult>
 80130f0:	9a01      	ldr	r2, [sp, #4]
 80130f2:	4601      	mov	r1, r0
 80130f4:	4605      	mov	r5, r0
 80130f6:	4648      	mov	r0, r9
 80130f8:	f000 fc16 	bl	8013928 <__multiply>
 80130fc:	9901      	ldr	r1, [sp, #4]
 80130fe:	9004      	str	r0, [sp, #16]
 8013100:	4648      	mov	r0, r9
 8013102:	f000 fb47 	bl	8013794 <_Bfree>
 8013106:	9a04      	ldr	r2, [sp, #16]
 8013108:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801310a:	9201      	str	r2, [sp, #4]
 801310c:	1b1a      	subs	r2, r3, r4
 801310e:	d004      	beq.n	801311a <_dtoa_r+0x6b2>
 8013110:	9901      	ldr	r1, [sp, #4]
 8013112:	4648      	mov	r0, r9
 8013114:	f000 fcb2 	bl	8013a7c <__pow5mult>
 8013118:	9001      	str	r0, [sp, #4]
 801311a:	2101      	movs	r1, #1
 801311c:	4648      	mov	r0, r9
 801311e:	f000 fbed 	bl	80138fc <__i2b>
 8013122:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013124:	4604      	mov	r4, r0
 8013126:	2b00      	cmp	r3, #0
 8013128:	f000 81d0 	beq.w	80134cc <_dtoa_r+0xa64>
 801312c:	461a      	mov	r2, r3
 801312e:	4601      	mov	r1, r0
 8013130:	4648      	mov	r0, r9
 8013132:	f000 fca3 	bl	8013a7c <__pow5mult>
 8013136:	9b07      	ldr	r3, [sp, #28]
 8013138:	2b01      	cmp	r3, #1
 801313a:	4604      	mov	r4, r0
 801313c:	f300 8095 	bgt.w	801326a <_dtoa_r+0x802>
 8013140:	9b02      	ldr	r3, [sp, #8]
 8013142:	2b00      	cmp	r3, #0
 8013144:	f040 808b 	bne.w	801325e <_dtoa_r+0x7f6>
 8013148:	9b03      	ldr	r3, [sp, #12]
 801314a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 801314e:	2a00      	cmp	r2, #0
 8013150:	f040 8087 	bne.w	8013262 <_dtoa_r+0x7fa>
 8013154:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8013158:	0d12      	lsrs	r2, r2, #20
 801315a:	0512      	lsls	r2, r2, #20
 801315c:	2a00      	cmp	r2, #0
 801315e:	f000 8082 	beq.w	8013266 <_dtoa_r+0x7fe>
 8013162:	9b05      	ldr	r3, [sp, #20]
 8013164:	3301      	adds	r3, #1
 8013166:	9305      	str	r3, [sp, #20]
 8013168:	9b06      	ldr	r3, [sp, #24]
 801316a:	3301      	adds	r3, #1
 801316c:	9306      	str	r3, [sp, #24]
 801316e:	2301      	movs	r3, #1
 8013170:	930b      	str	r3, [sp, #44]	@ 0x2c
 8013172:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013174:	2b00      	cmp	r3, #0
 8013176:	f000 81af 	beq.w	80134d8 <_dtoa_r+0xa70>
 801317a:	6922      	ldr	r2, [r4, #16]
 801317c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8013180:	6910      	ldr	r0, [r2, #16]
 8013182:	f000 fb6f 	bl	8013864 <__hi0bits>
 8013186:	f1c0 0020 	rsb	r0, r0, #32
 801318a:	9b06      	ldr	r3, [sp, #24]
 801318c:	4418      	add	r0, r3
 801318e:	f010 001f 	ands.w	r0, r0, #31
 8013192:	d076      	beq.n	8013282 <_dtoa_r+0x81a>
 8013194:	f1c0 0220 	rsb	r2, r0, #32
 8013198:	2a04      	cmp	r2, #4
 801319a:	dd69      	ble.n	8013270 <_dtoa_r+0x808>
 801319c:	9b05      	ldr	r3, [sp, #20]
 801319e:	f1c0 001c 	rsb	r0, r0, #28
 80131a2:	4403      	add	r3, r0
 80131a4:	9305      	str	r3, [sp, #20]
 80131a6:	9b06      	ldr	r3, [sp, #24]
 80131a8:	4406      	add	r6, r0
 80131aa:	4403      	add	r3, r0
 80131ac:	9306      	str	r3, [sp, #24]
 80131ae:	9b05      	ldr	r3, [sp, #20]
 80131b0:	2b00      	cmp	r3, #0
 80131b2:	dd05      	ble.n	80131c0 <_dtoa_r+0x758>
 80131b4:	9901      	ldr	r1, [sp, #4]
 80131b6:	461a      	mov	r2, r3
 80131b8:	4648      	mov	r0, r9
 80131ba:	f000 fcb9 	bl	8013b30 <__lshift>
 80131be:	9001      	str	r0, [sp, #4]
 80131c0:	9b06      	ldr	r3, [sp, #24]
 80131c2:	2b00      	cmp	r3, #0
 80131c4:	dd05      	ble.n	80131d2 <_dtoa_r+0x76a>
 80131c6:	4621      	mov	r1, r4
 80131c8:	461a      	mov	r2, r3
 80131ca:	4648      	mov	r0, r9
 80131cc:	f000 fcb0 	bl	8013b30 <__lshift>
 80131d0:	4604      	mov	r4, r0
 80131d2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80131d4:	2b00      	cmp	r3, #0
 80131d6:	d056      	beq.n	8013286 <_dtoa_r+0x81e>
 80131d8:	9801      	ldr	r0, [sp, #4]
 80131da:	4621      	mov	r1, r4
 80131dc:	f000 fd14 	bl	8013c08 <__mcmp>
 80131e0:	2800      	cmp	r0, #0
 80131e2:	da50      	bge.n	8013286 <_dtoa_r+0x81e>
 80131e4:	f108 33ff 	add.w	r3, r8, #4294967295
 80131e8:	9304      	str	r3, [sp, #16]
 80131ea:	9901      	ldr	r1, [sp, #4]
 80131ec:	2300      	movs	r3, #0
 80131ee:	220a      	movs	r2, #10
 80131f0:	4648      	mov	r0, r9
 80131f2:	f000 faf1 	bl	80137d8 <__multadd>
 80131f6:	9b08      	ldr	r3, [sp, #32]
 80131f8:	9001      	str	r0, [sp, #4]
 80131fa:	2b00      	cmp	r3, #0
 80131fc:	f000 816e 	beq.w	80134dc <_dtoa_r+0xa74>
 8013200:	4629      	mov	r1, r5
 8013202:	2300      	movs	r3, #0
 8013204:	220a      	movs	r2, #10
 8013206:	4648      	mov	r0, r9
 8013208:	f000 fae6 	bl	80137d8 <__multadd>
 801320c:	f1bb 0f00 	cmp.w	fp, #0
 8013210:	4605      	mov	r5, r0
 8013212:	dc64      	bgt.n	80132de <_dtoa_r+0x876>
 8013214:	9b07      	ldr	r3, [sp, #28]
 8013216:	2b02      	cmp	r3, #2
 8013218:	dc3e      	bgt.n	8013298 <_dtoa_r+0x830>
 801321a:	e060      	b.n	80132de <_dtoa_r+0x876>
 801321c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801321e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8013222:	e73c      	b.n	801309e <_dtoa_r+0x636>
 8013224:	f10a 34ff 	add.w	r4, sl, #4294967295
 8013228:	42a3      	cmp	r3, r4
 801322a:	bfbf      	itttt	lt
 801322c:	1ae2      	sublt	r2, r4, r3
 801322e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8013230:	189b      	addlt	r3, r3, r2
 8013232:	930a      	strlt	r3, [sp, #40]	@ 0x28
 8013234:	bfae      	itee	ge
 8013236:	1b1c      	subge	r4, r3, r4
 8013238:	4623      	movlt	r3, r4
 801323a:	2400      	movlt	r4, #0
 801323c:	f1ba 0f00 	cmp.w	sl, #0
 8013240:	bfb5      	itete	lt
 8013242:	9a05      	ldrlt	r2, [sp, #20]
 8013244:	9e05      	ldrge	r6, [sp, #20]
 8013246:	eba2 060a 	sublt.w	r6, r2, sl
 801324a:	4652      	movge	r2, sl
 801324c:	bfb8      	it	lt
 801324e:	2200      	movlt	r2, #0
 8013250:	e727      	b.n	80130a2 <_dtoa_r+0x63a>
 8013252:	9e05      	ldr	r6, [sp, #20]
 8013254:	9d08      	ldr	r5, [sp, #32]
 8013256:	461c      	mov	r4, r3
 8013258:	e730      	b.n	80130bc <_dtoa_r+0x654>
 801325a:	461a      	mov	r2, r3
 801325c:	e758      	b.n	8013110 <_dtoa_r+0x6a8>
 801325e:	2300      	movs	r3, #0
 8013260:	e786      	b.n	8013170 <_dtoa_r+0x708>
 8013262:	9b02      	ldr	r3, [sp, #8]
 8013264:	e784      	b.n	8013170 <_dtoa_r+0x708>
 8013266:	920b      	str	r2, [sp, #44]	@ 0x2c
 8013268:	e783      	b.n	8013172 <_dtoa_r+0x70a>
 801326a:	2300      	movs	r3, #0
 801326c:	930b      	str	r3, [sp, #44]	@ 0x2c
 801326e:	e784      	b.n	801317a <_dtoa_r+0x712>
 8013270:	d09d      	beq.n	80131ae <_dtoa_r+0x746>
 8013272:	9b05      	ldr	r3, [sp, #20]
 8013274:	321c      	adds	r2, #28
 8013276:	4413      	add	r3, r2
 8013278:	9305      	str	r3, [sp, #20]
 801327a:	9b06      	ldr	r3, [sp, #24]
 801327c:	4416      	add	r6, r2
 801327e:	4413      	add	r3, r2
 8013280:	e794      	b.n	80131ac <_dtoa_r+0x744>
 8013282:	4602      	mov	r2, r0
 8013284:	e7f5      	b.n	8013272 <_dtoa_r+0x80a>
 8013286:	f1ba 0f00 	cmp.w	sl, #0
 801328a:	f8cd 8010 	str.w	r8, [sp, #16]
 801328e:	46d3      	mov	fp, sl
 8013290:	dc21      	bgt.n	80132d6 <_dtoa_r+0x86e>
 8013292:	9b07      	ldr	r3, [sp, #28]
 8013294:	2b02      	cmp	r3, #2
 8013296:	dd1e      	ble.n	80132d6 <_dtoa_r+0x86e>
 8013298:	f1bb 0f00 	cmp.w	fp, #0
 801329c:	f47f aeb7 	bne.w	801300e <_dtoa_r+0x5a6>
 80132a0:	4621      	mov	r1, r4
 80132a2:	465b      	mov	r3, fp
 80132a4:	2205      	movs	r2, #5
 80132a6:	4648      	mov	r0, r9
 80132a8:	f000 fa96 	bl	80137d8 <__multadd>
 80132ac:	4601      	mov	r1, r0
 80132ae:	4604      	mov	r4, r0
 80132b0:	9801      	ldr	r0, [sp, #4]
 80132b2:	f000 fca9 	bl	8013c08 <__mcmp>
 80132b6:	2800      	cmp	r0, #0
 80132b8:	f77f aea9 	ble.w	801300e <_dtoa_r+0x5a6>
 80132bc:	463e      	mov	r6, r7
 80132be:	2331      	movs	r3, #49	@ 0x31
 80132c0:	f806 3b01 	strb.w	r3, [r6], #1
 80132c4:	9b04      	ldr	r3, [sp, #16]
 80132c6:	3301      	adds	r3, #1
 80132c8:	9304      	str	r3, [sp, #16]
 80132ca:	e6a4      	b.n	8013016 <_dtoa_r+0x5ae>
 80132cc:	f8cd 8010 	str.w	r8, [sp, #16]
 80132d0:	4654      	mov	r4, sl
 80132d2:	4625      	mov	r5, r4
 80132d4:	e7f2      	b.n	80132bc <_dtoa_r+0x854>
 80132d6:	9b08      	ldr	r3, [sp, #32]
 80132d8:	2b00      	cmp	r3, #0
 80132da:	f000 8103 	beq.w	80134e4 <_dtoa_r+0xa7c>
 80132de:	2e00      	cmp	r6, #0
 80132e0:	dd05      	ble.n	80132ee <_dtoa_r+0x886>
 80132e2:	4629      	mov	r1, r5
 80132e4:	4632      	mov	r2, r6
 80132e6:	4648      	mov	r0, r9
 80132e8:	f000 fc22 	bl	8013b30 <__lshift>
 80132ec:	4605      	mov	r5, r0
 80132ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80132f0:	2b00      	cmp	r3, #0
 80132f2:	d058      	beq.n	80133a6 <_dtoa_r+0x93e>
 80132f4:	6869      	ldr	r1, [r5, #4]
 80132f6:	4648      	mov	r0, r9
 80132f8:	f000 fa0c 	bl	8013714 <_Balloc>
 80132fc:	4606      	mov	r6, r0
 80132fe:	b928      	cbnz	r0, 801330c <_dtoa_r+0x8a4>
 8013300:	4b82      	ldr	r3, [pc, #520]	@ (801350c <_dtoa_r+0xaa4>)
 8013302:	4602      	mov	r2, r0
 8013304:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8013308:	f7ff bbc7 	b.w	8012a9a <_dtoa_r+0x32>
 801330c:	692a      	ldr	r2, [r5, #16]
 801330e:	3202      	adds	r2, #2
 8013310:	0092      	lsls	r2, r2, #2
 8013312:	f105 010c 	add.w	r1, r5, #12
 8013316:	300c      	adds	r0, #12
 8013318:	f000 ffac 	bl	8014274 <memcpy>
 801331c:	2201      	movs	r2, #1
 801331e:	4631      	mov	r1, r6
 8013320:	4648      	mov	r0, r9
 8013322:	f000 fc05 	bl	8013b30 <__lshift>
 8013326:	1c7b      	adds	r3, r7, #1
 8013328:	9305      	str	r3, [sp, #20]
 801332a:	eb07 030b 	add.w	r3, r7, fp
 801332e:	9309      	str	r3, [sp, #36]	@ 0x24
 8013330:	9b02      	ldr	r3, [sp, #8]
 8013332:	f003 0301 	and.w	r3, r3, #1
 8013336:	46a8      	mov	r8, r5
 8013338:	9308      	str	r3, [sp, #32]
 801333a:	4605      	mov	r5, r0
 801333c:	9b05      	ldr	r3, [sp, #20]
 801333e:	9801      	ldr	r0, [sp, #4]
 8013340:	4621      	mov	r1, r4
 8013342:	f103 3bff 	add.w	fp, r3, #4294967295
 8013346:	f7ff fb04 	bl	8012952 <quorem>
 801334a:	4641      	mov	r1, r8
 801334c:	9002      	str	r0, [sp, #8]
 801334e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8013352:	9801      	ldr	r0, [sp, #4]
 8013354:	f000 fc58 	bl	8013c08 <__mcmp>
 8013358:	462a      	mov	r2, r5
 801335a:	9006      	str	r0, [sp, #24]
 801335c:	4621      	mov	r1, r4
 801335e:	4648      	mov	r0, r9
 8013360:	f000 fc6e 	bl	8013c40 <__mdiff>
 8013364:	68c2      	ldr	r2, [r0, #12]
 8013366:	4606      	mov	r6, r0
 8013368:	b9fa      	cbnz	r2, 80133aa <_dtoa_r+0x942>
 801336a:	4601      	mov	r1, r0
 801336c:	9801      	ldr	r0, [sp, #4]
 801336e:	f000 fc4b 	bl	8013c08 <__mcmp>
 8013372:	4602      	mov	r2, r0
 8013374:	4631      	mov	r1, r6
 8013376:	4648      	mov	r0, r9
 8013378:	920a      	str	r2, [sp, #40]	@ 0x28
 801337a:	f000 fa0b 	bl	8013794 <_Bfree>
 801337e:	9b07      	ldr	r3, [sp, #28]
 8013380:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8013382:	9e05      	ldr	r6, [sp, #20]
 8013384:	ea43 0102 	orr.w	r1, r3, r2
 8013388:	9b08      	ldr	r3, [sp, #32]
 801338a:	4319      	orrs	r1, r3
 801338c:	d10f      	bne.n	80133ae <_dtoa_r+0x946>
 801338e:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8013392:	d028      	beq.n	80133e6 <_dtoa_r+0x97e>
 8013394:	9b06      	ldr	r3, [sp, #24]
 8013396:	2b00      	cmp	r3, #0
 8013398:	dd02      	ble.n	80133a0 <_dtoa_r+0x938>
 801339a:	9b02      	ldr	r3, [sp, #8]
 801339c:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 80133a0:	f88b a000 	strb.w	sl, [fp]
 80133a4:	e639      	b.n	801301a <_dtoa_r+0x5b2>
 80133a6:	4628      	mov	r0, r5
 80133a8:	e7bd      	b.n	8013326 <_dtoa_r+0x8be>
 80133aa:	2201      	movs	r2, #1
 80133ac:	e7e2      	b.n	8013374 <_dtoa_r+0x90c>
 80133ae:	9b06      	ldr	r3, [sp, #24]
 80133b0:	2b00      	cmp	r3, #0
 80133b2:	db04      	blt.n	80133be <_dtoa_r+0x956>
 80133b4:	9907      	ldr	r1, [sp, #28]
 80133b6:	430b      	orrs	r3, r1
 80133b8:	9908      	ldr	r1, [sp, #32]
 80133ba:	430b      	orrs	r3, r1
 80133bc:	d120      	bne.n	8013400 <_dtoa_r+0x998>
 80133be:	2a00      	cmp	r2, #0
 80133c0:	ddee      	ble.n	80133a0 <_dtoa_r+0x938>
 80133c2:	9901      	ldr	r1, [sp, #4]
 80133c4:	2201      	movs	r2, #1
 80133c6:	4648      	mov	r0, r9
 80133c8:	f000 fbb2 	bl	8013b30 <__lshift>
 80133cc:	4621      	mov	r1, r4
 80133ce:	9001      	str	r0, [sp, #4]
 80133d0:	f000 fc1a 	bl	8013c08 <__mcmp>
 80133d4:	2800      	cmp	r0, #0
 80133d6:	dc03      	bgt.n	80133e0 <_dtoa_r+0x978>
 80133d8:	d1e2      	bne.n	80133a0 <_dtoa_r+0x938>
 80133da:	f01a 0f01 	tst.w	sl, #1
 80133de:	d0df      	beq.n	80133a0 <_dtoa_r+0x938>
 80133e0:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 80133e4:	d1d9      	bne.n	801339a <_dtoa_r+0x932>
 80133e6:	2339      	movs	r3, #57	@ 0x39
 80133e8:	f88b 3000 	strb.w	r3, [fp]
 80133ec:	4633      	mov	r3, r6
 80133ee:	461e      	mov	r6, r3
 80133f0:	3b01      	subs	r3, #1
 80133f2:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80133f6:	2a39      	cmp	r2, #57	@ 0x39
 80133f8:	d053      	beq.n	80134a2 <_dtoa_r+0xa3a>
 80133fa:	3201      	adds	r2, #1
 80133fc:	701a      	strb	r2, [r3, #0]
 80133fe:	e60c      	b.n	801301a <_dtoa_r+0x5b2>
 8013400:	2a00      	cmp	r2, #0
 8013402:	dd07      	ble.n	8013414 <_dtoa_r+0x9ac>
 8013404:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8013408:	d0ed      	beq.n	80133e6 <_dtoa_r+0x97e>
 801340a:	f10a 0301 	add.w	r3, sl, #1
 801340e:	f88b 3000 	strb.w	r3, [fp]
 8013412:	e602      	b.n	801301a <_dtoa_r+0x5b2>
 8013414:	9b05      	ldr	r3, [sp, #20]
 8013416:	9a05      	ldr	r2, [sp, #20]
 8013418:	f803 ac01 	strb.w	sl, [r3, #-1]
 801341c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801341e:	4293      	cmp	r3, r2
 8013420:	d029      	beq.n	8013476 <_dtoa_r+0xa0e>
 8013422:	9901      	ldr	r1, [sp, #4]
 8013424:	2300      	movs	r3, #0
 8013426:	220a      	movs	r2, #10
 8013428:	4648      	mov	r0, r9
 801342a:	f000 f9d5 	bl	80137d8 <__multadd>
 801342e:	45a8      	cmp	r8, r5
 8013430:	9001      	str	r0, [sp, #4]
 8013432:	f04f 0300 	mov.w	r3, #0
 8013436:	f04f 020a 	mov.w	r2, #10
 801343a:	4641      	mov	r1, r8
 801343c:	4648      	mov	r0, r9
 801343e:	d107      	bne.n	8013450 <_dtoa_r+0x9e8>
 8013440:	f000 f9ca 	bl	80137d8 <__multadd>
 8013444:	4680      	mov	r8, r0
 8013446:	4605      	mov	r5, r0
 8013448:	9b05      	ldr	r3, [sp, #20]
 801344a:	3301      	adds	r3, #1
 801344c:	9305      	str	r3, [sp, #20]
 801344e:	e775      	b.n	801333c <_dtoa_r+0x8d4>
 8013450:	f000 f9c2 	bl	80137d8 <__multadd>
 8013454:	4629      	mov	r1, r5
 8013456:	4680      	mov	r8, r0
 8013458:	2300      	movs	r3, #0
 801345a:	220a      	movs	r2, #10
 801345c:	4648      	mov	r0, r9
 801345e:	f000 f9bb 	bl	80137d8 <__multadd>
 8013462:	4605      	mov	r5, r0
 8013464:	e7f0      	b.n	8013448 <_dtoa_r+0x9e0>
 8013466:	f1bb 0f00 	cmp.w	fp, #0
 801346a:	bfcc      	ite	gt
 801346c:	465e      	movgt	r6, fp
 801346e:	2601      	movle	r6, #1
 8013470:	443e      	add	r6, r7
 8013472:	f04f 0800 	mov.w	r8, #0
 8013476:	9901      	ldr	r1, [sp, #4]
 8013478:	2201      	movs	r2, #1
 801347a:	4648      	mov	r0, r9
 801347c:	f000 fb58 	bl	8013b30 <__lshift>
 8013480:	4621      	mov	r1, r4
 8013482:	9001      	str	r0, [sp, #4]
 8013484:	f000 fbc0 	bl	8013c08 <__mcmp>
 8013488:	2800      	cmp	r0, #0
 801348a:	dcaf      	bgt.n	80133ec <_dtoa_r+0x984>
 801348c:	d102      	bne.n	8013494 <_dtoa_r+0xa2c>
 801348e:	f01a 0f01 	tst.w	sl, #1
 8013492:	d1ab      	bne.n	80133ec <_dtoa_r+0x984>
 8013494:	4633      	mov	r3, r6
 8013496:	461e      	mov	r6, r3
 8013498:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801349c:	2a30      	cmp	r2, #48	@ 0x30
 801349e:	d0fa      	beq.n	8013496 <_dtoa_r+0xa2e>
 80134a0:	e5bb      	b.n	801301a <_dtoa_r+0x5b2>
 80134a2:	429f      	cmp	r7, r3
 80134a4:	d1a3      	bne.n	80133ee <_dtoa_r+0x986>
 80134a6:	9b04      	ldr	r3, [sp, #16]
 80134a8:	3301      	adds	r3, #1
 80134aa:	9304      	str	r3, [sp, #16]
 80134ac:	2331      	movs	r3, #49	@ 0x31
 80134ae:	703b      	strb	r3, [r7, #0]
 80134b0:	e5b3      	b.n	801301a <_dtoa_r+0x5b2>
 80134b2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80134b4:	4f16      	ldr	r7, [pc, #88]	@ (8013510 <_dtoa_r+0xaa8>)
 80134b6:	b11b      	cbz	r3, 80134c0 <_dtoa_r+0xa58>
 80134b8:	f107 0308 	add.w	r3, r7, #8
 80134bc:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 80134be:	6013      	str	r3, [r2, #0]
 80134c0:	4638      	mov	r0, r7
 80134c2:	b011      	add	sp, #68	@ 0x44
 80134c4:	ecbd 8b02 	vpop	{d8}
 80134c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80134cc:	9b07      	ldr	r3, [sp, #28]
 80134ce:	2b01      	cmp	r3, #1
 80134d0:	f77f ae36 	ble.w	8013140 <_dtoa_r+0x6d8>
 80134d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80134d6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80134d8:	2001      	movs	r0, #1
 80134da:	e656      	b.n	801318a <_dtoa_r+0x722>
 80134dc:	f1bb 0f00 	cmp.w	fp, #0
 80134e0:	f77f aed7 	ble.w	8013292 <_dtoa_r+0x82a>
 80134e4:	463e      	mov	r6, r7
 80134e6:	9801      	ldr	r0, [sp, #4]
 80134e8:	4621      	mov	r1, r4
 80134ea:	f7ff fa32 	bl	8012952 <quorem>
 80134ee:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 80134f2:	f806 ab01 	strb.w	sl, [r6], #1
 80134f6:	1bf2      	subs	r2, r6, r7
 80134f8:	4593      	cmp	fp, r2
 80134fa:	ddb4      	ble.n	8013466 <_dtoa_r+0x9fe>
 80134fc:	9901      	ldr	r1, [sp, #4]
 80134fe:	2300      	movs	r3, #0
 8013500:	220a      	movs	r2, #10
 8013502:	4648      	mov	r0, r9
 8013504:	f000 f968 	bl	80137d8 <__multadd>
 8013508:	9001      	str	r0, [sp, #4]
 801350a:	e7ec      	b.n	80134e6 <_dtoa_r+0xa7e>
 801350c:	08014ae4 	.word	0x08014ae4
 8013510:	08014a68 	.word	0x08014a68

08013514 <_free_r>:
 8013514:	b538      	push	{r3, r4, r5, lr}
 8013516:	4605      	mov	r5, r0
 8013518:	2900      	cmp	r1, #0
 801351a:	d041      	beq.n	80135a0 <_free_r+0x8c>
 801351c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013520:	1f0c      	subs	r4, r1, #4
 8013522:	2b00      	cmp	r3, #0
 8013524:	bfb8      	it	lt
 8013526:	18e4      	addlt	r4, r4, r3
 8013528:	f000 f8e8 	bl	80136fc <__malloc_lock>
 801352c:	4a1d      	ldr	r2, [pc, #116]	@ (80135a4 <_free_r+0x90>)
 801352e:	6813      	ldr	r3, [r2, #0]
 8013530:	b933      	cbnz	r3, 8013540 <_free_r+0x2c>
 8013532:	6063      	str	r3, [r4, #4]
 8013534:	6014      	str	r4, [r2, #0]
 8013536:	4628      	mov	r0, r5
 8013538:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801353c:	f000 b8e4 	b.w	8013708 <__malloc_unlock>
 8013540:	42a3      	cmp	r3, r4
 8013542:	d908      	bls.n	8013556 <_free_r+0x42>
 8013544:	6820      	ldr	r0, [r4, #0]
 8013546:	1821      	adds	r1, r4, r0
 8013548:	428b      	cmp	r3, r1
 801354a:	bf01      	itttt	eq
 801354c:	6819      	ldreq	r1, [r3, #0]
 801354e:	685b      	ldreq	r3, [r3, #4]
 8013550:	1809      	addeq	r1, r1, r0
 8013552:	6021      	streq	r1, [r4, #0]
 8013554:	e7ed      	b.n	8013532 <_free_r+0x1e>
 8013556:	461a      	mov	r2, r3
 8013558:	685b      	ldr	r3, [r3, #4]
 801355a:	b10b      	cbz	r3, 8013560 <_free_r+0x4c>
 801355c:	42a3      	cmp	r3, r4
 801355e:	d9fa      	bls.n	8013556 <_free_r+0x42>
 8013560:	6811      	ldr	r1, [r2, #0]
 8013562:	1850      	adds	r0, r2, r1
 8013564:	42a0      	cmp	r0, r4
 8013566:	d10b      	bne.n	8013580 <_free_r+0x6c>
 8013568:	6820      	ldr	r0, [r4, #0]
 801356a:	4401      	add	r1, r0
 801356c:	1850      	adds	r0, r2, r1
 801356e:	4283      	cmp	r3, r0
 8013570:	6011      	str	r1, [r2, #0]
 8013572:	d1e0      	bne.n	8013536 <_free_r+0x22>
 8013574:	6818      	ldr	r0, [r3, #0]
 8013576:	685b      	ldr	r3, [r3, #4]
 8013578:	6053      	str	r3, [r2, #4]
 801357a:	4408      	add	r0, r1
 801357c:	6010      	str	r0, [r2, #0]
 801357e:	e7da      	b.n	8013536 <_free_r+0x22>
 8013580:	d902      	bls.n	8013588 <_free_r+0x74>
 8013582:	230c      	movs	r3, #12
 8013584:	602b      	str	r3, [r5, #0]
 8013586:	e7d6      	b.n	8013536 <_free_r+0x22>
 8013588:	6820      	ldr	r0, [r4, #0]
 801358a:	1821      	adds	r1, r4, r0
 801358c:	428b      	cmp	r3, r1
 801358e:	bf04      	itt	eq
 8013590:	6819      	ldreq	r1, [r3, #0]
 8013592:	685b      	ldreq	r3, [r3, #4]
 8013594:	6063      	str	r3, [r4, #4]
 8013596:	bf04      	itt	eq
 8013598:	1809      	addeq	r1, r1, r0
 801359a:	6021      	streq	r1, [r4, #0]
 801359c:	6054      	str	r4, [r2, #4]
 801359e:	e7ca      	b.n	8013536 <_free_r+0x22>
 80135a0:	bd38      	pop	{r3, r4, r5, pc}
 80135a2:	bf00      	nop
 80135a4:	24002774 	.word	0x24002774

080135a8 <malloc>:
 80135a8:	4b02      	ldr	r3, [pc, #8]	@ (80135b4 <malloc+0xc>)
 80135aa:	4601      	mov	r1, r0
 80135ac:	6818      	ldr	r0, [r3, #0]
 80135ae:	f000 b825 	b.w	80135fc <_malloc_r>
 80135b2:	bf00      	nop
 80135b4:	24000138 	.word	0x24000138

080135b8 <sbrk_aligned>:
 80135b8:	b570      	push	{r4, r5, r6, lr}
 80135ba:	4e0f      	ldr	r6, [pc, #60]	@ (80135f8 <sbrk_aligned+0x40>)
 80135bc:	460c      	mov	r4, r1
 80135be:	6831      	ldr	r1, [r6, #0]
 80135c0:	4605      	mov	r5, r0
 80135c2:	b911      	cbnz	r1, 80135ca <sbrk_aligned+0x12>
 80135c4:	f000 fe46 	bl	8014254 <_sbrk_r>
 80135c8:	6030      	str	r0, [r6, #0]
 80135ca:	4621      	mov	r1, r4
 80135cc:	4628      	mov	r0, r5
 80135ce:	f000 fe41 	bl	8014254 <_sbrk_r>
 80135d2:	1c43      	adds	r3, r0, #1
 80135d4:	d103      	bne.n	80135de <sbrk_aligned+0x26>
 80135d6:	f04f 34ff 	mov.w	r4, #4294967295
 80135da:	4620      	mov	r0, r4
 80135dc:	bd70      	pop	{r4, r5, r6, pc}
 80135de:	1cc4      	adds	r4, r0, #3
 80135e0:	f024 0403 	bic.w	r4, r4, #3
 80135e4:	42a0      	cmp	r0, r4
 80135e6:	d0f8      	beq.n	80135da <sbrk_aligned+0x22>
 80135e8:	1a21      	subs	r1, r4, r0
 80135ea:	4628      	mov	r0, r5
 80135ec:	f000 fe32 	bl	8014254 <_sbrk_r>
 80135f0:	3001      	adds	r0, #1
 80135f2:	d1f2      	bne.n	80135da <sbrk_aligned+0x22>
 80135f4:	e7ef      	b.n	80135d6 <sbrk_aligned+0x1e>
 80135f6:	bf00      	nop
 80135f8:	24002770 	.word	0x24002770

080135fc <_malloc_r>:
 80135fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013600:	1ccd      	adds	r5, r1, #3
 8013602:	f025 0503 	bic.w	r5, r5, #3
 8013606:	3508      	adds	r5, #8
 8013608:	2d0c      	cmp	r5, #12
 801360a:	bf38      	it	cc
 801360c:	250c      	movcc	r5, #12
 801360e:	2d00      	cmp	r5, #0
 8013610:	4606      	mov	r6, r0
 8013612:	db01      	blt.n	8013618 <_malloc_r+0x1c>
 8013614:	42a9      	cmp	r1, r5
 8013616:	d904      	bls.n	8013622 <_malloc_r+0x26>
 8013618:	230c      	movs	r3, #12
 801361a:	6033      	str	r3, [r6, #0]
 801361c:	2000      	movs	r0, #0
 801361e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013622:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80136f8 <_malloc_r+0xfc>
 8013626:	f000 f869 	bl	80136fc <__malloc_lock>
 801362a:	f8d8 3000 	ldr.w	r3, [r8]
 801362e:	461c      	mov	r4, r3
 8013630:	bb44      	cbnz	r4, 8013684 <_malloc_r+0x88>
 8013632:	4629      	mov	r1, r5
 8013634:	4630      	mov	r0, r6
 8013636:	f7ff ffbf 	bl	80135b8 <sbrk_aligned>
 801363a:	1c43      	adds	r3, r0, #1
 801363c:	4604      	mov	r4, r0
 801363e:	d158      	bne.n	80136f2 <_malloc_r+0xf6>
 8013640:	f8d8 4000 	ldr.w	r4, [r8]
 8013644:	4627      	mov	r7, r4
 8013646:	2f00      	cmp	r7, #0
 8013648:	d143      	bne.n	80136d2 <_malloc_r+0xd6>
 801364a:	2c00      	cmp	r4, #0
 801364c:	d04b      	beq.n	80136e6 <_malloc_r+0xea>
 801364e:	6823      	ldr	r3, [r4, #0]
 8013650:	4639      	mov	r1, r7
 8013652:	4630      	mov	r0, r6
 8013654:	eb04 0903 	add.w	r9, r4, r3
 8013658:	f000 fdfc 	bl	8014254 <_sbrk_r>
 801365c:	4581      	cmp	r9, r0
 801365e:	d142      	bne.n	80136e6 <_malloc_r+0xea>
 8013660:	6821      	ldr	r1, [r4, #0]
 8013662:	1a6d      	subs	r5, r5, r1
 8013664:	4629      	mov	r1, r5
 8013666:	4630      	mov	r0, r6
 8013668:	f7ff ffa6 	bl	80135b8 <sbrk_aligned>
 801366c:	3001      	adds	r0, #1
 801366e:	d03a      	beq.n	80136e6 <_malloc_r+0xea>
 8013670:	6823      	ldr	r3, [r4, #0]
 8013672:	442b      	add	r3, r5
 8013674:	6023      	str	r3, [r4, #0]
 8013676:	f8d8 3000 	ldr.w	r3, [r8]
 801367a:	685a      	ldr	r2, [r3, #4]
 801367c:	bb62      	cbnz	r2, 80136d8 <_malloc_r+0xdc>
 801367e:	f8c8 7000 	str.w	r7, [r8]
 8013682:	e00f      	b.n	80136a4 <_malloc_r+0xa8>
 8013684:	6822      	ldr	r2, [r4, #0]
 8013686:	1b52      	subs	r2, r2, r5
 8013688:	d420      	bmi.n	80136cc <_malloc_r+0xd0>
 801368a:	2a0b      	cmp	r2, #11
 801368c:	d917      	bls.n	80136be <_malloc_r+0xc2>
 801368e:	1961      	adds	r1, r4, r5
 8013690:	42a3      	cmp	r3, r4
 8013692:	6025      	str	r5, [r4, #0]
 8013694:	bf18      	it	ne
 8013696:	6059      	strne	r1, [r3, #4]
 8013698:	6863      	ldr	r3, [r4, #4]
 801369a:	bf08      	it	eq
 801369c:	f8c8 1000 	streq.w	r1, [r8]
 80136a0:	5162      	str	r2, [r4, r5]
 80136a2:	604b      	str	r3, [r1, #4]
 80136a4:	4630      	mov	r0, r6
 80136a6:	f000 f82f 	bl	8013708 <__malloc_unlock>
 80136aa:	f104 000b 	add.w	r0, r4, #11
 80136ae:	1d23      	adds	r3, r4, #4
 80136b0:	f020 0007 	bic.w	r0, r0, #7
 80136b4:	1ac2      	subs	r2, r0, r3
 80136b6:	bf1c      	itt	ne
 80136b8:	1a1b      	subne	r3, r3, r0
 80136ba:	50a3      	strne	r3, [r4, r2]
 80136bc:	e7af      	b.n	801361e <_malloc_r+0x22>
 80136be:	6862      	ldr	r2, [r4, #4]
 80136c0:	42a3      	cmp	r3, r4
 80136c2:	bf0c      	ite	eq
 80136c4:	f8c8 2000 	streq.w	r2, [r8]
 80136c8:	605a      	strne	r2, [r3, #4]
 80136ca:	e7eb      	b.n	80136a4 <_malloc_r+0xa8>
 80136cc:	4623      	mov	r3, r4
 80136ce:	6864      	ldr	r4, [r4, #4]
 80136d0:	e7ae      	b.n	8013630 <_malloc_r+0x34>
 80136d2:	463c      	mov	r4, r7
 80136d4:	687f      	ldr	r7, [r7, #4]
 80136d6:	e7b6      	b.n	8013646 <_malloc_r+0x4a>
 80136d8:	461a      	mov	r2, r3
 80136da:	685b      	ldr	r3, [r3, #4]
 80136dc:	42a3      	cmp	r3, r4
 80136de:	d1fb      	bne.n	80136d8 <_malloc_r+0xdc>
 80136e0:	2300      	movs	r3, #0
 80136e2:	6053      	str	r3, [r2, #4]
 80136e4:	e7de      	b.n	80136a4 <_malloc_r+0xa8>
 80136e6:	230c      	movs	r3, #12
 80136e8:	6033      	str	r3, [r6, #0]
 80136ea:	4630      	mov	r0, r6
 80136ec:	f000 f80c 	bl	8013708 <__malloc_unlock>
 80136f0:	e794      	b.n	801361c <_malloc_r+0x20>
 80136f2:	6005      	str	r5, [r0, #0]
 80136f4:	e7d6      	b.n	80136a4 <_malloc_r+0xa8>
 80136f6:	bf00      	nop
 80136f8:	24002774 	.word	0x24002774

080136fc <__malloc_lock>:
 80136fc:	4801      	ldr	r0, [pc, #4]	@ (8013704 <__malloc_lock+0x8>)
 80136fe:	f7ff b926 	b.w	801294e <__retarget_lock_acquire_recursive>
 8013702:	bf00      	nop
 8013704:	2400276c 	.word	0x2400276c

08013708 <__malloc_unlock>:
 8013708:	4801      	ldr	r0, [pc, #4]	@ (8013710 <__malloc_unlock+0x8>)
 801370a:	f7ff b921 	b.w	8012950 <__retarget_lock_release_recursive>
 801370e:	bf00      	nop
 8013710:	2400276c 	.word	0x2400276c

08013714 <_Balloc>:
 8013714:	b570      	push	{r4, r5, r6, lr}
 8013716:	69c6      	ldr	r6, [r0, #28]
 8013718:	4604      	mov	r4, r0
 801371a:	460d      	mov	r5, r1
 801371c:	b976      	cbnz	r6, 801373c <_Balloc+0x28>
 801371e:	2010      	movs	r0, #16
 8013720:	f7ff ff42 	bl	80135a8 <malloc>
 8013724:	4602      	mov	r2, r0
 8013726:	61e0      	str	r0, [r4, #28]
 8013728:	b920      	cbnz	r0, 8013734 <_Balloc+0x20>
 801372a:	4b18      	ldr	r3, [pc, #96]	@ (801378c <_Balloc+0x78>)
 801372c:	4818      	ldr	r0, [pc, #96]	@ (8013790 <_Balloc+0x7c>)
 801372e:	216b      	movs	r1, #107	@ 0x6b
 8013730:	f000 fdae 	bl	8014290 <__assert_func>
 8013734:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013738:	6006      	str	r6, [r0, #0]
 801373a:	60c6      	str	r6, [r0, #12]
 801373c:	69e6      	ldr	r6, [r4, #28]
 801373e:	68f3      	ldr	r3, [r6, #12]
 8013740:	b183      	cbz	r3, 8013764 <_Balloc+0x50>
 8013742:	69e3      	ldr	r3, [r4, #28]
 8013744:	68db      	ldr	r3, [r3, #12]
 8013746:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801374a:	b9b8      	cbnz	r0, 801377c <_Balloc+0x68>
 801374c:	2101      	movs	r1, #1
 801374e:	fa01 f605 	lsl.w	r6, r1, r5
 8013752:	1d72      	adds	r2, r6, #5
 8013754:	0092      	lsls	r2, r2, #2
 8013756:	4620      	mov	r0, r4
 8013758:	f000 fdb8 	bl	80142cc <_calloc_r>
 801375c:	b160      	cbz	r0, 8013778 <_Balloc+0x64>
 801375e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8013762:	e00e      	b.n	8013782 <_Balloc+0x6e>
 8013764:	2221      	movs	r2, #33	@ 0x21
 8013766:	2104      	movs	r1, #4
 8013768:	4620      	mov	r0, r4
 801376a:	f000 fdaf 	bl	80142cc <_calloc_r>
 801376e:	69e3      	ldr	r3, [r4, #28]
 8013770:	60f0      	str	r0, [r6, #12]
 8013772:	68db      	ldr	r3, [r3, #12]
 8013774:	2b00      	cmp	r3, #0
 8013776:	d1e4      	bne.n	8013742 <_Balloc+0x2e>
 8013778:	2000      	movs	r0, #0
 801377a:	bd70      	pop	{r4, r5, r6, pc}
 801377c:	6802      	ldr	r2, [r0, #0]
 801377e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8013782:	2300      	movs	r3, #0
 8013784:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8013788:	e7f7      	b.n	801377a <_Balloc+0x66>
 801378a:	bf00      	nop
 801378c:	08014a75 	.word	0x08014a75
 8013790:	08014af5 	.word	0x08014af5

08013794 <_Bfree>:
 8013794:	b570      	push	{r4, r5, r6, lr}
 8013796:	69c6      	ldr	r6, [r0, #28]
 8013798:	4605      	mov	r5, r0
 801379a:	460c      	mov	r4, r1
 801379c:	b976      	cbnz	r6, 80137bc <_Bfree+0x28>
 801379e:	2010      	movs	r0, #16
 80137a0:	f7ff ff02 	bl	80135a8 <malloc>
 80137a4:	4602      	mov	r2, r0
 80137a6:	61e8      	str	r0, [r5, #28]
 80137a8:	b920      	cbnz	r0, 80137b4 <_Bfree+0x20>
 80137aa:	4b09      	ldr	r3, [pc, #36]	@ (80137d0 <_Bfree+0x3c>)
 80137ac:	4809      	ldr	r0, [pc, #36]	@ (80137d4 <_Bfree+0x40>)
 80137ae:	218f      	movs	r1, #143	@ 0x8f
 80137b0:	f000 fd6e 	bl	8014290 <__assert_func>
 80137b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80137b8:	6006      	str	r6, [r0, #0]
 80137ba:	60c6      	str	r6, [r0, #12]
 80137bc:	b13c      	cbz	r4, 80137ce <_Bfree+0x3a>
 80137be:	69eb      	ldr	r3, [r5, #28]
 80137c0:	6862      	ldr	r2, [r4, #4]
 80137c2:	68db      	ldr	r3, [r3, #12]
 80137c4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80137c8:	6021      	str	r1, [r4, #0]
 80137ca:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80137ce:	bd70      	pop	{r4, r5, r6, pc}
 80137d0:	08014a75 	.word	0x08014a75
 80137d4:	08014af5 	.word	0x08014af5

080137d8 <__multadd>:
 80137d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80137dc:	690d      	ldr	r5, [r1, #16]
 80137de:	4607      	mov	r7, r0
 80137e0:	460c      	mov	r4, r1
 80137e2:	461e      	mov	r6, r3
 80137e4:	f101 0c14 	add.w	ip, r1, #20
 80137e8:	2000      	movs	r0, #0
 80137ea:	f8dc 3000 	ldr.w	r3, [ip]
 80137ee:	b299      	uxth	r1, r3
 80137f0:	fb02 6101 	mla	r1, r2, r1, r6
 80137f4:	0c1e      	lsrs	r6, r3, #16
 80137f6:	0c0b      	lsrs	r3, r1, #16
 80137f8:	fb02 3306 	mla	r3, r2, r6, r3
 80137fc:	b289      	uxth	r1, r1
 80137fe:	3001      	adds	r0, #1
 8013800:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8013804:	4285      	cmp	r5, r0
 8013806:	f84c 1b04 	str.w	r1, [ip], #4
 801380a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801380e:	dcec      	bgt.n	80137ea <__multadd+0x12>
 8013810:	b30e      	cbz	r6, 8013856 <__multadd+0x7e>
 8013812:	68a3      	ldr	r3, [r4, #8]
 8013814:	42ab      	cmp	r3, r5
 8013816:	dc19      	bgt.n	801384c <__multadd+0x74>
 8013818:	6861      	ldr	r1, [r4, #4]
 801381a:	4638      	mov	r0, r7
 801381c:	3101      	adds	r1, #1
 801381e:	f7ff ff79 	bl	8013714 <_Balloc>
 8013822:	4680      	mov	r8, r0
 8013824:	b928      	cbnz	r0, 8013832 <__multadd+0x5a>
 8013826:	4602      	mov	r2, r0
 8013828:	4b0c      	ldr	r3, [pc, #48]	@ (801385c <__multadd+0x84>)
 801382a:	480d      	ldr	r0, [pc, #52]	@ (8013860 <__multadd+0x88>)
 801382c:	21ba      	movs	r1, #186	@ 0xba
 801382e:	f000 fd2f 	bl	8014290 <__assert_func>
 8013832:	6922      	ldr	r2, [r4, #16]
 8013834:	3202      	adds	r2, #2
 8013836:	f104 010c 	add.w	r1, r4, #12
 801383a:	0092      	lsls	r2, r2, #2
 801383c:	300c      	adds	r0, #12
 801383e:	f000 fd19 	bl	8014274 <memcpy>
 8013842:	4621      	mov	r1, r4
 8013844:	4638      	mov	r0, r7
 8013846:	f7ff ffa5 	bl	8013794 <_Bfree>
 801384a:	4644      	mov	r4, r8
 801384c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8013850:	3501      	adds	r5, #1
 8013852:	615e      	str	r6, [r3, #20]
 8013854:	6125      	str	r5, [r4, #16]
 8013856:	4620      	mov	r0, r4
 8013858:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801385c:	08014ae4 	.word	0x08014ae4
 8013860:	08014af5 	.word	0x08014af5

08013864 <__hi0bits>:
 8013864:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8013868:	4603      	mov	r3, r0
 801386a:	bf36      	itet	cc
 801386c:	0403      	lslcc	r3, r0, #16
 801386e:	2000      	movcs	r0, #0
 8013870:	2010      	movcc	r0, #16
 8013872:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8013876:	bf3c      	itt	cc
 8013878:	021b      	lslcc	r3, r3, #8
 801387a:	3008      	addcc	r0, #8
 801387c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8013880:	bf3c      	itt	cc
 8013882:	011b      	lslcc	r3, r3, #4
 8013884:	3004      	addcc	r0, #4
 8013886:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801388a:	bf3c      	itt	cc
 801388c:	009b      	lslcc	r3, r3, #2
 801388e:	3002      	addcc	r0, #2
 8013890:	2b00      	cmp	r3, #0
 8013892:	db05      	blt.n	80138a0 <__hi0bits+0x3c>
 8013894:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8013898:	f100 0001 	add.w	r0, r0, #1
 801389c:	bf08      	it	eq
 801389e:	2020      	moveq	r0, #32
 80138a0:	4770      	bx	lr

080138a2 <__lo0bits>:
 80138a2:	6803      	ldr	r3, [r0, #0]
 80138a4:	4602      	mov	r2, r0
 80138a6:	f013 0007 	ands.w	r0, r3, #7
 80138aa:	d00b      	beq.n	80138c4 <__lo0bits+0x22>
 80138ac:	07d9      	lsls	r1, r3, #31
 80138ae:	d421      	bmi.n	80138f4 <__lo0bits+0x52>
 80138b0:	0798      	lsls	r0, r3, #30
 80138b2:	bf49      	itett	mi
 80138b4:	085b      	lsrmi	r3, r3, #1
 80138b6:	089b      	lsrpl	r3, r3, #2
 80138b8:	2001      	movmi	r0, #1
 80138ba:	6013      	strmi	r3, [r2, #0]
 80138bc:	bf5c      	itt	pl
 80138be:	6013      	strpl	r3, [r2, #0]
 80138c0:	2002      	movpl	r0, #2
 80138c2:	4770      	bx	lr
 80138c4:	b299      	uxth	r1, r3
 80138c6:	b909      	cbnz	r1, 80138cc <__lo0bits+0x2a>
 80138c8:	0c1b      	lsrs	r3, r3, #16
 80138ca:	2010      	movs	r0, #16
 80138cc:	b2d9      	uxtb	r1, r3
 80138ce:	b909      	cbnz	r1, 80138d4 <__lo0bits+0x32>
 80138d0:	3008      	adds	r0, #8
 80138d2:	0a1b      	lsrs	r3, r3, #8
 80138d4:	0719      	lsls	r1, r3, #28
 80138d6:	bf04      	itt	eq
 80138d8:	091b      	lsreq	r3, r3, #4
 80138da:	3004      	addeq	r0, #4
 80138dc:	0799      	lsls	r1, r3, #30
 80138de:	bf04      	itt	eq
 80138e0:	089b      	lsreq	r3, r3, #2
 80138e2:	3002      	addeq	r0, #2
 80138e4:	07d9      	lsls	r1, r3, #31
 80138e6:	d403      	bmi.n	80138f0 <__lo0bits+0x4e>
 80138e8:	085b      	lsrs	r3, r3, #1
 80138ea:	f100 0001 	add.w	r0, r0, #1
 80138ee:	d003      	beq.n	80138f8 <__lo0bits+0x56>
 80138f0:	6013      	str	r3, [r2, #0]
 80138f2:	4770      	bx	lr
 80138f4:	2000      	movs	r0, #0
 80138f6:	4770      	bx	lr
 80138f8:	2020      	movs	r0, #32
 80138fa:	4770      	bx	lr

080138fc <__i2b>:
 80138fc:	b510      	push	{r4, lr}
 80138fe:	460c      	mov	r4, r1
 8013900:	2101      	movs	r1, #1
 8013902:	f7ff ff07 	bl	8013714 <_Balloc>
 8013906:	4602      	mov	r2, r0
 8013908:	b928      	cbnz	r0, 8013916 <__i2b+0x1a>
 801390a:	4b05      	ldr	r3, [pc, #20]	@ (8013920 <__i2b+0x24>)
 801390c:	4805      	ldr	r0, [pc, #20]	@ (8013924 <__i2b+0x28>)
 801390e:	f240 1145 	movw	r1, #325	@ 0x145
 8013912:	f000 fcbd 	bl	8014290 <__assert_func>
 8013916:	2301      	movs	r3, #1
 8013918:	6144      	str	r4, [r0, #20]
 801391a:	6103      	str	r3, [r0, #16]
 801391c:	bd10      	pop	{r4, pc}
 801391e:	bf00      	nop
 8013920:	08014ae4 	.word	0x08014ae4
 8013924:	08014af5 	.word	0x08014af5

08013928 <__multiply>:
 8013928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801392c:	4614      	mov	r4, r2
 801392e:	690a      	ldr	r2, [r1, #16]
 8013930:	6923      	ldr	r3, [r4, #16]
 8013932:	429a      	cmp	r2, r3
 8013934:	bfa8      	it	ge
 8013936:	4623      	movge	r3, r4
 8013938:	460f      	mov	r7, r1
 801393a:	bfa4      	itt	ge
 801393c:	460c      	movge	r4, r1
 801393e:	461f      	movge	r7, r3
 8013940:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8013944:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8013948:	68a3      	ldr	r3, [r4, #8]
 801394a:	6861      	ldr	r1, [r4, #4]
 801394c:	eb0a 0609 	add.w	r6, sl, r9
 8013950:	42b3      	cmp	r3, r6
 8013952:	b085      	sub	sp, #20
 8013954:	bfb8      	it	lt
 8013956:	3101      	addlt	r1, #1
 8013958:	f7ff fedc 	bl	8013714 <_Balloc>
 801395c:	b930      	cbnz	r0, 801396c <__multiply+0x44>
 801395e:	4602      	mov	r2, r0
 8013960:	4b44      	ldr	r3, [pc, #272]	@ (8013a74 <__multiply+0x14c>)
 8013962:	4845      	ldr	r0, [pc, #276]	@ (8013a78 <__multiply+0x150>)
 8013964:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8013968:	f000 fc92 	bl	8014290 <__assert_func>
 801396c:	f100 0514 	add.w	r5, r0, #20
 8013970:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8013974:	462b      	mov	r3, r5
 8013976:	2200      	movs	r2, #0
 8013978:	4543      	cmp	r3, r8
 801397a:	d321      	bcc.n	80139c0 <__multiply+0x98>
 801397c:	f107 0114 	add.w	r1, r7, #20
 8013980:	f104 0214 	add.w	r2, r4, #20
 8013984:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8013988:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 801398c:	9302      	str	r3, [sp, #8]
 801398e:	1b13      	subs	r3, r2, r4
 8013990:	3b15      	subs	r3, #21
 8013992:	f023 0303 	bic.w	r3, r3, #3
 8013996:	3304      	adds	r3, #4
 8013998:	f104 0715 	add.w	r7, r4, #21
 801399c:	42ba      	cmp	r2, r7
 801399e:	bf38      	it	cc
 80139a0:	2304      	movcc	r3, #4
 80139a2:	9301      	str	r3, [sp, #4]
 80139a4:	9b02      	ldr	r3, [sp, #8]
 80139a6:	9103      	str	r1, [sp, #12]
 80139a8:	428b      	cmp	r3, r1
 80139aa:	d80c      	bhi.n	80139c6 <__multiply+0x9e>
 80139ac:	2e00      	cmp	r6, #0
 80139ae:	dd03      	ble.n	80139b8 <__multiply+0x90>
 80139b0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80139b4:	2b00      	cmp	r3, #0
 80139b6:	d05b      	beq.n	8013a70 <__multiply+0x148>
 80139b8:	6106      	str	r6, [r0, #16]
 80139ba:	b005      	add	sp, #20
 80139bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80139c0:	f843 2b04 	str.w	r2, [r3], #4
 80139c4:	e7d8      	b.n	8013978 <__multiply+0x50>
 80139c6:	f8b1 a000 	ldrh.w	sl, [r1]
 80139ca:	f1ba 0f00 	cmp.w	sl, #0
 80139ce:	d024      	beq.n	8013a1a <__multiply+0xf2>
 80139d0:	f104 0e14 	add.w	lr, r4, #20
 80139d4:	46a9      	mov	r9, r5
 80139d6:	f04f 0c00 	mov.w	ip, #0
 80139da:	f85e 7b04 	ldr.w	r7, [lr], #4
 80139de:	f8d9 3000 	ldr.w	r3, [r9]
 80139e2:	fa1f fb87 	uxth.w	fp, r7
 80139e6:	b29b      	uxth	r3, r3
 80139e8:	fb0a 330b 	mla	r3, sl, fp, r3
 80139ec:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80139f0:	f8d9 7000 	ldr.w	r7, [r9]
 80139f4:	4463      	add	r3, ip
 80139f6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80139fa:	fb0a c70b 	mla	r7, sl, fp, ip
 80139fe:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8013a02:	b29b      	uxth	r3, r3
 8013a04:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8013a08:	4572      	cmp	r2, lr
 8013a0a:	f849 3b04 	str.w	r3, [r9], #4
 8013a0e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8013a12:	d8e2      	bhi.n	80139da <__multiply+0xb2>
 8013a14:	9b01      	ldr	r3, [sp, #4]
 8013a16:	f845 c003 	str.w	ip, [r5, r3]
 8013a1a:	9b03      	ldr	r3, [sp, #12]
 8013a1c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8013a20:	3104      	adds	r1, #4
 8013a22:	f1b9 0f00 	cmp.w	r9, #0
 8013a26:	d021      	beq.n	8013a6c <__multiply+0x144>
 8013a28:	682b      	ldr	r3, [r5, #0]
 8013a2a:	f104 0c14 	add.w	ip, r4, #20
 8013a2e:	46ae      	mov	lr, r5
 8013a30:	f04f 0a00 	mov.w	sl, #0
 8013a34:	f8bc b000 	ldrh.w	fp, [ip]
 8013a38:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8013a3c:	fb09 770b 	mla	r7, r9, fp, r7
 8013a40:	4457      	add	r7, sl
 8013a42:	b29b      	uxth	r3, r3
 8013a44:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8013a48:	f84e 3b04 	str.w	r3, [lr], #4
 8013a4c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8013a50:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8013a54:	f8be 3000 	ldrh.w	r3, [lr]
 8013a58:	fb09 330a 	mla	r3, r9, sl, r3
 8013a5c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8013a60:	4562      	cmp	r2, ip
 8013a62:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8013a66:	d8e5      	bhi.n	8013a34 <__multiply+0x10c>
 8013a68:	9f01      	ldr	r7, [sp, #4]
 8013a6a:	51eb      	str	r3, [r5, r7]
 8013a6c:	3504      	adds	r5, #4
 8013a6e:	e799      	b.n	80139a4 <__multiply+0x7c>
 8013a70:	3e01      	subs	r6, #1
 8013a72:	e79b      	b.n	80139ac <__multiply+0x84>
 8013a74:	08014ae4 	.word	0x08014ae4
 8013a78:	08014af5 	.word	0x08014af5

08013a7c <__pow5mult>:
 8013a7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013a80:	4615      	mov	r5, r2
 8013a82:	f012 0203 	ands.w	r2, r2, #3
 8013a86:	4607      	mov	r7, r0
 8013a88:	460e      	mov	r6, r1
 8013a8a:	d007      	beq.n	8013a9c <__pow5mult+0x20>
 8013a8c:	4c25      	ldr	r4, [pc, #148]	@ (8013b24 <__pow5mult+0xa8>)
 8013a8e:	3a01      	subs	r2, #1
 8013a90:	2300      	movs	r3, #0
 8013a92:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8013a96:	f7ff fe9f 	bl	80137d8 <__multadd>
 8013a9a:	4606      	mov	r6, r0
 8013a9c:	10ad      	asrs	r5, r5, #2
 8013a9e:	d03d      	beq.n	8013b1c <__pow5mult+0xa0>
 8013aa0:	69fc      	ldr	r4, [r7, #28]
 8013aa2:	b97c      	cbnz	r4, 8013ac4 <__pow5mult+0x48>
 8013aa4:	2010      	movs	r0, #16
 8013aa6:	f7ff fd7f 	bl	80135a8 <malloc>
 8013aaa:	4602      	mov	r2, r0
 8013aac:	61f8      	str	r0, [r7, #28]
 8013aae:	b928      	cbnz	r0, 8013abc <__pow5mult+0x40>
 8013ab0:	4b1d      	ldr	r3, [pc, #116]	@ (8013b28 <__pow5mult+0xac>)
 8013ab2:	481e      	ldr	r0, [pc, #120]	@ (8013b2c <__pow5mult+0xb0>)
 8013ab4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8013ab8:	f000 fbea 	bl	8014290 <__assert_func>
 8013abc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8013ac0:	6004      	str	r4, [r0, #0]
 8013ac2:	60c4      	str	r4, [r0, #12]
 8013ac4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8013ac8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8013acc:	b94c      	cbnz	r4, 8013ae2 <__pow5mult+0x66>
 8013ace:	f240 2171 	movw	r1, #625	@ 0x271
 8013ad2:	4638      	mov	r0, r7
 8013ad4:	f7ff ff12 	bl	80138fc <__i2b>
 8013ad8:	2300      	movs	r3, #0
 8013ada:	f8c8 0008 	str.w	r0, [r8, #8]
 8013ade:	4604      	mov	r4, r0
 8013ae0:	6003      	str	r3, [r0, #0]
 8013ae2:	f04f 0900 	mov.w	r9, #0
 8013ae6:	07eb      	lsls	r3, r5, #31
 8013ae8:	d50a      	bpl.n	8013b00 <__pow5mult+0x84>
 8013aea:	4631      	mov	r1, r6
 8013aec:	4622      	mov	r2, r4
 8013aee:	4638      	mov	r0, r7
 8013af0:	f7ff ff1a 	bl	8013928 <__multiply>
 8013af4:	4631      	mov	r1, r6
 8013af6:	4680      	mov	r8, r0
 8013af8:	4638      	mov	r0, r7
 8013afa:	f7ff fe4b 	bl	8013794 <_Bfree>
 8013afe:	4646      	mov	r6, r8
 8013b00:	106d      	asrs	r5, r5, #1
 8013b02:	d00b      	beq.n	8013b1c <__pow5mult+0xa0>
 8013b04:	6820      	ldr	r0, [r4, #0]
 8013b06:	b938      	cbnz	r0, 8013b18 <__pow5mult+0x9c>
 8013b08:	4622      	mov	r2, r4
 8013b0a:	4621      	mov	r1, r4
 8013b0c:	4638      	mov	r0, r7
 8013b0e:	f7ff ff0b 	bl	8013928 <__multiply>
 8013b12:	6020      	str	r0, [r4, #0]
 8013b14:	f8c0 9000 	str.w	r9, [r0]
 8013b18:	4604      	mov	r4, r0
 8013b1a:	e7e4      	b.n	8013ae6 <__pow5mult+0x6a>
 8013b1c:	4630      	mov	r0, r6
 8013b1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013b22:	bf00      	nop
 8013b24:	08014b50 	.word	0x08014b50
 8013b28:	08014a75 	.word	0x08014a75
 8013b2c:	08014af5 	.word	0x08014af5

08013b30 <__lshift>:
 8013b30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013b34:	460c      	mov	r4, r1
 8013b36:	6849      	ldr	r1, [r1, #4]
 8013b38:	6923      	ldr	r3, [r4, #16]
 8013b3a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8013b3e:	68a3      	ldr	r3, [r4, #8]
 8013b40:	4607      	mov	r7, r0
 8013b42:	4691      	mov	r9, r2
 8013b44:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8013b48:	f108 0601 	add.w	r6, r8, #1
 8013b4c:	42b3      	cmp	r3, r6
 8013b4e:	db0b      	blt.n	8013b68 <__lshift+0x38>
 8013b50:	4638      	mov	r0, r7
 8013b52:	f7ff fddf 	bl	8013714 <_Balloc>
 8013b56:	4605      	mov	r5, r0
 8013b58:	b948      	cbnz	r0, 8013b6e <__lshift+0x3e>
 8013b5a:	4602      	mov	r2, r0
 8013b5c:	4b28      	ldr	r3, [pc, #160]	@ (8013c00 <__lshift+0xd0>)
 8013b5e:	4829      	ldr	r0, [pc, #164]	@ (8013c04 <__lshift+0xd4>)
 8013b60:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8013b64:	f000 fb94 	bl	8014290 <__assert_func>
 8013b68:	3101      	adds	r1, #1
 8013b6a:	005b      	lsls	r3, r3, #1
 8013b6c:	e7ee      	b.n	8013b4c <__lshift+0x1c>
 8013b6e:	2300      	movs	r3, #0
 8013b70:	f100 0114 	add.w	r1, r0, #20
 8013b74:	f100 0210 	add.w	r2, r0, #16
 8013b78:	4618      	mov	r0, r3
 8013b7a:	4553      	cmp	r3, sl
 8013b7c:	db33      	blt.n	8013be6 <__lshift+0xb6>
 8013b7e:	6920      	ldr	r0, [r4, #16]
 8013b80:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8013b84:	f104 0314 	add.w	r3, r4, #20
 8013b88:	f019 091f 	ands.w	r9, r9, #31
 8013b8c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8013b90:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8013b94:	d02b      	beq.n	8013bee <__lshift+0xbe>
 8013b96:	f1c9 0e20 	rsb	lr, r9, #32
 8013b9a:	468a      	mov	sl, r1
 8013b9c:	2200      	movs	r2, #0
 8013b9e:	6818      	ldr	r0, [r3, #0]
 8013ba0:	fa00 f009 	lsl.w	r0, r0, r9
 8013ba4:	4310      	orrs	r0, r2
 8013ba6:	f84a 0b04 	str.w	r0, [sl], #4
 8013baa:	f853 2b04 	ldr.w	r2, [r3], #4
 8013bae:	459c      	cmp	ip, r3
 8013bb0:	fa22 f20e 	lsr.w	r2, r2, lr
 8013bb4:	d8f3      	bhi.n	8013b9e <__lshift+0x6e>
 8013bb6:	ebac 0304 	sub.w	r3, ip, r4
 8013bba:	3b15      	subs	r3, #21
 8013bbc:	f023 0303 	bic.w	r3, r3, #3
 8013bc0:	3304      	adds	r3, #4
 8013bc2:	f104 0015 	add.w	r0, r4, #21
 8013bc6:	4584      	cmp	ip, r0
 8013bc8:	bf38      	it	cc
 8013bca:	2304      	movcc	r3, #4
 8013bcc:	50ca      	str	r2, [r1, r3]
 8013bce:	b10a      	cbz	r2, 8013bd4 <__lshift+0xa4>
 8013bd0:	f108 0602 	add.w	r6, r8, #2
 8013bd4:	3e01      	subs	r6, #1
 8013bd6:	4638      	mov	r0, r7
 8013bd8:	612e      	str	r6, [r5, #16]
 8013bda:	4621      	mov	r1, r4
 8013bdc:	f7ff fdda 	bl	8013794 <_Bfree>
 8013be0:	4628      	mov	r0, r5
 8013be2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013be6:	f842 0f04 	str.w	r0, [r2, #4]!
 8013bea:	3301      	adds	r3, #1
 8013bec:	e7c5      	b.n	8013b7a <__lshift+0x4a>
 8013bee:	3904      	subs	r1, #4
 8013bf0:	f853 2b04 	ldr.w	r2, [r3], #4
 8013bf4:	f841 2f04 	str.w	r2, [r1, #4]!
 8013bf8:	459c      	cmp	ip, r3
 8013bfa:	d8f9      	bhi.n	8013bf0 <__lshift+0xc0>
 8013bfc:	e7ea      	b.n	8013bd4 <__lshift+0xa4>
 8013bfe:	bf00      	nop
 8013c00:	08014ae4 	.word	0x08014ae4
 8013c04:	08014af5 	.word	0x08014af5

08013c08 <__mcmp>:
 8013c08:	690a      	ldr	r2, [r1, #16]
 8013c0a:	4603      	mov	r3, r0
 8013c0c:	6900      	ldr	r0, [r0, #16]
 8013c0e:	1a80      	subs	r0, r0, r2
 8013c10:	b530      	push	{r4, r5, lr}
 8013c12:	d10e      	bne.n	8013c32 <__mcmp+0x2a>
 8013c14:	3314      	adds	r3, #20
 8013c16:	3114      	adds	r1, #20
 8013c18:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8013c1c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8013c20:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8013c24:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8013c28:	4295      	cmp	r5, r2
 8013c2a:	d003      	beq.n	8013c34 <__mcmp+0x2c>
 8013c2c:	d205      	bcs.n	8013c3a <__mcmp+0x32>
 8013c2e:	f04f 30ff 	mov.w	r0, #4294967295
 8013c32:	bd30      	pop	{r4, r5, pc}
 8013c34:	42a3      	cmp	r3, r4
 8013c36:	d3f3      	bcc.n	8013c20 <__mcmp+0x18>
 8013c38:	e7fb      	b.n	8013c32 <__mcmp+0x2a>
 8013c3a:	2001      	movs	r0, #1
 8013c3c:	e7f9      	b.n	8013c32 <__mcmp+0x2a>
	...

08013c40 <__mdiff>:
 8013c40:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013c44:	4689      	mov	r9, r1
 8013c46:	4606      	mov	r6, r0
 8013c48:	4611      	mov	r1, r2
 8013c4a:	4648      	mov	r0, r9
 8013c4c:	4614      	mov	r4, r2
 8013c4e:	f7ff ffdb 	bl	8013c08 <__mcmp>
 8013c52:	1e05      	subs	r5, r0, #0
 8013c54:	d112      	bne.n	8013c7c <__mdiff+0x3c>
 8013c56:	4629      	mov	r1, r5
 8013c58:	4630      	mov	r0, r6
 8013c5a:	f7ff fd5b 	bl	8013714 <_Balloc>
 8013c5e:	4602      	mov	r2, r0
 8013c60:	b928      	cbnz	r0, 8013c6e <__mdiff+0x2e>
 8013c62:	4b3f      	ldr	r3, [pc, #252]	@ (8013d60 <__mdiff+0x120>)
 8013c64:	f240 2137 	movw	r1, #567	@ 0x237
 8013c68:	483e      	ldr	r0, [pc, #248]	@ (8013d64 <__mdiff+0x124>)
 8013c6a:	f000 fb11 	bl	8014290 <__assert_func>
 8013c6e:	2301      	movs	r3, #1
 8013c70:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8013c74:	4610      	mov	r0, r2
 8013c76:	b003      	add	sp, #12
 8013c78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013c7c:	bfbc      	itt	lt
 8013c7e:	464b      	movlt	r3, r9
 8013c80:	46a1      	movlt	r9, r4
 8013c82:	4630      	mov	r0, r6
 8013c84:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8013c88:	bfba      	itte	lt
 8013c8a:	461c      	movlt	r4, r3
 8013c8c:	2501      	movlt	r5, #1
 8013c8e:	2500      	movge	r5, #0
 8013c90:	f7ff fd40 	bl	8013714 <_Balloc>
 8013c94:	4602      	mov	r2, r0
 8013c96:	b918      	cbnz	r0, 8013ca0 <__mdiff+0x60>
 8013c98:	4b31      	ldr	r3, [pc, #196]	@ (8013d60 <__mdiff+0x120>)
 8013c9a:	f240 2145 	movw	r1, #581	@ 0x245
 8013c9e:	e7e3      	b.n	8013c68 <__mdiff+0x28>
 8013ca0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8013ca4:	6926      	ldr	r6, [r4, #16]
 8013ca6:	60c5      	str	r5, [r0, #12]
 8013ca8:	f109 0310 	add.w	r3, r9, #16
 8013cac:	f109 0514 	add.w	r5, r9, #20
 8013cb0:	f104 0e14 	add.w	lr, r4, #20
 8013cb4:	f100 0b14 	add.w	fp, r0, #20
 8013cb8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8013cbc:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8013cc0:	9301      	str	r3, [sp, #4]
 8013cc2:	46d9      	mov	r9, fp
 8013cc4:	f04f 0c00 	mov.w	ip, #0
 8013cc8:	9b01      	ldr	r3, [sp, #4]
 8013cca:	f85e 0b04 	ldr.w	r0, [lr], #4
 8013cce:	f853 af04 	ldr.w	sl, [r3, #4]!
 8013cd2:	9301      	str	r3, [sp, #4]
 8013cd4:	fa1f f38a 	uxth.w	r3, sl
 8013cd8:	4619      	mov	r1, r3
 8013cda:	b283      	uxth	r3, r0
 8013cdc:	1acb      	subs	r3, r1, r3
 8013cde:	0c00      	lsrs	r0, r0, #16
 8013ce0:	4463      	add	r3, ip
 8013ce2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8013ce6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8013cea:	b29b      	uxth	r3, r3
 8013cec:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8013cf0:	4576      	cmp	r6, lr
 8013cf2:	f849 3b04 	str.w	r3, [r9], #4
 8013cf6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8013cfa:	d8e5      	bhi.n	8013cc8 <__mdiff+0x88>
 8013cfc:	1b33      	subs	r3, r6, r4
 8013cfe:	3b15      	subs	r3, #21
 8013d00:	f023 0303 	bic.w	r3, r3, #3
 8013d04:	3415      	adds	r4, #21
 8013d06:	3304      	adds	r3, #4
 8013d08:	42a6      	cmp	r6, r4
 8013d0a:	bf38      	it	cc
 8013d0c:	2304      	movcc	r3, #4
 8013d0e:	441d      	add	r5, r3
 8013d10:	445b      	add	r3, fp
 8013d12:	461e      	mov	r6, r3
 8013d14:	462c      	mov	r4, r5
 8013d16:	4544      	cmp	r4, r8
 8013d18:	d30e      	bcc.n	8013d38 <__mdiff+0xf8>
 8013d1a:	f108 0103 	add.w	r1, r8, #3
 8013d1e:	1b49      	subs	r1, r1, r5
 8013d20:	f021 0103 	bic.w	r1, r1, #3
 8013d24:	3d03      	subs	r5, #3
 8013d26:	45a8      	cmp	r8, r5
 8013d28:	bf38      	it	cc
 8013d2a:	2100      	movcc	r1, #0
 8013d2c:	440b      	add	r3, r1
 8013d2e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8013d32:	b191      	cbz	r1, 8013d5a <__mdiff+0x11a>
 8013d34:	6117      	str	r7, [r2, #16]
 8013d36:	e79d      	b.n	8013c74 <__mdiff+0x34>
 8013d38:	f854 1b04 	ldr.w	r1, [r4], #4
 8013d3c:	46e6      	mov	lr, ip
 8013d3e:	0c08      	lsrs	r0, r1, #16
 8013d40:	fa1c fc81 	uxtah	ip, ip, r1
 8013d44:	4471      	add	r1, lr
 8013d46:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8013d4a:	b289      	uxth	r1, r1
 8013d4c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8013d50:	f846 1b04 	str.w	r1, [r6], #4
 8013d54:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8013d58:	e7dd      	b.n	8013d16 <__mdiff+0xd6>
 8013d5a:	3f01      	subs	r7, #1
 8013d5c:	e7e7      	b.n	8013d2e <__mdiff+0xee>
 8013d5e:	bf00      	nop
 8013d60:	08014ae4 	.word	0x08014ae4
 8013d64:	08014af5 	.word	0x08014af5

08013d68 <__d2b>:
 8013d68:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8013d6c:	460f      	mov	r7, r1
 8013d6e:	2101      	movs	r1, #1
 8013d70:	ec59 8b10 	vmov	r8, r9, d0
 8013d74:	4616      	mov	r6, r2
 8013d76:	f7ff fccd 	bl	8013714 <_Balloc>
 8013d7a:	4604      	mov	r4, r0
 8013d7c:	b930      	cbnz	r0, 8013d8c <__d2b+0x24>
 8013d7e:	4602      	mov	r2, r0
 8013d80:	4b23      	ldr	r3, [pc, #140]	@ (8013e10 <__d2b+0xa8>)
 8013d82:	4824      	ldr	r0, [pc, #144]	@ (8013e14 <__d2b+0xac>)
 8013d84:	f240 310f 	movw	r1, #783	@ 0x30f
 8013d88:	f000 fa82 	bl	8014290 <__assert_func>
 8013d8c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8013d90:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8013d94:	b10d      	cbz	r5, 8013d9a <__d2b+0x32>
 8013d96:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8013d9a:	9301      	str	r3, [sp, #4]
 8013d9c:	f1b8 0300 	subs.w	r3, r8, #0
 8013da0:	d023      	beq.n	8013dea <__d2b+0x82>
 8013da2:	4668      	mov	r0, sp
 8013da4:	9300      	str	r3, [sp, #0]
 8013da6:	f7ff fd7c 	bl	80138a2 <__lo0bits>
 8013daa:	e9dd 1200 	ldrd	r1, r2, [sp]
 8013dae:	b1d0      	cbz	r0, 8013de6 <__d2b+0x7e>
 8013db0:	f1c0 0320 	rsb	r3, r0, #32
 8013db4:	fa02 f303 	lsl.w	r3, r2, r3
 8013db8:	430b      	orrs	r3, r1
 8013dba:	40c2      	lsrs	r2, r0
 8013dbc:	6163      	str	r3, [r4, #20]
 8013dbe:	9201      	str	r2, [sp, #4]
 8013dc0:	9b01      	ldr	r3, [sp, #4]
 8013dc2:	61a3      	str	r3, [r4, #24]
 8013dc4:	2b00      	cmp	r3, #0
 8013dc6:	bf0c      	ite	eq
 8013dc8:	2201      	moveq	r2, #1
 8013dca:	2202      	movne	r2, #2
 8013dcc:	6122      	str	r2, [r4, #16]
 8013dce:	b1a5      	cbz	r5, 8013dfa <__d2b+0x92>
 8013dd0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8013dd4:	4405      	add	r5, r0
 8013dd6:	603d      	str	r5, [r7, #0]
 8013dd8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8013ddc:	6030      	str	r0, [r6, #0]
 8013dde:	4620      	mov	r0, r4
 8013de0:	b003      	add	sp, #12
 8013de2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013de6:	6161      	str	r1, [r4, #20]
 8013de8:	e7ea      	b.n	8013dc0 <__d2b+0x58>
 8013dea:	a801      	add	r0, sp, #4
 8013dec:	f7ff fd59 	bl	80138a2 <__lo0bits>
 8013df0:	9b01      	ldr	r3, [sp, #4]
 8013df2:	6163      	str	r3, [r4, #20]
 8013df4:	3020      	adds	r0, #32
 8013df6:	2201      	movs	r2, #1
 8013df8:	e7e8      	b.n	8013dcc <__d2b+0x64>
 8013dfa:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8013dfe:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8013e02:	6038      	str	r0, [r7, #0]
 8013e04:	6918      	ldr	r0, [r3, #16]
 8013e06:	f7ff fd2d 	bl	8013864 <__hi0bits>
 8013e0a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8013e0e:	e7e5      	b.n	8013ddc <__d2b+0x74>
 8013e10:	08014ae4 	.word	0x08014ae4
 8013e14:	08014af5 	.word	0x08014af5

08013e18 <__ssputs_r>:
 8013e18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013e1c:	688e      	ldr	r6, [r1, #8]
 8013e1e:	461f      	mov	r7, r3
 8013e20:	42be      	cmp	r6, r7
 8013e22:	680b      	ldr	r3, [r1, #0]
 8013e24:	4682      	mov	sl, r0
 8013e26:	460c      	mov	r4, r1
 8013e28:	4690      	mov	r8, r2
 8013e2a:	d82d      	bhi.n	8013e88 <__ssputs_r+0x70>
 8013e2c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8013e30:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8013e34:	d026      	beq.n	8013e84 <__ssputs_r+0x6c>
 8013e36:	6965      	ldr	r5, [r4, #20]
 8013e38:	6909      	ldr	r1, [r1, #16]
 8013e3a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013e3e:	eba3 0901 	sub.w	r9, r3, r1
 8013e42:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8013e46:	1c7b      	adds	r3, r7, #1
 8013e48:	444b      	add	r3, r9
 8013e4a:	106d      	asrs	r5, r5, #1
 8013e4c:	429d      	cmp	r5, r3
 8013e4e:	bf38      	it	cc
 8013e50:	461d      	movcc	r5, r3
 8013e52:	0553      	lsls	r3, r2, #21
 8013e54:	d527      	bpl.n	8013ea6 <__ssputs_r+0x8e>
 8013e56:	4629      	mov	r1, r5
 8013e58:	f7ff fbd0 	bl	80135fc <_malloc_r>
 8013e5c:	4606      	mov	r6, r0
 8013e5e:	b360      	cbz	r0, 8013eba <__ssputs_r+0xa2>
 8013e60:	6921      	ldr	r1, [r4, #16]
 8013e62:	464a      	mov	r2, r9
 8013e64:	f000 fa06 	bl	8014274 <memcpy>
 8013e68:	89a3      	ldrh	r3, [r4, #12]
 8013e6a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8013e6e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8013e72:	81a3      	strh	r3, [r4, #12]
 8013e74:	6126      	str	r6, [r4, #16]
 8013e76:	6165      	str	r5, [r4, #20]
 8013e78:	444e      	add	r6, r9
 8013e7a:	eba5 0509 	sub.w	r5, r5, r9
 8013e7e:	6026      	str	r6, [r4, #0]
 8013e80:	60a5      	str	r5, [r4, #8]
 8013e82:	463e      	mov	r6, r7
 8013e84:	42be      	cmp	r6, r7
 8013e86:	d900      	bls.n	8013e8a <__ssputs_r+0x72>
 8013e88:	463e      	mov	r6, r7
 8013e8a:	6820      	ldr	r0, [r4, #0]
 8013e8c:	4632      	mov	r2, r6
 8013e8e:	4641      	mov	r1, r8
 8013e90:	f000 f9c6 	bl	8014220 <memmove>
 8013e94:	68a3      	ldr	r3, [r4, #8]
 8013e96:	1b9b      	subs	r3, r3, r6
 8013e98:	60a3      	str	r3, [r4, #8]
 8013e9a:	6823      	ldr	r3, [r4, #0]
 8013e9c:	4433      	add	r3, r6
 8013e9e:	6023      	str	r3, [r4, #0]
 8013ea0:	2000      	movs	r0, #0
 8013ea2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013ea6:	462a      	mov	r2, r5
 8013ea8:	f000 fa36 	bl	8014318 <_realloc_r>
 8013eac:	4606      	mov	r6, r0
 8013eae:	2800      	cmp	r0, #0
 8013eb0:	d1e0      	bne.n	8013e74 <__ssputs_r+0x5c>
 8013eb2:	6921      	ldr	r1, [r4, #16]
 8013eb4:	4650      	mov	r0, sl
 8013eb6:	f7ff fb2d 	bl	8013514 <_free_r>
 8013eba:	230c      	movs	r3, #12
 8013ebc:	f8ca 3000 	str.w	r3, [sl]
 8013ec0:	89a3      	ldrh	r3, [r4, #12]
 8013ec2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013ec6:	81a3      	strh	r3, [r4, #12]
 8013ec8:	f04f 30ff 	mov.w	r0, #4294967295
 8013ecc:	e7e9      	b.n	8013ea2 <__ssputs_r+0x8a>
	...

08013ed0 <_svfiprintf_r>:
 8013ed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013ed4:	4698      	mov	r8, r3
 8013ed6:	898b      	ldrh	r3, [r1, #12]
 8013ed8:	061b      	lsls	r3, r3, #24
 8013eda:	b09d      	sub	sp, #116	@ 0x74
 8013edc:	4607      	mov	r7, r0
 8013ede:	460d      	mov	r5, r1
 8013ee0:	4614      	mov	r4, r2
 8013ee2:	d510      	bpl.n	8013f06 <_svfiprintf_r+0x36>
 8013ee4:	690b      	ldr	r3, [r1, #16]
 8013ee6:	b973      	cbnz	r3, 8013f06 <_svfiprintf_r+0x36>
 8013ee8:	2140      	movs	r1, #64	@ 0x40
 8013eea:	f7ff fb87 	bl	80135fc <_malloc_r>
 8013eee:	6028      	str	r0, [r5, #0]
 8013ef0:	6128      	str	r0, [r5, #16]
 8013ef2:	b930      	cbnz	r0, 8013f02 <_svfiprintf_r+0x32>
 8013ef4:	230c      	movs	r3, #12
 8013ef6:	603b      	str	r3, [r7, #0]
 8013ef8:	f04f 30ff 	mov.w	r0, #4294967295
 8013efc:	b01d      	add	sp, #116	@ 0x74
 8013efe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013f02:	2340      	movs	r3, #64	@ 0x40
 8013f04:	616b      	str	r3, [r5, #20]
 8013f06:	2300      	movs	r3, #0
 8013f08:	9309      	str	r3, [sp, #36]	@ 0x24
 8013f0a:	2320      	movs	r3, #32
 8013f0c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8013f10:	f8cd 800c 	str.w	r8, [sp, #12]
 8013f14:	2330      	movs	r3, #48	@ 0x30
 8013f16:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80140b4 <_svfiprintf_r+0x1e4>
 8013f1a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8013f1e:	f04f 0901 	mov.w	r9, #1
 8013f22:	4623      	mov	r3, r4
 8013f24:	469a      	mov	sl, r3
 8013f26:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013f2a:	b10a      	cbz	r2, 8013f30 <_svfiprintf_r+0x60>
 8013f2c:	2a25      	cmp	r2, #37	@ 0x25
 8013f2e:	d1f9      	bne.n	8013f24 <_svfiprintf_r+0x54>
 8013f30:	ebba 0b04 	subs.w	fp, sl, r4
 8013f34:	d00b      	beq.n	8013f4e <_svfiprintf_r+0x7e>
 8013f36:	465b      	mov	r3, fp
 8013f38:	4622      	mov	r2, r4
 8013f3a:	4629      	mov	r1, r5
 8013f3c:	4638      	mov	r0, r7
 8013f3e:	f7ff ff6b 	bl	8013e18 <__ssputs_r>
 8013f42:	3001      	adds	r0, #1
 8013f44:	f000 80a7 	beq.w	8014096 <_svfiprintf_r+0x1c6>
 8013f48:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013f4a:	445a      	add	r2, fp
 8013f4c:	9209      	str	r2, [sp, #36]	@ 0x24
 8013f4e:	f89a 3000 	ldrb.w	r3, [sl]
 8013f52:	2b00      	cmp	r3, #0
 8013f54:	f000 809f 	beq.w	8014096 <_svfiprintf_r+0x1c6>
 8013f58:	2300      	movs	r3, #0
 8013f5a:	f04f 32ff 	mov.w	r2, #4294967295
 8013f5e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013f62:	f10a 0a01 	add.w	sl, sl, #1
 8013f66:	9304      	str	r3, [sp, #16]
 8013f68:	9307      	str	r3, [sp, #28]
 8013f6a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8013f6e:	931a      	str	r3, [sp, #104]	@ 0x68
 8013f70:	4654      	mov	r4, sl
 8013f72:	2205      	movs	r2, #5
 8013f74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013f78:	484e      	ldr	r0, [pc, #312]	@ (80140b4 <_svfiprintf_r+0x1e4>)
 8013f7a:	f7ec f9b1 	bl	80002e0 <memchr>
 8013f7e:	9a04      	ldr	r2, [sp, #16]
 8013f80:	b9d8      	cbnz	r0, 8013fba <_svfiprintf_r+0xea>
 8013f82:	06d0      	lsls	r0, r2, #27
 8013f84:	bf44      	itt	mi
 8013f86:	2320      	movmi	r3, #32
 8013f88:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013f8c:	0711      	lsls	r1, r2, #28
 8013f8e:	bf44      	itt	mi
 8013f90:	232b      	movmi	r3, #43	@ 0x2b
 8013f92:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013f96:	f89a 3000 	ldrb.w	r3, [sl]
 8013f9a:	2b2a      	cmp	r3, #42	@ 0x2a
 8013f9c:	d015      	beq.n	8013fca <_svfiprintf_r+0xfa>
 8013f9e:	9a07      	ldr	r2, [sp, #28]
 8013fa0:	4654      	mov	r4, sl
 8013fa2:	2000      	movs	r0, #0
 8013fa4:	f04f 0c0a 	mov.w	ip, #10
 8013fa8:	4621      	mov	r1, r4
 8013faa:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013fae:	3b30      	subs	r3, #48	@ 0x30
 8013fb0:	2b09      	cmp	r3, #9
 8013fb2:	d94b      	bls.n	801404c <_svfiprintf_r+0x17c>
 8013fb4:	b1b0      	cbz	r0, 8013fe4 <_svfiprintf_r+0x114>
 8013fb6:	9207      	str	r2, [sp, #28]
 8013fb8:	e014      	b.n	8013fe4 <_svfiprintf_r+0x114>
 8013fba:	eba0 0308 	sub.w	r3, r0, r8
 8013fbe:	fa09 f303 	lsl.w	r3, r9, r3
 8013fc2:	4313      	orrs	r3, r2
 8013fc4:	9304      	str	r3, [sp, #16]
 8013fc6:	46a2      	mov	sl, r4
 8013fc8:	e7d2      	b.n	8013f70 <_svfiprintf_r+0xa0>
 8013fca:	9b03      	ldr	r3, [sp, #12]
 8013fcc:	1d19      	adds	r1, r3, #4
 8013fce:	681b      	ldr	r3, [r3, #0]
 8013fd0:	9103      	str	r1, [sp, #12]
 8013fd2:	2b00      	cmp	r3, #0
 8013fd4:	bfbb      	ittet	lt
 8013fd6:	425b      	neglt	r3, r3
 8013fd8:	f042 0202 	orrlt.w	r2, r2, #2
 8013fdc:	9307      	strge	r3, [sp, #28]
 8013fde:	9307      	strlt	r3, [sp, #28]
 8013fe0:	bfb8      	it	lt
 8013fe2:	9204      	strlt	r2, [sp, #16]
 8013fe4:	7823      	ldrb	r3, [r4, #0]
 8013fe6:	2b2e      	cmp	r3, #46	@ 0x2e
 8013fe8:	d10a      	bne.n	8014000 <_svfiprintf_r+0x130>
 8013fea:	7863      	ldrb	r3, [r4, #1]
 8013fec:	2b2a      	cmp	r3, #42	@ 0x2a
 8013fee:	d132      	bne.n	8014056 <_svfiprintf_r+0x186>
 8013ff0:	9b03      	ldr	r3, [sp, #12]
 8013ff2:	1d1a      	adds	r2, r3, #4
 8013ff4:	681b      	ldr	r3, [r3, #0]
 8013ff6:	9203      	str	r2, [sp, #12]
 8013ff8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8013ffc:	3402      	adds	r4, #2
 8013ffe:	9305      	str	r3, [sp, #20]
 8014000:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80140c4 <_svfiprintf_r+0x1f4>
 8014004:	7821      	ldrb	r1, [r4, #0]
 8014006:	2203      	movs	r2, #3
 8014008:	4650      	mov	r0, sl
 801400a:	f7ec f969 	bl	80002e0 <memchr>
 801400e:	b138      	cbz	r0, 8014020 <_svfiprintf_r+0x150>
 8014010:	9b04      	ldr	r3, [sp, #16]
 8014012:	eba0 000a 	sub.w	r0, r0, sl
 8014016:	2240      	movs	r2, #64	@ 0x40
 8014018:	4082      	lsls	r2, r0
 801401a:	4313      	orrs	r3, r2
 801401c:	3401      	adds	r4, #1
 801401e:	9304      	str	r3, [sp, #16]
 8014020:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014024:	4824      	ldr	r0, [pc, #144]	@ (80140b8 <_svfiprintf_r+0x1e8>)
 8014026:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801402a:	2206      	movs	r2, #6
 801402c:	f7ec f958 	bl	80002e0 <memchr>
 8014030:	2800      	cmp	r0, #0
 8014032:	d036      	beq.n	80140a2 <_svfiprintf_r+0x1d2>
 8014034:	4b21      	ldr	r3, [pc, #132]	@ (80140bc <_svfiprintf_r+0x1ec>)
 8014036:	bb1b      	cbnz	r3, 8014080 <_svfiprintf_r+0x1b0>
 8014038:	9b03      	ldr	r3, [sp, #12]
 801403a:	3307      	adds	r3, #7
 801403c:	f023 0307 	bic.w	r3, r3, #7
 8014040:	3308      	adds	r3, #8
 8014042:	9303      	str	r3, [sp, #12]
 8014044:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014046:	4433      	add	r3, r6
 8014048:	9309      	str	r3, [sp, #36]	@ 0x24
 801404a:	e76a      	b.n	8013f22 <_svfiprintf_r+0x52>
 801404c:	fb0c 3202 	mla	r2, ip, r2, r3
 8014050:	460c      	mov	r4, r1
 8014052:	2001      	movs	r0, #1
 8014054:	e7a8      	b.n	8013fa8 <_svfiprintf_r+0xd8>
 8014056:	2300      	movs	r3, #0
 8014058:	3401      	adds	r4, #1
 801405a:	9305      	str	r3, [sp, #20]
 801405c:	4619      	mov	r1, r3
 801405e:	f04f 0c0a 	mov.w	ip, #10
 8014062:	4620      	mov	r0, r4
 8014064:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014068:	3a30      	subs	r2, #48	@ 0x30
 801406a:	2a09      	cmp	r2, #9
 801406c:	d903      	bls.n	8014076 <_svfiprintf_r+0x1a6>
 801406e:	2b00      	cmp	r3, #0
 8014070:	d0c6      	beq.n	8014000 <_svfiprintf_r+0x130>
 8014072:	9105      	str	r1, [sp, #20]
 8014074:	e7c4      	b.n	8014000 <_svfiprintf_r+0x130>
 8014076:	fb0c 2101 	mla	r1, ip, r1, r2
 801407a:	4604      	mov	r4, r0
 801407c:	2301      	movs	r3, #1
 801407e:	e7f0      	b.n	8014062 <_svfiprintf_r+0x192>
 8014080:	ab03      	add	r3, sp, #12
 8014082:	9300      	str	r3, [sp, #0]
 8014084:	462a      	mov	r2, r5
 8014086:	4b0e      	ldr	r3, [pc, #56]	@ (80140c0 <_svfiprintf_r+0x1f0>)
 8014088:	a904      	add	r1, sp, #16
 801408a:	4638      	mov	r0, r7
 801408c:	f7fd ff14 	bl	8011eb8 <_printf_float>
 8014090:	1c42      	adds	r2, r0, #1
 8014092:	4606      	mov	r6, r0
 8014094:	d1d6      	bne.n	8014044 <_svfiprintf_r+0x174>
 8014096:	89ab      	ldrh	r3, [r5, #12]
 8014098:	065b      	lsls	r3, r3, #25
 801409a:	f53f af2d 	bmi.w	8013ef8 <_svfiprintf_r+0x28>
 801409e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80140a0:	e72c      	b.n	8013efc <_svfiprintf_r+0x2c>
 80140a2:	ab03      	add	r3, sp, #12
 80140a4:	9300      	str	r3, [sp, #0]
 80140a6:	462a      	mov	r2, r5
 80140a8:	4b05      	ldr	r3, [pc, #20]	@ (80140c0 <_svfiprintf_r+0x1f0>)
 80140aa:	a904      	add	r1, sp, #16
 80140ac:	4638      	mov	r0, r7
 80140ae:	f7fe f98b 	bl	80123c8 <_printf_i>
 80140b2:	e7ed      	b.n	8014090 <_svfiprintf_r+0x1c0>
 80140b4:	08014c50 	.word	0x08014c50
 80140b8:	08014c5a 	.word	0x08014c5a
 80140bc:	08011eb9 	.word	0x08011eb9
 80140c0:	08013e19 	.word	0x08013e19
 80140c4:	08014c56 	.word	0x08014c56

080140c8 <__sflush_r>:
 80140c8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80140cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80140d0:	0716      	lsls	r6, r2, #28
 80140d2:	4605      	mov	r5, r0
 80140d4:	460c      	mov	r4, r1
 80140d6:	d454      	bmi.n	8014182 <__sflush_r+0xba>
 80140d8:	684b      	ldr	r3, [r1, #4]
 80140da:	2b00      	cmp	r3, #0
 80140dc:	dc02      	bgt.n	80140e4 <__sflush_r+0x1c>
 80140de:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80140e0:	2b00      	cmp	r3, #0
 80140e2:	dd48      	ble.n	8014176 <__sflush_r+0xae>
 80140e4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80140e6:	2e00      	cmp	r6, #0
 80140e8:	d045      	beq.n	8014176 <__sflush_r+0xae>
 80140ea:	2300      	movs	r3, #0
 80140ec:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80140f0:	682f      	ldr	r7, [r5, #0]
 80140f2:	6a21      	ldr	r1, [r4, #32]
 80140f4:	602b      	str	r3, [r5, #0]
 80140f6:	d030      	beq.n	801415a <__sflush_r+0x92>
 80140f8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80140fa:	89a3      	ldrh	r3, [r4, #12]
 80140fc:	0759      	lsls	r1, r3, #29
 80140fe:	d505      	bpl.n	801410c <__sflush_r+0x44>
 8014100:	6863      	ldr	r3, [r4, #4]
 8014102:	1ad2      	subs	r2, r2, r3
 8014104:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8014106:	b10b      	cbz	r3, 801410c <__sflush_r+0x44>
 8014108:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801410a:	1ad2      	subs	r2, r2, r3
 801410c:	2300      	movs	r3, #0
 801410e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8014110:	6a21      	ldr	r1, [r4, #32]
 8014112:	4628      	mov	r0, r5
 8014114:	47b0      	blx	r6
 8014116:	1c43      	adds	r3, r0, #1
 8014118:	89a3      	ldrh	r3, [r4, #12]
 801411a:	d106      	bne.n	801412a <__sflush_r+0x62>
 801411c:	6829      	ldr	r1, [r5, #0]
 801411e:	291d      	cmp	r1, #29
 8014120:	d82b      	bhi.n	801417a <__sflush_r+0xb2>
 8014122:	4a2a      	ldr	r2, [pc, #168]	@ (80141cc <__sflush_r+0x104>)
 8014124:	410a      	asrs	r2, r1
 8014126:	07d6      	lsls	r6, r2, #31
 8014128:	d427      	bmi.n	801417a <__sflush_r+0xb2>
 801412a:	2200      	movs	r2, #0
 801412c:	6062      	str	r2, [r4, #4]
 801412e:	04d9      	lsls	r1, r3, #19
 8014130:	6922      	ldr	r2, [r4, #16]
 8014132:	6022      	str	r2, [r4, #0]
 8014134:	d504      	bpl.n	8014140 <__sflush_r+0x78>
 8014136:	1c42      	adds	r2, r0, #1
 8014138:	d101      	bne.n	801413e <__sflush_r+0x76>
 801413a:	682b      	ldr	r3, [r5, #0]
 801413c:	b903      	cbnz	r3, 8014140 <__sflush_r+0x78>
 801413e:	6560      	str	r0, [r4, #84]	@ 0x54
 8014140:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8014142:	602f      	str	r7, [r5, #0]
 8014144:	b1b9      	cbz	r1, 8014176 <__sflush_r+0xae>
 8014146:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801414a:	4299      	cmp	r1, r3
 801414c:	d002      	beq.n	8014154 <__sflush_r+0x8c>
 801414e:	4628      	mov	r0, r5
 8014150:	f7ff f9e0 	bl	8013514 <_free_r>
 8014154:	2300      	movs	r3, #0
 8014156:	6363      	str	r3, [r4, #52]	@ 0x34
 8014158:	e00d      	b.n	8014176 <__sflush_r+0xae>
 801415a:	2301      	movs	r3, #1
 801415c:	4628      	mov	r0, r5
 801415e:	47b0      	blx	r6
 8014160:	4602      	mov	r2, r0
 8014162:	1c50      	adds	r0, r2, #1
 8014164:	d1c9      	bne.n	80140fa <__sflush_r+0x32>
 8014166:	682b      	ldr	r3, [r5, #0]
 8014168:	2b00      	cmp	r3, #0
 801416a:	d0c6      	beq.n	80140fa <__sflush_r+0x32>
 801416c:	2b1d      	cmp	r3, #29
 801416e:	d001      	beq.n	8014174 <__sflush_r+0xac>
 8014170:	2b16      	cmp	r3, #22
 8014172:	d11e      	bne.n	80141b2 <__sflush_r+0xea>
 8014174:	602f      	str	r7, [r5, #0]
 8014176:	2000      	movs	r0, #0
 8014178:	e022      	b.n	80141c0 <__sflush_r+0xf8>
 801417a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801417e:	b21b      	sxth	r3, r3
 8014180:	e01b      	b.n	80141ba <__sflush_r+0xf2>
 8014182:	690f      	ldr	r7, [r1, #16]
 8014184:	2f00      	cmp	r7, #0
 8014186:	d0f6      	beq.n	8014176 <__sflush_r+0xae>
 8014188:	0793      	lsls	r3, r2, #30
 801418a:	680e      	ldr	r6, [r1, #0]
 801418c:	bf08      	it	eq
 801418e:	694b      	ldreq	r3, [r1, #20]
 8014190:	600f      	str	r7, [r1, #0]
 8014192:	bf18      	it	ne
 8014194:	2300      	movne	r3, #0
 8014196:	eba6 0807 	sub.w	r8, r6, r7
 801419a:	608b      	str	r3, [r1, #8]
 801419c:	f1b8 0f00 	cmp.w	r8, #0
 80141a0:	dde9      	ble.n	8014176 <__sflush_r+0xae>
 80141a2:	6a21      	ldr	r1, [r4, #32]
 80141a4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80141a6:	4643      	mov	r3, r8
 80141a8:	463a      	mov	r2, r7
 80141aa:	4628      	mov	r0, r5
 80141ac:	47b0      	blx	r6
 80141ae:	2800      	cmp	r0, #0
 80141b0:	dc08      	bgt.n	80141c4 <__sflush_r+0xfc>
 80141b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80141b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80141ba:	81a3      	strh	r3, [r4, #12]
 80141bc:	f04f 30ff 	mov.w	r0, #4294967295
 80141c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80141c4:	4407      	add	r7, r0
 80141c6:	eba8 0800 	sub.w	r8, r8, r0
 80141ca:	e7e7      	b.n	801419c <__sflush_r+0xd4>
 80141cc:	dfbffffe 	.word	0xdfbffffe

080141d0 <_fflush_r>:
 80141d0:	b538      	push	{r3, r4, r5, lr}
 80141d2:	690b      	ldr	r3, [r1, #16]
 80141d4:	4605      	mov	r5, r0
 80141d6:	460c      	mov	r4, r1
 80141d8:	b913      	cbnz	r3, 80141e0 <_fflush_r+0x10>
 80141da:	2500      	movs	r5, #0
 80141dc:	4628      	mov	r0, r5
 80141de:	bd38      	pop	{r3, r4, r5, pc}
 80141e0:	b118      	cbz	r0, 80141ea <_fflush_r+0x1a>
 80141e2:	6a03      	ldr	r3, [r0, #32]
 80141e4:	b90b      	cbnz	r3, 80141ea <_fflush_r+0x1a>
 80141e6:	f7fe fa9b 	bl	8012720 <__sinit>
 80141ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80141ee:	2b00      	cmp	r3, #0
 80141f0:	d0f3      	beq.n	80141da <_fflush_r+0xa>
 80141f2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80141f4:	07d0      	lsls	r0, r2, #31
 80141f6:	d404      	bmi.n	8014202 <_fflush_r+0x32>
 80141f8:	0599      	lsls	r1, r3, #22
 80141fa:	d402      	bmi.n	8014202 <_fflush_r+0x32>
 80141fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80141fe:	f7fe fba6 	bl	801294e <__retarget_lock_acquire_recursive>
 8014202:	4628      	mov	r0, r5
 8014204:	4621      	mov	r1, r4
 8014206:	f7ff ff5f 	bl	80140c8 <__sflush_r>
 801420a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801420c:	07da      	lsls	r2, r3, #31
 801420e:	4605      	mov	r5, r0
 8014210:	d4e4      	bmi.n	80141dc <_fflush_r+0xc>
 8014212:	89a3      	ldrh	r3, [r4, #12]
 8014214:	059b      	lsls	r3, r3, #22
 8014216:	d4e1      	bmi.n	80141dc <_fflush_r+0xc>
 8014218:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801421a:	f7fe fb99 	bl	8012950 <__retarget_lock_release_recursive>
 801421e:	e7dd      	b.n	80141dc <_fflush_r+0xc>

08014220 <memmove>:
 8014220:	4288      	cmp	r0, r1
 8014222:	b510      	push	{r4, lr}
 8014224:	eb01 0402 	add.w	r4, r1, r2
 8014228:	d902      	bls.n	8014230 <memmove+0x10>
 801422a:	4284      	cmp	r4, r0
 801422c:	4623      	mov	r3, r4
 801422e:	d807      	bhi.n	8014240 <memmove+0x20>
 8014230:	1e43      	subs	r3, r0, #1
 8014232:	42a1      	cmp	r1, r4
 8014234:	d008      	beq.n	8014248 <memmove+0x28>
 8014236:	f811 2b01 	ldrb.w	r2, [r1], #1
 801423a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801423e:	e7f8      	b.n	8014232 <memmove+0x12>
 8014240:	4402      	add	r2, r0
 8014242:	4601      	mov	r1, r0
 8014244:	428a      	cmp	r2, r1
 8014246:	d100      	bne.n	801424a <memmove+0x2a>
 8014248:	bd10      	pop	{r4, pc}
 801424a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801424e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8014252:	e7f7      	b.n	8014244 <memmove+0x24>

08014254 <_sbrk_r>:
 8014254:	b538      	push	{r3, r4, r5, lr}
 8014256:	4d06      	ldr	r5, [pc, #24]	@ (8014270 <_sbrk_r+0x1c>)
 8014258:	2300      	movs	r3, #0
 801425a:	4604      	mov	r4, r0
 801425c:	4608      	mov	r0, r1
 801425e:	602b      	str	r3, [r5, #0]
 8014260:	f7ed fba6 	bl	80019b0 <_sbrk>
 8014264:	1c43      	adds	r3, r0, #1
 8014266:	d102      	bne.n	801426e <_sbrk_r+0x1a>
 8014268:	682b      	ldr	r3, [r5, #0]
 801426a:	b103      	cbz	r3, 801426e <_sbrk_r+0x1a>
 801426c:	6023      	str	r3, [r4, #0]
 801426e:	bd38      	pop	{r3, r4, r5, pc}
 8014270:	24002768 	.word	0x24002768

08014274 <memcpy>:
 8014274:	440a      	add	r2, r1
 8014276:	4291      	cmp	r1, r2
 8014278:	f100 33ff 	add.w	r3, r0, #4294967295
 801427c:	d100      	bne.n	8014280 <memcpy+0xc>
 801427e:	4770      	bx	lr
 8014280:	b510      	push	{r4, lr}
 8014282:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014286:	f803 4f01 	strb.w	r4, [r3, #1]!
 801428a:	4291      	cmp	r1, r2
 801428c:	d1f9      	bne.n	8014282 <memcpy+0xe>
 801428e:	bd10      	pop	{r4, pc}

08014290 <__assert_func>:
 8014290:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014292:	4614      	mov	r4, r2
 8014294:	461a      	mov	r2, r3
 8014296:	4b09      	ldr	r3, [pc, #36]	@ (80142bc <__assert_func+0x2c>)
 8014298:	681b      	ldr	r3, [r3, #0]
 801429a:	4605      	mov	r5, r0
 801429c:	68d8      	ldr	r0, [r3, #12]
 801429e:	b954      	cbnz	r4, 80142b6 <__assert_func+0x26>
 80142a0:	4b07      	ldr	r3, [pc, #28]	@ (80142c0 <__assert_func+0x30>)
 80142a2:	461c      	mov	r4, r3
 80142a4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80142a8:	9100      	str	r1, [sp, #0]
 80142aa:	462b      	mov	r3, r5
 80142ac:	4905      	ldr	r1, [pc, #20]	@ (80142c4 <__assert_func+0x34>)
 80142ae:	f000 f86f 	bl	8014390 <fiprintf>
 80142b2:	f000 f87f 	bl	80143b4 <abort>
 80142b6:	4b04      	ldr	r3, [pc, #16]	@ (80142c8 <__assert_func+0x38>)
 80142b8:	e7f4      	b.n	80142a4 <__assert_func+0x14>
 80142ba:	bf00      	nop
 80142bc:	24000138 	.word	0x24000138
 80142c0:	08014ca6 	.word	0x08014ca6
 80142c4:	08014c78 	.word	0x08014c78
 80142c8:	08014c6b 	.word	0x08014c6b

080142cc <_calloc_r>:
 80142cc:	b570      	push	{r4, r5, r6, lr}
 80142ce:	fba1 5402 	umull	r5, r4, r1, r2
 80142d2:	b93c      	cbnz	r4, 80142e4 <_calloc_r+0x18>
 80142d4:	4629      	mov	r1, r5
 80142d6:	f7ff f991 	bl	80135fc <_malloc_r>
 80142da:	4606      	mov	r6, r0
 80142dc:	b928      	cbnz	r0, 80142ea <_calloc_r+0x1e>
 80142de:	2600      	movs	r6, #0
 80142e0:	4630      	mov	r0, r6
 80142e2:	bd70      	pop	{r4, r5, r6, pc}
 80142e4:	220c      	movs	r2, #12
 80142e6:	6002      	str	r2, [r0, #0]
 80142e8:	e7f9      	b.n	80142de <_calloc_r+0x12>
 80142ea:	462a      	mov	r2, r5
 80142ec:	4621      	mov	r1, r4
 80142ee:	f7fe fab0 	bl	8012852 <memset>
 80142f2:	e7f5      	b.n	80142e0 <_calloc_r+0x14>

080142f4 <__ascii_mbtowc>:
 80142f4:	b082      	sub	sp, #8
 80142f6:	b901      	cbnz	r1, 80142fa <__ascii_mbtowc+0x6>
 80142f8:	a901      	add	r1, sp, #4
 80142fa:	b142      	cbz	r2, 801430e <__ascii_mbtowc+0x1a>
 80142fc:	b14b      	cbz	r3, 8014312 <__ascii_mbtowc+0x1e>
 80142fe:	7813      	ldrb	r3, [r2, #0]
 8014300:	600b      	str	r3, [r1, #0]
 8014302:	7812      	ldrb	r2, [r2, #0]
 8014304:	1e10      	subs	r0, r2, #0
 8014306:	bf18      	it	ne
 8014308:	2001      	movne	r0, #1
 801430a:	b002      	add	sp, #8
 801430c:	4770      	bx	lr
 801430e:	4610      	mov	r0, r2
 8014310:	e7fb      	b.n	801430a <__ascii_mbtowc+0x16>
 8014312:	f06f 0001 	mvn.w	r0, #1
 8014316:	e7f8      	b.n	801430a <__ascii_mbtowc+0x16>

08014318 <_realloc_r>:
 8014318:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801431c:	4680      	mov	r8, r0
 801431e:	4615      	mov	r5, r2
 8014320:	460c      	mov	r4, r1
 8014322:	b921      	cbnz	r1, 801432e <_realloc_r+0x16>
 8014324:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014328:	4611      	mov	r1, r2
 801432a:	f7ff b967 	b.w	80135fc <_malloc_r>
 801432e:	b92a      	cbnz	r2, 801433c <_realloc_r+0x24>
 8014330:	f7ff f8f0 	bl	8013514 <_free_r>
 8014334:	2400      	movs	r4, #0
 8014336:	4620      	mov	r0, r4
 8014338:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801433c:	f000 f841 	bl	80143c2 <_malloc_usable_size_r>
 8014340:	4285      	cmp	r5, r0
 8014342:	4606      	mov	r6, r0
 8014344:	d802      	bhi.n	801434c <_realloc_r+0x34>
 8014346:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801434a:	d8f4      	bhi.n	8014336 <_realloc_r+0x1e>
 801434c:	4629      	mov	r1, r5
 801434e:	4640      	mov	r0, r8
 8014350:	f7ff f954 	bl	80135fc <_malloc_r>
 8014354:	4607      	mov	r7, r0
 8014356:	2800      	cmp	r0, #0
 8014358:	d0ec      	beq.n	8014334 <_realloc_r+0x1c>
 801435a:	42b5      	cmp	r5, r6
 801435c:	462a      	mov	r2, r5
 801435e:	4621      	mov	r1, r4
 8014360:	bf28      	it	cs
 8014362:	4632      	movcs	r2, r6
 8014364:	f7ff ff86 	bl	8014274 <memcpy>
 8014368:	4621      	mov	r1, r4
 801436a:	4640      	mov	r0, r8
 801436c:	f7ff f8d2 	bl	8013514 <_free_r>
 8014370:	463c      	mov	r4, r7
 8014372:	e7e0      	b.n	8014336 <_realloc_r+0x1e>

08014374 <__ascii_wctomb>:
 8014374:	4603      	mov	r3, r0
 8014376:	4608      	mov	r0, r1
 8014378:	b141      	cbz	r1, 801438c <__ascii_wctomb+0x18>
 801437a:	2aff      	cmp	r2, #255	@ 0xff
 801437c:	d904      	bls.n	8014388 <__ascii_wctomb+0x14>
 801437e:	228a      	movs	r2, #138	@ 0x8a
 8014380:	601a      	str	r2, [r3, #0]
 8014382:	f04f 30ff 	mov.w	r0, #4294967295
 8014386:	4770      	bx	lr
 8014388:	700a      	strb	r2, [r1, #0]
 801438a:	2001      	movs	r0, #1
 801438c:	4770      	bx	lr
	...

08014390 <fiprintf>:
 8014390:	b40e      	push	{r1, r2, r3}
 8014392:	b503      	push	{r0, r1, lr}
 8014394:	4601      	mov	r1, r0
 8014396:	ab03      	add	r3, sp, #12
 8014398:	4805      	ldr	r0, [pc, #20]	@ (80143b0 <fiprintf+0x20>)
 801439a:	f853 2b04 	ldr.w	r2, [r3], #4
 801439e:	6800      	ldr	r0, [r0, #0]
 80143a0:	9301      	str	r3, [sp, #4]
 80143a2:	f000 f83f 	bl	8014424 <_vfiprintf_r>
 80143a6:	b002      	add	sp, #8
 80143a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80143ac:	b003      	add	sp, #12
 80143ae:	4770      	bx	lr
 80143b0:	24000138 	.word	0x24000138

080143b4 <abort>:
 80143b4:	b508      	push	{r3, lr}
 80143b6:	2006      	movs	r0, #6
 80143b8:	f000 fa08 	bl	80147cc <raise>
 80143bc:	2001      	movs	r0, #1
 80143be:	f7ed fa7f 	bl	80018c0 <_exit>

080143c2 <_malloc_usable_size_r>:
 80143c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80143c6:	1f18      	subs	r0, r3, #4
 80143c8:	2b00      	cmp	r3, #0
 80143ca:	bfbc      	itt	lt
 80143cc:	580b      	ldrlt	r3, [r1, r0]
 80143ce:	18c0      	addlt	r0, r0, r3
 80143d0:	4770      	bx	lr

080143d2 <__sfputc_r>:
 80143d2:	6893      	ldr	r3, [r2, #8]
 80143d4:	3b01      	subs	r3, #1
 80143d6:	2b00      	cmp	r3, #0
 80143d8:	b410      	push	{r4}
 80143da:	6093      	str	r3, [r2, #8]
 80143dc:	da08      	bge.n	80143f0 <__sfputc_r+0x1e>
 80143de:	6994      	ldr	r4, [r2, #24]
 80143e0:	42a3      	cmp	r3, r4
 80143e2:	db01      	blt.n	80143e8 <__sfputc_r+0x16>
 80143e4:	290a      	cmp	r1, #10
 80143e6:	d103      	bne.n	80143f0 <__sfputc_r+0x1e>
 80143e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80143ec:	f000 b932 	b.w	8014654 <__swbuf_r>
 80143f0:	6813      	ldr	r3, [r2, #0]
 80143f2:	1c58      	adds	r0, r3, #1
 80143f4:	6010      	str	r0, [r2, #0]
 80143f6:	7019      	strb	r1, [r3, #0]
 80143f8:	4608      	mov	r0, r1
 80143fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80143fe:	4770      	bx	lr

08014400 <__sfputs_r>:
 8014400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014402:	4606      	mov	r6, r0
 8014404:	460f      	mov	r7, r1
 8014406:	4614      	mov	r4, r2
 8014408:	18d5      	adds	r5, r2, r3
 801440a:	42ac      	cmp	r4, r5
 801440c:	d101      	bne.n	8014412 <__sfputs_r+0x12>
 801440e:	2000      	movs	r0, #0
 8014410:	e007      	b.n	8014422 <__sfputs_r+0x22>
 8014412:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014416:	463a      	mov	r2, r7
 8014418:	4630      	mov	r0, r6
 801441a:	f7ff ffda 	bl	80143d2 <__sfputc_r>
 801441e:	1c43      	adds	r3, r0, #1
 8014420:	d1f3      	bne.n	801440a <__sfputs_r+0xa>
 8014422:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08014424 <_vfiprintf_r>:
 8014424:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014428:	460d      	mov	r5, r1
 801442a:	b09d      	sub	sp, #116	@ 0x74
 801442c:	4614      	mov	r4, r2
 801442e:	4698      	mov	r8, r3
 8014430:	4606      	mov	r6, r0
 8014432:	b118      	cbz	r0, 801443c <_vfiprintf_r+0x18>
 8014434:	6a03      	ldr	r3, [r0, #32]
 8014436:	b90b      	cbnz	r3, 801443c <_vfiprintf_r+0x18>
 8014438:	f7fe f972 	bl	8012720 <__sinit>
 801443c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801443e:	07d9      	lsls	r1, r3, #31
 8014440:	d405      	bmi.n	801444e <_vfiprintf_r+0x2a>
 8014442:	89ab      	ldrh	r3, [r5, #12]
 8014444:	059a      	lsls	r2, r3, #22
 8014446:	d402      	bmi.n	801444e <_vfiprintf_r+0x2a>
 8014448:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801444a:	f7fe fa80 	bl	801294e <__retarget_lock_acquire_recursive>
 801444e:	89ab      	ldrh	r3, [r5, #12]
 8014450:	071b      	lsls	r3, r3, #28
 8014452:	d501      	bpl.n	8014458 <_vfiprintf_r+0x34>
 8014454:	692b      	ldr	r3, [r5, #16]
 8014456:	b99b      	cbnz	r3, 8014480 <_vfiprintf_r+0x5c>
 8014458:	4629      	mov	r1, r5
 801445a:	4630      	mov	r0, r6
 801445c:	f000 f938 	bl	80146d0 <__swsetup_r>
 8014460:	b170      	cbz	r0, 8014480 <_vfiprintf_r+0x5c>
 8014462:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014464:	07dc      	lsls	r4, r3, #31
 8014466:	d504      	bpl.n	8014472 <_vfiprintf_r+0x4e>
 8014468:	f04f 30ff 	mov.w	r0, #4294967295
 801446c:	b01d      	add	sp, #116	@ 0x74
 801446e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014472:	89ab      	ldrh	r3, [r5, #12]
 8014474:	0598      	lsls	r0, r3, #22
 8014476:	d4f7      	bmi.n	8014468 <_vfiprintf_r+0x44>
 8014478:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801447a:	f7fe fa69 	bl	8012950 <__retarget_lock_release_recursive>
 801447e:	e7f3      	b.n	8014468 <_vfiprintf_r+0x44>
 8014480:	2300      	movs	r3, #0
 8014482:	9309      	str	r3, [sp, #36]	@ 0x24
 8014484:	2320      	movs	r3, #32
 8014486:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801448a:	f8cd 800c 	str.w	r8, [sp, #12]
 801448e:	2330      	movs	r3, #48	@ 0x30
 8014490:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8014640 <_vfiprintf_r+0x21c>
 8014494:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8014498:	f04f 0901 	mov.w	r9, #1
 801449c:	4623      	mov	r3, r4
 801449e:	469a      	mov	sl, r3
 80144a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80144a4:	b10a      	cbz	r2, 80144aa <_vfiprintf_r+0x86>
 80144a6:	2a25      	cmp	r2, #37	@ 0x25
 80144a8:	d1f9      	bne.n	801449e <_vfiprintf_r+0x7a>
 80144aa:	ebba 0b04 	subs.w	fp, sl, r4
 80144ae:	d00b      	beq.n	80144c8 <_vfiprintf_r+0xa4>
 80144b0:	465b      	mov	r3, fp
 80144b2:	4622      	mov	r2, r4
 80144b4:	4629      	mov	r1, r5
 80144b6:	4630      	mov	r0, r6
 80144b8:	f7ff ffa2 	bl	8014400 <__sfputs_r>
 80144bc:	3001      	adds	r0, #1
 80144be:	f000 80a7 	beq.w	8014610 <_vfiprintf_r+0x1ec>
 80144c2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80144c4:	445a      	add	r2, fp
 80144c6:	9209      	str	r2, [sp, #36]	@ 0x24
 80144c8:	f89a 3000 	ldrb.w	r3, [sl]
 80144cc:	2b00      	cmp	r3, #0
 80144ce:	f000 809f 	beq.w	8014610 <_vfiprintf_r+0x1ec>
 80144d2:	2300      	movs	r3, #0
 80144d4:	f04f 32ff 	mov.w	r2, #4294967295
 80144d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80144dc:	f10a 0a01 	add.w	sl, sl, #1
 80144e0:	9304      	str	r3, [sp, #16]
 80144e2:	9307      	str	r3, [sp, #28]
 80144e4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80144e8:	931a      	str	r3, [sp, #104]	@ 0x68
 80144ea:	4654      	mov	r4, sl
 80144ec:	2205      	movs	r2, #5
 80144ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80144f2:	4853      	ldr	r0, [pc, #332]	@ (8014640 <_vfiprintf_r+0x21c>)
 80144f4:	f7eb fef4 	bl	80002e0 <memchr>
 80144f8:	9a04      	ldr	r2, [sp, #16]
 80144fa:	b9d8      	cbnz	r0, 8014534 <_vfiprintf_r+0x110>
 80144fc:	06d1      	lsls	r1, r2, #27
 80144fe:	bf44      	itt	mi
 8014500:	2320      	movmi	r3, #32
 8014502:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014506:	0713      	lsls	r3, r2, #28
 8014508:	bf44      	itt	mi
 801450a:	232b      	movmi	r3, #43	@ 0x2b
 801450c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014510:	f89a 3000 	ldrb.w	r3, [sl]
 8014514:	2b2a      	cmp	r3, #42	@ 0x2a
 8014516:	d015      	beq.n	8014544 <_vfiprintf_r+0x120>
 8014518:	9a07      	ldr	r2, [sp, #28]
 801451a:	4654      	mov	r4, sl
 801451c:	2000      	movs	r0, #0
 801451e:	f04f 0c0a 	mov.w	ip, #10
 8014522:	4621      	mov	r1, r4
 8014524:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014528:	3b30      	subs	r3, #48	@ 0x30
 801452a:	2b09      	cmp	r3, #9
 801452c:	d94b      	bls.n	80145c6 <_vfiprintf_r+0x1a2>
 801452e:	b1b0      	cbz	r0, 801455e <_vfiprintf_r+0x13a>
 8014530:	9207      	str	r2, [sp, #28]
 8014532:	e014      	b.n	801455e <_vfiprintf_r+0x13a>
 8014534:	eba0 0308 	sub.w	r3, r0, r8
 8014538:	fa09 f303 	lsl.w	r3, r9, r3
 801453c:	4313      	orrs	r3, r2
 801453e:	9304      	str	r3, [sp, #16]
 8014540:	46a2      	mov	sl, r4
 8014542:	e7d2      	b.n	80144ea <_vfiprintf_r+0xc6>
 8014544:	9b03      	ldr	r3, [sp, #12]
 8014546:	1d19      	adds	r1, r3, #4
 8014548:	681b      	ldr	r3, [r3, #0]
 801454a:	9103      	str	r1, [sp, #12]
 801454c:	2b00      	cmp	r3, #0
 801454e:	bfbb      	ittet	lt
 8014550:	425b      	neglt	r3, r3
 8014552:	f042 0202 	orrlt.w	r2, r2, #2
 8014556:	9307      	strge	r3, [sp, #28]
 8014558:	9307      	strlt	r3, [sp, #28]
 801455a:	bfb8      	it	lt
 801455c:	9204      	strlt	r2, [sp, #16]
 801455e:	7823      	ldrb	r3, [r4, #0]
 8014560:	2b2e      	cmp	r3, #46	@ 0x2e
 8014562:	d10a      	bne.n	801457a <_vfiprintf_r+0x156>
 8014564:	7863      	ldrb	r3, [r4, #1]
 8014566:	2b2a      	cmp	r3, #42	@ 0x2a
 8014568:	d132      	bne.n	80145d0 <_vfiprintf_r+0x1ac>
 801456a:	9b03      	ldr	r3, [sp, #12]
 801456c:	1d1a      	adds	r2, r3, #4
 801456e:	681b      	ldr	r3, [r3, #0]
 8014570:	9203      	str	r2, [sp, #12]
 8014572:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8014576:	3402      	adds	r4, #2
 8014578:	9305      	str	r3, [sp, #20]
 801457a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8014650 <_vfiprintf_r+0x22c>
 801457e:	7821      	ldrb	r1, [r4, #0]
 8014580:	2203      	movs	r2, #3
 8014582:	4650      	mov	r0, sl
 8014584:	f7eb feac 	bl	80002e0 <memchr>
 8014588:	b138      	cbz	r0, 801459a <_vfiprintf_r+0x176>
 801458a:	9b04      	ldr	r3, [sp, #16]
 801458c:	eba0 000a 	sub.w	r0, r0, sl
 8014590:	2240      	movs	r2, #64	@ 0x40
 8014592:	4082      	lsls	r2, r0
 8014594:	4313      	orrs	r3, r2
 8014596:	3401      	adds	r4, #1
 8014598:	9304      	str	r3, [sp, #16]
 801459a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801459e:	4829      	ldr	r0, [pc, #164]	@ (8014644 <_vfiprintf_r+0x220>)
 80145a0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80145a4:	2206      	movs	r2, #6
 80145a6:	f7eb fe9b 	bl	80002e0 <memchr>
 80145aa:	2800      	cmp	r0, #0
 80145ac:	d03f      	beq.n	801462e <_vfiprintf_r+0x20a>
 80145ae:	4b26      	ldr	r3, [pc, #152]	@ (8014648 <_vfiprintf_r+0x224>)
 80145b0:	bb1b      	cbnz	r3, 80145fa <_vfiprintf_r+0x1d6>
 80145b2:	9b03      	ldr	r3, [sp, #12]
 80145b4:	3307      	adds	r3, #7
 80145b6:	f023 0307 	bic.w	r3, r3, #7
 80145ba:	3308      	adds	r3, #8
 80145bc:	9303      	str	r3, [sp, #12]
 80145be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80145c0:	443b      	add	r3, r7
 80145c2:	9309      	str	r3, [sp, #36]	@ 0x24
 80145c4:	e76a      	b.n	801449c <_vfiprintf_r+0x78>
 80145c6:	fb0c 3202 	mla	r2, ip, r2, r3
 80145ca:	460c      	mov	r4, r1
 80145cc:	2001      	movs	r0, #1
 80145ce:	e7a8      	b.n	8014522 <_vfiprintf_r+0xfe>
 80145d0:	2300      	movs	r3, #0
 80145d2:	3401      	adds	r4, #1
 80145d4:	9305      	str	r3, [sp, #20]
 80145d6:	4619      	mov	r1, r3
 80145d8:	f04f 0c0a 	mov.w	ip, #10
 80145dc:	4620      	mov	r0, r4
 80145de:	f810 2b01 	ldrb.w	r2, [r0], #1
 80145e2:	3a30      	subs	r2, #48	@ 0x30
 80145e4:	2a09      	cmp	r2, #9
 80145e6:	d903      	bls.n	80145f0 <_vfiprintf_r+0x1cc>
 80145e8:	2b00      	cmp	r3, #0
 80145ea:	d0c6      	beq.n	801457a <_vfiprintf_r+0x156>
 80145ec:	9105      	str	r1, [sp, #20]
 80145ee:	e7c4      	b.n	801457a <_vfiprintf_r+0x156>
 80145f0:	fb0c 2101 	mla	r1, ip, r1, r2
 80145f4:	4604      	mov	r4, r0
 80145f6:	2301      	movs	r3, #1
 80145f8:	e7f0      	b.n	80145dc <_vfiprintf_r+0x1b8>
 80145fa:	ab03      	add	r3, sp, #12
 80145fc:	9300      	str	r3, [sp, #0]
 80145fe:	462a      	mov	r2, r5
 8014600:	4b12      	ldr	r3, [pc, #72]	@ (801464c <_vfiprintf_r+0x228>)
 8014602:	a904      	add	r1, sp, #16
 8014604:	4630      	mov	r0, r6
 8014606:	f7fd fc57 	bl	8011eb8 <_printf_float>
 801460a:	4607      	mov	r7, r0
 801460c:	1c78      	adds	r0, r7, #1
 801460e:	d1d6      	bne.n	80145be <_vfiprintf_r+0x19a>
 8014610:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014612:	07d9      	lsls	r1, r3, #31
 8014614:	d405      	bmi.n	8014622 <_vfiprintf_r+0x1fe>
 8014616:	89ab      	ldrh	r3, [r5, #12]
 8014618:	059a      	lsls	r2, r3, #22
 801461a:	d402      	bmi.n	8014622 <_vfiprintf_r+0x1fe>
 801461c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801461e:	f7fe f997 	bl	8012950 <__retarget_lock_release_recursive>
 8014622:	89ab      	ldrh	r3, [r5, #12]
 8014624:	065b      	lsls	r3, r3, #25
 8014626:	f53f af1f 	bmi.w	8014468 <_vfiprintf_r+0x44>
 801462a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801462c:	e71e      	b.n	801446c <_vfiprintf_r+0x48>
 801462e:	ab03      	add	r3, sp, #12
 8014630:	9300      	str	r3, [sp, #0]
 8014632:	462a      	mov	r2, r5
 8014634:	4b05      	ldr	r3, [pc, #20]	@ (801464c <_vfiprintf_r+0x228>)
 8014636:	a904      	add	r1, sp, #16
 8014638:	4630      	mov	r0, r6
 801463a:	f7fd fec5 	bl	80123c8 <_printf_i>
 801463e:	e7e4      	b.n	801460a <_vfiprintf_r+0x1e6>
 8014640:	08014c50 	.word	0x08014c50
 8014644:	08014c5a 	.word	0x08014c5a
 8014648:	08011eb9 	.word	0x08011eb9
 801464c:	08014401 	.word	0x08014401
 8014650:	08014c56 	.word	0x08014c56

08014654 <__swbuf_r>:
 8014654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014656:	460e      	mov	r6, r1
 8014658:	4614      	mov	r4, r2
 801465a:	4605      	mov	r5, r0
 801465c:	b118      	cbz	r0, 8014666 <__swbuf_r+0x12>
 801465e:	6a03      	ldr	r3, [r0, #32]
 8014660:	b90b      	cbnz	r3, 8014666 <__swbuf_r+0x12>
 8014662:	f7fe f85d 	bl	8012720 <__sinit>
 8014666:	69a3      	ldr	r3, [r4, #24]
 8014668:	60a3      	str	r3, [r4, #8]
 801466a:	89a3      	ldrh	r3, [r4, #12]
 801466c:	071a      	lsls	r2, r3, #28
 801466e:	d501      	bpl.n	8014674 <__swbuf_r+0x20>
 8014670:	6923      	ldr	r3, [r4, #16]
 8014672:	b943      	cbnz	r3, 8014686 <__swbuf_r+0x32>
 8014674:	4621      	mov	r1, r4
 8014676:	4628      	mov	r0, r5
 8014678:	f000 f82a 	bl	80146d0 <__swsetup_r>
 801467c:	b118      	cbz	r0, 8014686 <__swbuf_r+0x32>
 801467e:	f04f 37ff 	mov.w	r7, #4294967295
 8014682:	4638      	mov	r0, r7
 8014684:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014686:	6823      	ldr	r3, [r4, #0]
 8014688:	6922      	ldr	r2, [r4, #16]
 801468a:	1a98      	subs	r0, r3, r2
 801468c:	6963      	ldr	r3, [r4, #20]
 801468e:	b2f6      	uxtb	r6, r6
 8014690:	4283      	cmp	r3, r0
 8014692:	4637      	mov	r7, r6
 8014694:	dc05      	bgt.n	80146a2 <__swbuf_r+0x4e>
 8014696:	4621      	mov	r1, r4
 8014698:	4628      	mov	r0, r5
 801469a:	f7ff fd99 	bl	80141d0 <_fflush_r>
 801469e:	2800      	cmp	r0, #0
 80146a0:	d1ed      	bne.n	801467e <__swbuf_r+0x2a>
 80146a2:	68a3      	ldr	r3, [r4, #8]
 80146a4:	3b01      	subs	r3, #1
 80146a6:	60a3      	str	r3, [r4, #8]
 80146a8:	6823      	ldr	r3, [r4, #0]
 80146aa:	1c5a      	adds	r2, r3, #1
 80146ac:	6022      	str	r2, [r4, #0]
 80146ae:	701e      	strb	r6, [r3, #0]
 80146b0:	6962      	ldr	r2, [r4, #20]
 80146b2:	1c43      	adds	r3, r0, #1
 80146b4:	429a      	cmp	r2, r3
 80146b6:	d004      	beq.n	80146c2 <__swbuf_r+0x6e>
 80146b8:	89a3      	ldrh	r3, [r4, #12]
 80146ba:	07db      	lsls	r3, r3, #31
 80146bc:	d5e1      	bpl.n	8014682 <__swbuf_r+0x2e>
 80146be:	2e0a      	cmp	r6, #10
 80146c0:	d1df      	bne.n	8014682 <__swbuf_r+0x2e>
 80146c2:	4621      	mov	r1, r4
 80146c4:	4628      	mov	r0, r5
 80146c6:	f7ff fd83 	bl	80141d0 <_fflush_r>
 80146ca:	2800      	cmp	r0, #0
 80146cc:	d0d9      	beq.n	8014682 <__swbuf_r+0x2e>
 80146ce:	e7d6      	b.n	801467e <__swbuf_r+0x2a>

080146d0 <__swsetup_r>:
 80146d0:	b538      	push	{r3, r4, r5, lr}
 80146d2:	4b29      	ldr	r3, [pc, #164]	@ (8014778 <__swsetup_r+0xa8>)
 80146d4:	4605      	mov	r5, r0
 80146d6:	6818      	ldr	r0, [r3, #0]
 80146d8:	460c      	mov	r4, r1
 80146da:	b118      	cbz	r0, 80146e4 <__swsetup_r+0x14>
 80146dc:	6a03      	ldr	r3, [r0, #32]
 80146de:	b90b      	cbnz	r3, 80146e4 <__swsetup_r+0x14>
 80146e0:	f7fe f81e 	bl	8012720 <__sinit>
 80146e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80146e8:	0719      	lsls	r1, r3, #28
 80146ea:	d422      	bmi.n	8014732 <__swsetup_r+0x62>
 80146ec:	06da      	lsls	r2, r3, #27
 80146ee:	d407      	bmi.n	8014700 <__swsetup_r+0x30>
 80146f0:	2209      	movs	r2, #9
 80146f2:	602a      	str	r2, [r5, #0]
 80146f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80146f8:	81a3      	strh	r3, [r4, #12]
 80146fa:	f04f 30ff 	mov.w	r0, #4294967295
 80146fe:	e033      	b.n	8014768 <__swsetup_r+0x98>
 8014700:	0758      	lsls	r0, r3, #29
 8014702:	d512      	bpl.n	801472a <__swsetup_r+0x5a>
 8014704:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8014706:	b141      	cbz	r1, 801471a <__swsetup_r+0x4a>
 8014708:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801470c:	4299      	cmp	r1, r3
 801470e:	d002      	beq.n	8014716 <__swsetup_r+0x46>
 8014710:	4628      	mov	r0, r5
 8014712:	f7fe feff 	bl	8013514 <_free_r>
 8014716:	2300      	movs	r3, #0
 8014718:	6363      	str	r3, [r4, #52]	@ 0x34
 801471a:	89a3      	ldrh	r3, [r4, #12]
 801471c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8014720:	81a3      	strh	r3, [r4, #12]
 8014722:	2300      	movs	r3, #0
 8014724:	6063      	str	r3, [r4, #4]
 8014726:	6923      	ldr	r3, [r4, #16]
 8014728:	6023      	str	r3, [r4, #0]
 801472a:	89a3      	ldrh	r3, [r4, #12]
 801472c:	f043 0308 	orr.w	r3, r3, #8
 8014730:	81a3      	strh	r3, [r4, #12]
 8014732:	6923      	ldr	r3, [r4, #16]
 8014734:	b94b      	cbnz	r3, 801474a <__swsetup_r+0x7a>
 8014736:	89a3      	ldrh	r3, [r4, #12]
 8014738:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801473c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8014740:	d003      	beq.n	801474a <__swsetup_r+0x7a>
 8014742:	4621      	mov	r1, r4
 8014744:	4628      	mov	r0, r5
 8014746:	f000 f883 	bl	8014850 <__smakebuf_r>
 801474a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801474e:	f013 0201 	ands.w	r2, r3, #1
 8014752:	d00a      	beq.n	801476a <__swsetup_r+0x9a>
 8014754:	2200      	movs	r2, #0
 8014756:	60a2      	str	r2, [r4, #8]
 8014758:	6962      	ldr	r2, [r4, #20]
 801475a:	4252      	negs	r2, r2
 801475c:	61a2      	str	r2, [r4, #24]
 801475e:	6922      	ldr	r2, [r4, #16]
 8014760:	b942      	cbnz	r2, 8014774 <__swsetup_r+0xa4>
 8014762:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8014766:	d1c5      	bne.n	80146f4 <__swsetup_r+0x24>
 8014768:	bd38      	pop	{r3, r4, r5, pc}
 801476a:	0799      	lsls	r1, r3, #30
 801476c:	bf58      	it	pl
 801476e:	6962      	ldrpl	r2, [r4, #20]
 8014770:	60a2      	str	r2, [r4, #8]
 8014772:	e7f4      	b.n	801475e <__swsetup_r+0x8e>
 8014774:	2000      	movs	r0, #0
 8014776:	e7f7      	b.n	8014768 <__swsetup_r+0x98>
 8014778:	24000138 	.word	0x24000138

0801477c <_raise_r>:
 801477c:	291f      	cmp	r1, #31
 801477e:	b538      	push	{r3, r4, r5, lr}
 8014780:	4605      	mov	r5, r0
 8014782:	460c      	mov	r4, r1
 8014784:	d904      	bls.n	8014790 <_raise_r+0x14>
 8014786:	2316      	movs	r3, #22
 8014788:	6003      	str	r3, [r0, #0]
 801478a:	f04f 30ff 	mov.w	r0, #4294967295
 801478e:	bd38      	pop	{r3, r4, r5, pc}
 8014790:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8014792:	b112      	cbz	r2, 801479a <_raise_r+0x1e>
 8014794:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8014798:	b94b      	cbnz	r3, 80147ae <_raise_r+0x32>
 801479a:	4628      	mov	r0, r5
 801479c:	f000 f830 	bl	8014800 <_getpid_r>
 80147a0:	4622      	mov	r2, r4
 80147a2:	4601      	mov	r1, r0
 80147a4:	4628      	mov	r0, r5
 80147a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80147aa:	f000 b817 	b.w	80147dc <_kill_r>
 80147ae:	2b01      	cmp	r3, #1
 80147b0:	d00a      	beq.n	80147c8 <_raise_r+0x4c>
 80147b2:	1c59      	adds	r1, r3, #1
 80147b4:	d103      	bne.n	80147be <_raise_r+0x42>
 80147b6:	2316      	movs	r3, #22
 80147b8:	6003      	str	r3, [r0, #0]
 80147ba:	2001      	movs	r0, #1
 80147bc:	e7e7      	b.n	801478e <_raise_r+0x12>
 80147be:	2100      	movs	r1, #0
 80147c0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80147c4:	4620      	mov	r0, r4
 80147c6:	4798      	blx	r3
 80147c8:	2000      	movs	r0, #0
 80147ca:	e7e0      	b.n	801478e <_raise_r+0x12>

080147cc <raise>:
 80147cc:	4b02      	ldr	r3, [pc, #8]	@ (80147d8 <raise+0xc>)
 80147ce:	4601      	mov	r1, r0
 80147d0:	6818      	ldr	r0, [r3, #0]
 80147d2:	f7ff bfd3 	b.w	801477c <_raise_r>
 80147d6:	bf00      	nop
 80147d8:	24000138 	.word	0x24000138

080147dc <_kill_r>:
 80147dc:	b538      	push	{r3, r4, r5, lr}
 80147de:	4d07      	ldr	r5, [pc, #28]	@ (80147fc <_kill_r+0x20>)
 80147e0:	2300      	movs	r3, #0
 80147e2:	4604      	mov	r4, r0
 80147e4:	4608      	mov	r0, r1
 80147e6:	4611      	mov	r1, r2
 80147e8:	602b      	str	r3, [r5, #0]
 80147ea:	f7ed f859 	bl	80018a0 <_kill>
 80147ee:	1c43      	adds	r3, r0, #1
 80147f0:	d102      	bne.n	80147f8 <_kill_r+0x1c>
 80147f2:	682b      	ldr	r3, [r5, #0]
 80147f4:	b103      	cbz	r3, 80147f8 <_kill_r+0x1c>
 80147f6:	6023      	str	r3, [r4, #0]
 80147f8:	bd38      	pop	{r3, r4, r5, pc}
 80147fa:	bf00      	nop
 80147fc:	24002768 	.word	0x24002768

08014800 <_getpid_r>:
 8014800:	f7ed b846 	b.w	8001890 <_getpid>

08014804 <__swhatbuf_r>:
 8014804:	b570      	push	{r4, r5, r6, lr}
 8014806:	460c      	mov	r4, r1
 8014808:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801480c:	2900      	cmp	r1, #0
 801480e:	b096      	sub	sp, #88	@ 0x58
 8014810:	4615      	mov	r5, r2
 8014812:	461e      	mov	r6, r3
 8014814:	da0d      	bge.n	8014832 <__swhatbuf_r+0x2e>
 8014816:	89a3      	ldrh	r3, [r4, #12]
 8014818:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801481c:	f04f 0100 	mov.w	r1, #0
 8014820:	bf14      	ite	ne
 8014822:	2340      	movne	r3, #64	@ 0x40
 8014824:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8014828:	2000      	movs	r0, #0
 801482a:	6031      	str	r1, [r6, #0]
 801482c:	602b      	str	r3, [r5, #0]
 801482e:	b016      	add	sp, #88	@ 0x58
 8014830:	bd70      	pop	{r4, r5, r6, pc}
 8014832:	466a      	mov	r2, sp
 8014834:	f000 f848 	bl	80148c8 <_fstat_r>
 8014838:	2800      	cmp	r0, #0
 801483a:	dbec      	blt.n	8014816 <__swhatbuf_r+0x12>
 801483c:	9901      	ldr	r1, [sp, #4]
 801483e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8014842:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8014846:	4259      	negs	r1, r3
 8014848:	4159      	adcs	r1, r3
 801484a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801484e:	e7eb      	b.n	8014828 <__swhatbuf_r+0x24>

08014850 <__smakebuf_r>:
 8014850:	898b      	ldrh	r3, [r1, #12]
 8014852:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014854:	079d      	lsls	r5, r3, #30
 8014856:	4606      	mov	r6, r0
 8014858:	460c      	mov	r4, r1
 801485a:	d507      	bpl.n	801486c <__smakebuf_r+0x1c>
 801485c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8014860:	6023      	str	r3, [r4, #0]
 8014862:	6123      	str	r3, [r4, #16]
 8014864:	2301      	movs	r3, #1
 8014866:	6163      	str	r3, [r4, #20]
 8014868:	b003      	add	sp, #12
 801486a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801486c:	ab01      	add	r3, sp, #4
 801486e:	466a      	mov	r2, sp
 8014870:	f7ff ffc8 	bl	8014804 <__swhatbuf_r>
 8014874:	9f00      	ldr	r7, [sp, #0]
 8014876:	4605      	mov	r5, r0
 8014878:	4639      	mov	r1, r7
 801487a:	4630      	mov	r0, r6
 801487c:	f7fe febe 	bl	80135fc <_malloc_r>
 8014880:	b948      	cbnz	r0, 8014896 <__smakebuf_r+0x46>
 8014882:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014886:	059a      	lsls	r2, r3, #22
 8014888:	d4ee      	bmi.n	8014868 <__smakebuf_r+0x18>
 801488a:	f023 0303 	bic.w	r3, r3, #3
 801488e:	f043 0302 	orr.w	r3, r3, #2
 8014892:	81a3      	strh	r3, [r4, #12]
 8014894:	e7e2      	b.n	801485c <__smakebuf_r+0xc>
 8014896:	89a3      	ldrh	r3, [r4, #12]
 8014898:	6020      	str	r0, [r4, #0]
 801489a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801489e:	81a3      	strh	r3, [r4, #12]
 80148a0:	9b01      	ldr	r3, [sp, #4]
 80148a2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80148a6:	b15b      	cbz	r3, 80148c0 <__smakebuf_r+0x70>
 80148a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80148ac:	4630      	mov	r0, r6
 80148ae:	f000 f81d 	bl	80148ec <_isatty_r>
 80148b2:	b128      	cbz	r0, 80148c0 <__smakebuf_r+0x70>
 80148b4:	89a3      	ldrh	r3, [r4, #12]
 80148b6:	f023 0303 	bic.w	r3, r3, #3
 80148ba:	f043 0301 	orr.w	r3, r3, #1
 80148be:	81a3      	strh	r3, [r4, #12]
 80148c0:	89a3      	ldrh	r3, [r4, #12]
 80148c2:	431d      	orrs	r5, r3
 80148c4:	81a5      	strh	r5, [r4, #12]
 80148c6:	e7cf      	b.n	8014868 <__smakebuf_r+0x18>

080148c8 <_fstat_r>:
 80148c8:	b538      	push	{r3, r4, r5, lr}
 80148ca:	4d07      	ldr	r5, [pc, #28]	@ (80148e8 <_fstat_r+0x20>)
 80148cc:	2300      	movs	r3, #0
 80148ce:	4604      	mov	r4, r0
 80148d0:	4608      	mov	r0, r1
 80148d2:	4611      	mov	r1, r2
 80148d4:	602b      	str	r3, [r5, #0]
 80148d6:	f7ed f843 	bl	8001960 <_fstat>
 80148da:	1c43      	adds	r3, r0, #1
 80148dc:	d102      	bne.n	80148e4 <_fstat_r+0x1c>
 80148de:	682b      	ldr	r3, [r5, #0]
 80148e0:	b103      	cbz	r3, 80148e4 <_fstat_r+0x1c>
 80148e2:	6023      	str	r3, [r4, #0]
 80148e4:	bd38      	pop	{r3, r4, r5, pc}
 80148e6:	bf00      	nop
 80148e8:	24002768 	.word	0x24002768

080148ec <_isatty_r>:
 80148ec:	b538      	push	{r3, r4, r5, lr}
 80148ee:	4d06      	ldr	r5, [pc, #24]	@ (8014908 <_isatty_r+0x1c>)
 80148f0:	2300      	movs	r3, #0
 80148f2:	4604      	mov	r4, r0
 80148f4:	4608      	mov	r0, r1
 80148f6:	602b      	str	r3, [r5, #0]
 80148f8:	f7ed f842 	bl	8001980 <_isatty>
 80148fc:	1c43      	adds	r3, r0, #1
 80148fe:	d102      	bne.n	8014906 <_isatty_r+0x1a>
 8014900:	682b      	ldr	r3, [r5, #0]
 8014902:	b103      	cbz	r3, 8014906 <_isatty_r+0x1a>
 8014904:	6023      	str	r3, [r4, #0]
 8014906:	bd38      	pop	{r3, r4, r5, pc}
 8014908:	24002768 	.word	0x24002768

0801490c <lrintf>:
 801490c:	ee10 3a10 	vmov	r3, s0
 8014910:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8014914:	f1a2 007f 	sub.w	r0, r2, #127	@ 0x7f
 8014918:	281e      	cmp	r0, #30
 801491a:	b082      	sub	sp, #8
 801491c:	dc2f      	bgt.n	801497e <lrintf+0x72>
 801491e:	1c41      	adds	r1, r0, #1
 8014920:	da02      	bge.n	8014928 <lrintf+0x1c>
 8014922:	2000      	movs	r0, #0
 8014924:	b002      	add	sp, #8
 8014926:	4770      	bx	lr
 8014928:	2816      	cmp	r0, #22
 801492a:	ea4f 71d3 	mov.w	r1, r3, lsr #31
 801492e:	dd0a      	ble.n	8014946 <lrintf+0x3a>
 8014930:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8014934:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8014938:	3a96      	subs	r2, #150	@ 0x96
 801493a:	fa03 f002 	lsl.w	r0, r3, r2
 801493e:	2900      	cmp	r1, #0
 8014940:	d0f0      	beq.n	8014924 <lrintf+0x18>
 8014942:	4240      	negs	r0, r0
 8014944:	e7ee      	b.n	8014924 <lrintf+0x18>
 8014946:	4b10      	ldr	r3, [pc, #64]	@ (8014988 <lrintf+0x7c>)
 8014948:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 801494c:	ed93 7a00 	vldr	s14, [r3]
 8014950:	ee37 0a00 	vadd.f32	s0, s14, s0
 8014954:	ed8d 0a01 	vstr	s0, [sp, #4]
 8014958:	eddd 7a01 	vldr	s15, [sp, #4]
 801495c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014960:	ee17 3a90 	vmov	r3, s15
 8014964:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8014968:	d0db      	beq.n	8014922 <lrintf+0x16>
 801496a:	f3c3 0016 	ubfx	r0, r3, #0, #23
 801496e:	f3c3 53c7 	ubfx	r3, r3, #23, #8
 8014972:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8014976:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 801497a:	40d8      	lsrs	r0, r3
 801497c:	e7df      	b.n	801493e <lrintf+0x32>
 801497e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8014982:	ee17 0a90 	vmov	r0, s15
 8014986:	e7cd      	b.n	8014924 <lrintf+0x18>
 8014988:	08014da8 	.word	0x08014da8

0801498c <_init>:
 801498c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801498e:	bf00      	nop
 8014990:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014992:	bc08      	pop	{r3}
 8014994:	469e      	mov	lr, r3
 8014996:	4770      	bx	lr

08014998 <_fini>:
 8014998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801499a:	bf00      	nop
 801499c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801499e:	bc08      	pop	{r3}
 80149a0:	469e      	mov	lr, r3
 80149a2:	4770      	bx	lr
