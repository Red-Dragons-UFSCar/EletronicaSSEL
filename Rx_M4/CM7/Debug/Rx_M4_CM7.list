
Rx_M4_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012320  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000408  080125c0  080125c0  000135c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080129c8  080129c8  00014300  2**0
                  CONTENTS
  4 .ARM          00000008  080129c8  080129c8  000139c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080129d0  080129d0  00014300  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080129d0  080129d0  000139d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080129d4  080129d4  000139d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000300  24000000  080129d8  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000022ac  24000300  08012cd8  00014300  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  240025ac  08012cd8  000145ac  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00014300  2**0
                  CONTENTS, READONLY
 12 .debug_info   00024375  00000000  00000000  0001432e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004eb2  00000000  00000000  000386a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b00  00000000  00000000  0003d558  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000014b6  00000000  00000000  0003f058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003ffdb  00000000  00000000  0004050e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00027e3b  00000000  00000000  000804e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0018e236  00000000  00000000  000a8324  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0023655a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000803c  00000000  00000000  002365a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  0023e5dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000300 	.word	0x24000300
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080125a8 	.word	0x080125a8

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000304 	.word	0x24000304
 80002dc:	080125a8 	.word	0x080125a8

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96a 	b.w	800067c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	460c      	mov	r4, r1
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d14e      	bne.n	800046a <__udivmoddi4+0xaa>
 80003cc:	4694      	mov	ip, r2
 80003ce:	458c      	cmp	ip, r1
 80003d0:	4686      	mov	lr, r0
 80003d2:	fab2 f282 	clz	r2, r2
 80003d6:	d962      	bls.n	800049e <__udivmoddi4+0xde>
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0320 	rsb	r3, r2, #32
 80003de:	4091      	lsls	r1, r2
 80003e0:	fa20 f303 	lsr.w	r3, r0, r3
 80003e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003e8:	4319      	orrs	r1, r3
 80003ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80003ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003f2:	fa1f f68c 	uxth.w	r6, ip
 80003f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000402:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000406:	fb04 f106 	mul.w	r1, r4, r6
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f104 30ff 	add.w	r0, r4, #4294967295
 8000416:	f080 8112 	bcs.w	800063e <__udivmoddi4+0x27e>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 810f 	bls.w	800063e <__udivmoddi4+0x27e>
 8000420:	3c02      	subs	r4, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a59      	subs	r1, r3, r1
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb1 f0f7 	udiv	r0, r1, r7
 800042e:	fb07 1110 	mls	r1, r7, r0, r1
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f606 	mul.w	r6, r0, r6
 800043a:	429e      	cmp	r6, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x94>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 31ff 	add.w	r1, r0, #4294967295
 8000446:	f080 80fc 	bcs.w	8000642 <__udivmoddi4+0x282>
 800044a:	429e      	cmp	r6, r3
 800044c:	f240 80f9 	bls.w	8000642 <__udivmoddi4+0x282>
 8000450:	4463      	add	r3, ip
 8000452:	3802      	subs	r0, #2
 8000454:	1b9b      	subs	r3, r3, r6
 8000456:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800045a:	2100      	movs	r1, #0
 800045c:	b11d      	cbz	r5, 8000466 <__udivmoddi4+0xa6>
 800045e:	40d3      	lsrs	r3, r2
 8000460:	2200      	movs	r2, #0
 8000462:	e9c5 3200 	strd	r3, r2, [r5]
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d905      	bls.n	800047a <__udivmoddi4+0xba>
 800046e:	b10d      	cbz	r5, 8000474 <__udivmoddi4+0xb4>
 8000470:	e9c5 0100 	strd	r0, r1, [r5]
 8000474:	2100      	movs	r1, #0
 8000476:	4608      	mov	r0, r1
 8000478:	e7f5      	b.n	8000466 <__udivmoddi4+0xa6>
 800047a:	fab3 f183 	clz	r1, r3
 800047e:	2900      	cmp	r1, #0
 8000480:	d146      	bne.n	8000510 <__udivmoddi4+0x150>
 8000482:	42a3      	cmp	r3, r4
 8000484:	d302      	bcc.n	800048c <__udivmoddi4+0xcc>
 8000486:	4290      	cmp	r0, r2
 8000488:	f0c0 80f0 	bcc.w	800066c <__udivmoddi4+0x2ac>
 800048c:	1a86      	subs	r6, r0, r2
 800048e:	eb64 0303 	sbc.w	r3, r4, r3
 8000492:	2001      	movs	r0, #1
 8000494:	2d00      	cmp	r5, #0
 8000496:	d0e6      	beq.n	8000466 <__udivmoddi4+0xa6>
 8000498:	e9c5 6300 	strd	r6, r3, [r5]
 800049c:	e7e3      	b.n	8000466 <__udivmoddi4+0xa6>
 800049e:	2a00      	cmp	r2, #0
 80004a0:	f040 8090 	bne.w	80005c4 <__udivmoddi4+0x204>
 80004a4:	eba1 040c 	sub.w	r4, r1, ip
 80004a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ac:	fa1f f78c 	uxth.w	r7, ip
 80004b0:	2101      	movs	r1, #1
 80004b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ba:	fb08 4416 	mls	r4, r8, r6, r4
 80004be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004c2:	fb07 f006 	mul.w	r0, r7, r6
 80004c6:	4298      	cmp	r0, r3
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x11c>
 80004ca:	eb1c 0303 	adds.w	r3, ip, r3
 80004ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x11a>
 80004d4:	4298      	cmp	r0, r3
 80004d6:	f200 80cd 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004da:	4626      	mov	r6, r4
 80004dc:	1a1c      	subs	r4, r3, r0
 80004de:	fa1f f38e 	uxth.w	r3, lr
 80004e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004e6:	fb08 4410 	mls	r4, r8, r0, r4
 80004ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004ee:	fb00 f707 	mul.w	r7, r0, r7
 80004f2:	429f      	cmp	r7, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x148>
 80004f6:	eb1c 0303 	adds.w	r3, ip, r3
 80004fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80004fe:	d202      	bcs.n	8000506 <__udivmoddi4+0x146>
 8000500:	429f      	cmp	r7, r3
 8000502:	f200 80b0 	bhi.w	8000666 <__udivmoddi4+0x2a6>
 8000506:	4620      	mov	r0, r4
 8000508:	1bdb      	subs	r3, r3, r7
 800050a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800050e:	e7a5      	b.n	800045c <__udivmoddi4+0x9c>
 8000510:	f1c1 0620 	rsb	r6, r1, #32
 8000514:	408b      	lsls	r3, r1
 8000516:	fa22 f706 	lsr.w	r7, r2, r6
 800051a:	431f      	orrs	r7, r3
 800051c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000520:	fa04 f301 	lsl.w	r3, r4, r1
 8000524:	ea43 030c 	orr.w	r3, r3, ip
 8000528:	40f4      	lsrs	r4, r6
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	0c38      	lsrs	r0, r7, #16
 8000530:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000534:	fbb4 fef0 	udiv	lr, r4, r0
 8000538:	fa1f fc87 	uxth.w	ip, r7
 800053c:	fb00 441e 	mls	r4, r0, lr, r4
 8000540:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000544:	fb0e f90c 	mul.w	r9, lr, ip
 8000548:	45a1      	cmp	r9, r4
 800054a:	fa02 f201 	lsl.w	r2, r2, r1
 800054e:	d90a      	bls.n	8000566 <__udivmoddi4+0x1a6>
 8000550:	193c      	adds	r4, r7, r4
 8000552:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000556:	f080 8084 	bcs.w	8000662 <__udivmoddi4+0x2a2>
 800055a:	45a1      	cmp	r9, r4
 800055c:	f240 8081 	bls.w	8000662 <__udivmoddi4+0x2a2>
 8000560:	f1ae 0e02 	sub.w	lr, lr, #2
 8000564:	443c      	add	r4, r7
 8000566:	eba4 0409 	sub.w	r4, r4, r9
 800056a:	fa1f f983 	uxth.w	r9, r3
 800056e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000572:	fb00 4413 	mls	r4, r0, r3, r4
 8000576:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800057a:	fb03 fc0c 	mul.w	ip, r3, ip
 800057e:	45a4      	cmp	ip, r4
 8000580:	d907      	bls.n	8000592 <__udivmoddi4+0x1d2>
 8000582:	193c      	adds	r4, r7, r4
 8000584:	f103 30ff 	add.w	r0, r3, #4294967295
 8000588:	d267      	bcs.n	800065a <__udivmoddi4+0x29a>
 800058a:	45a4      	cmp	ip, r4
 800058c:	d965      	bls.n	800065a <__udivmoddi4+0x29a>
 800058e:	3b02      	subs	r3, #2
 8000590:	443c      	add	r4, r7
 8000592:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000596:	fba0 9302 	umull	r9, r3, r0, r2
 800059a:	eba4 040c 	sub.w	r4, r4, ip
 800059e:	429c      	cmp	r4, r3
 80005a0:	46ce      	mov	lr, r9
 80005a2:	469c      	mov	ip, r3
 80005a4:	d351      	bcc.n	800064a <__udivmoddi4+0x28a>
 80005a6:	d04e      	beq.n	8000646 <__udivmoddi4+0x286>
 80005a8:	b155      	cbz	r5, 80005c0 <__udivmoddi4+0x200>
 80005aa:	ebb8 030e 	subs.w	r3, r8, lr
 80005ae:	eb64 040c 	sbc.w	r4, r4, ip
 80005b2:	fa04 f606 	lsl.w	r6, r4, r6
 80005b6:	40cb      	lsrs	r3, r1
 80005b8:	431e      	orrs	r6, r3
 80005ba:	40cc      	lsrs	r4, r1
 80005bc:	e9c5 6400 	strd	r6, r4, [r5]
 80005c0:	2100      	movs	r1, #0
 80005c2:	e750      	b.n	8000466 <__udivmoddi4+0xa6>
 80005c4:	f1c2 0320 	rsb	r3, r2, #32
 80005c8:	fa20 f103 	lsr.w	r1, r0, r3
 80005cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d0:	fa24 f303 	lsr.w	r3, r4, r3
 80005d4:	4094      	lsls	r4, r2
 80005d6:	430c      	orrs	r4, r1
 80005d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80005e0:	fa1f f78c 	uxth.w	r7, ip
 80005e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005e8:	fb08 3110 	mls	r1, r8, r0, r3
 80005ec:	0c23      	lsrs	r3, r4, #16
 80005ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005f2:	fb00 f107 	mul.w	r1, r0, r7
 80005f6:	4299      	cmp	r1, r3
 80005f8:	d908      	bls.n	800060c <__udivmoddi4+0x24c>
 80005fa:	eb1c 0303 	adds.w	r3, ip, r3
 80005fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000602:	d22c      	bcs.n	800065e <__udivmoddi4+0x29e>
 8000604:	4299      	cmp	r1, r3
 8000606:	d92a      	bls.n	800065e <__udivmoddi4+0x29e>
 8000608:	3802      	subs	r0, #2
 800060a:	4463      	add	r3, ip
 800060c:	1a5b      	subs	r3, r3, r1
 800060e:	b2a4      	uxth	r4, r4
 8000610:	fbb3 f1f8 	udiv	r1, r3, r8
 8000614:	fb08 3311 	mls	r3, r8, r1, r3
 8000618:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800061c:	fb01 f307 	mul.w	r3, r1, r7
 8000620:	42a3      	cmp	r3, r4
 8000622:	d908      	bls.n	8000636 <__udivmoddi4+0x276>
 8000624:	eb1c 0404 	adds.w	r4, ip, r4
 8000628:	f101 36ff 	add.w	r6, r1, #4294967295
 800062c:	d213      	bcs.n	8000656 <__udivmoddi4+0x296>
 800062e:	42a3      	cmp	r3, r4
 8000630:	d911      	bls.n	8000656 <__udivmoddi4+0x296>
 8000632:	3902      	subs	r1, #2
 8000634:	4464      	add	r4, ip
 8000636:	1ae4      	subs	r4, r4, r3
 8000638:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800063c:	e739      	b.n	80004b2 <__udivmoddi4+0xf2>
 800063e:	4604      	mov	r4, r0
 8000640:	e6f0      	b.n	8000424 <__udivmoddi4+0x64>
 8000642:	4608      	mov	r0, r1
 8000644:	e706      	b.n	8000454 <__udivmoddi4+0x94>
 8000646:	45c8      	cmp	r8, r9
 8000648:	d2ae      	bcs.n	80005a8 <__udivmoddi4+0x1e8>
 800064a:	ebb9 0e02 	subs.w	lr, r9, r2
 800064e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000652:	3801      	subs	r0, #1
 8000654:	e7a8      	b.n	80005a8 <__udivmoddi4+0x1e8>
 8000656:	4631      	mov	r1, r6
 8000658:	e7ed      	b.n	8000636 <__udivmoddi4+0x276>
 800065a:	4603      	mov	r3, r0
 800065c:	e799      	b.n	8000592 <__udivmoddi4+0x1d2>
 800065e:	4630      	mov	r0, r6
 8000660:	e7d4      	b.n	800060c <__udivmoddi4+0x24c>
 8000662:	46d6      	mov	lr, sl
 8000664:	e77f      	b.n	8000566 <__udivmoddi4+0x1a6>
 8000666:	4463      	add	r3, ip
 8000668:	3802      	subs	r0, #2
 800066a:	e74d      	b.n	8000508 <__udivmoddi4+0x148>
 800066c:	4606      	mov	r6, r0
 800066e:	4623      	mov	r3, r4
 8000670:	4608      	mov	r0, r1
 8000672:	e70f      	b.n	8000494 <__udivmoddi4+0xd4>
 8000674:	3e02      	subs	r6, #2
 8000676:	4463      	add	r3, ip
 8000678:	e730      	b.n	80004dc <__udivmoddi4+0x11c>
 800067a:	bf00      	nop

0800067c <__aeabi_idiv0>:
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop

08000680 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000680:	b480      	push	{r7}
 8000682:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000684:	4b3d      	ldr	r3, [pc, #244]	@ (800077c <SystemInit+0xfc>)
 8000686:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800068a:	4a3c      	ldr	r2, [pc, #240]	@ (800077c <SystemInit+0xfc>)
 800068c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000690:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000694:	4b39      	ldr	r3, [pc, #228]	@ (800077c <SystemInit+0xfc>)
 8000696:	691b      	ldr	r3, [r3, #16]
 8000698:	4a38      	ldr	r2, [pc, #224]	@ (800077c <SystemInit+0xfc>)
 800069a:	f043 0310 	orr.w	r3, r3, #16
 800069e:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006a0:	4b37      	ldr	r3, [pc, #220]	@ (8000780 <SystemInit+0x100>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	f003 030f 	and.w	r3, r3, #15
 80006a8:	2b06      	cmp	r3, #6
 80006aa:	d807      	bhi.n	80006bc <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006ac:	4b34      	ldr	r3, [pc, #208]	@ (8000780 <SystemInit+0x100>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	f023 030f 	bic.w	r3, r3, #15
 80006b4:	4a32      	ldr	r2, [pc, #200]	@ (8000780 <SystemInit+0x100>)
 80006b6:	f043 0307 	orr.w	r3, r3, #7
 80006ba:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006bc:	4b31      	ldr	r3, [pc, #196]	@ (8000784 <SystemInit+0x104>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	4a30      	ldr	r2, [pc, #192]	@ (8000784 <SystemInit+0x104>)
 80006c2:	f043 0301 	orr.w	r3, r3, #1
 80006c6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006c8:	4b2e      	ldr	r3, [pc, #184]	@ (8000784 <SystemInit+0x104>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006ce:	4b2d      	ldr	r3, [pc, #180]	@ (8000784 <SystemInit+0x104>)
 80006d0:	681a      	ldr	r2, [r3, #0]
 80006d2:	492c      	ldr	r1, [pc, #176]	@ (8000784 <SystemInit+0x104>)
 80006d4:	4b2c      	ldr	r3, [pc, #176]	@ (8000788 <SystemInit+0x108>)
 80006d6:	4013      	ands	r3, r2
 80006d8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006da:	4b29      	ldr	r3, [pc, #164]	@ (8000780 <SystemInit+0x100>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	f003 0308 	and.w	r3, r3, #8
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d007      	beq.n	80006f6 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006e6:	4b26      	ldr	r3, [pc, #152]	@ (8000780 <SystemInit+0x100>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	f023 030f 	bic.w	r3, r3, #15
 80006ee:	4a24      	ldr	r2, [pc, #144]	@ (8000780 <SystemInit+0x100>)
 80006f0:	f043 0307 	orr.w	r3, r3, #7
 80006f4:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80006f6:	4b23      	ldr	r3, [pc, #140]	@ (8000784 <SystemInit+0x104>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80006fc:	4b21      	ldr	r3, [pc, #132]	@ (8000784 <SystemInit+0x104>)
 80006fe:	2200      	movs	r2, #0
 8000700:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000702:	4b20      	ldr	r3, [pc, #128]	@ (8000784 <SystemInit+0x104>)
 8000704:	2200      	movs	r2, #0
 8000706:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000708:	4b1e      	ldr	r3, [pc, #120]	@ (8000784 <SystemInit+0x104>)
 800070a:	4a20      	ldr	r2, [pc, #128]	@ (800078c <SystemInit+0x10c>)
 800070c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800070e:	4b1d      	ldr	r3, [pc, #116]	@ (8000784 <SystemInit+0x104>)
 8000710:	4a1f      	ldr	r2, [pc, #124]	@ (8000790 <SystemInit+0x110>)
 8000712:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000714:	4b1b      	ldr	r3, [pc, #108]	@ (8000784 <SystemInit+0x104>)
 8000716:	4a1f      	ldr	r2, [pc, #124]	@ (8000794 <SystemInit+0x114>)
 8000718:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800071a:	4b1a      	ldr	r3, [pc, #104]	@ (8000784 <SystemInit+0x104>)
 800071c:	2200      	movs	r2, #0
 800071e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000720:	4b18      	ldr	r3, [pc, #96]	@ (8000784 <SystemInit+0x104>)
 8000722:	4a1c      	ldr	r2, [pc, #112]	@ (8000794 <SystemInit+0x114>)
 8000724:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000726:	4b17      	ldr	r3, [pc, #92]	@ (8000784 <SystemInit+0x104>)
 8000728:	2200      	movs	r2, #0
 800072a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800072c:	4b15      	ldr	r3, [pc, #84]	@ (8000784 <SystemInit+0x104>)
 800072e:	4a19      	ldr	r2, [pc, #100]	@ (8000794 <SystemInit+0x114>)
 8000730:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000732:	4b14      	ldr	r3, [pc, #80]	@ (8000784 <SystemInit+0x104>)
 8000734:	2200      	movs	r2, #0
 8000736:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000738:	4b12      	ldr	r3, [pc, #72]	@ (8000784 <SystemInit+0x104>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	4a11      	ldr	r2, [pc, #68]	@ (8000784 <SystemInit+0x104>)
 800073e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000742:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000744:	4b0f      	ldr	r3, [pc, #60]	@ (8000784 <SystemInit+0x104>)
 8000746:	2200      	movs	r2, #0
 8000748:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800074a:	4b13      	ldr	r3, [pc, #76]	@ (8000798 <SystemInit+0x118>)
 800074c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800074e:	4a12      	ldr	r2, [pc, #72]	@ (8000798 <SystemInit+0x118>)
 8000750:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000754:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000756:	4b11      	ldr	r3, [pc, #68]	@ (800079c <SystemInit+0x11c>)
 8000758:	681a      	ldr	r2, [r3, #0]
 800075a:	4b11      	ldr	r3, [pc, #68]	@ (80007a0 <SystemInit+0x120>)
 800075c:	4013      	ands	r3, r2
 800075e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000762:	d202      	bcs.n	800076a <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000764:	4b0f      	ldr	r3, [pc, #60]	@ (80007a4 <SystemInit+0x124>)
 8000766:	2201      	movs	r2, #1
 8000768:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800076a:	4b0f      	ldr	r3, [pc, #60]	@ (80007a8 <SystemInit+0x128>)
 800076c:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000770:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000772:	bf00      	nop
 8000774:	46bd      	mov	sp, r7
 8000776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077a:	4770      	bx	lr
 800077c:	e000ed00 	.word	0xe000ed00
 8000780:	52002000 	.word	0x52002000
 8000784:	58024400 	.word	0x58024400
 8000788:	eaf6ed7f 	.word	0xeaf6ed7f
 800078c:	02020200 	.word	0x02020200
 8000790:	01ff0000 	.word	0x01ff0000
 8000794:	01010280 	.word	0x01010280
 8000798:	580000c0 	.word	0x580000c0
 800079c:	5c001000 	.word	0x5c001000
 80007a0:	ffff0000 	.word	0xffff0000
 80007a4:	51008108 	.word	0x51008108
 80007a8:	52004000 	.word	0x52004000

080007ac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b082      	sub	sp, #8
 80007b0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007b2:	4b19      	ldr	r3, [pc, #100]	@ (8000818 <MX_DMA_Init+0x6c>)
 80007b4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80007b8:	4a17      	ldr	r2, [pc, #92]	@ (8000818 <MX_DMA_Init+0x6c>)
 80007ba:	f043 0301 	orr.w	r3, r3, #1
 80007be:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80007c2:	4b15      	ldr	r3, [pc, #84]	@ (8000818 <MX_DMA_Init+0x6c>)
 80007c4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80007c8:	f003 0301 	and.w	r3, r3, #1
 80007cc:	607b      	str	r3, [r7, #4]
 80007ce:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80007d0:	2200      	movs	r2, #0
 80007d2:	2100      	movs	r1, #0
 80007d4:	200c      	movs	r0, #12
 80007d6:	f001 fef6 	bl	80025c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80007da:	200c      	movs	r0, #12
 80007dc:	f001 ff0d 	bl	80025fa <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 80007e0:	2200      	movs	r2, #0
 80007e2:	2100      	movs	r1, #0
 80007e4:	200e      	movs	r0, #14
 80007e6:	f001 feee 	bl	80025c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80007ea:	200e      	movs	r0, #14
 80007ec:	f001 ff05 	bl	80025fa <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 80007f0:	2200      	movs	r2, #0
 80007f2:	2100      	movs	r1, #0
 80007f4:	200f      	movs	r0, #15
 80007f6:	f001 fee6 	bl	80025c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80007fa:	200f      	movs	r0, #15
 80007fc:	f001 fefd 	bl	80025fa <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000800:	2200      	movs	r2, #0
 8000802:	2100      	movs	r1, #0
 8000804:	2010      	movs	r0, #16
 8000806:	f001 fede 	bl	80025c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800080a:	2010      	movs	r0, #16
 800080c:	f001 fef5 	bl	80025fa <HAL_NVIC_EnableIRQ>

}
 8000810:	bf00      	nop
 8000812:	3708      	adds	r7, #8
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}
 8000818:	58024400 	.word	0x58024400

0800081c <dshot_init>:
static void dshot_enable_dma_request();


/* Functions */
void dshot_init(dshot_type_e dshot_type)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b082      	sub	sp, #8
 8000820:	af00      	add	r7, sp, #0
 8000822:	4603      	mov	r3, r0
 8000824:	71fb      	strb	r3, [r7, #7]
	dshot_set_timer(dshot_type);
 8000826:	79fb      	ldrb	r3, [r7, #7]
 8000828:	4618      	mov	r0, r3
 800082a:	f000 f833 	bl	8000894 <dshot_set_timer>
	dshot_put_tc_callback_function();
 800082e:	f000 f8d3 	bl	80009d8 <dshot_put_tc_callback_function>
	dshot_start_pwm();
 8000832:	f000 f8ef 	bl	8000a14 <dshot_start_pwm>
}
 8000836:	bf00      	nop
 8000838:	3708      	adds	r7, #8
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}

0800083e <dshot_write>:

void dshot_write(uint16_t* motor_value)
{
 800083e:	b580      	push	{r7, lr}
 8000840:	b082      	sub	sp, #8
 8000842:	af00      	add	r7, sp, #0
 8000844:	6078      	str	r0, [r7, #4]
	dshot_prepare_dmabuffer_all(motor_value);
 8000846:	6878      	ldr	r0, [r7, #4]
 8000848:	f000 f962 	bl	8000b10 <dshot_prepare_dmabuffer_all>
	dshot_dma_start();
 800084c:	f000 f98c 	bl	8000b68 <dshot_dma_start>
	dshot_enable_dma_request();
 8000850:	f000 f9c2 	bl	8000bd8 <dshot_enable_dma_request>
}
 8000854:	bf00      	nop
 8000856:	3708      	adds	r7, #8
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}

0800085c <dshot_choose_type>:


/* Static functions */
static uint32_t dshot_choose_type(dshot_type_e dshot_type)
{
 800085c:	b480      	push	{r7}
 800085e:	b083      	sub	sp, #12
 8000860:	af00      	add	r7, sp, #0
 8000862:	4603      	mov	r3, r0
 8000864:	71fb      	strb	r3, [r7, #7]
	switch (dshot_type)
 8000866:	79fb      	ldrb	r3, [r7, #7]
 8000868:	2b01      	cmp	r3, #1
 800086a:	d003      	beq.n	8000874 <dshot_choose_type+0x18>
 800086c:	2b02      	cmp	r3, #2
 800086e:	d103      	bne.n	8000878 <dshot_choose_type+0x1c>
	{
		case(DSHOT600):
				return DSHOT600_HZ;
 8000870:	4b05      	ldr	r3, [pc, #20]	@ (8000888 <dshot_choose_type+0x2c>)
 8000872:	e002      	b.n	800087a <dshot_choose_type+0x1e>

		case(DSHOT300):
				return DSHOT300_HZ;
 8000874:	4b05      	ldr	r3, [pc, #20]	@ (800088c <dshot_choose_type+0x30>)
 8000876:	e000      	b.n	800087a <dshot_choose_type+0x1e>

		default:
		case(DSHOT150):
				return DSHOT150_HZ;
 8000878:	4b05      	ldr	r3, [pc, #20]	@ (8000890 <dshot_choose_type+0x34>)
	}
}
 800087a:	4618      	mov	r0, r3
 800087c:	370c      	adds	r7, #12
 800087e:	46bd      	mov	sp, r7
 8000880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000884:	4770      	bx	lr
 8000886:	bf00      	nop
 8000888:	00b71b00 	.word	0x00b71b00
 800088c:	005b8d80 	.word	0x005b8d80
 8000890:	002dc6c0 	.word	0x002dc6c0

08000894 <dshot_set_timer>:

static void dshot_set_timer(dshot_type_e dshot_type)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	ed2d 8b02 	vpush	{d8}
 800089a:	b084      	sub	sp, #16
 800089c:	af00      	add	r7, sp, #0
 800089e:	4603      	mov	r3, r0
 80008a0:	71fb      	strb	r3, [r7, #7]
	uint16_t dshot_prescaler;
	uint32_t timer_clock = TIMER_CLOCK; // all timer clock is same as SystemCoreClock in stm32f411
 80008a2:	4b27      	ldr	r3, [pc, #156]	@ (8000940 <dshot_set_timer+0xac>)
 80008a4:	60fb      	str	r3, [r7, #12]

	// Calculate prescaler by dshot type
	dshot_prescaler = lrintf((float) timer_clock / dshot_choose_type(dshot_type) + 0.01f) - 1;
 80008a6:	68fb      	ldr	r3, [r7, #12]
 80008a8:	ee07 3a90 	vmov	s15, r3
 80008ac:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 80008b0:	79fb      	ldrb	r3, [r7, #7]
 80008b2:	4618      	mov	r0, r3
 80008b4:	f7ff ffd2 	bl	800085c <dshot_choose_type>
 80008b8:	ee07 0a90 	vmov	s15, r0
 80008bc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80008c0:	eec8 7a07 	vdiv.f32	s15, s16, s14
 80008c4:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 8000944 <dshot_set_timer+0xb0>
 80008c8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80008cc:	eeb0 0a67 	vmov.f32	s0, s15
 80008d0:	f011 fdb0 	bl	8012434 <lrintf>
 80008d4:	4603      	mov	r3, r0
 80008d6:	b29b      	uxth	r3, r3
 80008d8:	3b01      	subs	r3, #1
 80008da:	817b      	strh	r3, [r7, #10]

	// motor1
	__HAL_TIM_SET_PRESCALER(MOTOR_1_TIM, dshot_prescaler);
 80008dc:	4b1a      	ldr	r3, [pc, #104]	@ (8000948 <dshot_set_timer+0xb4>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	897a      	ldrh	r2, [r7, #10]
 80008e2:	629a      	str	r2, [r3, #40]	@ 0x28
	__HAL_TIM_SET_AUTORELOAD(MOTOR_1_TIM, MOTOR_BITLENGTH);
 80008e4:	4b18      	ldr	r3, [pc, #96]	@ (8000948 <dshot_set_timer+0xb4>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	2214      	movs	r2, #20
 80008ea:	62da      	str	r2, [r3, #44]	@ 0x2c
 80008ec:	4b16      	ldr	r3, [pc, #88]	@ (8000948 <dshot_set_timer+0xb4>)
 80008ee:	2214      	movs	r2, #20
 80008f0:	60da      	str	r2, [r3, #12]

	// motor2
	__HAL_TIM_SET_PRESCALER(MOTOR_2_TIM, dshot_prescaler);
 80008f2:	4b16      	ldr	r3, [pc, #88]	@ (800094c <dshot_set_timer+0xb8>)
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	897a      	ldrh	r2, [r7, #10]
 80008f8:	629a      	str	r2, [r3, #40]	@ 0x28
	__HAL_TIM_SET_AUTORELOAD(MOTOR_2_TIM, MOTOR_BITLENGTH);
 80008fa:	4b14      	ldr	r3, [pc, #80]	@ (800094c <dshot_set_timer+0xb8>)
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	2214      	movs	r2, #20
 8000900:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000902:	4b12      	ldr	r3, [pc, #72]	@ (800094c <dshot_set_timer+0xb8>)
 8000904:	2214      	movs	r2, #20
 8000906:	60da      	str	r2, [r3, #12]

	// motor3
	__HAL_TIM_SET_PRESCALER(MOTOR_3_TIM, dshot_prescaler);
 8000908:	4b10      	ldr	r3, [pc, #64]	@ (800094c <dshot_set_timer+0xb8>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	897a      	ldrh	r2, [r7, #10]
 800090e:	629a      	str	r2, [r3, #40]	@ 0x28
	__HAL_TIM_SET_AUTORELOAD(MOTOR_3_TIM, MOTOR_BITLENGTH);
 8000910:	4b0e      	ldr	r3, [pc, #56]	@ (800094c <dshot_set_timer+0xb8>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	2214      	movs	r2, #20
 8000916:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000918:	4b0c      	ldr	r3, [pc, #48]	@ (800094c <dshot_set_timer+0xb8>)
 800091a:	2214      	movs	r2, #20
 800091c:	60da      	str	r2, [r3, #12]

	// motor4
	__HAL_TIM_SET_PRESCALER(MOTOR_4_TIM, dshot_prescaler);
 800091e:	4b0a      	ldr	r3, [pc, #40]	@ (8000948 <dshot_set_timer+0xb4>)
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	897a      	ldrh	r2, [r7, #10]
 8000924:	629a      	str	r2, [r3, #40]	@ 0x28
	__HAL_TIM_SET_AUTORELOAD(MOTOR_4_TIM, MOTOR_BITLENGTH);
 8000926:	4b08      	ldr	r3, [pc, #32]	@ (8000948 <dshot_set_timer+0xb4>)
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	2214      	movs	r2, #20
 800092c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800092e:	4b06      	ldr	r3, [pc, #24]	@ (8000948 <dshot_set_timer+0xb4>)
 8000930:	2214      	movs	r2, #20
 8000932:	60da      	str	r2, [r3, #12]
}
 8000934:	bf00      	nop
 8000936:	3710      	adds	r7, #16
 8000938:	46bd      	mov	sp, r7
 800093a:	ecbd 8b02 	vpop	{d8}
 800093e:	bd80      	pop	{r7, pc}
 8000940:	05f5e100 	.word	0x05f5e100
 8000944:	3c23d70a 	.word	0x3c23d70a
 8000948:	240005ac 	.word	0x240005ac
 800094c:	240004c8 	.word	0x240004c8

08000950 <dshot_dma_tc_callback>:

// __HAL_TIM_DISABLE_DMA is needed to eliminate the delay between different dshot signals
// I don't know why :(
static void dshot_dma_tc_callback(DMA_HandleTypeDef *hdma)
{
 8000950:	b480      	push	{r7}
 8000952:	b085      	sub	sp, #20
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
	TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800095c:	60fb      	str	r3, [r7, #12]

	if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800095e:	68fb      	ldr	r3, [r7, #12]
 8000960:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000962:	687a      	ldr	r2, [r7, #4]
 8000964:	429a      	cmp	r2, r3
 8000966:	d108      	bne.n	800097a <dshot_dma_tc_callback+0x2a>
	{
		__HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	68da      	ldr	r2, [r3, #12]
 800096e:	68fb      	ldr	r3, [r7, #12]
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8000976:	60da      	str	r2, [r3, #12]
	}
	else if(hdma == htim->hdma[TIM_DMA_ID_CC4])
	{
		__HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
	}
}
 8000978:	e028      	b.n	80009cc <dshot_dma_tc_callback+0x7c>
	else if(hdma == htim->hdma[TIM_DMA_ID_CC2])
 800097a:	68fb      	ldr	r3, [r7, #12]
 800097c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800097e:	687a      	ldr	r2, [r7, #4]
 8000980:	429a      	cmp	r2, r3
 8000982:	d108      	bne.n	8000996 <dshot_dma_tc_callback+0x46>
		__HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	68da      	ldr	r2, [r3, #12]
 800098a:	68fb      	ldr	r3, [r7, #12]
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8000992:	60da      	str	r2, [r3, #12]
}
 8000994:	e01a      	b.n	80009cc <dshot_dma_tc_callback+0x7c>
	else if(hdma == htim->hdma[TIM_DMA_ID_CC3])
 8000996:	68fb      	ldr	r3, [r7, #12]
 8000998:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800099a:	687a      	ldr	r2, [r7, #4]
 800099c:	429a      	cmp	r2, r3
 800099e:	d108      	bne.n	80009b2 <dshot_dma_tc_callback+0x62>
		__HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 80009a0:	68fb      	ldr	r3, [r7, #12]
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	68da      	ldr	r2, [r3, #12]
 80009a6:	68fb      	ldr	r3, [r7, #12]
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80009ae:	60da      	str	r2, [r3, #12]
}
 80009b0:	e00c      	b.n	80009cc <dshot_dma_tc_callback+0x7c>
	else if(hdma == htim->hdma[TIM_DMA_ID_CC4])
 80009b2:	68fb      	ldr	r3, [r7, #12]
 80009b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009b6:	687a      	ldr	r2, [r7, #4]
 80009b8:	429a      	cmp	r2, r3
 80009ba:	d107      	bne.n	80009cc <dshot_dma_tc_callback+0x7c>
		__HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	68da      	ldr	r2, [r3, #12]
 80009c2:	68fb      	ldr	r3, [r7, #12]
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80009ca:	60da      	str	r2, [r3, #12]
}
 80009cc:	bf00      	nop
 80009ce:	3714      	adds	r7, #20
 80009d0:	46bd      	mov	sp, r7
 80009d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d6:	4770      	bx	lr

080009d8 <dshot_put_tc_callback_function>:

static void dshot_put_tc_callback_function()
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
	// TIM_DMA_ID_CCx depends on timer channel
	MOTOR_1_TIM->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = dshot_dma_tc_callback;
 80009dc:	4b0a      	ldr	r3, [pc, #40]	@ (8000a08 <dshot_put_tc_callback_function+0x30>)
 80009de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009e0:	4a0a      	ldr	r2, [pc, #40]	@ (8000a0c <dshot_put_tc_callback_function+0x34>)
 80009e2:	63da      	str	r2, [r3, #60]	@ 0x3c
	MOTOR_2_TIM->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = dshot_dma_tc_callback;
 80009e4:	4b0a      	ldr	r3, [pc, #40]	@ (8000a10 <dshot_put_tc_callback_function+0x38>)
 80009e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80009e8:	4a08      	ldr	r2, [pc, #32]	@ (8000a0c <dshot_put_tc_callback_function+0x34>)
 80009ea:	63da      	str	r2, [r3, #60]	@ 0x3c
	MOTOR_3_TIM->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = dshot_dma_tc_callback;
 80009ec:	4b08      	ldr	r3, [pc, #32]	@ (8000a10 <dshot_put_tc_callback_function+0x38>)
 80009ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80009f0:	4a06      	ldr	r2, [pc, #24]	@ (8000a0c <dshot_put_tc_callback_function+0x34>)
 80009f2:	63da      	str	r2, [r3, #60]	@ 0x3c
	MOTOR_4_TIM->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = dshot_dma_tc_callback;
 80009f4:	4b04      	ldr	r3, [pc, #16]	@ (8000a08 <dshot_put_tc_callback_function+0x30>)
 80009f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80009f8:	4a04      	ldr	r2, [pc, #16]	@ (8000a0c <dshot_put_tc_callback_function+0x34>)
 80009fa:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80009fc:	bf00      	nop
 80009fe:	46bd      	mov	sp, r7
 8000a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop
 8000a08:	240005ac 	.word	0x240005ac
 8000a0c:	08000951 	.word	0x08000951
 8000a10:	240004c8 	.word	0x240004c8

08000a14 <dshot_start_pwm>:

static void dshot_start_pwm()
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
	// Start the timer channel now.
    // Enabling/disabling DMA request can restart a new cycle without PWM start/stop.
  	HAL_TIM_PWM_Start(MOTOR_1_TIM, MOTOR_1_TIM_CHANNEL);
 8000a18:	210c      	movs	r1, #12
 8000a1a:	4808      	ldr	r0, [pc, #32]	@ (8000a3c <dshot_start_pwm+0x28>)
 8000a1c:	f008 fbb8 	bl	8009190 <HAL_TIM_PWM_Start>
  	HAL_TIM_PWM_Start(MOTOR_2_TIM, MOTOR_2_TIM_CHANNEL);
 8000a20:	2108      	movs	r1, #8
 8000a22:	4807      	ldr	r0, [pc, #28]	@ (8000a40 <dshot_start_pwm+0x2c>)
 8000a24:	f008 fbb4 	bl	8009190 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(MOTOR_3_TIM, MOTOR_3_TIM_CHANNEL);
 8000a28:	2100      	movs	r1, #0
 8000a2a:	4805      	ldr	r0, [pc, #20]	@ (8000a40 <dshot_start_pwm+0x2c>)
 8000a2c:	f008 fbb0 	bl	8009190 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(MOTOR_4_TIM, MOTOR_4_TIM_CHANNEL);
 8000a30:	2104      	movs	r1, #4
 8000a32:	4802      	ldr	r0, [pc, #8]	@ (8000a3c <dshot_start_pwm+0x28>)
 8000a34:	f008 fbac 	bl	8009190 <HAL_TIM_PWM_Start>
}
 8000a38:	bf00      	nop
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	240005ac 	.word	0x240005ac
 8000a40:	240004c8 	.word	0x240004c8

08000a44 <dshot_prepare_packet>:

static uint16_t dshot_prepare_packet(uint16_t value)
{
 8000a44:	b480      	push	{r7}
 8000a46:	b087      	sub	sp, #28
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	80fb      	strh	r3, [r7, #6]
	uint16_t packet;
	bool dshot_telemetry = false;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	72fb      	strb	r3, [r7, #11]

	packet = (value << 1) | (dshot_telemetry ? 1 : 0);
 8000a52:	88fb      	ldrh	r3, [r7, #6]
 8000a54:	005b      	lsls	r3, r3, #1
 8000a56:	b21a      	sxth	r2, r3
 8000a58:	7afb      	ldrb	r3, [r7, #11]
 8000a5a:	b21b      	sxth	r3, r3
 8000a5c:	4313      	orrs	r3, r2
 8000a5e:	b21b      	sxth	r3, r3
 8000a60:	813b      	strh	r3, [r7, #8]

	// compute checksum
	unsigned csum = 0;
 8000a62:	2300      	movs	r3, #0
 8000a64:	617b      	str	r3, [r7, #20]
	unsigned csum_data = packet;
 8000a66:	893b      	ldrh	r3, [r7, #8]
 8000a68:	613b      	str	r3, [r7, #16]

	for(int i = 0; i < 3; i++)
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	60fb      	str	r3, [r7, #12]
 8000a6e:	e009      	b.n	8000a84 <dshot_prepare_packet+0x40>
	{
        csum ^=  csum_data; // xor data by nibbles
 8000a70:	697a      	ldr	r2, [r7, #20]
 8000a72:	693b      	ldr	r3, [r7, #16]
 8000a74:	4053      	eors	r3, r2
 8000a76:	617b      	str	r3, [r7, #20]
        csum_data >>= 4;
 8000a78:	693b      	ldr	r3, [r7, #16]
 8000a7a:	091b      	lsrs	r3, r3, #4
 8000a7c:	613b      	str	r3, [r7, #16]
	for(int i = 0; i < 3; i++)
 8000a7e:	68fb      	ldr	r3, [r7, #12]
 8000a80:	3301      	adds	r3, #1
 8000a82:	60fb      	str	r3, [r7, #12]
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	2b02      	cmp	r3, #2
 8000a88:	ddf2      	ble.n	8000a70 <dshot_prepare_packet+0x2c>
	}

	csum &= 0xf;
 8000a8a:	697b      	ldr	r3, [r7, #20]
 8000a8c:	f003 030f 	and.w	r3, r3, #15
 8000a90:	617b      	str	r3, [r7, #20]
	packet = (packet << 4) | csum;
 8000a92:	893b      	ldrh	r3, [r7, #8]
 8000a94:	011b      	lsls	r3, r3, #4
 8000a96:	b29a      	uxth	r2, r3
 8000a98:	697b      	ldr	r3, [r7, #20]
 8000a9a:	b29b      	uxth	r3, r3
 8000a9c:	4313      	orrs	r3, r2
 8000a9e:	813b      	strh	r3, [r7, #8]

	return packet;
 8000aa0:	893b      	ldrh	r3, [r7, #8]
}
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	371c      	adds	r7, #28
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aac:	4770      	bx	lr

08000aae <dshot_prepare_dmabuffer>:

// Convert 16 bits packet to 16 pwm signal
static void dshot_prepare_dmabuffer(uint32_t* motor_dmabuffer, uint16_t value)
{
 8000aae:	b580      	push	{r7, lr}
 8000ab0:	b084      	sub	sp, #16
 8000ab2:	af00      	add	r7, sp, #0
 8000ab4:	6078      	str	r0, [r7, #4]
 8000ab6:	460b      	mov	r3, r1
 8000ab8:	807b      	strh	r3, [r7, #2]
	uint16_t packet;
	packet = dshot_prepare_packet(value);
 8000aba:	887b      	ldrh	r3, [r7, #2]
 8000abc:	4618      	mov	r0, r3
 8000abe:	f7ff ffc1 	bl	8000a44 <dshot_prepare_packet>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	81fb      	strh	r3, [r7, #14]

	for(int i = 0; i < 16; i++)
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	60bb      	str	r3, [r7, #8]
 8000aca:	e011      	b.n	8000af0 <dshot_prepare_dmabuffer+0x42>
	{
		motor_dmabuffer[i] = (packet & 0x8000) ? MOTOR_BIT_1 : MOTOR_BIT_0;
 8000acc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	da01      	bge.n	8000ad8 <dshot_prepare_dmabuffer+0x2a>
 8000ad4:	220e      	movs	r2, #14
 8000ad6:	e000      	b.n	8000ada <dshot_prepare_dmabuffer+0x2c>
 8000ad8:	2207      	movs	r2, #7
 8000ada:	68bb      	ldr	r3, [r7, #8]
 8000adc:	009b      	lsls	r3, r3, #2
 8000ade:	6879      	ldr	r1, [r7, #4]
 8000ae0:	440b      	add	r3, r1
 8000ae2:	601a      	str	r2, [r3, #0]
		packet <<= 1;
 8000ae4:	89fb      	ldrh	r3, [r7, #14]
 8000ae6:	005b      	lsls	r3, r3, #1
 8000ae8:	81fb      	strh	r3, [r7, #14]
	for(int i = 0; i < 16; i++)
 8000aea:	68bb      	ldr	r3, [r7, #8]
 8000aec:	3301      	adds	r3, #1
 8000aee:	60bb      	str	r3, [r7, #8]
 8000af0:	68bb      	ldr	r3, [r7, #8]
 8000af2:	2b0f      	cmp	r3, #15
 8000af4:	ddea      	ble.n	8000acc <dshot_prepare_dmabuffer+0x1e>
	}

	motor_dmabuffer[16] = 0;
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	3340      	adds	r3, #64	@ 0x40
 8000afa:	2200      	movs	r2, #0
 8000afc:	601a      	str	r2, [r3, #0]
	motor_dmabuffer[17] = 0;
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	3344      	adds	r3, #68	@ 0x44
 8000b02:	2200      	movs	r2, #0
 8000b04:	601a      	str	r2, [r3, #0]
}
 8000b06:	bf00      	nop
 8000b08:	3710      	adds	r7, #16
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
	...

08000b10 <dshot_prepare_dmabuffer_all>:

static void dshot_prepare_dmabuffer_all(uint16_t* motor_value)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b082      	sub	sp, #8
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
	dshot_prepare_dmabuffer(motor1_dmabuffer, motor_value[0]);
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	881b      	ldrh	r3, [r3, #0]
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	480e      	ldr	r0, [pc, #56]	@ (8000b58 <dshot_prepare_dmabuffer_all+0x48>)
 8000b20:	f7ff ffc5 	bl	8000aae <dshot_prepare_dmabuffer>
	dshot_prepare_dmabuffer(motor2_dmabuffer, motor_value[1]);
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	3302      	adds	r3, #2
 8000b28:	881b      	ldrh	r3, [r3, #0]
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	480b      	ldr	r0, [pc, #44]	@ (8000b5c <dshot_prepare_dmabuffer_all+0x4c>)
 8000b2e:	f7ff ffbe 	bl	8000aae <dshot_prepare_dmabuffer>
	dshot_prepare_dmabuffer(motor3_dmabuffer, motor_value[2]);
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	3304      	adds	r3, #4
 8000b36:	881b      	ldrh	r3, [r3, #0]
 8000b38:	4619      	mov	r1, r3
 8000b3a:	4809      	ldr	r0, [pc, #36]	@ (8000b60 <dshot_prepare_dmabuffer_all+0x50>)
 8000b3c:	f7ff ffb7 	bl	8000aae <dshot_prepare_dmabuffer>
	dshot_prepare_dmabuffer(motor4_dmabuffer, motor_value[3]);
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	3306      	adds	r3, #6
 8000b44:	881b      	ldrh	r3, [r3, #0]
 8000b46:	4619      	mov	r1, r3
 8000b48:	4806      	ldr	r0, [pc, #24]	@ (8000b64 <dshot_prepare_dmabuffer_all+0x54>)
 8000b4a:	f7ff ffb0 	bl	8000aae <dshot_prepare_dmabuffer>
}
 8000b4e:	bf00      	nop
 8000b50:	3708      	adds	r7, #8
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	2400031c 	.word	0x2400031c
 8000b5c:	24000364 	.word	0x24000364
 8000b60:	240003ac 	.word	0x240003ac
 8000b64:	240003f4 	.word	0x240003f4

08000b68 <dshot_dma_start>:

static void dshot_dma_start()
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
	HAL_DMA_Start_IT(MOTOR_1_TIM->hdma[TIM_DMA_ID_CC4], (uint32_t)motor1_dmabuffer, (uint32_t)&MOTOR_1_TIM->Instance->CCR4, DSHOT_DMA_BUFFER_SIZE);
 8000b6c:	4b14      	ldr	r3, [pc, #80]	@ (8000bc0 <dshot_dma_start+0x58>)
 8000b6e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8000b70:	4914      	ldr	r1, [pc, #80]	@ (8000bc4 <dshot_dma_start+0x5c>)
 8000b72:	4b13      	ldr	r3, [pc, #76]	@ (8000bc0 <dshot_dma_start+0x58>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	3340      	adds	r3, #64	@ 0x40
 8000b78:	461a      	mov	r2, r3
 8000b7a:	2312      	movs	r3, #18
 8000b7c:	f002 f8c8 	bl	8002d10 <HAL_DMA_Start_IT>
	HAL_DMA_Start_IT(MOTOR_2_TIM->hdma[TIM_DMA_ID_CC3], (uint32_t)motor2_dmabuffer, (uint32_t)&MOTOR_2_TIM->Instance->CCR3, DSHOT_DMA_BUFFER_SIZE);
 8000b80:	4b11      	ldr	r3, [pc, #68]	@ (8000bc8 <dshot_dma_start+0x60>)
 8000b82:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8000b84:	4911      	ldr	r1, [pc, #68]	@ (8000bcc <dshot_dma_start+0x64>)
 8000b86:	4b10      	ldr	r3, [pc, #64]	@ (8000bc8 <dshot_dma_start+0x60>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	333c      	adds	r3, #60	@ 0x3c
 8000b8c:	461a      	mov	r2, r3
 8000b8e:	2312      	movs	r3, #18
 8000b90:	f002 f8be 	bl	8002d10 <HAL_DMA_Start_IT>
	HAL_DMA_Start_IT(MOTOR_3_TIM->hdma[TIM_DMA_ID_CC1], (uint32_t)motor3_dmabuffer, (uint32_t)&MOTOR_3_TIM->Instance->CCR1, DSHOT_DMA_BUFFER_SIZE);
 8000b94:	4b0c      	ldr	r3, [pc, #48]	@ (8000bc8 <dshot_dma_start+0x60>)
 8000b96:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8000b98:	490d      	ldr	r1, [pc, #52]	@ (8000bd0 <dshot_dma_start+0x68>)
 8000b9a:	4b0b      	ldr	r3, [pc, #44]	@ (8000bc8 <dshot_dma_start+0x60>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	3334      	adds	r3, #52	@ 0x34
 8000ba0:	461a      	mov	r2, r3
 8000ba2:	2312      	movs	r3, #18
 8000ba4:	f002 f8b4 	bl	8002d10 <HAL_DMA_Start_IT>
	HAL_DMA_Start_IT(MOTOR_4_TIM->hdma[TIM_DMA_ID_CC2], (uint32_t)motor4_dmabuffer, (uint32_t)&MOTOR_4_TIM->Instance->CCR2, DSHOT_DMA_BUFFER_SIZE);
 8000ba8:	4b05      	ldr	r3, [pc, #20]	@ (8000bc0 <dshot_dma_start+0x58>)
 8000baa:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8000bac:	4909      	ldr	r1, [pc, #36]	@ (8000bd4 <dshot_dma_start+0x6c>)
 8000bae:	4b04      	ldr	r3, [pc, #16]	@ (8000bc0 <dshot_dma_start+0x58>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	3338      	adds	r3, #56	@ 0x38
 8000bb4:	461a      	mov	r2, r3
 8000bb6:	2312      	movs	r3, #18
 8000bb8:	f002 f8aa 	bl	8002d10 <HAL_DMA_Start_IT>
}
 8000bbc:	bf00      	nop
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	240005ac 	.word	0x240005ac
 8000bc4:	2400031c 	.word	0x2400031c
 8000bc8:	240004c8 	.word	0x240004c8
 8000bcc:	24000364 	.word	0x24000364
 8000bd0:	240003ac 	.word	0x240003ac
 8000bd4:	240003f4 	.word	0x240003f4

08000bd8 <dshot_enable_dma_request>:

static void dshot_enable_dma_request()
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
	__HAL_TIM_ENABLE_DMA(MOTOR_1_TIM, TIM_DMA_CC4);
 8000bdc:	4b12      	ldr	r3, [pc, #72]	@ (8000c28 <dshot_enable_dma_request+0x50>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	68da      	ldr	r2, [r3, #12]
 8000be2:	4b11      	ldr	r3, [pc, #68]	@ (8000c28 <dshot_enable_dma_request+0x50>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8000bea:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_DMA(MOTOR_2_TIM, TIM_DMA_CC3);
 8000bec:	4b0f      	ldr	r3, [pc, #60]	@ (8000c2c <dshot_enable_dma_request+0x54>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	68da      	ldr	r2, [r3, #12]
 8000bf2:	4b0e      	ldr	r3, [pc, #56]	@ (8000c2c <dshot_enable_dma_request+0x54>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8000bfa:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_DMA(MOTOR_3_TIM, TIM_DMA_CC1);
 8000bfc:	4b0b      	ldr	r3, [pc, #44]	@ (8000c2c <dshot_enable_dma_request+0x54>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	68da      	ldr	r2, [r3, #12]
 8000c02:	4b0a      	ldr	r3, [pc, #40]	@ (8000c2c <dshot_enable_dma_request+0x54>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000c0a:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_DMA(MOTOR_4_TIM, TIM_DMA_CC2);
 8000c0c:	4b06      	ldr	r3, [pc, #24]	@ (8000c28 <dshot_enable_dma_request+0x50>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	68da      	ldr	r2, [r3, #12]
 8000c12:	4b05      	ldr	r3, [pc, #20]	@ (8000c28 <dshot_enable_dma_request+0x50>)
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8000c1a:	60da      	str	r2, [r3, #12]
}
 8000c1c:	bf00      	nop
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop
 8000c28:	240005ac 	.word	0x240005ac
 8000c2c:	240004c8 	.word	0x240004c8

08000c30 <MX_GPIO_Init>:
     PB13   ------> ETH_TXD1
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b08a      	sub	sp, #40	@ 0x28
 8000c34:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c36:	f107 0314 	add.w	r3, r7, #20
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	601a      	str	r2, [r3, #0]
 8000c3e:	605a      	str	r2, [r3, #4]
 8000c40:	609a      	str	r2, [r3, #8]
 8000c42:	60da      	str	r2, [r3, #12]
 8000c44:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c46:	4b48      	ldr	r3, [pc, #288]	@ (8000d68 <MX_GPIO_Init+0x138>)
 8000c48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c4c:	4a46      	ldr	r2, [pc, #280]	@ (8000d68 <MX_GPIO_Init+0x138>)
 8000c4e:	f043 0304 	orr.w	r3, r3, #4
 8000c52:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c56:	4b44      	ldr	r3, [pc, #272]	@ (8000d68 <MX_GPIO_Init+0x138>)
 8000c58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c5c:	f003 0304 	and.w	r3, r3, #4
 8000c60:	613b      	str	r3, [r7, #16]
 8000c62:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c64:	4b40      	ldr	r3, [pc, #256]	@ (8000d68 <MX_GPIO_Init+0x138>)
 8000c66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c6a:	4a3f      	ldr	r2, [pc, #252]	@ (8000d68 <MX_GPIO_Init+0x138>)
 8000c6c:	f043 0301 	orr.w	r3, r3, #1
 8000c70:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c74:	4b3c      	ldr	r3, [pc, #240]	@ (8000d68 <MX_GPIO_Init+0x138>)
 8000c76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c7a:	f003 0301 	and.w	r3, r3, #1
 8000c7e:	60fb      	str	r3, [r7, #12]
 8000c80:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c82:	4b39      	ldr	r3, [pc, #228]	@ (8000d68 <MX_GPIO_Init+0x138>)
 8000c84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c88:	4a37      	ldr	r2, [pc, #220]	@ (8000d68 <MX_GPIO_Init+0x138>)
 8000c8a:	f043 0302 	orr.w	r3, r3, #2
 8000c8e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c92:	4b35      	ldr	r3, [pc, #212]	@ (8000d68 <MX_GPIO_Init+0x138>)
 8000c94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c98:	f003 0302 	and.w	r3, r3, #2
 8000c9c:	60bb      	str	r3, [r7, #8]
 8000c9e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ca0:	4b31      	ldr	r3, [pc, #196]	@ (8000d68 <MX_GPIO_Init+0x138>)
 8000ca2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ca6:	4a30      	ldr	r2, [pc, #192]	@ (8000d68 <MX_GPIO_Init+0x138>)
 8000ca8:	f043 0308 	orr.w	r3, r3, #8
 8000cac:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000cb0:	4b2d      	ldr	r3, [pc, #180]	@ (8000d68 <MX_GPIO_Init+0x138>)
 8000cb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cb6:	f003 0308 	and.w	r3, r3, #8
 8000cba:	607b      	str	r3, [r7, #4]
 8000cbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000cbe:	4b2a      	ldr	r3, [pc, #168]	@ (8000d68 <MX_GPIO_Init+0x138>)
 8000cc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cc4:	4a28      	ldr	r2, [pc, #160]	@ (8000d68 <MX_GPIO_Init+0x138>)
 8000cc6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000cca:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000cce:	4b26      	ldr	r3, [pc, #152]	@ (8000d68 <MX_GPIO_Init+0x138>)
 8000cd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cd4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000cd8:	603b      	str	r3, [r7, #0]
 8000cda:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000cdc:	2332      	movs	r3, #50	@ 0x32
 8000cde:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce0:	2302      	movs	r3, #2
 8000ce2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000cec:	230b      	movs	r3, #11
 8000cee:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cf0:	f107 0314 	add.w	r3, r7, #20
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	481d      	ldr	r0, [pc, #116]	@ (8000d6c <MX_GPIO_Init+0x13c>)
 8000cf8:	f003 fdf6 	bl	80048e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000cfc:	2380      	movs	r3, #128	@ 0x80
 8000cfe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d00:	2302      	movs	r3, #2
 8000d02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d04:	2300      	movs	r3, #0
 8000d06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d0c:	230b      	movs	r3, #11
 8000d0e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d10:	f107 0314 	add.w	r3, r7, #20
 8000d14:	4619      	mov	r1, r3
 8000d16:	4816      	ldr	r0, [pc, #88]	@ (8000d70 <MX_GPIO_Init+0x140>)
 8000d18:	f003 fde6 	bl	80048e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000d1c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d20:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d22:	2302      	movs	r3, #2
 8000d24:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d26:	2300      	movs	r3, #0
 8000d28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d2e:	230b      	movs	r3, #11
 8000d30:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d32:	f107 0314 	add.w	r3, r7, #20
 8000d36:	4619      	mov	r1, r3
 8000d38:	480e      	ldr	r0, [pc, #56]	@ (8000d74 <MX_GPIO_Init+0x144>)
 8000d3a:	f003 fdd5 	bl	80048e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000d3e:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000d42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d44:	2302      	movs	r3, #2
 8000d46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d50:	230b      	movs	r3, #11
 8000d52:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d54:	f107 0314 	add.w	r3, r7, #20
 8000d58:	4619      	mov	r1, r3
 8000d5a:	4807      	ldr	r0, [pc, #28]	@ (8000d78 <MX_GPIO_Init+0x148>)
 8000d5c:	f003 fdc4 	bl	80048e8 <HAL_GPIO_Init>

}
 8000d60:	bf00      	nop
 8000d62:	3728      	adds	r7, #40	@ 0x28
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	58024400 	.word	0x58024400
 8000d6c:	58020800 	.word	0x58020800
 8000d70:	58020000 	.word	0x58020000
 8000d74:	58020400 	.word	0x58020400
 8000d78:	58021800 	.word	0x58021800

08000d7c <HAL_TIM_IC_CaptureCallback>:
		}
		xfr_ptr->sts_4to7 = 0; // M4 to M7 buffer is empty
	}
	return buffer; // return the buffer (pointer)
}
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8000d7c:	b480      	push	{r7}
 8000d7e:	b083      	sub	sp, #12
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
	contador = __HAL_TIM_GET_COUNTER(&htim4);
 8000d84:	4b05      	ldr	r3, [pc, #20]	@ (8000d9c <HAL_TIM_IC_CaptureCallback+0x20>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d8a:	4a05      	ldr	r2, [pc, #20]	@ (8000da0 <HAL_TIM_IC_CaptureCallback+0x24>)
 8000d8c:	6013      	str	r3, [r2, #0]
}
 8000d8e:	bf00      	nop
 8000d90:	370c      	adds	r7, #12
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr
 8000d9a:	bf00      	nop
 8000d9c:	24000560 	.word	0x24000560
 8000da0:	2400044c 	.word	0x2400044c

08000da4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b090      	sub	sp, #64	@ 0x40
 8000da8:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000daa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000dae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000db0:	bf00      	nop
 8000db2:	4b6c      	ldr	r3, [pc, #432]	@ (8000f64 <main+0x1c0>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d004      	beq.n	8000dc8 <main+0x24>
 8000dbe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000dc0:	1e5a      	subs	r2, r3, #1
 8000dc2:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	dcf4      	bgt.n	8000db2 <main+0xe>
  if ( timeout < 0 )
 8000dc8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	da01      	bge.n	8000dd2 <main+0x2e>
  {
  Error_Handler();
 8000dce:	f000 f95f 	bl	8001090 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dd2:	f001 fa5b 	bl	800228c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dd6:	f000 f8db 	bl	8000f90 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000dda:	4b62      	ldr	r3, [pc, #392]	@ (8000f64 <main+0x1c0>)
 8000ddc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000de0:	4a60      	ldr	r2, [pc, #384]	@ (8000f64 <main+0x1c0>)
 8000de2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000de6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000dea:	4b5e      	ldr	r3, [pc, #376]	@ (8000f64 <main+0x1c0>)
 8000dec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000df0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000df4:	607b      	str	r3, [r7, #4]
 8000df6:	687b      	ldr	r3, [r7, #4]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000df8:	2000      	movs	r0, #0
 8000dfa:	f003 ff59 	bl	8004cb0 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000dfe:	2100      	movs	r1, #0
 8000e00:	2000      	movs	r0, #0
 8000e02:	f003 ff6f 	bl	8004ce4 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000e06:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000e0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000e0c:	bf00      	nop
 8000e0e:	4b55      	ldr	r3, [pc, #340]	@ (8000f64 <main+0x1c0>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d104      	bne.n	8000e24 <main+0x80>
 8000e1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000e1c:	1e5a      	subs	r2, r3, #1
 8000e1e:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	dcf4      	bgt.n	8000e0e <main+0x6a>
if ( timeout < 0 )
 8000e24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	da01      	bge.n	8000e2e <main+0x8a>
{
Error_Handler();
 8000e2a:	f000 f931 	bl	8001090 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e2e:	f7ff feff 	bl	8000c30 <MX_GPIO_Init>
  MX_DMA_Init();
 8000e32:	f7ff fcbb 	bl	80007ac <MX_DMA_Init>
  MX_TIM2_Init();
 8000e36:	f000 fcd7 	bl	80017e8 <MX_TIM2_Init>
  MX_TIM5_Init();
 8000e3a:	f000 fddd 	bl	80019f8 <MX_TIM5_Init>
  MX_TIM3_Init();
 8000e3e:	f000 fd37 	bl	80018b0 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000e42:	f000 fd83 	bl	800194c <MX_TIM4_Init>
  MX_USB_DEVICE_Init();
 8000e46:	f00d ffed 	bl	800ee24 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  int count = 0;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_TIM_Encoder_Start_IT(&htim4, TIM_CHANNEL_ALL);
 8000e4e:	213c      	movs	r1, #60	@ 0x3c
 8000e50:	4845      	ldr	r0, [pc, #276]	@ (8000f68 <main+0x1c4>)
 8000e52:	f008 fb51 	bl	80094f8 <HAL_TIM_Encoder_Start_IT>
	uint8_t * xfr_data; // pointer to transfer data


	//initialize inter-core status pointers
	xfr_ptr->sts_4to7 = 0;
 8000e56:	4b45      	ldr	r3, [pc, #276]	@ (8000f6c <main+0x1c8>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	701a      	strb	r2, [r3, #0]
	xfr_ptr->sts_7to4 = 0;
 8000e5c:	4b43      	ldr	r3, [pc, #268]	@ (8000f6c <main+0x1c8>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	705a      	strb	r2, [r3, #1]
	extern uint16_t D[4];

	dshot_init(DSHOT150);
 8000e62:	2000      	movs	r0, #0
 8000e64:	f7ff fcda 	bl	800081c <dshot_init>
	  if (HAL_TIM_Base_Start_IT(&htim3) != HAL_OK)
 8000e68:	4841      	ldr	r0, [pc, #260]	@ (8000f70 <main+0x1cc>)
 8000e6a:	f008 f8c1 	bl	8008ff0 <HAL_TIM_Base_Start_IT>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d001      	beq.n	8000e78 <main+0xd4>
	    {
	      /* Starting Error */
	      Error_Handler();
 8000e74:	f000 f90c 	bl	8001090 <Error_Handler>
	    }
  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 8000e78:	2000      	movs	r0, #0
 8000e7a:	f001 f823 	bl	8001ec4 <BSP_LED_Init>
  BSP_LED_Init(LED_YELLOW);
 8000e7e:	2001      	movs	r0, #1
 8000e80:	f001 f820 	bl	8001ec4 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 8000e84:	2002      	movs	r0, #2
 8000e86:	f001 f81d 	bl	8001ec4 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8000e8a:	2101      	movs	r1, #1
 8000e8c:	2000      	movs	r0, #0
 8000e8e:	f001 f88f 	bl	8001fb0 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 8000e92:	4b38      	ldr	r3, [pc, #224]	@ (8000f74 <main+0x1d0>)
 8000e94:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000e98:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 8000e9a:	4b36      	ldr	r3, [pc, #216]	@ (8000f74 <main+0x1d0>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 8000ea0:	4b34      	ldr	r3, [pc, #208]	@ (8000f74 <main+0x1d0>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 8000ea6:	4b33      	ldr	r3, [pc, #204]	@ (8000f74 <main+0x1d0>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8000eac:	4b31      	ldr	r3, [pc, #196]	@ (8000f74 <main+0x1d0>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 8000eb2:	4930      	ldr	r1, [pc, #192]	@ (8000f74 <main+0x1d0>)
 8000eb4:	2000      	movs	r0, #0
 8000eb6:	f001 f90b 	bl	80020d0 <BSP_COM_Init>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d001      	beq.n	8000ec4 <main+0x120>
  {
    Error_Handler();
 8000ec0:	f000 f8e6 	bl	8001090 <Error_Handler>
  }

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  char message[40]={'\0'};
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	613b      	str	r3, [r7, #16]
 8000ec8:	f107 0314 	add.w	r3, r7, #20
 8000ecc:	2224      	movs	r2, #36	@ 0x24
 8000ece:	2100      	movs	r1, #0
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f00f fa52 	bl	801037a <memset>
  uint16_t zero[4] = {0,0,0,0};
 8000ed6:	f107 0308 	add.w	r3, r7, #8
 8000eda:	2200      	movs	r2, #0
 8000edc:	601a      	str	r2, [r3, #0]
 8000ede:	605a      	str	r2, [r3, #4]
	  	  for(int n=0;n<4;n++){
	  		  motores[n] = (Mensagem[n]*2048)/255;

	  	  }
	  	  */
	  	  motores[0]=0;
 8000ee0:	4b25      	ldr	r3, [pc, #148]	@ (8000f78 <main+0x1d4>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	801a      	strh	r2, [r3, #0]
	  	  if(count<5000){
 8000ee6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000ee8:	f241 3287 	movw	r2, #4999	@ 0x1387
 8000eec:	4293      	cmp	r3, r2
 8000eee:	dc09      	bgt.n	8000f04 <main+0x160>
	  		  ref[0] = 0;
 8000ef0:	4b22      	ldr	r3, [pc, #136]	@ (8000f7c <main+0x1d8>)
 8000ef2:	f04f 0200 	mov.w	r2, #0
 8000ef6:	601a      	str	r2, [r3, #0]
	  		dshot_write(zero);
 8000ef8:	f107 0308 	add.w	r3, r7, #8
 8000efc:	4618      	mov	r0, r3
 8000efe:	f7ff fc9e 	bl	800083e <dshot_write>
 8000f02:	e016      	b.n	8000f32 <main+0x18e>
	  	  } else if(count>=5000){
 8000f04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000f06:	f241 3287 	movw	r2, #4999	@ 0x1387
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	dd06      	ble.n	8000f1c <main+0x178>
	  		  ref[0] = -6;
 8000f0e:	4b1b      	ldr	r3, [pc, #108]	@ (8000f7c <main+0x1d8>)
 8000f10:	4a1b      	ldr	r2, [pc, #108]	@ (8000f80 <main+0x1dc>)
 8000f12:	601a      	str	r2, [r3, #0]
	  		  dshot_write(D);
 8000f14:	481b      	ldr	r0, [pc, #108]	@ (8000f84 <main+0x1e0>)
 8000f16:	f7ff fc92 	bl	800083e <dshot_write>
 8000f1a:	e00a      	b.n	8000f32 <main+0x18e>

	  	  } else if(count >= 15000){
 8000f1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000f1e:	f643 2297 	movw	r2, #14999	@ 0x3a97
 8000f22:	4293      	cmp	r3, r2
 8000f24:	dd05      	ble.n	8000f32 <main+0x18e>
	  		  ref[0] = -6;
 8000f26:	4b15      	ldr	r3, [pc, #84]	@ (8000f7c <main+0x1d8>)
 8000f28:	4a15      	ldr	r2, [pc, #84]	@ (8000f80 <main+0x1dc>)
 8000f2a:	601a      	str	r2, [r3, #0]
	  		  dshot_write(D);
 8000f2c:	4815      	ldr	r0, [pc, #84]	@ (8000f84 <main+0x1e0>)
 8000f2e:	f7ff fc86 	bl	800083e <dshot_write>
	  	  }

	  	  count++;
 8000f32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000f34:	3301      	adds	r3, #1
 8000f36:	63bb      	str	r3, [r7, #56]	@ 0x38

	  	  sprintf(message, "%f \n \r",velocidade);
 8000f38:	4b13      	ldr	r3, [pc, #76]	@ (8000f88 <main+0x1e4>)
 8000f3a:	edd3 7a00 	vldr	s15, [r3]
 8000f3e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000f42:	f107 0010 	add.w	r0, r7, #16
 8000f46:	ec53 2b17 	vmov	r2, r3, d7
 8000f4a:	4910      	ldr	r1, [pc, #64]	@ (8000f8c <main+0x1e8>)
 8000f4c:	f00f f9b2 	bl	80102b4 <siprintf>
	  	  CDC_Transmit_FS(message,sizeof(message));
 8000f50:	f107 0310 	add.w	r3, r7, #16
 8000f54:	2128      	movs	r1, #40	@ 0x28
 8000f56:	4618      	mov	r0, r3
 8000f58:	f00e f824 	bl	800efa4 <CDC_Transmit_FS>
	  	  HAL_Delay(1);
 8000f5c:	2001      	movs	r0, #1
 8000f5e:	f001 fa27 	bl	80023b0 <HAL_Delay>
  {
 8000f62:	e7bd      	b.n	8000ee0 <main+0x13c>
 8000f64:	58024400 	.word	0x58024400
 8000f68:	24000560 	.word	0x24000560
 8000f6c:	38001000 	.word	0x38001000
 8000f70:	24000514 	.word	0x24000514
 8000f74:	2400043c 	.word	0x2400043c
 8000f78:	24000454 	.word	0x24000454
 8000f7c:	24000008 	.word	0x24000008
 8000f80:	c0c00000 	.word	0xc0c00000
 8000f84:	24000490 	.word	0x24000490
 8000f88:	24000450 	.word	0x24000450
 8000f8c:	080125c0 	.word	0x080125c0

08000f90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b09c      	sub	sp, #112	@ 0x70
 8000f94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f96:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f9a:	224c      	movs	r2, #76	@ 0x4c
 8000f9c:	2100      	movs	r1, #0
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f00f f9eb 	bl	801037a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fa4:	1d3b      	adds	r3, r7, #4
 8000fa6:	2220      	movs	r2, #32
 8000fa8:	2100      	movs	r1, #0
 8000faa:	4618      	mov	r0, r3
 8000fac:	f00f f9e5 	bl	801037a <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000fb0:	2004      	movs	r0, #4
 8000fb2:	f005 f949 	bl	8006248 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	603b      	str	r3, [r7, #0]
 8000fba:	4b33      	ldr	r3, [pc, #204]	@ (8001088 <SystemClock_Config+0xf8>)
 8000fbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000fbe:	4a32      	ldr	r2, [pc, #200]	@ (8001088 <SystemClock_Config+0xf8>)
 8000fc0:	f023 0301 	bic.w	r3, r3, #1
 8000fc4:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000fc6:	4b30      	ldr	r3, [pc, #192]	@ (8001088 <SystemClock_Config+0xf8>)
 8000fc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000fca:	f003 0301 	and.w	r3, r3, #1
 8000fce:	603b      	str	r3, [r7, #0]
 8000fd0:	4b2e      	ldr	r3, [pc, #184]	@ (800108c <SystemClock_Config+0xfc>)
 8000fd2:	699b      	ldr	r3, [r3, #24]
 8000fd4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000fd8:	4a2c      	ldr	r2, [pc, #176]	@ (800108c <SystemClock_Config+0xfc>)
 8000fda:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000fde:	6193      	str	r3, [r2, #24]
 8000fe0:	4b2a      	ldr	r3, [pc, #168]	@ (800108c <SystemClock_Config+0xfc>)
 8000fe2:	699b      	ldr	r3, [r3, #24]
 8000fe4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000fe8:	603b      	str	r3, [r7, #0]
 8000fea:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000fec:	bf00      	nop
 8000fee:	4b27      	ldr	r3, [pc, #156]	@ (800108c <SystemClock_Config+0xfc>)
 8000ff0:	699b      	ldr	r3, [r3, #24]
 8000ff2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000ff6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000ffa:	d1f8      	bne.n	8000fee <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 8000ffc:	2322      	movs	r3, #34	@ 0x22
 8000ffe:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001000:	2301      	movs	r3, #1
 8001002:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001004:	2340      	movs	r3, #64	@ 0x40
 8001006:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001008:	2301      	movs	r3, #1
 800100a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800100c:	2302      	movs	r3, #2
 800100e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001010:	2300      	movs	r3, #0
 8001012:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001014:	2304      	movs	r3, #4
 8001016:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 25;
 8001018:	2319      	movs	r3, #25
 800101a:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800101c:	2302      	movs	r3, #2
 800101e:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8001020:	2305      	movs	r3, #5
 8001022:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001024:	2302      	movs	r3, #2
 8001026:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001028:	230c      	movs	r3, #12
 800102a:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800102c:	2300      	movs	r3, #0
 800102e:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001030:	2300      	movs	r3, #0
 8001032:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001034:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001038:	4618      	mov	r0, r3
 800103a:	f005 f96f 	bl	800631c <HAL_RCC_OscConfig>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d001      	beq.n	8001048 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8001044:	f000 f824 	bl	8001090 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001048:	233f      	movs	r3, #63	@ 0x3f
 800104a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800104c:	2303      	movs	r3, #3
 800104e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001050:	2300      	movs	r3, #0
 8001052:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001054:	2300      	movs	r3, #0
 8001056:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001058:	2340      	movs	r3, #64	@ 0x40
 800105a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800105c:	2340      	movs	r3, #64	@ 0x40
 800105e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001060:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001064:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001066:	2340      	movs	r3, #64	@ 0x40
 8001068:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800106a:	1d3b      	adds	r3, r7, #4
 800106c:	2104      	movs	r1, #4
 800106e:	4618      	mov	r0, r3
 8001070:	f005 fdae 	bl	8006bd0 <HAL_RCC_ClockConfig>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <SystemClock_Config+0xee>
  {
    Error_Handler();
 800107a:	f000 f809 	bl	8001090 <Error_Handler>
  }
}
 800107e:	bf00      	nop
 8001080:	3770      	adds	r7, #112	@ 0x70
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	58000400 	.word	0x58000400
 800108c:	58024800 	.word	0x58024800

08001090 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001094:	b672      	cpsid	i
}
 8001096:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001098:	bf00      	nop
 800109a:	e7fd      	b.n	8001098 <Error_Handler+0x8>

0800109c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800109c:	b480      	push	{r7}
 800109e:	b083      	sub	sp, #12
 80010a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010a2:	4b0a      	ldr	r3, [pc, #40]	@ (80010cc <HAL_MspInit+0x30>)
 80010a4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80010a8:	4a08      	ldr	r2, [pc, #32]	@ (80010cc <HAL_MspInit+0x30>)
 80010aa:	f043 0302 	orr.w	r3, r3, #2
 80010ae:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80010b2:	4b06      	ldr	r3, [pc, #24]	@ (80010cc <HAL_MspInit+0x30>)
 80010b4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80010b8:	f003 0302 	and.w	r3, r3, #2
 80010bc:	607b      	str	r3, [r7, #4]
 80010be:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010c0:	bf00      	nop
 80010c2:	370c      	adds	r7, #12
 80010c4:	46bd      	mov	sp, r7
 80010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ca:	4770      	bx	lr
 80010cc:	58024400 	.word	0x58024400

080010d0 <map>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

float map(float x, uint16_t in_min, uint16_t in_max, uint16_t out_min, uint16_t out_max) {
 80010d0:	b490      	push	{r4, r7}
 80010d2:	b084      	sub	sp, #16
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	ed87 0a03 	vstr	s0, [r7, #12]
 80010da:	4604      	mov	r4, r0
 80010dc:	4608      	mov	r0, r1
 80010de:	4611      	mov	r1, r2
 80010e0:	461a      	mov	r2, r3
 80010e2:	4623      	mov	r3, r4
 80010e4:	817b      	strh	r3, [r7, #10]
 80010e6:	4603      	mov	r3, r0
 80010e8:	813b      	strh	r3, [r7, #8]
 80010ea:	460b      	mov	r3, r1
 80010ec:	80fb      	strh	r3, [r7, #6]
 80010ee:	4613      	mov	r3, r2
 80010f0:	80bb      	strh	r3, [r7, #4]
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80010f2:	897b      	ldrh	r3, [r7, #10]
 80010f4:	ee07 3a90 	vmov	s15, r3
 80010f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010fc:	ed97 7a03 	vldr	s14, [r7, #12]
 8001100:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001104:	88ba      	ldrh	r2, [r7, #4]
 8001106:	88fb      	ldrh	r3, [r7, #6]
 8001108:	1ad3      	subs	r3, r2, r3
 800110a:	ee07 3a90 	vmov	s15, r3
 800110e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001112:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001116:	893a      	ldrh	r2, [r7, #8]
 8001118:	897b      	ldrh	r3, [r7, #10]
 800111a:	1ad3      	subs	r3, r2, r3
 800111c:	ee07 3a90 	vmov	s15, r3
 8001120:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001124:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001128:	88fb      	ldrh	r3, [r7, #6]
 800112a:	ee07 3a90 	vmov	s15, r3
 800112e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001132:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8001136:	eeb0 0a67 	vmov.f32	s0, s15
 800113a:	3710      	adds	r7, #16
 800113c:	46bd      	mov	sp, r7
 800113e:	bc90      	pop	{r4, r7}
 8001140:	4770      	bx	lr
	...

08001144 <Controle>:

void Controle(){
 8001144:	b580      	push	{r7, lr}
 8001146:	b08a      	sub	sp, #40	@ 0x28
 8001148:	af00      	add	r7, sp, #0
	float error[4];
	float deltaU[4];

	for(uint8_t n=0;n<4;n++){
 800114a:	2300      	movs	r3, #0
 800114c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001150:	e138      	b.n	80013c4 <Controle+0x280>
		error[n] =ref[n] -  speed[n];
 8001152:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001156:	4ad5      	ldr	r2, [pc, #852]	@ (80014ac <Controle+0x368>)
 8001158:	009b      	lsls	r3, r3, #2
 800115a:	4413      	add	r3, r2
 800115c:	ed93 7a00 	vldr	s14, [r3]
 8001160:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001164:	4ad2      	ldr	r2, [pc, #840]	@ (80014b0 <Controle+0x36c>)
 8001166:	009b      	lsls	r3, r3, #2
 8001168:	4413      	add	r3, r2
 800116a:	edd3 7a00 	vldr	s15, [r3]
 800116e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001172:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001176:	009b      	lsls	r3, r3, #2
 8001178:	3328      	adds	r3, #40	@ 0x28
 800117a:	443b      	add	r3, r7
 800117c:	3b14      	subs	r3, #20
 800117e:	edc3 7a00 	vstr	s15, [r3]
		deltaU[n] = Kc*(error[n]- preverror[n]) + error[n]*Ki -Kd*(speed[n]-2*prevspeed[n] + prevspeed2[n]);
 8001182:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001186:	009b      	lsls	r3, r3, #2
 8001188:	3328      	adds	r3, #40	@ 0x28
 800118a:	443b      	add	r3, r7
 800118c:	3b14      	subs	r3, #20
 800118e:	ed93 7a00 	vldr	s14, [r3]
 8001192:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001196:	4ac7      	ldr	r2, [pc, #796]	@ (80014b4 <Controle+0x370>)
 8001198:	009b      	lsls	r3, r3, #2
 800119a:	4413      	add	r3, r2
 800119c:	edd3 7a00 	vldr	s15, [r3]
 80011a0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80011a4:	4bc4      	ldr	r3, [pc, #784]	@ (80014b8 <Controle+0x374>)
 80011a6:	edd3 7a00 	vldr	s15, [r3]
 80011aa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011ae:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80011b2:	009b      	lsls	r3, r3, #2
 80011b4:	3328      	adds	r3, #40	@ 0x28
 80011b6:	443b      	add	r3, r7
 80011b8:	3b14      	subs	r3, #20
 80011ba:	edd3 6a00 	vldr	s13, [r3]
 80011be:	4bbf      	ldr	r3, [pc, #764]	@ (80014bc <Controle+0x378>)
 80011c0:	edd3 7a00 	vldr	s15, [r3]
 80011c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011c8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80011cc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80011d0:	4ab7      	ldr	r2, [pc, #732]	@ (80014b0 <Controle+0x36c>)
 80011d2:	009b      	lsls	r3, r3, #2
 80011d4:	4413      	add	r3, r2
 80011d6:	edd3 6a00 	vldr	s13, [r3]
 80011da:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80011de:	4ab8      	ldr	r2, [pc, #736]	@ (80014c0 <Controle+0x37c>)
 80011e0:	009b      	lsls	r3, r3, #2
 80011e2:	4413      	add	r3, r2
 80011e4:	edd3 7a00 	vldr	s15, [r3]
 80011e8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80011ec:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80011f0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80011f4:	4ab3      	ldr	r2, [pc, #716]	@ (80014c4 <Controle+0x380>)
 80011f6:	009b      	lsls	r3, r3, #2
 80011f8:	4413      	add	r3, r2
 80011fa:	edd3 7a00 	vldr	s15, [r3]
 80011fe:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001202:	4bb1      	ldr	r3, [pc, #708]	@ (80014c8 <Controle+0x384>)
 8001204:	edd3 7a00 	vldr	s15, [r3]
 8001208:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800120c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001210:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001214:	009b      	lsls	r3, r3, #2
 8001216:	3328      	adds	r3, #40	@ 0x28
 8001218:	443b      	add	r3, r7
 800121a:	3b24      	subs	r3, #36	@ 0x24
 800121c:	edc3 7a00 	vstr	s15, [r3]
		deltaU[n] = floor(deltaU[n]);
 8001220:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001224:	009b      	lsls	r3, r3, #2
 8001226:	3328      	adds	r3, #40	@ 0x28
 8001228:	443b      	add	r3, r7
 800122a:	3b24      	subs	r3, #36	@ 0x24
 800122c:	edd3 7a00 	vldr	s15, [r3]
 8001230:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001234:	eeb0 0b47 	vmov.f64	d0, d7
 8001238:	f011 f93e 	bl	80124b8 <floor>
 800123c:	eeb0 7b40 	vmov.f64	d7, d0
 8001240:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001244:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001248:	009b      	lsls	r3, r3, #2
 800124a:	3328      	adds	r3, #40	@ 0x28
 800124c:	443b      	add	r3, r7
 800124e:	3b24      	subs	r3, #36	@ 0x24
 8001250:	edc3 7a00 	vstr	s15, [r3]
		uM[n] = uM[n] + deltaU[n];
 8001254:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001258:	4a9c      	ldr	r2, [pc, #624]	@ (80014cc <Controle+0x388>)
 800125a:	009b      	lsls	r3, r3, #2
 800125c:	4413      	add	r3, r2
 800125e:	ed93 7a00 	vldr	s14, [r3]
 8001262:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001266:	009b      	lsls	r3, r3, #2
 8001268:	3328      	adds	r3, #40	@ 0x28
 800126a:	443b      	add	r3, r7
 800126c:	3b24      	subs	r3, #36	@ 0x24
 800126e:	edd3 7a00 	vldr	s15, [r3]
 8001272:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001276:	ee77 7a27 	vadd.f32	s15, s14, s15
 800127a:	4a94      	ldr	r2, [pc, #592]	@ (80014cc <Controle+0x388>)
 800127c:	009b      	lsls	r3, r3, #2
 800127e:	4413      	add	r3, r2
 8001280:	edc3 7a00 	vstr	s15, [r3]
		//saturador
		if( uM[n] <= -1024){
 8001284:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001288:	4a90      	ldr	r2, [pc, #576]	@ (80014cc <Controle+0x388>)
 800128a:	009b      	lsls	r3, r3, #2
 800128c:	4413      	add	r3, r2
 800128e:	edd3 7a00 	vldr	s15, [r3]
 8001292:	ed9f 7a8f 	vldr	s14, [pc, #572]	@ 80014d0 <Controle+0x38c>
 8001296:	eef4 7ac7 	vcmpe.f32	s15, s14
 800129a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800129e:	d806      	bhi.n	80012ae <Controle+0x16a>
			uM[n]= -1023;
 80012a0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80012a4:	4a89      	ldr	r2, [pc, #548]	@ (80014cc <Controle+0x388>)
 80012a6:	009b      	lsls	r3, r3, #2
 80012a8:	4413      	add	r3, r2
 80012aa:	4a8a      	ldr	r2, [pc, #552]	@ (80014d4 <Controle+0x390>)
 80012ac:	601a      	str	r2, [r3, #0]
		}
		if(uM[n]>=1024){
 80012ae:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80012b2:	4a86      	ldr	r2, [pc, #536]	@ (80014cc <Controle+0x388>)
 80012b4:	009b      	lsls	r3, r3, #2
 80012b6:	4413      	add	r3, r2
 80012b8:	edd3 7a00 	vldr	s15, [r3]
 80012bc:	ed9f 7a86 	vldr	s14, [pc, #536]	@ 80014d8 <Controle+0x394>
 80012c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012c8:	db06      	blt.n	80012d8 <Controle+0x194>
			uM[n]= 1023;
 80012ca:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80012ce:	4a7f      	ldr	r2, [pc, #508]	@ (80014cc <Controle+0x388>)
 80012d0:	009b      	lsls	r3, r3, #2
 80012d2:	4413      	add	r3, r2
 80012d4:	4a81      	ldr	r2, [pc, #516]	@ (80014dc <Controle+0x398>)
 80012d6:	601a      	str	r2, [r3, #0]

		} if(uM[n]<=0){
 80012d8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80012dc:	4a7b      	ldr	r2, [pc, #492]	@ (80014cc <Controle+0x388>)
 80012de:	009b      	lsls	r3, r3, #2
 80012e0:	4413      	add	r3, r2
 80012e2:	edd3 7a00 	vldr	s15, [r3]
 80012e6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80012ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012ee:	d811      	bhi.n	8001314 <Controle+0x1d0>
			uM[n]=uM[n]*(-1)+1024;
 80012f0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80012f4:	4a75      	ldr	r2, [pc, #468]	@ (80014cc <Controle+0x388>)
 80012f6:	009b      	lsls	r3, r3, #2
 80012f8:	4413      	add	r3, r2
 80012fa:	edd3 7a00 	vldr	s15, [r3]
 80012fe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001302:	ed9f 7a75 	vldr	s14, [pc, #468]	@ 80014d8 <Controle+0x394>
 8001306:	ee77 7a67 	vsub.f32	s15, s14, s15
 800130a:	4a70      	ldr	r2, [pc, #448]	@ (80014cc <Controle+0x388>)
 800130c:	009b      	lsls	r3, r3, #2
 800130e:	4413      	add	r3, r2
 8001310:	edc3 7a00 	vstr	s15, [r3]
		}
		if(uM[n]<1024){
 8001314:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001318:	4a6c      	ldr	r2, [pc, #432]	@ (80014cc <Controle+0x388>)
 800131a:	009b      	lsls	r3, r3, #2
 800131c:	4413      	add	r3, r2
 800131e:	edd3 7a00 	vldr	s15, [r3]
 8001322:	ed9f 7a6d 	vldr	s14, [pc, #436]	@ 80014d8 <Controle+0x394>
 8001326:	eef4 7ac7 	vcmpe.f32	s15, s14
 800132a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800132e:	d512      	bpl.n	8001356 <Controle+0x212>
			map(uM[n],0,1023,500,1023);
 8001330:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001334:	4a65      	ldr	r2, [pc, #404]	@ (80014cc <Controle+0x388>)
 8001336:	009b      	lsls	r3, r3, #2
 8001338:	4413      	add	r3, r2
 800133a:	edd3 7a00 	vldr	s15, [r3]
 800133e:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 8001342:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001346:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 800134a:	2000      	movs	r0, #0
 800134c:	eeb0 0a67 	vmov.f32	s0, s15
 8001350:	f7ff febe 	bl	80010d0 <map>
 8001354:	e020      	b.n	8001398 <Controle+0x254>
		} else if (uM[n]>1024){
 8001356:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800135a:	4a5c      	ldr	r2, [pc, #368]	@ (80014cc <Controle+0x388>)
 800135c:	009b      	lsls	r3, r3, #2
 800135e:	4413      	add	r3, r2
 8001360:	edd3 7a00 	vldr	s15, [r3]
 8001364:	ed9f 7a5c 	vldr	s14, [pc, #368]	@ 80014d8 <Controle+0x394>
 8001368:	eef4 7ac7 	vcmpe.f32	s15, s14
 800136c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001370:	dd12      	ble.n	8001398 <Controle+0x254>
			map(uM[n],1024,2047,1524,2047);
 8001372:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001376:	4a55      	ldr	r2, [pc, #340]	@ (80014cc <Controle+0x388>)
 8001378:	009b      	lsls	r3, r3, #2
 800137a:	4413      	add	r3, r2
 800137c:	edd3 7a00 	vldr	s15, [r3]
 8001380:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8001384:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8001388:	f240 71ff 	movw	r1, #2047	@ 0x7ff
 800138c:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8001390:	eeb0 0a67 	vmov.f32	s0, s15
 8001394:	f7ff fe9c 	bl	80010d0 <map>
		}
		D[n] = uM[n];
 8001398:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800139c:	4a4b      	ldr	r2, [pc, #300]	@ (80014cc <Controle+0x388>)
 800139e:	009b      	lsls	r3, r3, #2
 80013a0:	4413      	add	r3, r2
 80013a2:	edd3 7a00 	vldr	s15, [r3]
 80013a6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80013aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80013ae:	ee17 2a90 	vmov	r2, s15
 80013b2:	b291      	uxth	r1, r2
 80013b4:	4a4a      	ldr	r2, [pc, #296]	@ (80014e0 <Controle+0x39c>)
 80013b6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(uint8_t n=0;n<4;n++){
 80013ba:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80013be:	3301      	adds	r3, #1
 80013c0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80013c4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80013c8:	2b03      	cmp	r3, #3
 80013ca:	f67f aec2 	bls.w	8001152 <Controle+0xe>
	}


	cont = cont +1;
 80013ce:	4b45      	ldr	r3, [pc, #276]	@ (80014e4 <Controle+0x3a0>)
 80013d0:	781b      	ldrb	r3, [r3, #0]
 80013d2:	3301      	adds	r3, #1
 80013d4:	b2da      	uxtb	r2, r3
 80013d6:	4b43      	ldr	r3, [pc, #268]	@ (80014e4 <Controle+0x3a0>)
 80013d8:	701a      	strb	r2, [r3, #0]
	if(cont == 1){
 80013da:	4b42      	ldr	r3, [pc, #264]	@ (80014e4 <Controle+0x3a0>)
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	2b01      	cmp	r3, #1
 80013e0:	d126      	bne.n	8001430 <Controle+0x2ec>
		for(uint8_t n=0;n<4;n++){
 80013e2:	2300      	movs	r3, #0
 80013e4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80013e8:	e01d      	b.n	8001426 <Controle+0x2e2>
			prevspeed[n] = speed[n];
 80013ea:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80013ee:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80013f2:	492f      	ldr	r1, [pc, #188]	@ (80014b0 <Controle+0x36c>)
 80013f4:	0092      	lsls	r2, r2, #2
 80013f6:	440a      	add	r2, r1
 80013f8:	6812      	ldr	r2, [r2, #0]
 80013fa:	4931      	ldr	r1, [pc, #196]	@ (80014c0 <Controle+0x37c>)
 80013fc:	009b      	lsls	r3, r3, #2
 80013fe:	440b      	add	r3, r1
 8001400:	601a      	str	r2, [r3, #0]
			preverror[n] = error[n];
 8001402:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8001406:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800140a:	0092      	lsls	r2, r2, #2
 800140c:	3228      	adds	r2, #40	@ 0x28
 800140e:	443a      	add	r2, r7
 8001410:	3a14      	subs	r2, #20
 8001412:	6812      	ldr	r2, [r2, #0]
 8001414:	4927      	ldr	r1, [pc, #156]	@ (80014b4 <Controle+0x370>)
 8001416:	009b      	lsls	r3, r3, #2
 8001418:	440b      	add	r3, r1
 800141a:	601a      	str	r2, [r3, #0]
		for(uint8_t n=0;n<4;n++){
 800141c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001420:	3301      	adds	r3, #1
 8001422:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8001426:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800142a:	2b03      	cmp	r3, #3
 800142c:	d9dd      	bls.n	80013ea <Controle+0x2a6>
			prevspeed[n] = speed[n];
			preverror[n] = error[n];
		}
		cont = 1;
	}
}
 800142e:	e038      	b.n	80014a2 <Controle+0x35e>
	} else if(cont ==2){
 8001430:	4b2c      	ldr	r3, [pc, #176]	@ (80014e4 <Controle+0x3a0>)
 8001432:	781b      	ldrb	r3, [r3, #0]
 8001434:	2b02      	cmp	r3, #2
 8001436:	d134      	bne.n	80014a2 <Controle+0x35e>
		for(uint8_t n=0;n<4;n++){
 8001438:	2300      	movs	r3, #0
 800143a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 800143e:	e029      	b.n	8001494 <Controle+0x350>
			prevspeed2[n] = prevspeed[n];
 8001440:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 8001444:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8001448:	491d      	ldr	r1, [pc, #116]	@ (80014c0 <Controle+0x37c>)
 800144a:	0092      	lsls	r2, r2, #2
 800144c:	440a      	add	r2, r1
 800144e:	6812      	ldr	r2, [r2, #0]
 8001450:	491c      	ldr	r1, [pc, #112]	@ (80014c4 <Controle+0x380>)
 8001452:	009b      	lsls	r3, r3, #2
 8001454:	440b      	add	r3, r1
 8001456:	601a      	str	r2, [r3, #0]
			prevspeed[n] = speed[n];
 8001458:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 800145c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8001460:	4913      	ldr	r1, [pc, #76]	@ (80014b0 <Controle+0x36c>)
 8001462:	0092      	lsls	r2, r2, #2
 8001464:	440a      	add	r2, r1
 8001466:	6812      	ldr	r2, [r2, #0]
 8001468:	4915      	ldr	r1, [pc, #84]	@ (80014c0 <Controle+0x37c>)
 800146a:	009b      	lsls	r3, r3, #2
 800146c:	440b      	add	r3, r1
 800146e:	601a      	str	r2, [r3, #0]
			preverror[n] = error[n];
 8001470:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 8001474:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8001478:	0092      	lsls	r2, r2, #2
 800147a:	3228      	adds	r2, #40	@ 0x28
 800147c:	443a      	add	r2, r7
 800147e:	3a14      	subs	r2, #20
 8001480:	6812      	ldr	r2, [r2, #0]
 8001482:	490c      	ldr	r1, [pc, #48]	@ (80014b4 <Controle+0x370>)
 8001484:	009b      	lsls	r3, r3, #2
 8001486:	440b      	add	r3, r1
 8001488:	601a      	str	r2, [r3, #0]
		for(uint8_t n=0;n<4;n++){
 800148a:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800148e:	3301      	adds	r3, #1
 8001490:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8001494:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8001498:	2b03      	cmp	r3, #3
 800149a:	d9d1      	bls.n	8001440 <Controle+0x2fc>
		cont = 1;
 800149c:	4b11      	ldr	r3, [pc, #68]	@ (80014e4 <Controle+0x3a0>)
 800149e:	2201      	movs	r2, #1
 80014a0:	701a      	strb	r2, [r3, #0]
}
 80014a2:	bf00      	nop
 80014a4:	3728      	adds	r7, #40	@ 0x28
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	24000008 	.word	0x24000008
 80014b0:	240004b4 	.word	0x240004b4
 80014b4:	24000480 	.word	0x24000480
 80014b8:	24000018 	.word	0x24000018
 80014bc:	2400001c 	.word	0x2400001c
 80014c0:	24000460 	.word	0x24000460
 80014c4:	24000470 	.word	0x24000470
 80014c8:	2400045c 	.word	0x2400045c
 80014cc:	24000498 	.word	0x24000498
 80014d0:	c4800000 	.word	0xc4800000
 80014d4:	c47fc000 	.word	0xc47fc000
 80014d8:	44800000 	.word	0x44800000
 80014dc:	447fc000 	.word	0x447fc000
 80014e0:	24000490 	.word	0x24000490
 80014e4:	240004a8 	.word	0x240004a8

080014e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80014ec:	bf00      	nop
 80014ee:	e7fd      	b.n	80014ec <NMI_Handler+0x4>

080014f0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014f4:	bf00      	nop
 80014f6:	e7fd      	b.n	80014f4 <HardFault_Handler+0x4>

080014f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014fc:	bf00      	nop
 80014fe:	e7fd      	b.n	80014fc <MemManage_Handler+0x4>

08001500 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001504:	bf00      	nop
 8001506:	e7fd      	b.n	8001504 <BusFault_Handler+0x4>

08001508 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800150c:	bf00      	nop
 800150e:	e7fd      	b.n	800150c <UsageFault_Handler+0x4>

08001510 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001510:	b480      	push	{r7}
 8001512:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001514:	bf00      	nop
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr

0800151e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800151e:	b480      	push	{r7}
 8001520:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001522:	bf00      	nop
 8001524:	46bd      	mov	sp, r7
 8001526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152a:	4770      	bx	lr

0800152c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001530:	bf00      	nop
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr

0800153a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800153a:	b580      	push	{r7, lr}
 800153c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800153e:	f000 ff17 	bl	8002370 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001542:	bf00      	nop
 8001544:	bd80      	pop	{r7, pc}
	...

08001548 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch3);
 800154c:	4802      	ldr	r0, [pc, #8]	@ (8001558 <DMA1_Stream1_IRQHandler+0x10>)
 800154e:	f001 fe49 	bl	80031e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001552:	bf00      	nop
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	24000670 	.word	0x24000670

0800155c <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch4);
 8001560:	4802      	ldr	r0, [pc, #8]	@ (800156c <DMA1_Stream3_IRQHandler+0x10>)
 8001562:	f001 fe3f 	bl	80031e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001566:	bf00      	nop
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	24000760 	.word	0x24000760

08001570 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch2);
 8001574:	4802      	ldr	r0, [pc, #8]	@ (8001580 <DMA1_Stream4_IRQHandler+0x10>)
 8001576:	f001 fe35 	bl	80031e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800157a:	bf00      	nop
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	240006e8 	.word	0x240006e8

08001584 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 8001588:	4802      	ldr	r0, [pc, #8]	@ (8001594 <DMA1_Stream5_IRQHandler+0x10>)
 800158a:	f001 fe2b 	bl	80031e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800158e:	bf00      	nop
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	240005f8 	.word	0x240005f8

08001598 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800159c:	481e      	ldr	r0, [pc, #120]	@ (8001618 <TIM3_IRQHandler+0x80>)
 800159e:	f008 f859 	bl	8009654 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
  Enc_1 = TIM4->CNT;
 80015a2:	4b1e      	ldr	r3, [pc, #120]	@ (800161c <TIM3_IRQHandler+0x84>)
 80015a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015a6:	4a1e      	ldr	r2, [pc, #120]	@ (8001620 <TIM3_IRQHandler+0x88>)
 80015a8:	6013      	str	r3, [r2, #0]
  TIM4->CNT = 0;
 80015aa:	4b1c      	ldr	r3, [pc, #112]	@ (800161c <TIM3_IRQHandler+0x84>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	625a      	str	r2, [r3, #36]	@ 0x24
  vel_1 = Enc_1;
 80015b0:	4b1b      	ldr	r3, [pc, #108]	@ (8001620 <TIM3_IRQHandler+0x88>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	461a      	mov	r2, r3
 80015b6:	4b1b      	ldr	r3, [pc, #108]	@ (8001624 <TIM3_IRQHandler+0x8c>)
 80015b8:	601a      	str	r2, [r3, #0]
  if(vel_1>60000){
 80015ba:	4b1a      	ldr	r3, [pc, #104]	@ (8001624 <TIM3_IRQHandler+0x8c>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f64e 2260 	movw	r2, #60000	@ 0xea60
 80015c2:	4293      	cmp	r3, r2
 80015c4:	dd05      	ble.n	80015d2 <TIM3_IRQHandler+0x3a>
		  vel_1 = vel_1 - 65356;
 80015c6:	4b17      	ldr	r3, [pc, #92]	@ (8001624 <TIM3_IRQHandler+0x8c>)
 80015c8:	681a      	ldr	r2, [r3, #0]
 80015ca:	4b17      	ldr	r3, [pc, #92]	@ (8001628 <TIM3_IRQHandler+0x90>)
 80015cc:	4413      	add	r3, r2
 80015ce:	4a15      	ldr	r2, [pc, #84]	@ (8001624 <TIM3_IRQHandler+0x8c>)
 80015d0:	6013      	str	r3, [r2, #0]
  }
  speed[0] = vel_1/(81.92);
 80015d2:	4b14      	ldr	r3, [pc, #80]	@ (8001624 <TIM3_IRQHandler+0x8c>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	ee07 3a90 	vmov	s15, r3
 80015da:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80015de:	ed9f 5b0c 	vldr	d5, [pc, #48]	@ 8001610 <TIM3_IRQHandler+0x78>
 80015e2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80015e6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80015ea:	4b10      	ldr	r3, [pc, #64]	@ (800162c <TIM3_IRQHandler+0x94>)
 80015ec:	edc3 7a00 	vstr	s15, [r3]
  velocidade = speed[0];
 80015f0:	4b0e      	ldr	r3, [pc, #56]	@ (800162c <TIM3_IRQHandler+0x94>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a0e      	ldr	r2, [pc, #56]	@ (8001630 <TIM3_IRQHandler+0x98>)
 80015f6:	6013      	str	r3, [r2, #0]
  Controle();
 80015f8:	f7ff fda4 	bl	8001144 <Controle>

  HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_14);
 80015fc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001600:	480c      	ldr	r0, [pc, #48]	@ (8001634 <TIM3_IRQHandler+0x9c>)
 8001602:	f003 fb3a 	bl	8004c7a <HAL_GPIO_TogglePin>
  /* USER CODE END TIM3_IRQn 1 */
}
 8001606:	bf00      	nop
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	f3af 8000 	nop.w
 8001610:	47ae147b 	.word	0x47ae147b
 8001614:	40547ae1 	.word	0x40547ae1
 8001618:	24000514 	.word	0x24000514
 800161c:	40000800 	.word	0x40000800
 8001620:	240004ac 	.word	0x240004ac
 8001624:	240004b0 	.word	0x240004b0
 8001628:	ffff00b4 	.word	0xffff00b4
 800162c:	240004b4 	.word	0x240004b4
 8001630:	24000450 	.word	0x24000450
 8001634:	58020400 	.word	0x58020400

08001638 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 800163c:	2000      	movs	r0, #0
 800163e:	f000 fd29 	bl	8002094 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001642:	bf00      	nop
 8001644:	bd80      	pop	{r7, pc}
	...

08001648 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800164c:	4802      	ldr	r0, [pc, #8]	@ (8001658 <OTG_FS_IRQHandler+0x10>)
 800164e:	f003 fc9e 	bl	8004f8e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001652:	bf00      	nop
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	24001d5c 	.word	0x24001d5c

0800165c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0
  return 1;
 8001660:	2301      	movs	r3, #1
}
 8001662:	4618      	mov	r0, r3
 8001664:	46bd      	mov	sp, r7
 8001666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166a:	4770      	bx	lr

0800166c <_kill>:

int _kill(int pid, int sig)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b082      	sub	sp, #8
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
 8001674:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001676:	f00e fed3 	bl	8010420 <__errno>
 800167a:	4603      	mov	r3, r0
 800167c:	2216      	movs	r2, #22
 800167e:	601a      	str	r2, [r3, #0]
  return -1;
 8001680:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001684:	4618      	mov	r0, r3
 8001686:	3708      	adds	r7, #8
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}

0800168c <_exit>:

void _exit (int status)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b082      	sub	sp, #8
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001694:	f04f 31ff 	mov.w	r1, #4294967295
 8001698:	6878      	ldr	r0, [r7, #4]
 800169a:	f7ff ffe7 	bl	800166c <_kill>
  while (1) {}    /* Make sure we hang here */
 800169e:	bf00      	nop
 80016a0:	e7fd      	b.n	800169e <_exit+0x12>

080016a2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80016a2:	b580      	push	{r7, lr}
 80016a4:	b086      	sub	sp, #24
 80016a6:	af00      	add	r7, sp, #0
 80016a8:	60f8      	str	r0, [r7, #12]
 80016aa:	60b9      	str	r1, [r7, #8]
 80016ac:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016ae:	2300      	movs	r3, #0
 80016b0:	617b      	str	r3, [r7, #20]
 80016b2:	e00a      	b.n	80016ca <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80016b4:	f3af 8000 	nop.w
 80016b8:	4601      	mov	r1, r0
 80016ba:	68bb      	ldr	r3, [r7, #8]
 80016bc:	1c5a      	adds	r2, r3, #1
 80016be:	60ba      	str	r2, [r7, #8]
 80016c0:	b2ca      	uxtb	r2, r1
 80016c2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016c4:	697b      	ldr	r3, [r7, #20]
 80016c6:	3301      	adds	r3, #1
 80016c8:	617b      	str	r3, [r7, #20]
 80016ca:	697a      	ldr	r2, [r7, #20]
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	429a      	cmp	r2, r3
 80016d0:	dbf0      	blt.n	80016b4 <_read+0x12>
  }

  return len;
 80016d2:	687b      	ldr	r3, [r7, #4]
}
 80016d4:	4618      	mov	r0, r3
 80016d6:	3718      	adds	r7, #24
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}

080016dc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b086      	sub	sp, #24
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	60f8      	str	r0, [r7, #12]
 80016e4:	60b9      	str	r1, [r7, #8]
 80016e6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016e8:	2300      	movs	r3, #0
 80016ea:	617b      	str	r3, [r7, #20]
 80016ec:	e009      	b.n	8001702 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80016ee:	68bb      	ldr	r3, [r7, #8]
 80016f0:	1c5a      	adds	r2, r3, #1
 80016f2:	60ba      	str	r2, [r7, #8]
 80016f4:	781b      	ldrb	r3, [r3, #0]
 80016f6:	4618      	mov	r0, r3
 80016f8:	f000 fd4c 	bl	8002194 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	3301      	adds	r3, #1
 8001700:	617b      	str	r3, [r7, #20]
 8001702:	697a      	ldr	r2, [r7, #20]
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	429a      	cmp	r2, r3
 8001708:	dbf1      	blt.n	80016ee <_write+0x12>
  }
  return len;
 800170a:	687b      	ldr	r3, [r7, #4]
}
 800170c:	4618      	mov	r0, r3
 800170e:	3718      	adds	r7, #24
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}

08001714 <_close>:

int _close(int file)
{
 8001714:	b480      	push	{r7}
 8001716:	b083      	sub	sp, #12
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800171c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001720:	4618      	mov	r0, r3
 8001722:	370c      	adds	r7, #12
 8001724:	46bd      	mov	sp, r7
 8001726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172a:	4770      	bx	lr

0800172c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800172c:	b480      	push	{r7}
 800172e:	b083      	sub	sp, #12
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
 8001734:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800173c:	605a      	str	r2, [r3, #4]
  return 0;
 800173e:	2300      	movs	r3, #0
}
 8001740:	4618      	mov	r0, r3
 8001742:	370c      	adds	r7, #12
 8001744:	46bd      	mov	sp, r7
 8001746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174a:	4770      	bx	lr

0800174c <_isatty>:

int _isatty(int file)
{
 800174c:	b480      	push	{r7}
 800174e:	b083      	sub	sp, #12
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001754:	2301      	movs	r3, #1
}
 8001756:	4618      	mov	r0, r3
 8001758:	370c      	adds	r7, #12
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr

08001762 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001762:	b480      	push	{r7}
 8001764:	b085      	sub	sp, #20
 8001766:	af00      	add	r7, sp, #0
 8001768:	60f8      	str	r0, [r7, #12]
 800176a:	60b9      	str	r1, [r7, #8]
 800176c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800176e:	2300      	movs	r3, #0
}
 8001770:	4618      	mov	r0, r3
 8001772:	3714      	adds	r7, #20
 8001774:	46bd      	mov	sp, r7
 8001776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177a:	4770      	bx	lr

0800177c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b086      	sub	sp, #24
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001784:	4a14      	ldr	r2, [pc, #80]	@ (80017d8 <_sbrk+0x5c>)
 8001786:	4b15      	ldr	r3, [pc, #84]	@ (80017dc <_sbrk+0x60>)
 8001788:	1ad3      	subs	r3, r2, r3
 800178a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800178c:	697b      	ldr	r3, [r7, #20]
 800178e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001790:	4b13      	ldr	r3, [pc, #76]	@ (80017e0 <_sbrk+0x64>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d102      	bne.n	800179e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001798:	4b11      	ldr	r3, [pc, #68]	@ (80017e0 <_sbrk+0x64>)
 800179a:	4a12      	ldr	r2, [pc, #72]	@ (80017e4 <_sbrk+0x68>)
 800179c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800179e:	4b10      	ldr	r3, [pc, #64]	@ (80017e0 <_sbrk+0x64>)
 80017a0:	681a      	ldr	r2, [r3, #0]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	4413      	add	r3, r2
 80017a6:	693a      	ldr	r2, [r7, #16]
 80017a8:	429a      	cmp	r2, r3
 80017aa:	d207      	bcs.n	80017bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017ac:	f00e fe38 	bl	8010420 <__errno>
 80017b0:	4603      	mov	r3, r0
 80017b2:	220c      	movs	r2, #12
 80017b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017b6:	f04f 33ff 	mov.w	r3, #4294967295
 80017ba:	e009      	b.n	80017d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017bc:	4b08      	ldr	r3, [pc, #32]	@ (80017e0 <_sbrk+0x64>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017c2:	4b07      	ldr	r3, [pc, #28]	@ (80017e0 <_sbrk+0x64>)
 80017c4:	681a      	ldr	r2, [r3, #0]
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	4413      	add	r3, r2
 80017ca:	4a05      	ldr	r2, [pc, #20]	@ (80017e0 <_sbrk+0x64>)
 80017cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017ce:	68fb      	ldr	r3, [r7, #12]
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	3718      	adds	r7, #24
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	24080000 	.word	0x24080000
 80017dc:	00000400 	.word	0x00000400
 80017e0:	240004c4 	.word	0x240004c4
 80017e4:	240025b0 	.word	0x240025b0

080017e8 <MX_TIM2_Init>:
DMA_HandleTypeDef hdma_tim5_ch2;
DMA_HandleTypeDef hdma_tim5_ch4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b08a      	sub	sp, #40	@ 0x28
 80017ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017ee:	f107 031c 	add.w	r3, r7, #28
 80017f2:	2200      	movs	r2, #0
 80017f4:	601a      	str	r2, [r3, #0]
 80017f6:	605a      	str	r2, [r3, #4]
 80017f8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017fa:	463b      	mov	r3, r7
 80017fc:	2200      	movs	r2, #0
 80017fe:	601a      	str	r2, [r3, #0]
 8001800:	605a      	str	r2, [r3, #4]
 8001802:	609a      	str	r2, [r3, #8]
 8001804:	60da      	str	r2, [r3, #12]
 8001806:	611a      	str	r2, [r3, #16]
 8001808:	615a      	str	r2, [r3, #20]
 800180a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800180c:	4b27      	ldr	r3, [pc, #156]	@ (80018ac <MX_TIM2_Init+0xc4>)
 800180e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001812:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001814:	4b25      	ldr	r3, [pc, #148]	@ (80018ac <MX_TIM2_Init+0xc4>)
 8001816:	2200      	movs	r2, #0
 8001818:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800181a:	4b24      	ldr	r3, [pc, #144]	@ (80018ac <MX_TIM2_Init+0xc4>)
 800181c:	2200      	movs	r2, #0
 800181e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 8001820:	4b22      	ldr	r3, [pc, #136]	@ (80018ac <MX_TIM2_Init+0xc4>)
 8001822:	2200      	movs	r2, #0
 8001824:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001826:	4b21      	ldr	r3, [pc, #132]	@ (80018ac <MX_TIM2_Init+0xc4>)
 8001828:	2200      	movs	r2, #0
 800182a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800182c:	4b1f      	ldr	r3, [pc, #124]	@ (80018ac <MX_TIM2_Init+0xc4>)
 800182e:	2200      	movs	r2, #0
 8001830:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001832:	481e      	ldr	r0, [pc, #120]	@ (80018ac <MX_TIM2_Init+0xc4>)
 8001834:	f007 fc54 	bl	80090e0 <HAL_TIM_PWM_Init>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	d001      	beq.n	8001842 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800183e:	f7ff fc27 	bl	8001090 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001842:	2300      	movs	r3, #0
 8001844:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001846:	2300      	movs	r3, #0
 8001848:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800184a:	f107 031c 	add.w	r3, r7, #28
 800184e:	4619      	mov	r1, r3
 8001850:	4816      	ldr	r0, [pc, #88]	@ (80018ac <MX_TIM2_Init+0xc4>)
 8001852:	f008 fe7b 	bl	800a54c <HAL_TIMEx_MasterConfigSynchronization>
 8001856:	4603      	mov	r3, r0
 8001858:	2b00      	cmp	r3, #0
 800185a:	d001      	beq.n	8001860 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 800185c:	f7ff fc18 	bl	8001090 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001860:	2360      	movs	r3, #96	@ 0x60
 8001862:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001864:	2300      	movs	r3, #0
 8001866:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001868:	2300      	movs	r3, #0
 800186a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800186c:	2300      	movs	r3, #0
 800186e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001870:	463b      	mov	r3, r7
 8001872:	2200      	movs	r2, #0
 8001874:	4619      	mov	r1, r3
 8001876:	480d      	ldr	r0, [pc, #52]	@ (80018ac <MX_TIM2_Init+0xc4>)
 8001878:	f007 fff4 	bl	8009864 <HAL_TIM_PWM_ConfigChannel>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d001      	beq.n	8001886 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8001882:	f7ff fc05 	bl	8001090 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001886:	463b      	mov	r3, r7
 8001888:	2208      	movs	r2, #8
 800188a:	4619      	mov	r1, r3
 800188c:	4807      	ldr	r0, [pc, #28]	@ (80018ac <MX_TIM2_Init+0xc4>)
 800188e:	f007 ffe9 	bl	8009864 <HAL_TIM_PWM_ConfigChannel>
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	d001      	beq.n	800189c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001898:	f7ff fbfa 	bl	8001090 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800189c:	4803      	ldr	r0, [pc, #12]	@ (80018ac <MX_TIM2_Init+0xc4>)
 800189e:	f000 fa87 	bl	8001db0 <HAL_TIM_MspPostInit>

}
 80018a2:	bf00      	nop
 80018a4:	3728      	adds	r7, #40	@ 0x28
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	240004c8 	.word	0x240004c8

080018b0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b088      	sub	sp, #32
 80018b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018b6:	f107 0310 	add.w	r3, r7, #16
 80018ba:	2200      	movs	r2, #0
 80018bc:	601a      	str	r2, [r3, #0]
 80018be:	605a      	str	r2, [r3, #4]
 80018c0:	609a      	str	r2, [r3, #8]
 80018c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018c4:	1d3b      	adds	r3, r7, #4
 80018c6:	2200      	movs	r2, #0
 80018c8:	601a      	str	r2, [r3, #0]
 80018ca:	605a      	str	r2, [r3, #4]
 80018cc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80018ce:	4b1d      	ldr	r3, [pc, #116]	@ (8001944 <MX_TIM3_Init+0x94>)
 80018d0:	4a1d      	ldr	r2, [pc, #116]	@ (8001948 <MX_TIM3_Init+0x98>)
 80018d2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 9999;
 80018d4:	4b1b      	ldr	r3, [pc, #108]	@ (8001944 <MX_TIM3_Init+0x94>)
 80018d6:	f242 720f 	movw	r2, #9999	@ 0x270f
 80018da:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018dc:	4b19      	ldr	r3, [pc, #100]	@ (8001944 <MX_TIM3_Init+0x94>)
 80018de:	2200      	movs	r2, #0
 80018e0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 80018e2:	4b18      	ldr	r3, [pc, #96]	@ (8001944 <MX_TIM3_Init+0x94>)
 80018e4:	2263      	movs	r2, #99	@ 0x63
 80018e6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018e8:	4b16      	ldr	r3, [pc, #88]	@ (8001944 <MX_TIM3_Init+0x94>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018ee:	4b15      	ldr	r3, [pc, #84]	@ (8001944 <MX_TIM3_Init+0x94>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80018f4:	4813      	ldr	r0, [pc, #76]	@ (8001944 <MX_TIM3_Init+0x94>)
 80018f6:	f007 fb23 	bl	8008f40 <HAL_TIM_Base_Init>
 80018fa:	4603      	mov	r3, r0
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d001      	beq.n	8001904 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001900:	f7ff fbc6 	bl	8001090 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001904:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001908:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800190a:	f107 0310 	add.w	r3, r7, #16
 800190e:	4619      	mov	r1, r3
 8001910:	480c      	ldr	r0, [pc, #48]	@ (8001944 <MX_TIM3_Init+0x94>)
 8001912:	f008 f8bb 	bl	8009a8c <HAL_TIM_ConfigClockSource>
 8001916:	4603      	mov	r3, r0
 8001918:	2b00      	cmp	r3, #0
 800191a:	d001      	beq.n	8001920 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 800191c:	f7ff fbb8 	bl	8001090 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001920:	2300      	movs	r3, #0
 8001922:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001924:	2300      	movs	r3, #0
 8001926:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001928:	1d3b      	adds	r3, r7, #4
 800192a:	4619      	mov	r1, r3
 800192c:	4805      	ldr	r0, [pc, #20]	@ (8001944 <MX_TIM3_Init+0x94>)
 800192e:	f008 fe0d 	bl	800a54c <HAL_TIMEx_MasterConfigSynchronization>
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	d001      	beq.n	800193c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001938:	f7ff fbaa 	bl	8001090 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800193c:	bf00      	nop
 800193e:	3720      	adds	r7, #32
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}
 8001944:	24000514 	.word	0x24000514
 8001948:	40000400 	.word	0x40000400

0800194c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b08c      	sub	sp, #48	@ 0x30
 8001950:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001952:	f107 030c 	add.w	r3, r7, #12
 8001956:	2224      	movs	r2, #36	@ 0x24
 8001958:	2100      	movs	r1, #0
 800195a:	4618      	mov	r0, r3
 800195c:	f00e fd0d 	bl	801037a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001960:	463b      	mov	r3, r7
 8001962:	2200      	movs	r2, #0
 8001964:	601a      	str	r2, [r3, #0]
 8001966:	605a      	str	r2, [r3, #4]
 8001968:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800196a:	4b21      	ldr	r3, [pc, #132]	@ (80019f0 <MX_TIM4_Init+0xa4>)
 800196c:	4a21      	ldr	r2, [pc, #132]	@ (80019f4 <MX_TIM4_Init+0xa8>)
 800196e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001970:	4b1f      	ldr	r3, [pc, #124]	@ (80019f0 <MX_TIM4_Init+0xa4>)
 8001972:	2200      	movs	r2, #0
 8001974:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001976:	4b1e      	ldr	r3, [pc, #120]	@ (80019f0 <MX_TIM4_Init+0xa4>)
 8001978:	2200      	movs	r2, #0
 800197a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800197c:	4b1c      	ldr	r3, [pc, #112]	@ (80019f0 <MX_TIM4_Init+0xa4>)
 800197e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001982:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001984:	4b1a      	ldr	r3, [pc, #104]	@ (80019f0 <MX_TIM4_Init+0xa4>)
 8001986:	2200      	movs	r2, #0
 8001988:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800198a:	4b19      	ldr	r3, [pc, #100]	@ (80019f0 <MX_TIM4_Init+0xa4>)
 800198c:	2200      	movs	r2, #0
 800198e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001990:	2303      	movs	r3, #3
 8001992:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8001994:	2302      	movs	r3, #2
 8001996:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001998:	2301      	movs	r3, #1
 800199a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800199c:	2300      	movs	r3, #0
 800199e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80019a0:	2300      	movs	r3, #0
 80019a2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 80019a4:	2302      	movs	r3, #2
 80019a6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80019a8:	2301      	movs	r3, #1
 80019aa:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80019ac:	2300      	movs	r3, #0
 80019ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80019b0:	2300      	movs	r3, #0
 80019b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80019b4:	f107 030c 	add.w	r3, r7, #12
 80019b8:	4619      	mov	r1, r3
 80019ba:	480d      	ldr	r0, [pc, #52]	@ (80019f0 <MX_TIM4_Init+0xa4>)
 80019bc:	f007 fcf6 	bl	80093ac <HAL_TIM_Encoder_Init>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d001      	beq.n	80019ca <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 80019c6:	f7ff fb63 	bl	8001090 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019ca:	2300      	movs	r3, #0
 80019cc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019ce:	2300      	movs	r3, #0
 80019d0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80019d2:	463b      	mov	r3, r7
 80019d4:	4619      	mov	r1, r3
 80019d6:	4806      	ldr	r0, [pc, #24]	@ (80019f0 <MX_TIM4_Init+0xa4>)
 80019d8:	f008 fdb8 	bl	800a54c <HAL_TIMEx_MasterConfigSynchronization>
 80019dc:	4603      	mov	r3, r0
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d001      	beq.n	80019e6 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 80019e2:	f7ff fb55 	bl	8001090 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80019e6:	bf00      	nop
 80019e8:	3730      	adds	r7, #48	@ 0x30
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	24000560 	.word	0x24000560
 80019f4:	40000800 	.word	0x40000800

080019f8 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b08a      	sub	sp, #40	@ 0x28
 80019fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019fe:	f107 031c 	add.w	r3, r7, #28
 8001a02:	2200      	movs	r2, #0
 8001a04:	601a      	str	r2, [r3, #0]
 8001a06:	605a      	str	r2, [r3, #4]
 8001a08:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a0a:	463b      	mov	r3, r7
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	601a      	str	r2, [r3, #0]
 8001a10:	605a      	str	r2, [r3, #4]
 8001a12:	609a      	str	r2, [r3, #8]
 8001a14:	60da      	str	r2, [r3, #12]
 8001a16:	611a      	str	r2, [r3, #16]
 8001a18:	615a      	str	r2, [r3, #20]
 8001a1a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001a1c:	4b26      	ldr	r3, [pc, #152]	@ (8001ab8 <MX_TIM5_Init+0xc0>)
 8001a1e:	4a27      	ldr	r2, [pc, #156]	@ (8001abc <MX_TIM5_Init+0xc4>)
 8001a20:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001a22:	4b25      	ldr	r3, [pc, #148]	@ (8001ab8 <MX_TIM5_Init+0xc0>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a28:	4b23      	ldr	r3, [pc, #140]	@ (8001ab8 <MX_TIM5_Init+0xc0>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 0;
 8001a2e:	4b22      	ldr	r3, [pc, #136]	@ (8001ab8 <MX_TIM5_Init+0xc0>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a34:	4b20      	ldr	r3, [pc, #128]	@ (8001ab8 <MX_TIM5_Init+0xc0>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a3a:	4b1f      	ldr	r3, [pc, #124]	@ (8001ab8 <MX_TIM5_Init+0xc0>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001a40:	481d      	ldr	r0, [pc, #116]	@ (8001ab8 <MX_TIM5_Init+0xc0>)
 8001a42:	f007 fb4d 	bl	80090e0 <HAL_TIM_PWM_Init>
 8001a46:	4603      	mov	r3, r0
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d001      	beq.n	8001a50 <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 8001a4c:	f7ff fb20 	bl	8001090 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a50:	2300      	movs	r3, #0
 8001a52:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a54:	2300      	movs	r3, #0
 8001a56:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001a58:	f107 031c 	add.w	r3, r7, #28
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	4816      	ldr	r0, [pc, #88]	@ (8001ab8 <MX_TIM5_Init+0xc0>)
 8001a60:	f008 fd74 	bl	800a54c <HAL_TIMEx_MasterConfigSynchronization>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d001      	beq.n	8001a6e <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 8001a6a:	f7ff fb11 	bl	8001090 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a6e:	2360      	movs	r3, #96	@ 0x60
 8001a70:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001a72:	2300      	movs	r3, #0
 8001a74:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a76:	2300      	movs	r3, #0
 8001a78:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001a7e:	463b      	mov	r3, r7
 8001a80:	2204      	movs	r2, #4
 8001a82:	4619      	mov	r1, r3
 8001a84:	480c      	ldr	r0, [pc, #48]	@ (8001ab8 <MX_TIM5_Init+0xc0>)
 8001a86:	f007 feed 	bl	8009864 <HAL_TIM_PWM_ConfigChannel>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d001      	beq.n	8001a94 <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 8001a90:	f7ff fafe 	bl	8001090 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001a94:	463b      	mov	r3, r7
 8001a96:	220c      	movs	r2, #12
 8001a98:	4619      	mov	r1, r3
 8001a9a:	4807      	ldr	r0, [pc, #28]	@ (8001ab8 <MX_TIM5_Init+0xc0>)
 8001a9c:	f007 fee2 	bl	8009864 <HAL_TIM_PWM_ConfigChannel>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d001      	beq.n	8001aaa <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 8001aa6:	f7ff faf3 	bl	8001090 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001aaa:	4803      	ldr	r0, [pc, #12]	@ (8001ab8 <MX_TIM5_Init+0xc0>)
 8001aac:	f000 f980 	bl	8001db0 <HAL_TIM_MspPostInit>

}
 8001ab0:	bf00      	nop
 8001ab2:	3728      	adds	r7, #40	@ 0x28
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	240005ac 	.word	0x240005ac
 8001abc:	40000c00 	.word	0x40000c00

08001ac0 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b084      	sub	sp, #16
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001ad0:	d16f      	bne.n	8001bb2 <HAL_TIM_PWM_MspInit+0xf2>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001ad2:	4b74      	ldr	r3, [pc, #464]	@ (8001ca4 <HAL_TIM_PWM_MspInit+0x1e4>)
 8001ad4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001ad8:	4a72      	ldr	r2, [pc, #456]	@ (8001ca4 <HAL_TIM_PWM_MspInit+0x1e4>)
 8001ada:	f043 0301 	orr.w	r3, r3, #1
 8001ade:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001ae2:	4b70      	ldr	r3, [pc, #448]	@ (8001ca4 <HAL_TIM_PWM_MspInit+0x1e4>)
 8001ae4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001ae8:	f003 0301 	and.w	r3, r3, #1
 8001aec:	60fb      	str	r3, [r7, #12]
 8001aee:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 DMA Init */
    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Stream5;
 8001af0:	4b6d      	ldr	r3, [pc, #436]	@ (8001ca8 <HAL_TIM_PWM_MspInit+0x1e8>)
 8001af2:	4a6e      	ldr	r2, [pc, #440]	@ (8001cac <HAL_TIM_PWM_MspInit+0x1ec>)
 8001af4:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Request = DMA_REQUEST_TIM2_CH1;
 8001af6:	4b6c      	ldr	r3, [pc, #432]	@ (8001ca8 <HAL_TIM_PWM_MspInit+0x1e8>)
 8001af8:	2212      	movs	r2, #18
 8001afa:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001afc:	4b6a      	ldr	r3, [pc, #424]	@ (8001ca8 <HAL_TIM_PWM_MspInit+0x1e8>)
 8001afe:	2240      	movs	r2, #64	@ 0x40
 8001b00:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b02:	4b69      	ldr	r3, [pc, #420]	@ (8001ca8 <HAL_TIM_PWM_MspInit+0x1e8>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001b08:	4b67      	ldr	r3, [pc, #412]	@ (8001ca8 <HAL_TIM_PWM_MspInit+0x1e8>)
 8001b0a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001b0e:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001b10:	4b65      	ldr	r3, [pc, #404]	@ (8001ca8 <HAL_TIM_PWM_MspInit+0x1e8>)
 8001b12:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001b16:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001b18:	4b63      	ldr	r3, [pc, #396]	@ (8001ca8 <HAL_TIM_PWM_MspInit+0x1e8>)
 8001b1a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001b1e:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Mode = DMA_NORMAL;
 8001b20:	4b61      	ldr	r3, [pc, #388]	@ (8001ca8 <HAL_TIM_PWM_MspInit+0x1e8>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 8001b26:	4b60      	ldr	r3, [pc, #384]	@ (8001ca8 <HAL_TIM_PWM_MspInit+0x1e8>)
 8001b28:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001b2c:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b2e:	4b5e      	ldr	r3, [pc, #376]	@ (8001ca8 <HAL_TIM_PWM_MspInit+0x1e8>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 8001b34:	485c      	ldr	r0, [pc, #368]	@ (8001ca8 <HAL_TIM_PWM_MspInit+0x1e8>)
 8001b36:	f000 fd8f 	bl	8002658 <HAL_DMA_Init>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d001      	beq.n	8001b44 <HAL_TIM_PWM_MspInit+0x84>
    {
      Error_Handler();
 8001b40:	f7ff faa6 	bl	8001090 <Error_Handler>
    }

    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	4a58      	ldr	r2, [pc, #352]	@ (8001ca8 <HAL_TIM_PWM_MspInit+0x1e8>)
 8001b48:	625a      	str	r2, [r3, #36]	@ 0x24
 8001b4a:	4a57      	ldr	r2, [pc, #348]	@ (8001ca8 <HAL_TIM_PWM_MspInit+0x1e8>)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* TIM2_CH3 Init */
    hdma_tim2_ch3.Instance = DMA1_Stream1;
 8001b50:	4b57      	ldr	r3, [pc, #348]	@ (8001cb0 <HAL_TIM_PWM_MspInit+0x1f0>)
 8001b52:	4a58      	ldr	r2, [pc, #352]	@ (8001cb4 <HAL_TIM_PWM_MspInit+0x1f4>)
 8001b54:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch3.Init.Request = DMA_REQUEST_TIM2_CH3;
 8001b56:	4b56      	ldr	r3, [pc, #344]	@ (8001cb0 <HAL_TIM_PWM_MspInit+0x1f0>)
 8001b58:	2214      	movs	r2, #20
 8001b5a:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001b5c:	4b54      	ldr	r3, [pc, #336]	@ (8001cb0 <HAL_TIM_PWM_MspInit+0x1f0>)
 8001b5e:	2240      	movs	r2, #64	@ 0x40
 8001b60:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b62:	4b53      	ldr	r3, [pc, #332]	@ (8001cb0 <HAL_TIM_PWM_MspInit+0x1f0>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8001b68:	4b51      	ldr	r3, [pc, #324]	@ (8001cb0 <HAL_TIM_PWM_MspInit+0x1f0>)
 8001b6a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001b6e:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001b70:	4b4f      	ldr	r3, [pc, #316]	@ (8001cb0 <HAL_TIM_PWM_MspInit+0x1f0>)
 8001b72:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001b76:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001b78:	4b4d      	ldr	r3, [pc, #308]	@ (8001cb0 <HAL_TIM_PWM_MspInit+0x1f0>)
 8001b7a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001b7e:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch3.Init.Mode = DMA_NORMAL;
 8001b80:	4b4b      	ldr	r3, [pc, #300]	@ (8001cb0 <HAL_TIM_PWM_MspInit+0x1f0>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch3.Init.Priority = DMA_PRIORITY_HIGH;
 8001b86:	4b4a      	ldr	r3, [pc, #296]	@ (8001cb0 <HAL_TIM_PWM_MspInit+0x1f0>)
 8001b88:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001b8c:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b8e:	4b48      	ldr	r3, [pc, #288]	@ (8001cb0 <HAL_TIM_PWM_MspInit+0x1f0>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch3) != HAL_OK)
 8001b94:	4846      	ldr	r0, [pc, #280]	@ (8001cb0 <HAL_TIM_PWM_MspInit+0x1f0>)
 8001b96:	f000 fd5f 	bl	8002658 <HAL_DMA_Init>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d001      	beq.n	8001ba4 <HAL_TIM_PWM_MspInit+0xe4>
    {
      Error_Handler();
 8001ba0:	f7ff fa76 	bl	8001090 <Error_Handler>
    }

    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC3],hdma_tim2_ch3);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	4a42      	ldr	r2, [pc, #264]	@ (8001cb0 <HAL_TIM_PWM_MspInit+0x1f0>)
 8001ba8:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001baa:	4a41      	ldr	r2, [pc, #260]	@ (8001cb0 <HAL_TIM_PWM_MspInit+0x1f0>)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8001bb0:	e073      	b.n	8001c9a <HAL_TIM_PWM_MspInit+0x1da>
  else if(tim_pwmHandle->Instance==TIM5)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4a40      	ldr	r2, [pc, #256]	@ (8001cb8 <HAL_TIM_PWM_MspInit+0x1f8>)
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d16e      	bne.n	8001c9a <HAL_TIM_PWM_MspInit+0x1da>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001bbc:	4b39      	ldr	r3, [pc, #228]	@ (8001ca4 <HAL_TIM_PWM_MspInit+0x1e4>)
 8001bbe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001bc2:	4a38      	ldr	r2, [pc, #224]	@ (8001ca4 <HAL_TIM_PWM_MspInit+0x1e4>)
 8001bc4:	f043 0308 	orr.w	r3, r3, #8
 8001bc8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001bcc:	4b35      	ldr	r3, [pc, #212]	@ (8001ca4 <HAL_TIM_PWM_MspInit+0x1e4>)
 8001bce:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001bd2:	f003 0308 	and.w	r3, r3, #8
 8001bd6:	60bb      	str	r3, [r7, #8]
 8001bd8:	68bb      	ldr	r3, [r7, #8]
    hdma_tim5_ch2.Instance = DMA1_Stream4;
 8001bda:	4b38      	ldr	r3, [pc, #224]	@ (8001cbc <HAL_TIM_PWM_MspInit+0x1fc>)
 8001bdc:	4a38      	ldr	r2, [pc, #224]	@ (8001cc0 <HAL_TIM_PWM_MspInit+0x200>)
 8001bde:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch2.Init.Request = DMA_REQUEST_TIM5_CH2;
 8001be0:	4b36      	ldr	r3, [pc, #216]	@ (8001cbc <HAL_TIM_PWM_MspInit+0x1fc>)
 8001be2:	2238      	movs	r2, #56	@ 0x38
 8001be4:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001be6:	4b35      	ldr	r3, [pc, #212]	@ (8001cbc <HAL_TIM_PWM_MspInit+0x1fc>)
 8001be8:	2240      	movs	r2, #64	@ 0x40
 8001bea:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001bec:	4b33      	ldr	r3, [pc, #204]	@ (8001cbc <HAL_TIM_PWM_MspInit+0x1fc>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8001bf2:	4b32      	ldr	r3, [pc, #200]	@ (8001cbc <HAL_TIM_PWM_MspInit+0x1fc>)
 8001bf4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001bf8:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001bfa:	4b30      	ldr	r3, [pc, #192]	@ (8001cbc <HAL_TIM_PWM_MspInit+0x1fc>)
 8001bfc:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001c00:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001c02:	4b2e      	ldr	r3, [pc, #184]	@ (8001cbc <HAL_TIM_PWM_MspInit+0x1fc>)
 8001c04:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001c08:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch2.Init.Mode = DMA_NORMAL;
 8001c0a:	4b2c      	ldr	r3, [pc, #176]	@ (8001cbc <HAL_TIM_PWM_MspInit+0x1fc>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch2.Init.Priority = DMA_PRIORITY_HIGH;
 8001c10:	4b2a      	ldr	r3, [pc, #168]	@ (8001cbc <HAL_TIM_PWM_MspInit+0x1fc>)
 8001c12:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001c16:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c18:	4b28      	ldr	r3, [pc, #160]	@ (8001cbc <HAL_TIM_PWM_MspInit+0x1fc>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim5_ch2) != HAL_OK)
 8001c1e:	4827      	ldr	r0, [pc, #156]	@ (8001cbc <HAL_TIM_PWM_MspInit+0x1fc>)
 8001c20:	f000 fd1a 	bl	8002658 <HAL_DMA_Init>
 8001c24:	4603      	mov	r3, r0
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d001      	beq.n	8001c2e <HAL_TIM_PWM_MspInit+0x16e>
      Error_Handler();
 8001c2a:	f7ff fa31 	bl	8001090 <Error_Handler>
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC2],hdma_tim5_ch2);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	4a22      	ldr	r2, [pc, #136]	@ (8001cbc <HAL_TIM_PWM_MspInit+0x1fc>)
 8001c32:	629a      	str	r2, [r3, #40]	@ 0x28
 8001c34:	4a21      	ldr	r2, [pc, #132]	@ (8001cbc <HAL_TIM_PWM_MspInit+0x1fc>)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_tim5_ch4.Instance = DMA1_Stream3;
 8001c3a:	4b22      	ldr	r3, [pc, #136]	@ (8001cc4 <HAL_TIM_PWM_MspInit+0x204>)
 8001c3c:	4a22      	ldr	r2, [pc, #136]	@ (8001cc8 <HAL_TIM_PWM_MspInit+0x208>)
 8001c3e:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch4.Init.Request = DMA_REQUEST_TIM5_CH4;
 8001c40:	4b20      	ldr	r3, [pc, #128]	@ (8001cc4 <HAL_TIM_PWM_MspInit+0x204>)
 8001c42:	223a      	movs	r2, #58	@ 0x3a
 8001c44:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001c46:	4b1f      	ldr	r3, [pc, #124]	@ (8001cc4 <HAL_TIM_PWM_MspInit+0x204>)
 8001c48:	2240      	movs	r2, #64	@ 0x40
 8001c4a:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c4c:	4b1d      	ldr	r3, [pc, #116]	@ (8001cc4 <HAL_TIM_PWM_MspInit+0x204>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch4.Init.MemInc = DMA_MINC_ENABLE;
 8001c52:	4b1c      	ldr	r3, [pc, #112]	@ (8001cc4 <HAL_TIM_PWM_MspInit+0x204>)
 8001c54:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001c58:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001c5a:	4b1a      	ldr	r3, [pc, #104]	@ (8001cc4 <HAL_TIM_PWM_MspInit+0x204>)
 8001c5c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001c60:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001c62:	4b18      	ldr	r3, [pc, #96]	@ (8001cc4 <HAL_TIM_PWM_MspInit+0x204>)
 8001c64:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001c68:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch4.Init.Mode = DMA_NORMAL;
 8001c6a:	4b16      	ldr	r3, [pc, #88]	@ (8001cc4 <HAL_TIM_PWM_MspInit+0x204>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch4.Init.Priority = DMA_PRIORITY_HIGH;
 8001c70:	4b14      	ldr	r3, [pc, #80]	@ (8001cc4 <HAL_TIM_PWM_MspInit+0x204>)
 8001c72:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001c76:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch4.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c78:	4b12      	ldr	r3, [pc, #72]	@ (8001cc4 <HAL_TIM_PWM_MspInit+0x204>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim5_ch4) != HAL_OK)
 8001c7e:	4811      	ldr	r0, [pc, #68]	@ (8001cc4 <HAL_TIM_PWM_MspInit+0x204>)
 8001c80:	f000 fcea 	bl	8002658 <HAL_DMA_Init>
 8001c84:	4603      	mov	r3, r0
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d001      	beq.n	8001c8e <HAL_TIM_PWM_MspInit+0x1ce>
      Error_Handler();
 8001c8a:	f7ff fa01 	bl	8001090 <Error_Handler>
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC4],hdma_tim5_ch4);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	4a0c      	ldr	r2, [pc, #48]	@ (8001cc4 <HAL_TIM_PWM_MspInit+0x204>)
 8001c92:	631a      	str	r2, [r3, #48]	@ 0x30
 8001c94:	4a0b      	ldr	r2, [pc, #44]	@ (8001cc4 <HAL_TIM_PWM_MspInit+0x204>)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8001c9a:	bf00      	nop
 8001c9c:	3710      	adds	r7, #16
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	58024400 	.word	0x58024400
 8001ca8:	240005f8 	.word	0x240005f8
 8001cac:	40020088 	.word	0x40020088
 8001cb0:	24000670 	.word	0x24000670
 8001cb4:	40020028 	.word	0x40020028
 8001cb8:	40000c00 	.word	0x40000c00
 8001cbc:	240006e8 	.word	0x240006e8
 8001cc0:	40020070 	.word	0x40020070
 8001cc4:	24000760 	.word	0x24000760
 8001cc8:	40020058 	.word	0x40020058

08001ccc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b084      	sub	sp, #16
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a0e      	ldr	r2, [pc, #56]	@ (8001d14 <HAL_TIM_Base_MspInit+0x48>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d116      	bne.n	8001d0c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001cde:	4b0e      	ldr	r3, [pc, #56]	@ (8001d18 <HAL_TIM_Base_MspInit+0x4c>)
 8001ce0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001ce4:	4a0c      	ldr	r2, [pc, #48]	@ (8001d18 <HAL_TIM_Base_MspInit+0x4c>)
 8001ce6:	f043 0302 	orr.w	r3, r3, #2
 8001cea:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001cee:	4b0a      	ldr	r3, [pc, #40]	@ (8001d18 <HAL_TIM_Base_MspInit+0x4c>)
 8001cf0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001cf4:	f003 0302 	and.w	r3, r3, #2
 8001cf8:	60fb      	str	r3, [r7, #12]
 8001cfa:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	2100      	movs	r1, #0
 8001d00:	201d      	movs	r0, #29
 8001d02:	f000 fc60 	bl	80025c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001d06:	201d      	movs	r0, #29
 8001d08:	f000 fc77 	bl	80025fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001d0c:	bf00      	nop
 8001d0e:	3710      	adds	r7, #16
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}
 8001d14:	40000400 	.word	0x40000400
 8001d18:	58024400 	.word	0x58024400

08001d1c <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b08a      	sub	sp, #40	@ 0x28
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d24:	f107 0314 	add.w	r3, r7, #20
 8001d28:	2200      	movs	r2, #0
 8001d2a:	601a      	str	r2, [r3, #0]
 8001d2c:	605a      	str	r2, [r3, #4]
 8001d2e:	609a      	str	r2, [r3, #8]
 8001d30:	60da      	str	r2, [r3, #12]
 8001d32:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM4)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a1a      	ldr	r2, [pc, #104]	@ (8001da4 <HAL_TIM_Encoder_MspInit+0x88>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d12e      	bne.n	8001d9c <HAL_TIM_Encoder_MspInit+0x80>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001d3e:	4b1a      	ldr	r3, [pc, #104]	@ (8001da8 <HAL_TIM_Encoder_MspInit+0x8c>)
 8001d40:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001d44:	4a18      	ldr	r2, [pc, #96]	@ (8001da8 <HAL_TIM_Encoder_MspInit+0x8c>)
 8001d46:	f043 0304 	orr.w	r3, r3, #4
 8001d4a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001d4e:	4b16      	ldr	r3, [pc, #88]	@ (8001da8 <HAL_TIM_Encoder_MspInit+0x8c>)
 8001d50:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001d54:	f003 0304 	and.w	r3, r3, #4
 8001d58:	613b      	str	r3, [r7, #16]
 8001d5a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d5c:	4b12      	ldr	r3, [pc, #72]	@ (8001da8 <HAL_TIM_Encoder_MspInit+0x8c>)
 8001d5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d62:	4a11      	ldr	r2, [pc, #68]	@ (8001da8 <HAL_TIM_Encoder_MspInit+0x8c>)
 8001d64:	f043 0308 	orr.w	r3, r3, #8
 8001d68:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001d6c:	4b0e      	ldr	r3, [pc, #56]	@ (8001da8 <HAL_TIM_Encoder_MspInit+0x8c>)
 8001d6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d72:	f003 0308 	and.w	r3, r3, #8
 8001d76:	60fb      	str	r3, [r7, #12]
 8001d78:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001d7a:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001d7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d80:	2302      	movs	r3, #2
 8001d82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d84:	2300      	movs	r3, #0
 8001d86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001d8c:	2302      	movs	r3, #2
 8001d8e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d90:	f107 0314 	add.w	r3, r7, #20
 8001d94:	4619      	mov	r1, r3
 8001d96:	4805      	ldr	r0, [pc, #20]	@ (8001dac <HAL_TIM_Encoder_MspInit+0x90>)
 8001d98:	f002 fda6 	bl	80048e8 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001d9c:	bf00      	nop
 8001d9e:	3728      	adds	r7, #40	@ 0x28
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	40000800 	.word	0x40000800
 8001da8:	58024400 	.word	0x58024400
 8001dac:	58020c00 	.word	0x58020c00

08001db0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b08a      	sub	sp, #40	@ 0x28
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001db8:	f107 0314 	add.w	r3, r7, #20
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	601a      	str	r2, [r3, #0]
 8001dc0:	605a      	str	r2, [r3, #4]
 8001dc2:	609a      	str	r2, [r3, #8]
 8001dc4:	60da      	str	r2, [r3, #12]
 8001dc6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001dd0:	d11f      	bne.n	8001e12 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dd2:	4b24      	ldr	r3, [pc, #144]	@ (8001e64 <HAL_TIM_MspPostInit+0xb4>)
 8001dd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001dd8:	4a22      	ldr	r2, [pc, #136]	@ (8001e64 <HAL_TIM_MspPostInit+0xb4>)
 8001dda:	f043 0301 	orr.w	r3, r3, #1
 8001dde:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001de2:	4b20      	ldr	r3, [pc, #128]	@ (8001e64 <HAL_TIM_MspPostInit+0xb4>)
 8001de4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001de8:	f003 0301 	and.w	r3, r3, #1
 8001dec:	613b      	str	r3, [r7, #16]
 8001dee:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 8001df0:	2305      	movs	r3, #5
 8001df2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001df4:	2302      	movs	r3, #2
 8001df6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001e00:	2301      	movs	r3, #1
 8001e02:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e04:	f107 0314 	add.w	r3, r7, #20
 8001e08:	4619      	mov	r1, r3
 8001e0a:	4817      	ldr	r0, [pc, #92]	@ (8001e68 <HAL_TIM_MspPostInit+0xb8>)
 8001e0c:	f002 fd6c 	bl	80048e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8001e10:	e023      	b.n	8001e5a <HAL_TIM_MspPostInit+0xaa>
  else if(timHandle->Instance==TIM5)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4a15      	ldr	r2, [pc, #84]	@ (8001e6c <HAL_TIM_MspPostInit+0xbc>)
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d11e      	bne.n	8001e5a <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e1c:	4b11      	ldr	r3, [pc, #68]	@ (8001e64 <HAL_TIM_MspPostInit+0xb4>)
 8001e1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e22:	4a10      	ldr	r2, [pc, #64]	@ (8001e64 <HAL_TIM_MspPostInit+0xb4>)
 8001e24:	f043 0301 	orr.w	r3, r3, #1
 8001e28:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001e2c:	4b0d      	ldr	r3, [pc, #52]	@ (8001e64 <HAL_TIM_MspPostInit+0xb4>)
 8001e2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e32:	f003 0301 	and.w	r3, r3, #1
 8001e36:	60fb      	str	r3, [r7, #12]
 8001e38:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 8001e3a:	230a      	movs	r3, #10
 8001e3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e3e:	2302      	movs	r3, #2
 8001e40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e42:	2300      	movs	r3, #0
 8001e44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e46:	2300      	movs	r3, #0
 8001e48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001e4a:	2302      	movs	r3, #2
 8001e4c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e4e:	f107 0314 	add.w	r3, r7, #20
 8001e52:	4619      	mov	r1, r3
 8001e54:	4804      	ldr	r0, [pc, #16]	@ (8001e68 <HAL_TIM_MspPostInit+0xb8>)
 8001e56:	f002 fd47 	bl	80048e8 <HAL_GPIO_Init>
}
 8001e5a:	bf00      	nop
 8001e5c:	3728      	adds	r7, #40	@ 0x28
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	58024400 	.word	0x58024400
 8001e68:	58020000 	.word	0x58020000
 8001e6c:	40000c00 	.word	0x40000c00

08001e70 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001e70:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001ea8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001e74:	f7fe fc04 	bl	8000680 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e78:	480c      	ldr	r0, [pc, #48]	@ (8001eac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001e7a:	490d      	ldr	r1, [pc, #52]	@ (8001eb0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001e7c:	4a0d      	ldr	r2, [pc, #52]	@ (8001eb4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001e7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e80:	e002      	b.n	8001e88 <LoopCopyDataInit>

08001e82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e86:	3304      	adds	r3, #4

08001e88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e8c:	d3f9      	bcc.n	8001e82 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e8e:	4a0a      	ldr	r2, [pc, #40]	@ (8001eb8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001e90:	4c0a      	ldr	r4, [pc, #40]	@ (8001ebc <LoopFillZerobss+0x22>)
  movs r3, #0
 8001e92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e94:	e001      	b.n	8001e9a <LoopFillZerobss>

08001e96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e98:	3204      	adds	r2, #4

08001e9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e9c:	d3fb      	bcc.n	8001e96 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e9e:	f00e fac5 	bl	801042c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ea2:	f7fe ff7f 	bl	8000da4 <main>
  bx  lr
 8001ea6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001ea8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001eac:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001eb0:	24000300 	.word	0x24000300
  ldr r2, =_sidata
 8001eb4:	080129d8 	.word	0x080129d8
  ldr r2, =_sbss
 8001eb8:	24000300 	.word	0x24000300
  ldr r4, =_ebss
 8001ebc:	240025ac 	.word	0x240025ac

08001ec0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ec0:	e7fe      	b.n	8001ec0 <ADC3_IRQHandler>
	...

08001ec4 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b08c      	sub	sp, #48	@ 0x30
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	4603      	mov	r3, r0
 8001ecc:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8001ed2:	79fb      	ldrb	r3, [r7, #7]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d009      	beq.n	8001eec <BSP_LED_Init+0x28>
 8001ed8:	79fb      	ldrb	r3, [r7, #7]
 8001eda:	2b01      	cmp	r3, #1
 8001edc:	d006      	beq.n	8001eec <BSP_LED_Init+0x28>
 8001ede:	79fb      	ldrb	r3, [r7, #7]
 8001ee0:	2b02      	cmp	r3, #2
 8001ee2:	d003      	beq.n	8001eec <BSP_LED_Init+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001ee4:	f06f 0301 	mvn.w	r3, #1
 8001ee8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001eea:	e055      	b.n	8001f98 <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if(Led == LED1)
 8001eec:	79fb      	ldrb	r3, [r7, #7]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d10f      	bne.n	8001f12 <BSP_LED_Init+0x4e>
    {
      LED1_GPIO_CLK_ENABLE();
 8001ef2:	4b2c      	ldr	r3, [pc, #176]	@ (8001fa4 <BSP_LED_Init+0xe0>)
 8001ef4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ef8:	4a2a      	ldr	r2, [pc, #168]	@ (8001fa4 <BSP_LED_Init+0xe0>)
 8001efa:	f043 0302 	orr.w	r3, r3, #2
 8001efe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001f02:	4b28      	ldr	r3, [pc, #160]	@ (8001fa4 <BSP_LED_Init+0xe0>)
 8001f04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f08:	f003 0302 	and.w	r3, r3, #2
 8001f0c:	617b      	str	r3, [r7, #20]
 8001f0e:	697b      	ldr	r3, [r7, #20]
 8001f10:	e021      	b.n	8001f56 <BSP_LED_Init+0x92>
    }
    else if(Led == LED2)
 8001f12:	79fb      	ldrb	r3, [r7, #7]
 8001f14:	2b01      	cmp	r3, #1
 8001f16:	d10f      	bne.n	8001f38 <BSP_LED_Init+0x74>
    {
      LED2_GPIO_CLK_ENABLE();
 8001f18:	4b22      	ldr	r3, [pc, #136]	@ (8001fa4 <BSP_LED_Init+0xe0>)
 8001f1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f1e:	4a21      	ldr	r2, [pc, #132]	@ (8001fa4 <BSP_LED_Init+0xe0>)
 8001f20:	f043 0310 	orr.w	r3, r3, #16
 8001f24:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001f28:	4b1e      	ldr	r3, [pc, #120]	@ (8001fa4 <BSP_LED_Init+0xe0>)
 8001f2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f2e:	f003 0310 	and.w	r3, r3, #16
 8001f32:	613b      	str	r3, [r7, #16]
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	e00e      	b.n	8001f56 <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 8001f38:	4b1a      	ldr	r3, [pc, #104]	@ (8001fa4 <BSP_LED_Init+0xe0>)
 8001f3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f3e:	4a19      	ldr	r2, [pc, #100]	@ (8001fa4 <BSP_LED_Init+0xe0>)
 8001f40:	f043 0302 	orr.w	r3, r3, #2
 8001f44:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001f48:	4b16      	ldr	r3, [pc, #88]	@ (8001fa4 <BSP_LED_Init+0xe0>)
 8001f4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f4e:	f003 0302 	and.w	r3, r3, #2
 8001f52:	60fb      	str	r3, [r7, #12]
 8001f54:	68fb      	ldr	r3, [r7, #12]
    }
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 8001f56:	79fb      	ldrb	r3, [r7, #7]
 8001f58:	4a13      	ldr	r2, [pc, #76]	@ (8001fa8 <BSP_LED_Init+0xe4>)
 8001f5a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001f5e:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8001f60:	2301      	movs	r3, #1
 8001f62:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8001f64:	2300      	movs	r3, #0
 8001f66:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f68:	2303      	movs	r3, #3
 8001f6a:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8001f6c:	79fb      	ldrb	r3, [r7, #7]
 8001f6e:	4a0f      	ldr	r2, [pc, #60]	@ (8001fac <BSP_LED_Init+0xe8>)
 8001f70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f74:	f107 0218 	add.w	r2, r7, #24
 8001f78:	4611      	mov	r1, r2
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f002 fcb4 	bl	80048e8 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8001f80:	79fb      	ldrb	r3, [r7, #7]
 8001f82:	4a0a      	ldr	r2, [pc, #40]	@ (8001fac <BSP_LED_Init+0xe8>)
 8001f84:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001f88:	79fb      	ldrb	r3, [r7, #7]
 8001f8a:	4a07      	ldr	r2, [pc, #28]	@ (8001fa8 <BSP_LED_Init+0xe4>)
 8001f8c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001f90:	2200      	movs	r2, #0
 8001f92:	4619      	mov	r1, r3
 8001f94:	f002 fe58 	bl	8004c48 <HAL_GPIO_WritePin>
  }

  return ret;
 8001f98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	3730      	adds	r7, #48	@ 0x30
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	58024400 	.word	0x58024400
 8001fa8:	08012620 	.word	0x08012620
 8001fac:	24000024 	.word	0x24000024

08001fb0 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b088      	sub	sp, #32
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	460a      	mov	r2, r1
 8001fba:	71fb      	strb	r3, [r7, #7]
 8001fbc:	4613      	mov	r3, r2
 8001fbe:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 8001fc0:	4b2e      	ldr	r3, [pc, #184]	@ (800207c <BSP_PB_Init+0xcc>)
 8001fc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001fc6:	4a2d      	ldr	r2, [pc, #180]	@ (800207c <BSP_PB_Init+0xcc>)
 8001fc8:	f043 0304 	orr.w	r3, r3, #4
 8001fcc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001fd0:	4b2a      	ldr	r3, [pc, #168]	@ (800207c <BSP_PB_Init+0xcc>)
 8001fd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001fd6:	f003 0304 	and.w	r3, r3, #4
 8001fda:	60bb      	str	r3, [r7, #8]
 8001fdc:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 8001fde:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001fe2:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8001fe4:	2302      	movs	r3, #2
 8001fe6:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001fe8:	2302      	movs	r3, #2
 8001fea:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 8001fec:	79bb      	ldrb	r3, [r7, #6]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d10c      	bne.n	800200c <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 8001ff6:	79fb      	ldrb	r3, [r7, #7]
 8001ff8:	4a21      	ldr	r2, [pc, #132]	@ (8002080 <BSP_PB_Init+0xd0>)
 8001ffa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ffe:	f107 020c 	add.w	r2, r7, #12
 8002002:	4611      	mov	r1, r2
 8002004:	4618      	mov	r0, r3
 8002006:	f002 fc6f 	bl	80048e8 <HAL_GPIO_Init>
 800200a:	e031      	b.n	8002070 <BSP_PB_Init+0xc0>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 800200c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002010:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8002012:	79fb      	ldrb	r3, [r7, #7]
 8002014:	4a1a      	ldr	r2, [pc, #104]	@ (8002080 <BSP_PB_Init+0xd0>)
 8002016:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800201a:	f107 020c 	add.w	r2, r7, #12
 800201e:	4611      	mov	r1, r2
 8002020:	4618      	mov	r0, r3
 8002022:	f002 fc61 	bl	80048e8 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8002026:	79fb      	ldrb	r3, [r7, #7]
 8002028:	00db      	lsls	r3, r3, #3
 800202a:	4a16      	ldr	r2, [pc, #88]	@ (8002084 <BSP_PB_Init+0xd4>)
 800202c:	441a      	add	r2, r3
 800202e:	79fb      	ldrb	r3, [r7, #7]
 8002030:	4915      	ldr	r1, [pc, #84]	@ (8002088 <BSP_PB_Init+0xd8>)
 8002032:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002036:	4619      	mov	r1, r3
 8002038:	4610      	mov	r0, r2
 800203a:	f002 fc04 	bl	8004846 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 800203e:	79fb      	ldrb	r3, [r7, #7]
 8002040:	00db      	lsls	r3, r3, #3
 8002042:	4a10      	ldr	r2, [pc, #64]	@ (8002084 <BSP_PB_Init+0xd4>)
 8002044:	1898      	adds	r0, r3, r2
 8002046:	79fb      	ldrb	r3, [r7, #7]
 8002048:	4a10      	ldr	r2, [pc, #64]	@ (800208c <BSP_PB_Init+0xdc>)
 800204a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800204e:	461a      	mov	r2, r3
 8002050:	2100      	movs	r1, #0
 8002052:	f002 fbd9 	bl	8004808 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8002056:	2028      	movs	r0, #40	@ 0x28
 8002058:	79fb      	ldrb	r3, [r7, #7]
 800205a:	4a0d      	ldr	r2, [pc, #52]	@ (8002090 <BSP_PB_Init+0xe0>)
 800205c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002060:	2200      	movs	r2, #0
 8002062:	4619      	mov	r1, r3
 8002064:	f000 faaf 	bl	80025c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8002068:	2328      	movs	r3, #40	@ 0x28
 800206a:	4618      	mov	r0, r3
 800206c:	f000 fac5 	bl	80025fa <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8002070:	2300      	movs	r3, #0
}
 8002072:	4618      	mov	r0, r3
 8002074:	3720      	adds	r7, #32
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	58024400 	.word	0x58024400
 8002080:	24000030 	.word	0x24000030
 8002084:	240007d8 	.word	0x240007d8
 8002088:	08012628 	.word	0x08012628
 800208c:	24000034 	.word	0x24000034
 8002090:	24000038 	.word	0x24000038

08002094 <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b082      	sub	sp, #8
 8002098:	af00      	add	r7, sp, #0
 800209a:	4603      	mov	r3, r0
 800209c:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 800209e:	79fb      	ldrb	r3, [r7, #7]
 80020a0:	00db      	lsls	r3, r3, #3
 80020a2:	4a04      	ldr	r2, [pc, #16]	@ (80020b4 <BSP_PB_IRQHandler+0x20>)
 80020a4:	4413      	add	r3, r2
 80020a6:	4618      	mov	r0, r3
 80020a8:	f002 fbe2 	bl	8004870 <HAL_EXTI_IRQHandler>
}
 80020ac:	bf00      	nop
 80020ae:	3708      	adds	r7, #8
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}
 80020b4:	240007d8 	.word	0x240007d8

080020b8 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b083      	sub	sp, #12
 80020bc:	af00      	add	r7, sp, #0
 80020be:	4603      	mov	r3, r0
 80020c0:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 80020c2:	bf00      	nop
 80020c4:	370c      	adds	r7, #12
 80020c6:	46bd      	mov	sp, r7
 80020c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020cc:	4770      	bx	lr
	...

080020d0 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b084      	sub	sp, #16
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	4603      	mov	r3, r0
 80020d8:	6039      	str	r1, [r7, #0]
 80020da:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80020dc:	2300      	movs	r3, #0
 80020de:	60fb      	str	r3, [r7, #12]

  if(COM >= COMn)
 80020e0:	79fb      	ldrb	r3, [r7, #7]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d003      	beq.n	80020ee <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80020e6:	f06f 0301 	mvn.w	r3, #1
 80020ea:	60fb      	str	r3, [r7, #12]
 80020ec:	e018      	b.n	8002120 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 80020ee:	79fb      	ldrb	r3, [r7, #7]
 80020f0:	2294      	movs	r2, #148	@ 0x94
 80020f2:	fb02 f303 	mul.w	r3, r2, r3
 80020f6:	4a0d      	ldr	r2, [pc, #52]	@ (800212c <BSP_COM_Init+0x5c>)
 80020f8:	4413      	add	r3, r2
 80020fa:	4618      	mov	r0, r3
 80020fc:	f000 f86e 	bl	80021dc <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_USART3_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8002100:	79fb      	ldrb	r3, [r7, #7]
 8002102:	2294      	movs	r2, #148	@ 0x94
 8002104:	fb02 f303 	mul.w	r3, r2, r3
 8002108:	4a08      	ldr	r2, [pc, #32]	@ (800212c <BSP_COM_Init+0x5c>)
 800210a:	4413      	add	r3, r2
 800210c:	6839      	ldr	r1, [r7, #0]
 800210e:	4618      	mov	r0, r3
 8002110:	f000 f80e 	bl	8002130 <MX_USART3_Init>
 8002114:	4603      	mov	r3, r0
 8002116:	2b00      	cmp	r3, #0
 8002118:	d002      	beq.n	8002120 <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800211a:	f06f 0303 	mvn.w	r3, #3
 800211e:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8002120:	68fb      	ldr	r3, [r7, #12]
}
 8002122:	4618      	mov	r0, r3
 8002124:	3710      	adds	r7, #16
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}
 800212a:	bf00      	nop
 800212c:	240007e0 	.word	0x240007e0

08002130 <MX_USART3_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART3_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b082      	sub	sp, #8
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
 8002138:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 800213a:	4b15      	ldr	r3, [pc, #84]	@ (8002190 <MX_USART3_Init+0x60>)
 800213c:	681a      	ldr	r2, [r3, #0]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	681a      	ldr	r2, [r3, #0]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	220c      	movs	r2, #12
 800214e:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	895b      	ldrh	r3, [r3, #10]
 8002154:	461a      	mov	r2, r3
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = (uint32_t)COM_Init->WordLength;
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	685a      	ldr	r2, [r3, #4]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	891b      	ldrh	r3, [r3, #8]
 8002166:	461a      	mov	r2, r3
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	899b      	ldrh	r3, [r3, #12]
 8002170:	461a      	mov	r2, r3
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800217c:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 800217e:	6878      	ldr	r0, [r7, #4]
 8002180:	f008 fa90 	bl	800a6a4 <HAL_UART_Init>
 8002184:	4603      	mov	r3, r0
}
 8002186:	4618      	mov	r0, r3
 8002188:	3708      	adds	r7, #8
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop
 8002190:	24000020 	.word	0x24000020

08002194 <__io_putchar>:
 #ifdef __GNUC__
 int __io_putchar (int ch)
 #else
 int fputc (int ch, FILE *f)
 #endif /* __GNUC__ */
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b082      	sub	sp, #8
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit (&hcom_uart [COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 800219c:	4b09      	ldr	r3, [pc, #36]	@ (80021c4 <__io_putchar+0x30>)
 800219e:	781b      	ldrb	r3, [r3, #0]
 80021a0:	461a      	mov	r2, r3
 80021a2:	2394      	movs	r3, #148	@ 0x94
 80021a4:	fb02 f303 	mul.w	r3, r2, r3
 80021a8:	4a07      	ldr	r2, [pc, #28]	@ (80021c8 <__io_putchar+0x34>)
 80021aa:	1898      	adds	r0, r3, r2
 80021ac:	1d39      	adds	r1, r7, #4
 80021ae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80021b2:	2201      	movs	r2, #1
 80021b4:	f008 fad0 	bl	800a758 <HAL_UART_Transmit>
  return ch;
 80021b8:	687b      	ldr	r3, [r7, #4]
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	3708      	adds	r7, #8
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	24000874 	.word	0x24000874
 80021c8:	240007e0 	.word	0x240007e0

080021cc <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 80021d0:	2000      	movs	r0, #0
 80021d2:	f7ff ff71 	bl	80020b8 <BSP_PB_Callback>
}
 80021d6:	bf00      	nop
 80021d8:	bd80      	pop	{r7, pc}
	...

080021dc <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b08a      	sub	sp, #40	@ 0x28
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 80021e4:	4b27      	ldr	r3, [pc, #156]	@ (8002284 <COM1_MspInit+0xa8>)
 80021e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80021ea:	4a26      	ldr	r2, [pc, #152]	@ (8002284 <COM1_MspInit+0xa8>)
 80021ec:	f043 0308 	orr.w	r3, r3, #8
 80021f0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80021f4:	4b23      	ldr	r3, [pc, #140]	@ (8002284 <COM1_MspInit+0xa8>)
 80021f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80021fa:	f003 0308 	and.w	r3, r3, #8
 80021fe:	613b      	str	r3, [r7, #16]
 8002200:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 8002202:	4b20      	ldr	r3, [pc, #128]	@ (8002284 <COM1_MspInit+0xa8>)
 8002204:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002208:	4a1e      	ldr	r2, [pc, #120]	@ (8002284 <COM1_MspInit+0xa8>)
 800220a:	f043 0308 	orr.w	r3, r3, #8
 800220e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002212:	4b1c      	ldr	r3, [pc, #112]	@ (8002284 <COM1_MspInit+0xa8>)
 8002214:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002218:	f003 0308 	and.w	r3, r3, #8
 800221c:	60fb      	str	r3, [r7, #12]
 800221e:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8002220:	4b18      	ldr	r3, [pc, #96]	@ (8002284 <COM1_MspInit+0xa8>)
 8002222:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002226:	4a17      	ldr	r2, [pc, #92]	@ (8002284 <COM1_MspInit+0xa8>)
 8002228:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800222c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002230:	4b14      	ldr	r3, [pc, #80]	@ (8002284 <COM1_MspInit+0xa8>)
 8002232:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002236:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800223a:	60bb      	str	r3, [r7, #8]
 800223c:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin = COM1_TX_PIN;
 800223e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002242:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8002244:	2302      	movs	r3, #2
 8002246:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8002248:	2302      	movs	r3, #2
 800224a:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_PULLUP;
 800224c:	2301      	movs	r3, #1
 800224e:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8002250:	2307      	movs	r3, #7
 8002252:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8002254:	f107 0314 	add.w	r3, r7, #20
 8002258:	4619      	mov	r1, r3
 800225a:	480b      	ldr	r0, [pc, #44]	@ (8002288 <COM1_MspInit+0xac>)
 800225c:	f002 fb44 	bl	80048e8 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 8002260:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002264:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8002266:	2302      	movs	r3, #2
 8002268:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 800226a:	2307      	movs	r3, #7
 800226c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 800226e:	f107 0314 	add.w	r3, r7, #20
 8002272:	4619      	mov	r1, r3
 8002274:	4804      	ldr	r0, [pc, #16]	@ (8002288 <COM1_MspInit+0xac>)
 8002276:	f002 fb37 	bl	80048e8 <HAL_GPIO_Init>
}
 800227a:	bf00      	nop
 800227c:	3728      	adds	r7, #40	@ 0x28
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}
 8002282:	bf00      	nop
 8002284:	58024400 	.word	0x58024400
 8002288:	58020c00 	.word	0x58020c00

0800228c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b082      	sub	sp, #8
 8002290:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002292:	2003      	movs	r0, #3
 8002294:	f000 f98c 	bl	80025b0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002298:	f004 fe50 	bl	8006f3c <HAL_RCC_GetSysClockFreq>
 800229c:	4602      	mov	r2, r0
 800229e:	4b15      	ldr	r3, [pc, #84]	@ (80022f4 <HAL_Init+0x68>)
 80022a0:	699b      	ldr	r3, [r3, #24]
 80022a2:	0a1b      	lsrs	r3, r3, #8
 80022a4:	f003 030f 	and.w	r3, r3, #15
 80022a8:	4913      	ldr	r1, [pc, #76]	@ (80022f8 <HAL_Init+0x6c>)
 80022aa:	5ccb      	ldrb	r3, [r1, r3]
 80022ac:	f003 031f 	and.w	r3, r3, #31
 80022b0:	fa22 f303 	lsr.w	r3, r2, r3
 80022b4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80022b6:	4b0f      	ldr	r3, [pc, #60]	@ (80022f4 <HAL_Init+0x68>)
 80022b8:	699b      	ldr	r3, [r3, #24]
 80022ba:	f003 030f 	and.w	r3, r3, #15
 80022be:	4a0e      	ldr	r2, [pc, #56]	@ (80022f8 <HAL_Init+0x6c>)
 80022c0:	5cd3      	ldrb	r3, [r2, r3]
 80022c2:	f003 031f 	and.w	r3, r3, #31
 80022c6:	687a      	ldr	r2, [r7, #4]
 80022c8:	fa22 f303 	lsr.w	r3, r2, r3
 80022cc:	4a0b      	ldr	r2, [pc, #44]	@ (80022fc <HAL_Init+0x70>)
 80022ce:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80022d0:	4a0b      	ldr	r2, [pc, #44]	@ (8002300 <HAL_Init+0x74>)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80022d6:	2000      	movs	r0, #0
 80022d8:	f000 f814 	bl	8002304 <HAL_InitTick>
 80022dc:	4603      	mov	r3, r0
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d001      	beq.n	80022e6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80022e2:	2301      	movs	r3, #1
 80022e4:	e002      	b.n	80022ec <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80022e6:	f7fe fed9 	bl	800109c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022ea:	2300      	movs	r3, #0
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	3708      	adds	r7, #8
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	58024400 	.word	0x58024400
 80022f8:	08012610 	.word	0x08012610
 80022fc:	24000004 	.word	0x24000004
 8002300:	24000000 	.word	0x24000000

08002304 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b082      	sub	sp, #8
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800230c:	4b15      	ldr	r3, [pc, #84]	@ (8002364 <HAL_InitTick+0x60>)
 800230e:	781b      	ldrb	r3, [r3, #0]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d101      	bne.n	8002318 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002314:	2301      	movs	r3, #1
 8002316:	e021      	b.n	800235c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002318:	4b13      	ldr	r3, [pc, #76]	@ (8002368 <HAL_InitTick+0x64>)
 800231a:	681a      	ldr	r2, [r3, #0]
 800231c:	4b11      	ldr	r3, [pc, #68]	@ (8002364 <HAL_InitTick+0x60>)
 800231e:	781b      	ldrb	r3, [r3, #0]
 8002320:	4619      	mov	r1, r3
 8002322:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002326:	fbb3 f3f1 	udiv	r3, r3, r1
 800232a:	fbb2 f3f3 	udiv	r3, r2, r3
 800232e:	4618      	mov	r0, r3
 8002330:	f000 f971 	bl	8002616 <HAL_SYSTICK_Config>
 8002334:	4603      	mov	r3, r0
 8002336:	2b00      	cmp	r3, #0
 8002338:	d001      	beq.n	800233e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	e00e      	b.n	800235c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2b0f      	cmp	r3, #15
 8002342:	d80a      	bhi.n	800235a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002344:	2200      	movs	r2, #0
 8002346:	6879      	ldr	r1, [r7, #4]
 8002348:	f04f 30ff 	mov.w	r0, #4294967295
 800234c:	f000 f93b 	bl	80025c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002350:	4a06      	ldr	r2, [pc, #24]	@ (800236c <HAL_InitTick+0x68>)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002356:	2300      	movs	r3, #0
 8002358:	e000      	b.n	800235c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800235a:	2301      	movs	r3, #1
}
 800235c:	4618      	mov	r0, r3
 800235e:	3708      	adds	r7, #8
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}
 8002364:	24000040 	.word	0x24000040
 8002368:	24000000 	.word	0x24000000
 800236c:	2400003c 	.word	0x2400003c

08002370 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002370:	b480      	push	{r7}
 8002372:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002374:	4b06      	ldr	r3, [pc, #24]	@ (8002390 <HAL_IncTick+0x20>)
 8002376:	781b      	ldrb	r3, [r3, #0]
 8002378:	461a      	mov	r2, r3
 800237a:	4b06      	ldr	r3, [pc, #24]	@ (8002394 <HAL_IncTick+0x24>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4413      	add	r3, r2
 8002380:	4a04      	ldr	r2, [pc, #16]	@ (8002394 <HAL_IncTick+0x24>)
 8002382:	6013      	str	r3, [r2, #0]
}
 8002384:	bf00      	nop
 8002386:	46bd      	mov	sp, r7
 8002388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238c:	4770      	bx	lr
 800238e:	bf00      	nop
 8002390:	24000040 	.word	0x24000040
 8002394:	24000878 	.word	0x24000878

08002398 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002398:	b480      	push	{r7}
 800239a:	af00      	add	r7, sp, #0
  return uwTick;
 800239c:	4b03      	ldr	r3, [pc, #12]	@ (80023ac <HAL_GetTick+0x14>)
 800239e:	681b      	ldr	r3, [r3, #0]
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	46bd      	mov	sp, r7
 80023a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a8:	4770      	bx	lr
 80023aa:	bf00      	nop
 80023ac:	24000878 	.word	0x24000878

080023b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b084      	sub	sp, #16
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80023b8:	f7ff ffee 	bl	8002398 <HAL_GetTick>
 80023bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023c8:	d005      	beq.n	80023d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80023ca:	4b0a      	ldr	r3, [pc, #40]	@ (80023f4 <HAL_Delay+0x44>)
 80023cc:	781b      	ldrb	r3, [r3, #0]
 80023ce:	461a      	mov	r2, r3
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	4413      	add	r3, r2
 80023d4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80023d6:	bf00      	nop
 80023d8:	f7ff ffde 	bl	8002398 <HAL_GetTick>
 80023dc:	4602      	mov	r2, r0
 80023de:	68bb      	ldr	r3, [r7, #8]
 80023e0:	1ad3      	subs	r3, r2, r3
 80023e2:	68fa      	ldr	r2, [r7, #12]
 80023e4:	429a      	cmp	r2, r3
 80023e6:	d8f7      	bhi.n	80023d8 <HAL_Delay+0x28>
  {
  }
}
 80023e8:	bf00      	nop
 80023ea:	bf00      	nop
 80023ec:	3710      	adds	r7, #16
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}
 80023f2:	bf00      	nop
 80023f4:	24000040 	.word	0x24000040

080023f8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80023f8:	b480      	push	{r7}
 80023fa:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80023fc:	4b03      	ldr	r3, [pc, #12]	@ (800240c <HAL_GetREVID+0x14>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	0c1b      	lsrs	r3, r3, #16
}
 8002402:	4618      	mov	r0, r3
 8002404:	46bd      	mov	sp, r7
 8002406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240a:	4770      	bx	lr
 800240c:	5c001000 	.word	0x5c001000

08002410 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002410:	b480      	push	{r7}
 8002412:	b085      	sub	sp, #20
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	f003 0307 	and.w	r3, r3, #7
 800241e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002420:	4b0b      	ldr	r3, [pc, #44]	@ (8002450 <__NVIC_SetPriorityGrouping+0x40>)
 8002422:	68db      	ldr	r3, [r3, #12]
 8002424:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002426:	68ba      	ldr	r2, [r7, #8]
 8002428:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800242c:	4013      	ands	r3, r2
 800242e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002438:	4b06      	ldr	r3, [pc, #24]	@ (8002454 <__NVIC_SetPriorityGrouping+0x44>)
 800243a:	4313      	orrs	r3, r2
 800243c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800243e:	4a04      	ldr	r2, [pc, #16]	@ (8002450 <__NVIC_SetPriorityGrouping+0x40>)
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	60d3      	str	r3, [r2, #12]
}
 8002444:	bf00      	nop
 8002446:	3714      	adds	r7, #20
 8002448:	46bd      	mov	sp, r7
 800244a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244e:	4770      	bx	lr
 8002450:	e000ed00 	.word	0xe000ed00
 8002454:	05fa0000 	.word	0x05fa0000

08002458 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002458:	b480      	push	{r7}
 800245a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800245c:	4b04      	ldr	r3, [pc, #16]	@ (8002470 <__NVIC_GetPriorityGrouping+0x18>)
 800245e:	68db      	ldr	r3, [r3, #12]
 8002460:	0a1b      	lsrs	r3, r3, #8
 8002462:	f003 0307 	and.w	r3, r3, #7
}
 8002466:	4618      	mov	r0, r3
 8002468:	46bd      	mov	sp, r7
 800246a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246e:	4770      	bx	lr
 8002470:	e000ed00 	.word	0xe000ed00

08002474 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002474:	b480      	push	{r7}
 8002476:	b083      	sub	sp, #12
 8002478:	af00      	add	r7, sp, #0
 800247a:	4603      	mov	r3, r0
 800247c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800247e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002482:	2b00      	cmp	r3, #0
 8002484:	db0b      	blt.n	800249e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002486:	88fb      	ldrh	r3, [r7, #6]
 8002488:	f003 021f 	and.w	r2, r3, #31
 800248c:	4907      	ldr	r1, [pc, #28]	@ (80024ac <__NVIC_EnableIRQ+0x38>)
 800248e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002492:	095b      	lsrs	r3, r3, #5
 8002494:	2001      	movs	r0, #1
 8002496:	fa00 f202 	lsl.w	r2, r0, r2
 800249a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800249e:	bf00      	nop
 80024a0:	370c      	adds	r7, #12
 80024a2:	46bd      	mov	sp, r7
 80024a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a8:	4770      	bx	lr
 80024aa:	bf00      	nop
 80024ac:	e000e100 	.word	0xe000e100

080024b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b083      	sub	sp, #12
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	4603      	mov	r3, r0
 80024b8:	6039      	str	r1, [r7, #0]
 80024ba:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80024bc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	db0a      	blt.n	80024da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	b2da      	uxtb	r2, r3
 80024c8:	490c      	ldr	r1, [pc, #48]	@ (80024fc <__NVIC_SetPriority+0x4c>)
 80024ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80024ce:	0112      	lsls	r2, r2, #4
 80024d0:	b2d2      	uxtb	r2, r2
 80024d2:	440b      	add	r3, r1
 80024d4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024d8:	e00a      	b.n	80024f0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	b2da      	uxtb	r2, r3
 80024de:	4908      	ldr	r1, [pc, #32]	@ (8002500 <__NVIC_SetPriority+0x50>)
 80024e0:	88fb      	ldrh	r3, [r7, #6]
 80024e2:	f003 030f 	and.w	r3, r3, #15
 80024e6:	3b04      	subs	r3, #4
 80024e8:	0112      	lsls	r2, r2, #4
 80024ea:	b2d2      	uxtb	r2, r2
 80024ec:	440b      	add	r3, r1
 80024ee:	761a      	strb	r2, [r3, #24]
}
 80024f0:	bf00      	nop
 80024f2:	370c      	adds	r7, #12
 80024f4:	46bd      	mov	sp, r7
 80024f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fa:	4770      	bx	lr
 80024fc:	e000e100 	.word	0xe000e100
 8002500:	e000ed00 	.word	0xe000ed00

08002504 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002504:	b480      	push	{r7}
 8002506:	b089      	sub	sp, #36	@ 0x24
 8002508:	af00      	add	r7, sp, #0
 800250a:	60f8      	str	r0, [r7, #12]
 800250c:	60b9      	str	r1, [r7, #8]
 800250e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	f003 0307 	and.w	r3, r3, #7
 8002516:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002518:	69fb      	ldr	r3, [r7, #28]
 800251a:	f1c3 0307 	rsb	r3, r3, #7
 800251e:	2b04      	cmp	r3, #4
 8002520:	bf28      	it	cs
 8002522:	2304      	movcs	r3, #4
 8002524:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002526:	69fb      	ldr	r3, [r7, #28]
 8002528:	3304      	adds	r3, #4
 800252a:	2b06      	cmp	r3, #6
 800252c:	d902      	bls.n	8002534 <NVIC_EncodePriority+0x30>
 800252e:	69fb      	ldr	r3, [r7, #28]
 8002530:	3b03      	subs	r3, #3
 8002532:	e000      	b.n	8002536 <NVIC_EncodePriority+0x32>
 8002534:	2300      	movs	r3, #0
 8002536:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002538:	f04f 32ff 	mov.w	r2, #4294967295
 800253c:	69bb      	ldr	r3, [r7, #24]
 800253e:	fa02 f303 	lsl.w	r3, r2, r3
 8002542:	43da      	mvns	r2, r3
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	401a      	ands	r2, r3
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800254c:	f04f 31ff 	mov.w	r1, #4294967295
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	fa01 f303 	lsl.w	r3, r1, r3
 8002556:	43d9      	mvns	r1, r3
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800255c:	4313      	orrs	r3, r2
         );
}
 800255e:	4618      	mov	r0, r3
 8002560:	3724      	adds	r7, #36	@ 0x24
 8002562:	46bd      	mov	sp, r7
 8002564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002568:	4770      	bx	lr
	...

0800256c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b082      	sub	sp, #8
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	3b01      	subs	r3, #1
 8002578:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800257c:	d301      	bcc.n	8002582 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800257e:	2301      	movs	r3, #1
 8002580:	e00f      	b.n	80025a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002582:	4a0a      	ldr	r2, [pc, #40]	@ (80025ac <SysTick_Config+0x40>)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	3b01      	subs	r3, #1
 8002588:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800258a:	210f      	movs	r1, #15
 800258c:	f04f 30ff 	mov.w	r0, #4294967295
 8002590:	f7ff ff8e 	bl	80024b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002594:	4b05      	ldr	r3, [pc, #20]	@ (80025ac <SysTick_Config+0x40>)
 8002596:	2200      	movs	r2, #0
 8002598:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800259a:	4b04      	ldr	r3, [pc, #16]	@ (80025ac <SysTick_Config+0x40>)
 800259c:	2207      	movs	r2, #7
 800259e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025a0:	2300      	movs	r3, #0
}
 80025a2:	4618      	mov	r0, r3
 80025a4:	3708      	adds	r7, #8
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}
 80025aa:	bf00      	nop
 80025ac:	e000e010 	.word	0xe000e010

080025b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b082      	sub	sp, #8
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025b8:	6878      	ldr	r0, [r7, #4]
 80025ba:	f7ff ff29 	bl	8002410 <__NVIC_SetPriorityGrouping>
}
 80025be:	bf00      	nop
 80025c0:	3708      	adds	r7, #8
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}

080025c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025c6:	b580      	push	{r7, lr}
 80025c8:	b086      	sub	sp, #24
 80025ca:	af00      	add	r7, sp, #0
 80025cc:	4603      	mov	r3, r0
 80025ce:	60b9      	str	r1, [r7, #8]
 80025d0:	607a      	str	r2, [r7, #4]
 80025d2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80025d4:	f7ff ff40 	bl	8002458 <__NVIC_GetPriorityGrouping>
 80025d8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025da:	687a      	ldr	r2, [r7, #4]
 80025dc:	68b9      	ldr	r1, [r7, #8]
 80025de:	6978      	ldr	r0, [r7, #20]
 80025e0:	f7ff ff90 	bl	8002504 <NVIC_EncodePriority>
 80025e4:	4602      	mov	r2, r0
 80025e6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80025ea:	4611      	mov	r1, r2
 80025ec:	4618      	mov	r0, r3
 80025ee:	f7ff ff5f 	bl	80024b0 <__NVIC_SetPriority>
}
 80025f2:	bf00      	nop
 80025f4:	3718      	adds	r7, #24
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}

080025fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025fa:	b580      	push	{r7, lr}
 80025fc:	b082      	sub	sp, #8
 80025fe:	af00      	add	r7, sp, #0
 8002600:	4603      	mov	r3, r0
 8002602:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002604:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002608:	4618      	mov	r0, r3
 800260a:	f7ff ff33 	bl	8002474 <__NVIC_EnableIRQ>
}
 800260e:	bf00      	nop
 8002610:	3708      	adds	r7, #8
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}

08002616 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002616:	b580      	push	{r7, lr}
 8002618:	b082      	sub	sp, #8
 800261a:	af00      	add	r7, sp, #0
 800261c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800261e:	6878      	ldr	r0, [r7, #4]
 8002620:	f7ff ffa4 	bl	800256c <SysTick_Config>
 8002624:	4603      	mov	r3, r0
}
 8002626:	4618      	mov	r0, r3
 8002628:	3708      	adds	r7, #8
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}
	...

08002630 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8002630:	b480      	push	{r7}
 8002632:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8002634:	4b07      	ldr	r3, [pc, #28]	@ (8002654 <HAL_GetCurrentCPUID+0x24>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	091b      	lsrs	r3, r3, #4
 800263a:	f003 030f 	and.w	r3, r3, #15
 800263e:	2b07      	cmp	r3, #7
 8002640:	d101      	bne.n	8002646 <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 8002642:	2303      	movs	r3, #3
 8002644:	e000      	b.n	8002648 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 8002646:	2301      	movs	r3, #1
  }
}
 8002648:	4618      	mov	r0, r3
 800264a:	46bd      	mov	sp, r7
 800264c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002650:	4770      	bx	lr
 8002652:	bf00      	nop
 8002654:	e000ed00 	.word	0xe000ed00

08002658 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b086      	sub	sp, #24
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002660:	f7ff fe9a 	bl	8002398 <HAL_GetTick>
 8002664:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d101      	bne.n	8002670 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800266c:	2301      	movs	r3, #1
 800266e:	e316      	b.n	8002c9e <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a66      	ldr	r2, [pc, #408]	@ (8002810 <HAL_DMA_Init+0x1b8>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d04a      	beq.n	8002710 <HAL_DMA_Init+0xb8>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4a65      	ldr	r2, [pc, #404]	@ (8002814 <HAL_DMA_Init+0x1bc>)
 8002680:	4293      	cmp	r3, r2
 8002682:	d045      	beq.n	8002710 <HAL_DMA_Init+0xb8>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a63      	ldr	r2, [pc, #396]	@ (8002818 <HAL_DMA_Init+0x1c0>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d040      	beq.n	8002710 <HAL_DMA_Init+0xb8>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4a62      	ldr	r2, [pc, #392]	@ (800281c <HAL_DMA_Init+0x1c4>)
 8002694:	4293      	cmp	r3, r2
 8002696:	d03b      	beq.n	8002710 <HAL_DMA_Init+0xb8>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a60      	ldr	r2, [pc, #384]	@ (8002820 <HAL_DMA_Init+0x1c8>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d036      	beq.n	8002710 <HAL_DMA_Init+0xb8>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a5f      	ldr	r2, [pc, #380]	@ (8002824 <HAL_DMA_Init+0x1cc>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d031      	beq.n	8002710 <HAL_DMA_Init+0xb8>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a5d      	ldr	r2, [pc, #372]	@ (8002828 <HAL_DMA_Init+0x1d0>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d02c      	beq.n	8002710 <HAL_DMA_Init+0xb8>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a5c      	ldr	r2, [pc, #368]	@ (800282c <HAL_DMA_Init+0x1d4>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d027      	beq.n	8002710 <HAL_DMA_Init+0xb8>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a5a      	ldr	r2, [pc, #360]	@ (8002830 <HAL_DMA_Init+0x1d8>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d022      	beq.n	8002710 <HAL_DMA_Init+0xb8>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a59      	ldr	r2, [pc, #356]	@ (8002834 <HAL_DMA_Init+0x1dc>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d01d      	beq.n	8002710 <HAL_DMA_Init+0xb8>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a57      	ldr	r2, [pc, #348]	@ (8002838 <HAL_DMA_Init+0x1e0>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d018      	beq.n	8002710 <HAL_DMA_Init+0xb8>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a56      	ldr	r2, [pc, #344]	@ (800283c <HAL_DMA_Init+0x1e4>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d013      	beq.n	8002710 <HAL_DMA_Init+0xb8>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a54      	ldr	r2, [pc, #336]	@ (8002840 <HAL_DMA_Init+0x1e8>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d00e      	beq.n	8002710 <HAL_DMA_Init+0xb8>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4a53      	ldr	r2, [pc, #332]	@ (8002844 <HAL_DMA_Init+0x1ec>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d009      	beq.n	8002710 <HAL_DMA_Init+0xb8>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a51      	ldr	r2, [pc, #324]	@ (8002848 <HAL_DMA_Init+0x1f0>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d004      	beq.n	8002710 <HAL_DMA_Init+0xb8>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a50      	ldr	r2, [pc, #320]	@ (800284c <HAL_DMA_Init+0x1f4>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d101      	bne.n	8002714 <HAL_DMA_Init+0xbc>
 8002710:	2301      	movs	r3, #1
 8002712:	e000      	b.n	8002716 <HAL_DMA_Init+0xbe>
 8002714:	2300      	movs	r3, #0
 8002716:	2b00      	cmp	r3, #0
 8002718:	f000 813b 	beq.w	8002992 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2202      	movs	r2, #2
 8002720:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2200      	movs	r2, #0
 8002728:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a37      	ldr	r2, [pc, #220]	@ (8002810 <HAL_DMA_Init+0x1b8>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d04a      	beq.n	80027cc <HAL_DMA_Init+0x174>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a36      	ldr	r2, [pc, #216]	@ (8002814 <HAL_DMA_Init+0x1bc>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d045      	beq.n	80027cc <HAL_DMA_Init+0x174>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a34      	ldr	r2, [pc, #208]	@ (8002818 <HAL_DMA_Init+0x1c0>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d040      	beq.n	80027cc <HAL_DMA_Init+0x174>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a33      	ldr	r2, [pc, #204]	@ (800281c <HAL_DMA_Init+0x1c4>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d03b      	beq.n	80027cc <HAL_DMA_Init+0x174>
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a31      	ldr	r2, [pc, #196]	@ (8002820 <HAL_DMA_Init+0x1c8>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d036      	beq.n	80027cc <HAL_DMA_Init+0x174>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a30      	ldr	r2, [pc, #192]	@ (8002824 <HAL_DMA_Init+0x1cc>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d031      	beq.n	80027cc <HAL_DMA_Init+0x174>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a2e      	ldr	r2, [pc, #184]	@ (8002828 <HAL_DMA_Init+0x1d0>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d02c      	beq.n	80027cc <HAL_DMA_Init+0x174>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a2d      	ldr	r2, [pc, #180]	@ (800282c <HAL_DMA_Init+0x1d4>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d027      	beq.n	80027cc <HAL_DMA_Init+0x174>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a2b      	ldr	r2, [pc, #172]	@ (8002830 <HAL_DMA_Init+0x1d8>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d022      	beq.n	80027cc <HAL_DMA_Init+0x174>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a2a      	ldr	r2, [pc, #168]	@ (8002834 <HAL_DMA_Init+0x1dc>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d01d      	beq.n	80027cc <HAL_DMA_Init+0x174>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a28      	ldr	r2, [pc, #160]	@ (8002838 <HAL_DMA_Init+0x1e0>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d018      	beq.n	80027cc <HAL_DMA_Init+0x174>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a27      	ldr	r2, [pc, #156]	@ (800283c <HAL_DMA_Init+0x1e4>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d013      	beq.n	80027cc <HAL_DMA_Init+0x174>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a25      	ldr	r2, [pc, #148]	@ (8002840 <HAL_DMA_Init+0x1e8>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d00e      	beq.n	80027cc <HAL_DMA_Init+0x174>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a24      	ldr	r2, [pc, #144]	@ (8002844 <HAL_DMA_Init+0x1ec>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d009      	beq.n	80027cc <HAL_DMA_Init+0x174>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a22      	ldr	r2, [pc, #136]	@ (8002848 <HAL_DMA_Init+0x1f0>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d004      	beq.n	80027cc <HAL_DMA_Init+0x174>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a21      	ldr	r2, [pc, #132]	@ (800284c <HAL_DMA_Init+0x1f4>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d108      	bne.n	80027de <HAL_DMA_Init+0x186>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	681a      	ldr	r2, [r3, #0]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f022 0201 	bic.w	r2, r2, #1
 80027da:	601a      	str	r2, [r3, #0]
 80027dc:	e007      	b.n	80027ee <HAL_DMA_Init+0x196>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	681a      	ldr	r2, [r3, #0]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f022 0201 	bic.w	r2, r2, #1
 80027ec:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80027ee:	e02f      	b.n	8002850 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80027f0:	f7ff fdd2 	bl	8002398 <HAL_GetTick>
 80027f4:	4602      	mov	r2, r0
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	1ad3      	subs	r3, r2, r3
 80027fa:	2b05      	cmp	r3, #5
 80027fc:	d928      	bls.n	8002850 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2220      	movs	r2, #32
 8002802:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2203      	movs	r2, #3
 8002808:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 800280c:	2301      	movs	r3, #1
 800280e:	e246      	b.n	8002c9e <HAL_DMA_Init+0x646>
 8002810:	40020010 	.word	0x40020010
 8002814:	40020028 	.word	0x40020028
 8002818:	40020040 	.word	0x40020040
 800281c:	40020058 	.word	0x40020058
 8002820:	40020070 	.word	0x40020070
 8002824:	40020088 	.word	0x40020088
 8002828:	400200a0 	.word	0x400200a0
 800282c:	400200b8 	.word	0x400200b8
 8002830:	40020410 	.word	0x40020410
 8002834:	40020428 	.word	0x40020428
 8002838:	40020440 	.word	0x40020440
 800283c:	40020458 	.word	0x40020458
 8002840:	40020470 	.word	0x40020470
 8002844:	40020488 	.word	0x40020488
 8002848:	400204a0 	.word	0x400204a0
 800284c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f003 0301 	and.w	r3, r3, #1
 800285a:	2b00      	cmp	r3, #0
 800285c:	d1c8      	bne.n	80027f0 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002866:	697a      	ldr	r2, [r7, #20]
 8002868:	4b83      	ldr	r3, [pc, #524]	@ (8002a78 <HAL_DMA_Init+0x420>)
 800286a:	4013      	ands	r3, r2
 800286c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8002876:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	691b      	ldr	r3, [r3, #16]
 800287c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002882:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	699b      	ldr	r3, [r3, #24]
 8002888:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800288e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6a1b      	ldr	r3, [r3, #32]
 8002894:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8002896:	697a      	ldr	r2, [r7, #20]
 8002898:	4313      	orrs	r3, r2
 800289a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028a0:	2b04      	cmp	r3, #4
 80028a2:	d107      	bne.n	80028b4 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028ac:	4313      	orrs	r3, r2
 80028ae:	697a      	ldr	r2, [r7, #20]
 80028b0:	4313      	orrs	r3, r2
 80028b2:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80028b4:	4b71      	ldr	r3, [pc, #452]	@ (8002a7c <HAL_DMA_Init+0x424>)
 80028b6:	681a      	ldr	r2, [r3, #0]
 80028b8:	4b71      	ldr	r3, [pc, #452]	@ (8002a80 <HAL_DMA_Init+0x428>)
 80028ba:	4013      	ands	r3, r2
 80028bc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80028c0:	d328      	bcc.n	8002914 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	2b28      	cmp	r3, #40	@ 0x28
 80028c8:	d903      	bls.n	80028d2 <HAL_DMA_Init+0x27a>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	2b2e      	cmp	r3, #46	@ 0x2e
 80028d0:	d917      	bls.n	8002902 <HAL_DMA_Init+0x2aa>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	2b3e      	cmp	r3, #62	@ 0x3e
 80028d8:	d903      	bls.n	80028e2 <HAL_DMA_Init+0x28a>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	2b42      	cmp	r3, #66	@ 0x42
 80028e0:	d90f      	bls.n	8002902 <HAL_DMA_Init+0x2aa>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	2b46      	cmp	r3, #70	@ 0x46
 80028e8:	d903      	bls.n	80028f2 <HAL_DMA_Init+0x29a>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	2b48      	cmp	r3, #72	@ 0x48
 80028f0:	d907      	bls.n	8002902 <HAL_DMA_Init+0x2aa>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	2b4e      	cmp	r3, #78	@ 0x4e
 80028f8:	d905      	bls.n	8002906 <HAL_DMA_Init+0x2ae>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	2b52      	cmp	r3, #82	@ 0x52
 8002900:	d801      	bhi.n	8002906 <HAL_DMA_Init+0x2ae>
 8002902:	2301      	movs	r3, #1
 8002904:	e000      	b.n	8002908 <HAL_DMA_Init+0x2b0>
 8002906:	2300      	movs	r3, #0
 8002908:	2b00      	cmp	r3, #0
 800290a:	d003      	beq.n	8002914 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002912:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	697a      	ldr	r2, [r7, #20]
 800291a:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	695b      	ldr	r3, [r3, #20]
 8002922:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	f023 0307 	bic.w	r3, r3, #7
 800292a:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002930:	697a      	ldr	r2, [r7, #20]
 8002932:	4313      	orrs	r3, r2
 8002934:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800293a:	2b04      	cmp	r3, #4
 800293c:	d117      	bne.n	800296e <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002942:	697a      	ldr	r2, [r7, #20]
 8002944:	4313      	orrs	r3, r2
 8002946:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800294c:	2b00      	cmp	r3, #0
 800294e:	d00e      	beq.n	800296e <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002950:	6878      	ldr	r0, [r7, #4]
 8002952:	f001 fdcf 	bl	80044f4 <DMA_CheckFifoParam>
 8002956:	4603      	mov	r3, r0
 8002958:	2b00      	cmp	r3, #0
 800295a:	d008      	beq.n	800296e <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2240      	movs	r2, #64	@ 0x40
 8002960:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2201      	movs	r2, #1
 8002966:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 800296a:	2301      	movs	r3, #1
 800296c:	e197      	b.n	8002c9e <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	697a      	ldr	r2, [r7, #20]
 8002974:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002976:	6878      	ldr	r0, [r7, #4]
 8002978:	f001 fd0a 	bl	8004390 <DMA_CalcBaseAndBitshift>
 800297c:	4603      	mov	r3, r0
 800297e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002984:	f003 031f 	and.w	r3, r3, #31
 8002988:	223f      	movs	r2, #63	@ 0x3f
 800298a:	409a      	lsls	r2, r3
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	609a      	str	r2, [r3, #8]
 8002990:	e0cd      	b.n	8002b2e <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4a3b      	ldr	r2, [pc, #236]	@ (8002a84 <HAL_DMA_Init+0x42c>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d022      	beq.n	80029e2 <HAL_DMA_Init+0x38a>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a39      	ldr	r2, [pc, #228]	@ (8002a88 <HAL_DMA_Init+0x430>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d01d      	beq.n	80029e2 <HAL_DMA_Init+0x38a>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a38      	ldr	r2, [pc, #224]	@ (8002a8c <HAL_DMA_Init+0x434>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d018      	beq.n	80029e2 <HAL_DMA_Init+0x38a>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a36      	ldr	r2, [pc, #216]	@ (8002a90 <HAL_DMA_Init+0x438>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d013      	beq.n	80029e2 <HAL_DMA_Init+0x38a>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4a35      	ldr	r2, [pc, #212]	@ (8002a94 <HAL_DMA_Init+0x43c>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d00e      	beq.n	80029e2 <HAL_DMA_Init+0x38a>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a33      	ldr	r2, [pc, #204]	@ (8002a98 <HAL_DMA_Init+0x440>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d009      	beq.n	80029e2 <HAL_DMA_Init+0x38a>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a32      	ldr	r2, [pc, #200]	@ (8002a9c <HAL_DMA_Init+0x444>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d004      	beq.n	80029e2 <HAL_DMA_Init+0x38a>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a30      	ldr	r2, [pc, #192]	@ (8002aa0 <HAL_DMA_Init+0x448>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d101      	bne.n	80029e6 <HAL_DMA_Init+0x38e>
 80029e2:	2301      	movs	r3, #1
 80029e4:	e000      	b.n	80029e8 <HAL_DMA_Init+0x390>
 80029e6:	2300      	movs	r3, #0
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	f000 8097 	beq.w	8002b1c <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4a24      	ldr	r2, [pc, #144]	@ (8002a84 <HAL_DMA_Init+0x42c>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d021      	beq.n	8002a3c <HAL_DMA_Init+0x3e4>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a22      	ldr	r2, [pc, #136]	@ (8002a88 <HAL_DMA_Init+0x430>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d01c      	beq.n	8002a3c <HAL_DMA_Init+0x3e4>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a21      	ldr	r2, [pc, #132]	@ (8002a8c <HAL_DMA_Init+0x434>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d017      	beq.n	8002a3c <HAL_DMA_Init+0x3e4>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a1f      	ldr	r2, [pc, #124]	@ (8002a90 <HAL_DMA_Init+0x438>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d012      	beq.n	8002a3c <HAL_DMA_Init+0x3e4>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a1e      	ldr	r2, [pc, #120]	@ (8002a94 <HAL_DMA_Init+0x43c>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d00d      	beq.n	8002a3c <HAL_DMA_Init+0x3e4>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a1c      	ldr	r2, [pc, #112]	@ (8002a98 <HAL_DMA_Init+0x440>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d008      	beq.n	8002a3c <HAL_DMA_Init+0x3e4>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a1b      	ldr	r2, [pc, #108]	@ (8002a9c <HAL_DMA_Init+0x444>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d003      	beq.n	8002a3c <HAL_DMA_Init+0x3e4>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a19      	ldr	r2, [pc, #100]	@ (8002aa0 <HAL_DMA_Init+0x448>)
 8002a3a:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2202      	movs	r2, #2
 8002a40:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2200      	movs	r2, #0
 8002a48:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002a54:	697a      	ldr	r2, [r7, #20]
 8002a56:	4b13      	ldr	r3, [pc, #76]	@ (8002aa4 <HAL_DMA_Init+0x44c>)
 8002a58:	4013      	ands	r3, r2
 8002a5a:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	689b      	ldr	r3, [r3, #8]
 8002a60:	2b40      	cmp	r3, #64	@ 0x40
 8002a62:	d021      	beq.n	8002aa8 <HAL_DMA_Init+0x450>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	2b80      	cmp	r3, #128	@ 0x80
 8002a6a:	d102      	bne.n	8002a72 <HAL_DMA_Init+0x41a>
 8002a6c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002a70:	e01b      	b.n	8002aaa <HAL_DMA_Init+0x452>
 8002a72:	2300      	movs	r3, #0
 8002a74:	e019      	b.n	8002aaa <HAL_DMA_Init+0x452>
 8002a76:	bf00      	nop
 8002a78:	fe10803f 	.word	0xfe10803f
 8002a7c:	5c001000 	.word	0x5c001000
 8002a80:	ffff0000 	.word	0xffff0000
 8002a84:	58025408 	.word	0x58025408
 8002a88:	5802541c 	.word	0x5802541c
 8002a8c:	58025430 	.word	0x58025430
 8002a90:	58025444 	.word	0x58025444
 8002a94:	58025458 	.word	0x58025458
 8002a98:	5802546c 	.word	0x5802546c
 8002a9c:	58025480 	.word	0x58025480
 8002aa0:	58025494 	.word	0x58025494
 8002aa4:	fffe000f 	.word	0xfffe000f
 8002aa8:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002aaa:	687a      	ldr	r2, [r7, #4]
 8002aac:	68d2      	ldr	r2, [r2, #12]
 8002aae:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002ab0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	691b      	ldr	r3, [r3, #16]
 8002ab6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002ab8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	695b      	ldr	r3, [r3, #20]
 8002abe:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002ac0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	699b      	ldr	r3, [r3, #24]
 8002ac6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002ac8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	69db      	ldr	r3, [r3, #28]
 8002ace:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002ad0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6a1b      	ldr	r3, [r3, #32]
 8002ad6:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002ad8:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002ada:	697a      	ldr	r2, [r7, #20]
 8002adc:	4313      	orrs	r3, r2
 8002ade:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	697a      	ldr	r2, [r7, #20]
 8002ae6:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	461a      	mov	r2, r3
 8002aee:	4b6e      	ldr	r3, [pc, #440]	@ (8002ca8 <HAL_DMA_Init+0x650>)
 8002af0:	4413      	add	r3, r2
 8002af2:	4a6e      	ldr	r2, [pc, #440]	@ (8002cac <HAL_DMA_Init+0x654>)
 8002af4:	fba2 2303 	umull	r2, r3, r2, r3
 8002af8:	091b      	lsrs	r3, r3, #4
 8002afa:	009a      	lsls	r2, r3, #2
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002b00:	6878      	ldr	r0, [r7, #4]
 8002b02:	f001 fc45 	bl	8004390 <DMA_CalcBaseAndBitshift>
 8002b06:	4603      	mov	r3, r0
 8002b08:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b0e:	f003 031f 	and.w	r3, r3, #31
 8002b12:	2201      	movs	r2, #1
 8002b14:	409a      	lsls	r2, r3
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	605a      	str	r2, [r3, #4]
 8002b1a:	e008      	b.n	8002b2e <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2240      	movs	r2, #64	@ 0x40
 8002b20:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2203      	movs	r2, #3
 8002b26:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	e0b7      	b.n	8002c9e <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a5f      	ldr	r2, [pc, #380]	@ (8002cb0 <HAL_DMA_Init+0x658>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d072      	beq.n	8002c1e <HAL_DMA_Init+0x5c6>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a5d      	ldr	r2, [pc, #372]	@ (8002cb4 <HAL_DMA_Init+0x65c>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d06d      	beq.n	8002c1e <HAL_DMA_Init+0x5c6>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a5c      	ldr	r2, [pc, #368]	@ (8002cb8 <HAL_DMA_Init+0x660>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d068      	beq.n	8002c1e <HAL_DMA_Init+0x5c6>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a5a      	ldr	r2, [pc, #360]	@ (8002cbc <HAL_DMA_Init+0x664>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d063      	beq.n	8002c1e <HAL_DMA_Init+0x5c6>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a59      	ldr	r2, [pc, #356]	@ (8002cc0 <HAL_DMA_Init+0x668>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d05e      	beq.n	8002c1e <HAL_DMA_Init+0x5c6>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a57      	ldr	r2, [pc, #348]	@ (8002cc4 <HAL_DMA_Init+0x66c>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d059      	beq.n	8002c1e <HAL_DMA_Init+0x5c6>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a56      	ldr	r2, [pc, #344]	@ (8002cc8 <HAL_DMA_Init+0x670>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d054      	beq.n	8002c1e <HAL_DMA_Init+0x5c6>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a54      	ldr	r2, [pc, #336]	@ (8002ccc <HAL_DMA_Init+0x674>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d04f      	beq.n	8002c1e <HAL_DMA_Init+0x5c6>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a53      	ldr	r2, [pc, #332]	@ (8002cd0 <HAL_DMA_Init+0x678>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d04a      	beq.n	8002c1e <HAL_DMA_Init+0x5c6>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a51      	ldr	r2, [pc, #324]	@ (8002cd4 <HAL_DMA_Init+0x67c>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d045      	beq.n	8002c1e <HAL_DMA_Init+0x5c6>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a50      	ldr	r2, [pc, #320]	@ (8002cd8 <HAL_DMA_Init+0x680>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d040      	beq.n	8002c1e <HAL_DMA_Init+0x5c6>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a4e      	ldr	r2, [pc, #312]	@ (8002cdc <HAL_DMA_Init+0x684>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d03b      	beq.n	8002c1e <HAL_DMA_Init+0x5c6>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a4d      	ldr	r2, [pc, #308]	@ (8002ce0 <HAL_DMA_Init+0x688>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d036      	beq.n	8002c1e <HAL_DMA_Init+0x5c6>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a4b      	ldr	r2, [pc, #300]	@ (8002ce4 <HAL_DMA_Init+0x68c>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d031      	beq.n	8002c1e <HAL_DMA_Init+0x5c6>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a4a      	ldr	r2, [pc, #296]	@ (8002ce8 <HAL_DMA_Init+0x690>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d02c      	beq.n	8002c1e <HAL_DMA_Init+0x5c6>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a48      	ldr	r2, [pc, #288]	@ (8002cec <HAL_DMA_Init+0x694>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d027      	beq.n	8002c1e <HAL_DMA_Init+0x5c6>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a47      	ldr	r2, [pc, #284]	@ (8002cf0 <HAL_DMA_Init+0x698>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d022      	beq.n	8002c1e <HAL_DMA_Init+0x5c6>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a45      	ldr	r2, [pc, #276]	@ (8002cf4 <HAL_DMA_Init+0x69c>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d01d      	beq.n	8002c1e <HAL_DMA_Init+0x5c6>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a44      	ldr	r2, [pc, #272]	@ (8002cf8 <HAL_DMA_Init+0x6a0>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d018      	beq.n	8002c1e <HAL_DMA_Init+0x5c6>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a42      	ldr	r2, [pc, #264]	@ (8002cfc <HAL_DMA_Init+0x6a4>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d013      	beq.n	8002c1e <HAL_DMA_Init+0x5c6>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a41      	ldr	r2, [pc, #260]	@ (8002d00 <HAL_DMA_Init+0x6a8>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d00e      	beq.n	8002c1e <HAL_DMA_Init+0x5c6>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a3f      	ldr	r2, [pc, #252]	@ (8002d04 <HAL_DMA_Init+0x6ac>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d009      	beq.n	8002c1e <HAL_DMA_Init+0x5c6>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a3e      	ldr	r2, [pc, #248]	@ (8002d08 <HAL_DMA_Init+0x6b0>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d004      	beq.n	8002c1e <HAL_DMA_Init+0x5c6>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a3c      	ldr	r2, [pc, #240]	@ (8002d0c <HAL_DMA_Init+0x6b4>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d101      	bne.n	8002c22 <HAL_DMA_Init+0x5ca>
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e000      	b.n	8002c24 <HAL_DMA_Init+0x5cc>
 8002c22:	2300      	movs	r3, #0
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d032      	beq.n	8002c8e <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002c28:	6878      	ldr	r0, [r7, #4]
 8002c2a:	f001 fcdf 	bl	80045ec <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	689b      	ldr	r3, [r3, #8]
 8002c32:	2b80      	cmp	r3, #128	@ 0x80
 8002c34:	d102      	bne.n	8002c3c <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	685a      	ldr	r2, [r3, #4]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c44:	b2d2      	uxtb	r2, r2
 8002c46:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002c4c:	687a      	ldr	r2, [r7, #4]
 8002c4e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002c50:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d010      	beq.n	8002c7c <HAL_DMA_Init+0x624>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	2b08      	cmp	r3, #8
 8002c60:	d80c      	bhi.n	8002c7c <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002c62:	6878      	ldr	r0, [r7, #4]
 8002c64:	f001 fd5c 	bl	8004720 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c74:	687a      	ldr	r2, [r7, #4]
 8002c76:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002c78:	605a      	str	r2, [r3, #4]
 8002c7a:	e008      	b.n	8002c8e <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2200      	movs	r2, #0
 8002c80:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2200      	movs	r2, #0
 8002c86:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2200      	movs	r2, #0
 8002c92:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2201      	movs	r2, #1
 8002c98:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002c9c:	2300      	movs	r3, #0
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	3718      	adds	r7, #24
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}
 8002ca6:	bf00      	nop
 8002ca8:	a7fdabf8 	.word	0xa7fdabf8
 8002cac:	cccccccd 	.word	0xcccccccd
 8002cb0:	40020010 	.word	0x40020010
 8002cb4:	40020028 	.word	0x40020028
 8002cb8:	40020040 	.word	0x40020040
 8002cbc:	40020058 	.word	0x40020058
 8002cc0:	40020070 	.word	0x40020070
 8002cc4:	40020088 	.word	0x40020088
 8002cc8:	400200a0 	.word	0x400200a0
 8002ccc:	400200b8 	.word	0x400200b8
 8002cd0:	40020410 	.word	0x40020410
 8002cd4:	40020428 	.word	0x40020428
 8002cd8:	40020440 	.word	0x40020440
 8002cdc:	40020458 	.word	0x40020458
 8002ce0:	40020470 	.word	0x40020470
 8002ce4:	40020488 	.word	0x40020488
 8002ce8:	400204a0 	.word	0x400204a0
 8002cec:	400204b8 	.word	0x400204b8
 8002cf0:	58025408 	.word	0x58025408
 8002cf4:	5802541c 	.word	0x5802541c
 8002cf8:	58025430 	.word	0x58025430
 8002cfc:	58025444 	.word	0x58025444
 8002d00:	58025458 	.word	0x58025458
 8002d04:	5802546c 	.word	0x5802546c
 8002d08:	58025480 	.word	0x58025480
 8002d0c:	58025494 	.word	0x58025494

08002d10 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b086      	sub	sp, #24
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	60f8      	str	r0, [r7, #12]
 8002d18:	60b9      	str	r1, [r7, #8]
 8002d1a:	607a      	str	r2, [r7, #4]
 8002d1c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d101      	bne.n	8002d2c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	e226      	b.n	800317a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002d32:	2b01      	cmp	r3, #1
 8002d34:	d101      	bne.n	8002d3a <HAL_DMA_Start_IT+0x2a>
 8002d36:	2302      	movs	r3, #2
 8002d38:	e21f      	b.n	800317a <HAL_DMA_Start_IT+0x46a>
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	2201      	movs	r2, #1
 8002d3e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002d48:	b2db      	uxtb	r3, r3
 8002d4a:	2b01      	cmp	r3, #1
 8002d4c:	f040 820a 	bne.w	8003164 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	2202      	movs	r2, #2
 8002d54:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a68      	ldr	r2, [pc, #416]	@ (8002f04 <HAL_DMA_Start_IT+0x1f4>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d04a      	beq.n	8002dfe <HAL_DMA_Start_IT+0xee>
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a66      	ldr	r2, [pc, #408]	@ (8002f08 <HAL_DMA_Start_IT+0x1f8>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d045      	beq.n	8002dfe <HAL_DMA_Start_IT+0xee>
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a65      	ldr	r2, [pc, #404]	@ (8002f0c <HAL_DMA_Start_IT+0x1fc>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d040      	beq.n	8002dfe <HAL_DMA_Start_IT+0xee>
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a63      	ldr	r2, [pc, #396]	@ (8002f10 <HAL_DMA_Start_IT+0x200>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d03b      	beq.n	8002dfe <HAL_DMA_Start_IT+0xee>
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a62      	ldr	r2, [pc, #392]	@ (8002f14 <HAL_DMA_Start_IT+0x204>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d036      	beq.n	8002dfe <HAL_DMA_Start_IT+0xee>
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a60      	ldr	r2, [pc, #384]	@ (8002f18 <HAL_DMA_Start_IT+0x208>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d031      	beq.n	8002dfe <HAL_DMA_Start_IT+0xee>
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a5f      	ldr	r2, [pc, #380]	@ (8002f1c <HAL_DMA_Start_IT+0x20c>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d02c      	beq.n	8002dfe <HAL_DMA_Start_IT+0xee>
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a5d      	ldr	r2, [pc, #372]	@ (8002f20 <HAL_DMA_Start_IT+0x210>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d027      	beq.n	8002dfe <HAL_DMA_Start_IT+0xee>
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4a5c      	ldr	r2, [pc, #368]	@ (8002f24 <HAL_DMA_Start_IT+0x214>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d022      	beq.n	8002dfe <HAL_DMA_Start_IT+0xee>
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a5a      	ldr	r2, [pc, #360]	@ (8002f28 <HAL_DMA_Start_IT+0x218>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d01d      	beq.n	8002dfe <HAL_DMA_Start_IT+0xee>
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a59      	ldr	r2, [pc, #356]	@ (8002f2c <HAL_DMA_Start_IT+0x21c>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d018      	beq.n	8002dfe <HAL_DMA_Start_IT+0xee>
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a57      	ldr	r2, [pc, #348]	@ (8002f30 <HAL_DMA_Start_IT+0x220>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d013      	beq.n	8002dfe <HAL_DMA_Start_IT+0xee>
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a56      	ldr	r2, [pc, #344]	@ (8002f34 <HAL_DMA_Start_IT+0x224>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d00e      	beq.n	8002dfe <HAL_DMA_Start_IT+0xee>
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a54      	ldr	r2, [pc, #336]	@ (8002f38 <HAL_DMA_Start_IT+0x228>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d009      	beq.n	8002dfe <HAL_DMA_Start_IT+0xee>
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a53      	ldr	r2, [pc, #332]	@ (8002f3c <HAL_DMA_Start_IT+0x22c>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d004      	beq.n	8002dfe <HAL_DMA_Start_IT+0xee>
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a51      	ldr	r2, [pc, #324]	@ (8002f40 <HAL_DMA_Start_IT+0x230>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d108      	bne.n	8002e10 <HAL_DMA_Start_IT+0x100>
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	681a      	ldr	r2, [r3, #0]
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f022 0201 	bic.w	r2, r2, #1
 8002e0c:	601a      	str	r2, [r3, #0]
 8002e0e:	e007      	b.n	8002e20 <HAL_DMA_Start_IT+0x110>
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f022 0201 	bic.w	r2, r2, #1
 8002e1e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	687a      	ldr	r2, [r7, #4]
 8002e24:	68b9      	ldr	r1, [r7, #8]
 8002e26:	68f8      	ldr	r0, [r7, #12]
 8002e28:	f001 f906 	bl	8004038 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a34      	ldr	r2, [pc, #208]	@ (8002f04 <HAL_DMA_Start_IT+0x1f4>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d04a      	beq.n	8002ecc <HAL_DMA_Start_IT+0x1bc>
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a33      	ldr	r2, [pc, #204]	@ (8002f08 <HAL_DMA_Start_IT+0x1f8>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d045      	beq.n	8002ecc <HAL_DMA_Start_IT+0x1bc>
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a31      	ldr	r2, [pc, #196]	@ (8002f0c <HAL_DMA_Start_IT+0x1fc>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d040      	beq.n	8002ecc <HAL_DMA_Start_IT+0x1bc>
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a30      	ldr	r2, [pc, #192]	@ (8002f10 <HAL_DMA_Start_IT+0x200>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d03b      	beq.n	8002ecc <HAL_DMA_Start_IT+0x1bc>
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a2e      	ldr	r2, [pc, #184]	@ (8002f14 <HAL_DMA_Start_IT+0x204>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d036      	beq.n	8002ecc <HAL_DMA_Start_IT+0x1bc>
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a2d      	ldr	r2, [pc, #180]	@ (8002f18 <HAL_DMA_Start_IT+0x208>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d031      	beq.n	8002ecc <HAL_DMA_Start_IT+0x1bc>
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a2b      	ldr	r2, [pc, #172]	@ (8002f1c <HAL_DMA_Start_IT+0x20c>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d02c      	beq.n	8002ecc <HAL_DMA_Start_IT+0x1bc>
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a2a      	ldr	r2, [pc, #168]	@ (8002f20 <HAL_DMA_Start_IT+0x210>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d027      	beq.n	8002ecc <HAL_DMA_Start_IT+0x1bc>
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a28      	ldr	r2, [pc, #160]	@ (8002f24 <HAL_DMA_Start_IT+0x214>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d022      	beq.n	8002ecc <HAL_DMA_Start_IT+0x1bc>
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a27      	ldr	r2, [pc, #156]	@ (8002f28 <HAL_DMA_Start_IT+0x218>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d01d      	beq.n	8002ecc <HAL_DMA_Start_IT+0x1bc>
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a25      	ldr	r2, [pc, #148]	@ (8002f2c <HAL_DMA_Start_IT+0x21c>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d018      	beq.n	8002ecc <HAL_DMA_Start_IT+0x1bc>
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a24      	ldr	r2, [pc, #144]	@ (8002f30 <HAL_DMA_Start_IT+0x220>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d013      	beq.n	8002ecc <HAL_DMA_Start_IT+0x1bc>
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a22      	ldr	r2, [pc, #136]	@ (8002f34 <HAL_DMA_Start_IT+0x224>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d00e      	beq.n	8002ecc <HAL_DMA_Start_IT+0x1bc>
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4a21      	ldr	r2, [pc, #132]	@ (8002f38 <HAL_DMA_Start_IT+0x228>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d009      	beq.n	8002ecc <HAL_DMA_Start_IT+0x1bc>
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a1f      	ldr	r2, [pc, #124]	@ (8002f3c <HAL_DMA_Start_IT+0x22c>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d004      	beq.n	8002ecc <HAL_DMA_Start_IT+0x1bc>
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a1e      	ldr	r2, [pc, #120]	@ (8002f40 <HAL_DMA_Start_IT+0x230>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d101      	bne.n	8002ed0 <HAL_DMA_Start_IT+0x1c0>
 8002ecc:	2301      	movs	r3, #1
 8002ece:	e000      	b.n	8002ed2 <HAL_DMA_Start_IT+0x1c2>
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d036      	beq.n	8002f44 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f023 021e 	bic.w	r2, r3, #30
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f042 0216 	orr.w	r2, r2, #22
 8002ee8:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d03e      	beq.n	8002f70 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	681a      	ldr	r2, [r3, #0]
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f042 0208 	orr.w	r2, r2, #8
 8002f00:	601a      	str	r2, [r3, #0]
 8002f02:	e035      	b.n	8002f70 <HAL_DMA_Start_IT+0x260>
 8002f04:	40020010 	.word	0x40020010
 8002f08:	40020028 	.word	0x40020028
 8002f0c:	40020040 	.word	0x40020040
 8002f10:	40020058 	.word	0x40020058
 8002f14:	40020070 	.word	0x40020070
 8002f18:	40020088 	.word	0x40020088
 8002f1c:	400200a0 	.word	0x400200a0
 8002f20:	400200b8 	.word	0x400200b8
 8002f24:	40020410 	.word	0x40020410
 8002f28:	40020428 	.word	0x40020428
 8002f2c:	40020440 	.word	0x40020440
 8002f30:	40020458 	.word	0x40020458
 8002f34:	40020470 	.word	0x40020470
 8002f38:	40020488 	.word	0x40020488
 8002f3c:	400204a0 	.word	0x400204a0
 8002f40:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f023 020e 	bic.w	r2, r3, #14
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f042 020a 	orr.w	r2, r2, #10
 8002f56:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d007      	beq.n	8002f70 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	681a      	ldr	r2, [r3, #0]
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f042 0204 	orr.w	r2, r2, #4
 8002f6e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a83      	ldr	r2, [pc, #524]	@ (8003184 <HAL_DMA_Start_IT+0x474>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d072      	beq.n	8003060 <HAL_DMA_Start_IT+0x350>
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a82      	ldr	r2, [pc, #520]	@ (8003188 <HAL_DMA_Start_IT+0x478>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d06d      	beq.n	8003060 <HAL_DMA_Start_IT+0x350>
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a80      	ldr	r2, [pc, #512]	@ (800318c <HAL_DMA_Start_IT+0x47c>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d068      	beq.n	8003060 <HAL_DMA_Start_IT+0x350>
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a7f      	ldr	r2, [pc, #508]	@ (8003190 <HAL_DMA_Start_IT+0x480>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d063      	beq.n	8003060 <HAL_DMA_Start_IT+0x350>
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a7d      	ldr	r2, [pc, #500]	@ (8003194 <HAL_DMA_Start_IT+0x484>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d05e      	beq.n	8003060 <HAL_DMA_Start_IT+0x350>
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a7c      	ldr	r2, [pc, #496]	@ (8003198 <HAL_DMA_Start_IT+0x488>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d059      	beq.n	8003060 <HAL_DMA_Start_IT+0x350>
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a7a      	ldr	r2, [pc, #488]	@ (800319c <HAL_DMA_Start_IT+0x48c>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d054      	beq.n	8003060 <HAL_DMA_Start_IT+0x350>
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a79      	ldr	r2, [pc, #484]	@ (80031a0 <HAL_DMA_Start_IT+0x490>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d04f      	beq.n	8003060 <HAL_DMA_Start_IT+0x350>
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a77      	ldr	r2, [pc, #476]	@ (80031a4 <HAL_DMA_Start_IT+0x494>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d04a      	beq.n	8003060 <HAL_DMA_Start_IT+0x350>
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a76      	ldr	r2, [pc, #472]	@ (80031a8 <HAL_DMA_Start_IT+0x498>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d045      	beq.n	8003060 <HAL_DMA_Start_IT+0x350>
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a74      	ldr	r2, [pc, #464]	@ (80031ac <HAL_DMA_Start_IT+0x49c>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d040      	beq.n	8003060 <HAL_DMA_Start_IT+0x350>
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4a73      	ldr	r2, [pc, #460]	@ (80031b0 <HAL_DMA_Start_IT+0x4a0>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d03b      	beq.n	8003060 <HAL_DMA_Start_IT+0x350>
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a71      	ldr	r2, [pc, #452]	@ (80031b4 <HAL_DMA_Start_IT+0x4a4>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d036      	beq.n	8003060 <HAL_DMA_Start_IT+0x350>
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a70      	ldr	r2, [pc, #448]	@ (80031b8 <HAL_DMA_Start_IT+0x4a8>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d031      	beq.n	8003060 <HAL_DMA_Start_IT+0x350>
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a6e      	ldr	r2, [pc, #440]	@ (80031bc <HAL_DMA_Start_IT+0x4ac>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d02c      	beq.n	8003060 <HAL_DMA_Start_IT+0x350>
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a6d      	ldr	r2, [pc, #436]	@ (80031c0 <HAL_DMA_Start_IT+0x4b0>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d027      	beq.n	8003060 <HAL_DMA_Start_IT+0x350>
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a6b      	ldr	r2, [pc, #428]	@ (80031c4 <HAL_DMA_Start_IT+0x4b4>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d022      	beq.n	8003060 <HAL_DMA_Start_IT+0x350>
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a6a      	ldr	r2, [pc, #424]	@ (80031c8 <HAL_DMA_Start_IT+0x4b8>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d01d      	beq.n	8003060 <HAL_DMA_Start_IT+0x350>
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a68      	ldr	r2, [pc, #416]	@ (80031cc <HAL_DMA_Start_IT+0x4bc>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d018      	beq.n	8003060 <HAL_DMA_Start_IT+0x350>
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a67      	ldr	r2, [pc, #412]	@ (80031d0 <HAL_DMA_Start_IT+0x4c0>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d013      	beq.n	8003060 <HAL_DMA_Start_IT+0x350>
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a65      	ldr	r2, [pc, #404]	@ (80031d4 <HAL_DMA_Start_IT+0x4c4>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d00e      	beq.n	8003060 <HAL_DMA_Start_IT+0x350>
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a64      	ldr	r2, [pc, #400]	@ (80031d8 <HAL_DMA_Start_IT+0x4c8>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d009      	beq.n	8003060 <HAL_DMA_Start_IT+0x350>
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a62      	ldr	r2, [pc, #392]	@ (80031dc <HAL_DMA_Start_IT+0x4cc>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d004      	beq.n	8003060 <HAL_DMA_Start_IT+0x350>
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a61      	ldr	r2, [pc, #388]	@ (80031e0 <HAL_DMA_Start_IT+0x4d0>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d101      	bne.n	8003064 <HAL_DMA_Start_IT+0x354>
 8003060:	2301      	movs	r3, #1
 8003062:	e000      	b.n	8003066 <HAL_DMA_Start_IT+0x356>
 8003064:	2300      	movs	r3, #0
 8003066:	2b00      	cmp	r3, #0
 8003068:	d01a      	beq.n	80030a0 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003074:	2b00      	cmp	r3, #0
 8003076:	d007      	beq.n	8003088 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800307c:	681a      	ldr	r2, [r3, #0]
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003082:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003086:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800308c:	2b00      	cmp	r3, #0
 800308e:	d007      	beq.n	80030a0 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003094:	681a      	ldr	r2, [r3, #0]
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800309a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800309e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a37      	ldr	r2, [pc, #220]	@ (8003184 <HAL_DMA_Start_IT+0x474>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d04a      	beq.n	8003140 <HAL_DMA_Start_IT+0x430>
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a36      	ldr	r2, [pc, #216]	@ (8003188 <HAL_DMA_Start_IT+0x478>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d045      	beq.n	8003140 <HAL_DMA_Start_IT+0x430>
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a34      	ldr	r2, [pc, #208]	@ (800318c <HAL_DMA_Start_IT+0x47c>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d040      	beq.n	8003140 <HAL_DMA_Start_IT+0x430>
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a33      	ldr	r2, [pc, #204]	@ (8003190 <HAL_DMA_Start_IT+0x480>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d03b      	beq.n	8003140 <HAL_DMA_Start_IT+0x430>
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a31      	ldr	r2, [pc, #196]	@ (8003194 <HAL_DMA_Start_IT+0x484>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d036      	beq.n	8003140 <HAL_DMA_Start_IT+0x430>
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a30      	ldr	r2, [pc, #192]	@ (8003198 <HAL_DMA_Start_IT+0x488>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d031      	beq.n	8003140 <HAL_DMA_Start_IT+0x430>
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a2e      	ldr	r2, [pc, #184]	@ (800319c <HAL_DMA_Start_IT+0x48c>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d02c      	beq.n	8003140 <HAL_DMA_Start_IT+0x430>
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a2d      	ldr	r2, [pc, #180]	@ (80031a0 <HAL_DMA_Start_IT+0x490>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d027      	beq.n	8003140 <HAL_DMA_Start_IT+0x430>
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a2b      	ldr	r2, [pc, #172]	@ (80031a4 <HAL_DMA_Start_IT+0x494>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d022      	beq.n	8003140 <HAL_DMA_Start_IT+0x430>
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a2a      	ldr	r2, [pc, #168]	@ (80031a8 <HAL_DMA_Start_IT+0x498>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d01d      	beq.n	8003140 <HAL_DMA_Start_IT+0x430>
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a28      	ldr	r2, [pc, #160]	@ (80031ac <HAL_DMA_Start_IT+0x49c>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d018      	beq.n	8003140 <HAL_DMA_Start_IT+0x430>
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a27      	ldr	r2, [pc, #156]	@ (80031b0 <HAL_DMA_Start_IT+0x4a0>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d013      	beq.n	8003140 <HAL_DMA_Start_IT+0x430>
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a25      	ldr	r2, [pc, #148]	@ (80031b4 <HAL_DMA_Start_IT+0x4a4>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d00e      	beq.n	8003140 <HAL_DMA_Start_IT+0x430>
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a24      	ldr	r2, [pc, #144]	@ (80031b8 <HAL_DMA_Start_IT+0x4a8>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d009      	beq.n	8003140 <HAL_DMA_Start_IT+0x430>
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a22      	ldr	r2, [pc, #136]	@ (80031bc <HAL_DMA_Start_IT+0x4ac>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d004      	beq.n	8003140 <HAL_DMA_Start_IT+0x430>
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a21      	ldr	r2, [pc, #132]	@ (80031c0 <HAL_DMA_Start_IT+0x4b0>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d108      	bne.n	8003152 <HAL_DMA_Start_IT+0x442>
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	681a      	ldr	r2, [r3, #0]
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f042 0201 	orr.w	r2, r2, #1
 800314e:	601a      	str	r2, [r3, #0]
 8003150:	e012      	b.n	8003178 <HAL_DMA_Start_IT+0x468>
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	681a      	ldr	r2, [r3, #0]
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f042 0201 	orr.w	r2, r2, #1
 8003160:	601a      	str	r2, [r3, #0]
 8003162:	e009      	b.n	8003178 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800316a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	2200      	movs	r2, #0
 8003170:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8003174:	2301      	movs	r3, #1
 8003176:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003178:	7dfb      	ldrb	r3, [r7, #23]
}
 800317a:	4618      	mov	r0, r3
 800317c:	3718      	adds	r7, #24
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}
 8003182:	bf00      	nop
 8003184:	40020010 	.word	0x40020010
 8003188:	40020028 	.word	0x40020028
 800318c:	40020040 	.word	0x40020040
 8003190:	40020058 	.word	0x40020058
 8003194:	40020070 	.word	0x40020070
 8003198:	40020088 	.word	0x40020088
 800319c:	400200a0 	.word	0x400200a0
 80031a0:	400200b8 	.word	0x400200b8
 80031a4:	40020410 	.word	0x40020410
 80031a8:	40020428 	.word	0x40020428
 80031ac:	40020440 	.word	0x40020440
 80031b0:	40020458 	.word	0x40020458
 80031b4:	40020470 	.word	0x40020470
 80031b8:	40020488 	.word	0x40020488
 80031bc:	400204a0 	.word	0x400204a0
 80031c0:	400204b8 	.word	0x400204b8
 80031c4:	58025408 	.word	0x58025408
 80031c8:	5802541c 	.word	0x5802541c
 80031cc:	58025430 	.word	0x58025430
 80031d0:	58025444 	.word	0x58025444
 80031d4:	58025458 	.word	0x58025458
 80031d8:	5802546c 	.word	0x5802546c
 80031dc:	58025480 	.word	0x58025480
 80031e0:	58025494 	.word	0x58025494

080031e4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b08a      	sub	sp, #40	@ 0x28
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80031ec:	2300      	movs	r3, #0
 80031ee:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80031f0:	4b67      	ldr	r3, [pc, #412]	@ (8003390 <HAL_DMA_IRQHandler+0x1ac>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a67      	ldr	r2, [pc, #412]	@ (8003394 <HAL_DMA_IRQHandler+0x1b0>)
 80031f6:	fba2 2303 	umull	r2, r3, r2, r3
 80031fa:	0a9b      	lsrs	r3, r3, #10
 80031fc:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003202:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003208:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800320a:	6a3b      	ldr	r3, [r7, #32]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003210:	69fb      	ldr	r3, [r7, #28]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a5f      	ldr	r2, [pc, #380]	@ (8003398 <HAL_DMA_IRQHandler+0x1b4>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d04a      	beq.n	80032b6 <HAL_DMA_IRQHandler+0xd2>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a5d      	ldr	r2, [pc, #372]	@ (800339c <HAL_DMA_IRQHandler+0x1b8>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d045      	beq.n	80032b6 <HAL_DMA_IRQHandler+0xd2>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a5c      	ldr	r2, [pc, #368]	@ (80033a0 <HAL_DMA_IRQHandler+0x1bc>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d040      	beq.n	80032b6 <HAL_DMA_IRQHandler+0xd2>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a5a      	ldr	r2, [pc, #360]	@ (80033a4 <HAL_DMA_IRQHandler+0x1c0>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d03b      	beq.n	80032b6 <HAL_DMA_IRQHandler+0xd2>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a59      	ldr	r2, [pc, #356]	@ (80033a8 <HAL_DMA_IRQHandler+0x1c4>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d036      	beq.n	80032b6 <HAL_DMA_IRQHandler+0xd2>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a57      	ldr	r2, [pc, #348]	@ (80033ac <HAL_DMA_IRQHandler+0x1c8>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d031      	beq.n	80032b6 <HAL_DMA_IRQHandler+0xd2>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a56      	ldr	r2, [pc, #344]	@ (80033b0 <HAL_DMA_IRQHandler+0x1cc>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d02c      	beq.n	80032b6 <HAL_DMA_IRQHandler+0xd2>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a54      	ldr	r2, [pc, #336]	@ (80033b4 <HAL_DMA_IRQHandler+0x1d0>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d027      	beq.n	80032b6 <HAL_DMA_IRQHandler+0xd2>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a53      	ldr	r2, [pc, #332]	@ (80033b8 <HAL_DMA_IRQHandler+0x1d4>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d022      	beq.n	80032b6 <HAL_DMA_IRQHandler+0xd2>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a51      	ldr	r2, [pc, #324]	@ (80033bc <HAL_DMA_IRQHandler+0x1d8>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d01d      	beq.n	80032b6 <HAL_DMA_IRQHandler+0xd2>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a50      	ldr	r2, [pc, #320]	@ (80033c0 <HAL_DMA_IRQHandler+0x1dc>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d018      	beq.n	80032b6 <HAL_DMA_IRQHandler+0xd2>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a4e      	ldr	r2, [pc, #312]	@ (80033c4 <HAL_DMA_IRQHandler+0x1e0>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d013      	beq.n	80032b6 <HAL_DMA_IRQHandler+0xd2>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a4d      	ldr	r2, [pc, #308]	@ (80033c8 <HAL_DMA_IRQHandler+0x1e4>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d00e      	beq.n	80032b6 <HAL_DMA_IRQHandler+0xd2>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a4b      	ldr	r2, [pc, #300]	@ (80033cc <HAL_DMA_IRQHandler+0x1e8>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d009      	beq.n	80032b6 <HAL_DMA_IRQHandler+0xd2>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a4a      	ldr	r2, [pc, #296]	@ (80033d0 <HAL_DMA_IRQHandler+0x1ec>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d004      	beq.n	80032b6 <HAL_DMA_IRQHandler+0xd2>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a48      	ldr	r2, [pc, #288]	@ (80033d4 <HAL_DMA_IRQHandler+0x1f0>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d101      	bne.n	80032ba <HAL_DMA_IRQHandler+0xd6>
 80032b6:	2301      	movs	r3, #1
 80032b8:	e000      	b.n	80032bc <HAL_DMA_IRQHandler+0xd8>
 80032ba:	2300      	movs	r3, #0
 80032bc:	2b00      	cmp	r3, #0
 80032be:	f000 842b 	beq.w	8003b18 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032c6:	f003 031f 	and.w	r3, r3, #31
 80032ca:	2208      	movs	r2, #8
 80032cc:	409a      	lsls	r2, r3
 80032ce:	69bb      	ldr	r3, [r7, #24]
 80032d0:	4013      	ands	r3, r2
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	f000 80a2 	beq.w	800341c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a2e      	ldr	r2, [pc, #184]	@ (8003398 <HAL_DMA_IRQHandler+0x1b4>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d04a      	beq.n	8003378 <HAL_DMA_IRQHandler+0x194>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a2d      	ldr	r2, [pc, #180]	@ (800339c <HAL_DMA_IRQHandler+0x1b8>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d045      	beq.n	8003378 <HAL_DMA_IRQHandler+0x194>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a2b      	ldr	r2, [pc, #172]	@ (80033a0 <HAL_DMA_IRQHandler+0x1bc>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d040      	beq.n	8003378 <HAL_DMA_IRQHandler+0x194>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a2a      	ldr	r2, [pc, #168]	@ (80033a4 <HAL_DMA_IRQHandler+0x1c0>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d03b      	beq.n	8003378 <HAL_DMA_IRQHandler+0x194>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a28      	ldr	r2, [pc, #160]	@ (80033a8 <HAL_DMA_IRQHandler+0x1c4>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d036      	beq.n	8003378 <HAL_DMA_IRQHandler+0x194>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a27      	ldr	r2, [pc, #156]	@ (80033ac <HAL_DMA_IRQHandler+0x1c8>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d031      	beq.n	8003378 <HAL_DMA_IRQHandler+0x194>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a25      	ldr	r2, [pc, #148]	@ (80033b0 <HAL_DMA_IRQHandler+0x1cc>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d02c      	beq.n	8003378 <HAL_DMA_IRQHandler+0x194>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a24      	ldr	r2, [pc, #144]	@ (80033b4 <HAL_DMA_IRQHandler+0x1d0>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d027      	beq.n	8003378 <HAL_DMA_IRQHandler+0x194>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a22      	ldr	r2, [pc, #136]	@ (80033b8 <HAL_DMA_IRQHandler+0x1d4>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d022      	beq.n	8003378 <HAL_DMA_IRQHandler+0x194>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a21      	ldr	r2, [pc, #132]	@ (80033bc <HAL_DMA_IRQHandler+0x1d8>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d01d      	beq.n	8003378 <HAL_DMA_IRQHandler+0x194>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a1f      	ldr	r2, [pc, #124]	@ (80033c0 <HAL_DMA_IRQHandler+0x1dc>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d018      	beq.n	8003378 <HAL_DMA_IRQHandler+0x194>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a1e      	ldr	r2, [pc, #120]	@ (80033c4 <HAL_DMA_IRQHandler+0x1e0>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d013      	beq.n	8003378 <HAL_DMA_IRQHandler+0x194>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a1c      	ldr	r2, [pc, #112]	@ (80033c8 <HAL_DMA_IRQHandler+0x1e4>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d00e      	beq.n	8003378 <HAL_DMA_IRQHandler+0x194>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a1b      	ldr	r2, [pc, #108]	@ (80033cc <HAL_DMA_IRQHandler+0x1e8>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d009      	beq.n	8003378 <HAL_DMA_IRQHandler+0x194>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a19      	ldr	r2, [pc, #100]	@ (80033d0 <HAL_DMA_IRQHandler+0x1ec>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d004      	beq.n	8003378 <HAL_DMA_IRQHandler+0x194>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a18      	ldr	r2, [pc, #96]	@ (80033d4 <HAL_DMA_IRQHandler+0x1f0>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d12f      	bne.n	80033d8 <HAL_DMA_IRQHandler+0x1f4>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f003 0304 	and.w	r3, r3, #4
 8003382:	2b00      	cmp	r3, #0
 8003384:	bf14      	ite	ne
 8003386:	2301      	movne	r3, #1
 8003388:	2300      	moveq	r3, #0
 800338a:	b2db      	uxtb	r3, r3
 800338c:	e02e      	b.n	80033ec <HAL_DMA_IRQHandler+0x208>
 800338e:	bf00      	nop
 8003390:	24000000 	.word	0x24000000
 8003394:	1b4e81b5 	.word	0x1b4e81b5
 8003398:	40020010 	.word	0x40020010
 800339c:	40020028 	.word	0x40020028
 80033a0:	40020040 	.word	0x40020040
 80033a4:	40020058 	.word	0x40020058
 80033a8:	40020070 	.word	0x40020070
 80033ac:	40020088 	.word	0x40020088
 80033b0:	400200a0 	.word	0x400200a0
 80033b4:	400200b8 	.word	0x400200b8
 80033b8:	40020410 	.word	0x40020410
 80033bc:	40020428 	.word	0x40020428
 80033c0:	40020440 	.word	0x40020440
 80033c4:	40020458 	.word	0x40020458
 80033c8:	40020470 	.word	0x40020470
 80033cc:	40020488 	.word	0x40020488
 80033d0:	400204a0 	.word	0x400204a0
 80033d4:	400204b8 	.word	0x400204b8
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f003 0308 	and.w	r3, r3, #8
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	bf14      	ite	ne
 80033e6:	2301      	movne	r3, #1
 80033e8:	2300      	moveq	r3, #0
 80033ea:	b2db      	uxtb	r3, r3
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d015      	beq.n	800341c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	681a      	ldr	r2, [r3, #0]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f022 0204 	bic.w	r2, r2, #4
 80033fe:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003404:	f003 031f 	and.w	r3, r3, #31
 8003408:	2208      	movs	r2, #8
 800340a:	409a      	lsls	r2, r3
 800340c:	6a3b      	ldr	r3, [r7, #32]
 800340e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003414:	f043 0201 	orr.w	r2, r3, #1
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003420:	f003 031f 	and.w	r3, r3, #31
 8003424:	69ba      	ldr	r2, [r7, #24]
 8003426:	fa22 f303 	lsr.w	r3, r2, r3
 800342a:	f003 0301 	and.w	r3, r3, #1
 800342e:	2b00      	cmp	r3, #0
 8003430:	d06e      	beq.n	8003510 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a69      	ldr	r2, [pc, #420]	@ (80035dc <HAL_DMA_IRQHandler+0x3f8>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d04a      	beq.n	80034d2 <HAL_DMA_IRQHandler+0x2ee>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a67      	ldr	r2, [pc, #412]	@ (80035e0 <HAL_DMA_IRQHandler+0x3fc>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d045      	beq.n	80034d2 <HAL_DMA_IRQHandler+0x2ee>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4a66      	ldr	r2, [pc, #408]	@ (80035e4 <HAL_DMA_IRQHandler+0x400>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d040      	beq.n	80034d2 <HAL_DMA_IRQHandler+0x2ee>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a64      	ldr	r2, [pc, #400]	@ (80035e8 <HAL_DMA_IRQHandler+0x404>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d03b      	beq.n	80034d2 <HAL_DMA_IRQHandler+0x2ee>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a63      	ldr	r2, [pc, #396]	@ (80035ec <HAL_DMA_IRQHandler+0x408>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d036      	beq.n	80034d2 <HAL_DMA_IRQHandler+0x2ee>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a61      	ldr	r2, [pc, #388]	@ (80035f0 <HAL_DMA_IRQHandler+0x40c>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d031      	beq.n	80034d2 <HAL_DMA_IRQHandler+0x2ee>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4a60      	ldr	r2, [pc, #384]	@ (80035f4 <HAL_DMA_IRQHandler+0x410>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d02c      	beq.n	80034d2 <HAL_DMA_IRQHandler+0x2ee>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a5e      	ldr	r2, [pc, #376]	@ (80035f8 <HAL_DMA_IRQHandler+0x414>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d027      	beq.n	80034d2 <HAL_DMA_IRQHandler+0x2ee>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4a5d      	ldr	r2, [pc, #372]	@ (80035fc <HAL_DMA_IRQHandler+0x418>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d022      	beq.n	80034d2 <HAL_DMA_IRQHandler+0x2ee>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a5b      	ldr	r2, [pc, #364]	@ (8003600 <HAL_DMA_IRQHandler+0x41c>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d01d      	beq.n	80034d2 <HAL_DMA_IRQHandler+0x2ee>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4a5a      	ldr	r2, [pc, #360]	@ (8003604 <HAL_DMA_IRQHandler+0x420>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d018      	beq.n	80034d2 <HAL_DMA_IRQHandler+0x2ee>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a58      	ldr	r2, [pc, #352]	@ (8003608 <HAL_DMA_IRQHandler+0x424>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d013      	beq.n	80034d2 <HAL_DMA_IRQHandler+0x2ee>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4a57      	ldr	r2, [pc, #348]	@ (800360c <HAL_DMA_IRQHandler+0x428>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d00e      	beq.n	80034d2 <HAL_DMA_IRQHandler+0x2ee>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a55      	ldr	r2, [pc, #340]	@ (8003610 <HAL_DMA_IRQHandler+0x42c>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d009      	beq.n	80034d2 <HAL_DMA_IRQHandler+0x2ee>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a54      	ldr	r2, [pc, #336]	@ (8003614 <HAL_DMA_IRQHandler+0x430>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d004      	beq.n	80034d2 <HAL_DMA_IRQHandler+0x2ee>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a52      	ldr	r2, [pc, #328]	@ (8003618 <HAL_DMA_IRQHandler+0x434>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d10a      	bne.n	80034e8 <HAL_DMA_IRQHandler+0x304>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	695b      	ldr	r3, [r3, #20]
 80034d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034dc:	2b00      	cmp	r3, #0
 80034de:	bf14      	ite	ne
 80034e0:	2301      	movne	r3, #1
 80034e2:	2300      	moveq	r3, #0
 80034e4:	b2db      	uxtb	r3, r3
 80034e6:	e003      	b.n	80034f0 <HAL_DMA_IRQHandler+0x30c>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	2300      	movs	r3, #0
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d00d      	beq.n	8003510 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034f8:	f003 031f 	and.w	r3, r3, #31
 80034fc:	2201      	movs	r2, #1
 80034fe:	409a      	lsls	r2, r3
 8003500:	6a3b      	ldr	r3, [r7, #32]
 8003502:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003508:	f043 0202 	orr.w	r2, r3, #2
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003514:	f003 031f 	and.w	r3, r3, #31
 8003518:	2204      	movs	r2, #4
 800351a:	409a      	lsls	r2, r3
 800351c:	69bb      	ldr	r3, [r7, #24]
 800351e:	4013      	ands	r3, r2
 8003520:	2b00      	cmp	r3, #0
 8003522:	f000 808f 	beq.w	8003644 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a2c      	ldr	r2, [pc, #176]	@ (80035dc <HAL_DMA_IRQHandler+0x3f8>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d04a      	beq.n	80035c6 <HAL_DMA_IRQHandler+0x3e2>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a2a      	ldr	r2, [pc, #168]	@ (80035e0 <HAL_DMA_IRQHandler+0x3fc>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d045      	beq.n	80035c6 <HAL_DMA_IRQHandler+0x3e2>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a29      	ldr	r2, [pc, #164]	@ (80035e4 <HAL_DMA_IRQHandler+0x400>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d040      	beq.n	80035c6 <HAL_DMA_IRQHandler+0x3e2>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a27      	ldr	r2, [pc, #156]	@ (80035e8 <HAL_DMA_IRQHandler+0x404>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d03b      	beq.n	80035c6 <HAL_DMA_IRQHandler+0x3e2>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a26      	ldr	r2, [pc, #152]	@ (80035ec <HAL_DMA_IRQHandler+0x408>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d036      	beq.n	80035c6 <HAL_DMA_IRQHandler+0x3e2>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a24      	ldr	r2, [pc, #144]	@ (80035f0 <HAL_DMA_IRQHandler+0x40c>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d031      	beq.n	80035c6 <HAL_DMA_IRQHandler+0x3e2>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a23      	ldr	r2, [pc, #140]	@ (80035f4 <HAL_DMA_IRQHandler+0x410>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d02c      	beq.n	80035c6 <HAL_DMA_IRQHandler+0x3e2>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a21      	ldr	r2, [pc, #132]	@ (80035f8 <HAL_DMA_IRQHandler+0x414>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d027      	beq.n	80035c6 <HAL_DMA_IRQHandler+0x3e2>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a20      	ldr	r2, [pc, #128]	@ (80035fc <HAL_DMA_IRQHandler+0x418>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d022      	beq.n	80035c6 <HAL_DMA_IRQHandler+0x3e2>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a1e      	ldr	r2, [pc, #120]	@ (8003600 <HAL_DMA_IRQHandler+0x41c>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d01d      	beq.n	80035c6 <HAL_DMA_IRQHandler+0x3e2>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4a1d      	ldr	r2, [pc, #116]	@ (8003604 <HAL_DMA_IRQHandler+0x420>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d018      	beq.n	80035c6 <HAL_DMA_IRQHandler+0x3e2>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4a1b      	ldr	r2, [pc, #108]	@ (8003608 <HAL_DMA_IRQHandler+0x424>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d013      	beq.n	80035c6 <HAL_DMA_IRQHandler+0x3e2>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a1a      	ldr	r2, [pc, #104]	@ (800360c <HAL_DMA_IRQHandler+0x428>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d00e      	beq.n	80035c6 <HAL_DMA_IRQHandler+0x3e2>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a18      	ldr	r2, [pc, #96]	@ (8003610 <HAL_DMA_IRQHandler+0x42c>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d009      	beq.n	80035c6 <HAL_DMA_IRQHandler+0x3e2>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4a17      	ldr	r2, [pc, #92]	@ (8003614 <HAL_DMA_IRQHandler+0x430>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d004      	beq.n	80035c6 <HAL_DMA_IRQHandler+0x3e2>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4a15      	ldr	r2, [pc, #84]	@ (8003618 <HAL_DMA_IRQHandler+0x434>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d12a      	bne.n	800361c <HAL_DMA_IRQHandler+0x438>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f003 0302 	and.w	r3, r3, #2
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	bf14      	ite	ne
 80035d4:	2301      	movne	r3, #1
 80035d6:	2300      	moveq	r3, #0
 80035d8:	b2db      	uxtb	r3, r3
 80035da:	e023      	b.n	8003624 <HAL_DMA_IRQHandler+0x440>
 80035dc:	40020010 	.word	0x40020010
 80035e0:	40020028 	.word	0x40020028
 80035e4:	40020040 	.word	0x40020040
 80035e8:	40020058 	.word	0x40020058
 80035ec:	40020070 	.word	0x40020070
 80035f0:	40020088 	.word	0x40020088
 80035f4:	400200a0 	.word	0x400200a0
 80035f8:	400200b8 	.word	0x400200b8
 80035fc:	40020410 	.word	0x40020410
 8003600:	40020428 	.word	0x40020428
 8003604:	40020440 	.word	0x40020440
 8003608:	40020458 	.word	0x40020458
 800360c:	40020470 	.word	0x40020470
 8003610:	40020488 	.word	0x40020488
 8003614:	400204a0 	.word	0x400204a0
 8003618:	400204b8 	.word	0x400204b8
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	2300      	movs	r3, #0
 8003624:	2b00      	cmp	r3, #0
 8003626:	d00d      	beq.n	8003644 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800362c:	f003 031f 	and.w	r3, r3, #31
 8003630:	2204      	movs	r2, #4
 8003632:	409a      	lsls	r2, r3
 8003634:	6a3b      	ldr	r3, [r7, #32]
 8003636:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800363c:	f043 0204 	orr.w	r2, r3, #4
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003648:	f003 031f 	and.w	r3, r3, #31
 800364c:	2210      	movs	r2, #16
 800364e:	409a      	lsls	r2, r3
 8003650:	69bb      	ldr	r3, [r7, #24]
 8003652:	4013      	ands	r3, r2
 8003654:	2b00      	cmp	r3, #0
 8003656:	f000 80a6 	beq.w	80037a6 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4a85      	ldr	r2, [pc, #532]	@ (8003874 <HAL_DMA_IRQHandler+0x690>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d04a      	beq.n	80036fa <HAL_DMA_IRQHandler+0x516>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a83      	ldr	r2, [pc, #524]	@ (8003878 <HAL_DMA_IRQHandler+0x694>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d045      	beq.n	80036fa <HAL_DMA_IRQHandler+0x516>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4a82      	ldr	r2, [pc, #520]	@ (800387c <HAL_DMA_IRQHandler+0x698>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d040      	beq.n	80036fa <HAL_DMA_IRQHandler+0x516>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a80      	ldr	r2, [pc, #512]	@ (8003880 <HAL_DMA_IRQHandler+0x69c>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d03b      	beq.n	80036fa <HAL_DMA_IRQHandler+0x516>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a7f      	ldr	r2, [pc, #508]	@ (8003884 <HAL_DMA_IRQHandler+0x6a0>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d036      	beq.n	80036fa <HAL_DMA_IRQHandler+0x516>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a7d      	ldr	r2, [pc, #500]	@ (8003888 <HAL_DMA_IRQHandler+0x6a4>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d031      	beq.n	80036fa <HAL_DMA_IRQHandler+0x516>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a7c      	ldr	r2, [pc, #496]	@ (800388c <HAL_DMA_IRQHandler+0x6a8>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d02c      	beq.n	80036fa <HAL_DMA_IRQHandler+0x516>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a7a      	ldr	r2, [pc, #488]	@ (8003890 <HAL_DMA_IRQHandler+0x6ac>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d027      	beq.n	80036fa <HAL_DMA_IRQHandler+0x516>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a79      	ldr	r2, [pc, #484]	@ (8003894 <HAL_DMA_IRQHandler+0x6b0>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d022      	beq.n	80036fa <HAL_DMA_IRQHandler+0x516>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a77      	ldr	r2, [pc, #476]	@ (8003898 <HAL_DMA_IRQHandler+0x6b4>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d01d      	beq.n	80036fa <HAL_DMA_IRQHandler+0x516>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a76      	ldr	r2, [pc, #472]	@ (800389c <HAL_DMA_IRQHandler+0x6b8>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d018      	beq.n	80036fa <HAL_DMA_IRQHandler+0x516>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a74      	ldr	r2, [pc, #464]	@ (80038a0 <HAL_DMA_IRQHandler+0x6bc>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d013      	beq.n	80036fa <HAL_DMA_IRQHandler+0x516>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4a73      	ldr	r2, [pc, #460]	@ (80038a4 <HAL_DMA_IRQHandler+0x6c0>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d00e      	beq.n	80036fa <HAL_DMA_IRQHandler+0x516>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a71      	ldr	r2, [pc, #452]	@ (80038a8 <HAL_DMA_IRQHandler+0x6c4>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d009      	beq.n	80036fa <HAL_DMA_IRQHandler+0x516>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4a70      	ldr	r2, [pc, #448]	@ (80038ac <HAL_DMA_IRQHandler+0x6c8>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d004      	beq.n	80036fa <HAL_DMA_IRQHandler+0x516>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a6e      	ldr	r2, [pc, #440]	@ (80038b0 <HAL_DMA_IRQHandler+0x6cc>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d10a      	bne.n	8003710 <HAL_DMA_IRQHandler+0x52c>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f003 0308 	and.w	r3, r3, #8
 8003704:	2b00      	cmp	r3, #0
 8003706:	bf14      	ite	ne
 8003708:	2301      	movne	r3, #1
 800370a:	2300      	moveq	r3, #0
 800370c:	b2db      	uxtb	r3, r3
 800370e:	e009      	b.n	8003724 <HAL_DMA_IRQHandler+0x540>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f003 0304 	and.w	r3, r3, #4
 800371a:	2b00      	cmp	r3, #0
 800371c:	bf14      	ite	ne
 800371e:	2301      	movne	r3, #1
 8003720:	2300      	moveq	r3, #0
 8003722:	b2db      	uxtb	r3, r3
 8003724:	2b00      	cmp	r3, #0
 8003726:	d03e      	beq.n	80037a6 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800372c:	f003 031f 	and.w	r3, r3, #31
 8003730:	2210      	movs	r2, #16
 8003732:	409a      	lsls	r2, r3
 8003734:	6a3b      	ldr	r3, [r7, #32]
 8003736:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003742:	2b00      	cmp	r3, #0
 8003744:	d018      	beq.n	8003778 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003750:	2b00      	cmp	r3, #0
 8003752:	d108      	bne.n	8003766 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003758:	2b00      	cmp	r3, #0
 800375a:	d024      	beq.n	80037a6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003760:	6878      	ldr	r0, [r7, #4]
 8003762:	4798      	blx	r3
 8003764:	e01f      	b.n	80037a6 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800376a:	2b00      	cmp	r3, #0
 800376c:	d01b      	beq.n	80037a6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003772:	6878      	ldr	r0, [r7, #4]
 8003774:	4798      	blx	r3
 8003776:	e016      	b.n	80037a6 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003782:	2b00      	cmp	r3, #0
 8003784:	d107      	bne.n	8003796 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	681a      	ldr	r2, [r3, #0]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f022 0208 	bic.w	r2, r2, #8
 8003794:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800379a:	2b00      	cmp	r3, #0
 800379c:	d003      	beq.n	80037a6 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037aa:	f003 031f 	and.w	r3, r3, #31
 80037ae:	2220      	movs	r2, #32
 80037b0:	409a      	lsls	r2, r3
 80037b2:	69bb      	ldr	r3, [r7, #24]
 80037b4:	4013      	ands	r3, r2
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	f000 8110 	beq.w	80039dc <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a2c      	ldr	r2, [pc, #176]	@ (8003874 <HAL_DMA_IRQHandler+0x690>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d04a      	beq.n	800385c <HAL_DMA_IRQHandler+0x678>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4a2b      	ldr	r2, [pc, #172]	@ (8003878 <HAL_DMA_IRQHandler+0x694>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d045      	beq.n	800385c <HAL_DMA_IRQHandler+0x678>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a29      	ldr	r2, [pc, #164]	@ (800387c <HAL_DMA_IRQHandler+0x698>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d040      	beq.n	800385c <HAL_DMA_IRQHandler+0x678>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4a28      	ldr	r2, [pc, #160]	@ (8003880 <HAL_DMA_IRQHandler+0x69c>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d03b      	beq.n	800385c <HAL_DMA_IRQHandler+0x678>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a26      	ldr	r2, [pc, #152]	@ (8003884 <HAL_DMA_IRQHandler+0x6a0>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d036      	beq.n	800385c <HAL_DMA_IRQHandler+0x678>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a25      	ldr	r2, [pc, #148]	@ (8003888 <HAL_DMA_IRQHandler+0x6a4>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d031      	beq.n	800385c <HAL_DMA_IRQHandler+0x678>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a23      	ldr	r2, [pc, #140]	@ (800388c <HAL_DMA_IRQHandler+0x6a8>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d02c      	beq.n	800385c <HAL_DMA_IRQHandler+0x678>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4a22      	ldr	r2, [pc, #136]	@ (8003890 <HAL_DMA_IRQHandler+0x6ac>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d027      	beq.n	800385c <HAL_DMA_IRQHandler+0x678>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a20      	ldr	r2, [pc, #128]	@ (8003894 <HAL_DMA_IRQHandler+0x6b0>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d022      	beq.n	800385c <HAL_DMA_IRQHandler+0x678>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4a1f      	ldr	r2, [pc, #124]	@ (8003898 <HAL_DMA_IRQHandler+0x6b4>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d01d      	beq.n	800385c <HAL_DMA_IRQHandler+0x678>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a1d      	ldr	r2, [pc, #116]	@ (800389c <HAL_DMA_IRQHandler+0x6b8>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d018      	beq.n	800385c <HAL_DMA_IRQHandler+0x678>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a1c      	ldr	r2, [pc, #112]	@ (80038a0 <HAL_DMA_IRQHandler+0x6bc>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d013      	beq.n	800385c <HAL_DMA_IRQHandler+0x678>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a1a      	ldr	r2, [pc, #104]	@ (80038a4 <HAL_DMA_IRQHandler+0x6c0>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d00e      	beq.n	800385c <HAL_DMA_IRQHandler+0x678>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4a19      	ldr	r2, [pc, #100]	@ (80038a8 <HAL_DMA_IRQHandler+0x6c4>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d009      	beq.n	800385c <HAL_DMA_IRQHandler+0x678>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a17      	ldr	r2, [pc, #92]	@ (80038ac <HAL_DMA_IRQHandler+0x6c8>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d004      	beq.n	800385c <HAL_DMA_IRQHandler+0x678>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a16      	ldr	r2, [pc, #88]	@ (80038b0 <HAL_DMA_IRQHandler+0x6cc>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d12b      	bne.n	80038b4 <HAL_DMA_IRQHandler+0x6d0>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f003 0310 	and.w	r3, r3, #16
 8003866:	2b00      	cmp	r3, #0
 8003868:	bf14      	ite	ne
 800386a:	2301      	movne	r3, #1
 800386c:	2300      	moveq	r3, #0
 800386e:	b2db      	uxtb	r3, r3
 8003870:	e02a      	b.n	80038c8 <HAL_DMA_IRQHandler+0x6e4>
 8003872:	bf00      	nop
 8003874:	40020010 	.word	0x40020010
 8003878:	40020028 	.word	0x40020028
 800387c:	40020040 	.word	0x40020040
 8003880:	40020058 	.word	0x40020058
 8003884:	40020070 	.word	0x40020070
 8003888:	40020088 	.word	0x40020088
 800388c:	400200a0 	.word	0x400200a0
 8003890:	400200b8 	.word	0x400200b8
 8003894:	40020410 	.word	0x40020410
 8003898:	40020428 	.word	0x40020428
 800389c:	40020440 	.word	0x40020440
 80038a0:	40020458 	.word	0x40020458
 80038a4:	40020470 	.word	0x40020470
 80038a8:	40020488 	.word	0x40020488
 80038ac:	400204a0 	.word	0x400204a0
 80038b0:	400204b8 	.word	0x400204b8
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f003 0302 	and.w	r3, r3, #2
 80038be:	2b00      	cmp	r3, #0
 80038c0:	bf14      	ite	ne
 80038c2:	2301      	movne	r3, #1
 80038c4:	2300      	moveq	r3, #0
 80038c6:	b2db      	uxtb	r3, r3
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	f000 8087 	beq.w	80039dc <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038d2:	f003 031f 	and.w	r3, r3, #31
 80038d6:	2220      	movs	r2, #32
 80038d8:	409a      	lsls	r2, r3
 80038da:	6a3b      	ldr	r3, [r7, #32]
 80038dc:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80038e4:	b2db      	uxtb	r3, r3
 80038e6:	2b04      	cmp	r3, #4
 80038e8:	d139      	bne.n	800395e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	681a      	ldr	r2, [r3, #0]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f022 0216 	bic.w	r2, r2, #22
 80038f8:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	695a      	ldr	r2, [r3, #20]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003908:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800390e:	2b00      	cmp	r3, #0
 8003910:	d103      	bne.n	800391a <HAL_DMA_IRQHandler+0x736>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003916:	2b00      	cmp	r3, #0
 8003918:	d007      	beq.n	800392a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	681a      	ldr	r2, [r3, #0]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f022 0208 	bic.w	r2, r2, #8
 8003928:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800392e:	f003 031f 	and.w	r3, r3, #31
 8003932:	223f      	movs	r2, #63	@ 0x3f
 8003934:	409a      	lsls	r2, r3
 8003936:	6a3b      	ldr	r3, [r7, #32]
 8003938:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2201      	movs	r2, #1
 800393e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2200      	movs	r2, #0
 8003946:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800394e:	2b00      	cmp	r3, #0
 8003950:	f000 834a 	beq.w	8003fe8 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003958:	6878      	ldr	r0, [r7, #4]
 800395a:	4798      	blx	r3
          }
          return;
 800395c:	e344      	b.n	8003fe8 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003968:	2b00      	cmp	r3, #0
 800396a:	d018      	beq.n	800399e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003976:	2b00      	cmp	r3, #0
 8003978:	d108      	bne.n	800398c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800397e:	2b00      	cmp	r3, #0
 8003980:	d02c      	beq.n	80039dc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003986:	6878      	ldr	r0, [r7, #4]
 8003988:	4798      	blx	r3
 800398a:	e027      	b.n	80039dc <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003990:	2b00      	cmp	r3, #0
 8003992:	d023      	beq.n	80039dc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003998:	6878      	ldr	r0, [r7, #4]
 800399a:	4798      	blx	r3
 800399c:	e01e      	b.n	80039dc <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d10f      	bne.n	80039cc <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	681a      	ldr	r2, [r3, #0]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f022 0210 	bic.w	r2, r2, #16
 80039ba:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2201      	movs	r2, #1
 80039c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2200      	movs	r2, #0
 80039c8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d003      	beq.n	80039dc <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039d8:	6878      	ldr	r0, [r7, #4]
 80039da:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	f000 8306 	beq.w	8003ff2 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039ea:	f003 0301 	and.w	r3, r3, #1
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	f000 8088 	beq.w	8003b04 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2204      	movs	r2, #4
 80039f8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a7a      	ldr	r2, [pc, #488]	@ (8003bec <HAL_DMA_IRQHandler+0xa08>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d04a      	beq.n	8003a9c <HAL_DMA_IRQHandler+0x8b8>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a79      	ldr	r2, [pc, #484]	@ (8003bf0 <HAL_DMA_IRQHandler+0xa0c>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d045      	beq.n	8003a9c <HAL_DMA_IRQHandler+0x8b8>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a77      	ldr	r2, [pc, #476]	@ (8003bf4 <HAL_DMA_IRQHandler+0xa10>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d040      	beq.n	8003a9c <HAL_DMA_IRQHandler+0x8b8>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a76      	ldr	r2, [pc, #472]	@ (8003bf8 <HAL_DMA_IRQHandler+0xa14>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d03b      	beq.n	8003a9c <HAL_DMA_IRQHandler+0x8b8>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a74      	ldr	r2, [pc, #464]	@ (8003bfc <HAL_DMA_IRQHandler+0xa18>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d036      	beq.n	8003a9c <HAL_DMA_IRQHandler+0x8b8>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a73      	ldr	r2, [pc, #460]	@ (8003c00 <HAL_DMA_IRQHandler+0xa1c>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d031      	beq.n	8003a9c <HAL_DMA_IRQHandler+0x8b8>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a71      	ldr	r2, [pc, #452]	@ (8003c04 <HAL_DMA_IRQHandler+0xa20>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d02c      	beq.n	8003a9c <HAL_DMA_IRQHandler+0x8b8>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4a70      	ldr	r2, [pc, #448]	@ (8003c08 <HAL_DMA_IRQHandler+0xa24>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d027      	beq.n	8003a9c <HAL_DMA_IRQHandler+0x8b8>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a6e      	ldr	r2, [pc, #440]	@ (8003c0c <HAL_DMA_IRQHandler+0xa28>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d022      	beq.n	8003a9c <HAL_DMA_IRQHandler+0x8b8>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4a6d      	ldr	r2, [pc, #436]	@ (8003c10 <HAL_DMA_IRQHandler+0xa2c>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d01d      	beq.n	8003a9c <HAL_DMA_IRQHandler+0x8b8>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a6b      	ldr	r2, [pc, #428]	@ (8003c14 <HAL_DMA_IRQHandler+0xa30>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d018      	beq.n	8003a9c <HAL_DMA_IRQHandler+0x8b8>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a6a      	ldr	r2, [pc, #424]	@ (8003c18 <HAL_DMA_IRQHandler+0xa34>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d013      	beq.n	8003a9c <HAL_DMA_IRQHandler+0x8b8>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a68      	ldr	r2, [pc, #416]	@ (8003c1c <HAL_DMA_IRQHandler+0xa38>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d00e      	beq.n	8003a9c <HAL_DMA_IRQHandler+0x8b8>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a67      	ldr	r2, [pc, #412]	@ (8003c20 <HAL_DMA_IRQHandler+0xa3c>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d009      	beq.n	8003a9c <HAL_DMA_IRQHandler+0x8b8>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a65      	ldr	r2, [pc, #404]	@ (8003c24 <HAL_DMA_IRQHandler+0xa40>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d004      	beq.n	8003a9c <HAL_DMA_IRQHandler+0x8b8>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a64      	ldr	r2, [pc, #400]	@ (8003c28 <HAL_DMA_IRQHandler+0xa44>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d108      	bne.n	8003aae <HAL_DMA_IRQHandler+0x8ca>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	681a      	ldr	r2, [r3, #0]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f022 0201 	bic.w	r2, r2, #1
 8003aaa:	601a      	str	r2, [r3, #0]
 8003aac:	e007      	b.n	8003abe <HAL_DMA_IRQHandler+0x8da>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	681a      	ldr	r2, [r3, #0]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f022 0201 	bic.w	r2, r2, #1
 8003abc:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	3301      	adds	r3, #1
 8003ac2:	60fb      	str	r3, [r7, #12]
 8003ac4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ac6:	429a      	cmp	r2, r3
 8003ac8:	d307      	bcc.n	8003ada <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f003 0301 	and.w	r3, r3, #1
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d1f2      	bne.n	8003abe <HAL_DMA_IRQHandler+0x8da>
 8003ad8:	e000      	b.n	8003adc <HAL_DMA_IRQHandler+0x8f8>
            break;
 8003ada:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f003 0301 	and.w	r3, r3, #1
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d004      	beq.n	8003af4 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2203      	movs	r2, #3
 8003aee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8003af2:	e003      	b.n	8003afc <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2201      	movs	r2, #1
 8003af8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2200      	movs	r2, #0
 8003b00:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	f000 8272 	beq.w	8003ff2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b12:	6878      	ldr	r0, [r7, #4]
 8003b14:	4798      	blx	r3
 8003b16:	e26c      	b.n	8003ff2 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a43      	ldr	r2, [pc, #268]	@ (8003c2c <HAL_DMA_IRQHandler+0xa48>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d022      	beq.n	8003b68 <HAL_DMA_IRQHandler+0x984>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a42      	ldr	r2, [pc, #264]	@ (8003c30 <HAL_DMA_IRQHandler+0xa4c>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d01d      	beq.n	8003b68 <HAL_DMA_IRQHandler+0x984>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a40      	ldr	r2, [pc, #256]	@ (8003c34 <HAL_DMA_IRQHandler+0xa50>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d018      	beq.n	8003b68 <HAL_DMA_IRQHandler+0x984>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a3f      	ldr	r2, [pc, #252]	@ (8003c38 <HAL_DMA_IRQHandler+0xa54>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d013      	beq.n	8003b68 <HAL_DMA_IRQHandler+0x984>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a3d      	ldr	r2, [pc, #244]	@ (8003c3c <HAL_DMA_IRQHandler+0xa58>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d00e      	beq.n	8003b68 <HAL_DMA_IRQHandler+0x984>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a3c      	ldr	r2, [pc, #240]	@ (8003c40 <HAL_DMA_IRQHandler+0xa5c>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d009      	beq.n	8003b68 <HAL_DMA_IRQHandler+0x984>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a3a      	ldr	r2, [pc, #232]	@ (8003c44 <HAL_DMA_IRQHandler+0xa60>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d004      	beq.n	8003b68 <HAL_DMA_IRQHandler+0x984>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a39      	ldr	r2, [pc, #228]	@ (8003c48 <HAL_DMA_IRQHandler+0xa64>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d101      	bne.n	8003b6c <HAL_DMA_IRQHandler+0x988>
 8003b68:	2301      	movs	r3, #1
 8003b6a:	e000      	b.n	8003b6e <HAL_DMA_IRQHandler+0x98a>
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	f000 823f 	beq.w	8003ff2 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b80:	f003 031f 	and.w	r3, r3, #31
 8003b84:	2204      	movs	r2, #4
 8003b86:	409a      	lsls	r2, r3
 8003b88:	697b      	ldr	r3, [r7, #20]
 8003b8a:	4013      	ands	r3, r2
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	f000 80cd 	beq.w	8003d2c <HAL_DMA_IRQHandler+0xb48>
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	f003 0304 	and.w	r3, r3, #4
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	f000 80c7 	beq.w	8003d2c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ba2:	f003 031f 	and.w	r3, r3, #31
 8003ba6:	2204      	movs	r2, #4
 8003ba8:	409a      	lsls	r2, r3
 8003baa:	69fb      	ldr	r3, [r7, #28]
 8003bac:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003bae:	693b      	ldr	r3, [r7, #16]
 8003bb0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d049      	beq.n	8003c4c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003bb8:	693b      	ldr	r3, [r7, #16]
 8003bba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d109      	bne.n	8003bd6 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	f000 8210 	beq.w	8003fec <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003bd0:	6878      	ldr	r0, [r7, #4]
 8003bd2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003bd4:	e20a      	b.n	8003fec <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	f000 8206 	beq.w	8003fec <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003be4:	6878      	ldr	r0, [r7, #4]
 8003be6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003be8:	e200      	b.n	8003fec <HAL_DMA_IRQHandler+0xe08>
 8003bea:	bf00      	nop
 8003bec:	40020010 	.word	0x40020010
 8003bf0:	40020028 	.word	0x40020028
 8003bf4:	40020040 	.word	0x40020040
 8003bf8:	40020058 	.word	0x40020058
 8003bfc:	40020070 	.word	0x40020070
 8003c00:	40020088 	.word	0x40020088
 8003c04:	400200a0 	.word	0x400200a0
 8003c08:	400200b8 	.word	0x400200b8
 8003c0c:	40020410 	.word	0x40020410
 8003c10:	40020428 	.word	0x40020428
 8003c14:	40020440 	.word	0x40020440
 8003c18:	40020458 	.word	0x40020458
 8003c1c:	40020470 	.word	0x40020470
 8003c20:	40020488 	.word	0x40020488
 8003c24:	400204a0 	.word	0x400204a0
 8003c28:	400204b8 	.word	0x400204b8
 8003c2c:	58025408 	.word	0x58025408
 8003c30:	5802541c 	.word	0x5802541c
 8003c34:	58025430 	.word	0x58025430
 8003c38:	58025444 	.word	0x58025444
 8003c3c:	58025458 	.word	0x58025458
 8003c40:	5802546c 	.word	0x5802546c
 8003c44:	58025480 	.word	0x58025480
 8003c48:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003c4c:	693b      	ldr	r3, [r7, #16]
 8003c4e:	f003 0320 	and.w	r3, r3, #32
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d160      	bne.n	8003d18 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4a7f      	ldr	r2, [pc, #508]	@ (8003e58 <HAL_DMA_IRQHandler+0xc74>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d04a      	beq.n	8003cf6 <HAL_DMA_IRQHandler+0xb12>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a7d      	ldr	r2, [pc, #500]	@ (8003e5c <HAL_DMA_IRQHandler+0xc78>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d045      	beq.n	8003cf6 <HAL_DMA_IRQHandler+0xb12>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4a7c      	ldr	r2, [pc, #496]	@ (8003e60 <HAL_DMA_IRQHandler+0xc7c>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d040      	beq.n	8003cf6 <HAL_DMA_IRQHandler+0xb12>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a7a      	ldr	r2, [pc, #488]	@ (8003e64 <HAL_DMA_IRQHandler+0xc80>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d03b      	beq.n	8003cf6 <HAL_DMA_IRQHandler+0xb12>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a79      	ldr	r2, [pc, #484]	@ (8003e68 <HAL_DMA_IRQHandler+0xc84>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d036      	beq.n	8003cf6 <HAL_DMA_IRQHandler+0xb12>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a77      	ldr	r2, [pc, #476]	@ (8003e6c <HAL_DMA_IRQHandler+0xc88>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d031      	beq.n	8003cf6 <HAL_DMA_IRQHandler+0xb12>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a76      	ldr	r2, [pc, #472]	@ (8003e70 <HAL_DMA_IRQHandler+0xc8c>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d02c      	beq.n	8003cf6 <HAL_DMA_IRQHandler+0xb12>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a74      	ldr	r2, [pc, #464]	@ (8003e74 <HAL_DMA_IRQHandler+0xc90>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d027      	beq.n	8003cf6 <HAL_DMA_IRQHandler+0xb12>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a73      	ldr	r2, [pc, #460]	@ (8003e78 <HAL_DMA_IRQHandler+0xc94>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d022      	beq.n	8003cf6 <HAL_DMA_IRQHandler+0xb12>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a71      	ldr	r2, [pc, #452]	@ (8003e7c <HAL_DMA_IRQHandler+0xc98>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d01d      	beq.n	8003cf6 <HAL_DMA_IRQHandler+0xb12>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4a70      	ldr	r2, [pc, #448]	@ (8003e80 <HAL_DMA_IRQHandler+0xc9c>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d018      	beq.n	8003cf6 <HAL_DMA_IRQHandler+0xb12>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a6e      	ldr	r2, [pc, #440]	@ (8003e84 <HAL_DMA_IRQHandler+0xca0>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d013      	beq.n	8003cf6 <HAL_DMA_IRQHandler+0xb12>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4a6d      	ldr	r2, [pc, #436]	@ (8003e88 <HAL_DMA_IRQHandler+0xca4>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d00e      	beq.n	8003cf6 <HAL_DMA_IRQHandler+0xb12>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a6b      	ldr	r2, [pc, #428]	@ (8003e8c <HAL_DMA_IRQHandler+0xca8>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d009      	beq.n	8003cf6 <HAL_DMA_IRQHandler+0xb12>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4a6a      	ldr	r2, [pc, #424]	@ (8003e90 <HAL_DMA_IRQHandler+0xcac>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d004      	beq.n	8003cf6 <HAL_DMA_IRQHandler+0xb12>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a68      	ldr	r2, [pc, #416]	@ (8003e94 <HAL_DMA_IRQHandler+0xcb0>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d108      	bne.n	8003d08 <HAL_DMA_IRQHandler+0xb24>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	681a      	ldr	r2, [r3, #0]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f022 0208 	bic.w	r2, r2, #8
 8003d04:	601a      	str	r2, [r3, #0]
 8003d06:	e007      	b.n	8003d18 <HAL_DMA_IRQHandler+0xb34>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	681a      	ldr	r2, [r3, #0]
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f022 0204 	bic.w	r2, r2, #4
 8003d16:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	f000 8165 	beq.w	8003fec <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d26:	6878      	ldr	r0, [r7, #4]
 8003d28:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003d2a:	e15f      	b.n	8003fec <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d30:	f003 031f 	and.w	r3, r3, #31
 8003d34:	2202      	movs	r2, #2
 8003d36:	409a      	lsls	r2, r3
 8003d38:	697b      	ldr	r3, [r7, #20]
 8003d3a:	4013      	ands	r3, r2
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	f000 80c5 	beq.w	8003ecc <HAL_DMA_IRQHandler+0xce8>
 8003d42:	693b      	ldr	r3, [r7, #16]
 8003d44:	f003 0302 	and.w	r3, r3, #2
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	f000 80bf 	beq.w	8003ecc <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d52:	f003 031f 	and.w	r3, r3, #31
 8003d56:	2202      	movs	r2, #2
 8003d58:	409a      	lsls	r2, r3
 8003d5a:	69fb      	ldr	r3, [r7, #28]
 8003d5c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003d5e:	693b      	ldr	r3, [r7, #16]
 8003d60:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d018      	beq.n	8003d9a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003d68:	693b      	ldr	r3, [r7, #16]
 8003d6a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d109      	bne.n	8003d86 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	f000 813a 	beq.w	8003ff0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d80:	6878      	ldr	r0, [r7, #4]
 8003d82:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003d84:	e134      	b.n	8003ff0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	f000 8130 	beq.w	8003ff0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d94:	6878      	ldr	r0, [r7, #4]
 8003d96:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003d98:	e12a      	b.n	8003ff0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	f003 0320 	and.w	r3, r3, #32
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	f040 8089 	bne.w	8003eb8 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4a2b      	ldr	r2, [pc, #172]	@ (8003e58 <HAL_DMA_IRQHandler+0xc74>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d04a      	beq.n	8003e46 <HAL_DMA_IRQHandler+0xc62>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a29      	ldr	r2, [pc, #164]	@ (8003e5c <HAL_DMA_IRQHandler+0xc78>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d045      	beq.n	8003e46 <HAL_DMA_IRQHandler+0xc62>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a28      	ldr	r2, [pc, #160]	@ (8003e60 <HAL_DMA_IRQHandler+0xc7c>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d040      	beq.n	8003e46 <HAL_DMA_IRQHandler+0xc62>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a26      	ldr	r2, [pc, #152]	@ (8003e64 <HAL_DMA_IRQHandler+0xc80>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d03b      	beq.n	8003e46 <HAL_DMA_IRQHandler+0xc62>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a25      	ldr	r2, [pc, #148]	@ (8003e68 <HAL_DMA_IRQHandler+0xc84>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d036      	beq.n	8003e46 <HAL_DMA_IRQHandler+0xc62>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a23      	ldr	r2, [pc, #140]	@ (8003e6c <HAL_DMA_IRQHandler+0xc88>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d031      	beq.n	8003e46 <HAL_DMA_IRQHandler+0xc62>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a22      	ldr	r2, [pc, #136]	@ (8003e70 <HAL_DMA_IRQHandler+0xc8c>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d02c      	beq.n	8003e46 <HAL_DMA_IRQHandler+0xc62>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a20      	ldr	r2, [pc, #128]	@ (8003e74 <HAL_DMA_IRQHandler+0xc90>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d027      	beq.n	8003e46 <HAL_DMA_IRQHandler+0xc62>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a1f      	ldr	r2, [pc, #124]	@ (8003e78 <HAL_DMA_IRQHandler+0xc94>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d022      	beq.n	8003e46 <HAL_DMA_IRQHandler+0xc62>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a1d      	ldr	r2, [pc, #116]	@ (8003e7c <HAL_DMA_IRQHandler+0xc98>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d01d      	beq.n	8003e46 <HAL_DMA_IRQHandler+0xc62>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a1c      	ldr	r2, [pc, #112]	@ (8003e80 <HAL_DMA_IRQHandler+0xc9c>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d018      	beq.n	8003e46 <HAL_DMA_IRQHandler+0xc62>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a1a      	ldr	r2, [pc, #104]	@ (8003e84 <HAL_DMA_IRQHandler+0xca0>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d013      	beq.n	8003e46 <HAL_DMA_IRQHandler+0xc62>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4a19      	ldr	r2, [pc, #100]	@ (8003e88 <HAL_DMA_IRQHandler+0xca4>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d00e      	beq.n	8003e46 <HAL_DMA_IRQHandler+0xc62>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4a17      	ldr	r2, [pc, #92]	@ (8003e8c <HAL_DMA_IRQHandler+0xca8>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d009      	beq.n	8003e46 <HAL_DMA_IRQHandler+0xc62>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4a16      	ldr	r2, [pc, #88]	@ (8003e90 <HAL_DMA_IRQHandler+0xcac>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d004      	beq.n	8003e46 <HAL_DMA_IRQHandler+0xc62>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a14      	ldr	r2, [pc, #80]	@ (8003e94 <HAL_DMA_IRQHandler+0xcb0>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d128      	bne.n	8003e98 <HAL_DMA_IRQHandler+0xcb4>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	681a      	ldr	r2, [r3, #0]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f022 0214 	bic.w	r2, r2, #20
 8003e54:	601a      	str	r2, [r3, #0]
 8003e56:	e027      	b.n	8003ea8 <HAL_DMA_IRQHandler+0xcc4>
 8003e58:	40020010 	.word	0x40020010
 8003e5c:	40020028 	.word	0x40020028
 8003e60:	40020040 	.word	0x40020040
 8003e64:	40020058 	.word	0x40020058
 8003e68:	40020070 	.word	0x40020070
 8003e6c:	40020088 	.word	0x40020088
 8003e70:	400200a0 	.word	0x400200a0
 8003e74:	400200b8 	.word	0x400200b8
 8003e78:	40020410 	.word	0x40020410
 8003e7c:	40020428 	.word	0x40020428
 8003e80:	40020440 	.word	0x40020440
 8003e84:	40020458 	.word	0x40020458
 8003e88:	40020470 	.word	0x40020470
 8003e8c:	40020488 	.word	0x40020488
 8003e90:	400204a0 	.word	0x400204a0
 8003e94:	400204b8 	.word	0x400204b8
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	681a      	ldr	r2, [r3, #0]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f022 020a 	bic.w	r2, r2, #10
 8003ea6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2201      	movs	r2, #1
 8003eac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	f000 8097 	beq.w	8003ff0 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ec6:	6878      	ldr	r0, [r7, #4]
 8003ec8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003eca:	e091      	b.n	8003ff0 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ed0:	f003 031f 	and.w	r3, r3, #31
 8003ed4:	2208      	movs	r2, #8
 8003ed6:	409a      	lsls	r2, r3
 8003ed8:	697b      	ldr	r3, [r7, #20]
 8003eda:	4013      	ands	r3, r2
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	f000 8088 	beq.w	8003ff2 <HAL_DMA_IRQHandler+0xe0e>
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	f003 0308 	and.w	r3, r3, #8
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	f000 8082 	beq.w	8003ff2 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4a41      	ldr	r2, [pc, #260]	@ (8003ff8 <HAL_DMA_IRQHandler+0xe14>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d04a      	beq.n	8003f8e <HAL_DMA_IRQHandler+0xdaa>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a3f      	ldr	r2, [pc, #252]	@ (8003ffc <HAL_DMA_IRQHandler+0xe18>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d045      	beq.n	8003f8e <HAL_DMA_IRQHandler+0xdaa>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a3e      	ldr	r2, [pc, #248]	@ (8004000 <HAL_DMA_IRQHandler+0xe1c>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d040      	beq.n	8003f8e <HAL_DMA_IRQHandler+0xdaa>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a3c      	ldr	r2, [pc, #240]	@ (8004004 <HAL_DMA_IRQHandler+0xe20>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d03b      	beq.n	8003f8e <HAL_DMA_IRQHandler+0xdaa>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a3b      	ldr	r2, [pc, #236]	@ (8004008 <HAL_DMA_IRQHandler+0xe24>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d036      	beq.n	8003f8e <HAL_DMA_IRQHandler+0xdaa>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a39      	ldr	r2, [pc, #228]	@ (800400c <HAL_DMA_IRQHandler+0xe28>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d031      	beq.n	8003f8e <HAL_DMA_IRQHandler+0xdaa>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4a38      	ldr	r2, [pc, #224]	@ (8004010 <HAL_DMA_IRQHandler+0xe2c>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d02c      	beq.n	8003f8e <HAL_DMA_IRQHandler+0xdaa>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a36      	ldr	r2, [pc, #216]	@ (8004014 <HAL_DMA_IRQHandler+0xe30>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d027      	beq.n	8003f8e <HAL_DMA_IRQHandler+0xdaa>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a35      	ldr	r2, [pc, #212]	@ (8004018 <HAL_DMA_IRQHandler+0xe34>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d022      	beq.n	8003f8e <HAL_DMA_IRQHandler+0xdaa>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a33      	ldr	r2, [pc, #204]	@ (800401c <HAL_DMA_IRQHandler+0xe38>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d01d      	beq.n	8003f8e <HAL_DMA_IRQHandler+0xdaa>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4a32      	ldr	r2, [pc, #200]	@ (8004020 <HAL_DMA_IRQHandler+0xe3c>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d018      	beq.n	8003f8e <HAL_DMA_IRQHandler+0xdaa>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4a30      	ldr	r2, [pc, #192]	@ (8004024 <HAL_DMA_IRQHandler+0xe40>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d013      	beq.n	8003f8e <HAL_DMA_IRQHandler+0xdaa>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4a2f      	ldr	r2, [pc, #188]	@ (8004028 <HAL_DMA_IRQHandler+0xe44>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d00e      	beq.n	8003f8e <HAL_DMA_IRQHandler+0xdaa>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a2d      	ldr	r2, [pc, #180]	@ (800402c <HAL_DMA_IRQHandler+0xe48>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d009      	beq.n	8003f8e <HAL_DMA_IRQHandler+0xdaa>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a2c      	ldr	r2, [pc, #176]	@ (8004030 <HAL_DMA_IRQHandler+0xe4c>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d004      	beq.n	8003f8e <HAL_DMA_IRQHandler+0xdaa>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a2a      	ldr	r2, [pc, #168]	@ (8004034 <HAL_DMA_IRQHandler+0xe50>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d108      	bne.n	8003fa0 <HAL_DMA_IRQHandler+0xdbc>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	681a      	ldr	r2, [r3, #0]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f022 021c 	bic.w	r2, r2, #28
 8003f9c:	601a      	str	r2, [r3, #0]
 8003f9e:	e007      	b.n	8003fb0 <HAL_DMA_IRQHandler+0xdcc>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	681a      	ldr	r2, [r3, #0]
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f022 020e 	bic.w	r2, r2, #14
 8003fae:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fb4:	f003 031f 	and.w	r3, r3, #31
 8003fb8:	2201      	movs	r2, #1
 8003fba:	409a      	lsls	r2, r3
 8003fbc:	69fb      	ldr	r3, [r7, #28]
 8003fbe:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2201      	movs	r2, #1
 8003fca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d009      	beq.n	8003ff2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003fe2:	6878      	ldr	r0, [r7, #4]
 8003fe4:	4798      	blx	r3
 8003fe6:	e004      	b.n	8003ff2 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8003fe8:	bf00      	nop
 8003fea:	e002      	b.n	8003ff2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003fec:	bf00      	nop
 8003fee:	e000      	b.n	8003ff2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003ff0:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003ff2:	3728      	adds	r7, #40	@ 0x28
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bd80      	pop	{r7, pc}
 8003ff8:	40020010 	.word	0x40020010
 8003ffc:	40020028 	.word	0x40020028
 8004000:	40020040 	.word	0x40020040
 8004004:	40020058 	.word	0x40020058
 8004008:	40020070 	.word	0x40020070
 800400c:	40020088 	.word	0x40020088
 8004010:	400200a0 	.word	0x400200a0
 8004014:	400200b8 	.word	0x400200b8
 8004018:	40020410 	.word	0x40020410
 800401c:	40020428 	.word	0x40020428
 8004020:	40020440 	.word	0x40020440
 8004024:	40020458 	.word	0x40020458
 8004028:	40020470 	.word	0x40020470
 800402c:	40020488 	.word	0x40020488
 8004030:	400204a0 	.word	0x400204a0
 8004034:	400204b8 	.word	0x400204b8

08004038 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004038:	b480      	push	{r7}
 800403a:	b087      	sub	sp, #28
 800403c:	af00      	add	r7, sp, #0
 800403e:	60f8      	str	r0, [r7, #12]
 8004040:	60b9      	str	r1, [r7, #8]
 8004042:	607a      	str	r2, [r7, #4]
 8004044:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800404a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004050:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4a7f      	ldr	r2, [pc, #508]	@ (8004254 <DMA_SetConfig+0x21c>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d072      	beq.n	8004142 <DMA_SetConfig+0x10a>
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4a7d      	ldr	r2, [pc, #500]	@ (8004258 <DMA_SetConfig+0x220>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d06d      	beq.n	8004142 <DMA_SetConfig+0x10a>
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4a7c      	ldr	r2, [pc, #496]	@ (800425c <DMA_SetConfig+0x224>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d068      	beq.n	8004142 <DMA_SetConfig+0x10a>
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a7a      	ldr	r2, [pc, #488]	@ (8004260 <DMA_SetConfig+0x228>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d063      	beq.n	8004142 <DMA_SetConfig+0x10a>
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4a79      	ldr	r2, [pc, #484]	@ (8004264 <DMA_SetConfig+0x22c>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d05e      	beq.n	8004142 <DMA_SetConfig+0x10a>
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a77      	ldr	r2, [pc, #476]	@ (8004268 <DMA_SetConfig+0x230>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d059      	beq.n	8004142 <DMA_SetConfig+0x10a>
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4a76      	ldr	r2, [pc, #472]	@ (800426c <DMA_SetConfig+0x234>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d054      	beq.n	8004142 <DMA_SetConfig+0x10a>
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a74      	ldr	r2, [pc, #464]	@ (8004270 <DMA_SetConfig+0x238>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d04f      	beq.n	8004142 <DMA_SetConfig+0x10a>
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4a73      	ldr	r2, [pc, #460]	@ (8004274 <DMA_SetConfig+0x23c>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d04a      	beq.n	8004142 <DMA_SetConfig+0x10a>
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a71      	ldr	r2, [pc, #452]	@ (8004278 <DMA_SetConfig+0x240>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d045      	beq.n	8004142 <DMA_SetConfig+0x10a>
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4a70      	ldr	r2, [pc, #448]	@ (800427c <DMA_SetConfig+0x244>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d040      	beq.n	8004142 <DMA_SetConfig+0x10a>
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a6e      	ldr	r2, [pc, #440]	@ (8004280 <DMA_SetConfig+0x248>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d03b      	beq.n	8004142 <DMA_SetConfig+0x10a>
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a6d      	ldr	r2, [pc, #436]	@ (8004284 <DMA_SetConfig+0x24c>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d036      	beq.n	8004142 <DMA_SetConfig+0x10a>
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a6b      	ldr	r2, [pc, #428]	@ (8004288 <DMA_SetConfig+0x250>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d031      	beq.n	8004142 <DMA_SetConfig+0x10a>
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a6a      	ldr	r2, [pc, #424]	@ (800428c <DMA_SetConfig+0x254>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d02c      	beq.n	8004142 <DMA_SetConfig+0x10a>
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a68      	ldr	r2, [pc, #416]	@ (8004290 <DMA_SetConfig+0x258>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d027      	beq.n	8004142 <DMA_SetConfig+0x10a>
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a67      	ldr	r2, [pc, #412]	@ (8004294 <DMA_SetConfig+0x25c>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d022      	beq.n	8004142 <DMA_SetConfig+0x10a>
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a65      	ldr	r2, [pc, #404]	@ (8004298 <DMA_SetConfig+0x260>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d01d      	beq.n	8004142 <DMA_SetConfig+0x10a>
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a64      	ldr	r2, [pc, #400]	@ (800429c <DMA_SetConfig+0x264>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d018      	beq.n	8004142 <DMA_SetConfig+0x10a>
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a62      	ldr	r2, [pc, #392]	@ (80042a0 <DMA_SetConfig+0x268>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d013      	beq.n	8004142 <DMA_SetConfig+0x10a>
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a61      	ldr	r2, [pc, #388]	@ (80042a4 <DMA_SetConfig+0x26c>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d00e      	beq.n	8004142 <DMA_SetConfig+0x10a>
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a5f      	ldr	r2, [pc, #380]	@ (80042a8 <DMA_SetConfig+0x270>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d009      	beq.n	8004142 <DMA_SetConfig+0x10a>
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a5e      	ldr	r2, [pc, #376]	@ (80042ac <DMA_SetConfig+0x274>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d004      	beq.n	8004142 <DMA_SetConfig+0x10a>
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a5c      	ldr	r2, [pc, #368]	@ (80042b0 <DMA_SetConfig+0x278>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d101      	bne.n	8004146 <DMA_SetConfig+0x10e>
 8004142:	2301      	movs	r3, #1
 8004144:	e000      	b.n	8004148 <DMA_SetConfig+0x110>
 8004146:	2300      	movs	r3, #0
 8004148:	2b00      	cmp	r3, #0
 800414a:	d00d      	beq.n	8004168 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004150:	68fa      	ldr	r2, [r7, #12]
 8004152:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004154:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800415a:	2b00      	cmp	r3, #0
 800415c:	d004      	beq.n	8004168 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004162:	68fa      	ldr	r2, [r7, #12]
 8004164:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004166:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a39      	ldr	r2, [pc, #228]	@ (8004254 <DMA_SetConfig+0x21c>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d04a      	beq.n	8004208 <DMA_SetConfig+0x1d0>
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4a38      	ldr	r2, [pc, #224]	@ (8004258 <DMA_SetConfig+0x220>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d045      	beq.n	8004208 <DMA_SetConfig+0x1d0>
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4a36      	ldr	r2, [pc, #216]	@ (800425c <DMA_SetConfig+0x224>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d040      	beq.n	8004208 <DMA_SetConfig+0x1d0>
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4a35      	ldr	r2, [pc, #212]	@ (8004260 <DMA_SetConfig+0x228>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d03b      	beq.n	8004208 <DMA_SetConfig+0x1d0>
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a33      	ldr	r2, [pc, #204]	@ (8004264 <DMA_SetConfig+0x22c>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d036      	beq.n	8004208 <DMA_SetConfig+0x1d0>
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a32      	ldr	r2, [pc, #200]	@ (8004268 <DMA_SetConfig+0x230>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d031      	beq.n	8004208 <DMA_SetConfig+0x1d0>
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a30      	ldr	r2, [pc, #192]	@ (800426c <DMA_SetConfig+0x234>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d02c      	beq.n	8004208 <DMA_SetConfig+0x1d0>
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4a2f      	ldr	r2, [pc, #188]	@ (8004270 <DMA_SetConfig+0x238>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d027      	beq.n	8004208 <DMA_SetConfig+0x1d0>
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a2d      	ldr	r2, [pc, #180]	@ (8004274 <DMA_SetConfig+0x23c>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d022      	beq.n	8004208 <DMA_SetConfig+0x1d0>
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a2c      	ldr	r2, [pc, #176]	@ (8004278 <DMA_SetConfig+0x240>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d01d      	beq.n	8004208 <DMA_SetConfig+0x1d0>
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a2a      	ldr	r2, [pc, #168]	@ (800427c <DMA_SetConfig+0x244>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d018      	beq.n	8004208 <DMA_SetConfig+0x1d0>
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a29      	ldr	r2, [pc, #164]	@ (8004280 <DMA_SetConfig+0x248>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d013      	beq.n	8004208 <DMA_SetConfig+0x1d0>
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a27      	ldr	r2, [pc, #156]	@ (8004284 <DMA_SetConfig+0x24c>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d00e      	beq.n	8004208 <DMA_SetConfig+0x1d0>
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a26      	ldr	r2, [pc, #152]	@ (8004288 <DMA_SetConfig+0x250>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d009      	beq.n	8004208 <DMA_SetConfig+0x1d0>
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a24      	ldr	r2, [pc, #144]	@ (800428c <DMA_SetConfig+0x254>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d004      	beq.n	8004208 <DMA_SetConfig+0x1d0>
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a23      	ldr	r2, [pc, #140]	@ (8004290 <DMA_SetConfig+0x258>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d101      	bne.n	800420c <DMA_SetConfig+0x1d4>
 8004208:	2301      	movs	r3, #1
 800420a:	e000      	b.n	800420e <DMA_SetConfig+0x1d6>
 800420c:	2300      	movs	r3, #0
 800420e:	2b00      	cmp	r3, #0
 8004210:	d059      	beq.n	80042c6 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004216:	f003 031f 	and.w	r3, r3, #31
 800421a:	223f      	movs	r2, #63	@ 0x3f
 800421c:	409a      	lsls	r2, r3
 800421e:	697b      	ldr	r3, [r7, #20]
 8004220:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	681a      	ldr	r2, [r3, #0]
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004230:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	683a      	ldr	r2, [r7, #0]
 8004238:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	689b      	ldr	r3, [r3, #8]
 800423e:	2b40      	cmp	r3, #64	@ 0x40
 8004240:	d138      	bne.n	80042b4 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	687a      	ldr	r2, [r7, #4]
 8004248:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	68ba      	ldr	r2, [r7, #8]
 8004250:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004252:	e086      	b.n	8004362 <DMA_SetConfig+0x32a>
 8004254:	40020010 	.word	0x40020010
 8004258:	40020028 	.word	0x40020028
 800425c:	40020040 	.word	0x40020040
 8004260:	40020058 	.word	0x40020058
 8004264:	40020070 	.word	0x40020070
 8004268:	40020088 	.word	0x40020088
 800426c:	400200a0 	.word	0x400200a0
 8004270:	400200b8 	.word	0x400200b8
 8004274:	40020410 	.word	0x40020410
 8004278:	40020428 	.word	0x40020428
 800427c:	40020440 	.word	0x40020440
 8004280:	40020458 	.word	0x40020458
 8004284:	40020470 	.word	0x40020470
 8004288:	40020488 	.word	0x40020488
 800428c:	400204a0 	.word	0x400204a0
 8004290:	400204b8 	.word	0x400204b8
 8004294:	58025408 	.word	0x58025408
 8004298:	5802541c 	.word	0x5802541c
 800429c:	58025430 	.word	0x58025430
 80042a0:	58025444 	.word	0x58025444
 80042a4:	58025458 	.word	0x58025458
 80042a8:	5802546c 	.word	0x5802546c
 80042ac:	58025480 	.word	0x58025480
 80042b0:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	68ba      	ldr	r2, [r7, #8]
 80042ba:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	687a      	ldr	r2, [r7, #4]
 80042c2:	60da      	str	r2, [r3, #12]
}
 80042c4:	e04d      	b.n	8004362 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a29      	ldr	r2, [pc, #164]	@ (8004370 <DMA_SetConfig+0x338>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d022      	beq.n	8004316 <DMA_SetConfig+0x2de>
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a27      	ldr	r2, [pc, #156]	@ (8004374 <DMA_SetConfig+0x33c>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d01d      	beq.n	8004316 <DMA_SetConfig+0x2de>
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4a26      	ldr	r2, [pc, #152]	@ (8004378 <DMA_SetConfig+0x340>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d018      	beq.n	8004316 <DMA_SetConfig+0x2de>
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a24      	ldr	r2, [pc, #144]	@ (800437c <DMA_SetConfig+0x344>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d013      	beq.n	8004316 <DMA_SetConfig+0x2de>
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4a23      	ldr	r2, [pc, #140]	@ (8004380 <DMA_SetConfig+0x348>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d00e      	beq.n	8004316 <DMA_SetConfig+0x2de>
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4a21      	ldr	r2, [pc, #132]	@ (8004384 <DMA_SetConfig+0x34c>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d009      	beq.n	8004316 <DMA_SetConfig+0x2de>
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4a20      	ldr	r2, [pc, #128]	@ (8004388 <DMA_SetConfig+0x350>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d004      	beq.n	8004316 <DMA_SetConfig+0x2de>
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a1e      	ldr	r2, [pc, #120]	@ (800438c <DMA_SetConfig+0x354>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d101      	bne.n	800431a <DMA_SetConfig+0x2e2>
 8004316:	2301      	movs	r3, #1
 8004318:	e000      	b.n	800431c <DMA_SetConfig+0x2e4>
 800431a:	2300      	movs	r3, #0
 800431c:	2b00      	cmp	r3, #0
 800431e:	d020      	beq.n	8004362 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004324:	f003 031f 	and.w	r3, r3, #31
 8004328:	2201      	movs	r2, #1
 800432a:	409a      	lsls	r2, r3
 800432c:	693b      	ldr	r3, [r7, #16]
 800432e:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	683a      	ldr	r2, [r7, #0]
 8004336:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	689b      	ldr	r3, [r3, #8]
 800433c:	2b40      	cmp	r3, #64	@ 0x40
 800433e:	d108      	bne.n	8004352 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	687a      	ldr	r2, [r7, #4]
 8004346:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	68ba      	ldr	r2, [r7, #8]
 800434e:	60da      	str	r2, [r3, #12]
}
 8004350:	e007      	b.n	8004362 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	68ba      	ldr	r2, [r7, #8]
 8004358:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	687a      	ldr	r2, [r7, #4]
 8004360:	60da      	str	r2, [r3, #12]
}
 8004362:	bf00      	nop
 8004364:	371c      	adds	r7, #28
 8004366:	46bd      	mov	sp, r7
 8004368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436c:	4770      	bx	lr
 800436e:	bf00      	nop
 8004370:	58025408 	.word	0x58025408
 8004374:	5802541c 	.word	0x5802541c
 8004378:	58025430 	.word	0x58025430
 800437c:	58025444 	.word	0x58025444
 8004380:	58025458 	.word	0x58025458
 8004384:	5802546c 	.word	0x5802546c
 8004388:	58025480 	.word	0x58025480
 800438c:	58025494 	.word	0x58025494

08004390 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004390:	b480      	push	{r7}
 8004392:	b085      	sub	sp, #20
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a42      	ldr	r2, [pc, #264]	@ (80044a8 <DMA_CalcBaseAndBitshift+0x118>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d04a      	beq.n	8004438 <DMA_CalcBaseAndBitshift+0xa8>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4a41      	ldr	r2, [pc, #260]	@ (80044ac <DMA_CalcBaseAndBitshift+0x11c>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d045      	beq.n	8004438 <DMA_CalcBaseAndBitshift+0xa8>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a3f      	ldr	r2, [pc, #252]	@ (80044b0 <DMA_CalcBaseAndBitshift+0x120>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d040      	beq.n	8004438 <DMA_CalcBaseAndBitshift+0xa8>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4a3e      	ldr	r2, [pc, #248]	@ (80044b4 <DMA_CalcBaseAndBitshift+0x124>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d03b      	beq.n	8004438 <DMA_CalcBaseAndBitshift+0xa8>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a3c      	ldr	r2, [pc, #240]	@ (80044b8 <DMA_CalcBaseAndBitshift+0x128>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d036      	beq.n	8004438 <DMA_CalcBaseAndBitshift+0xa8>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4a3b      	ldr	r2, [pc, #236]	@ (80044bc <DMA_CalcBaseAndBitshift+0x12c>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d031      	beq.n	8004438 <DMA_CalcBaseAndBitshift+0xa8>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4a39      	ldr	r2, [pc, #228]	@ (80044c0 <DMA_CalcBaseAndBitshift+0x130>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d02c      	beq.n	8004438 <DMA_CalcBaseAndBitshift+0xa8>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4a38      	ldr	r2, [pc, #224]	@ (80044c4 <DMA_CalcBaseAndBitshift+0x134>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d027      	beq.n	8004438 <DMA_CalcBaseAndBitshift+0xa8>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4a36      	ldr	r2, [pc, #216]	@ (80044c8 <DMA_CalcBaseAndBitshift+0x138>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d022      	beq.n	8004438 <DMA_CalcBaseAndBitshift+0xa8>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4a35      	ldr	r2, [pc, #212]	@ (80044cc <DMA_CalcBaseAndBitshift+0x13c>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d01d      	beq.n	8004438 <DMA_CalcBaseAndBitshift+0xa8>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4a33      	ldr	r2, [pc, #204]	@ (80044d0 <DMA_CalcBaseAndBitshift+0x140>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d018      	beq.n	8004438 <DMA_CalcBaseAndBitshift+0xa8>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4a32      	ldr	r2, [pc, #200]	@ (80044d4 <DMA_CalcBaseAndBitshift+0x144>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d013      	beq.n	8004438 <DMA_CalcBaseAndBitshift+0xa8>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4a30      	ldr	r2, [pc, #192]	@ (80044d8 <DMA_CalcBaseAndBitshift+0x148>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d00e      	beq.n	8004438 <DMA_CalcBaseAndBitshift+0xa8>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4a2f      	ldr	r2, [pc, #188]	@ (80044dc <DMA_CalcBaseAndBitshift+0x14c>)
 8004420:	4293      	cmp	r3, r2
 8004422:	d009      	beq.n	8004438 <DMA_CalcBaseAndBitshift+0xa8>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a2d      	ldr	r2, [pc, #180]	@ (80044e0 <DMA_CalcBaseAndBitshift+0x150>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d004      	beq.n	8004438 <DMA_CalcBaseAndBitshift+0xa8>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4a2c      	ldr	r2, [pc, #176]	@ (80044e4 <DMA_CalcBaseAndBitshift+0x154>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d101      	bne.n	800443c <DMA_CalcBaseAndBitshift+0xac>
 8004438:	2301      	movs	r3, #1
 800443a:	e000      	b.n	800443e <DMA_CalcBaseAndBitshift+0xae>
 800443c:	2300      	movs	r3, #0
 800443e:	2b00      	cmp	r3, #0
 8004440:	d024      	beq.n	800448c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	b2db      	uxtb	r3, r3
 8004448:	3b10      	subs	r3, #16
 800444a:	4a27      	ldr	r2, [pc, #156]	@ (80044e8 <DMA_CalcBaseAndBitshift+0x158>)
 800444c:	fba2 2303 	umull	r2, r3, r2, r3
 8004450:	091b      	lsrs	r3, r3, #4
 8004452:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	f003 0307 	and.w	r3, r3, #7
 800445a:	4a24      	ldr	r2, [pc, #144]	@ (80044ec <DMA_CalcBaseAndBitshift+0x15c>)
 800445c:	5cd3      	ldrb	r3, [r2, r3]
 800445e:	461a      	mov	r2, r3
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	2b03      	cmp	r3, #3
 8004468:	d908      	bls.n	800447c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	461a      	mov	r2, r3
 8004470:	4b1f      	ldr	r3, [pc, #124]	@ (80044f0 <DMA_CalcBaseAndBitshift+0x160>)
 8004472:	4013      	ands	r3, r2
 8004474:	1d1a      	adds	r2, r3, #4
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	659a      	str	r2, [r3, #88]	@ 0x58
 800447a:	e00d      	b.n	8004498 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	461a      	mov	r2, r3
 8004482:	4b1b      	ldr	r3, [pc, #108]	@ (80044f0 <DMA_CalcBaseAndBitshift+0x160>)
 8004484:	4013      	ands	r3, r2
 8004486:	687a      	ldr	r2, [r7, #4]
 8004488:	6593      	str	r3, [r2, #88]	@ 0x58
 800448a:	e005      	b.n	8004498 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800449c:	4618      	mov	r0, r3
 800449e:	3714      	adds	r7, #20
 80044a0:	46bd      	mov	sp, r7
 80044a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a6:	4770      	bx	lr
 80044a8:	40020010 	.word	0x40020010
 80044ac:	40020028 	.word	0x40020028
 80044b0:	40020040 	.word	0x40020040
 80044b4:	40020058 	.word	0x40020058
 80044b8:	40020070 	.word	0x40020070
 80044bc:	40020088 	.word	0x40020088
 80044c0:	400200a0 	.word	0x400200a0
 80044c4:	400200b8 	.word	0x400200b8
 80044c8:	40020410 	.word	0x40020410
 80044cc:	40020428 	.word	0x40020428
 80044d0:	40020440 	.word	0x40020440
 80044d4:	40020458 	.word	0x40020458
 80044d8:	40020470 	.word	0x40020470
 80044dc:	40020488 	.word	0x40020488
 80044e0:	400204a0 	.word	0x400204a0
 80044e4:	400204b8 	.word	0x400204b8
 80044e8:	aaaaaaab 	.word	0xaaaaaaab
 80044ec:	0801262c 	.word	0x0801262c
 80044f0:	fffffc00 	.word	0xfffffc00

080044f4 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80044f4:	b480      	push	{r7}
 80044f6:	b085      	sub	sp, #20
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80044fc:	2300      	movs	r3, #0
 80044fe:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	699b      	ldr	r3, [r3, #24]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d120      	bne.n	800454a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800450c:	2b03      	cmp	r3, #3
 800450e:	d858      	bhi.n	80045c2 <DMA_CheckFifoParam+0xce>
 8004510:	a201      	add	r2, pc, #4	@ (adr r2, 8004518 <DMA_CheckFifoParam+0x24>)
 8004512:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004516:	bf00      	nop
 8004518:	08004529 	.word	0x08004529
 800451c:	0800453b 	.word	0x0800453b
 8004520:	08004529 	.word	0x08004529
 8004524:	080045c3 	.word	0x080045c3
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800452c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004530:	2b00      	cmp	r3, #0
 8004532:	d048      	beq.n	80045c6 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004534:	2301      	movs	r3, #1
 8004536:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004538:	e045      	b.n	80045c6 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800453e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004542:	d142      	bne.n	80045ca <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004544:	2301      	movs	r3, #1
 8004546:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004548:	e03f      	b.n	80045ca <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	699b      	ldr	r3, [r3, #24]
 800454e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004552:	d123      	bne.n	800459c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004558:	2b03      	cmp	r3, #3
 800455a:	d838      	bhi.n	80045ce <DMA_CheckFifoParam+0xda>
 800455c:	a201      	add	r2, pc, #4	@ (adr r2, 8004564 <DMA_CheckFifoParam+0x70>)
 800455e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004562:	bf00      	nop
 8004564:	08004575 	.word	0x08004575
 8004568:	0800457b 	.word	0x0800457b
 800456c:	08004575 	.word	0x08004575
 8004570:	0800458d 	.word	0x0800458d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004574:	2301      	movs	r3, #1
 8004576:	73fb      	strb	r3, [r7, #15]
        break;
 8004578:	e030      	b.n	80045dc <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800457e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004582:	2b00      	cmp	r3, #0
 8004584:	d025      	beq.n	80045d2 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004586:	2301      	movs	r3, #1
 8004588:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800458a:	e022      	b.n	80045d2 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004590:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004594:	d11f      	bne.n	80045d6 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004596:	2301      	movs	r3, #1
 8004598:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800459a:	e01c      	b.n	80045d6 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045a0:	2b02      	cmp	r3, #2
 80045a2:	d902      	bls.n	80045aa <DMA_CheckFifoParam+0xb6>
 80045a4:	2b03      	cmp	r3, #3
 80045a6:	d003      	beq.n	80045b0 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80045a8:	e018      	b.n	80045dc <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80045aa:	2301      	movs	r3, #1
 80045ac:	73fb      	strb	r3, [r7, #15]
        break;
 80045ae:	e015      	b.n	80045dc <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045b4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d00e      	beq.n	80045da <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80045bc:	2301      	movs	r3, #1
 80045be:	73fb      	strb	r3, [r7, #15]
    break;
 80045c0:	e00b      	b.n	80045da <DMA_CheckFifoParam+0xe6>
        break;
 80045c2:	bf00      	nop
 80045c4:	e00a      	b.n	80045dc <DMA_CheckFifoParam+0xe8>
        break;
 80045c6:	bf00      	nop
 80045c8:	e008      	b.n	80045dc <DMA_CheckFifoParam+0xe8>
        break;
 80045ca:	bf00      	nop
 80045cc:	e006      	b.n	80045dc <DMA_CheckFifoParam+0xe8>
        break;
 80045ce:	bf00      	nop
 80045d0:	e004      	b.n	80045dc <DMA_CheckFifoParam+0xe8>
        break;
 80045d2:	bf00      	nop
 80045d4:	e002      	b.n	80045dc <DMA_CheckFifoParam+0xe8>
        break;
 80045d6:	bf00      	nop
 80045d8:	e000      	b.n	80045dc <DMA_CheckFifoParam+0xe8>
    break;
 80045da:	bf00      	nop
    }
  }

  return status;
 80045dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80045de:	4618      	mov	r0, r3
 80045e0:	3714      	adds	r7, #20
 80045e2:	46bd      	mov	sp, r7
 80045e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e8:	4770      	bx	lr
 80045ea:	bf00      	nop

080045ec <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80045ec:	b480      	push	{r7}
 80045ee:	b085      	sub	sp, #20
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4a38      	ldr	r2, [pc, #224]	@ (80046e0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d022      	beq.n	800464a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4a36      	ldr	r2, [pc, #216]	@ (80046e4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d01d      	beq.n	800464a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4a35      	ldr	r2, [pc, #212]	@ (80046e8 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d018      	beq.n	800464a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4a33      	ldr	r2, [pc, #204]	@ (80046ec <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d013      	beq.n	800464a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4a32      	ldr	r2, [pc, #200]	@ (80046f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d00e      	beq.n	800464a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a30      	ldr	r2, [pc, #192]	@ (80046f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d009      	beq.n	800464a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4a2f      	ldr	r2, [pc, #188]	@ (80046f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d004      	beq.n	800464a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4a2d      	ldr	r2, [pc, #180]	@ (80046fc <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d101      	bne.n	800464e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800464a:	2301      	movs	r3, #1
 800464c:	e000      	b.n	8004650 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800464e:	2300      	movs	r3, #0
 8004650:	2b00      	cmp	r3, #0
 8004652:	d01a      	beq.n	800468a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	b2db      	uxtb	r3, r3
 800465a:	3b08      	subs	r3, #8
 800465c:	4a28      	ldr	r2, [pc, #160]	@ (8004700 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800465e:	fba2 2303 	umull	r2, r3, r2, r3
 8004662:	091b      	lsrs	r3, r3, #4
 8004664:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004666:	68fa      	ldr	r2, [r7, #12]
 8004668:	4b26      	ldr	r3, [pc, #152]	@ (8004704 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800466a:	4413      	add	r3, r2
 800466c:	009b      	lsls	r3, r3, #2
 800466e:	461a      	mov	r2, r3
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	4a24      	ldr	r2, [pc, #144]	@ (8004708 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004678:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	f003 031f 	and.w	r3, r3, #31
 8004680:	2201      	movs	r2, #1
 8004682:	409a      	lsls	r2, r3
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004688:	e024      	b.n	80046d4 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	b2db      	uxtb	r3, r3
 8004690:	3b10      	subs	r3, #16
 8004692:	4a1e      	ldr	r2, [pc, #120]	@ (800470c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004694:	fba2 2303 	umull	r2, r3, r2, r3
 8004698:	091b      	lsrs	r3, r3, #4
 800469a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800469c:	68bb      	ldr	r3, [r7, #8]
 800469e:	4a1c      	ldr	r2, [pc, #112]	@ (8004710 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d806      	bhi.n	80046b2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	4a1b      	ldr	r2, [pc, #108]	@ (8004714 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d902      	bls.n	80046b2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	3308      	adds	r3, #8
 80046b0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80046b2:	68fa      	ldr	r2, [r7, #12]
 80046b4:	4b18      	ldr	r3, [pc, #96]	@ (8004718 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80046b6:	4413      	add	r3, r2
 80046b8:	009b      	lsls	r3, r3, #2
 80046ba:	461a      	mov	r2, r3
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	4a16      	ldr	r2, [pc, #88]	@ (800471c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80046c4:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	f003 031f 	and.w	r3, r3, #31
 80046cc:	2201      	movs	r2, #1
 80046ce:	409a      	lsls	r2, r3
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80046d4:	bf00      	nop
 80046d6:	3714      	adds	r7, #20
 80046d8:	46bd      	mov	sp, r7
 80046da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046de:	4770      	bx	lr
 80046e0:	58025408 	.word	0x58025408
 80046e4:	5802541c 	.word	0x5802541c
 80046e8:	58025430 	.word	0x58025430
 80046ec:	58025444 	.word	0x58025444
 80046f0:	58025458 	.word	0x58025458
 80046f4:	5802546c 	.word	0x5802546c
 80046f8:	58025480 	.word	0x58025480
 80046fc:	58025494 	.word	0x58025494
 8004700:	cccccccd 	.word	0xcccccccd
 8004704:	16009600 	.word	0x16009600
 8004708:	58025880 	.word	0x58025880
 800470c:	aaaaaaab 	.word	0xaaaaaaab
 8004710:	400204b8 	.word	0x400204b8
 8004714:	4002040f 	.word	0x4002040f
 8004718:	10008200 	.word	0x10008200
 800471c:	40020880 	.word	0x40020880

08004720 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004720:	b480      	push	{r7}
 8004722:	b085      	sub	sp, #20
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	b2db      	uxtb	r3, r3
 800472e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d04a      	beq.n	80047cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	2b08      	cmp	r3, #8
 800473a:	d847      	bhi.n	80047cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a25      	ldr	r2, [pc, #148]	@ (80047d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d022      	beq.n	800478c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4a24      	ldr	r2, [pc, #144]	@ (80047dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d01d      	beq.n	800478c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4a22      	ldr	r2, [pc, #136]	@ (80047e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d018      	beq.n	800478c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4a21      	ldr	r2, [pc, #132]	@ (80047e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d013      	beq.n	800478c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4a1f      	ldr	r2, [pc, #124]	@ (80047e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d00e      	beq.n	800478c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4a1e      	ldr	r2, [pc, #120]	@ (80047ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004774:	4293      	cmp	r3, r2
 8004776:	d009      	beq.n	800478c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4a1c      	ldr	r2, [pc, #112]	@ (80047f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d004      	beq.n	800478c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4a1b      	ldr	r2, [pc, #108]	@ (80047f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d101      	bne.n	8004790 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800478c:	2301      	movs	r3, #1
 800478e:	e000      	b.n	8004792 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004790:	2300      	movs	r3, #0
 8004792:	2b00      	cmp	r3, #0
 8004794:	d00a      	beq.n	80047ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004796:	68fa      	ldr	r2, [r7, #12]
 8004798:	4b17      	ldr	r3, [pc, #92]	@ (80047f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800479a:	4413      	add	r3, r2
 800479c:	009b      	lsls	r3, r3, #2
 800479e:	461a      	mov	r2, r3
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	4a15      	ldr	r2, [pc, #84]	@ (80047fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80047a8:	671a      	str	r2, [r3, #112]	@ 0x70
 80047aa:	e009      	b.n	80047c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80047ac:	68fa      	ldr	r2, [r7, #12]
 80047ae:	4b14      	ldr	r3, [pc, #80]	@ (8004800 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80047b0:	4413      	add	r3, r2
 80047b2:	009b      	lsls	r3, r3, #2
 80047b4:	461a      	mov	r2, r3
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	4a11      	ldr	r2, [pc, #68]	@ (8004804 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80047be:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	3b01      	subs	r3, #1
 80047c4:	2201      	movs	r2, #1
 80047c6:	409a      	lsls	r2, r3
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 80047cc:	bf00      	nop
 80047ce:	3714      	adds	r7, #20
 80047d0:	46bd      	mov	sp, r7
 80047d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d6:	4770      	bx	lr
 80047d8:	58025408 	.word	0x58025408
 80047dc:	5802541c 	.word	0x5802541c
 80047e0:	58025430 	.word	0x58025430
 80047e4:	58025444 	.word	0x58025444
 80047e8:	58025458 	.word	0x58025458
 80047ec:	5802546c 	.word	0x5802546c
 80047f0:	58025480 	.word	0x58025480
 80047f4:	58025494 	.word	0x58025494
 80047f8:	1600963f 	.word	0x1600963f
 80047fc:	58025940 	.word	0x58025940
 8004800:	1000823f 	.word	0x1000823f
 8004804:	40020940 	.word	0x40020940

08004808 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8004808:	b480      	push	{r7}
 800480a:	b087      	sub	sp, #28
 800480c:	af00      	add	r7, sp, #0
 800480e:	60f8      	str	r0, [r7, #12]
 8004810:	460b      	mov	r3, r1
 8004812:	607a      	str	r2, [r7, #4]
 8004814:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8004816:	2300      	movs	r3, #0
 8004818:	75fb      	strb	r3, [r7, #23]

  /* Check null pointer */
  if (hexti == NULL)
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d101      	bne.n	8004824 <HAL_EXTI_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8004820:	2301      	movs	r3, #1
 8004822:	e00a      	b.n	800483a <HAL_EXTI_RegisterCallback+0x32>
  }

  switch (CallbackID)
 8004824:	7afb      	ldrb	r3, [r7, #11]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d103      	bne.n	8004832 <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	687a      	ldr	r2, [r7, #4]
 800482e:	605a      	str	r2, [r3, #4]
      break;
 8004830:	e002      	b.n	8004838 <HAL_EXTI_RegisterCallback+0x30>

    default:
      status = HAL_ERROR;
 8004832:	2301      	movs	r3, #1
 8004834:	75fb      	strb	r3, [r7, #23]
      break;
 8004836:	bf00      	nop
  }

  return status;
 8004838:	7dfb      	ldrb	r3, [r7, #23]
}
 800483a:	4618      	mov	r0, r3
 800483c:	371c      	adds	r7, #28
 800483e:	46bd      	mov	sp, r7
 8004840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004844:	4770      	bx	lr

08004846 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8004846:	b480      	push	{r7}
 8004848:	b083      	sub	sp, #12
 800484a:	af00      	add	r7, sp, #0
 800484c:	6078      	str	r0, [r7, #4]
 800484e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d101      	bne.n	800485a <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8004856:	2301      	movs	r3, #1
 8004858:	e003      	b.n	8004862 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	683a      	ldr	r2, [r7, #0]
 800485e:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8004860:	2300      	movs	r3, #0
  }
}
 8004862:	4618      	mov	r0, r3
 8004864:	370c      	adds	r7, #12
 8004866:	46bd      	mov	sp, r7
 8004868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486c:	4770      	bx	lr
	...

08004870 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b086      	sub	sp, #24
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	0c1b      	lsrs	r3, r3, #16
 800487e:	f003 0303 	and.w	r3, r3, #3
 8004882:	613b      	str	r3, [r7, #16]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f003 031f 	and.w	r3, r3, #31
 800488c:	2201      	movs	r2, #1
 800488e:	fa02 f303 	lsl.w	r3, r2, r3
 8004892:	60fb      	str	r3, [r7, #12]

#if defined(DUAL_CORE)
  if (HAL_GetCurrentCPUID() == CM7_CPUID)
 8004894:	f7fd fecc 	bl	8002630 <HAL_GetCurrentCPUID>
 8004898:	4603      	mov	r3, r0
 800489a:	2b03      	cmp	r3, #3
 800489c:	d105      	bne.n	80048aa <HAL_EXTI_IRQHandler+0x3a>
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
 800489e:	693b      	ldr	r3, [r7, #16]
 80048a0:	011a      	lsls	r2, r3, #4
 80048a2:	4b0f      	ldr	r3, [pc, #60]	@ (80048e0 <HAL_EXTI_IRQHandler+0x70>)
 80048a4:	4413      	add	r3, r2
 80048a6:	617b      	str	r3, [r7, #20]
 80048a8:	e004      	b.n	80048b4 <HAL_EXTI_IRQHandler+0x44>
  }
  else /* Cortex-M4*/
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->C2PR1 + (EXTI_MODE_OFFSET * offset));
 80048aa:	693b      	ldr	r3, [r7, #16]
 80048ac:	011a      	lsls	r2, r3, #4
 80048ae:	4b0d      	ldr	r3, [pc, #52]	@ (80048e4 <HAL_EXTI_IRQHandler+0x74>)
 80048b0:	4413      	add	r3, r2
 80048b2:	617b      	str	r3, [r7, #20]
#else
  regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
#endif /* DUAL_CORE */

  /* Get pending bit  */
  regval = (*regaddr & maskline);
 80048b4:	697b      	ldr	r3, [r7, #20]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	68fa      	ldr	r2, [r7, #12]
 80048ba:	4013      	ands	r3, r2
 80048bc:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00U)
 80048be:	68bb      	ldr	r3, [r7, #8]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d009      	beq.n	80048d8 <HAL_EXTI_IRQHandler+0x68>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 80048c4:	697b      	ldr	r3, [r7, #20]
 80048c6:	68fa      	ldr	r2, [r7, #12]
 80048c8:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d002      	beq.n	80048d8 <HAL_EXTI_IRQHandler+0x68>
    {
      hexti->PendingCallback();
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	685b      	ldr	r3, [r3, #4]
 80048d6:	4798      	blx	r3
    }
  }
}
 80048d8:	bf00      	nop
 80048da:	3718      	adds	r7, #24
 80048dc:	46bd      	mov	sp, r7
 80048de:	bd80      	pop	{r7, pc}
 80048e0:	58000088 	.word	0x58000088
 80048e4:	580000c8 	.word	0x580000c8

080048e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80048e8:	b480      	push	{r7}
 80048ea:	b089      	sub	sp, #36	@ 0x24
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
 80048f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80048f2:	2300      	movs	r3, #0
 80048f4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80048f6:	4b89      	ldr	r3, [pc, #548]	@ (8004b1c <HAL_GPIO_Init+0x234>)
 80048f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80048fa:	e194      	b.n	8004c26 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	681a      	ldr	r2, [r3, #0]
 8004900:	2101      	movs	r1, #1
 8004902:	69fb      	ldr	r3, [r7, #28]
 8004904:	fa01 f303 	lsl.w	r3, r1, r3
 8004908:	4013      	ands	r3, r2
 800490a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800490c:	693b      	ldr	r3, [r7, #16]
 800490e:	2b00      	cmp	r3, #0
 8004910:	f000 8186 	beq.w	8004c20 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	685b      	ldr	r3, [r3, #4]
 8004918:	f003 0303 	and.w	r3, r3, #3
 800491c:	2b01      	cmp	r3, #1
 800491e:	d005      	beq.n	800492c <HAL_GPIO_Init+0x44>
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	f003 0303 	and.w	r3, r3, #3
 8004928:	2b02      	cmp	r3, #2
 800492a:	d130      	bne.n	800498e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	689b      	ldr	r3, [r3, #8]
 8004930:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004932:	69fb      	ldr	r3, [r7, #28]
 8004934:	005b      	lsls	r3, r3, #1
 8004936:	2203      	movs	r2, #3
 8004938:	fa02 f303 	lsl.w	r3, r2, r3
 800493c:	43db      	mvns	r3, r3
 800493e:	69ba      	ldr	r2, [r7, #24]
 8004940:	4013      	ands	r3, r2
 8004942:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	68da      	ldr	r2, [r3, #12]
 8004948:	69fb      	ldr	r3, [r7, #28]
 800494a:	005b      	lsls	r3, r3, #1
 800494c:	fa02 f303 	lsl.w	r3, r2, r3
 8004950:	69ba      	ldr	r2, [r7, #24]
 8004952:	4313      	orrs	r3, r2
 8004954:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	69ba      	ldr	r2, [r7, #24]
 800495a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	685b      	ldr	r3, [r3, #4]
 8004960:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004962:	2201      	movs	r2, #1
 8004964:	69fb      	ldr	r3, [r7, #28]
 8004966:	fa02 f303 	lsl.w	r3, r2, r3
 800496a:	43db      	mvns	r3, r3
 800496c:	69ba      	ldr	r2, [r7, #24]
 800496e:	4013      	ands	r3, r2
 8004970:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	091b      	lsrs	r3, r3, #4
 8004978:	f003 0201 	and.w	r2, r3, #1
 800497c:	69fb      	ldr	r3, [r7, #28]
 800497e:	fa02 f303 	lsl.w	r3, r2, r3
 8004982:	69ba      	ldr	r2, [r7, #24]
 8004984:	4313      	orrs	r3, r2
 8004986:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	69ba      	ldr	r2, [r7, #24]
 800498c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	f003 0303 	and.w	r3, r3, #3
 8004996:	2b03      	cmp	r3, #3
 8004998:	d017      	beq.n	80049ca <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	68db      	ldr	r3, [r3, #12]
 800499e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80049a0:	69fb      	ldr	r3, [r7, #28]
 80049a2:	005b      	lsls	r3, r3, #1
 80049a4:	2203      	movs	r2, #3
 80049a6:	fa02 f303 	lsl.w	r3, r2, r3
 80049aa:	43db      	mvns	r3, r3
 80049ac:	69ba      	ldr	r2, [r7, #24]
 80049ae:	4013      	ands	r3, r2
 80049b0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	689a      	ldr	r2, [r3, #8]
 80049b6:	69fb      	ldr	r3, [r7, #28]
 80049b8:	005b      	lsls	r3, r3, #1
 80049ba:	fa02 f303 	lsl.w	r3, r2, r3
 80049be:	69ba      	ldr	r2, [r7, #24]
 80049c0:	4313      	orrs	r3, r2
 80049c2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	69ba      	ldr	r2, [r7, #24]
 80049c8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	f003 0303 	and.w	r3, r3, #3
 80049d2:	2b02      	cmp	r3, #2
 80049d4:	d123      	bne.n	8004a1e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80049d6:	69fb      	ldr	r3, [r7, #28]
 80049d8:	08da      	lsrs	r2, r3, #3
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	3208      	adds	r2, #8
 80049de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80049e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80049e4:	69fb      	ldr	r3, [r7, #28]
 80049e6:	f003 0307 	and.w	r3, r3, #7
 80049ea:	009b      	lsls	r3, r3, #2
 80049ec:	220f      	movs	r2, #15
 80049ee:	fa02 f303 	lsl.w	r3, r2, r3
 80049f2:	43db      	mvns	r3, r3
 80049f4:	69ba      	ldr	r2, [r7, #24]
 80049f6:	4013      	ands	r3, r2
 80049f8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	691a      	ldr	r2, [r3, #16]
 80049fe:	69fb      	ldr	r3, [r7, #28]
 8004a00:	f003 0307 	and.w	r3, r3, #7
 8004a04:	009b      	lsls	r3, r3, #2
 8004a06:	fa02 f303 	lsl.w	r3, r2, r3
 8004a0a:	69ba      	ldr	r2, [r7, #24]
 8004a0c:	4313      	orrs	r3, r2
 8004a0e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004a10:	69fb      	ldr	r3, [r7, #28]
 8004a12:	08da      	lsrs	r2, r3, #3
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	3208      	adds	r2, #8
 8004a18:	69b9      	ldr	r1, [r7, #24]
 8004a1a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004a24:	69fb      	ldr	r3, [r7, #28]
 8004a26:	005b      	lsls	r3, r3, #1
 8004a28:	2203      	movs	r2, #3
 8004a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a2e:	43db      	mvns	r3, r3
 8004a30:	69ba      	ldr	r2, [r7, #24]
 8004a32:	4013      	ands	r3, r2
 8004a34:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	f003 0203 	and.w	r2, r3, #3
 8004a3e:	69fb      	ldr	r3, [r7, #28]
 8004a40:	005b      	lsls	r3, r3, #1
 8004a42:	fa02 f303 	lsl.w	r3, r2, r3
 8004a46:	69ba      	ldr	r2, [r7, #24]
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	69ba      	ldr	r2, [r7, #24]
 8004a50:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	685b      	ldr	r3, [r3, #4]
 8004a56:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	f000 80e0 	beq.w	8004c20 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004a60:	4b2f      	ldr	r3, [pc, #188]	@ (8004b20 <HAL_GPIO_Init+0x238>)
 8004a62:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004a66:	4a2e      	ldr	r2, [pc, #184]	@ (8004b20 <HAL_GPIO_Init+0x238>)
 8004a68:	f043 0302 	orr.w	r3, r3, #2
 8004a6c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8004a70:	4b2b      	ldr	r3, [pc, #172]	@ (8004b20 <HAL_GPIO_Init+0x238>)
 8004a72:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004a76:	f003 0302 	and.w	r3, r3, #2
 8004a7a:	60fb      	str	r3, [r7, #12]
 8004a7c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004a7e:	4a29      	ldr	r2, [pc, #164]	@ (8004b24 <HAL_GPIO_Init+0x23c>)
 8004a80:	69fb      	ldr	r3, [r7, #28]
 8004a82:	089b      	lsrs	r3, r3, #2
 8004a84:	3302      	adds	r3, #2
 8004a86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004a8c:	69fb      	ldr	r3, [r7, #28]
 8004a8e:	f003 0303 	and.w	r3, r3, #3
 8004a92:	009b      	lsls	r3, r3, #2
 8004a94:	220f      	movs	r2, #15
 8004a96:	fa02 f303 	lsl.w	r3, r2, r3
 8004a9a:	43db      	mvns	r3, r3
 8004a9c:	69ba      	ldr	r2, [r7, #24]
 8004a9e:	4013      	ands	r3, r2
 8004aa0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	4a20      	ldr	r2, [pc, #128]	@ (8004b28 <HAL_GPIO_Init+0x240>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d052      	beq.n	8004b50 <HAL_GPIO_Init+0x268>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	4a1f      	ldr	r2, [pc, #124]	@ (8004b2c <HAL_GPIO_Init+0x244>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d031      	beq.n	8004b16 <HAL_GPIO_Init+0x22e>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	4a1e      	ldr	r2, [pc, #120]	@ (8004b30 <HAL_GPIO_Init+0x248>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d02b      	beq.n	8004b12 <HAL_GPIO_Init+0x22a>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	4a1d      	ldr	r2, [pc, #116]	@ (8004b34 <HAL_GPIO_Init+0x24c>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d025      	beq.n	8004b0e <HAL_GPIO_Init+0x226>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	4a1c      	ldr	r2, [pc, #112]	@ (8004b38 <HAL_GPIO_Init+0x250>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d01f      	beq.n	8004b0a <HAL_GPIO_Init+0x222>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	4a1b      	ldr	r2, [pc, #108]	@ (8004b3c <HAL_GPIO_Init+0x254>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d019      	beq.n	8004b06 <HAL_GPIO_Init+0x21e>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	4a1a      	ldr	r2, [pc, #104]	@ (8004b40 <HAL_GPIO_Init+0x258>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d013      	beq.n	8004b02 <HAL_GPIO_Init+0x21a>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	4a19      	ldr	r2, [pc, #100]	@ (8004b44 <HAL_GPIO_Init+0x25c>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d00d      	beq.n	8004afe <HAL_GPIO_Init+0x216>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	4a18      	ldr	r2, [pc, #96]	@ (8004b48 <HAL_GPIO_Init+0x260>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d007      	beq.n	8004afa <HAL_GPIO_Init+0x212>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	4a17      	ldr	r2, [pc, #92]	@ (8004b4c <HAL_GPIO_Init+0x264>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d101      	bne.n	8004af6 <HAL_GPIO_Init+0x20e>
 8004af2:	2309      	movs	r3, #9
 8004af4:	e02d      	b.n	8004b52 <HAL_GPIO_Init+0x26a>
 8004af6:	230a      	movs	r3, #10
 8004af8:	e02b      	b.n	8004b52 <HAL_GPIO_Init+0x26a>
 8004afa:	2308      	movs	r3, #8
 8004afc:	e029      	b.n	8004b52 <HAL_GPIO_Init+0x26a>
 8004afe:	2307      	movs	r3, #7
 8004b00:	e027      	b.n	8004b52 <HAL_GPIO_Init+0x26a>
 8004b02:	2306      	movs	r3, #6
 8004b04:	e025      	b.n	8004b52 <HAL_GPIO_Init+0x26a>
 8004b06:	2305      	movs	r3, #5
 8004b08:	e023      	b.n	8004b52 <HAL_GPIO_Init+0x26a>
 8004b0a:	2304      	movs	r3, #4
 8004b0c:	e021      	b.n	8004b52 <HAL_GPIO_Init+0x26a>
 8004b0e:	2303      	movs	r3, #3
 8004b10:	e01f      	b.n	8004b52 <HAL_GPIO_Init+0x26a>
 8004b12:	2302      	movs	r3, #2
 8004b14:	e01d      	b.n	8004b52 <HAL_GPIO_Init+0x26a>
 8004b16:	2301      	movs	r3, #1
 8004b18:	e01b      	b.n	8004b52 <HAL_GPIO_Init+0x26a>
 8004b1a:	bf00      	nop
 8004b1c:	58000080 	.word	0x58000080
 8004b20:	58024400 	.word	0x58024400
 8004b24:	58000400 	.word	0x58000400
 8004b28:	58020000 	.word	0x58020000
 8004b2c:	58020400 	.word	0x58020400
 8004b30:	58020800 	.word	0x58020800
 8004b34:	58020c00 	.word	0x58020c00
 8004b38:	58021000 	.word	0x58021000
 8004b3c:	58021400 	.word	0x58021400
 8004b40:	58021800 	.word	0x58021800
 8004b44:	58021c00 	.word	0x58021c00
 8004b48:	58022000 	.word	0x58022000
 8004b4c:	58022400 	.word	0x58022400
 8004b50:	2300      	movs	r3, #0
 8004b52:	69fa      	ldr	r2, [r7, #28]
 8004b54:	f002 0203 	and.w	r2, r2, #3
 8004b58:	0092      	lsls	r2, r2, #2
 8004b5a:	4093      	lsls	r3, r2
 8004b5c:	69ba      	ldr	r2, [r7, #24]
 8004b5e:	4313      	orrs	r3, r2
 8004b60:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004b62:	4938      	ldr	r1, [pc, #224]	@ (8004c44 <HAL_GPIO_Init+0x35c>)
 8004b64:	69fb      	ldr	r3, [r7, #28]
 8004b66:	089b      	lsrs	r3, r3, #2
 8004b68:	3302      	adds	r3, #2
 8004b6a:	69ba      	ldr	r2, [r7, #24]
 8004b6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004b70:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004b78:	693b      	ldr	r3, [r7, #16]
 8004b7a:	43db      	mvns	r3, r3
 8004b7c:	69ba      	ldr	r2, [r7, #24]
 8004b7e:	4013      	ands	r3, r2
 8004b80:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	685b      	ldr	r3, [r3, #4]
 8004b86:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d003      	beq.n	8004b96 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8004b8e:	69ba      	ldr	r2, [r7, #24]
 8004b90:	693b      	ldr	r3, [r7, #16]
 8004b92:	4313      	orrs	r3, r2
 8004b94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004b96:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004b9a:	69bb      	ldr	r3, [r7, #24]
 8004b9c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004b9e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004ba6:	693b      	ldr	r3, [r7, #16]
 8004ba8:	43db      	mvns	r3, r3
 8004baa:	69ba      	ldr	r2, [r7, #24]
 8004bac:	4013      	ands	r3, r2
 8004bae:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d003      	beq.n	8004bc4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004bbc:	69ba      	ldr	r2, [r7, #24]
 8004bbe:	693b      	ldr	r3, [r7, #16]
 8004bc0:	4313      	orrs	r3, r2
 8004bc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004bc4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004bc8:	69bb      	ldr	r3, [r7, #24]
 8004bca:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004bcc:	697b      	ldr	r3, [r7, #20]
 8004bce:	685b      	ldr	r3, [r3, #4]
 8004bd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004bd2:	693b      	ldr	r3, [r7, #16]
 8004bd4:	43db      	mvns	r3, r3
 8004bd6:	69ba      	ldr	r2, [r7, #24]
 8004bd8:	4013      	ands	r3, r2
 8004bda:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	685b      	ldr	r3, [r3, #4]
 8004be0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d003      	beq.n	8004bf0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8004be8:	69ba      	ldr	r2, [r7, #24]
 8004bea:	693b      	ldr	r3, [r7, #16]
 8004bec:	4313      	orrs	r3, r2
 8004bee:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004bf0:	697b      	ldr	r3, [r7, #20]
 8004bf2:	69ba      	ldr	r2, [r7, #24]
 8004bf4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004bf6:	697b      	ldr	r3, [r7, #20]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004bfc:	693b      	ldr	r3, [r7, #16]
 8004bfe:	43db      	mvns	r3, r3
 8004c00:	69ba      	ldr	r2, [r7, #24]
 8004c02:	4013      	ands	r3, r2
 8004c04:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	685b      	ldr	r3, [r3, #4]
 8004c0a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d003      	beq.n	8004c1a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8004c12:	69ba      	ldr	r2, [r7, #24]
 8004c14:	693b      	ldr	r3, [r7, #16]
 8004c16:	4313      	orrs	r3, r2
 8004c18:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004c1a:	697b      	ldr	r3, [r7, #20]
 8004c1c:	69ba      	ldr	r2, [r7, #24]
 8004c1e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004c20:	69fb      	ldr	r3, [r7, #28]
 8004c22:	3301      	adds	r3, #1
 8004c24:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	681a      	ldr	r2, [r3, #0]
 8004c2a:	69fb      	ldr	r3, [r7, #28]
 8004c2c:	fa22 f303 	lsr.w	r3, r2, r3
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	f47f ae63 	bne.w	80048fc <HAL_GPIO_Init+0x14>
  }
}
 8004c36:	bf00      	nop
 8004c38:	bf00      	nop
 8004c3a:	3724      	adds	r7, #36	@ 0x24
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c42:	4770      	bx	lr
 8004c44:	58000400 	.word	0x58000400

08004c48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004c48:	b480      	push	{r7}
 8004c4a:	b083      	sub	sp, #12
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
 8004c50:	460b      	mov	r3, r1
 8004c52:	807b      	strh	r3, [r7, #2]
 8004c54:	4613      	mov	r3, r2
 8004c56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004c58:	787b      	ldrb	r3, [r7, #1]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d003      	beq.n	8004c66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004c5e:	887a      	ldrh	r2, [r7, #2]
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004c64:	e003      	b.n	8004c6e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004c66:	887b      	ldrh	r3, [r7, #2]
 8004c68:	041a      	lsls	r2, r3, #16
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	619a      	str	r2, [r3, #24]
}
 8004c6e:	bf00      	nop
 8004c70:	370c      	adds	r7, #12
 8004c72:	46bd      	mov	sp, r7
 8004c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c78:	4770      	bx	lr

08004c7a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004c7a:	b480      	push	{r7}
 8004c7c:	b085      	sub	sp, #20
 8004c7e:	af00      	add	r7, sp, #0
 8004c80:	6078      	str	r0, [r7, #4]
 8004c82:	460b      	mov	r3, r1
 8004c84:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	695b      	ldr	r3, [r3, #20]
 8004c8a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004c8c:	887a      	ldrh	r2, [r7, #2]
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	4013      	ands	r3, r2
 8004c92:	041a      	lsls	r2, r3, #16
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	43d9      	mvns	r1, r3
 8004c98:	887b      	ldrh	r3, [r7, #2]
 8004c9a:	400b      	ands	r3, r1
 8004c9c:	431a      	orrs	r2, r3
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	619a      	str	r2, [r3, #24]
}
 8004ca2:	bf00      	nop
 8004ca4:	3714      	adds	r7, #20
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cac:	4770      	bx	lr
	...

08004cb0 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	b083      	sub	sp, #12
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8004cb8:	4a08      	ldr	r2, [pc, #32]	@ (8004cdc <HAL_HSEM_FastTake+0x2c>)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	3320      	adds	r3, #32
 8004cbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004cc2:	4a07      	ldr	r2, [pc, #28]	@ (8004ce0 <HAL_HSEM_FastTake+0x30>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d101      	bne.n	8004ccc <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8004cc8:	2300      	movs	r3, #0
 8004cca:	e000      	b.n	8004cce <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8004ccc:	2301      	movs	r3, #1
}
 8004cce:	4618      	mov	r0, r3
 8004cd0:	370c      	adds	r7, #12
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd8:	4770      	bx	lr
 8004cda:	bf00      	nop
 8004cdc:	58026400 	.word	0x58026400
 8004ce0:	80000300 	.word	0x80000300

08004ce4 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8004ce4:	b480      	push	{r7}
 8004ce6:	b083      	sub	sp, #12
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
 8004cec:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8004cee:	4906      	ldr	r1, [pc, #24]	@ (8004d08 <HAL_HSEM_Release+0x24>)
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8004cfc:	bf00      	nop
 8004cfe:	370c      	adds	r7, #12
 8004d00:	46bd      	mov	sp, r7
 8004d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d06:	4770      	bx	lr
 8004d08:	58026400 	.word	0x58026400

08004d0c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b086      	sub	sp, #24
 8004d10:	af02      	add	r7, sp, #8
 8004d12:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d101      	bne.n	8004d1e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	e0fe      	b.n	8004f1c <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8004d24:	b2db      	uxtb	r3, r3
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d106      	bne.n	8004d38 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004d32:	6878      	ldr	r0, [r7, #4]
 8004d34:	f00a fa7e 	bl	800f234 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2203      	movs	r2, #3
 8004d3c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4618      	mov	r0, r3
 8004d46:	f006 fe42 	bl	800b9ce <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6818      	ldr	r0, [r3, #0]
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	7c1a      	ldrb	r2, [r3, #16]
 8004d52:	f88d 2000 	strb.w	r2, [sp]
 8004d56:	3304      	adds	r3, #4
 8004d58:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004d5a:	f006 fd13 	bl	800b784 <USB_CoreInit>
 8004d5e:	4603      	mov	r3, r0
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d005      	beq.n	8004d70 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2202      	movs	r2, #2
 8004d68:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	e0d5      	b.n	8004f1c <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	2100      	movs	r1, #0
 8004d76:	4618      	mov	r0, r3
 8004d78:	f006 fe3a 	bl	800b9f0 <USB_SetCurrentMode>
 8004d7c:	4603      	mov	r3, r0
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d005      	beq.n	8004d8e <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2202      	movs	r2, #2
 8004d86:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	e0c6      	b.n	8004f1c <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004d8e:	2300      	movs	r3, #0
 8004d90:	73fb      	strb	r3, [r7, #15]
 8004d92:	e04a      	b.n	8004e2a <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004d94:	7bfa      	ldrb	r2, [r7, #15]
 8004d96:	6879      	ldr	r1, [r7, #4]
 8004d98:	4613      	mov	r3, r2
 8004d9a:	00db      	lsls	r3, r3, #3
 8004d9c:	4413      	add	r3, r2
 8004d9e:	009b      	lsls	r3, r3, #2
 8004da0:	440b      	add	r3, r1
 8004da2:	3315      	adds	r3, #21
 8004da4:	2201      	movs	r2, #1
 8004da6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004da8:	7bfa      	ldrb	r2, [r7, #15]
 8004daa:	6879      	ldr	r1, [r7, #4]
 8004dac:	4613      	mov	r3, r2
 8004dae:	00db      	lsls	r3, r3, #3
 8004db0:	4413      	add	r3, r2
 8004db2:	009b      	lsls	r3, r3, #2
 8004db4:	440b      	add	r3, r1
 8004db6:	3314      	adds	r3, #20
 8004db8:	7bfa      	ldrb	r2, [r7, #15]
 8004dba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004dbc:	7bfa      	ldrb	r2, [r7, #15]
 8004dbe:	7bfb      	ldrb	r3, [r7, #15]
 8004dc0:	b298      	uxth	r0, r3
 8004dc2:	6879      	ldr	r1, [r7, #4]
 8004dc4:	4613      	mov	r3, r2
 8004dc6:	00db      	lsls	r3, r3, #3
 8004dc8:	4413      	add	r3, r2
 8004dca:	009b      	lsls	r3, r3, #2
 8004dcc:	440b      	add	r3, r1
 8004dce:	332e      	adds	r3, #46	@ 0x2e
 8004dd0:	4602      	mov	r2, r0
 8004dd2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004dd4:	7bfa      	ldrb	r2, [r7, #15]
 8004dd6:	6879      	ldr	r1, [r7, #4]
 8004dd8:	4613      	mov	r3, r2
 8004dda:	00db      	lsls	r3, r3, #3
 8004ddc:	4413      	add	r3, r2
 8004dde:	009b      	lsls	r3, r3, #2
 8004de0:	440b      	add	r3, r1
 8004de2:	3318      	adds	r3, #24
 8004de4:	2200      	movs	r2, #0
 8004de6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004de8:	7bfa      	ldrb	r2, [r7, #15]
 8004dea:	6879      	ldr	r1, [r7, #4]
 8004dec:	4613      	mov	r3, r2
 8004dee:	00db      	lsls	r3, r3, #3
 8004df0:	4413      	add	r3, r2
 8004df2:	009b      	lsls	r3, r3, #2
 8004df4:	440b      	add	r3, r1
 8004df6:	331c      	adds	r3, #28
 8004df8:	2200      	movs	r2, #0
 8004dfa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004dfc:	7bfa      	ldrb	r2, [r7, #15]
 8004dfe:	6879      	ldr	r1, [r7, #4]
 8004e00:	4613      	mov	r3, r2
 8004e02:	00db      	lsls	r3, r3, #3
 8004e04:	4413      	add	r3, r2
 8004e06:	009b      	lsls	r3, r3, #2
 8004e08:	440b      	add	r3, r1
 8004e0a:	3320      	adds	r3, #32
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004e10:	7bfa      	ldrb	r2, [r7, #15]
 8004e12:	6879      	ldr	r1, [r7, #4]
 8004e14:	4613      	mov	r3, r2
 8004e16:	00db      	lsls	r3, r3, #3
 8004e18:	4413      	add	r3, r2
 8004e1a:	009b      	lsls	r3, r3, #2
 8004e1c:	440b      	add	r3, r1
 8004e1e:	3324      	adds	r3, #36	@ 0x24
 8004e20:	2200      	movs	r2, #0
 8004e22:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004e24:	7bfb      	ldrb	r3, [r7, #15]
 8004e26:	3301      	adds	r3, #1
 8004e28:	73fb      	strb	r3, [r7, #15]
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	791b      	ldrb	r3, [r3, #4]
 8004e2e:	7bfa      	ldrb	r2, [r7, #15]
 8004e30:	429a      	cmp	r2, r3
 8004e32:	d3af      	bcc.n	8004d94 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004e34:	2300      	movs	r3, #0
 8004e36:	73fb      	strb	r3, [r7, #15]
 8004e38:	e044      	b.n	8004ec4 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004e3a:	7bfa      	ldrb	r2, [r7, #15]
 8004e3c:	6879      	ldr	r1, [r7, #4]
 8004e3e:	4613      	mov	r3, r2
 8004e40:	00db      	lsls	r3, r3, #3
 8004e42:	4413      	add	r3, r2
 8004e44:	009b      	lsls	r3, r3, #2
 8004e46:	440b      	add	r3, r1
 8004e48:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004e50:	7bfa      	ldrb	r2, [r7, #15]
 8004e52:	6879      	ldr	r1, [r7, #4]
 8004e54:	4613      	mov	r3, r2
 8004e56:	00db      	lsls	r3, r3, #3
 8004e58:	4413      	add	r3, r2
 8004e5a:	009b      	lsls	r3, r3, #2
 8004e5c:	440b      	add	r3, r1
 8004e5e:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8004e62:	7bfa      	ldrb	r2, [r7, #15]
 8004e64:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004e66:	7bfa      	ldrb	r2, [r7, #15]
 8004e68:	6879      	ldr	r1, [r7, #4]
 8004e6a:	4613      	mov	r3, r2
 8004e6c:	00db      	lsls	r3, r3, #3
 8004e6e:	4413      	add	r3, r2
 8004e70:	009b      	lsls	r3, r3, #2
 8004e72:	440b      	add	r3, r1
 8004e74:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8004e78:	2200      	movs	r2, #0
 8004e7a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004e7c:	7bfa      	ldrb	r2, [r7, #15]
 8004e7e:	6879      	ldr	r1, [r7, #4]
 8004e80:	4613      	mov	r3, r2
 8004e82:	00db      	lsls	r3, r3, #3
 8004e84:	4413      	add	r3, r2
 8004e86:	009b      	lsls	r3, r3, #2
 8004e88:	440b      	add	r3, r1
 8004e8a:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8004e8e:	2200      	movs	r2, #0
 8004e90:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004e92:	7bfa      	ldrb	r2, [r7, #15]
 8004e94:	6879      	ldr	r1, [r7, #4]
 8004e96:	4613      	mov	r3, r2
 8004e98:	00db      	lsls	r3, r3, #3
 8004e9a:	4413      	add	r3, r2
 8004e9c:	009b      	lsls	r3, r3, #2
 8004e9e:	440b      	add	r3, r1
 8004ea0:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004ea8:	7bfa      	ldrb	r2, [r7, #15]
 8004eaa:	6879      	ldr	r1, [r7, #4]
 8004eac:	4613      	mov	r3, r2
 8004eae:	00db      	lsls	r3, r3, #3
 8004eb0:	4413      	add	r3, r2
 8004eb2:	009b      	lsls	r3, r3, #2
 8004eb4:	440b      	add	r3, r1
 8004eb6:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004eba:	2200      	movs	r2, #0
 8004ebc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004ebe:	7bfb      	ldrb	r3, [r7, #15]
 8004ec0:	3301      	adds	r3, #1
 8004ec2:	73fb      	strb	r3, [r7, #15]
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	791b      	ldrb	r3, [r3, #4]
 8004ec8:	7bfa      	ldrb	r2, [r7, #15]
 8004eca:	429a      	cmp	r2, r3
 8004ecc:	d3b5      	bcc.n	8004e3a <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6818      	ldr	r0, [r3, #0]
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	7c1a      	ldrb	r2, [r3, #16]
 8004ed6:	f88d 2000 	strb.w	r2, [sp]
 8004eda:	3304      	adds	r3, #4
 8004edc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004ede:	f006 fdd3 	bl	800ba88 <USB_DevInit>
 8004ee2:	4603      	mov	r3, r0
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d005      	beq.n	8004ef4 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2202      	movs	r2, #2
 8004eec:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	e013      	b.n	8004f1c <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2201      	movs	r2, #1
 8004efe:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	7b1b      	ldrb	r3, [r3, #12]
 8004f06:	2b01      	cmp	r3, #1
 8004f08:	d102      	bne.n	8004f10 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004f0a:	6878      	ldr	r0, [r7, #4]
 8004f0c:	f001 f96c 	bl	80061e8 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4618      	mov	r0, r3
 8004f16:	f007 fe12 	bl	800cb3e <USB_DevDisconnect>

  return HAL_OK;
 8004f1a:	2300      	movs	r3, #0
}
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	3710      	adds	r7, #16
 8004f20:	46bd      	mov	sp, r7
 8004f22:	bd80      	pop	{r7, pc}

08004f24 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b084      	sub	sp, #16
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004f38:	2b01      	cmp	r3, #1
 8004f3a:	d101      	bne.n	8004f40 <HAL_PCD_Start+0x1c>
 8004f3c:	2302      	movs	r3, #2
 8004f3e:	e022      	b.n	8004f86 <HAL_PCD_Start+0x62>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2201      	movs	r2, #1
 8004f44:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	68db      	ldr	r3, [r3, #12]
 8004f4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d009      	beq.n	8004f68 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8004f58:	2b01      	cmp	r3, #1
 8004f5a:	d105      	bne.n	8004f68 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f60:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	f006 fd1d 	bl	800b9ac <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	4618      	mov	r0, r3
 8004f78:	f007 fdc0 	bl	800cafc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2200      	movs	r2, #0
 8004f80:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004f84:	2300      	movs	r3, #0
}
 8004f86:	4618      	mov	r0, r3
 8004f88:	3710      	adds	r7, #16
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bd80      	pop	{r7, pc}

08004f8e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004f8e:	b590      	push	{r4, r7, lr}
 8004f90:	b08d      	sub	sp, #52	@ 0x34
 8004f92:	af00      	add	r7, sp, #0
 8004f94:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f9c:	6a3b      	ldr	r3, [r7, #32]
 8004f9e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	f007 fe7e 	bl	800cca6 <USB_GetMode>
 8004faa:	4603      	mov	r3, r0
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	f040 84b9 	bne.w	8005924 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	f007 fde2 	bl	800cb80 <USB_ReadInterrupts>
 8004fbc:	4603      	mov	r3, r0
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	f000 84af 	beq.w	8005922 <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8004fc4:	69fb      	ldr	r3, [r7, #28]
 8004fc6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004fca:	689b      	ldr	r3, [r3, #8]
 8004fcc:	0a1b      	lsrs	r3, r3, #8
 8004fce:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	4618      	mov	r0, r3
 8004fde:	f007 fdcf 	bl	800cb80 <USB_ReadInterrupts>
 8004fe2:	4603      	mov	r3, r0
 8004fe4:	f003 0302 	and.w	r3, r3, #2
 8004fe8:	2b02      	cmp	r3, #2
 8004fea:	d107      	bne.n	8004ffc <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	695a      	ldr	r2, [r3, #20]
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f002 0202 	and.w	r2, r2, #2
 8004ffa:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	4618      	mov	r0, r3
 8005002:	f007 fdbd 	bl	800cb80 <USB_ReadInterrupts>
 8005006:	4603      	mov	r3, r0
 8005008:	f003 0310 	and.w	r3, r3, #16
 800500c:	2b10      	cmp	r3, #16
 800500e:	d161      	bne.n	80050d4 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	699a      	ldr	r2, [r3, #24]
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f022 0210 	bic.w	r2, r2, #16
 800501e:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8005020:	6a3b      	ldr	r3, [r7, #32]
 8005022:	6a1b      	ldr	r3, [r3, #32]
 8005024:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8005026:	69bb      	ldr	r3, [r7, #24]
 8005028:	f003 020f 	and.w	r2, r3, #15
 800502c:	4613      	mov	r3, r2
 800502e:	00db      	lsls	r3, r3, #3
 8005030:	4413      	add	r3, r2
 8005032:	009b      	lsls	r3, r3, #2
 8005034:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005038:	687a      	ldr	r2, [r7, #4]
 800503a:	4413      	add	r3, r2
 800503c:	3304      	adds	r3, #4
 800503e:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8005040:	69bb      	ldr	r3, [r7, #24]
 8005042:	0c5b      	lsrs	r3, r3, #17
 8005044:	f003 030f 	and.w	r3, r3, #15
 8005048:	2b02      	cmp	r3, #2
 800504a:	d124      	bne.n	8005096 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800504c:	69ba      	ldr	r2, [r7, #24]
 800504e:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8005052:	4013      	ands	r3, r2
 8005054:	2b00      	cmp	r3, #0
 8005056:	d035      	beq.n	80050c4 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005058:	697b      	ldr	r3, [r7, #20]
 800505a:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800505c:	69bb      	ldr	r3, [r7, #24]
 800505e:	091b      	lsrs	r3, r3, #4
 8005060:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005062:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005066:	b29b      	uxth	r3, r3
 8005068:	461a      	mov	r2, r3
 800506a:	6a38      	ldr	r0, [r7, #32]
 800506c:	f007 fbf4 	bl	800c858 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005070:	697b      	ldr	r3, [r7, #20]
 8005072:	68da      	ldr	r2, [r3, #12]
 8005074:	69bb      	ldr	r3, [r7, #24]
 8005076:	091b      	lsrs	r3, r3, #4
 8005078:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800507c:	441a      	add	r2, r3
 800507e:	697b      	ldr	r3, [r7, #20]
 8005080:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005082:	697b      	ldr	r3, [r7, #20]
 8005084:	695a      	ldr	r2, [r3, #20]
 8005086:	69bb      	ldr	r3, [r7, #24]
 8005088:	091b      	lsrs	r3, r3, #4
 800508a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800508e:	441a      	add	r2, r3
 8005090:	697b      	ldr	r3, [r7, #20]
 8005092:	615a      	str	r2, [r3, #20]
 8005094:	e016      	b.n	80050c4 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8005096:	69bb      	ldr	r3, [r7, #24]
 8005098:	0c5b      	lsrs	r3, r3, #17
 800509a:	f003 030f 	and.w	r3, r3, #15
 800509e:	2b06      	cmp	r3, #6
 80050a0:	d110      	bne.n	80050c4 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80050a8:	2208      	movs	r2, #8
 80050aa:	4619      	mov	r1, r3
 80050ac:	6a38      	ldr	r0, [r7, #32]
 80050ae:	f007 fbd3 	bl	800c858 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80050b2:	697b      	ldr	r3, [r7, #20]
 80050b4:	695a      	ldr	r2, [r3, #20]
 80050b6:	69bb      	ldr	r3, [r7, #24]
 80050b8:	091b      	lsrs	r3, r3, #4
 80050ba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80050be:	441a      	add	r2, r3
 80050c0:	697b      	ldr	r3, [r7, #20]
 80050c2:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	699a      	ldr	r2, [r3, #24]
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f042 0210 	orr.w	r2, r2, #16
 80050d2:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4618      	mov	r0, r3
 80050da:	f007 fd51 	bl	800cb80 <USB_ReadInterrupts>
 80050de:	4603      	mov	r3, r0
 80050e0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80050e4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80050e8:	f040 80a7 	bne.w	800523a <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80050ec:	2300      	movs	r3, #0
 80050ee:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4618      	mov	r0, r3
 80050f6:	f007 fd56 	bl	800cba6 <USB_ReadDevAllOutEpInterrupt>
 80050fa:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80050fc:	e099      	b.n	8005232 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80050fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005100:	f003 0301 	and.w	r3, r3, #1
 8005104:	2b00      	cmp	r3, #0
 8005106:	f000 808e 	beq.w	8005226 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005110:	b2d2      	uxtb	r2, r2
 8005112:	4611      	mov	r1, r2
 8005114:	4618      	mov	r0, r3
 8005116:	f007 fd7a 	bl	800cc0e <USB_ReadDevOutEPInterrupt>
 800511a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800511c:	693b      	ldr	r3, [r7, #16]
 800511e:	f003 0301 	and.w	r3, r3, #1
 8005122:	2b00      	cmp	r3, #0
 8005124:	d00c      	beq.n	8005140 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8005126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005128:	015a      	lsls	r2, r3, #5
 800512a:	69fb      	ldr	r3, [r7, #28]
 800512c:	4413      	add	r3, r2
 800512e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005132:	461a      	mov	r2, r3
 8005134:	2301      	movs	r3, #1
 8005136:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8005138:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800513a:	6878      	ldr	r0, [r7, #4]
 800513c:	f000 fece 	bl	8005edc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8005140:	693b      	ldr	r3, [r7, #16]
 8005142:	f003 0308 	and.w	r3, r3, #8
 8005146:	2b00      	cmp	r3, #0
 8005148:	d00c      	beq.n	8005164 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800514a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800514c:	015a      	lsls	r2, r3, #5
 800514e:	69fb      	ldr	r3, [r7, #28]
 8005150:	4413      	add	r3, r2
 8005152:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005156:	461a      	mov	r2, r3
 8005158:	2308      	movs	r3, #8
 800515a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800515c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800515e:	6878      	ldr	r0, [r7, #4]
 8005160:	f000 ffa4 	bl	80060ac <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8005164:	693b      	ldr	r3, [r7, #16]
 8005166:	f003 0310 	and.w	r3, r3, #16
 800516a:	2b00      	cmp	r3, #0
 800516c:	d008      	beq.n	8005180 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800516e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005170:	015a      	lsls	r2, r3, #5
 8005172:	69fb      	ldr	r3, [r7, #28]
 8005174:	4413      	add	r3, r2
 8005176:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800517a:	461a      	mov	r2, r3
 800517c:	2310      	movs	r3, #16
 800517e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8005180:	693b      	ldr	r3, [r7, #16]
 8005182:	f003 0302 	and.w	r3, r3, #2
 8005186:	2b00      	cmp	r3, #0
 8005188:	d030      	beq.n	80051ec <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800518a:	6a3b      	ldr	r3, [r7, #32]
 800518c:	695b      	ldr	r3, [r3, #20]
 800518e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005192:	2b80      	cmp	r3, #128	@ 0x80
 8005194:	d109      	bne.n	80051aa <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8005196:	69fb      	ldr	r3, [r7, #28]
 8005198:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800519c:	685b      	ldr	r3, [r3, #4]
 800519e:	69fa      	ldr	r2, [r7, #28]
 80051a0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80051a4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80051a8:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80051aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80051ac:	4613      	mov	r3, r2
 80051ae:	00db      	lsls	r3, r3, #3
 80051b0:	4413      	add	r3, r2
 80051b2:	009b      	lsls	r3, r3, #2
 80051b4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80051b8:	687a      	ldr	r2, [r7, #4]
 80051ba:	4413      	add	r3, r2
 80051bc:	3304      	adds	r3, #4
 80051be:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80051c0:	697b      	ldr	r3, [r7, #20]
 80051c2:	78db      	ldrb	r3, [r3, #3]
 80051c4:	2b01      	cmp	r3, #1
 80051c6:	d108      	bne.n	80051da <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80051c8:	697b      	ldr	r3, [r7, #20]
 80051ca:	2200      	movs	r2, #0
 80051cc:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80051ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051d0:	b2db      	uxtb	r3, r3
 80051d2:	4619      	mov	r1, r3
 80051d4:	6878      	ldr	r0, [r7, #4]
 80051d6:	f00a f963 	bl	800f4a0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80051da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051dc:	015a      	lsls	r2, r3, #5
 80051de:	69fb      	ldr	r3, [r7, #28]
 80051e0:	4413      	add	r3, r2
 80051e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051e6:	461a      	mov	r2, r3
 80051e8:	2302      	movs	r3, #2
 80051ea:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80051ec:	693b      	ldr	r3, [r7, #16]
 80051ee:	f003 0320 	and.w	r3, r3, #32
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d008      	beq.n	8005208 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80051f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051f8:	015a      	lsls	r2, r3, #5
 80051fa:	69fb      	ldr	r3, [r7, #28]
 80051fc:	4413      	add	r3, r2
 80051fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005202:	461a      	mov	r2, r3
 8005204:	2320      	movs	r3, #32
 8005206:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8005208:	693b      	ldr	r3, [r7, #16]
 800520a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800520e:	2b00      	cmp	r3, #0
 8005210:	d009      	beq.n	8005226 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8005212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005214:	015a      	lsls	r2, r3, #5
 8005216:	69fb      	ldr	r3, [r7, #28]
 8005218:	4413      	add	r3, r2
 800521a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800521e:	461a      	mov	r2, r3
 8005220:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005224:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8005226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005228:	3301      	adds	r3, #1
 800522a:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800522c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800522e:	085b      	lsrs	r3, r3, #1
 8005230:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8005232:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005234:	2b00      	cmp	r3, #0
 8005236:	f47f af62 	bne.w	80050fe <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	4618      	mov	r0, r3
 8005240:	f007 fc9e 	bl	800cb80 <USB_ReadInterrupts>
 8005244:	4603      	mov	r3, r0
 8005246:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800524a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800524e:	f040 80db 	bne.w	8005408 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	4618      	mov	r0, r3
 8005258:	f007 fcbf 	bl	800cbda <USB_ReadDevAllInEpInterrupt>
 800525c:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800525e:	2300      	movs	r3, #0
 8005260:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8005262:	e0cd      	b.n	8005400 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8005264:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005266:	f003 0301 	and.w	r3, r3, #1
 800526a:	2b00      	cmp	r3, #0
 800526c:	f000 80c2 	beq.w	80053f4 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005276:	b2d2      	uxtb	r2, r2
 8005278:	4611      	mov	r1, r2
 800527a:	4618      	mov	r0, r3
 800527c:	f007 fce5 	bl	800cc4a <USB_ReadDevInEPInterrupt>
 8005280:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8005282:	693b      	ldr	r3, [r7, #16]
 8005284:	f003 0301 	and.w	r3, r3, #1
 8005288:	2b00      	cmp	r3, #0
 800528a:	d057      	beq.n	800533c <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800528c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800528e:	f003 030f 	and.w	r3, r3, #15
 8005292:	2201      	movs	r2, #1
 8005294:	fa02 f303 	lsl.w	r3, r2, r3
 8005298:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800529a:	69fb      	ldr	r3, [r7, #28]
 800529c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80052a0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	43db      	mvns	r3, r3
 80052a6:	69f9      	ldr	r1, [r7, #28]
 80052a8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80052ac:	4013      	ands	r3, r2
 80052ae:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80052b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052b2:	015a      	lsls	r2, r3, #5
 80052b4:	69fb      	ldr	r3, [r7, #28]
 80052b6:	4413      	add	r3, r2
 80052b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80052bc:	461a      	mov	r2, r3
 80052be:	2301      	movs	r3, #1
 80052c0:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	799b      	ldrb	r3, [r3, #6]
 80052c6:	2b01      	cmp	r3, #1
 80052c8:	d132      	bne.n	8005330 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80052ca:	6879      	ldr	r1, [r7, #4]
 80052cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80052ce:	4613      	mov	r3, r2
 80052d0:	00db      	lsls	r3, r3, #3
 80052d2:	4413      	add	r3, r2
 80052d4:	009b      	lsls	r3, r3, #2
 80052d6:	440b      	add	r3, r1
 80052d8:	3320      	adds	r3, #32
 80052da:	6819      	ldr	r1, [r3, #0]
 80052dc:	6878      	ldr	r0, [r7, #4]
 80052de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80052e0:	4613      	mov	r3, r2
 80052e2:	00db      	lsls	r3, r3, #3
 80052e4:	4413      	add	r3, r2
 80052e6:	009b      	lsls	r3, r3, #2
 80052e8:	4403      	add	r3, r0
 80052ea:	331c      	adds	r3, #28
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4419      	add	r1, r3
 80052f0:	6878      	ldr	r0, [r7, #4]
 80052f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80052f4:	4613      	mov	r3, r2
 80052f6:	00db      	lsls	r3, r3, #3
 80052f8:	4413      	add	r3, r2
 80052fa:	009b      	lsls	r3, r3, #2
 80052fc:	4403      	add	r3, r0
 80052fe:	3320      	adds	r3, #32
 8005300:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8005302:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005304:	2b00      	cmp	r3, #0
 8005306:	d113      	bne.n	8005330 <HAL_PCD_IRQHandler+0x3a2>
 8005308:	6879      	ldr	r1, [r7, #4]
 800530a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800530c:	4613      	mov	r3, r2
 800530e:	00db      	lsls	r3, r3, #3
 8005310:	4413      	add	r3, r2
 8005312:	009b      	lsls	r3, r3, #2
 8005314:	440b      	add	r3, r1
 8005316:	3324      	adds	r3, #36	@ 0x24
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d108      	bne.n	8005330 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6818      	ldr	r0, [r3, #0]
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005328:	461a      	mov	r2, r3
 800532a:	2101      	movs	r1, #1
 800532c:	f007 fcee 	bl	800cd0c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8005330:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005332:	b2db      	uxtb	r3, r3
 8005334:	4619      	mov	r1, r3
 8005336:	6878      	ldr	r0, [r7, #4]
 8005338:	f00a f82d 	bl	800f396 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800533c:	693b      	ldr	r3, [r7, #16]
 800533e:	f003 0308 	and.w	r3, r3, #8
 8005342:	2b00      	cmp	r3, #0
 8005344:	d008      	beq.n	8005358 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8005346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005348:	015a      	lsls	r2, r3, #5
 800534a:	69fb      	ldr	r3, [r7, #28]
 800534c:	4413      	add	r3, r2
 800534e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005352:	461a      	mov	r2, r3
 8005354:	2308      	movs	r3, #8
 8005356:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8005358:	693b      	ldr	r3, [r7, #16]
 800535a:	f003 0310 	and.w	r3, r3, #16
 800535e:	2b00      	cmp	r3, #0
 8005360:	d008      	beq.n	8005374 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8005362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005364:	015a      	lsls	r2, r3, #5
 8005366:	69fb      	ldr	r3, [r7, #28]
 8005368:	4413      	add	r3, r2
 800536a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800536e:	461a      	mov	r2, r3
 8005370:	2310      	movs	r3, #16
 8005372:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8005374:	693b      	ldr	r3, [r7, #16]
 8005376:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800537a:	2b00      	cmp	r3, #0
 800537c:	d008      	beq.n	8005390 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800537e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005380:	015a      	lsls	r2, r3, #5
 8005382:	69fb      	ldr	r3, [r7, #28]
 8005384:	4413      	add	r3, r2
 8005386:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800538a:	461a      	mov	r2, r3
 800538c:	2340      	movs	r3, #64	@ 0x40
 800538e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8005390:	693b      	ldr	r3, [r7, #16]
 8005392:	f003 0302 	and.w	r3, r3, #2
 8005396:	2b00      	cmp	r3, #0
 8005398:	d023      	beq.n	80053e2 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800539a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800539c:	6a38      	ldr	r0, [r7, #32]
 800539e:	f006 fcd1 	bl	800bd44 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80053a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80053a4:	4613      	mov	r3, r2
 80053a6:	00db      	lsls	r3, r3, #3
 80053a8:	4413      	add	r3, r2
 80053aa:	009b      	lsls	r3, r3, #2
 80053ac:	3310      	adds	r3, #16
 80053ae:	687a      	ldr	r2, [r7, #4]
 80053b0:	4413      	add	r3, r2
 80053b2:	3304      	adds	r3, #4
 80053b4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80053b6:	697b      	ldr	r3, [r7, #20]
 80053b8:	78db      	ldrb	r3, [r3, #3]
 80053ba:	2b01      	cmp	r3, #1
 80053bc:	d108      	bne.n	80053d0 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80053be:	697b      	ldr	r3, [r7, #20]
 80053c0:	2200      	movs	r2, #0
 80053c2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80053c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053c6:	b2db      	uxtb	r3, r3
 80053c8:	4619      	mov	r1, r3
 80053ca:	6878      	ldr	r0, [r7, #4]
 80053cc:	f00a f87a 	bl	800f4c4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80053d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053d2:	015a      	lsls	r2, r3, #5
 80053d4:	69fb      	ldr	r3, [r7, #28]
 80053d6:	4413      	add	r3, r2
 80053d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80053dc:	461a      	mov	r2, r3
 80053de:	2302      	movs	r3, #2
 80053e0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80053e2:	693b      	ldr	r3, [r7, #16]
 80053e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d003      	beq.n	80053f4 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80053ec:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80053ee:	6878      	ldr	r0, [r7, #4]
 80053f0:	f000 fce8 	bl	8005dc4 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80053f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053f6:	3301      	adds	r3, #1
 80053f8:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80053fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053fc:	085b      	lsrs	r3, r3, #1
 80053fe:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8005400:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005402:	2b00      	cmp	r3, #0
 8005404:	f47f af2e 	bne.w	8005264 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	4618      	mov	r0, r3
 800540e:	f007 fbb7 	bl	800cb80 <USB_ReadInterrupts>
 8005412:	4603      	mov	r3, r0
 8005414:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005418:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800541c:	d122      	bne.n	8005464 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800541e:	69fb      	ldr	r3, [r7, #28]
 8005420:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005424:	685b      	ldr	r3, [r3, #4]
 8005426:	69fa      	ldr	r2, [r7, #28]
 8005428:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800542c:	f023 0301 	bic.w	r3, r3, #1
 8005430:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8005438:	2b01      	cmp	r3, #1
 800543a:	d108      	bne.n	800544e <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2200      	movs	r2, #0
 8005440:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005444:	2100      	movs	r1, #0
 8005446:	6878      	ldr	r0, [r7, #4]
 8005448:	f000 fef2 	bl	8006230 <HAL_PCDEx_LPM_Callback>
 800544c:	e002      	b.n	8005454 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800544e:	6878      	ldr	r0, [r7, #4]
 8005450:	f00a f818 	bl	800f484 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	695a      	ldr	r2, [r3, #20]
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8005462:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4618      	mov	r0, r3
 800546a:	f007 fb89 	bl	800cb80 <USB_ReadInterrupts>
 800546e:	4603      	mov	r3, r0
 8005470:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005474:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005478:	d112      	bne.n	80054a0 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800547a:	69fb      	ldr	r3, [r7, #28]
 800547c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005480:	689b      	ldr	r3, [r3, #8]
 8005482:	f003 0301 	and.w	r3, r3, #1
 8005486:	2b01      	cmp	r3, #1
 8005488:	d102      	bne.n	8005490 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800548a:	6878      	ldr	r0, [r7, #4]
 800548c:	f009 ffd4 	bl	800f438 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	695a      	ldr	r2, [r3, #20]
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 800549e:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4618      	mov	r0, r3
 80054a6:	f007 fb6b 	bl	800cb80 <USB_ReadInterrupts>
 80054aa:	4603      	mov	r3, r0
 80054ac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80054b0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80054b4:	d121      	bne.n	80054fa <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	695a      	ldr	r2, [r3, #20]
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 80054c4:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d111      	bne.n	80054f4 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2201      	movs	r2, #1
 80054d4:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054de:	089b      	lsrs	r3, r3, #2
 80054e0:	f003 020f 	and.w	r2, r3, #15
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80054ea:	2101      	movs	r1, #1
 80054ec:	6878      	ldr	r0, [r7, #4]
 80054ee:	f000 fe9f 	bl	8006230 <HAL_PCDEx_LPM_Callback>
 80054f2:	e002      	b.n	80054fa <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80054f4:	6878      	ldr	r0, [r7, #4]
 80054f6:	f009 ff9f 	bl	800f438 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	4618      	mov	r0, r3
 8005500:	f007 fb3e 	bl	800cb80 <USB_ReadInterrupts>
 8005504:	4603      	mov	r3, r0
 8005506:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800550a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800550e:	f040 80b7 	bne.w	8005680 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005512:	69fb      	ldr	r3, [r7, #28]
 8005514:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005518:	685b      	ldr	r3, [r3, #4]
 800551a:	69fa      	ldr	r2, [r7, #28]
 800551c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005520:	f023 0301 	bic.w	r3, r3, #1
 8005524:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	2110      	movs	r1, #16
 800552c:	4618      	mov	r0, r3
 800552e:	f006 fc09 	bl	800bd44 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005532:	2300      	movs	r3, #0
 8005534:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005536:	e046      	b.n	80055c6 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8005538:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800553a:	015a      	lsls	r2, r3, #5
 800553c:	69fb      	ldr	r3, [r7, #28]
 800553e:	4413      	add	r3, r2
 8005540:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005544:	461a      	mov	r2, r3
 8005546:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800554a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800554c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800554e:	015a      	lsls	r2, r3, #5
 8005550:	69fb      	ldr	r3, [r7, #28]
 8005552:	4413      	add	r3, r2
 8005554:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800555c:	0151      	lsls	r1, r2, #5
 800555e:	69fa      	ldr	r2, [r7, #28]
 8005560:	440a      	add	r2, r1
 8005562:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005566:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800556a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800556c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800556e:	015a      	lsls	r2, r3, #5
 8005570:	69fb      	ldr	r3, [r7, #28]
 8005572:	4413      	add	r3, r2
 8005574:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005578:	461a      	mov	r2, r3
 800557a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800557e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005580:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005582:	015a      	lsls	r2, r3, #5
 8005584:	69fb      	ldr	r3, [r7, #28]
 8005586:	4413      	add	r3, r2
 8005588:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005590:	0151      	lsls	r1, r2, #5
 8005592:	69fa      	ldr	r2, [r7, #28]
 8005594:	440a      	add	r2, r1
 8005596:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800559a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800559e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80055a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055a2:	015a      	lsls	r2, r3, #5
 80055a4:	69fb      	ldr	r3, [r7, #28]
 80055a6:	4413      	add	r3, r2
 80055a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80055b0:	0151      	lsls	r1, r2, #5
 80055b2:	69fa      	ldr	r2, [r7, #28]
 80055b4:	440a      	add	r2, r1
 80055b6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80055ba:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80055be:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80055c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055c2:	3301      	adds	r3, #1
 80055c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	791b      	ldrb	r3, [r3, #4]
 80055ca:	461a      	mov	r2, r3
 80055cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d3b2      	bcc.n	8005538 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80055d2:	69fb      	ldr	r3, [r7, #28]
 80055d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80055d8:	69db      	ldr	r3, [r3, #28]
 80055da:	69fa      	ldr	r2, [r7, #28]
 80055dc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80055e0:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80055e4:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	7bdb      	ldrb	r3, [r3, #15]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d016      	beq.n	800561c <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80055ee:	69fb      	ldr	r3, [r7, #28]
 80055f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80055f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80055f8:	69fa      	ldr	r2, [r7, #28]
 80055fa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80055fe:	f043 030b 	orr.w	r3, r3, #11
 8005602:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8005606:	69fb      	ldr	r3, [r7, #28]
 8005608:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800560c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800560e:	69fa      	ldr	r2, [r7, #28]
 8005610:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005614:	f043 030b 	orr.w	r3, r3, #11
 8005618:	6453      	str	r3, [r2, #68]	@ 0x44
 800561a:	e015      	b.n	8005648 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800561c:	69fb      	ldr	r3, [r7, #28]
 800561e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005622:	695a      	ldr	r2, [r3, #20]
 8005624:	69fb      	ldr	r3, [r7, #28]
 8005626:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800562a:	4619      	mov	r1, r3
 800562c:	f242 032b 	movw	r3, #8235	@ 0x202b
 8005630:	4313      	orrs	r3, r2
 8005632:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005634:	69fb      	ldr	r3, [r7, #28]
 8005636:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800563a:	691b      	ldr	r3, [r3, #16]
 800563c:	69fa      	ldr	r2, [r7, #28]
 800563e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005642:	f043 030b 	orr.w	r3, r3, #11
 8005646:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005648:	69fb      	ldr	r3, [r7, #28]
 800564a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	69fa      	ldr	r2, [r7, #28]
 8005652:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005656:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800565a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6818      	ldr	r0, [r3, #0]
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800566a:	461a      	mov	r2, r3
 800566c:	f007 fb4e 	bl	800cd0c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	695a      	ldr	r2, [r3, #20]
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800567e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	4618      	mov	r0, r3
 8005686:	f007 fa7b 	bl	800cb80 <USB_ReadInterrupts>
 800568a:	4603      	mov	r3, r0
 800568c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005690:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005694:	d123      	bne.n	80056de <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	4618      	mov	r0, r3
 800569c:	f007 fb12 	bl	800ccc4 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	4618      	mov	r0, r3
 80056a6:	f006 fbc6 	bl	800be36 <USB_GetDevSpeed>
 80056aa:	4603      	mov	r3, r0
 80056ac:	461a      	mov	r2, r3
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681c      	ldr	r4, [r3, #0]
 80056b6:	f001 fdbb 	bl	8007230 <HAL_RCC_GetHCLKFreq>
 80056ba:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80056c0:	461a      	mov	r2, r3
 80056c2:	4620      	mov	r0, r4
 80056c4:	f006 f8d0 	bl	800b868 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80056c8:	6878      	ldr	r0, [r7, #4]
 80056ca:	f009 fe8c 	bl	800f3e6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	695a      	ldr	r2, [r3, #20]
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80056dc:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	4618      	mov	r0, r3
 80056e4:	f007 fa4c 	bl	800cb80 <USB_ReadInterrupts>
 80056e8:	4603      	mov	r3, r0
 80056ea:	f003 0308 	and.w	r3, r3, #8
 80056ee:	2b08      	cmp	r3, #8
 80056f0:	d10a      	bne.n	8005708 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80056f2:	6878      	ldr	r0, [r7, #4]
 80056f4:	f009 fe69 	bl	800f3ca <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	695a      	ldr	r2, [r3, #20]
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f002 0208 	and.w	r2, r2, #8
 8005706:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	4618      	mov	r0, r3
 800570e:	f007 fa37 	bl	800cb80 <USB_ReadInterrupts>
 8005712:	4603      	mov	r3, r0
 8005714:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005718:	2b80      	cmp	r3, #128	@ 0x80
 800571a:	d123      	bne.n	8005764 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800571c:	6a3b      	ldr	r3, [r7, #32]
 800571e:	699b      	ldr	r3, [r3, #24]
 8005720:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005724:	6a3b      	ldr	r3, [r7, #32]
 8005726:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005728:	2301      	movs	r3, #1
 800572a:	627b      	str	r3, [r7, #36]	@ 0x24
 800572c:	e014      	b.n	8005758 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800572e:	6879      	ldr	r1, [r7, #4]
 8005730:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005732:	4613      	mov	r3, r2
 8005734:	00db      	lsls	r3, r3, #3
 8005736:	4413      	add	r3, r2
 8005738:	009b      	lsls	r3, r3, #2
 800573a:	440b      	add	r3, r1
 800573c:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8005740:	781b      	ldrb	r3, [r3, #0]
 8005742:	2b01      	cmp	r3, #1
 8005744:	d105      	bne.n	8005752 <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8005746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005748:	b2db      	uxtb	r3, r3
 800574a:	4619      	mov	r1, r3
 800574c:	6878      	ldr	r0, [r7, #4]
 800574e:	f000 fb08 	bl	8005d62 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005752:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005754:	3301      	adds	r3, #1
 8005756:	627b      	str	r3, [r7, #36]	@ 0x24
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	791b      	ldrb	r3, [r3, #4]
 800575c:	461a      	mov	r2, r3
 800575e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005760:	4293      	cmp	r3, r2
 8005762:	d3e4      	bcc.n	800572e <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4618      	mov	r0, r3
 800576a:	f007 fa09 	bl	800cb80 <USB_ReadInterrupts>
 800576e:	4603      	mov	r3, r0
 8005770:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005774:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005778:	d13c      	bne.n	80057f4 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800577a:	2301      	movs	r3, #1
 800577c:	627b      	str	r3, [r7, #36]	@ 0x24
 800577e:	e02b      	b.n	80057d8 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8005780:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005782:	015a      	lsls	r2, r3, #5
 8005784:	69fb      	ldr	r3, [r7, #28]
 8005786:	4413      	add	r3, r2
 8005788:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005790:	6879      	ldr	r1, [r7, #4]
 8005792:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005794:	4613      	mov	r3, r2
 8005796:	00db      	lsls	r3, r3, #3
 8005798:	4413      	add	r3, r2
 800579a:	009b      	lsls	r3, r3, #2
 800579c:	440b      	add	r3, r1
 800579e:	3318      	adds	r3, #24
 80057a0:	781b      	ldrb	r3, [r3, #0]
 80057a2:	2b01      	cmp	r3, #1
 80057a4:	d115      	bne.n	80057d2 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80057a6:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	da12      	bge.n	80057d2 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80057ac:	6879      	ldr	r1, [r7, #4]
 80057ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80057b0:	4613      	mov	r3, r2
 80057b2:	00db      	lsls	r3, r3, #3
 80057b4:	4413      	add	r3, r2
 80057b6:	009b      	lsls	r3, r3, #2
 80057b8:	440b      	add	r3, r1
 80057ba:	3317      	adds	r3, #23
 80057bc:	2201      	movs	r2, #1
 80057be:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80057c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057c2:	b2db      	uxtb	r3, r3
 80057c4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80057c8:	b2db      	uxtb	r3, r3
 80057ca:	4619      	mov	r1, r3
 80057cc:	6878      	ldr	r0, [r7, #4]
 80057ce:	f000 fac8 	bl	8005d62 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80057d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057d4:	3301      	adds	r3, #1
 80057d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	791b      	ldrb	r3, [r3, #4]
 80057dc:	461a      	mov	r2, r3
 80057de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d3cd      	bcc.n	8005780 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	695a      	ldr	r2, [r3, #20]
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80057f2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	4618      	mov	r0, r3
 80057fa:	f007 f9c1 	bl	800cb80 <USB_ReadInterrupts>
 80057fe:	4603      	mov	r3, r0
 8005800:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005804:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005808:	d156      	bne.n	80058b8 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800580a:	2301      	movs	r3, #1
 800580c:	627b      	str	r3, [r7, #36]	@ 0x24
 800580e:	e045      	b.n	800589c <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8005810:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005812:	015a      	lsls	r2, r3, #5
 8005814:	69fb      	ldr	r3, [r7, #28]
 8005816:	4413      	add	r3, r2
 8005818:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005820:	6879      	ldr	r1, [r7, #4]
 8005822:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005824:	4613      	mov	r3, r2
 8005826:	00db      	lsls	r3, r3, #3
 8005828:	4413      	add	r3, r2
 800582a:	009b      	lsls	r3, r3, #2
 800582c:	440b      	add	r3, r1
 800582e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8005832:	781b      	ldrb	r3, [r3, #0]
 8005834:	2b01      	cmp	r3, #1
 8005836:	d12e      	bne.n	8005896 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005838:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800583a:	2b00      	cmp	r3, #0
 800583c:	da2b      	bge.n	8005896 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800583e:	69bb      	ldr	r3, [r7, #24]
 8005840:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 800584a:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800584e:	429a      	cmp	r2, r3
 8005850:	d121      	bne.n	8005896 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8005852:	6879      	ldr	r1, [r7, #4]
 8005854:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005856:	4613      	mov	r3, r2
 8005858:	00db      	lsls	r3, r3, #3
 800585a:	4413      	add	r3, r2
 800585c:	009b      	lsls	r3, r3, #2
 800585e:	440b      	add	r3, r1
 8005860:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8005864:	2201      	movs	r2, #1
 8005866:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8005868:	6a3b      	ldr	r3, [r7, #32]
 800586a:	699b      	ldr	r3, [r3, #24]
 800586c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005870:	6a3b      	ldr	r3, [r7, #32]
 8005872:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8005874:	6a3b      	ldr	r3, [r7, #32]
 8005876:	695b      	ldr	r3, [r3, #20]
 8005878:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800587c:	2b00      	cmp	r3, #0
 800587e:	d10a      	bne.n	8005896 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8005880:	69fb      	ldr	r3, [r7, #28]
 8005882:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005886:	685b      	ldr	r3, [r3, #4]
 8005888:	69fa      	ldr	r2, [r7, #28]
 800588a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800588e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005892:	6053      	str	r3, [r2, #4]
            break;
 8005894:	e008      	b.n	80058a8 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005898:	3301      	adds	r3, #1
 800589a:	627b      	str	r3, [r7, #36]	@ 0x24
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	791b      	ldrb	r3, [r3, #4]
 80058a0:	461a      	mov	r2, r3
 80058a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d3b3      	bcc.n	8005810 <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	695a      	ldr	r2, [r3, #20]
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80058b6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4618      	mov	r0, r3
 80058be:	f007 f95f 	bl	800cb80 <USB_ReadInterrupts>
 80058c2:	4603      	mov	r3, r0
 80058c4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80058c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80058cc:	d10a      	bne.n	80058e4 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80058ce:	6878      	ldr	r0, [r7, #4]
 80058d0:	f009 fe0a 	bl	800f4e8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	695a      	ldr	r2, [r3, #20]
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80058e2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	4618      	mov	r0, r3
 80058ea:	f007 f949 	bl	800cb80 <USB_ReadInterrupts>
 80058ee:	4603      	mov	r3, r0
 80058f0:	f003 0304 	and.w	r3, r3, #4
 80058f4:	2b04      	cmp	r3, #4
 80058f6:	d115      	bne.n	8005924 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	685b      	ldr	r3, [r3, #4]
 80058fe:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005900:	69bb      	ldr	r3, [r7, #24]
 8005902:	f003 0304 	and.w	r3, r3, #4
 8005906:	2b00      	cmp	r3, #0
 8005908:	d002      	beq.n	8005910 <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800590a:	6878      	ldr	r0, [r7, #4]
 800590c:	f009 fdfa 	bl	800f504 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	6859      	ldr	r1, [r3, #4]
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	69ba      	ldr	r2, [r7, #24]
 800591c:	430a      	orrs	r2, r1
 800591e:	605a      	str	r2, [r3, #4]
 8005920:	e000      	b.n	8005924 <HAL_PCD_IRQHandler+0x996>
      return;
 8005922:	bf00      	nop
    }
  }
}
 8005924:	3734      	adds	r7, #52	@ 0x34
 8005926:	46bd      	mov	sp, r7
 8005928:	bd90      	pop	{r4, r7, pc}

0800592a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800592a:	b580      	push	{r7, lr}
 800592c:	b082      	sub	sp, #8
 800592e:	af00      	add	r7, sp, #0
 8005930:	6078      	str	r0, [r7, #4]
 8005932:	460b      	mov	r3, r1
 8005934:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800593c:	2b01      	cmp	r3, #1
 800593e:	d101      	bne.n	8005944 <HAL_PCD_SetAddress+0x1a>
 8005940:	2302      	movs	r3, #2
 8005942:	e012      	b.n	800596a <HAL_PCD_SetAddress+0x40>
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2201      	movs	r2, #1
 8005948:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	78fa      	ldrb	r2, [r7, #3]
 8005950:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	78fa      	ldrb	r2, [r7, #3]
 8005958:	4611      	mov	r1, r2
 800595a:	4618      	mov	r0, r3
 800595c:	f007 f8a8 	bl	800cab0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2200      	movs	r2, #0
 8005964:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005968:	2300      	movs	r3, #0
}
 800596a:	4618      	mov	r0, r3
 800596c:	3708      	adds	r7, #8
 800596e:	46bd      	mov	sp, r7
 8005970:	bd80      	pop	{r7, pc}

08005972 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005972:	b580      	push	{r7, lr}
 8005974:	b084      	sub	sp, #16
 8005976:	af00      	add	r7, sp, #0
 8005978:	6078      	str	r0, [r7, #4]
 800597a:	4608      	mov	r0, r1
 800597c:	4611      	mov	r1, r2
 800597e:	461a      	mov	r2, r3
 8005980:	4603      	mov	r3, r0
 8005982:	70fb      	strb	r3, [r7, #3]
 8005984:	460b      	mov	r3, r1
 8005986:	803b      	strh	r3, [r7, #0]
 8005988:	4613      	mov	r3, r2
 800598a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800598c:	2300      	movs	r3, #0
 800598e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005990:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005994:	2b00      	cmp	r3, #0
 8005996:	da0f      	bge.n	80059b8 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005998:	78fb      	ldrb	r3, [r7, #3]
 800599a:	f003 020f 	and.w	r2, r3, #15
 800599e:	4613      	mov	r3, r2
 80059a0:	00db      	lsls	r3, r3, #3
 80059a2:	4413      	add	r3, r2
 80059a4:	009b      	lsls	r3, r3, #2
 80059a6:	3310      	adds	r3, #16
 80059a8:	687a      	ldr	r2, [r7, #4]
 80059aa:	4413      	add	r3, r2
 80059ac:	3304      	adds	r3, #4
 80059ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	2201      	movs	r2, #1
 80059b4:	705a      	strb	r2, [r3, #1]
 80059b6:	e00f      	b.n	80059d8 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80059b8:	78fb      	ldrb	r3, [r7, #3]
 80059ba:	f003 020f 	and.w	r2, r3, #15
 80059be:	4613      	mov	r3, r2
 80059c0:	00db      	lsls	r3, r3, #3
 80059c2:	4413      	add	r3, r2
 80059c4:	009b      	lsls	r3, r3, #2
 80059c6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80059ca:	687a      	ldr	r2, [r7, #4]
 80059cc:	4413      	add	r3, r2
 80059ce:	3304      	adds	r3, #4
 80059d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	2200      	movs	r2, #0
 80059d6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80059d8:	78fb      	ldrb	r3, [r7, #3]
 80059da:	f003 030f 	and.w	r3, r3, #15
 80059de:	b2da      	uxtb	r2, r3
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80059e4:	883a      	ldrh	r2, [r7, #0]
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	78ba      	ldrb	r2, [r7, #2]
 80059ee:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	785b      	ldrb	r3, [r3, #1]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d004      	beq.n	8005a02 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	781b      	ldrb	r3, [r3, #0]
 80059fc:	461a      	mov	r2, r3
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005a02:	78bb      	ldrb	r3, [r7, #2]
 8005a04:	2b02      	cmp	r3, #2
 8005a06:	d102      	bne.n	8005a0e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005a14:	2b01      	cmp	r3, #1
 8005a16:	d101      	bne.n	8005a1c <HAL_PCD_EP_Open+0xaa>
 8005a18:	2302      	movs	r3, #2
 8005a1a:	e00e      	b.n	8005a3a <HAL_PCD_EP_Open+0xc8>
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2201      	movs	r2, #1
 8005a20:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	68f9      	ldr	r1, [r7, #12]
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	f006 fa28 	bl	800be80 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2200      	movs	r2, #0
 8005a34:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8005a38:	7afb      	ldrb	r3, [r7, #11]
}
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	3710      	adds	r7, #16
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	bd80      	pop	{r7, pc}

08005a42 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005a42:	b580      	push	{r7, lr}
 8005a44:	b084      	sub	sp, #16
 8005a46:	af00      	add	r7, sp, #0
 8005a48:	6078      	str	r0, [r7, #4]
 8005a4a:	460b      	mov	r3, r1
 8005a4c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005a4e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	da0f      	bge.n	8005a76 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005a56:	78fb      	ldrb	r3, [r7, #3]
 8005a58:	f003 020f 	and.w	r2, r3, #15
 8005a5c:	4613      	mov	r3, r2
 8005a5e:	00db      	lsls	r3, r3, #3
 8005a60:	4413      	add	r3, r2
 8005a62:	009b      	lsls	r3, r3, #2
 8005a64:	3310      	adds	r3, #16
 8005a66:	687a      	ldr	r2, [r7, #4]
 8005a68:	4413      	add	r3, r2
 8005a6a:	3304      	adds	r3, #4
 8005a6c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	2201      	movs	r2, #1
 8005a72:	705a      	strb	r2, [r3, #1]
 8005a74:	e00f      	b.n	8005a96 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005a76:	78fb      	ldrb	r3, [r7, #3]
 8005a78:	f003 020f 	and.w	r2, r3, #15
 8005a7c:	4613      	mov	r3, r2
 8005a7e:	00db      	lsls	r3, r3, #3
 8005a80:	4413      	add	r3, r2
 8005a82:	009b      	lsls	r3, r3, #2
 8005a84:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005a88:	687a      	ldr	r2, [r7, #4]
 8005a8a:	4413      	add	r3, r2
 8005a8c:	3304      	adds	r3, #4
 8005a8e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	2200      	movs	r2, #0
 8005a94:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8005a96:	78fb      	ldrb	r3, [r7, #3]
 8005a98:	f003 030f 	and.w	r3, r3, #15
 8005a9c:	b2da      	uxtb	r2, r3
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005aa8:	2b01      	cmp	r3, #1
 8005aaa:	d101      	bne.n	8005ab0 <HAL_PCD_EP_Close+0x6e>
 8005aac:	2302      	movs	r3, #2
 8005aae:	e00e      	b.n	8005ace <HAL_PCD_EP_Close+0x8c>
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2201      	movs	r2, #1
 8005ab4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	68f9      	ldr	r1, [r7, #12]
 8005abe:	4618      	mov	r0, r3
 8005ac0:	f006 fa66 	bl	800bf90 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8005acc:	2300      	movs	r3, #0
}
 8005ace:	4618      	mov	r0, r3
 8005ad0:	3710      	adds	r7, #16
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	bd80      	pop	{r7, pc}

08005ad6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005ad6:	b580      	push	{r7, lr}
 8005ad8:	b086      	sub	sp, #24
 8005ada:	af00      	add	r7, sp, #0
 8005adc:	60f8      	str	r0, [r7, #12]
 8005ade:	607a      	str	r2, [r7, #4]
 8005ae0:	603b      	str	r3, [r7, #0]
 8005ae2:	460b      	mov	r3, r1
 8005ae4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005ae6:	7afb      	ldrb	r3, [r7, #11]
 8005ae8:	f003 020f 	and.w	r2, r3, #15
 8005aec:	4613      	mov	r3, r2
 8005aee:	00db      	lsls	r3, r3, #3
 8005af0:	4413      	add	r3, r2
 8005af2:	009b      	lsls	r3, r3, #2
 8005af4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005af8:	68fa      	ldr	r2, [r7, #12]
 8005afa:	4413      	add	r3, r2
 8005afc:	3304      	adds	r3, #4
 8005afe:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005b00:	697b      	ldr	r3, [r7, #20]
 8005b02:	687a      	ldr	r2, [r7, #4]
 8005b04:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005b06:	697b      	ldr	r3, [r7, #20]
 8005b08:	683a      	ldr	r2, [r7, #0]
 8005b0a:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8005b0c:	697b      	ldr	r3, [r7, #20]
 8005b0e:	2200      	movs	r2, #0
 8005b10:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8005b12:	697b      	ldr	r3, [r7, #20]
 8005b14:	2200      	movs	r2, #0
 8005b16:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005b18:	7afb      	ldrb	r3, [r7, #11]
 8005b1a:	f003 030f 	and.w	r3, r3, #15
 8005b1e:	b2da      	uxtb	r2, r3
 8005b20:	697b      	ldr	r3, [r7, #20]
 8005b22:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	799b      	ldrb	r3, [r3, #6]
 8005b28:	2b01      	cmp	r3, #1
 8005b2a:	d102      	bne.n	8005b32 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005b2c:	687a      	ldr	r2, [r7, #4]
 8005b2e:	697b      	ldr	r3, [r7, #20]
 8005b30:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	6818      	ldr	r0, [r3, #0]
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	799b      	ldrb	r3, [r3, #6]
 8005b3a:	461a      	mov	r2, r3
 8005b3c:	6979      	ldr	r1, [r7, #20]
 8005b3e:	f006 fb03 	bl	800c148 <USB_EPStartXfer>

  return HAL_OK;
 8005b42:	2300      	movs	r3, #0
}
 8005b44:	4618      	mov	r0, r3
 8005b46:	3718      	adds	r7, #24
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	bd80      	pop	{r7, pc}

08005b4c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8005b4c:	b480      	push	{r7}
 8005b4e:	b083      	sub	sp, #12
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
 8005b54:	460b      	mov	r3, r1
 8005b56:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005b58:	78fb      	ldrb	r3, [r7, #3]
 8005b5a:	f003 020f 	and.w	r2, r3, #15
 8005b5e:	6879      	ldr	r1, [r7, #4]
 8005b60:	4613      	mov	r3, r2
 8005b62:	00db      	lsls	r3, r3, #3
 8005b64:	4413      	add	r3, r2
 8005b66:	009b      	lsls	r3, r3, #2
 8005b68:	440b      	add	r3, r1
 8005b6a:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8005b6e:	681b      	ldr	r3, [r3, #0]
}
 8005b70:	4618      	mov	r0, r3
 8005b72:	370c      	adds	r7, #12
 8005b74:	46bd      	mov	sp, r7
 8005b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7a:	4770      	bx	lr

08005b7c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b086      	sub	sp, #24
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	60f8      	str	r0, [r7, #12]
 8005b84:	607a      	str	r2, [r7, #4]
 8005b86:	603b      	str	r3, [r7, #0]
 8005b88:	460b      	mov	r3, r1
 8005b8a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005b8c:	7afb      	ldrb	r3, [r7, #11]
 8005b8e:	f003 020f 	and.w	r2, r3, #15
 8005b92:	4613      	mov	r3, r2
 8005b94:	00db      	lsls	r3, r3, #3
 8005b96:	4413      	add	r3, r2
 8005b98:	009b      	lsls	r3, r3, #2
 8005b9a:	3310      	adds	r3, #16
 8005b9c:	68fa      	ldr	r2, [r7, #12]
 8005b9e:	4413      	add	r3, r2
 8005ba0:	3304      	adds	r3, #4
 8005ba2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005ba4:	697b      	ldr	r3, [r7, #20]
 8005ba6:	687a      	ldr	r2, [r7, #4]
 8005ba8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005baa:	697b      	ldr	r3, [r7, #20]
 8005bac:	683a      	ldr	r2, [r7, #0]
 8005bae:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8005bb0:	697b      	ldr	r3, [r7, #20]
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8005bb6:	697b      	ldr	r3, [r7, #20]
 8005bb8:	2201      	movs	r2, #1
 8005bba:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005bbc:	7afb      	ldrb	r3, [r7, #11]
 8005bbe:	f003 030f 	and.w	r3, r3, #15
 8005bc2:	b2da      	uxtb	r2, r3
 8005bc4:	697b      	ldr	r3, [r7, #20]
 8005bc6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	799b      	ldrb	r3, [r3, #6]
 8005bcc:	2b01      	cmp	r3, #1
 8005bce:	d102      	bne.n	8005bd6 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005bd0:	687a      	ldr	r2, [r7, #4]
 8005bd2:	697b      	ldr	r3, [r7, #20]
 8005bd4:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	6818      	ldr	r0, [r3, #0]
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	799b      	ldrb	r3, [r3, #6]
 8005bde:	461a      	mov	r2, r3
 8005be0:	6979      	ldr	r1, [r7, #20]
 8005be2:	f006 fab1 	bl	800c148 <USB_EPStartXfer>

  return HAL_OK;
 8005be6:	2300      	movs	r3, #0
}
 8005be8:	4618      	mov	r0, r3
 8005bea:	3718      	adds	r7, #24
 8005bec:	46bd      	mov	sp, r7
 8005bee:	bd80      	pop	{r7, pc}

08005bf0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b084      	sub	sp, #16
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
 8005bf8:	460b      	mov	r3, r1
 8005bfa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005bfc:	78fb      	ldrb	r3, [r7, #3]
 8005bfe:	f003 030f 	and.w	r3, r3, #15
 8005c02:	687a      	ldr	r2, [r7, #4]
 8005c04:	7912      	ldrb	r2, [r2, #4]
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d901      	bls.n	8005c0e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005c0a:	2301      	movs	r3, #1
 8005c0c:	e04f      	b.n	8005cae <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005c0e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	da0f      	bge.n	8005c36 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005c16:	78fb      	ldrb	r3, [r7, #3]
 8005c18:	f003 020f 	and.w	r2, r3, #15
 8005c1c:	4613      	mov	r3, r2
 8005c1e:	00db      	lsls	r3, r3, #3
 8005c20:	4413      	add	r3, r2
 8005c22:	009b      	lsls	r3, r3, #2
 8005c24:	3310      	adds	r3, #16
 8005c26:	687a      	ldr	r2, [r7, #4]
 8005c28:	4413      	add	r3, r2
 8005c2a:	3304      	adds	r3, #4
 8005c2c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	2201      	movs	r2, #1
 8005c32:	705a      	strb	r2, [r3, #1]
 8005c34:	e00d      	b.n	8005c52 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005c36:	78fa      	ldrb	r2, [r7, #3]
 8005c38:	4613      	mov	r3, r2
 8005c3a:	00db      	lsls	r3, r3, #3
 8005c3c:	4413      	add	r3, r2
 8005c3e:	009b      	lsls	r3, r3, #2
 8005c40:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005c44:	687a      	ldr	r2, [r7, #4]
 8005c46:	4413      	add	r3, r2
 8005c48:	3304      	adds	r3, #4
 8005c4a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	2200      	movs	r2, #0
 8005c50:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	2201      	movs	r2, #1
 8005c56:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005c58:	78fb      	ldrb	r3, [r7, #3]
 8005c5a:	f003 030f 	and.w	r3, r3, #15
 8005c5e:	b2da      	uxtb	r2, r3
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005c6a:	2b01      	cmp	r3, #1
 8005c6c:	d101      	bne.n	8005c72 <HAL_PCD_EP_SetStall+0x82>
 8005c6e:	2302      	movs	r3, #2
 8005c70:	e01d      	b.n	8005cae <HAL_PCD_EP_SetStall+0xbe>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2201      	movs	r2, #1
 8005c76:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	68f9      	ldr	r1, [r7, #12]
 8005c80:	4618      	mov	r0, r3
 8005c82:	f006 fe41 	bl	800c908 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005c86:	78fb      	ldrb	r3, [r7, #3]
 8005c88:	f003 030f 	and.w	r3, r3, #15
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d109      	bne.n	8005ca4 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6818      	ldr	r0, [r3, #0]
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	7999      	ldrb	r1, [r3, #6]
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005c9e:	461a      	mov	r2, r3
 8005ca0:	f007 f834 	bl	800cd0c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005cac:	2300      	movs	r3, #0
}
 8005cae:	4618      	mov	r0, r3
 8005cb0:	3710      	adds	r7, #16
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	bd80      	pop	{r7, pc}

08005cb6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005cb6:	b580      	push	{r7, lr}
 8005cb8:	b084      	sub	sp, #16
 8005cba:	af00      	add	r7, sp, #0
 8005cbc:	6078      	str	r0, [r7, #4]
 8005cbe:	460b      	mov	r3, r1
 8005cc0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005cc2:	78fb      	ldrb	r3, [r7, #3]
 8005cc4:	f003 030f 	and.w	r3, r3, #15
 8005cc8:	687a      	ldr	r2, [r7, #4]
 8005cca:	7912      	ldrb	r2, [r2, #4]
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d901      	bls.n	8005cd4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005cd0:	2301      	movs	r3, #1
 8005cd2:	e042      	b.n	8005d5a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005cd4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	da0f      	bge.n	8005cfc <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005cdc:	78fb      	ldrb	r3, [r7, #3]
 8005cde:	f003 020f 	and.w	r2, r3, #15
 8005ce2:	4613      	mov	r3, r2
 8005ce4:	00db      	lsls	r3, r3, #3
 8005ce6:	4413      	add	r3, r2
 8005ce8:	009b      	lsls	r3, r3, #2
 8005cea:	3310      	adds	r3, #16
 8005cec:	687a      	ldr	r2, [r7, #4]
 8005cee:	4413      	add	r3, r2
 8005cf0:	3304      	adds	r3, #4
 8005cf2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	2201      	movs	r2, #1
 8005cf8:	705a      	strb	r2, [r3, #1]
 8005cfa:	e00f      	b.n	8005d1c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005cfc:	78fb      	ldrb	r3, [r7, #3]
 8005cfe:	f003 020f 	and.w	r2, r3, #15
 8005d02:	4613      	mov	r3, r2
 8005d04:	00db      	lsls	r3, r3, #3
 8005d06:	4413      	add	r3, r2
 8005d08:	009b      	lsls	r3, r3, #2
 8005d0a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005d0e:	687a      	ldr	r2, [r7, #4]
 8005d10:	4413      	add	r3, r2
 8005d12:	3304      	adds	r3, #4
 8005d14:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	2200      	movs	r2, #0
 8005d1a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	2200      	movs	r2, #0
 8005d20:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005d22:	78fb      	ldrb	r3, [r7, #3]
 8005d24:	f003 030f 	and.w	r3, r3, #15
 8005d28:	b2da      	uxtb	r2, r3
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005d34:	2b01      	cmp	r3, #1
 8005d36:	d101      	bne.n	8005d3c <HAL_PCD_EP_ClrStall+0x86>
 8005d38:	2302      	movs	r3, #2
 8005d3a:	e00e      	b.n	8005d5a <HAL_PCD_EP_ClrStall+0xa4>
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2201      	movs	r2, #1
 8005d40:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	68f9      	ldr	r1, [r7, #12]
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	f006 fe4a 	bl	800c9e4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2200      	movs	r2, #0
 8005d54:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005d58:	2300      	movs	r3, #0
}
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	3710      	adds	r7, #16
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	bd80      	pop	{r7, pc}

08005d62 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005d62:	b580      	push	{r7, lr}
 8005d64:	b084      	sub	sp, #16
 8005d66:	af00      	add	r7, sp, #0
 8005d68:	6078      	str	r0, [r7, #4]
 8005d6a:	460b      	mov	r3, r1
 8005d6c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8005d6e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	da0c      	bge.n	8005d90 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005d76:	78fb      	ldrb	r3, [r7, #3]
 8005d78:	f003 020f 	and.w	r2, r3, #15
 8005d7c:	4613      	mov	r3, r2
 8005d7e:	00db      	lsls	r3, r3, #3
 8005d80:	4413      	add	r3, r2
 8005d82:	009b      	lsls	r3, r3, #2
 8005d84:	3310      	adds	r3, #16
 8005d86:	687a      	ldr	r2, [r7, #4]
 8005d88:	4413      	add	r3, r2
 8005d8a:	3304      	adds	r3, #4
 8005d8c:	60fb      	str	r3, [r7, #12]
 8005d8e:	e00c      	b.n	8005daa <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005d90:	78fb      	ldrb	r3, [r7, #3]
 8005d92:	f003 020f 	and.w	r2, r3, #15
 8005d96:	4613      	mov	r3, r2
 8005d98:	00db      	lsls	r3, r3, #3
 8005d9a:	4413      	add	r3, r2
 8005d9c:	009b      	lsls	r3, r3, #2
 8005d9e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005da2:	687a      	ldr	r2, [r7, #4]
 8005da4:	4413      	add	r3, r2
 8005da6:	3304      	adds	r3, #4
 8005da8:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	68f9      	ldr	r1, [r7, #12]
 8005db0:	4618      	mov	r0, r3
 8005db2:	f006 fc69 	bl	800c688 <USB_EPStopXfer>
 8005db6:	4603      	mov	r3, r0
 8005db8:	72fb      	strb	r3, [r7, #11]

  return ret;
 8005dba:	7afb      	ldrb	r3, [r7, #11]
}
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	3710      	adds	r7, #16
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	bd80      	pop	{r7, pc}

08005dc4 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b08a      	sub	sp, #40	@ 0x28
 8005dc8:	af02      	add	r7, sp, #8
 8005dca:	6078      	str	r0, [r7, #4]
 8005dcc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dd4:	697b      	ldr	r3, [r7, #20]
 8005dd6:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005dd8:	683a      	ldr	r2, [r7, #0]
 8005dda:	4613      	mov	r3, r2
 8005ddc:	00db      	lsls	r3, r3, #3
 8005dde:	4413      	add	r3, r2
 8005de0:	009b      	lsls	r3, r3, #2
 8005de2:	3310      	adds	r3, #16
 8005de4:	687a      	ldr	r2, [r7, #4]
 8005de6:	4413      	add	r3, r2
 8005de8:	3304      	adds	r3, #4
 8005dea:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	695a      	ldr	r2, [r3, #20]
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	691b      	ldr	r3, [r3, #16]
 8005df4:	429a      	cmp	r2, r3
 8005df6:	d901      	bls.n	8005dfc <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005df8:	2301      	movs	r3, #1
 8005dfa:	e06b      	b.n	8005ed4 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	691a      	ldr	r2, [r3, #16]
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	695b      	ldr	r3, [r3, #20]
 8005e04:	1ad3      	subs	r3, r2, r3
 8005e06:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	689b      	ldr	r3, [r3, #8]
 8005e0c:	69fa      	ldr	r2, [r7, #28]
 8005e0e:	429a      	cmp	r2, r3
 8005e10:	d902      	bls.n	8005e18 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	689b      	ldr	r3, [r3, #8]
 8005e16:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005e18:	69fb      	ldr	r3, [r7, #28]
 8005e1a:	3303      	adds	r3, #3
 8005e1c:	089b      	lsrs	r3, r3, #2
 8005e1e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005e20:	e02a      	b.n	8005e78 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	691a      	ldr	r2, [r3, #16]
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	695b      	ldr	r3, [r3, #20]
 8005e2a:	1ad3      	subs	r3, r2, r3
 8005e2c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	689b      	ldr	r3, [r3, #8]
 8005e32:	69fa      	ldr	r2, [r7, #28]
 8005e34:	429a      	cmp	r2, r3
 8005e36:	d902      	bls.n	8005e3e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	689b      	ldr	r3, [r3, #8]
 8005e3c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005e3e:	69fb      	ldr	r3, [r7, #28]
 8005e40:	3303      	adds	r3, #3
 8005e42:	089b      	lsrs	r3, r3, #2
 8005e44:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	68d9      	ldr	r1, [r3, #12]
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	b2da      	uxtb	r2, r3
 8005e4e:	69fb      	ldr	r3, [r7, #28]
 8005e50:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005e56:	9300      	str	r3, [sp, #0]
 8005e58:	4603      	mov	r3, r0
 8005e5a:	6978      	ldr	r0, [r7, #20]
 8005e5c:	f006 fcbe 	bl	800c7dc <USB_WritePacket>

    ep->xfer_buff  += len;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	68da      	ldr	r2, [r3, #12]
 8005e64:	69fb      	ldr	r3, [r7, #28]
 8005e66:	441a      	add	r2, r3
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	695a      	ldr	r2, [r3, #20]
 8005e70:	69fb      	ldr	r3, [r7, #28]
 8005e72:	441a      	add	r2, r3
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	015a      	lsls	r2, r3, #5
 8005e7c:	693b      	ldr	r3, [r7, #16]
 8005e7e:	4413      	add	r3, r2
 8005e80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e84:	699b      	ldr	r3, [r3, #24]
 8005e86:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005e88:	69ba      	ldr	r2, [r7, #24]
 8005e8a:	429a      	cmp	r2, r3
 8005e8c:	d809      	bhi.n	8005ea2 <PCD_WriteEmptyTxFifo+0xde>
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	695a      	ldr	r2, [r3, #20]
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005e96:	429a      	cmp	r2, r3
 8005e98:	d203      	bcs.n	8005ea2 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	691b      	ldr	r3, [r3, #16]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d1bf      	bne.n	8005e22 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	691a      	ldr	r2, [r3, #16]
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	695b      	ldr	r3, [r3, #20]
 8005eaa:	429a      	cmp	r2, r3
 8005eac:	d811      	bhi.n	8005ed2 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	f003 030f 	and.w	r3, r3, #15
 8005eb4:	2201      	movs	r2, #1
 8005eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8005eba:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005ebc:	693b      	ldr	r3, [r7, #16]
 8005ebe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ec2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005ec4:	68bb      	ldr	r3, [r7, #8]
 8005ec6:	43db      	mvns	r3, r3
 8005ec8:	6939      	ldr	r1, [r7, #16]
 8005eca:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005ece:	4013      	ands	r3, r2
 8005ed0:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8005ed2:	2300      	movs	r3, #0
}
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	3720      	adds	r7, #32
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	bd80      	pop	{r7, pc}

08005edc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b088      	sub	sp, #32
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
 8005ee4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005eec:	69fb      	ldr	r3, [r7, #28]
 8005eee:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005ef0:	69fb      	ldr	r3, [r7, #28]
 8005ef2:	333c      	adds	r3, #60	@ 0x3c
 8005ef4:	3304      	adds	r3, #4
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	015a      	lsls	r2, r3, #5
 8005efe:	69bb      	ldr	r3, [r7, #24]
 8005f00:	4413      	add	r3, r2
 8005f02:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f06:	689b      	ldr	r3, [r3, #8]
 8005f08:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	799b      	ldrb	r3, [r3, #6]
 8005f0e:	2b01      	cmp	r3, #1
 8005f10:	d17b      	bne.n	800600a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8005f12:	693b      	ldr	r3, [r7, #16]
 8005f14:	f003 0308 	and.w	r3, r3, #8
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d015      	beq.n	8005f48 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005f1c:	697b      	ldr	r3, [r7, #20]
 8005f1e:	4a61      	ldr	r2, [pc, #388]	@ (80060a4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005f20:	4293      	cmp	r3, r2
 8005f22:	f240 80b9 	bls.w	8006098 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005f26:	693b      	ldr	r3, [r7, #16]
 8005f28:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	f000 80b3 	beq.w	8006098 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	015a      	lsls	r2, r3, #5
 8005f36:	69bb      	ldr	r3, [r7, #24]
 8005f38:	4413      	add	r3, r2
 8005f3a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f3e:	461a      	mov	r2, r3
 8005f40:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005f44:	6093      	str	r3, [r2, #8]
 8005f46:	e0a7      	b.n	8006098 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005f48:	693b      	ldr	r3, [r7, #16]
 8005f4a:	f003 0320 	and.w	r3, r3, #32
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d009      	beq.n	8005f66 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	015a      	lsls	r2, r3, #5
 8005f56:	69bb      	ldr	r3, [r7, #24]
 8005f58:	4413      	add	r3, r2
 8005f5a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f5e:	461a      	mov	r2, r3
 8005f60:	2320      	movs	r3, #32
 8005f62:	6093      	str	r3, [r2, #8]
 8005f64:	e098      	b.n	8006098 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005f66:	693b      	ldr	r3, [r7, #16]
 8005f68:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	f040 8093 	bne.w	8006098 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005f72:	697b      	ldr	r3, [r7, #20]
 8005f74:	4a4b      	ldr	r2, [pc, #300]	@ (80060a4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d90f      	bls.n	8005f9a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005f7a:	693b      	ldr	r3, [r7, #16]
 8005f7c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d00a      	beq.n	8005f9a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	015a      	lsls	r2, r3, #5
 8005f88:	69bb      	ldr	r3, [r7, #24]
 8005f8a:	4413      	add	r3, r2
 8005f8c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f90:	461a      	mov	r2, r3
 8005f92:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005f96:	6093      	str	r3, [r2, #8]
 8005f98:	e07e      	b.n	8006098 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8005f9a:	683a      	ldr	r2, [r7, #0]
 8005f9c:	4613      	mov	r3, r2
 8005f9e:	00db      	lsls	r3, r3, #3
 8005fa0:	4413      	add	r3, r2
 8005fa2:	009b      	lsls	r3, r3, #2
 8005fa4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005fa8:	687a      	ldr	r2, [r7, #4]
 8005faa:	4413      	add	r3, r2
 8005fac:	3304      	adds	r3, #4
 8005fae:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	6a1a      	ldr	r2, [r3, #32]
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	0159      	lsls	r1, r3, #5
 8005fb8:	69bb      	ldr	r3, [r7, #24]
 8005fba:	440b      	add	r3, r1
 8005fbc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005fc0:	691b      	ldr	r3, [r3, #16]
 8005fc2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005fc6:	1ad2      	subs	r2, r2, r3
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d114      	bne.n	8005ffc <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	691b      	ldr	r3, [r3, #16]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d109      	bne.n	8005fee <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6818      	ldr	r0, [r3, #0]
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005fe4:	461a      	mov	r2, r3
 8005fe6:	2101      	movs	r1, #1
 8005fe8:	f006 fe90 	bl	800cd0c <USB_EP0_OutStart>
 8005fec:	e006      	b.n	8005ffc <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	68da      	ldr	r2, [r3, #12]
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	695b      	ldr	r3, [r3, #20]
 8005ff6:	441a      	add	r2, r3
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	b2db      	uxtb	r3, r3
 8006000:	4619      	mov	r1, r3
 8006002:	6878      	ldr	r0, [r7, #4]
 8006004:	f009 f9ac 	bl	800f360 <HAL_PCD_DataOutStageCallback>
 8006008:	e046      	b.n	8006098 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800600a:	697b      	ldr	r3, [r7, #20]
 800600c:	4a26      	ldr	r2, [pc, #152]	@ (80060a8 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d124      	bne.n	800605c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8006012:	693b      	ldr	r3, [r7, #16]
 8006014:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006018:	2b00      	cmp	r3, #0
 800601a:	d00a      	beq.n	8006032 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	015a      	lsls	r2, r3, #5
 8006020:	69bb      	ldr	r3, [r7, #24]
 8006022:	4413      	add	r3, r2
 8006024:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006028:	461a      	mov	r2, r3
 800602a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800602e:	6093      	str	r3, [r2, #8]
 8006030:	e032      	b.n	8006098 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006032:	693b      	ldr	r3, [r7, #16]
 8006034:	f003 0320 	and.w	r3, r3, #32
 8006038:	2b00      	cmp	r3, #0
 800603a:	d008      	beq.n	800604e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	015a      	lsls	r2, r3, #5
 8006040:	69bb      	ldr	r3, [r7, #24]
 8006042:	4413      	add	r3, r2
 8006044:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006048:	461a      	mov	r2, r3
 800604a:	2320      	movs	r3, #32
 800604c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	b2db      	uxtb	r3, r3
 8006052:	4619      	mov	r1, r3
 8006054:	6878      	ldr	r0, [r7, #4]
 8006056:	f009 f983 	bl	800f360 <HAL_PCD_DataOutStageCallback>
 800605a:	e01d      	b.n	8006098 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d114      	bne.n	800608c <PCD_EP_OutXfrComplete_int+0x1b0>
 8006062:	6879      	ldr	r1, [r7, #4]
 8006064:	683a      	ldr	r2, [r7, #0]
 8006066:	4613      	mov	r3, r2
 8006068:	00db      	lsls	r3, r3, #3
 800606a:	4413      	add	r3, r2
 800606c:	009b      	lsls	r3, r3, #2
 800606e:	440b      	add	r3, r1
 8006070:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d108      	bne.n	800608c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6818      	ldr	r0, [r3, #0]
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006084:	461a      	mov	r2, r3
 8006086:	2100      	movs	r1, #0
 8006088:	f006 fe40 	bl	800cd0c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	b2db      	uxtb	r3, r3
 8006090:	4619      	mov	r1, r3
 8006092:	6878      	ldr	r0, [r7, #4]
 8006094:	f009 f964 	bl	800f360 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8006098:	2300      	movs	r3, #0
}
 800609a:	4618      	mov	r0, r3
 800609c:	3720      	adds	r7, #32
 800609e:	46bd      	mov	sp, r7
 80060a0:	bd80      	pop	{r7, pc}
 80060a2:	bf00      	nop
 80060a4:	4f54300a 	.word	0x4f54300a
 80060a8:	4f54310a 	.word	0x4f54310a

080060ac <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b086      	sub	sp, #24
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
 80060b4:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060bc:	697b      	ldr	r3, [r7, #20]
 80060be:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80060c0:	697b      	ldr	r3, [r7, #20]
 80060c2:	333c      	adds	r3, #60	@ 0x3c
 80060c4:	3304      	adds	r3, #4
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	015a      	lsls	r2, r3, #5
 80060ce:	693b      	ldr	r3, [r7, #16]
 80060d0:	4413      	add	r3, r2
 80060d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060d6:	689b      	ldr	r3, [r3, #8]
 80060d8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	4a15      	ldr	r2, [pc, #84]	@ (8006134 <PCD_EP_OutSetupPacket_int+0x88>)
 80060de:	4293      	cmp	r3, r2
 80060e0:	d90e      	bls.n	8006100 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80060e2:	68bb      	ldr	r3, [r7, #8]
 80060e4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d009      	beq.n	8006100 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	015a      	lsls	r2, r3, #5
 80060f0:	693b      	ldr	r3, [r7, #16]
 80060f2:	4413      	add	r3, r2
 80060f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060f8:	461a      	mov	r2, r3
 80060fa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80060fe:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8006100:	6878      	ldr	r0, [r7, #4]
 8006102:	f009 f91b 	bl	800f33c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	4a0a      	ldr	r2, [pc, #40]	@ (8006134 <PCD_EP_OutSetupPacket_int+0x88>)
 800610a:	4293      	cmp	r3, r2
 800610c:	d90c      	bls.n	8006128 <PCD_EP_OutSetupPacket_int+0x7c>
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	799b      	ldrb	r3, [r3, #6]
 8006112:	2b01      	cmp	r3, #1
 8006114:	d108      	bne.n	8006128 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6818      	ldr	r0, [r3, #0]
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006120:	461a      	mov	r2, r3
 8006122:	2101      	movs	r1, #1
 8006124:	f006 fdf2 	bl	800cd0c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8006128:	2300      	movs	r3, #0
}
 800612a:	4618      	mov	r0, r3
 800612c:	3718      	adds	r7, #24
 800612e:	46bd      	mov	sp, r7
 8006130:	bd80      	pop	{r7, pc}
 8006132:	bf00      	nop
 8006134:	4f54300a 	.word	0x4f54300a

08006138 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8006138:	b480      	push	{r7}
 800613a:	b085      	sub	sp, #20
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
 8006140:	460b      	mov	r3, r1
 8006142:	70fb      	strb	r3, [r7, #3]
 8006144:	4613      	mov	r3, r2
 8006146:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800614e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8006150:	78fb      	ldrb	r3, [r7, #3]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d107      	bne.n	8006166 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8006156:	883b      	ldrh	r3, [r7, #0]
 8006158:	0419      	lsls	r1, r3, #16
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	68ba      	ldr	r2, [r7, #8]
 8006160:	430a      	orrs	r2, r1
 8006162:	629a      	str	r2, [r3, #40]	@ 0x28
 8006164:	e028      	b.n	80061b8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800616c:	0c1b      	lsrs	r3, r3, #16
 800616e:	68ba      	ldr	r2, [r7, #8]
 8006170:	4413      	add	r3, r2
 8006172:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006174:	2300      	movs	r3, #0
 8006176:	73fb      	strb	r3, [r7, #15]
 8006178:	e00d      	b.n	8006196 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681a      	ldr	r2, [r3, #0]
 800617e:	7bfb      	ldrb	r3, [r7, #15]
 8006180:	3340      	adds	r3, #64	@ 0x40
 8006182:	009b      	lsls	r3, r3, #2
 8006184:	4413      	add	r3, r2
 8006186:	685b      	ldr	r3, [r3, #4]
 8006188:	0c1b      	lsrs	r3, r3, #16
 800618a:	68ba      	ldr	r2, [r7, #8]
 800618c:	4413      	add	r3, r2
 800618e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006190:	7bfb      	ldrb	r3, [r7, #15]
 8006192:	3301      	adds	r3, #1
 8006194:	73fb      	strb	r3, [r7, #15]
 8006196:	7bfa      	ldrb	r2, [r7, #15]
 8006198:	78fb      	ldrb	r3, [r7, #3]
 800619a:	3b01      	subs	r3, #1
 800619c:	429a      	cmp	r2, r3
 800619e:	d3ec      	bcc.n	800617a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80061a0:	883b      	ldrh	r3, [r7, #0]
 80061a2:	0418      	lsls	r0, r3, #16
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	6819      	ldr	r1, [r3, #0]
 80061a8:	78fb      	ldrb	r3, [r7, #3]
 80061aa:	3b01      	subs	r3, #1
 80061ac:	68ba      	ldr	r2, [r7, #8]
 80061ae:	4302      	orrs	r2, r0
 80061b0:	3340      	adds	r3, #64	@ 0x40
 80061b2:	009b      	lsls	r3, r3, #2
 80061b4:	440b      	add	r3, r1
 80061b6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80061b8:	2300      	movs	r3, #0
}
 80061ba:	4618      	mov	r0, r3
 80061bc:	3714      	adds	r7, #20
 80061be:	46bd      	mov	sp, r7
 80061c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c4:	4770      	bx	lr

080061c6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80061c6:	b480      	push	{r7}
 80061c8:	b083      	sub	sp, #12
 80061ca:	af00      	add	r7, sp, #0
 80061cc:	6078      	str	r0, [r7, #4]
 80061ce:	460b      	mov	r3, r1
 80061d0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	887a      	ldrh	r2, [r7, #2]
 80061d8:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80061da:	2300      	movs	r3, #0
}
 80061dc:	4618      	mov	r0, r3
 80061de:	370c      	adds	r7, #12
 80061e0:	46bd      	mov	sp, r7
 80061e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e6:	4770      	bx	lr

080061e8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80061e8:	b480      	push	{r7}
 80061ea:	b085      	sub	sp, #20
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2201      	movs	r2, #1
 80061fa:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	2200      	movs	r2, #0
 8006202:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	699b      	ldr	r3, [r3, #24]
 800620a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006216:	4b05      	ldr	r3, [pc, #20]	@ (800622c <HAL_PCDEx_ActivateLPM+0x44>)
 8006218:	4313      	orrs	r3, r2
 800621a:	68fa      	ldr	r2, [r7, #12]
 800621c:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800621e:	2300      	movs	r3, #0
}
 8006220:	4618      	mov	r0, r3
 8006222:	3714      	adds	r7, #20
 8006224:	46bd      	mov	sp, r7
 8006226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622a:	4770      	bx	lr
 800622c:	10000003 	.word	0x10000003

08006230 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8006230:	b480      	push	{r7}
 8006232:	b083      	sub	sp, #12
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
 8006238:	460b      	mov	r3, r1
 800623a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800623c:	bf00      	nop
 800623e:	370c      	adds	r7, #12
 8006240:	46bd      	mov	sp, r7
 8006242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006246:	4770      	bx	lr

08006248 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b084      	sub	sp, #16
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8006250:	4b29      	ldr	r3, [pc, #164]	@ (80062f8 <HAL_PWREx_ConfigSupply+0xb0>)
 8006252:	68db      	ldr	r3, [r3, #12]
 8006254:	f003 0307 	and.w	r3, r3, #7
 8006258:	2b06      	cmp	r3, #6
 800625a:	d00a      	beq.n	8006272 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800625c:	4b26      	ldr	r3, [pc, #152]	@ (80062f8 <HAL_PWREx_ConfigSupply+0xb0>)
 800625e:	68db      	ldr	r3, [r3, #12]
 8006260:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006264:	687a      	ldr	r2, [r7, #4]
 8006266:	429a      	cmp	r2, r3
 8006268:	d001      	beq.n	800626e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800626a:	2301      	movs	r3, #1
 800626c:	e040      	b.n	80062f0 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800626e:	2300      	movs	r3, #0
 8006270:	e03e      	b.n	80062f0 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8006272:	4b21      	ldr	r3, [pc, #132]	@ (80062f8 <HAL_PWREx_ConfigSupply+0xb0>)
 8006274:	68db      	ldr	r3, [r3, #12]
 8006276:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 800627a:	491f      	ldr	r1, [pc, #124]	@ (80062f8 <HAL_PWREx_ConfigSupply+0xb0>)
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	4313      	orrs	r3, r2
 8006280:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8006282:	f7fc f889 	bl	8002398 <HAL_GetTick>
 8006286:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006288:	e009      	b.n	800629e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800628a:	f7fc f885 	bl	8002398 <HAL_GetTick>
 800628e:	4602      	mov	r2, r0
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	1ad3      	subs	r3, r2, r3
 8006294:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006298:	d901      	bls.n	800629e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800629a:	2301      	movs	r3, #1
 800629c:	e028      	b.n	80062f0 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800629e:	4b16      	ldr	r3, [pc, #88]	@ (80062f8 <HAL_PWREx_ConfigSupply+0xb0>)
 80062a0:	685b      	ldr	r3, [r3, #4]
 80062a2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80062a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80062aa:	d1ee      	bne.n	800628a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2b1e      	cmp	r3, #30
 80062b0:	d008      	beq.n	80062c4 <HAL_PWREx_ConfigSupply+0x7c>
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	2b2e      	cmp	r3, #46	@ 0x2e
 80062b6:	d005      	beq.n	80062c4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2b1d      	cmp	r3, #29
 80062bc:	d002      	beq.n	80062c4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2b2d      	cmp	r3, #45	@ 0x2d
 80062c2:	d114      	bne.n	80062ee <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80062c4:	f7fc f868 	bl	8002398 <HAL_GetTick>
 80062c8:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80062ca:	e009      	b.n	80062e0 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80062cc:	f7fc f864 	bl	8002398 <HAL_GetTick>
 80062d0:	4602      	mov	r2, r0
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	1ad3      	subs	r3, r2, r3
 80062d6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80062da:	d901      	bls.n	80062e0 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80062dc:	2301      	movs	r3, #1
 80062de:	e007      	b.n	80062f0 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80062e0:	4b05      	ldr	r3, [pc, #20]	@ (80062f8 <HAL_PWREx_ConfigSupply+0xb0>)
 80062e2:	68db      	ldr	r3, [r3, #12]
 80062e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80062e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80062ec:	d1ee      	bne.n	80062cc <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80062ee:	2300      	movs	r3, #0
}
 80062f0:	4618      	mov	r0, r3
 80062f2:	3710      	adds	r7, #16
 80062f4:	46bd      	mov	sp, r7
 80062f6:	bd80      	pop	{r7, pc}
 80062f8:	58024800 	.word	0x58024800

080062fc <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80062fc:	b480      	push	{r7}
 80062fe:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8006300:	4b05      	ldr	r3, [pc, #20]	@ (8006318 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8006302:	68db      	ldr	r3, [r3, #12]
 8006304:	4a04      	ldr	r2, [pc, #16]	@ (8006318 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8006306:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800630a:	60d3      	str	r3, [r2, #12]
}
 800630c:	bf00      	nop
 800630e:	46bd      	mov	sp, r7
 8006310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006314:	4770      	bx	lr
 8006316:	bf00      	nop
 8006318:	58024800 	.word	0x58024800

0800631c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800631c:	b580      	push	{r7, lr}
 800631e:	b08c      	sub	sp, #48	@ 0x30
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d102      	bne.n	8006330 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800632a:	2301      	movs	r3, #1
 800632c:	f000 bc48 	b.w	8006bc0 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f003 0301 	and.w	r3, r3, #1
 8006338:	2b00      	cmp	r3, #0
 800633a:	f000 8088 	beq.w	800644e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800633e:	4b99      	ldr	r3, [pc, #612]	@ (80065a4 <HAL_RCC_OscConfig+0x288>)
 8006340:	691b      	ldr	r3, [r3, #16]
 8006342:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006346:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006348:	4b96      	ldr	r3, [pc, #600]	@ (80065a4 <HAL_RCC_OscConfig+0x288>)
 800634a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800634c:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800634e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006350:	2b10      	cmp	r3, #16
 8006352:	d007      	beq.n	8006364 <HAL_RCC_OscConfig+0x48>
 8006354:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006356:	2b18      	cmp	r3, #24
 8006358:	d111      	bne.n	800637e <HAL_RCC_OscConfig+0x62>
 800635a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800635c:	f003 0303 	and.w	r3, r3, #3
 8006360:	2b02      	cmp	r3, #2
 8006362:	d10c      	bne.n	800637e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006364:	4b8f      	ldr	r3, [pc, #572]	@ (80065a4 <HAL_RCC_OscConfig+0x288>)
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800636c:	2b00      	cmp	r3, #0
 800636e:	d06d      	beq.n	800644c <HAL_RCC_OscConfig+0x130>
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	685b      	ldr	r3, [r3, #4]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d169      	bne.n	800644c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8006378:	2301      	movs	r3, #1
 800637a:	f000 bc21 	b.w	8006bc0 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	685b      	ldr	r3, [r3, #4]
 8006382:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006386:	d106      	bne.n	8006396 <HAL_RCC_OscConfig+0x7a>
 8006388:	4b86      	ldr	r3, [pc, #536]	@ (80065a4 <HAL_RCC_OscConfig+0x288>)
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	4a85      	ldr	r2, [pc, #532]	@ (80065a4 <HAL_RCC_OscConfig+0x288>)
 800638e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006392:	6013      	str	r3, [r2, #0]
 8006394:	e02e      	b.n	80063f4 <HAL_RCC_OscConfig+0xd8>
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	685b      	ldr	r3, [r3, #4]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d10c      	bne.n	80063b8 <HAL_RCC_OscConfig+0x9c>
 800639e:	4b81      	ldr	r3, [pc, #516]	@ (80065a4 <HAL_RCC_OscConfig+0x288>)
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	4a80      	ldr	r2, [pc, #512]	@ (80065a4 <HAL_RCC_OscConfig+0x288>)
 80063a4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80063a8:	6013      	str	r3, [r2, #0]
 80063aa:	4b7e      	ldr	r3, [pc, #504]	@ (80065a4 <HAL_RCC_OscConfig+0x288>)
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	4a7d      	ldr	r2, [pc, #500]	@ (80065a4 <HAL_RCC_OscConfig+0x288>)
 80063b0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80063b4:	6013      	str	r3, [r2, #0]
 80063b6:	e01d      	b.n	80063f4 <HAL_RCC_OscConfig+0xd8>
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	685b      	ldr	r3, [r3, #4]
 80063bc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80063c0:	d10c      	bne.n	80063dc <HAL_RCC_OscConfig+0xc0>
 80063c2:	4b78      	ldr	r3, [pc, #480]	@ (80065a4 <HAL_RCC_OscConfig+0x288>)
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	4a77      	ldr	r2, [pc, #476]	@ (80065a4 <HAL_RCC_OscConfig+0x288>)
 80063c8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80063cc:	6013      	str	r3, [r2, #0]
 80063ce:	4b75      	ldr	r3, [pc, #468]	@ (80065a4 <HAL_RCC_OscConfig+0x288>)
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	4a74      	ldr	r2, [pc, #464]	@ (80065a4 <HAL_RCC_OscConfig+0x288>)
 80063d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80063d8:	6013      	str	r3, [r2, #0]
 80063da:	e00b      	b.n	80063f4 <HAL_RCC_OscConfig+0xd8>
 80063dc:	4b71      	ldr	r3, [pc, #452]	@ (80065a4 <HAL_RCC_OscConfig+0x288>)
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	4a70      	ldr	r2, [pc, #448]	@ (80065a4 <HAL_RCC_OscConfig+0x288>)
 80063e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80063e6:	6013      	str	r3, [r2, #0]
 80063e8:	4b6e      	ldr	r3, [pc, #440]	@ (80065a4 <HAL_RCC_OscConfig+0x288>)
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	4a6d      	ldr	r2, [pc, #436]	@ (80065a4 <HAL_RCC_OscConfig+0x288>)
 80063ee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80063f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	685b      	ldr	r3, [r3, #4]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d013      	beq.n	8006424 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063fc:	f7fb ffcc 	bl	8002398 <HAL_GetTick>
 8006400:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006402:	e008      	b.n	8006416 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006404:	f7fb ffc8 	bl	8002398 <HAL_GetTick>
 8006408:	4602      	mov	r2, r0
 800640a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800640c:	1ad3      	subs	r3, r2, r3
 800640e:	2b64      	cmp	r3, #100	@ 0x64
 8006410:	d901      	bls.n	8006416 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006412:	2303      	movs	r3, #3
 8006414:	e3d4      	b.n	8006bc0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006416:	4b63      	ldr	r3, [pc, #396]	@ (80065a4 <HAL_RCC_OscConfig+0x288>)
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800641e:	2b00      	cmp	r3, #0
 8006420:	d0f0      	beq.n	8006404 <HAL_RCC_OscConfig+0xe8>
 8006422:	e014      	b.n	800644e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006424:	f7fb ffb8 	bl	8002398 <HAL_GetTick>
 8006428:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800642a:	e008      	b.n	800643e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800642c:	f7fb ffb4 	bl	8002398 <HAL_GetTick>
 8006430:	4602      	mov	r2, r0
 8006432:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006434:	1ad3      	subs	r3, r2, r3
 8006436:	2b64      	cmp	r3, #100	@ 0x64
 8006438:	d901      	bls.n	800643e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800643a:	2303      	movs	r3, #3
 800643c:	e3c0      	b.n	8006bc0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800643e:	4b59      	ldr	r3, [pc, #356]	@ (80065a4 <HAL_RCC_OscConfig+0x288>)
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006446:	2b00      	cmp	r3, #0
 8006448:	d1f0      	bne.n	800642c <HAL_RCC_OscConfig+0x110>
 800644a:	e000      	b.n	800644e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800644c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f003 0302 	and.w	r3, r3, #2
 8006456:	2b00      	cmp	r3, #0
 8006458:	f000 80ca 	beq.w	80065f0 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800645c:	4b51      	ldr	r3, [pc, #324]	@ (80065a4 <HAL_RCC_OscConfig+0x288>)
 800645e:	691b      	ldr	r3, [r3, #16]
 8006460:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006464:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006466:	4b4f      	ldr	r3, [pc, #316]	@ (80065a4 <HAL_RCC_OscConfig+0x288>)
 8006468:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800646a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800646c:	6a3b      	ldr	r3, [r7, #32]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d007      	beq.n	8006482 <HAL_RCC_OscConfig+0x166>
 8006472:	6a3b      	ldr	r3, [r7, #32]
 8006474:	2b18      	cmp	r3, #24
 8006476:	d156      	bne.n	8006526 <HAL_RCC_OscConfig+0x20a>
 8006478:	69fb      	ldr	r3, [r7, #28]
 800647a:	f003 0303 	and.w	r3, r3, #3
 800647e:	2b00      	cmp	r3, #0
 8006480:	d151      	bne.n	8006526 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006482:	4b48      	ldr	r3, [pc, #288]	@ (80065a4 <HAL_RCC_OscConfig+0x288>)
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f003 0304 	and.w	r3, r3, #4
 800648a:	2b00      	cmp	r3, #0
 800648c:	d005      	beq.n	800649a <HAL_RCC_OscConfig+0x17e>
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	68db      	ldr	r3, [r3, #12]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d101      	bne.n	800649a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8006496:	2301      	movs	r3, #1
 8006498:	e392      	b.n	8006bc0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800649a:	4b42      	ldr	r3, [pc, #264]	@ (80065a4 <HAL_RCC_OscConfig+0x288>)
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f023 0219 	bic.w	r2, r3, #25
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	68db      	ldr	r3, [r3, #12]
 80064a6:	493f      	ldr	r1, [pc, #252]	@ (80065a4 <HAL_RCC_OscConfig+0x288>)
 80064a8:	4313      	orrs	r3, r2
 80064aa:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064ac:	f7fb ff74 	bl	8002398 <HAL_GetTick>
 80064b0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80064b2:	e008      	b.n	80064c6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80064b4:	f7fb ff70 	bl	8002398 <HAL_GetTick>
 80064b8:	4602      	mov	r2, r0
 80064ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064bc:	1ad3      	subs	r3, r2, r3
 80064be:	2b02      	cmp	r3, #2
 80064c0:	d901      	bls.n	80064c6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80064c2:	2303      	movs	r3, #3
 80064c4:	e37c      	b.n	8006bc0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80064c6:	4b37      	ldr	r3, [pc, #220]	@ (80065a4 <HAL_RCC_OscConfig+0x288>)
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f003 0304 	and.w	r3, r3, #4
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d0f0      	beq.n	80064b4 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80064d2:	f7fb ff91 	bl	80023f8 <HAL_GetREVID>
 80064d6:	4603      	mov	r3, r0
 80064d8:	f241 0203 	movw	r2, #4099	@ 0x1003
 80064dc:	4293      	cmp	r3, r2
 80064de:	d817      	bhi.n	8006510 <HAL_RCC_OscConfig+0x1f4>
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	691b      	ldr	r3, [r3, #16]
 80064e4:	2b40      	cmp	r3, #64	@ 0x40
 80064e6:	d108      	bne.n	80064fa <HAL_RCC_OscConfig+0x1de>
 80064e8:	4b2e      	ldr	r3, [pc, #184]	@ (80065a4 <HAL_RCC_OscConfig+0x288>)
 80064ea:	685b      	ldr	r3, [r3, #4]
 80064ec:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80064f0:	4a2c      	ldr	r2, [pc, #176]	@ (80065a4 <HAL_RCC_OscConfig+0x288>)
 80064f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80064f6:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80064f8:	e07a      	b.n	80065f0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80064fa:	4b2a      	ldr	r3, [pc, #168]	@ (80065a4 <HAL_RCC_OscConfig+0x288>)
 80064fc:	685b      	ldr	r3, [r3, #4]
 80064fe:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	691b      	ldr	r3, [r3, #16]
 8006506:	031b      	lsls	r3, r3, #12
 8006508:	4926      	ldr	r1, [pc, #152]	@ (80065a4 <HAL_RCC_OscConfig+0x288>)
 800650a:	4313      	orrs	r3, r2
 800650c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800650e:	e06f      	b.n	80065f0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006510:	4b24      	ldr	r3, [pc, #144]	@ (80065a4 <HAL_RCC_OscConfig+0x288>)
 8006512:	685b      	ldr	r3, [r3, #4]
 8006514:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	691b      	ldr	r3, [r3, #16]
 800651c:	061b      	lsls	r3, r3, #24
 800651e:	4921      	ldr	r1, [pc, #132]	@ (80065a4 <HAL_RCC_OscConfig+0x288>)
 8006520:	4313      	orrs	r3, r2
 8006522:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006524:	e064      	b.n	80065f0 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	68db      	ldr	r3, [r3, #12]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d047      	beq.n	80065be <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800652e:	4b1d      	ldr	r3, [pc, #116]	@ (80065a4 <HAL_RCC_OscConfig+0x288>)
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f023 0219 	bic.w	r2, r3, #25
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	68db      	ldr	r3, [r3, #12]
 800653a:	491a      	ldr	r1, [pc, #104]	@ (80065a4 <HAL_RCC_OscConfig+0x288>)
 800653c:	4313      	orrs	r3, r2
 800653e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006540:	f7fb ff2a 	bl	8002398 <HAL_GetTick>
 8006544:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006546:	e008      	b.n	800655a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006548:	f7fb ff26 	bl	8002398 <HAL_GetTick>
 800654c:	4602      	mov	r2, r0
 800654e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006550:	1ad3      	subs	r3, r2, r3
 8006552:	2b02      	cmp	r3, #2
 8006554:	d901      	bls.n	800655a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8006556:	2303      	movs	r3, #3
 8006558:	e332      	b.n	8006bc0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800655a:	4b12      	ldr	r3, [pc, #72]	@ (80065a4 <HAL_RCC_OscConfig+0x288>)
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f003 0304 	and.w	r3, r3, #4
 8006562:	2b00      	cmp	r3, #0
 8006564:	d0f0      	beq.n	8006548 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006566:	f7fb ff47 	bl	80023f8 <HAL_GetREVID>
 800656a:	4603      	mov	r3, r0
 800656c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006570:	4293      	cmp	r3, r2
 8006572:	d819      	bhi.n	80065a8 <HAL_RCC_OscConfig+0x28c>
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	691b      	ldr	r3, [r3, #16]
 8006578:	2b40      	cmp	r3, #64	@ 0x40
 800657a:	d108      	bne.n	800658e <HAL_RCC_OscConfig+0x272>
 800657c:	4b09      	ldr	r3, [pc, #36]	@ (80065a4 <HAL_RCC_OscConfig+0x288>)
 800657e:	685b      	ldr	r3, [r3, #4]
 8006580:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8006584:	4a07      	ldr	r2, [pc, #28]	@ (80065a4 <HAL_RCC_OscConfig+0x288>)
 8006586:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800658a:	6053      	str	r3, [r2, #4]
 800658c:	e030      	b.n	80065f0 <HAL_RCC_OscConfig+0x2d4>
 800658e:	4b05      	ldr	r3, [pc, #20]	@ (80065a4 <HAL_RCC_OscConfig+0x288>)
 8006590:	685b      	ldr	r3, [r3, #4]
 8006592:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	691b      	ldr	r3, [r3, #16]
 800659a:	031b      	lsls	r3, r3, #12
 800659c:	4901      	ldr	r1, [pc, #4]	@ (80065a4 <HAL_RCC_OscConfig+0x288>)
 800659e:	4313      	orrs	r3, r2
 80065a0:	604b      	str	r3, [r1, #4]
 80065a2:	e025      	b.n	80065f0 <HAL_RCC_OscConfig+0x2d4>
 80065a4:	58024400 	.word	0x58024400
 80065a8:	4b9a      	ldr	r3, [pc, #616]	@ (8006814 <HAL_RCC_OscConfig+0x4f8>)
 80065aa:	685b      	ldr	r3, [r3, #4]
 80065ac:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	691b      	ldr	r3, [r3, #16]
 80065b4:	061b      	lsls	r3, r3, #24
 80065b6:	4997      	ldr	r1, [pc, #604]	@ (8006814 <HAL_RCC_OscConfig+0x4f8>)
 80065b8:	4313      	orrs	r3, r2
 80065ba:	604b      	str	r3, [r1, #4]
 80065bc:	e018      	b.n	80065f0 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80065be:	4b95      	ldr	r3, [pc, #596]	@ (8006814 <HAL_RCC_OscConfig+0x4f8>)
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	4a94      	ldr	r2, [pc, #592]	@ (8006814 <HAL_RCC_OscConfig+0x4f8>)
 80065c4:	f023 0301 	bic.w	r3, r3, #1
 80065c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065ca:	f7fb fee5 	bl	8002398 <HAL_GetTick>
 80065ce:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80065d0:	e008      	b.n	80065e4 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80065d2:	f7fb fee1 	bl	8002398 <HAL_GetTick>
 80065d6:	4602      	mov	r2, r0
 80065d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065da:	1ad3      	subs	r3, r2, r3
 80065dc:	2b02      	cmp	r3, #2
 80065de:	d901      	bls.n	80065e4 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80065e0:	2303      	movs	r3, #3
 80065e2:	e2ed      	b.n	8006bc0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80065e4:	4b8b      	ldr	r3, [pc, #556]	@ (8006814 <HAL_RCC_OscConfig+0x4f8>)
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f003 0304 	and.w	r3, r3, #4
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d1f0      	bne.n	80065d2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f003 0310 	and.w	r3, r3, #16
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	f000 80a9 	beq.w	8006750 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80065fe:	4b85      	ldr	r3, [pc, #532]	@ (8006814 <HAL_RCC_OscConfig+0x4f8>)
 8006600:	691b      	ldr	r3, [r3, #16]
 8006602:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006606:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006608:	4b82      	ldr	r3, [pc, #520]	@ (8006814 <HAL_RCC_OscConfig+0x4f8>)
 800660a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800660c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800660e:	69bb      	ldr	r3, [r7, #24]
 8006610:	2b08      	cmp	r3, #8
 8006612:	d007      	beq.n	8006624 <HAL_RCC_OscConfig+0x308>
 8006614:	69bb      	ldr	r3, [r7, #24]
 8006616:	2b18      	cmp	r3, #24
 8006618:	d13a      	bne.n	8006690 <HAL_RCC_OscConfig+0x374>
 800661a:	697b      	ldr	r3, [r7, #20]
 800661c:	f003 0303 	and.w	r3, r3, #3
 8006620:	2b01      	cmp	r3, #1
 8006622:	d135      	bne.n	8006690 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006624:	4b7b      	ldr	r3, [pc, #492]	@ (8006814 <HAL_RCC_OscConfig+0x4f8>)
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800662c:	2b00      	cmp	r3, #0
 800662e:	d005      	beq.n	800663c <HAL_RCC_OscConfig+0x320>
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	69db      	ldr	r3, [r3, #28]
 8006634:	2b80      	cmp	r3, #128	@ 0x80
 8006636:	d001      	beq.n	800663c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8006638:	2301      	movs	r3, #1
 800663a:	e2c1      	b.n	8006bc0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800663c:	f7fb fedc 	bl	80023f8 <HAL_GetREVID>
 8006640:	4603      	mov	r3, r0
 8006642:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006646:	4293      	cmp	r3, r2
 8006648:	d817      	bhi.n	800667a <HAL_RCC_OscConfig+0x35e>
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6a1b      	ldr	r3, [r3, #32]
 800664e:	2b20      	cmp	r3, #32
 8006650:	d108      	bne.n	8006664 <HAL_RCC_OscConfig+0x348>
 8006652:	4b70      	ldr	r3, [pc, #448]	@ (8006814 <HAL_RCC_OscConfig+0x4f8>)
 8006654:	685b      	ldr	r3, [r3, #4]
 8006656:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800665a:	4a6e      	ldr	r2, [pc, #440]	@ (8006814 <HAL_RCC_OscConfig+0x4f8>)
 800665c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006660:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006662:	e075      	b.n	8006750 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006664:	4b6b      	ldr	r3, [pc, #428]	@ (8006814 <HAL_RCC_OscConfig+0x4f8>)
 8006666:	685b      	ldr	r3, [r3, #4]
 8006668:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	6a1b      	ldr	r3, [r3, #32]
 8006670:	069b      	lsls	r3, r3, #26
 8006672:	4968      	ldr	r1, [pc, #416]	@ (8006814 <HAL_RCC_OscConfig+0x4f8>)
 8006674:	4313      	orrs	r3, r2
 8006676:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006678:	e06a      	b.n	8006750 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800667a:	4b66      	ldr	r3, [pc, #408]	@ (8006814 <HAL_RCC_OscConfig+0x4f8>)
 800667c:	68db      	ldr	r3, [r3, #12]
 800667e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6a1b      	ldr	r3, [r3, #32]
 8006686:	061b      	lsls	r3, r3, #24
 8006688:	4962      	ldr	r1, [pc, #392]	@ (8006814 <HAL_RCC_OscConfig+0x4f8>)
 800668a:	4313      	orrs	r3, r2
 800668c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800668e:	e05f      	b.n	8006750 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	69db      	ldr	r3, [r3, #28]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d042      	beq.n	800671e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006698:	4b5e      	ldr	r3, [pc, #376]	@ (8006814 <HAL_RCC_OscConfig+0x4f8>)
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	4a5d      	ldr	r2, [pc, #372]	@ (8006814 <HAL_RCC_OscConfig+0x4f8>)
 800669e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80066a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066a4:	f7fb fe78 	bl	8002398 <HAL_GetTick>
 80066a8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80066aa:	e008      	b.n	80066be <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80066ac:	f7fb fe74 	bl	8002398 <HAL_GetTick>
 80066b0:	4602      	mov	r2, r0
 80066b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066b4:	1ad3      	subs	r3, r2, r3
 80066b6:	2b02      	cmp	r3, #2
 80066b8:	d901      	bls.n	80066be <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80066ba:	2303      	movs	r3, #3
 80066bc:	e280      	b.n	8006bc0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80066be:	4b55      	ldr	r3, [pc, #340]	@ (8006814 <HAL_RCC_OscConfig+0x4f8>)
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d0f0      	beq.n	80066ac <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80066ca:	f7fb fe95 	bl	80023f8 <HAL_GetREVID>
 80066ce:	4603      	mov	r3, r0
 80066d0:	f241 0203 	movw	r2, #4099	@ 0x1003
 80066d4:	4293      	cmp	r3, r2
 80066d6:	d817      	bhi.n	8006708 <HAL_RCC_OscConfig+0x3ec>
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	6a1b      	ldr	r3, [r3, #32]
 80066dc:	2b20      	cmp	r3, #32
 80066de:	d108      	bne.n	80066f2 <HAL_RCC_OscConfig+0x3d6>
 80066e0:	4b4c      	ldr	r3, [pc, #304]	@ (8006814 <HAL_RCC_OscConfig+0x4f8>)
 80066e2:	685b      	ldr	r3, [r3, #4]
 80066e4:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80066e8:	4a4a      	ldr	r2, [pc, #296]	@ (8006814 <HAL_RCC_OscConfig+0x4f8>)
 80066ea:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80066ee:	6053      	str	r3, [r2, #4]
 80066f0:	e02e      	b.n	8006750 <HAL_RCC_OscConfig+0x434>
 80066f2:	4b48      	ldr	r3, [pc, #288]	@ (8006814 <HAL_RCC_OscConfig+0x4f8>)
 80066f4:	685b      	ldr	r3, [r3, #4]
 80066f6:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6a1b      	ldr	r3, [r3, #32]
 80066fe:	069b      	lsls	r3, r3, #26
 8006700:	4944      	ldr	r1, [pc, #272]	@ (8006814 <HAL_RCC_OscConfig+0x4f8>)
 8006702:	4313      	orrs	r3, r2
 8006704:	604b      	str	r3, [r1, #4]
 8006706:	e023      	b.n	8006750 <HAL_RCC_OscConfig+0x434>
 8006708:	4b42      	ldr	r3, [pc, #264]	@ (8006814 <HAL_RCC_OscConfig+0x4f8>)
 800670a:	68db      	ldr	r3, [r3, #12]
 800670c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	6a1b      	ldr	r3, [r3, #32]
 8006714:	061b      	lsls	r3, r3, #24
 8006716:	493f      	ldr	r1, [pc, #252]	@ (8006814 <HAL_RCC_OscConfig+0x4f8>)
 8006718:	4313      	orrs	r3, r2
 800671a:	60cb      	str	r3, [r1, #12]
 800671c:	e018      	b.n	8006750 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800671e:	4b3d      	ldr	r3, [pc, #244]	@ (8006814 <HAL_RCC_OscConfig+0x4f8>)
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	4a3c      	ldr	r2, [pc, #240]	@ (8006814 <HAL_RCC_OscConfig+0x4f8>)
 8006724:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006728:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800672a:	f7fb fe35 	bl	8002398 <HAL_GetTick>
 800672e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006730:	e008      	b.n	8006744 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006732:	f7fb fe31 	bl	8002398 <HAL_GetTick>
 8006736:	4602      	mov	r2, r0
 8006738:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800673a:	1ad3      	subs	r3, r2, r3
 800673c:	2b02      	cmp	r3, #2
 800673e:	d901      	bls.n	8006744 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006740:	2303      	movs	r3, #3
 8006742:	e23d      	b.n	8006bc0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006744:	4b33      	ldr	r3, [pc, #204]	@ (8006814 <HAL_RCC_OscConfig+0x4f8>)
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800674c:	2b00      	cmp	r3, #0
 800674e:	d1f0      	bne.n	8006732 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f003 0308 	and.w	r3, r3, #8
 8006758:	2b00      	cmp	r3, #0
 800675a:	d036      	beq.n	80067ca <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	695b      	ldr	r3, [r3, #20]
 8006760:	2b00      	cmp	r3, #0
 8006762:	d019      	beq.n	8006798 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006764:	4b2b      	ldr	r3, [pc, #172]	@ (8006814 <HAL_RCC_OscConfig+0x4f8>)
 8006766:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006768:	4a2a      	ldr	r2, [pc, #168]	@ (8006814 <HAL_RCC_OscConfig+0x4f8>)
 800676a:	f043 0301 	orr.w	r3, r3, #1
 800676e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006770:	f7fb fe12 	bl	8002398 <HAL_GetTick>
 8006774:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006776:	e008      	b.n	800678a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006778:	f7fb fe0e 	bl	8002398 <HAL_GetTick>
 800677c:	4602      	mov	r2, r0
 800677e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006780:	1ad3      	subs	r3, r2, r3
 8006782:	2b02      	cmp	r3, #2
 8006784:	d901      	bls.n	800678a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8006786:	2303      	movs	r3, #3
 8006788:	e21a      	b.n	8006bc0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800678a:	4b22      	ldr	r3, [pc, #136]	@ (8006814 <HAL_RCC_OscConfig+0x4f8>)
 800678c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800678e:	f003 0302 	and.w	r3, r3, #2
 8006792:	2b00      	cmp	r3, #0
 8006794:	d0f0      	beq.n	8006778 <HAL_RCC_OscConfig+0x45c>
 8006796:	e018      	b.n	80067ca <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006798:	4b1e      	ldr	r3, [pc, #120]	@ (8006814 <HAL_RCC_OscConfig+0x4f8>)
 800679a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800679c:	4a1d      	ldr	r2, [pc, #116]	@ (8006814 <HAL_RCC_OscConfig+0x4f8>)
 800679e:	f023 0301 	bic.w	r3, r3, #1
 80067a2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067a4:	f7fb fdf8 	bl	8002398 <HAL_GetTick>
 80067a8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80067aa:	e008      	b.n	80067be <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80067ac:	f7fb fdf4 	bl	8002398 <HAL_GetTick>
 80067b0:	4602      	mov	r2, r0
 80067b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067b4:	1ad3      	subs	r3, r2, r3
 80067b6:	2b02      	cmp	r3, #2
 80067b8:	d901      	bls.n	80067be <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80067ba:	2303      	movs	r3, #3
 80067bc:	e200      	b.n	8006bc0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80067be:	4b15      	ldr	r3, [pc, #84]	@ (8006814 <HAL_RCC_OscConfig+0x4f8>)
 80067c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80067c2:	f003 0302 	and.w	r3, r3, #2
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d1f0      	bne.n	80067ac <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f003 0320 	and.w	r3, r3, #32
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d039      	beq.n	800684a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	699b      	ldr	r3, [r3, #24]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d01c      	beq.n	8006818 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80067de:	4b0d      	ldr	r3, [pc, #52]	@ (8006814 <HAL_RCC_OscConfig+0x4f8>)
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	4a0c      	ldr	r2, [pc, #48]	@ (8006814 <HAL_RCC_OscConfig+0x4f8>)
 80067e4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80067e8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80067ea:	f7fb fdd5 	bl	8002398 <HAL_GetTick>
 80067ee:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80067f0:	e008      	b.n	8006804 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80067f2:	f7fb fdd1 	bl	8002398 <HAL_GetTick>
 80067f6:	4602      	mov	r2, r0
 80067f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067fa:	1ad3      	subs	r3, r2, r3
 80067fc:	2b02      	cmp	r3, #2
 80067fe:	d901      	bls.n	8006804 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8006800:	2303      	movs	r3, #3
 8006802:	e1dd      	b.n	8006bc0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006804:	4b03      	ldr	r3, [pc, #12]	@ (8006814 <HAL_RCC_OscConfig+0x4f8>)
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800680c:	2b00      	cmp	r3, #0
 800680e:	d0f0      	beq.n	80067f2 <HAL_RCC_OscConfig+0x4d6>
 8006810:	e01b      	b.n	800684a <HAL_RCC_OscConfig+0x52e>
 8006812:	bf00      	nop
 8006814:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006818:	4b9b      	ldr	r3, [pc, #620]	@ (8006a88 <HAL_RCC_OscConfig+0x76c>)
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	4a9a      	ldr	r2, [pc, #616]	@ (8006a88 <HAL_RCC_OscConfig+0x76c>)
 800681e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006822:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006824:	f7fb fdb8 	bl	8002398 <HAL_GetTick>
 8006828:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800682a:	e008      	b.n	800683e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800682c:	f7fb fdb4 	bl	8002398 <HAL_GetTick>
 8006830:	4602      	mov	r2, r0
 8006832:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006834:	1ad3      	subs	r3, r2, r3
 8006836:	2b02      	cmp	r3, #2
 8006838:	d901      	bls.n	800683e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800683a:	2303      	movs	r3, #3
 800683c:	e1c0      	b.n	8006bc0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800683e:	4b92      	ldr	r3, [pc, #584]	@ (8006a88 <HAL_RCC_OscConfig+0x76c>)
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006846:	2b00      	cmp	r3, #0
 8006848:	d1f0      	bne.n	800682c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f003 0304 	and.w	r3, r3, #4
 8006852:	2b00      	cmp	r3, #0
 8006854:	f000 8081 	beq.w	800695a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006858:	4b8c      	ldr	r3, [pc, #560]	@ (8006a8c <HAL_RCC_OscConfig+0x770>)
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	4a8b      	ldr	r2, [pc, #556]	@ (8006a8c <HAL_RCC_OscConfig+0x770>)
 800685e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006862:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006864:	f7fb fd98 	bl	8002398 <HAL_GetTick>
 8006868:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800686a:	e008      	b.n	800687e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800686c:	f7fb fd94 	bl	8002398 <HAL_GetTick>
 8006870:	4602      	mov	r2, r0
 8006872:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006874:	1ad3      	subs	r3, r2, r3
 8006876:	2b64      	cmp	r3, #100	@ 0x64
 8006878:	d901      	bls.n	800687e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800687a:	2303      	movs	r3, #3
 800687c:	e1a0      	b.n	8006bc0 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800687e:	4b83      	ldr	r3, [pc, #524]	@ (8006a8c <HAL_RCC_OscConfig+0x770>)
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006886:	2b00      	cmp	r3, #0
 8006888:	d0f0      	beq.n	800686c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	689b      	ldr	r3, [r3, #8]
 800688e:	2b01      	cmp	r3, #1
 8006890:	d106      	bne.n	80068a0 <HAL_RCC_OscConfig+0x584>
 8006892:	4b7d      	ldr	r3, [pc, #500]	@ (8006a88 <HAL_RCC_OscConfig+0x76c>)
 8006894:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006896:	4a7c      	ldr	r2, [pc, #496]	@ (8006a88 <HAL_RCC_OscConfig+0x76c>)
 8006898:	f043 0301 	orr.w	r3, r3, #1
 800689c:	6713      	str	r3, [r2, #112]	@ 0x70
 800689e:	e02d      	b.n	80068fc <HAL_RCC_OscConfig+0x5e0>
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	689b      	ldr	r3, [r3, #8]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d10c      	bne.n	80068c2 <HAL_RCC_OscConfig+0x5a6>
 80068a8:	4b77      	ldr	r3, [pc, #476]	@ (8006a88 <HAL_RCC_OscConfig+0x76c>)
 80068aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068ac:	4a76      	ldr	r2, [pc, #472]	@ (8006a88 <HAL_RCC_OscConfig+0x76c>)
 80068ae:	f023 0301 	bic.w	r3, r3, #1
 80068b2:	6713      	str	r3, [r2, #112]	@ 0x70
 80068b4:	4b74      	ldr	r3, [pc, #464]	@ (8006a88 <HAL_RCC_OscConfig+0x76c>)
 80068b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068b8:	4a73      	ldr	r2, [pc, #460]	@ (8006a88 <HAL_RCC_OscConfig+0x76c>)
 80068ba:	f023 0304 	bic.w	r3, r3, #4
 80068be:	6713      	str	r3, [r2, #112]	@ 0x70
 80068c0:	e01c      	b.n	80068fc <HAL_RCC_OscConfig+0x5e0>
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	689b      	ldr	r3, [r3, #8]
 80068c6:	2b05      	cmp	r3, #5
 80068c8:	d10c      	bne.n	80068e4 <HAL_RCC_OscConfig+0x5c8>
 80068ca:	4b6f      	ldr	r3, [pc, #444]	@ (8006a88 <HAL_RCC_OscConfig+0x76c>)
 80068cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068ce:	4a6e      	ldr	r2, [pc, #440]	@ (8006a88 <HAL_RCC_OscConfig+0x76c>)
 80068d0:	f043 0304 	orr.w	r3, r3, #4
 80068d4:	6713      	str	r3, [r2, #112]	@ 0x70
 80068d6:	4b6c      	ldr	r3, [pc, #432]	@ (8006a88 <HAL_RCC_OscConfig+0x76c>)
 80068d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068da:	4a6b      	ldr	r2, [pc, #428]	@ (8006a88 <HAL_RCC_OscConfig+0x76c>)
 80068dc:	f043 0301 	orr.w	r3, r3, #1
 80068e0:	6713      	str	r3, [r2, #112]	@ 0x70
 80068e2:	e00b      	b.n	80068fc <HAL_RCC_OscConfig+0x5e0>
 80068e4:	4b68      	ldr	r3, [pc, #416]	@ (8006a88 <HAL_RCC_OscConfig+0x76c>)
 80068e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068e8:	4a67      	ldr	r2, [pc, #412]	@ (8006a88 <HAL_RCC_OscConfig+0x76c>)
 80068ea:	f023 0301 	bic.w	r3, r3, #1
 80068ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80068f0:	4b65      	ldr	r3, [pc, #404]	@ (8006a88 <HAL_RCC_OscConfig+0x76c>)
 80068f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068f4:	4a64      	ldr	r2, [pc, #400]	@ (8006a88 <HAL_RCC_OscConfig+0x76c>)
 80068f6:	f023 0304 	bic.w	r3, r3, #4
 80068fa:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	689b      	ldr	r3, [r3, #8]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d015      	beq.n	8006930 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006904:	f7fb fd48 	bl	8002398 <HAL_GetTick>
 8006908:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800690a:	e00a      	b.n	8006922 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800690c:	f7fb fd44 	bl	8002398 <HAL_GetTick>
 8006910:	4602      	mov	r2, r0
 8006912:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006914:	1ad3      	subs	r3, r2, r3
 8006916:	f241 3288 	movw	r2, #5000	@ 0x1388
 800691a:	4293      	cmp	r3, r2
 800691c:	d901      	bls.n	8006922 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800691e:	2303      	movs	r3, #3
 8006920:	e14e      	b.n	8006bc0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006922:	4b59      	ldr	r3, [pc, #356]	@ (8006a88 <HAL_RCC_OscConfig+0x76c>)
 8006924:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006926:	f003 0302 	and.w	r3, r3, #2
 800692a:	2b00      	cmp	r3, #0
 800692c:	d0ee      	beq.n	800690c <HAL_RCC_OscConfig+0x5f0>
 800692e:	e014      	b.n	800695a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006930:	f7fb fd32 	bl	8002398 <HAL_GetTick>
 8006934:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006936:	e00a      	b.n	800694e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006938:	f7fb fd2e 	bl	8002398 <HAL_GetTick>
 800693c:	4602      	mov	r2, r0
 800693e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006940:	1ad3      	subs	r3, r2, r3
 8006942:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006946:	4293      	cmp	r3, r2
 8006948:	d901      	bls.n	800694e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800694a:	2303      	movs	r3, #3
 800694c:	e138      	b.n	8006bc0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800694e:	4b4e      	ldr	r3, [pc, #312]	@ (8006a88 <HAL_RCC_OscConfig+0x76c>)
 8006950:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006952:	f003 0302 	and.w	r3, r3, #2
 8006956:	2b00      	cmp	r3, #0
 8006958:	d1ee      	bne.n	8006938 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800695e:	2b00      	cmp	r3, #0
 8006960:	f000 812d 	beq.w	8006bbe <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006964:	4b48      	ldr	r3, [pc, #288]	@ (8006a88 <HAL_RCC_OscConfig+0x76c>)
 8006966:	691b      	ldr	r3, [r3, #16]
 8006968:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800696c:	2b18      	cmp	r3, #24
 800696e:	f000 80bd 	beq.w	8006aec <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006976:	2b02      	cmp	r3, #2
 8006978:	f040 809e 	bne.w	8006ab8 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800697c:	4b42      	ldr	r3, [pc, #264]	@ (8006a88 <HAL_RCC_OscConfig+0x76c>)
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	4a41      	ldr	r2, [pc, #260]	@ (8006a88 <HAL_RCC_OscConfig+0x76c>)
 8006982:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006986:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006988:	f7fb fd06 	bl	8002398 <HAL_GetTick>
 800698c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800698e:	e008      	b.n	80069a2 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006990:	f7fb fd02 	bl	8002398 <HAL_GetTick>
 8006994:	4602      	mov	r2, r0
 8006996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006998:	1ad3      	subs	r3, r2, r3
 800699a:	2b02      	cmp	r3, #2
 800699c:	d901      	bls.n	80069a2 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800699e:	2303      	movs	r3, #3
 80069a0:	e10e      	b.n	8006bc0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80069a2:	4b39      	ldr	r3, [pc, #228]	@ (8006a88 <HAL_RCC_OscConfig+0x76c>)
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d1f0      	bne.n	8006990 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80069ae:	4b36      	ldr	r3, [pc, #216]	@ (8006a88 <HAL_RCC_OscConfig+0x76c>)
 80069b0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80069b2:	4b37      	ldr	r3, [pc, #220]	@ (8006a90 <HAL_RCC_OscConfig+0x774>)
 80069b4:	4013      	ands	r3, r2
 80069b6:	687a      	ldr	r2, [r7, #4]
 80069b8:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80069ba:	687a      	ldr	r2, [r7, #4]
 80069bc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80069be:	0112      	lsls	r2, r2, #4
 80069c0:	430a      	orrs	r2, r1
 80069c2:	4931      	ldr	r1, [pc, #196]	@ (8006a88 <HAL_RCC_OscConfig+0x76c>)
 80069c4:	4313      	orrs	r3, r2
 80069c6:	628b      	str	r3, [r1, #40]	@ 0x28
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069cc:	3b01      	subs	r3, #1
 80069ce:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80069d6:	3b01      	subs	r3, #1
 80069d8:	025b      	lsls	r3, r3, #9
 80069da:	b29b      	uxth	r3, r3
 80069dc:	431a      	orrs	r2, r3
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069e2:	3b01      	subs	r3, #1
 80069e4:	041b      	lsls	r3, r3, #16
 80069e6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80069ea:	431a      	orrs	r2, r3
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069f0:	3b01      	subs	r3, #1
 80069f2:	061b      	lsls	r3, r3, #24
 80069f4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80069f8:	4923      	ldr	r1, [pc, #140]	@ (8006a88 <HAL_RCC_OscConfig+0x76c>)
 80069fa:	4313      	orrs	r3, r2
 80069fc:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80069fe:	4b22      	ldr	r3, [pc, #136]	@ (8006a88 <HAL_RCC_OscConfig+0x76c>)
 8006a00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a02:	4a21      	ldr	r2, [pc, #132]	@ (8006a88 <HAL_RCC_OscConfig+0x76c>)
 8006a04:	f023 0301 	bic.w	r3, r3, #1
 8006a08:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006a0a:	4b1f      	ldr	r3, [pc, #124]	@ (8006a88 <HAL_RCC_OscConfig+0x76c>)
 8006a0c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006a0e:	4b21      	ldr	r3, [pc, #132]	@ (8006a94 <HAL_RCC_OscConfig+0x778>)
 8006a10:	4013      	ands	r3, r2
 8006a12:	687a      	ldr	r2, [r7, #4]
 8006a14:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006a16:	00d2      	lsls	r2, r2, #3
 8006a18:	491b      	ldr	r1, [pc, #108]	@ (8006a88 <HAL_RCC_OscConfig+0x76c>)
 8006a1a:	4313      	orrs	r3, r2
 8006a1c:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006a1e:	4b1a      	ldr	r3, [pc, #104]	@ (8006a88 <HAL_RCC_OscConfig+0x76c>)
 8006a20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a22:	f023 020c 	bic.w	r2, r3, #12
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a2a:	4917      	ldr	r1, [pc, #92]	@ (8006a88 <HAL_RCC_OscConfig+0x76c>)
 8006a2c:	4313      	orrs	r3, r2
 8006a2e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006a30:	4b15      	ldr	r3, [pc, #84]	@ (8006a88 <HAL_RCC_OscConfig+0x76c>)
 8006a32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a34:	f023 0202 	bic.w	r2, r3, #2
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a3c:	4912      	ldr	r1, [pc, #72]	@ (8006a88 <HAL_RCC_OscConfig+0x76c>)
 8006a3e:	4313      	orrs	r3, r2
 8006a40:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006a42:	4b11      	ldr	r3, [pc, #68]	@ (8006a88 <HAL_RCC_OscConfig+0x76c>)
 8006a44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a46:	4a10      	ldr	r2, [pc, #64]	@ (8006a88 <HAL_RCC_OscConfig+0x76c>)
 8006a48:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006a4c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a4e:	4b0e      	ldr	r3, [pc, #56]	@ (8006a88 <HAL_RCC_OscConfig+0x76c>)
 8006a50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a52:	4a0d      	ldr	r2, [pc, #52]	@ (8006a88 <HAL_RCC_OscConfig+0x76c>)
 8006a54:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006a58:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006a5a:	4b0b      	ldr	r3, [pc, #44]	@ (8006a88 <HAL_RCC_OscConfig+0x76c>)
 8006a5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a5e:	4a0a      	ldr	r2, [pc, #40]	@ (8006a88 <HAL_RCC_OscConfig+0x76c>)
 8006a60:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006a64:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8006a66:	4b08      	ldr	r3, [pc, #32]	@ (8006a88 <HAL_RCC_OscConfig+0x76c>)
 8006a68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a6a:	4a07      	ldr	r2, [pc, #28]	@ (8006a88 <HAL_RCC_OscConfig+0x76c>)
 8006a6c:	f043 0301 	orr.w	r3, r3, #1
 8006a70:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006a72:	4b05      	ldr	r3, [pc, #20]	@ (8006a88 <HAL_RCC_OscConfig+0x76c>)
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	4a04      	ldr	r2, [pc, #16]	@ (8006a88 <HAL_RCC_OscConfig+0x76c>)
 8006a78:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006a7c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a7e:	f7fb fc8b 	bl	8002398 <HAL_GetTick>
 8006a82:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006a84:	e011      	b.n	8006aaa <HAL_RCC_OscConfig+0x78e>
 8006a86:	bf00      	nop
 8006a88:	58024400 	.word	0x58024400
 8006a8c:	58024800 	.word	0x58024800
 8006a90:	fffffc0c 	.word	0xfffffc0c
 8006a94:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a98:	f7fb fc7e 	bl	8002398 <HAL_GetTick>
 8006a9c:	4602      	mov	r2, r0
 8006a9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006aa0:	1ad3      	subs	r3, r2, r3
 8006aa2:	2b02      	cmp	r3, #2
 8006aa4:	d901      	bls.n	8006aaa <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8006aa6:	2303      	movs	r3, #3
 8006aa8:	e08a      	b.n	8006bc0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006aaa:	4b47      	ldr	r3, [pc, #284]	@ (8006bc8 <HAL_RCC_OscConfig+0x8ac>)
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d0f0      	beq.n	8006a98 <HAL_RCC_OscConfig+0x77c>
 8006ab6:	e082      	b.n	8006bbe <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006ab8:	4b43      	ldr	r3, [pc, #268]	@ (8006bc8 <HAL_RCC_OscConfig+0x8ac>)
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	4a42      	ldr	r2, [pc, #264]	@ (8006bc8 <HAL_RCC_OscConfig+0x8ac>)
 8006abe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006ac2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ac4:	f7fb fc68 	bl	8002398 <HAL_GetTick>
 8006ac8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006aca:	e008      	b.n	8006ade <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006acc:	f7fb fc64 	bl	8002398 <HAL_GetTick>
 8006ad0:	4602      	mov	r2, r0
 8006ad2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ad4:	1ad3      	subs	r3, r2, r3
 8006ad6:	2b02      	cmp	r3, #2
 8006ad8:	d901      	bls.n	8006ade <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8006ada:	2303      	movs	r3, #3
 8006adc:	e070      	b.n	8006bc0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006ade:	4b3a      	ldr	r3, [pc, #232]	@ (8006bc8 <HAL_RCC_OscConfig+0x8ac>)
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d1f0      	bne.n	8006acc <HAL_RCC_OscConfig+0x7b0>
 8006aea:	e068      	b.n	8006bbe <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006aec:	4b36      	ldr	r3, [pc, #216]	@ (8006bc8 <HAL_RCC_OscConfig+0x8ac>)
 8006aee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006af0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006af2:	4b35      	ldr	r3, [pc, #212]	@ (8006bc8 <HAL_RCC_OscConfig+0x8ac>)
 8006af4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006af6:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006afc:	2b01      	cmp	r3, #1
 8006afe:	d031      	beq.n	8006b64 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b00:	693b      	ldr	r3, [r7, #16]
 8006b02:	f003 0203 	and.w	r2, r3, #3
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006b0a:	429a      	cmp	r2, r3
 8006b0c:	d12a      	bne.n	8006b64 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006b0e:	693b      	ldr	r3, [r7, #16]
 8006b10:	091b      	lsrs	r3, r3, #4
 8006b12:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b1a:	429a      	cmp	r2, r3
 8006b1c:	d122      	bne.n	8006b64 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b28:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006b2a:	429a      	cmp	r2, r3
 8006b2c:	d11a      	bne.n	8006b64 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	0a5b      	lsrs	r3, r3, #9
 8006b32:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b3a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006b3c:	429a      	cmp	r2, r3
 8006b3e:	d111      	bne.n	8006b64 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	0c1b      	lsrs	r3, r3, #16
 8006b44:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b4c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006b4e:	429a      	cmp	r2, r3
 8006b50:	d108      	bne.n	8006b64 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	0e1b      	lsrs	r3, r3, #24
 8006b56:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b5e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006b60:	429a      	cmp	r2, r3
 8006b62:	d001      	beq.n	8006b68 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8006b64:	2301      	movs	r3, #1
 8006b66:	e02b      	b.n	8006bc0 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8006b68:	4b17      	ldr	r3, [pc, #92]	@ (8006bc8 <HAL_RCC_OscConfig+0x8ac>)
 8006b6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b6c:	08db      	lsrs	r3, r3, #3
 8006b6e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006b72:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006b78:	693a      	ldr	r2, [r7, #16]
 8006b7a:	429a      	cmp	r2, r3
 8006b7c:	d01f      	beq.n	8006bbe <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8006b7e:	4b12      	ldr	r3, [pc, #72]	@ (8006bc8 <HAL_RCC_OscConfig+0x8ac>)
 8006b80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b82:	4a11      	ldr	r2, [pc, #68]	@ (8006bc8 <HAL_RCC_OscConfig+0x8ac>)
 8006b84:	f023 0301 	bic.w	r3, r3, #1
 8006b88:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006b8a:	f7fb fc05 	bl	8002398 <HAL_GetTick>
 8006b8e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8006b90:	bf00      	nop
 8006b92:	f7fb fc01 	bl	8002398 <HAL_GetTick>
 8006b96:	4602      	mov	r2, r0
 8006b98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	d0f9      	beq.n	8006b92 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006b9e:	4b0a      	ldr	r3, [pc, #40]	@ (8006bc8 <HAL_RCC_OscConfig+0x8ac>)
 8006ba0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006ba2:	4b0a      	ldr	r3, [pc, #40]	@ (8006bcc <HAL_RCC_OscConfig+0x8b0>)
 8006ba4:	4013      	ands	r3, r2
 8006ba6:	687a      	ldr	r2, [r7, #4]
 8006ba8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006baa:	00d2      	lsls	r2, r2, #3
 8006bac:	4906      	ldr	r1, [pc, #24]	@ (8006bc8 <HAL_RCC_OscConfig+0x8ac>)
 8006bae:	4313      	orrs	r3, r2
 8006bb0:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8006bb2:	4b05      	ldr	r3, [pc, #20]	@ (8006bc8 <HAL_RCC_OscConfig+0x8ac>)
 8006bb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bb6:	4a04      	ldr	r2, [pc, #16]	@ (8006bc8 <HAL_RCC_OscConfig+0x8ac>)
 8006bb8:	f043 0301 	orr.w	r3, r3, #1
 8006bbc:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8006bbe:	2300      	movs	r3, #0
}
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	3730      	adds	r7, #48	@ 0x30
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	bd80      	pop	{r7, pc}
 8006bc8:	58024400 	.word	0x58024400
 8006bcc:	ffff0007 	.word	0xffff0007

08006bd0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	b086      	sub	sp, #24
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
 8006bd8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d101      	bne.n	8006be4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006be0:	2301      	movs	r3, #1
 8006be2:	e19c      	b.n	8006f1e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006be4:	4b8a      	ldr	r3, [pc, #552]	@ (8006e10 <HAL_RCC_ClockConfig+0x240>)
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f003 030f 	and.w	r3, r3, #15
 8006bec:	683a      	ldr	r2, [r7, #0]
 8006bee:	429a      	cmp	r2, r3
 8006bf0:	d910      	bls.n	8006c14 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006bf2:	4b87      	ldr	r3, [pc, #540]	@ (8006e10 <HAL_RCC_ClockConfig+0x240>)
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	f023 020f 	bic.w	r2, r3, #15
 8006bfa:	4985      	ldr	r1, [pc, #532]	@ (8006e10 <HAL_RCC_ClockConfig+0x240>)
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	4313      	orrs	r3, r2
 8006c00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c02:	4b83      	ldr	r3, [pc, #524]	@ (8006e10 <HAL_RCC_ClockConfig+0x240>)
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f003 030f 	and.w	r3, r3, #15
 8006c0a:	683a      	ldr	r2, [r7, #0]
 8006c0c:	429a      	cmp	r2, r3
 8006c0e:	d001      	beq.n	8006c14 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006c10:	2301      	movs	r3, #1
 8006c12:	e184      	b.n	8006f1e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f003 0304 	and.w	r3, r3, #4
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d010      	beq.n	8006c42 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	691a      	ldr	r2, [r3, #16]
 8006c24:	4b7b      	ldr	r3, [pc, #492]	@ (8006e14 <HAL_RCC_ClockConfig+0x244>)
 8006c26:	699b      	ldr	r3, [r3, #24]
 8006c28:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006c2c:	429a      	cmp	r2, r3
 8006c2e:	d908      	bls.n	8006c42 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006c30:	4b78      	ldr	r3, [pc, #480]	@ (8006e14 <HAL_RCC_ClockConfig+0x244>)
 8006c32:	699b      	ldr	r3, [r3, #24]
 8006c34:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	691b      	ldr	r3, [r3, #16]
 8006c3c:	4975      	ldr	r1, [pc, #468]	@ (8006e14 <HAL_RCC_ClockConfig+0x244>)
 8006c3e:	4313      	orrs	r3, r2
 8006c40:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f003 0308 	and.w	r3, r3, #8
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d010      	beq.n	8006c70 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	695a      	ldr	r2, [r3, #20]
 8006c52:	4b70      	ldr	r3, [pc, #448]	@ (8006e14 <HAL_RCC_ClockConfig+0x244>)
 8006c54:	69db      	ldr	r3, [r3, #28]
 8006c56:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006c5a:	429a      	cmp	r2, r3
 8006c5c:	d908      	bls.n	8006c70 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006c5e:	4b6d      	ldr	r3, [pc, #436]	@ (8006e14 <HAL_RCC_ClockConfig+0x244>)
 8006c60:	69db      	ldr	r3, [r3, #28]
 8006c62:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	695b      	ldr	r3, [r3, #20]
 8006c6a:	496a      	ldr	r1, [pc, #424]	@ (8006e14 <HAL_RCC_ClockConfig+0x244>)
 8006c6c:	4313      	orrs	r3, r2
 8006c6e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	f003 0310 	and.w	r3, r3, #16
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d010      	beq.n	8006c9e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	699a      	ldr	r2, [r3, #24]
 8006c80:	4b64      	ldr	r3, [pc, #400]	@ (8006e14 <HAL_RCC_ClockConfig+0x244>)
 8006c82:	69db      	ldr	r3, [r3, #28]
 8006c84:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006c88:	429a      	cmp	r2, r3
 8006c8a:	d908      	bls.n	8006c9e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006c8c:	4b61      	ldr	r3, [pc, #388]	@ (8006e14 <HAL_RCC_ClockConfig+0x244>)
 8006c8e:	69db      	ldr	r3, [r3, #28]
 8006c90:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	699b      	ldr	r3, [r3, #24]
 8006c98:	495e      	ldr	r1, [pc, #376]	@ (8006e14 <HAL_RCC_ClockConfig+0x244>)
 8006c9a:	4313      	orrs	r3, r2
 8006c9c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f003 0320 	and.w	r3, r3, #32
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d010      	beq.n	8006ccc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	69da      	ldr	r2, [r3, #28]
 8006cae:	4b59      	ldr	r3, [pc, #356]	@ (8006e14 <HAL_RCC_ClockConfig+0x244>)
 8006cb0:	6a1b      	ldr	r3, [r3, #32]
 8006cb2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006cb6:	429a      	cmp	r2, r3
 8006cb8:	d908      	bls.n	8006ccc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006cba:	4b56      	ldr	r3, [pc, #344]	@ (8006e14 <HAL_RCC_ClockConfig+0x244>)
 8006cbc:	6a1b      	ldr	r3, [r3, #32]
 8006cbe:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	69db      	ldr	r3, [r3, #28]
 8006cc6:	4953      	ldr	r1, [pc, #332]	@ (8006e14 <HAL_RCC_ClockConfig+0x244>)
 8006cc8:	4313      	orrs	r3, r2
 8006cca:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	f003 0302 	and.w	r3, r3, #2
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d010      	beq.n	8006cfa <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	68da      	ldr	r2, [r3, #12]
 8006cdc:	4b4d      	ldr	r3, [pc, #308]	@ (8006e14 <HAL_RCC_ClockConfig+0x244>)
 8006cde:	699b      	ldr	r3, [r3, #24]
 8006ce0:	f003 030f 	and.w	r3, r3, #15
 8006ce4:	429a      	cmp	r2, r3
 8006ce6:	d908      	bls.n	8006cfa <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006ce8:	4b4a      	ldr	r3, [pc, #296]	@ (8006e14 <HAL_RCC_ClockConfig+0x244>)
 8006cea:	699b      	ldr	r3, [r3, #24]
 8006cec:	f023 020f 	bic.w	r2, r3, #15
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	68db      	ldr	r3, [r3, #12]
 8006cf4:	4947      	ldr	r1, [pc, #284]	@ (8006e14 <HAL_RCC_ClockConfig+0x244>)
 8006cf6:	4313      	orrs	r3, r2
 8006cf8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f003 0301 	and.w	r3, r3, #1
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d055      	beq.n	8006db2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006d06:	4b43      	ldr	r3, [pc, #268]	@ (8006e14 <HAL_RCC_ClockConfig+0x244>)
 8006d08:	699b      	ldr	r3, [r3, #24]
 8006d0a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	689b      	ldr	r3, [r3, #8]
 8006d12:	4940      	ldr	r1, [pc, #256]	@ (8006e14 <HAL_RCC_ClockConfig+0x244>)
 8006d14:	4313      	orrs	r3, r2
 8006d16:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	685b      	ldr	r3, [r3, #4]
 8006d1c:	2b02      	cmp	r3, #2
 8006d1e:	d107      	bne.n	8006d30 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006d20:	4b3c      	ldr	r3, [pc, #240]	@ (8006e14 <HAL_RCC_ClockConfig+0x244>)
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d121      	bne.n	8006d70 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006d2c:	2301      	movs	r3, #1
 8006d2e:	e0f6      	b.n	8006f1e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	685b      	ldr	r3, [r3, #4]
 8006d34:	2b03      	cmp	r3, #3
 8006d36:	d107      	bne.n	8006d48 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006d38:	4b36      	ldr	r3, [pc, #216]	@ (8006e14 <HAL_RCC_ClockConfig+0x244>)
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d115      	bne.n	8006d70 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006d44:	2301      	movs	r3, #1
 8006d46:	e0ea      	b.n	8006f1e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	685b      	ldr	r3, [r3, #4]
 8006d4c:	2b01      	cmp	r3, #1
 8006d4e:	d107      	bne.n	8006d60 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006d50:	4b30      	ldr	r3, [pc, #192]	@ (8006e14 <HAL_RCC_ClockConfig+0x244>)
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d109      	bne.n	8006d70 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006d5c:	2301      	movs	r3, #1
 8006d5e:	e0de      	b.n	8006f1e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006d60:	4b2c      	ldr	r3, [pc, #176]	@ (8006e14 <HAL_RCC_ClockConfig+0x244>)
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f003 0304 	and.w	r3, r3, #4
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d101      	bne.n	8006d70 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006d6c:	2301      	movs	r3, #1
 8006d6e:	e0d6      	b.n	8006f1e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006d70:	4b28      	ldr	r3, [pc, #160]	@ (8006e14 <HAL_RCC_ClockConfig+0x244>)
 8006d72:	691b      	ldr	r3, [r3, #16]
 8006d74:	f023 0207 	bic.w	r2, r3, #7
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	685b      	ldr	r3, [r3, #4]
 8006d7c:	4925      	ldr	r1, [pc, #148]	@ (8006e14 <HAL_RCC_ClockConfig+0x244>)
 8006d7e:	4313      	orrs	r3, r2
 8006d80:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006d82:	f7fb fb09 	bl	8002398 <HAL_GetTick>
 8006d86:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d88:	e00a      	b.n	8006da0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006d8a:	f7fb fb05 	bl	8002398 <HAL_GetTick>
 8006d8e:	4602      	mov	r2, r0
 8006d90:	697b      	ldr	r3, [r7, #20]
 8006d92:	1ad3      	subs	r3, r2, r3
 8006d94:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006d98:	4293      	cmp	r3, r2
 8006d9a:	d901      	bls.n	8006da0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8006d9c:	2303      	movs	r3, #3
 8006d9e:	e0be      	b.n	8006f1e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006da0:	4b1c      	ldr	r3, [pc, #112]	@ (8006e14 <HAL_RCC_ClockConfig+0x244>)
 8006da2:	691b      	ldr	r3, [r3, #16]
 8006da4:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	685b      	ldr	r3, [r3, #4]
 8006dac:	00db      	lsls	r3, r3, #3
 8006dae:	429a      	cmp	r2, r3
 8006db0:	d1eb      	bne.n	8006d8a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	f003 0302 	and.w	r3, r3, #2
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d010      	beq.n	8006de0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	68da      	ldr	r2, [r3, #12]
 8006dc2:	4b14      	ldr	r3, [pc, #80]	@ (8006e14 <HAL_RCC_ClockConfig+0x244>)
 8006dc4:	699b      	ldr	r3, [r3, #24]
 8006dc6:	f003 030f 	and.w	r3, r3, #15
 8006dca:	429a      	cmp	r2, r3
 8006dcc:	d208      	bcs.n	8006de0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006dce:	4b11      	ldr	r3, [pc, #68]	@ (8006e14 <HAL_RCC_ClockConfig+0x244>)
 8006dd0:	699b      	ldr	r3, [r3, #24]
 8006dd2:	f023 020f 	bic.w	r2, r3, #15
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	68db      	ldr	r3, [r3, #12]
 8006dda:	490e      	ldr	r1, [pc, #56]	@ (8006e14 <HAL_RCC_ClockConfig+0x244>)
 8006ddc:	4313      	orrs	r3, r2
 8006dde:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006de0:	4b0b      	ldr	r3, [pc, #44]	@ (8006e10 <HAL_RCC_ClockConfig+0x240>)
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f003 030f 	and.w	r3, r3, #15
 8006de8:	683a      	ldr	r2, [r7, #0]
 8006dea:	429a      	cmp	r2, r3
 8006dec:	d214      	bcs.n	8006e18 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006dee:	4b08      	ldr	r3, [pc, #32]	@ (8006e10 <HAL_RCC_ClockConfig+0x240>)
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	f023 020f 	bic.w	r2, r3, #15
 8006df6:	4906      	ldr	r1, [pc, #24]	@ (8006e10 <HAL_RCC_ClockConfig+0x240>)
 8006df8:	683b      	ldr	r3, [r7, #0]
 8006dfa:	4313      	orrs	r3, r2
 8006dfc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006dfe:	4b04      	ldr	r3, [pc, #16]	@ (8006e10 <HAL_RCC_ClockConfig+0x240>)
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	f003 030f 	and.w	r3, r3, #15
 8006e06:	683a      	ldr	r2, [r7, #0]
 8006e08:	429a      	cmp	r2, r3
 8006e0a:	d005      	beq.n	8006e18 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006e0c:	2301      	movs	r3, #1
 8006e0e:	e086      	b.n	8006f1e <HAL_RCC_ClockConfig+0x34e>
 8006e10:	52002000 	.word	0x52002000
 8006e14:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f003 0304 	and.w	r3, r3, #4
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d010      	beq.n	8006e46 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	691a      	ldr	r2, [r3, #16]
 8006e28:	4b3f      	ldr	r3, [pc, #252]	@ (8006f28 <HAL_RCC_ClockConfig+0x358>)
 8006e2a:	699b      	ldr	r3, [r3, #24]
 8006e2c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006e30:	429a      	cmp	r2, r3
 8006e32:	d208      	bcs.n	8006e46 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006e34:	4b3c      	ldr	r3, [pc, #240]	@ (8006f28 <HAL_RCC_ClockConfig+0x358>)
 8006e36:	699b      	ldr	r3, [r3, #24]
 8006e38:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	691b      	ldr	r3, [r3, #16]
 8006e40:	4939      	ldr	r1, [pc, #228]	@ (8006f28 <HAL_RCC_ClockConfig+0x358>)
 8006e42:	4313      	orrs	r3, r2
 8006e44:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	f003 0308 	and.w	r3, r3, #8
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d010      	beq.n	8006e74 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	695a      	ldr	r2, [r3, #20]
 8006e56:	4b34      	ldr	r3, [pc, #208]	@ (8006f28 <HAL_RCC_ClockConfig+0x358>)
 8006e58:	69db      	ldr	r3, [r3, #28]
 8006e5a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006e5e:	429a      	cmp	r2, r3
 8006e60:	d208      	bcs.n	8006e74 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006e62:	4b31      	ldr	r3, [pc, #196]	@ (8006f28 <HAL_RCC_ClockConfig+0x358>)
 8006e64:	69db      	ldr	r3, [r3, #28]
 8006e66:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	695b      	ldr	r3, [r3, #20]
 8006e6e:	492e      	ldr	r1, [pc, #184]	@ (8006f28 <HAL_RCC_ClockConfig+0x358>)
 8006e70:	4313      	orrs	r3, r2
 8006e72:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	f003 0310 	and.w	r3, r3, #16
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d010      	beq.n	8006ea2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	699a      	ldr	r2, [r3, #24]
 8006e84:	4b28      	ldr	r3, [pc, #160]	@ (8006f28 <HAL_RCC_ClockConfig+0x358>)
 8006e86:	69db      	ldr	r3, [r3, #28]
 8006e88:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006e8c:	429a      	cmp	r2, r3
 8006e8e:	d208      	bcs.n	8006ea2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006e90:	4b25      	ldr	r3, [pc, #148]	@ (8006f28 <HAL_RCC_ClockConfig+0x358>)
 8006e92:	69db      	ldr	r3, [r3, #28]
 8006e94:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	699b      	ldr	r3, [r3, #24]
 8006e9c:	4922      	ldr	r1, [pc, #136]	@ (8006f28 <HAL_RCC_ClockConfig+0x358>)
 8006e9e:	4313      	orrs	r3, r2
 8006ea0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	f003 0320 	and.w	r3, r3, #32
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d010      	beq.n	8006ed0 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	69da      	ldr	r2, [r3, #28]
 8006eb2:	4b1d      	ldr	r3, [pc, #116]	@ (8006f28 <HAL_RCC_ClockConfig+0x358>)
 8006eb4:	6a1b      	ldr	r3, [r3, #32]
 8006eb6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006eba:	429a      	cmp	r2, r3
 8006ebc:	d208      	bcs.n	8006ed0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006ebe:	4b1a      	ldr	r3, [pc, #104]	@ (8006f28 <HAL_RCC_ClockConfig+0x358>)
 8006ec0:	6a1b      	ldr	r3, [r3, #32]
 8006ec2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	69db      	ldr	r3, [r3, #28]
 8006eca:	4917      	ldr	r1, [pc, #92]	@ (8006f28 <HAL_RCC_ClockConfig+0x358>)
 8006ecc:	4313      	orrs	r3, r2
 8006ece:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006ed0:	f000 f834 	bl	8006f3c <HAL_RCC_GetSysClockFreq>
 8006ed4:	4602      	mov	r2, r0
 8006ed6:	4b14      	ldr	r3, [pc, #80]	@ (8006f28 <HAL_RCC_ClockConfig+0x358>)
 8006ed8:	699b      	ldr	r3, [r3, #24]
 8006eda:	0a1b      	lsrs	r3, r3, #8
 8006edc:	f003 030f 	and.w	r3, r3, #15
 8006ee0:	4912      	ldr	r1, [pc, #72]	@ (8006f2c <HAL_RCC_ClockConfig+0x35c>)
 8006ee2:	5ccb      	ldrb	r3, [r1, r3]
 8006ee4:	f003 031f 	and.w	r3, r3, #31
 8006ee8:	fa22 f303 	lsr.w	r3, r2, r3
 8006eec:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006eee:	4b0e      	ldr	r3, [pc, #56]	@ (8006f28 <HAL_RCC_ClockConfig+0x358>)
 8006ef0:	699b      	ldr	r3, [r3, #24]
 8006ef2:	f003 030f 	and.w	r3, r3, #15
 8006ef6:	4a0d      	ldr	r2, [pc, #52]	@ (8006f2c <HAL_RCC_ClockConfig+0x35c>)
 8006ef8:	5cd3      	ldrb	r3, [r2, r3]
 8006efa:	f003 031f 	and.w	r3, r3, #31
 8006efe:	693a      	ldr	r2, [r7, #16]
 8006f00:	fa22 f303 	lsr.w	r3, r2, r3
 8006f04:	4a0a      	ldr	r2, [pc, #40]	@ (8006f30 <HAL_RCC_ClockConfig+0x360>)
 8006f06:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006f08:	4a0a      	ldr	r2, [pc, #40]	@ (8006f34 <HAL_RCC_ClockConfig+0x364>)
 8006f0a:	693b      	ldr	r3, [r7, #16]
 8006f0c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8006f0e:	4b0a      	ldr	r3, [pc, #40]	@ (8006f38 <HAL_RCC_ClockConfig+0x368>)
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	4618      	mov	r0, r3
 8006f14:	f7fb f9f6 	bl	8002304 <HAL_InitTick>
 8006f18:	4603      	mov	r3, r0
 8006f1a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006f1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f1e:	4618      	mov	r0, r3
 8006f20:	3718      	adds	r7, #24
 8006f22:	46bd      	mov	sp, r7
 8006f24:	bd80      	pop	{r7, pc}
 8006f26:	bf00      	nop
 8006f28:	58024400 	.word	0x58024400
 8006f2c:	08012610 	.word	0x08012610
 8006f30:	24000004 	.word	0x24000004
 8006f34:	24000000 	.word	0x24000000
 8006f38:	2400003c 	.word	0x2400003c

08006f3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006f3c:	b480      	push	{r7}
 8006f3e:	b089      	sub	sp, #36	@ 0x24
 8006f40:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006f42:	4bb3      	ldr	r3, [pc, #716]	@ (8007210 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f44:	691b      	ldr	r3, [r3, #16]
 8006f46:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006f4a:	2b18      	cmp	r3, #24
 8006f4c:	f200 8155 	bhi.w	80071fa <HAL_RCC_GetSysClockFreq+0x2be>
 8006f50:	a201      	add	r2, pc, #4	@ (adr r2, 8006f58 <HAL_RCC_GetSysClockFreq+0x1c>)
 8006f52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f56:	bf00      	nop
 8006f58:	08006fbd 	.word	0x08006fbd
 8006f5c:	080071fb 	.word	0x080071fb
 8006f60:	080071fb 	.word	0x080071fb
 8006f64:	080071fb 	.word	0x080071fb
 8006f68:	080071fb 	.word	0x080071fb
 8006f6c:	080071fb 	.word	0x080071fb
 8006f70:	080071fb 	.word	0x080071fb
 8006f74:	080071fb 	.word	0x080071fb
 8006f78:	08006fe3 	.word	0x08006fe3
 8006f7c:	080071fb 	.word	0x080071fb
 8006f80:	080071fb 	.word	0x080071fb
 8006f84:	080071fb 	.word	0x080071fb
 8006f88:	080071fb 	.word	0x080071fb
 8006f8c:	080071fb 	.word	0x080071fb
 8006f90:	080071fb 	.word	0x080071fb
 8006f94:	080071fb 	.word	0x080071fb
 8006f98:	08006fe9 	.word	0x08006fe9
 8006f9c:	080071fb 	.word	0x080071fb
 8006fa0:	080071fb 	.word	0x080071fb
 8006fa4:	080071fb 	.word	0x080071fb
 8006fa8:	080071fb 	.word	0x080071fb
 8006fac:	080071fb 	.word	0x080071fb
 8006fb0:	080071fb 	.word	0x080071fb
 8006fb4:	080071fb 	.word	0x080071fb
 8006fb8:	08006fef 	.word	0x08006fef
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006fbc:	4b94      	ldr	r3, [pc, #592]	@ (8007210 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	f003 0320 	and.w	r3, r3, #32
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d009      	beq.n	8006fdc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006fc8:	4b91      	ldr	r3, [pc, #580]	@ (8007210 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	08db      	lsrs	r3, r3, #3
 8006fce:	f003 0303 	and.w	r3, r3, #3
 8006fd2:	4a90      	ldr	r2, [pc, #576]	@ (8007214 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006fd4:	fa22 f303 	lsr.w	r3, r2, r3
 8006fd8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8006fda:	e111      	b.n	8007200 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006fdc:	4b8d      	ldr	r3, [pc, #564]	@ (8007214 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006fde:	61bb      	str	r3, [r7, #24]
      break;
 8006fe0:	e10e      	b.n	8007200 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8006fe2:	4b8d      	ldr	r3, [pc, #564]	@ (8007218 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006fe4:	61bb      	str	r3, [r7, #24]
      break;
 8006fe6:	e10b      	b.n	8007200 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8006fe8:	4b8c      	ldr	r3, [pc, #560]	@ (800721c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8006fea:	61bb      	str	r3, [r7, #24]
      break;
 8006fec:	e108      	b.n	8007200 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006fee:	4b88      	ldr	r3, [pc, #544]	@ (8007210 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ff0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ff2:	f003 0303 	and.w	r3, r3, #3
 8006ff6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8006ff8:	4b85      	ldr	r3, [pc, #532]	@ (8007210 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ffa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ffc:	091b      	lsrs	r3, r3, #4
 8006ffe:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007002:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007004:	4b82      	ldr	r3, [pc, #520]	@ (8007210 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007006:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007008:	f003 0301 	and.w	r3, r3, #1
 800700c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800700e:	4b80      	ldr	r3, [pc, #512]	@ (8007210 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007010:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007012:	08db      	lsrs	r3, r3, #3
 8007014:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007018:	68fa      	ldr	r2, [r7, #12]
 800701a:	fb02 f303 	mul.w	r3, r2, r3
 800701e:	ee07 3a90 	vmov	s15, r3
 8007022:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007026:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800702a:	693b      	ldr	r3, [r7, #16]
 800702c:	2b00      	cmp	r3, #0
 800702e:	f000 80e1 	beq.w	80071f4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8007032:	697b      	ldr	r3, [r7, #20]
 8007034:	2b02      	cmp	r3, #2
 8007036:	f000 8083 	beq.w	8007140 <HAL_RCC_GetSysClockFreq+0x204>
 800703a:	697b      	ldr	r3, [r7, #20]
 800703c:	2b02      	cmp	r3, #2
 800703e:	f200 80a1 	bhi.w	8007184 <HAL_RCC_GetSysClockFreq+0x248>
 8007042:	697b      	ldr	r3, [r7, #20]
 8007044:	2b00      	cmp	r3, #0
 8007046:	d003      	beq.n	8007050 <HAL_RCC_GetSysClockFreq+0x114>
 8007048:	697b      	ldr	r3, [r7, #20]
 800704a:	2b01      	cmp	r3, #1
 800704c:	d056      	beq.n	80070fc <HAL_RCC_GetSysClockFreq+0x1c0>
 800704e:	e099      	b.n	8007184 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007050:	4b6f      	ldr	r3, [pc, #444]	@ (8007210 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	f003 0320 	and.w	r3, r3, #32
 8007058:	2b00      	cmp	r3, #0
 800705a:	d02d      	beq.n	80070b8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800705c:	4b6c      	ldr	r3, [pc, #432]	@ (8007210 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	08db      	lsrs	r3, r3, #3
 8007062:	f003 0303 	and.w	r3, r3, #3
 8007066:	4a6b      	ldr	r2, [pc, #428]	@ (8007214 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007068:	fa22 f303 	lsr.w	r3, r2, r3
 800706c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	ee07 3a90 	vmov	s15, r3
 8007074:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007078:	693b      	ldr	r3, [r7, #16]
 800707a:	ee07 3a90 	vmov	s15, r3
 800707e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007082:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007086:	4b62      	ldr	r3, [pc, #392]	@ (8007210 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007088:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800708a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800708e:	ee07 3a90 	vmov	s15, r3
 8007092:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007096:	ed97 6a02 	vldr	s12, [r7, #8]
 800709a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8007220 <HAL_RCC_GetSysClockFreq+0x2e4>
 800709e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80070aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070b2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80070b6:	e087      	b.n	80071c8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80070b8:	693b      	ldr	r3, [r7, #16]
 80070ba:	ee07 3a90 	vmov	s15, r3
 80070be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070c2:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8007224 <HAL_RCC_GetSysClockFreq+0x2e8>
 80070c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80070ca:	4b51      	ldr	r3, [pc, #324]	@ (8007210 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80070cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070d2:	ee07 3a90 	vmov	s15, r3
 80070d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070da:	ed97 6a02 	vldr	s12, [r7, #8]
 80070de:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8007220 <HAL_RCC_GetSysClockFreq+0x2e4>
 80070e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80070ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070f6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80070fa:	e065      	b.n	80071c8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80070fc:	693b      	ldr	r3, [r7, #16]
 80070fe:	ee07 3a90 	vmov	s15, r3
 8007102:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007106:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8007228 <HAL_RCC_GetSysClockFreq+0x2ec>
 800710a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800710e:	4b40      	ldr	r3, [pc, #256]	@ (8007210 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007110:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007112:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007116:	ee07 3a90 	vmov	s15, r3
 800711a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800711e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007122:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8007220 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007126:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800712a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800712e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007132:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007136:	ee67 7a27 	vmul.f32	s15, s14, s15
 800713a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800713e:	e043      	b.n	80071c8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007140:	693b      	ldr	r3, [r7, #16]
 8007142:	ee07 3a90 	vmov	s15, r3
 8007146:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800714a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800722c <HAL_RCC_GetSysClockFreq+0x2f0>
 800714e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007152:	4b2f      	ldr	r3, [pc, #188]	@ (8007210 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007154:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007156:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800715a:	ee07 3a90 	vmov	s15, r3
 800715e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007162:	ed97 6a02 	vldr	s12, [r7, #8]
 8007166:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8007220 <HAL_RCC_GetSysClockFreq+0x2e4>
 800716a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800716e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007172:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007176:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800717a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800717e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007182:	e021      	b.n	80071c8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007184:	693b      	ldr	r3, [r7, #16]
 8007186:	ee07 3a90 	vmov	s15, r3
 800718a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800718e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8007228 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007192:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007196:	4b1e      	ldr	r3, [pc, #120]	@ (8007210 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007198:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800719a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800719e:	ee07 3a90 	vmov	s15, r3
 80071a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071a6:	ed97 6a02 	vldr	s12, [r7, #8]
 80071aa:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8007220 <HAL_RCC_GetSysClockFreq+0x2e4>
 80071ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80071ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071c2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80071c6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80071c8:	4b11      	ldr	r3, [pc, #68]	@ (8007210 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80071ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071cc:	0a5b      	lsrs	r3, r3, #9
 80071ce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80071d2:	3301      	adds	r3, #1
 80071d4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	ee07 3a90 	vmov	s15, r3
 80071dc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80071e0:	edd7 6a07 	vldr	s13, [r7, #28]
 80071e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80071e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80071ec:	ee17 3a90 	vmov	r3, s15
 80071f0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80071f2:	e005      	b.n	8007200 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80071f4:	2300      	movs	r3, #0
 80071f6:	61bb      	str	r3, [r7, #24]
      break;
 80071f8:	e002      	b.n	8007200 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80071fa:	4b07      	ldr	r3, [pc, #28]	@ (8007218 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80071fc:	61bb      	str	r3, [r7, #24]
      break;
 80071fe:	bf00      	nop
  }

  return sysclockfreq;
 8007200:	69bb      	ldr	r3, [r7, #24]
}
 8007202:	4618      	mov	r0, r3
 8007204:	3724      	adds	r7, #36	@ 0x24
 8007206:	46bd      	mov	sp, r7
 8007208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720c:	4770      	bx	lr
 800720e:	bf00      	nop
 8007210:	58024400 	.word	0x58024400
 8007214:	03d09000 	.word	0x03d09000
 8007218:	003d0900 	.word	0x003d0900
 800721c:	017d7840 	.word	0x017d7840
 8007220:	46000000 	.word	0x46000000
 8007224:	4c742400 	.word	0x4c742400
 8007228:	4a742400 	.word	0x4a742400
 800722c:	4bbebc20 	.word	0x4bbebc20

08007230 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007230:	b580      	push	{r7, lr}
 8007232:	b082      	sub	sp, #8
 8007234:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007236:	f7ff fe81 	bl	8006f3c <HAL_RCC_GetSysClockFreq>
 800723a:	4602      	mov	r2, r0
 800723c:	4b10      	ldr	r3, [pc, #64]	@ (8007280 <HAL_RCC_GetHCLKFreq+0x50>)
 800723e:	699b      	ldr	r3, [r3, #24]
 8007240:	0a1b      	lsrs	r3, r3, #8
 8007242:	f003 030f 	and.w	r3, r3, #15
 8007246:	490f      	ldr	r1, [pc, #60]	@ (8007284 <HAL_RCC_GetHCLKFreq+0x54>)
 8007248:	5ccb      	ldrb	r3, [r1, r3]
 800724a:	f003 031f 	and.w	r3, r3, #31
 800724e:	fa22 f303 	lsr.w	r3, r2, r3
 8007252:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007254:	4b0a      	ldr	r3, [pc, #40]	@ (8007280 <HAL_RCC_GetHCLKFreq+0x50>)
 8007256:	699b      	ldr	r3, [r3, #24]
 8007258:	f003 030f 	and.w	r3, r3, #15
 800725c:	4a09      	ldr	r2, [pc, #36]	@ (8007284 <HAL_RCC_GetHCLKFreq+0x54>)
 800725e:	5cd3      	ldrb	r3, [r2, r3]
 8007260:	f003 031f 	and.w	r3, r3, #31
 8007264:	687a      	ldr	r2, [r7, #4]
 8007266:	fa22 f303 	lsr.w	r3, r2, r3
 800726a:	4a07      	ldr	r2, [pc, #28]	@ (8007288 <HAL_RCC_GetHCLKFreq+0x58>)
 800726c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800726e:	4a07      	ldr	r2, [pc, #28]	@ (800728c <HAL_RCC_GetHCLKFreq+0x5c>)
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007274:	4b04      	ldr	r3, [pc, #16]	@ (8007288 <HAL_RCC_GetHCLKFreq+0x58>)
 8007276:	681b      	ldr	r3, [r3, #0]
}
 8007278:	4618      	mov	r0, r3
 800727a:	3708      	adds	r7, #8
 800727c:	46bd      	mov	sp, r7
 800727e:	bd80      	pop	{r7, pc}
 8007280:	58024400 	.word	0x58024400
 8007284:	08012610 	.word	0x08012610
 8007288:	24000004 	.word	0x24000004
 800728c:	24000000 	.word	0x24000000

08007290 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007290:	b580      	push	{r7, lr}
 8007292:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8007294:	f7ff ffcc 	bl	8007230 <HAL_RCC_GetHCLKFreq>
 8007298:	4602      	mov	r2, r0
 800729a:	4b06      	ldr	r3, [pc, #24]	@ (80072b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800729c:	69db      	ldr	r3, [r3, #28]
 800729e:	091b      	lsrs	r3, r3, #4
 80072a0:	f003 0307 	and.w	r3, r3, #7
 80072a4:	4904      	ldr	r1, [pc, #16]	@ (80072b8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80072a6:	5ccb      	ldrb	r3, [r1, r3]
 80072a8:	f003 031f 	and.w	r3, r3, #31
 80072ac:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80072b0:	4618      	mov	r0, r3
 80072b2:	bd80      	pop	{r7, pc}
 80072b4:	58024400 	.word	0x58024400
 80072b8:	08012610 	.word	0x08012610

080072bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80072bc:	b580      	push	{r7, lr}
 80072be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80072c0:	f7ff ffb6 	bl	8007230 <HAL_RCC_GetHCLKFreq>
 80072c4:	4602      	mov	r2, r0
 80072c6:	4b06      	ldr	r3, [pc, #24]	@ (80072e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80072c8:	69db      	ldr	r3, [r3, #28]
 80072ca:	0a1b      	lsrs	r3, r3, #8
 80072cc:	f003 0307 	and.w	r3, r3, #7
 80072d0:	4904      	ldr	r1, [pc, #16]	@ (80072e4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80072d2:	5ccb      	ldrb	r3, [r1, r3]
 80072d4:	f003 031f 	and.w	r3, r3, #31
 80072d8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80072dc:	4618      	mov	r0, r3
 80072de:	bd80      	pop	{r7, pc}
 80072e0:	58024400 	.word	0x58024400
 80072e4:	08012610 	.word	0x08012610

080072e8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80072e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80072ec:	b0ca      	sub	sp, #296	@ 0x128
 80072ee:	af00      	add	r7, sp, #0
 80072f0:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80072f4:	2300      	movs	r3, #0
 80072f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80072fa:	2300      	movs	r3, #0
 80072fc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007300:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007308:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800730c:	2500      	movs	r5, #0
 800730e:	ea54 0305 	orrs.w	r3, r4, r5
 8007312:	d049      	beq.n	80073a8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8007314:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007318:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800731a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800731e:	d02f      	beq.n	8007380 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8007320:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007324:	d828      	bhi.n	8007378 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007326:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800732a:	d01a      	beq.n	8007362 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800732c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007330:	d822      	bhi.n	8007378 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007332:	2b00      	cmp	r3, #0
 8007334:	d003      	beq.n	800733e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8007336:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800733a:	d007      	beq.n	800734c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800733c:	e01c      	b.n	8007378 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800733e:	4bb8      	ldr	r3, [pc, #736]	@ (8007620 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007340:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007342:	4ab7      	ldr	r2, [pc, #732]	@ (8007620 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007344:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007348:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800734a:	e01a      	b.n	8007382 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800734c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007350:	3308      	adds	r3, #8
 8007352:	2102      	movs	r1, #2
 8007354:	4618      	mov	r0, r3
 8007356:	f001 fc8f 	bl	8008c78 <RCCEx_PLL2_Config>
 800735a:	4603      	mov	r3, r0
 800735c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007360:	e00f      	b.n	8007382 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007362:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007366:	3328      	adds	r3, #40	@ 0x28
 8007368:	2102      	movs	r1, #2
 800736a:	4618      	mov	r0, r3
 800736c:	f001 fd36 	bl	8008ddc <RCCEx_PLL3_Config>
 8007370:	4603      	mov	r3, r0
 8007372:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007376:	e004      	b.n	8007382 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007378:	2301      	movs	r3, #1
 800737a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800737e:	e000      	b.n	8007382 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8007380:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007382:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007386:	2b00      	cmp	r3, #0
 8007388:	d10a      	bne.n	80073a0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800738a:	4ba5      	ldr	r3, [pc, #660]	@ (8007620 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800738c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800738e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8007392:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007396:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007398:	4aa1      	ldr	r2, [pc, #644]	@ (8007620 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800739a:	430b      	orrs	r3, r1
 800739c:	6513      	str	r3, [r2, #80]	@ 0x50
 800739e:	e003      	b.n	80073a8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073a0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80073a4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80073a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073b0:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80073b4:	f04f 0900 	mov.w	r9, #0
 80073b8:	ea58 0309 	orrs.w	r3, r8, r9
 80073bc:	d047      	beq.n	800744e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80073be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80073c4:	2b04      	cmp	r3, #4
 80073c6:	d82a      	bhi.n	800741e <HAL_RCCEx_PeriphCLKConfig+0x136>
 80073c8:	a201      	add	r2, pc, #4	@ (adr r2, 80073d0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80073ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073ce:	bf00      	nop
 80073d0:	080073e5 	.word	0x080073e5
 80073d4:	080073f3 	.word	0x080073f3
 80073d8:	08007409 	.word	0x08007409
 80073dc:	08007427 	.word	0x08007427
 80073e0:	08007427 	.word	0x08007427
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80073e4:	4b8e      	ldr	r3, [pc, #568]	@ (8007620 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80073e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073e8:	4a8d      	ldr	r2, [pc, #564]	@ (8007620 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80073ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80073ee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80073f0:	e01a      	b.n	8007428 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80073f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073f6:	3308      	adds	r3, #8
 80073f8:	2100      	movs	r1, #0
 80073fa:	4618      	mov	r0, r3
 80073fc:	f001 fc3c 	bl	8008c78 <RCCEx_PLL2_Config>
 8007400:	4603      	mov	r3, r0
 8007402:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007406:	e00f      	b.n	8007428 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007408:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800740c:	3328      	adds	r3, #40	@ 0x28
 800740e:	2100      	movs	r1, #0
 8007410:	4618      	mov	r0, r3
 8007412:	f001 fce3 	bl	8008ddc <RCCEx_PLL3_Config>
 8007416:	4603      	mov	r3, r0
 8007418:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800741c:	e004      	b.n	8007428 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800741e:	2301      	movs	r3, #1
 8007420:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007424:	e000      	b.n	8007428 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8007426:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007428:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800742c:	2b00      	cmp	r3, #0
 800742e:	d10a      	bne.n	8007446 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007430:	4b7b      	ldr	r3, [pc, #492]	@ (8007620 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007432:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007434:	f023 0107 	bic.w	r1, r3, #7
 8007438:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800743c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800743e:	4a78      	ldr	r2, [pc, #480]	@ (8007620 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007440:	430b      	orrs	r3, r1
 8007442:	6513      	str	r3, [r2, #80]	@ 0x50
 8007444:	e003      	b.n	800744e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007446:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800744a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800744e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007456:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800745a:	f04f 0b00 	mov.w	fp, #0
 800745e:	ea5a 030b 	orrs.w	r3, sl, fp
 8007462:	d04c      	beq.n	80074fe <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8007464:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007468:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800746a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800746e:	d030      	beq.n	80074d2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8007470:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007474:	d829      	bhi.n	80074ca <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007476:	2bc0      	cmp	r3, #192	@ 0xc0
 8007478:	d02d      	beq.n	80074d6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800747a:	2bc0      	cmp	r3, #192	@ 0xc0
 800747c:	d825      	bhi.n	80074ca <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800747e:	2b80      	cmp	r3, #128	@ 0x80
 8007480:	d018      	beq.n	80074b4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8007482:	2b80      	cmp	r3, #128	@ 0x80
 8007484:	d821      	bhi.n	80074ca <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007486:	2b00      	cmp	r3, #0
 8007488:	d002      	beq.n	8007490 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800748a:	2b40      	cmp	r3, #64	@ 0x40
 800748c:	d007      	beq.n	800749e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800748e:	e01c      	b.n	80074ca <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007490:	4b63      	ldr	r3, [pc, #396]	@ (8007620 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007492:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007494:	4a62      	ldr	r2, [pc, #392]	@ (8007620 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007496:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800749a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800749c:	e01c      	b.n	80074d8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800749e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074a2:	3308      	adds	r3, #8
 80074a4:	2100      	movs	r1, #0
 80074a6:	4618      	mov	r0, r3
 80074a8:	f001 fbe6 	bl	8008c78 <RCCEx_PLL2_Config>
 80074ac:	4603      	mov	r3, r0
 80074ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80074b2:	e011      	b.n	80074d8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80074b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074b8:	3328      	adds	r3, #40	@ 0x28
 80074ba:	2100      	movs	r1, #0
 80074bc:	4618      	mov	r0, r3
 80074be:	f001 fc8d 	bl	8008ddc <RCCEx_PLL3_Config>
 80074c2:	4603      	mov	r3, r0
 80074c4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80074c8:	e006      	b.n	80074d8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80074ca:	2301      	movs	r3, #1
 80074cc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80074d0:	e002      	b.n	80074d8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80074d2:	bf00      	nop
 80074d4:	e000      	b.n	80074d8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80074d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80074d8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d10a      	bne.n	80074f6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80074e0:	4b4f      	ldr	r3, [pc, #316]	@ (8007620 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80074e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80074e4:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80074e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80074ee:	4a4c      	ldr	r2, [pc, #304]	@ (8007620 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80074f0:	430b      	orrs	r3, r1
 80074f2:	6513      	str	r3, [r2, #80]	@ 0x50
 80074f4:	e003      	b.n	80074fe <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80074fa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80074fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007502:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007506:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800750a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800750e:	2300      	movs	r3, #0
 8007510:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8007514:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8007518:	460b      	mov	r3, r1
 800751a:	4313      	orrs	r3, r2
 800751c:	d053      	beq.n	80075c6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800751e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007522:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007526:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800752a:	d035      	beq.n	8007598 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800752c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007530:	d82e      	bhi.n	8007590 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007532:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007536:	d031      	beq.n	800759c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8007538:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800753c:	d828      	bhi.n	8007590 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800753e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007542:	d01a      	beq.n	800757a <HAL_RCCEx_PeriphCLKConfig+0x292>
 8007544:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007548:	d822      	bhi.n	8007590 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800754a:	2b00      	cmp	r3, #0
 800754c:	d003      	beq.n	8007556 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800754e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007552:	d007      	beq.n	8007564 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8007554:	e01c      	b.n	8007590 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007556:	4b32      	ldr	r3, [pc, #200]	@ (8007620 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007558:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800755a:	4a31      	ldr	r2, [pc, #196]	@ (8007620 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800755c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007560:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007562:	e01c      	b.n	800759e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007564:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007568:	3308      	adds	r3, #8
 800756a:	2100      	movs	r1, #0
 800756c:	4618      	mov	r0, r3
 800756e:	f001 fb83 	bl	8008c78 <RCCEx_PLL2_Config>
 8007572:	4603      	mov	r3, r0
 8007574:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8007578:	e011      	b.n	800759e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800757a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800757e:	3328      	adds	r3, #40	@ 0x28
 8007580:	2100      	movs	r1, #0
 8007582:	4618      	mov	r0, r3
 8007584:	f001 fc2a 	bl	8008ddc <RCCEx_PLL3_Config>
 8007588:	4603      	mov	r3, r0
 800758a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800758e:	e006      	b.n	800759e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8007590:	2301      	movs	r3, #1
 8007592:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007596:	e002      	b.n	800759e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8007598:	bf00      	nop
 800759a:	e000      	b.n	800759e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800759c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800759e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d10b      	bne.n	80075be <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80075a6:	4b1e      	ldr	r3, [pc, #120]	@ (8007620 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80075a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80075aa:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80075ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075b2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80075b6:	4a1a      	ldr	r2, [pc, #104]	@ (8007620 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80075b8:	430b      	orrs	r3, r1
 80075ba:	6593      	str	r3, [r2, #88]	@ 0x58
 80075bc:	e003      	b.n	80075c6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80075c2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80075c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075ce:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80075d2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80075d6:	2300      	movs	r3, #0
 80075d8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80075dc:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80075e0:	460b      	mov	r3, r1
 80075e2:	4313      	orrs	r3, r2
 80075e4:	d056      	beq.n	8007694 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80075e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075ea:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80075ee:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80075f2:	d038      	beq.n	8007666 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80075f4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80075f8:	d831      	bhi.n	800765e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80075fa:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80075fe:	d034      	beq.n	800766a <HAL_RCCEx_PeriphCLKConfig+0x382>
 8007600:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007604:	d82b      	bhi.n	800765e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007606:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800760a:	d01d      	beq.n	8007648 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800760c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007610:	d825      	bhi.n	800765e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007612:	2b00      	cmp	r3, #0
 8007614:	d006      	beq.n	8007624 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8007616:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800761a:	d00a      	beq.n	8007632 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800761c:	e01f      	b.n	800765e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800761e:	bf00      	nop
 8007620:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007624:	4ba2      	ldr	r3, [pc, #648]	@ (80078b0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007626:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007628:	4aa1      	ldr	r2, [pc, #644]	@ (80078b0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800762a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800762e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007630:	e01c      	b.n	800766c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007632:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007636:	3308      	adds	r3, #8
 8007638:	2100      	movs	r1, #0
 800763a:	4618      	mov	r0, r3
 800763c:	f001 fb1c 	bl	8008c78 <RCCEx_PLL2_Config>
 8007640:	4603      	mov	r3, r0
 8007642:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8007646:	e011      	b.n	800766c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007648:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800764c:	3328      	adds	r3, #40	@ 0x28
 800764e:	2100      	movs	r1, #0
 8007650:	4618      	mov	r0, r3
 8007652:	f001 fbc3 	bl	8008ddc <RCCEx_PLL3_Config>
 8007656:	4603      	mov	r3, r0
 8007658:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800765c:	e006      	b.n	800766c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800765e:	2301      	movs	r3, #1
 8007660:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007664:	e002      	b.n	800766c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8007666:	bf00      	nop
 8007668:	e000      	b.n	800766c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800766a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800766c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007670:	2b00      	cmp	r3, #0
 8007672:	d10b      	bne.n	800768c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007674:	4b8e      	ldr	r3, [pc, #568]	@ (80078b0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007676:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007678:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800767c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007680:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007684:	4a8a      	ldr	r2, [pc, #552]	@ (80078b0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007686:	430b      	orrs	r3, r1
 8007688:	6593      	str	r3, [r2, #88]	@ 0x58
 800768a:	e003      	b.n	8007694 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800768c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007690:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007694:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800769c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80076a0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80076a4:	2300      	movs	r3, #0
 80076a6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80076aa:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80076ae:	460b      	mov	r3, r1
 80076b0:	4313      	orrs	r3, r2
 80076b2:	d03a      	beq.n	800772a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80076b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80076ba:	2b30      	cmp	r3, #48	@ 0x30
 80076bc:	d01f      	beq.n	80076fe <HAL_RCCEx_PeriphCLKConfig+0x416>
 80076be:	2b30      	cmp	r3, #48	@ 0x30
 80076c0:	d819      	bhi.n	80076f6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80076c2:	2b20      	cmp	r3, #32
 80076c4:	d00c      	beq.n	80076e0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80076c6:	2b20      	cmp	r3, #32
 80076c8:	d815      	bhi.n	80076f6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d019      	beq.n	8007702 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80076ce:	2b10      	cmp	r3, #16
 80076d0:	d111      	bne.n	80076f6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80076d2:	4b77      	ldr	r3, [pc, #476]	@ (80078b0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80076d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076d6:	4a76      	ldr	r2, [pc, #472]	@ (80078b0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80076d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80076dc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80076de:	e011      	b.n	8007704 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80076e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076e4:	3308      	adds	r3, #8
 80076e6:	2102      	movs	r1, #2
 80076e8:	4618      	mov	r0, r3
 80076ea:	f001 fac5 	bl	8008c78 <RCCEx_PLL2_Config>
 80076ee:	4603      	mov	r3, r0
 80076f0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80076f4:	e006      	b.n	8007704 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80076f6:	2301      	movs	r3, #1
 80076f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80076fc:	e002      	b.n	8007704 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80076fe:	bf00      	nop
 8007700:	e000      	b.n	8007704 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8007702:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007704:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007708:	2b00      	cmp	r3, #0
 800770a:	d10a      	bne.n	8007722 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800770c:	4b68      	ldr	r3, [pc, #416]	@ (80078b0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800770e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007710:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8007714:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007718:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800771a:	4a65      	ldr	r2, [pc, #404]	@ (80078b0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800771c:	430b      	orrs	r3, r1
 800771e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007720:	e003      	b.n	800772a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007722:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007726:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800772a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800772e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007732:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8007736:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800773a:	2300      	movs	r3, #0
 800773c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007740:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8007744:	460b      	mov	r3, r1
 8007746:	4313      	orrs	r3, r2
 8007748:	d051      	beq.n	80077ee <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800774a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800774e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007750:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007754:	d035      	beq.n	80077c2 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8007756:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800775a:	d82e      	bhi.n	80077ba <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800775c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007760:	d031      	beq.n	80077c6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8007762:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007766:	d828      	bhi.n	80077ba <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007768:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800776c:	d01a      	beq.n	80077a4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800776e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007772:	d822      	bhi.n	80077ba <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007774:	2b00      	cmp	r3, #0
 8007776:	d003      	beq.n	8007780 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8007778:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800777c:	d007      	beq.n	800778e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800777e:	e01c      	b.n	80077ba <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007780:	4b4b      	ldr	r3, [pc, #300]	@ (80078b0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007782:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007784:	4a4a      	ldr	r2, [pc, #296]	@ (80078b0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007786:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800778a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800778c:	e01c      	b.n	80077c8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800778e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007792:	3308      	adds	r3, #8
 8007794:	2100      	movs	r1, #0
 8007796:	4618      	mov	r0, r3
 8007798:	f001 fa6e 	bl	8008c78 <RCCEx_PLL2_Config>
 800779c:	4603      	mov	r3, r0
 800779e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80077a2:	e011      	b.n	80077c8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80077a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077a8:	3328      	adds	r3, #40	@ 0x28
 80077aa:	2100      	movs	r1, #0
 80077ac:	4618      	mov	r0, r3
 80077ae:	f001 fb15 	bl	8008ddc <RCCEx_PLL3_Config>
 80077b2:	4603      	mov	r3, r0
 80077b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80077b8:	e006      	b.n	80077c8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80077ba:	2301      	movs	r3, #1
 80077bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80077c0:	e002      	b.n	80077c8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80077c2:	bf00      	nop
 80077c4:	e000      	b.n	80077c8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80077c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80077c8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d10a      	bne.n	80077e6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80077d0:	4b37      	ldr	r3, [pc, #220]	@ (80078b0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80077d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80077d4:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80077d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80077de:	4a34      	ldr	r2, [pc, #208]	@ (80078b0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80077e0:	430b      	orrs	r3, r1
 80077e2:	6513      	str	r3, [r2, #80]	@ 0x50
 80077e4:	e003      	b.n	80077ee <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80077ea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80077ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077f6:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80077fa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80077fe:	2300      	movs	r3, #0
 8007800:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007804:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8007808:	460b      	mov	r3, r1
 800780a:	4313      	orrs	r3, r2
 800780c:	d056      	beq.n	80078bc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800780e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007812:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007814:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007818:	d033      	beq.n	8007882 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800781a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800781e:	d82c      	bhi.n	800787a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007820:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007824:	d02f      	beq.n	8007886 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8007826:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800782a:	d826      	bhi.n	800787a <HAL_RCCEx_PeriphCLKConfig+0x592>
 800782c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007830:	d02b      	beq.n	800788a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8007832:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007836:	d820      	bhi.n	800787a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007838:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800783c:	d012      	beq.n	8007864 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800783e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007842:	d81a      	bhi.n	800787a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007844:	2b00      	cmp	r3, #0
 8007846:	d022      	beq.n	800788e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8007848:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800784c:	d115      	bne.n	800787a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800784e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007852:	3308      	adds	r3, #8
 8007854:	2101      	movs	r1, #1
 8007856:	4618      	mov	r0, r3
 8007858:	f001 fa0e 	bl	8008c78 <RCCEx_PLL2_Config>
 800785c:	4603      	mov	r3, r0
 800785e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007862:	e015      	b.n	8007890 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007864:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007868:	3328      	adds	r3, #40	@ 0x28
 800786a:	2101      	movs	r1, #1
 800786c:	4618      	mov	r0, r3
 800786e:	f001 fab5 	bl	8008ddc <RCCEx_PLL3_Config>
 8007872:	4603      	mov	r3, r0
 8007874:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007878:	e00a      	b.n	8007890 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800787a:	2301      	movs	r3, #1
 800787c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007880:	e006      	b.n	8007890 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007882:	bf00      	nop
 8007884:	e004      	b.n	8007890 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007886:	bf00      	nop
 8007888:	e002      	b.n	8007890 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800788a:	bf00      	nop
 800788c:	e000      	b.n	8007890 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800788e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007890:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007894:	2b00      	cmp	r3, #0
 8007896:	d10d      	bne.n	80078b4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007898:	4b05      	ldr	r3, [pc, #20]	@ (80078b0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800789a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800789c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80078a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078a4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80078a6:	4a02      	ldr	r2, [pc, #8]	@ (80078b0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80078a8:	430b      	orrs	r3, r1
 80078aa:	6513      	str	r3, [r2, #80]	@ 0x50
 80078ac:	e006      	b.n	80078bc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80078ae:	bf00      	nop
 80078b0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078b4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80078b8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80078bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078c4:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80078c8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80078cc:	2300      	movs	r3, #0
 80078ce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80078d2:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80078d6:	460b      	mov	r3, r1
 80078d8:	4313      	orrs	r3, r2
 80078da:	d055      	beq.n	8007988 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80078dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078e0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80078e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80078e8:	d033      	beq.n	8007952 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80078ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80078ee:	d82c      	bhi.n	800794a <HAL_RCCEx_PeriphCLKConfig+0x662>
 80078f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80078f4:	d02f      	beq.n	8007956 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80078f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80078fa:	d826      	bhi.n	800794a <HAL_RCCEx_PeriphCLKConfig+0x662>
 80078fc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007900:	d02b      	beq.n	800795a <HAL_RCCEx_PeriphCLKConfig+0x672>
 8007902:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007906:	d820      	bhi.n	800794a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007908:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800790c:	d012      	beq.n	8007934 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800790e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007912:	d81a      	bhi.n	800794a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007914:	2b00      	cmp	r3, #0
 8007916:	d022      	beq.n	800795e <HAL_RCCEx_PeriphCLKConfig+0x676>
 8007918:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800791c:	d115      	bne.n	800794a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800791e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007922:	3308      	adds	r3, #8
 8007924:	2101      	movs	r1, #1
 8007926:	4618      	mov	r0, r3
 8007928:	f001 f9a6 	bl	8008c78 <RCCEx_PLL2_Config>
 800792c:	4603      	mov	r3, r0
 800792e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007932:	e015      	b.n	8007960 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007934:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007938:	3328      	adds	r3, #40	@ 0x28
 800793a:	2101      	movs	r1, #1
 800793c:	4618      	mov	r0, r3
 800793e:	f001 fa4d 	bl	8008ddc <RCCEx_PLL3_Config>
 8007942:	4603      	mov	r3, r0
 8007944:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007948:	e00a      	b.n	8007960 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800794a:	2301      	movs	r3, #1
 800794c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007950:	e006      	b.n	8007960 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007952:	bf00      	nop
 8007954:	e004      	b.n	8007960 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007956:	bf00      	nop
 8007958:	e002      	b.n	8007960 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800795a:	bf00      	nop
 800795c:	e000      	b.n	8007960 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800795e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007960:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007964:	2b00      	cmp	r3, #0
 8007966:	d10b      	bne.n	8007980 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007968:	4ba3      	ldr	r3, [pc, #652]	@ (8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800796a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800796c:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8007970:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007974:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007978:	4a9f      	ldr	r2, [pc, #636]	@ (8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800797a:	430b      	orrs	r3, r1
 800797c:	6593      	str	r3, [r2, #88]	@ 0x58
 800797e:	e003      	b.n	8007988 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007980:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007984:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007988:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800798c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007990:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8007994:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007998:	2300      	movs	r3, #0
 800799a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800799e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80079a2:	460b      	mov	r3, r1
 80079a4:	4313      	orrs	r3, r2
 80079a6:	d037      	beq.n	8007a18 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80079a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80079ae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80079b2:	d00e      	beq.n	80079d2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80079b4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80079b8:	d816      	bhi.n	80079e8 <HAL_RCCEx_PeriphCLKConfig+0x700>
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d018      	beq.n	80079f0 <HAL_RCCEx_PeriphCLKConfig+0x708>
 80079be:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80079c2:	d111      	bne.n	80079e8 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80079c4:	4b8c      	ldr	r3, [pc, #560]	@ (8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80079c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079c8:	4a8b      	ldr	r2, [pc, #556]	@ (8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80079ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80079ce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80079d0:	e00f      	b.n	80079f2 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80079d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079d6:	3308      	adds	r3, #8
 80079d8:	2101      	movs	r1, #1
 80079da:	4618      	mov	r0, r3
 80079dc:	f001 f94c 	bl	8008c78 <RCCEx_PLL2_Config>
 80079e0:	4603      	mov	r3, r0
 80079e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80079e6:	e004      	b.n	80079f2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80079e8:	2301      	movs	r3, #1
 80079ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80079ee:	e000      	b.n	80079f2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80079f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80079f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d10a      	bne.n	8007a10 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80079fa:	4b7f      	ldr	r3, [pc, #508]	@ (8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80079fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80079fe:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8007a02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007a08:	4a7b      	ldr	r2, [pc, #492]	@ (8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007a0a:	430b      	orrs	r3, r1
 8007a0c:	6513      	str	r3, [r2, #80]	@ 0x50
 8007a0e:	e003      	b.n	8007a18 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a10:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a14:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007a18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a20:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8007a24:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007a28:	2300      	movs	r3, #0
 8007a2a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8007a2e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8007a32:	460b      	mov	r3, r1
 8007a34:	4313      	orrs	r3, r2
 8007a36:	d039      	beq.n	8007aac <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8007a38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a3c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007a3e:	2b03      	cmp	r3, #3
 8007a40:	d81c      	bhi.n	8007a7c <HAL_RCCEx_PeriphCLKConfig+0x794>
 8007a42:	a201      	add	r2, pc, #4	@ (adr r2, 8007a48 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8007a44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a48:	08007a85 	.word	0x08007a85
 8007a4c:	08007a59 	.word	0x08007a59
 8007a50:	08007a67 	.word	0x08007a67
 8007a54:	08007a85 	.word	0x08007a85
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007a58:	4b67      	ldr	r3, [pc, #412]	@ (8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007a5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a5c:	4a66      	ldr	r2, [pc, #408]	@ (8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007a5e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007a62:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007a64:	e00f      	b.n	8007a86 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007a66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a6a:	3308      	adds	r3, #8
 8007a6c:	2102      	movs	r1, #2
 8007a6e:	4618      	mov	r0, r3
 8007a70:	f001 f902 	bl	8008c78 <RCCEx_PLL2_Config>
 8007a74:	4603      	mov	r3, r0
 8007a76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007a7a:	e004      	b.n	8007a86 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007a7c:	2301      	movs	r3, #1
 8007a7e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007a82:	e000      	b.n	8007a86 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8007a84:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007a86:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d10a      	bne.n	8007aa4 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007a8e:	4b5a      	ldr	r3, [pc, #360]	@ (8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007a90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007a92:	f023 0103 	bic.w	r1, r3, #3
 8007a96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a9a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007a9c:	4a56      	ldr	r2, [pc, #344]	@ (8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007a9e:	430b      	orrs	r3, r1
 8007aa0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007aa2:	e003      	b.n	8007aac <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007aa4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007aa8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007aac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ab4:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8007ab8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007abc:	2300      	movs	r3, #0
 8007abe:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007ac2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8007ac6:	460b      	mov	r3, r1
 8007ac8:	4313      	orrs	r3, r2
 8007aca:	f000 809f 	beq.w	8007c0c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007ace:	4b4b      	ldr	r3, [pc, #300]	@ (8007bfc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	4a4a      	ldr	r2, [pc, #296]	@ (8007bfc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007ad4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007ad8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007ada:	f7fa fc5d 	bl	8002398 <HAL_GetTick>
 8007ade:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007ae2:	e00b      	b.n	8007afc <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007ae4:	f7fa fc58 	bl	8002398 <HAL_GetTick>
 8007ae8:	4602      	mov	r2, r0
 8007aea:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8007aee:	1ad3      	subs	r3, r2, r3
 8007af0:	2b64      	cmp	r3, #100	@ 0x64
 8007af2:	d903      	bls.n	8007afc <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8007af4:	2303      	movs	r3, #3
 8007af6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007afa:	e005      	b.n	8007b08 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007afc:	4b3f      	ldr	r3, [pc, #252]	@ (8007bfc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d0ed      	beq.n	8007ae4 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8007b08:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d179      	bne.n	8007c04 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007b10:	4b39      	ldr	r3, [pc, #228]	@ (8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007b12:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007b14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b18:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007b1c:	4053      	eors	r3, r2
 8007b1e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d015      	beq.n	8007b52 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007b26:	4b34      	ldr	r3, [pc, #208]	@ (8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007b28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b2a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007b2e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007b32:	4b31      	ldr	r3, [pc, #196]	@ (8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007b34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b36:	4a30      	ldr	r2, [pc, #192]	@ (8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007b38:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007b3c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007b3e:	4b2e      	ldr	r3, [pc, #184]	@ (8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007b40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b42:	4a2d      	ldr	r2, [pc, #180]	@ (8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007b44:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007b48:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007b4a:	4a2b      	ldr	r2, [pc, #172]	@ (8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007b4c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8007b50:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007b52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b56:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007b5a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007b5e:	d118      	bne.n	8007b92 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b60:	f7fa fc1a 	bl	8002398 <HAL_GetTick>
 8007b64:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007b68:	e00d      	b.n	8007b86 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007b6a:	f7fa fc15 	bl	8002398 <HAL_GetTick>
 8007b6e:	4602      	mov	r2, r0
 8007b70:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8007b74:	1ad2      	subs	r2, r2, r3
 8007b76:	f241 3388 	movw	r3, #5000	@ 0x1388
 8007b7a:	429a      	cmp	r2, r3
 8007b7c:	d903      	bls.n	8007b86 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8007b7e:	2303      	movs	r3, #3
 8007b80:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8007b84:	e005      	b.n	8007b92 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007b86:	4b1c      	ldr	r3, [pc, #112]	@ (8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007b88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b8a:	f003 0302 	and.w	r3, r3, #2
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d0eb      	beq.n	8007b6a <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8007b92:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d129      	bne.n	8007bee <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007b9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b9e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007ba2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007ba6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007baa:	d10e      	bne.n	8007bca <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8007bac:	4b12      	ldr	r3, [pc, #72]	@ (8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007bae:	691b      	ldr	r3, [r3, #16]
 8007bb0:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8007bb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bb8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007bbc:	091a      	lsrs	r2, r3, #4
 8007bbe:	4b10      	ldr	r3, [pc, #64]	@ (8007c00 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8007bc0:	4013      	ands	r3, r2
 8007bc2:	4a0d      	ldr	r2, [pc, #52]	@ (8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007bc4:	430b      	orrs	r3, r1
 8007bc6:	6113      	str	r3, [r2, #16]
 8007bc8:	e005      	b.n	8007bd6 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8007bca:	4b0b      	ldr	r3, [pc, #44]	@ (8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007bcc:	691b      	ldr	r3, [r3, #16]
 8007bce:	4a0a      	ldr	r2, [pc, #40]	@ (8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007bd0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007bd4:	6113      	str	r3, [r2, #16]
 8007bd6:	4b08      	ldr	r3, [pc, #32]	@ (8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007bd8:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8007bda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bde:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007be2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007be6:	4a04      	ldr	r2, [pc, #16]	@ (8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007be8:	430b      	orrs	r3, r1
 8007bea:	6713      	str	r3, [r2, #112]	@ 0x70
 8007bec:	e00e      	b.n	8007c0c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007bee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007bf2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8007bf6:	e009      	b.n	8007c0c <HAL_RCCEx_PeriphCLKConfig+0x924>
 8007bf8:	58024400 	.word	0x58024400
 8007bfc:	58024800 	.word	0x58024800
 8007c00:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c04:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007c08:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007c0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c14:	f002 0301 	and.w	r3, r2, #1
 8007c18:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007c1c:	2300      	movs	r3, #0
 8007c1e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007c22:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007c26:	460b      	mov	r3, r1
 8007c28:	4313      	orrs	r3, r2
 8007c2a:	f000 8089 	beq.w	8007d40 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8007c2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c32:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007c34:	2b28      	cmp	r3, #40	@ 0x28
 8007c36:	d86b      	bhi.n	8007d10 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8007c38:	a201      	add	r2, pc, #4	@ (adr r2, 8007c40 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007c3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c3e:	bf00      	nop
 8007c40:	08007d19 	.word	0x08007d19
 8007c44:	08007d11 	.word	0x08007d11
 8007c48:	08007d11 	.word	0x08007d11
 8007c4c:	08007d11 	.word	0x08007d11
 8007c50:	08007d11 	.word	0x08007d11
 8007c54:	08007d11 	.word	0x08007d11
 8007c58:	08007d11 	.word	0x08007d11
 8007c5c:	08007d11 	.word	0x08007d11
 8007c60:	08007ce5 	.word	0x08007ce5
 8007c64:	08007d11 	.word	0x08007d11
 8007c68:	08007d11 	.word	0x08007d11
 8007c6c:	08007d11 	.word	0x08007d11
 8007c70:	08007d11 	.word	0x08007d11
 8007c74:	08007d11 	.word	0x08007d11
 8007c78:	08007d11 	.word	0x08007d11
 8007c7c:	08007d11 	.word	0x08007d11
 8007c80:	08007cfb 	.word	0x08007cfb
 8007c84:	08007d11 	.word	0x08007d11
 8007c88:	08007d11 	.word	0x08007d11
 8007c8c:	08007d11 	.word	0x08007d11
 8007c90:	08007d11 	.word	0x08007d11
 8007c94:	08007d11 	.word	0x08007d11
 8007c98:	08007d11 	.word	0x08007d11
 8007c9c:	08007d11 	.word	0x08007d11
 8007ca0:	08007d19 	.word	0x08007d19
 8007ca4:	08007d11 	.word	0x08007d11
 8007ca8:	08007d11 	.word	0x08007d11
 8007cac:	08007d11 	.word	0x08007d11
 8007cb0:	08007d11 	.word	0x08007d11
 8007cb4:	08007d11 	.word	0x08007d11
 8007cb8:	08007d11 	.word	0x08007d11
 8007cbc:	08007d11 	.word	0x08007d11
 8007cc0:	08007d19 	.word	0x08007d19
 8007cc4:	08007d11 	.word	0x08007d11
 8007cc8:	08007d11 	.word	0x08007d11
 8007ccc:	08007d11 	.word	0x08007d11
 8007cd0:	08007d11 	.word	0x08007d11
 8007cd4:	08007d11 	.word	0x08007d11
 8007cd8:	08007d11 	.word	0x08007d11
 8007cdc:	08007d11 	.word	0x08007d11
 8007ce0:	08007d19 	.word	0x08007d19
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007ce4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ce8:	3308      	adds	r3, #8
 8007cea:	2101      	movs	r1, #1
 8007cec:	4618      	mov	r0, r3
 8007cee:	f000 ffc3 	bl	8008c78 <RCCEx_PLL2_Config>
 8007cf2:	4603      	mov	r3, r0
 8007cf4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007cf8:	e00f      	b.n	8007d1a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007cfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cfe:	3328      	adds	r3, #40	@ 0x28
 8007d00:	2101      	movs	r1, #1
 8007d02:	4618      	mov	r0, r3
 8007d04:	f001 f86a 	bl	8008ddc <RCCEx_PLL3_Config>
 8007d08:	4603      	mov	r3, r0
 8007d0a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007d0e:	e004      	b.n	8007d1a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007d10:	2301      	movs	r3, #1
 8007d12:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007d16:	e000      	b.n	8007d1a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8007d18:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007d1a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d10a      	bne.n	8007d38 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007d22:	4bbf      	ldr	r3, [pc, #764]	@ (8008020 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007d24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d26:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8007d2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d2e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007d30:	4abb      	ldr	r2, [pc, #748]	@ (8008020 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007d32:	430b      	orrs	r3, r1
 8007d34:	6553      	str	r3, [r2, #84]	@ 0x54
 8007d36:	e003      	b.n	8007d40 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d38:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007d3c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007d40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d48:	f002 0302 	and.w	r3, r2, #2
 8007d4c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007d50:	2300      	movs	r3, #0
 8007d52:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8007d56:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8007d5a:	460b      	mov	r3, r1
 8007d5c:	4313      	orrs	r3, r2
 8007d5e:	d041      	beq.n	8007de4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8007d60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d64:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007d66:	2b05      	cmp	r3, #5
 8007d68:	d824      	bhi.n	8007db4 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8007d6a:	a201      	add	r2, pc, #4	@ (adr r2, 8007d70 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8007d6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d70:	08007dbd 	.word	0x08007dbd
 8007d74:	08007d89 	.word	0x08007d89
 8007d78:	08007d9f 	.word	0x08007d9f
 8007d7c:	08007dbd 	.word	0x08007dbd
 8007d80:	08007dbd 	.word	0x08007dbd
 8007d84:	08007dbd 	.word	0x08007dbd
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007d88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d8c:	3308      	adds	r3, #8
 8007d8e:	2101      	movs	r1, #1
 8007d90:	4618      	mov	r0, r3
 8007d92:	f000 ff71 	bl	8008c78 <RCCEx_PLL2_Config>
 8007d96:	4603      	mov	r3, r0
 8007d98:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007d9c:	e00f      	b.n	8007dbe <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007d9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007da2:	3328      	adds	r3, #40	@ 0x28
 8007da4:	2101      	movs	r1, #1
 8007da6:	4618      	mov	r0, r3
 8007da8:	f001 f818 	bl	8008ddc <RCCEx_PLL3_Config>
 8007dac:	4603      	mov	r3, r0
 8007dae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007db2:	e004      	b.n	8007dbe <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007db4:	2301      	movs	r3, #1
 8007db6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007dba:	e000      	b.n	8007dbe <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8007dbc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007dbe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d10a      	bne.n	8007ddc <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007dc6:	4b96      	ldr	r3, [pc, #600]	@ (8008020 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007dc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007dca:	f023 0107 	bic.w	r1, r3, #7
 8007dce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007dd2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007dd4:	4a92      	ldr	r2, [pc, #584]	@ (8008020 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007dd6:	430b      	orrs	r3, r1
 8007dd8:	6553      	str	r3, [r2, #84]	@ 0x54
 8007dda:	e003      	b.n	8007de4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ddc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007de0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007de4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007de8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dec:	f002 0304 	and.w	r3, r2, #4
 8007df0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007df4:	2300      	movs	r3, #0
 8007df6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007dfa:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8007dfe:	460b      	mov	r3, r1
 8007e00:	4313      	orrs	r3, r2
 8007e02:	d044      	beq.n	8007e8e <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8007e04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e08:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007e0c:	2b05      	cmp	r3, #5
 8007e0e:	d825      	bhi.n	8007e5c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8007e10:	a201      	add	r2, pc, #4	@ (adr r2, 8007e18 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8007e12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e16:	bf00      	nop
 8007e18:	08007e65 	.word	0x08007e65
 8007e1c:	08007e31 	.word	0x08007e31
 8007e20:	08007e47 	.word	0x08007e47
 8007e24:	08007e65 	.word	0x08007e65
 8007e28:	08007e65 	.word	0x08007e65
 8007e2c:	08007e65 	.word	0x08007e65
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007e30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e34:	3308      	adds	r3, #8
 8007e36:	2101      	movs	r1, #1
 8007e38:	4618      	mov	r0, r3
 8007e3a:	f000 ff1d 	bl	8008c78 <RCCEx_PLL2_Config>
 8007e3e:	4603      	mov	r3, r0
 8007e40:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007e44:	e00f      	b.n	8007e66 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007e46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e4a:	3328      	adds	r3, #40	@ 0x28
 8007e4c:	2101      	movs	r1, #1
 8007e4e:	4618      	mov	r0, r3
 8007e50:	f000 ffc4 	bl	8008ddc <RCCEx_PLL3_Config>
 8007e54:	4603      	mov	r3, r0
 8007e56:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007e5a:	e004      	b.n	8007e66 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007e5c:	2301      	movs	r3, #1
 8007e5e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007e62:	e000      	b.n	8007e66 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8007e64:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007e66:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d10b      	bne.n	8007e86 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007e6e:	4b6c      	ldr	r3, [pc, #432]	@ (8008020 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007e70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007e72:	f023 0107 	bic.w	r1, r3, #7
 8007e76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007e7e:	4a68      	ldr	r2, [pc, #416]	@ (8008020 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007e80:	430b      	orrs	r3, r1
 8007e82:	6593      	str	r3, [r2, #88]	@ 0x58
 8007e84:	e003      	b.n	8007e8e <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e86:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007e8a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007e8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e96:	f002 0320 	and.w	r3, r2, #32
 8007e9a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007ea4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007ea8:	460b      	mov	r3, r1
 8007eaa:	4313      	orrs	r3, r2
 8007eac:	d055      	beq.n	8007f5a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8007eae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007eb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007eb6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007eba:	d033      	beq.n	8007f24 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8007ebc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007ec0:	d82c      	bhi.n	8007f1c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007ec2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007ec6:	d02f      	beq.n	8007f28 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8007ec8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007ecc:	d826      	bhi.n	8007f1c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007ece:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007ed2:	d02b      	beq.n	8007f2c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8007ed4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007ed8:	d820      	bhi.n	8007f1c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007eda:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007ede:	d012      	beq.n	8007f06 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8007ee0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007ee4:	d81a      	bhi.n	8007f1c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d022      	beq.n	8007f30 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8007eea:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007eee:	d115      	bne.n	8007f1c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007ef0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ef4:	3308      	adds	r3, #8
 8007ef6:	2100      	movs	r1, #0
 8007ef8:	4618      	mov	r0, r3
 8007efa:	f000 febd 	bl	8008c78 <RCCEx_PLL2_Config>
 8007efe:	4603      	mov	r3, r0
 8007f00:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007f04:	e015      	b.n	8007f32 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007f06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f0a:	3328      	adds	r3, #40	@ 0x28
 8007f0c:	2102      	movs	r1, #2
 8007f0e:	4618      	mov	r0, r3
 8007f10:	f000 ff64 	bl	8008ddc <RCCEx_PLL3_Config>
 8007f14:	4603      	mov	r3, r0
 8007f16:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007f1a:	e00a      	b.n	8007f32 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007f1c:	2301      	movs	r3, #1
 8007f1e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007f22:	e006      	b.n	8007f32 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007f24:	bf00      	nop
 8007f26:	e004      	b.n	8007f32 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007f28:	bf00      	nop
 8007f2a:	e002      	b.n	8007f32 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007f2c:	bf00      	nop
 8007f2e:	e000      	b.n	8007f32 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007f30:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f32:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d10b      	bne.n	8007f52 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007f3a:	4b39      	ldr	r3, [pc, #228]	@ (8008020 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007f3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f3e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8007f42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007f4a:	4a35      	ldr	r2, [pc, #212]	@ (8008020 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007f4c:	430b      	orrs	r3, r1
 8007f4e:	6553      	str	r3, [r2, #84]	@ 0x54
 8007f50:	e003      	b.n	8007f5a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f52:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f56:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007f5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f62:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8007f66:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007f70:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8007f74:	460b      	mov	r3, r1
 8007f76:	4313      	orrs	r3, r2
 8007f78:	d058      	beq.n	800802c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8007f7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f7e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007f82:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007f86:	d033      	beq.n	8007ff0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8007f88:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007f8c:	d82c      	bhi.n	8007fe8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007f8e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007f92:	d02f      	beq.n	8007ff4 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8007f94:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007f98:	d826      	bhi.n	8007fe8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007f9a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007f9e:	d02b      	beq.n	8007ff8 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8007fa0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007fa4:	d820      	bhi.n	8007fe8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007fa6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007faa:	d012      	beq.n	8007fd2 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8007fac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007fb0:	d81a      	bhi.n	8007fe8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d022      	beq.n	8007ffc <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8007fb6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007fba:	d115      	bne.n	8007fe8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007fbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fc0:	3308      	adds	r3, #8
 8007fc2:	2100      	movs	r1, #0
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	f000 fe57 	bl	8008c78 <RCCEx_PLL2_Config>
 8007fca:	4603      	mov	r3, r0
 8007fcc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007fd0:	e015      	b.n	8007ffe <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007fd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fd6:	3328      	adds	r3, #40	@ 0x28
 8007fd8:	2102      	movs	r1, #2
 8007fda:	4618      	mov	r0, r3
 8007fdc:	f000 fefe 	bl	8008ddc <RCCEx_PLL3_Config>
 8007fe0:	4603      	mov	r3, r0
 8007fe2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007fe6:	e00a      	b.n	8007ffe <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007fe8:	2301      	movs	r3, #1
 8007fea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007fee:	e006      	b.n	8007ffe <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007ff0:	bf00      	nop
 8007ff2:	e004      	b.n	8007ffe <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007ff4:	bf00      	nop
 8007ff6:	e002      	b.n	8007ffe <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007ff8:	bf00      	nop
 8007ffa:	e000      	b.n	8007ffe <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007ffc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007ffe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008002:	2b00      	cmp	r3, #0
 8008004:	d10e      	bne.n	8008024 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008006:	4b06      	ldr	r3, [pc, #24]	@ (8008020 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008008:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800800a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800800e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008012:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008016:	4a02      	ldr	r2, [pc, #8]	@ (8008020 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008018:	430b      	orrs	r3, r1
 800801a:	6593      	str	r3, [r2, #88]	@ 0x58
 800801c:	e006      	b.n	800802c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800801e:	bf00      	nop
 8008020:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008024:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008028:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800802c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008030:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008034:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8008038:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800803c:	2300      	movs	r3, #0
 800803e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008042:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8008046:	460b      	mov	r3, r1
 8008048:	4313      	orrs	r3, r2
 800804a:	d055      	beq.n	80080f8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800804c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008050:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008054:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8008058:	d033      	beq.n	80080c2 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800805a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800805e:	d82c      	bhi.n	80080ba <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008060:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008064:	d02f      	beq.n	80080c6 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8008066:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800806a:	d826      	bhi.n	80080ba <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800806c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8008070:	d02b      	beq.n	80080ca <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8008072:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8008076:	d820      	bhi.n	80080ba <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008078:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800807c:	d012      	beq.n	80080a4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800807e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008082:	d81a      	bhi.n	80080ba <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008084:	2b00      	cmp	r3, #0
 8008086:	d022      	beq.n	80080ce <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8008088:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800808c:	d115      	bne.n	80080ba <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800808e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008092:	3308      	adds	r3, #8
 8008094:	2100      	movs	r1, #0
 8008096:	4618      	mov	r0, r3
 8008098:	f000 fdee 	bl	8008c78 <RCCEx_PLL2_Config>
 800809c:	4603      	mov	r3, r0
 800809e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80080a2:	e015      	b.n	80080d0 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80080a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080a8:	3328      	adds	r3, #40	@ 0x28
 80080aa:	2102      	movs	r1, #2
 80080ac:	4618      	mov	r0, r3
 80080ae:	f000 fe95 	bl	8008ddc <RCCEx_PLL3_Config>
 80080b2:	4603      	mov	r3, r0
 80080b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80080b8:	e00a      	b.n	80080d0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80080ba:	2301      	movs	r3, #1
 80080bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80080c0:	e006      	b.n	80080d0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80080c2:	bf00      	nop
 80080c4:	e004      	b.n	80080d0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80080c6:	bf00      	nop
 80080c8:	e002      	b.n	80080d0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80080ca:	bf00      	nop
 80080cc:	e000      	b.n	80080d0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80080ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 80080d0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d10b      	bne.n	80080f0 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80080d8:	4ba1      	ldr	r3, [pc, #644]	@ (8008360 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80080da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80080dc:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80080e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080e4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80080e8:	4a9d      	ldr	r2, [pc, #628]	@ (8008360 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80080ea:	430b      	orrs	r3, r1
 80080ec:	6593      	str	r3, [r2, #88]	@ 0x58
 80080ee:	e003      	b.n	80080f8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080f0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80080f4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80080f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008100:	f002 0308 	and.w	r3, r2, #8
 8008104:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008108:	2300      	movs	r3, #0
 800810a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800810e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8008112:	460b      	mov	r3, r1
 8008114:	4313      	orrs	r3, r2
 8008116:	d01e      	beq.n	8008156 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8008118:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800811c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008120:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008124:	d10c      	bne.n	8008140 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008126:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800812a:	3328      	adds	r3, #40	@ 0x28
 800812c:	2102      	movs	r1, #2
 800812e:	4618      	mov	r0, r3
 8008130:	f000 fe54 	bl	8008ddc <RCCEx_PLL3_Config>
 8008134:	4603      	mov	r3, r0
 8008136:	2b00      	cmp	r3, #0
 8008138:	d002      	beq.n	8008140 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800813a:	2301      	movs	r3, #1
 800813c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8008140:	4b87      	ldr	r3, [pc, #540]	@ (8008360 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008142:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008144:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008148:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800814c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008150:	4a83      	ldr	r2, [pc, #524]	@ (8008360 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008152:	430b      	orrs	r3, r1
 8008154:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008156:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800815a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800815e:	f002 0310 	and.w	r3, r2, #16
 8008162:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008166:	2300      	movs	r3, #0
 8008168:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800816c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8008170:	460b      	mov	r3, r1
 8008172:	4313      	orrs	r3, r2
 8008174:	d01e      	beq.n	80081b4 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8008176:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800817a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800817e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008182:	d10c      	bne.n	800819e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008184:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008188:	3328      	adds	r3, #40	@ 0x28
 800818a:	2102      	movs	r1, #2
 800818c:	4618      	mov	r0, r3
 800818e:	f000 fe25 	bl	8008ddc <RCCEx_PLL3_Config>
 8008192:	4603      	mov	r3, r0
 8008194:	2b00      	cmp	r3, #0
 8008196:	d002      	beq.n	800819e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8008198:	2301      	movs	r3, #1
 800819a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800819e:	4b70      	ldr	r3, [pc, #448]	@ (8008360 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80081a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80081a2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80081a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80081ae:	4a6c      	ldr	r2, [pc, #432]	@ (8008360 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80081b0:	430b      	orrs	r3, r1
 80081b2:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80081b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081bc:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80081c0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80081c4:	2300      	movs	r3, #0
 80081c6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80081ca:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80081ce:	460b      	mov	r3, r1
 80081d0:	4313      	orrs	r3, r2
 80081d2:	d03e      	beq.n	8008252 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80081d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081d8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80081dc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80081e0:	d022      	beq.n	8008228 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80081e2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80081e6:	d81b      	bhi.n	8008220 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d003      	beq.n	80081f4 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80081ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80081f0:	d00b      	beq.n	800820a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80081f2:	e015      	b.n	8008220 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80081f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081f8:	3308      	adds	r3, #8
 80081fa:	2100      	movs	r1, #0
 80081fc:	4618      	mov	r0, r3
 80081fe:	f000 fd3b 	bl	8008c78 <RCCEx_PLL2_Config>
 8008202:	4603      	mov	r3, r0
 8008204:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008208:	e00f      	b.n	800822a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800820a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800820e:	3328      	adds	r3, #40	@ 0x28
 8008210:	2102      	movs	r1, #2
 8008212:	4618      	mov	r0, r3
 8008214:	f000 fde2 	bl	8008ddc <RCCEx_PLL3_Config>
 8008218:	4603      	mov	r3, r0
 800821a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800821e:	e004      	b.n	800822a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008220:	2301      	movs	r3, #1
 8008222:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008226:	e000      	b.n	800822a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8008228:	bf00      	nop
    }

    if (ret == HAL_OK)
 800822a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800822e:	2b00      	cmp	r3, #0
 8008230:	d10b      	bne.n	800824a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008232:	4b4b      	ldr	r3, [pc, #300]	@ (8008360 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008234:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008236:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800823a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800823e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008242:	4a47      	ldr	r2, [pc, #284]	@ (8008360 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008244:	430b      	orrs	r3, r1
 8008246:	6593      	str	r3, [r2, #88]	@ 0x58
 8008248:	e003      	b.n	8008252 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800824a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800824e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008252:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800825a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800825e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008260:	2300      	movs	r3, #0
 8008262:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008264:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8008268:	460b      	mov	r3, r1
 800826a:	4313      	orrs	r3, r2
 800826c:	d03b      	beq.n	80082e6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800826e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008272:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008276:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800827a:	d01f      	beq.n	80082bc <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800827c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008280:	d818      	bhi.n	80082b4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8008282:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008286:	d003      	beq.n	8008290 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8008288:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800828c:	d007      	beq.n	800829e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800828e:	e011      	b.n	80082b4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008290:	4b33      	ldr	r3, [pc, #204]	@ (8008360 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008292:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008294:	4a32      	ldr	r2, [pc, #200]	@ (8008360 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008296:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800829a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800829c:	e00f      	b.n	80082be <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800829e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082a2:	3328      	adds	r3, #40	@ 0x28
 80082a4:	2101      	movs	r1, #1
 80082a6:	4618      	mov	r0, r3
 80082a8:	f000 fd98 	bl	8008ddc <RCCEx_PLL3_Config>
 80082ac:	4603      	mov	r3, r0
 80082ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80082b2:	e004      	b.n	80082be <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80082b4:	2301      	movs	r3, #1
 80082b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80082ba:	e000      	b.n	80082be <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80082bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80082be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d10b      	bne.n	80082de <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80082c6:	4b26      	ldr	r3, [pc, #152]	@ (8008360 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80082c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80082ca:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80082ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80082d6:	4a22      	ldr	r2, [pc, #136]	@ (8008360 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80082d8:	430b      	orrs	r3, r1
 80082da:	6553      	str	r3, [r2, #84]	@ 0x54
 80082dc:	e003      	b.n	80082e6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80082e2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80082e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082ee:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80082f2:	673b      	str	r3, [r7, #112]	@ 0x70
 80082f4:	2300      	movs	r3, #0
 80082f6:	677b      	str	r3, [r7, #116]	@ 0x74
 80082f8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80082fc:	460b      	mov	r3, r1
 80082fe:	4313      	orrs	r3, r2
 8008300:	d034      	beq.n	800836c <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8008302:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008306:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008308:	2b00      	cmp	r3, #0
 800830a:	d003      	beq.n	8008314 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800830c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008310:	d007      	beq.n	8008322 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8008312:	e011      	b.n	8008338 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008314:	4b12      	ldr	r3, [pc, #72]	@ (8008360 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008316:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008318:	4a11      	ldr	r2, [pc, #68]	@ (8008360 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800831a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800831e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008320:	e00e      	b.n	8008340 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008322:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008326:	3308      	adds	r3, #8
 8008328:	2102      	movs	r1, #2
 800832a:	4618      	mov	r0, r3
 800832c:	f000 fca4 	bl	8008c78 <RCCEx_PLL2_Config>
 8008330:	4603      	mov	r3, r0
 8008332:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008336:	e003      	b.n	8008340 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8008338:	2301      	movs	r3, #1
 800833a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800833e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008340:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008344:	2b00      	cmp	r3, #0
 8008346:	d10d      	bne.n	8008364 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8008348:	4b05      	ldr	r3, [pc, #20]	@ (8008360 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800834a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800834c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008350:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008354:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008356:	4a02      	ldr	r2, [pc, #8]	@ (8008360 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008358:	430b      	orrs	r3, r1
 800835a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800835c:	e006      	b.n	800836c <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800835e:	bf00      	nop
 8008360:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008364:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008368:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800836c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008374:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8008378:	66bb      	str	r3, [r7, #104]	@ 0x68
 800837a:	2300      	movs	r3, #0
 800837c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800837e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8008382:	460b      	mov	r3, r1
 8008384:	4313      	orrs	r3, r2
 8008386:	d00c      	beq.n	80083a2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008388:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800838c:	3328      	adds	r3, #40	@ 0x28
 800838e:	2102      	movs	r1, #2
 8008390:	4618      	mov	r0, r3
 8008392:	f000 fd23 	bl	8008ddc <RCCEx_PLL3_Config>
 8008396:	4603      	mov	r3, r0
 8008398:	2b00      	cmp	r3, #0
 800839a:	d002      	beq.n	80083a2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800839c:	2301      	movs	r3, #1
 800839e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80083a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083aa:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80083ae:	663b      	str	r3, [r7, #96]	@ 0x60
 80083b0:	2300      	movs	r3, #0
 80083b2:	667b      	str	r3, [r7, #100]	@ 0x64
 80083b4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80083b8:	460b      	mov	r3, r1
 80083ba:	4313      	orrs	r3, r2
 80083bc:	d038      	beq.n	8008430 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80083be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80083c6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80083ca:	d018      	beq.n	80083fe <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80083cc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80083d0:	d811      	bhi.n	80083f6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80083d2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80083d6:	d014      	beq.n	8008402 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80083d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80083dc:	d80b      	bhi.n	80083f6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d011      	beq.n	8008406 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80083e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80083e6:	d106      	bne.n	80083f6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80083e8:	4bc3      	ldr	r3, [pc, #780]	@ (80086f8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80083ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083ec:	4ac2      	ldr	r2, [pc, #776]	@ (80086f8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80083ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80083f2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80083f4:	e008      	b.n	8008408 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80083f6:	2301      	movs	r3, #1
 80083f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80083fc:	e004      	b.n	8008408 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80083fe:	bf00      	nop
 8008400:	e002      	b.n	8008408 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008402:	bf00      	nop
 8008404:	e000      	b.n	8008408 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008406:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008408:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800840c:	2b00      	cmp	r3, #0
 800840e:	d10b      	bne.n	8008428 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008410:	4bb9      	ldr	r3, [pc, #740]	@ (80086f8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008412:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008414:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008418:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800841c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008420:	4ab5      	ldr	r2, [pc, #724]	@ (80086f8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008422:	430b      	orrs	r3, r1
 8008424:	6553      	str	r3, [r2, #84]	@ 0x54
 8008426:	e003      	b.n	8008430 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008428:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800842c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008430:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008434:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008438:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800843c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800843e:	2300      	movs	r3, #0
 8008440:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008442:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8008446:	460b      	mov	r3, r1
 8008448:	4313      	orrs	r3, r2
 800844a:	d009      	beq.n	8008460 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800844c:	4baa      	ldr	r3, [pc, #680]	@ (80086f8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800844e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008450:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8008454:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008458:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800845a:	4aa7      	ldr	r2, [pc, #668]	@ (80086f8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800845c:	430b      	orrs	r3, r1
 800845e:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8008460:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008468:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800846c:	653b      	str	r3, [r7, #80]	@ 0x50
 800846e:	2300      	movs	r3, #0
 8008470:	657b      	str	r3, [r7, #84]	@ 0x54
 8008472:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8008476:	460b      	mov	r3, r1
 8008478:	4313      	orrs	r3, r2
 800847a:	d00a      	beq.n	8008492 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800847c:	4b9e      	ldr	r3, [pc, #632]	@ (80086f8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800847e:	691b      	ldr	r3, [r3, #16]
 8008480:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8008484:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008488:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800848c:	4a9a      	ldr	r2, [pc, #616]	@ (80086f8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800848e:	430b      	orrs	r3, r1
 8008490:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008492:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800849a:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800849e:	64bb      	str	r3, [r7, #72]	@ 0x48
 80084a0:	2300      	movs	r3, #0
 80084a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80084a4:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80084a8:	460b      	mov	r3, r1
 80084aa:	4313      	orrs	r3, r2
 80084ac:	d009      	beq.n	80084c2 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80084ae:	4b92      	ldr	r3, [pc, #584]	@ (80086f8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80084b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80084b2:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80084b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80084bc:	4a8e      	ldr	r2, [pc, #568]	@ (80086f8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80084be:	430b      	orrs	r3, r1
 80084c0:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80084c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084ca:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80084ce:	643b      	str	r3, [r7, #64]	@ 0x40
 80084d0:	2300      	movs	r3, #0
 80084d2:	647b      	str	r3, [r7, #68]	@ 0x44
 80084d4:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80084d8:	460b      	mov	r3, r1
 80084da:	4313      	orrs	r3, r2
 80084dc:	d00e      	beq.n	80084fc <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80084de:	4b86      	ldr	r3, [pc, #536]	@ (80086f8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80084e0:	691b      	ldr	r3, [r3, #16]
 80084e2:	4a85      	ldr	r2, [pc, #532]	@ (80086f8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80084e4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80084e8:	6113      	str	r3, [r2, #16]
 80084ea:	4b83      	ldr	r3, [pc, #524]	@ (80086f8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80084ec:	6919      	ldr	r1, [r3, #16]
 80084ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084f2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80084f6:	4a80      	ldr	r2, [pc, #512]	@ (80086f8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80084f8:	430b      	orrs	r3, r1
 80084fa:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80084fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008504:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8008508:	63bb      	str	r3, [r7, #56]	@ 0x38
 800850a:	2300      	movs	r3, #0
 800850c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800850e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8008512:	460b      	mov	r3, r1
 8008514:	4313      	orrs	r3, r2
 8008516:	d009      	beq.n	800852c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008518:	4b77      	ldr	r3, [pc, #476]	@ (80086f8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800851a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800851c:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8008520:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008524:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008526:	4a74      	ldr	r2, [pc, #464]	@ (80086f8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008528:	430b      	orrs	r3, r1
 800852a:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800852c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008530:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008534:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8008538:	633b      	str	r3, [r7, #48]	@ 0x30
 800853a:	2300      	movs	r3, #0
 800853c:	637b      	str	r3, [r7, #52]	@ 0x34
 800853e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8008542:	460b      	mov	r3, r1
 8008544:	4313      	orrs	r3, r2
 8008546:	d00a      	beq.n	800855e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008548:	4b6b      	ldr	r3, [pc, #428]	@ (80086f8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800854a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800854c:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8008550:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008554:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008558:	4a67      	ldr	r2, [pc, #412]	@ (80086f8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800855a:	430b      	orrs	r3, r1
 800855c:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800855e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008566:	2100      	movs	r1, #0
 8008568:	62b9      	str	r1, [r7, #40]	@ 0x28
 800856a:	f003 0301 	and.w	r3, r3, #1
 800856e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008570:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8008574:	460b      	mov	r3, r1
 8008576:	4313      	orrs	r3, r2
 8008578:	d011      	beq.n	800859e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800857a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800857e:	3308      	adds	r3, #8
 8008580:	2100      	movs	r1, #0
 8008582:	4618      	mov	r0, r3
 8008584:	f000 fb78 	bl	8008c78 <RCCEx_PLL2_Config>
 8008588:	4603      	mov	r3, r0
 800858a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800858e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008592:	2b00      	cmp	r3, #0
 8008594:	d003      	beq.n	800859e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008596:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800859a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800859e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80085a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085a6:	2100      	movs	r1, #0
 80085a8:	6239      	str	r1, [r7, #32]
 80085aa:	f003 0302 	and.w	r3, r3, #2
 80085ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80085b0:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80085b4:	460b      	mov	r3, r1
 80085b6:	4313      	orrs	r3, r2
 80085b8:	d011      	beq.n	80085de <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80085ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80085be:	3308      	adds	r3, #8
 80085c0:	2101      	movs	r1, #1
 80085c2:	4618      	mov	r0, r3
 80085c4:	f000 fb58 	bl	8008c78 <RCCEx_PLL2_Config>
 80085c8:	4603      	mov	r3, r0
 80085ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80085ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d003      	beq.n	80085de <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80085da:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80085de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80085e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085e6:	2100      	movs	r1, #0
 80085e8:	61b9      	str	r1, [r7, #24]
 80085ea:	f003 0304 	and.w	r3, r3, #4
 80085ee:	61fb      	str	r3, [r7, #28]
 80085f0:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80085f4:	460b      	mov	r3, r1
 80085f6:	4313      	orrs	r3, r2
 80085f8:	d011      	beq.n	800861e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80085fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80085fe:	3308      	adds	r3, #8
 8008600:	2102      	movs	r1, #2
 8008602:	4618      	mov	r0, r3
 8008604:	f000 fb38 	bl	8008c78 <RCCEx_PLL2_Config>
 8008608:	4603      	mov	r3, r0
 800860a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800860e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008612:	2b00      	cmp	r3, #0
 8008614:	d003      	beq.n	800861e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008616:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800861a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800861e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008626:	2100      	movs	r1, #0
 8008628:	6139      	str	r1, [r7, #16]
 800862a:	f003 0308 	and.w	r3, r3, #8
 800862e:	617b      	str	r3, [r7, #20]
 8008630:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8008634:	460b      	mov	r3, r1
 8008636:	4313      	orrs	r3, r2
 8008638:	d011      	beq.n	800865e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800863a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800863e:	3328      	adds	r3, #40	@ 0x28
 8008640:	2100      	movs	r1, #0
 8008642:	4618      	mov	r0, r3
 8008644:	f000 fbca 	bl	8008ddc <RCCEx_PLL3_Config>
 8008648:	4603      	mov	r3, r0
 800864a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800864e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008652:	2b00      	cmp	r3, #0
 8008654:	d003      	beq.n	800865e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008656:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800865a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800865e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008662:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008666:	2100      	movs	r1, #0
 8008668:	60b9      	str	r1, [r7, #8]
 800866a:	f003 0310 	and.w	r3, r3, #16
 800866e:	60fb      	str	r3, [r7, #12]
 8008670:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8008674:	460b      	mov	r3, r1
 8008676:	4313      	orrs	r3, r2
 8008678:	d011      	beq.n	800869e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800867a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800867e:	3328      	adds	r3, #40	@ 0x28
 8008680:	2101      	movs	r1, #1
 8008682:	4618      	mov	r0, r3
 8008684:	f000 fbaa 	bl	8008ddc <RCCEx_PLL3_Config>
 8008688:	4603      	mov	r3, r0
 800868a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800868e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008692:	2b00      	cmp	r3, #0
 8008694:	d003      	beq.n	800869e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008696:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800869a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800869e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086a6:	2100      	movs	r1, #0
 80086a8:	6039      	str	r1, [r7, #0]
 80086aa:	f003 0320 	and.w	r3, r3, #32
 80086ae:	607b      	str	r3, [r7, #4]
 80086b0:	e9d7 1200 	ldrd	r1, r2, [r7]
 80086b4:	460b      	mov	r3, r1
 80086b6:	4313      	orrs	r3, r2
 80086b8:	d011      	beq.n	80086de <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80086ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086be:	3328      	adds	r3, #40	@ 0x28
 80086c0:	2102      	movs	r1, #2
 80086c2:	4618      	mov	r0, r3
 80086c4:	f000 fb8a 	bl	8008ddc <RCCEx_PLL3_Config>
 80086c8:	4603      	mov	r3, r0
 80086ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80086ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d003      	beq.n	80086de <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80086d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80086da:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 80086de:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d101      	bne.n	80086ea <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80086e6:	2300      	movs	r3, #0
 80086e8:	e000      	b.n	80086ec <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80086ea:	2301      	movs	r3, #1
}
 80086ec:	4618      	mov	r0, r3
 80086ee:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 80086f2:	46bd      	mov	sp, r7
 80086f4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80086f8:	58024400 	.word	0x58024400

080086fc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80086fc:	b580      	push	{r7, lr}
 80086fe:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8008700:	f7fe fd96 	bl	8007230 <HAL_RCC_GetHCLKFreq>
 8008704:	4602      	mov	r2, r0
 8008706:	4b06      	ldr	r3, [pc, #24]	@ (8008720 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008708:	6a1b      	ldr	r3, [r3, #32]
 800870a:	091b      	lsrs	r3, r3, #4
 800870c:	f003 0307 	and.w	r3, r3, #7
 8008710:	4904      	ldr	r1, [pc, #16]	@ (8008724 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8008712:	5ccb      	ldrb	r3, [r1, r3]
 8008714:	f003 031f 	and.w	r3, r3, #31
 8008718:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800871c:	4618      	mov	r0, r3
 800871e:	bd80      	pop	{r7, pc}
 8008720:	58024400 	.word	0x58024400
 8008724:	08012610 	.word	0x08012610

08008728 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8008728:	b480      	push	{r7}
 800872a:	b089      	sub	sp, #36	@ 0x24
 800872c:	af00      	add	r7, sp, #0
 800872e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008730:	4ba1      	ldr	r3, [pc, #644]	@ (80089b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008732:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008734:	f003 0303 	and.w	r3, r3, #3
 8008738:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800873a:	4b9f      	ldr	r3, [pc, #636]	@ (80089b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800873c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800873e:	0b1b      	lsrs	r3, r3, #12
 8008740:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008744:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008746:	4b9c      	ldr	r3, [pc, #624]	@ (80089b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008748:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800874a:	091b      	lsrs	r3, r3, #4
 800874c:	f003 0301 	and.w	r3, r3, #1
 8008750:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8008752:	4b99      	ldr	r3, [pc, #612]	@ (80089b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008754:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008756:	08db      	lsrs	r3, r3, #3
 8008758:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800875c:	693a      	ldr	r2, [r7, #16]
 800875e:	fb02 f303 	mul.w	r3, r2, r3
 8008762:	ee07 3a90 	vmov	s15, r3
 8008766:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800876a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800876e:	697b      	ldr	r3, [r7, #20]
 8008770:	2b00      	cmp	r3, #0
 8008772:	f000 8111 	beq.w	8008998 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8008776:	69bb      	ldr	r3, [r7, #24]
 8008778:	2b02      	cmp	r3, #2
 800877a:	f000 8083 	beq.w	8008884 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800877e:	69bb      	ldr	r3, [r7, #24]
 8008780:	2b02      	cmp	r3, #2
 8008782:	f200 80a1 	bhi.w	80088c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8008786:	69bb      	ldr	r3, [r7, #24]
 8008788:	2b00      	cmp	r3, #0
 800878a:	d003      	beq.n	8008794 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800878c:	69bb      	ldr	r3, [r7, #24]
 800878e:	2b01      	cmp	r3, #1
 8008790:	d056      	beq.n	8008840 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8008792:	e099      	b.n	80088c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008794:	4b88      	ldr	r3, [pc, #544]	@ (80089b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	f003 0320 	and.w	r3, r3, #32
 800879c:	2b00      	cmp	r3, #0
 800879e:	d02d      	beq.n	80087fc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80087a0:	4b85      	ldr	r3, [pc, #532]	@ (80089b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	08db      	lsrs	r3, r3, #3
 80087a6:	f003 0303 	and.w	r3, r3, #3
 80087aa:	4a84      	ldr	r2, [pc, #528]	@ (80089bc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80087ac:	fa22 f303 	lsr.w	r3, r2, r3
 80087b0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80087b2:	68bb      	ldr	r3, [r7, #8]
 80087b4:	ee07 3a90 	vmov	s15, r3
 80087b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80087bc:	697b      	ldr	r3, [r7, #20]
 80087be:	ee07 3a90 	vmov	s15, r3
 80087c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80087ca:	4b7b      	ldr	r3, [pc, #492]	@ (80089b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80087cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087d2:	ee07 3a90 	vmov	s15, r3
 80087d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80087da:	ed97 6a03 	vldr	s12, [r7, #12]
 80087de:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80089c0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80087e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80087e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80087ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80087ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80087f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80087f6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80087fa:	e087      	b.n	800890c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80087fc:	697b      	ldr	r3, [r7, #20]
 80087fe:	ee07 3a90 	vmov	s15, r3
 8008802:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008806:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80089c4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800880a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800880e:	4b6a      	ldr	r3, [pc, #424]	@ (80089b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008810:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008812:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008816:	ee07 3a90 	vmov	s15, r3
 800881a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800881e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008822:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80089c0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008826:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800882a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800882e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008832:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008836:	ee67 7a27 	vmul.f32	s15, s14, s15
 800883a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800883e:	e065      	b.n	800890c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008840:	697b      	ldr	r3, [r7, #20]
 8008842:	ee07 3a90 	vmov	s15, r3
 8008846:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800884a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80089c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800884e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008852:	4b59      	ldr	r3, [pc, #356]	@ (80089b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008854:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008856:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800885a:	ee07 3a90 	vmov	s15, r3
 800885e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008862:	ed97 6a03 	vldr	s12, [r7, #12]
 8008866:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80089c0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800886a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800886e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008872:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008876:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800887a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800887e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008882:	e043      	b.n	800890c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008884:	697b      	ldr	r3, [r7, #20]
 8008886:	ee07 3a90 	vmov	s15, r3
 800888a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800888e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80089cc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8008892:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008896:	4b48      	ldr	r3, [pc, #288]	@ (80089b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008898:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800889a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800889e:	ee07 3a90 	vmov	s15, r3
 80088a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80088a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80088aa:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80089c0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80088ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80088b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80088b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80088ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80088be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80088c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80088c6:	e021      	b.n	800890c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80088c8:	697b      	ldr	r3, [r7, #20]
 80088ca:	ee07 3a90 	vmov	s15, r3
 80088ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088d2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80089c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80088d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80088da:	4b37      	ldr	r3, [pc, #220]	@ (80089b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80088dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80088de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088e2:	ee07 3a90 	vmov	s15, r3
 80088e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80088ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80088ee:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80089c0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80088f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80088f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80088fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80088fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008902:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008906:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800890a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800890c:	4b2a      	ldr	r3, [pc, #168]	@ (80089b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800890e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008910:	0a5b      	lsrs	r3, r3, #9
 8008912:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008916:	ee07 3a90 	vmov	s15, r3
 800891a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800891e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008922:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008926:	edd7 6a07 	vldr	s13, [r7, #28]
 800892a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800892e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008932:	ee17 2a90 	vmov	r2, s15
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800893a:	4b1f      	ldr	r3, [pc, #124]	@ (80089b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800893c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800893e:	0c1b      	lsrs	r3, r3, #16
 8008940:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008944:	ee07 3a90 	vmov	s15, r3
 8008948:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800894c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008950:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008954:	edd7 6a07 	vldr	s13, [r7, #28]
 8008958:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800895c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008960:	ee17 2a90 	vmov	r2, s15
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8008968:	4b13      	ldr	r3, [pc, #76]	@ (80089b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800896a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800896c:	0e1b      	lsrs	r3, r3, #24
 800896e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008972:	ee07 3a90 	vmov	s15, r3
 8008976:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800897a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800897e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008982:	edd7 6a07 	vldr	s13, [r7, #28]
 8008986:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800898a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800898e:	ee17 2a90 	vmov	r2, s15
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008996:	e008      	b.n	80089aa <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	2200      	movs	r2, #0
 800899c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	2200      	movs	r2, #0
 80089a2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	2200      	movs	r2, #0
 80089a8:	609a      	str	r2, [r3, #8]
}
 80089aa:	bf00      	nop
 80089ac:	3724      	adds	r7, #36	@ 0x24
 80089ae:	46bd      	mov	sp, r7
 80089b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b4:	4770      	bx	lr
 80089b6:	bf00      	nop
 80089b8:	58024400 	.word	0x58024400
 80089bc:	03d09000 	.word	0x03d09000
 80089c0:	46000000 	.word	0x46000000
 80089c4:	4c742400 	.word	0x4c742400
 80089c8:	4a742400 	.word	0x4a742400
 80089cc:	4bbebc20 	.word	0x4bbebc20

080089d0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80089d0:	b480      	push	{r7}
 80089d2:	b089      	sub	sp, #36	@ 0x24
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80089d8:	4ba1      	ldr	r3, [pc, #644]	@ (8008c60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80089da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089dc:	f003 0303 	and.w	r3, r3, #3
 80089e0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80089e2:	4b9f      	ldr	r3, [pc, #636]	@ (8008c60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80089e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089e6:	0d1b      	lsrs	r3, r3, #20
 80089e8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80089ec:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80089ee:	4b9c      	ldr	r3, [pc, #624]	@ (8008c60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80089f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089f2:	0a1b      	lsrs	r3, r3, #8
 80089f4:	f003 0301 	and.w	r3, r3, #1
 80089f8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80089fa:	4b99      	ldr	r3, [pc, #612]	@ (8008c60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80089fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80089fe:	08db      	lsrs	r3, r3, #3
 8008a00:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008a04:	693a      	ldr	r2, [r7, #16]
 8008a06:	fb02 f303 	mul.w	r3, r2, r3
 8008a0a:	ee07 3a90 	vmov	s15, r3
 8008a0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a12:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8008a16:	697b      	ldr	r3, [r7, #20]
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	f000 8111 	beq.w	8008c40 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8008a1e:	69bb      	ldr	r3, [r7, #24]
 8008a20:	2b02      	cmp	r3, #2
 8008a22:	f000 8083 	beq.w	8008b2c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8008a26:	69bb      	ldr	r3, [r7, #24]
 8008a28:	2b02      	cmp	r3, #2
 8008a2a:	f200 80a1 	bhi.w	8008b70 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8008a2e:	69bb      	ldr	r3, [r7, #24]
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d003      	beq.n	8008a3c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008a34:	69bb      	ldr	r3, [r7, #24]
 8008a36:	2b01      	cmp	r3, #1
 8008a38:	d056      	beq.n	8008ae8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8008a3a:	e099      	b.n	8008b70 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008a3c:	4b88      	ldr	r3, [pc, #544]	@ (8008c60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	f003 0320 	and.w	r3, r3, #32
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d02d      	beq.n	8008aa4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008a48:	4b85      	ldr	r3, [pc, #532]	@ (8008c60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	08db      	lsrs	r3, r3, #3
 8008a4e:	f003 0303 	and.w	r3, r3, #3
 8008a52:	4a84      	ldr	r2, [pc, #528]	@ (8008c64 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008a54:	fa22 f303 	lsr.w	r3, r2, r3
 8008a58:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008a5a:	68bb      	ldr	r3, [r7, #8]
 8008a5c:	ee07 3a90 	vmov	s15, r3
 8008a60:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a64:	697b      	ldr	r3, [r7, #20]
 8008a66:	ee07 3a90 	vmov	s15, r3
 8008a6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a72:	4b7b      	ldr	r3, [pc, #492]	@ (8008c60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008a74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a7a:	ee07 3a90 	vmov	s15, r3
 8008a7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a82:	ed97 6a03 	vldr	s12, [r7, #12]
 8008a86:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8008c68 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008a8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a92:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008a96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a9e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008aa2:	e087      	b.n	8008bb4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008aa4:	697b      	ldr	r3, [r7, #20]
 8008aa6:	ee07 3a90 	vmov	s15, r3
 8008aaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008aae:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8008c6c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8008ab2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ab6:	4b6a      	ldr	r3, [pc, #424]	@ (8008c60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008ab8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008aba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008abe:	ee07 3a90 	vmov	s15, r3
 8008ac2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ac6:	ed97 6a03 	vldr	s12, [r7, #12]
 8008aca:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8008c68 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008ace:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ad2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ad6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008ada:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ade:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ae2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008ae6:	e065      	b.n	8008bb4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008ae8:	697b      	ldr	r3, [r7, #20]
 8008aea:	ee07 3a90 	vmov	s15, r3
 8008aee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008af2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008c70 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008af6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008afa:	4b59      	ldr	r3, [pc, #356]	@ (8008c60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008afc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008afe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b02:	ee07 3a90 	vmov	s15, r3
 8008b06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b0a:	ed97 6a03 	vldr	s12, [r7, #12]
 8008b0e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8008c68 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008b12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b1a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008b1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b26:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008b2a:	e043      	b.n	8008bb4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008b2c:	697b      	ldr	r3, [r7, #20]
 8008b2e:	ee07 3a90 	vmov	s15, r3
 8008b32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b36:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8008c74 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8008b3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b3e:	4b48      	ldr	r3, [pc, #288]	@ (8008c60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008b40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b46:	ee07 3a90 	vmov	s15, r3
 8008b4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b4e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008b52:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8008c68 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008b56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b5e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008b62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b6a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008b6e:	e021      	b.n	8008bb4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008b70:	697b      	ldr	r3, [r7, #20]
 8008b72:	ee07 3a90 	vmov	s15, r3
 8008b76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b7a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8008c70 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008b7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b82:	4b37      	ldr	r3, [pc, #220]	@ (8008c60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008b84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b8a:	ee07 3a90 	vmov	s15, r3
 8008b8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b92:	ed97 6a03 	vldr	s12, [r7, #12]
 8008b96:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8008c68 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008b9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ba2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008ba6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008baa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008bae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008bb2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8008bb4:	4b2a      	ldr	r3, [pc, #168]	@ (8008c60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008bb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008bb8:	0a5b      	lsrs	r3, r3, #9
 8008bba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008bbe:	ee07 3a90 	vmov	s15, r3
 8008bc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008bc6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008bca:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008bce:	edd7 6a07 	vldr	s13, [r7, #28]
 8008bd2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008bd6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008bda:	ee17 2a90 	vmov	r2, s15
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8008be2:	4b1f      	ldr	r3, [pc, #124]	@ (8008c60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008be4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008be6:	0c1b      	lsrs	r3, r3, #16
 8008be8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008bec:	ee07 3a90 	vmov	s15, r3
 8008bf0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008bf4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008bf8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008bfc:	edd7 6a07 	vldr	s13, [r7, #28]
 8008c00:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008c04:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008c08:	ee17 2a90 	vmov	r2, s15
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8008c10:	4b13      	ldr	r3, [pc, #76]	@ (8008c60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c14:	0e1b      	lsrs	r3, r3, #24
 8008c16:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008c1a:	ee07 3a90 	vmov	s15, r3
 8008c1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c22:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008c26:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008c2a:	edd7 6a07 	vldr	s13, [r7, #28]
 8008c2e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008c32:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008c36:	ee17 2a90 	vmov	r2, s15
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008c3e:	e008      	b.n	8008c52 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	2200      	movs	r2, #0
 8008c44:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	2200      	movs	r2, #0
 8008c4a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	2200      	movs	r2, #0
 8008c50:	609a      	str	r2, [r3, #8]
}
 8008c52:	bf00      	nop
 8008c54:	3724      	adds	r7, #36	@ 0x24
 8008c56:	46bd      	mov	sp, r7
 8008c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c5c:	4770      	bx	lr
 8008c5e:	bf00      	nop
 8008c60:	58024400 	.word	0x58024400
 8008c64:	03d09000 	.word	0x03d09000
 8008c68:	46000000 	.word	0x46000000
 8008c6c:	4c742400 	.word	0x4c742400
 8008c70:	4a742400 	.word	0x4a742400
 8008c74:	4bbebc20 	.word	0x4bbebc20

08008c78 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008c78:	b580      	push	{r7, lr}
 8008c7a:	b084      	sub	sp, #16
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	6078      	str	r0, [r7, #4]
 8008c80:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008c82:	2300      	movs	r3, #0
 8008c84:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008c86:	4b53      	ldr	r3, [pc, #332]	@ (8008dd4 <RCCEx_PLL2_Config+0x15c>)
 8008c88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c8a:	f003 0303 	and.w	r3, r3, #3
 8008c8e:	2b03      	cmp	r3, #3
 8008c90:	d101      	bne.n	8008c96 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8008c92:	2301      	movs	r3, #1
 8008c94:	e099      	b.n	8008dca <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008c96:	4b4f      	ldr	r3, [pc, #316]	@ (8008dd4 <RCCEx_PLL2_Config+0x15c>)
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	4a4e      	ldr	r2, [pc, #312]	@ (8008dd4 <RCCEx_PLL2_Config+0x15c>)
 8008c9c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008ca0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008ca2:	f7f9 fb79 	bl	8002398 <HAL_GetTick>
 8008ca6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008ca8:	e008      	b.n	8008cbc <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008caa:	f7f9 fb75 	bl	8002398 <HAL_GetTick>
 8008cae:	4602      	mov	r2, r0
 8008cb0:	68bb      	ldr	r3, [r7, #8]
 8008cb2:	1ad3      	subs	r3, r2, r3
 8008cb4:	2b02      	cmp	r3, #2
 8008cb6:	d901      	bls.n	8008cbc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008cb8:	2303      	movs	r3, #3
 8008cba:	e086      	b.n	8008dca <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008cbc:	4b45      	ldr	r3, [pc, #276]	@ (8008dd4 <RCCEx_PLL2_Config+0x15c>)
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d1f0      	bne.n	8008caa <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008cc8:	4b42      	ldr	r3, [pc, #264]	@ (8008dd4 <RCCEx_PLL2_Config+0x15c>)
 8008cca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ccc:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	031b      	lsls	r3, r3, #12
 8008cd6:	493f      	ldr	r1, [pc, #252]	@ (8008dd4 <RCCEx_PLL2_Config+0x15c>)
 8008cd8:	4313      	orrs	r3, r2
 8008cda:	628b      	str	r3, [r1, #40]	@ 0x28
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	685b      	ldr	r3, [r3, #4]
 8008ce0:	3b01      	subs	r3, #1
 8008ce2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	689b      	ldr	r3, [r3, #8]
 8008cea:	3b01      	subs	r3, #1
 8008cec:	025b      	lsls	r3, r3, #9
 8008cee:	b29b      	uxth	r3, r3
 8008cf0:	431a      	orrs	r2, r3
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	68db      	ldr	r3, [r3, #12]
 8008cf6:	3b01      	subs	r3, #1
 8008cf8:	041b      	lsls	r3, r3, #16
 8008cfa:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008cfe:	431a      	orrs	r2, r3
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	691b      	ldr	r3, [r3, #16]
 8008d04:	3b01      	subs	r3, #1
 8008d06:	061b      	lsls	r3, r3, #24
 8008d08:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008d0c:	4931      	ldr	r1, [pc, #196]	@ (8008dd4 <RCCEx_PLL2_Config+0x15c>)
 8008d0e:	4313      	orrs	r3, r2
 8008d10:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008d12:	4b30      	ldr	r3, [pc, #192]	@ (8008dd4 <RCCEx_PLL2_Config+0x15c>)
 8008d14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d16:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	695b      	ldr	r3, [r3, #20]
 8008d1e:	492d      	ldr	r1, [pc, #180]	@ (8008dd4 <RCCEx_PLL2_Config+0x15c>)
 8008d20:	4313      	orrs	r3, r2
 8008d22:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008d24:	4b2b      	ldr	r3, [pc, #172]	@ (8008dd4 <RCCEx_PLL2_Config+0x15c>)
 8008d26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d28:	f023 0220 	bic.w	r2, r3, #32
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	699b      	ldr	r3, [r3, #24]
 8008d30:	4928      	ldr	r1, [pc, #160]	@ (8008dd4 <RCCEx_PLL2_Config+0x15c>)
 8008d32:	4313      	orrs	r3, r2
 8008d34:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008d36:	4b27      	ldr	r3, [pc, #156]	@ (8008dd4 <RCCEx_PLL2_Config+0x15c>)
 8008d38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d3a:	4a26      	ldr	r2, [pc, #152]	@ (8008dd4 <RCCEx_PLL2_Config+0x15c>)
 8008d3c:	f023 0310 	bic.w	r3, r3, #16
 8008d40:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008d42:	4b24      	ldr	r3, [pc, #144]	@ (8008dd4 <RCCEx_PLL2_Config+0x15c>)
 8008d44:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008d46:	4b24      	ldr	r3, [pc, #144]	@ (8008dd8 <RCCEx_PLL2_Config+0x160>)
 8008d48:	4013      	ands	r3, r2
 8008d4a:	687a      	ldr	r2, [r7, #4]
 8008d4c:	69d2      	ldr	r2, [r2, #28]
 8008d4e:	00d2      	lsls	r2, r2, #3
 8008d50:	4920      	ldr	r1, [pc, #128]	@ (8008dd4 <RCCEx_PLL2_Config+0x15c>)
 8008d52:	4313      	orrs	r3, r2
 8008d54:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008d56:	4b1f      	ldr	r3, [pc, #124]	@ (8008dd4 <RCCEx_PLL2_Config+0x15c>)
 8008d58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d5a:	4a1e      	ldr	r2, [pc, #120]	@ (8008dd4 <RCCEx_PLL2_Config+0x15c>)
 8008d5c:	f043 0310 	orr.w	r3, r3, #16
 8008d60:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008d62:	683b      	ldr	r3, [r7, #0]
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d106      	bne.n	8008d76 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008d68:	4b1a      	ldr	r3, [pc, #104]	@ (8008dd4 <RCCEx_PLL2_Config+0x15c>)
 8008d6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d6c:	4a19      	ldr	r2, [pc, #100]	@ (8008dd4 <RCCEx_PLL2_Config+0x15c>)
 8008d6e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008d72:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008d74:	e00f      	b.n	8008d96 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008d76:	683b      	ldr	r3, [r7, #0]
 8008d78:	2b01      	cmp	r3, #1
 8008d7a:	d106      	bne.n	8008d8a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008d7c:	4b15      	ldr	r3, [pc, #84]	@ (8008dd4 <RCCEx_PLL2_Config+0x15c>)
 8008d7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d80:	4a14      	ldr	r2, [pc, #80]	@ (8008dd4 <RCCEx_PLL2_Config+0x15c>)
 8008d82:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008d86:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008d88:	e005      	b.n	8008d96 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008d8a:	4b12      	ldr	r3, [pc, #72]	@ (8008dd4 <RCCEx_PLL2_Config+0x15c>)
 8008d8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d8e:	4a11      	ldr	r2, [pc, #68]	@ (8008dd4 <RCCEx_PLL2_Config+0x15c>)
 8008d90:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008d94:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008d96:	4b0f      	ldr	r3, [pc, #60]	@ (8008dd4 <RCCEx_PLL2_Config+0x15c>)
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	4a0e      	ldr	r2, [pc, #56]	@ (8008dd4 <RCCEx_PLL2_Config+0x15c>)
 8008d9c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008da0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008da2:	f7f9 faf9 	bl	8002398 <HAL_GetTick>
 8008da6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008da8:	e008      	b.n	8008dbc <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008daa:	f7f9 faf5 	bl	8002398 <HAL_GetTick>
 8008dae:	4602      	mov	r2, r0
 8008db0:	68bb      	ldr	r3, [r7, #8]
 8008db2:	1ad3      	subs	r3, r2, r3
 8008db4:	2b02      	cmp	r3, #2
 8008db6:	d901      	bls.n	8008dbc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008db8:	2303      	movs	r3, #3
 8008dba:	e006      	b.n	8008dca <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008dbc:	4b05      	ldr	r3, [pc, #20]	@ (8008dd4 <RCCEx_PLL2_Config+0x15c>)
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d0f0      	beq.n	8008daa <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008dc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dca:	4618      	mov	r0, r3
 8008dcc:	3710      	adds	r7, #16
 8008dce:	46bd      	mov	sp, r7
 8008dd0:	bd80      	pop	{r7, pc}
 8008dd2:	bf00      	nop
 8008dd4:	58024400 	.word	0x58024400
 8008dd8:	ffff0007 	.word	0xffff0007

08008ddc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008ddc:	b580      	push	{r7, lr}
 8008dde:	b084      	sub	sp, #16
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	6078      	str	r0, [r7, #4]
 8008de4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008de6:	2300      	movs	r3, #0
 8008de8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008dea:	4b53      	ldr	r3, [pc, #332]	@ (8008f38 <RCCEx_PLL3_Config+0x15c>)
 8008dec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008dee:	f003 0303 	and.w	r3, r3, #3
 8008df2:	2b03      	cmp	r3, #3
 8008df4:	d101      	bne.n	8008dfa <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8008df6:	2301      	movs	r3, #1
 8008df8:	e099      	b.n	8008f2e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008dfa:	4b4f      	ldr	r3, [pc, #316]	@ (8008f38 <RCCEx_PLL3_Config+0x15c>)
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	4a4e      	ldr	r2, [pc, #312]	@ (8008f38 <RCCEx_PLL3_Config+0x15c>)
 8008e00:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008e04:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008e06:	f7f9 fac7 	bl	8002398 <HAL_GetTick>
 8008e0a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008e0c:	e008      	b.n	8008e20 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008e0e:	f7f9 fac3 	bl	8002398 <HAL_GetTick>
 8008e12:	4602      	mov	r2, r0
 8008e14:	68bb      	ldr	r3, [r7, #8]
 8008e16:	1ad3      	subs	r3, r2, r3
 8008e18:	2b02      	cmp	r3, #2
 8008e1a:	d901      	bls.n	8008e20 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008e1c:	2303      	movs	r3, #3
 8008e1e:	e086      	b.n	8008f2e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008e20:	4b45      	ldr	r3, [pc, #276]	@ (8008f38 <RCCEx_PLL3_Config+0x15c>)
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d1f0      	bne.n	8008e0e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008e2c:	4b42      	ldr	r3, [pc, #264]	@ (8008f38 <RCCEx_PLL3_Config+0x15c>)
 8008e2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e30:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	051b      	lsls	r3, r3, #20
 8008e3a:	493f      	ldr	r1, [pc, #252]	@ (8008f38 <RCCEx_PLL3_Config+0x15c>)
 8008e3c:	4313      	orrs	r3, r2
 8008e3e:	628b      	str	r3, [r1, #40]	@ 0x28
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	685b      	ldr	r3, [r3, #4]
 8008e44:	3b01      	subs	r3, #1
 8008e46:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	689b      	ldr	r3, [r3, #8]
 8008e4e:	3b01      	subs	r3, #1
 8008e50:	025b      	lsls	r3, r3, #9
 8008e52:	b29b      	uxth	r3, r3
 8008e54:	431a      	orrs	r2, r3
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	68db      	ldr	r3, [r3, #12]
 8008e5a:	3b01      	subs	r3, #1
 8008e5c:	041b      	lsls	r3, r3, #16
 8008e5e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008e62:	431a      	orrs	r2, r3
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	691b      	ldr	r3, [r3, #16]
 8008e68:	3b01      	subs	r3, #1
 8008e6a:	061b      	lsls	r3, r3, #24
 8008e6c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008e70:	4931      	ldr	r1, [pc, #196]	@ (8008f38 <RCCEx_PLL3_Config+0x15c>)
 8008e72:	4313      	orrs	r3, r2
 8008e74:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008e76:	4b30      	ldr	r3, [pc, #192]	@ (8008f38 <RCCEx_PLL3_Config+0x15c>)
 8008e78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e7a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	695b      	ldr	r3, [r3, #20]
 8008e82:	492d      	ldr	r1, [pc, #180]	@ (8008f38 <RCCEx_PLL3_Config+0x15c>)
 8008e84:	4313      	orrs	r3, r2
 8008e86:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008e88:	4b2b      	ldr	r3, [pc, #172]	@ (8008f38 <RCCEx_PLL3_Config+0x15c>)
 8008e8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e8c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	699b      	ldr	r3, [r3, #24]
 8008e94:	4928      	ldr	r1, [pc, #160]	@ (8008f38 <RCCEx_PLL3_Config+0x15c>)
 8008e96:	4313      	orrs	r3, r2
 8008e98:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008e9a:	4b27      	ldr	r3, [pc, #156]	@ (8008f38 <RCCEx_PLL3_Config+0x15c>)
 8008e9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e9e:	4a26      	ldr	r2, [pc, #152]	@ (8008f38 <RCCEx_PLL3_Config+0x15c>)
 8008ea0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008ea4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008ea6:	4b24      	ldr	r3, [pc, #144]	@ (8008f38 <RCCEx_PLL3_Config+0x15c>)
 8008ea8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008eaa:	4b24      	ldr	r3, [pc, #144]	@ (8008f3c <RCCEx_PLL3_Config+0x160>)
 8008eac:	4013      	ands	r3, r2
 8008eae:	687a      	ldr	r2, [r7, #4]
 8008eb0:	69d2      	ldr	r2, [r2, #28]
 8008eb2:	00d2      	lsls	r2, r2, #3
 8008eb4:	4920      	ldr	r1, [pc, #128]	@ (8008f38 <RCCEx_PLL3_Config+0x15c>)
 8008eb6:	4313      	orrs	r3, r2
 8008eb8:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008eba:	4b1f      	ldr	r3, [pc, #124]	@ (8008f38 <RCCEx_PLL3_Config+0x15c>)
 8008ebc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ebe:	4a1e      	ldr	r2, [pc, #120]	@ (8008f38 <RCCEx_PLL3_Config+0x15c>)
 8008ec0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008ec4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008ec6:	683b      	ldr	r3, [r7, #0]
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d106      	bne.n	8008eda <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008ecc:	4b1a      	ldr	r3, [pc, #104]	@ (8008f38 <RCCEx_PLL3_Config+0x15c>)
 8008ece:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ed0:	4a19      	ldr	r2, [pc, #100]	@ (8008f38 <RCCEx_PLL3_Config+0x15c>)
 8008ed2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8008ed6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008ed8:	e00f      	b.n	8008efa <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008eda:	683b      	ldr	r3, [r7, #0]
 8008edc:	2b01      	cmp	r3, #1
 8008ede:	d106      	bne.n	8008eee <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008ee0:	4b15      	ldr	r3, [pc, #84]	@ (8008f38 <RCCEx_PLL3_Config+0x15c>)
 8008ee2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ee4:	4a14      	ldr	r2, [pc, #80]	@ (8008f38 <RCCEx_PLL3_Config+0x15c>)
 8008ee6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8008eea:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008eec:	e005      	b.n	8008efa <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008eee:	4b12      	ldr	r3, [pc, #72]	@ (8008f38 <RCCEx_PLL3_Config+0x15c>)
 8008ef0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ef2:	4a11      	ldr	r2, [pc, #68]	@ (8008f38 <RCCEx_PLL3_Config+0x15c>)
 8008ef4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008ef8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008efa:	4b0f      	ldr	r3, [pc, #60]	@ (8008f38 <RCCEx_PLL3_Config+0x15c>)
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	4a0e      	ldr	r2, [pc, #56]	@ (8008f38 <RCCEx_PLL3_Config+0x15c>)
 8008f00:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008f04:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008f06:	f7f9 fa47 	bl	8002398 <HAL_GetTick>
 8008f0a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008f0c:	e008      	b.n	8008f20 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008f0e:	f7f9 fa43 	bl	8002398 <HAL_GetTick>
 8008f12:	4602      	mov	r2, r0
 8008f14:	68bb      	ldr	r3, [r7, #8]
 8008f16:	1ad3      	subs	r3, r2, r3
 8008f18:	2b02      	cmp	r3, #2
 8008f1a:	d901      	bls.n	8008f20 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008f1c:	2303      	movs	r3, #3
 8008f1e:	e006      	b.n	8008f2e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008f20:	4b05      	ldr	r3, [pc, #20]	@ (8008f38 <RCCEx_PLL3_Config+0x15c>)
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d0f0      	beq.n	8008f0e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008f2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f2e:	4618      	mov	r0, r3
 8008f30:	3710      	adds	r7, #16
 8008f32:	46bd      	mov	sp, r7
 8008f34:	bd80      	pop	{r7, pc}
 8008f36:	bf00      	nop
 8008f38:	58024400 	.word	0x58024400
 8008f3c:	ffff0007 	.word	0xffff0007

08008f40 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008f40:	b580      	push	{r7, lr}
 8008f42:	b082      	sub	sp, #8
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d101      	bne.n	8008f52 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008f4e:	2301      	movs	r3, #1
 8008f50:	e049      	b.n	8008fe6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008f58:	b2db      	uxtb	r3, r3
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d106      	bne.n	8008f6c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	2200      	movs	r2, #0
 8008f62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008f66:	6878      	ldr	r0, [r7, #4]
 8008f68:	f7f8 feb0 	bl	8001ccc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	2202      	movs	r2, #2
 8008f70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681a      	ldr	r2, [r3, #0]
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	3304      	adds	r3, #4
 8008f7c:	4619      	mov	r1, r3
 8008f7e:	4610      	mov	r0, r2
 8008f80:	f000 fea4 	bl	8009ccc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	2201      	movs	r2, #1
 8008f88:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	2201      	movs	r2, #1
 8008f90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	2201      	movs	r2, #1
 8008f98:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	2201      	movs	r2, #1
 8008fa0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	2201      	movs	r2, #1
 8008fa8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	2201      	movs	r2, #1
 8008fb0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	2201      	movs	r2, #1
 8008fb8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	2201      	movs	r2, #1
 8008fc0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	2201      	movs	r2, #1
 8008fc8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	2201      	movs	r2, #1
 8008fd0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	2201      	movs	r2, #1
 8008fd8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	2201      	movs	r2, #1
 8008fe0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008fe4:	2300      	movs	r3, #0
}
 8008fe6:	4618      	mov	r0, r3
 8008fe8:	3708      	adds	r7, #8
 8008fea:	46bd      	mov	sp, r7
 8008fec:	bd80      	pop	{r7, pc}
	...

08008ff0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008ff0:	b480      	push	{r7}
 8008ff2:	b085      	sub	sp, #20
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008ffe:	b2db      	uxtb	r3, r3
 8009000:	2b01      	cmp	r3, #1
 8009002:	d001      	beq.n	8009008 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009004:	2301      	movs	r3, #1
 8009006:	e054      	b.n	80090b2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	2202      	movs	r2, #2
 800900c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	68da      	ldr	r2, [r3, #12]
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	f042 0201 	orr.w	r2, r2, #1
 800901e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	4a26      	ldr	r2, [pc, #152]	@ (80090c0 <HAL_TIM_Base_Start_IT+0xd0>)
 8009026:	4293      	cmp	r3, r2
 8009028:	d022      	beq.n	8009070 <HAL_TIM_Base_Start_IT+0x80>
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009032:	d01d      	beq.n	8009070 <HAL_TIM_Base_Start_IT+0x80>
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	4a22      	ldr	r2, [pc, #136]	@ (80090c4 <HAL_TIM_Base_Start_IT+0xd4>)
 800903a:	4293      	cmp	r3, r2
 800903c:	d018      	beq.n	8009070 <HAL_TIM_Base_Start_IT+0x80>
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	4a21      	ldr	r2, [pc, #132]	@ (80090c8 <HAL_TIM_Base_Start_IT+0xd8>)
 8009044:	4293      	cmp	r3, r2
 8009046:	d013      	beq.n	8009070 <HAL_TIM_Base_Start_IT+0x80>
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	4a1f      	ldr	r2, [pc, #124]	@ (80090cc <HAL_TIM_Base_Start_IT+0xdc>)
 800904e:	4293      	cmp	r3, r2
 8009050:	d00e      	beq.n	8009070 <HAL_TIM_Base_Start_IT+0x80>
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	4a1e      	ldr	r2, [pc, #120]	@ (80090d0 <HAL_TIM_Base_Start_IT+0xe0>)
 8009058:	4293      	cmp	r3, r2
 800905a:	d009      	beq.n	8009070 <HAL_TIM_Base_Start_IT+0x80>
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	4a1c      	ldr	r2, [pc, #112]	@ (80090d4 <HAL_TIM_Base_Start_IT+0xe4>)
 8009062:	4293      	cmp	r3, r2
 8009064:	d004      	beq.n	8009070 <HAL_TIM_Base_Start_IT+0x80>
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	4a1b      	ldr	r2, [pc, #108]	@ (80090d8 <HAL_TIM_Base_Start_IT+0xe8>)
 800906c:	4293      	cmp	r3, r2
 800906e:	d115      	bne.n	800909c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	689a      	ldr	r2, [r3, #8]
 8009076:	4b19      	ldr	r3, [pc, #100]	@ (80090dc <HAL_TIM_Base_Start_IT+0xec>)
 8009078:	4013      	ands	r3, r2
 800907a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	2b06      	cmp	r3, #6
 8009080:	d015      	beq.n	80090ae <HAL_TIM_Base_Start_IT+0xbe>
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009088:	d011      	beq.n	80090ae <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	681a      	ldr	r2, [r3, #0]
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	f042 0201 	orr.w	r2, r2, #1
 8009098:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800909a:	e008      	b.n	80090ae <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	681a      	ldr	r2, [r3, #0]
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	f042 0201 	orr.w	r2, r2, #1
 80090aa:	601a      	str	r2, [r3, #0]
 80090ac:	e000      	b.n	80090b0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80090ae:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80090b0:	2300      	movs	r3, #0
}
 80090b2:	4618      	mov	r0, r3
 80090b4:	3714      	adds	r7, #20
 80090b6:	46bd      	mov	sp, r7
 80090b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090bc:	4770      	bx	lr
 80090be:	bf00      	nop
 80090c0:	40010000 	.word	0x40010000
 80090c4:	40000400 	.word	0x40000400
 80090c8:	40000800 	.word	0x40000800
 80090cc:	40000c00 	.word	0x40000c00
 80090d0:	40010400 	.word	0x40010400
 80090d4:	40001800 	.word	0x40001800
 80090d8:	40014000 	.word	0x40014000
 80090dc:	00010007 	.word	0x00010007

080090e0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80090e0:	b580      	push	{r7, lr}
 80090e2:	b082      	sub	sp, #8
 80090e4:	af00      	add	r7, sp, #0
 80090e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d101      	bne.n	80090f2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80090ee:	2301      	movs	r3, #1
 80090f0:	e049      	b.n	8009186 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80090f8:	b2db      	uxtb	r3, r3
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d106      	bne.n	800910c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	2200      	movs	r2, #0
 8009102:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009106:	6878      	ldr	r0, [r7, #4]
 8009108:	f7f8 fcda 	bl	8001ac0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	2202      	movs	r2, #2
 8009110:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681a      	ldr	r2, [r3, #0]
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	3304      	adds	r3, #4
 800911c:	4619      	mov	r1, r3
 800911e:	4610      	mov	r0, r2
 8009120:	f000 fdd4 	bl	8009ccc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	2201      	movs	r2, #1
 8009128:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	2201      	movs	r2, #1
 8009130:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	2201      	movs	r2, #1
 8009138:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	2201      	movs	r2, #1
 8009140:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	2201      	movs	r2, #1
 8009148:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	2201      	movs	r2, #1
 8009150:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	2201      	movs	r2, #1
 8009158:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	2201      	movs	r2, #1
 8009160:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	2201      	movs	r2, #1
 8009168:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	2201      	movs	r2, #1
 8009170:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	2201      	movs	r2, #1
 8009178:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	2201      	movs	r2, #1
 8009180:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009184:	2300      	movs	r3, #0
}
 8009186:	4618      	mov	r0, r3
 8009188:	3708      	adds	r7, #8
 800918a:	46bd      	mov	sp, r7
 800918c:	bd80      	pop	{r7, pc}
	...

08009190 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009190:	b580      	push	{r7, lr}
 8009192:	b084      	sub	sp, #16
 8009194:	af00      	add	r7, sp, #0
 8009196:	6078      	str	r0, [r7, #4]
 8009198:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800919a:	683b      	ldr	r3, [r7, #0]
 800919c:	2b00      	cmp	r3, #0
 800919e:	d109      	bne.n	80091b4 <HAL_TIM_PWM_Start+0x24>
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80091a6:	b2db      	uxtb	r3, r3
 80091a8:	2b01      	cmp	r3, #1
 80091aa:	bf14      	ite	ne
 80091ac:	2301      	movne	r3, #1
 80091ae:	2300      	moveq	r3, #0
 80091b0:	b2db      	uxtb	r3, r3
 80091b2:	e03c      	b.n	800922e <HAL_TIM_PWM_Start+0x9e>
 80091b4:	683b      	ldr	r3, [r7, #0]
 80091b6:	2b04      	cmp	r3, #4
 80091b8:	d109      	bne.n	80091ce <HAL_TIM_PWM_Start+0x3e>
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80091c0:	b2db      	uxtb	r3, r3
 80091c2:	2b01      	cmp	r3, #1
 80091c4:	bf14      	ite	ne
 80091c6:	2301      	movne	r3, #1
 80091c8:	2300      	moveq	r3, #0
 80091ca:	b2db      	uxtb	r3, r3
 80091cc:	e02f      	b.n	800922e <HAL_TIM_PWM_Start+0x9e>
 80091ce:	683b      	ldr	r3, [r7, #0]
 80091d0:	2b08      	cmp	r3, #8
 80091d2:	d109      	bne.n	80091e8 <HAL_TIM_PWM_Start+0x58>
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80091da:	b2db      	uxtb	r3, r3
 80091dc:	2b01      	cmp	r3, #1
 80091de:	bf14      	ite	ne
 80091e0:	2301      	movne	r3, #1
 80091e2:	2300      	moveq	r3, #0
 80091e4:	b2db      	uxtb	r3, r3
 80091e6:	e022      	b.n	800922e <HAL_TIM_PWM_Start+0x9e>
 80091e8:	683b      	ldr	r3, [r7, #0]
 80091ea:	2b0c      	cmp	r3, #12
 80091ec:	d109      	bne.n	8009202 <HAL_TIM_PWM_Start+0x72>
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80091f4:	b2db      	uxtb	r3, r3
 80091f6:	2b01      	cmp	r3, #1
 80091f8:	bf14      	ite	ne
 80091fa:	2301      	movne	r3, #1
 80091fc:	2300      	moveq	r3, #0
 80091fe:	b2db      	uxtb	r3, r3
 8009200:	e015      	b.n	800922e <HAL_TIM_PWM_Start+0x9e>
 8009202:	683b      	ldr	r3, [r7, #0]
 8009204:	2b10      	cmp	r3, #16
 8009206:	d109      	bne.n	800921c <HAL_TIM_PWM_Start+0x8c>
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800920e:	b2db      	uxtb	r3, r3
 8009210:	2b01      	cmp	r3, #1
 8009212:	bf14      	ite	ne
 8009214:	2301      	movne	r3, #1
 8009216:	2300      	moveq	r3, #0
 8009218:	b2db      	uxtb	r3, r3
 800921a:	e008      	b.n	800922e <HAL_TIM_PWM_Start+0x9e>
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8009222:	b2db      	uxtb	r3, r3
 8009224:	2b01      	cmp	r3, #1
 8009226:	bf14      	ite	ne
 8009228:	2301      	movne	r3, #1
 800922a:	2300      	moveq	r3, #0
 800922c:	b2db      	uxtb	r3, r3
 800922e:	2b00      	cmp	r3, #0
 8009230:	d001      	beq.n	8009236 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8009232:	2301      	movs	r3, #1
 8009234:	e0a1      	b.n	800937a <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009236:	683b      	ldr	r3, [r7, #0]
 8009238:	2b00      	cmp	r3, #0
 800923a:	d104      	bne.n	8009246 <HAL_TIM_PWM_Start+0xb6>
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	2202      	movs	r2, #2
 8009240:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009244:	e023      	b.n	800928e <HAL_TIM_PWM_Start+0xfe>
 8009246:	683b      	ldr	r3, [r7, #0]
 8009248:	2b04      	cmp	r3, #4
 800924a:	d104      	bne.n	8009256 <HAL_TIM_PWM_Start+0xc6>
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	2202      	movs	r2, #2
 8009250:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009254:	e01b      	b.n	800928e <HAL_TIM_PWM_Start+0xfe>
 8009256:	683b      	ldr	r3, [r7, #0]
 8009258:	2b08      	cmp	r3, #8
 800925a:	d104      	bne.n	8009266 <HAL_TIM_PWM_Start+0xd6>
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	2202      	movs	r2, #2
 8009260:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009264:	e013      	b.n	800928e <HAL_TIM_PWM_Start+0xfe>
 8009266:	683b      	ldr	r3, [r7, #0]
 8009268:	2b0c      	cmp	r3, #12
 800926a:	d104      	bne.n	8009276 <HAL_TIM_PWM_Start+0xe6>
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	2202      	movs	r2, #2
 8009270:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009274:	e00b      	b.n	800928e <HAL_TIM_PWM_Start+0xfe>
 8009276:	683b      	ldr	r3, [r7, #0]
 8009278:	2b10      	cmp	r3, #16
 800927a:	d104      	bne.n	8009286 <HAL_TIM_PWM_Start+0xf6>
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	2202      	movs	r2, #2
 8009280:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009284:	e003      	b.n	800928e <HAL_TIM_PWM_Start+0xfe>
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	2202      	movs	r2, #2
 800928a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	2201      	movs	r2, #1
 8009294:	6839      	ldr	r1, [r7, #0]
 8009296:	4618      	mov	r0, r3
 8009298:	f001 f932 	bl	800a500 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	4a38      	ldr	r2, [pc, #224]	@ (8009384 <HAL_TIM_PWM_Start+0x1f4>)
 80092a2:	4293      	cmp	r3, r2
 80092a4:	d013      	beq.n	80092ce <HAL_TIM_PWM_Start+0x13e>
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	4a37      	ldr	r2, [pc, #220]	@ (8009388 <HAL_TIM_PWM_Start+0x1f8>)
 80092ac:	4293      	cmp	r3, r2
 80092ae:	d00e      	beq.n	80092ce <HAL_TIM_PWM_Start+0x13e>
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	4a35      	ldr	r2, [pc, #212]	@ (800938c <HAL_TIM_PWM_Start+0x1fc>)
 80092b6:	4293      	cmp	r3, r2
 80092b8:	d009      	beq.n	80092ce <HAL_TIM_PWM_Start+0x13e>
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	4a34      	ldr	r2, [pc, #208]	@ (8009390 <HAL_TIM_PWM_Start+0x200>)
 80092c0:	4293      	cmp	r3, r2
 80092c2:	d004      	beq.n	80092ce <HAL_TIM_PWM_Start+0x13e>
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	4a32      	ldr	r2, [pc, #200]	@ (8009394 <HAL_TIM_PWM_Start+0x204>)
 80092ca:	4293      	cmp	r3, r2
 80092cc:	d101      	bne.n	80092d2 <HAL_TIM_PWM_Start+0x142>
 80092ce:	2301      	movs	r3, #1
 80092d0:	e000      	b.n	80092d4 <HAL_TIM_PWM_Start+0x144>
 80092d2:	2300      	movs	r3, #0
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d007      	beq.n	80092e8 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80092e6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	4a25      	ldr	r2, [pc, #148]	@ (8009384 <HAL_TIM_PWM_Start+0x1f4>)
 80092ee:	4293      	cmp	r3, r2
 80092f0:	d022      	beq.n	8009338 <HAL_TIM_PWM_Start+0x1a8>
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80092fa:	d01d      	beq.n	8009338 <HAL_TIM_PWM_Start+0x1a8>
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	4a25      	ldr	r2, [pc, #148]	@ (8009398 <HAL_TIM_PWM_Start+0x208>)
 8009302:	4293      	cmp	r3, r2
 8009304:	d018      	beq.n	8009338 <HAL_TIM_PWM_Start+0x1a8>
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	4a24      	ldr	r2, [pc, #144]	@ (800939c <HAL_TIM_PWM_Start+0x20c>)
 800930c:	4293      	cmp	r3, r2
 800930e:	d013      	beq.n	8009338 <HAL_TIM_PWM_Start+0x1a8>
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	4a22      	ldr	r2, [pc, #136]	@ (80093a0 <HAL_TIM_PWM_Start+0x210>)
 8009316:	4293      	cmp	r3, r2
 8009318:	d00e      	beq.n	8009338 <HAL_TIM_PWM_Start+0x1a8>
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	4a1a      	ldr	r2, [pc, #104]	@ (8009388 <HAL_TIM_PWM_Start+0x1f8>)
 8009320:	4293      	cmp	r3, r2
 8009322:	d009      	beq.n	8009338 <HAL_TIM_PWM_Start+0x1a8>
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	4a1e      	ldr	r2, [pc, #120]	@ (80093a4 <HAL_TIM_PWM_Start+0x214>)
 800932a:	4293      	cmp	r3, r2
 800932c:	d004      	beq.n	8009338 <HAL_TIM_PWM_Start+0x1a8>
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	4a16      	ldr	r2, [pc, #88]	@ (800938c <HAL_TIM_PWM_Start+0x1fc>)
 8009334:	4293      	cmp	r3, r2
 8009336:	d115      	bne.n	8009364 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	689a      	ldr	r2, [r3, #8]
 800933e:	4b1a      	ldr	r3, [pc, #104]	@ (80093a8 <HAL_TIM_PWM_Start+0x218>)
 8009340:	4013      	ands	r3, r2
 8009342:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	2b06      	cmp	r3, #6
 8009348:	d015      	beq.n	8009376 <HAL_TIM_PWM_Start+0x1e6>
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009350:	d011      	beq.n	8009376 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	681a      	ldr	r2, [r3, #0]
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	f042 0201 	orr.w	r2, r2, #1
 8009360:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009362:	e008      	b.n	8009376 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	681a      	ldr	r2, [r3, #0]
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	f042 0201 	orr.w	r2, r2, #1
 8009372:	601a      	str	r2, [r3, #0]
 8009374:	e000      	b.n	8009378 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009376:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009378:	2300      	movs	r3, #0
}
 800937a:	4618      	mov	r0, r3
 800937c:	3710      	adds	r7, #16
 800937e:	46bd      	mov	sp, r7
 8009380:	bd80      	pop	{r7, pc}
 8009382:	bf00      	nop
 8009384:	40010000 	.word	0x40010000
 8009388:	40010400 	.word	0x40010400
 800938c:	40014000 	.word	0x40014000
 8009390:	40014400 	.word	0x40014400
 8009394:	40014800 	.word	0x40014800
 8009398:	40000400 	.word	0x40000400
 800939c:	40000800 	.word	0x40000800
 80093a0:	40000c00 	.word	0x40000c00
 80093a4:	40001800 	.word	0x40001800
 80093a8:	00010007 	.word	0x00010007

080093ac <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80093ac:	b580      	push	{r7, lr}
 80093ae:	b086      	sub	sp, #24
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	6078      	str	r0, [r7, #4]
 80093b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d101      	bne.n	80093c0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80093bc:	2301      	movs	r3, #1
 80093be:	e08f      	b.n	80094e0 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80093c6:	b2db      	uxtb	r3, r3
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d106      	bne.n	80093da <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	2200      	movs	r2, #0
 80093d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80093d4:	6878      	ldr	r0, [r7, #4]
 80093d6:	f7f8 fca1 	bl	8001d1c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	2202      	movs	r2, #2
 80093de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	6899      	ldr	r1, [r3, #8]
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681a      	ldr	r2, [r3, #0]
 80093ec:	4b3e      	ldr	r3, [pc, #248]	@ (80094e8 <HAL_TIM_Encoder_Init+0x13c>)
 80093ee:	400b      	ands	r3, r1
 80093f0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	681a      	ldr	r2, [r3, #0]
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	3304      	adds	r3, #4
 80093fa:	4619      	mov	r1, r3
 80093fc:	4610      	mov	r0, r2
 80093fe:	f000 fc65 	bl	8009ccc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	689b      	ldr	r3, [r3, #8]
 8009408:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	699b      	ldr	r3, [r3, #24]
 8009410:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	6a1b      	ldr	r3, [r3, #32]
 8009418:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800941a:	683b      	ldr	r3, [r7, #0]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	697a      	ldr	r2, [r7, #20]
 8009420:	4313      	orrs	r3, r2
 8009422:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8009424:	693a      	ldr	r2, [r7, #16]
 8009426:	4b31      	ldr	r3, [pc, #196]	@ (80094ec <HAL_TIM_Encoder_Init+0x140>)
 8009428:	4013      	ands	r3, r2
 800942a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800942c:	683b      	ldr	r3, [r7, #0]
 800942e:	689a      	ldr	r2, [r3, #8]
 8009430:	683b      	ldr	r3, [r7, #0]
 8009432:	699b      	ldr	r3, [r3, #24]
 8009434:	021b      	lsls	r3, r3, #8
 8009436:	4313      	orrs	r3, r2
 8009438:	693a      	ldr	r2, [r7, #16]
 800943a:	4313      	orrs	r3, r2
 800943c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800943e:	693a      	ldr	r2, [r7, #16]
 8009440:	4b2b      	ldr	r3, [pc, #172]	@ (80094f0 <HAL_TIM_Encoder_Init+0x144>)
 8009442:	4013      	ands	r3, r2
 8009444:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8009446:	693a      	ldr	r2, [r7, #16]
 8009448:	4b2a      	ldr	r3, [pc, #168]	@ (80094f4 <HAL_TIM_Encoder_Init+0x148>)
 800944a:	4013      	ands	r3, r2
 800944c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800944e:	683b      	ldr	r3, [r7, #0]
 8009450:	68da      	ldr	r2, [r3, #12]
 8009452:	683b      	ldr	r3, [r7, #0]
 8009454:	69db      	ldr	r3, [r3, #28]
 8009456:	021b      	lsls	r3, r3, #8
 8009458:	4313      	orrs	r3, r2
 800945a:	693a      	ldr	r2, [r7, #16]
 800945c:	4313      	orrs	r3, r2
 800945e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8009460:	683b      	ldr	r3, [r7, #0]
 8009462:	691b      	ldr	r3, [r3, #16]
 8009464:	011a      	lsls	r2, r3, #4
 8009466:	683b      	ldr	r3, [r7, #0]
 8009468:	6a1b      	ldr	r3, [r3, #32]
 800946a:	031b      	lsls	r3, r3, #12
 800946c:	4313      	orrs	r3, r2
 800946e:	693a      	ldr	r2, [r7, #16]
 8009470:	4313      	orrs	r3, r2
 8009472:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800947a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8009482:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8009484:	683b      	ldr	r3, [r7, #0]
 8009486:	685a      	ldr	r2, [r3, #4]
 8009488:	683b      	ldr	r3, [r7, #0]
 800948a:	695b      	ldr	r3, [r3, #20]
 800948c:	011b      	lsls	r3, r3, #4
 800948e:	4313      	orrs	r3, r2
 8009490:	68fa      	ldr	r2, [r7, #12]
 8009492:	4313      	orrs	r3, r2
 8009494:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	697a      	ldr	r2, [r7, #20]
 800949c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	693a      	ldr	r2, [r7, #16]
 80094a4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	68fa      	ldr	r2, [r7, #12]
 80094ac:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	2201      	movs	r2, #1
 80094b2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	2201      	movs	r2, #1
 80094ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	2201      	movs	r2, #1
 80094c2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	2201      	movs	r2, #1
 80094ca:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	2201      	movs	r2, #1
 80094d2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	2201      	movs	r2, #1
 80094da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80094de:	2300      	movs	r3, #0
}
 80094e0:	4618      	mov	r0, r3
 80094e2:	3718      	adds	r7, #24
 80094e4:	46bd      	mov	sp, r7
 80094e6:	bd80      	pop	{r7, pc}
 80094e8:	fffebff8 	.word	0xfffebff8
 80094ec:	fffffcfc 	.word	0xfffffcfc
 80094f0:	fffff3f3 	.word	0xfffff3f3
 80094f4:	ffff0f0f 	.word	0xffff0f0f

080094f8 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80094f8:	b580      	push	{r7, lr}
 80094fa:	b084      	sub	sp, #16
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	6078      	str	r0, [r7, #4]
 8009500:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009508:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8009510:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009518:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009520:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8009522:	683b      	ldr	r3, [r7, #0]
 8009524:	2b00      	cmp	r3, #0
 8009526:	d110      	bne.n	800954a <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009528:	7bfb      	ldrb	r3, [r7, #15]
 800952a:	2b01      	cmp	r3, #1
 800952c:	d102      	bne.n	8009534 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800952e:	7b7b      	ldrb	r3, [r7, #13]
 8009530:	2b01      	cmp	r3, #1
 8009532:	d001      	beq.n	8009538 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8009534:	2301      	movs	r3, #1
 8009536:	e089      	b.n	800964c <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	2202      	movs	r2, #2
 800953c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	2202      	movs	r2, #2
 8009544:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009548:	e031      	b.n	80095ae <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800954a:	683b      	ldr	r3, [r7, #0]
 800954c:	2b04      	cmp	r3, #4
 800954e:	d110      	bne.n	8009572 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009550:	7bbb      	ldrb	r3, [r7, #14]
 8009552:	2b01      	cmp	r3, #1
 8009554:	d102      	bne.n	800955c <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009556:	7b3b      	ldrb	r3, [r7, #12]
 8009558:	2b01      	cmp	r3, #1
 800955a:	d001      	beq.n	8009560 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 800955c:	2301      	movs	r3, #1
 800955e:	e075      	b.n	800964c <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	2202      	movs	r2, #2
 8009564:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	2202      	movs	r2, #2
 800956c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009570:	e01d      	b.n	80095ae <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009572:	7bfb      	ldrb	r3, [r7, #15]
 8009574:	2b01      	cmp	r3, #1
 8009576:	d108      	bne.n	800958a <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009578:	7bbb      	ldrb	r3, [r7, #14]
 800957a:	2b01      	cmp	r3, #1
 800957c:	d105      	bne.n	800958a <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800957e:	7b7b      	ldrb	r3, [r7, #13]
 8009580:	2b01      	cmp	r3, #1
 8009582:	d102      	bne.n	800958a <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009584:	7b3b      	ldrb	r3, [r7, #12]
 8009586:	2b01      	cmp	r3, #1
 8009588:	d001      	beq.n	800958e <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 800958a:	2301      	movs	r3, #1
 800958c:	e05e      	b.n	800964c <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	2202      	movs	r2, #2
 8009592:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	2202      	movs	r2, #2
 800959a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	2202      	movs	r2, #2
 80095a2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	2202      	movs	r2, #2
 80095aa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 80095ae:	683b      	ldr	r3, [r7, #0]
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d003      	beq.n	80095bc <HAL_TIM_Encoder_Start_IT+0xc4>
 80095b4:	683b      	ldr	r3, [r7, #0]
 80095b6:	2b04      	cmp	r3, #4
 80095b8:	d010      	beq.n	80095dc <HAL_TIM_Encoder_Start_IT+0xe4>
 80095ba:	e01f      	b.n	80095fc <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	2201      	movs	r2, #1
 80095c2:	2100      	movs	r1, #0
 80095c4:	4618      	mov	r0, r3
 80095c6:	f000 ff9b 	bl	800a500 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	68da      	ldr	r2, [r3, #12]
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	f042 0202 	orr.w	r2, r2, #2
 80095d8:	60da      	str	r2, [r3, #12]
      break;
 80095da:	e02e      	b.n	800963a <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	2201      	movs	r2, #1
 80095e2:	2104      	movs	r1, #4
 80095e4:	4618      	mov	r0, r3
 80095e6:	f000 ff8b 	bl	800a500 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	68da      	ldr	r2, [r3, #12]
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	f042 0204 	orr.w	r2, r2, #4
 80095f8:	60da      	str	r2, [r3, #12]
      break;
 80095fa:	e01e      	b.n	800963a <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	2201      	movs	r2, #1
 8009602:	2100      	movs	r1, #0
 8009604:	4618      	mov	r0, r3
 8009606:	f000 ff7b 	bl	800a500 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	2201      	movs	r2, #1
 8009610:	2104      	movs	r1, #4
 8009612:	4618      	mov	r0, r3
 8009614:	f000 ff74 	bl	800a500 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	68da      	ldr	r2, [r3, #12]
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	f042 0202 	orr.w	r2, r2, #2
 8009626:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	68da      	ldr	r2, [r3, #12]
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	f042 0204 	orr.w	r2, r2, #4
 8009636:	60da      	str	r2, [r3, #12]
      break;
 8009638:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	681a      	ldr	r2, [r3, #0]
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	f042 0201 	orr.w	r2, r2, #1
 8009648:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800964a:	2300      	movs	r3, #0
}
 800964c:	4618      	mov	r0, r3
 800964e:	3710      	adds	r7, #16
 8009650:	46bd      	mov	sp, r7
 8009652:	bd80      	pop	{r7, pc}

08009654 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009654:	b580      	push	{r7, lr}
 8009656:	b084      	sub	sp, #16
 8009658:	af00      	add	r7, sp, #0
 800965a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	68db      	ldr	r3, [r3, #12]
 8009662:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	691b      	ldr	r3, [r3, #16]
 800966a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800966c:	68bb      	ldr	r3, [r7, #8]
 800966e:	f003 0302 	and.w	r3, r3, #2
 8009672:	2b00      	cmp	r3, #0
 8009674:	d020      	beq.n	80096b8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	f003 0302 	and.w	r3, r3, #2
 800967c:	2b00      	cmp	r3, #0
 800967e:	d01b      	beq.n	80096b8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	f06f 0202 	mvn.w	r2, #2
 8009688:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	2201      	movs	r2, #1
 800968e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	699b      	ldr	r3, [r3, #24]
 8009696:	f003 0303 	and.w	r3, r3, #3
 800969a:	2b00      	cmp	r3, #0
 800969c:	d003      	beq.n	80096a6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800969e:	6878      	ldr	r0, [r7, #4]
 80096a0:	f7f7 fb6c 	bl	8000d7c <HAL_TIM_IC_CaptureCallback>
 80096a4:	e005      	b.n	80096b2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80096a6:	6878      	ldr	r0, [r7, #4]
 80096a8:	f000 faf2 	bl	8009c90 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80096ac:	6878      	ldr	r0, [r7, #4]
 80096ae:	f000 faf9 	bl	8009ca4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	2200      	movs	r2, #0
 80096b6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80096b8:	68bb      	ldr	r3, [r7, #8]
 80096ba:	f003 0304 	and.w	r3, r3, #4
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d020      	beq.n	8009704 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	f003 0304 	and.w	r3, r3, #4
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d01b      	beq.n	8009704 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	f06f 0204 	mvn.w	r2, #4
 80096d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	2202      	movs	r2, #2
 80096da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	699b      	ldr	r3, [r3, #24]
 80096e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d003      	beq.n	80096f2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80096ea:	6878      	ldr	r0, [r7, #4]
 80096ec:	f7f7 fb46 	bl	8000d7c <HAL_TIM_IC_CaptureCallback>
 80096f0:	e005      	b.n	80096fe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80096f2:	6878      	ldr	r0, [r7, #4]
 80096f4:	f000 facc 	bl	8009c90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80096f8:	6878      	ldr	r0, [r7, #4]
 80096fa:	f000 fad3 	bl	8009ca4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	2200      	movs	r2, #0
 8009702:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8009704:	68bb      	ldr	r3, [r7, #8]
 8009706:	f003 0308 	and.w	r3, r3, #8
 800970a:	2b00      	cmp	r3, #0
 800970c:	d020      	beq.n	8009750 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	f003 0308 	and.w	r3, r3, #8
 8009714:	2b00      	cmp	r3, #0
 8009716:	d01b      	beq.n	8009750 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	f06f 0208 	mvn.w	r2, #8
 8009720:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	2204      	movs	r2, #4
 8009726:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	69db      	ldr	r3, [r3, #28]
 800972e:	f003 0303 	and.w	r3, r3, #3
 8009732:	2b00      	cmp	r3, #0
 8009734:	d003      	beq.n	800973e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009736:	6878      	ldr	r0, [r7, #4]
 8009738:	f7f7 fb20 	bl	8000d7c <HAL_TIM_IC_CaptureCallback>
 800973c:	e005      	b.n	800974a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800973e:	6878      	ldr	r0, [r7, #4]
 8009740:	f000 faa6 	bl	8009c90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009744:	6878      	ldr	r0, [r7, #4]
 8009746:	f000 faad 	bl	8009ca4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	2200      	movs	r2, #0
 800974e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009750:	68bb      	ldr	r3, [r7, #8]
 8009752:	f003 0310 	and.w	r3, r3, #16
 8009756:	2b00      	cmp	r3, #0
 8009758:	d020      	beq.n	800979c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	f003 0310 	and.w	r3, r3, #16
 8009760:	2b00      	cmp	r3, #0
 8009762:	d01b      	beq.n	800979c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	f06f 0210 	mvn.w	r2, #16
 800976c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	2208      	movs	r2, #8
 8009772:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	69db      	ldr	r3, [r3, #28]
 800977a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800977e:	2b00      	cmp	r3, #0
 8009780:	d003      	beq.n	800978a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009782:	6878      	ldr	r0, [r7, #4]
 8009784:	f7f7 fafa 	bl	8000d7c <HAL_TIM_IC_CaptureCallback>
 8009788:	e005      	b.n	8009796 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800978a:	6878      	ldr	r0, [r7, #4]
 800978c:	f000 fa80 	bl	8009c90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009790:	6878      	ldr	r0, [r7, #4]
 8009792:	f000 fa87 	bl	8009ca4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	2200      	movs	r2, #0
 800979a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800979c:	68bb      	ldr	r3, [r7, #8]
 800979e:	f003 0301 	and.w	r3, r3, #1
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d00c      	beq.n	80097c0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	f003 0301 	and.w	r3, r3, #1
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d007      	beq.n	80097c0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	f06f 0201 	mvn.w	r2, #1
 80097b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80097ba:	6878      	ldr	r0, [r7, #4]
 80097bc:	f000 fa5e 	bl	8009c7c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80097c0:	68bb      	ldr	r3, [r7, #8]
 80097c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d104      	bne.n	80097d4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80097ca:	68bb      	ldr	r3, [r7, #8]
 80097cc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d00c      	beq.n	80097ee <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d007      	beq.n	80097ee <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80097e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80097e8:	6878      	ldr	r0, [r7, #4]
 80097ea:	f000 ff47 	bl	800a67c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80097ee:	68bb      	ldr	r3, [r7, #8]
 80097f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d00c      	beq.n	8009812 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d007      	beq.n	8009812 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800980a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800980c:	6878      	ldr	r0, [r7, #4]
 800980e:	f000 ff3f 	bl	800a690 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8009812:	68bb      	ldr	r3, [r7, #8]
 8009814:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009818:	2b00      	cmp	r3, #0
 800981a:	d00c      	beq.n	8009836 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009822:	2b00      	cmp	r3, #0
 8009824:	d007      	beq.n	8009836 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800982e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009830:	6878      	ldr	r0, [r7, #4]
 8009832:	f000 fa41 	bl	8009cb8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8009836:	68bb      	ldr	r3, [r7, #8]
 8009838:	f003 0320 	and.w	r3, r3, #32
 800983c:	2b00      	cmp	r3, #0
 800983e:	d00c      	beq.n	800985a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	f003 0320 	and.w	r3, r3, #32
 8009846:	2b00      	cmp	r3, #0
 8009848:	d007      	beq.n	800985a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	f06f 0220 	mvn.w	r2, #32
 8009852:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009854:	6878      	ldr	r0, [r7, #4]
 8009856:	f000 ff07 	bl	800a668 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800985a:	bf00      	nop
 800985c:	3710      	adds	r7, #16
 800985e:	46bd      	mov	sp, r7
 8009860:	bd80      	pop	{r7, pc}
	...

08009864 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009864:	b580      	push	{r7, lr}
 8009866:	b086      	sub	sp, #24
 8009868:	af00      	add	r7, sp, #0
 800986a:	60f8      	str	r0, [r7, #12]
 800986c:	60b9      	str	r1, [r7, #8]
 800986e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009870:	2300      	movs	r3, #0
 8009872:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800987a:	2b01      	cmp	r3, #1
 800987c:	d101      	bne.n	8009882 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800987e:	2302      	movs	r3, #2
 8009880:	e0ff      	b.n	8009a82 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	2201      	movs	r2, #1
 8009886:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	2b14      	cmp	r3, #20
 800988e:	f200 80f0 	bhi.w	8009a72 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8009892:	a201      	add	r2, pc, #4	@ (adr r2, 8009898 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009894:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009898:	080098ed 	.word	0x080098ed
 800989c:	08009a73 	.word	0x08009a73
 80098a0:	08009a73 	.word	0x08009a73
 80098a4:	08009a73 	.word	0x08009a73
 80098a8:	0800992d 	.word	0x0800992d
 80098ac:	08009a73 	.word	0x08009a73
 80098b0:	08009a73 	.word	0x08009a73
 80098b4:	08009a73 	.word	0x08009a73
 80098b8:	0800996f 	.word	0x0800996f
 80098bc:	08009a73 	.word	0x08009a73
 80098c0:	08009a73 	.word	0x08009a73
 80098c4:	08009a73 	.word	0x08009a73
 80098c8:	080099af 	.word	0x080099af
 80098cc:	08009a73 	.word	0x08009a73
 80098d0:	08009a73 	.word	0x08009a73
 80098d4:	08009a73 	.word	0x08009a73
 80098d8:	080099f1 	.word	0x080099f1
 80098dc:	08009a73 	.word	0x08009a73
 80098e0:	08009a73 	.word	0x08009a73
 80098e4:	08009a73 	.word	0x08009a73
 80098e8:	08009a31 	.word	0x08009a31
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	68b9      	ldr	r1, [r7, #8]
 80098f2:	4618      	mov	r0, r3
 80098f4:	f000 fa90 	bl	8009e18 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	699a      	ldr	r2, [r3, #24]
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	f042 0208 	orr.w	r2, r2, #8
 8009906:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	699a      	ldr	r2, [r3, #24]
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	f022 0204 	bic.w	r2, r2, #4
 8009916:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	6999      	ldr	r1, [r3, #24]
 800991e:	68bb      	ldr	r3, [r7, #8]
 8009920:	691a      	ldr	r2, [r3, #16]
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	430a      	orrs	r2, r1
 8009928:	619a      	str	r2, [r3, #24]
      break;
 800992a:	e0a5      	b.n	8009a78 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	68b9      	ldr	r1, [r7, #8]
 8009932:	4618      	mov	r0, r3
 8009934:	f000 fb00 	bl	8009f38 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	699a      	ldr	r2, [r3, #24]
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009946:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	699a      	ldr	r2, [r3, #24]
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009956:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	6999      	ldr	r1, [r3, #24]
 800995e:	68bb      	ldr	r3, [r7, #8]
 8009960:	691b      	ldr	r3, [r3, #16]
 8009962:	021a      	lsls	r2, r3, #8
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	430a      	orrs	r2, r1
 800996a:	619a      	str	r2, [r3, #24]
      break;
 800996c:	e084      	b.n	8009a78 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	68b9      	ldr	r1, [r7, #8]
 8009974:	4618      	mov	r0, r3
 8009976:	f000 fb69 	bl	800a04c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	69da      	ldr	r2, [r3, #28]
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	f042 0208 	orr.w	r2, r2, #8
 8009988:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	69da      	ldr	r2, [r3, #28]
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	f022 0204 	bic.w	r2, r2, #4
 8009998:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	69d9      	ldr	r1, [r3, #28]
 80099a0:	68bb      	ldr	r3, [r7, #8]
 80099a2:	691a      	ldr	r2, [r3, #16]
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	430a      	orrs	r2, r1
 80099aa:	61da      	str	r2, [r3, #28]
      break;
 80099ac:	e064      	b.n	8009a78 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	68b9      	ldr	r1, [r7, #8]
 80099b4:	4618      	mov	r0, r3
 80099b6:	f000 fbd1 	bl	800a15c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	69da      	ldr	r2, [r3, #28]
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80099c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	69da      	ldr	r2, [r3, #28]
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80099d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	69d9      	ldr	r1, [r3, #28]
 80099e0:	68bb      	ldr	r3, [r7, #8]
 80099e2:	691b      	ldr	r3, [r3, #16]
 80099e4:	021a      	lsls	r2, r3, #8
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	430a      	orrs	r2, r1
 80099ec:	61da      	str	r2, [r3, #28]
      break;
 80099ee:	e043      	b.n	8009a78 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	68b9      	ldr	r1, [r7, #8]
 80099f6:	4618      	mov	r0, r3
 80099f8:	f000 fc1a 	bl	800a230 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	f042 0208 	orr.w	r2, r2, #8
 8009a0a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	f022 0204 	bic.w	r2, r2, #4
 8009a1a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8009a22:	68bb      	ldr	r3, [r7, #8]
 8009a24:	691a      	ldr	r2, [r3, #16]
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	430a      	orrs	r2, r1
 8009a2c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8009a2e:	e023      	b.n	8009a78 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	68b9      	ldr	r1, [r7, #8]
 8009a36:	4618      	mov	r0, r3
 8009a38:	f000 fc5e 	bl	800a2f8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009a4a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009a5a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8009a62:	68bb      	ldr	r3, [r7, #8]
 8009a64:	691b      	ldr	r3, [r3, #16]
 8009a66:	021a      	lsls	r2, r3, #8
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	430a      	orrs	r2, r1
 8009a6e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8009a70:	e002      	b.n	8009a78 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8009a72:	2301      	movs	r3, #1
 8009a74:	75fb      	strb	r3, [r7, #23]
      break;
 8009a76:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	2200      	movs	r2, #0
 8009a7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009a80:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a82:	4618      	mov	r0, r3
 8009a84:	3718      	adds	r7, #24
 8009a86:	46bd      	mov	sp, r7
 8009a88:	bd80      	pop	{r7, pc}
 8009a8a:	bf00      	nop

08009a8c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009a8c:	b580      	push	{r7, lr}
 8009a8e:	b084      	sub	sp, #16
 8009a90:	af00      	add	r7, sp, #0
 8009a92:	6078      	str	r0, [r7, #4]
 8009a94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009a96:	2300      	movs	r3, #0
 8009a98:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009aa0:	2b01      	cmp	r3, #1
 8009aa2:	d101      	bne.n	8009aa8 <HAL_TIM_ConfigClockSource+0x1c>
 8009aa4:	2302      	movs	r3, #2
 8009aa6:	e0dc      	b.n	8009c62 <HAL_TIM_ConfigClockSource+0x1d6>
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	2201      	movs	r2, #1
 8009aac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	2202      	movs	r2, #2
 8009ab4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	689b      	ldr	r3, [r3, #8]
 8009abe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009ac0:	68ba      	ldr	r2, [r7, #8]
 8009ac2:	4b6a      	ldr	r3, [pc, #424]	@ (8009c6c <HAL_TIM_ConfigClockSource+0x1e0>)
 8009ac4:	4013      	ands	r3, r2
 8009ac6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009ac8:	68bb      	ldr	r3, [r7, #8]
 8009aca:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009ace:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	68ba      	ldr	r2, [r7, #8]
 8009ad6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009ad8:	683b      	ldr	r3, [r7, #0]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	4a64      	ldr	r2, [pc, #400]	@ (8009c70 <HAL_TIM_ConfigClockSource+0x1e4>)
 8009ade:	4293      	cmp	r3, r2
 8009ae0:	f000 80a9 	beq.w	8009c36 <HAL_TIM_ConfigClockSource+0x1aa>
 8009ae4:	4a62      	ldr	r2, [pc, #392]	@ (8009c70 <HAL_TIM_ConfigClockSource+0x1e4>)
 8009ae6:	4293      	cmp	r3, r2
 8009ae8:	f200 80ae 	bhi.w	8009c48 <HAL_TIM_ConfigClockSource+0x1bc>
 8009aec:	4a61      	ldr	r2, [pc, #388]	@ (8009c74 <HAL_TIM_ConfigClockSource+0x1e8>)
 8009aee:	4293      	cmp	r3, r2
 8009af0:	f000 80a1 	beq.w	8009c36 <HAL_TIM_ConfigClockSource+0x1aa>
 8009af4:	4a5f      	ldr	r2, [pc, #380]	@ (8009c74 <HAL_TIM_ConfigClockSource+0x1e8>)
 8009af6:	4293      	cmp	r3, r2
 8009af8:	f200 80a6 	bhi.w	8009c48 <HAL_TIM_ConfigClockSource+0x1bc>
 8009afc:	4a5e      	ldr	r2, [pc, #376]	@ (8009c78 <HAL_TIM_ConfigClockSource+0x1ec>)
 8009afe:	4293      	cmp	r3, r2
 8009b00:	f000 8099 	beq.w	8009c36 <HAL_TIM_ConfigClockSource+0x1aa>
 8009b04:	4a5c      	ldr	r2, [pc, #368]	@ (8009c78 <HAL_TIM_ConfigClockSource+0x1ec>)
 8009b06:	4293      	cmp	r3, r2
 8009b08:	f200 809e 	bhi.w	8009c48 <HAL_TIM_ConfigClockSource+0x1bc>
 8009b0c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8009b10:	f000 8091 	beq.w	8009c36 <HAL_TIM_ConfigClockSource+0x1aa>
 8009b14:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8009b18:	f200 8096 	bhi.w	8009c48 <HAL_TIM_ConfigClockSource+0x1bc>
 8009b1c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009b20:	f000 8089 	beq.w	8009c36 <HAL_TIM_ConfigClockSource+0x1aa>
 8009b24:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009b28:	f200 808e 	bhi.w	8009c48 <HAL_TIM_ConfigClockSource+0x1bc>
 8009b2c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009b30:	d03e      	beq.n	8009bb0 <HAL_TIM_ConfigClockSource+0x124>
 8009b32:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009b36:	f200 8087 	bhi.w	8009c48 <HAL_TIM_ConfigClockSource+0x1bc>
 8009b3a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009b3e:	f000 8086 	beq.w	8009c4e <HAL_TIM_ConfigClockSource+0x1c2>
 8009b42:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009b46:	d87f      	bhi.n	8009c48 <HAL_TIM_ConfigClockSource+0x1bc>
 8009b48:	2b70      	cmp	r3, #112	@ 0x70
 8009b4a:	d01a      	beq.n	8009b82 <HAL_TIM_ConfigClockSource+0xf6>
 8009b4c:	2b70      	cmp	r3, #112	@ 0x70
 8009b4e:	d87b      	bhi.n	8009c48 <HAL_TIM_ConfigClockSource+0x1bc>
 8009b50:	2b60      	cmp	r3, #96	@ 0x60
 8009b52:	d050      	beq.n	8009bf6 <HAL_TIM_ConfigClockSource+0x16a>
 8009b54:	2b60      	cmp	r3, #96	@ 0x60
 8009b56:	d877      	bhi.n	8009c48 <HAL_TIM_ConfigClockSource+0x1bc>
 8009b58:	2b50      	cmp	r3, #80	@ 0x50
 8009b5a:	d03c      	beq.n	8009bd6 <HAL_TIM_ConfigClockSource+0x14a>
 8009b5c:	2b50      	cmp	r3, #80	@ 0x50
 8009b5e:	d873      	bhi.n	8009c48 <HAL_TIM_ConfigClockSource+0x1bc>
 8009b60:	2b40      	cmp	r3, #64	@ 0x40
 8009b62:	d058      	beq.n	8009c16 <HAL_TIM_ConfigClockSource+0x18a>
 8009b64:	2b40      	cmp	r3, #64	@ 0x40
 8009b66:	d86f      	bhi.n	8009c48 <HAL_TIM_ConfigClockSource+0x1bc>
 8009b68:	2b30      	cmp	r3, #48	@ 0x30
 8009b6a:	d064      	beq.n	8009c36 <HAL_TIM_ConfigClockSource+0x1aa>
 8009b6c:	2b30      	cmp	r3, #48	@ 0x30
 8009b6e:	d86b      	bhi.n	8009c48 <HAL_TIM_ConfigClockSource+0x1bc>
 8009b70:	2b20      	cmp	r3, #32
 8009b72:	d060      	beq.n	8009c36 <HAL_TIM_ConfigClockSource+0x1aa>
 8009b74:	2b20      	cmp	r3, #32
 8009b76:	d867      	bhi.n	8009c48 <HAL_TIM_ConfigClockSource+0x1bc>
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d05c      	beq.n	8009c36 <HAL_TIM_ConfigClockSource+0x1aa>
 8009b7c:	2b10      	cmp	r3, #16
 8009b7e:	d05a      	beq.n	8009c36 <HAL_TIM_ConfigClockSource+0x1aa>
 8009b80:	e062      	b.n	8009c48 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009b86:	683b      	ldr	r3, [r7, #0]
 8009b88:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009b8a:	683b      	ldr	r3, [r7, #0]
 8009b8c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009b8e:	683b      	ldr	r3, [r7, #0]
 8009b90:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009b92:	f000 fc95 	bl	800a4c0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	689b      	ldr	r3, [r3, #8]
 8009b9c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009b9e:	68bb      	ldr	r3, [r7, #8]
 8009ba0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8009ba4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	68ba      	ldr	r2, [r7, #8]
 8009bac:	609a      	str	r2, [r3, #8]
      break;
 8009bae:	e04f      	b.n	8009c50 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009bb4:	683b      	ldr	r3, [r7, #0]
 8009bb6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009bb8:	683b      	ldr	r3, [r7, #0]
 8009bba:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009bbc:	683b      	ldr	r3, [r7, #0]
 8009bbe:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009bc0:	f000 fc7e 	bl	800a4c0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	689a      	ldr	r2, [r3, #8]
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009bd2:	609a      	str	r2, [r3, #8]
      break;
 8009bd4:	e03c      	b.n	8009c50 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009bda:	683b      	ldr	r3, [r7, #0]
 8009bdc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009bde:	683b      	ldr	r3, [r7, #0]
 8009be0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009be2:	461a      	mov	r2, r3
 8009be4:	f000 fbee 	bl	800a3c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	2150      	movs	r1, #80	@ 0x50
 8009bee:	4618      	mov	r0, r3
 8009bf0:	f000 fc48 	bl	800a484 <TIM_ITRx_SetConfig>
      break;
 8009bf4:	e02c      	b.n	8009c50 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009bfa:	683b      	ldr	r3, [r7, #0]
 8009bfc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009bfe:	683b      	ldr	r3, [r7, #0]
 8009c00:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009c02:	461a      	mov	r2, r3
 8009c04:	f000 fc0d 	bl	800a422 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	2160      	movs	r1, #96	@ 0x60
 8009c0e:	4618      	mov	r0, r3
 8009c10:	f000 fc38 	bl	800a484 <TIM_ITRx_SetConfig>
      break;
 8009c14:	e01c      	b.n	8009c50 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009c1a:	683b      	ldr	r3, [r7, #0]
 8009c1c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009c1e:	683b      	ldr	r3, [r7, #0]
 8009c20:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009c22:	461a      	mov	r2, r3
 8009c24:	f000 fbce 	bl	800a3c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	2140      	movs	r1, #64	@ 0x40
 8009c2e:	4618      	mov	r0, r3
 8009c30:	f000 fc28 	bl	800a484 <TIM_ITRx_SetConfig>
      break;
 8009c34:	e00c      	b.n	8009c50 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	681a      	ldr	r2, [r3, #0]
 8009c3a:	683b      	ldr	r3, [r7, #0]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	4619      	mov	r1, r3
 8009c40:	4610      	mov	r0, r2
 8009c42:	f000 fc1f 	bl	800a484 <TIM_ITRx_SetConfig>
      break;
 8009c46:	e003      	b.n	8009c50 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8009c48:	2301      	movs	r3, #1
 8009c4a:	73fb      	strb	r3, [r7, #15]
      break;
 8009c4c:	e000      	b.n	8009c50 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8009c4e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	2201      	movs	r2, #1
 8009c54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	2200      	movs	r2, #0
 8009c5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009c60:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c62:	4618      	mov	r0, r3
 8009c64:	3710      	adds	r7, #16
 8009c66:	46bd      	mov	sp, r7
 8009c68:	bd80      	pop	{r7, pc}
 8009c6a:	bf00      	nop
 8009c6c:	ffceff88 	.word	0xffceff88
 8009c70:	00100040 	.word	0x00100040
 8009c74:	00100030 	.word	0x00100030
 8009c78:	00100020 	.word	0x00100020

08009c7c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009c7c:	b480      	push	{r7}
 8009c7e:	b083      	sub	sp, #12
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8009c84:	bf00      	nop
 8009c86:	370c      	adds	r7, #12
 8009c88:	46bd      	mov	sp, r7
 8009c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c8e:	4770      	bx	lr

08009c90 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009c90:	b480      	push	{r7}
 8009c92:	b083      	sub	sp, #12
 8009c94:	af00      	add	r7, sp, #0
 8009c96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009c98:	bf00      	nop
 8009c9a:	370c      	adds	r7, #12
 8009c9c:	46bd      	mov	sp, r7
 8009c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca2:	4770      	bx	lr

08009ca4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009ca4:	b480      	push	{r7}
 8009ca6:	b083      	sub	sp, #12
 8009ca8:	af00      	add	r7, sp, #0
 8009caa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009cac:	bf00      	nop
 8009cae:	370c      	adds	r7, #12
 8009cb0:	46bd      	mov	sp, r7
 8009cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb6:	4770      	bx	lr

08009cb8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009cb8:	b480      	push	{r7}
 8009cba:	b083      	sub	sp, #12
 8009cbc:	af00      	add	r7, sp, #0
 8009cbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009cc0:	bf00      	nop
 8009cc2:	370c      	adds	r7, #12
 8009cc4:	46bd      	mov	sp, r7
 8009cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cca:	4770      	bx	lr

08009ccc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009ccc:	b480      	push	{r7}
 8009cce:	b085      	sub	sp, #20
 8009cd0:	af00      	add	r7, sp, #0
 8009cd2:	6078      	str	r0, [r7, #4]
 8009cd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	4a46      	ldr	r2, [pc, #280]	@ (8009df8 <TIM_Base_SetConfig+0x12c>)
 8009ce0:	4293      	cmp	r3, r2
 8009ce2:	d013      	beq.n	8009d0c <TIM_Base_SetConfig+0x40>
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009cea:	d00f      	beq.n	8009d0c <TIM_Base_SetConfig+0x40>
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	4a43      	ldr	r2, [pc, #268]	@ (8009dfc <TIM_Base_SetConfig+0x130>)
 8009cf0:	4293      	cmp	r3, r2
 8009cf2:	d00b      	beq.n	8009d0c <TIM_Base_SetConfig+0x40>
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	4a42      	ldr	r2, [pc, #264]	@ (8009e00 <TIM_Base_SetConfig+0x134>)
 8009cf8:	4293      	cmp	r3, r2
 8009cfa:	d007      	beq.n	8009d0c <TIM_Base_SetConfig+0x40>
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	4a41      	ldr	r2, [pc, #260]	@ (8009e04 <TIM_Base_SetConfig+0x138>)
 8009d00:	4293      	cmp	r3, r2
 8009d02:	d003      	beq.n	8009d0c <TIM_Base_SetConfig+0x40>
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	4a40      	ldr	r2, [pc, #256]	@ (8009e08 <TIM_Base_SetConfig+0x13c>)
 8009d08:	4293      	cmp	r3, r2
 8009d0a:	d108      	bne.n	8009d1e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009d12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009d14:	683b      	ldr	r3, [r7, #0]
 8009d16:	685b      	ldr	r3, [r3, #4]
 8009d18:	68fa      	ldr	r2, [r7, #12]
 8009d1a:	4313      	orrs	r3, r2
 8009d1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	4a35      	ldr	r2, [pc, #212]	@ (8009df8 <TIM_Base_SetConfig+0x12c>)
 8009d22:	4293      	cmp	r3, r2
 8009d24:	d01f      	beq.n	8009d66 <TIM_Base_SetConfig+0x9a>
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009d2c:	d01b      	beq.n	8009d66 <TIM_Base_SetConfig+0x9a>
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	4a32      	ldr	r2, [pc, #200]	@ (8009dfc <TIM_Base_SetConfig+0x130>)
 8009d32:	4293      	cmp	r3, r2
 8009d34:	d017      	beq.n	8009d66 <TIM_Base_SetConfig+0x9a>
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	4a31      	ldr	r2, [pc, #196]	@ (8009e00 <TIM_Base_SetConfig+0x134>)
 8009d3a:	4293      	cmp	r3, r2
 8009d3c:	d013      	beq.n	8009d66 <TIM_Base_SetConfig+0x9a>
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	4a30      	ldr	r2, [pc, #192]	@ (8009e04 <TIM_Base_SetConfig+0x138>)
 8009d42:	4293      	cmp	r3, r2
 8009d44:	d00f      	beq.n	8009d66 <TIM_Base_SetConfig+0x9a>
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	4a2f      	ldr	r2, [pc, #188]	@ (8009e08 <TIM_Base_SetConfig+0x13c>)
 8009d4a:	4293      	cmp	r3, r2
 8009d4c:	d00b      	beq.n	8009d66 <TIM_Base_SetConfig+0x9a>
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	4a2e      	ldr	r2, [pc, #184]	@ (8009e0c <TIM_Base_SetConfig+0x140>)
 8009d52:	4293      	cmp	r3, r2
 8009d54:	d007      	beq.n	8009d66 <TIM_Base_SetConfig+0x9a>
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	4a2d      	ldr	r2, [pc, #180]	@ (8009e10 <TIM_Base_SetConfig+0x144>)
 8009d5a:	4293      	cmp	r3, r2
 8009d5c:	d003      	beq.n	8009d66 <TIM_Base_SetConfig+0x9a>
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	4a2c      	ldr	r2, [pc, #176]	@ (8009e14 <TIM_Base_SetConfig+0x148>)
 8009d62:	4293      	cmp	r3, r2
 8009d64:	d108      	bne.n	8009d78 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009d6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009d6e:	683b      	ldr	r3, [r7, #0]
 8009d70:	68db      	ldr	r3, [r3, #12]
 8009d72:	68fa      	ldr	r2, [r7, #12]
 8009d74:	4313      	orrs	r3, r2
 8009d76:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009d7e:	683b      	ldr	r3, [r7, #0]
 8009d80:	695b      	ldr	r3, [r3, #20]
 8009d82:	4313      	orrs	r3, r2
 8009d84:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	68fa      	ldr	r2, [r7, #12]
 8009d8a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009d8c:	683b      	ldr	r3, [r7, #0]
 8009d8e:	689a      	ldr	r2, [r3, #8]
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009d94:	683b      	ldr	r3, [r7, #0]
 8009d96:	681a      	ldr	r2, [r3, #0]
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	4a16      	ldr	r2, [pc, #88]	@ (8009df8 <TIM_Base_SetConfig+0x12c>)
 8009da0:	4293      	cmp	r3, r2
 8009da2:	d00f      	beq.n	8009dc4 <TIM_Base_SetConfig+0xf8>
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	4a18      	ldr	r2, [pc, #96]	@ (8009e08 <TIM_Base_SetConfig+0x13c>)
 8009da8:	4293      	cmp	r3, r2
 8009daa:	d00b      	beq.n	8009dc4 <TIM_Base_SetConfig+0xf8>
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	4a17      	ldr	r2, [pc, #92]	@ (8009e0c <TIM_Base_SetConfig+0x140>)
 8009db0:	4293      	cmp	r3, r2
 8009db2:	d007      	beq.n	8009dc4 <TIM_Base_SetConfig+0xf8>
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	4a16      	ldr	r2, [pc, #88]	@ (8009e10 <TIM_Base_SetConfig+0x144>)
 8009db8:	4293      	cmp	r3, r2
 8009dba:	d003      	beq.n	8009dc4 <TIM_Base_SetConfig+0xf8>
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	4a15      	ldr	r2, [pc, #84]	@ (8009e14 <TIM_Base_SetConfig+0x148>)
 8009dc0:	4293      	cmp	r3, r2
 8009dc2:	d103      	bne.n	8009dcc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009dc4:	683b      	ldr	r3, [r7, #0]
 8009dc6:	691a      	ldr	r2, [r3, #16]
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	2201      	movs	r2, #1
 8009dd0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	691b      	ldr	r3, [r3, #16]
 8009dd6:	f003 0301 	and.w	r3, r3, #1
 8009dda:	2b01      	cmp	r3, #1
 8009ddc:	d105      	bne.n	8009dea <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	691b      	ldr	r3, [r3, #16]
 8009de2:	f023 0201 	bic.w	r2, r3, #1
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	611a      	str	r2, [r3, #16]
  }
}
 8009dea:	bf00      	nop
 8009dec:	3714      	adds	r7, #20
 8009dee:	46bd      	mov	sp, r7
 8009df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df4:	4770      	bx	lr
 8009df6:	bf00      	nop
 8009df8:	40010000 	.word	0x40010000
 8009dfc:	40000400 	.word	0x40000400
 8009e00:	40000800 	.word	0x40000800
 8009e04:	40000c00 	.word	0x40000c00
 8009e08:	40010400 	.word	0x40010400
 8009e0c:	40014000 	.word	0x40014000
 8009e10:	40014400 	.word	0x40014400
 8009e14:	40014800 	.word	0x40014800

08009e18 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009e18:	b480      	push	{r7}
 8009e1a:	b087      	sub	sp, #28
 8009e1c:	af00      	add	r7, sp, #0
 8009e1e:	6078      	str	r0, [r7, #4]
 8009e20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	6a1b      	ldr	r3, [r3, #32]
 8009e26:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	6a1b      	ldr	r3, [r3, #32]
 8009e2c:	f023 0201 	bic.w	r2, r3, #1
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	685b      	ldr	r3, [r3, #4]
 8009e38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	699b      	ldr	r3, [r3, #24]
 8009e3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009e40:	68fa      	ldr	r2, [r7, #12]
 8009e42:	4b37      	ldr	r3, [pc, #220]	@ (8009f20 <TIM_OC1_SetConfig+0x108>)
 8009e44:	4013      	ands	r3, r2
 8009e46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	f023 0303 	bic.w	r3, r3, #3
 8009e4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009e50:	683b      	ldr	r3, [r7, #0]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	68fa      	ldr	r2, [r7, #12]
 8009e56:	4313      	orrs	r3, r2
 8009e58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009e5a:	697b      	ldr	r3, [r7, #20]
 8009e5c:	f023 0302 	bic.w	r3, r3, #2
 8009e60:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009e62:	683b      	ldr	r3, [r7, #0]
 8009e64:	689b      	ldr	r3, [r3, #8]
 8009e66:	697a      	ldr	r2, [r7, #20]
 8009e68:	4313      	orrs	r3, r2
 8009e6a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	4a2d      	ldr	r2, [pc, #180]	@ (8009f24 <TIM_OC1_SetConfig+0x10c>)
 8009e70:	4293      	cmp	r3, r2
 8009e72:	d00f      	beq.n	8009e94 <TIM_OC1_SetConfig+0x7c>
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	4a2c      	ldr	r2, [pc, #176]	@ (8009f28 <TIM_OC1_SetConfig+0x110>)
 8009e78:	4293      	cmp	r3, r2
 8009e7a:	d00b      	beq.n	8009e94 <TIM_OC1_SetConfig+0x7c>
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	4a2b      	ldr	r2, [pc, #172]	@ (8009f2c <TIM_OC1_SetConfig+0x114>)
 8009e80:	4293      	cmp	r3, r2
 8009e82:	d007      	beq.n	8009e94 <TIM_OC1_SetConfig+0x7c>
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	4a2a      	ldr	r2, [pc, #168]	@ (8009f30 <TIM_OC1_SetConfig+0x118>)
 8009e88:	4293      	cmp	r3, r2
 8009e8a:	d003      	beq.n	8009e94 <TIM_OC1_SetConfig+0x7c>
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	4a29      	ldr	r2, [pc, #164]	@ (8009f34 <TIM_OC1_SetConfig+0x11c>)
 8009e90:	4293      	cmp	r3, r2
 8009e92:	d10c      	bne.n	8009eae <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009e94:	697b      	ldr	r3, [r7, #20]
 8009e96:	f023 0308 	bic.w	r3, r3, #8
 8009e9a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009e9c:	683b      	ldr	r3, [r7, #0]
 8009e9e:	68db      	ldr	r3, [r3, #12]
 8009ea0:	697a      	ldr	r2, [r7, #20]
 8009ea2:	4313      	orrs	r3, r2
 8009ea4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009ea6:	697b      	ldr	r3, [r7, #20]
 8009ea8:	f023 0304 	bic.w	r3, r3, #4
 8009eac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	4a1c      	ldr	r2, [pc, #112]	@ (8009f24 <TIM_OC1_SetConfig+0x10c>)
 8009eb2:	4293      	cmp	r3, r2
 8009eb4:	d00f      	beq.n	8009ed6 <TIM_OC1_SetConfig+0xbe>
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	4a1b      	ldr	r2, [pc, #108]	@ (8009f28 <TIM_OC1_SetConfig+0x110>)
 8009eba:	4293      	cmp	r3, r2
 8009ebc:	d00b      	beq.n	8009ed6 <TIM_OC1_SetConfig+0xbe>
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	4a1a      	ldr	r2, [pc, #104]	@ (8009f2c <TIM_OC1_SetConfig+0x114>)
 8009ec2:	4293      	cmp	r3, r2
 8009ec4:	d007      	beq.n	8009ed6 <TIM_OC1_SetConfig+0xbe>
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	4a19      	ldr	r2, [pc, #100]	@ (8009f30 <TIM_OC1_SetConfig+0x118>)
 8009eca:	4293      	cmp	r3, r2
 8009ecc:	d003      	beq.n	8009ed6 <TIM_OC1_SetConfig+0xbe>
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	4a18      	ldr	r2, [pc, #96]	@ (8009f34 <TIM_OC1_SetConfig+0x11c>)
 8009ed2:	4293      	cmp	r3, r2
 8009ed4:	d111      	bne.n	8009efa <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009ed6:	693b      	ldr	r3, [r7, #16]
 8009ed8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009edc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009ede:	693b      	ldr	r3, [r7, #16]
 8009ee0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009ee4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009ee6:	683b      	ldr	r3, [r7, #0]
 8009ee8:	695b      	ldr	r3, [r3, #20]
 8009eea:	693a      	ldr	r2, [r7, #16]
 8009eec:	4313      	orrs	r3, r2
 8009eee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009ef0:	683b      	ldr	r3, [r7, #0]
 8009ef2:	699b      	ldr	r3, [r3, #24]
 8009ef4:	693a      	ldr	r2, [r7, #16]
 8009ef6:	4313      	orrs	r3, r2
 8009ef8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	693a      	ldr	r2, [r7, #16]
 8009efe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	68fa      	ldr	r2, [r7, #12]
 8009f04:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009f06:	683b      	ldr	r3, [r7, #0]
 8009f08:	685a      	ldr	r2, [r3, #4]
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	697a      	ldr	r2, [r7, #20]
 8009f12:	621a      	str	r2, [r3, #32]
}
 8009f14:	bf00      	nop
 8009f16:	371c      	adds	r7, #28
 8009f18:	46bd      	mov	sp, r7
 8009f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f1e:	4770      	bx	lr
 8009f20:	fffeff8f 	.word	0xfffeff8f
 8009f24:	40010000 	.word	0x40010000
 8009f28:	40010400 	.word	0x40010400
 8009f2c:	40014000 	.word	0x40014000
 8009f30:	40014400 	.word	0x40014400
 8009f34:	40014800 	.word	0x40014800

08009f38 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009f38:	b480      	push	{r7}
 8009f3a:	b087      	sub	sp, #28
 8009f3c:	af00      	add	r7, sp, #0
 8009f3e:	6078      	str	r0, [r7, #4]
 8009f40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	6a1b      	ldr	r3, [r3, #32]
 8009f46:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	6a1b      	ldr	r3, [r3, #32]
 8009f4c:	f023 0210 	bic.w	r2, r3, #16
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	685b      	ldr	r3, [r3, #4]
 8009f58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	699b      	ldr	r3, [r3, #24]
 8009f5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009f60:	68fa      	ldr	r2, [r7, #12]
 8009f62:	4b34      	ldr	r3, [pc, #208]	@ (800a034 <TIM_OC2_SetConfig+0xfc>)
 8009f64:	4013      	ands	r3, r2
 8009f66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009f6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009f70:	683b      	ldr	r3, [r7, #0]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	021b      	lsls	r3, r3, #8
 8009f76:	68fa      	ldr	r2, [r7, #12]
 8009f78:	4313      	orrs	r3, r2
 8009f7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009f7c:	697b      	ldr	r3, [r7, #20]
 8009f7e:	f023 0320 	bic.w	r3, r3, #32
 8009f82:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009f84:	683b      	ldr	r3, [r7, #0]
 8009f86:	689b      	ldr	r3, [r3, #8]
 8009f88:	011b      	lsls	r3, r3, #4
 8009f8a:	697a      	ldr	r2, [r7, #20]
 8009f8c:	4313      	orrs	r3, r2
 8009f8e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	4a29      	ldr	r2, [pc, #164]	@ (800a038 <TIM_OC2_SetConfig+0x100>)
 8009f94:	4293      	cmp	r3, r2
 8009f96:	d003      	beq.n	8009fa0 <TIM_OC2_SetConfig+0x68>
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	4a28      	ldr	r2, [pc, #160]	@ (800a03c <TIM_OC2_SetConfig+0x104>)
 8009f9c:	4293      	cmp	r3, r2
 8009f9e:	d10d      	bne.n	8009fbc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009fa0:	697b      	ldr	r3, [r7, #20]
 8009fa2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009fa6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009fa8:	683b      	ldr	r3, [r7, #0]
 8009faa:	68db      	ldr	r3, [r3, #12]
 8009fac:	011b      	lsls	r3, r3, #4
 8009fae:	697a      	ldr	r2, [r7, #20]
 8009fb0:	4313      	orrs	r3, r2
 8009fb2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009fb4:	697b      	ldr	r3, [r7, #20]
 8009fb6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009fba:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	4a1e      	ldr	r2, [pc, #120]	@ (800a038 <TIM_OC2_SetConfig+0x100>)
 8009fc0:	4293      	cmp	r3, r2
 8009fc2:	d00f      	beq.n	8009fe4 <TIM_OC2_SetConfig+0xac>
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	4a1d      	ldr	r2, [pc, #116]	@ (800a03c <TIM_OC2_SetConfig+0x104>)
 8009fc8:	4293      	cmp	r3, r2
 8009fca:	d00b      	beq.n	8009fe4 <TIM_OC2_SetConfig+0xac>
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	4a1c      	ldr	r2, [pc, #112]	@ (800a040 <TIM_OC2_SetConfig+0x108>)
 8009fd0:	4293      	cmp	r3, r2
 8009fd2:	d007      	beq.n	8009fe4 <TIM_OC2_SetConfig+0xac>
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	4a1b      	ldr	r2, [pc, #108]	@ (800a044 <TIM_OC2_SetConfig+0x10c>)
 8009fd8:	4293      	cmp	r3, r2
 8009fda:	d003      	beq.n	8009fe4 <TIM_OC2_SetConfig+0xac>
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	4a1a      	ldr	r2, [pc, #104]	@ (800a048 <TIM_OC2_SetConfig+0x110>)
 8009fe0:	4293      	cmp	r3, r2
 8009fe2:	d113      	bne.n	800a00c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009fe4:	693b      	ldr	r3, [r7, #16]
 8009fe6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009fea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009fec:	693b      	ldr	r3, [r7, #16]
 8009fee:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009ff2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009ff4:	683b      	ldr	r3, [r7, #0]
 8009ff6:	695b      	ldr	r3, [r3, #20]
 8009ff8:	009b      	lsls	r3, r3, #2
 8009ffa:	693a      	ldr	r2, [r7, #16]
 8009ffc:	4313      	orrs	r3, r2
 8009ffe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a000:	683b      	ldr	r3, [r7, #0]
 800a002:	699b      	ldr	r3, [r3, #24]
 800a004:	009b      	lsls	r3, r3, #2
 800a006:	693a      	ldr	r2, [r7, #16]
 800a008:	4313      	orrs	r3, r2
 800a00a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	693a      	ldr	r2, [r7, #16]
 800a010:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	68fa      	ldr	r2, [r7, #12]
 800a016:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a018:	683b      	ldr	r3, [r7, #0]
 800a01a:	685a      	ldr	r2, [r3, #4]
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	697a      	ldr	r2, [r7, #20]
 800a024:	621a      	str	r2, [r3, #32]
}
 800a026:	bf00      	nop
 800a028:	371c      	adds	r7, #28
 800a02a:	46bd      	mov	sp, r7
 800a02c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a030:	4770      	bx	lr
 800a032:	bf00      	nop
 800a034:	feff8fff 	.word	0xfeff8fff
 800a038:	40010000 	.word	0x40010000
 800a03c:	40010400 	.word	0x40010400
 800a040:	40014000 	.word	0x40014000
 800a044:	40014400 	.word	0x40014400
 800a048:	40014800 	.word	0x40014800

0800a04c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a04c:	b480      	push	{r7}
 800a04e:	b087      	sub	sp, #28
 800a050:	af00      	add	r7, sp, #0
 800a052:	6078      	str	r0, [r7, #4]
 800a054:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	6a1b      	ldr	r3, [r3, #32]
 800a05a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	6a1b      	ldr	r3, [r3, #32]
 800a060:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	685b      	ldr	r3, [r3, #4]
 800a06c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	69db      	ldr	r3, [r3, #28]
 800a072:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a074:	68fa      	ldr	r2, [r7, #12]
 800a076:	4b33      	ldr	r3, [pc, #204]	@ (800a144 <TIM_OC3_SetConfig+0xf8>)
 800a078:	4013      	ands	r3, r2
 800a07a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	f023 0303 	bic.w	r3, r3, #3
 800a082:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a084:	683b      	ldr	r3, [r7, #0]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	68fa      	ldr	r2, [r7, #12]
 800a08a:	4313      	orrs	r3, r2
 800a08c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a08e:	697b      	ldr	r3, [r7, #20]
 800a090:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a094:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a096:	683b      	ldr	r3, [r7, #0]
 800a098:	689b      	ldr	r3, [r3, #8]
 800a09a:	021b      	lsls	r3, r3, #8
 800a09c:	697a      	ldr	r2, [r7, #20]
 800a09e:	4313      	orrs	r3, r2
 800a0a0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	4a28      	ldr	r2, [pc, #160]	@ (800a148 <TIM_OC3_SetConfig+0xfc>)
 800a0a6:	4293      	cmp	r3, r2
 800a0a8:	d003      	beq.n	800a0b2 <TIM_OC3_SetConfig+0x66>
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	4a27      	ldr	r2, [pc, #156]	@ (800a14c <TIM_OC3_SetConfig+0x100>)
 800a0ae:	4293      	cmp	r3, r2
 800a0b0:	d10d      	bne.n	800a0ce <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a0b2:	697b      	ldr	r3, [r7, #20]
 800a0b4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a0b8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a0ba:	683b      	ldr	r3, [r7, #0]
 800a0bc:	68db      	ldr	r3, [r3, #12]
 800a0be:	021b      	lsls	r3, r3, #8
 800a0c0:	697a      	ldr	r2, [r7, #20]
 800a0c2:	4313      	orrs	r3, r2
 800a0c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a0c6:	697b      	ldr	r3, [r7, #20]
 800a0c8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a0cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	4a1d      	ldr	r2, [pc, #116]	@ (800a148 <TIM_OC3_SetConfig+0xfc>)
 800a0d2:	4293      	cmp	r3, r2
 800a0d4:	d00f      	beq.n	800a0f6 <TIM_OC3_SetConfig+0xaa>
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	4a1c      	ldr	r2, [pc, #112]	@ (800a14c <TIM_OC3_SetConfig+0x100>)
 800a0da:	4293      	cmp	r3, r2
 800a0dc:	d00b      	beq.n	800a0f6 <TIM_OC3_SetConfig+0xaa>
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	4a1b      	ldr	r2, [pc, #108]	@ (800a150 <TIM_OC3_SetConfig+0x104>)
 800a0e2:	4293      	cmp	r3, r2
 800a0e4:	d007      	beq.n	800a0f6 <TIM_OC3_SetConfig+0xaa>
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	4a1a      	ldr	r2, [pc, #104]	@ (800a154 <TIM_OC3_SetConfig+0x108>)
 800a0ea:	4293      	cmp	r3, r2
 800a0ec:	d003      	beq.n	800a0f6 <TIM_OC3_SetConfig+0xaa>
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	4a19      	ldr	r2, [pc, #100]	@ (800a158 <TIM_OC3_SetConfig+0x10c>)
 800a0f2:	4293      	cmp	r3, r2
 800a0f4:	d113      	bne.n	800a11e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a0f6:	693b      	ldr	r3, [r7, #16]
 800a0f8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a0fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a0fe:	693b      	ldr	r3, [r7, #16]
 800a100:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a104:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a106:	683b      	ldr	r3, [r7, #0]
 800a108:	695b      	ldr	r3, [r3, #20]
 800a10a:	011b      	lsls	r3, r3, #4
 800a10c:	693a      	ldr	r2, [r7, #16]
 800a10e:	4313      	orrs	r3, r2
 800a110:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a112:	683b      	ldr	r3, [r7, #0]
 800a114:	699b      	ldr	r3, [r3, #24]
 800a116:	011b      	lsls	r3, r3, #4
 800a118:	693a      	ldr	r2, [r7, #16]
 800a11a:	4313      	orrs	r3, r2
 800a11c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	693a      	ldr	r2, [r7, #16]
 800a122:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	68fa      	ldr	r2, [r7, #12]
 800a128:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a12a:	683b      	ldr	r3, [r7, #0]
 800a12c:	685a      	ldr	r2, [r3, #4]
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	697a      	ldr	r2, [r7, #20]
 800a136:	621a      	str	r2, [r3, #32]
}
 800a138:	bf00      	nop
 800a13a:	371c      	adds	r7, #28
 800a13c:	46bd      	mov	sp, r7
 800a13e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a142:	4770      	bx	lr
 800a144:	fffeff8f 	.word	0xfffeff8f
 800a148:	40010000 	.word	0x40010000
 800a14c:	40010400 	.word	0x40010400
 800a150:	40014000 	.word	0x40014000
 800a154:	40014400 	.word	0x40014400
 800a158:	40014800 	.word	0x40014800

0800a15c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a15c:	b480      	push	{r7}
 800a15e:	b087      	sub	sp, #28
 800a160:	af00      	add	r7, sp, #0
 800a162:	6078      	str	r0, [r7, #4]
 800a164:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	6a1b      	ldr	r3, [r3, #32]
 800a16a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	6a1b      	ldr	r3, [r3, #32]
 800a170:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	685b      	ldr	r3, [r3, #4]
 800a17c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	69db      	ldr	r3, [r3, #28]
 800a182:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a184:	68fa      	ldr	r2, [r7, #12]
 800a186:	4b24      	ldr	r3, [pc, #144]	@ (800a218 <TIM_OC4_SetConfig+0xbc>)
 800a188:	4013      	ands	r3, r2
 800a18a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a192:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a194:	683b      	ldr	r3, [r7, #0]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	021b      	lsls	r3, r3, #8
 800a19a:	68fa      	ldr	r2, [r7, #12]
 800a19c:	4313      	orrs	r3, r2
 800a19e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a1a0:	693b      	ldr	r3, [r7, #16]
 800a1a2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a1a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a1a8:	683b      	ldr	r3, [r7, #0]
 800a1aa:	689b      	ldr	r3, [r3, #8]
 800a1ac:	031b      	lsls	r3, r3, #12
 800a1ae:	693a      	ldr	r2, [r7, #16]
 800a1b0:	4313      	orrs	r3, r2
 800a1b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	4a19      	ldr	r2, [pc, #100]	@ (800a21c <TIM_OC4_SetConfig+0xc0>)
 800a1b8:	4293      	cmp	r3, r2
 800a1ba:	d00f      	beq.n	800a1dc <TIM_OC4_SetConfig+0x80>
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	4a18      	ldr	r2, [pc, #96]	@ (800a220 <TIM_OC4_SetConfig+0xc4>)
 800a1c0:	4293      	cmp	r3, r2
 800a1c2:	d00b      	beq.n	800a1dc <TIM_OC4_SetConfig+0x80>
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	4a17      	ldr	r2, [pc, #92]	@ (800a224 <TIM_OC4_SetConfig+0xc8>)
 800a1c8:	4293      	cmp	r3, r2
 800a1ca:	d007      	beq.n	800a1dc <TIM_OC4_SetConfig+0x80>
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	4a16      	ldr	r2, [pc, #88]	@ (800a228 <TIM_OC4_SetConfig+0xcc>)
 800a1d0:	4293      	cmp	r3, r2
 800a1d2:	d003      	beq.n	800a1dc <TIM_OC4_SetConfig+0x80>
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	4a15      	ldr	r2, [pc, #84]	@ (800a22c <TIM_OC4_SetConfig+0xd0>)
 800a1d8:	4293      	cmp	r3, r2
 800a1da:	d109      	bne.n	800a1f0 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a1dc:	697b      	ldr	r3, [r7, #20]
 800a1de:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a1e2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a1e4:	683b      	ldr	r3, [r7, #0]
 800a1e6:	695b      	ldr	r3, [r3, #20]
 800a1e8:	019b      	lsls	r3, r3, #6
 800a1ea:	697a      	ldr	r2, [r7, #20]
 800a1ec:	4313      	orrs	r3, r2
 800a1ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	697a      	ldr	r2, [r7, #20]
 800a1f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	68fa      	ldr	r2, [r7, #12]
 800a1fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a1fc:	683b      	ldr	r3, [r7, #0]
 800a1fe:	685a      	ldr	r2, [r3, #4]
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	693a      	ldr	r2, [r7, #16]
 800a208:	621a      	str	r2, [r3, #32]
}
 800a20a:	bf00      	nop
 800a20c:	371c      	adds	r7, #28
 800a20e:	46bd      	mov	sp, r7
 800a210:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a214:	4770      	bx	lr
 800a216:	bf00      	nop
 800a218:	feff8fff 	.word	0xfeff8fff
 800a21c:	40010000 	.word	0x40010000
 800a220:	40010400 	.word	0x40010400
 800a224:	40014000 	.word	0x40014000
 800a228:	40014400 	.word	0x40014400
 800a22c:	40014800 	.word	0x40014800

0800a230 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a230:	b480      	push	{r7}
 800a232:	b087      	sub	sp, #28
 800a234:	af00      	add	r7, sp, #0
 800a236:	6078      	str	r0, [r7, #4]
 800a238:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	6a1b      	ldr	r3, [r3, #32]
 800a23e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	6a1b      	ldr	r3, [r3, #32]
 800a244:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	685b      	ldr	r3, [r3, #4]
 800a250:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a256:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a258:	68fa      	ldr	r2, [r7, #12]
 800a25a:	4b21      	ldr	r3, [pc, #132]	@ (800a2e0 <TIM_OC5_SetConfig+0xb0>)
 800a25c:	4013      	ands	r3, r2
 800a25e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a260:	683b      	ldr	r3, [r7, #0]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	68fa      	ldr	r2, [r7, #12]
 800a266:	4313      	orrs	r3, r2
 800a268:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a26a:	693b      	ldr	r3, [r7, #16]
 800a26c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800a270:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a272:	683b      	ldr	r3, [r7, #0]
 800a274:	689b      	ldr	r3, [r3, #8]
 800a276:	041b      	lsls	r3, r3, #16
 800a278:	693a      	ldr	r2, [r7, #16]
 800a27a:	4313      	orrs	r3, r2
 800a27c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	4a18      	ldr	r2, [pc, #96]	@ (800a2e4 <TIM_OC5_SetConfig+0xb4>)
 800a282:	4293      	cmp	r3, r2
 800a284:	d00f      	beq.n	800a2a6 <TIM_OC5_SetConfig+0x76>
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	4a17      	ldr	r2, [pc, #92]	@ (800a2e8 <TIM_OC5_SetConfig+0xb8>)
 800a28a:	4293      	cmp	r3, r2
 800a28c:	d00b      	beq.n	800a2a6 <TIM_OC5_SetConfig+0x76>
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	4a16      	ldr	r2, [pc, #88]	@ (800a2ec <TIM_OC5_SetConfig+0xbc>)
 800a292:	4293      	cmp	r3, r2
 800a294:	d007      	beq.n	800a2a6 <TIM_OC5_SetConfig+0x76>
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	4a15      	ldr	r2, [pc, #84]	@ (800a2f0 <TIM_OC5_SetConfig+0xc0>)
 800a29a:	4293      	cmp	r3, r2
 800a29c:	d003      	beq.n	800a2a6 <TIM_OC5_SetConfig+0x76>
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	4a14      	ldr	r2, [pc, #80]	@ (800a2f4 <TIM_OC5_SetConfig+0xc4>)
 800a2a2:	4293      	cmp	r3, r2
 800a2a4:	d109      	bne.n	800a2ba <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a2a6:	697b      	ldr	r3, [r7, #20]
 800a2a8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a2ac:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a2ae:	683b      	ldr	r3, [r7, #0]
 800a2b0:	695b      	ldr	r3, [r3, #20]
 800a2b2:	021b      	lsls	r3, r3, #8
 800a2b4:	697a      	ldr	r2, [r7, #20]
 800a2b6:	4313      	orrs	r3, r2
 800a2b8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	697a      	ldr	r2, [r7, #20]
 800a2be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	68fa      	ldr	r2, [r7, #12]
 800a2c4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a2c6:	683b      	ldr	r3, [r7, #0]
 800a2c8:	685a      	ldr	r2, [r3, #4]
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	693a      	ldr	r2, [r7, #16]
 800a2d2:	621a      	str	r2, [r3, #32]
}
 800a2d4:	bf00      	nop
 800a2d6:	371c      	adds	r7, #28
 800a2d8:	46bd      	mov	sp, r7
 800a2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2de:	4770      	bx	lr
 800a2e0:	fffeff8f 	.word	0xfffeff8f
 800a2e4:	40010000 	.word	0x40010000
 800a2e8:	40010400 	.word	0x40010400
 800a2ec:	40014000 	.word	0x40014000
 800a2f0:	40014400 	.word	0x40014400
 800a2f4:	40014800 	.word	0x40014800

0800a2f8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a2f8:	b480      	push	{r7}
 800a2fa:	b087      	sub	sp, #28
 800a2fc:	af00      	add	r7, sp, #0
 800a2fe:	6078      	str	r0, [r7, #4]
 800a300:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	6a1b      	ldr	r3, [r3, #32]
 800a306:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	6a1b      	ldr	r3, [r3, #32]
 800a30c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	685b      	ldr	r3, [r3, #4]
 800a318:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a31e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a320:	68fa      	ldr	r2, [r7, #12]
 800a322:	4b22      	ldr	r3, [pc, #136]	@ (800a3ac <TIM_OC6_SetConfig+0xb4>)
 800a324:	4013      	ands	r3, r2
 800a326:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a328:	683b      	ldr	r3, [r7, #0]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	021b      	lsls	r3, r3, #8
 800a32e:	68fa      	ldr	r2, [r7, #12]
 800a330:	4313      	orrs	r3, r2
 800a332:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a334:	693b      	ldr	r3, [r7, #16]
 800a336:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a33a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a33c:	683b      	ldr	r3, [r7, #0]
 800a33e:	689b      	ldr	r3, [r3, #8]
 800a340:	051b      	lsls	r3, r3, #20
 800a342:	693a      	ldr	r2, [r7, #16]
 800a344:	4313      	orrs	r3, r2
 800a346:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	4a19      	ldr	r2, [pc, #100]	@ (800a3b0 <TIM_OC6_SetConfig+0xb8>)
 800a34c:	4293      	cmp	r3, r2
 800a34e:	d00f      	beq.n	800a370 <TIM_OC6_SetConfig+0x78>
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	4a18      	ldr	r2, [pc, #96]	@ (800a3b4 <TIM_OC6_SetConfig+0xbc>)
 800a354:	4293      	cmp	r3, r2
 800a356:	d00b      	beq.n	800a370 <TIM_OC6_SetConfig+0x78>
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	4a17      	ldr	r2, [pc, #92]	@ (800a3b8 <TIM_OC6_SetConfig+0xc0>)
 800a35c:	4293      	cmp	r3, r2
 800a35e:	d007      	beq.n	800a370 <TIM_OC6_SetConfig+0x78>
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	4a16      	ldr	r2, [pc, #88]	@ (800a3bc <TIM_OC6_SetConfig+0xc4>)
 800a364:	4293      	cmp	r3, r2
 800a366:	d003      	beq.n	800a370 <TIM_OC6_SetConfig+0x78>
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	4a15      	ldr	r2, [pc, #84]	@ (800a3c0 <TIM_OC6_SetConfig+0xc8>)
 800a36c:	4293      	cmp	r3, r2
 800a36e:	d109      	bne.n	800a384 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a370:	697b      	ldr	r3, [r7, #20]
 800a372:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a376:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a378:	683b      	ldr	r3, [r7, #0]
 800a37a:	695b      	ldr	r3, [r3, #20]
 800a37c:	029b      	lsls	r3, r3, #10
 800a37e:	697a      	ldr	r2, [r7, #20]
 800a380:	4313      	orrs	r3, r2
 800a382:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	697a      	ldr	r2, [r7, #20]
 800a388:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	68fa      	ldr	r2, [r7, #12]
 800a38e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a390:	683b      	ldr	r3, [r7, #0]
 800a392:	685a      	ldr	r2, [r3, #4]
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	693a      	ldr	r2, [r7, #16]
 800a39c:	621a      	str	r2, [r3, #32]
}
 800a39e:	bf00      	nop
 800a3a0:	371c      	adds	r7, #28
 800a3a2:	46bd      	mov	sp, r7
 800a3a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a8:	4770      	bx	lr
 800a3aa:	bf00      	nop
 800a3ac:	feff8fff 	.word	0xfeff8fff
 800a3b0:	40010000 	.word	0x40010000
 800a3b4:	40010400 	.word	0x40010400
 800a3b8:	40014000 	.word	0x40014000
 800a3bc:	40014400 	.word	0x40014400
 800a3c0:	40014800 	.word	0x40014800

0800a3c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a3c4:	b480      	push	{r7}
 800a3c6:	b087      	sub	sp, #28
 800a3c8:	af00      	add	r7, sp, #0
 800a3ca:	60f8      	str	r0, [r7, #12]
 800a3cc:	60b9      	str	r1, [r7, #8]
 800a3ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	6a1b      	ldr	r3, [r3, #32]
 800a3d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	6a1b      	ldr	r3, [r3, #32]
 800a3da:	f023 0201 	bic.w	r2, r3, #1
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	699b      	ldr	r3, [r3, #24]
 800a3e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a3e8:	693b      	ldr	r3, [r7, #16]
 800a3ea:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a3ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	011b      	lsls	r3, r3, #4
 800a3f4:	693a      	ldr	r2, [r7, #16]
 800a3f6:	4313      	orrs	r3, r2
 800a3f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a3fa:	697b      	ldr	r3, [r7, #20]
 800a3fc:	f023 030a 	bic.w	r3, r3, #10
 800a400:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a402:	697a      	ldr	r2, [r7, #20]
 800a404:	68bb      	ldr	r3, [r7, #8]
 800a406:	4313      	orrs	r3, r2
 800a408:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	693a      	ldr	r2, [r7, #16]
 800a40e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	697a      	ldr	r2, [r7, #20]
 800a414:	621a      	str	r2, [r3, #32]
}
 800a416:	bf00      	nop
 800a418:	371c      	adds	r7, #28
 800a41a:	46bd      	mov	sp, r7
 800a41c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a420:	4770      	bx	lr

0800a422 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a422:	b480      	push	{r7}
 800a424:	b087      	sub	sp, #28
 800a426:	af00      	add	r7, sp, #0
 800a428:	60f8      	str	r0, [r7, #12]
 800a42a:	60b9      	str	r1, [r7, #8]
 800a42c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	6a1b      	ldr	r3, [r3, #32]
 800a432:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	6a1b      	ldr	r3, [r3, #32]
 800a438:	f023 0210 	bic.w	r2, r3, #16
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	699b      	ldr	r3, [r3, #24]
 800a444:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a446:	693b      	ldr	r3, [r7, #16]
 800a448:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a44c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	031b      	lsls	r3, r3, #12
 800a452:	693a      	ldr	r2, [r7, #16]
 800a454:	4313      	orrs	r3, r2
 800a456:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a458:	697b      	ldr	r3, [r7, #20]
 800a45a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800a45e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a460:	68bb      	ldr	r3, [r7, #8]
 800a462:	011b      	lsls	r3, r3, #4
 800a464:	697a      	ldr	r2, [r7, #20]
 800a466:	4313      	orrs	r3, r2
 800a468:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	693a      	ldr	r2, [r7, #16]
 800a46e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	697a      	ldr	r2, [r7, #20]
 800a474:	621a      	str	r2, [r3, #32]
}
 800a476:	bf00      	nop
 800a478:	371c      	adds	r7, #28
 800a47a:	46bd      	mov	sp, r7
 800a47c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a480:	4770      	bx	lr
	...

0800a484 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a484:	b480      	push	{r7}
 800a486:	b085      	sub	sp, #20
 800a488:	af00      	add	r7, sp, #0
 800a48a:	6078      	str	r0, [r7, #4]
 800a48c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	689b      	ldr	r3, [r3, #8]
 800a492:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a494:	68fa      	ldr	r2, [r7, #12]
 800a496:	4b09      	ldr	r3, [pc, #36]	@ (800a4bc <TIM_ITRx_SetConfig+0x38>)
 800a498:	4013      	ands	r3, r2
 800a49a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a49c:	683a      	ldr	r2, [r7, #0]
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	4313      	orrs	r3, r2
 800a4a2:	f043 0307 	orr.w	r3, r3, #7
 800a4a6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	68fa      	ldr	r2, [r7, #12]
 800a4ac:	609a      	str	r2, [r3, #8]
}
 800a4ae:	bf00      	nop
 800a4b0:	3714      	adds	r7, #20
 800a4b2:	46bd      	mov	sp, r7
 800a4b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b8:	4770      	bx	lr
 800a4ba:	bf00      	nop
 800a4bc:	ffcfff8f 	.word	0xffcfff8f

0800a4c0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a4c0:	b480      	push	{r7}
 800a4c2:	b087      	sub	sp, #28
 800a4c4:	af00      	add	r7, sp, #0
 800a4c6:	60f8      	str	r0, [r7, #12]
 800a4c8:	60b9      	str	r1, [r7, #8]
 800a4ca:	607a      	str	r2, [r7, #4]
 800a4cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	689b      	ldr	r3, [r3, #8]
 800a4d2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a4d4:	697b      	ldr	r3, [r7, #20]
 800a4d6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a4da:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a4dc:	683b      	ldr	r3, [r7, #0]
 800a4de:	021a      	lsls	r2, r3, #8
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	431a      	orrs	r2, r3
 800a4e4:	68bb      	ldr	r3, [r7, #8]
 800a4e6:	4313      	orrs	r3, r2
 800a4e8:	697a      	ldr	r2, [r7, #20]
 800a4ea:	4313      	orrs	r3, r2
 800a4ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	697a      	ldr	r2, [r7, #20]
 800a4f2:	609a      	str	r2, [r3, #8]
}
 800a4f4:	bf00      	nop
 800a4f6:	371c      	adds	r7, #28
 800a4f8:	46bd      	mov	sp, r7
 800a4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4fe:	4770      	bx	lr

0800a500 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a500:	b480      	push	{r7}
 800a502:	b087      	sub	sp, #28
 800a504:	af00      	add	r7, sp, #0
 800a506:	60f8      	str	r0, [r7, #12]
 800a508:	60b9      	str	r1, [r7, #8]
 800a50a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a50c:	68bb      	ldr	r3, [r7, #8]
 800a50e:	f003 031f 	and.w	r3, r3, #31
 800a512:	2201      	movs	r2, #1
 800a514:	fa02 f303 	lsl.w	r3, r2, r3
 800a518:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	6a1a      	ldr	r2, [r3, #32]
 800a51e:	697b      	ldr	r3, [r7, #20]
 800a520:	43db      	mvns	r3, r3
 800a522:	401a      	ands	r2, r3
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	6a1a      	ldr	r2, [r3, #32]
 800a52c:	68bb      	ldr	r3, [r7, #8]
 800a52e:	f003 031f 	and.w	r3, r3, #31
 800a532:	6879      	ldr	r1, [r7, #4]
 800a534:	fa01 f303 	lsl.w	r3, r1, r3
 800a538:	431a      	orrs	r2, r3
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	621a      	str	r2, [r3, #32]
}
 800a53e:	bf00      	nop
 800a540:	371c      	adds	r7, #28
 800a542:	46bd      	mov	sp, r7
 800a544:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a548:	4770      	bx	lr
	...

0800a54c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a54c:	b480      	push	{r7}
 800a54e:	b085      	sub	sp, #20
 800a550:	af00      	add	r7, sp, #0
 800a552:	6078      	str	r0, [r7, #4]
 800a554:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a55c:	2b01      	cmp	r3, #1
 800a55e:	d101      	bne.n	800a564 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a560:	2302      	movs	r3, #2
 800a562:	e06d      	b.n	800a640 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	2201      	movs	r2, #1
 800a568:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	2202      	movs	r2, #2
 800a570:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	685b      	ldr	r3, [r3, #4]
 800a57a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	689b      	ldr	r3, [r3, #8]
 800a582:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	4a30      	ldr	r2, [pc, #192]	@ (800a64c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a58a:	4293      	cmp	r3, r2
 800a58c:	d004      	beq.n	800a598 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	4a2f      	ldr	r2, [pc, #188]	@ (800a650 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a594:	4293      	cmp	r3, r2
 800a596:	d108      	bne.n	800a5aa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800a59e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a5a0:	683b      	ldr	r3, [r7, #0]
 800a5a2:	685b      	ldr	r3, [r3, #4]
 800a5a4:	68fa      	ldr	r2, [r7, #12]
 800a5a6:	4313      	orrs	r3, r2
 800a5a8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a5b0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a5b2:	683b      	ldr	r3, [r7, #0]
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	68fa      	ldr	r2, [r7, #12]
 800a5b8:	4313      	orrs	r3, r2
 800a5ba:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	68fa      	ldr	r2, [r7, #12]
 800a5c2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	4a20      	ldr	r2, [pc, #128]	@ (800a64c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a5ca:	4293      	cmp	r3, r2
 800a5cc:	d022      	beq.n	800a614 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a5d6:	d01d      	beq.n	800a614 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	4a1d      	ldr	r2, [pc, #116]	@ (800a654 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800a5de:	4293      	cmp	r3, r2
 800a5e0:	d018      	beq.n	800a614 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	4a1c      	ldr	r2, [pc, #112]	@ (800a658 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800a5e8:	4293      	cmp	r3, r2
 800a5ea:	d013      	beq.n	800a614 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	4a1a      	ldr	r2, [pc, #104]	@ (800a65c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a5f2:	4293      	cmp	r3, r2
 800a5f4:	d00e      	beq.n	800a614 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	4a15      	ldr	r2, [pc, #84]	@ (800a650 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a5fc:	4293      	cmp	r3, r2
 800a5fe:	d009      	beq.n	800a614 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	4a16      	ldr	r2, [pc, #88]	@ (800a660 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a606:	4293      	cmp	r3, r2
 800a608:	d004      	beq.n	800a614 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	4a15      	ldr	r2, [pc, #84]	@ (800a664 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a610:	4293      	cmp	r3, r2
 800a612:	d10c      	bne.n	800a62e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a614:	68bb      	ldr	r3, [r7, #8]
 800a616:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a61a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a61c:	683b      	ldr	r3, [r7, #0]
 800a61e:	689b      	ldr	r3, [r3, #8]
 800a620:	68ba      	ldr	r2, [r7, #8]
 800a622:	4313      	orrs	r3, r2
 800a624:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	68ba      	ldr	r2, [r7, #8]
 800a62c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	2201      	movs	r2, #1
 800a632:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	2200      	movs	r2, #0
 800a63a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a63e:	2300      	movs	r3, #0
}
 800a640:	4618      	mov	r0, r3
 800a642:	3714      	adds	r7, #20
 800a644:	46bd      	mov	sp, r7
 800a646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a64a:	4770      	bx	lr
 800a64c:	40010000 	.word	0x40010000
 800a650:	40010400 	.word	0x40010400
 800a654:	40000400 	.word	0x40000400
 800a658:	40000800 	.word	0x40000800
 800a65c:	40000c00 	.word	0x40000c00
 800a660:	40001800 	.word	0x40001800
 800a664:	40014000 	.word	0x40014000

0800a668 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a668:	b480      	push	{r7}
 800a66a:	b083      	sub	sp, #12
 800a66c:	af00      	add	r7, sp, #0
 800a66e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a670:	bf00      	nop
 800a672:	370c      	adds	r7, #12
 800a674:	46bd      	mov	sp, r7
 800a676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a67a:	4770      	bx	lr

0800a67c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a67c:	b480      	push	{r7}
 800a67e:	b083      	sub	sp, #12
 800a680:	af00      	add	r7, sp, #0
 800a682:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a684:	bf00      	nop
 800a686:	370c      	adds	r7, #12
 800a688:	46bd      	mov	sp, r7
 800a68a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a68e:	4770      	bx	lr

0800a690 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a690:	b480      	push	{r7}
 800a692:	b083      	sub	sp, #12
 800a694:	af00      	add	r7, sp, #0
 800a696:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a698:	bf00      	nop
 800a69a:	370c      	adds	r7, #12
 800a69c:	46bd      	mov	sp, r7
 800a69e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a2:	4770      	bx	lr

0800a6a4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a6a4:	b580      	push	{r7, lr}
 800a6a6:	b082      	sub	sp, #8
 800a6a8:	af00      	add	r7, sp, #0
 800a6aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d101      	bne.n	800a6b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a6b2:	2301      	movs	r3, #1
 800a6b4:	e042      	b.n	800a73c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d106      	bne.n	800a6ce <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	2200      	movs	r2, #0
 800a6c4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a6c8:	6878      	ldr	r0, [r7, #4]
 800a6ca:	f000 f83b 	bl	800a744 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	2224      	movs	r2, #36	@ 0x24
 800a6d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	681a      	ldr	r2, [r3, #0]
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	f022 0201 	bic.w	r2, r2, #1
 800a6e4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d002      	beq.n	800a6f4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800a6ee:	6878      	ldr	r0, [r7, #4]
 800a6f0:	f000 fe28 	bl	800b344 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a6f4:	6878      	ldr	r0, [r7, #4]
 800a6f6:	f000 f8bd 	bl	800a874 <UART_SetConfig>
 800a6fa:	4603      	mov	r3, r0
 800a6fc:	2b01      	cmp	r3, #1
 800a6fe:	d101      	bne.n	800a704 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800a700:	2301      	movs	r3, #1
 800a702:	e01b      	b.n	800a73c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	685a      	ldr	r2, [r3, #4]
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a712:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	689a      	ldr	r2, [r3, #8]
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a722:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	681a      	ldr	r2, [r3, #0]
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	f042 0201 	orr.w	r2, r2, #1
 800a732:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a734:	6878      	ldr	r0, [r7, #4]
 800a736:	f000 fea7 	bl	800b488 <UART_CheckIdleState>
 800a73a:	4603      	mov	r3, r0
}
 800a73c:	4618      	mov	r0, r3
 800a73e:	3708      	adds	r7, #8
 800a740:	46bd      	mov	sp, r7
 800a742:	bd80      	pop	{r7, pc}

0800a744 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 800a744:	b480      	push	{r7}
 800a746:	b083      	sub	sp, #12
 800a748:	af00      	add	r7, sp, #0
 800a74a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 800a74c:	bf00      	nop
 800a74e:	370c      	adds	r7, #12
 800a750:	46bd      	mov	sp, r7
 800a752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a756:	4770      	bx	lr

0800a758 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a758:	b580      	push	{r7, lr}
 800a75a:	b08a      	sub	sp, #40	@ 0x28
 800a75c:	af02      	add	r7, sp, #8
 800a75e:	60f8      	str	r0, [r7, #12]
 800a760:	60b9      	str	r1, [r7, #8]
 800a762:	603b      	str	r3, [r7, #0]
 800a764:	4613      	mov	r3, r2
 800a766:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a76e:	2b20      	cmp	r3, #32
 800a770:	d17b      	bne.n	800a86a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800a772:	68bb      	ldr	r3, [r7, #8]
 800a774:	2b00      	cmp	r3, #0
 800a776:	d002      	beq.n	800a77e <HAL_UART_Transmit+0x26>
 800a778:	88fb      	ldrh	r3, [r7, #6]
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d101      	bne.n	800a782 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800a77e:	2301      	movs	r3, #1
 800a780:	e074      	b.n	800a86c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	2200      	movs	r2, #0
 800a786:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	2221      	movs	r2, #33	@ 0x21
 800a78e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a792:	f7f7 fe01 	bl	8002398 <HAL_GetTick>
 800a796:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	88fa      	ldrh	r2, [r7, #6]
 800a79c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	88fa      	ldrh	r2, [r7, #6]
 800a7a4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	689b      	ldr	r3, [r3, #8]
 800a7ac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a7b0:	d108      	bne.n	800a7c4 <HAL_UART_Transmit+0x6c>
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	691b      	ldr	r3, [r3, #16]
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d104      	bne.n	800a7c4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800a7ba:	2300      	movs	r3, #0
 800a7bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a7be:	68bb      	ldr	r3, [r7, #8]
 800a7c0:	61bb      	str	r3, [r7, #24]
 800a7c2:	e003      	b.n	800a7cc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800a7c4:	68bb      	ldr	r3, [r7, #8]
 800a7c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a7c8:	2300      	movs	r3, #0
 800a7ca:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800a7cc:	e030      	b.n	800a830 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a7ce:	683b      	ldr	r3, [r7, #0]
 800a7d0:	9300      	str	r3, [sp, #0]
 800a7d2:	697b      	ldr	r3, [r7, #20]
 800a7d4:	2200      	movs	r2, #0
 800a7d6:	2180      	movs	r1, #128	@ 0x80
 800a7d8:	68f8      	ldr	r0, [r7, #12]
 800a7da:	f000 feff 	bl	800b5dc <UART_WaitOnFlagUntilTimeout>
 800a7de:	4603      	mov	r3, r0
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d005      	beq.n	800a7f0 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	2220      	movs	r2, #32
 800a7e8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800a7ec:	2303      	movs	r3, #3
 800a7ee:	e03d      	b.n	800a86c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800a7f0:	69fb      	ldr	r3, [r7, #28]
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d10b      	bne.n	800a80e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a7f6:	69bb      	ldr	r3, [r7, #24]
 800a7f8:	881b      	ldrh	r3, [r3, #0]
 800a7fa:	461a      	mov	r2, r3
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a804:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800a806:	69bb      	ldr	r3, [r7, #24]
 800a808:	3302      	adds	r3, #2
 800a80a:	61bb      	str	r3, [r7, #24]
 800a80c:	e007      	b.n	800a81e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a80e:	69fb      	ldr	r3, [r7, #28]
 800a810:	781a      	ldrb	r2, [r3, #0]
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800a818:	69fb      	ldr	r3, [r7, #28]
 800a81a:	3301      	adds	r3, #1
 800a81c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a824:	b29b      	uxth	r3, r3
 800a826:	3b01      	subs	r3, #1
 800a828:	b29a      	uxth	r2, r3
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a836:	b29b      	uxth	r3, r3
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d1c8      	bne.n	800a7ce <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a83c:	683b      	ldr	r3, [r7, #0]
 800a83e:	9300      	str	r3, [sp, #0]
 800a840:	697b      	ldr	r3, [r7, #20]
 800a842:	2200      	movs	r2, #0
 800a844:	2140      	movs	r1, #64	@ 0x40
 800a846:	68f8      	ldr	r0, [r7, #12]
 800a848:	f000 fec8 	bl	800b5dc <UART_WaitOnFlagUntilTimeout>
 800a84c:	4603      	mov	r3, r0
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d005      	beq.n	800a85e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	2220      	movs	r2, #32
 800a856:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800a85a:	2303      	movs	r3, #3
 800a85c:	e006      	b.n	800a86c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	2220      	movs	r2, #32
 800a862:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800a866:	2300      	movs	r3, #0
 800a868:	e000      	b.n	800a86c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800a86a:	2302      	movs	r3, #2
  }
}
 800a86c:	4618      	mov	r0, r3
 800a86e:	3720      	adds	r7, #32
 800a870:	46bd      	mov	sp, r7
 800a872:	bd80      	pop	{r7, pc}

0800a874 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a874:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a878:	b092      	sub	sp, #72	@ 0x48
 800a87a:	af00      	add	r7, sp, #0
 800a87c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a87e:	2300      	movs	r3, #0
 800a880:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a884:	697b      	ldr	r3, [r7, #20]
 800a886:	689a      	ldr	r2, [r3, #8]
 800a888:	697b      	ldr	r3, [r7, #20]
 800a88a:	691b      	ldr	r3, [r3, #16]
 800a88c:	431a      	orrs	r2, r3
 800a88e:	697b      	ldr	r3, [r7, #20]
 800a890:	695b      	ldr	r3, [r3, #20]
 800a892:	431a      	orrs	r2, r3
 800a894:	697b      	ldr	r3, [r7, #20]
 800a896:	69db      	ldr	r3, [r3, #28]
 800a898:	4313      	orrs	r3, r2
 800a89a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a89c:	697b      	ldr	r3, [r7, #20]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	681a      	ldr	r2, [r3, #0]
 800a8a2:	4bbe      	ldr	r3, [pc, #760]	@ (800ab9c <UART_SetConfig+0x328>)
 800a8a4:	4013      	ands	r3, r2
 800a8a6:	697a      	ldr	r2, [r7, #20]
 800a8a8:	6812      	ldr	r2, [r2, #0]
 800a8aa:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a8ac:	430b      	orrs	r3, r1
 800a8ae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a8b0:	697b      	ldr	r3, [r7, #20]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	685b      	ldr	r3, [r3, #4]
 800a8b6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a8ba:	697b      	ldr	r3, [r7, #20]
 800a8bc:	68da      	ldr	r2, [r3, #12]
 800a8be:	697b      	ldr	r3, [r7, #20]
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	430a      	orrs	r2, r1
 800a8c4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a8c6:	697b      	ldr	r3, [r7, #20]
 800a8c8:	699b      	ldr	r3, [r3, #24]
 800a8ca:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a8cc:	697b      	ldr	r3, [r7, #20]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	4ab3      	ldr	r2, [pc, #716]	@ (800aba0 <UART_SetConfig+0x32c>)
 800a8d2:	4293      	cmp	r3, r2
 800a8d4:	d004      	beq.n	800a8e0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a8d6:	697b      	ldr	r3, [r7, #20]
 800a8d8:	6a1b      	ldr	r3, [r3, #32]
 800a8da:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a8dc:	4313      	orrs	r3, r2
 800a8de:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a8e0:	697b      	ldr	r3, [r7, #20]
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	689a      	ldr	r2, [r3, #8]
 800a8e6:	4baf      	ldr	r3, [pc, #700]	@ (800aba4 <UART_SetConfig+0x330>)
 800a8e8:	4013      	ands	r3, r2
 800a8ea:	697a      	ldr	r2, [r7, #20]
 800a8ec:	6812      	ldr	r2, [r2, #0]
 800a8ee:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a8f0:	430b      	orrs	r3, r1
 800a8f2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a8f4:	697b      	ldr	r3, [r7, #20]
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a8fa:	f023 010f 	bic.w	r1, r3, #15
 800a8fe:	697b      	ldr	r3, [r7, #20]
 800a900:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a902:	697b      	ldr	r3, [r7, #20]
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	430a      	orrs	r2, r1
 800a908:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a90a:	697b      	ldr	r3, [r7, #20]
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	4aa6      	ldr	r2, [pc, #664]	@ (800aba8 <UART_SetConfig+0x334>)
 800a910:	4293      	cmp	r3, r2
 800a912:	d177      	bne.n	800aa04 <UART_SetConfig+0x190>
 800a914:	4ba5      	ldr	r3, [pc, #660]	@ (800abac <UART_SetConfig+0x338>)
 800a916:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a918:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a91c:	2b28      	cmp	r3, #40	@ 0x28
 800a91e:	d86d      	bhi.n	800a9fc <UART_SetConfig+0x188>
 800a920:	a201      	add	r2, pc, #4	@ (adr r2, 800a928 <UART_SetConfig+0xb4>)
 800a922:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a926:	bf00      	nop
 800a928:	0800a9cd 	.word	0x0800a9cd
 800a92c:	0800a9fd 	.word	0x0800a9fd
 800a930:	0800a9fd 	.word	0x0800a9fd
 800a934:	0800a9fd 	.word	0x0800a9fd
 800a938:	0800a9fd 	.word	0x0800a9fd
 800a93c:	0800a9fd 	.word	0x0800a9fd
 800a940:	0800a9fd 	.word	0x0800a9fd
 800a944:	0800a9fd 	.word	0x0800a9fd
 800a948:	0800a9d5 	.word	0x0800a9d5
 800a94c:	0800a9fd 	.word	0x0800a9fd
 800a950:	0800a9fd 	.word	0x0800a9fd
 800a954:	0800a9fd 	.word	0x0800a9fd
 800a958:	0800a9fd 	.word	0x0800a9fd
 800a95c:	0800a9fd 	.word	0x0800a9fd
 800a960:	0800a9fd 	.word	0x0800a9fd
 800a964:	0800a9fd 	.word	0x0800a9fd
 800a968:	0800a9dd 	.word	0x0800a9dd
 800a96c:	0800a9fd 	.word	0x0800a9fd
 800a970:	0800a9fd 	.word	0x0800a9fd
 800a974:	0800a9fd 	.word	0x0800a9fd
 800a978:	0800a9fd 	.word	0x0800a9fd
 800a97c:	0800a9fd 	.word	0x0800a9fd
 800a980:	0800a9fd 	.word	0x0800a9fd
 800a984:	0800a9fd 	.word	0x0800a9fd
 800a988:	0800a9e5 	.word	0x0800a9e5
 800a98c:	0800a9fd 	.word	0x0800a9fd
 800a990:	0800a9fd 	.word	0x0800a9fd
 800a994:	0800a9fd 	.word	0x0800a9fd
 800a998:	0800a9fd 	.word	0x0800a9fd
 800a99c:	0800a9fd 	.word	0x0800a9fd
 800a9a0:	0800a9fd 	.word	0x0800a9fd
 800a9a4:	0800a9fd 	.word	0x0800a9fd
 800a9a8:	0800a9ed 	.word	0x0800a9ed
 800a9ac:	0800a9fd 	.word	0x0800a9fd
 800a9b0:	0800a9fd 	.word	0x0800a9fd
 800a9b4:	0800a9fd 	.word	0x0800a9fd
 800a9b8:	0800a9fd 	.word	0x0800a9fd
 800a9bc:	0800a9fd 	.word	0x0800a9fd
 800a9c0:	0800a9fd 	.word	0x0800a9fd
 800a9c4:	0800a9fd 	.word	0x0800a9fd
 800a9c8:	0800a9f5 	.word	0x0800a9f5
 800a9cc:	2301      	movs	r3, #1
 800a9ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a9d2:	e222      	b.n	800ae1a <UART_SetConfig+0x5a6>
 800a9d4:	2304      	movs	r3, #4
 800a9d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a9da:	e21e      	b.n	800ae1a <UART_SetConfig+0x5a6>
 800a9dc:	2308      	movs	r3, #8
 800a9de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a9e2:	e21a      	b.n	800ae1a <UART_SetConfig+0x5a6>
 800a9e4:	2310      	movs	r3, #16
 800a9e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a9ea:	e216      	b.n	800ae1a <UART_SetConfig+0x5a6>
 800a9ec:	2320      	movs	r3, #32
 800a9ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a9f2:	e212      	b.n	800ae1a <UART_SetConfig+0x5a6>
 800a9f4:	2340      	movs	r3, #64	@ 0x40
 800a9f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a9fa:	e20e      	b.n	800ae1a <UART_SetConfig+0x5a6>
 800a9fc:	2380      	movs	r3, #128	@ 0x80
 800a9fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aa02:	e20a      	b.n	800ae1a <UART_SetConfig+0x5a6>
 800aa04:	697b      	ldr	r3, [r7, #20]
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	4a69      	ldr	r2, [pc, #420]	@ (800abb0 <UART_SetConfig+0x33c>)
 800aa0a:	4293      	cmp	r3, r2
 800aa0c:	d130      	bne.n	800aa70 <UART_SetConfig+0x1fc>
 800aa0e:	4b67      	ldr	r3, [pc, #412]	@ (800abac <UART_SetConfig+0x338>)
 800aa10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aa12:	f003 0307 	and.w	r3, r3, #7
 800aa16:	2b05      	cmp	r3, #5
 800aa18:	d826      	bhi.n	800aa68 <UART_SetConfig+0x1f4>
 800aa1a:	a201      	add	r2, pc, #4	@ (adr r2, 800aa20 <UART_SetConfig+0x1ac>)
 800aa1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa20:	0800aa39 	.word	0x0800aa39
 800aa24:	0800aa41 	.word	0x0800aa41
 800aa28:	0800aa49 	.word	0x0800aa49
 800aa2c:	0800aa51 	.word	0x0800aa51
 800aa30:	0800aa59 	.word	0x0800aa59
 800aa34:	0800aa61 	.word	0x0800aa61
 800aa38:	2300      	movs	r3, #0
 800aa3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aa3e:	e1ec      	b.n	800ae1a <UART_SetConfig+0x5a6>
 800aa40:	2304      	movs	r3, #4
 800aa42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aa46:	e1e8      	b.n	800ae1a <UART_SetConfig+0x5a6>
 800aa48:	2308      	movs	r3, #8
 800aa4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aa4e:	e1e4      	b.n	800ae1a <UART_SetConfig+0x5a6>
 800aa50:	2310      	movs	r3, #16
 800aa52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aa56:	e1e0      	b.n	800ae1a <UART_SetConfig+0x5a6>
 800aa58:	2320      	movs	r3, #32
 800aa5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aa5e:	e1dc      	b.n	800ae1a <UART_SetConfig+0x5a6>
 800aa60:	2340      	movs	r3, #64	@ 0x40
 800aa62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aa66:	e1d8      	b.n	800ae1a <UART_SetConfig+0x5a6>
 800aa68:	2380      	movs	r3, #128	@ 0x80
 800aa6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aa6e:	e1d4      	b.n	800ae1a <UART_SetConfig+0x5a6>
 800aa70:	697b      	ldr	r3, [r7, #20]
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	4a4f      	ldr	r2, [pc, #316]	@ (800abb4 <UART_SetConfig+0x340>)
 800aa76:	4293      	cmp	r3, r2
 800aa78:	d130      	bne.n	800aadc <UART_SetConfig+0x268>
 800aa7a:	4b4c      	ldr	r3, [pc, #304]	@ (800abac <UART_SetConfig+0x338>)
 800aa7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aa7e:	f003 0307 	and.w	r3, r3, #7
 800aa82:	2b05      	cmp	r3, #5
 800aa84:	d826      	bhi.n	800aad4 <UART_SetConfig+0x260>
 800aa86:	a201      	add	r2, pc, #4	@ (adr r2, 800aa8c <UART_SetConfig+0x218>)
 800aa88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa8c:	0800aaa5 	.word	0x0800aaa5
 800aa90:	0800aaad 	.word	0x0800aaad
 800aa94:	0800aab5 	.word	0x0800aab5
 800aa98:	0800aabd 	.word	0x0800aabd
 800aa9c:	0800aac5 	.word	0x0800aac5
 800aaa0:	0800aacd 	.word	0x0800aacd
 800aaa4:	2300      	movs	r3, #0
 800aaa6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aaaa:	e1b6      	b.n	800ae1a <UART_SetConfig+0x5a6>
 800aaac:	2304      	movs	r3, #4
 800aaae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aab2:	e1b2      	b.n	800ae1a <UART_SetConfig+0x5a6>
 800aab4:	2308      	movs	r3, #8
 800aab6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aaba:	e1ae      	b.n	800ae1a <UART_SetConfig+0x5a6>
 800aabc:	2310      	movs	r3, #16
 800aabe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aac2:	e1aa      	b.n	800ae1a <UART_SetConfig+0x5a6>
 800aac4:	2320      	movs	r3, #32
 800aac6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aaca:	e1a6      	b.n	800ae1a <UART_SetConfig+0x5a6>
 800aacc:	2340      	movs	r3, #64	@ 0x40
 800aace:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aad2:	e1a2      	b.n	800ae1a <UART_SetConfig+0x5a6>
 800aad4:	2380      	movs	r3, #128	@ 0x80
 800aad6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aada:	e19e      	b.n	800ae1a <UART_SetConfig+0x5a6>
 800aadc:	697b      	ldr	r3, [r7, #20]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	4a35      	ldr	r2, [pc, #212]	@ (800abb8 <UART_SetConfig+0x344>)
 800aae2:	4293      	cmp	r3, r2
 800aae4:	d130      	bne.n	800ab48 <UART_SetConfig+0x2d4>
 800aae6:	4b31      	ldr	r3, [pc, #196]	@ (800abac <UART_SetConfig+0x338>)
 800aae8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aaea:	f003 0307 	and.w	r3, r3, #7
 800aaee:	2b05      	cmp	r3, #5
 800aaf0:	d826      	bhi.n	800ab40 <UART_SetConfig+0x2cc>
 800aaf2:	a201      	add	r2, pc, #4	@ (adr r2, 800aaf8 <UART_SetConfig+0x284>)
 800aaf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aaf8:	0800ab11 	.word	0x0800ab11
 800aafc:	0800ab19 	.word	0x0800ab19
 800ab00:	0800ab21 	.word	0x0800ab21
 800ab04:	0800ab29 	.word	0x0800ab29
 800ab08:	0800ab31 	.word	0x0800ab31
 800ab0c:	0800ab39 	.word	0x0800ab39
 800ab10:	2300      	movs	r3, #0
 800ab12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab16:	e180      	b.n	800ae1a <UART_SetConfig+0x5a6>
 800ab18:	2304      	movs	r3, #4
 800ab1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab1e:	e17c      	b.n	800ae1a <UART_SetConfig+0x5a6>
 800ab20:	2308      	movs	r3, #8
 800ab22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab26:	e178      	b.n	800ae1a <UART_SetConfig+0x5a6>
 800ab28:	2310      	movs	r3, #16
 800ab2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab2e:	e174      	b.n	800ae1a <UART_SetConfig+0x5a6>
 800ab30:	2320      	movs	r3, #32
 800ab32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab36:	e170      	b.n	800ae1a <UART_SetConfig+0x5a6>
 800ab38:	2340      	movs	r3, #64	@ 0x40
 800ab3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab3e:	e16c      	b.n	800ae1a <UART_SetConfig+0x5a6>
 800ab40:	2380      	movs	r3, #128	@ 0x80
 800ab42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab46:	e168      	b.n	800ae1a <UART_SetConfig+0x5a6>
 800ab48:	697b      	ldr	r3, [r7, #20]
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	4a1b      	ldr	r2, [pc, #108]	@ (800abbc <UART_SetConfig+0x348>)
 800ab4e:	4293      	cmp	r3, r2
 800ab50:	d142      	bne.n	800abd8 <UART_SetConfig+0x364>
 800ab52:	4b16      	ldr	r3, [pc, #88]	@ (800abac <UART_SetConfig+0x338>)
 800ab54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ab56:	f003 0307 	and.w	r3, r3, #7
 800ab5a:	2b05      	cmp	r3, #5
 800ab5c:	d838      	bhi.n	800abd0 <UART_SetConfig+0x35c>
 800ab5e:	a201      	add	r2, pc, #4	@ (adr r2, 800ab64 <UART_SetConfig+0x2f0>)
 800ab60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab64:	0800ab7d 	.word	0x0800ab7d
 800ab68:	0800ab85 	.word	0x0800ab85
 800ab6c:	0800ab8d 	.word	0x0800ab8d
 800ab70:	0800ab95 	.word	0x0800ab95
 800ab74:	0800abc1 	.word	0x0800abc1
 800ab78:	0800abc9 	.word	0x0800abc9
 800ab7c:	2300      	movs	r3, #0
 800ab7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab82:	e14a      	b.n	800ae1a <UART_SetConfig+0x5a6>
 800ab84:	2304      	movs	r3, #4
 800ab86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab8a:	e146      	b.n	800ae1a <UART_SetConfig+0x5a6>
 800ab8c:	2308      	movs	r3, #8
 800ab8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab92:	e142      	b.n	800ae1a <UART_SetConfig+0x5a6>
 800ab94:	2310      	movs	r3, #16
 800ab96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab9a:	e13e      	b.n	800ae1a <UART_SetConfig+0x5a6>
 800ab9c:	cfff69f3 	.word	0xcfff69f3
 800aba0:	58000c00 	.word	0x58000c00
 800aba4:	11fff4ff 	.word	0x11fff4ff
 800aba8:	40011000 	.word	0x40011000
 800abac:	58024400 	.word	0x58024400
 800abb0:	40004400 	.word	0x40004400
 800abb4:	40004800 	.word	0x40004800
 800abb8:	40004c00 	.word	0x40004c00
 800abbc:	40005000 	.word	0x40005000
 800abc0:	2320      	movs	r3, #32
 800abc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800abc6:	e128      	b.n	800ae1a <UART_SetConfig+0x5a6>
 800abc8:	2340      	movs	r3, #64	@ 0x40
 800abca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800abce:	e124      	b.n	800ae1a <UART_SetConfig+0x5a6>
 800abd0:	2380      	movs	r3, #128	@ 0x80
 800abd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800abd6:	e120      	b.n	800ae1a <UART_SetConfig+0x5a6>
 800abd8:	697b      	ldr	r3, [r7, #20]
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	4acb      	ldr	r2, [pc, #812]	@ (800af0c <UART_SetConfig+0x698>)
 800abde:	4293      	cmp	r3, r2
 800abe0:	d176      	bne.n	800acd0 <UART_SetConfig+0x45c>
 800abe2:	4bcb      	ldr	r3, [pc, #812]	@ (800af10 <UART_SetConfig+0x69c>)
 800abe4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800abe6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800abea:	2b28      	cmp	r3, #40	@ 0x28
 800abec:	d86c      	bhi.n	800acc8 <UART_SetConfig+0x454>
 800abee:	a201      	add	r2, pc, #4	@ (adr r2, 800abf4 <UART_SetConfig+0x380>)
 800abf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abf4:	0800ac99 	.word	0x0800ac99
 800abf8:	0800acc9 	.word	0x0800acc9
 800abfc:	0800acc9 	.word	0x0800acc9
 800ac00:	0800acc9 	.word	0x0800acc9
 800ac04:	0800acc9 	.word	0x0800acc9
 800ac08:	0800acc9 	.word	0x0800acc9
 800ac0c:	0800acc9 	.word	0x0800acc9
 800ac10:	0800acc9 	.word	0x0800acc9
 800ac14:	0800aca1 	.word	0x0800aca1
 800ac18:	0800acc9 	.word	0x0800acc9
 800ac1c:	0800acc9 	.word	0x0800acc9
 800ac20:	0800acc9 	.word	0x0800acc9
 800ac24:	0800acc9 	.word	0x0800acc9
 800ac28:	0800acc9 	.word	0x0800acc9
 800ac2c:	0800acc9 	.word	0x0800acc9
 800ac30:	0800acc9 	.word	0x0800acc9
 800ac34:	0800aca9 	.word	0x0800aca9
 800ac38:	0800acc9 	.word	0x0800acc9
 800ac3c:	0800acc9 	.word	0x0800acc9
 800ac40:	0800acc9 	.word	0x0800acc9
 800ac44:	0800acc9 	.word	0x0800acc9
 800ac48:	0800acc9 	.word	0x0800acc9
 800ac4c:	0800acc9 	.word	0x0800acc9
 800ac50:	0800acc9 	.word	0x0800acc9
 800ac54:	0800acb1 	.word	0x0800acb1
 800ac58:	0800acc9 	.word	0x0800acc9
 800ac5c:	0800acc9 	.word	0x0800acc9
 800ac60:	0800acc9 	.word	0x0800acc9
 800ac64:	0800acc9 	.word	0x0800acc9
 800ac68:	0800acc9 	.word	0x0800acc9
 800ac6c:	0800acc9 	.word	0x0800acc9
 800ac70:	0800acc9 	.word	0x0800acc9
 800ac74:	0800acb9 	.word	0x0800acb9
 800ac78:	0800acc9 	.word	0x0800acc9
 800ac7c:	0800acc9 	.word	0x0800acc9
 800ac80:	0800acc9 	.word	0x0800acc9
 800ac84:	0800acc9 	.word	0x0800acc9
 800ac88:	0800acc9 	.word	0x0800acc9
 800ac8c:	0800acc9 	.word	0x0800acc9
 800ac90:	0800acc9 	.word	0x0800acc9
 800ac94:	0800acc1 	.word	0x0800acc1
 800ac98:	2301      	movs	r3, #1
 800ac9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac9e:	e0bc      	b.n	800ae1a <UART_SetConfig+0x5a6>
 800aca0:	2304      	movs	r3, #4
 800aca2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aca6:	e0b8      	b.n	800ae1a <UART_SetConfig+0x5a6>
 800aca8:	2308      	movs	r3, #8
 800acaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800acae:	e0b4      	b.n	800ae1a <UART_SetConfig+0x5a6>
 800acb0:	2310      	movs	r3, #16
 800acb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800acb6:	e0b0      	b.n	800ae1a <UART_SetConfig+0x5a6>
 800acb8:	2320      	movs	r3, #32
 800acba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800acbe:	e0ac      	b.n	800ae1a <UART_SetConfig+0x5a6>
 800acc0:	2340      	movs	r3, #64	@ 0x40
 800acc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800acc6:	e0a8      	b.n	800ae1a <UART_SetConfig+0x5a6>
 800acc8:	2380      	movs	r3, #128	@ 0x80
 800acca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800acce:	e0a4      	b.n	800ae1a <UART_SetConfig+0x5a6>
 800acd0:	697b      	ldr	r3, [r7, #20]
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	4a8f      	ldr	r2, [pc, #572]	@ (800af14 <UART_SetConfig+0x6a0>)
 800acd6:	4293      	cmp	r3, r2
 800acd8:	d130      	bne.n	800ad3c <UART_SetConfig+0x4c8>
 800acda:	4b8d      	ldr	r3, [pc, #564]	@ (800af10 <UART_SetConfig+0x69c>)
 800acdc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800acde:	f003 0307 	and.w	r3, r3, #7
 800ace2:	2b05      	cmp	r3, #5
 800ace4:	d826      	bhi.n	800ad34 <UART_SetConfig+0x4c0>
 800ace6:	a201      	add	r2, pc, #4	@ (adr r2, 800acec <UART_SetConfig+0x478>)
 800ace8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acec:	0800ad05 	.word	0x0800ad05
 800acf0:	0800ad0d 	.word	0x0800ad0d
 800acf4:	0800ad15 	.word	0x0800ad15
 800acf8:	0800ad1d 	.word	0x0800ad1d
 800acfc:	0800ad25 	.word	0x0800ad25
 800ad00:	0800ad2d 	.word	0x0800ad2d
 800ad04:	2300      	movs	r3, #0
 800ad06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad0a:	e086      	b.n	800ae1a <UART_SetConfig+0x5a6>
 800ad0c:	2304      	movs	r3, #4
 800ad0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad12:	e082      	b.n	800ae1a <UART_SetConfig+0x5a6>
 800ad14:	2308      	movs	r3, #8
 800ad16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad1a:	e07e      	b.n	800ae1a <UART_SetConfig+0x5a6>
 800ad1c:	2310      	movs	r3, #16
 800ad1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad22:	e07a      	b.n	800ae1a <UART_SetConfig+0x5a6>
 800ad24:	2320      	movs	r3, #32
 800ad26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad2a:	e076      	b.n	800ae1a <UART_SetConfig+0x5a6>
 800ad2c:	2340      	movs	r3, #64	@ 0x40
 800ad2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad32:	e072      	b.n	800ae1a <UART_SetConfig+0x5a6>
 800ad34:	2380      	movs	r3, #128	@ 0x80
 800ad36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad3a:	e06e      	b.n	800ae1a <UART_SetConfig+0x5a6>
 800ad3c:	697b      	ldr	r3, [r7, #20]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	4a75      	ldr	r2, [pc, #468]	@ (800af18 <UART_SetConfig+0x6a4>)
 800ad42:	4293      	cmp	r3, r2
 800ad44:	d130      	bne.n	800ada8 <UART_SetConfig+0x534>
 800ad46:	4b72      	ldr	r3, [pc, #456]	@ (800af10 <UART_SetConfig+0x69c>)
 800ad48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ad4a:	f003 0307 	and.w	r3, r3, #7
 800ad4e:	2b05      	cmp	r3, #5
 800ad50:	d826      	bhi.n	800ada0 <UART_SetConfig+0x52c>
 800ad52:	a201      	add	r2, pc, #4	@ (adr r2, 800ad58 <UART_SetConfig+0x4e4>)
 800ad54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad58:	0800ad71 	.word	0x0800ad71
 800ad5c:	0800ad79 	.word	0x0800ad79
 800ad60:	0800ad81 	.word	0x0800ad81
 800ad64:	0800ad89 	.word	0x0800ad89
 800ad68:	0800ad91 	.word	0x0800ad91
 800ad6c:	0800ad99 	.word	0x0800ad99
 800ad70:	2300      	movs	r3, #0
 800ad72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad76:	e050      	b.n	800ae1a <UART_SetConfig+0x5a6>
 800ad78:	2304      	movs	r3, #4
 800ad7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad7e:	e04c      	b.n	800ae1a <UART_SetConfig+0x5a6>
 800ad80:	2308      	movs	r3, #8
 800ad82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad86:	e048      	b.n	800ae1a <UART_SetConfig+0x5a6>
 800ad88:	2310      	movs	r3, #16
 800ad8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad8e:	e044      	b.n	800ae1a <UART_SetConfig+0x5a6>
 800ad90:	2320      	movs	r3, #32
 800ad92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad96:	e040      	b.n	800ae1a <UART_SetConfig+0x5a6>
 800ad98:	2340      	movs	r3, #64	@ 0x40
 800ad9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad9e:	e03c      	b.n	800ae1a <UART_SetConfig+0x5a6>
 800ada0:	2380      	movs	r3, #128	@ 0x80
 800ada2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ada6:	e038      	b.n	800ae1a <UART_SetConfig+0x5a6>
 800ada8:	697b      	ldr	r3, [r7, #20]
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	4a5b      	ldr	r2, [pc, #364]	@ (800af1c <UART_SetConfig+0x6a8>)
 800adae:	4293      	cmp	r3, r2
 800adb0:	d130      	bne.n	800ae14 <UART_SetConfig+0x5a0>
 800adb2:	4b57      	ldr	r3, [pc, #348]	@ (800af10 <UART_SetConfig+0x69c>)
 800adb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800adb6:	f003 0307 	and.w	r3, r3, #7
 800adba:	2b05      	cmp	r3, #5
 800adbc:	d826      	bhi.n	800ae0c <UART_SetConfig+0x598>
 800adbe:	a201      	add	r2, pc, #4	@ (adr r2, 800adc4 <UART_SetConfig+0x550>)
 800adc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800adc4:	0800addd 	.word	0x0800addd
 800adc8:	0800ade5 	.word	0x0800ade5
 800adcc:	0800aded 	.word	0x0800aded
 800add0:	0800adf5 	.word	0x0800adf5
 800add4:	0800adfd 	.word	0x0800adfd
 800add8:	0800ae05 	.word	0x0800ae05
 800addc:	2302      	movs	r3, #2
 800adde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ade2:	e01a      	b.n	800ae1a <UART_SetConfig+0x5a6>
 800ade4:	2304      	movs	r3, #4
 800ade6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800adea:	e016      	b.n	800ae1a <UART_SetConfig+0x5a6>
 800adec:	2308      	movs	r3, #8
 800adee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800adf2:	e012      	b.n	800ae1a <UART_SetConfig+0x5a6>
 800adf4:	2310      	movs	r3, #16
 800adf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800adfa:	e00e      	b.n	800ae1a <UART_SetConfig+0x5a6>
 800adfc:	2320      	movs	r3, #32
 800adfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae02:	e00a      	b.n	800ae1a <UART_SetConfig+0x5a6>
 800ae04:	2340      	movs	r3, #64	@ 0x40
 800ae06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae0a:	e006      	b.n	800ae1a <UART_SetConfig+0x5a6>
 800ae0c:	2380      	movs	r3, #128	@ 0x80
 800ae0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae12:	e002      	b.n	800ae1a <UART_SetConfig+0x5a6>
 800ae14:	2380      	movs	r3, #128	@ 0x80
 800ae16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800ae1a:	697b      	ldr	r3, [r7, #20]
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	4a3f      	ldr	r2, [pc, #252]	@ (800af1c <UART_SetConfig+0x6a8>)
 800ae20:	4293      	cmp	r3, r2
 800ae22:	f040 80f8 	bne.w	800b016 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800ae26:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800ae2a:	2b20      	cmp	r3, #32
 800ae2c:	dc46      	bgt.n	800aebc <UART_SetConfig+0x648>
 800ae2e:	2b02      	cmp	r3, #2
 800ae30:	f2c0 8082 	blt.w	800af38 <UART_SetConfig+0x6c4>
 800ae34:	3b02      	subs	r3, #2
 800ae36:	2b1e      	cmp	r3, #30
 800ae38:	d87e      	bhi.n	800af38 <UART_SetConfig+0x6c4>
 800ae3a:	a201      	add	r2, pc, #4	@ (adr r2, 800ae40 <UART_SetConfig+0x5cc>)
 800ae3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae40:	0800aec3 	.word	0x0800aec3
 800ae44:	0800af39 	.word	0x0800af39
 800ae48:	0800aecb 	.word	0x0800aecb
 800ae4c:	0800af39 	.word	0x0800af39
 800ae50:	0800af39 	.word	0x0800af39
 800ae54:	0800af39 	.word	0x0800af39
 800ae58:	0800aedb 	.word	0x0800aedb
 800ae5c:	0800af39 	.word	0x0800af39
 800ae60:	0800af39 	.word	0x0800af39
 800ae64:	0800af39 	.word	0x0800af39
 800ae68:	0800af39 	.word	0x0800af39
 800ae6c:	0800af39 	.word	0x0800af39
 800ae70:	0800af39 	.word	0x0800af39
 800ae74:	0800af39 	.word	0x0800af39
 800ae78:	0800aeeb 	.word	0x0800aeeb
 800ae7c:	0800af39 	.word	0x0800af39
 800ae80:	0800af39 	.word	0x0800af39
 800ae84:	0800af39 	.word	0x0800af39
 800ae88:	0800af39 	.word	0x0800af39
 800ae8c:	0800af39 	.word	0x0800af39
 800ae90:	0800af39 	.word	0x0800af39
 800ae94:	0800af39 	.word	0x0800af39
 800ae98:	0800af39 	.word	0x0800af39
 800ae9c:	0800af39 	.word	0x0800af39
 800aea0:	0800af39 	.word	0x0800af39
 800aea4:	0800af39 	.word	0x0800af39
 800aea8:	0800af39 	.word	0x0800af39
 800aeac:	0800af39 	.word	0x0800af39
 800aeb0:	0800af39 	.word	0x0800af39
 800aeb4:	0800af39 	.word	0x0800af39
 800aeb8:	0800af2b 	.word	0x0800af2b
 800aebc:	2b40      	cmp	r3, #64	@ 0x40
 800aebe:	d037      	beq.n	800af30 <UART_SetConfig+0x6bc>
 800aec0:	e03a      	b.n	800af38 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800aec2:	f7fd fc1b 	bl	80086fc <HAL_RCCEx_GetD3PCLK1Freq>
 800aec6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800aec8:	e03c      	b.n	800af44 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aeca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800aece:	4618      	mov	r0, r3
 800aed0:	f7fd fc2a 	bl	8008728 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800aed4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aed6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aed8:	e034      	b.n	800af44 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aeda:	f107 0318 	add.w	r3, r7, #24
 800aede:	4618      	mov	r0, r3
 800aee0:	f7fd fd76 	bl	80089d0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800aee4:	69fb      	ldr	r3, [r7, #28]
 800aee6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aee8:	e02c      	b.n	800af44 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800aeea:	4b09      	ldr	r3, [pc, #36]	@ (800af10 <UART_SetConfig+0x69c>)
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	f003 0320 	and.w	r3, r3, #32
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d016      	beq.n	800af24 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800aef6:	4b06      	ldr	r3, [pc, #24]	@ (800af10 <UART_SetConfig+0x69c>)
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	08db      	lsrs	r3, r3, #3
 800aefc:	f003 0303 	and.w	r3, r3, #3
 800af00:	4a07      	ldr	r2, [pc, #28]	@ (800af20 <UART_SetConfig+0x6ac>)
 800af02:	fa22 f303 	lsr.w	r3, r2, r3
 800af06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800af08:	e01c      	b.n	800af44 <UART_SetConfig+0x6d0>
 800af0a:	bf00      	nop
 800af0c:	40011400 	.word	0x40011400
 800af10:	58024400 	.word	0x58024400
 800af14:	40007800 	.word	0x40007800
 800af18:	40007c00 	.word	0x40007c00
 800af1c:	58000c00 	.word	0x58000c00
 800af20:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800af24:	4b9d      	ldr	r3, [pc, #628]	@ (800b19c <UART_SetConfig+0x928>)
 800af26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800af28:	e00c      	b.n	800af44 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800af2a:	4b9d      	ldr	r3, [pc, #628]	@ (800b1a0 <UART_SetConfig+0x92c>)
 800af2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800af2e:	e009      	b.n	800af44 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800af30:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800af34:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800af36:	e005      	b.n	800af44 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800af38:	2300      	movs	r3, #0
 800af3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800af3c:	2301      	movs	r3, #1
 800af3e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800af42:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800af44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800af46:	2b00      	cmp	r3, #0
 800af48:	f000 81de 	beq.w	800b308 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800af4c:	697b      	ldr	r3, [r7, #20]
 800af4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af50:	4a94      	ldr	r2, [pc, #592]	@ (800b1a4 <UART_SetConfig+0x930>)
 800af52:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800af56:	461a      	mov	r2, r3
 800af58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800af5a:	fbb3 f3f2 	udiv	r3, r3, r2
 800af5e:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800af60:	697b      	ldr	r3, [r7, #20]
 800af62:	685a      	ldr	r2, [r3, #4]
 800af64:	4613      	mov	r3, r2
 800af66:	005b      	lsls	r3, r3, #1
 800af68:	4413      	add	r3, r2
 800af6a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800af6c:	429a      	cmp	r2, r3
 800af6e:	d305      	bcc.n	800af7c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800af70:	697b      	ldr	r3, [r7, #20]
 800af72:	685b      	ldr	r3, [r3, #4]
 800af74:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800af76:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800af78:	429a      	cmp	r2, r3
 800af7a:	d903      	bls.n	800af84 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800af7c:	2301      	movs	r3, #1
 800af7e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800af82:	e1c1      	b.n	800b308 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800af84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800af86:	2200      	movs	r2, #0
 800af88:	60bb      	str	r3, [r7, #8]
 800af8a:	60fa      	str	r2, [r7, #12]
 800af8c:	697b      	ldr	r3, [r7, #20]
 800af8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af90:	4a84      	ldr	r2, [pc, #528]	@ (800b1a4 <UART_SetConfig+0x930>)
 800af92:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800af96:	b29b      	uxth	r3, r3
 800af98:	2200      	movs	r2, #0
 800af9a:	603b      	str	r3, [r7, #0]
 800af9c:	607a      	str	r2, [r7, #4]
 800af9e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800afa2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800afa6:	f7f5 f9f3 	bl	8000390 <__aeabi_uldivmod>
 800afaa:	4602      	mov	r2, r0
 800afac:	460b      	mov	r3, r1
 800afae:	4610      	mov	r0, r2
 800afb0:	4619      	mov	r1, r3
 800afb2:	f04f 0200 	mov.w	r2, #0
 800afb6:	f04f 0300 	mov.w	r3, #0
 800afba:	020b      	lsls	r3, r1, #8
 800afbc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800afc0:	0202      	lsls	r2, r0, #8
 800afc2:	6979      	ldr	r1, [r7, #20]
 800afc4:	6849      	ldr	r1, [r1, #4]
 800afc6:	0849      	lsrs	r1, r1, #1
 800afc8:	2000      	movs	r0, #0
 800afca:	460c      	mov	r4, r1
 800afcc:	4605      	mov	r5, r0
 800afce:	eb12 0804 	adds.w	r8, r2, r4
 800afd2:	eb43 0905 	adc.w	r9, r3, r5
 800afd6:	697b      	ldr	r3, [r7, #20]
 800afd8:	685b      	ldr	r3, [r3, #4]
 800afda:	2200      	movs	r2, #0
 800afdc:	469a      	mov	sl, r3
 800afde:	4693      	mov	fp, r2
 800afe0:	4652      	mov	r2, sl
 800afe2:	465b      	mov	r3, fp
 800afe4:	4640      	mov	r0, r8
 800afe6:	4649      	mov	r1, r9
 800afe8:	f7f5 f9d2 	bl	8000390 <__aeabi_uldivmod>
 800afec:	4602      	mov	r2, r0
 800afee:	460b      	mov	r3, r1
 800aff0:	4613      	mov	r3, r2
 800aff2:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800aff4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aff6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800affa:	d308      	bcc.n	800b00e <UART_SetConfig+0x79a>
 800affc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800affe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b002:	d204      	bcs.n	800b00e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800b004:	697b      	ldr	r3, [r7, #20]
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b00a:	60da      	str	r2, [r3, #12]
 800b00c:	e17c      	b.n	800b308 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800b00e:	2301      	movs	r3, #1
 800b010:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800b014:	e178      	b.n	800b308 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b016:	697b      	ldr	r3, [r7, #20]
 800b018:	69db      	ldr	r3, [r3, #28]
 800b01a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b01e:	f040 80c5 	bne.w	800b1ac <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800b022:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800b026:	2b20      	cmp	r3, #32
 800b028:	dc48      	bgt.n	800b0bc <UART_SetConfig+0x848>
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	db7b      	blt.n	800b126 <UART_SetConfig+0x8b2>
 800b02e:	2b20      	cmp	r3, #32
 800b030:	d879      	bhi.n	800b126 <UART_SetConfig+0x8b2>
 800b032:	a201      	add	r2, pc, #4	@ (adr r2, 800b038 <UART_SetConfig+0x7c4>)
 800b034:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b038:	0800b0c3 	.word	0x0800b0c3
 800b03c:	0800b0cb 	.word	0x0800b0cb
 800b040:	0800b127 	.word	0x0800b127
 800b044:	0800b127 	.word	0x0800b127
 800b048:	0800b0d3 	.word	0x0800b0d3
 800b04c:	0800b127 	.word	0x0800b127
 800b050:	0800b127 	.word	0x0800b127
 800b054:	0800b127 	.word	0x0800b127
 800b058:	0800b0e3 	.word	0x0800b0e3
 800b05c:	0800b127 	.word	0x0800b127
 800b060:	0800b127 	.word	0x0800b127
 800b064:	0800b127 	.word	0x0800b127
 800b068:	0800b127 	.word	0x0800b127
 800b06c:	0800b127 	.word	0x0800b127
 800b070:	0800b127 	.word	0x0800b127
 800b074:	0800b127 	.word	0x0800b127
 800b078:	0800b0f3 	.word	0x0800b0f3
 800b07c:	0800b127 	.word	0x0800b127
 800b080:	0800b127 	.word	0x0800b127
 800b084:	0800b127 	.word	0x0800b127
 800b088:	0800b127 	.word	0x0800b127
 800b08c:	0800b127 	.word	0x0800b127
 800b090:	0800b127 	.word	0x0800b127
 800b094:	0800b127 	.word	0x0800b127
 800b098:	0800b127 	.word	0x0800b127
 800b09c:	0800b127 	.word	0x0800b127
 800b0a0:	0800b127 	.word	0x0800b127
 800b0a4:	0800b127 	.word	0x0800b127
 800b0a8:	0800b127 	.word	0x0800b127
 800b0ac:	0800b127 	.word	0x0800b127
 800b0b0:	0800b127 	.word	0x0800b127
 800b0b4:	0800b127 	.word	0x0800b127
 800b0b8:	0800b119 	.word	0x0800b119
 800b0bc:	2b40      	cmp	r3, #64	@ 0x40
 800b0be:	d02e      	beq.n	800b11e <UART_SetConfig+0x8aa>
 800b0c0:	e031      	b.n	800b126 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b0c2:	f7fc f8e5 	bl	8007290 <HAL_RCC_GetPCLK1Freq>
 800b0c6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b0c8:	e033      	b.n	800b132 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b0ca:	f7fc f8f7 	bl	80072bc <HAL_RCC_GetPCLK2Freq>
 800b0ce:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b0d0:	e02f      	b.n	800b132 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b0d2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b0d6:	4618      	mov	r0, r3
 800b0d8:	f7fd fb26 	bl	8008728 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b0dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b0de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b0e0:	e027      	b.n	800b132 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b0e2:	f107 0318 	add.w	r3, r7, #24
 800b0e6:	4618      	mov	r0, r3
 800b0e8:	f7fd fc72 	bl	80089d0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b0ec:	69fb      	ldr	r3, [r7, #28]
 800b0ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b0f0:	e01f      	b.n	800b132 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b0f2:	4b2d      	ldr	r3, [pc, #180]	@ (800b1a8 <UART_SetConfig+0x934>)
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	f003 0320 	and.w	r3, r3, #32
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d009      	beq.n	800b112 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b0fe:	4b2a      	ldr	r3, [pc, #168]	@ (800b1a8 <UART_SetConfig+0x934>)
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	08db      	lsrs	r3, r3, #3
 800b104:	f003 0303 	and.w	r3, r3, #3
 800b108:	4a24      	ldr	r2, [pc, #144]	@ (800b19c <UART_SetConfig+0x928>)
 800b10a:	fa22 f303 	lsr.w	r3, r2, r3
 800b10e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b110:	e00f      	b.n	800b132 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800b112:	4b22      	ldr	r3, [pc, #136]	@ (800b19c <UART_SetConfig+0x928>)
 800b114:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b116:	e00c      	b.n	800b132 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b118:	4b21      	ldr	r3, [pc, #132]	@ (800b1a0 <UART_SetConfig+0x92c>)
 800b11a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b11c:	e009      	b.n	800b132 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b11e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b122:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b124:	e005      	b.n	800b132 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800b126:	2300      	movs	r3, #0
 800b128:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800b12a:	2301      	movs	r3, #1
 800b12c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800b130:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b132:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b134:	2b00      	cmp	r3, #0
 800b136:	f000 80e7 	beq.w	800b308 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b13a:	697b      	ldr	r3, [r7, #20]
 800b13c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b13e:	4a19      	ldr	r2, [pc, #100]	@ (800b1a4 <UART_SetConfig+0x930>)
 800b140:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b144:	461a      	mov	r2, r3
 800b146:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b148:	fbb3 f3f2 	udiv	r3, r3, r2
 800b14c:	005a      	lsls	r2, r3, #1
 800b14e:	697b      	ldr	r3, [r7, #20]
 800b150:	685b      	ldr	r3, [r3, #4]
 800b152:	085b      	lsrs	r3, r3, #1
 800b154:	441a      	add	r2, r3
 800b156:	697b      	ldr	r3, [r7, #20]
 800b158:	685b      	ldr	r3, [r3, #4]
 800b15a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b15e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b160:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b162:	2b0f      	cmp	r3, #15
 800b164:	d916      	bls.n	800b194 <UART_SetConfig+0x920>
 800b166:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b168:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b16c:	d212      	bcs.n	800b194 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b16e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b170:	b29b      	uxth	r3, r3
 800b172:	f023 030f 	bic.w	r3, r3, #15
 800b176:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b178:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b17a:	085b      	lsrs	r3, r3, #1
 800b17c:	b29b      	uxth	r3, r3
 800b17e:	f003 0307 	and.w	r3, r3, #7
 800b182:	b29a      	uxth	r2, r3
 800b184:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800b186:	4313      	orrs	r3, r2
 800b188:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800b18a:	697b      	ldr	r3, [r7, #20]
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800b190:	60da      	str	r2, [r3, #12]
 800b192:	e0b9      	b.n	800b308 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800b194:	2301      	movs	r3, #1
 800b196:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800b19a:	e0b5      	b.n	800b308 <UART_SetConfig+0xa94>
 800b19c:	03d09000 	.word	0x03d09000
 800b1a0:	003d0900 	.word	0x003d0900
 800b1a4:	08012634 	.word	0x08012634
 800b1a8:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800b1ac:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800b1b0:	2b20      	cmp	r3, #32
 800b1b2:	dc49      	bgt.n	800b248 <UART_SetConfig+0x9d4>
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	db7c      	blt.n	800b2b2 <UART_SetConfig+0xa3e>
 800b1b8:	2b20      	cmp	r3, #32
 800b1ba:	d87a      	bhi.n	800b2b2 <UART_SetConfig+0xa3e>
 800b1bc:	a201      	add	r2, pc, #4	@ (adr r2, 800b1c4 <UART_SetConfig+0x950>)
 800b1be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1c2:	bf00      	nop
 800b1c4:	0800b24f 	.word	0x0800b24f
 800b1c8:	0800b257 	.word	0x0800b257
 800b1cc:	0800b2b3 	.word	0x0800b2b3
 800b1d0:	0800b2b3 	.word	0x0800b2b3
 800b1d4:	0800b25f 	.word	0x0800b25f
 800b1d8:	0800b2b3 	.word	0x0800b2b3
 800b1dc:	0800b2b3 	.word	0x0800b2b3
 800b1e0:	0800b2b3 	.word	0x0800b2b3
 800b1e4:	0800b26f 	.word	0x0800b26f
 800b1e8:	0800b2b3 	.word	0x0800b2b3
 800b1ec:	0800b2b3 	.word	0x0800b2b3
 800b1f0:	0800b2b3 	.word	0x0800b2b3
 800b1f4:	0800b2b3 	.word	0x0800b2b3
 800b1f8:	0800b2b3 	.word	0x0800b2b3
 800b1fc:	0800b2b3 	.word	0x0800b2b3
 800b200:	0800b2b3 	.word	0x0800b2b3
 800b204:	0800b27f 	.word	0x0800b27f
 800b208:	0800b2b3 	.word	0x0800b2b3
 800b20c:	0800b2b3 	.word	0x0800b2b3
 800b210:	0800b2b3 	.word	0x0800b2b3
 800b214:	0800b2b3 	.word	0x0800b2b3
 800b218:	0800b2b3 	.word	0x0800b2b3
 800b21c:	0800b2b3 	.word	0x0800b2b3
 800b220:	0800b2b3 	.word	0x0800b2b3
 800b224:	0800b2b3 	.word	0x0800b2b3
 800b228:	0800b2b3 	.word	0x0800b2b3
 800b22c:	0800b2b3 	.word	0x0800b2b3
 800b230:	0800b2b3 	.word	0x0800b2b3
 800b234:	0800b2b3 	.word	0x0800b2b3
 800b238:	0800b2b3 	.word	0x0800b2b3
 800b23c:	0800b2b3 	.word	0x0800b2b3
 800b240:	0800b2b3 	.word	0x0800b2b3
 800b244:	0800b2a5 	.word	0x0800b2a5
 800b248:	2b40      	cmp	r3, #64	@ 0x40
 800b24a:	d02e      	beq.n	800b2aa <UART_SetConfig+0xa36>
 800b24c:	e031      	b.n	800b2b2 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b24e:	f7fc f81f 	bl	8007290 <HAL_RCC_GetPCLK1Freq>
 800b252:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b254:	e033      	b.n	800b2be <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b256:	f7fc f831 	bl	80072bc <HAL_RCC_GetPCLK2Freq>
 800b25a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b25c:	e02f      	b.n	800b2be <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b25e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b262:	4618      	mov	r0, r3
 800b264:	f7fd fa60 	bl	8008728 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b268:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b26a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b26c:	e027      	b.n	800b2be <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b26e:	f107 0318 	add.w	r3, r7, #24
 800b272:	4618      	mov	r0, r3
 800b274:	f7fd fbac 	bl	80089d0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b278:	69fb      	ldr	r3, [r7, #28]
 800b27a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b27c:	e01f      	b.n	800b2be <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b27e:	4b2d      	ldr	r3, [pc, #180]	@ (800b334 <UART_SetConfig+0xac0>)
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	f003 0320 	and.w	r3, r3, #32
 800b286:	2b00      	cmp	r3, #0
 800b288:	d009      	beq.n	800b29e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b28a:	4b2a      	ldr	r3, [pc, #168]	@ (800b334 <UART_SetConfig+0xac0>)
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	08db      	lsrs	r3, r3, #3
 800b290:	f003 0303 	and.w	r3, r3, #3
 800b294:	4a28      	ldr	r2, [pc, #160]	@ (800b338 <UART_SetConfig+0xac4>)
 800b296:	fa22 f303 	lsr.w	r3, r2, r3
 800b29a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b29c:	e00f      	b.n	800b2be <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800b29e:	4b26      	ldr	r3, [pc, #152]	@ (800b338 <UART_SetConfig+0xac4>)
 800b2a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b2a2:	e00c      	b.n	800b2be <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b2a4:	4b25      	ldr	r3, [pc, #148]	@ (800b33c <UART_SetConfig+0xac8>)
 800b2a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b2a8:	e009      	b.n	800b2be <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b2aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b2ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b2b0:	e005      	b.n	800b2be <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800b2b2:	2300      	movs	r3, #0
 800b2b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800b2b6:	2301      	movs	r3, #1
 800b2b8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800b2bc:	bf00      	nop
    }

    if (pclk != 0U)
 800b2be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d021      	beq.n	800b308 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b2c4:	697b      	ldr	r3, [r7, #20]
 800b2c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b2c8:	4a1d      	ldr	r2, [pc, #116]	@ (800b340 <UART_SetConfig+0xacc>)
 800b2ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b2ce:	461a      	mov	r2, r3
 800b2d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b2d2:	fbb3 f2f2 	udiv	r2, r3, r2
 800b2d6:	697b      	ldr	r3, [r7, #20]
 800b2d8:	685b      	ldr	r3, [r3, #4]
 800b2da:	085b      	lsrs	r3, r3, #1
 800b2dc:	441a      	add	r2, r3
 800b2de:	697b      	ldr	r3, [r7, #20]
 800b2e0:	685b      	ldr	r3, [r3, #4]
 800b2e2:	fbb2 f3f3 	udiv	r3, r2, r3
 800b2e6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b2e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2ea:	2b0f      	cmp	r3, #15
 800b2ec:	d909      	bls.n	800b302 <UART_SetConfig+0xa8e>
 800b2ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b2f4:	d205      	bcs.n	800b302 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b2f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2f8:	b29a      	uxth	r2, r3
 800b2fa:	697b      	ldr	r3, [r7, #20]
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	60da      	str	r2, [r3, #12]
 800b300:	e002      	b.n	800b308 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800b302:	2301      	movs	r3, #1
 800b304:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b308:	697b      	ldr	r3, [r7, #20]
 800b30a:	2201      	movs	r2, #1
 800b30c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800b310:	697b      	ldr	r3, [r7, #20]
 800b312:	2201      	movs	r2, #1
 800b314:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b318:	697b      	ldr	r3, [r7, #20]
 800b31a:	2200      	movs	r2, #0
 800b31c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800b31e:	697b      	ldr	r3, [r7, #20]
 800b320:	2200      	movs	r2, #0
 800b322:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800b324:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800b328:	4618      	mov	r0, r3
 800b32a:	3748      	adds	r7, #72	@ 0x48
 800b32c:	46bd      	mov	sp, r7
 800b32e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b332:	bf00      	nop
 800b334:	58024400 	.word	0x58024400
 800b338:	03d09000 	.word	0x03d09000
 800b33c:	003d0900 	.word	0x003d0900
 800b340:	08012634 	.word	0x08012634

0800b344 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b344:	b480      	push	{r7}
 800b346:	b083      	sub	sp, #12
 800b348:	af00      	add	r7, sp, #0
 800b34a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b350:	f003 0308 	and.w	r3, r3, #8
 800b354:	2b00      	cmp	r3, #0
 800b356:	d00a      	beq.n	800b36e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	685b      	ldr	r3, [r3, #4]
 800b35e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	430a      	orrs	r2, r1
 800b36c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b372:	f003 0301 	and.w	r3, r3, #1
 800b376:	2b00      	cmp	r3, #0
 800b378:	d00a      	beq.n	800b390 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	685b      	ldr	r3, [r3, #4]
 800b380:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	430a      	orrs	r2, r1
 800b38e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b394:	f003 0302 	and.w	r3, r3, #2
 800b398:	2b00      	cmp	r3, #0
 800b39a:	d00a      	beq.n	800b3b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	685b      	ldr	r3, [r3, #4]
 800b3a2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	430a      	orrs	r2, r1
 800b3b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b3b6:	f003 0304 	and.w	r3, r3, #4
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d00a      	beq.n	800b3d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	685b      	ldr	r3, [r3, #4]
 800b3c4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	430a      	orrs	r2, r1
 800b3d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b3d8:	f003 0310 	and.w	r3, r3, #16
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d00a      	beq.n	800b3f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	689b      	ldr	r3, [r3, #8]
 800b3e6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	430a      	orrs	r2, r1
 800b3f4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b3fa:	f003 0320 	and.w	r3, r3, #32
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d00a      	beq.n	800b418 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	689b      	ldr	r3, [r3, #8]
 800b408:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	430a      	orrs	r2, r1
 800b416:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b41c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b420:	2b00      	cmp	r3, #0
 800b422:	d01a      	beq.n	800b45a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	685b      	ldr	r3, [r3, #4]
 800b42a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	430a      	orrs	r2, r1
 800b438:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b43e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b442:	d10a      	bne.n	800b45a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	685b      	ldr	r3, [r3, #4]
 800b44a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	430a      	orrs	r2, r1
 800b458:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b45e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b462:	2b00      	cmp	r3, #0
 800b464:	d00a      	beq.n	800b47c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	685b      	ldr	r3, [r3, #4]
 800b46c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	430a      	orrs	r2, r1
 800b47a:	605a      	str	r2, [r3, #4]
  }
}
 800b47c:	bf00      	nop
 800b47e:	370c      	adds	r7, #12
 800b480:	46bd      	mov	sp, r7
 800b482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b486:	4770      	bx	lr

0800b488 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b488:	b580      	push	{r7, lr}
 800b48a:	b098      	sub	sp, #96	@ 0x60
 800b48c:	af02      	add	r7, sp, #8
 800b48e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	2200      	movs	r2, #0
 800b494:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b498:	f7f6 ff7e 	bl	8002398 <HAL_GetTick>
 800b49c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	f003 0308 	and.w	r3, r3, #8
 800b4a8:	2b08      	cmp	r3, #8
 800b4aa:	d12f      	bne.n	800b50c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b4ac:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b4b0:	9300      	str	r3, [sp, #0]
 800b4b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b4b4:	2200      	movs	r2, #0
 800b4b6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800b4ba:	6878      	ldr	r0, [r7, #4]
 800b4bc:	f000 f88e 	bl	800b5dc <UART_WaitOnFlagUntilTimeout>
 800b4c0:	4603      	mov	r3, r0
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d022      	beq.n	800b50c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4ce:	e853 3f00 	ldrex	r3, [r3]
 800b4d2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b4d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b4d6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b4da:	653b      	str	r3, [r7, #80]	@ 0x50
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	461a      	mov	r2, r3
 800b4e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b4e4:	647b      	str	r3, [r7, #68]	@ 0x44
 800b4e6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4e8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b4ea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b4ec:	e841 2300 	strex	r3, r2, [r1]
 800b4f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b4f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d1e6      	bne.n	800b4c6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	2220      	movs	r2, #32
 800b4fc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	2200      	movs	r2, #0
 800b504:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b508:	2303      	movs	r3, #3
 800b50a:	e063      	b.n	800b5d4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	f003 0304 	and.w	r3, r3, #4
 800b516:	2b04      	cmp	r3, #4
 800b518:	d149      	bne.n	800b5ae <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b51a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b51e:	9300      	str	r3, [sp, #0]
 800b520:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b522:	2200      	movs	r2, #0
 800b524:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800b528:	6878      	ldr	r0, [r7, #4]
 800b52a:	f000 f857 	bl	800b5dc <UART_WaitOnFlagUntilTimeout>
 800b52e:	4603      	mov	r3, r0
 800b530:	2b00      	cmp	r3, #0
 800b532:	d03c      	beq.n	800b5ae <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b53a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b53c:	e853 3f00 	ldrex	r3, [r3]
 800b540:	623b      	str	r3, [r7, #32]
   return(result);
 800b542:	6a3b      	ldr	r3, [r7, #32]
 800b544:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b548:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	461a      	mov	r2, r3
 800b550:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b552:	633b      	str	r3, [r7, #48]	@ 0x30
 800b554:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b556:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b558:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b55a:	e841 2300 	strex	r3, r2, [r1]
 800b55e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b560:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b562:	2b00      	cmp	r3, #0
 800b564:	d1e6      	bne.n	800b534 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	3308      	adds	r3, #8
 800b56c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b56e:	693b      	ldr	r3, [r7, #16]
 800b570:	e853 3f00 	ldrex	r3, [r3]
 800b574:	60fb      	str	r3, [r7, #12]
   return(result);
 800b576:	68fb      	ldr	r3, [r7, #12]
 800b578:	f023 0301 	bic.w	r3, r3, #1
 800b57c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	3308      	adds	r3, #8
 800b584:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b586:	61fa      	str	r2, [r7, #28]
 800b588:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b58a:	69b9      	ldr	r1, [r7, #24]
 800b58c:	69fa      	ldr	r2, [r7, #28]
 800b58e:	e841 2300 	strex	r3, r2, [r1]
 800b592:	617b      	str	r3, [r7, #20]
   return(result);
 800b594:	697b      	ldr	r3, [r7, #20]
 800b596:	2b00      	cmp	r3, #0
 800b598:	d1e5      	bne.n	800b566 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	2220      	movs	r2, #32
 800b59e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	2200      	movs	r2, #0
 800b5a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b5aa:	2303      	movs	r3, #3
 800b5ac:	e012      	b.n	800b5d4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	2220      	movs	r2, #32
 800b5b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	2220      	movs	r2, #32
 800b5ba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	2200      	movs	r2, #0
 800b5c2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	2200      	movs	r2, #0
 800b5c8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	2200      	movs	r2, #0
 800b5ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b5d2:	2300      	movs	r3, #0
}
 800b5d4:	4618      	mov	r0, r3
 800b5d6:	3758      	adds	r7, #88	@ 0x58
 800b5d8:	46bd      	mov	sp, r7
 800b5da:	bd80      	pop	{r7, pc}

0800b5dc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b5dc:	b580      	push	{r7, lr}
 800b5de:	b084      	sub	sp, #16
 800b5e0:	af00      	add	r7, sp, #0
 800b5e2:	60f8      	str	r0, [r7, #12]
 800b5e4:	60b9      	str	r1, [r7, #8]
 800b5e6:	603b      	str	r3, [r7, #0]
 800b5e8:	4613      	mov	r3, r2
 800b5ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b5ec:	e04f      	b.n	800b68e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b5ee:	69bb      	ldr	r3, [r7, #24]
 800b5f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b5f4:	d04b      	beq.n	800b68e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b5f6:	f7f6 fecf 	bl	8002398 <HAL_GetTick>
 800b5fa:	4602      	mov	r2, r0
 800b5fc:	683b      	ldr	r3, [r7, #0]
 800b5fe:	1ad3      	subs	r3, r2, r3
 800b600:	69ba      	ldr	r2, [r7, #24]
 800b602:	429a      	cmp	r2, r3
 800b604:	d302      	bcc.n	800b60c <UART_WaitOnFlagUntilTimeout+0x30>
 800b606:	69bb      	ldr	r3, [r7, #24]
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d101      	bne.n	800b610 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b60c:	2303      	movs	r3, #3
 800b60e:	e04e      	b.n	800b6ae <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b610:	68fb      	ldr	r3, [r7, #12]
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	f003 0304 	and.w	r3, r3, #4
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d037      	beq.n	800b68e <UART_WaitOnFlagUntilTimeout+0xb2>
 800b61e:	68bb      	ldr	r3, [r7, #8]
 800b620:	2b80      	cmp	r3, #128	@ 0x80
 800b622:	d034      	beq.n	800b68e <UART_WaitOnFlagUntilTimeout+0xb2>
 800b624:	68bb      	ldr	r3, [r7, #8]
 800b626:	2b40      	cmp	r3, #64	@ 0x40
 800b628:	d031      	beq.n	800b68e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	69db      	ldr	r3, [r3, #28]
 800b630:	f003 0308 	and.w	r3, r3, #8
 800b634:	2b08      	cmp	r3, #8
 800b636:	d110      	bne.n	800b65a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	2208      	movs	r2, #8
 800b63e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b640:	68f8      	ldr	r0, [r7, #12]
 800b642:	f000 f839 	bl	800b6b8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	2208      	movs	r2, #8
 800b64a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	2200      	movs	r2, #0
 800b652:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800b656:	2301      	movs	r3, #1
 800b658:	e029      	b.n	800b6ae <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	69db      	ldr	r3, [r3, #28]
 800b660:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b664:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b668:	d111      	bne.n	800b68e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b672:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b674:	68f8      	ldr	r0, [r7, #12]
 800b676:	f000 f81f 	bl	800b6b8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	2220      	movs	r2, #32
 800b67e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	2200      	movs	r2, #0
 800b686:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800b68a:	2303      	movs	r3, #3
 800b68c:	e00f      	b.n	800b6ae <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	69da      	ldr	r2, [r3, #28]
 800b694:	68bb      	ldr	r3, [r7, #8]
 800b696:	4013      	ands	r3, r2
 800b698:	68ba      	ldr	r2, [r7, #8]
 800b69a:	429a      	cmp	r2, r3
 800b69c:	bf0c      	ite	eq
 800b69e:	2301      	moveq	r3, #1
 800b6a0:	2300      	movne	r3, #0
 800b6a2:	b2db      	uxtb	r3, r3
 800b6a4:	461a      	mov	r2, r3
 800b6a6:	79fb      	ldrb	r3, [r7, #7]
 800b6a8:	429a      	cmp	r2, r3
 800b6aa:	d0a0      	beq.n	800b5ee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b6ac:	2300      	movs	r3, #0
}
 800b6ae:	4618      	mov	r0, r3
 800b6b0:	3710      	adds	r7, #16
 800b6b2:	46bd      	mov	sp, r7
 800b6b4:	bd80      	pop	{r7, pc}
	...

0800b6b8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b6b8:	b480      	push	{r7}
 800b6ba:	b095      	sub	sp, #84	@ 0x54
 800b6bc:	af00      	add	r7, sp, #0
 800b6be:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b6c8:	e853 3f00 	ldrex	r3, [r3]
 800b6cc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b6ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6d0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b6d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	461a      	mov	r2, r3
 800b6dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b6de:	643b      	str	r3, [r7, #64]	@ 0x40
 800b6e0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6e2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b6e4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b6e6:	e841 2300 	strex	r3, r2, [r1]
 800b6ea:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b6ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d1e6      	bne.n	800b6c0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	3308      	adds	r3, #8
 800b6f8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6fa:	6a3b      	ldr	r3, [r7, #32]
 800b6fc:	e853 3f00 	ldrex	r3, [r3]
 800b700:	61fb      	str	r3, [r7, #28]
   return(result);
 800b702:	69fa      	ldr	r2, [r7, #28]
 800b704:	4b1e      	ldr	r3, [pc, #120]	@ (800b780 <UART_EndRxTransfer+0xc8>)
 800b706:	4013      	ands	r3, r2
 800b708:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	3308      	adds	r3, #8
 800b710:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b712:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b714:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b716:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b718:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b71a:	e841 2300 	strex	r3, r2, [r1]
 800b71e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b720:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b722:	2b00      	cmp	r3, #0
 800b724:	d1e5      	bne.n	800b6f2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b72a:	2b01      	cmp	r3, #1
 800b72c:	d118      	bne.n	800b760 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	e853 3f00 	ldrex	r3, [r3]
 800b73a:	60bb      	str	r3, [r7, #8]
   return(result);
 800b73c:	68bb      	ldr	r3, [r7, #8]
 800b73e:	f023 0310 	bic.w	r3, r3, #16
 800b742:	647b      	str	r3, [r7, #68]	@ 0x44
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	461a      	mov	r2, r3
 800b74a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b74c:	61bb      	str	r3, [r7, #24]
 800b74e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b750:	6979      	ldr	r1, [r7, #20]
 800b752:	69ba      	ldr	r2, [r7, #24]
 800b754:	e841 2300 	strex	r3, r2, [r1]
 800b758:	613b      	str	r3, [r7, #16]
   return(result);
 800b75a:	693b      	ldr	r3, [r7, #16]
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d1e6      	bne.n	800b72e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	2220      	movs	r2, #32
 800b764:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	2200      	movs	r2, #0
 800b76c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	2200      	movs	r2, #0
 800b772:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800b774:	bf00      	nop
 800b776:	3754      	adds	r7, #84	@ 0x54
 800b778:	46bd      	mov	sp, r7
 800b77a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b77e:	4770      	bx	lr
 800b780:	effffffe 	.word	0xeffffffe

0800b784 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b784:	b084      	sub	sp, #16
 800b786:	b580      	push	{r7, lr}
 800b788:	b084      	sub	sp, #16
 800b78a:	af00      	add	r7, sp, #0
 800b78c:	6078      	str	r0, [r7, #4]
 800b78e:	f107 001c 	add.w	r0, r7, #28
 800b792:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b796:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800b79a:	2b01      	cmp	r3, #1
 800b79c:	d121      	bne.n	800b7e2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b7a2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	68da      	ldr	r2, [r3, #12]
 800b7ae:	4b2c      	ldr	r3, [pc, #176]	@ (800b860 <USB_CoreInit+0xdc>)
 800b7b0:	4013      	ands	r3, r2
 800b7b2:	687a      	ldr	r2, [r7, #4]
 800b7b4:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	68db      	ldr	r3, [r3, #12]
 800b7ba:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800b7c2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800b7c6:	2b01      	cmp	r3, #1
 800b7c8:	d105      	bne.n	800b7d6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	68db      	ldr	r3, [r3, #12]
 800b7ce:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b7d6:	6878      	ldr	r0, [r7, #4]
 800b7d8:	f001 faf6 	bl	800cdc8 <USB_CoreReset>
 800b7dc:	4603      	mov	r3, r0
 800b7de:	73fb      	strb	r3, [r7, #15]
 800b7e0:	e01b      	b.n	800b81a <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	68db      	ldr	r3, [r3, #12]
 800b7e6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b7ee:	6878      	ldr	r0, [r7, #4]
 800b7f0:	f001 faea 	bl	800cdc8 <USB_CoreReset>
 800b7f4:	4603      	mov	r3, r0
 800b7f6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800b7f8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d106      	bne.n	800b80e <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b804:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	639a      	str	r2, [r3, #56]	@ 0x38
 800b80c:	e005      	b.n	800b81a <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b812:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800b81a:	7fbb      	ldrb	r3, [r7, #30]
 800b81c:	2b01      	cmp	r3, #1
 800b81e:	d116      	bne.n	800b84e <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b824:	b29a      	uxth	r2, r3
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800b82e:	4b0d      	ldr	r3, [pc, #52]	@ (800b864 <USB_CoreInit+0xe0>)
 800b830:	4313      	orrs	r3, r2
 800b832:	687a      	ldr	r2, [r7, #4]
 800b834:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	689b      	ldr	r3, [r3, #8]
 800b83a:	f043 0206 	orr.w	r2, r3, #6
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	689b      	ldr	r3, [r3, #8]
 800b846:	f043 0220 	orr.w	r2, r3, #32
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800b84e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b850:	4618      	mov	r0, r3
 800b852:	3710      	adds	r7, #16
 800b854:	46bd      	mov	sp, r7
 800b856:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b85a:	b004      	add	sp, #16
 800b85c:	4770      	bx	lr
 800b85e:	bf00      	nop
 800b860:	ffbdffbf 	.word	0xffbdffbf
 800b864:	03ee0000 	.word	0x03ee0000

0800b868 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800b868:	b480      	push	{r7}
 800b86a:	b087      	sub	sp, #28
 800b86c:	af00      	add	r7, sp, #0
 800b86e:	60f8      	str	r0, [r7, #12]
 800b870:	60b9      	str	r1, [r7, #8]
 800b872:	4613      	mov	r3, r2
 800b874:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800b876:	79fb      	ldrb	r3, [r7, #7]
 800b878:	2b02      	cmp	r3, #2
 800b87a:	d165      	bne.n	800b948 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800b87c:	68bb      	ldr	r3, [r7, #8]
 800b87e:	4a41      	ldr	r2, [pc, #260]	@ (800b984 <USB_SetTurnaroundTime+0x11c>)
 800b880:	4293      	cmp	r3, r2
 800b882:	d906      	bls.n	800b892 <USB_SetTurnaroundTime+0x2a>
 800b884:	68bb      	ldr	r3, [r7, #8]
 800b886:	4a40      	ldr	r2, [pc, #256]	@ (800b988 <USB_SetTurnaroundTime+0x120>)
 800b888:	4293      	cmp	r3, r2
 800b88a:	d202      	bcs.n	800b892 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800b88c:	230f      	movs	r3, #15
 800b88e:	617b      	str	r3, [r7, #20]
 800b890:	e062      	b.n	800b958 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800b892:	68bb      	ldr	r3, [r7, #8]
 800b894:	4a3c      	ldr	r2, [pc, #240]	@ (800b988 <USB_SetTurnaroundTime+0x120>)
 800b896:	4293      	cmp	r3, r2
 800b898:	d306      	bcc.n	800b8a8 <USB_SetTurnaroundTime+0x40>
 800b89a:	68bb      	ldr	r3, [r7, #8]
 800b89c:	4a3b      	ldr	r2, [pc, #236]	@ (800b98c <USB_SetTurnaroundTime+0x124>)
 800b89e:	4293      	cmp	r3, r2
 800b8a0:	d202      	bcs.n	800b8a8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800b8a2:	230e      	movs	r3, #14
 800b8a4:	617b      	str	r3, [r7, #20]
 800b8a6:	e057      	b.n	800b958 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800b8a8:	68bb      	ldr	r3, [r7, #8]
 800b8aa:	4a38      	ldr	r2, [pc, #224]	@ (800b98c <USB_SetTurnaroundTime+0x124>)
 800b8ac:	4293      	cmp	r3, r2
 800b8ae:	d306      	bcc.n	800b8be <USB_SetTurnaroundTime+0x56>
 800b8b0:	68bb      	ldr	r3, [r7, #8]
 800b8b2:	4a37      	ldr	r2, [pc, #220]	@ (800b990 <USB_SetTurnaroundTime+0x128>)
 800b8b4:	4293      	cmp	r3, r2
 800b8b6:	d202      	bcs.n	800b8be <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800b8b8:	230d      	movs	r3, #13
 800b8ba:	617b      	str	r3, [r7, #20]
 800b8bc:	e04c      	b.n	800b958 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800b8be:	68bb      	ldr	r3, [r7, #8]
 800b8c0:	4a33      	ldr	r2, [pc, #204]	@ (800b990 <USB_SetTurnaroundTime+0x128>)
 800b8c2:	4293      	cmp	r3, r2
 800b8c4:	d306      	bcc.n	800b8d4 <USB_SetTurnaroundTime+0x6c>
 800b8c6:	68bb      	ldr	r3, [r7, #8]
 800b8c8:	4a32      	ldr	r2, [pc, #200]	@ (800b994 <USB_SetTurnaroundTime+0x12c>)
 800b8ca:	4293      	cmp	r3, r2
 800b8cc:	d802      	bhi.n	800b8d4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800b8ce:	230c      	movs	r3, #12
 800b8d0:	617b      	str	r3, [r7, #20]
 800b8d2:	e041      	b.n	800b958 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800b8d4:	68bb      	ldr	r3, [r7, #8]
 800b8d6:	4a2f      	ldr	r2, [pc, #188]	@ (800b994 <USB_SetTurnaroundTime+0x12c>)
 800b8d8:	4293      	cmp	r3, r2
 800b8da:	d906      	bls.n	800b8ea <USB_SetTurnaroundTime+0x82>
 800b8dc:	68bb      	ldr	r3, [r7, #8]
 800b8de:	4a2e      	ldr	r2, [pc, #184]	@ (800b998 <USB_SetTurnaroundTime+0x130>)
 800b8e0:	4293      	cmp	r3, r2
 800b8e2:	d802      	bhi.n	800b8ea <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800b8e4:	230b      	movs	r3, #11
 800b8e6:	617b      	str	r3, [r7, #20]
 800b8e8:	e036      	b.n	800b958 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800b8ea:	68bb      	ldr	r3, [r7, #8]
 800b8ec:	4a2a      	ldr	r2, [pc, #168]	@ (800b998 <USB_SetTurnaroundTime+0x130>)
 800b8ee:	4293      	cmp	r3, r2
 800b8f0:	d906      	bls.n	800b900 <USB_SetTurnaroundTime+0x98>
 800b8f2:	68bb      	ldr	r3, [r7, #8]
 800b8f4:	4a29      	ldr	r2, [pc, #164]	@ (800b99c <USB_SetTurnaroundTime+0x134>)
 800b8f6:	4293      	cmp	r3, r2
 800b8f8:	d802      	bhi.n	800b900 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800b8fa:	230a      	movs	r3, #10
 800b8fc:	617b      	str	r3, [r7, #20]
 800b8fe:	e02b      	b.n	800b958 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800b900:	68bb      	ldr	r3, [r7, #8]
 800b902:	4a26      	ldr	r2, [pc, #152]	@ (800b99c <USB_SetTurnaroundTime+0x134>)
 800b904:	4293      	cmp	r3, r2
 800b906:	d906      	bls.n	800b916 <USB_SetTurnaroundTime+0xae>
 800b908:	68bb      	ldr	r3, [r7, #8]
 800b90a:	4a25      	ldr	r2, [pc, #148]	@ (800b9a0 <USB_SetTurnaroundTime+0x138>)
 800b90c:	4293      	cmp	r3, r2
 800b90e:	d202      	bcs.n	800b916 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800b910:	2309      	movs	r3, #9
 800b912:	617b      	str	r3, [r7, #20]
 800b914:	e020      	b.n	800b958 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800b916:	68bb      	ldr	r3, [r7, #8]
 800b918:	4a21      	ldr	r2, [pc, #132]	@ (800b9a0 <USB_SetTurnaroundTime+0x138>)
 800b91a:	4293      	cmp	r3, r2
 800b91c:	d306      	bcc.n	800b92c <USB_SetTurnaroundTime+0xc4>
 800b91e:	68bb      	ldr	r3, [r7, #8]
 800b920:	4a20      	ldr	r2, [pc, #128]	@ (800b9a4 <USB_SetTurnaroundTime+0x13c>)
 800b922:	4293      	cmp	r3, r2
 800b924:	d802      	bhi.n	800b92c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800b926:	2308      	movs	r3, #8
 800b928:	617b      	str	r3, [r7, #20]
 800b92a:	e015      	b.n	800b958 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800b92c:	68bb      	ldr	r3, [r7, #8]
 800b92e:	4a1d      	ldr	r2, [pc, #116]	@ (800b9a4 <USB_SetTurnaroundTime+0x13c>)
 800b930:	4293      	cmp	r3, r2
 800b932:	d906      	bls.n	800b942 <USB_SetTurnaroundTime+0xda>
 800b934:	68bb      	ldr	r3, [r7, #8]
 800b936:	4a1c      	ldr	r2, [pc, #112]	@ (800b9a8 <USB_SetTurnaroundTime+0x140>)
 800b938:	4293      	cmp	r3, r2
 800b93a:	d202      	bcs.n	800b942 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800b93c:	2307      	movs	r3, #7
 800b93e:	617b      	str	r3, [r7, #20]
 800b940:	e00a      	b.n	800b958 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800b942:	2306      	movs	r3, #6
 800b944:	617b      	str	r3, [r7, #20]
 800b946:	e007      	b.n	800b958 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800b948:	79fb      	ldrb	r3, [r7, #7]
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d102      	bne.n	800b954 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800b94e:	2309      	movs	r3, #9
 800b950:	617b      	str	r3, [r7, #20]
 800b952:	e001      	b.n	800b958 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800b954:	2309      	movs	r3, #9
 800b956:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800b958:	68fb      	ldr	r3, [r7, #12]
 800b95a:	68db      	ldr	r3, [r3, #12]
 800b95c:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	68da      	ldr	r2, [r3, #12]
 800b968:	697b      	ldr	r3, [r7, #20]
 800b96a:	029b      	lsls	r3, r3, #10
 800b96c:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800b970:	431a      	orrs	r2, r3
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b976:	2300      	movs	r3, #0
}
 800b978:	4618      	mov	r0, r3
 800b97a:	371c      	adds	r7, #28
 800b97c:	46bd      	mov	sp, r7
 800b97e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b982:	4770      	bx	lr
 800b984:	00d8acbf 	.word	0x00d8acbf
 800b988:	00e4e1c0 	.word	0x00e4e1c0
 800b98c:	00f42400 	.word	0x00f42400
 800b990:	01067380 	.word	0x01067380
 800b994:	011a499f 	.word	0x011a499f
 800b998:	01312cff 	.word	0x01312cff
 800b99c:	014ca43f 	.word	0x014ca43f
 800b9a0:	016e3600 	.word	0x016e3600
 800b9a4:	01a6ab1f 	.word	0x01a6ab1f
 800b9a8:	01e84800 	.word	0x01e84800

0800b9ac <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b9ac:	b480      	push	{r7}
 800b9ae:	b083      	sub	sp, #12
 800b9b0:	af00      	add	r7, sp, #0
 800b9b2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	689b      	ldr	r3, [r3, #8]
 800b9b8:	f043 0201 	orr.w	r2, r3, #1
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b9c0:	2300      	movs	r3, #0
}
 800b9c2:	4618      	mov	r0, r3
 800b9c4:	370c      	adds	r7, #12
 800b9c6:	46bd      	mov	sp, r7
 800b9c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9cc:	4770      	bx	lr

0800b9ce <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b9ce:	b480      	push	{r7}
 800b9d0:	b083      	sub	sp, #12
 800b9d2:	af00      	add	r7, sp, #0
 800b9d4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	689b      	ldr	r3, [r3, #8]
 800b9da:	f023 0201 	bic.w	r2, r3, #1
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b9e2:	2300      	movs	r3, #0
}
 800b9e4:	4618      	mov	r0, r3
 800b9e6:	370c      	adds	r7, #12
 800b9e8:	46bd      	mov	sp, r7
 800b9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ee:	4770      	bx	lr

0800b9f0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800b9f0:	b580      	push	{r7, lr}
 800b9f2:	b084      	sub	sp, #16
 800b9f4:	af00      	add	r7, sp, #0
 800b9f6:	6078      	str	r0, [r7, #4]
 800b9f8:	460b      	mov	r3, r1
 800b9fa:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800b9fc:	2300      	movs	r3, #0
 800b9fe:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	68db      	ldr	r3, [r3, #12]
 800ba04:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800ba0c:	78fb      	ldrb	r3, [r7, #3]
 800ba0e:	2b01      	cmp	r3, #1
 800ba10:	d115      	bne.n	800ba3e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	68db      	ldr	r3, [r3, #12]
 800ba16:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800ba1e:	200a      	movs	r0, #10
 800ba20:	f7f6 fcc6 	bl	80023b0 <HAL_Delay>
      ms += 10U;
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	330a      	adds	r3, #10
 800ba28:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800ba2a:	6878      	ldr	r0, [r7, #4]
 800ba2c:	f001 f93b 	bl	800cca6 <USB_GetMode>
 800ba30:	4603      	mov	r3, r0
 800ba32:	2b01      	cmp	r3, #1
 800ba34:	d01e      	beq.n	800ba74 <USB_SetCurrentMode+0x84>
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	2bc7      	cmp	r3, #199	@ 0xc7
 800ba3a:	d9f0      	bls.n	800ba1e <USB_SetCurrentMode+0x2e>
 800ba3c:	e01a      	b.n	800ba74 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800ba3e:	78fb      	ldrb	r3, [r7, #3]
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d115      	bne.n	800ba70 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	68db      	ldr	r3, [r3, #12]
 800ba48:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800ba50:	200a      	movs	r0, #10
 800ba52:	f7f6 fcad 	bl	80023b0 <HAL_Delay>
      ms += 10U;
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	330a      	adds	r3, #10
 800ba5a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800ba5c:	6878      	ldr	r0, [r7, #4]
 800ba5e:	f001 f922 	bl	800cca6 <USB_GetMode>
 800ba62:	4603      	mov	r3, r0
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d005      	beq.n	800ba74 <USB_SetCurrentMode+0x84>
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	2bc7      	cmp	r3, #199	@ 0xc7
 800ba6c:	d9f0      	bls.n	800ba50 <USB_SetCurrentMode+0x60>
 800ba6e:	e001      	b.n	800ba74 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800ba70:	2301      	movs	r3, #1
 800ba72:	e005      	b.n	800ba80 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	2bc8      	cmp	r3, #200	@ 0xc8
 800ba78:	d101      	bne.n	800ba7e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800ba7a:	2301      	movs	r3, #1
 800ba7c:	e000      	b.n	800ba80 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800ba7e:	2300      	movs	r3, #0
}
 800ba80:	4618      	mov	r0, r3
 800ba82:	3710      	adds	r7, #16
 800ba84:	46bd      	mov	sp, r7
 800ba86:	bd80      	pop	{r7, pc}

0800ba88 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ba88:	b084      	sub	sp, #16
 800ba8a:	b580      	push	{r7, lr}
 800ba8c:	b086      	sub	sp, #24
 800ba8e:	af00      	add	r7, sp, #0
 800ba90:	6078      	str	r0, [r7, #4]
 800ba92:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800ba96:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800ba9a:	2300      	movs	r3, #0
 800ba9c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800baa2:	2300      	movs	r3, #0
 800baa4:	613b      	str	r3, [r7, #16]
 800baa6:	e009      	b.n	800babc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800baa8:	687a      	ldr	r2, [r7, #4]
 800baaa:	693b      	ldr	r3, [r7, #16]
 800baac:	3340      	adds	r3, #64	@ 0x40
 800baae:	009b      	lsls	r3, r3, #2
 800bab0:	4413      	add	r3, r2
 800bab2:	2200      	movs	r2, #0
 800bab4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800bab6:	693b      	ldr	r3, [r7, #16]
 800bab8:	3301      	adds	r3, #1
 800baba:	613b      	str	r3, [r7, #16]
 800babc:	693b      	ldr	r3, [r7, #16]
 800babe:	2b0e      	cmp	r3, #14
 800bac0:	d9f2      	bls.n	800baa8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800bac2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d11c      	bne.n	800bb04 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800baca:	68fb      	ldr	r3, [r7, #12]
 800bacc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bad0:	685b      	ldr	r3, [r3, #4]
 800bad2:	68fa      	ldr	r2, [r7, #12]
 800bad4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800bad8:	f043 0302 	orr.w	r3, r3, #2
 800badc:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bae2:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	601a      	str	r2, [r3, #0]
 800bb02:	e005      	b.n	800bb10 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bb08:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800bb16:	461a      	mov	r2, r3
 800bb18:	2300      	movs	r3, #0
 800bb1a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800bb1c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800bb20:	2b01      	cmp	r3, #1
 800bb22:	d10d      	bne.n	800bb40 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800bb24:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d104      	bne.n	800bb36 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800bb2c:	2100      	movs	r1, #0
 800bb2e:	6878      	ldr	r0, [r7, #4]
 800bb30:	f000 f968 	bl	800be04 <USB_SetDevSpeed>
 800bb34:	e008      	b.n	800bb48 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800bb36:	2101      	movs	r1, #1
 800bb38:	6878      	ldr	r0, [r7, #4]
 800bb3a:	f000 f963 	bl	800be04 <USB_SetDevSpeed>
 800bb3e:	e003      	b.n	800bb48 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800bb40:	2103      	movs	r1, #3
 800bb42:	6878      	ldr	r0, [r7, #4]
 800bb44:	f000 f95e 	bl	800be04 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800bb48:	2110      	movs	r1, #16
 800bb4a:	6878      	ldr	r0, [r7, #4]
 800bb4c:	f000 f8fa 	bl	800bd44 <USB_FlushTxFifo>
 800bb50:	4603      	mov	r3, r0
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d001      	beq.n	800bb5a <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800bb56:	2301      	movs	r3, #1
 800bb58:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800bb5a:	6878      	ldr	r0, [r7, #4]
 800bb5c:	f000 f924 	bl	800bda8 <USB_FlushRxFifo>
 800bb60:	4603      	mov	r3, r0
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d001      	beq.n	800bb6a <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800bb66:	2301      	movs	r3, #1
 800bb68:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bb70:	461a      	mov	r2, r3
 800bb72:	2300      	movs	r3, #0
 800bb74:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bb7c:	461a      	mov	r2, r3
 800bb7e:	2300      	movs	r3, #0
 800bb80:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bb88:	461a      	mov	r2, r3
 800bb8a:	2300      	movs	r3, #0
 800bb8c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bb8e:	2300      	movs	r3, #0
 800bb90:	613b      	str	r3, [r7, #16]
 800bb92:	e043      	b.n	800bc1c <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800bb94:	693b      	ldr	r3, [r7, #16]
 800bb96:	015a      	lsls	r2, r3, #5
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	4413      	add	r3, r2
 800bb9c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800bba6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800bbaa:	d118      	bne.n	800bbde <USB_DevInit+0x156>
    {
      if (i == 0U)
 800bbac:	693b      	ldr	r3, [r7, #16]
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d10a      	bne.n	800bbc8 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800bbb2:	693b      	ldr	r3, [r7, #16]
 800bbb4:	015a      	lsls	r2, r3, #5
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	4413      	add	r3, r2
 800bbba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bbbe:	461a      	mov	r2, r3
 800bbc0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800bbc4:	6013      	str	r3, [r2, #0]
 800bbc6:	e013      	b.n	800bbf0 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800bbc8:	693b      	ldr	r3, [r7, #16]
 800bbca:	015a      	lsls	r2, r3, #5
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	4413      	add	r3, r2
 800bbd0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bbd4:	461a      	mov	r2, r3
 800bbd6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800bbda:	6013      	str	r3, [r2, #0]
 800bbdc:	e008      	b.n	800bbf0 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800bbde:	693b      	ldr	r3, [r7, #16]
 800bbe0:	015a      	lsls	r2, r3, #5
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	4413      	add	r3, r2
 800bbe6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bbea:	461a      	mov	r2, r3
 800bbec:	2300      	movs	r3, #0
 800bbee:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800bbf0:	693b      	ldr	r3, [r7, #16]
 800bbf2:	015a      	lsls	r2, r3, #5
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	4413      	add	r3, r2
 800bbf8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bbfc:	461a      	mov	r2, r3
 800bbfe:	2300      	movs	r3, #0
 800bc00:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800bc02:	693b      	ldr	r3, [r7, #16]
 800bc04:	015a      	lsls	r2, r3, #5
 800bc06:	68fb      	ldr	r3, [r7, #12]
 800bc08:	4413      	add	r3, r2
 800bc0a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bc0e:	461a      	mov	r2, r3
 800bc10:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800bc14:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bc16:	693b      	ldr	r3, [r7, #16]
 800bc18:	3301      	adds	r3, #1
 800bc1a:	613b      	str	r3, [r7, #16]
 800bc1c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800bc20:	461a      	mov	r2, r3
 800bc22:	693b      	ldr	r3, [r7, #16]
 800bc24:	4293      	cmp	r3, r2
 800bc26:	d3b5      	bcc.n	800bb94 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bc28:	2300      	movs	r3, #0
 800bc2a:	613b      	str	r3, [r7, #16]
 800bc2c:	e043      	b.n	800bcb6 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800bc2e:	693b      	ldr	r3, [r7, #16]
 800bc30:	015a      	lsls	r2, r3, #5
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	4413      	add	r3, r2
 800bc36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800bc40:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800bc44:	d118      	bne.n	800bc78 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800bc46:	693b      	ldr	r3, [r7, #16]
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d10a      	bne.n	800bc62 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800bc4c:	693b      	ldr	r3, [r7, #16]
 800bc4e:	015a      	lsls	r2, r3, #5
 800bc50:	68fb      	ldr	r3, [r7, #12]
 800bc52:	4413      	add	r3, r2
 800bc54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bc58:	461a      	mov	r2, r3
 800bc5a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800bc5e:	6013      	str	r3, [r2, #0]
 800bc60:	e013      	b.n	800bc8a <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800bc62:	693b      	ldr	r3, [r7, #16]
 800bc64:	015a      	lsls	r2, r3, #5
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	4413      	add	r3, r2
 800bc6a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bc6e:	461a      	mov	r2, r3
 800bc70:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800bc74:	6013      	str	r3, [r2, #0]
 800bc76:	e008      	b.n	800bc8a <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800bc78:	693b      	ldr	r3, [r7, #16]
 800bc7a:	015a      	lsls	r2, r3, #5
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	4413      	add	r3, r2
 800bc80:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bc84:	461a      	mov	r2, r3
 800bc86:	2300      	movs	r3, #0
 800bc88:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800bc8a:	693b      	ldr	r3, [r7, #16]
 800bc8c:	015a      	lsls	r2, r3, #5
 800bc8e:	68fb      	ldr	r3, [r7, #12]
 800bc90:	4413      	add	r3, r2
 800bc92:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bc96:	461a      	mov	r2, r3
 800bc98:	2300      	movs	r3, #0
 800bc9a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800bc9c:	693b      	ldr	r3, [r7, #16]
 800bc9e:	015a      	lsls	r2, r3, #5
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	4413      	add	r3, r2
 800bca4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bca8:	461a      	mov	r2, r3
 800bcaa:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800bcae:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bcb0:	693b      	ldr	r3, [r7, #16]
 800bcb2:	3301      	adds	r3, #1
 800bcb4:	613b      	str	r3, [r7, #16]
 800bcb6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800bcba:	461a      	mov	r2, r3
 800bcbc:	693b      	ldr	r3, [r7, #16]
 800bcbe:	4293      	cmp	r3, r2
 800bcc0:	d3b5      	bcc.n	800bc2e <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bcc8:	691b      	ldr	r3, [r3, #16]
 800bcca:	68fa      	ldr	r2, [r7, #12]
 800bccc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800bcd0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800bcd4:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	2200      	movs	r2, #0
 800bcda:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800bce2:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800bce4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d105      	bne.n	800bcf8 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	699b      	ldr	r3, [r3, #24]
 800bcf0:	f043 0210 	orr.w	r2, r3, #16
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	699a      	ldr	r2, [r3, #24]
 800bcfc:	4b0f      	ldr	r3, [pc, #60]	@ (800bd3c <USB_DevInit+0x2b4>)
 800bcfe:	4313      	orrs	r3, r2
 800bd00:	687a      	ldr	r2, [r7, #4]
 800bd02:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800bd04:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d005      	beq.n	800bd18 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	699b      	ldr	r3, [r3, #24]
 800bd10:	f043 0208 	orr.w	r2, r3, #8
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800bd18:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800bd1c:	2b01      	cmp	r3, #1
 800bd1e:	d105      	bne.n	800bd2c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	699a      	ldr	r2, [r3, #24]
 800bd24:	4b06      	ldr	r3, [pc, #24]	@ (800bd40 <USB_DevInit+0x2b8>)
 800bd26:	4313      	orrs	r3, r2
 800bd28:	687a      	ldr	r2, [r7, #4]
 800bd2a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800bd2c:	7dfb      	ldrb	r3, [r7, #23]
}
 800bd2e:	4618      	mov	r0, r3
 800bd30:	3718      	adds	r7, #24
 800bd32:	46bd      	mov	sp, r7
 800bd34:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800bd38:	b004      	add	sp, #16
 800bd3a:	4770      	bx	lr
 800bd3c:	803c3800 	.word	0x803c3800
 800bd40:	40000004 	.word	0x40000004

0800bd44 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800bd44:	b480      	push	{r7}
 800bd46:	b085      	sub	sp, #20
 800bd48:	af00      	add	r7, sp, #0
 800bd4a:	6078      	str	r0, [r7, #4]
 800bd4c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800bd4e:	2300      	movs	r3, #0
 800bd50:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800bd52:	68fb      	ldr	r3, [r7, #12]
 800bd54:	3301      	adds	r3, #1
 800bd56:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800bd5e:	d901      	bls.n	800bd64 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800bd60:	2303      	movs	r3, #3
 800bd62:	e01b      	b.n	800bd9c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	691b      	ldr	r3, [r3, #16]
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	daf2      	bge.n	800bd52 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800bd6c:	2300      	movs	r3, #0
 800bd6e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800bd70:	683b      	ldr	r3, [r7, #0]
 800bd72:	019b      	lsls	r3, r3, #6
 800bd74:	f043 0220 	orr.w	r2, r3, #32
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800bd7c:	68fb      	ldr	r3, [r7, #12]
 800bd7e:	3301      	adds	r3, #1
 800bd80:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800bd82:	68fb      	ldr	r3, [r7, #12]
 800bd84:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800bd88:	d901      	bls.n	800bd8e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800bd8a:	2303      	movs	r3, #3
 800bd8c:	e006      	b.n	800bd9c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	691b      	ldr	r3, [r3, #16]
 800bd92:	f003 0320 	and.w	r3, r3, #32
 800bd96:	2b20      	cmp	r3, #32
 800bd98:	d0f0      	beq.n	800bd7c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800bd9a:	2300      	movs	r3, #0
}
 800bd9c:	4618      	mov	r0, r3
 800bd9e:	3714      	adds	r7, #20
 800bda0:	46bd      	mov	sp, r7
 800bda2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bda6:	4770      	bx	lr

0800bda8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800bda8:	b480      	push	{r7}
 800bdaa:	b085      	sub	sp, #20
 800bdac:	af00      	add	r7, sp, #0
 800bdae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800bdb0:	2300      	movs	r3, #0
 800bdb2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	3301      	adds	r3, #1
 800bdb8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800bdc0:	d901      	bls.n	800bdc6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800bdc2:	2303      	movs	r3, #3
 800bdc4:	e018      	b.n	800bdf8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	691b      	ldr	r3, [r3, #16]
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	daf2      	bge.n	800bdb4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800bdce:	2300      	movs	r3, #0
 800bdd0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	2210      	movs	r2, #16
 800bdd6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	3301      	adds	r3, #1
 800bddc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800bde4:	d901      	bls.n	800bdea <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800bde6:	2303      	movs	r3, #3
 800bde8:	e006      	b.n	800bdf8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	691b      	ldr	r3, [r3, #16]
 800bdee:	f003 0310 	and.w	r3, r3, #16
 800bdf2:	2b10      	cmp	r3, #16
 800bdf4:	d0f0      	beq.n	800bdd8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800bdf6:	2300      	movs	r3, #0
}
 800bdf8:	4618      	mov	r0, r3
 800bdfa:	3714      	adds	r7, #20
 800bdfc:	46bd      	mov	sp, r7
 800bdfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be02:	4770      	bx	lr

0800be04 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800be04:	b480      	push	{r7}
 800be06:	b085      	sub	sp, #20
 800be08:	af00      	add	r7, sp, #0
 800be0a:	6078      	str	r0, [r7, #4]
 800be0c:	460b      	mov	r3, r1
 800be0e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800be14:	68fb      	ldr	r3, [r7, #12]
 800be16:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800be1a:	681a      	ldr	r2, [r3, #0]
 800be1c:	78fb      	ldrb	r3, [r7, #3]
 800be1e:	68f9      	ldr	r1, [r7, #12]
 800be20:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800be24:	4313      	orrs	r3, r2
 800be26:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800be28:	2300      	movs	r3, #0
}
 800be2a:	4618      	mov	r0, r3
 800be2c:	3714      	adds	r7, #20
 800be2e:	46bd      	mov	sp, r7
 800be30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be34:	4770      	bx	lr

0800be36 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800be36:	b480      	push	{r7}
 800be38:	b087      	sub	sp, #28
 800be3a:	af00      	add	r7, sp, #0
 800be3c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800be42:	693b      	ldr	r3, [r7, #16]
 800be44:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800be48:	689b      	ldr	r3, [r3, #8]
 800be4a:	f003 0306 	and.w	r3, r3, #6
 800be4e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800be50:	68fb      	ldr	r3, [r7, #12]
 800be52:	2b00      	cmp	r3, #0
 800be54:	d102      	bne.n	800be5c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800be56:	2300      	movs	r3, #0
 800be58:	75fb      	strb	r3, [r7, #23]
 800be5a:	e00a      	b.n	800be72 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800be5c:	68fb      	ldr	r3, [r7, #12]
 800be5e:	2b02      	cmp	r3, #2
 800be60:	d002      	beq.n	800be68 <USB_GetDevSpeed+0x32>
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	2b06      	cmp	r3, #6
 800be66:	d102      	bne.n	800be6e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800be68:	2302      	movs	r3, #2
 800be6a:	75fb      	strb	r3, [r7, #23]
 800be6c:	e001      	b.n	800be72 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800be6e:	230f      	movs	r3, #15
 800be70:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800be72:	7dfb      	ldrb	r3, [r7, #23]
}
 800be74:	4618      	mov	r0, r3
 800be76:	371c      	adds	r7, #28
 800be78:	46bd      	mov	sp, r7
 800be7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be7e:	4770      	bx	lr

0800be80 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800be80:	b480      	push	{r7}
 800be82:	b085      	sub	sp, #20
 800be84:	af00      	add	r7, sp, #0
 800be86:	6078      	str	r0, [r7, #4]
 800be88:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800be8e:	683b      	ldr	r3, [r7, #0]
 800be90:	781b      	ldrb	r3, [r3, #0]
 800be92:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800be94:	683b      	ldr	r3, [r7, #0]
 800be96:	785b      	ldrb	r3, [r3, #1]
 800be98:	2b01      	cmp	r3, #1
 800be9a:	d139      	bne.n	800bf10 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800be9c:	68fb      	ldr	r3, [r7, #12]
 800be9e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bea2:	69da      	ldr	r2, [r3, #28]
 800bea4:	683b      	ldr	r3, [r7, #0]
 800bea6:	781b      	ldrb	r3, [r3, #0]
 800bea8:	f003 030f 	and.w	r3, r3, #15
 800beac:	2101      	movs	r1, #1
 800beae:	fa01 f303 	lsl.w	r3, r1, r3
 800beb2:	b29b      	uxth	r3, r3
 800beb4:	68f9      	ldr	r1, [r7, #12]
 800beb6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800beba:	4313      	orrs	r3, r2
 800bebc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800bebe:	68bb      	ldr	r3, [r7, #8]
 800bec0:	015a      	lsls	r2, r3, #5
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	4413      	add	r3, r2
 800bec6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d153      	bne.n	800bf7c <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800bed4:	68bb      	ldr	r3, [r7, #8]
 800bed6:	015a      	lsls	r2, r3, #5
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	4413      	add	r3, r2
 800bedc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bee0:	681a      	ldr	r2, [r3, #0]
 800bee2:	683b      	ldr	r3, [r7, #0]
 800bee4:	689b      	ldr	r3, [r3, #8]
 800bee6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800beea:	683b      	ldr	r3, [r7, #0]
 800beec:	791b      	ldrb	r3, [r3, #4]
 800beee:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800bef0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800bef2:	68bb      	ldr	r3, [r7, #8]
 800bef4:	059b      	lsls	r3, r3, #22
 800bef6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800bef8:	431a      	orrs	r2, r3
 800befa:	68bb      	ldr	r3, [r7, #8]
 800befc:	0159      	lsls	r1, r3, #5
 800befe:	68fb      	ldr	r3, [r7, #12]
 800bf00:	440b      	add	r3, r1
 800bf02:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bf06:	4619      	mov	r1, r3
 800bf08:	4b20      	ldr	r3, [pc, #128]	@ (800bf8c <USB_ActivateEndpoint+0x10c>)
 800bf0a:	4313      	orrs	r3, r2
 800bf0c:	600b      	str	r3, [r1, #0]
 800bf0e:	e035      	b.n	800bf7c <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800bf10:	68fb      	ldr	r3, [r7, #12]
 800bf12:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bf16:	69da      	ldr	r2, [r3, #28]
 800bf18:	683b      	ldr	r3, [r7, #0]
 800bf1a:	781b      	ldrb	r3, [r3, #0]
 800bf1c:	f003 030f 	and.w	r3, r3, #15
 800bf20:	2101      	movs	r1, #1
 800bf22:	fa01 f303 	lsl.w	r3, r1, r3
 800bf26:	041b      	lsls	r3, r3, #16
 800bf28:	68f9      	ldr	r1, [r7, #12]
 800bf2a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800bf2e:	4313      	orrs	r3, r2
 800bf30:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800bf32:	68bb      	ldr	r3, [r7, #8]
 800bf34:	015a      	lsls	r2, r3, #5
 800bf36:	68fb      	ldr	r3, [r7, #12]
 800bf38:	4413      	add	r3, r2
 800bf3a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d119      	bne.n	800bf7c <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800bf48:	68bb      	ldr	r3, [r7, #8]
 800bf4a:	015a      	lsls	r2, r3, #5
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	4413      	add	r3, r2
 800bf50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bf54:	681a      	ldr	r2, [r3, #0]
 800bf56:	683b      	ldr	r3, [r7, #0]
 800bf58:	689b      	ldr	r3, [r3, #8]
 800bf5a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800bf5e:	683b      	ldr	r3, [r7, #0]
 800bf60:	791b      	ldrb	r3, [r3, #4]
 800bf62:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800bf64:	430b      	orrs	r3, r1
 800bf66:	431a      	orrs	r2, r3
 800bf68:	68bb      	ldr	r3, [r7, #8]
 800bf6a:	0159      	lsls	r1, r3, #5
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	440b      	add	r3, r1
 800bf70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bf74:	4619      	mov	r1, r3
 800bf76:	4b05      	ldr	r3, [pc, #20]	@ (800bf8c <USB_ActivateEndpoint+0x10c>)
 800bf78:	4313      	orrs	r3, r2
 800bf7a:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800bf7c:	2300      	movs	r3, #0
}
 800bf7e:	4618      	mov	r0, r3
 800bf80:	3714      	adds	r7, #20
 800bf82:	46bd      	mov	sp, r7
 800bf84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf88:	4770      	bx	lr
 800bf8a:	bf00      	nop
 800bf8c:	10008000 	.word	0x10008000

0800bf90 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800bf90:	b480      	push	{r7}
 800bf92:	b085      	sub	sp, #20
 800bf94:	af00      	add	r7, sp, #0
 800bf96:	6078      	str	r0, [r7, #4]
 800bf98:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800bf9e:	683b      	ldr	r3, [r7, #0]
 800bfa0:	781b      	ldrb	r3, [r3, #0]
 800bfa2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800bfa4:	683b      	ldr	r3, [r7, #0]
 800bfa6:	785b      	ldrb	r3, [r3, #1]
 800bfa8:	2b01      	cmp	r3, #1
 800bfaa:	d161      	bne.n	800c070 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800bfac:	68bb      	ldr	r3, [r7, #8]
 800bfae:	015a      	lsls	r2, r3, #5
 800bfb0:	68fb      	ldr	r3, [r7, #12]
 800bfb2:	4413      	add	r3, r2
 800bfb4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800bfbe:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800bfc2:	d11f      	bne.n	800c004 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800bfc4:	68bb      	ldr	r3, [r7, #8]
 800bfc6:	015a      	lsls	r2, r3, #5
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	4413      	add	r3, r2
 800bfcc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	68ba      	ldr	r2, [r7, #8]
 800bfd4:	0151      	lsls	r1, r2, #5
 800bfd6:	68fa      	ldr	r2, [r7, #12]
 800bfd8:	440a      	add	r2, r1
 800bfda:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800bfde:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800bfe2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800bfe4:	68bb      	ldr	r3, [r7, #8]
 800bfe6:	015a      	lsls	r2, r3, #5
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	4413      	add	r3, r2
 800bfec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	68ba      	ldr	r2, [r7, #8]
 800bff4:	0151      	lsls	r1, r2, #5
 800bff6:	68fa      	ldr	r2, [r7, #12]
 800bff8:	440a      	add	r2, r1
 800bffa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800bffe:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800c002:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c00a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c00c:	683b      	ldr	r3, [r7, #0]
 800c00e:	781b      	ldrb	r3, [r3, #0]
 800c010:	f003 030f 	and.w	r3, r3, #15
 800c014:	2101      	movs	r1, #1
 800c016:	fa01 f303 	lsl.w	r3, r1, r3
 800c01a:	b29b      	uxth	r3, r3
 800c01c:	43db      	mvns	r3, r3
 800c01e:	68f9      	ldr	r1, [r7, #12]
 800c020:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800c024:	4013      	ands	r3, r2
 800c026:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800c028:	68fb      	ldr	r3, [r7, #12]
 800c02a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c02e:	69da      	ldr	r2, [r3, #28]
 800c030:	683b      	ldr	r3, [r7, #0]
 800c032:	781b      	ldrb	r3, [r3, #0]
 800c034:	f003 030f 	and.w	r3, r3, #15
 800c038:	2101      	movs	r1, #1
 800c03a:	fa01 f303 	lsl.w	r3, r1, r3
 800c03e:	b29b      	uxth	r3, r3
 800c040:	43db      	mvns	r3, r3
 800c042:	68f9      	ldr	r1, [r7, #12]
 800c044:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800c048:	4013      	ands	r3, r2
 800c04a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800c04c:	68bb      	ldr	r3, [r7, #8]
 800c04e:	015a      	lsls	r2, r3, #5
 800c050:	68fb      	ldr	r3, [r7, #12]
 800c052:	4413      	add	r3, r2
 800c054:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c058:	681a      	ldr	r2, [r3, #0]
 800c05a:	68bb      	ldr	r3, [r7, #8]
 800c05c:	0159      	lsls	r1, r3, #5
 800c05e:	68fb      	ldr	r3, [r7, #12]
 800c060:	440b      	add	r3, r1
 800c062:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c066:	4619      	mov	r1, r3
 800c068:	4b35      	ldr	r3, [pc, #212]	@ (800c140 <USB_DeactivateEndpoint+0x1b0>)
 800c06a:	4013      	ands	r3, r2
 800c06c:	600b      	str	r3, [r1, #0]
 800c06e:	e060      	b.n	800c132 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c070:	68bb      	ldr	r3, [r7, #8]
 800c072:	015a      	lsls	r2, r3, #5
 800c074:	68fb      	ldr	r3, [r7, #12]
 800c076:	4413      	add	r3, r2
 800c078:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800c082:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c086:	d11f      	bne.n	800c0c8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800c088:	68bb      	ldr	r3, [r7, #8]
 800c08a:	015a      	lsls	r2, r3, #5
 800c08c:	68fb      	ldr	r3, [r7, #12]
 800c08e:	4413      	add	r3, r2
 800c090:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	68ba      	ldr	r2, [r7, #8]
 800c098:	0151      	lsls	r1, r2, #5
 800c09a:	68fa      	ldr	r2, [r7, #12]
 800c09c:	440a      	add	r2, r1
 800c09e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c0a2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800c0a6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800c0a8:	68bb      	ldr	r3, [r7, #8]
 800c0aa:	015a      	lsls	r2, r3, #5
 800c0ac:	68fb      	ldr	r3, [r7, #12]
 800c0ae:	4413      	add	r3, r2
 800c0b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	68ba      	ldr	r2, [r7, #8]
 800c0b8:	0151      	lsls	r1, r2, #5
 800c0ba:	68fa      	ldr	r2, [r7, #12]
 800c0bc:	440a      	add	r2, r1
 800c0be:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c0c2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800c0c6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800c0c8:	68fb      	ldr	r3, [r7, #12]
 800c0ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c0ce:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c0d0:	683b      	ldr	r3, [r7, #0]
 800c0d2:	781b      	ldrb	r3, [r3, #0]
 800c0d4:	f003 030f 	and.w	r3, r3, #15
 800c0d8:	2101      	movs	r1, #1
 800c0da:	fa01 f303 	lsl.w	r3, r1, r3
 800c0de:	041b      	lsls	r3, r3, #16
 800c0e0:	43db      	mvns	r3, r3
 800c0e2:	68f9      	ldr	r1, [r7, #12]
 800c0e4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800c0e8:	4013      	ands	r3, r2
 800c0ea:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800c0ec:	68fb      	ldr	r3, [r7, #12]
 800c0ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c0f2:	69da      	ldr	r2, [r3, #28]
 800c0f4:	683b      	ldr	r3, [r7, #0]
 800c0f6:	781b      	ldrb	r3, [r3, #0]
 800c0f8:	f003 030f 	and.w	r3, r3, #15
 800c0fc:	2101      	movs	r1, #1
 800c0fe:	fa01 f303 	lsl.w	r3, r1, r3
 800c102:	041b      	lsls	r3, r3, #16
 800c104:	43db      	mvns	r3, r3
 800c106:	68f9      	ldr	r1, [r7, #12]
 800c108:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800c10c:	4013      	ands	r3, r2
 800c10e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800c110:	68bb      	ldr	r3, [r7, #8]
 800c112:	015a      	lsls	r2, r3, #5
 800c114:	68fb      	ldr	r3, [r7, #12]
 800c116:	4413      	add	r3, r2
 800c118:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c11c:	681a      	ldr	r2, [r3, #0]
 800c11e:	68bb      	ldr	r3, [r7, #8]
 800c120:	0159      	lsls	r1, r3, #5
 800c122:	68fb      	ldr	r3, [r7, #12]
 800c124:	440b      	add	r3, r1
 800c126:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c12a:	4619      	mov	r1, r3
 800c12c:	4b05      	ldr	r3, [pc, #20]	@ (800c144 <USB_DeactivateEndpoint+0x1b4>)
 800c12e:	4013      	ands	r3, r2
 800c130:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800c132:	2300      	movs	r3, #0
}
 800c134:	4618      	mov	r0, r3
 800c136:	3714      	adds	r7, #20
 800c138:	46bd      	mov	sp, r7
 800c13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c13e:	4770      	bx	lr
 800c140:	ec337800 	.word	0xec337800
 800c144:	eff37800 	.word	0xeff37800

0800c148 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800c148:	b580      	push	{r7, lr}
 800c14a:	b08a      	sub	sp, #40	@ 0x28
 800c14c:	af02      	add	r7, sp, #8
 800c14e:	60f8      	str	r0, [r7, #12]
 800c150:	60b9      	str	r1, [r7, #8]
 800c152:	4613      	mov	r3, r2
 800c154:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c156:	68fb      	ldr	r3, [r7, #12]
 800c158:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800c15a:	68bb      	ldr	r3, [r7, #8]
 800c15c:	781b      	ldrb	r3, [r3, #0]
 800c15e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c160:	68bb      	ldr	r3, [r7, #8]
 800c162:	785b      	ldrb	r3, [r3, #1]
 800c164:	2b01      	cmp	r3, #1
 800c166:	f040 8181 	bne.w	800c46c <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800c16a:	68bb      	ldr	r3, [r7, #8]
 800c16c:	691b      	ldr	r3, [r3, #16]
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d132      	bne.n	800c1d8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c172:	69bb      	ldr	r3, [r7, #24]
 800c174:	015a      	lsls	r2, r3, #5
 800c176:	69fb      	ldr	r3, [r7, #28]
 800c178:	4413      	add	r3, r2
 800c17a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c17e:	691a      	ldr	r2, [r3, #16]
 800c180:	69bb      	ldr	r3, [r7, #24]
 800c182:	0159      	lsls	r1, r3, #5
 800c184:	69fb      	ldr	r3, [r7, #28]
 800c186:	440b      	add	r3, r1
 800c188:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c18c:	4619      	mov	r1, r3
 800c18e:	4ba5      	ldr	r3, [pc, #660]	@ (800c424 <USB_EPStartXfer+0x2dc>)
 800c190:	4013      	ands	r3, r2
 800c192:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c194:	69bb      	ldr	r3, [r7, #24]
 800c196:	015a      	lsls	r2, r3, #5
 800c198:	69fb      	ldr	r3, [r7, #28]
 800c19a:	4413      	add	r3, r2
 800c19c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c1a0:	691b      	ldr	r3, [r3, #16]
 800c1a2:	69ba      	ldr	r2, [r7, #24]
 800c1a4:	0151      	lsls	r1, r2, #5
 800c1a6:	69fa      	ldr	r2, [r7, #28]
 800c1a8:	440a      	add	r2, r1
 800c1aa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c1ae:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800c1b2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c1b4:	69bb      	ldr	r3, [r7, #24]
 800c1b6:	015a      	lsls	r2, r3, #5
 800c1b8:	69fb      	ldr	r3, [r7, #28]
 800c1ba:	4413      	add	r3, r2
 800c1bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c1c0:	691a      	ldr	r2, [r3, #16]
 800c1c2:	69bb      	ldr	r3, [r7, #24]
 800c1c4:	0159      	lsls	r1, r3, #5
 800c1c6:	69fb      	ldr	r3, [r7, #28]
 800c1c8:	440b      	add	r3, r1
 800c1ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c1ce:	4619      	mov	r1, r3
 800c1d0:	4b95      	ldr	r3, [pc, #596]	@ (800c428 <USB_EPStartXfer+0x2e0>)
 800c1d2:	4013      	ands	r3, r2
 800c1d4:	610b      	str	r3, [r1, #16]
 800c1d6:	e092      	b.n	800c2fe <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c1d8:	69bb      	ldr	r3, [r7, #24]
 800c1da:	015a      	lsls	r2, r3, #5
 800c1dc:	69fb      	ldr	r3, [r7, #28]
 800c1de:	4413      	add	r3, r2
 800c1e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c1e4:	691a      	ldr	r2, [r3, #16]
 800c1e6:	69bb      	ldr	r3, [r7, #24]
 800c1e8:	0159      	lsls	r1, r3, #5
 800c1ea:	69fb      	ldr	r3, [r7, #28]
 800c1ec:	440b      	add	r3, r1
 800c1ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c1f2:	4619      	mov	r1, r3
 800c1f4:	4b8c      	ldr	r3, [pc, #560]	@ (800c428 <USB_EPStartXfer+0x2e0>)
 800c1f6:	4013      	ands	r3, r2
 800c1f8:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c1fa:	69bb      	ldr	r3, [r7, #24]
 800c1fc:	015a      	lsls	r2, r3, #5
 800c1fe:	69fb      	ldr	r3, [r7, #28]
 800c200:	4413      	add	r3, r2
 800c202:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c206:	691a      	ldr	r2, [r3, #16]
 800c208:	69bb      	ldr	r3, [r7, #24]
 800c20a:	0159      	lsls	r1, r3, #5
 800c20c:	69fb      	ldr	r3, [r7, #28]
 800c20e:	440b      	add	r3, r1
 800c210:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c214:	4619      	mov	r1, r3
 800c216:	4b83      	ldr	r3, [pc, #524]	@ (800c424 <USB_EPStartXfer+0x2dc>)
 800c218:	4013      	ands	r3, r2
 800c21a:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 800c21c:	69bb      	ldr	r3, [r7, #24]
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d11a      	bne.n	800c258 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800c222:	68bb      	ldr	r3, [r7, #8]
 800c224:	691a      	ldr	r2, [r3, #16]
 800c226:	68bb      	ldr	r3, [r7, #8]
 800c228:	689b      	ldr	r3, [r3, #8]
 800c22a:	429a      	cmp	r2, r3
 800c22c:	d903      	bls.n	800c236 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800c22e:	68bb      	ldr	r3, [r7, #8]
 800c230:	689a      	ldr	r2, [r3, #8]
 800c232:	68bb      	ldr	r3, [r7, #8]
 800c234:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c236:	69bb      	ldr	r3, [r7, #24]
 800c238:	015a      	lsls	r2, r3, #5
 800c23a:	69fb      	ldr	r3, [r7, #28]
 800c23c:	4413      	add	r3, r2
 800c23e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c242:	691b      	ldr	r3, [r3, #16]
 800c244:	69ba      	ldr	r2, [r7, #24]
 800c246:	0151      	lsls	r1, r2, #5
 800c248:	69fa      	ldr	r2, [r7, #28]
 800c24a:	440a      	add	r2, r1
 800c24c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c250:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800c254:	6113      	str	r3, [r2, #16]
 800c256:	e01b      	b.n	800c290 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800c258:	69bb      	ldr	r3, [r7, #24]
 800c25a:	015a      	lsls	r2, r3, #5
 800c25c:	69fb      	ldr	r3, [r7, #28]
 800c25e:	4413      	add	r3, r2
 800c260:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c264:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800c266:	68bb      	ldr	r3, [r7, #8]
 800c268:	6919      	ldr	r1, [r3, #16]
 800c26a:	68bb      	ldr	r3, [r7, #8]
 800c26c:	689b      	ldr	r3, [r3, #8]
 800c26e:	440b      	add	r3, r1
 800c270:	1e59      	subs	r1, r3, #1
 800c272:	68bb      	ldr	r3, [r7, #8]
 800c274:	689b      	ldr	r3, [r3, #8]
 800c276:	fbb1 f3f3 	udiv	r3, r1, r3
 800c27a:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800c27c:	4b6b      	ldr	r3, [pc, #428]	@ (800c42c <USB_EPStartXfer+0x2e4>)
 800c27e:	400b      	ands	r3, r1
 800c280:	69b9      	ldr	r1, [r7, #24]
 800c282:	0148      	lsls	r0, r1, #5
 800c284:	69f9      	ldr	r1, [r7, #28]
 800c286:	4401      	add	r1, r0
 800c288:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800c28c:	4313      	orrs	r3, r2
 800c28e:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800c290:	69bb      	ldr	r3, [r7, #24]
 800c292:	015a      	lsls	r2, r3, #5
 800c294:	69fb      	ldr	r3, [r7, #28]
 800c296:	4413      	add	r3, r2
 800c298:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c29c:	691a      	ldr	r2, [r3, #16]
 800c29e:	68bb      	ldr	r3, [r7, #8]
 800c2a0:	691b      	ldr	r3, [r3, #16]
 800c2a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c2a6:	69b9      	ldr	r1, [r7, #24]
 800c2a8:	0148      	lsls	r0, r1, #5
 800c2aa:	69f9      	ldr	r1, [r7, #28]
 800c2ac:	4401      	add	r1, r0
 800c2ae:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800c2b2:	4313      	orrs	r3, r2
 800c2b4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800c2b6:	68bb      	ldr	r3, [r7, #8]
 800c2b8:	791b      	ldrb	r3, [r3, #4]
 800c2ba:	2b01      	cmp	r3, #1
 800c2bc:	d11f      	bne.n	800c2fe <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800c2be:	69bb      	ldr	r3, [r7, #24]
 800c2c0:	015a      	lsls	r2, r3, #5
 800c2c2:	69fb      	ldr	r3, [r7, #28]
 800c2c4:	4413      	add	r3, r2
 800c2c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c2ca:	691b      	ldr	r3, [r3, #16]
 800c2cc:	69ba      	ldr	r2, [r7, #24]
 800c2ce:	0151      	lsls	r1, r2, #5
 800c2d0:	69fa      	ldr	r2, [r7, #28]
 800c2d2:	440a      	add	r2, r1
 800c2d4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c2d8:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800c2dc:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800c2de:	69bb      	ldr	r3, [r7, #24]
 800c2e0:	015a      	lsls	r2, r3, #5
 800c2e2:	69fb      	ldr	r3, [r7, #28]
 800c2e4:	4413      	add	r3, r2
 800c2e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c2ea:	691b      	ldr	r3, [r3, #16]
 800c2ec:	69ba      	ldr	r2, [r7, #24]
 800c2ee:	0151      	lsls	r1, r2, #5
 800c2f0:	69fa      	ldr	r2, [r7, #28]
 800c2f2:	440a      	add	r2, r1
 800c2f4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c2f8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800c2fc:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800c2fe:	79fb      	ldrb	r3, [r7, #7]
 800c300:	2b01      	cmp	r3, #1
 800c302:	d14b      	bne.n	800c39c <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800c304:	68bb      	ldr	r3, [r7, #8]
 800c306:	69db      	ldr	r3, [r3, #28]
 800c308:	2b00      	cmp	r3, #0
 800c30a:	d009      	beq.n	800c320 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800c30c:	69bb      	ldr	r3, [r7, #24]
 800c30e:	015a      	lsls	r2, r3, #5
 800c310:	69fb      	ldr	r3, [r7, #28]
 800c312:	4413      	add	r3, r2
 800c314:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c318:	461a      	mov	r2, r3
 800c31a:	68bb      	ldr	r3, [r7, #8]
 800c31c:	69db      	ldr	r3, [r3, #28]
 800c31e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800c320:	68bb      	ldr	r3, [r7, #8]
 800c322:	791b      	ldrb	r3, [r3, #4]
 800c324:	2b01      	cmp	r3, #1
 800c326:	d128      	bne.n	800c37a <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c328:	69fb      	ldr	r3, [r7, #28]
 800c32a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c32e:	689b      	ldr	r3, [r3, #8]
 800c330:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c334:	2b00      	cmp	r3, #0
 800c336:	d110      	bne.n	800c35a <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800c338:	69bb      	ldr	r3, [r7, #24]
 800c33a:	015a      	lsls	r2, r3, #5
 800c33c:	69fb      	ldr	r3, [r7, #28]
 800c33e:	4413      	add	r3, r2
 800c340:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	69ba      	ldr	r2, [r7, #24]
 800c348:	0151      	lsls	r1, r2, #5
 800c34a:	69fa      	ldr	r2, [r7, #28]
 800c34c:	440a      	add	r2, r1
 800c34e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c352:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800c356:	6013      	str	r3, [r2, #0]
 800c358:	e00f      	b.n	800c37a <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800c35a:	69bb      	ldr	r3, [r7, #24]
 800c35c:	015a      	lsls	r2, r3, #5
 800c35e:	69fb      	ldr	r3, [r7, #28]
 800c360:	4413      	add	r3, r2
 800c362:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	69ba      	ldr	r2, [r7, #24]
 800c36a:	0151      	lsls	r1, r2, #5
 800c36c:	69fa      	ldr	r2, [r7, #28]
 800c36e:	440a      	add	r2, r1
 800c370:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c374:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c378:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c37a:	69bb      	ldr	r3, [r7, #24]
 800c37c:	015a      	lsls	r2, r3, #5
 800c37e:	69fb      	ldr	r3, [r7, #28]
 800c380:	4413      	add	r3, r2
 800c382:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	69ba      	ldr	r2, [r7, #24]
 800c38a:	0151      	lsls	r1, r2, #5
 800c38c:	69fa      	ldr	r2, [r7, #28]
 800c38e:	440a      	add	r2, r1
 800c390:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c394:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800c398:	6013      	str	r3, [r2, #0]
 800c39a:	e16a      	b.n	800c672 <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c39c:	69bb      	ldr	r3, [r7, #24]
 800c39e:	015a      	lsls	r2, r3, #5
 800c3a0:	69fb      	ldr	r3, [r7, #28]
 800c3a2:	4413      	add	r3, r2
 800c3a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	69ba      	ldr	r2, [r7, #24]
 800c3ac:	0151      	lsls	r1, r2, #5
 800c3ae:	69fa      	ldr	r2, [r7, #28]
 800c3b0:	440a      	add	r2, r1
 800c3b2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c3b6:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800c3ba:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800c3bc:	68bb      	ldr	r3, [r7, #8]
 800c3be:	791b      	ldrb	r3, [r3, #4]
 800c3c0:	2b01      	cmp	r3, #1
 800c3c2:	d015      	beq.n	800c3f0 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800c3c4:	68bb      	ldr	r3, [r7, #8]
 800c3c6:	691b      	ldr	r3, [r3, #16]
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	f000 8152 	beq.w	800c672 <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800c3ce:	69fb      	ldr	r3, [r7, #28]
 800c3d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c3d4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c3d6:	68bb      	ldr	r3, [r7, #8]
 800c3d8:	781b      	ldrb	r3, [r3, #0]
 800c3da:	f003 030f 	and.w	r3, r3, #15
 800c3de:	2101      	movs	r1, #1
 800c3e0:	fa01 f303 	lsl.w	r3, r1, r3
 800c3e4:	69f9      	ldr	r1, [r7, #28]
 800c3e6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800c3ea:	4313      	orrs	r3, r2
 800c3ec:	634b      	str	r3, [r1, #52]	@ 0x34
 800c3ee:	e140      	b.n	800c672 <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c3f0:	69fb      	ldr	r3, [r7, #28]
 800c3f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c3f6:	689b      	ldr	r3, [r3, #8]
 800c3f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d117      	bne.n	800c430 <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800c400:	69bb      	ldr	r3, [r7, #24]
 800c402:	015a      	lsls	r2, r3, #5
 800c404:	69fb      	ldr	r3, [r7, #28]
 800c406:	4413      	add	r3, r2
 800c408:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c40c:	681b      	ldr	r3, [r3, #0]
 800c40e:	69ba      	ldr	r2, [r7, #24]
 800c410:	0151      	lsls	r1, r2, #5
 800c412:	69fa      	ldr	r2, [r7, #28]
 800c414:	440a      	add	r2, r1
 800c416:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c41a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800c41e:	6013      	str	r3, [r2, #0]
 800c420:	e016      	b.n	800c450 <USB_EPStartXfer+0x308>
 800c422:	bf00      	nop
 800c424:	e007ffff 	.word	0xe007ffff
 800c428:	fff80000 	.word	0xfff80000
 800c42c:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800c430:	69bb      	ldr	r3, [r7, #24]
 800c432:	015a      	lsls	r2, r3, #5
 800c434:	69fb      	ldr	r3, [r7, #28]
 800c436:	4413      	add	r3, r2
 800c438:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	69ba      	ldr	r2, [r7, #24]
 800c440:	0151      	lsls	r1, r2, #5
 800c442:	69fa      	ldr	r2, [r7, #28]
 800c444:	440a      	add	r2, r1
 800c446:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c44a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c44e:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800c450:	68bb      	ldr	r3, [r7, #8]
 800c452:	68d9      	ldr	r1, [r3, #12]
 800c454:	68bb      	ldr	r3, [r7, #8]
 800c456:	781a      	ldrb	r2, [r3, #0]
 800c458:	68bb      	ldr	r3, [r7, #8]
 800c45a:	691b      	ldr	r3, [r3, #16]
 800c45c:	b298      	uxth	r0, r3
 800c45e:	79fb      	ldrb	r3, [r7, #7]
 800c460:	9300      	str	r3, [sp, #0]
 800c462:	4603      	mov	r3, r0
 800c464:	68f8      	ldr	r0, [r7, #12]
 800c466:	f000 f9b9 	bl	800c7dc <USB_WritePacket>
 800c46a:	e102      	b.n	800c672 <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800c46c:	69bb      	ldr	r3, [r7, #24]
 800c46e:	015a      	lsls	r2, r3, #5
 800c470:	69fb      	ldr	r3, [r7, #28]
 800c472:	4413      	add	r3, r2
 800c474:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c478:	691a      	ldr	r2, [r3, #16]
 800c47a:	69bb      	ldr	r3, [r7, #24]
 800c47c:	0159      	lsls	r1, r3, #5
 800c47e:	69fb      	ldr	r3, [r7, #28]
 800c480:	440b      	add	r3, r1
 800c482:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c486:	4619      	mov	r1, r3
 800c488:	4b7c      	ldr	r3, [pc, #496]	@ (800c67c <USB_EPStartXfer+0x534>)
 800c48a:	4013      	ands	r3, r2
 800c48c:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800c48e:	69bb      	ldr	r3, [r7, #24]
 800c490:	015a      	lsls	r2, r3, #5
 800c492:	69fb      	ldr	r3, [r7, #28]
 800c494:	4413      	add	r3, r2
 800c496:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c49a:	691a      	ldr	r2, [r3, #16]
 800c49c:	69bb      	ldr	r3, [r7, #24]
 800c49e:	0159      	lsls	r1, r3, #5
 800c4a0:	69fb      	ldr	r3, [r7, #28]
 800c4a2:	440b      	add	r3, r1
 800c4a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c4a8:	4619      	mov	r1, r3
 800c4aa:	4b75      	ldr	r3, [pc, #468]	@ (800c680 <USB_EPStartXfer+0x538>)
 800c4ac:	4013      	ands	r3, r2
 800c4ae:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 800c4b0:	69bb      	ldr	r3, [r7, #24]
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d12f      	bne.n	800c516 <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 800c4b6:	68bb      	ldr	r3, [r7, #8]
 800c4b8:	691b      	ldr	r3, [r3, #16]
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d003      	beq.n	800c4c6 <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 800c4be:	68bb      	ldr	r3, [r7, #8]
 800c4c0:	689a      	ldr	r2, [r3, #8]
 800c4c2:	68bb      	ldr	r3, [r7, #8]
 800c4c4:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800c4c6:	68bb      	ldr	r3, [r7, #8]
 800c4c8:	689a      	ldr	r2, [r3, #8]
 800c4ca:	68bb      	ldr	r3, [r7, #8]
 800c4cc:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800c4ce:	69bb      	ldr	r3, [r7, #24]
 800c4d0:	015a      	lsls	r2, r3, #5
 800c4d2:	69fb      	ldr	r3, [r7, #28]
 800c4d4:	4413      	add	r3, r2
 800c4d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c4da:	691a      	ldr	r2, [r3, #16]
 800c4dc:	68bb      	ldr	r3, [r7, #8]
 800c4de:	6a1b      	ldr	r3, [r3, #32]
 800c4e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c4e4:	69b9      	ldr	r1, [r7, #24]
 800c4e6:	0148      	lsls	r0, r1, #5
 800c4e8:	69f9      	ldr	r1, [r7, #28]
 800c4ea:	4401      	add	r1, r0
 800c4ec:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800c4f0:	4313      	orrs	r3, r2
 800c4f2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c4f4:	69bb      	ldr	r3, [r7, #24]
 800c4f6:	015a      	lsls	r2, r3, #5
 800c4f8:	69fb      	ldr	r3, [r7, #28]
 800c4fa:	4413      	add	r3, r2
 800c4fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c500:	691b      	ldr	r3, [r3, #16]
 800c502:	69ba      	ldr	r2, [r7, #24]
 800c504:	0151      	lsls	r1, r2, #5
 800c506:	69fa      	ldr	r2, [r7, #28]
 800c508:	440a      	add	r2, r1
 800c50a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c50e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800c512:	6113      	str	r3, [r2, #16]
 800c514:	e05f      	b.n	800c5d6 <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 800c516:	68bb      	ldr	r3, [r7, #8]
 800c518:	691b      	ldr	r3, [r3, #16]
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	d123      	bne.n	800c566 <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800c51e:	69bb      	ldr	r3, [r7, #24]
 800c520:	015a      	lsls	r2, r3, #5
 800c522:	69fb      	ldr	r3, [r7, #28]
 800c524:	4413      	add	r3, r2
 800c526:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c52a:	691a      	ldr	r2, [r3, #16]
 800c52c:	68bb      	ldr	r3, [r7, #8]
 800c52e:	689b      	ldr	r3, [r3, #8]
 800c530:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c534:	69b9      	ldr	r1, [r7, #24]
 800c536:	0148      	lsls	r0, r1, #5
 800c538:	69f9      	ldr	r1, [r7, #28]
 800c53a:	4401      	add	r1, r0
 800c53c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800c540:	4313      	orrs	r3, r2
 800c542:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c544:	69bb      	ldr	r3, [r7, #24]
 800c546:	015a      	lsls	r2, r3, #5
 800c548:	69fb      	ldr	r3, [r7, #28]
 800c54a:	4413      	add	r3, r2
 800c54c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c550:	691b      	ldr	r3, [r3, #16]
 800c552:	69ba      	ldr	r2, [r7, #24]
 800c554:	0151      	lsls	r1, r2, #5
 800c556:	69fa      	ldr	r2, [r7, #28]
 800c558:	440a      	add	r2, r1
 800c55a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c55e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800c562:	6113      	str	r3, [r2, #16]
 800c564:	e037      	b.n	800c5d6 <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800c566:	68bb      	ldr	r3, [r7, #8]
 800c568:	691a      	ldr	r2, [r3, #16]
 800c56a:	68bb      	ldr	r3, [r7, #8]
 800c56c:	689b      	ldr	r3, [r3, #8]
 800c56e:	4413      	add	r3, r2
 800c570:	1e5a      	subs	r2, r3, #1
 800c572:	68bb      	ldr	r3, [r7, #8]
 800c574:	689b      	ldr	r3, [r3, #8]
 800c576:	fbb2 f3f3 	udiv	r3, r2, r3
 800c57a:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800c57c:	68bb      	ldr	r3, [r7, #8]
 800c57e:	689b      	ldr	r3, [r3, #8]
 800c580:	8afa      	ldrh	r2, [r7, #22]
 800c582:	fb03 f202 	mul.w	r2, r3, r2
 800c586:	68bb      	ldr	r3, [r7, #8]
 800c588:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800c58a:	69bb      	ldr	r3, [r7, #24]
 800c58c:	015a      	lsls	r2, r3, #5
 800c58e:	69fb      	ldr	r3, [r7, #28]
 800c590:	4413      	add	r3, r2
 800c592:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c596:	691a      	ldr	r2, [r3, #16]
 800c598:	8afb      	ldrh	r3, [r7, #22]
 800c59a:	04d9      	lsls	r1, r3, #19
 800c59c:	4b39      	ldr	r3, [pc, #228]	@ (800c684 <USB_EPStartXfer+0x53c>)
 800c59e:	400b      	ands	r3, r1
 800c5a0:	69b9      	ldr	r1, [r7, #24]
 800c5a2:	0148      	lsls	r0, r1, #5
 800c5a4:	69f9      	ldr	r1, [r7, #28]
 800c5a6:	4401      	add	r1, r0
 800c5a8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800c5ac:	4313      	orrs	r3, r2
 800c5ae:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800c5b0:	69bb      	ldr	r3, [r7, #24]
 800c5b2:	015a      	lsls	r2, r3, #5
 800c5b4:	69fb      	ldr	r3, [r7, #28]
 800c5b6:	4413      	add	r3, r2
 800c5b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c5bc:	691a      	ldr	r2, [r3, #16]
 800c5be:	68bb      	ldr	r3, [r7, #8]
 800c5c0:	6a1b      	ldr	r3, [r3, #32]
 800c5c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c5c6:	69b9      	ldr	r1, [r7, #24]
 800c5c8:	0148      	lsls	r0, r1, #5
 800c5ca:	69f9      	ldr	r1, [r7, #28]
 800c5cc:	4401      	add	r1, r0
 800c5ce:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800c5d2:	4313      	orrs	r3, r2
 800c5d4:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800c5d6:	79fb      	ldrb	r3, [r7, #7]
 800c5d8:	2b01      	cmp	r3, #1
 800c5da:	d10d      	bne.n	800c5f8 <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800c5dc:	68bb      	ldr	r3, [r7, #8]
 800c5de:	68db      	ldr	r3, [r3, #12]
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	d009      	beq.n	800c5f8 <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800c5e4:	68bb      	ldr	r3, [r7, #8]
 800c5e6:	68d9      	ldr	r1, [r3, #12]
 800c5e8:	69bb      	ldr	r3, [r7, #24]
 800c5ea:	015a      	lsls	r2, r3, #5
 800c5ec:	69fb      	ldr	r3, [r7, #28]
 800c5ee:	4413      	add	r3, r2
 800c5f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c5f4:	460a      	mov	r2, r1
 800c5f6:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800c5f8:	68bb      	ldr	r3, [r7, #8]
 800c5fa:	791b      	ldrb	r3, [r3, #4]
 800c5fc:	2b01      	cmp	r3, #1
 800c5fe:	d128      	bne.n	800c652 <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c600:	69fb      	ldr	r3, [r7, #28]
 800c602:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c606:	689b      	ldr	r3, [r3, #8]
 800c608:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d110      	bne.n	800c632 <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800c610:	69bb      	ldr	r3, [r7, #24]
 800c612:	015a      	lsls	r2, r3, #5
 800c614:	69fb      	ldr	r3, [r7, #28]
 800c616:	4413      	add	r3, r2
 800c618:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c61c:	681b      	ldr	r3, [r3, #0]
 800c61e:	69ba      	ldr	r2, [r7, #24]
 800c620:	0151      	lsls	r1, r2, #5
 800c622:	69fa      	ldr	r2, [r7, #28]
 800c624:	440a      	add	r2, r1
 800c626:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c62a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800c62e:	6013      	str	r3, [r2, #0]
 800c630:	e00f      	b.n	800c652 <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800c632:	69bb      	ldr	r3, [r7, #24]
 800c634:	015a      	lsls	r2, r3, #5
 800c636:	69fb      	ldr	r3, [r7, #28]
 800c638:	4413      	add	r3, r2
 800c63a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	69ba      	ldr	r2, [r7, #24]
 800c642:	0151      	lsls	r1, r2, #5
 800c644:	69fa      	ldr	r2, [r7, #28]
 800c646:	440a      	add	r2, r1
 800c648:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c64c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c650:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800c652:	69bb      	ldr	r3, [r7, #24]
 800c654:	015a      	lsls	r2, r3, #5
 800c656:	69fb      	ldr	r3, [r7, #28]
 800c658:	4413      	add	r3, r2
 800c65a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	69ba      	ldr	r2, [r7, #24]
 800c662:	0151      	lsls	r1, r2, #5
 800c664:	69fa      	ldr	r2, [r7, #28]
 800c666:	440a      	add	r2, r1
 800c668:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c66c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800c670:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c672:	2300      	movs	r3, #0
}
 800c674:	4618      	mov	r0, r3
 800c676:	3720      	adds	r7, #32
 800c678:	46bd      	mov	sp, r7
 800c67a:	bd80      	pop	{r7, pc}
 800c67c:	fff80000 	.word	0xfff80000
 800c680:	e007ffff 	.word	0xe007ffff
 800c684:	1ff80000 	.word	0x1ff80000

0800c688 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c688:	b480      	push	{r7}
 800c68a:	b087      	sub	sp, #28
 800c68c:	af00      	add	r7, sp, #0
 800c68e:	6078      	str	r0, [r7, #4]
 800c690:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800c692:	2300      	movs	r3, #0
 800c694:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800c696:	2300      	movs	r3, #0
 800c698:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c69e:	683b      	ldr	r3, [r7, #0]
 800c6a0:	785b      	ldrb	r3, [r3, #1]
 800c6a2:	2b01      	cmp	r3, #1
 800c6a4:	d14a      	bne.n	800c73c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c6a6:	683b      	ldr	r3, [r7, #0]
 800c6a8:	781b      	ldrb	r3, [r3, #0]
 800c6aa:	015a      	lsls	r2, r3, #5
 800c6ac:	693b      	ldr	r3, [r7, #16]
 800c6ae:	4413      	add	r3, r2
 800c6b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800c6ba:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c6be:	f040 8086 	bne.w	800c7ce <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800c6c2:	683b      	ldr	r3, [r7, #0]
 800c6c4:	781b      	ldrb	r3, [r3, #0]
 800c6c6:	015a      	lsls	r2, r3, #5
 800c6c8:	693b      	ldr	r3, [r7, #16]
 800c6ca:	4413      	add	r3, r2
 800c6cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c6d0:	681b      	ldr	r3, [r3, #0]
 800c6d2:	683a      	ldr	r2, [r7, #0]
 800c6d4:	7812      	ldrb	r2, [r2, #0]
 800c6d6:	0151      	lsls	r1, r2, #5
 800c6d8:	693a      	ldr	r2, [r7, #16]
 800c6da:	440a      	add	r2, r1
 800c6dc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c6e0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800c6e4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800c6e6:	683b      	ldr	r3, [r7, #0]
 800c6e8:	781b      	ldrb	r3, [r3, #0]
 800c6ea:	015a      	lsls	r2, r3, #5
 800c6ec:	693b      	ldr	r3, [r7, #16]
 800c6ee:	4413      	add	r3, r2
 800c6f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c6f4:	681b      	ldr	r3, [r3, #0]
 800c6f6:	683a      	ldr	r2, [r7, #0]
 800c6f8:	7812      	ldrb	r2, [r2, #0]
 800c6fa:	0151      	lsls	r1, r2, #5
 800c6fc:	693a      	ldr	r2, [r7, #16]
 800c6fe:	440a      	add	r2, r1
 800c700:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c704:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800c708:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800c70a:	68fb      	ldr	r3, [r7, #12]
 800c70c:	3301      	adds	r3, #1
 800c70e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800c710:	68fb      	ldr	r3, [r7, #12]
 800c712:	f242 7210 	movw	r2, #10000	@ 0x2710
 800c716:	4293      	cmp	r3, r2
 800c718:	d902      	bls.n	800c720 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800c71a:	2301      	movs	r3, #1
 800c71c:	75fb      	strb	r3, [r7, #23]
          break;
 800c71e:	e056      	b.n	800c7ce <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800c720:	683b      	ldr	r3, [r7, #0]
 800c722:	781b      	ldrb	r3, [r3, #0]
 800c724:	015a      	lsls	r2, r3, #5
 800c726:	693b      	ldr	r3, [r7, #16]
 800c728:	4413      	add	r3, r2
 800c72a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800c734:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c738:	d0e7      	beq.n	800c70a <USB_EPStopXfer+0x82>
 800c73a:	e048      	b.n	800c7ce <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c73c:	683b      	ldr	r3, [r7, #0]
 800c73e:	781b      	ldrb	r3, [r3, #0]
 800c740:	015a      	lsls	r2, r3, #5
 800c742:	693b      	ldr	r3, [r7, #16]
 800c744:	4413      	add	r3, r2
 800c746:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c74a:	681b      	ldr	r3, [r3, #0]
 800c74c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800c750:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c754:	d13b      	bne.n	800c7ce <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800c756:	683b      	ldr	r3, [r7, #0]
 800c758:	781b      	ldrb	r3, [r3, #0]
 800c75a:	015a      	lsls	r2, r3, #5
 800c75c:	693b      	ldr	r3, [r7, #16]
 800c75e:	4413      	add	r3, r2
 800c760:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c764:	681b      	ldr	r3, [r3, #0]
 800c766:	683a      	ldr	r2, [r7, #0]
 800c768:	7812      	ldrb	r2, [r2, #0]
 800c76a:	0151      	lsls	r1, r2, #5
 800c76c:	693a      	ldr	r2, [r7, #16]
 800c76e:	440a      	add	r2, r1
 800c770:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c774:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800c778:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800c77a:	683b      	ldr	r3, [r7, #0]
 800c77c:	781b      	ldrb	r3, [r3, #0]
 800c77e:	015a      	lsls	r2, r3, #5
 800c780:	693b      	ldr	r3, [r7, #16]
 800c782:	4413      	add	r3, r2
 800c784:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c788:	681b      	ldr	r3, [r3, #0]
 800c78a:	683a      	ldr	r2, [r7, #0]
 800c78c:	7812      	ldrb	r2, [r2, #0]
 800c78e:	0151      	lsls	r1, r2, #5
 800c790:	693a      	ldr	r2, [r7, #16]
 800c792:	440a      	add	r2, r1
 800c794:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c798:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800c79c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800c79e:	68fb      	ldr	r3, [r7, #12]
 800c7a0:	3301      	adds	r3, #1
 800c7a2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800c7a4:	68fb      	ldr	r3, [r7, #12]
 800c7a6:	f242 7210 	movw	r2, #10000	@ 0x2710
 800c7aa:	4293      	cmp	r3, r2
 800c7ac:	d902      	bls.n	800c7b4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800c7ae:	2301      	movs	r3, #1
 800c7b0:	75fb      	strb	r3, [r7, #23]
          break;
 800c7b2:	e00c      	b.n	800c7ce <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800c7b4:	683b      	ldr	r3, [r7, #0]
 800c7b6:	781b      	ldrb	r3, [r3, #0]
 800c7b8:	015a      	lsls	r2, r3, #5
 800c7ba:	693b      	ldr	r3, [r7, #16]
 800c7bc:	4413      	add	r3, r2
 800c7be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c7c2:	681b      	ldr	r3, [r3, #0]
 800c7c4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800c7c8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c7cc:	d0e7      	beq.n	800c79e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800c7ce:	7dfb      	ldrb	r3, [r7, #23]
}
 800c7d0:	4618      	mov	r0, r3
 800c7d2:	371c      	adds	r7, #28
 800c7d4:	46bd      	mov	sp, r7
 800c7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7da:	4770      	bx	lr

0800c7dc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800c7dc:	b480      	push	{r7}
 800c7de:	b089      	sub	sp, #36	@ 0x24
 800c7e0:	af00      	add	r7, sp, #0
 800c7e2:	60f8      	str	r0, [r7, #12]
 800c7e4:	60b9      	str	r1, [r7, #8]
 800c7e6:	4611      	mov	r1, r2
 800c7e8:	461a      	mov	r2, r3
 800c7ea:	460b      	mov	r3, r1
 800c7ec:	71fb      	strb	r3, [r7, #7]
 800c7ee:	4613      	mov	r3, r2
 800c7f0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c7f2:	68fb      	ldr	r3, [r7, #12]
 800c7f4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800c7f6:	68bb      	ldr	r3, [r7, #8]
 800c7f8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800c7fa:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	d123      	bne.n	800c84a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800c802:	88bb      	ldrh	r3, [r7, #4]
 800c804:	3303      	adds	r3, #3
 800c806:	089b      	lsrs	r3, r3, #2
 800c808:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800c80a:	2300      	movs	r3, #0
 800c80c:	61bb      	str	r3, [r7, #24]
 800c80e:	e018      	b.n	800c842 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800c810:	79fb      	ldrb	r3, [r7, #7]
 800c812:	031a      	lsls	r2, r3, #12
 800c814:	697b      	ldr	r3, [r7, #20]
 800c816:	4413      	add	r3, r2
 800c818:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c81c:	461a      	mov	r2, r3
 800c81e:	69fb      	ldr	r3, [r7, #28]
 800c820:	681b      	ldr	r3, [r3, #0]
 800c822:	6013      	str	r3, [r2, #0]
      pSrc++;
 800c824:	69fb      	ldr	r3, [r7, #28]
 800c826:	3301      	adds	r3, #1
 800c828:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800c82a:	69fb      	ldr	r3, [r7, #28]
 800c82c:	3301      	adds	r3, #1
 800c82e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800c830:	69fb      	ldr	r3, [r7, #28]
 800c832:	3301      	adds	r3, #1
 800c834:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800c836:	69fb      	ldr	r3, [r7, #28]
 800c838:	3301      	adds	r3, #1
 800c83a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800c83c:	69bb      	ldr	r3, [r7, #24]
 800c83e:	3301      	adds	r3, #1
 800c840:	61bb      	str	r3, [r7, #24]
 800c842:	69ba      	ldr	r2, [r7, #24]
 800c844:	693b      	ldr	r3, [r7, #16]
 800c846:	429a      	cmp	r2, r3
 800c848:	d3e2      	bcc.n	800c810 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800c84a:	2300      	movs	r3, #0
}
 800c84c:	4618      	mov	r0, r3
 800c84e:	3724      	adds	r7, #36	@ 0x24
 800c850:	46bd      	mov	sp, r7
 800c852:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c856:	4770      	bx	lr

0800c858 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800c858:	b480      	push	{r7}
 800c85a:	b08b      	sub	sp, #44	@ 0x2c
 800c85c:	af00      	add	r7, sp, #0
 800c85e:	60f8      	str	r0, [r7, #12]
 800c860:	60b9      	str	r1, [r7, #8]
 800c862:	4613      	mov	r3, r2
 800c864:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c866:	68fb      	ldr	r3, [r7, #12]
 800c868:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800c86a:	68bb      	ldr	r3, [r7, #8]
 800c86c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800c86e:	88fb      	ldrh	r3, [r7, #6]
 800c870:	089b      	lsrs	r3, r3, #2
 800c872:	b29b      	uxth	r3, r3
 800c874:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800c876:	88fb      	ldrh	r3, [r7, #6]
 800c878:	f003 0303 	and.w	r3, r3, #3
 800c87c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800c87e:	2300      	movs	r3, #0
 800c880:	623b      	str	r3, [r7, #32]
 800c882:	e014      	b.n	800c8ae <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800c884:	69bb      	ldr	r3, [r7, #24]
 800c886:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c88a:	681a      	ldr	r2, [r3, #0]
 800c88c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c88e:	601a      	str	r2, [r3, #0]
    pDest++;
 800c890:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c892:	3301      	adds	r3, #1
 800c894:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800c896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c898:	3301      	adds	r3, #1
 800c89a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800c89c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c89e:	3301      	adds	r3, #1
 800c8a0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800c8a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8a4:	3301      	adds	r3, #1
 800c8a6:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800c8a8:	6a3b      	ldr	r3, [r7, #32]
 800c8aa:	3301      	adds	r3, #1
 800c8ac:	623b      	str	r3, [r7, #32]
 800c8ae:	6a3a      	ldr	r2, [r7, #32]
 800c8b0:	697b      	ldr	r3, [r7, #20]
 800c8b2:	429a      	cmp	r2, r3
 800c8b4:	d3e6      	bcc.n	800c884 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800c8b6:	8bfb      	ldrh	r3, [r7, #30]
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	d01e      	beq.n	800c8fa <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800c8bc:	2300      	movs	r3, #0
 800c8be:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800c8c0:	69bb      	ldr	r3, [r7, #24]
 800c8c2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c8c6:	461a      	mov	r2, r3
 800c8c8:	f107 0310 	add.w	r3, r7, #16
 800c8cc:	6812      	ldr	r2, [r2, #0]
 800c8ce:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800c8d0:	693a      	ldr	r2, [r7, #16]
 800c8d2:	6a3b      	ldr	r3, [r7, #32]
 800c8d4:	b2db      	uxtb	r3, r3
 800c8d6:	00db      	lsls	r3, r3, #3
 800c8d8:	fa22 f303 	lsr.w	r3, r2, r3
 800c8dc:	b2da      	uxtb	r2, r3
 800c8de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8e0:	701a      	strb	r2, [r3, #0]
      i++;
 800c8e2:	6a3b      	ldr	r3, [r7, #32]
 800c8e4:	3301      	adds	r3, #1
 800c8e6:	623b      	str	r3, [r7, #32]
      pDest++;
 800c8e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8ea:	3301      	adds	r3, #1
 800c8ec:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800c8ee:	8bfb      	ldrh	r3, [r7, #30]
 800c8f0:	3b01      	subs	r3, #1
 800c8f2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800c8f4:	8bfb      	ldrh	r3, [r7, #30]
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	d1ea      	bne.n	800c8d0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800c8fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800c8fc:	4618      	mov	r0, r3
 800c8fe:	372c      	adds	r7, #44	@ 0x2c
 800c900:	46bd      	mov	sp, r7
 800c902:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c906:	4770      	bx	lr

0800c908 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800c908:	b480      	push	{r7}
 800c90a:	b085      	sub	sp, #20
 800c90c:	af00      	add	r7, sp, #0
 800c90e:	6078      	str	r0, [r7, #4]
 800c910:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c916:	683b      	ldr	r3, [r7, #0]
 800c918:	781b      	ldrb	r3, [r3, #0]
 800c91a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c91c:	683b      	ldr	r3, [r7, #0]
 800c91e:	785b      	ldrb	r3, [r3, #1]
 800c920:	2b01      	cmp	r3, #1
 800c922:	d12c      	bne.n	800c97e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800c924:	68bb      	ldr	r3, [r7, #8]
 800c926:	015a      	lsls	r2, r3, #5
 800c928:	68fb      	ldr	r3, [r7, #12]
 800c92a:	4413      	add	r3, r2
 800c92c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c930:	681b      	ldr	r3, [r3, #0]
 800c932:	2b00      	cmp	r3, #0
 800c934:	db12      	blt.n	800c95c <USB_EPSetStall+0x54>
 800c936:	68bb      	ldr	r3, [r7, #8]
 800c938:	2b00      	cmp	r3, #0
 800c93a:	d00f      	beq.n	800c95c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800c93c:	68bb      	ldr	r3, [r7, #8]
 800c93e:	015a      	lsls	r2, r3, #5
 800c940:	68fb      	ldr	r3, [r7, #12]
 800c942:	4413      	add	r3, r2
 800c944:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c948:	681b      	ldr	r3, [r3, #0]
 800c94a:	68ba      	ldr	r2, [r7, #8]
 800c94c:	0151      	lsls	r1, r2, #5
 800c94e:	68fa      	ldr	r2, [r7, #12]
 800c950:	440a      	add	r2, r1
 800c952:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c956:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800c95a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800c95c:	68bb      	ldr	r3, [r7, #8]
 800c95e:	015a      	lsls	r2, r3, #5
 800c960:	68fb      	ldr	r3, [r7, #12]
 800c962:	4413      	add	r3, r2
 800c964:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	68ba      	ldr	r2, [r7, #8]
 800c96c:	0151      	lsls	r1, r2, #5
 800c96e:	68fa      	ldr	r2, [r7, #12]
 800c970:	440a      	add	r2, r1
 800c972:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c976:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800c97a:	6013      	str	r3, [r2, #0]
 800c97c:	e02b      	b.n	800c9d6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800c97e:	68bb      	ldr	r3, [r7, #8]
 800c980:	015a      	lsls	r2, r3, #5
 800c982:	68fb      	ldr	r3, [r7, #12]
 800c984:	4413      	add	r3, r2
 800c986:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c98a:	681b      	ldr	r3, [r3, #0]
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	db12      	blt.n	800c9b6 <USB_EPSetStall+0xae>
 800c990:	68bb      	ldr	r3, [r7, #8]
 800c992:	2b00      	cmp	r3, #0
 800c994:	d00f      	beq.n	800c9b6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800c996:	68bb      	ldr	r3, [r7, #8]
 800c998:	015a      	lsls	r2, r3, #5
 800c99a:	68fb      	ldr	r3, [r7, #12]
 800c99c:	4413      	add	r3, r2
 800c99e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c9a2:	681b      	ldr	r3, [r3, #0]
 800c9a4:	68ba      	ldr	r2, [r7, #8]
 800c9a6:	0151      	lsls	r1, r2, #5
 800c9a8:	68fa      	ldr	r2, [r7, #12]
 800c9aa:	440a      	add	r2, r1
 800c9ac:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c9b0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800c9b4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800c9b6:	68bb      	ldr	r3, [r7, #8]
 800c9b8:	015a      	lsls	r2, r3, #5
 800c9ba:	68fb      	ldr	r3, [r7, #12]
 800c9bc:	4413      	add	r3, r2
 800c9be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c9c2:	681b      	ldr	r3, [r3, #0]
 800c9c4:	68ba      	ldr	r2, [r7, #8]
 800c9c6:	0151      	lsls	r1, r2, #5
 800c9c8:	68fa      	ldr	r2, [r7, #12]
 800c9ca:	440a      	add	r2, r1
 800c9cc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c9d0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800c9d4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c9d6:	2300      	movs	r3, #0
}
 800c9d8:	4618      	mov	r0, r3
 800c9da:	3714      	adds	r7, #20
 800c9dc:	46bd      	mov	sp, r7
 800c9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9e2:	4770      	bx	lr

0800c9e4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800c9e4:	b480      	push	{r7}
 800c9e6:	b085      	sub	sp, #20
 800c9e8:	af00      	add	r7, sp, #0
 800c9ea:	6078      	str	r0, [r7, #4]
 800c9ec:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c9f2:	683b      	ldr	r3, [r7, #0]
 800c9f4:	781b      	ldrb	r3, [r3, #0]
 800c9f6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c9f8:	683b      	ldr	r3, [r7, #0]
 800c9fa:	785b      	ldrb	r3, [r3, #1]
 800c9fc:	2b01      	cmp	r3, #1
 800c9fe:	d128      	bne.n	800ca52 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800ca00:	68bb      	ldr	r3, [r7, #8]
 800ca02:	015a      	lsls	r2, r3, #5
 800ca04:	68fb      	ldr	r3, [r7, #12]
 800ca06:	4413      	add	r3, r2
 800ca08:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ca0c:	681b      	ldr	r3, [r3, #0]
 800ca0e:	68ba      	ldr	r2, [r7, #8]
 800ca10:	0151      	lsls	r1, r2, #5
 800ca12:	68fa      	ldr	r2, [r7, #12]
 800ca14:	440a      	add	r2, r1
 800ca16:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ca1a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800ca1e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800ca20:	683b      	ldr	r3, [r7, #0]
 800ca22:	791b      	ldrb	r3, [r3, #4]
 800ca24:	2b03      	cmp	r3, #3
 800ca26:	d003      	beq.n	800ca30 <USB_EPClearStall+0x4c>
 800ca28:	683b      	ldr	r3, [r7, #0]
 800ca2a:	791b      	ldrb	r3, [r3, #4]
 800ca2c:	2b02      	cmp	r3, #2
 800ca2e:	d138      	bne.n	800caa2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800ca30:	68bb      	ldr	r3, [r7, #8]
 800ca32:	015a      	lsls	r2, r3, #5
 800ca34:	68fb      	ldr	r3, [r7, #12]
 800ca36:	4413      	add	r3, r2
 800ca38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ca3c:	681b      	ldr	r3, [r3, #0]
 800ca3e:	68ba      	ldr	r2, [r7, #8]
 800ca40:	0151      	lsls	r1, r2, #5
 800ca42:	68fa      	ldr	r2, [r7, #12]
 800ca44:	440a      	add	r2, r1
 800ca46:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ca4a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ca4e:	6013      	str	r3, [r2, #0]
 800ca50:	e027      	b.n	800caa2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800ca52:	68bb      	ldr	r3, [r7, #8]
 800ca54:	015a      	lsls	r2, r3, #5
 800ca56:	68fb      	ldr	r3, [r7, #12]
 800ca58:	4413      	add	r3, r2
 800ca5a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	68ba      	ldr	r2, [r7, #8]
 800ca62:	0151      	lsls	r1, r2, #5
 800ca64:	68fa      	ldr	r2, [r7, #12]
 800ca66:	440a      	add	r2, r1
 800ca68:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ca6c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800ca70:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800ca72:	683b      	ldr	r3, [r7, #0]
 800ca74:	791b      	ldrb	r3, [r3, #4]
 800ca76:	2b03      	cmp	r3, #3
 800ca78:	d003      	beq.n	800ca82 <USB_EPClearStall+0x9e>
 800ca7a:	683b      	ldr	r3, [r7, #0]
 800ca7c:	791b      	ldrb	r3, [r3, #4]
 800ca7e:	2b02      	cmp	r3, #2
 800ca80:	d10f      	bne.n	800caa2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800ca82:	68bb      	ldr	r3, [r7, #8]
 800ca84:	015a      	lsls	r2, r3, #5
 800ca86:	68fb      	ldr	r3, [r7, #12]
 800ca88:	4413      	add	r3, r2
 800ca8a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	68ba      	ldr	r2, [r7, #8]
 800ca92:	0151      	lsls	r1, r2, #5
 800ca94:	68fa      	ldr	r2, [r7, #12]
 800ca96:	440a      	add	r2, r1
 800ca98:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ca9c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800caa0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800caa2:	2300      	movs	r3, #0
}
 800caa4:	4618      	mov	r0, r3
 800caa6:	3714      	adds	r7, #20
 800caa8:	46bd      	mov	sp, r7
 800caaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caae:	4770      	bx	lr

0800cab0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800cab0:	b480      	push	{r7}
 800cab2:	b085      	sub	sp, #20
 800cab4:	af00      	add	r7, sp, #0
 800cab6:	6078      	str	r0, [r7, #4]
 800cab8:	460b      	mov	r3, r1
 800caba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800cac0:	68fb      	ldr	r3, [r7, #12]
 800cac2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cac6:	681b      	ldr	r3, [r3, #0]
 800cac8:	68fa      	ldr	r2, [r7, #12]
 800caca:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800cace:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800cad2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800cad4:	68fb      	ldr	r3, [r7, #12]
 800cad6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cada:	681a      	ldr	r2, [r3, #0]
 800cadc:	78fb      	ldrb	r3, [r7, #3]
 800cade:	011b      	lsls	r3, r3, #4
 800cae0:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800cae4:	68f9      	ldr	r1, [r7, #12]
 800cae6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800caea:	4313      	orrs	r3, r2
 800caec:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800caee:	2300      	movs	r3, #0
}
 800caf0:	4618      	mov	r0, r3
 800caf2:	3714      	adds	r7, #20
 800caf4:	46bd      	mov	sp, r7
 800caf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cafa:	4770      	bx	lr

0800cafc <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800cafc:	b480      	push	{r7}
 800cafe:	b085      	sub	sp, #20
 800cb00:	af00      	add	r7, sp, #0
 800cb02:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800cb08:	68fb      	ldr	r3, [r7, #12]
 800cb0a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800cb0e:	681b      	ldr	r3, [r3, #0]
 800cb10:	68fa      	ldr	r2, [r7, #12]
 800cb12:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800cb16:	f023 0303 	bic.w	r3, r3, #3
 800cb1a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800cb1c:	68fb      	ldr	r3, [r7, #12]
 800cb1e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cb22:	685b      	ldr	r3, [r3, #4]
 800cb24:	68fa      	ldr	r2, [r7, #12]
 800cb26:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800cb2a:	f023 0302 	bic.w	r3, r3, #2
 800cb2e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800cb30:	2300      	movs	r3, #0
}
 800cb32:	4618      	mov	r0, r3
 800cb34:	3714      	adds	r7, #20
 800cb36:	46bd      	mov	sp, r7
 800cb38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb3c:	4770      	bx	lr

0800cb3e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800cb3e:	b480      	push	{r7}
 800cb40:	b085      	sub	sp, #20
 800cb42:	af00      	add	r7, sp, #0
 800cb44:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800cb4a:	68fb      	ldr	r3, [r7, #12]
 800cb4c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800cb50:	681b      	ldr	r3, [r3, #0]
 800cb52:	68fa      	ldr	r2, [r7, #12]
 800cb54:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800cb58:	f023 0303 	bic.w	r3, r3, #3
 800cb5c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800cb5e:	68fb      	ldr	r3, [r7, #12]
 800cb60:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cb64:	685b      	ldr	r3, [r3, #4]
 800cb66:	68fa      	ldr	r2, [r7, #12]
 800cb68:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800cb6c:	f043 0302 	orr.w	r3, r3, #2
 800cb70:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800cb72:	2300      	movs	r3, #0
}
 800cb74:	4618      	mov	r0, r3
 800cb76:	3714      	adds	r7, #20
 800cb78:	46bd      	mov	sp, r7
 800cb7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb7e:	4770      	bx	lr

0800cb80 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800cb80:	b480      	push	{r7}
 800cb82:	b085      	sub	sp, #20
 800cb84:	af00      	add	r7, sp, #0
 800cb86:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	695b      	ldr	r3, [r3, #20]
 800cb8c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	699b      	ldr	r3, [r3, #24]
 800cb92:	68fa      	ldr	r2, [r7, #12]
 800cb94:	4013      	ands	r3, r2
 800cb96:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800cb98:	68fb      	ldr	r3, [r7, #12]
}
 800cb9a:	4618      	mov	r0, r3
 800cb9c:	3714      	adds	r7, #20
 800cb9e:	46bd      	mov	sp, r7
 800cba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cba4:	4770      	bx	lr

0800cba6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800cba6:	b480      	push	{r7}
 800cba8:	b085      	sub	sp, #20
 800cbaa:	af00      	add	r7, sp, #0
 800cbac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800cbb2:	68fb      	ldr	r3, [r7, #12]
 800cbb4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cbb8:	699b      	ldr	r3, [r3, #24]
 800cbba:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800cbbc:	68fb      	ldr	r3, [r7, #12]
 800cbbe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cbc2:	69db      	ldr	r3, [r3, #28]
 800cbc4:	68ba      	ldr	r2, [r7, #8]
 800cbc6:	4013      	ands	r3, r2
 800cbc8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800cbca:	68bb      	ldr	r3, [r7, #8]
 800cbcc:	0c1b      	lsrs	r3, r3, #16
}
 800cbce:	4618      	mov	r0, r3
 800cbd0:	3714      	adds	r7, #20
 800cbd2:	46bd      	mov	sp, r7
 800cbd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbd8:	4770      	bx	lr

0800cbda <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800cbda:	b480      	push	{r7}
 800cbdc:	b085      	sub	sp, #20
 800cbde:	af00      	add	r7, sp, #0
 800cbe0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800cbe6:	68fb      	ldr	r3, [r7, #12]
 800cbe8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cbec:	699b      	ldr	r3, [r3, #24]
 800cbee:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800cbf0:	68fb      	ldr	r3, [r7, #12]
 800cbf2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cbf6:	69db      	ldr	r3, [r3, #28]
 800cbf8:	68ba      	ldr	r2, [r7, #8]
 800cbfa:	4013      	ands	r3, r2
 800cbfc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800cbfe:	68bb      	ldr	r3, [r7, #8]
 800cc00:	b29b      	uxth	r3, r3
}
 800cc02:	4618      	mov	r0, r3
 800cc04:	3714      	adds	r7, #20
 800cc06:	46bd      	mov	sp, r7
 800cc08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc0c:	4770      	bx	lr

0800cc0e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800cc0e:	b480      	push	{r7}
 800cc10:	b085      	sub	sp, #20
 800cc12:	af00      	add	r7, sp, #0
 800cc14:	6078      	str	r0, [r7, #4]
 800cc16:	460b      	mov	r3, r1
 800cc18:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800cc1e:	78fb      	ldrb	r3, [r7, #3]
 800cc20:	015a      	lsls	r2, r3, #5
 800cc22:	68fb      	ldr	r3, [r7, #12]
 800cc24:	4413      	add	r3, r2
 800cc26:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cc2a:	689b      	ldr	r3, [r3, #8]
 800cc2c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800cc2e:	68fb      	ldr	r3, [r7, #12]
 800cc30:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cc34:	695b      	ldr	r3, [r3, #20]
 800cc36:	68ba      	ldr	r2, [r7, #8]
 800cc38:	4013      	ands	r3, r2
 800cc3a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800cc3c:	68bb      	ldr	r3, [r7, #8]
}
 800cc3e:	4618      	mov	r0, r3
 800cc40:	3714      	adds	r7, #20
 800cc42:	46bd      	mov	sp, r7
 800cc44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc48:	4770      	bx	lr

0800cc4a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800cc4a:	b480      	push	{r7}
 800cc4c:	b087      	sub	sp, #28
 800cc4e:	af00      	add	r7, sp, #0
 800cc50:	6078      	str	r0, [r7, #4]
 800cc52:	460b      	mov	r3, r1
 800cc54:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800cc5a:	697b      	ldr	r3, [r7, #20]
 800cc5c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cc60:	691b      	ldr	r3, [r3, #16]
 800cc62:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800cc64:	697b      	ldr	r3, [r7, #20]
 800cc66:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cc6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cc6c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800cc6e:	78fb      	ldrb	r3, [r7, #3]
 800cc70:	f003 030f 	and.w	r3, r3, #15
 800cc74:	68fa      	ldr	r2, [r7, #12]
 800cc76:	fa22 f303 	lsr.w	r3, r2, r3
 800cc7a:	01db      	lsls	r3, r3, #7
 800cc7c:	b2db      	uxtb	r3, r3
 800cc7e:	693a      	ldr	r2, [r7, #16]
 800cc80:	4313      	orrs	r3, r2
 800cc82:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800cc84:	78fb      	ldrb	r3, [r7, #3]
 800cc86:	015a      	lsls	r2, r3, #5
 800cc88:	697b      	ldr	r3, [r7, #20]
 800cc8a:	4413      	add	r3, r2
 800cc8c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cc90:	689b      	ldr	r3, [r3, #8]
 800cc92:	693a      	ldr	r2, [r7, #16]
 800cc94:	4013      	ands	r3, r2
 800cc96:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800cc98:	68bb      	ldr	r3, [r7, #8]
}
 800cc9a:	4618      	mov	r0, r3
 800cc9c:	371c      	adds	r7, #28
 800cc9e:	46bd      	mov	sp, r7
 800cca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cca4:	4770      	bx	lr

0800cca6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800cca6:	b480      	push	{r7}
 800cca8:	b083      	sub	sp, #12
 800ccaa:	af00      	add	r7, sp, #0
 800ccac:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	695b      	ldr	r3, [r3, #20]
 800ccb2:	f003 0301 	and.w	r3, r3, #1
}
 800ccb6:	4618      	mov	r0, r3
 800ccb8:	370c      	adds	r7, #12
 800ccba:	46bd      	mov	sp, r7
 800ccbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccc0:	4770      	bx	lr
	...

0800ccc4 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800ccc4:	b480      	push	{r7}
 800ccc6:	b085      	sub	sp, #20
 800ccc8:	af00      	add	r7, sp, #0
 800ccca:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800ccd0:	68fb      	ldr	r3, [r7, #12]
 800ccd2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ccd6:	681a      	ldr	r2, [r3, #0]
 800ccd8:	68fb      	ldr	r3, [r7, #12]
 800ccda:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ccde:	4619      	mov	r1, r3
 800cce0:	4b09      	ldr	r3, [pc, #36]	@ (800cd08 <USB_ActivateSetup+0x44>)
 800cce2:	4013      	ands	r3, r2
 800cce4:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800cce6:	68fb      	ldr	r3, [r7, #12]
 800cce8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ccec:	685b      	ldr	r3, [r3, #4]
 800ccee:	68fa      	ldr	r2, [r7, #12]
 800ccf0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ccf4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ccf8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ccfa:	2300      	movs	r3, #0
}
 800ccfc:	4618      	mov	r0, r3
 800ccfe:	3714      	adds	r7, #20
 800cd00:	46bd      	mov	sp, r7
 800cd02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd06:	4770      	bx	lr
 800cd08:	fffff800 	.word	0xfffff800

0800cd0c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800cd0c:	b480      	push	{r7}
 800cd0e:	b087      	sub	sp, #28
 800cd10:	af00      	add	r7, sp, #0
 800cd12:	60f8      	str	r0, [r7, #12]
 800cd14:	460b      	mov	r3, r1
 800cd16:	607a      	str	r2, [r7, #4]
 800cd18:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cd1a:	68fb      	ldr	r3, [r7, #12]
 800cd1c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800cd1e:	68fb      	ldr	r3, [r7, #12]
 800cd20:	333c      	adds	r3, #60	@ 0x3c
 800cd22:	3304      	adds	r3, #4
 800cd24:	681b      	ldr	r3, [r3, #0]
 800cd26:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800cd28:	693b      	ldr	r3, [r7, #16]
 800cd2a:	4a26      	ldr	r2, [pc, #152]	@ (800cdc4 <USB_EP0_OutStart+0xb8>)
 800cd2c:	4293      	cmp	r3, r2
 800cd2e:	d90a      	bls.n	800cd46 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800cd30:	697b      	ldr	r3, [r7, #20]
 800cd32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cd36:	681b      	ldr	r3, [r3, #0]
 800cd38:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800cd3c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800cd40:	d101      	bne.n	800cd46 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800cd42:	2300      	movs	r3, #0
 800cd44:	e037      	b.n	800cdb6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800cd46:	697b      	ldr	r3, [r7, #20]
 800cd48:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cd4c:	461a      	mov	r2, r3
 800cd4e:	2300      	movs	r3, #0
 800cd50:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800cd52:	697b      	ldr	r3, [r7, #20]
 800cd54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cd58:	691b      	ldr	r3, [r3, #16]
 800cd5a:	697a      	ldr	r2, [r7, #20]
 800cd5c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800cd60:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800cd64:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800cd66:	697b      	ldr	r3, [r7, #20]
 800cd68:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cd6c:	691b      	ldr	r3, [r3, #16]
 800cd6e:	697a      	ldr	r2, [r7, #20]
 800cd70:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800cd74:	f043 0318 	orr.w	r3, r3, #24
 800cd78:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800cd7a:	697b      	ldr	r3, [r7, #20]
 800cd7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cd80:	691b      	ldr	r3, [r3, #16]
 800cd82:	697a      	ldr	r2, [r7, #20]
 800cd84:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800cd88:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800cd8c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800cd8e:	7afb      	ldrb	r3, [r7, #11]
 800cd90:	2b01      	cmp	r3, #1
 800cd92:	d10f      	bne.n	800cdb4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800cd94:	697b      	ldr	r3, [r7, #20]
 800cd96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cd9a:	461a      	mov	r2, r3
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800cda0:	697b      	ldr	r3, [r7, #20]
 800cda2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cda6:	681b      	ldr	r3, [r3, #0]
 800cda8:	697a      	ldr	r2, [r7, #20]
 800cdaa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800cdae:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800cdb2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800cdb4:	2300      	movs	r3, #0
}
 800cdb6:	4618      	mov	r0, r3
 800cdb8:	371c      	adds	r7, #28
 800cdba:	46bd      	mov	sp, r7
 800cdbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdc0:	4770      	bx	lr
 800cdc2:	bf00      	nop
 800cdc4:	4f54300a 	.word	0x4f54300a

0800cdc8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800cdc8:	b480      	push	{r7}
 800cdca:	b085      	sub	sp, #20
 800cdcc:	af00      	add	r7, sp, #0
 800cdce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800cdd0:	2300      	movs	r3, #0
 800cdd2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800cdd4:	68fb      	ldr	r3, [r7, #12]
 800cdd6:	3301      	adds	r3, #1
 800cdd8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800cdda:	68fb      	ldr	r3, [r7, #12]
 800cddc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800cde0:	d901      	bls.n	800cde6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800cde2:	2303      	movs	r3, #3
 800cde4:	e01b      	b.n	800ce1e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	691b      	ldr	r3, [r3, #16]
 800cdea:	2b00      	cmp	r3, #0
 800cdec:	daf2      	bge.n	800cdd4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800cdee:	2300      	movs	r3, #0
 800cdf0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	691b      	ldr	r3, [r3, #16]
 800cdf6:	f043 0201 	orr.w	r2, r3, #1
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800cdfe:	68fb      	ldr	r3, [r7, #12]
 800ce00:	3301      	adds	r3, #1
 800ce02:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ce04:	68fb      	ldr	r3, [r7, #12]
 800ce06:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800ce0a:	d901      	bls.n	800ce10 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800ce0c:	2303      	movs	r3, #3
 800ce0e:	e006      	b.n	800ce1e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	691b      	ldr	r3, [r3, #16]
 800ce14:	f003 0301 	and.w	r3, r3, #1
 800ce18:	2b01      	cmp	r3, #1
 800ce1a:	d0f0      	beq.n	800cdfe <USB_CoreReset+0x36>

  return HAL_OK;
 800ce1c:	2300      	movs	r3, #0
}
 800ce1e:	4618      	mov	r0, r3
 800ce20:	3714      	adds	r7, #20
 800ce22:	46bd      	mov	sp, r7
 800ce24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce28:	4770      	bx	lr
	...

0800ce2c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ce2c:	b580      	push	{r7, lr}
 800ce2e:	b084      	sub	sp, #16
 800ce30:	af00      	add	r7, sp, #0
 800ce32:	6078      	str	r0, [r7, #4]
 800ce34:	460b      	mov	r3, r1
 800ce36:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800ce38:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800ce3c:	f002 fcfe 	bl	800f83c <USBD_static_malloc>
 800ce40:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800ce42:	68fb      	ldr	r3, [r7, #12]
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	d109      	bne.n	800ce5c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	32b0      	adds	r2, #176	@ 0xb0
 800ce52:	2100      	movs	r1, #0
 800ce54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800ce58:	2302      	movs	r3, #2
 800ce5a:	e0d4      	b.n	800d006 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800ce5c:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800ce60:	2100      	movs	r1, #0
 800ce62:	68f8      	ldr	r0, [r7, #12]
 800ce64:	f003 fa89 	bl	801037a <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	32b0      	adds	r2, #176	@ 0xb0
 800ce72:	68f9      	ldr	r1, [r7, #12]
 800ce74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	32b0      	adds	r2, #176	@ 0xb0
 800ce82:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	7c1b      	ldrb	r3, [r3, #16]
 800ce90:	2b00      	cmp	r3, #0
 800ce92:	d138      	bne.n	800cf06 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800ce94:	4b5e      	ldr	r3, [pc, #376]	@ (800d010 <USBD_CDC_Init+0x1e4>)
 800ce96:	7819      	ldrb	r1, [r3, #0]
 800ce98:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ce9c:	2202      	movs	r2, #2
 800ce9e:	6878      	ldr	r0, [r7, #4]
 800cea0:	f002 fba9 	bl	800f5f6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800cea4:	4b5a      	ldr	r3, [pc, #360]	@ (800d010 <USBD_CDC_Init+0x1e4>)
 800cea6:	781b      	ldrb	r3, [r3, #0]
 800cea8:	f003 020f 	and.w	r2, r3, #15
 800ceac:	6879      	ldr	r1, [r7, #4]
 800ceae:	4613      	mov	r3, r2
 800ceb0:	009b      	lsls	r3, r3, #2
 800ceb2:	4413      	add	r3, r2
 800ceb4:	009b      	lsls	r3, r3, #2
 800ceb6:	440b      	add	r3, r1
 800ceb8:	3324      	adds	r3, #36	@ 0x24
 800ceba:	2201      	movs	r2, #1
 800cebc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800cebe:	4b55      	ldr	r3, [pc, #340]	@ (800d014 <USBD_CDC_Init+0x1e8>)
 800cec0:	7819      	ldrb	r1, [r3, #0]
 800cec2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800cec6:	2202      	movs	r2, #2
 800cec8:	6878      	ldr	r0, [r7, #4]
 800ceca:	f002 fb94 	bl	800f5f6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800cece:	4b51      	ldr	r3, [pc, #324]	@ (800d014 <USBD_CDC_Init+0x1e8>)
 800ced0:	781b      	ldrb	r3, [r3, #0]
 800ced2:	f003 020f 	and.w	r2, r3, #15
 800ced6:	6879      	ldr	r1, [r7, #4]
 800ced8:	4613      	mov	r3, r2
 800ceda:	009b      	lsls	r3, r3, #2
 800cedc:	4413      	add	r3, r2
 800cede:	009b      	lsls	r3, r3, #2
 800cee0:	440b      	add	r3, r1
 800cee2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800cee6:	2201      	movs	r2, #1
 800cee8:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800ceea:	4b4b      	ldr	r3, [pc, #300]	@ (800d018 <USBD_CDC_Init+0x1ec>)
 800ceec:	781b      	ldrb	r3, [r3, #0]
 800ceee:	f003 020f 	and.w	r2, r3, #15
 800cef2:	6879      	ldr	r1, [r7, #4]
 800cef4:	4613      	mov	r3, r2
 800cef6:	009b      	lsls	r3, r3, #2
 800cef8:	4413      	add	r3, r2
 800cefa:	009b      	lsls	r3, r3, #2
 800cefc:	440b      	add	r3, r1
 800cefe:	3326      	adds	r3, #38	@ 0x26
 800cf00:	2210      	movs	r2, #16
 800cf02:	801a      	strh	r2, [r3, #0]
 800cf04:	e035      	b.n	800cf72 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800cf06:	4b42      	ldr	r3, [pc, #264]	@ (800d010 <USBD_CDC_Init+0x1e4>)
 800cf08:	7819      	ldrb	r1, [r3, #0]
 800cf0a:	2340      	movs	r3, #64	@ 0x40
 800cf0c:	2202      	movs	r2, #2
 800cf0e:	6878      	ldr	r0, [r7, #4]
 800cf10:	f002 fb71 	bl	800f5f6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800cf14:	4b3e      	ldr	r3, [pc, #248]	@ (800d010 <USBD_CDC_Init+0x1e4>)
 800cf16:	781b      	ldrb	r3, [r3, #0]
 800cf18:	f003 020f 	and.w	r2, r3, #15
 800cf1c:	6879      	ldr	r1, [r7, #4]
 800cf1e:	4613      	mov	r3, r2
 800cf20:	009b      	lsls	r3, r3, #2
 800cf22:	4413      	add	r3, r2
 800cf24:	009b      	lsls	r3, r3, #2
 800cf26:	440b      	add	r3, r1
 800cf28:	3324      	adds	r3, #36	@ 0x24
 800cf2a:	2201      	movs	r2, #1
 800cf2c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800cf2e:	4b39      	ldr	r3, [pc, #228]	@ (800d014 <USBD_CDC_Init+0x1e8>)
 800cf30:	7819      	ldrb	r1, [r3, #0]
 800cf32:	2340      	movs	r3, #64	@ 0x40
 800cf34:	2202      	movs	r2, #2
 800cf36:	6878      	ldr	r0, [r7, #4]
 800cf38:	f002 fb5d 	bl	800f5f6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800cf3c:	4b35      	ldr	r3, [pc, #212]	@ (800d014 <USBD_CDC_Init+0x1e8>)
 800cf3e:	781b      	ldrb	r3, [r3, #0]
 800cf40:	f003 020f 	and.w	r2, r3, #15
 800cf44:	6879      	ldr	r1, [r7, #4]
 800cf46:	4613      	mov	r3, r2
 800cf48:	009b      	lsls	r3, r3, #2
 800cf4a:	4413      	add	r3, r2
 800cf4c:	009b      	lsls	r3, r3, #2
 800cf4e:	440b      	add	r3, r1
 800cf50:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800cf54:	2201      	movs	r2, #1
 800cf56:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800cf58:	4b2f      	ldr	r3, [pc, #188]	@ (800d018 <USBD_CDC_Init+0x1ec>)
 800cf5a:	781b      	ldrb	r3, [r3, #0]
 800cf5c:	f003 020f 	and.w	r2, r3, #15
 800cf60:	6879      	ldr	r1, [r7, #4]
 800cf62:	4613      	mov	r3, r2
 800cf64:	009b      	lsls	r3, r3, #2
 800cf66:	4413      	add	r3, r2
 800cf68:	009b      	lsls	r3, r3, #2
 800cf6a:	440b      	add	r3, r1
 800cf6c:	3326      	adds	r3, #38	@ 0x26
 800cf6e:	2210      	movs	r2, #16
 800cf70:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800cf72:	4b29      	ldr	r3, [pc, #164]	@ (800d018 <USBD_CDC_Init+0x1ec>)
 800cf74:	7819      	ldrb	r1, [r3, #0]
 800cf76:	2308      	movs	r3, #8
 800cf78:	2203      	movs	r2, #3
 800cf7a:	6878      	ldr	r0, [r7, #4]
 800cf7c:	f002 fb3b 	bl	800f5f6 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800cf80:	4b25      	ldr	r3, [pc, #148]	@ (800d018 <USBD_CDC_Init+0x1ec>)
 800cf82:	781b      	ldrb	r3, [r3, #0]
 800cf84:	f003 020f 	and.w	r2, r3, #15
 800cf88:	6879      	ldr	r1, [r7, #4]
 800cf8a:	4613      	mov	r3, r2
 800cf8c:	009b      	lsls	r3, r3, #2
 800cf8e:	4413      	add	r3, r2
 800cf90:	009b      	lsls	r3, r3, #2
 800cf92:	440b      	add	r3, r1
 800cf94:	3324      	adds	r3, #36	@ 0x24
 800cf96:	2201      	movs	r2, #1
 800cf98:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800cf9a:	68fb      	ldr	r3, [r7, #12]
 800cf9c:	2200      	movs	r2, #0
 800cf9e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800cfa8:	687a      	ldr	r2, [r7, #4]
 800cfaa:	33b0      	adds	r3, #176	@ 0xb0
 800cfac:	009b      	lsls	r3, r3, #2
 800cfae:	4413      	add	r3, r2
 800cfb0:	685b      	ldr	r3, [r3, #4]
 800cfb2:	681b      	ldr	r3, [r3, #0]
 800cfb4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800cfb6:	68fb      	ldr	r3, [r7, #12]
 800cfb8:	2200      	movs	r2, #0
 800cfba:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800cfbe:	68fb      	ldr	r3, [r7, #12]
 800cfc0:	2200      	movs	r2, #0
 800cfc2:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800cfc6:	68fb      	ldr	r3, [r7, #12]
 800cfc8:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	d101      	bne.n	800cfd4 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800cfd0:	2302      	movs	r3, #2
 800cfd2:	e018      	b.n	800d006 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	7c1b      	ldrb	r3, [r3, #16]
 800cfd8:	2b00      	cmp	r3, #0
 800cfda:	d10a      	bne.n	800cff2 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800cfdc:	4b0d      	ldr	r3, [pc, #52]	@ (800d014 <USBD_CDC_Init+0x1e8>)
 800cfde:	7819      	ldrb	r1, [r3, #0]
 800cfe0:	68fb      	ldr	r3, [r7, #12]
 800cfe2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800cfe6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800cfea:	6878      	ldr	r0, [r7, #4]
 800cfec:	f002 fbf2 	bl	800f7d4 <USBD_LL_PrepareReceive>
 800cff0:	e008      	b.n	800d004 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800cff2:	4b08      	ldr	r3, [pc, #32]	@ (800d014 <USBD_CDC_Init+0x1e8>)
 800cff4:	7819      	ldrb	r1, [r3, #0]
 800cff6:	68fb      	ldr	r3, [r7, #12]
 800cff8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800cffc:	2340      	movs	r3, #64	@ 0x40
 800cffe:	6878      	ldr	r0, [r7, #4]
 800d000:	f002 fbe8 	bl	800f7d4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800d004:	2300      	movs	r3, #0
}
 800d006:	4618      	mov	r0, r3
 800d008:	3710      	adds	r7, #16
 800d00a:	46bd      	mov	sp, r7
 800d00c:	bd80      	pop	{r7, pc}
 800d00e:	bf00      	nop
 800d010:	240000cb 	.word	0x240000cb
 800d014:	240000cc 	.word	0x240000cc
 800d018:	240000cd 	.word	0x240000cd

0800d01c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d01c:	b580      	push	{r7, lr}
 800d01e:	b082      	sub	sp, #8
 800d020:	af00      	add	r7, sp, #0
 800d022:	6078      	str	r0, [r7, #4]
 800d024:	460b      	mov	r3, r1
 800d026:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800d028:	4b3a      	ldr	r3, [pc, #232]	@ (800d114 <USBD_CDC_DeInit+0xf8>)
 800d02a:	781b      	ldrb	r3, [r3, #0]
 800d02c:	4619      	mov	r1, r3
 800d02e:	6878      	ldr	r0, [r7, #4]
 800d030:	f002 fb07 	bl	800f642 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800d034:	4b37      	ldr	r3, [pc, #220]	@ (800d114 <USBD_CDC_DeInit+0xf8>)
 800d036:	781b      	ldrb	r3, [r3, #0]
 800d038:	f003 020f 	and.w	r2, r3, #15
 800d03c:	6879      	ldr	r1, [r7, #4]
 800d03e:	4613      	mov	r3, r2
 800d040:	009b      	lsls	r3, r3, #2
 800d042:	4413      	add	r3, r2
 800d044:	009b      	lsls	r3, r3, #2
 800d046:	440b      	add	r3, r1
 800d048:	3324      	adds	r3, #36	@ 0x24
 800d04a:	2200      	movs	r2, #0
 800d04c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800d04e:	4b32      	ldr	r3, [pc, #200]	@ (800d118 <USBD_CDC_DeInit+0xfc>)
 800d050:	781b      	ldrb	r3, [r3, #0]
 800d052:	4619      	mov	r1, r3
 800d054:	6878      	ldr	r0, [r7, #4]
 800d056:	f002 faf4 	bl	800f642 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800d05a:	4b2f      	ldr	r3, [pc, #188]	@ (800d118 <USBD_CDC_DeInit+0xfc>)
 800d05c:	781b      	ldrb	r3, [r3, #0]
 800d05e:	f003 020f 	and.w	r2, r3, #15
 800d062:	6879      	ldr	r1, [r7, #4]
 800d064:	4613      	mov	r3, r2
 800d066:	009b      	lsls	r3, r3, #2
 800d068:	4413      	add	r3, r2
 800d06a:	009b      	lsls	r3, r3, #2
 800d06c:	440b      	add	r3, r1
 800d06e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800d072:	2200      	movs	r2, #0
 800d074:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800d076:	4b29      	ldr	r3, [pc, #164]	@ (800d11c <USBD_CDC_DeInit+0x100>)
 800d078:	781b      	ldrb	r3, [r3, #0]
 800d07a:	4619      	mov	r1, r3
 800d07c:	6878      	ldr	r0, [r7, #4]
 800d07e:	f002 fae0 	bl	800f642 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800d082:	4b26      	ldr	r3, [pc, #152]	@ (800d11c <USBD_CDC_DeInit+0x100>)
 800d084:	781b      	ldrb	r3, [r3, #0]
 800d086:	f003 020f 	and.w	r2, r3, #15
 800d08a:	6879      	ldr	r1, [r7, #4]
 800d08c:	4613      	mov	r3, r2
 800d08e:	009b      	lsls	r3, r3, #2
 800d090:	4413      	add	r3, r2
 800d092:	009b      	lsls	r3, r3, #2
 800d094:	440b      	add	r3, r1
 800d096:	3324      	adds	r3, #36	@ 0x24
 800d098:	2200      	movs	r2, #0
 800d09a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800d09c:	4b1f      	ldr	r3, [pc, #124]	@ (800d11c <USBD_CDC_DeInit+0x100>)
 800d09e:	781b      	ldrb	r3, [r3, #0]
 800d0a0:	f003 020f 	and.w	r2, r3, #15
 800d0a4:	6879      	ldr	r1, [r7, #4]
 800d0a6:	4613      	mov	r3, r2
 800d0a8:	009b      	lsls	r3, r3, #2
 800d0aa:	4413      	add	r3, r2
 800d0ac:	009b      	lsls	r3, r3, #2
 800d0ae:	440b      	add	r3, r1
 800d0b0:	3326      	adds	r3, #38	@ 0x26
 800d0b2:	2200      	movs	r2, #0
 800d0b4:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	32b0      	adds	r2, #176	@ 0xb0
 800d0c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d0c4:	2b00      	cmp	r3, #0
 800d0c6:	d01f      	beq.n	800d108 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d0ce:	687a      	ldr	r2, [r7, #4]
 800d0d0:	33b0      	adds	r3, #176	@ 0xb0
 800d0d2:	009b      	lsls	r3, r3, #2
 800d0d4:	4413      	add	r3, r2
 800d0d6:	685b      	ldr	r3, [r3, #4]
 800d0d8:	685b      	ldr	r3, [r3, #4]
 800d0da:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	32b0      	adds	r2, #176	@ 0xb0
 800d0e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d0ea:	4618      	mov	r0, r3
 800d0ec:	f002 fbb4 	bl	800f858 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	32b0      	adds	r2, #176	@ 0xb0
 800d0fa:	2100      	movs	r1, #0
 800d0fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	2200      	movs	r2, #0
 800d104:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800d108:	2300      	movs	r3, #0
}
 800d10a:	4618      	mov	r0, r3
 800d10c:	3708      	adds	r7, #8
 800d10e:	46bd      	mov	sp, r7
 800d110:	bd80      	pop	{r7, pc}
 800d112:	bf00      	nop
 800d114:	240000cb 	.word	0x240000cb
 800d118:	240000cc 	.word	0x240000cc
 800d11c:	240000cd 	.word	0x240000cd

0800d120 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800d120:	b580      	push	{r7, lr}
 800d122:	b086      	sub	sp, #24
 800d124:	af00      	add	r7, sp, #0
 800d126:	6078      	str	r0, [r7, #4]
 800d128:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	32b0      	adds	r2, #176	@ 0xb0
 800d134:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d138:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800d13a:	2300      	movs	r3, #0
 800d13c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800d13e:	2300      	movs	r3, #0
 800d140:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800d142:	2300      	movs	r3, #0
 800d144:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800d146:	693b      	ldr	r3, [r7, #16]
 800d148:	2b00      	cmp	r3, #0
 800d14a:	d101      	bne.n	800d150 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800d14c:	2303      	movs	r3, #3
 800d14e:	e0bf      	b.n	800d2d0 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d150:	683b      	ldr	r3, [r7, #0]
 800d152:	781b      	ldrb	r3, [r3, #0]
 800d154:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800d158:	2b00      	cmp	r3, #0
 800d15a:	d050      	beq.n	800d1fe <USBD_CDC_Setup+0xde>
 800d15c:	2b20      	cmp	r3, #32
 800d15e:	f040 80af 	bne.w	800d2c0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800d162:	683b      	ldr	r3, [r7, #0]
 800d164:	88db      	ldrh	r3, [r3, #6]
 800d166:	2b00      	cmp	r3, #0
 800d168:	d03a      	beq.n	800d1e0 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800d16a:	683b      	ldr	r3, [r7, #0]
 800d16c:	781b      	ldrb	r3, [r3, #0]
 800d16e:	b25b      	sxtb	r3, r3
 800d170:	2b00      	cmp	r3, #0
 800d172:	da1b      	bge.n	800d1ac <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d17a:	687a      	ldr	r2, [r7, #4]
 800d17c:	33b0      	adds	r3, #176	@ 0xb0
 800d17e:	009b      	lsls	r3, r3, #2
 800d180:	4413      	add	r3, r2
 800d182:	685b      	ldr	r3, [r3, #4]
 800d184:	689b      	ldr	r3, [r3, #8]
 800d186:	683a      	ldr	r2, [r7, #0]
 800d188:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800d18a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800d18c:	683a      	ldr	r2, [r7, #0]
 800d18e:	88d2      	ldrh	r2, [r2, #6]
 800d190:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800d192:	683b      	ldr	r3, [r7, #0]
 800d194:	88db      	ldrh	r3, [r3, #6]
 800d196:	2b07      	cmp	r3, #7
 800d198:	bf28      	it	cs
 800d19a:	2307      	movcs	r3, #7
 800d19c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800d19e:	693b      	ldr	r3, [r7, #16]
 800d1a0:	89fa      	ldrh	r2, [r7, #14]
 800d1a2:	4619      	mov	r1, r3
 800d1a4:	6878      	ldr	r0, [r7, #4]
 800d1a6:	f001 fdbd 	bl	800ed24 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800d1aa:	e090      	b.n	800d2ce <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800d1ac:	683b      	ldr	r3, [r7, #0]
 800d1ae:	785a      	ldrb	r2, [r3, #1]
 800d1b0:	693b      	ldr	r3, [r7, #16]
 800d1b2:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800d1b6:	683b      	ldr	r3, [r7, #0]
 800d1b8:	88db      	ldrh	r3, [r3, #6]
 800d1ba:	2b3f      	cmp	r3, #63	@ 0x3f
 800d1bc:	d803      	bhi.n	800d1c6 <USBD_CDC_Setup+0xa6>
 800d1be:	683b      	ldr	r3, [r7, #0]
 800d1c0:	88db      	ldrh	r3, [r3, #6]
 800d1c2:	b2da      	uxtb	r2, r3
 800d1c4:	e000      	b.n	800d1c8 <USBD_CDC_Setup+0xa8>
 800d1c6:	2240      	movs	r2, #64	@ 0x40
 800d1c8:	693b      	ldr	r3, [r7, #16]
 800d1ca:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800d1ce:	6939      	ldr	r1, [r7, #16]
 800d1d0:	693b      	ldr	r3, [r7, #16]
 800d1d2:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800d1d6:	461a      	mov	r2, r3
 800d1d8:	6878      	ldr	r0, [r7, #4]
 800d1da:	f001 fdcf 	bl	800ed7c <USBD_CtlPrepareRx>
      break;
 800d1de:	e076      	b.n	800d2ce <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d1e6:	687a      	ldr	r2, [r7, #4]
 800d1e8:	33b0      	adds	r3, #176	@ 0xb0
 800d1ea:	009b      	lsls	r3, r3, #2
 800d1ec:	4413      	add	r3, r2
 800d1ee:	685b      	ldr	r3, [r3, #4]
 800d1f0:	689b      	ldr	r3, [r3, #8]
 800d1f2:	683a      	ldr	r2, [r7, #0]
 800d1f4:	7850      	ldrb	r0, [r2, #1]
 800d1f6:	2200      	movs	r2, #0
 800d1f8:	6839      	ldr	r1, [r7, #0]
 800d1fa:	4798      	blx	r3
      break;
 800d1fc:	e067      	b.n	800d2ce <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d1fe:	683b      	ldr	r3, [r7, #0]
 800d200:	785b      	ldrb	r3, [r3, #1]
 800d202:	2b0b      	cmp	r3, #11
 800d204:	d851      	bhi.n	800d2aa <USBD_CDC_Setup+0x18a>
 800d206:	a201      	add	r2, pc, #4	@ (adr r2, 800d20c <USBD_CDC_Setup+0xec>)
 800d208:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d20c:	0800d23d 	.word	0x0800d23d
 800d210:	0800d2b9 	.word	0x0800d2b9
 800d214:	0800d2ab 	.word	0x0800d2ab
 800d218:	0800d2ab 	.word	0x0800d2ab
 800d21c:	0800d2ab 	.word	0x0800d2ab
 800d220:	0800d2ab 	.word	0x0800d2ab
 800d224:	0800d2ab 	.word	0x0800d2ab
 800d228:	0800d2ab 	.word	0x0800d2ab
 800d22c:	0800d2ab 	.word	0x0800d2ab
 800d230:	0800d2ab 	.word	0x0800d2ab
 800d234:	0800d267 	.word	0x0800d267
 800d238:	0800d291 	.word	0x0800d291
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d242:	b2db      	uxtb	r3, r3
 800d244:	2b03      	cmp	r3, #3
 800d246:	d107      	bne.n	800d258 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800d248:	f107 030a 	add.w	r3, r7, #10
 800d24c:	2202      	movs	r2, #2
 800d24e:	4619      	mov	r1, r3
 800d250:	6878      	ldr	r0, [r7, #4]
 800d252:	f001 fd67 	bl	800ed24 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d256:	e032      	b.n	800d2be <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800d258:	6839      	ldr	r1, [r7, #0]
 800d25a:	6878      	ldr	r0, [r7, #4]
 800d25c:	f001 fce5 	bl	800ec2a <USBD_CtlError>
            ret = USBD_FAIL;
 800d260:	2303      	movs	r3, #3
 800d262:	75fb      	strb	r3, [r7, #23]
          break;
 800d264:	e02b      	b.n	800d2be <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d26c:	b2db      	uxtb	r3, r3
 800d26e:	2b03      	cmp	r3, #3
 800d270:	d107      	bne.n	800d282 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800d272:	f107 030d 	add.w	r3, r7, #13
 800d276:	2201      	movs	r2, #1
 800d278:	4619      	mov	r1, r3
 800d27a:	6878      	ldr	r0, [r7, #4]
 800d27c:	f001 fd52 	bl	800ed24 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d280:	e01d      	b.n	800d2be <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800d282:	6839      	ldr	r1, [r7, #0]
 800d284:	6878      	ldr	r0, [r7, #4]
 800d286:	f001 fcd0 	bl	800ec2a <USBD_CtlError>
            ret = USBD_FAIL;
 800d28a:	2303      	movs	r3, #3
 800d28c:	75fb      	strb	r3, [r7, #23]
          break;
 800d28e:	e016      	b.n	800d2be <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d296:	b2db      	uxtb	r3, r3
 800d298:	2b03      	cmp	r3, #3
 800d29a:	d00f      	beq.n	800d2bc <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800d29c:	6839      	ldr	r1, [r7, #0]
 800d29e:	6878      	ldr	r0, [r7, #4]
 800d2a0:	f001 fcc3 	bl	800ec2a <USBD_CtlError>
            ret = USBD_FAIL;
 800d2a4:	2303      	movs	r3, #3
 800d2a6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800d2a8:	e008      	b.n	800d2bc <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800d2aa:	6839      	ldr	r1, [r7, #0]
 800d2ac:	6878      	ldr	r0, [r7, #4]
 800d2ae:	f001 fcbc 	bl	800ec2a <USBD_CtlError>
          ret = USBD_FAIL;
 800d2b2:	2303      	movs	r3, #3
 800d2b4:	75fb      	strb	r3, [r7, #23]
          break;
 800d2b6:	e002      	b.n	800d2be <USBD_CDC_Setup+0x19e>
          break;
 800d2b8:	bf00      	nop
 800d2ba:	e008      	b.n	800d2ce <USBD_CDC_Setup+0x1ae>
          break;
 800d2bc:	bf00      	nop
      }
      break;
 800d2be:	e006      	b.n	800d2ce <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800d2c0:	6839      	ldr	r1, [r7, #0]
 800d2c2:	6878      	ldr	r0, [r7, #4]
 800d2c4:	f001 fcb1 	bl	800ec2a <USBD_CtlError>
      ret = USBD_FAIL;
 800d2c8:	2303      	movs	r3, #3
 800d2ca:	75fb      	strb	r3, [r7, #23]
      break;
 800d2cc:	bf00      	nop
  }

  return (uint8_t)ret;
 800d2ce:	7dfb      	ldrb	r3, [r7, #23]
}
 800d2d0:	4618      	mov	r0, r3
 800d2d2:	3718      	adds	r7, #24
 800d2d4:	46bd      	mov	sp, r7
 800d2d6:	bd80      	pop	{r7, pc}

0800d2d8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d2d8:	b580      	push	{r7, lr}
 800d2da:	b084      	sub	sp, #16
 800d2dc:	af00      	add	r7, sp, #0
 800d2de:	6078      	str	r0, [r7, #4]
 800d2e0:	460b      	mov	r3, r1
 800d2e2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d2ea:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	32b0      	adds	r2, #176	@ 0xb0
 800d2f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d2fa:	2b00      	cmp	r3, #0
 800d2fc:	d101      	bne.n	800d302 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800d2fe:	2303      	movs	r3, #3
 800d300:	e065      	b.n	800d3ce <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	32b0      	adds	r2, #176	@ 0xb0
 800d30c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d310:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800d312:	78fb      	ldrb	r3, [r7, #3]
 800d314:	f003 020f 	and.w	r2, r3, #15
 800d318:	6879      	ldr	r1, [r7, #4]
 800d31a:	4613      	mov	r3, r2
 800d31c:	009b      	lsls	r3, r3, #2
 800d31e:	4413      	add	r3, r2
 800d320:	009b      	lsls	r3, r3, #2
 800d322:	440b      	add	r3, r1
 800d324:	3318      	adds	r3, #24
 800d326:	681b      	ldr	r3, [r3, #0]
 800d328:	2b00      	cmp	r3, #0
 800d32a:	d02f      	beq.n	800d38c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800d32c:	78fb      	ldrb	r3, [r7, #3]
 800d32e:	f003 020f 	and.w	r2, r3, #15
 800d332:	6879      	ldr	r1, [r7, #4]
 800d334:	4613      	mov	r3, r2
 800d336:	009b      	lsls	r3, r3, #2
 800d338:	4413      	add	r3, r2
 800d33a:	009b      	lsls	r3, r3, #2
 800d33c:	440b      	add	r3, r1
 800d33e:	3318      	adds	r3, #24
 800d340:	681a      	ldr	r2, [r3, #0]
 800d342:	78fb      	ldrb	r3, [r7, #3]
 800d344:	f003 010f 	and.w	r1, r3, #15
 800d348:	68f8      	ldr	r0, [r7, #12]
 800d34a:	460b      	mov	r3, r1
 800d34c:	00db      	lsls	r3, r3, #3
 800d34e:	440b      	add	r3, r1
 800d350:	009b      	lsls	r3, r3, #2
 800d352:	4403      	add	r3, r0
 800d354:	331c      	adds	r3, #28
 800d356:	681b      	ldr	r3, [r3, #0]
 800d358:	fbb2 f1f3 	udiv	r1, r2, r3
 800d35c:	fb01 f303 	mul.w	r3, r1, r3
 800d360:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800d362:	2b00      	cmp	r3, #0
 800d364:	d112      	bne.n	800d38c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800d366:	78fb      	ldrb	r3, [r7, #3]
 800d368:	f003 020f 	and.w	r2, r3, #15
 800d36c:	6879      	ldr	r1, [r7, #4]
 800d36e:	4613      	mov	r3, r2
 800d370:	009b      	lsls	r3, r3, #2
 800d372:	4413      	add	r3, r2
 800d374:	009b      	lsls	r3, r3, #2
 800d376:	440b      	add	r3, r1
 800d378:	3318      	adds	r3, #24
 800d37a:	2200      	movs	r2, #0
 800d37c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800d37e:	78f9      	ldrb	r1, [r7, #3]
 800d380:	2300      	movs	r3, #0
 800d382:	2200      	movs	r2, #0
 800d384:	6878      	ldr	r0, [r7, #4]
 800d386:	f002 fa04 	bl	800f792 <USBD_LL_Transmit>
 800d38a:	e01f      	b.n	800d3cc <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800d38c:	68bb      	ldr	r3, [r7, #8]
 800d38e:	2200      	movs	r2, #0
 800d390:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d39a:	687a      	ldr	r2, [r7, #4]
 800d39c:	33b0      	adds	r3, #176	@ 0xb0
 800d39e:	009b      	lsls	r3, r3, #2
 800d3a0:	4413      	add	r3, r2
 800d3a2:	685b      	ldr	r3, [r3, #4]
 800d3a4:	691b      	ldr	r3, [r3, #16]
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	d010      	beq.n	800d3cc <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d3b0:	687a      	ldr	r2, [r7, #4]
 800d3b2:	33b0      	adds	r3, #176	@ 0xb0
 800d3b4:	009b      	lsls	r3, r3, #2
 800d3b6:	4413      	add	r3, r2
 800d3b8:	685b      	ldr	r3, [r3, #4]
 800d3ba:	691b      	ldr	r3, [r3, #16]
 800d3bc:	68ba      	ldr	r2, [r7, #8]
 800d3be:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800d3c2:	68ba      	ldr	r2, [r7, #8]
 800d3c4:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800d3c8:	78fa      	ldrb	r2, [r7, #3]
 800d3ca:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800d3cc:	2300      	movs	r3, #0
}
 800d3ce:	4618      	mov	r0, r3
 800d3d0:	3710      	adds	r7, #16
 800d3d2:	46bd      	mov	sp, r7
 800d3d4:	bd80      	pop	{r7, pc}

0800d3d6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d3d6:	b580      	push	{r7, lr}
 800d3d8:	b084      	sub	sp, #16
 800d3da:	af00      	add	r7, sp, #0
 800d3dc:	6078      	str	r0, [r7, #4]
 800d3de:	460b      	mov	r3, r1
 800d3e0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	32b0      	adds	r2, #176	@ 0xb0
 800d3ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d3f0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	32b0      	adds	r2, #176	@ 0xb0
 800d3fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d400:	2b00      	cmp	r3, #0
 800d402:	d101      	bne.n	800d408 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800d404:	2303      	movs	r3, #3
 800d406:	e01a      	b.n	800d43e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800d408:	78fb      	ldrb	r3, [r7, #3]
 800d40a:	4619      	mov	r1, r3
 800d40c:	6878      	ldr	r0, [r7, #4]
 800d40e:	f002 fa02 	bl	800f816 <USBD_LL_GetRxDataSize>
 800d412:	4602      	mov	r2, r0
 800d414:	68fb      	ldr	r3, [r7, #12]
 800d416:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d420:	687a      	ldr	r2, [r7, #4]
 800d422:	33b0      	adds	r3, #176	@ 0xb0
 800d424:	009b      	lsls	r3, r3, #2
 800d426:	4413      	add	r3, r2
 800d428:	685b      	ldr	r3, [r3, #4]
 800d42a:	68db      	ldr	r3, [r3, #12]
 800d42c:	68fa      	ldr	r2, [r7, #12]
 800d42e:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800d432:	68fa      	ldr	r2, [r7, #12]
 800d434:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800d438:	4611      	mov	r1, r2
 800d43a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800d43c:	2300      	movs	r3, #0
}
 800d43e:	4618      	mov	r0, r3
 800d440:	3710      	adds	r7, #16
 800d442:	46bd      	mov	sp, r7
 800d444:	bd80      	pop	{r7, pc}

0800d446 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800d446:	b580      	push	{r7, lr}
 800d448:	b084      	sub	sp, #16
 800d44a:	af00      	add	r7, sp, #0
 800d44c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	32b0      	adds	r2, #176	@ 0xb0
 800d458:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d45c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800d45e:	68fb      	ldr	r3, [r7, #12]
 800d460:	2b00      	cmp	r3, #0
 800d462:	d101      	bne.n	800d468 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800d464:	2303      	movs	r3, #3
 800d466:	e024      	b.n	800d4b2 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d46e:	687a      	ldr	r2, [r7, #4]
 800d470:	33b0      	adds	r3, #176	@ 0xb0
 800d472:	009b      	lsls	r3, r3, #2
 800d474:	4413      	add	r3, r2
 800d476:	685b      	ldr	r3, [r3, #4]
 800d478:	2b00      	cmp	r3, #0
 800d47a:	d019      	beq.n	800d4b0 <USBD_CDC_EP0_RxReady+0x6a>
 800d47c:	68fb      	ldr	r3, [r7, #12]
 800d47e:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800d482:	2bff      	cmp	r3, #255	@ 0xff
 800d484:	d014      	beq.n	800d4b0 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d48c:	687a      	ldr	r2, [r7, #4]
 800d48e:	33b0      	adds	r3, #176	@ 0xb0
 800d490:	009b      	lsls	r3, r3, #2
 800d492:	4413      	add	r3, r2
 800d494:	685b      	ldr	r3, [r3, #4]
 800d496:	689b      	ldr	r3, [r3, #8]
 800d498:	68fa      	ldr	r2, [r7, #12]
 800d49a:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800d49e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800d4a0:	68fa      	ldr	r2, [r7, #12]
 800d4a2:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800d4a6:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800d4a8:	68fb      	ldr	r3, [r7, #12]
 800d4aa:	22ff      	movs	r2, #255	@ 0xff
 800d4ac:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800d4b0:	2300      	movs	r3, #0
}
 800d4b2:	4618      	mov	r0, r3
 800d4b4:	3710      	adds	r7, #16
 800d4b6:	46bd      	mov	sp, r7
 800d4b8:	bd80      	pop	{r7, pc}
	...

0800d4bc <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800d4bc:	b580      	push	{r7, lr}
 800d4be:	b086      	sub	sp, #24
 800d4c0:	af00      	add	r7, sp, #0
 800d4c2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800d4c4:	2182      	movs	r1, #130	@ 0x82
 800d4c6:	4818      	ldr	r0, [pc, #96]	@ (800d528 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800d4c8:	f000 fd4f 	bl	800df6a <USBD_GetEpDesc>
 800d4cc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800d4ce:	2101      	movs	r1, #1
 800d4d0:	4815      	ldr	r0, [pc, #84]	@ (800d528 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800d4d2:	f000 fd4a 	bl	800df6a <USBD_GetEpDesc>
 800d4d6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800d4d8:	2181      	movs	r1, #129	@ 0x81
 800d4da:	4813      	ldr	r0, [pc, #76]	@ (800d528 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800d4dc:	f000 fd45 	bl	800df6a <USBD_GetEpDesc>
 800d4e0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800d4e2:	697b      	ldr	r3, [r7, #20]
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	d002      	beq.n	800d4ee <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800d4e8:	697b      	ldr	r3, [r7, #20]
 800d4ea:	2210      	movs	r2, #16
 800d4ec:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800d4ee:	693b      	ldr	r3, [r7, #16]
 800d4f0:	2b00      	cmp	r3, #0
 800d4f2:	d006      	beq.n	800d502 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d4f4:	693b      	ldr	r3, [r7, #16]
 800d4f6:	2200      	movs	r2, #0
 800d4f8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d4fc:	711a      	strb	r2, [r3, #4]
 800d4fe:	2200      	movs	r2, #0
 800d500:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800d502:	68fb      	ldr	r3, [r7, #12]
 800d504:	2b00      	cmp	r3, #0
 800d506:	d006      	beq.n	800d516 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d508:	68fb      	ldr	r3, [r7, #12]
 800d50a:	2200      	movs	r2, #0
 800d50c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d510:	711a      	strb	r2, [r3, #4]
 800d512:	2200      	movs	r2, #0
 800d514:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	2243      	movs	r2, #67	@ 0x43
 800d51a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800d51c:	4b02      	ldr	r3, [pc, #8]	@ (800d528 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800d51e:	4618      	mov	r0, r3
 800d520:	3718      	adds	r7, #24
 800d522:	46bd      	mov	sp, r7
 800d524:	bd80      	pop	{r7, pc}
 800d526:	bf00      	nop
 800d528:	24000088 	.word	0x24000088

0800d52c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800d52c:	b580      	push	{r7, lr}
 800d52e:	b086      	sub	sp, #24
 800d530:	af00      	add	r7, sp, #0
 800d532:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800d534:	2182      	movs	r1, #130	@ 0x82
 800d536:	4818      	ldr	r0, [pc, #96]	@ (800d598 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800d538:	f000 fd17 	bl	800df6a <USBD_GetEpDesc>
 800d53c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800d53e:	2101      	movs	r1, #1
 800d540:	4815      	ldr	r0, [pc, #84]	@ (800d598 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800d542:	f000 fd12 	bl	800df6a <USBD_GetEpDesc>
 800d546:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800d548:	2181      	movs	r1, #129	@ 0x81
 800d54a:	4813      	ldr	r0, [pc, #76]	@ (800d598 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800d54c:	f000 fd0d 	bl	800df6a <USBD_GetEpDesc>
 800d550:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800d552:	697b      	ldr	r3, [r7, #20]
 800d554:	2b00      	cmp	r3, #0
 800d556:	d002      	beq.n	800d55e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800d558:	697b      	ldr	r3, [r7, #20]
 800d55a:	2210      	movs	r2, #16
 800d55c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800d55e:	693b      	ldr	r3, [r7, #16]
 800d560:	2b00      	cmp	r3, #0
 800d562:	d006      	beq.n	800d572 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800d564:	693b      	ldr	r3, [r7, #16]
 800d566:	2200      	movs	r2, #0
 800d568:	711a      	strb	r2, [r3, #4]
 800d56a:	2200      	movs	r2, #0
 800d56c:	f042 0202 	orr.w	r2, r2, #2
 800d570:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800d572:	68fb      	ldr	r3, [r7, #12]
 800d574:	2b00      	cmp	r3, #0
 800d576:	d006      	beq.n	800d586 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800d578:	68fb      	ldr	r3, [r7, #12]
 800d57a:	2200      	movs	r2, #0
 800d57c:	711a      	strb	r2, [r3, #4]
 800d57e:	2200      	movs	r2, #0
 800d580:	f042 0202 	orr.w	r2, r2, #2
 800d584:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	2243      	movs	r2, #67	@ 0x43
 800d58a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800d58c:	4b02      	ldr	r3, [pc, #8]	@ (800d598 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800d58e:	4618      	mov	r0, r3
 800d590:	3718      	adds	r7, #24
 800d592:	46bd      	mov	sp, r7
 800d594:	bd80      	pop	{r7, pc}
 800d596:	bf00      	nop
 800d598:	24000088 	.word	0x24000088

0800d59c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800d59c:	b580      	push	{r7, lr}
 800d59e:	b086      	sub	sp, #24
 800d5a0:	af00      	add	r7, sp, #0
 800d5a2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800d5a4:	2182      	movs	r1, #130	@ 0x82
 800d5a6:	4818      	ldr	r0, [pc, #96]	@ (800d608 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800d5a8:	f000 fcdf 	bl	800df6a <USBD_GetEpDesc>
 800d5ac:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800d5ae:	2101      	movs	r1, #1
 800d5b0:	4815      	ldr	r0, [pc, #84]	@ (800d608 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800d5b2:	f000 fcda 	bl	800df6a <USBD_GetEpDesc>
 800d5b6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800d5b8:	2181      	movs	r1, #129	@ 0x81
 800d5ba:	4813      	ldr	r0, [pc, #76]	@ (800d608 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800d5bc:	f000 fcd5 	bl	800df6a <USBD_GetEpDesc>
 800d5c0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800d5c2:	697b      	ldr	r3, [r7, #20]
 800d5c4:	2b00      	cmp	r3, #0
 800d5c6:	d002      	beq.n	800d5ce <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800d5c8:	697b      	ldr	r3, [r7, #20]
 800d5ca:	2210      	movs	r2, #16
 800d5cc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800d5ce:	693b      	ldr	r3, [r7, #16]
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	d006      	beq.n	800d5e2 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d5d4:	693b      	ldr	r3, [r7, #16]
 800d5d6:	2200      	movs	r2, #0
 800d5d8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d5dc:	711a      	strb	r2, [r3, #4]
 800d5de:	2200      	movs	r2, #0
 800d5e0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800d5e2:	68fb      	ldr	r3, [r7, #12]
 800d5e4:	2b00      	cmp	r3, #0
 800d5e6:	d006      	beq.n	800d5f6 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d5e8:	68fb      	ldr	r3, [r7, #12]
 800d5ea:	2200      	movs	r2, #0
 800d5ec:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d5f0:	711a      	strb	r2, [r3, #4]
 800d5f2:	2200      	movs	r2, #0
 800d5f4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	2243      	movs	r2, #67	@ 0x43
 800d5fa:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800d5fc:	4b02      	ldr	r3, [pc, #8]	@ (800d608 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800d5fe:	4618      	mov	r0, r3
 800d600:	3718      	adds	r7, #24
 800d602:	46bd      	mov	sp, r7
 800d604:	bd80      	pop	{r7, pc}
 800d606:	bf00      	nop
 800d608:	24000088 	.word	0x24000088

0800d60c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800d60c:	b480      	push	{r7}
 800d60e:	b083      	sub	sp, #12
 800d610:	af00      	add	r7, sp, #0
 800d612:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	220a      	movs	r2, #10
 800d618:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800d61a:	4b03      	ldr	r3, [pc, #12]	@ (800d628 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800d61c:	4618      	mov	r0, r3
 800d61e:	370c      	adds	r7, #12
 800d620:	46bd      	mov	sp, r7
 800d622:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d626:	4770      	bx	lr
 800d628:	24000044 	.word	0x24000044

0800d62c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800d62c:	b480      	push	{r7}
 800d62e:	b083      	sub	sp, #12
 800d630:	af00      	add	r7, sp, #0
 800d632:	6078      	str	r0, [r7, #4]
 800d634:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800d636:	683b      	ldr	r3, [r7, #0]
 800d638:	2b00      	cmp	r3, #0
 800d63a:	d101      	bne.n	800d640 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800d63c:	2303      	movs	r3, #3
 800d63e:	e009      	b.n	800d654 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d646:	687a      	ldr	r2, [r7, #4]
 800d648:	33b0      	adds	r3, #176	@ 0xb0
 800d64a:	009b      	lsls	r3, r3, #2
 800d64c:	4413      	add	r3, r2
 800d64e:	683a      	ldr	r2, [r7, #0]
 800d650:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800d652:	2300      	movs	r3, #0
}
 800d654:	4618      	mov	r0, r3
 800d656:	370c      	adds	r7, #12
 800d658:	46bd      	mov	sp, r7
 800d65a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d65e:	4770      	bx	lr

0800d660 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800d660:	b480      	push	{r7}
 800d662:	b087      	sub	sp, #28
 800d664:	af00      	add	r7, sp, #0
 800d666:	60f8      	str	r0, [r7, #12]
 800d668:	60b9      	str	r1, [r7, #8]
 800d66a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d66c:	68fb      	ldr	r3, [r7, #12]
 800d66e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d672:	68fb      	ldr	r3, [r7, #12]
 800d674:	32b0      	adds	r2, #176	@ 0xb0
 800d676:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d67a:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800d67c:	697b      	ldr	r3, [r7, #20]
 800d67e:	2b00      	cmp	r3, #0
 800d680:	d101      	bne.n	800d686 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800d682:	2303      	movs	r3, #3
 800d684:	e008      	b.n	800d698 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800d686:	697b      	ldr	r3, [r7, #20]
 800d688:	68ba      	ldr	r2, [r7, #8]
 800d68a:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800d68e:	697b      	ldr	r3, [r7, #20]
 800d690:	687a      	ldr	r2, [r7, #4]
 800d692:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800d696:	2300      	movs	r3, #0
}
 800d698:	4618      	mov	r0, r3
 800d69a:	371c      	adds	r7, #28
 800d69c:	46bd      	mov	sp, r7
 800d69e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6a2:	4770      	bx	lr

0800d6a4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800d6a4:	b480      	push	{r7}
 800d6a6:	b085      	sub	sp, #20
 800d6a8:	af00      	add	r7, sp, #0
 800d6aa:	6078      	str	r0, [r7, #4]
 800d6ac:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	32b0      	adds	r2, #176	@ 0xb0
 800d6b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d6bc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800d6be:	68fb      	ldr	r3, [r7, #12]
 800d6c0:	2b00      	cmp	r3, #0
 800d6c2:	d101      	bne.n	800d6c8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800d6c4:	2303      	movs	r3, #3
 800d6c6:	e004      	b.n	800d6d2 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800d6c8:	68fb      	ldr	r3, [r7, #12]
 800d6ca:	683a      	ldr	r2, [r7, #0]
 800d6cc:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800d6d0:	2300      	movs	r3, #0
}
 800d6d2:	4618      	mov	r0, r3
 800d6d4:	3714      	adds	r7, #20
 800d6d6:	46bd      	mov	sp, r7
 800d6d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6dc:	4770      	bx	lr
	...

0800d6e0 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800d6e0:	b580      	push	{r7, lr}
 800d6e2:	b084      	sub	sp, #16
 800d6e4:	af00      	add	r7, sp, #0
 800d6e6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	32b0      	adds	r2, #176	@ 0xb0
 800d6f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d6f6:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800d6f8:	2301      	movs	r3, #1
 800d6fa:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800d6fc:	68bb      	ldr	r3, [r7, #8]
 800d6fe:	2b00      	cmp	r3, #0
 800d700:	d101      	bne.n	800d706 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800d702:	2303      	movs	r3, #3
 800d704:	e025      	b.n	800d752 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800d706:	68bb      	ldr	r3, [r7, #8]
 800d708:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800d70c:	2b00      	cmp	r3, #0
 800d70e:	d11f      	bne.n	800d750 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800d710:	68bb      	ldr	r3, [r7, #8]
 800d712:	2201      	movs	r2, #1
 800d714:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800d718:	4b10      	ldr	r3, [pc, #64]	@ (800d75c <USBD_CDC_TransmitPacket+0x7c>)
 800d71a:	781b      	ldrb	r3, [r3, #0]
 800d71c:	f003 020f 	and.w	r2, r3, #15
 800d720:	68bb      	ldr	r3, [r7, #8]
 800d722:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800d726:	6878      	ldr	r0, [r7, #4]
 800d728:	4613      	mov	r3, r2
 800d72a:	009b      	lsls	r3, r3, #2
 800d72c:	4413      	add	r3, r2
 800d72e:	009b      	lsls	r3, r3, #2
 800d730:	4403      	add	r3, r0
 800d732:	3318      	adds	r3, #24
 800d734:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800d736:	4b09      	ldr	r3, [pc, #36]	@ (800d75c <USBD_CDC_TransmitPacket+0x7c>)
 800d738:	7819      	ldrb	r1, [r3, #0]
 800d73a:	68bb      	ldr	r3, [r7, #8]
 800d73c:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800d740:	68bb      	ldr	r3, [r7, #8]
 800d742:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800d746:	6878      	ldr	r0, [r7, #4]
 800d748:	f002 f823 	bl	800f792 <USBD_LL_Transmit>

    ret = USBD_OK;
 800d74c:	2300      	movs	r3, #0
 800d74e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800d750:	7bfb      	ldrb	r3, [r7, #15]
}
 800d752:	4618      	mov	r0, r3
 800d754:	3710      	adds	r7, #16
 800d756:	46bd      	mov	sp, r7
 800d758:	bd80      	pop	{r7, pc}
 800d75a:	bf00      	nop
 800d75c:	240000cb 	.word	0x240000cb

0800d760 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800d760:	b580      	push	{r7, lr}
 800d762:	b084      	sub	sp, #16
 800d764:	af00      	add	r7, sp, #0
 800d766:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	32b0      	adds	r2, #176	@ 0xb0
 800d772:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d776:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	32b0      	adds	r2, #176	@ 0xb0
 800d782:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d786:	2b00      	cmp	r3, #0
 800d788:	d101      	bne.n	800d78e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800d78a:	2303      	movs	r3, #3
 800d78c:	e018      	b.n	800d7c0 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	7c1b      	ldrb	r3, [r3, #16]
 800d792:	2b00      	cmp	r3, #0
 800d794:	d10a      	bne.n	800d7ac <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d796:	4b0c      	ldr	r3, [pc, #48]	@ (800d7c8 <USBD_CDC_ReceivePacket+0x68>)
 800d798:	7819      	ldrb	r1, [r3, #0]
 800d79a:	68fb      	ldr	r3, [r7, #12]
 800d79c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800d7a0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d7a4:	6878      	ldr	r0, [r7, #4]
 800d7a6:	f002 f815 	bl	800f7d4 <USBD_LL_PrepareReceive>
 800d7aa:	e008      	b.n	800d7be <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d7ac:	4b06      	ldr	r3, [pc, #24]	@ (800d7c8 <USBD_CDC_ReceivePacket+0x68>)
 800d7ae:	7819      	ldrb	r1, [r3, #0]
 800d7b0:	68fb      	ldr	r3, [r7, #12]
 800d7b2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800d7b6:	2340      	movs	r3, #64	@ 0x40
 800d7b8:	6878      	ldr	r0, [r7, #4]
 800d7ba:	f002 f80b 	bl	800f7d4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800d7be:	2300      	movs	r3, #0
}
 800d7c0:	4618      	mov	r0, r3
 800d7c2:	3710      	adds	r7, #16
 800d7c4:	46bd      	mov	sp, r7
 800d7c6:	bd80      	pop	{r7, pc}
 800d7c8:	240000cc 	.word	0x240000cc

0800d7cc <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800d7cc:	b580      	push	{r7, lr}
 800d7ce:	b086      	sub	sp, #24
 800d7d0:	af00      	add	r7, sp, #0
 800d7d2:	60f8      	str	r0, [r7, #12]
 800d7d4:	60b9      	str	r1, [r7, #8]
 800d7d6:	4613      	mov	r3, r2
 800d7d8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800d7da:	68fb      	ldr	r3, [r7, #12]
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	d101      	bne.n	800d7e4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800d7e0:	2303      	movs	r3, #3
 800d7e2:	e01f      	b.n	800d824 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800d7e4:	68fb      	ldr	r3, [r7, #12]
 800d7e6:	2200      	movs	r2, #0
 800d7e8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800d7ec:	68fb      	ldr	r3, [r7, #12]
 800d7ee:	2200      	movs	r2, #0
 800d7f0:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800d7f4:	68fb      	ldr	r3, [r7, #12]
 800d7f6:	2200      	movs	r2, #0
 800d7f8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800d7fc:	68bb      	ldr	r3, [r7, #8]
 800d7fe:	2b00      	cmp	r3, #0
 800d800:	d003      	beq.n	800d80a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800d802:	68fb      	ldr	r3, [r7, #12]
 800d804:	68ba      	ldr	r2, [r7, #8]
 800d806:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d80a:	68fb      	ldr	r3, [r7, #12]
 800d80c:	2201      	movs	r2, #1
 800d80e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800d812:	68fb      	ldr	r3, [r7, #12]
 800d814:	79fa      	ldrb	r2, [r7, #7]
 800d816:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800d818:	68f8      	ldr	r0, [r7, #12]
 800d81a:	f001 fe81 	bl	800f520 <USBD_LL_Init>
 800d81e:	4603      	mov	r3, r0
 800d820:	75fb      	strb	r3, [r7, #23]

  return ret;
 800d822:	7dfb      	ldrb	r3, [r7, #23]
}
 800d824:	4618      	mov	r0, r3
 800d826:	3718      	adds	r7, #24
 800d828:	46bd      	mov	sp, r7
 800d82a:	bd80      	pop	{r7, pc}

0800d82c <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800d82c:	b580      	push	{r7, lr}
 800d82e:	b084      	sub	sp, #16
 800d830:	af00      	add	r7, sp, #0
 800d832:	6078      	str	r0, [r7, #4]
 800d834:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d836:	2300      	movs	r3, #0
 800d838:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800d83a:	683b      	ldr	r3, [r7, #0]
 800d83c:	2b00      	cmp	r3, #0
 800d83e:	d101      	bne.n	800d844 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800d840:	2303      	movs	r3, #3
 800d842:	e025      	b.n	800d890 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	683a      	ldr	r2, [r7, #0]
 800d848:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	32ae      	adds	r2, #174	@ 0xae
 800d856:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d85a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d85c:	2b00      	cmp	r3, #0
 800d85e:	d00f      	beq.n	800d880 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	32ae      	adds	r2, #174	@ 0xae
 800d86a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d86e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d870:	f107 020e 	add.w	r2, r7, #14
 800d874:	4610      	mov	r0, r2
 800d876:	4798      	blx	r3
 800d878:	4602      	mov	r2, r0
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800d886:	1c5a      	adds	r2, r3, #1
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800d88e:	2300      	movs	r3, #0
}
 800d890:	4618      	mov	r0, r3
 800d892:	3710      	adds	r7, #16
 800d894:	46bd      	mov	sp, r7
 800d896:	bd80      	pop	{r7, pc}

0800d898 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800d898:	b580      	push	{r7, lr}
 800d89a:	b082      	sub	sp, #8
 800d89c:	af00      	add	r7, sp, #0
 800d89e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800d8a0:	6878      	ldr	r0, [r7, #4]
 800d8a2:	f001 fe8d 	bl	800f5c0 <USBD_LL_Start>
 800d8a6:	4603      	mov	r3, r0
}
 800d8a8:	4618      	mov	r0, r3
 800d8aa:	3708      	adds	r7, #8
 800d8ac:	46bd      	mov	sp, r7
 800d8ae:	bd80      	pop	{r7, pc}

0800d8b0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800d8b0:	b480      	push	{r7}
 800d8b2:	b083      	sub	sp, #12
 800d8b4:	af00      	add	r7, sp, #0
 800d8b6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800d8b8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800d8ba:	4618      	mov	r0, r3
 800d8bc:	370c      	adds	r7, #12
 800d8be:	46bd      	mov	sp, r7
 800d8c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8c4:	4770      	bx	lr

0800d8c6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d8c6:	b580      	push	{r7, lr}
 800d8c8:	b084      	sub	sp, #16
 800d8ca:	af00      	add	r7, sp, #0
 800d8cc:	6078      	str	r0, [r7, #4]
 800d8ce:	460b      	mov	r3, r1
 800d8d0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800d8d2:	2300      	movs	r3, #0
 800d8d4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d8dc:	2b00      	cmp	r3, #0
 800d8de:	d009      	beq.n	800d8f4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d8e6:	681b      	ldr	r3, [r3, #0]
 800d8e8:	78fa      	ldrb	r2, [r7, #3]
 800d8ea:	4611      	mov	r1, r2
 800d8ec:	6878      	ldr	r0, [r7, #4]
 800d8ee:	4798      	blx	r3
 800d8f0:	4603      	mov	r3, r0
 800d8f2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800d8f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800d8f6:	4618      	mov	r0, r3
 800d8f8:	3710      	adds	r7, #16
 800d8fa:	46bd      	mov	sp, r7
 800d8fc:	bd80      	pop	{r7, pc}

0800d8fe <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d8fe:	b580      	push	{r7, lr}
 800d900:	b084      	sub	sp, #16
 800d902:	af00      	add	r7, sp, #0
 800d904:	6078      	str	r0, [r7, #4]
 800d906:	460b      	mov	r3, r1
 800d908:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800d90a:	2300      	movs	r3, #0
 800d90c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d914:	685b      	ldr	r3, [r3, #4]
 800d916:	78fa      	ldrb	r2, [r7, #3]
 800d918:	4611      	mov	r1, r2
 800d91a:	6878      	ldr	r0, [r7, #4]
 800d91c:	4798      	blx	r3
 800d91e:	4603      	mov	r3, r0
 800d920:	2b00      	cmp	r3, #0
 800d922:	d001      	beq.n	800d928 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800d924:	2303      	movs	r3, #3
 800d926:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800d928:	7bfb      	ldrb	r3, [r7, #15]
}
 800d92a:	4618      	mov	r0, r3
 800d92c:	3710      	adds	r7, #16
 800d92e:	46bd      	mov	sp, r7
 800d930:	bd80      	pop	{r7, pc}

0800d932 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800d932:	b580      	push	{r7, lr}
 800d934:	b084      	sub	sp, #16
 800d936:	af00      	add	r7, sp, #0
 800d938:	6078      	str	r0, [r7, #4]
 800d93a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800d942:	6839      	ldr	r1, [r7, #0]
 800d944:	4618      	mov	r0, r3
 800d946:	f001 f936 	bl	800ebb6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	2201      	movs	r2, #1
 800d94e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800d958:	461a      	mov	r2, r3
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800d966:	f003 031f 	and.w	r3, r3, #31
 800d96a:	2b02      	cmp	r3, #2
 800d96c:	d01a      	beq.n	800d9a4 <USBD_LL_SetupStage+0x72>
 800d96e:	2b02      	cmp	r3, #2
 800d970:	d822      	bhi.n	800d9b8 <USBD_LL_SetupStage+0x86>
 800d972:	2b00      	cmp	r3, #0
 800d974:	d002      	beq.n	800d97c <USBD_LL_SetupStage+0x4a>
 800d976:	2b01      	cmp	r3, #1
 800d978:	d00a      	beq.n	800d990 <USBD_LL_SetupStage+0x5e>
 800d97a:	e01d      	b.n	800d9b8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800d982:	4619      	mov	r1, r3
 800d984:	6878      	ldr	r0, [r7, #4]
 800d986:	f000 fb63 	bl	800e050 <USBD_StdDevReq>
 800d98a:	4603      	mov	r3, r0
 800d98c:	73fb      	strb	r3, [r7, #15]
      break;
 800d98e:	e020      	b.n	800d9d2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800d996:	4619      	mov	r1, r3
 800d998:	6878      	ldr	r0, [r7, #4]
 800d99a:	f000 fbcb 	bl	800e134 <USBD_StdItfReq>
 800d99e:	4603      	mov	r3, r0
 800d9a0:	73fb      	strb	r3, [r7, #15]
      break;
 800d9a2:	e016      	b.n	800d9d2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800d9aa:	4619      	mov	r1, r3
 800d9ac:	6878      	ldr	r0, [r7, #4]
 800d9ae:	f000 fc2d 	bl	800e20c <USBD_StdEPReq>
 800d9b2:	4603      	mov	r3, r0
 800d9b4:	73fb      	strb	r3, [r7, #15]
      break;
 800d9b6:	e00c      	b.n	800d9d2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800d9be:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800d9c2:	b2db      	uxtb	r3, r3
 800d9c4:	4619      	mov	r1, r3
 800d9c6:	6878      	ldr	r0, [r7, #4]
 800d9c8:	f001 fe5a 	bl	800f680 <USBD_LL_StallEP>
 800d9cc:	4603      	mov	r3, r0
 800d9ce:	73fb      	strb	r3, [r7, #15]
      break;
 800d9d0:	bf00      	nop
  }

  return ret;
 800d9d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800d9d4:	4618      	mov	r0, r3
 800d9d6:	3710      	adds	r7, #16
 800d9d8:	46bd      	mov	sp, r7
 800d9da:	bd80      	pop	{r7, pc}

0800d9dc <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800d9dc:	b580      	push	{r7, lr}
 800d9de:	b086      	sub	sp, #24
 800d9e0:	af00      	add	r7, sp, #0
 800d9e2:	60f8      	str	r0, [r7, #12]
 800d9e4:	460b      	mov	r3, r1
 800d9e6:	607a      	str	r2, [r7, #4]
 800d9e8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800d9ea:	2300      	movs	r3, #0
 800d9ec:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800d9ee:	7afb      	ldrb	r3, [r7, #11]
 800d9f0:	2b00      	cmp	r3, #0
 800d9f2:	d16e      	bne.n	800dad2 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800d9f4:	68fb      	ldr	r3, [r7, #12]
 800d9f6:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800d9fa:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800d9fc:	68fb      	ldr	r3, [r7, #12]
 800d9fe:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800da02:	2b03      	cmp	r3, #3
 800da04:	f040 8098 	bne.w	800db38 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800da08:	693b      	ldr	r3, [r7, #16]
 800da0a:	689a      	ldr	r2, [r3, #8]
 800da0c:	693b      	ldr	r3, [r7, #16]
 800da0e:	68db      	ldr	r3, [r3, #12]
 800da10:	429a      	cmp	r2, r3
 800da12:	d913      	bls.n	800da3c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800da14:	693b      	ldr	r3, [r7, #16]
 800da16:	689a      	ldr	r2, [r3, #8]
 800da18:	693b      	ldr	r3, [r7, #16]
 800da1a:	68db      	ldr	r3, [r3, #12]
 800da1c:	1ad2      	subs	r2, r2, r3
 800da1e:	693b      	ldr	r3, [r7, #16]
 800da20:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800da22:	693b      	ldr	r3, [r7, #16]
 800da24:	68da      	ldr	r2, [r3, #12]
 800da26:	693b      	ldr	r3, [r7, #16]
 800da28:	689b      	ldr	r3, [r3, #8]
 800da2a:	4293      	cmp	r3, r2
 800da2c:	bf28      	it	cs
 800da2e:	4613      	movcs	r3, r2
 800da30:	461a      	mov	r2, r3
 800da32:	6879      	ldr	r1, [r7, #4]
 800da34:	68f8      	ldr	r0, [r7, #12]
 800da36:	f001 f9be 	bl	800edb6 <USBD_CtlContinueRx>
 800da3a:	e07d      	b.n	800db38 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800da3c:	68fb      	ldr	r3, [r7, #12]
 800da3e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800da42:	f003 031f 	and.w	r3, r3, #31
 800da46:	2b02      	cmp	r3, #2
 800da48:	d014      	beq.n	800da74 <USBD_LL_DataOutStage+0x98>
 800da4a:	2b02      	cmp	r3, #2
 800da4c:	d81d      	bhi.n	800da8a <USBD_LL_DataOutStage+0xae>
 800da4e:	2b00      	cmp	r3, #0
 800da50:	d002      	beq.n	800da58 <USBD_LL_DataOutStage+0x7c>
 800da52:	2b01      	cmp	r3, #1
 800da54:	d003      	beq.n	800da5e <USBD_LL_DataOutStage+0x82>
 800da56:	e018      	b.n	800da8a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800da58:	2300      	movs	r3, #0
 800da5a:	75bb      	strb	r3, [r7, #22]
            break;
 800da5c:	e018      	b.n	800da90 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800da5e:	68fb      	ldr	r3, [r7, #12]
 800da60:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800da64:	b2db      	uxtb	r3, r3
 800da66:	4619      	mov	r1, r3
 800da68:	68f8      	ldr	r0, [r7, #12]
 800da6a:	f000 fa64 	bl	800df36 <USBD_CoreFindIF>
 800da6e:	4603      	mov	r3, r0
 800da70:	75bb      	strb	r3, [r7, #22]
            break;
 800da72:	e00d      	b.n	800da90 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800da74:	68fb      	ldr	r3, [r7, #12]
 800da76:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800da7a:	b2db      	uxtb	r3, r3
 800da7c:	4619      	mov	r1, r3
 800da7e:	68f8      	ldr	r0, [r7, #12]
 800da80:	f000 fa66 	bl	800df50 <USBD_CoreFindEP>
 800da84:	4603      	mov	r3, r0
 800da86:	75bb      	strb	r3, [r7, #22]
            break;
 800da88:	e002      	b.n	800da90 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800da8a:	2300      	movs	r3, #0
 800da8c:	75bb      	strb	r3, [r7, #22]
            break;
 800da8e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800da90:	7dbb      	ldrb	r3, [r7, #22]
 800da92:	2b00      	cmp	r3, #0
 800da94:	d119      	bne.n	800daca <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800da96:	68fb      	ldr	r3, [r7, #12]
 800da98:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800da9c:	b2db      	uxtb	r3, r3
 800da9e:	2b03      	cmp	r3, #3
 800daa0:	d113      	bne.n	800daca <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800daa2:	7dba      	ldrb	r2, [r7, #22]
 800daa4:	68fb      	ldr	r3, [r7, #12]
 800daa6:	32ae      	adds	r2, #174	@ 0xae
 800daa8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800daac:	691b      	ldr	r3, [r3, #16]
 800daae:	2b00      	cmp	r3, #0
 800dab0:	d00b      	beq.n	800daca <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800dab2:	7dba      	ldrb	r2, [r7, #22]
 800dab4:	68fb      	ldr	r3, [r7, #12]
 800dab6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800daba:	7dba      	ldrb	r2, [r7, #22]
 800dabc:	68fb      	ldr	r3, [r7, #12]
 800dabe:	32ae      	adds	r2, #174	@ 0xae
 800dac0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dac4:	691b      	ldr	r3, [r3, #16]
 800dac6:	68f8      	ldr	r0, [r7, #12]
 800dac8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800daca:	68f8      	ldr	r0, [r7, #12]
 800dacc:	f001 f984 	bl	800edd8 <USBD_CtlSendStatus>
 800dad0:	e032      	b.n	800db38 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800dad2:	7afb      	ldrb	r3, [r7, #11]
 800dad4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800dad8:	b2db      	uxtb	r3, r3
 800dada:	4619      	mov	r1, r3
 800dadc:	68f8      	ldr	r0, [r7, #12]
 800dade:	f000 fa37 	bl	800df50 <USBD_CoreFindEP>
 800dae2:	4603      	mov	r3, r0
 800dae4:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800dae6:	7dbb      	ldrb	r3, [r7, #22]
 800dae8:	2bff      	cmp	r3, #255	@ 0xff
 800daea:	d025      	beq.n	800db38 <USBD_LL_DataOutStage+0x15c>
 800daec:	7dbb      	ldrb	r3, [r7, #22]
 800daee:	2b00      	cmp	r3, #0
 800daf0:	d122      	bne.n	800db38 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800daf2:	68fb      	ldr	r3, [r7, #12]
 800daf4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800daf8:	b2db      	uxtb	r3, r3
 800dafa:	2b03      	cmp	r3, #3
 800dafc:	d117      	bne.n	800db2e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800dafe:	7dba      	ldrb	r2, [r7, #22]
 800db00:	68fb      	ldr	r3, [r7, #12]
 800db02:	32ae      	adds	r2, #174	@ 0xae
 800db04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800db08:	699b      	ldr	r3, [r3, #24]
 800db0a:	2b00      	cmp	r3, #0
 800db0c:	d00f      	beq.n	800db2e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800db0e:	7dba      	ldrb	r2, [r7, #22]
 800db10:	68fb      	ldr	r3, [r7, #12]
 800db12:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800db16:	7dba      	ldrb	r2, [r7, #22]
 800db18:	68fb      	ldr	r3, [r7, #12]
 800db1a:	32ae      	adds	r2, #174	@ 0xae
 800db1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800db20:	699b      	ldr	r3, [r3, #24]
 800db22:	7afa      	ldrb	r2, [r7, #11]
 800db24:	4611      	mov	r1, r2
 800db26:	68f8      	ldr	r0, [r7, #12]
 800db28:	4798      	blx	r3
 800db2a:	4603      	mov	r3, r0
 800db2c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800db2e:	7dfb      	ldrb	r3, [r7, #23]
 800db30:	2b00      	cmp	r3, #0
 800db32:	d001      	beq.n	800db38 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800db34:	7dfb      	ldrb	r3, [r7, #23]
 800db36:	e000      	b.n	800db3a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800db38:	2300      	movs	r3, #0
}
 800db3a:	4618      	mov	r0, r3
 800db3c:	3718      	adds	r7, #24
 800db3e:	46bd      	mov	sp, r7
 800db40:	bd80      	pop	{r7, pc}

0800db42 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800db42:	b580      	push	{r7, lr}
 800db44:	b086      	sub	sp, #24
 800db46:	af00      	add	r7, sp, #0
 800db48:	60f8      	str	r0, [r7, #12]
 800db4a:	460b      	mov	r3, r1
 800db4c:	607a      	str	r2, [r7, #4]
 800db4e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800db50:	7afb      	ldrb	r3, [r7, #11]
 800db52:	2b00      	cmp	r3, #0
 800db54:	d16f      	bne.n	800dc36 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800db56:	68fb      	ldr	r3, [r7, #12]
 800db58:	3314      	adds	r3, #20
 800db5a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800db5c:	68fb      	ldr	r3, [r7, #12]
 800db5e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800db62:	2b02      	cmp	r3, #2
 800db64:	d15a      	bne.n	800dc1c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800db66:	693b      	ldr	r3, [r7, #16]
 800db68:	689a      	ldr	r2, [r3, #8]
 800db6a:	693b      	ldr	r3, [r7, #16]
 800db6c:	68db      	ldr	r3, [r3, #12]
 800db6e:	429a      	cmp	r2, r3
 800db70:	d914      	bls.n	800db9c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800db72:	693b      	ldr	r3, [r7, #16]
 800db74:	689a      	ldr	r2, [r3, #8]
 800db76:	693b      	ldr	r3, [r7, #16]
 800db78:	68db      	ldr	r3, [r3, #12]
 800db7a:	1ad2      	subs	r2, r2, r3
 800db7c:	693b      	ldr	r3, [r7, #16]
 800db7e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800db80:	693b      	ldr	r3, [r7, #16]
 800db82:	689b      	ldr	r3, [r3, #8]
 800db84:	461a      	mov	r2, r3
 800db86:	6879      	ldr	r1, [r7, #4]
 800db88:	68f8      	ldr	r0, [r7, #12]
 800db8a:	f001 f8e6 	bl	800ed5a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800db8e:	2300      	movs	r3, #0
 800db90:	2200      	movs	r2, #0
 800db92:	2100      	movs	r1, #0
 800db94:	68f8      	ldr	r0, [r7, #12]
 800db96:	f001 fe1d 	bl	800f7d4 <USBD_LL_PrepareReceive>
 800db9a:	e03f      	b.n	800dc1c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800db9c:	693b      	ldr	r3, [r7, #16]
 800db9e:	68da      	ldr	r2, [r3, #12]
 800dba0:	693b      	ldr	r3, [r7, #16]
 800dba2:	689b      	ldr	r3, [r3, #8]
 800dba4:	429a      	cmp	r2, r3
 800dba6:	d11c      	bne.n	800dbe2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800dba8:	693b      	ldr	r3, [r7, #16]
 800dbaa:	685a      	ldr	r2, [r3, #4]
 800dbac:	693b      	ldr	r3, [r7, #16]
 800dbae:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800dbb0:	429a      	cmp	r2, r3
 800dbb2:	d316      	bcc.n	800dbe2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800dbb4:	693b      	ldr	r3, [r7, #16]
 800dbb6:	685a      	ldr	r2, [r3, #4]
 800dbb8:	68fb      	ldr	r3, [r7, #12]
 800dbba:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800dbbe:	429a      	cmp	r2, r3
 800dbc0:	d20f      	bcs.n	800dbe2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800dbc2:	2200      	movs	r2, #0
 800dbc4:	2100      	movs	r1, #0
 800dbc6:	68f8      	ldr	r0, [r7, #12]
 800dbc8:	f001 f8c7 	bl	800ed5a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800dbcc:	68fb      	ldr	r3, [r7, #12]
 800dbce:	2200      	movs	r2, #0
 800dbd0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800dbd4:	2300      	movs	r3, #0
 800dbd6:	2200      	movs	r2, #0
 800dbd8:	2100      	movs	r1, #0
 800dbda:	68f8      	ldr	r0, [r7, #12]
 800dbdc:	f001 fdfa 	bl	800f7d4 <USBD_LL_PrepareReceive>
 800dbe0:	e01c      	b.n	800dc1c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dbe2:	68fb      	ldr	r3, [r7, #12]
 800dbe4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dbe8:	b2db      	uxtb	r3, r3
 800dbea:	2b03      	cmp	r3, #3
 800dbec:	d10f      	bne.n	800dc0e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800dbee:	68fb      	ldr	r3, [r7, #12]
 800dbf0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dbf4:	68db      	ldr	r3, [r3, #12]
 800dbf6:	2b00      	cmp	r3, #0
 800dbf8:	d009      	beq.n	800dc0e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800dbfa:	68fb      	ldr	r3, [r7, #12]
 800dbfc:	2200      	movs	r2, #0
 800dbfe:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800dc02:	68fb      	ldr	r3, [r7, #12]
 800dc04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dc08:	68db      	ldr	r3, [r3, #12]
 800dc0a:	68f8      	ldr	r0, [r7, #12]
 800dc0c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800dc0e:	2180      	movs	r1, #128	@ 0x80
 800dc10:	68f8      	ldr	r0, [r7, #12]
 800dc12:	f001 fd35 	bl	800f680 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800dc16:	68f8      	ldr	r0, [r7, #12]
 800dc18:	f001 f8f1 	bl	800edfe <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800dc1c:	68fb      	ldr	r3, [r7, #12]
 800dc1e:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800dc22:	2b00      	cmp	r3, #0
 800dc24:	d03a      	beq.n	800dc9c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800dc26:	68f8      	ldr	r0, [r7, #12]
 800dc28:	f7ff fe42 	bl	800d8b0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800dc2c:	68fb      	ldr	r3, [r7, #12]
 800dc2e:	2200      	movs	r2, #0
 800dc30:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800dc34:	e032      	b.n	800dc9c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800dc36:	7afb      	ldrb	r3, [r7, #11]
 800dc38:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800dc3c:	b2db      	uxtb	r3, r3
 800dc3e:	4619      	mov	r1, r3
 800dc40:	68f8      	ldr	r0, [r7, #12]
 800dc42:	f000 f985 	bl	800df50 <USBD_CoreFindEP>
 800dc46:	4603      	mov	r3, r0
 800dc48:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800dc4a:	7dfb      	ldrb	r3, [r7, #23]
 800dc4c:	2bff      	cmp	r3, #255	@ 0xff
 800dc4e:	d025      	beq.n	800dc9c <USBD_LL_DataInStage+0x15a>
 800dc50:	7dfb      	ldrb	r3, [r7, #23]
 800dc52:	2b00      	cmp	r3, #0
 800dc54:	d122      	bne.n	800dc9c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dc56:	68fb      	ldr	r3, [r7, #12]
 800dc58:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dc5c:	b2db      	uxtb	r3, r3
 800dc5e:	2b03      	cmp	r3, #3
 800dc60:	d11c      	bne.n	800dc9c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800dc62:	7dfa      	ldrb	r2, [r7, #23]
 800dc64:	68fb      	ldr	r3, [r7, #12]
 800dc66:	32ae      	adds	r2, #174	@ 0xae
 800dc68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dc6c:	695b      	ldr	r3, [r3, #20]
 800dc6e:	2b00      	cmp	r3, #0
 800dc70:	d014      	beq.n	800dc9c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800dc72:	7dfa      	ldrb	r2, [r7, #23]
 800dc74:	68fb      	ldr	r3, [r7, #12]
 800dc76:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800dc7a:	7dfa      	ldrb	r2, [r7, #23]
 800dc7c:	68fb      	ldr	r3, [r7, #12]
 800dc7e:	32ae      	adds	r2, #174	@ 0xae
 800dc80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dc84:	695b      	ldr	r3, [r3, #20]
 800dc86:	7afa      	ldrb	r2, [r7, #11]
 800dc88:	4611      	mov	r1, r2
 800dc8a:	68f8      	ldr	r0, [r7, #12]
 800dc8c:	4798      	blx	r3
 800dc8e:	4603      	mov	r3, r0
 800dc90:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800dc92:	7dbb      	ldrb	r3, [r7, #22]
 800dc94:	2b00      	cmp	r3, #0
 800dc96:	d001      	beq.n	800dc9c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800dc98:	7dbb      	ldrb	r3, [r7, #22]
 800dc9a:	e000      	b.n	800dc9e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800dc9c:	2300      	movs	r3, #0
}
 800dc9e:	4618      	mov	r0, r3
 800dca0:	3718      	adds	r7, #24
 800dca2:	46bd      	mov	sp, r7
 800dca4:	bd80      	pop	{r7, pc}

0800dca6 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800dca6:	b580      	push	{r7, lr}
 800dca8:	b084      	sub	sp, #16
 800dcaa:	af00      	add	r7, sp, #0
 800dcac:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800dcae:	2300      	movs	r3, #0
 800dcb0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	2201      	movs	r2, #1
 800dcb6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	2200      	movs	r2, #0
 800dcbe:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	2200      	movs	r2, #0
 800dcc6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	2200      	movs	r2, #0
 800dccc:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	2200      	movs	r2, #0
 800dcd4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dcde:	2b00      	cmp	r3, #0
 800dce0:	d014      	beq.n	800dd0c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dce8:	685b      	ldr	r3, [r3, #4]
 800dcea:	2b00      	cmp	r3, #0
 800dcec:	d00e      	beq.n	800dd0c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dcf4:	685b      	ldr	r3, [r3, #4]
 800dcf6:	687a      	ldr	r2, [r7, #4]
 800dcf8:	6852      	ldr	r2, [r2, #4]
 800dcfa:	b2d2      	uxtb	r2, r2
 800dcfc:	4611      	mov	r1, r2
 800dcfe:	6878      	ldr	r0, [r7, #4]
 800dd00:	4798      	blx	r3
 800dd02:	4603      	mov	r3, r0
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	d001      	beq.n	800dd0c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800dd08:	2303      	movs	r3, #3
 800dd0a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800dd0c:	2340      	movs	r3, #64	@ 0x40
 800dd0e:	2200      	movs	r2, #0
 800dd10:	2100      	movs	r1, #0
 800dd12:	6878      	ldr	r0, [r7, #4]
 800dd14:	f001 fc6f 	bl	800f5f6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	2201      	movs	r2, #1
 800dd1c:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	2240      	movs	r2, #64	@ 0x40
 800dd24:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800dd28:	2340      	movs	r3, #64	@ 0x40
 800dd2a:	2200      	movs	r2, #0
 800dd2c:	2180      	movs	r1, #128	@ 0x80
 800dd2e:	6878      	ldr	r0, [r7, #4]
 800dd30:	f001 fc61 	bl	800f5f6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	2201      	movs	r2, #1
 800dd38:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	2240      	movs	r2, #64	@ 0x40
 800dd3e:	621a      	str	r2, [r3, #32]

  return ret;
 800dd40:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd42:	4618      	mov	r0, r3
 800dd44:	3710      	adds	r7, #16
 800dd46:	46bd      	mov	sp, r7
 800dd48:	bd80      	pop	{r7, pc}

0800dd4a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800dd4a:	b480      	push	{r7}
 800dd4c:	b083      	sub	sp, #12
 800dd4e:	af00      	add	r7, sp, #0
 800dd50:	6078      	str	r0, [r7, #4]
 800dd52:	460b      	mov	r3, r1
 800dd54:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	78fa      	ldrb	r2, [r7, #3]
 800dd5a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800dd5c:	2300      	movs	r3, #0
}
 800dd5e:	4618      	mov	r0, r3
 800dd60:	370c      	adds	r7, #12
 800dd62:	46bd      	mov	sp, r7
 800dd64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd68:	4770      	bx	lr

0800dd6a <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800dd6a:	b480      	push	{r7}
 800dd6c:	b083      	sub	sp, #12
 800dd6e:	af00      	add	r7, sp, #0
 800dd70:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dd78:	b2db      	uxtb	r3, r3
 800dd7a:	2b04      	cmp	r3, #4
 800dd7c:	d006      	beq.n	800dd8c <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dd84:	b2da      	uxtb	r2, r3
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	2204      	movs	r2, #4
 800dd90:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800dd94:	2300      	movs	r3, #0
}
 800dd96:	4618      	mov	r0, r3
 800dd98:	370c      	adds	r7, #12
 800dd9a:	46bd      	mov	sp, r7
 800dd9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dda0:	4770      	bx	lr

0800dda2 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800dda2:	b480      	push	{r7}
 800dda4:	b083      	sub	sp, #12
 800dda6:	af00      	add	r7, sp, #0
 800dda8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ddb0:	b2db      	uxtb	r3, r3
 800ddb2:	2b04      	cmp	r3, #4
 800ddb4:	d106      	bne.n	800ddc4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800ddbc:	b2da      	uxtb	r2, r3
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800ddc4:	2300      	movs	r3, #0
}
 800ddc6:	4618      	mov	r0, r3
 800ddc8:	370c      	adds	r7, #12
 800ddca:	46bd      	mov	sp, r7
 800ddcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddd0:	4770      	bx	lr

0800ddd2 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800ddd2:	b580      	push	{r7, lr}
 800ddd4:	b082      	sub	sp, #8
 800ddd6:	af00      	add	r7, sp, #0
 800ddd8:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dde0:	b2db      	uxtb	r3, r3
 800dde2:	2b03      	cmp	r3, #3
 800dde4:	d110      	bne.n	800de08 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ddec:	2b00      	cmp	r3, #0
 800ddee:	d00b      	beq.n	800de08 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ddf6:	69db      	ldr	r3, [r3, #28]
 800ddf8:	2b00      	cmp	r3, #0
 800ddfa:	d005      	beq.n	800de08 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800de02:	69db      	ldr	r3, [r3, #28]
 800de04:	6878      	ldr	r0, [r7, #4]
 800de06:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800de08:	2300      	movs	r3, #0
}
 800de0a:	4618      	mov	r0, r3
 800de0c:	3708      	adds	r7, #8
 800de0e:	46bd      	mov	sp, r7
 800de10:	bd80      	pop	{r7, pc}

0800de12 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800de12:	b580      	push	{r7, lr}
 800de14:	b082      	sub	sp, #8
 800de16:	af00      	add	r7, sp, #0
 800de18:	6078      	str	r0, [r7, #4]
 800de1a:	460b      	mov	r3, r1
 800de1c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	32ae      	adds	r2, #174	@ 0xae
 800de28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800de2c:	2b00      	cmp	r3, #0
 800de2e:	d101      	bne.n	800de34 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800de30:	2303      	movs	r3, #3
 800de32:	e01c      	b.n	800de6e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800de3a:	b2db      	uxtb	r3, r3
 800de3c:	2b03      	cmp	r3, #3
 800de3e:	d115      	bne.n	800de6c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	32ae      	adds	r2, #174	@ 0xae
 800de4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800de4e:	6a1b      	ldr	r3, [r3, #32]
 800de50:	2b00      	cmp	r3, #0
 800de52:	d00b      	beq.n	800de6c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	32ae      	adds	r2, #174	@ 0xae
 800de5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800de62:	6a1b      	ldr	r3, [r3, #32]
 800de64:	78fa      	ldrb	r2, [r7, #3]
 800de66:	4611      	mov	r1, r2
 800de68:	6878      	ldr	r0, [r7, #4]
 800de6a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800de6c:	2300      	movs	r3, #0
}
 800de6e:	4618      	mov	r0, r3
 800de70:	3708      	adds	r7, #8
 800de72:	46bd      	mov	sp, r7
 800de74:	bd80      	pop	{r7, pc}

0800de76 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800de76:	b580      	push	{r7, lr}
 800de78:	b082      	sub	sp, #8
 800de7a:	af00      	add	r7, sp, #0
 800de7c:	6078      	str	r0, [r7, #4]
 800de7e:	460b      	mov	r3, r1
 800de80:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	32ae      	adds	r2, #174	@ 0xae
 800de8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800de90:	2b00      	cmp	r3, #0
 800de92:	d101      	bne.n	800de98 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800de94:	2303      	movs	r3, #3
 800de96:	e01c      	b.n	800ded2 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800de9e:	b2db      	uxtb	r3, r3
 800dea0:	2b03      	cmp	r3, #3
 800dea2:	d115      	bne.n	800ded0 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	32ae      	adds	r2, #174	@ 0xae
 800deae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800deb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800deb4:	2b00      	cmp	r3, #0
 800deb6:	d00b      	beq.n	800ded0 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	32ae      	adds	r2, #174	@ 0xae
 800dec2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dec6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dec8:	78fa      	ldrb	r2, [r7, #3]
 800deca:	4611      	mov	r1, r2
 800decc:	6878      	ldr	r0, [r7, #4]
 800dece:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ded0:	2300      	movs	r3, #0
}
 800ded2:	4618      	mov	r0, r3
 800ded4:	3708      	adds	r7, #8
 800ded6:	46bd      	mov	sp, r7
 800ded8:	bd80      	pop	{r7, pc}

0800deda <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800deda:	b480      	push	{r7}
 800dedc:	b083      	sub	sp, #12
 800dede:	af00      	add	r7, sp, #0
 800dee0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800dee2:	2300      	movs	r3, #0
}
 800dee4:	4618      	mov	r0, r3
 800dee6:	370c      	adds	r7, #12
 800dee8:	46bd      	mov	sp, r7
 800deea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deee:	4770      	bx	lr

0800def0 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800def0:	b580      	push	{r7, lr}
 800def2:	b084      	sub	sp, #16
 800def4:	af00      	add	r7, sp, #0
 800def6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800def8:	2300      	movs	r3, #0
 800defa:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	2201      	movs	r2, #1
 800df00:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800df0a:	2b00      	cmp	r3, #0
 800df0c:	d00e      	beq.n	800df2c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800df14:	685b      	ldr	r3, [r3, #4]
 800df16:	687a      	ldr	r2, [r7, #4]
 800df18:	6852      	ldr	r2, [r2, #4]
 800df1a:	b2d2      	uxtb	r2, r2
 800df1c:	4611      	mov	r1, r2
 800df1e:	6878      	ldr	r0, [r7, #4]
 800df20:	4798      	blx	r3
 800df22:	4603      	mov	r3, r0
 800df24:	2b00      	cmp	r3, #0
 800df26:	d001      	beq.n	800df2c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800df28:	2303      	movs	r3, #3
 800df2a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800df2c:	7bfb      	ldrb	r3, [r7, #15]
}
 800df2e:	4618      	mov	r0, r3
 800df30:	3710      	adds	r7, #16
 800df32:	46bd      	mov	sp, r7
 800df34:	bd80      	pop	{r7, pc}

0800df36 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800df36:	b480      	push	{r7}
 800df38:	b083      	sub	sp, #12
 800df3a:	af00      	add	r7, sp, #0
 800df3c:	6078      	str	r0, [r7, #4]
 800df3e:	460b      	mov	r3, r1
 800df40:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800df42:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800df44:	4618      	mov	r0, r3
 800df46:	370c      	adds	r7, #12
 800df48:	46bd      	mov	sp, r7
 800df4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df4e:	4770      	bx	lr

0800df50 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800df50:	b480      	push	{r7}
 800df52:	b083      	sub	sp, #12
 800df54:	af00      	add	r7, sp, #0
 800df56:	6078      	str	r0, [r7, #4]
 800df58:	460b      	mov	r3, r1
 800df5a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800df5c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800df5e:	4618      	mov	r0, r3
 800df60:	370c      	adds	r7, #12
 800df62:	46bd      	mov	sp, r7
 800df64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df68:	4770      	bx	lr

0800df6a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800df6a:	b580      	push	{r7, lr}
 800df6c:	b086      	sub	sp, #24
 800df6e:	af00      	add	r7, sp, #0
 800df70:	6078      	str	r0, [r7, #4]
 800df72:	460b      	mov	r3, r1
 800df74:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800df7e:	2300      	movs	r3, #0
 800df80:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800df82:	68fb      	ldr	r3, [r7, #12]
 800df84:	885b      	ldrh	r3, [r3, #2]
 800df86:	b29b      	uxth	r3, r3
 800df88:	68fa      	ldr	r2, [r7, #12]
 800df8a:	7812      	ldrb	r2, [r2, #0]
 800df8c:	4293      	cmp	r3, r2
 800df8e:	d91f      	bls.n	800dfd0 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800df90:	68fb      	ldr	r3, [r7, #12]
 800df92:	781b      	ldrb	r3, [r3, #0]
 800df94:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800df96:	e013      	b.n	800dfc0 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800df98:	f107 030a 	add.w	r3, r7, #10
 800df9c:	4619      	mov	r1, r3
 800df9e:	6978      	ldr	r0, [r7, #20]
 800dfa0:	f000 f81b 	bl	800dfda <USBD_GetNextDesc>
 800dfa4:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800dfa6:	697b      	ldr	r3, [r7, #20]
 800dfa8:	785b      	ldrb	r3, [r3, #1]
 800dfaa:	2b05      	cmp	r3, #5
 800dfac:	d108      	bne.n	800dfc0 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800dfae:	697b      	ldr	r3, [r7, #20]
 800dfb0:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800dfb2:	693b      	ldr	r3, [r7, #16]
 800dfb4:	789b      	ldrb	r3, [r3, #2]
 800dfb6:	78fa      	ldrb	r2, [r7, #3]
 800dfb8:	429a      	cmp	r2, r3
 800dfba:	d008      	beq.n	800dfce <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800dfbc:	2300      	movs	r3, #0
 800dfbe:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800dfc0:	68fb      	ldr	r3, [r7, #12]
 800dfc2:	885b      	ldrh	r3, [r3, #2]
 800dfc4:	b29a      	uxth	r2, r3
 800dfc6:	897b      	ldrh	r3, [r7, #10]
 800dfc8:	429a      	cmp	r2, r3
 800dfca:	d8e5      	bhi.n	800df98 <USBD_GetEpDesc+0x2e>
 800dfcc:	e000      	b.n	800dfd0 <USBD_GetEpDesc+0x66>
          break;
 800dfce:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800dfd0:	693b      	ldr	r3, [r7, #16]
}
 800dfd2:	4618      	mov	r0, r3
 800dfd4:	3718      	adds	r7, #24
 800dfd6:	46bd      	mov	sp, r7
 800dfd8:	bd80      	pop	{r7, pc}

0800dfda <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800dfda:	b480      	push	{r7}
 800dfdc:	b085      	sub	sp, #20
 800dfde:	af00      	add	r7, sp, #0
 800dfe0:	6078      	str	r0, [r7, #4]
 800dfe2:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800dfe8:	683b      	ldr	r3, [r7, #0]
 800dfea:	881b      	ldrh	r3, [r3, #0]
 800dfec:	68fa      	ldr	r2, [r7, #12]
 800dfee:	7812      	ldrb	r2, [r2, #0]
 800dff0:	4413      	add	r3, r2
 800dff2:	b29a      	uxth	r2, r3
 800dff4:	683b      	ldr	r3, [r7, #0]
 800dff6:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800dff8:	68fb      	ldr	r3, [r7, #12]
 800dffa:	781b      	ldrb	r3, [r3, #0]
 800dffc:	461a      	mov	r2, r3
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	4413      	add	r3, r2
 800e002:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800e004:	68fb      	ldr	r3, [r7, #12]
}
 800e006:	4618      	mov	r0, r3
 800e008:	3714      	adds	r7, #20
 800e00a:	46bd      	mov	sp, r7
 800e00c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e010:	4770      	bx	lr

0800e012 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800e012:	b480      	push	{r7}
 800e014:	b087      	sub	sp, #28
 800e016:	af00      	add	r7, sp, #0
 800e018:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800e01e:	697b      	ldr	r3, [r7, #20]
 800e020:	781b      	ldrb	r3, [r3, #0]
 800e022:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800e024:	697b      	ldr	r3, [r7, #20]
 800e026:	3301      	adds	r3, #1
 800e028:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800e02a:	697b      	ldr	r3, [r7, #20]
 800e02c:	781b      	ldrb	r3, [r3, #0]
 800e02e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800e030:	8a3b      	ldrh	r3, [r7, #16]
 800e032:	021b      	lsls	r3, r3, #8
 800e034:	b21a      	sxth	r2, r3
 800e036:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800e03a:	4313      	orrs	r3, r2
 800e03c:	b21b      	sxth	r3, r3
 800e03e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800e040:	89fb      	ldrh	r3, [r7, #14]
}
 800e042:	4618      	mov	r0, r3
 800e044:	371c      	adds	r7, #28
 800e046:	46bd      	mov	sp, r7
 800e048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e04c:	4770      	bx	lr
	...

0800e050 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e050:	b580      	push	{r7, lr}
 800e052:	b084      	sub	sp, #16
 800e054:	af00      	add	r7, sp, #0
 800e056:	6078      	str	r0, [r7, #4]
 800e058:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e05a:	2300      	movs	r3, #0
 800e05c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e05e:	683b      	ldr	r3, [r7, #0]
 800e060:	781b      	ldrb	r3, [r3, #0]
 800e062:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800e066:	2b40      	cmp	r3, #64	@ 0x40
 800e068:	d005      	beq.n	800e076 <USBD_StdDevReq+0x26>
 800e06a:	2b40      	cmp	r3, #64	@ 0x40
 800e06c:	d857      	bhi.n	800e11e <USBD_StdDevReq+0xce>
 800e06e:	2b00      	cmp	r3, #0
 800e070:	d00f      	beq.n	800e092 <USBD_StdDevReq+0x42>
 800e072:	2b20      	cmp	r3, #32
 800e074:	d153      	bne.n	800e11e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	32ae      	adds	r2, #174	@ 0xae
 800e080:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e084:	689b      	ldr	r3, [r3, #8]
 800e086:	6839      	ldr	r1, [r7, #0]
 800e088:	6878      	ldr	r0, [r7, #4]
 800e08a:	4798      	blx	r3
 800e08c:	4603      	mov	r3, r0
 800e08e:	73fb      	strb	r3, [r7, #15]
      break;
 800e090:	e04a      	b.n	800e128 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e092:	683b      	ldr	r3, [r7, #0]
 800e094:	785b      	ldrb	r3, [r3, #1]
 800e096:	2b09      	cmp	r3, #9
 800e098:	d83b      	bhi.n	800e112 <USBD_StdDevReq+0xc2>
 800e09a:	a201      	add	r2, pc, #4	@ (adr r2, 800e0a0 <USBD_StdDevReq+0x50>)
 800e09c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e0a0:	0800e0f5 	.word	0x0800e0f5
 800e0a4:	0800e109 	.word	0x0800e109
 800e0a8:	0800e113 	.word	0x0800e113
 800e0ac:	0800e0ff 	.word	0x0800e0ff
 800e0b0:	0800e113 	.word	0x0800e113
 800e0b4:	0800e0d3 	.word	0x0800e0d3
 800e0b8:	0800e0c9 	.word	0x0800e0c9
 800e0bc:	0800e113 	.word	0x0800e113
 800e0c0:	0800e0eb 	.word	0x0800e0eb
 800e0c4:	0800e0dd 	.word	0x0800e0dd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800e0c8:	6839      	ldr	r1, [r7, #0]
 800e0ca:	6878      	ldr	r0, [r7, #4]
 800e0cc:	f000 fa3c 	bl	800e548 <USBD_GetDescriptor>
          break;
 800e0d0:	e024      	b.n	800e11c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800e0d2:	6839      	ldr	r1, [r7, #0]
 800e0d4:	6878      	ldr	r0, [r7, #4]
 800e0d6:	f000 fbcb 	bl	800e870 <USBD_SetAddress>
          break;
 800e0da:	e01f      	b.n	800e11c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800e0dc:	6839      	ldr	r1, [r7, #0]
 800e0de:	6878      	ldr	r0, [r7, #4]
 800e0e0:	f000 fc0a 	bl	800e8f8 <USBD_SetConfig>
 800e0e4:	4603      	mov	r3, r0
 800e0e6:	73fb      	strb	r3, [r7, #15]
          break;
 800e0e8:	e018      	b.n	800e11c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800e0ea:	6839      	ldr	r1, [r7, #0]
 800e0ec:	6878      	ldr	r0, [r7, #4]
 800e0ee:	f000 fcad 	bl	800ea4c <USBD_GetConfig>
          break;
 800e0f2:	e013      	b.n	800e11c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800e0f4:	6839      	ldr	r1, [r7, #0]
 800e0f6:	6878      	ldr	r0, [r7, #4]
 800e0f8:	f000 fcde 	bl	800eab8 <USBD_GetStatus>
          break;
 800e0fc:	e00e      	b.n	800e11c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800e0fe:	6839      	ldr	r1, [r7, #0]
 800e100:	6878      	ldr	r0, [r7, #4]
 800e102:	f000 fd0d 	bl	800eb20 <USBD_SetFeature>
          break;
 800e106:	e009      	b.n	800e11c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800e108:	6839      	ldr	r1, [r7, #0]
 800e10a:	6878      	ldr	r0, [r7, #4]
 800e10c:	f000 fd31 	bl	800eb72 <USBD_ClrFeature>
          break;
 800e110:	e004      	b.n	800e11c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800e112:	6839      	ldr	r1, [r7, #0]
 800e114:	6878      	ldr	r0, [r7, #4]
 800e116:	f000 fd88 	bl	800ec2a <USBD_CtlError>
          break;
 800e11a:	bf00      	nop
      }
      break;
 800e11c:	e004      	b.n	800e128 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800e11e:	6839      	ldr	r1, [r7, #0]
 800e120:	6878      	ldr	r0, [r7, #4]
 800e122:	f000 fd82 	bl	800ec2a <USBD_CtlError>
      break;
 800e126:	bf00      	nop
  }

  return ret;
 800e128:	7bfb      	ldrb	r3, [r7, #15]
}
 800e12a:	4618      	mov	r0, r3
 800e12c:	3710      	adds	r7, #16
 800e12e:	46bd      	mov	sp, r7
 800e130:	bd80      	pop	{r7, pc}
 800e132:	bf00      	nop

0800e134 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e134:	b580      	push	{r7, lr}
 800e136:	b084      	sub	sp, #16
 800e138:	af00      	add	r7, sp, #0
 800e13a:	6078      	str	r0, [r7, #4]
 800e13c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e13e:	2300      	movs	r3, #0
 800e140:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e142:	683b      	ldr	r3, [r7, #0]
 800e144:	781b      	ldrb	r3, [r3, #0]
 800e146:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800e14a:	2b40      	cmp	r3, #64	@ 0x40
 800e14c:	d005      	beq.n	800e15a <USBD_StdItfReq+0x26>
 800e14e:	2b40      	cmp	r3, #64	@ 0x40
 800e150:	d852      	bhi.n	800e1f8 <USBD_StdItfReq+0xc4>
 800e152:	2b00      	cmp	r3, #0
 800e154:	d001      	beq.n	800e15a <USBD_StdItfReq+0x26>
 800e156:	2b20      	cmp	r3, #32
 800e158:	d14e      	bne.n	800e1f8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e160:	b2db      	uxtb	r3, r3
 800e162:	3b01      	subs	r3, #1
 800e164:	2b02      	cmp	r3, #2
 800e166:	d840      	bhi.n	800e1ea <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800e168:	683b      	ldr	r3, [r7, #0]
 800e16a:	889b      	ldrh	r3, [r3, #4]
 800e16c:	b2db      	uxtb	r3, r3
 800e16e:	2b01      	cmp	r3, #1
 800e170:	d836      	bhi.n	800e1e0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800e172:	683b      	ldr	r3, [r7, #0]
 800e174:	889b      	ldrh	r3, [r3, #4]
 800e176:	b2db      	uxtb	r3, r3
 800e178:	4619      	mov	r1, r3
 800e17a:	6878      	ldr	r0, [r7, #4]
 800e17c:	f7ff fedb 	bl	800df36 <USBD_CoreFindIF>
 800e180:	4603      	mov	r3, r0
 800e182:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e184:	7bbb      	ldrb	r3, [r7, #14]
 800e186:	2bff      	cmp	r3, #255	@ 0xff
 800e188:	d01d      	beq.n	800e1c6 <USBD_StdItfReq+0x92>
 800e18a:	7bbb      	ldrb	r3, [r7, #14]
 800e18c:	2b00      	cmp	r3, #0
 800e18e:	d11a      	bne.n	800e1c6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800e190:	7bba      	ldrb	r2, [r7, #14]
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	32ae      	adds	r2, #174	@ 0xae
 800e196:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e19a:	689b      	ldr	r3, [r3, #8]
 800e19c:	2b00      	cmp	r3, #0
 800e19e:	d00f      	beq.n	800e1c0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800e1a0:	7bba      	ldrb	r2, [r7, #14]
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800e1a8:	7bba      	ldrb	r2, [r7, #14]
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	32ae      	adds	r2, #174	@ 0xae
 800e1ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e1b2:	689b      	ldr	r3, [r3, #8]
 800e1b4:	6839      	ldr	r1, [r7, #0]
 800e1b6:	6878      	ldr	r0, [r7, #4]
 800e1b8:	4798      	blx	r3
 800e1ba:	4603      	mov	r3, r0
 800e1bc:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800e1be:	e004      	b.n	800e1ca <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800e1c0:	2303      	movs	r3, #3
 800e1c2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800e1c4:	e001      	b.n	800e1ca <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800e1c6:	2303      	movs	r3, #3
 800e1c8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800e1ca:	683b      	ldr	r3, [r7, #0]
 800e1cc:	88db      	ldrh	r3, [r3, #6]
 800e1ce:	2b00      	cmp	r3, #0
 800e1d0:	d110      	bne.n	800e1f4 <USBD_StdItfReq+0xc0>
 800e1d2:	7bfb      	ldrb	r3, [r7, #15]
 800e1d4:	2b00      	cmp	r3, #0
 800e1d6:	d10d      	bne.n	800e1f4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800e1d8:	6878      	ldr	r0, [r7, #4]
 800e1da:	f000 fdfd 	bl	800edd8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800e1de:	e009      	b.n	800e1f4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800e1e0:	6839      	ldr	r1, [r7, #0]
 800e1e2:	6878      	ldr	r0, [r7, #4]
 800e1e4:	f000 fd21 	bl	800ec2a <USBD_CtlError>
          break;
 800e1e8:	e004      	b.n	800e1f4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800e1ea:	6839      	ldr	r1, [r7, #0]
 800e1ec:	6878      	ldr	r0, [r7, #4]
 800e1ee:	f000 fd1c 	bl	800ec2a <USBD_CtlError>
          break;
 800e1f2:	e000      	b.n	800e1f6 <USBD_StdItfReq+0xc2>
          break;
 800e1f4:	bf00      	nop
      }
      break;
 800e1f6:	e004      	b.n	800e202 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800e1f8:	6839      	ldr	r1, [r7, #0]
 800e1fa:	6878      	ldr	r0, [r7, #4]
 800e1fc:	f000 fd15 	bl	800ec2a <USBD_CtlError>
      break;
 800e200:	bf00      	nop
  }

  return ret;
 800e202:	7bfb      	ldrb	r3, [r7, #15]
}
 800e204:	4618      	mov	r0, r3
 800e206:	3710      	adds	r7, #16
 800e208:	46bd      	mov	sp, r7
 800e20a:	bd80      	pop	{r7, pc}

0800e20c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e20c:	b580      	push	{r7, lr}
 800e20e:	b084      	sub	sp, #16
 800e210:	af00      	add	r7, sp, #0
 800e212:	6078      	str	r0, [r7, #4]
 800e214:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800e216:	2300      	movs	r3, #0
 800e218:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800e21a:	683b      	ldr	r3, [r7, #0]
 800e21c:	889b      	ldrh	r3, [r3, #4]
 800e21e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e220:	683b      	ldr	r3, [r7, #0]
 800e222:	781b      	ldrb	r3, [r3, #0]
 800e224:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800e228:	2b40      	cmp	r3, #64	@ 0x40
 800e22a:	d007      	beq.n	800e23c <USBD_StdEPReq+0x30>
 800e22c:	2b40      	cmp	r3, #64	@ 0x40
 800e22e:	f200 817f 	bhi.w	800e530 <USBD_StdEPReq+0x324>
 800e232:	2b00      	cmp	r3, #0
 800e234:	d02a      	beq.n	800e28c <USBD_StdEPReq+0x80>
 800e236:	2b20      	cmp	r3, #32
 800e238:	f040 817a 	bne.w	800e530 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800e23c:	7bbb      	ldrb	r3, [r7, #14]
 800e23e:	4619      	mov	r1, r3
 800e240:	6878      	ldr	r0, [r7, #4]
 800e242:	f7ff fe85 	bl	800df50 <USBD_CoreFindEP>
 800e246:	4603      	mov	r3, r0
 800e248:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e24a:	7b7b      	ldrb	r3, [r7, #13]
 800e24c:	2bff      	cmp	r3, #255	@ 0xff
 800e24e:	f000 8174 	beq.w	800e53a <USBD_StdEPReq+0x32e>
 800e252:	7b7b      	ldrb	r3, [r7, #13]
 800e254:	2b00      	cmp	r3, #0
 800e256:	f040 8170 	bne.w	800e53a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800e25a:	7b7a      	ldrb	r2, [r7, #13]
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800e262:	7b7a      	ldrb	r2, [r7, #13]
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	32ae      	adds	r2, #174	@ 0xae
 800e268:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e26c:	689b      	ldr	r3, [r3, #8]
 800e26e:	2b00      	cmp	r3, #0
 800e270:	f000 8163 	beq.w	800e53a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800e274:	7b7a      	ldrb	r2, [r7, #13]
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	32ae      	adds	r2, #174	@ 0xae
 800e27a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e27e:	689b      	ldr	r3, [r3, #8]
 800e280:	6839      	ldr	r1, [r7, #0]
 800e282:	6878      	ldr	r0, [r7, #4]
 800e284:	4798      	blx	r3
 800e286:	4603      	mov	r3, r0
 800e288:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800e28a:	e156      	b.n	800e53a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e28c:	683b      	ldr	r3, [r7, #0]
 800e28e:	785b      	ldrb	r3, [r3, #1]
 800e290:	2b03      	cmp	r3, #3
 800e292:	d008      	beq.n	800e2a6 <USBD_StdEPReq+0x9a>
 800e294:	2b03      	cmp	r3, #3
 800e296:	f300 8145 	bgt.w	800e524 <USBD_StdEPReq+0x318>
 800e29a:	2b00      	cmp	r3, #0
 800e29c:	f000 809b 	beq.w	800e3d6 <USBD_StdEPReq+0x1ca>
 800e2a0:	2b01      	cmp	r3, #1
 800e2a2:	d03c      	beq.n	800e31e <USBD_StdEPReq+0x112>
 800e2a4:	e13e      	b.n	800e524 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e2ac:	b2db      	uxtb	r3, r3
 800e2ae:	2b02      	cmp	r3, #2
 800e2b0:	d002      	beq.n	800e2b8 <USBD_StdEPReq+0xac>
 800e2b2:	2b03      	cmp	r3, #3
 800e2b4:	d016      	beq.n	800e2e4 <USBD_StdEPReq+0xd8>
 800e2b6:	e02c      	b.n	800e312 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e2b8:	7bbb      	ldrb	r3, [r7, #14]
 800e2ba:	2b00      	cmp	r3, #0
 800e2bc:	d00d      	beq.n	800e2da <USBD_StdEPReq+0xce>
 800e2be:	7bbb      	ldrb	r3, [r7, #14]
 800e2c0:	2b80      	cmp	r3, #128	@ 0x80
 800e2c2:	d00a      	beq.n	800e2da <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800e2c4:	7bbb      	ldrb	r3, [r7, #14]
 800e2c6:	4619      	mov	r1, r3
 800e2c8:	6878      	ldr	r0, [r7, #4]
 800e2ca:	f001 f9d9 	bl	800f680 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800e2ce:	2180      	movs	r1, #128	@ 0x80
 800e2d0:	6878      	ldr	r0, [r7, #4]
 800e2d2:	f001 f9d5 	bl	800f680 <USBD_LL_StallEP>
 800e2d6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800e2d8:	e020      	b.n	800e31c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800e2da:	6839      	ldr	r1, [r7, #0]
 800e2dc:	6878      	ldr	r0, [r7, #4]
 800e2de:	f000 fca4 	bl	800ec2a <USBD_CtlError>
              break;
 800e2e2:	e01b      	b.n	800e31c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800e2e4:	683b      	ldr	r3, [r7, #0]
 800e2e6:	885b      	ldrh	r3, [r3, #2]
 800e2e8:	2b00      	cmp	r3, #0
 800e2ea:	d10e      	bne.n	800e30a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800e2ec:	7bbb      	ldrb	r3, [r7, #14]
 800e2ee:	2b00      	cmp	r3, #0
 800e2f0:	d00b      	beq.n	800e30a <USBD_StdEPReq+0xfe>
 800e2f2:	7bbb      	ldrb	r3, [r7, #14]
 800e2f4:	2b80      	cmp	r3, #128	@ 0x80
 800e2f6:	d008      	beq.n	800e30a <USBD_StdEPReq+0xfe>
 800e2f8:	683b      	ldr	r3, [r7, #0]
 800e2fa:	88db      	ldrh	r3, [r3, #6]
 800e2fc:	2b00      	cmp	r3, #0
 800e2fe:	d104      	bne.n	800e30a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800e300:	7bbb      	ldrb	r3, [r7, #14]
 800e302:	4619      	mov	r1, r3
 800e304:	6878      	ldr	r0, [r7, #4]
 800e306:	f001 f9bb 	bl	800f680 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800e30a:	6878      	ldr	r0, [r7, #4]
 800e30c:	f000 fd64 	bl	800edd8 <USBD_CtlSendStatus>

              break;
 800e310:	e004      	b.n	800e31c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800e312:	6839      	ldr	r1, [r7, #0]
 800e314:	6878      	ldr	r0, [r7, #4]
 800e316:	f000 fc88 	bl	800ec2a <USBD_CtlError>
              break;
 800e31a:	bf00      	nop
          }
          break;
 800e31c:	e107      	b.n	800e52e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e324:	b2db      	uxtb	r3, r3
 800e326:	2b02      	cmp	r3, #2
 800e328:	d002      	beq.n	800e330 <USBD_StdEPReq+0x124>
 800e32a:	2b03      	cmp	r3, #3
 800e32c:	d016      	beq.n	800e35c <USBD_StdEPReq+0x150>
 800e32e:	e04b      	b.n	800e3c8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e330:	7bbb      	ldrb	r3, [r7, #14]
 800e332:	2b00      	cmp	r3, #0
 800e334:	d00d      	beq.n	800e352 <USBD_StdEPReq+0x146>
 800e336:	7bbb      	ldrb	r3, [r7, #14]
 800e338:	2b80      	cmp	r3, #128	@ 0x80
 800e33a:	d00a      	beq.n	800e352 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800e33c:	7bbb      	ldrb	r3, [r7, #14]
 800e33e:	4619      	mov	r1, r3
 800e340:	6878      	ldr	r0, [r7, #4]
 800e342:	f001 f99d 	bl	800f680 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800e346:	2180      	movs	r1, #128	@ 0x80
 800e348:	6878      	ldr	r0, [r7, #4]
 800e34a:	f001 f999 	bl	800f680 <USBD_LL_StallEP>
 800e34e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800e350:	e040      	b.n	800e3d4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800e352:	6839      	ldr	r1, [r7, #0]
 800e354:	6878      	ldr	r0, [r7, #4]
 800e356:	f000 fc68 	bl	800ec2a <USBD_CtlError>
              break;
 800e35a:	e03b      	b.n	800e3d4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800e35c:	683b      	ldr	r3, [r7, #0]
 800e35e:	885b      	ldrh	r3, [r3, #2]
 800e360:	2b00      	cmp	r3, #0
 800e362:	d136      	bne.n	800e3d2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800e364:	7bbb      	ldrb	r3, [r7, #14]
 800e366:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e36a:	2b00      	cmp	r3, #0
 800e36c:	d004      	beq.n	800e378 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800e36e:	7bbb      	ldrb	r3, [r7, #14]
 800e370:	4619      	mov	r1, r3
 800e372:	6878      	ldr	r0, [r7, #4]
 800e374:	f001 f9a3 	bl	800f6be <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800e378:	6878      	ldr	r0, [r7, #4]
 800e37a:	f000 fd2d 	bl	800edd8 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800e37e:	7bbb      	ldrb	r3, [r7, #14]
 800e380:	4619      	mov	r1, r3
 800e382:	6878      	ldr	r0, [r7, #4]
 800e384:	f7ff fde4 	bl	800df50 <USBD_CoreFindEP>
 800e388:	4603      	mov	r3, r0
 800e38a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e38c:	7b7b      	ldrb	r3, [r7, #13]
 800e38e:	2bff      	cmp	r3, #255	@ 0xff
 800e390:	d01f      	beq.n	800e3d2 <USBD_StdEPReq+0x1c6>
 800e392:	7b7b      	ldrb	r3, [r7, #13]
 800e394:	2b00      	cmp	r3, #0
 800e396:	d11c      	bne.n	800e3d2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800e398:	7b7a      	ldrb	r2, [r7, #13]
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800e3a0:	7b7a      	ldrb	r2, [r7, #13]
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	32ae      	adds	r2, #174	@ 0xae
 800e3a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e3aa:	689b      	ldr	r3, [r3, #8]
 800e3ac:	2b00      	cmp	r3, #0
 800e3ae:	d010      	beq.n	800e3d2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800e3b0:	7b7a      	ldrb	r2, [r7, #13]
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	32ae      	adds	r2, #174	@ 0xae
 800e3b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e3ba:	689b      	ldr	r3, [r3, #8]
 800e3bc:	6839      	ldr	r1, [r7, #0]
 800e3be:	6878      	ldr	r0, [r7, #4]
 800e3c0:	4798      	blx	r3
 800e3c2:	4603      	mov	r3, r0
 800e3c4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800e3c6:	e004      	b.n	800e3d2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800e3c8:	6839      	ldr	r1, [r7, #0]
 800e3ca:	6878      	ldr	r0, [r7, #4]
 800e3cc:	f000 fc2d 	bl	800ec2a <USBD_CtlError>
              break;
 800e3d0:	e000      	b.n	800e3d4 <USBD_StdEPReq+0x1c8>
              break;
 800e3d2:	bf00      	nop
          }
          break;
 800e3d4:	e0ab      	b.n	800e52e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e3dc:	b2db      	uxtb	r3, r3
 800e3de:	2b02      	cmp	r3, #2
 800e3e0:	d002      	beq.n	800e3e8 <USBD_StdEPReq+0x1dc>
 800e3e2:	2b03      	cmp	r3, #3
 800e3e4:	d032      	beq.n	800e44c <USBD_StdEPReq+0x240>
 800e3e6:	e097      	b.n	800e518 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e3e8:	7bbb      	ldrb	r3, [r7, #14]
 800e3ea:	2b00      	cmp	r3, #0
 800e3ec:	d007      	beq.n	800e3fe <USBD_StdEPReq+0x1f2>
 800e3ee:	7bbb      	ldrb	r3, [r7, #14]
 800e3f0:	2b80      	cmp	r3, #128	@ 0x80
 800e3f2:	d004      	beq.n	800e3fe <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800e3f4:	6839      	ldr	r1, [r7, #0]
 800e3f6:	6878      	ldr	r0, [r7, #4]
 800e3f8:	f000 fc17 	bl	800ec2a <USBD_CtlError>
                break;
 800e3fc:	e091      	b.n	800e522 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e3fe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e402:	2b00      	cmp	r3, #0
 800e404:	da0b      	bge.n	800e41e <USBD_StdEPReq+0x212>
 800e406:	7bbb      	ldrb	r3, [r7, #14]
 800e408:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e40c:	4613      	mov	r3, r2
 800e40e:	009b      	lsls	r3, r3, #2
 800e410:	4413      	add	r3, r2
 800e412:	009b      	lsls	r3, r3, #2
 800e414:	3310      	adds	r3, #16
 800e416:	687a      	ldr	r2, [r7, #4]
 800e418:	4413      	add	r3, r2
 800e41a:	3304      	adds	r3, #4
 800e41c:	e00b      	b.n	800e436 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800e41e:	7bbb      	ldrb	r3, [r7, #14]
 800e420:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e424:	4613      	mov	r3, r2
 800e426:	009b      	lsls	r3, r3, #2
 800e428:	4413      	add	r3, r2
 800e42a:	009b      	lsls	r3, r3, #2
 800e42c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800e430:	687a      	ldr	r2, [r7, #4]
 800e432:	4413      	add	r3, r2
 800e434:	3304      	adds	r3, #4
 800e436:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800e438:	68bb      	ldr	r3, [r7, #8]
 800e43a:	2200      	movs	r2, #0
 800e43c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e43e:	68bb      	ldr	r3, [r7, #8]
 800e440:	2202      	movs	r2, #2
 800e442:	4619      	mov	r1, r3
 800e444:	6878      	ldr	r0, [r7, #4]
 800e446:	f000 fc6d 	bl	800ed24 <USBD_CtlSendData>
              break;
 800e44a:	e06a      	b.n	800e522 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800e44c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e450:	2b00      	cmp	r3, #0
 800e452:	da11      	bge.n	800e478 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800e454:	7bbb      	ldrb	r3, [r7, #14]
 800e456:	f003 020f 	and.w	r2, r3, #15
 800e45a:	6879      	ldr	r1, [r7, #4]
 800e45c:	4613      	mov	r3, r2
 800e45e:	009b      	lsls	r3, r3, #2
 800e460:	4413      	add	r3, r2
 800e462:	009b      	lsls	r3, r3, #2
 800e464:	440b      	add	r3, r1
 800e466:	3324      	adds	r3, #36	@ 0x24
 800e468:	881b      	ldrh	r3, [r3, #0]
 800e46a:	2b00      	cmp	r3, #0
 800e46c:	d117      	bne.n	800e49e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800e46e:	6839      	ldr	r1, [r7, #0]
 800e470:	6878      	ldr	r0, [r7, #4]
 800e472:	f000 fbda 	bl	800ec2a <USBD_CtlError>
                  break;
 800e476:	e054      	b.n	800e522 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800e478:	7bbb      	ldrb	r3, [r7, #14]
 800e47a:	f003 020f 	and.w	r2, r3, #15
 800e47e:	6879      	ldr	r1, [r7, #4]
 800e480:	4613      	mov	r3, r2
 800e482:	009b      	lsls	r3, r3, #2
 800e484:	4413      	add	r3, r2
 800e486:	009b      	lsls	r3, r3, #2
 800e488:	440b      	add	r3, r1
 800e48a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800e48e:	881b      	ldrh	r3, [r3, #0]
 800e490:	2b00      	cmp	r3, #0
 800e492:	d104      	bne.n	800e49e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800e494:	6839      	ldr	r1, [r7, #0]
 800e496:	6878      	ldr	r0, [r7, #4]
 800e498:	f000 fbc7 	bl	800ec2a <USBD_CtlError>
                  break;
 800e49c:	e041      	b.n	800e522 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e49e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e4a2:	2b00      	cmp	r3, #0
 800e4a4:	da0b      	bge.n	800e4be <USBD_StdEPReq+0x2b2>
 800e4a6:	7bbb      	ldrb	r3, [r7, #14]
 800e4a8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e4ac:	4613      	mov	r3, r2
 800e4ae:	009b      	lsls	r3, r3, #2
 800e4b0:	4413      	add	r3, r2
 800e4b2:	009b      	lsls	r3, r3, #2
 800e4b4:	3310      	adds	r3, #16
 800e4b6:	687a      	ldr	r2, [r7, #4]
 800e4b8:	4413      	add	r3, r2
 800e4ba:	3304      	adds	r3, #4
 800e4bc:	e00b      	b.n	800e4d6 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800e4be:	7bbb      	ldrb	r3, [r7, #14]
 800e4c0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e4c4:	4613      	mov	r3, r2
 800e4c6:	009b      	lsls	r3, r3, #2
 800e4c8:	4413      	add	r3, r2
 800e4ca:	009b      	lsls	r3, r3, #2
 800e4cc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800e4d0:	687a      	ldr	r2, [r7, #4]
 800e4d2:	4413      	add	r3, r2
 800e4d4:	3304      	adds	r3, #4
 800e4d6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800e4d8:	7bbb      	ldrb	r3, [r7, #14]
 800e4da:	2b00      	cmp	r3, #0
 800e4dc:	d002      	beq.n	800e4e4 <USBD_StdEPReq+0x2d8>
 800e4de:	7bbb      	ldrb	r3, [r7, #14]
 800e4e0:	2b80      	cmp	r3, #128	@ 0x80
 800e4e2:	d103      	bne.n	800e4ec <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800e4e4:	68bb      	ldr	r3, [r7, #8]
 800e4e6:	2200      	movs	r2, #0
 800e4e8:	601a      	str	r2, [r3, #0]
 800e4ea:	e00e      	b.n	800e50a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800e4ec:	7bbb      	ldrb	r3, [r7, #14]
 800e4ee:	4619      	mov	r1, r3
 800e4f0:	6878      	ldr	r0, [r7, #4]
 800e4f2:	f001 f903 	bl	800f6fc <USBD_LL_IsStallEP>
 800e4f6:	4603      	mov	r3, r0
 800e4f8:	2b00      	cmp	r3, #0
 800e4fa:	d003      	beq.n	800e504 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800e4fc:	68bb      	ldr	r3, [r7, #8]
 800e4fe:	2201      	movs	r2, #1
 800e500:	601a      	str	r2, [r3, #0]
 800e502:	e002      	b.n	800e50a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800e504:	68bb      	ldr	r3, [r7, #8]
 800e506:	2200      	movs	r2, #0
 800e508:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e50a:	68bb      	ldr	r3, [r7, #8]
 800e50c:	2202      	movs	r2, #2
 800e50e:	4619      	mov	r1, r3
 800e510:	6878      	ldr	r0, [r7, #4]
 800e512:	f000 fc07 	bl	800ed24 <USBD_CtlSendData>
              break;
 800e516:	e004      	b.n	800e522 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800e518:	6839      	ldr	r1, [r7, #0]
 800e51a:	6878      	ldr	r0, [r7, #4]
 800e51c:	f000 fb85 	bl	800ec2a <USBD_CtlError>
              break;
 800e520:	bf00      	nop
          }
          break;
 800e522:	e004      	b.n	800e52e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800e524:	6839      	ldr	r1, [r7, #0]
 800e526:	6878      	ldr	r0, [r7, #4]
 800e528:	f000 fb7f 	bl	800ec2a <USBD_CtlError>
          break;
 800e52c:	bf00      	nop
      }
      break;
 800e52e:	e005      	b.n	800e53c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800e530:	6839      	ldr	r1, [r7, #0]
 800e532:	6878      	ldr	r0, [r7, #4]
 800e534:	f000 fb79 	bl	800ec2a <USBD_CtlError>
      break;
 800e538:	e000      	b.n	800e53c <USBD_StdEPReq+0x330>
      break;
 800e53a:	bf00      	nop
  }

  return ret;
 800e53c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e53e:	4618      	mov	r0, r3
 800e540:	3710      	adds	r7, #16
 800e542:	46bd      	mov	sp, r7
 800e544:	bd80      	pop	{r7, pc}
	...

0800e548 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e548:	b580      	push	{r7, lr}
 800e54a:	b084      	sub	sp, #16
 800e54c:	af00      	add	r7, sp, #0
 800e54e:	6078      	str	r0, [r7, #4]
 800e550:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800e552:	2300      	movs	r3, #0
 800e554:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800e556:	2300      	movs	r3, #0
 800e558:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800e55a:	2300      	movs	r3, #0
 800e55c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800e55e:	683b      	ldr	r3, [r7, #0]
 800e560:	885b      	ldrh	r3, [r3, #2]
 800e562:	0a1b      	lsrs	r3, r3, #8
 800e564:	b29b      	uxth	r3, r3
 800e566:	3b01      	subs	r3, #1
 800e568:	2b0e      	cmp	r3, #14
 800e56a:	f200 8152 	bhi.w	800e812 <USBD_GetDescriptor+0x2ca>
 800e56e:	a201      	add	r2, pc, #4	@ (adr r2, 800e574 <USBD_GetDescriptor+0x2c>)
 800e570:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e574:	0800e5e5 	.word	0x0800e5e5
 800e578:	0800e5fd 	.word	0x0800e5fd
 800e57c:	0800e63d 	.word	0x0800e63d
 800e580:	0800e813 	.word	0x0800e813
 800e584:	0800e813 	.word	0x0800e813
 800e588:	0800e7b3 	.word	0x0800e7b3
 800e58c:	0800e7df 	.word	0x0800e7df
 800e590:	0800e813 	.word	0x0800e813
 800e594:	0800e813 	.word	0x0800e813
 800e598:	0800e813 	.word	0x0800e813
 800e59c:	0800e813 	.word	0x0800e813
 800e5a0:	0800e813 	.word	0x0800e813
 800e5a4:	0800e813 	.word	0x0800e813
 800e5a8:	0800e813 	.word	0x0800e813
 800e5ac:	0800e5b1 	.word	0x0800e5b1
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e5b6:	69db      	ldr	r3, [r3, #28]
 800e5b8:	2b00      	cmp	r3, #0
 800e5ba:	d00b      	beq.n	800e5d4 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e5c2:	69db      	ldr	r3, [r3, #28]
 800e5c4:	687a      	ldr	r2, [r7, #4]
 800e5c6:	7c12      	ldrb	r2, [r2, #16]
 800e5c8:	f107 0108 	add.w	r1, r7, #8
 800e5cc:	4610      	mov	r0, r2
 800e5ce:	4798      	blx	r3
 800e5d0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e5d2:	e126      	b.n	800e822 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800e5d4:	6839      	ldr	r1, [r7, #0]
 800e5d6:	6878      	ldr	r0, [r7, #4]
 800e5d8:	f000 fb27 	bl	800ec2a <USBD_CtlError>
        err++;
 800e5dc:	7afb      	ldrb	r3, [r7, #11]
 800e5de:	3301      	adds	r3, #1
 800e5e0:	72fb      	strb	r3, [r7, #11]
      break;
 800e5e2:	e11e      	b.n	800e822 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e5ea:	681b      	ldr	r3, [r3, #0]
 800e5ec:	687a      	ldr	r2, [r7, #4]
 800e5ee:	7c12      	ldrb	r2, [r2, #16]
 800e5f0:	f107 0108 	add.w	r1, r7, #8
 800e5f4:	4610      	mov	r0, r2
 800e5f6:	4798      	blx	r3
 800e5f8:	60f8      	str	r0, [r7, #12]
      break;
 800e5fa:	e112      	b.n	800e822 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	7c1b      	ldrb	r3, [r3, #16]
 800e600:	2b00      	cmp	r3, #0
 800e602:	d10d      	bne.n	800e620 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e60a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e60c:	f107 0208 	add.w	r2, r7, #8
 800e610:	4610      	mov	r0, r2
 800e612:	4798      	blx	r3
 800e614:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e616:	68fb      	ldr	r3, [r7, #12]
 800e618:	3301      	adds	r3, #1
 800e61a:	2202      	movs	r2, #2
 800e61c:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800e61e:	e100      	b.n	800e822 <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e626:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e628:	f107 0208 	add.w	r2, r7, #8
 800e62c:	4610      	mov	r0, r2
 800e62e:	4798      	blx	r3
 800e630:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e632:	68fb      	ldr	r3, [r7, #12]
 800e634:	3301      	adds	r3, #1
 800e636:	2202      	movs	r2, #2
 800e638:	701a      	strb	r2, [r3, #0]
      break;
 800e63a:	e0f2      	b.n	800e822 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800e63c:	683b      	ldr	r3, [r7, #0]
 800e63e:	885b      	ldrh	r3, [r3, #2]
 800e640:	b2db      	uxtb	r3, r3
 800e642:	2b05      	cmp	r3, #5
 800e644:	f200 80ac 	bhi.w	800e7a0 <USBD_GetDescriptor+0x258>
 800e648:	a201      	add	r2, pc, #4	@ (adr r2, 800e650 <USBD_GetDescriptor+0x108>)
 800e64a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e64e:	bf00      	nop
 800e650:	0800e669 	.word	0x0800e669
 800e654:	0800e69d 	.word	0x0800e69d
 800e658:	0800e6d1 	.word	0x0800e6d1
 800e65c:	0800e705 	.word	0x0800e705
 800e660:	0800e739 	.word	0x0800e739
 800e664:	0800e76d 	.word	0x0800e76d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e66e:	685b      	ldr	r3, [r3, #4]
 800e670:	2b00      	cmp	r3, #0
 800e672:	d00b      	beq.n	800e68c <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e67a:	685b      	ldr	r3, [r3, #4]
 800e67c:	687a      	ldr	r2, [r7, #4]
 800e67e:	7c12      	ldrb	r2, [r2, #16]
 800e680:	f107 0108 	add.w	r1, r7, #8
 800e684:	4610      	mov	r0, r2
 800e686:	4798      	blx	r3
 800e688:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e68a:	e091      	b.n	800e7b0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e68c:	6839      	ldr	r1, [r7, #0]
 800e68e:	6878      	ldr	r0, [r7, #4]
 800e690:	f000 facb 	bl	800ec2a <USBD_CtlError>
            err++;
 800e694:	7afb      	ldrb	r3, [r7, #11]
 800e696:	3301      	adds	r3, #1
 800e698:	72fb      	strb	r3, [r7, #11]
          break;
 800e69a:	e089      	b.n	800e7b0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e6a2:	689b      	ldr	r3, [r3, #8]
 800e6a4:	2b00      	cmp	r3, #0
 800e6a6:	d00b      	beq.n	800e6c0 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e6ae:	689b      	ldr	r3, [r3, #8]
 800e6b0:	687a      	ldr	r2, [r7, #4]
 800e6b2:	7c12      	ldrb	r2, [r2, #16]
 800e6b4:	f107 0108 	add.w	r1, r7, #8
 800e6b8:	4610      	mov	r0, r2
 800e6ba:	4798      	blx	r3
 800e6bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e6be:	e077      	b.n	800e7b0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e6c0:	6839      	ldr	r1, [r7, #0]
 800e6c2:	6878      	ldr	r0, [r7, #4]
 800e6c4:	f000 fab1 	bl	800ec2a <USBD_CtlError>
            err++;
 800e6c8:	7afb      	ldrb	r3, [r7, #11]
 800e6ca:	3301      	adds	r3, #1
 800e6cc:	72fb      	strb	r3, [r7, #11]
          break;
 800e6ce:	e06f      	b.n	800e7b0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e6d6:	68db      	ldr	r3, [r3, #12]
 800e6d8:	2b00      	cmp	r3, #0
 800e6da:	d00b      	beq.n	800e6f4 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e6e2:	68db      	ldr	r3, [r3, #12]
 800e6e4:	687a      	ldr	r2, [r7, #4]
 800e6e6:	7c12      	ldrb	r2, [r2, #16]
 800e6e8:	f107 0108 	add.w	r1, r7, #8
 800e6ec:	4610      	mov	r0, r2
 800e6ee:	4798      	blx	r3
 800e6f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e6f2:	e05d      	b.n	800e7b0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e6f4:	6839      	ldr	r1, [r7, #0]
 800e6f6:	6878      	ldr	r0, [r7, #4]
 800e6f8:	f000 fa97 	bl	800ec2a <USBD_CtlError>
            err++;
 800e6fc:	7afb      	ldrb	r3, [r7, #11]
 800e6fe:	3301      	adds	r3, #1
 800e700:	72fb      	strb	r3, [r7, #11]
          break;
 800e702:	e055      	b.n	800e7b0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e70a:	691b      	ldr	r3, [r3, #16]
 800e70c:	2b00      	cmp	r3, #0
 800e70e:	d00b      	beq.n	800e728 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e716:	691b      	ldr	r3, [r3, #16]
 800e718:	687a      	ldr	r2, [r7, #4]
 800e71a:	7c12      	ldrb	r2, [r2, #16]
 800e71c:	f107 0108 	add.w	r1, r7, #8
 800e720:	4610      	mov	r0, r2
 800e722:	4798      	blx	r3
 800e724:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e726:	e043      	b.n	800e7b0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e728:	6839      	ldr	r1, [r7, #0]
 800e72a:	6878      	ldr	r0, [r7, #4]
 800e72c:	f000 fa7d 	bl	800ec2a <USBD_CtlError>
            err++;
 800e730:	7afb      	ldrb	r3, [r7, #11]
 800e732:	3301      	adds	r3, #1
 800e734:	72fb      	strb	r3, [r7, #11]
          break;
 800e736:	e03b      	b.n	800e7b0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e73e:	695b      	ldr	r3, [r3, #20]
 800e740:	2b00      	cmp	r3, #0
 800e742:	d00b      	beq.n	800e75c <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e74a:	695b      	ldr	r3, [r3, #20]
 800e74c:	687a      	ldr	r2, [r7, #4]
 800e74e:	7c12      	ldrb	r2, [r2, #16]
 800e750:	f107 0108 	add.w	r1, r7, #8
 800e754:	4610      	mov	r0, r2
 800e756:	4798      	blx	r3
 800e758:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e75a:	e029      	b.n	800e7b0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e75c:	6839      	ldr	r1, [r7, #0]
 800e75e:	6878      	ldr	r0, [r7, #4]
 800e760:	f000 fa63 	bl	800ec2a <USBD_CtlError>
            err++;
 800e764:	7afb      	ldrb	r3, [r7, #11]
 800e766:	3301      	adds	r3, #1
 800e768:	72fb      	strb	r3, [r7, #11]
          break;
 800e76a:	e021      	b.n	800e7b0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e772:	699b      	ldr	r3, [r3, #24]
 800e774:	2b00      	cmp	r3, #0
 800e776:	d00b      	beq.n	800e790 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e77e:	699b      	ldr	r3, [r3, #24]
 800e780:	687a      	ldr	r2, [r7, #4]
 800e782:	7c12      	ldrb	r2, [r2, #16]
 800e784:	f107 0108 	add.w	r1, r7, #8
 800e788:	4610      	mov	r0, r2
 800e78a:	4798      	blx	r3
 800e78c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e78e:	e00f      	b.n	800e7b0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e790:	6839      	ldr	r1, [r7, #0]
 800e792:	6878      	ldr	r0, [r7, #4]
 800e794:	f000 fa49 	bl	800ec2a <USBD_CtlError>
            err++;
 800e798:	7afb      	ldrb	r3, [r7, #11]
 800e79a:	3301      	adds	r3, #1
 800e79c:	72fb      	strb	r3, [r7, #11]
          break;
 800e79e:	e007      	b.n	800e7b0 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800e7a0:	6839      	ldr	r1, [r7, #0]
 800e7a2:	6878      	ldr	r0, [r7, #4]
 800e7a4:	f000 fa41 	bl	800ec2a <USBD_CtlError>
          err++;
 800e7a8:	7afb      	ldrb	r3, [r7, #11]
 800e7aa:	3301      	adds	r3, #1
 800e7ac:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800e7ae:	bf00      	nop
      }
      break;
 800e7b0:	e037      	b.n	800e822 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	7c1b      	ldrb	r3, [r3, #16]
 800e7b6:	2b00      	cmp	r3, #0
 800e7b8:	d109      	bne.n	800e7ce <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e7c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e7c2:	f107 0208 	add.w	r2, r7, #8
 800e7c6:	4610      	mov	r0, r2
 800e7c8:	4798      	blx	r3
 800e7ca:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e7cc:	e029      	b.n	800e822 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800e7ce:	6839      	ldr	r1, [r7, #0]
 800e7d0:	6878      	ldr	r0, [r7, #4]
 800e7d2:	f000 fa2a 	bl	800ec2a <USBD_CtlError>
        err++;
 800e7d6:	7afb      	ldrb	r3, [r7, #11]
 800e7d8:	3301      	adds	r3, #1
 800e7da:	72fb      	strb	r3, [r7, #11]
      break;
 800e7dc:	e021      	b.n	800e822 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	7c1b      	ldrb	r3, [r3, #16]
 800e7e2:	2b00      	cmp	r3, #0
 800e7e4:	d10d      	bne.n	800e802 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e7ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e7ee:	f107 0208 	add.w	r2, r7, #8
 800e7f2:	4610      	mov	r0, r2
 800e7f4:	4798      	blx	r3
 800e7f6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800e7f8:	68fb      	ldr	r3, [r7, #12]
 800e7fa:	3301      	adds	r3, #1
 800e7fc:	2207      	movs	r2, #7
 800e7fe:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e800:	e00f      	b.n	800e822 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800e802:	6839      	ldr	r1, [r7, #0]
 800e804:	6878      	ldr	r0, [r7, #4]
 800e806:	f000 fa10 	bl	800ec2a <USBD_CtlError>
        err++;
 800e80a:	7afb      	ldrb	r3, [r7, #11]
 800e80c:	3301      	adds	r3, #1
 800e80e:	72fb      	strb	r3, [r7, #11]
      break;
 800e810:	e007      	b.n	800e822 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800e812:	6839      	ldr	r1, [r7, #0]
 800e814:	6878      	ldr	r0, [r7, #4]
 800e816:	f000 fa08 	bl	800ec2a <USBD_CtlError>
      err++;
 800e81a:	7afb      	ldrb	r3, [r7, #11]
 800e81c:	3301      	adds	r3, #1
 800e81e:	72fb      	strb	r3, [r7, #11]
      break;
 800e820:	bf00      	nop
  }

  if (err != 0U)
 800e822:	7afb      	ldrb	r3, [r7, #11]
 800e824:	2b00      	cmp	r3, #0
 800e826:	d11e      	bne.n	800e866 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800e828:	683b      	ldr	r3, [r7, #0]
 800e82a:	88db      	ldrh	r3, [r3, #6]
 800e82c:	2b00      	cmp	r3, #0
 800e82e:	d016      	beq.n	800e85e <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800e830:	893b      	ldrh	r3, [r7, #8]
 800e832:	2b00      	cmp	r3, #0
 800e834:	d00e      	beq.n	800e854 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800e836:	683b      	ldr	r3, [r7, #0]
 800e838:	88da      	ldrh	r2, [r3, #6]
 800e83a:	893b      	ldrh	r3, [r7, #8]
 800e83c:	4293      	cmp	r3, r2
 800e83e:	bf28      	it	cs
 800e840:	4613      	movcs	r3, r2
 800e842:	b29b      	uxth	r3, r3
 800e844:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800e846:	893b      	ldrh	r3, [r7, #8]
 800e848:	461a      	mov	r2, r3
 800e84a:	68f9      	ldr	r1, [r7, #12]
 800e84c:	6878      	ldr	r0, [r7, #4]
 800e84e:	f000 fa69 	bl	800ed24 <USBD_CtlSendData>
 800e852:	e009      	b.n	800e868 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800e854:	6839      	ldr	r1, [r7, #0]
 800e856:	6878      	ldr	r0, [r7, #4]
 800e858:	f000 f9e7 	bl	800ec2a <USBD_CtlError>
 800e85c:	e004      	b.n	800e868 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800e85e:	6878      	ldr	r0, [r7, #4]
 800e860:	f000 faba 	bl	800edd8 <USBD_CtlSendStatus>
 800e864:	e000      	b.n	800e868 <USBD_GetDescriptor+0x320>
    return;
 800e866:	bf00      	nop
  }
}
 800e868:	3710      	adds	r7, #16
 800e86a:	46bd      	mov	sp, r7
 800e86c:	bd80      	pop	{r7, pc}
 800e86e:	bf00      	nop

0800e870 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e870:	b580      	push	{r7, lr}
 800e872:	b084      	sub	sp, #16
 800e874:	af00      	add	r7, sp, #0
 800e876:	6078      	str	r0, [r7, #4]
 800e878:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800e87a:	683b      	ldr	r3, [r7, #0]
 800e87c:	889b      	ldrh	r3, [r3, #4]
 800e87e:	2b00      	cmp	r3, #0
 800e880:	d131      	bne.n	800e8e6 <USBD_SetAddress+0x76>
 800e882:	683b      	ldr	r3, [r7, #0]
 800e884:	88db      	ldrh	r3, [r3, #6]
 800e886:	2b00      	cmp	r3, #0
 800e888:	d12d      	bne.n	800e8e6 <USBD_SetAddress+0x76>
 800e88a:	683b      	ldr	r3, [r7, #0]
 800e88c:	885b      	ldrh	r3, [r3, #2]
 800e88e:	2b7f      	cmp	r3, #127	@ 0x7f
 800e890:	d829      	bhi.n	800e8e6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800e892:	683b      	ldr	r3, [r7, #0]
 800e894:	885b      	ldrh	r3, [r3, #2]
 800e896:	b2db      	uxtb	r3, r3
 800e898:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e89c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e8a4:	b2db      	uxtb	r3, r3
 800e8a6:	2b03      	cmp	r3, #3
 800e8a8:	d104      	bne.n	800e8b4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800e8aa:	6839      	ldr	r1, [r7, #0]
 800e8ac:	6878      	ldr	r0, [r7, #4]
 800e8ae:	f000 f9bc 	bl	800ec2a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e8b2:	e01d      	b.n	800e8f0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	7bfa      	ldrb	r2, [r7, #15]
 800e8b8:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800e8bc:	7bfb      	ldrb	r3, [r7, #15]
 800e8be:	4619      	mov	r1, r3
 800e8c0:	6878      	ldr	r0, [r7, #4]
 800e8c2:	f000 ff47 	bl	800f754 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800e8c6:	6878      	ldr	r0, [r7, #4]
 800e8c8:	f000 fa86 	bl	800edd8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800e8cc:	7bfb      	ldrb	r3, [r7, #15]
 800e8ce:	2b00      	cmp	r3, #0
 800e8d0:	d004      	beq.n	800e8dc <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	2202      	movs	r2, #2
 800e8d6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e8da:	e009      	b.n	800e8f0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	2201      	movs	r2, #1
 800e8e0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e8e4:	e004      	b.n	800e8f0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800e8e6:	6839      	ldr	r1, [r7, #0]
 800e8e8:	6878      	ldr	r0, [r7, #4]
 800e8ea:	f000 f99e 	bl	800ec2a <USBD_CtlError>
  }
}
 800e8ee:	bf00      	nop
 800e8f0:	bf00      	nop
 800e8f2:	3710      	adds	r7, #16
 800e8f4:	46bd      	mov	sp, r7
 800e8f6:	bd80      	pop	{r7, pc}

0800e8f8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e8f8:	b580      	push	{r7, lr}
 800e8fa:	b084      	sub	sp, #16
 800e8fc:	af00      	add	r7, sp, #0
 800e8fe:	6078      	str	r0, [r7, #4]
 800e900:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e902:	2300      	movs	r3, #0
 800e904:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800e906:	683b      	ldr	r3, [r7, #0]
 800e908:	885b      	ldrh	r3, [r3, #2]
 800e90a:	b2da      	uxtb	r2, r3
 800e90c:	4b4e      	ldr	r3, [pc, #312]	@ (800ea48 <USBD_SetConfig+0x150>)
 800e90e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800e910:	4b4d      	ldr	r3, [pc, #308]	@ (800ea48 <USBD_SetConfig+0x150>)
 800e912:	781b      	ldrb	r3, [r3, #0]
 800e914:	2b01      	cmp	r3, #1
 800e916:	d905      	bls.n	800e924 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800e918:	6839      	ldr	r1, [r7, #0]
 800e91a:	6878      	ldr	r0, [r7, #4]
 800e91c:	f000 f985 	bl	800ec2a <USBD_CtlError>
    return USBD_FAIL;
 800e920:	2303      	movs	r3, #3
 800e922:	e08c      	b.n	800ea3e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e92a:	b2db      	uxtb	r3, r3
 800e92c:	2b02      	cmp	r3, #2
 800e92e:	d002      	beq.n	800e936 <USBD_SetConfig+0x3e>
 800e930:	2b03      	cmp	r3, #3
 800e932:	d029      	beq.n	800e988 <USBD_SetConfig+0x90>
 800e934:	e075      	b.n	800ea22 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800e936:	4b44      	ldr	r3, [pc, #272]	@ (800ea48 <USBD_SetConfig+0x150>)
 800e938:	781b      	ldrb	r3, [r3, #0]
 800e93a:	2b00      	cmp	r3, #0
 800e93c:	d020      	beq.n	800e980 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800e93e:	4b42      	ldr	r3, [pc, #264]	@ (800ea48 <USBD_SetConfig+0x150>)
 800e940:	781b      	ldrb	r3, [r3, #0]
 800e942:	461a      	mov	r2, r3
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800e948:	4b3f      	ldr	r3, [pc, #252]	@ (800ea48 <USBD_SetConfig+0x150>)
 800e94a:	781b      	ldrb	r3, [r3, #0]
 800e94c:	4619      	mov	r1, r3
 800e94e:	6878      	ldr	r0, [r7, #4]
 800e950:	f7fe ffb9 	bl	800d8c6 <USBD_SetClassConfig>
 800e954:	4603      	mov	r3, r0
 800e956:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800e958:	7bfb      	ldrb	r3, [r7, #15]
 800e95a:	2b00      	cmp	r3, #0
 800e95c:	d008      	beq.n	800e970 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800e95e:	6839      	ldr	r1, [r7, #0]
 800e960:	6878      	ldr	r0, [r7, #4]
 800e962:	f000 f962 	bl	800ec2a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	2202      	movs	r2, #2
 800e96a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800e96e:	e065      	b.n	800ea3c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800e970:	6878      	ldr	r0, [r7, #4]
 800e972:	f000 fa31 	bl	800edd8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	2203      	movs	r2, #3
 800e97a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800e97e:	e05d      	b.n	800ea3c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800e980:	6878      	ldr	r0, [r7, #4]
 800e982:	f000 fa29 	bl	800edd8 <USBD_CtlSendStatus>
      break;
 800e986:	e059      	b.n	800ea3c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800e988:	4b2f      	ldr	r3, [pc, #188]	@ (800ea48 <USBD_SetConfig+0x150>)
 800e98a:	781b      	ldrb	r3, [r3, #0]
 800e98c:	2b00      	cmp	r3, #0
 800e98e:	d112      	bne.n	800e9b6 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	2202      	movs	r2, #2
 800e994:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800e998:	4b2b      	ldr	r3, [pc, #172]	@ (800ea48 <USBD_SetConfig+0x150>)
 800e99a:	781b      	ldrb	r3, [r3, #0]
 800e99c:	461a      	mov	r2, r3
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e9a2:	4b29      	ldr	r3, [pc, #164]	@ (800ea48 <USBD_SetConfig+0x150>)
 800e9a4:	781b      	ldrb	r3, [r3, #0]
 800e9a6:	4619      	mov	r1, r3
 800e9a8:	6878      	ldr	r0, [r7, #4]
 800e9aa:	f7fe ffa8 	bl	800d8fe <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800e9ae:	6878      	ldr	r0, [r7, #4]
 800e9b0:	f000 fa12 	bl	800edd8 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800e9b4:	e042      	b.n	800ea3c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800e9b6:	4b24      	ldr	r3, [pc, #144]	@ (800ea48 <USBD_SetConfig+0x150>)
 800e9b8:	781b      	ldrb	r3, [r3, #0]
 800e9ba:	461a      	mov	r2, r3
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	685b      	ldr	r3, [r3, #4]
 800e9c0:	429a      	cmp	r2, r3
 800e9c2:	d02a      	beq.n	800ea1a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	685b      	ldr	r3, [r3, #4]
 800e9c8:	b2db      	uxtb	r3, r3
 800e9ca:	4619      	mov	r1, r3
 800e9cc:	6878      	ldr	r0, [r7, #4]
 800e9ce:	f7fe ff96 	bl	800d8fe <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800e9d2:	4b1d      	ldr	r3, [pc, #116]	@ (800ea48 <USBD_SetConfig+0x150>)
 800e9d4:	781b      	ldrb	r3, [r3, #0]
 800e9d6:	461a      	mov	r2, r3
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800e9dc:	4b1a      	ldr	r3, [pc, #104]	@ (800ea48 <USBD_SetConfig+0x150>)
 800e9de:	781b      	ldrb	r3, [r3, #0]
 800e9e0:	4619      	mov	r1, r3
 800e9e2:	6878      	ldr	r0, [r7, #4]
 800e9e4:	f7fe ff6f 	bl	800d8c6 <USBD_SetClassConfig>
 800e9e8:	4603      	mov	r3, r0
 800e9ea:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800e9ec:	7bfb      	ldrb	r3, [r7, #15]
 800e9ee:	2b00      	cmp	r3, #0
 800e9f0:	d00f      	beq.n	800ea12 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800e9f2:	6839      	ldr	r1, [r7, #0]
 800e9f4:	6878      	ldr	r0, [r7, #4]
 800e9f6:	f000 f918 	bl	800ec2a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	685b      	ldr	r3, [r3, #4]
 800e9fe:	b2db      	uxtb	r3, r3
 800ea00:	4619      	mov	r1, r3
 800ea02:	6878      	ldr	r0, [r7, #4]
 800ea04:	f7fe ff7b 	bl	800d8fe <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	2202      	movs	r2, #2
 800ea0c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800ea10:	e014      	b.n	800ea3c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800ea12:	6878      	ldr	r0, [r7, #4]
 800ea14:	f000 f9e0 	bl	800edd8 <USBD_CtlSendStatus>
      break;
 800ea18:	e010      	b.n	800ea3c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800ea1a:	6878      	ldr	r0, [r7, #4]
 800ea1c:	f000 f9dc 	bl	800edd8 <USBD_CtlSendStatus>
      break;
 800ea20:	e00c      	b.n	800ea3c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800ea22:	6839      	ldr	r1, [r7, #0]
 800ea24:	6878      	ldr	r0, [r7, #4]
 800ea26:	f000 f900 	bl	800ec2a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ea2a:	4b07      	ldr	r3, [pc, #28]	@ (800ea48 <USBD_SetConfig+0x150>)
 800ea2c:	781b      	ldrb	r3, [r3, #0]
 800ea2e:	4619      	mov	r1, r3
 800ea30:	6878      	ldr	r0, [r7, #4]
 800ea32:	f7fe ff64 	bl	800d8fe <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800ea36:	2303      	movs	r3, #3
 800ea38:	73fb      	strb	r3, [r7, #15]
      break;
 800ea3a:	bf00      	nop
  }

  return ret;
 800ea3c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ea3e:	4618      	mov	r0, r3
 800ea40:	3710      	adds	r7, #16
 800ea42:	46bd      	mov	sp, r7
 800ea44:	bd80      	pop	{r7, pc}
 800ea46:	bf00      	nop
 800ea48:	2400087c 	.word	0x2400087c

0800ea4c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ea4c:	b580      	push	{r7, lr}
 800ea4e:	b082      	sub	sp, #8
 800ea50:	af00      	add	r7, sp, #0
 800ea52:	6078      	str	r0, [r7, #4]
 800ea54:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800ea56:	683b      	ldr	r3, [r7, #0]
 800ea58:	88db      	ldrh	r3, [r3, #6]
 800ea5a:	2b01      	cmp	r3, #1
 800ea5c:	d004      	beq.n	800ea68 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800ea5e:	6839      	ldr	r1, [r7, #0]
 800ea60:	6878      	ldr	r0, [r7, #4]
 800ea62:	f000 f8e2 	bl	800ec2a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800ea66:	e023      	b.n	800eab0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ea6e:	b2db      	uxtb	r3, r3
 800ea70:	2b02      	cmp	r3, #2
 800ea72:	dc02      	bgt.n	800ea7a <USBD_GetConfig+0x2e>
 800ea74:	2b00      	cmp	r3, #0
 800ea76:	dc03      	bgt.n	800ea80 <USBD_GetConfig+0x34>
 800ea78:	e015      	b.n	800eaa6 <USBD_GetConfig+0x5a>
 800ea7a:	2b03      	cmp	r3, #3
 800ea7c:	d00b      	beq.n	800ea96 <USBD_GetConfig+0x4a>
 800ea7e:	e012      	b.n	800eaa6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	2200      	movs	r2, #0
 800ea84:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	3308      	adds	r3, #8
 800ea8a:	2201      	movs	r2, #1
 800ea8c:	4619      	mov	r1, r3
 800ea8e:	6878      	ldr	r0, [r7, #4]
 800ea90:	f000 f948 	bl	800ed24 <USBD_CtlSendData>
        break;
 800ea94:	e00c      	b.n	800eab0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	3304      	adds	r3, #4
 800ea9a:	2201      	movs	r2, #1
 800ea9c:	4619      	mov	r1, r3
 800ea9e:	6878      	ldr	r0, [r7, #4]
 800eaa0:	f000 f940 	bl	800ed24 <USBD_CtlSendData>
        break;
 800eaa4:	e004      	b.n	800eab0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800eaa6:	6839      	ldr	r1, [r7, #0]
 800eaa8:	6878      	ldr	r0, [r7, #4]
 800eaaa:	f000 f8be 	bl	800ec2a <USBD_CtlError>
        break;
 800eaae:	bf00      	nop
}
 800eab0:	bf00      	nop
 800eab2:	3708      	adds	r7, #8
 800eab4:	46bd      	mov	sp, r7
 800eab6:	bd80      	pop	{r7, pc}

0800eab8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800eab8:	b580      	push	{r7, lr}
 800eaba:	b082      	sub	sp, #8
 800eabc:	af00      	add	r7, sp, #0
 800eabe:	6078      	str	r0, [r7, #4]
 800eac0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800eac8:	b2db      	uxtb	r3, r3
 800eaca:	3b01      	subs	r3, #1
 800eacc:	2b02      	cmp	r3, #2
 800eace:	d81e      	bhi.n	800eb0e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800ead0:	683b      	ldr	r3, [r7, #0]
 800ead2:	88db      	ldrh	r3, [r3, #6]
 800ead4:	2b02      	cmp	r3, #2
 800ead6:	d004      	beq.n	800eae2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800ead8:	6839      	ldr	r1, [r7, #0]
 800eada:	6878      	ldr	r0, [r7, #4]
 800eadc:	f000 f8a5 	bl	800ec2a <USBD_CtlError>
        break;
 800eae0:	e01a      	b.n	800eb18 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	2201      	movs	r2, #1
 800eae6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800eaee:	2b00      	cmp	r3, #0
 800eaf0:	d005      	beq.n	800eafe <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	68db      	ldr	r3, [r3, #12]
 800eaf6:	f043 0202 	orr.w	r2, r3, #2
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	330c      	adds	r3, #12
 800eb02:	2202      	movs	r2, #2
 800eb04:	4619      	mov	r1, r3
 800eb06:	6878      	ldr	r0, [r7, #4]
 800eb08:	f000 f90c 	bl	800ed24 <USBD_CtlSendData>
      break;
 800eb0c:	e004      	b.n	800eb18 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800eb0e:	6839      	ldr	r1, [r7, #0]
 800eb10:	6878      	ldr	r0, [r7, #4]
 800eb12:	f000 f88a 	bl	800ec2a <USBD_CtlError>
      break;
 800eb16:	bf00      	nop
  }
}
 800eb18:	bf00      	nop
 800eb1a:	3708      	adds	r7, #8
 800eb1c:	46bd      	mov	sp, r7
 800eb1e:	bd80      	pop	{r7, pc}

0800eb20 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800eb20:	b580      	push	{r7, lr}
 800eb22:	b082      	sub	sp, #8
 800eb24:	af00      	add	r7, sp, #0
 800eb26:	6078      	str	r0, [r7, #4]
 800eb28:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800eb2a:	683b      	ldr	r3, [r7, #0]
 800eb2c:	885b      	ldrh	r3, [r3, #2]
 800eb2e:	2b01      	cmp	r3, #1
 800eb30:	d107      	bne.n	800eb42 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	2201      	movs	r2, #1
 800eb36:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800eb3a:	6878      	ldr	r0, [r7, #4]
 800eb3c:	f000 f94c 	bl	800edd8 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800eb40:	e013      	b.n	800eb6a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800eb42:	683b      	ldr	r3, [r7, #0]
 800eb44:	885b      	ldrh	r3, [r3, #2]
 800eb46:	2b02      	cmp	r3, #2
 800eb48:	d10b      	bne.n	800eb62 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800eb4a:	683b      	ldr	r3, [r7, #0]
 800eb4c:	889b      	ldrh	r3, [r3, #4]
 800eb4e:	0a1b      	lsrs	r3, r3, #8
 800eb50:	b29b      	uxth	r3, r3
 800eb52:	b2da      	uxtb	r2, r3
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800eb5a:	6878      	ldr	r0, [r7, #4]
 800eb5c:	f000 f93c 	bl	800edd8 <USBD_CtlSendStatus>
}
 800eb60:	e003      	b.n	800eb6a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800eb62:	6839      	ldr	r1, [r7, #0]
 800eb64:	6878      	ldr	r0, [r7, #4]
 800eb66:	f000 f860 	bl	800ec2a <USBD_CtlError>
}
 800eb6a:	bf00      	nop
 800eb6c:	3708      	adds	r7, #8
 800eb6e:	46bd      	mov	sp, r7
 800eb70:	bd80      	pop	{r7, pc}

0800eb72 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800eb72:	b580      	push	{r7, lr}
 800eb74:	b082      	sub	sp, #8
 800eb76:	af00      	add	r7, sp, #0
 800eb78:	6078      	str	r0, [r7, #4]
 800eb7a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800eb82:	b2db      	uxtb	r3, r3
 800eb84:	3b01      	subs	r3, #1
 800eb86:	2b02      	cmp	r3, #2
 800eb88:	d80b      	bhi.n	800eba2 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800eb8a:	683b      	ldr	r3, [r7, #0]
 800eb8c:	885b      	ldrh	r3, [r3, #2]
 800eb8e:	2b01      	cmp	r3, #1
 800eb90:	d10c      	bne.n	800ebac <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	2200      	movs	r2, #0
 800eb96:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800eb9a:	6878      	ldr	r0, [r7, #4]
 800eb9c:	f000 f91c 	bl	800edd8 <USBD_CtlSendStatus>
      }
      break;
 800eba0:	e004      	b.n	800ebac <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800eba2:	6839      	ldr	r1, [r7, #0]
 800eba4:	6878      	ldr	r0, [r7, #4]
 800eba6:	f000 f840 	bl	800ec2a <USBD_CtlError>
      break;
 800ebaa:	e000      	b.n	800ebae <USBD_ClrFeature+0x3c>
      break;
 800ebac:	bf00      	nop
  }
}
 800ebae:	bf00      	nop
 800ebb0:	3708      	adds	r7, #8
 800ebb2:	46bd      	mov	sp, r7
 800ebb4:	bd80      	pop	{r7, pc}

0800ebb6 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800ebb6:	b580      	push	{r7, lr}
 800ebb8:	b084      	sub	sp, #16
 800ebba:	af00      	add	r7, sp, #0
 800ebbc:	6078      	str	r0, [r7, #4]
 800ebbe:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800ebc0:	683b      	ldr	r3, [r7, #0]
 800ebc2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800ebc4:	68fb      	ldr	r3, [r7, #12]
 800ebc6:	781a      	ldrb	r2, [r3, #0]
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800ebcc:	68fb      	ldr	r3, [r7, #12]
 800ebce:	3301      	adds	r3, #1
 800ebd0:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800ebd2:	68fb      	ldr	r3, [r7, #12]
 800ebd4:	781a      	ldrb	r2, [r3, #0]
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800ebda:	68fb      	ldr	r3, [r7, #12]
 800ebdc:	3301      	adds	r3, #1
 800ebde:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800ebe0:	68f8      	ldr	r0, [r7, #12]
 800ebe2:	f7ff fa16 	bl	800e012 <SWAPBYTE>
 800ebe6:	4603      	mov	r3, r0
 800ebe8:	461a      	mov	r2, r3
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800ebee:	68fb      	ldr	r3, [r7, #12]
 800ebf0:	3301      	adds	r3, #1
 800ebf2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ebf4:	68fb      	ldr	r3, [r7, #12]
 800ebf6:	3301      	adds	r3, #1
 800ebf8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800ebfa:	68f8      	ldr	r0, [r7, #12]
 800ebfc:	f7ff fa09 	bl	800e012 <SWAPBYTE>
 800ec00:	4603      	mov	r3, r0
 800ec02:	461a      	mov	r2, r3
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800ec08:	68fb      	ldr	r3, [r7, #12]
 800ec0a:	3301      	adds	r3, #1
 800ec0c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ec0e:	68fb      	ldr	r3, [r7, #12]
 800ec10:	3301      	adds	r3, #1
 800ec12:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800ec14:	68f8      	ldr	r0, [r7, #12]
 800ec16:	f7ff f9fc 	bl	800e012 <SWAPBYTE>
 800ec1a:	4603      	mov	r3, r0
 800ec1c:	461a      	mov	r2, r3
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	80da      	strh	r2, [r3, #6]
}
 800ec22:	bf00      	nop
 800ec24:	3710      	adds	r7, #16
 800ec26:	46bd      	mov	sp, r7
 800ec28:	bd80      	pop	{r7, pc}

0800ec2a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ec2a:	b580      	push	{r7, lr}
 800ec2c:	b082      	sub	sp, #8
 800ec2e:	af00      	add	r7, sp, #0
 800ec30:	6078      	str	r0, [r7, #4]
 800ec32:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800ec34:	2180      	movs	r1, #128	@ 0x80
 800ec36:	6878      	ldr	r0, [r7, #4]
 800ec38:	f000 fd22 	bl	800f680 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800ec3c:	2100      	movs	r1, #0
 800ec3e:	6878      	ldr	r0, [r7, #4]
 800ec40:	f000 fd1e 	bl	800f680 <USBD_LL_StallEP>
}
 800ec44:	bf00      	nop
 800ec46:	3708      	adds	r7, #8
 800ec48:	46bd      	mov	sp, r7
 800ec4a:	bd80      	pop	{r7, pc}

0800ec4c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800ec4c:	b580      	push	{r7, lr}
 800ec4e:	b086      	sub	sp, #24
 800ec50:	af00      	add	r7, sp, #0
 800ec52:	60f8      	str	r0, [r7, #12]
 800ec54:	60b9      	str	r1, [r7, #8]
 800ec56:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800ec58:	2300      	movs	r3, #0
 800ec5a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800ec5c:	68fb      	ldr	r3, [r7, #12]
 800ec5e:	2b00      	cmp	r3, #0
 800ec60:	d042      	beq.n	800ece8 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800ec62:	68fb      	ldr	r3, [r7, #12]
 800ec64:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800ec66:	6938      	ldr	r0, [r7, #16]
 800ec68:	f000 f842 	bl	800ecf0 <USBD_GetLen>
 800ec6c:	4603      	mov	r3, r0
 800ec6e:	3301      	adds	r3, #1
 800ec70:	005b      	lsls	r3, r3, #1
 800ec72:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ec76:	d808      	bhi.n	800ec8a <USBD_GetString+0x3e>
 800ec78:	6938      	ldr	r0, [r7, #16]
 800ec7a:	f000 f839 	bl	800ecf0 <USBD_GetLen>
 800ec7e:	4603      	mov	r3, r0
 800ec80:	3301      	adds	r3, #1
 800ec82:	b29b      	uxth	r3, r3
 800ec84:	005b      	lsls	r3, r3, #1
 800ec86:	b29a      	uxth	r2, r3
 800ec88:	e001      	b.n	800ec8e <USBD_GetString+0x42>
 800ec8a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800ec92:	7dfb      	ldrb	r3, [r7, #23]
 800ec94:	68ba      	ldr	r2, [r7, #8]
 800ec96:	4413      	add	r3, r2
 800ec98:	687a      	ldr	r2, [r7, #4]
 800ec9a:	7812      	ldrb	r2, [r2, #0]
 800ec9c:	701a      	strb	r2, [r3, #0]
  idx++;
 800ec9e:	7dfb      	ldrb	r3, [r7, #23]
 800eca0:	3301      	adds	r3, #1
 800eca2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800eca4:	7dfb      	ldrb	r3, [r7, #23]
 800eca6:	68ba      	ldr	r2, [r7, #8]
 800eca8:	4413      	add	r3, r2
 800ecaa:	2203      	movs	r2, #3
 800ecac:	701a      	strb	r2, [r3, #0]
  idx++;
 800ecae:	7dfb      	ldrb	r3, [r7, #23]
 800ecb0:	3301      	adds	r3, #1
 800ecb2:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800ecb4:	e013      	b.n	800ecde <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800ecb6:	7dfb      	ldrb	r3, [r7, #23]
 800ecb8:	68ba      	ldr	r2, [r7, #8]
 800ecba:	4413      	add	r3, r2
 800ecbc:	693a      	ldr	r2, [r7, #16]
 800ecbe:	7812      	ldrb	r2, [r2, #0]
 800ecc0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800ecc2:	693b      	ldr	r3, [r7, #16]
 800ecc4:	3301      	adds	r3, #1
 800ecc6:	613b      	str	r3, [r7, #16]
    idx++;
 800ecc8:	7dfb      	ldrb	r3, [r7, #23]
 800ecca:	3301      	adds	r3, #1
 800eccc:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800ecce:	7dfb      	ldrb	r3, [r7, #23]
 800ecd0:	68ba      	ldr	r2, [r7, #8]
 800ecd2:	4413      	add	r3, r2
 800ecd4:	2200      	movs	r2, #0
 800ecd6:	701a      	strb	r2, [r3, #0]
    idx++;
 800ecd8:	7dfb      	ldrb	r3, [r7, #23]
 800ecda:	3301      	adds	r3, #1
 800ecdc:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800ecde:	693b      	ldr	r3, [r7, #16]
 800ece0:	781b      	ldrb	r3, [r3, #0]
 800ece2:	2b00      	cmp	r3, #0
 800ece4:	d1e7      	bne.n	800ecb6 <USBD_GetString+0x6a>
 800ece6:	e000      	b.n	800ecea <USBD_GetString+0x9e>
    return;
 800ece8:	bf00      	nop
  }
}
 800ecea:	3718      	adds	r7, #24
 800ecec:	46bd      	mov	sp, r7
 800ecee:	bd80      	pop	{r7, pc}

0800ecf0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800ecf0:	b480      	push	{r7}
 800ecf2:	b085      	sub	sp, #20
 800ecf4:	af00      	add	r7, sp, #0
 800ecf6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800ecf8:	2300      	movs	r3, #0
 800ecfa:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800ed00:	e005      	b.n	800ed0e <USBD_GetLen+0x1e>
  {
    len++;
 800ed02:	7bfb      	ldrb	r3, [r7, #15]
 800ed04:	3301      	adds	r3, #1
 800ed06:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800ed08:	68bb      	ldr	r3, [r7, #8]
 800ed0a:	3301      	adds	r3, #1
 800ed0c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800ed0e:	68bb      	ldr	r3, [r7, #8]
 800ed10:	781b      	ldrb	r3, [r3, #0]
 800ed12:	2b00      	cmp	r3, #0
 800ed14:	d1f5      	bne.n	800ed02 <USBD_GetLen+0x12>
  }

  return len;
 800ed16:	7bfb      	ldrb	r3, [r7, #15]
}
 800ed18:	4618      	mov	r0, r3
 800ed1a:	3714      	adds	r7, #20
 800ed1c:	46bd      	mov	sp, r7
 800ed1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed22:	4770      	bx	lr

0800ed24 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800ed24:	b580      	push	{r7, lr}
 800ed26:	b084      	sub	sp, #16
 800ed28:	af00      	add	r7, sp, #0
 800ed2a:	60f8      	str	r0, [r7, #12]
 800ed2c:	60b9      	str	r1, [r7, #8]
 800ed2e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800ed30:	68fb      	ldr	r3, [r7, #12]
 800ed32:	2202      	movs	r2, #2
 800ed34:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800ed38:	68fb      	ldr	r3, [r7, #12]
 800ed3a:	687a      	ldr	r2, [r7, #4]
 800ed3c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800ed3e:	68fb      	ldr	r3, [r7, #12]
 800ed40:	687a      	ldr	r2, [r7, #4]
 800ed42:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	68ba      	ldr	r2, [r7, #8]
 800ed48:	2100      	movs	r1, #0
 800ed4a:	68f8      	ldr	r0, [r7, #12]
 800ed4c:	f000 fd21 	bl	800f792 <USBD_LL_Transmit>

  return USBD_OK;
 800ed50:	2300      	movs	r3, #0
}
 800ed52:	4618      	mov	r0, r3
 800ed54:	3710      	adds	r7, #16
 800ed56:	46bd      	mov	sp, r7
 800ed58:	bd80      	pop	{r7, pc}

0800ed5a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800ed5a:	b580      	push	{r7, lr}
 800ed5c:	b084      	sub	sp, #16
 800ed5e:	af00      	add	r7, sp, #0
 800ed60:	60f8      	str	r0, [r7, #12]
 800ed62:	60b9      	str	r1, [r7, #8]
 800ed64:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	68ba      	ldr	r2, [r7, #8]
 800ed6a:	2100      	movs	r1, #0
 800ed6c:	68f8      	ldr	r0, [r7, #12]
 800ed6e:	f000 fd10 	bl	800f792 <USBD_LL_Transmit>

  return USBD_OK;
 800ed72:	2300      	movs	r3, #0
}
 800ed74:	4618      	mov	r0, r3
 800ed76:	3710      	adds	r7, #16
 800ed78:	46bd      	mov	sp, r7
 800ed7a:	bd80      	pop	{r7, pc}

0800ed7c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800ed7c:	b580      	push	{r7, lr}
 800ed7e:	b084      	sub	sp, #16
 800ed80:	af00      	add	r7, sp, #0
 800ed82:	60f8      	str	r0, [r7, #12]
 800ed84:	60b9      	str	r1, [r7, #8]
 800ed86:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800ed88:	68fb      	ldr	r3, [r7, #12]
 800ed8a:	2203      	movs	r2, #3
 800ed8c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800ed90:	68fb      	ldr	r3, [r7, #12]
 800ed92:	687a      	ldr	r2, [r7, #4]
 800ed94:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800ed98:	68fb      	ldr	r3, [r7, #12]
 800ed9a:	687a      	ldr	r2, [r7, #4]
 800ed9c:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	68ba      	ldr	r2, [r7, #8]
 800eda4:	2100      	movs	r1, #0
 800eda6:	68f8      	ldr	r0, [r7, #12]
 800eda8:	f000 fd14 	bl	800f7d4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800edac:	2300      	movs	r3, #0
}
 800edae:	4618      	mov	r0, r3
 800edb0:	3710      	adds	r7, #16
 800edb2:	46bd      	mov	sp, r7
 800edb4:	bd80      	pop	{r7, pc}

0800edb6 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800edb6:	b580      	push	{r7, lr}
 800edb8:	b084      	sub	sp, #16
 800edba:	af00      	add	r7, sp, #0
 800edbc:	60f8      	str	r0, [r7, #12]
 800edbe:	60b9      	str	r1, [r7, #8]
 800edc0:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	68ba      	ldr	r2, [r7, #8]
 800edc6:	2100      	movs	r1, #0
 800edc8:	68f8      	ldr	r0, [r7, #12]
 800edca:	f000 fd03 	bl	800f7d4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800edce:	2300      	movs	r3, #0
}
 800edd0:	4618      	mov	r0, r3
 800edd2:	3710      	adds	r7, #16
 800edd4:	46bd      	mov	sp, r7
 800edd6:	bd80      	pop	{r7, pc}

0800edd8 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800edd8:	b580      	push	{r7, lr}
 800edda:	b082      	sub	sp, #8
 800eddc:	af00      	add	r7, sp, #0
 800edde:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	2204      	movs	r2, #4
 800ede4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800ede8:	2300      	movs	r3, #0
 800edea:	2200      	movs	r2, #0
 800edec:	2100      	movs	r1, #0
 800edee:	6878      	ldr	r0, [r7, #4]
 800edf0:	f000 fccf 	bl	800f792 <USBD_LL_Transmit>

  return USBD_OK;
 800edf4:	2300      	movs	r3, #0
}
 800edf6:	4618      	mov	r0, r3
 800edf8:	3708      	adds	r7, #8
 800edfa:	46bd      	mov	sp, r7
 800edfc:	bd80      	pop	{r7, pc}

0800edfe <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800edfe:	b580      	push	{r7, lr}
 800ee00:	b082      	sub	sp, #8
 800ee02:	af00      	add	r7, sp, #0
 800ee04:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	2205      	movs	r2, #5
 800ee0a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ee0e:	2300      	movs	r3, #0
 800ee10:	2200      	movs	r2, #0
 800ee12:	2100      	movs	r1, #0
 800ee14:	6878      	ldr	r0, [r7, #4]
 800ee16:	f000 fcdd 	bl	800f7d4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ee1a:	2300      	movs	r3, #0
}
 800ee1c:	4618      	mov	r0, r3
 800ee1e:	3708      	adds	r7, #8
 800ee20:	46bd      	mov	sp, r7
 800ee22:	bd80      	pop	{r7, pc}

0800ee24 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800ee24:	b580      	push	{r7, lr}
 800ee26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800ee28:	2200      	movs	r2, #0
 800ee2a:	4913      	ldr	r1, [pc, #76]	@ (800ee78 <MX_USB_DEVICE_Init+0x54>)
 800ee2c:	4813      	ldr	r0, [pc, #76]	@ (800ee7c <MX_USB_DEVICE_Init+0x58>)
 800ee2e:	f7fe fccd 	bl	800d7cc <USBD_Init>
 800ee32:	4603      	mov	r3, r0
 800ee34:	2b00      	cmp	r3, #0
 800ee36:	d001      	beq.n	800ee3c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800ee38:	f7f2 f92a 	bl	8001090 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800ee3c:	4910      	ldr	r1, [pc, #64]	@ (800ee80 <MX_USB_DEVICE_Init+0x5c>)
 800ee3e:	480f      	ldr	r0, [pc, #60]	@ (800ee7c <MX_USB_DEVICE_Init+0x58>)
 800ee40:	f7fe fcf4 	bl	800d82c <USBD_RegisterClass>
 800ee44:	4603      	mov	r3, r0
 800ee46:	2b00      	cmp	r3, #0
 800ee48:	d001      	beq.n	800ee4e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800ee4a:	f7f2 f921 	bl	8001090 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800ee4e:	490d      	ldr	r1, [pc, #52]	@ (800ee84 <MX_USB_DEVICE_Init+0x60>)
 800ee50:	480a      	ldr	r0, [pc, #40]	@ (800ee7c <MX_USB_DEVICE_Init+0x58>)
 800ee52:	f7fe fbeb 	bl	800d62c <USBD_CDC_RegisterInterface>
 800ee56:	4603      	mov	r3, r0
 800ee58:	2b00      	cmp	r3, #0
 800ee5a:	d001      	beq.n	800ee60 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800ee5c:	f7f2 f918 	bl	8001090 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800ee60:	4806      	ldr	r0, [pc, #24]	@ (800ee7c <MX_USB_DEVICE_Init+0x58>)
 800ee62:	f7fe fd19 	bl	800d898 <USBD_Start>
 800ee66:	4603      	mov	r3, r0
 800ee68:	2b00      	cmp	r3, #0
 800ee6a:	d001      	beq.n	800ee70 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800ee6c:	f7f2 f910 	bl	8001090 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 800ee70:	f7f7 fa44 	bl	80062fc <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800ee74:	bf00      	nop
 800ee76:	bd80      	pop	{r7, pc}
 800ee78:	240000e4 	.word	0x240000e4
 800ee7c:	24000880 	.word	0x24000880
 800ee80:	24000050 	.word	0x24000050
 800ee84:	240000d0 	.word	0x240000d0

0800ee88 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800ee88:	b580      	push	{r7, lr}
 800ee8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800ee8c:	2200      	movs	r2, #0
 800ee8e:	4905      	ldr	r1, [pc, #20]	@ (800eea4 <CDC_Init_FS+0x1c>)
 800ee90:	4805      	ldr	r0, [pc, #20]	@ (800eea8 <CDC_Init_FS+0x20>)
 800ee92:	f7fe fbe5 	bl	800d660 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800ee96:	4905      	ldr	r1, [pc, #20]	@ (800eeac <CDC_Init_FS+0x24>)
 800ee98:	4803      	ldr	r0, [pc, #12]	@ (800eea8 <CDC_Init_FS+0x20>)
 800ee9a:	f7fe fc03 	bl	800d6a4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800ee9e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800eea0:	4618      	mov	r0, r3
 800eea2:	bd80      	pop	{r7, pc}
 800eea4:	2400135c 	.word	0x2400135c
 800eea8:	24000880 	.word	0x24000880
 800eeac:	24000b5c 	.word	0x24000b5c

0800eeb0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800eeb0:	b480      	push	{r7}
 800eeb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800eeb4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800eeb6:	4618      	mov	r0, r3
 800eeb8:	46bd      	mov	sp, r7
 800eeba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eebe:	4770      	bx	lr

0800eec0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800eec0:	b480      	push	{r7}
 800eec2:	b083      	sub	sp, #12
 800eec4:	af00      	add	r7, sp, #0
 800eec6:	4603      	mov	r3, r0
 800eec8:	6039      	str	r1, [r7, #0]
 800eeca:	71fb      	strb	r3, [r7, #7]
 800eecc:	4613      	mov	r3, r2
 800eece:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800eed0:	79fb      	ldrb	r3, [r7, #7]
 800eed2:	2b23      	cmp	r3, #35	@ 0x23
 800eed4:	d84a      	bhi.n	800ef6c <CDC_Control_FS+0xac>
 800eed6:	a201      	add	r2, pc, #4	@ (adr r2, 800eedc <CDC_Control_FS+0x1c>)
 800eed8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eedc:	0800ef6d 	.word	0x0800ef6d
 800eee0:	0800ef6d 	.word	0x0800ef6d
 800eee4:	0800ef6d 	.word	0x0800ef6d
 800eee8:	0800ef6d 	.word	0x0800ef6d
 800eeec:	0800ef6d 	.word	0x0800ef6d
 800eef0:	0800ef6d 	.word	0x0800ef6d
 800eef4:	0800ef6d 	.word	0x0800ef6d
 800eef8:	0800ef6d 	.word	0x0800ef6d
 800eefc:	0800ef6d 	.word	0x0800ef6d
 800ef00:	0800ef6d 	.word	0x0800ef6d
 800ef04:	0800ef6d 	.word	0x0800ef6d
 800ef08:	0800ef6d 	.word	0x0800ef6d
 800ef0c:	0800ef6d 	.word	0x0800ef6d
 800ef10:	0800ef6d 	.word	0x0800ef6d
 800ef14:	0800ef6d 	.word	0x0800ef6d
 800ef18:	0800ef6d 	.word	0x0800ef6d
 800ef1c:	0800ef6d 	.word	0x0800ef6d
 800ef20:	0800ef6d 	.word	0x0800ef6d
 800ef24:	0800ef6d 	.word	0x0800ef6d
 800ef28:	0800ef6d 	.word	0x0800ef6d
 800ef2c:	0800ef6d 	.word	0x0800ef6d
 800ef30:	0800ef6d 	.word	0x0800ef6d
 800ef34:	0800ef6d 	.word	0x0800ef6d
 800ef38:	0800ef6d 	.word	0x0800ef6d
 800ef3c:	0800ef6d 	.word	0x0800ef6d
 800ef40:	0800ef6d 	.word	0x0800ef6d
 800ef44:	0800ef6d 	.word	0x0800ef6d
 800ef48:	0800ef6d 	.word	0x0800ef6d
 800ef4c:	0800ef6d 	.word	0x0800ef6d
 800ef50:	0800ef6d 	.word	0x0800ef6d
 800ef54:	0800ef6d 	.word	0x0800ef6d
 800ef58:	0800ef6d 	.word	0x0800ef6d
 800ef5c:	0800ef6d 	.word	0x0800ef6d
 800ef60:	0800ef6d 	.word	0x0800ef6d
 800ef64:	0800ef6d 	.word	0x0800ef6d
 800ef68:	0800ef6d 	.word	0x0800ef6d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800ef6c:	bf00      	nop
  }

  return (USBD_OK);
 800ef6e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800ef70:	4618      	mov	r0, r3
 800ef72:	370c      	adds	r7, #12
 800ef74:	46bd      	mov	sp, r7
 800ef76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef7a:	4770      	bx	lr

0800ef7c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800ef7c:	b580      	push	{r7, lr}
 800ef7e:	b082      	sub	sp, #8
 800ef80:	af00      	add	r7, sp, #0
 800ef82:	6078      	str	r0, [r7, #4]
 800ef84:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800ef86:	6879      	ldr	r1, [r7, #4]
 800ef88:	4805      	ldr	r0, [pc, #20]	@ (800efa0 <CDC_Receive_FS+0x24>)
 800ef8a:	f7fe fb8b 	bl	800d6a4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800ef8e:	4804      	ldr	r0, [pc, #16]	@ (800efa0 <CDC_Receive_FS+0x24>)
 800ef90:	f7fe fbe6 	bl	800d760 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800ef94:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800ef96:	4618      	mov	r0, r3
 800ef98:	3708      	adds	r7, #8
 800ef9a:	46bd      	mov	sp, r7
 800ef9c:	bd80      	pop	{r7, pc}
 800ef9e:	bf00      	nop
 800efa0:	24000880 	.word	0x24000880

0800efa4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800efa4:	b580      	push	{r7, lr}
 800efa6:	b084      	sub	sp, #16
 800efa8:	af00      	add	r7, sp, #0
 800efaa:	6078      	str	r0, [r7, #4]
 800efac:	460b      	mov	r3, r1
 800efae:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800efb0:	2300      	movs	r3, #0
 800efb2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800efb4:	4b0d      	ldr	r3, [pc, #52]	@ (800efec <CDC_Transmit_FS+0x48>)
 800efb6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800efba:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800efbc:	68bb      	ldr	r3, [r7, #8]
 800efbe:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800efc2:	2b00      	cmp	r3, #0
 800efc4:	d001      	beq.n	800efca <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800efc6:	2301      	movs	r3, #1
 800efc8:	e00b      	b.n	800efe2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800efca:	887b      	ldrh	r3, [r7, #2]
 800efcc:	461a      	mov	r2, r3
 800efce:	6879      	ldr	r1, [r7, #4]
 800efd0:	4806      	ldr	r0, [pc, #24]	@ (800efec <CDC_Transmit_FS+0x48>)
 800efd2:	f7fe fb45 	bl	800d660 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800efd6:	4805      	ldr	r0, [pc, #20]	@ (800efec <CDC_Transmit_FS+0x48>)
 800efd8:	f7fe fb82 	bl	800d6e0 <USBD_CDC_TransmitPacket>
 800efdc:	4603      	mov	r3, r0
 800efde:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800efe0:	7bfb      	ldrb	r3, [r7, #15]
}
 800efe2:	4618      	mov	r0, r3
 800efe4:	3710      	adds	r7, #16
 800efe6:	46bd      	mov	sp, r7
 800efe8:	bd80      	pop	{r7, pc}
 800efea:	bf00      	nop
 800efec:	24000880 	.word	0x24000880

0800eff0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800eff0:	b480      	push	{r7}
 800eff2:	b087      	sub	sp, #28
 800eff4:	af00      	add	r7, sp, #0
 800eff6:	60f8      	str	r0, [r7, #12]
 800eff8:	60b9      	str	r1, [r7, #8]
 800effa:	4613      	mov	r3, r2
 800effc:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800effe:	2300      	movs	r3, #0
 800f000:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800f002:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f006:	4618      	mov	r0, r3
 800f008:	371c      	adds	r7, #28
 800f00a:	46bd      	mov	sp, r7
 800f00c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f010:	4770      	bx	lr
	...

0800f014 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f014:	b480      	push	{r7}
 800f016:	b083      	sub	sp, #12
 800f018:	af00      	add	r7, sp, #0
 800f01a:	4603      	mov	r3, r0
 800f01c:	6039      	str	r1, [r7, #0]
 800f01e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800f020:	683b      	ldr	r3, [r7, #0]
 800f022:	2212      	movs	r2, #18
 800f024:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800f026:	4b03      	ldr	r3, [pc, #12]	@ (800f034 <USBD_FS_DeviceDescriptor+0x20>)
}
 800f028:	4618      	mov	r0, r3
 800f02a:	370c      	adds	r7, #12
 800f02c:	46bd      	mov	sp, r7
 800f02e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f032:	4770      	bx	lr
 800f034:	24000104 	.word	0x24000104

0800f038 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f038:	b480      	push	{r7}
 800f03a:	b083      	sub	sp, #12
 800f03c:	af00      	add	r7, sp, #0
 800f03e:	4603      	mov	r3, r0
 800f040:	6039      	str	r1, [r7, #0]
 800f042:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800f044:	683b      	ldr	r3, [r7, #0]
 800f046:	2204      	movs	r2, #4
 800f048:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800f04a:	4b03      	ldr	r3, [pc, #12]	@ (800f058 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800f04c:	4618      	mov	r0, r3
 800f04e:	370c      	adds	r7, #12
 800f050:	46bd      	mov	sp, r7
 800f052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f056:	4770      	bx	lr
 800f058:	24000118 	.word	0x24000118

0800f05c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f05c:	b580      	push	{r7, lr}
 800f05e:	b082      	sub	sp, #8
 800f060:	af00      	add	r7, sp, #0
 800f062:	4603      	mov	r3, r0
 800f064:	6039      	str	r1, [r7, #0]
 800f066:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f068:	79fb      	ldrb	r3, [r7, #7]
 800f06a:	2b00      	cmp	r3, #0
 800f06c:	d105      	bne.n	800f07a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800f06e:	683a      	ldr	r2, [r7, #0]
 800f070:	4907      	ldr	r1, [pc, #28]	@ (800f090 <USBD_FS_ProductStrDescriptor+0x34>)
 800f072:	4808      	ldr	r0, [pc, #32]	@ (800f094 <USBD_FS_ProductStrDescriptor+0x38>)
 800f074:	f7ff fdea 	bl	800ec4c <USBD_GetString>
 800f078:	e004      	b.n	800f084 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800f07a:	683a      	ldr	r2, [r7, #0]
 800f07c:	4904      	ldr	r1, [pc, #16]	@ (800f090 <USBD_FS_ProductStrDescriptor+0x34>)
 800f07e:	4805      	ldr	r0, [pc, #20]	@ (800f094 <USBD_FS_ProductStrDescriptor+0x38>)
 800f080:	f7ff fde4 	bl	800ec4c <USBD_GetString>
  }
  return USBD_StrDesc;
 800f084:	4b02      	ldr	r3, [pc, #8]	@ (800f090 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800f086:	4618      	mov	r0, r3
 800f088:	3708      	adds	r7, #8
 800f08a:	46bd      	mov	sp, r7
 800f08c:	bd80      	pop	{r7, pc}
 800f08e:	bf00      	nop
 800f090:	24001b5c 	.word	0x24001b5c
 800f094:	080125c8 	.word	0x080125c8

0800f098 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f098:	b580      	push	{r7, lr}
 800f09a:	b082      	sub	sp, #8
 800f09c:	af00      	add	r7, sp, #0
 800f09e:	4603      	mov	r3, r0
 800f0a0:	6039      	str	r1, [r7, #0]
 800f0a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800f0a4:	683a      	ldr	r2, [r7, #0]
 800f0a6:	4904      	ldr	r1, [pc, #16]	@ (800f0b8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800f0a8:	4804      	ldr	r0, [pc, #16]	@ (800f0bc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800f0aa:	f7ff fdcf 	bl	800ec4c <USBD_GetString>
  return USBD_StrDesc;
 800f0ae:	4b02      	ldr	r3, [pc, #8]	@ (800f0b8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800f0b0:	4618      	mov	r0, r3
 800f0b2:	3708      	adds	r7, #8
 800f0b4:	46bd      	mov	sp, r7
 800f0b6:	bd80      	pop	{r7, pc}
 800f0b8:	24001b5c 	.word	0x24001b5c
 800f0bc:	080125e0 	.word	0x080125e0

0800f0c0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f0c0:	b580      	push	{r7, lr}
 800f0c2:	b082      	sub	sp, #8
 800f0c4:	af00      	add	r7, sp, #0
 800f0c6:	4603      	mov	r3, r0
 800f0c8:	6039      	str	r1, [r7, #0]
 800f0ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800f0cc:	683b      	ldr	r3, [r7, #0]
 800f0ce:	221a      	movs	r2, #26
 800f0d0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800f0d2:	f000 f843 	bl	800f15c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800f0d6:	4b02      	ldr	r3, [pc, #8]	@ (800f0e0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800f0d8:	4618      	mov	r0, r3
 800f0da:	3708      	adds	r7, #8
 800f0dc:	46bd      	mov	sp, r7
 800f0de:	bd80      	pop	{r7, pc}
 800f0e0:	2400011c 	.word	0x2400011c

0800f0e4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f0e4:	b580      	push	{r7, lr}
 800f0e6:	b082      	sub	sp, #8
 800f0e8:	af00      	add	r7, sp, #0
 800f0ea:	4603      	mov	r3, r0
 800f0ec:	6039      	str	r1, [r7, #0]
 800f0ee:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800f0f0:	79fb      	ldrb	r3, [r7, #7]
 800f0f2:	2b00      	cmp	r3, #0
 800f0f4:	d105      	bne.n	800f102 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800f0f6:	683a      	ldr	r2, [r7, #0]
 800f0f8:	4907      	ldr	r1, [pc, #28]	@ (800f118 <USBD_FS_ConfigStrDescriptor+0x34>)
 800f0fa:	4808      	ldr	r0, [pc, #32]	@ (800f11c <USBD_FS_ConfigStrDescriptor+0x38>)
 800f0fc:	f7ff fda6 	bl	800ec4c <USBD_GetString>
 800f100:	e004      	b.n	800f10c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800f102:	683a      	ldr	r2, [r7, #0]
 800f104:	4904      	ldr	r1, [pc, #16]	@ (800f118 <USBD_FS_ConfigStrDescriptor+0x34>)
 800f106:	4805      	ldr	r0, [pc, #20]	@ (800f11c <USBD_FS_ConfigStrDescriptor+0x38>)
 800f108:	f7ff fda0 	bl	800ec4c <USBD_GetString>
  }
  return USBD_StrDesc;
 800f10c:	4b02      	ldr	r3, [pc, #8]	@ (800f118 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800f10e:	4618      	mov	r0, r3
 800f110:	3708      	adds	r7, #8
 800f112:	46bd      	mov	sp, r7
 800f114:	bd80      	pop	{r7, pc}
 800f116:	bf00      	nop
 800f118:	24001b5c 	.word	0x24001b5c
 800f11c:	080125f4 	.word	0x080125f4

0800f120 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f120:	b580      	push	{r7, lr}
 800f122:	b082      	sub	sp, #8
 800f124:	af00      	add	r7, sp, #0
 800f126:	4603      	mov	r3, r0
 800f128:	6039      	str	r1, [r7, #0]
 800f12a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f12c:	79fb      	ldrb	r3, [r7, #7]
 800f12e:	2b00      	cmp	r3, #0
 800f130:	d105      	bne.n	800f13e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800f132:	683a      	ldr	r2, [r7, #0]
 800f134:	4907      	ldr	r1, [pc, #28]	@ (800f154 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800f136:	4808      	ldr	r0, [pc, #32]	@ (800f158 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800f138:	f7ff fd88 	bl	800ec4c <USBD_GetString>
 800f13c:	e004      	b.n	800f148 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800f13e:	683a      	ldr	r2, [r7, #0]
 800f140:	4904      	ldr	r1, [pc, #16]	@ (800f154 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800f142:	4805      	ldr	r0, [pc, #20]	@ (800f158 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800f144:	f7ff fd82 	bl	800ec4c <USBD_GetString>
  }
  return USBD_StrDesc;
 800f148:	4b02      	ldr	r3, [pc, #8]	@ (800f154 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800f14a:	4618      	mov	r0, r3
 800f14c:	3708      	adds	r7, #8
 800f14e:	46bd      	mov	sp, r7
 800f150:	bd80      	pop	{r7, pc}
 800f152:	bf00      	nop
 800f154:	24001b5c 	.word	0x24001b5c
 800f158:	08012600 	.word	0x08012600

0800f15c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800f15c:	b580      	push	{r7, lr}
 800f15e:	b084      	sub	sp, #16
 800f160:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800f162:	4b0f      	ldr	r3, [pc, #60]	@ (800f1a0 <Get_SerialNum+0x44>)
 800f164:	681b      	ldr	r3, [r3, #0]
 800f166:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800f168:	4b0e      	ldr	r3, [pc, #56]	@ (800f1a4 <Get_SerialNum+0x48>)
 800f16a:	681b      	ldr	r3, [r3, #0]
 800f16c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800f16e:	4b0e      	ldr	r3, [pc, #56]	@ (800f1a8 <Get_SerialNum+0x4c>)
 800f170:	681b      	ldr	r3, [r3, #0]
 800f172:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800f174:	68fa      	ldr	r2, [r7, #12]
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	4413      	add	r3, r2
 800f17a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800f17c:	68fb      	ldr	r3, [r7, #12]
 800f17e:	2b00      	cmp	r3, #0
 800f180:	d009      	beq.n	800f196 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800f182:	2208      	movs	r2, #8
 800f184:	4909      	ldr	r1, [pc, #36]	@ (800f1ac <Get_SerialNum+0x50>)
 800f186:	68f8      	ldr	r0, [r7, #12]
 800f188:	f000 f814 	bl	800f1b4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800f18c:	2204      	movs	r2, #4
 800f18e:	4908      	ldr	r1, [pc, #32]	@ (800f1b0 <Get_SerialNum+0x54>)
 800f190:	68b8      	ldr	r0, [r7, #8]
 800f192:	f000 f80f 	bl	800f1b4 <IntToUnicode>
  }
}
 800f196:	bf00      	nop
 800f198:	3710      	adds	r7, #16
 800f19a:	46bd      	mov	sp, r7
 800f19c:	bd80      	pop	{r7, pc}
 800f19e:	bf00      	nop
 800f1a0:	1ff1e800 	.word	0x1ff1e800
 800f1a4:	1ff1e804 	.word	0x1ff1e804
 800f1a8:	1ff1e808 	.word	0x1ff1e808
 800f1ac:	2400011e 	.word	0x2400011e
 800f1b0:	2400012e 	.word	0x2400012e

0800f1b4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800f1b4:	b480      	push	{r7}
 800f1b6:	b087      	sub	sp, #28
 800f1b8:	af00      	add	r7, sp, #0
 800f1ba:	60f8      	str	r0, [r7, #12]
 800f1bc:	60b9      	str	r1, [r7, #8]
 800f1be:	4613      	mov	r3, r2
 800f1c0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800f1c2:	2300      	movs	r3, #0
 800f1c4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800f1c6:	2300      	movs	r3, #0
 800f1c8:	75fb      	strb	r3, [r7, #23]
 800f1ca:	e027      	b.n	800f21c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800f1cc:	68fb      	ldr	r3, [r7, #12]
 800f1ce:	0f1b      	lsrs	r3, r3, #28
 800f1d0:	2b09      	cmp	r3, #9
 800f1d2:	d80b      	bhi.n	800f1ec <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800f1d4:	68fb      	ldr	r3, [r7, #12]
 800f1d6:	0f1b      	lsrs	r3, r3, #28
 800f1d8:	b2da      	uxtb	r2, r3
 800f1da:	7dfb      	ldrb	r3, [r7, #23]
 800f1dc:	005b      	lsls	r3, r3, #1
 800f1de:	4619      	mov	r1, r3
 800f1e0:	68bb      	ldr	r3, [r7, #8]
 800f1e2:	440b      	add	r3, r1
 800f1e4:	3230      	adds	r2, #48	@ 0x30
 800f1e6:	b2d2      	uxtb	r2, r2
 800f1e8:	701a      	strb	r2, [r3, #0]
 800f1ea:	e00a      	b.n	800f202 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800f1ec:	68fb      	ldr	r3, [r7, #12]
 800f1ee:	0f1b      	lsrs	r3, r3, #28
 800f1f0:	b2da      	uxtb	r2, r3
 800f1f2:	7dfb      	ldrb	r3, [r7, #23]
 800f1f4:	005b      	lsls	r3, r3, #1
 800f1f6:	4619      	mov	r1, r3
 800f1f8:	68bb      	ldr	r3, [r7, #8]
 800f1fa:	440b      	add	r3, r1
 800f1fc:	3237      	adds	r2, #55	@ 0x37
 800f1fe:	b2d2      	uxtb	r2, r2
 800f200:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800f202:	68fb      	ldr	r3, [r7, #12]
 800f204:	011b      	lsls	r3, r3, #4
 800f206:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800f208:	7dfb      	ldrb	r3, [r7, #23]
 800f20a:	005b      	lsls	r3, r3, #1
 800f20c:	3301      	adds	r3, #1
 800f20e:	68ba      	ldr	r2, [r7, #8]
 800f210:	4413      	add	r3, r2
 800f212:	2200      	movs	r2, #0
 800f214:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800f216:	7dfb      	ldrb	r3, [r7, #23]
 800f218:	3301      	adds	r3, #1
 800f21a:	75fb      	strb	r3, [r7, #23]
 800f21c:	7dfa      	ldrb	r2, [r7, #23]
 800f21e:	79fb      	ldrb	r3, [r7, #7]
 800f220:	429a      	cmp	r2, r3
 800f222:	d3d3      	bcc.n	800f1cc <IntToUnicode+0x18>
  }
}
 800f224:	bf00      	nop
 800f226:	bf00      	nop
 800f228:	371c      	adds	r7, #28
 800f22a:	46bd      	mov	sp, r7
 800f22c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f230:	4770      	bx	lr
	...

0800f234 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800f234:	b580      	push	{r7, lr}
 800f236:	b0ba      	sub	sp, #232	@ 0xe8
 800f238:	af00      	add	r7, sp, #0
 800f23a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f23c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800f240:	2200      	movs	r2, #0
 800f242:	601a      	str	r2, [r3, #0]
 800f244:	605a      	str	r2, [r3, #4]
 800f246:	609a      	str	r2, [r3, #8]
 800f248:	60da      	str	r2, [r3, #12]
 800f24a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800f24c:	f107 0310 	add.w	r3, r7, #16
 800f250:	22c0      	movs	r2, #192	@ 0xc0
 800f252:	2100      	movs	r1, #0
 800f254:	4618      	mov	r0, r3
 800f256:	f001 f890 	bl	801037a <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800f25a:	687b      	ldr	r3, [r7, #4]
 800f25c:	681b      	ldr	r3, [r3, #0]
 800f25e:	4a34      	ldr	r2, [pc, #208]	@ (800f330 <HAL_PCD_MspInit+0xfc>)
 800f260:	4293      	cmp	r3, r2
 800f262:	d161      	bne.n	800f328 <HAL_PCD_MspInit+0xf4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800f264:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800f268:	f04f 0300 	mov.w	r3, #0
 800f26c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800f270:	f44f 1340 	mov.w	r3, #3145728	@ 0x300000
 800f274:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800f278:	f107 0310 	add.w	r3, r7, #16
 800f27c:	4618      	mov	r0, r3
 800f27e:	f7f8 f833 	bl	80072e8 <HAL_RCCEx_PeriphCLKConfig>
 800f282:	4603      	mov	r3, r0
 800f284:	2b00      	cmp	r3, #0
 800f286:	d001      	beq.n	800f28c <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 800f288:	f7f1 ff02 	bl	8001090 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 800f28c:	f7f7 f836 	bl	80062fc <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f290:	4b28      	ldr	r3, [pc, #160]	@ (800f334 <HAL_PCD_MspInit+0x100>)
 800f292:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800f296:	4a27      	ldr	r2, [pc, #156]	@ (800f334 <HAL_PCD_MspInit+0x100>)
 800f298:	f043 0301 	orr.w	r3, r3, #1
 800f29c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800f2a0:	4b24      	ldr	r3, [pc, #144]	@ (800f334 <HAL_PCD_MspInit+0x100>)
 800f2a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800f2a6:	f003 0301 	and.w	r3, r3, #1
 800f2aa:	60fb      	str	r3, [r7, #12]
 800f2ac:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 800f2ae:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 800f2b2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f2b6:	2302      	movs	r3, #2
 800f2b8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f2bc:	2300      	movs	r3, #0
 800f2be:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f2c2:	2300      	movs	r3, #0
 800f2c4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800f2c8:	230a      	movs	r3, #10
 800f2ca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f2ce:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800f2d2:	4619      	mov	r1, r3
 800f2d4:	4818      	ldr	r0, [pc, #96]	@ (800f338 <HAL_PCD_MspInit+0x104>)
 800f2d6:	f7f5 fb07 	bl	80048e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800f2da:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800f2de:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800f2e2:	2300      	movs	r3, #0
 800f2e4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f2e8:	2300      	movs	r3, #0
 800f2ea:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f2ee:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800f2f2:	4619      	mov	r1, r3
 800f2f4:	4810      	ldr	r0, [pc, #64]	@ (800f338 <HAL_PCD_MspInit+0x104>)
 800f2f6:	f7f5 faf7 	bl	80048e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800f2fa:	4b0e      	ldr	r3, [pc, #56]	@ (800f334 <HAL_PCD_MspInit+0x100>)
 800f2fc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800f300:	4a0c      	ldr	r2, [pc, #48]	@ (800f334 <HAL_PCD_MspInit+0x100>)
 800f302:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800f306:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800f30a:	4b0a      	ldr	r3, [pc, #40]	@ (800f334 <HAL_PCD_MspInit+0x100>)
 800f30c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800f310:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800f314:	60bb      	str	r3, [r7, #8]
 800f316:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800f318:	2200      	movs	r2, #0
 800f31a:	2100      	movs	r1, #0
 800f31c:	2065      	movs	r0, #101	@ 0x65
 800f31e:	f7f3 f952 	bl	80025c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800f322:	2065      	movs	r0, #101	@ 0x65
 800f324:	f7f3 f969 	bl	80025fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800f328:	bf00      	nop
 800f32a:	37e8      	adds	r7, #232	@ 0xe8
 800f32c:	46bd      	mov	sp, r7
 800f32e:	bd80      	pop	{r7, pc}
 800f330:	40080000 	.word	0x40080000
 800f334:	58024400 	.word	0x58024400
 800f338:	58020000 	.word	0x58020000

0800f33c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f33c:	b580      	push	{r7, lr}
 800f33e:	b082      	sub	sp, #8
 800f340:	af00      	add	r7, sp, #0
 800f342:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800f34a:	687b      	ldr	r3, [r7, #4]
 800f34c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800f350:	4619      	mov	r1, r3
 800f352:	4610      	mov	r0, r2
 800f354:	f7fe faed 	bl	800d932 <USBD_LL_SetupStage>
}
 800f358:	bf00      	nop
 800f35a:	3708      	adds	r7, #8
 800f35c:	46bd      	mov	sp, r7
 800f35e:	bd80      	pop	{r7, pc}

0800f360 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f360:	b580      	push	{r7, lr}
 800f362:	b082      	sub	sp, #8
 800f364:	af00      	add	r7, sp, #0
 800f366:	6078      	str	r0, [r7, #4]
 800f368:	460b      	mov	r3, r1
 800f36a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800f372:	78fa      	ldrb	r2, [r7, #3]
 800f374:	6879      	ldr	r1, [r7, #4]
 800f376:	4613      	mov	r3, r2
 800f378:	00db      	lsls	r3, r3, #3
 800f37a:	4413      	add	r3, r2
 800f37c:	009b      	lsls	r3, r3, #2
 800f37e:	440b      	add	r3, r1
 800f380:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800f384:	681a      	ldr	r2, [r3, #0]
 800f386:	78fb      	ldrb	r3, [r7, #3]
 800f388:	4619      	mov	r1, r3
 800f38a:	f7fe fb27 	bl	800d9dc <USBD_LL_DataOutStage>
}
 800f38e:	bf00      	nop
 800f390:	3708      	adds	r7, #8
 800f392:	46bd      	mov	sp, r7
 800f394:	bd80      	pop	{r7, pc}

0800f396 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f396:	b580      	push	{r7, lr}
 800f398:	b082      	sub	sp, #8
 800f39a:	af00      	add	r7, sp, #0
 800f39c:	6078      	str	r0, [r7, #4]
 800f39e:	460b      	mov	r3, r1
 800f3a0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800f3a2:	687b      	ldr	r3, [r7, #4]
 800f3a4:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800f3a8:	78fa      	ldrb	r2, [r7, #3]
 800f3aa:	6879      	ldr	r1, [r7, #4]
 800f3ac:	4613      	mov	r3, r2
 800f3ae:	00db      	lsls	r3, r3, #3
 800f3b0:	4413      	add	r3, r2
 800f3b2:	009b      	lsls	r3, r3, #2
 800f3b4:	440b      	add	r3, r1
 800f3b6:	3320      	adds	r3, #32
 800f3b8:	681a      	ldr	r2, [r3, #0]
 800f3ba:	78fb      	ldrb	r3, [r7, #3]
 800f3bc:	4619      	mov	r1, r3
 800f3be:	f7fe fbc0 	bl	800db42 <USBD_LL_DataInStage>
}
 800f3c2:	bf00      	nop
 800f3c4:	3708      	adds	r7, #8
 800f3c6:	46bd      	mov	sp, r7
 800f3c8:	bd80      	pop	{r7, pc}

0800f3ca <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f3ca:	b580      	push	{r7, lr}
 800f3cc:	b082      	sub	sp, #8
 800f3ce:	af00      	add	r7, sp, #0
 800f3d0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800f3d2:	687b      	ldr	r3, [r7, #4]
 800f3d4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800f3d8:	4618      	mov	r0, r3
 800f3da:	f7fe fcfa 	bl	800ddd2 <USBD_LL_SOF>
}
 800f3de:	bf00      	nop
 800f3e0:	3708      	adds	r7, #8
 800f3e2:	46bd      	mov	sp, r7
 800f3e4:	bd80      	pop	{r7, pc}

0800f3e6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f3e6:	b580      	push	{r7, lr}
 800f3e8:	b084      	sub	sp, #16
 800f3ea:	af00      	add	r7, sp, #0
 800f3ec:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800f3ee:	2301      	movs	r3, #1
 800f3f0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800f3f2:	687b      	ldr	r3, [r7, #4]
 800f3f4:	79db      	ldrb	r3, [r3, #7]
 800f3f6:	2b00      	cmp	r3, #0
 800f3f8:	d102      	bne.n	800f400 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800f3fa:	2300      	movs	r3, #0
 800f3fc:	73fb      	strb	r3, [r7, #15]
 800f3fe:	e008      	b.n	800f412 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800f400:	687b      	ldr	r3, [r7, #4]
 800f402:	79db      	ldrb	r3, [r3, #7]
 800f404:	2b02      	cmp	r3, #2
 800f406:	d102      	bne.n	800f40e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800f408:	2301      	movs	r3, #1
 800f40a:	73fb      	strb	r3, [r7, #15]
 800f40c:	e001      	b.n	800f412 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800f40e:	f7f1 fe3f 	bl	8001090 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800f412:	687b      	ldr	r3, [r7, #4]
 800f414:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800f418:	7bfa      	ldrb	r2, [r7, #15]
 800f41a:	4611      	mov	r1, r2
 800f41c:	4618      	mov	r0, r3
 800f41e:	f7fe fc94 	bl	800dd4a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800f422:	687b      	ldr	r3, [r7, #4]
 800f424:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800f428:	4618      	mov	r0, r3
 800f42a:	f7fe fc3c 	bl	800dca6 <USBD_LL_Reset>
}
 800f42e:	bf00      	nop
 800f430:	3710      	adds	r7, #16
 800f432:	46bd      	mov	sp, r7
 800f434:	bd80      	pop	{r7, pc}
	...

0800f438 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f438:	b580      	push	{r7, lr}
 800f43a:	b082      	sub	sp, #8
 800f43c:	af00      	add	r7, sp, #0
 800f43e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800f440:	687b      	ldr	r3, [r7, #4]
 800f442:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800f446:	4618      	mov	r0, r3
 800f448:	f7fe fc8f 	bl	800dd6a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800f44c:	687b      	ldr	r3, [r7, #4]
 800f44e:	681b      	ldr	r3, [r3, #0]
 800f450:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800f454:	681b      	ldr	r3, [r3, #0]
 800f456:	687a      	ldr	r2, [r7, #4]
 800f458:	6812      	ldr	r2, [r2, #0]
 800f45a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800f45e:	f043 0301 	orr.w	r3, r3, #1
 800f462:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	7adb      	ldrb	r3, [r3, #11]
 800f468:	2b00      	cmp	r3, #0
 800f46a:	d005      	beq.n	800f478 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f46c:	4b04      	ldr	r3, [pc, #16]	@ (800f480 <HAL_PCD_SuspendCallback+0x48>)
 800f46e:	691b      	ldr	r3, [r3, #16]
 800f470:	4a03      	ldr	r2, [pc, #12]	@ (800f480 <HAL_PCD_SuspendCallback+0x48>)
 800f472:	f043 0306 	orr.w	r3, r3, #6
 800f476:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800f478:	bf00      	nop
 800f47a:	3708      	adds	r7, #8
 800f47c:	46bd      	mov	sp, r7
 800f47e:	bd80      	pop	{r7, pc}
 800f480:	e000ed00 	.word	0xe000ed00

0800f484 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f484:	b580      	push	{r7, lr}
 800f486:	b082      	sub	sp, #8
 800f488:	af00      	add	r7, sp, #0
 800f48a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800f492:	4618      	mov	r0, r3
 800f494:	f7fe fc85 	bl	800dda2 <USBD_LL_Resume>
}
 800f498:	bf00      	nop
 800f49a:	3708      	adds	r7, #8
 800f49c:	46bd      	mov	sp, r7
 800f49e:	bd80      	pop	{r7, pc}

0800f4a0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f4a0:	b580      	push	{r7, lr}
 800f4a2:	b082      	sub	sp, #8
 800f4a4:	af00      	add	r7, sp, #0
 800f4a6:	6078      	str	r0, [r7, #4]
 800f4a8:	460b      	mov	r3, r1
 800f4aa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800f4ac:	687b      	ldr	r3, [r7, #4]
 800f4ae:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800f4b2:	78fa      	ldrb	r2, [r7, #3]
 800f4b4:	4611      	mov	r1, r2
 800f4b6:	4618      	mov	r0, r3
 800f4b8:	f7fe fcdd 	bl	800de76 <USBD_LL_IsoOUTIncomplete>
}
 800f4bc:	bf00      	nop
 800f4be:	3708      	adds	r7, #8
 800f4c0:	46bd      	mov	sp, r7
 800f4c2:	bd80      	pop	{r7, pc}

0800f4c4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f4c4:	b580      	push	{r7, lr}
 800f4c6:	b082      	sub	sp, #8
 800f4c8:	af00      	add	r7, sp, #0
 800f4ca:	6078      	str	r0, [r7, #4]
 800f4cc:	460b      	mov	r3, r1
 800f4ce:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800f4d6:	78fa      	ldrb	r2, [r7, #3]
 800f4d8:	4611      	mov	r1, r2
 800f4da:	4618      	mov	r0, r3
 800f4dc:	f7fe fc99 	bl	800de12 <USBD_LL_IsoINIncomplete>
}
 800f4e0:	bf00      	nop
 800f4e2:	3708      	adds	r7, #8
 800f4e4:	46bd      	mov	sp, r7
 800f4e6:	bd80      	pop	{r7, pc}

0800f4e8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f4e8:	b580      	push	{r7, lr}
 800f4ea:	b082      	sub	sp, #8
 800f4ec:	af00      	add	r7, sp, #0
 800f4ee:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800f4f6:	4618      	mov	r0, r3
 800f4f8:	f7fe fcef 	bl	800deda <USBD_LL_DevConnected>
}
 800f4fc:	bf00      	nop
 800f4fe:	3708      	adds	r7, #8
 800f500:	46bd      	mov	sp, r7
 800f502:	bd80      	pop	{r7, pc}

0800f504 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f504:	b580      	push	{r7, lr}
 800f506:	b082      	sub	sp, #8
 800f508:	af00      	add	r7, sp, #0
 800f50a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800f512:	4618      	mov	r0, r3
 800f514:	f7fe fcec 	bl	800def0 <USBD_LL_DevDisconnected>
}
 800f518:	bf00      	nop
 800f51a:	3708      	adds	r7, #8
 800f51c:	46bd      	mov	sp, r7
 800f51e:	bd80      	pop	{r7, pc}

0800f520 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800f520:	b580      	push	{r7, lr}
 800f522:	b082      	sub	sp, #8
 800f524:	af00      	add	r7, sp, #0
 800f526:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800f528:	687b      	ldr	r3, [r7, #4]
 800f52a:	781b      	ldrb	r3, [r3, #0]
 800f52c:	2b00      	cmp	r3, #0
 800f52e:	d13e      	bne.n	800f5ae <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800f530:	4a21      	ldr	r2, [pc, #132]	@ (800f5b8 <USBD_LL_Init+0x98>)
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	4a1f      	ldr	r2, [pc, #124]	@ (800f5b8 <USBD_LL_Init+0x98>)
 800f53c:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800f540:	4b1d      	ldr	r3, [pc, #116]	@ (800f5b8 <USBD_LL_Init+0x98>)
 800f542:	4a1e      	ldr	r2, [pc, #120]	@ (800f5bc <USBD_LL_Init+0x9c>)
 800f544:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800f546:	4b1c      	ldr	r3, [pc, #112]	@ (800f5b8 <USBD_LL_Init+0x98>)
 800f548:	2209      	movs	r2, #9
 800f54a:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800f54c:	4b1a      	ldr	r3, [pc, #104]	@ (800f5b8 <USBD_LL_Init+0x98>)
 800f54e:	2202      	movs	r2, #2
 800f550:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800f552:	4b19      	ldr	r3, [pc, #100]	@ (800f5b8 <USBD_LL_Init+0x98>)
 800f554:	2200      	movs	r2, #0
 800f556:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800f558:	4b17      	ldr	r3, [pc, #92]	@ (800f5b8 <USBD_LL_Init+0x98>)
 800f55a:	2202      	movs	r2, #2
 800f55c:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800f55e:	4b16      	ldr	r3, [pc, #88]	@ (800f5b8 <USBD_LL_Init+0x98>)
 800f560:	2201      	movs	r2, #1
 800f562:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800f564:	4b14      	ldr	r3, [pc, #80]	@ (800f5b8 <USBD_LL_Init+0x98>)
 800f566:	2200      	movs	r2, #0
 800f568:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800f56a:	4b13      	ldr	r3, [pc, #76]	@ (800f5b8 <USBD_LL_Init+0x98>)
 800f56c:	2200      	movs	r2, #0
 800f56e:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 800f570:	4b11      	ldr	r3, [pc, #68]	@ (800f5b8 <USBD_LL_Init+0x98>)
 800f572:	2201      	movs	r2, #1
 800f574:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800f576:	4b10      	ldr	r3, [pc, #64]	@ (800f5b8 <USBD_LL_Init+0x98>)
 800f578:	2201      	movs	r2, #1
 800f57a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800f57c:	4b0e      	ldr	r3, [pc, #56]	@ (800f5b8 <USBD_LL_Init+0x98>)
 800f57e:	2200      	movs	r2, #0
 800f580:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800f582:	480d      	ldr	r0, [pc, #52]	@ (800f5b8 <USBD_LL_Init+0x98>)
 800f584:	f7f5 fbc2 	bl	8004d0c <HAL_PCD_Init>
 800f588:	4603      	mov	r3, r0
 800f58a:	2b00      	cmp	r3, #0
 800f58c:	d001      	beq.n	800f592 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 800f58e:	f7f1 fd7f 	bl	8001090 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800f592:	2180      	movs	r1, #128	@ 0x80
 800f594:	4808      	ldr	r0, [pc, #32]	@ (800f5b8 <USBD_LL_Init+0x98>)
 800f596:	f7f6 fe16 	bl	80061c6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800f59a:	2240      	movs	r2, #64	@ 0x40
 800f59c:	2100      	movs	r1, #0
 800f59e:	4806      	ldr	r0, [pc, #24]	@ (800f5b8 <USBD_LL_Init+0x98>)
 800f5a0:	f7f6 fdca 	bl	8006138 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800f5a4:	2280      	movs	r2, #128	@ 0x80
 800f5a6:	2101      	movs	r1, #1
 800f5a8:	4803      	ldr	r0, [pc, #12]	@ (800f5b8 <USBD_LL_Init+0x98>)
 800f5aa:	f7f6 fdc5 	bl	8006138 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 800f5ae:	2300      	movs	r3, #0
}
 800f5b0:	4618      	mov	r0, r3
 800f5b2:	3708      	adds	r7, #8
 800f5b4:	46bd      	mov	sp, r7
 800f5b6:	bd80      	pop	{r7, pc}
 800f5b8:	24001d5c 	.word	0x24001d5c
 800f5bc:	40080000 	.word	0x40080000

0800f5c0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800f5c0:	b580      	push	{r7, lr}
 800f5c2:	b084      	sub	sp, #16
 800f5c4:	af00      	add	r7, sp, #0
 800f5c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f5c8:	2300      	movs	r3, #0
 800f5ca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f5cc:	2300      	movs	r3, #0
 800f5ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f5d6:	4618      	mov	r0, r3
 800f5d8:	f7f5 fca4 	bl	8004f24 <HAL_PCD_Start>
 800f5dc:	4603      	mov	r3, r0
 800f5de:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f5e0:	7bfb      	ldrb	r3, [r7, #15]
 800f5e2:	4618      	mov	r0, r3
 800f5e4:	f000 f942 	bl	800f86c <USBD_Get_USB_Status>
 800f5e8:	4603      	mov	r3, r0
 800f5ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f5ec:	7bbb      	ldrb	r3, [r7, #14]
}
 800f5ee:	4618      	mov	r0, r3
 800f5f0:	3710      	adds	r7, #16
 800f5f2:	46bd      	mov	sp, r7
 800f5f4:	bd80      	pop	{r7, pc}

0800f5f6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800f5f6:	b580      	push	{r7, lr}
 800f5f8:	b084      	sub	sp, #16
 800f5fa:	af00      	add	r7, sp, #0
 800f5fc:	6078      	str	r0, [r7, #4]
 800f5fe:	4608      	mov	r0, r1
 800f600:	4611      	mov	r1, r2
 800f602:	461a      	mov	r2, r3
 800f604:	4603      	mov	r3, r0
 800f606:	70fb      	strb	r3, [r7, #3]
 800f608:	460b      	mov	r3, r1
 800f60a:	70bb      	strb	r3, [r7, #2]
 800f60c:	4613      	mov	r3, r2
 800f60e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f610:	2300      	movs	r3, #0
 800f612:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f614:	2300      	movs	r3, #0
 800f616:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800f61e:	78bb      	ldrb	r3, [r7, #2]
 800f620:	883a      	ldrh	r2, [r7, #0]
 800f622:	78f9      	ldrb	r1, [r7, #3]
 800f624:	f7f6 f9a5 	bl	8005972 <HAL_PCD_EP_Open>
 800f628:	4603      	mov	r3, r0
 800f62a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f62c:	7bfb      	ldrb	r3, [r7, #15]
 800f62e:	4618      	mov	r0, r3
 800f630:	f000 f91c 	bl	800f86c <USBD_Get_USB_Status>
 800f634:	4603      	mov	r3, r0
 800f636:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f638:	7bbb      	ldrb	r3, [r7, #14]
}
 800f63a:	4618      	mov	r0, r3
 800f63c:	3710      	adds	r7, #16
 800f63e:	46bd      	mov	sp, r7
 800f640:	bd80      	pop	{r7, pc}

0800f642 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f642:	b580      	push	{r7, lr}
 800f644:	b084      	sub	sp, #16
 800f646:	af00      	add	r7, sp, #0
 800f648:	6078      	str	r0, [r7, #4]
 800f64a:	460b      	mov	r3, r1
 800f64c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f64e:	2300      	movs	r3, #0
 800f650:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f652:	2300      	movs	r3, #0
 800f654:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f65c:	78fa      	ldrb	r2, [r7, #3]
 800f65e:	4611      	mov	r1, r2
 800f660:	4618      	mov	r0, r3
 800f662:	f7f6 f9ee 	bl	8005a42 <HAL_PCD_EP_Close>
 800f666:	4603      	mov	r3, r0
 800f668:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f66a:	7bfb      	ldrb	r3, [r7, #15]
 800f66c:	4618      	mov	r0, r3
 800f66e:	f000 f8fd 	bl	800f86c <USBD_Get_USB_Status>
 800f672:	4603      	mov	r3, r0
 800f674:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f676:	7bbb      	ldrb	r3, [r7, #14]
}
 800f678:	4618      	mov	r0, r3
 800f67a:	3710      	adds	r7, #16
 800f67c:	46bd      	mov	sp, r7
 800f67e:	bd80      	pop	{r7, pc}

0800f680 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f680:	b580      	push	{r7, lr}
 800f682:	b084      	sub	sp, #16
 800f684:	af00      	add	r7, sp, #0
 800f686:	6078      	str	r0, [r7, #4]
 800f688:	460b      	mov	r3, r1
 800f68a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f68c:	2300      	movs	r3, #0
 800f68e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f690:	2300      	movs	r3, #0
 800f692:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800f694:	687b      	ldr	r3, [r7, #4]
 800f696:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f69a:	78fa      	ldrb	r2, [r7, #3]
 800f69c:	4611      	mov	r1, r2
 800f69e:	4618      	mov	r0, r3
 800f6a0:	f7f6 faa6 	bl	8005bf0 <HAL_PCD_EP_SetStall>
 800f6a4:	4603      	mov	r3, r0
 800f6a6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f6a8:	7bfb      	ldrb	r3, [r7, #15]
 800f6aa:	4618      	mov	r0, r3
 800f6ac:	f000 f8de 	bl	800f86c <USBD_Get_USB_Status>
 800f6b0:	4603      	mov	r3, r0
 800f6b2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f6b4:	7bbb      	ldrb	r3, [r7, #14]
}
 800f6b6:	4618      	mov	r0, r3
 800f6b8:	3710      	adds	r7, #16
 800f6ba:	46bd      	mov	sp, r7
 800f6bc:	bd80      	pop	{r7, pc}

0800f6be <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f6be:	b580      	push	{r7, lr}
 800f6c0:	b084      	sub	sp, #16
 800f6c2:	af00      	add	r7, sp, #0
 800f6c4:	6078      	str	r0, [r7, #4]
 800f6c6:	460b      	mov	r3, r1
 800f6c8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f6ca:	2300      	movs	r3, #0
 800f6cc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f6ce:	2300      	movs	r3, #0
 800f6d0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800f6d2:	687b      	ldr	r3, [r7, #4]
 800f6d4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f6d8:	78fa      	ldrb	r2, [r7, #3]
 800f6da:	4611      	mov	r1, r2
 800f6dc:	4618      	mov	r0, r3
 800f6de:	f7f6 faea 	bl	8005cb6 <HAL_PCD_EP_ClrStall>
 800f6e2:	4603      	mov	r3, r0
 800f6e4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f6e6:	7bfb      	ldrb	r3, [r7, #15]
 800f6e8:	4618      	mov	r0, r3
 800f6ea:	f000 f8bf 	bl	800f86c <USBD_Get_USB_Status>
 800f6ee:	4603      	mov	r3, r0
 800f6f0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f6f2:	7bbb      	ldrb	r3, [r7, #14]
}
 800f6f4:	4618      	mov	r0, r3
 800f6f6:	3710      	adds	r7, #16
 800f6f8:	46bd      	mov	sp, r7
 800f6fa:	bd80      	pop	{r7, pc}

0800f6fc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f6fc:	b480      	push	{r7}
 800f6fe:	b085      	sub	sp, #20
 800f700:	af00      	add	r7, sp, #0
 800f702:	6078      	str	r0, [r7, #4]
 800f704:	460b      	mov	r3, r1
 800f706:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800f708:	687b      	ldr	r3, [r7, #4]
 800f70a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f70e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800f710:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f714:	2b00      	cmp	r3, #0
 800f716:	da0b      	bge.n	800f730 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800f718:	78fb      	ldrb	r3, [r7, #3]
 800f71a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800f71e:	68f9      	ldr	r1, [r7, #12]
 800f720:	4613      	mov	r3, r2
 800f722:	00db      	lsls	r3, r3, #3
 800f724:	4413      	add	r3, r2
 800f726:	009b      	lsls	r3, r3, #2
 800f728:	440b      	add	r3, r1
 800f72a:	3316      	adds	r3, #22
 800f72c:	781b      	ldrb	r3, [r3, #0]
 800f72e:	e00b      	b.n	800f748 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800f730:	78fb      	ldrb	r3, [r7, #3]
 800f732:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800f736:	68f9      	ldr	r1, [r7, #12]
 800f738:	4613      	mov	r3, r2
 800f73a:	00db      	lsls	r3, r3, #3
 800f73c:	4413      	add	r3, r2
 800f73e:	009b      	lsls	r3, r3, #2
 800f740:	440b      	add	r3, r1
 800f742:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800f746:	781b      	ldrb	r3, [r3, #0]
  }
}
 800f748:	4618      	mov	r0, r3
 800f74a:	3714      	adds	r7, #20
 800f74c:	46bd      	mov	sp, r7
 800f74e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f752:	4770      	bx	lr

0800f754 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800f754:	b580      	push	{r7, lr}
 800f756:	b084      	sub	sp, #16
 800f758:	af00      	add	r7, sp, #0
 800f75a:	6078      	str	r0, [r7, #4]
 800f75c:	460b      	mov	r3, r1
 800f75e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f760:	2300      	movs	r3, #0
 800f762:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f764:	2300      	movs	r3, #0
 800f766:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f76e:	78fa      	ldrb	r2, [r7, #3]
 800f770:	4611      	mov	r1, r2
 800f772:	4618      	mov	r0, r3
 800f774:	f7f6 f8d9 	bl	800592a <HAL_PCD_SetAddress>
 800f778:	4603      	mov	r3, r0
 800f77a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f77c:	7bfb      	ldrb	r3, [r7, #15]
 800f77e:	4618      	mov	r0, r3
 800f780:	f000 f874 	bl	800f86c <USBD_Get_USB_Status>
 800f784:	4603      	mov	r3, r0
 800f786:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f788:	7bbb      	ldrb	r3, [r7, #14]
}
 800f78a:	4618      	mov	r0, r3
 800f78c:	3710      	adds	r7, #16
 800f78e:	46bd      	mov	sp, r7
 800f790:	bd80      	pop	{r7, pc}

0800f792 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f792:	b580      	push	{r7, lr}
 800f794:	b086      	sub	sp, #24
 800f796:	af00      	add	r7, sp, #0
 800f798:	60f8      	str	r0, [r7, #12]
 800f79a:	607a      	str	r2, [r7, #4]
 800f79c:	603b      	str	r3, [r7, #0]
 800f79e:	460b      	mov	r3, r1
 800f7a0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f7a2:	2300      	movs	r3, #0
 800f7a4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f7a6:	2300      	movs	r3, #0
 800f7a8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800f7aa:	68fb      	ldr	r3, [r7, #12]
 800f7ac:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800f7b0:	7af9      	ldrb	r1, [r7, #11]
 800f7b2:	683b      	ldr	r3, [r7, #0]
 800f7b4:	687a      	ldr	r2, [r7, #4]
 800f7b6:	f7f6 f9e1 	bl	8005b7c <HAL_PCD_EP_Transmit>
 800f7ba:	4603      	mov	r3, r0
 800f7bc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f7be:	7dfb      	ldrb	r3, [r7, #23]
 800f7c0:	4618      	mov	r0, r3
 800f7c2:	f000 f853 	bl	800f86c <USBD_Get_USB_Status>
 800f7c6:	4603      	mov	r3, r0
 800f7c8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800f7ca:	7dbb      	ldrb	r3, [r7, #22]
}
 800f7cc:	4618      	mov	r0, r3
 800f7ce:	3718      	adds	r7, #24
 800f7d0:	46bd      	mov	sp, r7
 800f7d2:	bd80      	pop	{r7, pc}

0800f7d4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f7d4:	b580      	push	{r7, lr}
 800f7d6:	b086      	sub	sp, #24
 800f7d8:	af00      	add	r7, sp, #0
 800f7da:	60f8      	str	r0, [r7, #12]
 800f7dc:	607a      	str	r2, [r7, #4]
 800f7de:	603b      	str	r3, [r7, #0]
 800f7e0:	460b      	mov	r3, r1
 800f7e2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f7e4:	2300      	movs	r3, #0
 800f7e6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f7e8:	2300      	movs	r3, #0
 800f7ea:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800f7ec:	68fb      	ldr	r3, [r7, #12]
 800f7ee:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800f7f2:	7af9      	ldrb	r1, [r7, #11]
 800f7f4:	683b      	ldr	r3, [r7, #0]
 800f7f6:	687a      	ldr	r2, [r7, #4]
 800f7f8:	f7f6 f96d 	bl	8005ad6 <HAL_PCD_EP_Receive>
 800f7fc:	4603      	mov	r3, r0
 800f7fe:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f800:	7dfb      	ldrb	r3, [r7, #23]
 800f802:	4618      	mov	r0, r3
 800f804:	f000 f832 	bl	800f86c <USBD_Get_USB_Status>
 800f808:	4603      	mov	r3, r0
 800f80a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800f80c:	7dbb      	ldrb	r3, [r7, #22]
}
 800f80e:	4618      	mov	r0, r3
 800f810:	3718      	adds	r7, #24
 800f812:	46bd      	mov	sp, r7
 800f814:	bd80      	pop	{r7, pc}

0800f816 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f816:	b580      	push	{r7, lr}
 800f818:	b082      	sub	sp, #8
 800f81a:	af00      	add	r7, sp, #0
 800f81c:	6078      	str	r0, [r7, #4]
 800f81e:	460b      	mov	r3, r1
 800f820:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f828:	78fa      	ldrb	r2, [r7, #3]
 800f82a:	4611      	mov	r1, r2
 800f82c:	4618      	mov	r0, r3
 800f82e:	f7f6 f98d 	bl	8005b4c <HAL_PCD_EP_GetRxCount>
 800f832:	4603      	mov	r3, r0
}
 800f834:	4618      	mov	r0, r3
 800f836:	3708      	adds	r7, #8
 800f838:	46bd      	mov	sp, r7
 800f83a:	bd80      	pop	{r7, pc}

0800f83c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800f83c:	b480      	push	{r7}
 800f83e:	b083      	sub	sp, #12
 800f840:	af00      	add	r7, sp, #0
 800f842:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800f844:	4b03      	ldr	r3, [pc, #12]	@ (800f854 <USBD_static_malloc+0x18>)
}
 800f846:	4618      	mov	r0, r3
 800f848:	370c      	adds	r7, #12
 800f84a:	46bd      	mov	sp, r7
 800f84c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f850:	4770      	bx	lr
 800f852:	bf00      	nop
 800f854:	24002240 	.word	0x24002240

0800f858 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800f858:	b480      	push	{r7}
 800f85a:	b083      	sub	sp, #12
 800f85c:	af00      	add	r7, sp, #0
 800f85e:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 800f860:	bf00      	nop
 800f862:	370c      	adds	r7, #12
 800f864:	46bd      	mov	sp, r7
 800f866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f86a:	4770      	bx	lr

0800f86c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800f86c:	b480      	push	{r7}
 800f86e:	b085      	sub	sp, #20
 800f870:	af00      	add	r7, sp, #0
 800f872:	4603      	mov	r3, r0
 800f874:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f876:	2300      	movs	r3, #0
 800f878:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800f87a:	79fb      	ldrb	r3, [r7, #7]
 800f87c:	2b03      	cmp	r3, #3
 800f87e:	d817      	bhi.n	800f8b0 <USBD_Get_USB_Status+0x44>
 800f880:	a201      	add	r2, pc, #4	@ (adr r2, 800f888 <USBD_Get_USB_Status+0x1c>)
 800f882:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f886:	bf00      	nop
 800f888:	0800f899 	.word	0x0800f899
 800f88c:	0800f89f 	.word	0x0800f89f
 800f890:	0800f8a5 	.word	0x0800f8a5
 800f894:	0800f8ab 	.word	0x0800f8ab
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800f898:	2300      	movs	r3, #0
 800f89a:	73fb      	strb	r3, [r7, #15]
    break;
 800f89c:	e00b      	b.n	800f8b6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f89e:	2303      	movs	r3, #3
 800f8a0:	73fb      	strb	r3, [r7, #15]
    break;
 800f8a2:	e008      	b.n	800f8b6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f8a4:	2301      	movs	r3, #1
 800f8a6:	73fb      	strb	r3, [r7, #15]
    break;
 800f8a8:	e005      	b.n	800f8b6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f8aa:	2303      	movs	r3, #3
 800f8ac:	73fb      	strb	r3, [r7, #15]
    break;
 800f8ae:	e002      	b.n	800f8b6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800f8b0:	2303      	movs	r3, #3
 800f8b2:	73fb      	strb	r3, [r7, #15]
    break;
 800f8b4:	bf00      	nop
  }
  return usb_status;
 800f8b6:	7bfb      	ldrb	r3, [r7, #15]
}
 800f8b8:	4618      	mov	r0, r3
 800f8ba:	3714      	adds	r7, #20
 800f8bc:	46bd      	mov	sp, r7
 800f8be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8c2:	4770      	bx	lr

0800f8c4 <__cvt>:
 800f8c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f8c6:	ed2d 8b02 	vpush	{d8}
 800f8ca:	eeb0 8b40 	vmov.f64	d8, d0
 800f8ce:	b085      	sub	sp, #20
 800f8d0:	4617      	mov	r7, r2
 800f8d2:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 800f8d4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800f8d6:	ee18 2a90 	vmov	r2, s17
 800f8da:	f025 0520 	bic.w	r5, r5, #32
 800f8de:	2a00      	cmp	r2, #0
 800f8e0:	bfb6      	itet	lt
 800f8e2:	222d      	movlt	r2, #45	@ 0x2d
 800f8e4:	2200      	movge	r2, #0
 800f8e6:	eeb1 8b40 	vneglt.f64	d8, d0
 800f8ea:	2d46      	cmp	r5, #70	@ 0x46
 800f8ec:	460c      	mov	r4, r1
 800f8ee:	701a      	strb	r2, [r3, #0]
 800f8f0:	d004      	beq.n	800f8fc <__cvt+0x38>
 800f8f2:	2d45      	cmp	r5, #69	@ 0x45
 800f8f4:	d100      	bne.n	800f8f8 <__cvt+0x34>
 800f8f6:	3401      	adds	r4, #1
 800f8f8:	2102      	movs	r1, #2
 800f8fa:	e000      	b.n	800f8fe <__cvt+0x3a>
 800f8fc:	2103      	movs	r1, #3
 800f8fe:	ab03      	add	r3, sp, #12
 800f900:	9301      	str	r3, [sp, #4]
 800f902:	ab02      	add	r3, sp, #8
 800f904:	9300      	str	r3, [sp, #0]
 800f906:	4622      	mov	r2, r4
 800f908:	4633      	mov	r3, r6
 800f90a:	eeb0 0b48 	vmov.f64	d0, d8
 800f90e:	f000 fe3f 	bl	8010590 <_dtoa_r>
 800f912:	2d47      	cmp	r5, #71	@ 0x47
 800f914:	d114      	bne.n	800f940 <__cvt+0x7c>
 800f916:	07fb      	lsls	r3, r7, #31
 800f918:	d50a      	bpl.n	800f930 <__cvt+0x6c>
 800f91a:	1902      	adds	r2, r0, r4
 800f91c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800f920:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f924:	bf08      	it	eq
 800f926:	9203      	streq	r2, [sp, #12]
 800f928:	2130      	movs	r1, #48	@ 0x30
 800f92a:	9b03      	ldr	r3, [sp, #12]
 800f92c:	4293      	cmp	r3, r2
 800f92e:	d319      	bcc.n	800f964 <__cvt+0xa0>
 800f930:	9b03      	ldr	r3, [sp, #12]
 800f932:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f934:	1a1b      	subs	r3, r3, r0
 800f936:	6013      	str	r3, [r2, #0]
 800f938:	b005      	add	sp, #20
 800f93a:	ecbd 8b02 	vpop	{d8}
 800f93e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f940:	2d46      	cmp	r5, #70	@ 0x46
 800f942:	eb00 0204 	add.w	r2, r0, r4
 800f946:	d1e9      	bne.n	800f91c <__cvt+0x58>
 800f948:	7803      	ldrb	r3, [r0, #0]
 800f94a:	2b30      	cmp	r3, #48	@ 0x30
 800f94c:	d107      	bne.n	800f95e <__cvt+0x9a>
 800f94e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800f952:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f956:	bf1c      	itt	ne
 800f958:	f1c4 0401 	rsbne	r4, r4, #1
 800f95c:	6034      	strne	r4, [r6, #0]
 800f95e:	6833      	ldr	r3, [r6, #0]
 800f960:	441a      	add	r2, r3
 800f962:	e7db      	b.n	800f91c <__cvt+0x58>
 800f964:	1c5c      	adds	r4, r3, #1
 800f966:	9403      	str	r4, [sp, #12]
 800f968:	7019      	strb	r1, [r3, #0]
 800f96a:	e7de      	b.n	800f92a <__cvt+0x66>

0800f96c <__exponent>:
 800f96c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f96e:	2900      	cmp	r1, #0
 800f970:	bfba      	itte	lt
 800f972:	4249      	neglt	r1, r1
 800f974:	232d      	movlt	r3, #45	@ 0x2d
 800f976:	232b      	movge	r3, #43	@ 0x2b
 800f978:	2909      	cmp	r1, #9
 800f97a:	7002      	strb	r2, [r0, #0]
 800f97c:	7043      	strb	r3, [r0, #1]
 800f97e:	dd29      	ble.n	800f9d4 <__exponent+0x68>
 800f980:	f10d 0307 	add.w	r3, sp, #7
 800f984:	461d      	mov	r5, r3
 800f986:	270a      	movs	r7, #10
 800f988:	461a      	mov	r2, r3
 800f98a:	fbb1 f6f7 	udiv	r6, r1, r7
 800f98e:	fb07 1416 	mls	r4, r7, r6, r1
 800f992:	3430      	adds	r4, #48	@ 0x30
 800f994:	f802 4c01 	strb.w	r4, [r2, #-1]
 800f998:	460c      	mov	r4, r1
 800f99a:	2c63      	cmp	r4, #99	@ 0x63
 800f99c:	f103 33ff 	add.w	r3, r3, #4294967295
 800f9a0:	4631      	mov	r1, r6
 800f9a2:	dcf1      	bgt.n	800f988 <__exponent+0x1c>
 800f9a4:	3130      	adds	r1, #48	@ 0x30
 800f9a6:	1e94      	subs	r4, r2, #2
 800f9a8:	f803 1c01 	strb.w	r1, [r3, #-1]
 800f9ac:	1c41      	adds	r1, r0, #1
 800f9ae:	4623      	mov	r3, r4
 800f9b0:	42ab      	cmp	r3, r5
 800f9b2:	d30a      	bcc.n	800f9ca <__exponent+0x5e>
 800f9b4:	f10d 0309 	add.w	r3, sp, #9
 800f9b8:	1a9b      	subs	r3, r3, r2
 800f9ba:	42ac      	cmp	r4, r5
 800f9bc:	bf88      	it	hi
 800f9be:	2300      	movhi	r3, #0
 800f9c0:	3302      	adds	r3, #2
 800f9c2:	4403      	add	r3, r0
 800f9c4:	1a18      	subs	r0, r3, r0
 800f9c6:	b003      	add	sp, #12
 800f9c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f9ca:	f813 6b01 	ldrb.w	r6, [r3], #1
 800f9ce:	f801 6f01 	strb.w	r6, [r1, #1]!
 800f9d2:	e7ed      	b.n	800f9b0 <__exponent+0x44>
 800f9d4:	2330      	movs	r3, #48	@ 0x30
 800f9d6:	3130      	adds	r1, #48	@ 0x30
 800f9d8:	7083      	strb	r3, [r0, #2]
 800f9da:	70c1      	strb	r1, [r0, #3]
 800f9dc:	1d03      	adds	r3, r0, #4
 800f9de:	e7f1      	b.n	800f9c4 <__exponent+0x58>

0800f9e0 <_printf_float>:
 800f9e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f9e4:	b08d      	sub	sp, #52	@ 0x34
 800f9e6:	460c      	mov	r4, r1
 800f9e8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800f9ec:	4616      	mov	r6, r2
 800f9ee:	461f      	mov	r7, r3
 800f9f0:	4605      	mov	r5, r0
 800f9f2:	f000 fccb 	bl	801038c <_localeconv_r>
 800f9f6:	f8d0 b000 	ldr.w	fp, [r0]
 800f9fa:	4658      	mov	r0, fp
 800f9fc:	f7f0 fcc0 	bl	8000380 <strlen>
 800fa00:	2300      	movs	r3, #0
 800fa02:	930a      	str	r3, [sp, #40]	@ 0x28
 800fa04:	f8d8 3000 	ldr.w	r3, [r8]
 800fa08:	f894 9018 	ldrb.w	r9, [r4, #24]
 800fa0c:	6822      	ldr	r2, [r4, #0]
 800fa0e:	9005      	str	r0, [sp, #20]
 800fa10:	3307      	adds	r3, #7
 800fa12:	f023 0307 	bic.w	r3, r3, #7
 800fa16:	f103 0108 	add.w	r1, r3, #8
 800fa1a:	f8c8 1000 	str.w	r1, [r8]
 800fa1e:	ed93 0b00 	vldr	d0, [r3]
 800fa22:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 800fc80 <_printf_float+0x2a0>
 800fa26:	eeb0 7bc0 	vabs.f64	d7, d0
 800fa2a:	eeb4 7b46 	vcmp.f64	d7, d6
 800fa2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa32:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 800fa36:	dd24      	ble.n	800fa82 <_printf_float+0xa2>
 800fa38:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800fa3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa40:	d502      	bpl.n	800fa48 <_printf_float+0x68>
 800fa42:	232d      	movs	r3, #45	@ 0x2d
 800fa44:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800fa48:	498f      	ldr	r1, [pc, #572]	@ (800fc88 <_printf_float+0x2a8>)
 800fa4a:	4b90      	ldr	r3, [pc, #576]	@ (800fc8c <_printf_float+0x2ac>)
 800fa4c:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 800fa50:	bf94      	ite	ls
 800fa52:	4688      	movls	r8, r1
 800fa54:	4698      	movhi	r8, r3
 800fa56:	f022 0204 	bic.w	r2, r2, #4
 800fa5a:	2303      	movs	r3, #3
 800fa5c:	6123      	str	r3, [r4, #16]
 800fa5e:	6022      	str	r2, [r4, #0]
 800fa60:	f04f 0a00 	mov.w	sl, #0
 800fa64:	9700      	str	r7, [sp, #0]
 800fa66:	4633      	mov	r3, r6
 800fa68:	aa0b      	add	r2, sp, #44	@ 0x2c
 800fa6a:	4621      	mov	r1, r4
 800fa6c:	4628      	mov	r0, r5
 800fa6e:	f000 f9d1 	bl	800fe14 <_printf_common>
 800fa72:	3001      	adds	r0, #1
 800fa74:	f040 8089 	bne.w	800fb8a <_printf_float+0x1aa>
 800fa78:	f04f 30ff 	mov.w	r0, #4294967295
 800fa7c:	b00d      	add	sp, #52	@ 0x34
 800fa7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa82:	eeb4 0b40 	vcmp.f64	d0, d0
 800fa86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa8a:	d709      	bvc.n	800faa0 <_printf_float+0xc0>
 800fa8c:	ee10 3a90 	vmov	r3, s1
 800fa90:	2b00      	cmp	r3, #0
 800fa92:	bfbc      	itt	lt
 800fa94:	232d      	movlt	r3, #45	@ 0x2d
 800fa96:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800fa9a:	497d      	ldr	r1, [pc, #500]	@ (800fc90 <_printf_float+0x2b0>)
 800fa9c:	4b7d      	ldr	r3, [pc, #500]	@ (800fc94 <_printf_float+0x2b4>)
 800fa9e:	e7d5      	b.n	800fa4c <_printf_float+0x6c>
 800faa0:	6863      	ldr	r3, [r4, #4]
 800faa2:	1c59      	adds	r1, r3, #1
 800faa4:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 800faa8:	d139      	bne.n	800fb1e <_printf_float+0x13e>
 800faaa:	2306      	movs	r3, #6
 800faac:	6063      	str	r3, [r4, #4]
 800faae:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800fab2:	2300      	movs	r3, #0
 800fab4:	6022      	str	r2, [r4, #0]
 800fab6:	9303      	str	r3, [sp, #12]
 800fab8:	ab0a      	add	r3, sp, #40	@ 0x28
 800faba:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800fabe:	ab09      	add	r3, sp, #36	@ 0x24
 800fac0:	9300      	str	r3, [sp, #0]
 800fac2:	6861      	ldr	r1, [r4, #4]
 800fac4:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800fac8:	4628      	mov	r0, r5
 800faca:	f7ff fefb 	bl	800f8c4 <__cvt>
 800face:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800fad2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800fad4:	4680      	mov	r8, r0
 800fad6:	d129      	bne.n	800fb2c <_printf_float+0x14c>
 800fad8:	1cc8      	adds	r0, r1, #3
 800fada:	db02      	blt.n	800fae2 <_printf_float+0x102>
 800fadc:	6863      	ldr	r3, [r4, #4]
 800fade:	4299      	cmp	r1, r3
 800fae0:	dd41      	ble.n	800fb66 <_printf_float+0x186>
 800fae2:	f1a9 0902 	sub.w	r9, r9, #2
 800fae6:	fa5f f989 	uxtb.w	r9, r9
 800faea:	3901      	subs	r1, #1
 800faec:	464a      	mov	r2, r9
 800faee:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800faf2:	9109      	str	r1, [sp, #36]	@ 0x24
 800faf4:	f7ff ff3a 	bl	800f96c <__exponent>
 800faf8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800fafa:	1813      	adds	r3, r2, r0
 800fafc:	2a01      	cmp	r2, #1
 800fafe:	4682      	mov	sl, r0
 800fb00:	6123      	str	r3, [r4, #16]
 800fb02:	dc02      	bgt.n	800fb0a <_printf_float+0x12a>
 800fb04:	6822      	ldr	r2, [r4, #0]
 800fb06:	07d2      	lsls	r2, r2, #31
 800fb08:	d501      	bpl.n	800fb0e <_printf_float+0x12e>
 800fb0a:	3301      	adds	r3, #1
 800fb0c:	6123      	str	r3, [r4, #16]
 800fb0e:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800fb12:	2b00      	cmp	r3, #0
 800fb14:	d0a6      	beq.n	800fa64 <_printf_float+0x84>
 800fb16:	232d      	movs	r3, #45	@ 0x2d
 800fb18:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800fb1c:	e7a2      	b.n	800fa64 <_printf_float+0x84>
 800fb1e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800fb22:	d1c4      	bne.n	800faae <_printf_float+0xce>
 800fb24:	2b00      	cmp	r3, #0
 800fb26:	d1c2      	bne.n	800faae <_printf_float+0xce>
 800fb28:	2301      	movs	r3, #1
 800fb2a:	e7bf      	b.n	800faac <_printf_float+0xcc>
 800fb2c:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800fb30:	d9db      	bls.n	800faea <_printf_float+0x10a>
 800fb32:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 800fb36:	d118      	bne.n	800fb6a <_printf_float+0x18a>
 800fb38:	2900      	cmp	r1, #0
 800fb3a:	6863      	ldr	r3, [r4, #4]
 800fb3c:	dd0b      	ble.n	800fb56 <_printf_float+0x176>
 800fb3e:	6121      	str	r1, [r4, #16]
 800fb40:	b913      	cbnz	r3, 800fb48 <_printf_float+0x168>
 800fb42:	6822      	ldr	r2, [r4, #0]
 800fb44:	07d0      	lsls	r0, r2, #31
 800fb46:	d502      	bpl.n	800fb4e <_printf_float+0x16e>
 800fb48:	3301      	adds	r3, #1
 800fb4a:	440b      	add	r3, r1
 800fb4c:	6123      	str	r3, [r4, #16]
 800fb4e:	65a1      	str	r1, [r4, #88]	@ 0x58
 800fb50:	f04f 0a00 	mov.w	sl, #0
 800fb54:	e7db      	b.n	800fb0e <_printf_float+0x12e>
 800fb56:	b913      	cbnz	r3, 800fb5e <_printf_float+0x17e>
 800fb58:	6822      	ldr	r2, [r4, #0]
 800fb5a:	07d2      	lsls	r2, r2, #31
 800fb5c:	d501      	bpl.n	800fb62 <_printf_float+0x182>
 800fb5e:	3302      	adds	r3, #2
 800fb60:	e7f4      	b.n	800fb4c <_printf_float+0x16c>
 800fb62:	2301      	movs	r3, #1
 800fb64:	e7f2      	b.n	800fb4c <_printf_float+0x16c>
 800fb66:	f04f 0967 	mov.w	r9, #103	@ 0x67
 800fb6a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fb6c:	4299      	cmp	r1, r3
 800fb6e:	db05      	blt.n	800fb7c <_printf_float+0x19c>
 800fb70:	6823      	ldr	r3, [r4, #0]
 800fb72:	6121      	str	r1, [r4, #16]
 800fb74:	07d8      	lsls	r0, r3, #31
 800fb76:	d5ea      	bpl.n	800fb4e <_printf_float+0x16e>
 800fb78:	1c4b      	adds	r3, r1, #1
 800fb7a:	e7e7      	b.n	800fb4c <_printf_float+0x16c>
 800fb7c:	2900      	cmp	r1, #0
 800fb7e:	bfd4      	ite	le
 800fb80:	f1c1 0202 	rsble	r2, r1, #2
 800fb84:	2201      	movgt	r2, #1
 800fb86:	4413      	add	r3, r2
 800fb88:	e7e0      	b.n	800fb4c <_printf_float+0x16c>
 800fb8a:	6823      	ldr	r3, [r4, #0]
 800fb8c:	055a      	lsls	r2, r3, #21
 800fb8e:	d407      	bmi.n	800fba0 <_printf_float+0x1c0>
 800fb90:	6923      	ldr	r3, [r4, #16]
 800fb92:	4642      	mov	r2, r8
 800fb94:	4631      	mov	r1, r6
 800fb96:	4628      	mov	r0, r5
 800fb98:	47b8      	blx	r7
 800fb9a:	3001      	adds	r0, #1
 800fb9c:	d12a      	bne.n	800fbf4 <_printf_float+0x214>
 800fb9e:	e76b      	b.n	800fa78 <_printf_float+0x98>
 800fba0:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800fba4:	f240 80e0 	bls.w	800fd68 <_printf_float+0x388>
 800fba8:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800fbac:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800fbb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fbb4:	d133      	bne.n	800fc1e <_printf_float+0x23e>
 800fbb6:	4a38      	ldr	r2, [pc, #224]	@ (800fc98 <_printf_float+0x2b8>)
 800fbb8:	2301      	movs	r3, #1
 800fbba:	4631      	mov	r1, r6
 800fbbc:	4628      	mov	r0, r5
 800fbbe:	47b8      	blx	r7
 800fbc0:	3001      	adds	r0, #1
 800fbc2:	f43f af59 	beq.w	800fa78 <_printf_float+0x98>
 800fbc6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800fbca:	4543      	cmp	r3, r8
 800fbcc:	db02      	blt.n	800fbd4 <_printf_float+0x1f4>
 800fbce:	6823      	ldr	r3, [r4, #0]
 800fbd0:	07d8      	lsls	r0, r3, #31
 800fbd2:	d50f      	bpl.n	800fbf4 <_printf_float+0x214>
 800fbd4:	9b05      	ldr	r3, [sp, #20]
 800fbd6:	465a      	mov	r2, fp
 800fbd8:	4631      	mov	r1, r6
 800fbda:	4628      	mov	r0, r5
 800fbdc:	47b8      	blx	r7
 800fbde:	3001      	adds	r0, #1
 800fbe0:	f43f af4a 	beq.w	800fa78 <_printf_float+0x98>
 800fbe4:	f04f 0900 	mov.w	r9, #0
 800fbe8:	f108 38ff 	add.w	r8, r8, #4294967295
 800fbec:	f104 0a1a 	add.w	sl, r4, #26
 800fbf0:	45c8      	cmp	r8, r9
 800fbf2:	dc09      	bgt.n	800fc08 <_printf_float+0x228>
 800fbf4:	6823      	ldr	r3, [r4, #0]
 800fbf6:	079b      	lsls	r3, r3, #30
 800fbf8:	f100 8107 	bmi.w	800fe0a <_printf_float+0x42a>
 800fbfc:	68e0      	ldr	r0, [r4, #12]
 800fbfe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fc00:	4298      	cmp	r0, r3
 800fc02:	bfb8      	it	lt
 800fc04:	4618      	movlt	r0, r3
 800fc06:	e739      	b.n	800fa7c <_printf_float+0x9c>
 800fc08:	2301      	movs	r3, #1
 800fc0a:	4652      	mov	r2, sl
 800fc0c:	4631      	mov	r1, r6
 800fc0e:	4628      	mov	r0, r5
 800fc10:	47b8      	blx	r7
 800fc12:	3001      	adds	r0, #1
 800fc14:	f43f af30 	beq.w	800fa78 <_printf_float+0x98>
 800fc18:	f109 0901 	add.w	r9, r9, #1
 800fc1c:	e7e8      	b.n	800fbf0 <_printf_float+0x210>
 800fc1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fc20:	2b00      	cmp	r3, #0
 800fc22:	dc3b      	bgt.n	800fc9c <_printf_float+0x2bc>
 800fc24:	4a1c      	ldr	r2, [pc, #112]	@ (800fc98 <_printf_float+0x2b8>)
 800fc26:	2301      	movs	r3, #1
 800fc28:	4631      	mov	r1, r6
 800fc2a:	4628      	mov	r0, r5
 800fc2c:	47b8      	blx	r7
 800fc2e:	3001      	adds	r0, #1
 800fc30:	f43f af22 	beq.w	800fa78 <_printf_float+0x98>
 800fc34:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800fc38:	ea59 0303 	orrs.w	r3, r9, r3
 800fc3c:	d102      	bne.n	800fc44 <_printf_float+0x264>
 800fc3e:	6823      	ldr	r3, [r4, #0]
 800fc40:	07d9      	lsls	r1, r3, #31
 800fc42:	d5d7      	bpl.n	800fbf4 <_printf_float+0x214>
 800fc44:	9b05      	ldr	r3, [sp, #20]
 800fc46:	465a      	mov	r2, fp
 800fc48:	4631      	mov	r1, r6
 800fc4a:	4628      	mov	r0, r5
 800fc4c:	47b8      	blx	r7
 800fc4e:	3001      	adds	r0, #1
 800fc50:	f43f af12 	beq.w	800fa78 <_printf_float+0x98>
 800fc54:	f04f 0a00 	mov.w	sl, #0
 800fc58:	f104 0b1a 	add.w	fp, r4, #26
 800fc5c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fc5e:	425b      	negs	r3, r3
 800fc60:	4553      	cmp	r3, sl
 800fc62:	dc01      	bgt.n	800fc68 <_printf_float+0x288>
 800fc64:	464b      	mov	r3, r9
 800fc66:	e794      	b.n	800fb92 <_printf_float+0x1b2>
 800fc68:	2301      	movs	r3, #1
 800fc6a:	465a      	mov	r2, fp
 800fc6c:	4631      	mov	r1, r6
 800fc6e:	4628      	mov	r0, r5
 800fc70:	47b8      	blx	r7
 800fc72:	3001      	adds	r0, #1
 800fc74:	f43f af00 	beq.w	800fa78 <_printf_float+0x98>
 800fc78:	f10a 0a01 	add.w	sl, sl, #1
 800fc7c:	e7ee      	b.n	800fc5c <_printf_float+0x27c>
 800fc7e:	bf00      	nop
 800fc80:	ffffffff 	.word	0xffffffff
 800fc84:	7fefffff 	.word	0x7fefffff
 800fc88:	0801264c 	.word	0x0801264c
 800fc8c:	08012650 	.word	0x08012650
 800fc90:	08012654 	.word	0x08012654
 800fc94:	08012658 	.word	0x08012658
 800fc98:	0801265c 	.word	0x0801265c
 800fc9c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800fc9e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800fca2:	4553      	cmp	r3, sl
 800fca4:	bfa8      	it	ge
 800fca6:	4653      	movge	r3, sl
 800fca8:	2b00      	cmp	r3, #0
 800fcaa:	4699      	mov	r9, r3
 800fcac:	dc37      	bgt.n	800fd1e <_printf_float+0x33e>
 800fcae:	2300      	movs	r3, #0
 800fcb0:	9307      	str	r3, [sp, #28]
 800fcb2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800fcb6:	f104 021a 	add.w	r2, r4, #26
 800fcba:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800fcbc:	9907      	ldr	r1, [sp, #28]
 800fcbe:	9306      	str	r3, [sp, #24]
 800fcc0:	eba3 0309 	sub.w	r3, r3, r9
 800fcc4:	428b      	cmp	r3, r1
 800fcc6:	dc31      	bgt.n	800fd2c <_printf_float+0x34c>
 800fcc8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fcca:	459a      	cmp	sl, r3
 800fccc:	dc3b      	bgt.n	800fd46 <_printf_float+0x366>
 800fcce:	6823      	ldr	r3, [r4, #0]
 800fcd0:	07da      	lsls	r2, r3, #31
 800fcd2:	d438      	bmi.n	800fd46 <_printf_float+0x366>
 800fcd4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fcd6:	ebaa 0903 	sub.w	r9, sl, r3
 800fcda:	9b06      	ldr	r3, [sp, #24]
 800fcdc:	ebaa 0303 	sub.w	r3, sl, r3
 800fce0:	4599      	cmp	r9, r3
 800fce2:	bfa8      	it	ge
 800fce4:	4699      	movge	r9, r3
 800fce6:	f1b9 0f00 	cmp.w	r9, #0
 800fcea:	dc34      	bgt.n	800fd56 <_printf_float+0x376>
 800fcec:	f04f 0800 	mov.w	r8, #0
 800fcf0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800fcf4:	f104 0b1a 	add.w	fp, r4, #26
 800fcf8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fcfa:	ebaa 0303 	sub.w	r3, sl, r3
 800fcfe:	eba3 0309 	sub.w	r3, r3, r9
 800fd02:	4543      	cmp	r3, r8
 800fd04:	f77f af76 	ble.w	800fbf4 <_printf_float+0x214>
 800fd08:	2301      	movs	r3, #1
 800fd0a:	465a      	mov	r2, fp
 800fd0c:	4631      	mov	r1, r6
 800fd0e:	4628      	mov	r0, r5
 800fd10:	47b8      	blx	r7
 800fd12:	3001      	adds	r0, #1
 800fd14:	f43f aeb0 	beq.w	800fa78 <_printf_float+0x98>
 800fd18:	f108 0801 	add.w	r8, r8, #1
 800fd1c:	e7ec      	b.n	800fcf8 <_printf_float+0x318>
 800fd1e:	4642      	mov	r2, r8
 800fd20:	4631      	mov	r1, r6
 800fd22:	4628      	mov	r0, r5
 800fd24:	47b8      	blx	r7
 800fd26:	3001      	adds	r0, #1
 800fd28:	d1c1      	bne.n	800fcae <_printf_float+0x2ce>
 800fd2a:	e6a5      	b.n	800fa78 <_printf_float+0x98>
 800fd2c:	2301      	movs	r3, #1
 800fd2e:	4631      	mov	r1, r6
 800fd30:	4628      	mov	r0, r5
 800fd32:	9206      	str	r2, [sp, #24]
 800fd34:	47b8      	blx	r7
 800fd36:	3001      	adds	r0, #1
 800fd38:	f43f ae9e 	beq.w	800fa78 <_printf_float+0x98>
 800fd3c:	9b07      	ldr	r3, [sp, #28]
 800fd3e:	9a06      	ldr	r2, [sp, #24]
 800fd40:	3301      	adds	r3, #1
 800fd42:	9307      	str	r3, [sp, #28]
 800fd44:	e7b9      	b.n	800fcba <_printf_float+0x2da>
 800fd46:	9b05      	ldr	r3, [sp, #20]
 800fd48:	465a      	mov	r2, fp
 800fd4a:	4631      	mov	r1, r6
 800fd4c:	4628      	mov	r0, r5
 800fd4e:	47b8      	blx	r7
 800fd50:	3001      	adds	r0, #1
 800fd52:	d1bf      	bne.n	800fcd4 <_printf_float+0x2f4>
 800fd54:	e690      	b.n	800fa78 <_printf_float+0x98>
 800fd56:	9a06      	ldr	r2, [sp, #24]
 800fd58:	464b      	mov	r3, r9
 800fd5a:	4442      	add	r2, r8
 800fd5c:	4631      	mov	r1, r6
 800fd5e:	4628      	mov	r0, r5
 800fd60:	47b8      	blx	r7
 800fd62:	3001      	adds	r0, #1
 800fd64:	d1c2      	bne.n	800fcec <_printf_float+0x30c>
 800fd66:	e687      	b.n	800fa78 <_printf_float+0x98>
 800fd68:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 800fd6c:	f1b9 0f01 	cmp.w	r9, #1
 800fd70:	dc01      	bgt.n	800fd76 <_printf_float+0x396>
 800fd72:	07db      	lsls	r3, r3, #31
 800fd74:	d536      	bpl.n	800fde4 <_printf_float+0x404>
 800fd76:	2301      	movs	r3, #1
 800fd78:	4642      	mov	r2, r8
 800fd7a:	4631      	mov	r1, r6
 800fd7c:	4628      	mov	r0, r5
 800fd7e:	47b8      	blx	r7
 800fd80:	3001      	adds	r0, #1
 800fd82:	f43f ae79 	beq.w	800fa78 <_printf_float+0x98>
 800fd86:	9b05      	ldr	r3, [sp, #20]
 800fd88:	465a      	mov	r2, fp
 800fd8a:	4631      	mov	r1, r6
 800fd8c:	4628      	mov	r0, r5
 800fd8e:	47b8      	blx	r7
 800fd90:	3001      	adds	r0, #1
 800fd92:	f43f ae71 	beq.w	800fa78 <_printf_float+0x98>
 800fd96:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800fd9a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800fd9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fda2:	f109 39ff 	add.w	r9, r9, #4294967295
 800fda6:	d018      	beq.n	800fdda <_printf_float+0x3fa>
 800fda8:	464b      	mov	r3, r9
 800fdaa:	f108 0201 	add.w	r2, r8, #1
 800fdae:	4631      	mov	r1, r6
 800fdb0:	4628      	mov	r0, r5
 800fdb2:	47b8      	blx	r7
 800fdb4:	3001      	adds	r0, #1
 800fdb6:	d10c      	bne.n	800fdd2 <_printf_float+0x3f2>
 800fdb8:	e65e      	b.n	800fa78 <_printf_float+0x98>
 800fdba:	2301      	movs	r3, #1
 800fdbc:	465a      	mov	r2, fp
 800fdbe:	4631      	mov	r1, r6
 800fdc0:	4628      	mov	r0, r5
 800fdc2:	47b8      	blx	r7
 800fdc4:	3001      	adds	r0, #1
 800fdc6:	f43f ae57 	beq.w	800fa78 <_printf_float+0x98>
 800fdca:	f108 0801 	add.w	r8, r8, #1
 800fdce:	45c8      	cmp	r8, r9
 800fdd0:	dbf3      	blt.n	800fdba <_printf_float+0x3da>
 800fdd2:	4653      	mov	r3, sl
 800fdd4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800fdd8:	e6dc      	b.n	800fb94 <_printf_float+0x1b4>
 800fdda:	f04f 0800 	mov.w	r8, #0
 800fdde:	f104 0b1a 	add.w	fp, r4, #26
 800fde2:	e7f4      	b.n	800fdce <_printf_float+0x3ee>
 800fde4:	2301      	movs	r3, #1
 800fde6:	4642      	mov	r2, r8
 800fde8:	e7e1      	b.n	800fdae <_printf_float+0x3ce>
 800fdea:	2301      	movs	r3, #1
 800fdec:	464a      	mov	r2, r9
 800fdee:	4631      	mov	r1, r6
 800fdf0:	4628      	mov	r0, r5
 800fdf2:	47b8      	blx	r7
 800fdf4:	3001      	adds	r0, #1
 800fdf6:	f43f ae3f 	beq.w	800fa78 <_printf_float+0x98>
 800fdfa:	f108 0801 	add.w	r8, r8, #1
 800fdfe:	68e3      	ldr	r3, [r4, #12]
 800fe00:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800fe02:	1a5b      	subs	r3, r3, r1
 800fe04:	4543      	cmp	r3, r8
 800fe06:	dcf0      	bgt.n	800fdea <_printf_float+0x40a>
 800fe08:	e6f8      	b.n	800fbfc <_printf_float+0x21c>
 800fe0a:	f04f 0800 	mov.w	r8, #0
 800fe0e:	f104 0919 	add.w	r9, r4, #25
 800fe12:	e7f4      	b.n	800fdfe <_printf_float+0x41e>

0800fe14 <_printf_common>:
 800fe14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fe18:	4616      	mov	r6, r2
 800fe1a:	4698      	mov	r8, r3
 800fe1c:	688a      	ldr	r2, [r1, #8]
 800fe1e:	690b      	ldr	r3, [r1, #16]
 800fe20:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800fe24:	4293      	cmp	r3, r2
 800fe26:	bfb8      	it	lt
 800fe28:	4613      	movlt	r3, r2
 800fe2a:	6033      	str	r3, [r6, #0]
 800fe2c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800fe30:	4607      	mov	r7, r0
 800fe32:	460c      	mov	r4, r1
 800fe34:	b10a      	cbz	r2, 800fe3a <_printf_common+0x26>
 800fe36:	3301      	adds	r3, #1
 800fe38:	6033      	str	r3, [r6, #0]
 800fe3a:	6823      	ldr	r3, [r4, #0]
 800fe3c:	0699      	lsls	r1, r3, #26
 800fe3e:	bf42      	ittt	mi
 800fe40:	6833      	ldrmi	r3, [r6, #0]
 800fe42:	3302      	addmi	r3, #2
 800fe44:	6033      	strmi	r3, [r6, #0]
 800fe46:	6825      	ldr	r5, [r4, #0]
 800fe48:	f015 0506 	ands.w	r5, r5, #6
 800fe4c:	d106      	bne.n	800fe5c <_printf_common+0x48>
 800fe4e:	f104 0a19 	add.w	sl, r4, #25
 800fe52:	68e3      	ldr	r3, [r4, #12]
 800fe54:	6832      	ldr	r2, [r6, #0]
 800fe56:	1a9b      	subs	r3, r3, r2
 800fe58:	42ab      	cmp	r3, r5
 800fe5a:	dc26      	bgt.n	800feaa <_printf_common+0x96>
 800fe5c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800fe60:	6822      	ldr	r2, [r4, #0]
 800fe62:	3b00      	subs	r3, #0
 800fe64:	bf18      	it	ne
 800fe66:	2301      	movne	r3, #1
 800fe68:	0692      	lsls	r2, r2, #26
 800fe6a:	d42b      	bmi.n	800fec4 <_printf_common+0xb0>
 800fe6c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800fe70:	4641      	mov	r1, r8
 800fe72:	4638      	mov	r0, r7
 800fe74:	47c8      	blx	r9
 800fe76:	3001      	adds	r0, #1
 800fe78:	d01e      	beq.n	800feb8 <_printf_common+0xa4>
 800fe7a:	6823      	ldr	r3, [r4, #0]
 800fe7c:	6922      	ldr	r2, [r4, #16]
 800fe7e:	f003 0306 	and.w	r3, r3, #6
 800fe82:	2b04      	cmp	r3, #4
 800fe84:	bf02      	ittt	eq
 800fe86:	68e5      	ldreq	r5, [r4, #12]
 800fe88:	6833      	ldreq	r3, [r6, #0]
 800fe8a:	1aed      	subeq	r5, r5, r3
 800fe8c:	68a3      	ldr	r3, [r4, #8]
 800fe8e:	bf0c      	ite	eq
 800fe90:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800fe94:	2500      	movne	r5, #0
 800fe96:	4293      	cmp	r3, r2
 800fe98:	bfc4      	itt	gt
 800fe9a:	1a9b      	subgt	r3, r3, r2
 800fe9c:	18ed      	addgt	r5, r5, r3
 800fe9e:	2600      	movs	r6, #0
 800fea0:	341a      	adds	r4, #26
 800fea2:	42b5      	cmp	r5, r6
 800fea4:	d11a      	bne.n	800fedc <_printf_common+0xc8>
 800fea6:	2000      	movs	r0, #0
 800fea8:	e008      	b.n	800febc <_printf_common+0xa8>
 800feaa:	2301      	movs	r3, #1
 800feac:	4652      	mov	r2, sl
 800feae:	4641      	mov	r1, r8
 800feb0:	4638      	mov	r0, r7
 800feb2:	47c8      	blx	r9
 800feb4:	3001      	adds	r0, #1
 800feb6:	d103      	bne.n	800fec0 <_printf_common+0xac>
 800feb8:	f04f 30ff 	mov.w	r0, #4294967295
 800febc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fec0:	3501      	adds	r5, #1
 800fec2:	e7c6      	b.n	800fe52 <_printf_common+0x3e>
 800fec4:	18e1      	adds	r1, r4, r3
 800fec6:	1c5a      	adds	r2, r3, #1
 800fec8:	2030      	movs	r0, #48	@ 0x30
 800feca:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800fece:	4422      	add	r2, r4
 800fed0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800fed4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800fed8:	3302      	adds	r3, #2
 800feda:	e7c7      	b.n	800fe6c <_printf_common+0x58>
 800fedc:	2301      	movs	r3, #1
 800fede:	4622      	mov	r2, r4
 800fee0:	4641      	mov	r1, r8
 800fee2:	4638      	mov	r0, r7
 800fee4:	47c8      	blx	r9
 800fee6:	3001      	adds	r0, #1
 800fee8:	d0e6      	beq.n	800feb8 <_printf_common+0xa4>
 800feea:	3601      	adds	r6, #1
 800feec:	e7d9      	b.n	800fea2 <_printf_common+0x8e>
	...

0800fef0 <_printf_i>:
 800fef0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fef4:	7e0f      	ldrb	r7, [r1, #24]
 800fef6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800fef8:	2f78      	cmp	r7, #120	@ 0x78
 800fefa:	4691      	mov	r9, r2
 800fefc:	4680      	mov	r8, r0
 800fefe:	460c      	mov	r4, r1
 800ff00:	469a      	mov	sl, r3
 800ff02:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ff06:	d807      	bhi.n	800ff18 <_printf_i+0x28>
 800ff08:	2f62      	cmp	r7, #98	@ 0x62
 800ff0a:	d80a      	bhi.n	800ff22 <_printf_i+0x32>
 800ff0c:	2f00      	cmp	r7, #0
 800ff0e:	f000 80d2 	beq.w	80100b6 <_printf_i+0x1c6>
 800ff12:	2f58      	cmp	r7, #88	@ 0x58
 800ff14:	f000 80b9 	beq.w	801008a <_printf_i+0x19a>
 800ff18:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ff1c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ff20:	e03a      	b.n	800ff98 <_printf_i+0xa8>
 800ff22:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ff26:	2b15      	cmp	r3, #21
 800ff28:	d8f6      	bhi.n	800ff18 <_printf_i+0x28>
 800ff2a:	a101      	add	r1, pc, #4	@ (adr r1, 800ff30 <_printf_i+0x40>)
 800ff2c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ff30:	0800ff89 	.word	0x0800ff89
 800ff34:	0800ff9d 	.word	0x0800ff9d
 800ff38:	0800ff19 	.word	0x0800ff19
 800ff3c:	0800ff19 	.word	0x0800ff19
 800ff40:	0800ff19 	.word	0x0800ff19
 800ff44:	0800ff19 	.word	0x0800ff19
 800ff48:	0800ff9d 	.word	0x0800ff9d
 800ff4c:	0800ff19 	.word	0x0800ff19
 800ff50:	0800ff19 	.word	0x0800ff19
 800ff54:	0800ff19 	.word	0x0800ff19
 800ff58:	0800ff19 	.word	0x0800ff19
 800ff5c:	0801009d 	.word	0x0801009d
 800ff60:	0800ffc7 	.word	0x0800ffc7
 800ff64:	08010057 	.word	0x08010057
 800ff68:	0800ff19 	.word	0x0800ff19
 800ff6c:	0800ff19 	.word	0x0800ff19
 800ff70:	080100bf 	.word	0x080100bf
 800ff74:	0800ff19 	.word	0x0800ff19
 800ff78:	0800ffc7 	.word	0x0800ffc7
 800ff7c:	0800ff19 	.word	0x0800ff19
 800ff80:	0800ff19 	.word	0x0800ff19
 800ff84:	0801005f 	.word	0x0801005f
 800ff88:	6833      	ldr	r3, [r6, #0]
 800ff8a:	1d1a      	adds	r2, r3, #4
 800ff8c:	681b      	ldr	r3, [r3, #0]
 800ff8e:	6032      	str	r2, [r6, #0]
 800ff90:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ff94:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ff98:	2301      	movs	r3, #1
 800ff9a:	e09d      	b.n	80100d8 <_printf_i+0x1e8>
 800ff9c:	6833      	ldr	r3, [r6, #0]
 800ff9e:	6820      	ldr	r0, [r4, #0]
 800ffa0:	1d19      	adds	r1, r3, #4
 800ffa2:	6031      	str	r1, [r6, #0]
 800ffa4:	0606      	lsls	r6, r0, #24
 800ffa6:	d501      	bpl.n	800ffac <_printf_i+0xbc>
 800ffa8:	681d      	ldr	r5, [r3, #0]
 800ffaa:	e003      	b.n	800ffb4 <_printf_i+0xc4>
 800ffac:	0645      	lsls	r5, r0, #25
 800ffae:	d5fb      	bpl.n	800ffa8 <_printf_i+0xb8>
 800ffb0:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ffb4:	2d00      	cmp	r5, #0
 800ffb6:	da03      	bge.n	800ffc0 <_printf_i+0xd0>
 800ffb8:	232d      	movs	r3, #45	@ 0x2d
 800ffba:	426d      	negs	r5, r5
 800ffbc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ffc0:	4859      	ldr	r0, [pc, #356]	@ (8010128 <_printf_i+0x238>)
 800ffc2:	230a      	movs	r3, #10
 800ffc4:	e011      	b.n	800ffea <_printf_i+0xfa>
 800ffc6:	6821      	ldr	r1, [r4, #0]
 800ffc8:	6833      	ldr	r3, [r6, #0]
 800ffca:	0608      	lsls	r0, r1, #24
 800ffcc:	f853 5b04 	ldr.w	r5, [r3], #4
 800ffd0:	d402      	bmi.n	800ffd8 <_printf_i+0xe8>
 800ffd2:	0649      	lsls	r1, r1, #25
 800ffd4:	bf48      	it	mi
 800ffd6:	b2ad      	uxthmi	r5, r5
 800ffd8:	2f6f      	cmp	r7, #111	@ 0x6f
 800ffda:	4853      	ldr	r0, [pc, #332]	@ (8010128 <_printf_i+0x238>)
 800ffdc:	6033      	str	r3, [r6, #0]
 800ffde:	bf14      	ite	ne
 800ffe0:	230a      	movne	r3, #10
 800ffe2:	2308      	moveq	r3, #8
 800ffe4:	2100      	movs	r1, #0
 800ffe6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ffea:	6866      	ldr	r6, [r4, #4]
 800ffec:	60a6      	str	r6, [r4, #8]
 800ffee:	2e00      	cmp	r6, #0
 800fff0:	bfa2      	ittt	ge
 800fff2:	6821      	ldrge	r1, [r4, #0]
 800fff4:	f021 0104 	bicge.w	r1, r1, #4
 800fff8:	6021      	strge	r1, [r4, #0]
 800fffa:	b90d      	cbnz	r5, 8010000 <_printf_i+0x110>
 800fffc:	2e00      	cmp	r6, #0
 800fffe:	d04b      	beq.n	8010098 <_printf_i+0x1a8>
 8010000:	4616      	mov	r6, r2
 8010002:	fbb5 f1f3 	udiv	r1, r5, r3
 8010006:	fb03 5711 	mls	r7, r3, r1, r5
 801000a:	5dc7      	ldrb	r7, [r0, r7]
 801000c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8010010:	462f      	mov	r7, r5
 8010012:	42bb      	cmp	r3, r7
 8010014:	460d      	mov	r5, r1
 8010016:	d9f4      	bls.n	8010002 <_printf_i+0x112>
 8010018:	2b08      	cmp	r3, #8
 801001a:	d10b      	bne.n	8010034 <_printf_i+0x144>
 801001c:	6823      	ldr	r3, [r4, #0]
 801001e:	07df      	lsls	r7, r3, #31
 8010020:	d508      	bpl.n	8010034 <_printf_i+0x144>
 8010022:	6923      	ldr	r3, [r4, #16]
 8010024:	6861      	ldr	r1, [r4, #4]
 8010026:	4299      	cmp	r1, r3
 8010028:	bfde      	ittt	le
 801002a:	2330      	movle	r3, #48	@ 0x30
 801002c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8010030:	f106 36ff 	addle.w	r6, r6, #4294967295
 8010034:	1b92      	subs	r2, r2, r6
 8010036:	6122      	str	r2, [r4, #16]
 8010038:	f8cd a000 	str.w	sl, [sp]
 801003c:	464b      	mov	r3, r9
 801003e:	aa03      	add	r2, sp, #12
 8010040:	4621      	mov	r1, r4
 8010042:	4640      	mov	r0, r8
 8010044:	f7ff fee6 	bl	800fe14 <_printf_common>
 8010048:	3001      	adds	r0, #1
 801004a:	d14a      	bne.n	80100e2 <_printf_i+0x1f2>
 801004c:	f04f 30ff 	mov.w	r0, #4294967295
 8010050:	b004      	add	sp, #16
 8010052:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010056:	6823      	ldr	r3, [r4, #0]
 8010058:	f043 0320 	orr.w	r3, r3, #32
 801005c:	6023      	str	r3, [r4, #0]
 801005e:	4833      	ldr	r0, [pc, #204]	@ (801012c <_printf_i+0x23c>)
 8010060:	2778      	movs	r7, #120	@ 0x78
 8010062:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8010066:	6823      	ldr	r3, [r4, #0]
 8010068:	6831      	ldr	r1, [r6, #0]
 801006a:	061f      	lsls	r7, r3, #24
 801006c:	f851 5b04 	ldr.w	r5, [r1], #4
 8010070:	d402      	bmi.n	8010078 <_printf_i+0x188>
 8010072:	065f      	lsls	r7, r3, #25
 8010074:	bf48      	it	mi
 8010076:	b2ad      	uxthmi	r5, r5
 8010078:	6031      	str	r1, [r6, #0]
 801007a:	07d9      	lsls	r1, r3, #31
 801007c:	bf44      	itt	mi
 801007e:	f043 0320 	orrmi.w	r3, r3, #32
 8010082:	6023      	strmi	r3, [r4, #0]
 8010084:	b11d      	cbz	r5, 801008e <_printf_i+0x19e>
 8010086:	2310      	movs	r3, #16
 8010088:	e7ac      	b.n	800ffe4 <_printf_i+0xf4>
 801008a:	4827      	ldr	r0, [pc, #156]	@ (8010128 <_printf_i+0x238>)
 801008c:	e7e9      	b.n	8010062 <_printf_i+0x172>
 801008e:	6823      	ldr	r3, [r4, #0]
 8010090:	f023 0320 	bic.w	r3, r3, #32
 8010094:	6023      	str	r3, [r4, #0]
 8010096:	e7f6      	b.n	8010086 <_printf_i+0x196>
 8010098:	4616      	mov	r6, r2
 801009a:	e7bd      	b.n	8010018 <_printf_i+0x128>
 801009c:	6833      	ldr	r3, [r6, #0]
 801009e:	6825      	ldr	r5, [r4, #0]
 80100a0:	6961      	ldr	r1, [r4, #20]
 80100a2:	1d18      	adds	r0, r3, #4
 80100a4:	6030      	str	r0, [r6, #0]
 80100a6:	062e      	lsls	r6, r5, #24
 80100a8:	681b      	ldr	r3, [r3, #0]
 80100aa:	d501      	bpl.n	80100b0 <_printf_i+0x1c0>
 80100ac:	6019      	str	r1, [r3, #0]
 80100ae:	e002      	b.n	80100b6 <_printf_i+0x1c6>
 80100b0:	0668      	lsls	r0, r5, #25
 80100b2:	d5fb      	bpl.n	80100ac <_printf_i+0x1bc>
 80100b4:	8019      	strh	r1, [r3, #0]
 80100b6:	2300      	movs	r3, #0
 80100b8:	6123      	str	r3, [r4, #16]
 80100ba:	4616      	mov	r6, r2
 80100bc:	e7bc      	b.n	8010038 <_printf_i+0x148>
 80100be:	6833      	ldr	r3, [r6, #0]
 80100c0:	1d1a      	adds	r2, r3, #4
 80100c2:	6032      	str	r2, [r6, #0]
 80100c4:	681e      	ldr	r6, [r3, #0]
 80100c6:	6862      	ldr	r2, [r4, #4]
 80100c8:	2100      	movs	r1, #0
 80100ca:	4630      	mov	r0, r6
 80100cc:	f7f0 f908 	bl	80002e0 <memchr>
 80100d0:	b108      	cbz	r0, 80100d6 <_printf_i+0x1e6>
 80100d2:	1b80      	subs	r0, r0, r6
 80100d4:	6060      	str	r0, [r4, #4]
 80100d6:	6863      	ldr	r3, [r4, #4]
 80100d8:	6123      	str	r3, [r4, #16]
 80100da:	2300      	movs	r3, #0
 80100dc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80100e0:	e7aa      	b.n	8010038 <_printf_i+0x148>
 80100e2:	6923      	ldr	r3, [r4, #16]
 80100e4:	4632      	mov	r2, r6
 80100e6:	4649      	mov	r1, r9
 80100e8:	4640      	mov	r0, r8
 80100ea:	47d0      	blx	sl
 80100ec:	3001      	adds	r0, #1
 80100ee:	d0ad      	beq.n	801004c <_printf_i+0x15c>
 80100f0:	6823      	ldr	r3, [r4, #0]
 80100f2:	079b      	lsls	r3, r3, #30
 80100f4:	d413      	bmi.n	801011e <_printf_i+0x22e>
 80100f6:	68e0      	ldr	r0, [r4, #12]
 80100f8:	9b03      	ldr	r3, [sp, #12]
 80100fa:	4298      	cmp	r0, r3
 80100fc:	bfb8      	it	lt
 80100fe:	4618      	movlt	r0, r3
 8010100:	e7a6      	b.n	8010050 <_printf_i+0x160>
 8010102:	2301      	movs	r3, #1
 8010104:	4632      	mov	r2, r6
 8010106:	4649      	mov	r1, r9
 8010108:	4640      	mov	r0, r8
 801010a:	47d0      	blx	sl
 801010c:	3001      	adds	r0, #1
 801010e:	d09d      	beq.n	801004c <_printf_i+0x15c>
 8010110:	3501      	adds	r5, #1
 8010112:	68e3      	ldr	r3, [r4, #12]
 8010114:	9903      	ldr	r1, [sp, #12]
 8010116:	1a5b      	subs	r3, r3, r1
 8010118:	42ab      	cmp	r3, r5
 801011a:	dcf2      	bgt.n	8010102 <_printf_i+0x212>
 801011c:	e7eb      	b.n	80100f6 <_printf_i+0x206>
 801011e:	2500      	movs	r5, #0
 8010120:	f104 0619 	add.w	r6, r4, #25
 8010124:	e7f5      	b.n	8010112 <_printf_i+0x222>
 8010126:	bf00      	nop
 8010128:	0801265e 	.word	0x0801265e
 801012c:	0801266f 	.word	0x0801266f

08010130 <std>:
 8010130:	2300      	movs	r3, #0
 8010132:	b510      	push	{r4, lr}
 8010134:	4604      	mov	r4, r0
 8010136:	e9c0 3300 	strd	r3, r3, [r0]
 801013a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801013e:	6083      	str	r3, [r0, #8]
 8010140:	8181      	strh	r1, [r0, #12]
 8010142:	6643      	str	r3, [r0, #100]	@ 0x64
 8010144:	81c2      	strh	r2, [r0, #14]
 8010146:	6183      	str	r3, [r0, #24]
 8010148:	4619      	mov	r1, r3
 801014a:	2208      	movs	r2, #8
 801014c:	305c      	adds	r0, #92	@ 0x5c
 801014e:	f000 f914 	bl	801037a <memset>
 8010152:	4b0d      	ldr	r3, [pc, #52]	@ (8010188 <std+0x58>)
 8010154:	6263      	str	r3, [r4, #36]	@ 0x24
 8010156:	4b0d      	ldr	r3, [pc, #52]	@ (801018c <std+0x5c>)
 8010158:	62a3      	str	r3, [r4, #40]	@ 0x28
 801015a:	4b0d      	ldr	r3, [pc, #52]	@ (8010190 <std+0x60>)
 801015c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801015e:	4b0d      	ldr	r3, [pc, #52]	@ (8010194 <std+0x64>)
 8010160:	6323      	str	r3, [r4, #48]	@ 0x30
 8010162:	4b0d      	ldr	r3, [pc, #52]	@ (8010198 <std+0x68>)
 8010164:	6224      	str	r4, [r4, #32]
 8010166:	429c      	cmp	r4, r3
 8010168:	d006      	beq.n	8010178 <std+0x48>
 801016a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801016e:	4294      	cmp	r4, r2
 8010170:	d002      	beq.n	8010178 <std+0x48>
 8010172:	33d0      	adds	r3, #208	@ 0xd0
 8010174:	429c      	cmp	r4, r3
 8010176:	d105      	bne.n	8010184 <std+0x54>
 8010178:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801017c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010180:	f000 b978 	b.w	8010474 <__retarget_lock_init_recursive>
 8010184:	bd10      	pop	{r4, pc}
 8010186:	bf00      	nop
 8010188:	080102f5 	.word	0x080102f5
 801018c:	08010317 	.word	0x08010317
 8010190:	0801034f 	.word	0x0801034f
 8010194:	08010373 	.word	0x08010373
 8010198:	24002460 	.word	0x24002460

0801019c <stdio_exit_handler>:
 801019c:	4a02      	ldr	r2, [pc, #8]	@ (80101a8 <stdio_exit_handler+0xc>)
 801019e:	4903      	ldr	r1, [pc, #12]	@ (80101ac <stdio_exit_handler+0x10>)
 80101a0:	4803      	ldr	r0, [pc, #12]	@ (80101b0 <stdio_exit_handler+0x14>)
 80101a2:	f000 b869 	b.w	8010278 <_fwalk_sglue>
 80101a6:	bf00      	nop
 80101a8:	24000138 	.word	0x24000138
 80101ac:	08011cf9 	.word	0x08011cf9
 80101b0:	24000148 	.word	0x24000148

080101b4 <cleanup_stdio>:
 80101b4:	6841      	ldr	r1, [r0, #4]
 80101b6:	4b0c      	ldr	r3, [pc, #48]	@ (80101e8 <cleanup_stdio+0x34>)
 80101b8:	4299      	cmp	r1, r3
 80101ba:	b510      	push	{r4, lr}
 80101bc:	4604      	mov	r4, r0
 80101be:	d001      	beq.n	80101c4 <cleanup_stdio+0x10>
 80101c0:	f001 fd9a 	bl	8011cf8 <_fflush_r>
 80101c4:	68a1      	ldr	r1, [r4, #8]
 80101c6:	4b09      	ldr	r3, [pc, #36]	@ (80101ec <cleanup_stdio+0x38>)
 80101c8:	4299      	cmp	r1, r3
 80101ca:	d002      	beq.n	80101d2 <cleanup_stdio+0x1e>
 80101cc:	4620      	mov	r0, r4
 80101ce:	f001 fd93 	bl	8011cf8 <_fflush_r>
 80101d2:	68e1      	ldr	r1, [r4, #12]
 80101d4:	4b06      	ldr	r3, [pc, #24]	@ (80101f0 <cleanup_stdio+0x3c>)
 80101d6:	4299      	cmp	r1, r3
 80101d8:	d004      	beq.n	80101e4 <cleanup_stdio+0x30>
 80101da:	4620      	mov	r0, r4
 80101dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80101e0:	f001 bd8a 	b.w	8011cf8 <_fflush_r>
 80101e4:	bd10      	pop	{r4, pc}
 80101e6:	bf00      	nop
 80101e8:	24002460 	.word	0x24002460
 80101ec:	240024c8 	.word	0x240024c8
 80101f0:	24002530 	.word	0x24002530

080101f4 <global_stdio_init.part.0>:
 80101f4:	b510      	push	{r4, lr}
 80101f6:	4b0b      	ldr	r3, [pc, #44]	@ (8010224 <global_stdio_init.part.0+0x30>)
 80101f8:	4c0b      	ldr	r4, [pc, #44]	@ (8010228 <global_stdio_init.part.0+0x34>)
 80101fa:	4a0c      	ldr	r2, [pc, #48]	@ (801022c <global_stdio_init.part.0+0x38>)
 80101fc:	601a      	str	r2, [r3, #0]
 80101fe:	4620      	mov	r0, r4
 8010200:	2200      	movs	r2, #0
 8010202:	2104      	movs	r1, #4
 8010204:	f7ff ff94 	bl	8010130 <std>
 8010208:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801020c:	2201      	movs	r2, #1
 801020e:	2109      	movs	r1, #9
 8010210:	f7ff ff8e 	bl	8010130 <std>
 8010214:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8010218:	2202      	movs	r2, #2
 801021a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801021e:	2112      	movs	r1, #18
 8010220:	f7ff bf86 	b.w	8010130 <std>
 8010224:	24002598 	.word	0x24002598
 8010228:	24002460 	.word	0x24002460
 801022c:	0801019d 	.word	0x0801019d

08010230 <__sfp_lock_acquire>:
 8010230:	4801      	ldr	r0, [pc, #4]	@ (8010238 <__sfp_lock_acquire+0x8>)
 8010232:	f000 b920 	b.w	8010476 <__retarget_lock_acquire_recursive>
 8010236:	bf00      	nop
 8010238:	240025a1 	.word	0x240025a1

0801023c <__sfp_lock_release>:
 801023c:	4801      	ldr	r0, [pc, #4]	@ (8010244 <__sfp_lock_release+0x8>)
 801023e:	f000 b91b 	b.w	8010478 <__retarget_lock_release_recursive>
 8010242:	bf00      	nop
 8010244:	240025a1 	.word	0x240025a1

08010248 <__sinit>:
 8010248:	b510      	push	{r4, lr}
 801024a:	4604      	mov	r4, r0
 801024c:	f7ff fff0 	bl	8010230 <__sfp_lock_acquire>
 8010250:	6a23      	ldr	r3, [r4, #32]
 8010252:	b11b      	cbz	r3, 801025c <__sinit+0x14>
 8010254:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010258:	f7ff bff0 	b.w	801023c <__sfp_lock_release>
 801025c:	4b04      	ldr	r3, [pc, #16]	@ (8010270 <__sinit+0x28>)
 801025e:	6223      	str	r3, [r4, #32]
 8010260:	4b04      	ldr	r3, [pc, #16]	@ (8010274 <__sinit+0x2c>)
 8010262:	681b      	ldr	r3, [r3, #0]
 8010264:	2b00      	cmp	r3, #0
 8010266:	d1f5      	bne.n	8010254 <__sinit+0xc>
 8010268:	f7ff ffc4 	bl	80101f4 <global_stdio_init.part.0>
 801026c:	e7f2      	b.n	8010254 <__sinit+0xc>
 801026e:	bf00      	nop
 8010270:	080101b5 	.word	0x080101b5
 8010274:	24002598 	.word	0x24002598

08010278 <_fwalk_sglue>:
 8010278:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801027c:	4607      	mov	r7, r0
 801027e:	4688      	mov	r8, r1
 8010280:	4614      	mov	r4, r2
 8010282:	2600      	movs	r6, #0
 8010284:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010288:	f1b9 0901 	subs.w	r9, r9, #1
 801028c:	d505      	bpl.n	801029a <_fwalk_sglue+0x22>
 801028e:	6824      	ldr	r4, [r4, #0]
 8010290:	2c00      	cmp	r4, #0
 8010292:	d1f7      	bne.n	8010284 <_fwalk_sglue+0xc>
 8010294:	4630      	mov	r0, r6
 8010296:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801029a:	89ab      	ldrh	r3, [r5, #12]
 801029c:	2b01      	cmp	r3, #1
 801029e:	d907      	bls.n	80102b0 <_fwalk_sglue+0x38>
 80102a0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80102a4:	3301      	adds	r3, #1
 80102a6:	d003      	beq.n	80102b0 <_fwalk_sglue+0x38>
 80102a8:	4629      	mov	r1, r5
 80102aa:	4638      	mov	r0, r7
 80102ac:	47c0      	blx	r8
 80102ae:	4306      	orrs	r6, r0
 80102b0:	3568      	adds	r5, #104	@ 0x68
 80102b2:	e7e9      	b.n	8010288 <_fwalk_sglue+0x10>

080102b4 <siprintf>:
 80102b4:	b40e      	push	{r1, r2, r3}
 80102b6:	b500      	push	{lr}
 80102b8:	b09c      	sub	sp, #112	@ 0x70
 80102ba:	ab1d      	add	r3, sp, #116	@ 0x74
 80102bc:	9002      	str	r0, [sp, #8]
 80102be:	9006      	str	r0, [sp, #24]
 80102c0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80102c4:	4809      	ldr	r0, [pc, #36]	@ (80102ec <siprintf+0x38>)
 80102c6:	9107      	str	r1, [sp, #28]
 80102c8:	9104      	str	r1, [sp, #16]
 80102ca:	4909      	ldr	r1, [pc, #36]	@ (80102f0 <siprintf+0x3c>)
 80102cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80102d0:	9105      	str	r1, [sp, #20]
 80102d2:	6800      	ldr	r0, [r0, #0]
 80102d4:	9301      	str	r3, [sp, #4]
 80102d6:	a902      	add	r1, sp, #8
 80102d8:	f001 fb8e 	bl	80119f8 <_svfiprintf_r>
 80102dc:	9b02      	ldr	r3, [sp, #8]
 80102de:	2200      	movs	r2, #0
 80102e0:	701a      	strb	r2, [r3, #0]
 80102e2:	b01c      	add	sp, #112	@ 0x70
 80102e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80102e8:	b003      	add	sp, #12
 80102ea:	4770      	bx	lr
 80102ec:	24000144 	.word	0x24000144
 80102f0:	ffff0208 	.word	0xffff0208

080102f4 <__sread>:
 80102f4:	b510      	push	{r4, lr}
 80102f6:	460c      	mov	r4, r1
 80102f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80102fc:	f000 f86c 	bl	80103d8 <_read_r>
 8010300:	2800      	cmp	r0, #0
 8010302:	bfab      	itete	ge
 8010304:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8010306:	89a3      	ldrhlt	r3, [r4, #12]
 8010308:	181b      	addge	r3, r3, r0
 801030a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801030e:	bfac      	ite	ge
 8010310:	6563      	strge	r3, [r4, #84]	@ 0x54
 8010312:	81a3      	strhlt	r3, [r4, #12]
 8010314:	bd10      	pop	{r4, pc}

08010316 <__swrite>:
 8010316:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801031a:	461f      	mov	r7, r3
 801031c:	898b      	ldrh	r3, [r1, #12]
 801031e:	05db      	lsls	r3, r3, #23
 8010320:	4605      	mov	r5, r0
 8010322:	460c      	mov	r4, r1
 8010324:	4616      	mov	r6, r2
 8010326:	d505      	bpl.n	8010334 <__swrite+0x1e>
 8010328:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801032c:	2302      	movs	r3, #2
 801032e:	2200      	movs	r2, #0
 8010330:	f000 f840 	bl	80103b4 <_lseek_r>
 8010334:	89a3      	ldrh	r3, [r4, #12]
 8010336:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801033a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801033e:	81a3      	strh	r3, [r4, #12]
 8010340:	4632      	mov	r2, r6
 8010342:	463b      	mov	r3, r7
 8010344:	4628      	mov	r0, r5
 8010346:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801034a:	f000 b857 	b.w	80103fc <_write_r>

0801034e <__sseek>:
 801034e:	b510      	push	{r4, lr}
 8010350:	460c      	mov	r4, r1
 8010352:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010356:	f000 f82d 	bl	80103b4 <_lseek_r>
 801035a:	1c43      	adds	r3, r0, #1
 801035c:	89a3      	ldrh	r3, [r4, #12]
 801035e:	bf15      	itete	ne
 8010360:	6560      	strne	r0, [r4, #84]	@ 0x54
 8010362:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8010366:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801036a:	81a3      	strheq	r3, [r4, #12]
 801036c:	bf18      	it	ne
 801036e:	81a3      	strhne	r3, [r4, #12]
 8010370:	bd10      	pop	{r4, pc}

08010372 <__sclose>:
 8010372:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010376:	f000 b80d 	b.w	8010394 <_close_r>

0801037a <memset>:
 801037a:	4402      	add	r2, r0
 801037c:	4603      	mov	r3, r0
 801037e:	4293      	cmp	r3, r2
 8010380:	d100      	bne.n	8010384 <memset+0xa>
 8010382:	4770      	bx	lr
 8010384:	f803 1b01 	strb.w	r1, [r3], #1
 8010388:	e7f9      	b.n	801037e <memset+0x4>
	...

0801038c <_localeconv_r>:
 801038c:	4800      	ldr	r0, [pc, #0]	@ (8010390 <_localeconv_r+0x4>)
 801038e:	4770      	bx	lr
 8010390:	24000284 	.word	0x24000284

08010394 <_close_r>:
 8010394:	b538      	push	{r3, r4, r5, lr}
 8010396:	4d06      	ldr	r5, [pc, #24]	@ (80103b0 <_close_r+0x1c>)
 8010398:	2300      	movs	r3, #0
 801039a:	4604      	mov	r4, r0
 801039c:	4608      	mov	r0, r1
 801039e:	602b      	str	r3, [r5, #0]
 80103a0:	f7f1 f9b8 	bl	8001714 <_close>
 80103a4:	1c43      	adds	r3, r0, #1
 80103a6:	d102      	bne.n	80103ae <_close_r+0x1a>
 80103a8:	682b      	ldr	r3, [r5, #0]
 80103aa:	b103      	cbz	r3, 80103ae <_close_r+0x1a>
 80103ac:	6023      	str	r3, [r4, #0]
 80103ae:	bd38      	pop	{r3, r4, r5, pc}
 80103b0:	2400259c 	.word	0x2400259c

080103b4 <_lseek_r>:
 80103b4:	b538      	push	{r3, r4, r5, lr}
 80103b6:	4d07      	ldr	r5, [pc, #28]	@ (80103d4 <_lseek_r+0x20>)
 80103b8:	4604      	mov	r4, r0
 80103ba:	4608      	mov	r0, r1
 80103bc:	4611      	mov	r1, r2
 80103be:	2200      	movs	r2, #0
 80103c0:	602a      	str	r2, [r5, #0]
 80103c2:	461a      	mov	r2, r3
 80103c4:	f7f1 f9cd 	bl	8001762 <_lseek>
 80103c8:	1c43      	adds	r3, r0, #1
 80103ca:	d102      	bne.n	80103d2 <_lseek_r+0x1e>
 80103cc:	682b      	ldr	r3, [r5, #0]
 80103ce:	b103      	cbz	r3, 80103d2 <_lseek_r+0x1e>
 80103d0:	6023      	str	r3, [r4, #0]
 80103d2:	bd38      	pop	{r3, r4, r5, pc}
 80103d4:	2400259c 	.word	0x2400259c

080103d8 <_read_r>:
 80103d8:	b538      	push	{r3, r4, r5, lr}
 80103da:	4d07      	ldr	r5, [pc, #28]	@ (80103f8 <_read_r+0x20>)
 80103dc:	4604      	mov	r4, r0
 80103de:	4608      	mov	r0, r1
 80103e0:	4611      	mov	r1, r2
 80103e2:	2200      	movs	r2, #0
 80103e4:	602a      	str	r2, [r5, #0]
 80103e6:	461a      	mov	r2, r3
 80103e8:	f7f1 f95b 	bl	80016a2 <_read>
 80103ec:	1c43      	adds	r3, r0, #1
 80103ee:	d102      	bne.n	80103f6 <_read_r+0x1e>
 80103f0:	682b      	ldr	r3, [r5, #0]
 80103f2:	b103      	cbz	r3, 80103f6 <_read_r+0x1e>
 80103f4:	6023      	str	r3, [r4, #0]
 80103f6:	bd38      	pop	{r3, r4, r5, pc}
 80103f8:	2400259c 	.word	0x2400259c

080103fc <_write_r>:
 80103fc:	b538      	push	{r3, r4, r5, lr}
 80103fe:	4d07      	ldr	r5, [pc, #28]	@ (801041c <_write_r+0x20>)
 8010400:	4604      	mov	r4, r0
 8010402:	4608      	mov	r0, r1
 8010404:	4611      	mov	r1, r2
 8010406:	2200      	movs	r2, #0
 8010408:	602a      	str	r2, [r5, #0]
 801040a:	461a      	mov	r2, r3
 801040c:	f7f1 f966 	bl	80016dc <_write>
 8010410:	1c43      	adds	r3, r0, #1
 8010412:	d102      	bne.n	801041a <_write_r+0x1e>
 8010414:	682b      	ldr	r3, [r5, #0]
 8010416:	b103      	cbz	r3, 801041a <_write_r+0x1e>
 8010418:	6023      	str	r3, [r4, #0]
 801041a:	bd38      	pop	{r3, r4, r5, pc}
 801041c:	2400259c 	.word	0x2400259c

08010420 <__errno>:
 8010420:	4b01      	ldr	r3, [pc, #4]	@ (8010428 <__errno+0x8>)
 8010422:	6818      	ldr	r0, [r3, #0]
 8010424:	4770      	bx	lr
 8010426:	bf00      	nop
 8010428:	24000144 	.word	0x24000144

0801042c <__libc_init_array>:
 801042c:	b570      	push	{r4, r5, r6, lr}
 801042e:	4d0d      	ldr	r5, [pc, #52]	@ (8010464 <__libc_init_array+0x38>)
 8010430:	4c0d      	ldr	r4, [pc, #52]	@ (8010468 <__libc_init_array+0x3c>)
 8010432:	1b64      	subs	r4, r4, r5
 8010434:	10a4      	asrs	r4, r4, #2
 8010436:	2600      	movs	r6, #0
 8010438:	42a6      	cmp	r6, r4
 801043a:	d109      	bne.n	8010450 <__libc_init_array+0x24>
 801043c:	4d0b      	ldr	r5, [pc, #44]	@ (801046c <__libc_init_array+0x40>)
 801043e:	4c0c      	ldr	r4, [pc, #48]	@ (8010470 <__libc_init_array+0x44>)
 8010440:	f002 f8b2 	bl	80125a8 <_init>
 8010444:	1b64      	subs	r4, r4, r5
 8010446:	10a4      	asrs	r4, r4, #2
 8010448:	2600      	movs	r6, #0
 801044a:	42a6      	cmp	r6, r4
 801044c:	d105      	bne.n	801045a <__libc_init_array+0x2e>
 801044e:	bd70      	pop	{r4, r5, r6, pc}
 8010450:	f855 3b04 	ldr.w	r3, [r5], #4
 8010454:	4798      	blx	r3
 8010456:	3601      	adds	r6, #1
 8010458:	e7ee      	b.n	8010438 <__libc_init_array+0xc>
 801045a:	f855 3b04 	ldr.w	r3, [r5], #4
 801045e:	4798      	blx	r3
 8010460:	3601      	adds	r6, #1
 8010462:	e7f2      	b.n	801044a <__libc_init_array+0x1e>
 8010464:	080129d0 	.word	0x080129d0
 8010468:	080129d0 	.word	0x080129d0
 801046c:	080129d0 	.word	0x080129d0
 8010470:	080129d4 	.word	0x080129d4

08010474 <__retarget_lock_init_recursive>:
 8010474:	4770      	bx	lr

08010476 <__retarget_lock_acquire_recursive>:
 8010476:	4770      	bx	lr

08010478 <__retarget_lock_release_recursive>:
 8010478:	4770      	bx	lr

0801047a <quorem>:
 801047a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801047e:	6903      	ldr	r3, [r0, #16]
 8010480:	690c      	ldr	r4, [r1, #16]
 8010482:	42a3      	cmp	r3, r4
 8010484:	4607      	mov	r7, r0
 8010486:	db7e      	blt.n	8010586 <quorem+0x10c>
 8010488:	3c01      	subs	r4, #1
 801048a:	f101 0814 	add.w	r8, r1, #20
 801048e:	00a3      	lsls	r3, r4, #2
 8010490:	f100 0514 	add.w	r5, r0, #20
 8010494:	9300      	str	r3, [sp, #0]
 8010496:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801049a:	9301      	str	r3, [sp, #4]
 801049c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80104a0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80104a4:	3301      	adds	r3, #1
 80104a6:	429a      	cmp	r2, r3
 80104a8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80104ac:	fbb2 f6f3 	udiv	r6, r2, r3
 80104b0:	d32e      	bcc.n	8010510 <quorem+0x96>
 80104b2:	f04f 0a00 	mov.w	sl, #0
 80104b6:	46c4      	mov	ip, r8
 80104b8:	46ae      	mov	lr, r5
 80104ba:	46d3      	mov	fp, sl
 80104bc:	f85c 3b04 	ldr.w	r3, [ip], #4
 80104c0:	b298      	uxth	r0, r3
 80104c2:	fb06 a000 	mla	r0, r6, r0, sl
 80104c6:	0c02      	lsrs	r2, r0, #16
 80104c8:	0c1b      	lsrs	r3, r3, #16
 80104ca:	fb06 2303 	mla	r3, r6, r3, r2
 80104ce:	f8de 2000 	ldr.w	r2, [lr]
 80104d2:	b280      	uxth	r0, r0
 80104d4:	b292      	uxth	r2, r2
 80104d6:	1a12      	subs	r2, r2, r0
 80104d8:	445a      	add	r2, fp
 80104da:	f8de 0000 	ldr.w	r0, [lr]
 80104de:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80104e2:	b29b      	uxth	r3, r3
 80104e4:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80104e8:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80104ec:	b292      	uxth	r2, r2
 80104ee:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80104f2:	45e1      	cmp	r9, ip
 80104f4:	f84e 2b04 	str.w	r2, [lr], #4
 80104f8:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80104fc:	d2de      	bcs.n	80104bc <quorem+0x42>
 80104fe:	9b00      	ldr	r3, [sp, #0]
 8010500:	58eb      	ldr	r3, [r5, r3]
 8010502:	b92b      	cbnz	r3, 8010510 <quorem+0x96>
 8010504:	9b01      	ldr	r3, [sp, #4]
 8010506:	3b04      	subs	r3, #4
 8010508:	429d      	cmp	r5, r3
 801050a:	461a      	mov	r2, r3
 801050c:	d32f      	bcc.n	801056e <quorem+0xf4>
 801050e:	613c      	str	r4, [r7, #16]
 8010510:	4638      	mov	r0, r7
 8010512:	f001 f90d 	bl	8011730 <__mcmp>
 8010516:	2800      	cmp	r0, #0
 8010518:	db25      	blt.n	8010566 <quorem+0xec>
 801051a:	4629      	mov	r1, r5
 801051c:	2000      	movs	r0, #0
 801051e:	f858 2b04 	ldr.w	r2, [r8], #4
 8010522:	f8d1 c000 	ldr.w	ip, [r1]
 8010526:	fa1f fe82 	uxth.w	lr, r2
 801052a:	fa1f f38c 	uxth.w	r3, ip
 801052e:	eba3 030e 	sub.w	r3, r3, lr
 8010532:	4403      	add	r3, r0
 8010534:	0c12      	lsrs	r2, r2, #16
 8010536:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 801053a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 801053e:	b29b      	uxth	r3, r3
 8010540:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010544:	45c1      	cmp	r9, r8
 8010546:	f841 3b04 	str.w	r3, [r1], #4
 801054a:	ea4f 4022 	mov.w	r0, r2, asr #16
 801054e:	d2e6      	bcs.n	801051e <quorem+0xa4>
 8010550:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010554:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010558:	b922      	cbnz	r2, 8010564 <quorem+0xea>
 801055a:	3b04      	subs	r3, #4
 801055c:	429d      	cmp	r5, r3
 801055e:	461a      	mov	r2, r3
 8010560:	d30b      	bcc.n	801057a <quorem+0x100>
 8010562:	613c      	str	r4, [r7, #16]
 8010564:	3601      	adds	r6, #1
 8010566:	4630      	mov	r0, r6
 8010568:	b003      	add	sp, #12
 801056a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801056e:	6812      	ldr	r2, [r2, #0]
 8010570:	3b04      	subs	r3, #4
 8010572:	2a00      	cmp	r2, #0
 8010574:	d1cb      	bne.n	801050e <quorem+0x94>
 8010576:	3c01      	subs	r4, #1
 8010578:	e7c6      	b.n	8010508 <quorem+0x8e>
 801057a:	6812      	ldr	r2, [r2, #0]
 801057c:	3b04      	subs	r3, #4
 801057e:	2a00      	cmp	r2, #0
 8010580:	d1ef      	bne.n	8010562 <quorem+0xe8>
 8010582:	3c01      	subs	r4, #1
 8010584:	e7ea      	b.n	801055c <quorem+0xe2>
 8010586:	2000      	movs	r0, #0
 8010588:	e7ee      	b.n	8010568 <quorem+0xee>
 801058a:	0000      	movs	r0, r0
 801058c:	0000      	movs	r0, r0
	...

08010590 <_dtoa_r>:
 8010590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010594:	ed2d 8b02 	vpush	{d8}
 8010598:	69c7      	ldr	r7, [r0, #28]
 801059a:	b091      	sub	sp, #68	@ 0x44
 801059c:	ed8d 0b02 	vstr	d0, [sp, #8]
 80105a0:	ec55 4b10 	vmov	r4, r5, d0
 80105a4:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 80105a6:	9107      	str	r1, [sp, #28]
 80105a8:	4681      	mov	r9, r0
 80105aa:	9209      	str	r2, [sp, #36]	@ 0x24
 80105ac:	930d      	str	r3, [sp, #52]	@ 0x34
 80105ae:	b97f      	cbnz	r7, 80105d0 <_dtoa_r+0x40>
 80105b0:	2010      	movs	r0, #16
 80105b2:	f000 fd8d 	bl	80110d0 <malloc>
 80105b6:	4602      	mov	r2, r0
 80105b8:	f8c9 001c 	str.w	r0, [r9, #28]
 80105bc:	b920      	cbnz	r0, 80105c8 <_dtoa_r+0x38>
 80105be:	4ba0      	ldr	r3, [pc, #640]	@ (8010840 <_dtoa_r+0x2b0>)
 80105c0:	21ef      	movs	r1, #239	@ 0xef
 80105c2:	48a0      	ldr	r0, [pc, #640]	@ (8010844 <_dtoa_r+0x2b4>)
 80105c4:	f001 fbf8 	bl	8011db8 <__assert_func>
 80105c8:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80105cc:	6007      	str	r7, [r0, #0]
 80105ce:	60c7      	str	r7, [r0, #12]
 80105d0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80105d4:	6819      	ldr	r1, [r3, #0]
 80105d6:	b159      	cbz	r1, 80105f0 <_dtoa_r+0x60>
 80105d8:	685a      	ldr	r2, [r3, #4]
 80105da:	604a      	str	r2, [r1, #4]
 80105dc:	2301      	movs	r3, #1
 80105de:	4093      	lsls	r3, r2
 80105e0:	608b      	str	r3, [r1, #8]
 80105e2:	4648      	mov	r0, r9
 80105e4:	f000 fe6a 	bl	80112bc <_Bfree>
 80105e8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80105ec:	2200      	movs	r2, #0
 80105ee:	601a      	str	r2, [r3, #0]
 80105f0:	1e2b      	subs	r3, r5, #0
 80105f2:	bfbb      	ittet	lt
 80105f4:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80105f8:	9303      	strlt	r3, [sp, #12]
 80105fa:	2300      	movge	r3, #0
 80105fc:	2201      	movlt	r2, #1
 80105fe:	bfac      	ite	ge
 8010600:	6033      	strge	r3, [r6, #0]
 8010602:	6032      	strlt	r2, [r6, #0]
 8010604:	4b90      	ldr	r3, [pc, #576]	@ (8010848 <_dtoa_r+0x2b8>)
 8010606:	9e03      	ldr	r6, [sp, #12]
 8010608:	43b3      	bics	r3, r6
 801060a:	d110      	bne.n	801062e <_dtoa_r+0x9e>
 801060c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801060e:	f242 730f 	movw	r3, #9999	@ 0x270f
 8010612:	6013      	str	r3, [r2, #0]
 8010614:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8010618:	4323      	orrs	r3, r4
 801061a:	f000 84de 	beq.w	8010fda <_dtoa_r+0xa4a>
 801061e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8010620:	4f8a      	ldr	r7, [pc, #552]	@ (801084c <_dtoa_r+0x2bc>)
 8010622:	2b00      	cmp	r3, #0
 8010624:	f000 84e0 	beq.w	8010fe8 <_dtoa_r+0xa58>
 8010628:	1cfb      	adds	r3, r7, #3
 801062a:	f000 bcdb 	b.w	8010fe4 <_dtoa_r+0xa54>
 801062e:	ed9d 8b02 	vldr	d8, [sp, #8]
 8010632:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8010636:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801063a:	d10a      	bne.n	8010652 <_dtoa_r+0xc2>
 801063c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801063e:	2301      	movs	r3, #1
 8010640:	6013      	str	r3, [r2, #0]
 8010642:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8010644:	b113      	cbz	r3, 801064c <_dtoa_r+0xbc>
 8010646:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8010648:	4b81      	ldr	r3, [pc, #516]	@ (8010850 <_dtoa_r+0x2c0>)
 801064a:	6013      	str	r3, [r2, #0]
 801064c:	4f81      	ldr	r7, [pc, #516]	@ (8010854 <_dtoa_r+0x2c4>)
 801064e:	f000 bccb 	b.w	8010fe8 <_dtoa_r+0xa58>
 8010652:	aa0e      	add	r2, sp, #56	@ 0x38
 8010654:	a90f      	add	r1, sp, #60	@ 0x3c
 8010656:	4648      	mov	r0, r9
 8010658:	eeb0 0b48 	vmov.f64	d0, d8
 801065c:	f001 f918 	bl	8011890 <__d2b>
 8010660:	f3c6 530a 	ubfx	r3, r6, #20, #11
 8010664:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010666:	9001      	str	r0, [sp, #4]
 8010668:	2b00      	cmp	r3, #0
 801066a:	d045      	beq.n	80106f8 <_dtoa_r+0x168>
 801066c:	eeb0 7b48 	vmov.f64	d7, d8
 8010670:	ee18 1a90 	vmov	r1, s17
 8010674:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8010678:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 801067c:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8010680:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8010684:	2500      	movs	r5, #0
 8010686:	ee07 1a90 	vmov	s15, r1
 801068a:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 801068e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8010828 <_dtoa_r+0x298>
 8010692:	ee37 7b46 	vsub.f64	d7, d7, d6
 8010696:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8010830 <_dtoa_r+0x2a0>
 801069a:	eea7 6b05 	vfma.f64	d6, d7, d5
 801069e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8010838 <_dtoa_r+0x2a8>
 80106a2:	ee07 3a90 	vmov	s15, r3
 80106a6:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 80106aa:	eeb0 7b46 	vmov.f64	d7, d6
 80106ae:	eea4 7b05 	vfma.f64	d7, d4, d5
 80106b2:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 80106b6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80106ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80106be:	ee16 8a90 	vmov	r8, s13
 80106c2:	d508      	bpl.n	80106d6 <_dtoa_r+0x146>
 80106c4:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80106c8:	eeb4 6b47 	vcmp.f64	d6, d7
 80106cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80106d0:	bf18      	it	ne
 80106d2:	f108 38ff 	addne.w	r8, r8, #4294967295
 80106d6:	f1b8 0f16 	cmp.w	r8, #22
 80106da:	d82b      	bhi.n	8010734 <_dtoa_r+0x1a4>
 80106dc:	495e      	ldr	r1, [pc, #376]	@ (8010858 <_dtoa_r+0x2c8>)
 80106de:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 80106e2:	ed91 7b00 	vldr	d7, [r1]
 80106e6:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80106ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80106ee:	d501      	bpl.n	80106f4 <_dtoa_r+0x164>
 80106f0:	f108 38ff 	add.w	r8, r8, #4294967295
 80106f4:	2100      	movs	r1, #0
 80106f6:	e01e      	b.n	8010736 <_dtoa_r+0x1a6>
 80106f8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80106fa:	4413      	add	r3, r2
 80106fc:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8010700:	2920      	cmp	r1, #32
 8010702:	bfc1      	itttt	gt
 8010704:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8010708:	408e      	lslgt	r6, r1
 801070a:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 801070e:	fa24 f101 	lsrgt.w	r1, r4, r1
 8010712:	bfd6      	itet	le
 8010714:	f1c1 0120 	rsble	r1, r1, #32
 8010718:	4331      	orrgt	r1, r6
 801071a:	fa04 f101 	lslle.w	r1, r4, r1
 801071e:	ee07 1a90 	vmov	s15, r1
 8010722:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8010726:	3b01      	subs	r3, #1
 8010728:	ee17 1a90 	vmov	r1, s15
 801072c:	2501      	movs	r5, #1
 801072e:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 8010732:	e7a8      	b.n	8010686 <_dtoa_r+0xf6>
 8010734:	2101      	movs	r1, #1
 8010736:	1ad2      	subs	r2, r2, r3
 8010738:	1e53      	subs	r3, r2, #1
 801073a:	9306      	str	r3, [sp, #24]
 801073c:	bf45      	ittet	mi
 801073e:	f1c2 0301 	rsbmi	r3, r2, #1
 8010742:	9305      	strmi	r3, [sp, #20]
 8010744:	2300      	movpl	r3, #0
 8010746:	2300      	movmi	r3, #0
 8010748:	bf4c      	ite	mi
 801074a:	9306      	strmi	r3, [sp, #24]
 801074c:	9305      	strpl	r3, [sp, #20]
 801074e:	f1b8 0f00 	cmp.w	r8, #0
 8010752:	910c      	str	r1, [sp, #48]	@ 0x30
 8010754:	db18      	blt.n	8010788 <_dtoa_r+0x1f8>
 8010756:	9b06      	ldr	r3, [sp, #24]
 8010758:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 801075c:	4443      	add	r3, r8
 801075e:	9306      	str	r3, [sp, #24]
 8010760:	2300      	movs	r3, #0
 8010762:	9a07      	ldr	r2, [sp, #28]
 8010764:	2a09      	cmp	r2, #9
 8010766:	d849      	bhi.n	80107fc <_dtoa_r+0x26c>
 8010768:	2a05      	cmp	r2, #5
 801076a:	bfc4      	itt	gt
 801076c:	3a04      	subgt	r2, #4
 801076e:	9207      	strgt	r2, [sp, #28]
 8010770:	9a07      	ldr	r2, [sp, #28]
 8010772:	f1a2 0202 	sub.w	r2, r2, #2
 8010776:	bfcc      	ite	gt
 8010778:	2400      	movgt	r4, #0
 801077a:	2401      	movle	r4, #1
 801077c:	2a03      	cmp	r2, #3
 801077e:	d848      	bhi.n	8010812 <_dtoa_r+0x282>
 8010780:	e8df f002 	tbb	[pc, r2]
 8010784:	3a2c2e0b 	.word	0x3a2c2e0b
 8010788:	9b05      	ldr	r3, [sp, #20]
 801078a:	2200      	movs	r2, #0
 801078c:	eba3 0308 	sub.w	r3, r3, r8
 8010790:	9305      	str	r3, [sp, #20]
 8010792:	920a      	str	r2, [sp, #40]	@ 0x28
 8010794:	f1c8 0300 	rsb	r3, r8, #0
 8010798:	e7e3      	b.n	8010762 <_dtoa_r+0x1d2>
 801079a:	2200      	movs	r2, #0
 801079c:	9208      	str	r2, [sp, #32]
 801079e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80107a0:	2a00      	cmp	r2, #0
 80107a2:	dc39      	bgt.n	8010818 <_dtoa_r+0x288>
 80107a4:	f04f 0b01 	mov.w	fp, #1
 80107a8:	46da      	mov	sl, fp
 80107aa:	465a      	mov	r2, fp
 80107ac:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 80107b0:	f8d9 701c 	ldr.w	r7, [r9, #28]
 80107b4:	2100      	movs	r1, #0
 80107b6:	2004      	movs	r0, #4
 80107b8:	f100 0614 	add.w	r6, r0, #20
 80107bc:	4296      	cmp	r6, r2
 80107be:	d930      	bls.n	8010822 <_dtoa_r+0x292>
 80107c0:	6079      	str	r1, [r7, #4]
 80107c2:	4648      	mov	r0, r9
 80107c4:	9304      	str	r3, [sp, #16]
 80107c6:	f000 fd39 	bl	801123c <_Balloc>
 80107ca:	9b04      	ldr	r3, [sp, #16]
 80107cc:	4607      	mov	r7, r0
 80107ce:	2800      	cmp	r0, #0
 80107d0:	d146      	bne.n	8010860 <_dtoa_r+0x2d0>
 80107d2:	4b22      	ldr	r3, [pc, #136]	@ (801085c <_dtoa_r+0x2cc>)
 80107d4:	4602      	mov	r2, r0
 80107d6:	f240 11af 	movw	r1, #431	@ 0x1af
 80107da:	e6f2      	b.n	80105c2 <_dtoa_r+0x32>
 80107dc:	2201      	movs	r2, #1
 80107de:	e7dd      	b.n	801079c <_dtoa_r+0x20c>
 80107e0:	2200      	movs	r2, #0
 80107e2:	9208      	str	r2, [sp, #32]
 80107e4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80107e6:	eb08 0b02 	add.w	fp, r8, r2
 80107ea:	f10b 0a01 	add.w	sl, fp, #1
 80107ee:	4652      	mov	r2, sl
 80107f0:	2a01      	cmp	r2, #1
 80107f2:	bfb8      	it	lt
 80107f4:	2201      	movlt	r2, #1
 80107f6:	e7db      	b.n	80107b0 <_dtoa_r+0x220>
 80107f8:	2201      	movs	r2, #1
 80107fa:	e7f2      	b.n	80107e2 <_dtoa_r+0x252>
 80107fc:	2401      	movs	r4, #1
 80107fe:	2200      	movs	r2, #0
 8010800:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8010804:	f04f 3bff 	mov.w	fp, #4294967295
 8010808:	2100      	movs	r1, #0
 801080a:	46da      	mov	sl, fp
 801080c:	2212      	movs	r2, #18
 801080e:	9109      	str	r1, [sp, #36]	@ 0x24
 8010810:	e7ce      	b.n	80107b0 <_dtoa_r+0x220>
 8010812:	2201      	movs	r2, #1
 8010814:	9208      	str	r2, [sp, #32]
 8010816:	e7f5      	b.n	8010804 <_dtoa_r+0x274>
 8010818:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 801081c:	46da      	mov	sl, fp
 801081e:	465a      	mov	r2, fp
 8010820:	e7c6      	b.n	80107b0 <_dtoa_r+0x220>
 8010822:	3101      	adds	r1, #1
 8010824:	0040      	lsls	r0, r0, #1
 8010826:	e7c7      	b.n	80107b8 <_dtoa_r+0x228>
 8010828:	636f4361 	.word	0x636f4361
 801082c:	3fd287a7 	.word	0x3fd287a7
 8010830:	8b60c8b3 	.word	0x8b60c8b3
 8010834:	3fc68a28 	.word	0x3fc68a28
 8010838:	509f79fb 	.word	0x509f79fb
 801083c:	3fd34413 	.word	0x3fd34413
 8010840:	0801268d 	.word	0x0801268d
 8010844:	080126a4 	.word	0x080126a4
 8010848:	7ff00000 	.word	0x7ff00000
 801084c:	08012689 	.word	0x08012689
 8010850:	0801265d 	.word	0x0801265d
 8010854:	0801265c 	.word	0x0801265c
 8010858:	080127a0 	.word	0x080127a0
 801085c:	080126fc 	.word	0x080126fc
 8010860:	f8d9 201c 	ldr.w	r2, [r9, #28]
 8010864:	f1ba 0f0e 	cmp.w	sl, #14
 8010868:	6010      	str	r0, [r2, #0]
 801086a:	d86f      	bhi.n	801094c <_dtoa_r+0x3bc>
 801086c:	2c00      	cmp	r4, #0
 801086e:	d06d      	beq.n	801094c <_dtoa_r+0x3bc>
 8010870:	f1b8 0f00 	cmp.w	r8, #0
 8010874:	f340 80c2 	ble.w	80109fc <_dtoa_r+0x46c>
 8010878:	4aca      	ldr	r2, [pc, #808]	@ (8010ba4 <_dtoa_r+0x614>)
 801087a:	f008 010f 	and.w	r1, r8, #15
 801087e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8010882:	f418 7f80 	tst.w	r8, #256	@ 0x100
 8010886:	ed92 7b00 	vldr	d7, [r2]
 801088a:	ea4f 1128 	mov.w	r1, r8, asr #4
 801088e:	f000 80a9 	beq.w	80109e4 <_dtoa_r+0x454>
 8010892:	4ac5      	ldr	r2, [pc, #788]	@ (8010ba8 <_dtoa_r+0x618>)
 8010894:	ed92 6b08 	vldr	d6, [r2, #32]
 8010898:	ee88 6b06 	vdiv.f64	d6, d8, d6
 801089c:	ed8d 6b02 	vstr	d6, [sp, #8]
 80108a0:	f001 010f 	and.w	r1, r1, #15
 80108a4:	2203      	movs	r2, #3
 80108a6:	48c0      	ldr	r0, [pc, #768]	@ (8010ba8 <_dtoa_r+0x618>)
 80108a8:	2900      	cmp	r1, #0
 80108aa:	f040 809d 	bne.w	80109e8 <_dtoa_r+0x458>
 80108ae:	ed9d 6b02 	vldr	d6, [sp, #8]
 80108b2:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80108b6:	ed8d 7b02 	vstr	d7, [sp, #8]
 80108ba:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80108bc:	ed9d 7b02 	vldr	d7, [sp, #8]
 80108c0:	2900      	cmp	r1, #0
 80108c2:	f000 80c1 	beq.w	8010a48 <_dtoa_r+0x4b8>
 80108c6:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 80108ca:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80108ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80108d2:	f140 80b9 	bpl.w	8010a48 <_dtoa_r+0x4b8>
 80108d6:	f1ba 0f00 	cmp.w	sl, #0
 80108da:	f000 80b5 	beq.w	8010a48 <_dtoa_r+0x4b8>
 80108de:	f1bb 0f00 	cmp.w	fp, #0
 80108e2:	dd31      	ble.n	8010948 <_dtoa_r+0x3b8>
 80108e4:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 80108e8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80108ec:	ed8d 7b02 	vstr	d7, [sp, #8]
 80108f0:	f108 31ff 	add.w	r1, r8, #4294967295
 80108f4:	9104      	str	r1, [sp, #16]
 80108f6:	3201      	adds	r2, #1
 80108f8:	465c      	mov	r4, fp
 80108fa:	ed9d 6b02 	vldr	d6, [sp, #8]
 80108fe:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 8010902:	ee07 2a90 	vmov	s15, r2
 8010906:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801090a:	eea7 5b06 	vfma.f64	d5, d7, d6
 801090e:	ee15 2a90 	vmov	r2, s11
 8010912:	ec51 0b15 	vmov	r0, r1, d5
 8010916:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 801091a:	2c00      	cmp	r4, #0
 801091c:	f040 8098 	bne.w	8010a50 <_dtoa_r+0x4c0>
 8010920:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8010924:	ee36 6b47 	vsub.f64	d6, d6, d7
 8010928:	ec41 0b17 	vmov	d7, r0, r1
 801092c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8010930:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010934:	f300 8261 	bgt.w	8010dfa <_dtoa_r+0x86a>
 8010938:	eeb1 7b47 	vneg.f64	d7, d7
 801093c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8010940:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010944:	f100 80f5 	bmi.w	8010b32 <_dtoa_r+0x5a2>
 8010948:	ed8d 8b02 	vstr	d8, [sp, #8]
 801094c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801094e:	2a00      	cmp	r2, #0
 8010950:	f2c0 812c 	blt.w	8010bac <_dtoa_r+0x61c>
 8010954:	f1b8 0f0e 	cmp.w	r8, #14
 8010958:	f300 8128 	bgt.w	8010bac <_dtoa_r+0x61c>
 801095c:	4b91      	ldr	r3, [pc, #580]	@ (8010ba4 <_dtoa_r+0x614>)
 801095e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8010962:	ed93 6b00 	vldr	d6, [r3]
 8010966:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010968:	2b00      	cmp	r3, #0
 801096a:	da03      	bge.n	8010974 <_dtoa_r+0x3e4>
 801096c:	f1ba 0f00 	cmp.w	sl, #0
 8010970:	f340 80d2 	ble.w	8010b18 <_dtoa_r+0x588>
 8010974:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 8010978:	ed9d 7b02 	vldr	d7, [sp, #8]
 801097c:	463e      	mov	r6, r7
 801097e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8010982:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8010986:	ee15 3a10 	vmov	r3, s10
 801098a:	3330      	adds	r3, #48	@ 0x30
 801098c:	f806 3b01 	strb.w	r3, [r6], #1
 8010990:	1bf3      	subs	r3, r6, r7
 8010992:	459a      	cmp	sl, r3
 8010994:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8010998:	eea3 7b46 	vfms.f64	d7, d3, d6
 801099c:	f040 80f8 	bne.w	8010b90 <_dtoa_r+0x600>
 80109a0:	ee37 7b07 	vadd.f64	d7, d7, d7
 80109a4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80109a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80109ac:	f300 80dd 	bgt.w	8010b6a <_dtoa_r+0x5da>
 80109b0:	eeb4 7b46 	vcmp.f64	d7, d6
 80109b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80109b8:	d104      	bne.n	80109c4 <_dtoa_r+0x434>
 80109ba:	ee15 3a10 	vmov	r3, s10
 80109be:	07db      	lsls	r3, r3, #31
 80109c0:	f100 80d3 	bmi.w	8010b6a <_dtoa_r+0x5da>
 80109c4:	9901      	ldr	r1, [sp, #4]
 80109c6:	4648      	mov	r0, r9
 80109c8:	f000 fc78 	bl	80112bc <_Bfree>
 80109cc:	2300      	movs	r3, #0
 80109ce:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80109d0:	7033      	strb	r3, [r6, #0]
 80109d2:	f108 0301 	add.w	r3, r8, #1
 80109d6:	6013      	str	r3, [r2, #0]
 80109d8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80109da:	2b00      	cmp	r3, #0
 80109dc:	f000 8304 	beq.w	8010fe8 <_dtoa_r+0xa58>
 80109e0:	601e      	str	r6, [r3, #0]
 80109e2:	e301      	b.n	8010fe8 <_dtoa_r+0xa58>
 80109e4:	2202      	movs	r2, #2
 80109e6:	e75e      	b.n	80108a6 <_dtoa_r+0x316>
 80109e8:	07cc      	lsls	r4, r1, #31
 80109ea:	d504      	bpl.n	80109f6 <_dtoa_r+0x466>
 80109ec:	ed90 6b00 	vldr	d6, [r0]
 80109f0:	3201      	adds	r2, #1
 80109f2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80109f6:	1049      	asrs	r1, r1, #1
 80109f8:	3008      	adds	r0, #8
 80109fa:	e755      	b.n	80108a8 <_dtoa_r+0x318>
 80109fc:	d022      	beq.n	8010a44 <_dtoa_r+0x4b4>
 80109fe:	f1c8 0100 	rsb	r1, r8, #0
 8010a02:	4a68      	ldr	r2, [pc, #416]	@ (8010ba4 <_dtoa_r+0x614>)
 8010a04:	f001 000f 	and.w	r0, r1, #15
 8010a08:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8010a0c:	ed92 7b00 	vldr	d7, [r2]
 8010a10:	ee28 7b07 	vmul.f64	d7, d8, d7
 8010a14:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010a18:	4863      	ldr	r0, [pc, #396]	@ (8010ba8 <_dtoa_r+0x618>)
 8010a1a:	1109      	asrs	r1, r1, #4
 8010a1c:	2400      	movs	r4, #0
 8010a1e:	2202      	movs	r2, #2
 8010a20:	b929      	cbnz	r1, 8010a2e <_dtoa_r+0x49e>
 8010a22:	2c00      	cmp	r4, #0
 8010a24:	f43f af49 	beq.w	80108ba <_dtoa_r+0x32a>
 8010a28:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010a2c:	e745      	b.n	80108ba <_dtoa_r+0x32a>
 8010a2e:	07ce      	lsls	r6, r1, #31
 8010a30:	d505      	bpl.n	8010a3e <_dtoa_r+0x4ae>
 8010a32:	ed90 6b00 	vldr	d6, [r0]
 8010a36:	3201      	adds	r2, #1
 8010a38:	2401      	movs	r4, #1
 8010a3a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010a3e:	1049      	asrs	r1, r1, #1
 8010a40:	3008      	adds	r0, #8
 8010a42:	e7ed      	b.n	8010a20 <_dtoa_r+0x490>
 8010a44:	2202      	movs	r2, #2
 8010a46:	e738      	b.n	80108ba <_dtoa_r+0x32a>
 8010a48:	f8cd 8010 	str.w	r8, [sp, #16]
 8010a4c:	4654      	mov	r4, sl
 8010a4e:	e754      	b.n	80108fa <_dtoa_r+0x36a>
 8010a50:	4a54      	ldr	r2, [pc, #336]	@ (8010ba4 <_dtoa_r+0x614>)
 8010a52:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8010a56:	ed12 4b02 	vldr	d4, [r2, #-8]
 8010a5a:	9a08      	ldr	r2, [sp, #32]
 8010a5c:	ec41 0b17 	vmov	d7, r0, r1
 8010a60:	443c      	add	r4, r7
 8010a62:	b34a      	cbz	r2, 8010ab8 <_dtoa_r+0x528>
 8010a64:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 8010a68:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 8010a6c:	463e      	mov	r6, r7
 8010a6e:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8010a72:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8010a76:	ee35 7b47 	vsub.f64	d7, d5, d7
 8010a7a:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8010a7e:	ee14 2a90 	vmov	r2, s9
 8010a82:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8010a86:	3230      	adds	r2, #48	@ 0x30
 8010a88:	ee36 6b45 	vsub.f64	d6, d6, d5
 8010a8c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8010a90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a94:	f806 2b01 	strb.w	r2, [r6], #1
 8010a98:	d438      	bmi.n	8010b0c <_dtoa_r+0x57c>
 8010a9a:	ee32 5b46 	vsub.f64	d5, d2, d6
 8010a9e:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8010aa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010aa6:	d462      	bmi.n	8010b6e <_dtoa_r+0x5de>
 8010aa8:	42a6      	cmp	r6, r4
 8010aaa:	f43f af4d 	beq.w	8010948 <_dtoa_r+0x3b8>
 8010aae:	ee27 7b03 	vmul.f64	d7, d7, d3
 8010ab2:	ee26 6b03 	vmul.f64	d6, d6, d3
 8010ab6:	e7e0      	b.n	8010a7a <_dtoa_r+0x4ea>
 8010ab8:	4621      	mov	r1, r4
 8010aba:	463e      	mov	r6, r7
 8010abc:	ee27 7b04 	vmul.f64	d7, d7, d4
 8010ac0:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8010ac4:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8010ac8:	ee14 2a90 	vmov	r2, s9
 8010acc:	3230      	adds	r2, #48	@ 0x30
 8010ace:	f806 2b01 	strb.w	r2, [r6], #1
 8010ad2:	42a6      	cmp	r6, r4
 8010ad4:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8010ad8:	ee36 6b45 	vsub.f64	d6, d6, d5
 8010adc:	d119      	bne.n	8010b12 <_dtoa_r+0x582>
 8010ade:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 8010ae2:	ee37 4b05 	vadd.f64	d4, d7, d5
 8010ae6:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8010aea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010aee:	dc3e      	bgt.n	8010b6e <_dtoa_r+0x5de>
 8010af0:	ee35 5b47 	vsub.f64	d5, d5, d7
 8010af4:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8010af8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010afc:	f57f af24 	bpl.w	8010948 <_dtoa_r+0x3b8>
 8010b00:	460e      	mov	r6, r1
 8010b02:	3901      	subs	r1, #1
 8010b04:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8010b08:	2b30      	cmp	r3, #48	@ 0x30
 8010b0a:	d0f9      	beq.n	8010b00 <_dtoa_r+0x570>
 8010b0c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8010b10:	e758      	b.n	80109c4 <_dtoa_r+0x434>
 8010b12:	ee26 6b03 	vmul.f64	d6, d6, d3
 8010b16:	e7d5      	b.n	8010ac4 <_dtoa_r+0x534>
 8010b18:	d10b      	bne.n	8010b32 <_dtoa_r+0x5a2>
 8010b1a:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8010b1e:	ee26 6b07 	vmul.f64	d6, d6, d7
 8010b22:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010b26:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8010b2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b2e:	f2c0 8161 	blt.w	8010df4 <_dtoa_r+0x864>
 8010b32:	2400      	movs	r4, #0
 8010b34:	4625      	mov	r5, r4
 8010b36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010b38:	43db      	mvns	r3, r3
 8010b3a:	9304      	str	r3, [sp, #16]
 8010b3c:	463e      	mov	r6, r7
 8010b3e:	f04f 0800 	mov.w	r8, #0
 8010b42:	4621      	mov	r1, r4
 8010b44:	4648      	mov	r0, r9
 8010b46:	f000 fbb9 	bl	80112bc <_Bfree>
 8010b4a:	2d00      	cmp	r5, #0
 8010b4c:	d0de      	beq.n	8010b0c <_dtoa_r+0x57c>
 8010b4e:	f1b8 0f00 	cmp.w	r8, #0
 8010b52:	d005      	beq.n	8010b60 <_dtoa_r+0x5d0>
 8010b54:	45a8      	cmp	r8, r5
 8010b56:	d003      	beq.n	8010b60 <_dtoa_r+0x5d0>
 8010b58:	4641      	mov	r1, r8
 8010b5a:	4648      	mov	r0, r9
 8010b5c:	f000 fbae 	bl	80112bc <_Bfree>
 8010b60:	4629      	mov	r1, r5
 8010b62:	4648      	mov	r0, r9
 8010b64:	f000 fbaa 	bl	80112bc <_Bfree>
 8010b68:	e7d0      	b.n	8010b0c <_dtoa_r+0x57c>
 8010b6a:	f8cd 8010 	str.w	r8, [sp, #16]
 8010b6e:	4633      	mov	r3, r6
 8010b70:	461e      	mov	r6, r3
 8010b72:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010b76:	2a39      	cmp	r2, #57	@ 0x39
 8010b78:	d106      	bne.n	8010b88 <_dtoa_r+0x5f8>
 8010b7a:	429f      	cmp	r7, r3
 8010b7c:	d1f8      	bne.n	8010b70 <_dtoa_r+0x5e0>
 8010b7e:	9a04      	ldr	r2, [sp, #16]
 8010b80:	3201      	adds	r2, #1
 8010b82:	9204      	str	r2, [sp, #16]
 8010b84:	2230      	movs	r2, #48	@ 0x30
 8010b86:	703a      	strb	r2, [r7, #0]
 8010b88:	781a      	ldrb	r2, [r3, #0]
 8010b8a:	3201      	adds	r2, #1
 8010b8c:	701a      	strb	r2, [r3, #0]
 8010b8e:	e7bd      	b.n	8010b0c <_dtoa_r+0x57c>
 8010b90:	ee27 7b04 	vmul.f64	d7, d7, d4
 8010b94:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8010b98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b9c:	f47f aeef 	bne.w	801097e <_dtoa_r+0x3ee>
 8010ba0:	e710      	b.n	80109c4 <_dtoa_r+0x434>
 8010ba2:	bf00      	nop
 8010ba4:	080127a0 	.word	0x080127a0
 8010ba8:	08012778 	.word	0x08012778
 8010bac:	9908      	ldr	r1, [sp, #32]
 8010bae:	2900      	cmp	r1, #0
 8010bb0:	f000 80e3 	beq.w	8010d7a <_dtoa_r+0x7ea>
 8010bb4:	9907      	ldr	r1, [sp, #28]
 8010bb6:	2901      	cmp	r1, #1
 8010bb8:	f300 80c8 	bgt.w	8010d4c <_dtoa_r+0x7bc>
 8010bbc:	2d00      	cmp	r5, #0
 8010bbe:	f000 80c1 	beq.w	8010d44 <_dtoa_r+0x7b4>
 8010bc2:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8010bc6:	9e05      	ldr	r6, [sp, #20]
 8010bc8:	461c      	mov	r4, r3
 8010bca:	9304      	str	r3, [sp, #16]
 8010bcc:	9b05      	ldr	r3, [sp, #20]
 8010bce:	4413      	add	r3, r2
 8010bd0:	9305      	str	r3, [sp, #20]
 8010bd2:	9b06      	ldr	r3, [sp, #24]
 8010bd4:	2101      	movs	r1, #1
 8010bd6:	4413      	add	r3, r2
 8010bd8:	4648      	mov	r0, r9
 8010bda:	9306      	str	r3, [sp, #24]
 8010bdc:	f000 fc22 	bl	8011424 <__i2b>
 8010be0:	9b04      	ldr	r3, [sp, #16]
 8010be2:	4605      	mov	r5, r0
 8010be4:	b166      	cbz	r6, 8010c00 <_dtoa_r+0x670>
 8010be6:	9a06      	ldr	r2, [sp, #24]
 8010be8:	2a00      	cmp	r2, #0
 8010bea:	dd09      	ble.n	8010c00 <_dtoa_r+0x670>
 8010bec:	42b2      	cmp	r2, r6
 8010bee:	9905      	ldr	r1, [sp, #20]
 8010bf0:	bfa8      	it	ge
 8010bf2:	4632      	movge	r2, r6
 8010bf4:	1a89      	subs	r1, r1, r2
 8010bf6:	9105      	str	r1, [sp, #20]
 8010bf8:	9906      	ldr	r1, [sp, #24]
 8010bfa:	1ab6      	subs	r6, r6, r2
 8010bfc:	1a8a      	subs	r2, r1, r2
 8010bfe:	9206      	str	r2, [sp, #24]
 8010c00:	b1fb      	cbz	r3, 8010c42 <_dtoa_r+0x6b2>
 8010c02:	9a08      	ldr	r2, [sp, #32]
 8010c04:	2a00      	cmp	r2, #0
 8010c06:	f000 80bc 	beq.w	8010d82 <_dtoa_r+0x7f2>
 8010c0a:	b19c      	cbz	r4, 8010c34 <_dtoa_r+0x6a4>
 8010c0c:	4629      	mov	r1, r5
 8010c0e:	4622      	mov	r2, r4
 8010c10:	4648      	mov	r0, r9
 8010c12:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010c14:	f000 fcc6 	bl	80115a4 <__pow5mult>
 8010c18:	9a01      	ldr	r2, [sp, #4]
 8010c1a:	4601      	mov	r1, r0
 8010c1c:	4605      	mov	r5, r0
 8010c1e:	4648      	mov	r0, r9
 8010c20:	f000 fc16 	bl	8011450 <__multiply>
 8010c24:	9901      	ldr	r1, [sp, #4]
 8010c26:	9004      	str	r0, [sp, #16]
 8010c28:	4648      	mov	r0, r9
 8010c2a:	f000 fb47 	bl	80112bc <_Bfree>
 8010c2e:	9a04      	ldr	r2, [sp, #16]
 8010c30:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010c32:	9201      	str	r2, [sp, #4]
 8010c34:	1b1a      	subs	r2, r3, r4
 8010c36:	d004      	beq.n	8010c42 <_dtoa_r+0x6b2>
 8010c38:	9901      	ldr	r1, [sp, #4]
 8010c3a:	4648      	mov	r0, r9
 8010c3c:	f000 fcb2 	bl	80115a4 <__pow5mult>
 8010c40:	9001      	str	r0, [sp, #4]
 8010c42:	2101      	movs	r1, #1
 8010c44:	4648      	mov	r0, r9
 8010c46:	f000 fbed 	bl	8011424 <__i2b>
 8010c4a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010c4c:	4604      	mov	r4, r0
 8010c4e:	2b00      	cmp	r3, #0
 8010c50:	f000 81d0 	beq.w	8010ff4 <_dtoa_r+0xa64>
 8010c54:	461a      	mov	r2, r3
 8010c56:	4601      	mov	r1, r0
 8010c58:	4648      	mov	r0, r9
 8010c5a:	f000 fca3 	bl	80115a4 <__pow5mult>
 8010c5e:	9b07      	ldr	r3, [sp, #28]
 8010c60:	2b01      	cmp	r3, #1
 8010c62:	4604      	mov	r4, r0
 8010c64:	f300 8095 	bgt.w	8010d92 <_dtoa_r+0x802>
 8010c68:	9b02      	ldr	r3, [sp, #8]
 8010c6a:	2b00      	cmp	r3, #0
 8010c6c:	f040 808b 	bne.w	8010d86 <_dtoa_r+0x7f6>
 8010c70:	9b03      	ldr	r3, [sp, #12]
 8010c72:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8010c76:	2a00      	cmp	r2, #0
 8010c78:	f040 8087 	bne.w	8010d8a <_dtoa_r+0x7fa>
 8010c7c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8010c80:	0d12      	lsrs	r2, r2, #20
 8010c82:	0512      	lsls	r2, r2, #20
 8010c84:	2a00      	cmp	r2, #0
 8010c86:	f000 8082 	beq.w	8010d8e <_dtoa_r+0x7fe>
 8010c8a:	9b05      	ldr	r3, [sp, #20]
 8010c8c:	3301      	adds	r3, #1
 8010c8e:	9305      	str	r3, [sp, #20]
 8010c90:	9b06      	ldr	r3, [sp, #24]
 8010c92:	3301      	adds	r3, #1
 8010c94:	9306      	str	r3, [sp, #24]
 8010c96:	2301      	movs	r3, #1
 8010c98:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010c9a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010c9c:	2b00      	cmp	r3, #0
 8010c9e:	f000 81af 	beq.w	8011000 <_dtoa_r+0xa70>
 8010ca2:	6922      	ldr	r2, [r4, #16]
 8010ca4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8010ca8:	6910      	ldr	r0, [r2, #16]
 8010caa:	f000 fb6f 	bl	801138c <__hi0bits>
 8010cae:	f1c0 0020 	rsb	r0, r0, #32
 8010cb2:	9b06      	ldr	r3, [sp, #24]
 8010cb4:	4418      	add	r0, r3
 8010cb6:	f010 001f 	ands.w	r0, r0, #31
 8010cba:	d076      	beq.n	8010daa <_dtoa_r+0x81a>
 8010cbc:	f1c0 0220 	rsb	r2, r0, #32
 8010cc0:	2a04      	cmp	r2, #4
 8010cc2:	dd69      	ble.n	8010d98 <_dtoa_r+0x808>
 8010cc4:	9b05      	ldr	r3, [sp, #20]
 8010cc6:	f1c0 001c 	rsb	r0, r0, #28
 8010cca:	4403      	add	r3, r0
 8010ccc:	9305      	str	r3, [sp, #20]
 8010cce:	9b06      	ldr	r3, [sp, #24]
 8010cd0:	4406      	add	r6, r0
 8010cd2:	4403      	add	r3, r0
 8010cd4:	9306      	str	r3, [sp, #24]
 8010cd6:	9b05      	ldr	r3, [sp, #20]
 8010cd8:	2b00      	cmp	r3, #0
 8010cda:	dd05      	ble.n	8010ce8 <_dtoa_r+0x758>
 8010cdc:	9901      	ldr	r1, [sp, #4]
 8010cde:	461a      	mov	r2, r3
 8010ce0:	4648      	mov	r0, r9
 8010ce2:	f000 fcb9 	bl	8011658 <__lshift>
 8010ce6:	9001      	str	r0, [sp, #4]
 8010ce8:	9b06      	ldr	r3, [sp, #24]
 8010cea:	2b00      	cmp	r3, #0
 8010cec:	dd05      	ble.n	8010cfa <_dtoa_r+0x76a>
 8010cee:	4621      	mov	r1, r4
 8010cf0:	461a      	mov	r2, r3
 8010cf2:	4648      	mov	r0, r9
 8010cf4:	f000 fcb0 	bl	8011658 <__lshift>
 8010cf8:	4604      	mov	r4, r0
 8010cfa:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010cfc:	2b00      	cmp	r3, #0
 8010cfe:	d056      	beq.n	8010dae <_dtoa_r+0x81e>
 8010d00:	9801      	ldr	r0, [sp, #4]
 8010d02:	4621      	mov	r1, r4
 8010d04:	f000 fd14 	bl	8011730 <__mcmp>
 8010d08:	2800      	cmp	r0, #0
 8010d0a:	da50      	bge.n	8010dae <_dtoa_r+0x81e>
 8010d0c:	f108 33ff 	add.w	r3, r8, #4294967295
 8010d10:	9304      	str	r3, [sp, #16]
 8010d12:	9901      	ldr	r1, [sp, #4]
 8010d14:	2300      	movs	r3, #0
 8010d16:	220a      	movs	r2, #10
 8010d18:	4648      	mov	r0, r9
 8010d1a:	f000 faf1 	bl	8011300 <__multadd>
 8010d1e:	9b08      	ldr	r3, [sp, #32]
 8010d20:	9001      	str	r0, [sp, #4]
 8010d22:	2b00      	cmp	r3, #0
 8010d24:	f000 816e 	beq.w	8011004 <_dtoa_r+0xa74>
 8010d28:	4629      	mov	r1, r5
 8010d2a:	2300      	movs	r3, #0
 8010d2c:	220a      	movs	r2, #10
 8010d2e:	4648      	mov	r0, r9
 8010d30:	f000 fae6 	bl	8011300 <__multadd>
 8010d34:	f1bb 0f00 	cmp.w	fp, #0
 8010d38:	4605      	mov	r5, r0
 8010d3a:	dc64      	bgt.n	8010e06 <_dtoa_r+0x876>
 8010d3c:	9b07      	ldr	r3, [sp, #28]
 8010d3e:	2b02      	cmp	r3, #2
 8010d40:	dc3e      	bgt.n	8010dc0 <_dtoa_r+0x830>
 8010d42:	e060      	b.n	8010e06 <_dtoa_r+0x876>
 8010d44:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010d46:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8010d4a:	e73c      	b.n	8010bc6 <_dtoa_r+0x636>
 8010d4c:	f10a 34ff 	add.w	r4, sl, #4294967295
 8010d50:	42a3      	cmp	r3, r4
 8010d52:	bfbf      	itttt	lt
 8010d54:	1ae2      	sublt	r2, r4, r3
 8010d56:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8010d58:	189b      	addlt	r3, r3, r2
 8010d5a:	930a      	strlt	r3, [sp, #40]	@ 0x28
 8010d5c:	bfae      	itee	ge
 8010d5e:	1b1c      	subge	r4, r3, r4
 8010d60:	4623      	movlt	r3, r4
 8010d62:	2400      	movlt	r4, #0
 8010d64:	f1ba 0f00 	cmp.w	sl, #0
 8010d68:	bfb5      	itete	lt
 8010d6a:	9a05      	ldrlt	r2, [sp, #20]
 8010d6c:	9e05      	ldrge	r6, [sp, #20]
 8010d6e:	eba2 060a 	sublt.w	r6, r2, sl
 8010d72:	4652      	movge	r2, sl
 8010d74:	bfb8      	it	lt
 8010d76:	2200      	movlt	r2, #0
 8010d78:	e727      	b.n	8010bca <_dtoa_r+0x63a>
 8010d7a:	9e05      	ldr	r6, [sp, #20]
 8010d7c:	9d08      	ldr	r5, [sp, #32]
 8010d7e:	461c      	mov	r4, r3
 8010d80:	e730      	b.n	8010be4 <_dtoa_r+0x654>
 8010d82:	461a      	mov	r2, r3
 8010d84:	e758      	b.n	8010c38 <_dtoa_r+0x6a8>
 8010d86:	2300      	movs	r3, #0
 8010d88:	e786      	b.n	8010c98 <_dtoa_r+0x708>
 8010d8a:	9b02      	ldr	r3, [sp, #8]
 8010d8c:	e784      	b.n	8010c98 <_dtoa_r+0x708>
 8010d8e:	920b      	str	r2, [sp, #44]	@ 0x2c
 8010d90:	e783      	b.n	8010c9a <_dtoa_r+0x70a>
 8010d92:	2300      	movs	r3, #0
 8010d94:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010d96:	e784      	b.n	8010ca2 <_dtoa_r+0x712>
 8010d98:	d09d      	beq.n	8010cd6 <_dtoa_r+0x746>
 8010d9a:	9b05      	ldr	r3, [sp, #20]
 8010d9c:	321c      	adds	r2, #28
 8010d9e:	4413      	add	r3, r2
 8010da0:	9305      	str	r3, [sp, #20]
 8010da2:	9b06      	ldr	r3, [sp, #24]
 8010da4:	4416      	add	r6, r2
 8010da6:	4413      	add	r3, r2
 8010da8:	e794      	b.n	8010cd4 <_dtoa_r+0x744>
 8010daa:	4602      	mov	r2, r0
 8010dac:	e7f5      	b.n	8010d9a <_dtoa_r+0x80a>
 8010dae:	f1ba 0f00 	cmp.w	sl, #0
 8010db2:	f8cd 8010 	str.w	r8, [sp, #16]
 8010db6:	46d3      	mov	fp, sl
 8010db8:	dc21      	bgt.n	8010dfe <_dtoa_r+0x86e>
 8010dba:	9b07      	ldr	r3, [sp, #28]
 8010dbc:	2b02      	cmp	r3, #2
 8010dbe:	dd1e      	ble.n	8010dfe <_dtoa_r+0x86e>
 8010dc0:	f1bb 0f00 	cmp.w	fp, #0
 8010dc4:	f47f aeb7 	bne.w	8010b36 <_dtoa_r+0x5a6>
 8010dc8:	4621      	mov	r1, r4
 8010dca:	465b      	mov	r3, fp
 8010dcc:	2205      	movs	r2, #5
 8010dce:	4648      	mov	r0, r9
 8010dd0:	f000 fa96 	bl	8011300 <__multadd>
 8010dd4:	4601      	mov	r1, r0
 8010dd6:	4604      	mov	r4, r0
 8010dd8:	9801      	ldr	r0, [sp, #4]
 8010dda:	f000 fca9 	bl	8011730 <__mcmp>
 8010dde:	2800      	cmp	r0, #0
 8010de0:	f77f aea9 	ble.w	8010b36 <_dtoa_r+0x5a6>
 8010de4:	463e      	mov	r6, r7
 8010de6:	2331      	movs	r3, #49	@ 0x31
 8010de8:	f806 3b01 	strb.w	r3, [r6], #1
 8010dec:	9b04      	ldr	r3, [sp, #16]
 8010dee:	3301      	adds	r3, #1
 8010df0:	9304      	str	r3, [sp, #16]
 8010df2:	e6a4      	b.n	8010b3e <_dtoa_r+0x5ae>
 8010df4:	f8cd 8010 	str.w	r8, [sp, #16]
 8010df8:	4654      	mov	r4, sl
 8010dfa:	4625      	mov	r5, r4
 8010dfc:	e7f2      	b.n	8010de4 <_dtoa_r+0x854>
 8010dfe:	9b08      	ldr	r3, [sp, #32]
 8010e00:	2b00      	cmp	r3, #0
 8010e02:	f000 8103 	beq.w	801100c <_dtoa_r+0xa7c>
 8010e06:	2e00      	cmp	r6, #0
 8010e08:	dd05      	ble.n	8010e16 <_dtoa_r+0x886>
 8010e0a:	4629      	mov	r1, r5
 8010e0c:	4632      	mov	r2, r6
 8010e0e:	4648      	mov	r0, r9
 8010e10:	f000 fc22 	bl	8011658 <__lshift>
 8010e14:	4605      	mov	r5, r0
 8010e16:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010e18:	2b00      	cmp	r3, #0
 8010e1a:	d058      	beq.n	8010ece <_dtoa_r+0x93e>
 8010e1c:	6869      	ldr	r1, [r5, #4]
 8010e1e:	4648      	mov	r0, r9
 8010e20:	f000 fa0c 	bl	801123c <_Balloc>
 8010e24:	4606      	mov	r6, r0
 8010e26:	b928      	cbnz	r0, 8010e34 <_dtoa_r+0x8a4>
 8010e28:	4b82      	ldr	r3, [pc, #520]	@ (8011034 <_dtoa_r+0xaa4>)
 8010e2a:	4602      	mov	r2, r0
 8010e2c:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8010e30:	f7ff bbc7 	b.w	80105c2 <_dtoa_r+0x32>
 8010e34:	692a      	ldr	r2, [r5, #16]
 8010e36:	3202      	adds	r2, #2
 8010e38:	0092      	lsls	r2, r2, #2
 8010e3a:	f105 010c 	add.w	r1, r5, #12
 8010e3e:	300c      	adds	r0, #12
 8010e40:	f000 ffac 	bl	8011d9c <memcpy>
 8010e44:	2201      	movs	r2, #1
 8010e46:	4631      	mov	r1, r6
 8010e48:	4648      	mov	r0, r9
 8010e4a:	f000 fc05 	bl	8011658 <__lshift>
 8010e4e:	1c7b      	adds	r3, r7, #1
 8010e50:	9305      	str	r3, [sp, #20]
 8010e52:	eb07 030b 	add.w	r3, r7, fp
 8010e56:	9309      	str	r3, [sp, #36]	@ 0x24
 8010e58:	9b02      	ldr	r3, [sp, #8]
 8010e5a:	f003 0301 	and.w	r3, r3, #1
 8010e5e:	46a8      	mov	r8, r5
 8010e60:	9308      	str	r3, [sp, #32]
 8010e62:	4605      	mov	r5, r0
 8010e64:	9b05      	ldr	r3, [sp, #20]
 8010e66:	9801      	ldr	r0, [sp, #4]
 8010e68:	4621      	mov	r1, r4
 8010e6a:	f103 3bff 	add.w	fp, r3, #4294967295
 8010e6e:	f7ff fb04 	bl	801047a <quorem>
 8010e72:	4641      	mov	r1, r8
 8010e74:	9002      	str	r0, [sp, #8]
 8010e76:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8010e7a:	9801      	ldr	r0, [sp, #4]
 8010e7c:	f000 fc58 	bl	8011730 <__mcmp>
 8010e80:	462a      	mov	r2, r5
 8010e82:	9006      	str	r0, [sp, #24]
 8010e84:	4621      	mov	r1, r4
 8010e86:	4648      	mov	r0, r9
 8010e88:	f000 fc6e 	bl	8011768 <__mdiff>
 8010e8c:	68c2      	ldr	r2, [r0, #12]
 8010e8e:	4606      	mov	r6, r0
 8010e90:	b9fa      	cbnz	r2, 8010ed2 <_dtoa_r+0x942>
 8010e92:	4601      	mov	r1, r0
 8010e94:	9801      	ldr	r0, [sp, #4]
 8010e96:	f000 fc4b 	bl	8011730 <__mcmp>
 8010e9a:	4602      	mov	r2, r0
 8010e9c:	4631      	mov	r1, r6
 8010e9e:	4648      	mov	r0, r9
 8010ea0:	920a      	str	r2, [sp, #40]	@ 0x28
 8010ea2:	f000 fa0b 	bl	80112bc <_Bfree>
 8010ea6:	9b07      	ldr	r3, [sp, #28]
 8010ea8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010eaa:	9e05      	ldr	r6, [sp, #20]
 8010eac:	ea43 0102 	orr.w	r1, r3, r2
 8010eb0:	9b08      	ldr	r3, [sp, #32]
 8010eb2:	4319      	orrs	r1, r3
 8010eb4:	d10f      	bne.n	8010ed6 <_dtoa_r+0x946>
 8010eb6:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8010eba:	d028      	beq.n	8010f0e <_dtoa_r+0x97e>
 8010ebc:	9b06      	ldr	r3, [sp, #24]
 8010ebe:	2b00      	cmp	r3, #0
 8010ec0:	dd02      	ble.n	8010ec8 <_dtoa_r+0x938>
 8010ec2:	9b02      	ldr	r3, [sp, #8]
 8010ec4:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 8010ec8:	f88b a000 	strb.w	sl, [fp]
 8010ecc:	e639      	b.n	8010b42 <_dtoa_r+0x5b2>
 8010ece:	4628      	mov	r0, r5
 8010ed0:	e7bd      	b.n	8010e4e <_dtoa_r+0x8be>
 8010ed2:	2201      	movs	r2, #1
 8010ed4:	e7e2      	b.n	8010e9c <_dtoa_r+0x90c>
 8010ed6:	9b06      	ldr	r3, [sp, #24]
 8010ed8:	2b00      	cmp	r3, #0
 8010eda:	db04      	blt.n	8010ee6 <_dtoa_r+0x956>
 8010edc:	9907      	ldr	r1, [sp, #28]
 8010ede:	430b      	orrs	r3, r1
 8010ee0:	9908      	ldr	r1, [sp, #32]
 8010ee2:	430b      	orrs	r3, r1
 8010ee4:	d120      	bne.n	8010f28 <_dtoa_r+0x998>
 8010ee6:	2a00      	cmp	r2, #0
 8010ee8:	ddee      	ble.n	8010ec8 <_dtoa_r+0x938>
 8010eea:	9901      	ldr	r1, [sp, #4]
 8010eec:	2201      	movs	r2, #1
 8010eee:	4648      	mov	r0, r9
 8010ef0:	f000 fbb2 	bl	8011658 <__lshift>
 8010ef4:	4621      	mov	r1, r4
 8010ef6:	9001      	str	r0, [sp, #4]
 8010ef8:	f000 fc1a 	bl	8011730 <__mcmp>
 8010efc:	2800      	cmp	r0, #0
 8010efe:	dc03      	bgt.n	8010f08 <_dtoa_r+0x978>
 8010f00:	d1e2      	bne.n	8010ec8 <_dtoa_r+0x938>
 8010f02:	f01a 0f01 	tst.w	sl, #1
 8010f06:	d0df      	beq.n	8010ec8 <_dtoa_r+0x938>
 8010f08:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8010f0c:	d1d9      	bne.n	8010ec2 <_dtoa_r+0x932>
 8010f0e:	2339      	movs	r3, #57	@ 0x39
 8010f10:	f88b 3000 	strb.w	r3, [fp]
 8010f14:	4633      	mov	r3, r6
 8010f16:	461e      	mov	r6, r3
 8010f18:	3b01      	subs	r3, #1
 8010f1a:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8010f1e:	2a39      	cmp	r2, #57	@ 0x39
 8010f20:	d053      	beq.n	8010fca <_dtoa_r+0xa3a>
 8010f22:	3201      	adds	r2, #1
 8010f24:	701a      	strb	r2, [r3, #0]
 8010f26:	e60c      	b.n	8010b42 <_dtoa_r+0x5b2>
 8010f28:	2a00      	cmp	r2, #0
 8010f2a:	dd07      	ble.n	8010f3c <_dtoa_r+0x9ac>
 8010f2c:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8010f30:	d0ed      	beq.n	8010f0e <_dtoa_r+0x97e>
 8010f32:	f10a 0301 	add.w	r3, sl, #1
 8010f36:	f88b 3000 	strb.w	r3, [fp]
 8010f3a:	e602      	b.n	8010b42 <_dtoa_r+0x5b2>
 8010f3c:	9b05      	ldr	r3, [sp, #20]
 8010f3e:	9a05      	ldr	r2, [sp, #20]
 8010f40:	f803 ac01 	strb.w	sl, [r3, #-1]
 8010f44:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010f46:	4293      	cmp	r3, r2
 8010f48:	d029      	beq.n	8010f9e <_dtoa_r+0xa0e>
 8010f4a:	9901      	ldr	r1, [sp, #4]
 8010f4c:	2300      	movs	r3, #0
 8010f4e:	220a      	movs	r2, #10
 8010f50:	4648      	mov	r0, r9
 8010f52:	f000 f9d5 	bl	8011300 <__multadd>
 8010f56:	45a8      	cmp	r8, r5
 8010f58:	9001      	str	r0, [sp, #4]
 8010f5a:	f04f 0300 	mov.w	r3, #0
 8010f5e:	f04f 020a 	mov.w	r2, #10
 8010f62:	4641      	mov	r1, r8
 8010f64:	4648      	mov	r0, r9
 8010f66:	d107      	bne.n	8010f78 <_dtoa_r+0x9e8>
 8010f68:	f000 f9ca 	bl	8011300 <__multadd>
 8010f6c:	4680      	mov	r8, r0
 8010f6e:	4605      	mov	r5, r0
 8010f70:	9b05      	ldr	r3, [sp, #20]
 8010f72:	3301      	adds	r3, #1
 8010f74:	9305      	str	r3, [sp, #20]
 8010f76:	e775      	b.n	8010e64 <_dtoa_r+0x8d4>
 8010f78:	f000 f9c2 	bl	8011300 <__multadd>
 8010f7c:	4629      	mov	r1, r5
 8010f7e:	4680      	mov	r8, r0
 8010f80:	2300      	movs	r3, #0
 8010f82:	220a      	movs	r2, #10
 8010f84:	4648      	mov	r0, r9
 8010f86:	f000 f9bb 	bl	8011300 <__multadd>
 8010f8a:	4605      	mov	r5, r0
 8010f8c:	e7f0      	b.n	8010f70 <_dtoa_r+0x9e0>
 8010f8e:	f1bb 0f00 	cmp.w	fp, #0
 8010f92:	bfcc      	ite	gt
 8010f94:	465e      	movgt	r6, fp
 8010f96:	2601      	movle	r6, #1
 8010f98:	443e      	add	r6, r7
 8010f9a:	f04f 0800 	mov.w	r8, #0
 8010f9e:	9901      	ldr	r1, [sp, #4]
 8010fa0:	2201      	movs	r2, #1
 8010fa2:	4648      	mov	r0, r9
 8010fa4:	f000 fb58 	bl	8011658 <__lshift>
 8010fa8:	4621      	mov	r1, r4
 8010faa:	9001      	str	r0, [sp, #4]
 8010fac:	f000 fbc0 	bl	8011730 <__mcmp>
 8010fb0:	2800      	cmp	r0, #0
 8010fb2:	dcaf      	bgt.n	8010f14 <_dtoa_r+0x984>
 8010fb4:	d102      	bne.n	8010fbc <_dtoa_r+0xa2c>
 8010fb6:	f01a 0f01 	tst.w	sl, #1
 8010fba:	d1ab      	bne.n	8010f14 <_dtoa_r+0x984>
 8010fbc:	4633      	mov	r3, r6
 8010fbe:	461e      	mov	r6, r3
 8010fc0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010fc4:	2a30      	cmp	r2, #48	@ 0x30
 8010fc6:	d0fa      	beq.n	8010fbe <_dtoa_r+0xa2e>
 8010fc8:	e5bb      	b.n	8010b42 <_dtoa_r+0x5b2>
 8010fca:	429f      	cmp	r7, r3
 8010fcc:	d1a3      	bne.n	8010f16 <_dtoa_r+0x986>
 8010fce:	9b04      	ldr	r3, [sp, #16]
 8010fd0:	3301      	adds	r3, #1
 8010fd2:	9304      	str	r3, [sp, #16]
 8010fd4:	2331      	movs	r3, #49	@ 0x31
 8010fd6:	703b      	strb	r3, [r7, #0]
 8010fd8:	e5b3      	b.n	8010b42 <_dtoa_r+0x5b2>
 8010fda:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8010fdc:	4f16      	ldr	r7, [pc, #88]	@ (8011038 <_dtoa_r+0xaa8>)
 8010fde:	b11b      	cbz	r3, 8010fe8 <_dtoa_r+0xa58>
 8010fe0:	f107 0308 	add.w	r3, r7, #8
 8010fe4:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8010fe6:	6013      	str	r3, [r2, #0]
 8010fe8:	4638      	mov	r0, r7
 8010fea:	b011      	add	sp, #68	@ 0x44
 8010fec:	ecbd 8b02 	vpop	{d8}
 8010ff0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ff4:	9b07      	ldr	r3, [sp, #28]
 8010ff6:	2b01      	cmp	r3, #1
 8010ff8:	f77f ae36 	ble.w	8010c68 <_dtoa_r+0x6d8>
 8010ffc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010ffe:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011000:	2001      	movs	r0, #1
 8011002:	e656      	b.n	8010cb2 <_dtoa_r+0x722>
 8011004:	f1bb 0f00 	cmp.w	fp, #0
 8011008:	f77f aed7 	ble.w	8010dba <_dtoa_r+0x82a>
 801100c:	463e      	mov	r6, r7
 801100e:	9801      	ldr	r0, [sp, #4]
 8011010:	4621      	mov	r1, r4
 8011012:	f7ff fa32 	bl	801047a <quorem>
 8011016:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 801101a:	f806 ab01 	strb.w	sl, [r6], #1
 801101e:	1bf2      	subs	r2, r6, r7
 8011020:	4593      	cmp	fp, r2
 8011022:	ddb4      	ble.n	8010f8e <_dtoa_r+0x9fe>
 8011024:	9901      	ldr	r1, [sp, #4]
 8011026:	2300      	movs	r3, #0
 8011028:	220a      	movs	r2, #10
 801102a:	4648      	mov	r0, r9
 801102c:	f000 f968 	bl	8011300 <__multadd>
 8011030:	9001      	str	r0, [sp, #4]
 8011032:	e7ec      	b.n	801100e <_dtoa_r+0xa7e>
 8011034:	080126fc 	.word	0x080126fc
 8011038:	08012680 	.word	0x08012680

0801103c <_free_r>:
 801103c:	b538      	push	{r3, r4, r5, lr}
 801103e:	4605      	mov	r5, r0
 8011040:	2900      	cmp	r1, #0
 8011042:	d041      	beq.n	80110c8 <_free_r+0x8c>
 8011044:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011048:	1f0c      	subs	r4, r1, #4
 801104a:	2b00      	cmp	r3, #0
 801104c:	bfb8      	it	lt
 801104e:	18e4      	addlt	r4, r4, r3
 8011050:	f000 f8e8 	bl	8011224 <__malloc_lock>
 8011054:	4a1d      	ldr	r2, [pc, #116]	@ (80110cc <_free_r+0x90>)
 8011056:	6813      	ldr	r3, [r2, #0]
 8011058:	b933      	cbnz	r3, 8011068 <_free_r+0x2c>
 801105a:	6063      	str	r3, [r4, #4]
 801105c:	6014      	str	r4, [r2, #0]
 801105e:	4628      	mov	r0, r5
 8011060:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011064:	f000 b8e4 	b.w	8011230 <__malloc_unlock>
 8011068:	42a3      	cmp	r3, r4
 801106a:	d908      	bls.n	801107e <_free_r+0x42>
 801106c:	6820      	ldr	r0, [r4, #0]
 801106e:	1821      	adds	r1, r4, r0
 8011070:	428b      	cmp	r3, r1
 8011072:	bf01      	itttt	eq
 8011074:	6819      	ldreq	r1, [r3, #0]
 8011076:	685b      	ldreq	r3, [r3, #4]
 8011078:	1809      	addeq	r1, r1, r0
 801107a:	6021      	streq	r1, [r4, #0]
 801107c:	e7ed      	b.n	801105a <_free_r+0x1e>
 801107e:	461a      	mov	r2, r3
 8011080:	685b      	ldr	r3, [r3, #4]
 8011082:	b10b      	cbz	r3, 8011088 <_free_r+0x4c>
 8011084:	42a3      	cmp	r3, r4
 8011086:	d9fa      	bls.n	801107e <_free_r+0x42>
 8011088:	6811      	ldr	r1, [r2, #0]
 801108a:	1850      	adds	r0, r2, r1
 801108c:	42a0      	cmp	r0, r4
 801108e:	d10b      	bne.n	80110a8 <_free_r+0x6c>
 8011090:	6820      	ldr	r0, [r4, #0]
 8011092:	4401      	add	r1, r0
 8011094:	1850      	adds	r0, r2, r1
 8011096:	4283      	cmp	r3, r0
 8011098:	6011      	str	r1, [r2, #0]
 801109a:	d1e0      	bne.n	801105e <_free_r+0x22>
 801109c:	6818      	ldr	r0, [r3, #0]
 801109e:	685b      	ldr	r3, [r3, #4]
 80110a0:	6053      	str	r3, [r2, #4]
 80110a2:	4408      	add	r0, r1
 80110a4:	6010      	str	r0, [r2, #0]
 80110a6:	e7da      	b.n	801105e <_free_r+0x22>
 80110a8:	d902      	bls.n	80110b0 <_free_r+0x74>
 80110aa:	230c      	movs	r3, #12
 80110ac:	602b      	str	r3, [r5, #0]
 80110ae:	e7d6      	b.n	801105e <_free_r+0x22>
 80110b0:	6820      	ldr	r0, [r4, #0]
 80110b2:	1821      	adds	r1, r4, r0
 80110b4:	428b      	cmp	r3, r1
 80110b6:	bf04      	itt	eq
 80110b8:	6819      	ldreq	r1, [r3, #0]
 80110ba:	685b      	ldreq	r3, [r3, #4]
 80110bc:	6063      	str	r3, [r4, #4]
 80110be:	bf04      	itt	eq
 80110c0:	1809      	addeq	r1, r1, r0
 80110c2:	6021      	streq	r1, [r4, #0]
 80110c4:	6054      	str	r4, [r2, #4]
 80110c6:	e7ca      	b.n	801105e <_free_r+0x22>
 80110c8:	bd38      	pop	{r3, r4, r5, pc}
 80110ca:	bf00      	nop
 80110cc:	240025a8 	.word	0x240025a8

080110d0 <malloc>:
 80110d0:	4b02      	ldr	r3, [pc, #8]	@ (80110dc <malloc+0xc>)
 80110d2:	4601      	mov	r1, r0
 80110d4:	6818      	ldr	r0, [r3, #0]
 80110d6:	f000 b825 	b.w	8011124 <_malloc_r>
 80110da:	bf00      	nop
 80110dc:	24000144 	.word	0x24000144

080110e0 <sbrk_aligned>:
 80110e0:	b570      	push	{r4, r5, r6, lr}
 80110e2:	4e0f      	ldr	r6, [pc, #60]	@ (8011120 <sbrk_aligned+0x40>)
 80110e4:	460c      	mov	r4, r1
 80110e6:	6831      	ldr	r1, [r6, #0]
 80110e8:	4605      	mov	r5, r0
 80110ea:	b911      	cbnz	r1, 80110f2 <sbrk_aligned+0x12>
 80110ec:	f000 fe46 	bl	8011d7c <_sbrk_r>
 80110f0:	6030      	str	r0, [r6, #0]
 80110f2:	4621      	mov	r1, r4
 80110f4:	4628      	mov	r0, r5
 80110f6:	f000 fe41 	bl	8011d7c <_sbrk_r>
 80110fa:	1c43      	adds	r3, r0, #1
 80110fc:	d103      	bne.n	8011106 <sbrk_aligned+0x26>
 80110fe:	f04f 34ff 	mov.w	r4, #4294967295
 8011102:	4620      	mov	r0, r4
 8011104:	bd70      	pop	{r4, r5, r6, pc}
 8011106:	1cc4      	adds	r4, r0, #3
 8011108:	f024 0403 	bic.w	r4, r4, #3
 801110c:	42a0      	cmp	r0, r4
 801110e:	d0f8      	beq.n	8011102 <sbrk_aligned+0x22>
 8011110:	1a21      	subs	r1, r4, r0
 8011112:	4628      	mov	r0, r5
 8011114:	f000 fe32 	bl	8011d7c <_sbrk_r>
 8011118:	3001      	adds	r0, #1
 801111a:	d1f2      	bne.n	8011102 <sbrk_aligned+0x22>
 801111c:	e7ef      	b.n	80110fe <sbrk_aligned+0x1e>
 801111e:	bf00      	nop
 8011120:	240025a4 	.word	0x240025a4

08011124 <_malloc_r>:
 8011124:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011128:	1ccd      	adds	r5, r1, #3
 801112a:	f025 0503 	bic.w	r5, r5, #3
 801112e:	3508      	adds	r5, #8
 8011130:	2d0c      	cmp	r5, #12
 8011132:	bf38      	it	cc
 8011134:	250c      	movcc	r5, #12
 8011136:	2d00      	cmp	r5, #0
 8011138:	4606      	mov	r6, r0
 801113a:	db01      	blt.n	8011140 <_malloc_r+0x1c>
 801113c:	42a9      	cmp	r1, r5
 801113e:	d904      	bls.n	801114a <_malloc_r+0x26>
 8011140:	230c      	movs	r3, #12
 8011142:	6033      	str	r3, [r6, #0]
 8011144:	2000      	movs	r0, #0
 8011146:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801114a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8011220 <_malloc_r+0xfc>
 801114e:	f000 f869 	bl	8011224 <__malloc_lock>
 8011152:	f8d8 3000 	ldr.w	r3, [r8]
 8011156:	461c      	mov	r4, r3
 8011158:	bb44      	cbnz	r4, 80111ac <_malloc_r+0x88>
 801115a:	4629      	mov	r1, r5
 801115c:	4630      	mov	r0, r6
 801115e:	f7ff ffbf 	bl	80110e0 <sbrk_aligned>
 8011162:	1c43      	adds	r3, r0, #1
 8011164:	4604      	mov	r4, r0
 8011166:	d158      	bne.n	801121a <_malloc_r+0xf6>
 8011168:	f8d8 4000 	ldr.w	r4, [r8]
 801116c:	4627      	mov	r7, r4
 801116e:	2f00      	cmp	r7, #0
 8011170:	d143      	bne.n	80111fa <_malloc_r+0xd6>
 8011172:	2c00      	cmp	r4, #0
 8011174:	d04b      	beq.n	801120e <_malloc_r+0xea>
 8011176:	6823      	ldr	r3, [r4, #0]
 8011178:	4639      	mov	r1, r7
 801117a:	4630      	mov	r0, r6
 801117c:	eb04 0903 	add.w	r9, r4, r3
 8011180:	f000 fdfc 	bl	8011d7c <_sbrk_r>
 8011184:	4581      	cmp	r9, r0
 8011186:	d142      	bne.n	801120e <_malloc_r+0xea>
 8011188:	6821      	ldr	r1, [r4, #0]
 801118a:	1a6d      	subs	r5, r5, r1
 801118c:	4629      	mov	r1, r5
 801118e:	4630      	mov	r0, r6
 8011190:	f7ff ffa6 	bl	80110e0 <sbrk_aligned>
 8011194:	3001      	adds	r0, #1
 8011196:	d03a      	beq.n	801120e <_malloc_r+0xea>
 8011198:	6823      	ldr	r3, [r4, #0]
 801119a:	442b      	add	r3, r5
 801119c:	6023      	str	r3, [r4, #0]
 801119e:	f8d8 3000 	ldr.w	r3, [r8]
 80111a2:	685a      	ldr	r2, [r3, #4]
 80111a4:	bb62      	cbnz	r2, 8011200 <_malloc_r+0xdc>
 80111a6:	f8c8 7000 	str.w	r7, [r8]
 80111aa:	e00f      	b.n	80111cc <_malloc_r+0xa8>
 80111ac:	6822      	ldr	r2, [r4, #0]
 80111ae:	1b52      	subs	r2, r2, r5
 80111b0:	d420      	bmi.n	80111f4 <_malloc_r+0xd0>
 80111b2:	2a0b      	cmp	r2, #11
 80111b4:	d917      	bls.n	80111e6 <_malloc_r+0xc2>
 80111b6:	1961      	adds	r1, r4, r5
 80111b8:	42a3      	cmp	r3, r4
 80111ba:	6025      	str	r5, [r4, #0]
 80111bc:	bf18      	it	ne
 80111be:	6059      	strne	r1, [r3, #4]
 80111c0:	6863      	ldr	r3, [r4, #4]
 80111c2:	bf08      	it	eq
 80111c4:	f8c8 1000 	streq.w	r1, [r8]
 80111c8:	5162      	str	r2, [r4, r5]
 80111ca:	604b      	str	r3, [r1, #4]
 80111cc:	4630      	mov	r0, r6
 80111ce:	f000 f82f 	bl	8011230 <__malloc_unlock>
 80111d2:	f104 000b 	add.w	r0, r4, #11
 80111d6:	1d23      	adds	r3, r4, #4
 80111d8:	f020 0007 	bic.w	r0, r0, #7
 80111dc:	1ac2      	subs	r2, r0, r3
 80111de:	bf1c      	itt	ne
 80111e0:	1a1b      	subne	r3, r3, r0
 80111e2:	50a3      	strne	r3, [r4, r2]
 80111e4:	e7af      	b.n	8011146 <_malloc_r+0x22>
 80111e6:	6862      	ldr	r2, [r4, #4]
 80111e8:	42a3      	cmp	r3, r4
 80111ea:	bf0c      	ite	eq
 80111ec:	f8c8 2000 	streq.w	r2, [r8]
 80111f0:	605a      	strne	r2, [r3, #4]
 80111f2:	e7eb      	b.n	80111cc <_malloc_r+0xa8>
 80111f4:	4623      	mov	r3, r4
 80111f6:	6864      	ldr	r4, [r4, #4]
 80111f8:	e7ae      	b.n	8011158 <_malloc_r+0x34>
 80111fa:	463c      	mov	r4, r7
 80111fc:	687f      	ldr	r7, [r7, #4]
 80111fe:	e7b6      	b.n	801116e <_malloc_r+0x4a>
 8011200:	461a      	mov	r2, r3
 8011202:	685b      	ldr	r3, [r3, #4]
 8011204:	42a3      	cmp	r3, r4
 8011206:	d1fb      	bne.n	8011200 <_malloc_r+0xdc>
 8011208:	2300      	movs	r3, #0
 801120a:	6053      	str	r3, [r2, #4]
 801120c:	e7de      	b.n	80111cc <_malloc_r+0xa8>
 801120e:	230c      	movs	r3, #12
 8011210:	6033      	str	r3, [r6, #0]
 8011212:	4630      	mov	r0, r6
 8011214:	f000 f80c 	bl	8011230 <__malloc_unlock>
 8011218:	e794      	b.n	8011144 <_malloc_r+0x20>
 801121a:	6005      	str	r5, [r0, #0]
 801121c:	e7d6      	b.n	80111cc <_malloc_r+0xa8>
 801121e:	bf00      	nop
 8011220:	240025a8 	.word	0x240025a8

08011224 <__malloc_lock>:
 8011224:	4801      	ldr	r0, [pc, #4]	@ (801122c <__malloc_lock+0x8>)
 8011226:	f7ff b926 	b.w	8010476 <__retarget_lock_acquire_recursive>
 801122a:	bf00      	nop
 801122c:	240025a0 	.word	0x240025a0

08011230 <__malloc_unlock>:
 8011230:	4801      	ldr	r0, [pc, #4]	@ (8011238 <__malloc_unlock+0x8>)
 8011232:	f7ff b921 	b.w	8010478 <__retarget_lock_release_recursive>
 8011236:	bf00      	nop
 8011238:	240025a0 	.word	0x240025a0

0801123c <_Balloc>:
 801123c:	b570      	push	{r4, r5, r6, lr}
 801123e:	69c6      	ldr	r6, [r0, #28]
 8011240:	4604      	mov	r4, r0
 8011242:	460d      	mov	r5, r1
 8011244:	b976      	cbnz	r6, 8011264 <_Balloc+0x28>
 8011246:	2010      	movs	r0, #16
 8011248:	f7ff ff42 	bl	80110d0 <malloc>
 801124c:	4602      	mov	r2, r0
 801124e:	61e0      	str	r0, [r4, #28]
 8011250:	b920      	cbnz	r0, 801125c <_Balloc+0x20>
 8011252:	4b18      	ldr	r3, [pc, #96]	@ (80112b4 <_Balloc+0x78>)
 8011254:	4818      	ldr	r0, [pc, #96]	@ (80112b8 <_Balloc+0x7c>)
 8011256:	216b      	movs	r1, #107	@ 0x6b
 8011258:	f000 fdae 	bl	8011db8 <__assert_func>
 801125c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011260:	6006      	str	r6, [r0, #0]
 8011262:	60c6      	str	r6, [r0, #12]
 8011264:	69e6      	ldr	r6, [r4, #28]
 8011266:	68f3      	ldr	r3, [r6, #12]
 8011268:	b183      	cbz	r3, 801128c <_Balloc+0x50>
 801126a:	69e3      	ldr	r3, [r4, #28]
 801126c:	68db      	ldr	r3, [r3, #12]
 801126e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8011272:	b9b8      	cbnz	r0, 80112a4 <_Balloc+0x68>
 8011274:	2101      	movs	r1, #1
 8011276:	fa01 f605 	lsl.w	r6, r1, r5
 801127a:	1d72      	adds	r2, r6, #5
 801127c:	0092      	lsls	r2, r2, #2
 801127e:	4620      	mov	r0, r4
 8011280:	f000 fdb8 	bl	8011df4 <_calloc_r>
 8011284:	b160      	cbz	r0, 80112a0 <_Balloc+0x64>
 8011286:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801128a:	e00e      	b.n	80112aa <_Balloc+0x6e>
 801128c:	2221      	movs	r2, #33	@ 0x21
 801128e:	2104      	movs	r1, #4
 8011290:	4620      	mov	r0, r4
 8011292:	f000 fdaf 	bl	8011df4 <_calloc_r>
 8011296:	69e3      	ldr	r3, [r4, #28]
 8011298:	60f0      	str	r0, [r6, #12]
 801129a:	68db      	ldr	r3, [r3, #12]
 801129c:	2b00      	cmp	r3, #0
 801129e:	d1e4      	bne.n	801126a <_Balloc+0x2e>
 80112a0:	2000      	movs	r0, #0
 80112a2:	bd70      	pop	{r4, r5, r6, pc}
 80112a4:	6802      	ldr	r2, [r0, #0]
 80112a6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80112aa:	2300      	movs	r3, #0
 80112ac:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80112b0:	e7f7      	b.n	80112a2 <_Balloc+0x66>
 80112b2:	bf00      	nop
 80112b4:	0801268d 	.word	0x0801268d
 80112b8:	0801270d 	.word	0x0801270d

080112bc <_Bfree>:
 80112bc:	b570      	push	{r4, r5, r6, lr}
 80112be:	69c6      	ldr	r6, [r0, #28]
 80112c0:	4605      	mov	r5, r0
 80112c2:	460c      	mov	r4, r1
 80112c4:	b976      	cbnz	r6, 80112e4 <_Bfree+0x28>
 80112c6:	2010      	movs	r0, #16
 80112c8:	f7ff ff02 	bl	80110d0 <malloc>
 80112cc:	4602      	mov	r2, r0
 80112ce:	61e8      	str	r0, [r5, #28]
 80112d0:	b920      	cbnz	r0, 80112dc <_Bfree+0x20>
 80112d2:	4b09      	ldr	r3, [pc, #36]	@ (80112f8 <_Bfree+0x3c>)
 80112d4:	4809      	ldr	r0, [pc, #36]	@ (80112fc <_Bfree+0x40>)
 80112d6:	218f      	movs	r1, #143	@ 0x8f
 80112d8:	f000 fd6e 	bl	8011db8 <__assert_func>
 80112dc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80112e0:	6006      	str	r6, [r0, #0]
 80112e2:	60c6      	str	r6, [r0, #12]
 80112e4:	b13c      	cbz	r4, 80112f6 <_Bfree+0x3a>
 80112e6:	69eb      	ldr	r3, [r5, #28]
 80112e8:	6862      	ldr	r2, [r4, #4]
 80112ea:	68db      	ldr	r3, [r3, #12]
 80112ec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80112f0:	6021      	str	r1, [r4, #0]
 80112f2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80112f6:	bd70      	pop	{r4, r5, r6, pc}
 80112f8:	0801268d 	.word	0x0801268d
 80112fc:	0801270d 	.word	0x0801270d

08011300 <__multadd>:
 8011300:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011304:	690d      	ldr	r5, [r1, #16]
 8011306:	4607      	mov	r7, r0
 8011308:	460c      	mov	r4, r1
 801130a:	461e      	mov	r6, r3
 801130c:	f101 0c14 	add.w	ip, r1, #20
 8011310:	2000      	movs	r0, #0
 8011312:	f8dc 3000 	ldr.w	r3, [ip]
 8011316:	b299      	uxth	r1, r3
 8011318:	fb02 6101 	mla	r1, r2, r1, r6
 801131c:	0c1e      	lsrs	r6, r3, #16
 801131e:	0c0b      	lsrs	r3, r1, #16
 8011320:	fb02 3306 	mla	r3, r2, r6, r3
 8011324:	b289      	uxth	r1, r1
 8011326:	3001      	adds	r0, #1
 8011328:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801132c:	4285      	cmp	r5, r0
 801132e:	f84c 1b04 	str.w	r1, [ip], #4
 8011332:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8011336:	dcec      	bgt.n	8011312 <__multadd+0x12>
 8011338:	b30e      	cbz	r6, 801137e <__multadd+0x7e>
 801133a:	68a3      	ldr	r3, [r4, #8]
 801133c:	42ab      	cmp	r3, r5
 801133e:	dc19      	bgt.n	8011374 <__multadd+0x74>
 8011340:	6861      	ldr	r1, [r4, #4]
 8011342:	4638      	mov	r0, r7
 8011344:	3101      	adds	r1, #1
 8011346:	f7ff ff79 	bl	801123c <_Balloc>
 801134a:	4680      	mov	r8, r0
 801134c:	b928      	cbnz	r0, 801135a <__multadd+0x5a>
 801134e:	4602      	mov	r2, r0
 8011350:	4b0c      	ldr	r3, [pc, #48]	@ (8011384 <__multadd+0x84>)
 8011352:	480d      	ldr	r0, [pc, #52]	@ (8011388 <__multadd+0x88>)
 8011354:	21ba      	movs	r1, #186	@ 0xba
 8011356:	f000 fd2f 	bl	8011db8 <__assert_func>
 801135a:	6922      	ldr	r2, [r4, #16]
 801135c:	3202      	adds	r2, #2
 801135e:	f104 010c 	add.w	r1, r4, #12
 8011362:	0092      	lsls	r2, r2, #2
 8011364:	300c      	adds	r0, #12
 8011366:	f000 fd19 	bl	8011d9c <memcpy>
 801136a:	4621      	mov	r1, r4
 801136c:	4638      	mov	r0, r7
 801136e:	f7ff ffa5 	bl	80112bc <_Bfree>
 8011372:	4644      	mov	r4, r8
 8011374:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8011378:	3501      	adds	r5, #1
 801137a:	615e      	str	r6, [r3, #20]
 801137c:	6125      	str	r5, [r4, #16]
 801137e:	4620      	mov	r0, r4
 8011380:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011384:	080126fc 	.word	0x080126fc
 8011388:	0801270d 	.word	0x0801270d

0801138c <__hi0bits>:
 801138c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8011390:	4603      	mov	r3, r0
 8011392:	bf36      	itet	cc
 8011394:	0403      	lslcc	r3, r0, #16
 8011396:	2000      	movcs	r0, #0
 8011398:	2010      	movcc	r0, #16
 801139a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801139e:	bf3c      	itt	cc
 80113a0:	021b      	lslcc	r3, r3, #8
 80113a2:	3008      	addcc	r0, #8
 80113a4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80113a8:	bf3c      	itt	cc
 80113aa:	011b      	lslcc	r3, r3, #4
 80113ac:	3004      	addcc	r0, #4
 80113ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80113b2:	bf3c      	itt	cc
 80113b4:	009b      	lslcc	r3, r3, #2
 80113b6:	3002      	addcc	r0, #2
 80113b8:	2b00      	cmp	r3, #0
 80113ba:	db05      	blt.n	80113c8 <__hi0bits+0x3c>
 80113bc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80113c0:	f100 0001 	add.w	r0, r0, #1
 80113c4:	bf08      	it	eq
 80113c6:	2020      	moveq	r0, #32
 80113c8:	4770      	bx	lr

080113ca <__lo0bits>:
 80113ca:	6803      	ldr	r3, [r0, #0]
 80113cc:	4602      	mov	r2, r0
 80113ce:	f013 0007 	ands.w	r0, r3, #7
 80113d2:	d00b      	beq.n	80113ec <__lo0bits+0x22>
 80113d4:	07d9      	lsls	r1, r3, #31
 80113d6:	d421      	bmi.n	801141c <__lo0bits+0x52>
 80113d8:	0798      	lsls	r0, r3, #30
 80113da:	bf49      	itett	mi
 80113dc:	085b      	lsrmi	r3, r3, #1
 80113de:	089b      	lsrpl	r3, r3, #2
 80113e0:	2001      	movmi	r0, #1
 80113e2:	6013      	strmi	r3, [r2, #0]
 80113e4:	bf5c      	itt	pl
 80113e6:	6013      	strpl	r3, [r2, #0]
 80113e8:	2002      	movpl	r0, #2
 80113ea:	4770      	bx	lr
 80113ec:	b299      	uxth	r1, r3
 80113ee:	b909      	cbnz	r1, 80113f4 <__lo0bits+0x2a>
 80113f0:	0c1b      	lsrs	r3, r3, #16
 80113f2:	2010      	movs	r0, #16
 80113f4:	b2d9      	uxtb	r1, r3
 80113f6:	b909      	cbnz	r1, 80113fc <__lo0bits+0x32>
 80113f8:	3008      	adds	r0, #8
 80113fa:	0a1b      	lsrs	r3, r3, #8
 80113fc:	0719      	lsls	r1, r3, #28
 80113fe:	bf04      	itt	eq
 8011400:	091b      	lsreq	r3, r3, #4
 8011402:	3004      	addeq	r0, #4
 8011404:	0799      	lsls	r1, r3, #30
 8011406:	bf04      	itt	eq
 8011408:	089b      	lsreq	r3, r3, #2
 801140a:	3002      	addeq	r0, #2
 801140c:	07d9      	lsls	r1, r3, #31
 801140e:	d403      	bmi.n	8011418 <__lo0bits+0x4e>
 8011410:	085b      	lsrs	r3, r3, #1
 8011412:	f100 0001 	add.w	r0, r0, #1
 8011416:	d003      	beq.n	8011420 <__lo0bits+0x56>
 8011418:	6013      	str	r3, [r2, #0]
 801141a:	4770      	bx	lr
 801141c:	2000      	movs	r0, #0
 801141e:	4770      	bx	lr
 8011420:	2020      	movs	r0, #32
 8011422:	4770      	bx	lr

08011424 <__i2b>:
 8011424:	b510      	push	{r4, lr}
 8011426:	460c      	mov	r4, r1
 8011428:	2101      	movs	r1, #1
 801142a:	f7ff ff07 	bl	801123c <_Balloc>
 801142e:	4602      	mov	r2, r0
 8011430:	b928      	cbnz	r0, 801143e <__i2b+0x1a>
 8011432:	4b05      	ldr	r3, [pc, #20]	@ (8011448 <__i2b+0x24>)
 8011434:	4805      	ldr	r0, [pc, #20]	@ (801144c <__i2b+0x28>)
 8011436:	f240 1145 	movw	r1, #325	@ 0x145
 801143a:	f000 fcbd 	bl	8011db8 <__assert_func>
 801143e:	2301      	movs	r3, #1
 8011440:	6144      	str	r4, [r0, #20]
 8011442:	6103      	str	r3, [r0, #16]
 8011444:	bd10      	pop	{r4, pc}
 8011446:	bf00      	nop
 8011448:	080126fc 	.word	0x080126fc
 801144c:	0801270d 	.word	0x0801270d

08011450 <__multiply>:
 8011450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011454:	4614      	mov	r4, r2
 8011456:	690a      	ldr	r2, [r1, #16]
 8011458:	6923      	ldr	r3, [r4, #16]
 801145a:	429a      	cmp	r2, r3
 801145c:	bfa8      	it	ge
 801145e:	4623      	movge	r3, r4
 8011460:	460f      	mov	r7, r1
 8011462:	bfa4      	itt	ge
 8011464:	460c      	movge	r4, r1
 8011466:	461f      	movge	r7, r3
 8011468:	f8d4 a010 	ldr.w	sl, [r4, #16]
 801146c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8011470:	68a3      	ldr	r3, [r4, #8]
 8011472:	6861      	ldr	r1, [r4, #4]
 8011474:	eb0a 0609 	add.w	r6, sl, r9
 8011478:	42b3      	cmp	r3, r6
 801147a:	b085      	sub	sp, #20
 801147c:	bfb8      	it	lt
 801147e:	3101      	addlt	r1, #1
 8011480:	f7ff fedc 	bl	801123c <_Balloc>
 8011484:	b930      	cbnz	r0, 8011494 <__multiply+0x44>
 8011486:	4602      	mov	r2, r0
 8011488:	4b44      	ldr	r3, [pc, #272]	@ (801159c <__multiply+0x14c>)
 801148a:	4845      	ldr	r0, [pc, #276]	@ (80115a0 <__multiply+0x150>)
 801148c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8011490:	f000 fc92 	bl	8011db8 <__assert_func>
 8011494:	f100 0514 	add.w	r5, r0, #20
 8011498:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801149c:	462b      	mov	r3, r5
 801149e:	2200      	movs	r2, #0
 80114a0:	4543      	cmp	r3, r8
 80114a2:	d321      	bcc.n	80114e8 <__multiply+0x98>
 80114a4:	f107 0114 	add.w	r1, r7, #20
 80114a8:	f104 0214 	add.w	r2, r4, #20
 80114ac:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80114b0:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80114b4:	9302      	str	r3, [sp, #8]
 80114b6:	1b13      	subs	r3, r2, r4
 80114b8:	3b15      	subs	r3, #21
 80114ba:	f023 0303 	bic.w	r3, r3, #3
 80114be:	3304      	adds	r3, #4
 80114c0:	f104 0715 	add.w	r7, r4, #21
 80114c4:	42ba      	cmp	r2, r7
 80114c6:	bf38      	it	cc
 80114c8:	2304      	movcc	r3, #4
 80114ca:	9301      	str	r3, [sp, #4]
 80114cc:	9b02      	ldr	r3, [sp, #8]
 80114ce:	9103      	str	r1, [sp, #12]
 80114d0:	428b      	cmp	r3, r1
 80114d2:	d80c      	bhi.n	80114ee <__multiply+0x9e>
 80114d4:	2e00      	cmp	r6, #0
 80114d6:	dd03      	ble.n	80114e0 <__multiply+0x90>
 80114d8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80114dc:	2b00      	cmp	r3, #0
 80114de:	d05b      	beq.n	8011598 <__multiply+0x148>
 80114e0:	6106      	str	r6, [r0, #16]
 80114e2:	b005      	add	sp, #20
 80114e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80114e8:	f843 2b04 	str.w	r2, [r3], #4
 80114ec:	e7d8      	b.n	80114a0 <__multiply+0x50>
 80114ee:	f8b1 a000 	ldrh.w	sl, [r1]
 80114f2:	f1ba 0f00 	cmp.w	sl, #0
 80114f6:	d024      	beq.n	8011542 <__multiply+0xf2>
 80114f8:	f104 0e14 	add.w	lr, r4, #20
 80114fc:	46a9      	mov	r9, r5
 80114fe:	f04f 0c00 	mov.w	ip, #0
 8011502:	f85e 7b04 	ldr.w	r7, [lr], #4
 8011506:	f8d9 3000 	ldr.w	r3, [r9]
 801150a:	fa1f fb87 	uxth.w	fp, r7
 801150e:	b29b      	uxth	r3, r3
 8011510:	fb0a 330b 	mla	r3, sl, fp, r3
 8011514:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8011518:	f8d9 7000 	ldr.w	r7, [r9]
 801151c:	4463      	add	r3, ip
 801151e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8011522:	fb0a c70b 	mla	r7, sl, fp, ip
 8011526:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 801152a:	b29b      	uxth	r3, r3
 801152c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8011530:	4572      	cmp	r2, lr
 8011532:	f849 3b04 	str.w	r3, [r9], #4
 8011536:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801153a:	d8e2      	bhi.n	8011502 <__multiply+0xb2>
 801153c:	9b01      	ldr	r3, [sp, #4]
 801153e:	f845 c003 	str.w	ip, [r5, r3]
 8011542:	9b03      	ldr	r3, [sp, #12]
 8011544:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8011548:	3104      	adds	r1, #4
 801154a:	f1b9 0f00 	cmp.w	r9, #0
 801154e:	d021      	beq.n	8011594 <__multiply+0x144>
 8011550:	682b      	ldr	r3, [r5, #0]
 8011552:	f104 0c14 	add.w	ip, r4, #20
 8011556:	46ae      	mov	lr, r5
 8011558:	f04f 0a00 	mov.w	sl, #0
 801155c:	f8bc b000 	ldrh.w	fp, [ip]
 8011560:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8011564:	fb09 770b 	mla	r7, r9, fp, r7
 8011568:	4457      	add	r7, sl
 801156a:	b29b      	uxth	r3, r3
 801156c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8011570:	f84e 3b04 	str.w	r3, [lr], #4
 8011574:	f85c 3b04 	ldr.w	r3, [ip], #4
 8011578:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801157c:	f8be 3000 	ldrh.w	r3, [lr]
 8011580:	fb09 330a 	mla	r3, r9, sl, r3
 8011584:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8011588:	4562      	cmp	r2, ip
 801158a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801158e:	d8e5      	bhi.n	801155c <__multiply+0x10c>
 8011590:	9f01      	ldr	r7, [sp, #4]
 8011592:	51eb      	str	r3, [r5, r7]
 8011594:	3504      	adds	r5, #4
 8011596:	e799      	b.n	80114cc <__multiply+0x7c>
 8011598:	3e01      	subs	r6, #1
 801159a:	e79b      	b.n	80114d4 <__multiply+0x84>
 801159c:	080126fc 	.word	0x080126fc
 80115a0:	0801270d 	.word	0x0801270d

080115a4 <__pow5mult>:
 80115a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80115a8:	4615      	mov	r5, r2
 80115aa:	f012 0203 	ands.w	r2, r2, #3
 80115ae:	4607      	mov	r7, r0
 80115b0:	460e      	mov	r6, r1
 80115b2:	d007      	beq.n	80115c4 <__pow5mult+0x20>
 80115b4:	4c25      	ldr	r4, [pc, #148]	@ (801164c <__pow5mult+0xa8>)
 80115b6:	3a01      	subs	r2, #1
 80115b8:	2300      	movs	r3, #0
 80115ba:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80115be:	f7ff fe9f 	bl	8011300 <__multadd>
 80115c2:	4606      	mov	r6, r0
 80115c4:	10ad      	asrs	r5, r5, #2
 80115c6:	d03d      	beq.n	8011644 <__pow5mult+0xa0>
 80115c8:	69fc      	ldr	r4, [r7, #28]
 80115ca:	b97c      	cbnz	r4, 80115ec <__pow5mult+0x48>
 80115cc:	2010      	movs	r0, #16
 80115ce:	f7ff fd7f 	bl	80110d0 <malloc>
 80115d2:	4602      	mov	r2, r0
 80115d4:	61f8      	str	r0, [r7, #28]
 80115d6:	b928      	cbnz	r0, 80115e4 <__pow5mult+0x40>
 80115d8:	4b1d      	ldr	r3, [pc, #116]	@ (8011650 <__pow5mult+0xac>)
 80115da:	481e      	ldr	r0, [pc, #120]	@ (8011654 <__pow5mult+0xb0>)
 80115dc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80115e0:	f000 fbea 	bl	8011db8 <__assert_func>
 80115e4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80115e8:	6004      	str	r4, [r0, #0]
 80115ea:	60c4      	str	r4, [r0, #12]
 80115ec:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80115f0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80115f4:	b94c      	cbnz	r4, 801160a <__pow5mult+0x66>
 80115f6:	f240 2171 	movw	r1, #625	@ 0x271
 80115fa:	4638      	mov	r0, r7
 80115fc:	f7ff ff12 	bl	8011424 <__i2b>
 8011600:	2300      	movs	r3, #0
 8011602:	f8c8 0008 	str.w	r0, [r8, #8]
 8011606:	4604      	mov	r4, r0
 8011608:	6003      	str	r3, [r0, #0]
 801160a:	f04f 0900 	mov.w	r9, #0
 801160e:	07eb      	lsls	r3, r5, #31
 8011610:	d50a      	bpl.n	8011628 <__pow5mult+0x84>
 8011612:	4631      	mov	r1, r6
 8011614:	4622      	mov	r2, r4
 8011616:	4638      	mov	r0, r7
 8011618:	f7ff ff1a 	bl	8011450 <__multiply>
 801161c:	4631      	mov	r1, r6
 801161e:	4680      	mov	r8, r0
 8011620:	4638      	mov	r0, r7
 8011622:	f7ff fe4b 	bl	80112bc <_Bfree>
 8011626:	4646      	mov	r6, r8
 8011628:	106d      	asrs	r5, r5, #1
 801162a:	d00b      	beq.n	8011644 <__pow5mult+0xa0>
 801162c:	6820      	ldr	r0, [r4, #0]
 801162e:	b938      	cbnz	r0, 8011640 <__pow5mult+0x9c>
 8011630:	4622      	mov	r2, r4
 8011632:	4621      	mov	r1, r4
 8011634:	4638      	mov	r0, r7
 8011636:	f7ff ff0b 	bl	8011450 <__multiply>
 801163a:	6020      	str	r0, [r4, #0]
 801163c:	f8c0 9000 	str.w	r9, [r0]
 8011640:	4604      	mov	r4, r0
 8011642:	e7e4      	b.n	801160e <__pow5mult+0x6a>
 8011644:	4630      	mov	r0, r6
 8011646:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801164a:	bf00      	nop
 801164c:	08012768 	.word	0x08012768
 8011650:	0801268d 	.word	0x0801268d
 8011654:	0801270d 	.word	0x0801270d

08011658 <__lshift>:
 8011658:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801165c:	460c      	mov	r4, r1
 801165e:	6849      	ldr	r1, [r1, #4]
 8011660:	6923      	ldr	r3, [r4, #16]
 8011662:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8011666:	68a3      	ldr	r3, [r4, #8]
 8011668:	4607      	mov	r7, r0
 801166a:	4691      	mov	r9, r2
 801166c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011670:	f108 0601 	add.w	r6, r8, #1
 8011674:	42b3      	cmp	r3, r6
 8011676:	db0b      	blt.n	8011690 <__lshift+0x38>
 8011678:	4638      	mov	r0, r7
 801167a:	f7ff fddf 	bl	801123c <_Balloc>
 801167e:	4605      	mov	r5, r0
 8011680:	b948      	cbnz	r0, 8011696 <__lshift+0x3e>
 8011682:	4602      	mov	r2, r0
 8011684:	4b28      	ldr	r3, [pc, #160]	@ (8011728 <__lshift+0xd0>)
 8011686:	4829      	ldr	r0, [pc, #164]	@ (801172c <__lshift+0xd4>)
 8011688:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 801168c:	f000 fb94 	bl	8011db8 <__assert_func>
 8011690:	3101      	adds	r1, #1
 8011692:	005b      	lsls	r3, r3, #1
 8011694:	e7ee      	b.n	8011674 <__lshift+0x1c>
 8011696:	2300      	movs	r3, #0
 8011698:	f100 0114 	add.w	r1, r0, #20
 801169c:	f100 0210 	add.w	r2, r0, #16
 80116a0:	4618      	mov	r0, r3
 80116a2:	4553      	cmp	r3, sl
 80116a4:	db33      	blt.n	801170e <__lshift+0xb6>
 80116a6:	6920      	ldr	r0, [r4, #16]
 80116a8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80116ac:	f104 0314 	add.w	r3, r4, #20
 80116b0:	f019 091f 	ands.w	r9, r9, #31
 80116b4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80116b8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80116bc:	d02b      	beq.n	8011716 <__lshift+0xbe>
 80116be:	f1c9 0e20 	rsb	lr, r9, #32
 80116c2:	468a      	mov	sl, r1
 80116c4:	2200      	movs	r2, #0
 80116c6:	6818      	ldr	r0, [r3, #0]
 80116c8:	fa00 f009 	lsl.w	r0, r0, r9
 80116cc:	4310      	orrs	r0, r2
 80116ce:	f84a 0b04 	str.w	r0, [sl], #4
 80116d2:	f853 2b04 	ldr.w	r2, [r3], #4
 80116d6:	459c      	cmp	ip, r3
 80116d8:	fa22 f20e 	lsr.w	r2, r2, lr
 80116dc:	d8f3      	bhi.n	80116c6 <__lshift+0x6e>
 80116de:	ebac 0304 	sub.w	r3, ip, r4
 80116e2:	3b15      	subs	r3, #21
 80116e4:	f023 0303 	bic.w	r3, r3, #3
 80116e8:	3304      	adds	r3, #4
 80116ea:	f104 0015 	add.w	r0, r4, #21
 80116ee:	4584      	cmp	ip, r0
 80116f0:	bf38      	it	cc
 80116f2:	2304      	movcc	r3, #4
 80116f4:	50ca      	str	r2, [r1, r3]
 80116f6:	b10a      	cbz	r2, 80116fc <__lshift+0xa4>
 80116f8:	f108 0602 	add.w	r6, r8, #2
 80116fc:	3e01      	subs	r6, #1
 80116fe:	4638      	mov	r0, r7
 8011700:	612e      	str	r6, [r5, #16]
 8011702:	4621      	mov	r1, r4
 8011704:	f7ff fdda 	bl	80112bc <_Bfree>
 8011708:	4628      	mov	r0, r5
 801170a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801170e:	f842 0f04 	str.w	r0, [r2, #4]!
 8011712:	3301      	adds	r3, #1
 8011714:	e7c5      	b.n	80116a2 <__lshift+0x4a>
 8011716:	3904      	subs	r1, #4
 8011718:	f853 2b04 	ldr.w	r2, [r3], #4
 801171c:	f841 2f04 	str.w	r2, [r1, #4]!
 8011720:	459c      	cmp	ip, r3
 8011722:	d8f9      	bhi.n	8011718 <__lshift+0xc0>
 8011724:	e7ea      	b.n	80116fc <__lshift+0xa4>
 8011726:	bf00      	nop
 8011728:	080126fc 	.word	0x080126fc
 801172c:	0801270d 	.word	0x0801270d

08011730 <__mcmp>:
 8011730:	690a      	ldr	r2, [r1, #16]
 8011732:	4603      	mov	r3, r0
 8011734:	6900      	ldr	r0, [r0, #16]
 8011736:	1a80      	subs	r0, r0, r2
 8011738:	b530      	push	{r4, r5, lr}
 801173a:	d10e      	bne.n	801175a <__mcmp+0x2a>
 801173c:	3314      	adds	r3, #20
 801173e:	3114      	adds	r1, #20
 8011740:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8011744:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8011748:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801174c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8011750:	4295      	cmp	r5, r2
 8011752:	d003      	beq.n	801175c <__mcmp+0x2c>
 8011754:	d205      	bcs.n	8011762 <__mcmp+0x32>
 8011756:	f04f 30ff 	mov.w	r0, #4294967295
 801175a:	bd30      	pop	{r4, r5, pc}
 801175c:	42a3      	cmp	r3, r4
 801175e:	d3f3      	bcc.n	8011748 <__mcmp+0x18>
 8011760:	e7fb      	b.n	801175a <__mcmp+0x2a>
 8011762:	2001      	movs	r0, #1
 8011764:	e7f9      	b.n	801175a <__mcmp+0x2a>
	...

08011768 <__mdiff>:
 8011768:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801176c:	4689      	mov	r9, r1
 801176e:	4606      	mov	r6, r0
 8011770:	4611      	mov	r1, r2
 8011772:	4648      	mov	r0, r9
 8011774:	4614      	mov	r4, r2
 8011776:	f7ff ffdb 	bl	8011730 <__mcmp>
 801177a:	1e05      	subs	r5, r0, #0
 801177c:	d112      	bne.n	80117a4 <__mdiff+0x3c>
 801177e:	4629      	mov	r1, r5
 8011780:	4630      	mov	r0, r6
 8011782:	f7ff fd5b 	bl	801123c <_Balloc>
 8011786:	4602      	mov	r2, r0
 8011788:	b928      	cbnz	r0, 8011796 <__mdiff+0x2e>
 801178a:	4b3f      	ldr	r3, [pc, #252]	@ (8011888 <__mdiff+0x120>)
 801178c:	f240 2137 	movw	r1, #567	@ 0x237
 8011790:	483e      	ldr	r0, [pc, #248]	@ (801188c <__mdiff+0x124>)
 8011792:	f000 fb11 	bl	8011db8 <__assert_func>
 8011796:	2301      	movs	r3, #1
 8011798:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801179c:	4610      	mov	r0, r2
 801179e:	b003      	add	sp, #12
 80117a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80117a4:	bfbc      	itt	lt
 80117a6:	464b      	movlt	r3, r9
 80117a8:	46a1      	movlt	r9, r4
 80117aa:	4630      	mov	r0, r6
 80117ac:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80117b0:	bfba      	itte	lt
 80117b2:	461c      	movlt	r4, r3
 80117b4:	2501      	movlt	r5, #1
 80117b6:	2500      	movge	r5, #0
 80117b8:	f7ff fd40 	bl	801123c <_Balloc>
 80117bc:	4602      	mov	r2, r0
 80117be:	b918      	cbnz	r0, 80117c8 <__mdiff+0x60>
 80117c0:	4b31      	ldr	r3, [pc, #196]	@ (8011888 <__mdiff+0x120>)
 80117c2:	f240 2145 	movw	r1, #581	@ 0x245
 80117c6:	e7e3      	b.n	8011790 <__mdiff+0x28>
 80117c8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80117cc:	6926      	ldr	r6, [r4, #16]
 80117ce:	60c5      	str	r5, [r0, #12]
 80117d0:	f109 0310 	add.w	r3, r9, #16
 80117d4:	f109 0514 	add.w	r5, r9, #20
 80117d8:	f104 0e14 	add.w	lr, r4, #20
 80117dc:	f100 0b14 	add.w	fp, r0, #20
 80117e0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80117e4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80117e8:	9301      	str	r3, [sp, #4]
 80117ea:	46d9      	mov	r9, fp
 80117ec:	f04f 0c00 	mov.w	ip, #0
 80117f0:	9b01      	ldr	r3, [sp, #4]
 80117f2:	f85e 0b04 	ldr.w	r0, [lr], #4
 80117f6:	f853 af04 	ldr.w	sl, [r3, #4]!
 80117fa:	9301      	str	r3, [sp, #4]
 80117fc:	fa1f f38a 	uxth.w	r3, sl
 8011800:	4619      	mov	r1, r3
 8011802:	b283      	uxth	r3, r0
 8011804:	1acb      	subs	r3, r1, r3
 8011806:	0c00      	lsrs	r0, r0, #16
 8011808:	4463      	add	r3, ip
 801180a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801180e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8011812:	b29b      	uxth	r3, r3
 8011814:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8011818:	4576      	cmp	r6, lr
 801181a:	f849 3b04 	str.w	r3, [r9], #4
 801181e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8011822:	d8e5      	bhi.n	80117f0 <__mdiff+0x88>
 8011824:	1b33      	subs	r3, r6, r4
 8011826:	3b15      	subs	r3, #21
 8011828:	f023 0303 	bic.w	r3, r3, #3
 801182c:	3415      	adds	r4, #21
 801182e:	3304      	adds	r3, #4
 8011830:	42a6      	cmp	r6, r4
 8011832:	bf38      	it	cc
 8011834:	2304      	movcc	r3, #4
 8011836:	441d      	add	r5, r3
 8011838:	445b      	add	r3, fp
 801183a:	461e      	mov	r6, r3
 801183c:	462c      	mov	r4, r5
 801183e:	4544      	cmp	r4, r8
 8011840:	d30e      	bcc.n	8011860 <__mdiff+0xf8>
 8011842:	f108 0103 	add.w	r1, r8, #3
 8011846:	1b49      	subs	r1, r1, r5
 8011848:	f021 0103 	bic.w	r1, r1, #3
 801184c:	3d03      	subs	r5, #3
 801184e:	45a8      	cmp	r8, r5
 8011850:	bf38      	it	cc
 8011852:	2100      	movcc	r1, #0
 8011854:	440b      	add	r3, r1
 8011856:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801185a:	b191      	cbz	r1, 8011882 <__mdiff+0x11a>
 801185c:	6117      	str	r7, [r2, #16]
 801185e:	e79d      	b.n	801179c <__mdiff+0x34>
 8011860:	f854 1b04 	ldr.w	r1, [r4], #4
 8011864:	46e6      	mov	lr, ip
 8011866:	0c08      	lsrs	r0, r1, #16
 8011868:	fa1c fc81 	uxtah	ip, ip, r1
 801186c:	4471      	add	r1, lr
 801186e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8011872:	b289      	uxth	r1, r1
 8011874:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8011878:	f846 1b04 	str.w	r1, [r6], #4
 801187c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8011880:	e7dd      	b.n	801183e <__mdiff+0xd6>
 8011882:	3f01      	subs	r7, #1
 8011884:	e7e7      	b.n	8011856 <__mdiff+0xee>
 8011886:	bf00      	nop
 8011888:	080126fc 	.word	0x080126fc
 801188c:	0801270d 	.word	0x0801270d

08011890 <__d2b>:
 8011890:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011894:	460f      	mov	r7, r1
 8011896:	2101      	movs	r1, #1
 8011898:	ec59 8b10 	vmov	r8, r9, d0
 801189c:	4616      	mov	r6, r2
 801189e:	f7ff fccd 	bl	801123c <_Balloc>
 80118a2:	4604      	mov	r4, r0
 80118a4:	b930      	cbnz	r0, 80118b4 <__d2b+0x24>
 80118a6:	4602      	mov	r2, r0
 80118a8:	4b23      	ldr	r3, [pc, #140]	@ (8011938 <__d2b+0xa8>)
 80118aa:	4824      	ldr	r0, [pc, #144]	@ (801193c <__d2b+0xac>)
 80118ac:	f240 310f 	movw	r1, #783	@ 0x30f
 80118b0:	f000 fa82 	bl	8011db8 <__assert_func>
 80118b4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80118b8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80118bc:	b10d      	cbz	r5, 80118c2 <__d2b+0x32>
 80118be:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80118c2:	9301      	str	r3, [sp, #4]
 80118c4:	f1b8 0300 	subs.w	r3, r8, #0
 80118c8:	d023      	beq.n	8011912 <__d2b+0x82>
 80118ca:	4668      	mov	r0, sp
 80118cc:	9300      	str	r3, [sp, #0]
 80118ce:	f7ff fd7c 	bl	80113ca <__lo0bits>
 80118d2:	e9dd 1200 	ldrd	r1, r2, [sp]
 80118d6:	b1d0      	cbz	r0, 801190e <__d2b+0x7e>
 80118d8:	f1c0 0320 	rsb	r3, r0, #32
 80118dc:	fa02 f303 	lsl.w	r3, r2, r3
 80118e0:	430b      	orrs	r3, r1
 80118e2:	40c2      	lsrs	r2, r0
 80118e4:	6163      	str	r3, [r4, #20]
 80118e6:	9201      	str	r2, [sp, #4]
 80118e8:	9b01      	ldr	r3, [sp, #4]
 80118ea:	61a3      	str	r3, [r4, #24]
 80118ec:	2b00      	cmp	r3, #0
 80118ee:	bf0c      	ite	eq
 80118f0:	2201      	moveq	r2, #1
 80118f2:	2202      	movne	r2, #2
 80118f4:	6122      	str	r2, [r4, #16]
 80118f6:	b1a5      	cbz	r5, 8011922 <__d2b+0x92>
 80118f8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80118fc:	4405      	add	r5, r0
 80118fe:	603d      	str	r5, [r7, #0]
 8011900:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8011904:	6030      	str	r0, [r6, #0]
 8011906:	4620      	mov	r0, r4
 8011908:	b003      	add	sp, #12
 801190a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801190e:	6161      	str	r1, [r4, #20]
 8011910:	e7ea      	b.n	80118e8 <__d2b+0x58>
 8011912:	a801      	add	r0, sp, #4
 8011914:	f7ff fd59 	bl	80113ca <__lo0bits>
 8011918:	9b01      	ldr	r3, [sp, #4]
 801191a:	6163      	str	r3, [r4, #20]
 801191c:	3020      	adds	r0, #32
 801191e:	2201      	movs	r2, #1
 8011920:	e7e8      	b.n	80118f4 <__d2b+0x64>
 8011922:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011926:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801192a:	6038      	str	r0, [r7, #0]
 801192c:	6918      	ldr	r0, [r3, #16]
 801192e:	f7ff fd2d 	bl	801138c <__hi0bits>
 8011932:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8011936:	e7e5      	b.n	8011904 <__d2b+0x74>
 8011938:	080126fc 	.word	0x080126fc
 801193c:	0801270d 	.word	0x0801270d

08011940 <__ssputs_r>:
 8011940:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011944:	688e      	ldr	r6, [r1, #8]
 8011946:	461f      	mov	r7, r3
 8011948:	42be      	cmp	r6, r7
 801194a:	680b      	ldr	r3, [r1, #0]
 801194c:	4682      	mov	sl, r0
 801194e:	460c      	mov	r4, r1
 8011950:	4690      	mov	r8, r2
 8011952:	d82d      	bhi.n	80119b0 <__ssputs_r+0x70>
 8011954:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011958:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801195c:	d026      	beq.n	80119ac <__ssputs_r+0x6c>
 801195e:	6965      	ldr	r5, [r4, #20]
 8011960:	6909      	ldr	r1, [r1, #16]
 8011962:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011966:	eba3 0901 	sub.w	r9, r3, r1
 801196a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801196e:	1c7b      	adds	r3, r7, #1
 8011970:	444b      	add	r3, r9
 8011972:	106d      	asrs	r5, r5, #1
 8011974:	429d      	cmp	r5, r3
 8011976:	bf38      	it	cc
 8011978:	461d      	movcc	r5, r3
 801197a:	0553      	lsls	r3, r2, #21
 801197c:	d527      	bpl.n	80119ce <__ssputs_r+0x8e>
 801197e:	4629      	mov	r1, r5
 8011980:	f7ff fbd0 	bl	8011124 <_malloc_r>
 8011984:	4606      	mov	r6, r0
 8011986:	b360      	cbz	r0, 80119e2 <__ssputs_r+0xa2>
 8011988:	6921      	ldr	r1, [r4, #16]
 801198a:	464a      	mov	r2, r9
 801198c:	f000 fa06 	bl	8011d9c <memcpy>
 8011990:	89a3      	ldrh	r3, [r4, #12]
 8011992:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8011996:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801199a:	81a3      	strh	r3, [r4, #12]
 801199c:	6126      	str	r6, [r4, #16]
 801199e:	6165      	str	r5, [r4, #20]
 80119a0:	444e      	add	r6, r9
 80119a2:	eba5 0509 	sub.w	r5, r5, r9
 80119a6:	6026      	str	r6, [r4, #0]
 80119a8:	60a5      	str	r5, [r4, #8]
 80119aa:	463e      	mov	r6, r7
 80119ac:	42be      	cmp	r6, r7
 80119ae:	d900      	bls.n	80119b2 <__ssputs_r+0x72>
 80119b0:	463e      	mov	r6, r7
 80119b2:	6820      	ldr	r0, [r4, #0]
 80119b4:	4632      	mov	r2, r6
 80119b6:	4641      	mov	r1, r8
 80119b8:	f000 f9c6 	bl	8011d48 <memmove>
 80119bc:	68a3      	ldr	r3, [r4, #8]
 80119be:	1b9b      	subs	r3, r3, r6
 80119c0:	60a3      	str	r3, [r4, #8]
 80119c2:	6823      	ldr	r3, [r4, #0]
 80119c4:	4433      	add	r3, r6
 80119c6:	6023      	str	r3, [r4, #0]
 80119c8:	2000      	movs	r0, #0
 80119ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80119ce:	462a      	mov	r2, r5
 80119d0:	f000 fa36 	bl	8011e40 <_realloc_r>
 80119d4:	4606      	mov	r6, r0
 80119d6:	2800      	cmp	r0, #0
 80119d8:	d1e0      	bne.n	801199c <__ssputs_r+0x5c>
 80119da:	6921      	ldr	r1, [r4, #16]
 80119dc:	4650      	mov	r0, sl
 80119de:	f7ff fb2d 	bl	801103c <_free_r>
 80119e2:	230c      	movs	r3, #12
 80119e4:	f8ca 3000 	str.w	r3, [sl]
 80119e8:	89a3      	ldrh	r3, [r4, #12]
 80119ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80119ee:	81a3      	strh	r3, [r4, #12]
 80119f0:	f04f 30ff 	mov.w	r0, #4294967295
 80119f4:	e7e9      	b.n	80119ca <__ssputs_r+0x8a>
	...

080119f8 <_svfiprintf_r>:
 80119f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80119fc:	4698      	mov	r8, r3
 80119fe:	898b      	ldrh	r3, [r1, #12]
 8011a00:	061b      	lsls	r3, r3, #24
 8011a02:	b09d      	sub	sp, #116	@ 0x74
 8011a04:	4607      	mov	r7, r0
 8011a06:	460d      	mov	r5, r1
 8011a08:	4614      	mov	r4, r2
 8011a0a:	d510      	bpl.n	8011a2e <_svfiprintf_r+0x36>
 8011a0c:	690b      	ldr	r3, [r1, #16]
 8011a0e:	b973      	cbnz	r3, 8011a2e <_svfiprintf_r+0x36>
 8011a10:	2140      	movs	r1, #64	@ 0x40
 8011a12:	f7ff fb87 	bl	8011124 <_malloc_r>
 8011a16:	6028      	str	r0, [r5, #0]
 8011a18:	6128      	str	r0, [r5, #16]
 8011a1a:	b930      	cbnz	r0, 8011a2a <_svfiprintf_r+0x32>
 8011a1c:	230c      	movs	r3, #12
 8011a1e:	603b      	str	r3, [r7, #0]
 8011a20:	f04f 30ff 	mov.w	r0, #4294967295
 8011a24:	b01d      	add	sp, #116	@ 0x74
 8011a26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011a2a:	2340      	movs	r3, #64	@ 0x40
 8011a2c:	616b      	str	r3, [r5, #20]
 8011a2e:	2300      	movs	r3, #0
 8011a30:	9309      	str	r3, [sp, #36]	@ 0x24
 8011a32:	2320      	movs	r3, #32
 8011a34:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011a38:	f8cd 800c 	str.w	r8, [sp, #12]
 8011a3c:	2330      	movs	r3, #48	@ 0x30
 8011a3e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8011bdc <_svfiprintf_r+0x1e4>
 8011a42:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011a46:	f04f 0901 	mov.w	r9, #1
 8011a4a:	4623      	mov	r3, r4
 8011a4c:	469a      	mov	sl, r3
 8011a4e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011a52:	b10a      	cbz	r2, 8011a58 <_svfiprintf_r+0x60>
 8011a54:	2a25      	cmp	r2, #37	@ 0x25
 8011a56:	d1f9      	bne.n	8011a4c <_svfiprintf_r+0x54>
 8011a58:	ebba 0b04 	subs.w	fp, sl, r4
 8011a5c:	d00b      	beq.n	8011a76 <_svfiprintf_r+0x7e>
 8011a5e:	465b      	mov	r3, fp
 8011a60:	4622      	mov	r2, r4
 8011a62:	4629      	mov	r1, r5
 8011a64:	4638      	mov	r0, r7
 8011a66:	f7ff ff6b 	bl	8011940 <__ssputs_r>
 8011a6a:	3001      	adds	r0, #1
 8011a6c:	f000 80a7 	beq.w	8011bbe <_svfiprintf_r+0x1c6>
 8011a70:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011a72:	445a      	add	r2, fp
 8011a74:	9209      	str	r2, [sp, #36]	@ 0x24
 8011a76:	f89a 3000 	ldrb.w	r3, [sl]
 8011a7a:	2b00      	cmp	r3, #0
 8011a7c:	f000 809f 	beq.w	8011bbe <_svfiprintf_r+0x1c6>
 8011a80:	2300      	movs	r3, #0
 8011a82:	f04f 32ff 	mov.w	r2, #4294967295
 8011a86:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011a8a:	f10a 0a01 	add.w	sl, sl, #1
 8011a8e:	9304      	str	r3, [sp, #16]
 8011a90:	9307      	str	r3, [sp, #28]
 8011a92:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011a96:	931a      	str	r3, [sp, #104]	@ 0x68
 8011a98:	4654      	mov	r4, sl
 8011a9a:	2205      	movs	r2, #5
 8011a9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011aa0:	484e      	ldr	r0, [pc, #312]	@ (8011bdc <_svfiprintf_r+0x1e4>)
 8011aa2:	f7ee fc1d 	bl	80002e0 <memchr>
 8011aa6:	9a04      	ldr	r2, [sp, #16]
 8011aa8:	b9d8      	cbnz	r0, 8011ae2 <_svfiprintf_r+0xea>
 8011aaa:	06d0      	lsls	r0, r2, #27
 8011aac:	bf44      	itt	mi
 8011aae:	2320      	movmi	r3, #32
 8011ab0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011ab4:	0711      	lsls	r1, r2, #28
 8011ab6:	bf44      	itt	mi
 8011ab8:	232b      	movmi	r3, #43	@ 0x2b
 8011aba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011abe:	f89a 3000 	ldrb.w	r3, [sl]
 8011ac2:	2b2a      	cmp	r3, #42	@ 0x2a
 8011ac4:	d015      	beq.n	8011af2 <_svfiprintf_r+0xfa>
 8011ac6:	9a07      	ldr	r2, [sp, #28]
 8011ac8:	4654      	mov	r4, sl
 8011aca:	2000      	movs	r0, #0
 8011acc:	f04f 0c0a 	mov.w	ip, #10
 8011ad0:	4621      	mov	r1, r4
 8011ad2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011ad6:	3b30      	subs	r3, #48	@ 0x30
 8011ad8:	2b09      	cmp	r3, #9
 8011ada:	d94b      	bls.n	8011b74 <_svfiprintf_r+0x17c>
 8011adc:	b1b0      	cbz	r0, 8011b0c <_svfiprintf_r+0x114>
 8011ade:	9207      	str	r2, [sp, #28]
 8011ae0:	e014      	b.n	8011b0c <_svfiprintf_r+0x114>
 8011ae2:	eba0 0308 	sub.w	r3, r0, r8
 8011ae6:	fa09 f303 	lsl.w	r3, r9, r3
 8011aea:	4313      	orrs	r3, r2
 8011aec:	9304      	str	r3, [sp, #16]
 8011aee:	46a2      	mov	sl, r4
 8011af0:	e7d2      	b.n	8011a98 <_svfiprintf_r+0xa0>
 8011af2:	9b03      	ldr	r3, [sp, #12]
 8011af4:	1d19      	adds	r1, r3, #4
 8011af6:	681b      	ldr	r3, [r3, #0]
 8011af8:	9103      	str	r1, [sp, #12]
 8011afa:	2b00      	cmp	r3, #0
 8011afc:	bfbb      	ittet	lt
 8011afe:	425b      	neglt	r3, r3
 8011b00:	f042 0202 	orrlt.w	r2, r2, #2
 8011b04:	9307      	strge	r3, [sp, #28]
 8011b06:	9307      	strlt	r3, [sp, #28]
 8011b08:	bfb8      	it	lt
 8011b0a:	9204      	strlt	r2, [sp, #16]
 8011b0c:	7823      	ldrb	r3, [r4, #0]
 8011b0e:	2b2e      	cmp	r3, #46	@ 0x2e
 8011b10:	d10a      	bne.n	8011b28 <_svfiprintf_r+0x130>
 8011b12:	7863      	ldrb	r3, [r4, #1]
 8011b14:	2b2a      	cmp	r3, #42	@ 0x2a
 8011b16:	d132      	bne.n	8011b7e <_svfiprintf_r+0x186>
 8011b18:	9b03      	ldr	r3, [sp, #12]
 8011b1a:	1d1a      	adds	r2, r3, #4
 8011b1c:	681b      	ldr	r3, [r3, #0]
 8011b1e:	9203      	str	r2, [sp, #12]
 8011b20:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011b24:	3402      	adds	r4, #2
 8011b26:	9305      	str	r3, [sp, #20]
 8011b28:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8011bec <_svfiprintf_r+0x1f4>
 8011b2c:	7821      	ldrb	r1, [r4, #0]
 8011b2e:	2203      	movs	r2, #3
 8011b30:	4650      	mov	r0, sl
 8011b32:	f7ee fbd5 	bl	80002e0 <memchr>
 8011b36:	b138      	cbz	r0, 8011b48 <_svfiprintf_r+0x150>
 8011b38:	9b04      	ldr	r3, [sp, #16]
 8011b3a:	eba0 000a 	sub.w	r0, r0, sl
 8011b3e:	2240      	movs	r2, #64	@ 0x40
 8011b40:	4082      	lsls	r2, r0
 8011b42:	4313      	orrs	r3, r2
 8011b44:	3401      	adds	r4, #1
 8011b46:	9304      	str	r3, [sp, #16]
 8011b48:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011b4c:	4824      	ldr	r0, [pc, #144]	@ (8011be0 <_svfiprintf_r+0x1e8>)
 8011b4e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011b52:	2206      	movs	r2, #6
 8011b54:	f7ee fbc4 	bl	80002e0 <memchr>
 8011b58:	2800      	cmp	r0, #0
 8011b5a:	d036      	beq.n	8011bca <_svfiprintf_r+0x1d2>
 8011b5c:	4b21      	ldr	r3, [pc, #132]	@ (8011be4 <_svfiprintf_r+0x1ec>)
 8011b5e:	bb1b      	cbnz	r3, 8011ba8 <_svfiprintf_r+0x1b0>
 8011b60:	9b03      	ldr	r3, [sp, #12]
 8011b62:	3307      	adds	r3, #7
 8011b64:	f023 0307 	bic.w	r3, r3, #7
 8011b68:	3308      	adds	r3, #8
 8011b6a:	9303      	str	r3, [sp, #12]
 8011b6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011b6e:	4433      	add	r3, r6
 8011b70:	9309      	str	r3, [sp, #36]	@ 0x24
 8011b72:	e76a      	b.n	8011a4a <_svfiprintf_r+0x52>
 8011b74:	fb0c 3202 	mla	r2, ip, r2, r3
 8011b78:	460c      	mov	r4, r1
 8011b7a:	2001      	movs	r0, #1
 8011b7c:	e7a8      	b.n	8011ad0 <_svfiprintf_r+0xd8>
 8011b7e:	2300      	movs	r3, #0
 8011b80:	3401      	adds	r4, #1
 8011b82:	9305      	str	r3, [sp, #20]
 8011b84:	4619      	mov	r1, r3
 8011b86:	f04f 0c0a 	mov.w	ip, #10
 8011b8a:	4620      	mov	r0, r4
 8011b8c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011b90:	3a30      	subs	r2, #48	@ 0x30
 8011b92:	2a09      	cmp	r2, #9
 8011b94:	d903      	bls.n	8011b9e <_svfiprintf_r+0x1a6>
 8011b96:	2b00      	cmp	r3, #0
 8011b98:	d0c6      	beq.n	8011b28 <_svfiprintf_r+0x130>
 8011b9a:	9105      	str	r1, [sp, #20]
 8011b9c:	e7c4      	b.n	8011b28 <_svfiprintf_r+0x130>
 8011b9e:	fb0c 2101 	mla	r1, ip, r1, r2
 8011ba2:	4604      	mov	r4, r0
 8011ba4:	2301      	movs	r3, #1
 8011ba6:	e7f0      	b.n	8011b8a <_svfiprintf_r+0x192>
 8011ba8:	ab03      	add	r3, sp, #12
 8011baa:	9300      	str	r3, [sp, #0]
 8011bac:	462a      	mov	r2, r5
 8011bae:	4b0e      	ldr	r3, [pc, #56]	@ (8011be8 <_svfiprintf_r+0x1f0>)
 8011bb0:	a904      	add	r1, sp, #16
 8011bb2:	4638      	mov	r0, r7
 8011bb4:	f7fd ff14 	bl	800f9e0 <_printf_float>
 8011bb8:	1c42      	adds	r2, r0, #1
 8011bba:	4606      	mov	r6, r0
 8011bbc:	d1d6      	bne.n	8011b6c <_svfiprintf_r+0x174>
 8011bbe:	89ab      	ldrh	r3, [r5, #12]
 8011bc0:	065b      	lsls	r3, r3, #25
 8011bc2:	f53f af2d 	bmi.w	8011a20 <_svfiprintf_r+0x28>
 8011bc6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011bc8:	e72c      	b.n	8011a24 <_svfiprintf_r+0x2c>
 8011bca:	ab03      	add	r3, sp, #12
 8011bcc:	9300      	str	r3, [sp, #0]
 8011bce:	462a      	mov	r2, r5
 8011bd0:	4b05      	ldr	r3, [pc, #20]	@ (8011be8 <_svfiprintf_r+0x1f0>)
 8011bd2:	a904      	add	r1, sp, #16
 8011bd4:	4638      	mov	r0, r7
 8011bd6:	f7fe f98b 	bl	800fef0 <_printf_i>
 8011bda:	e7ed      	b.n	8011bb8 <_svfiprintf_r+0x1c0>
 8011bdc:	08012868 	.word	0x08012868
 8011be0:	08012872 	.word	0x08012872
 8011be4:	0800f9e1 	.word	0x0800f9e1
 8011be8:	08011941 	.word	0x08011941
 8011bec:	0801286e 	.word	0x0801286e

08011bf0 <__sflush_r>:
 8011bf0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011bf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011bf8:	0716      	lsls	r6, r2, #28
 8011bfa:	4605      	mov	r5, r0
 8011bfc:	460c      	mov	r4, r1
 8011bfe:	d454      	bmi.n	8011caa <__sflush_r+0xba>
 8011c00:	684b      	ldr	r3, [r1, #4]
 8011c02:	2b00      	cmp	r3, #0
 8011c04:	dc02      	bgt.n	8011c0c <__sflush_r+0x1c>
 8011c06:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8011c08:	2b00      	cmp	r3, #0
 8011c0a:	dd48      	ble.n	8011c9e <__sflush_r+0xae>
 8011c0c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011c0e:	2e00      	cmp	r6, #0
 8011c10:	d045      	beq.n	8011c9e <__sflush_r+0xae>
 8011c12:	2300      	movs	r3, #0
 8011c14:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8011c18:	682f      	ldr	r7, [r5, #0]
 8011c1a:	6a21      	ldr	r1, [r4, #32]
 8011c1c:	602b      	str	r3, [r5, #0]
 8011c1e:	d030      	beq.n	8011c82 <__sflush_r+0x92>
 8011c20:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8011c22:	89a3      	ldrh	r3, [r4, #12]
 8011c24:	0759      	lsls	r1, r3, #29
 8011c26:	d505      	bpl.n	8011c34 <__sflush_r+0x44>
 8011c28:	6863      	ldr	r3, [r4, #4]
 8011c2a:	1ad2      	subs	r2, r2, r3
 8011c2c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8011c2e:	b10b      	cbz	r3, 8011c34 <__sflush_r+0x44>
 8011c30:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8011c32:	1ad2      	subs	r2, r2, r3
 8011c34:	2300      	movs	r3, #0
 8011c36:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011c38:	6a21      	ldr	r1, [r4, #32]
 8011c3a:	4628      	mov	r0, r5
 8011c3c:	47b0      	blx	r6
 8011c3e:	1c43      	adds	r3, r0, #1
 8011c40:	89a3      	ldrh	r3, [r4, #12]
 8011c42:	d106      	bne.n	8011c52 <__sflush_r+0x62>
 8011c44:	6829      	ldr	r1, [r5, #0]
 8011c46:	291d      	cmp	r1, #29
 8011c48:	d82b      	bhi.n	8011ca2 <__sflush_r+0xb2>
 8011c4a:	4a2a      	ldr	r2, [pc, #168]	@ (8011cf4 <__sflush_r+0x104>)
 8011c4c:	410a      	asrs	r2, r1
 8011c4e:	07d6      	lsls	r6, r2, #31
 8011c50:	d427      	bmi.n	8011ca2 <__sflush_r+0xb2>
 8011c52:	2200      	movs	r2, #0
 8011c54:	6062      	str	r2, [r4, #4]
 8011c56:	04d9      	lsls	r1, r3, #19
 8011c58:	6922      	ldr	r2, [r4, #16]
 8011c5a:	6022      	str	r2, [r4, #0]
 8011c5c:	d504      	bpl.n	8011c68 <__sflush_r+0x78>
 8011c5e:	1c42      	adds	r2, r0, #1
 8011c60:	d101      	bne.n	8011c66 <__sflush_r+0x76>
 8011c62:	682b      	ldr	r3, [r5, #0]
 8011c64:	b903      	cbnz	r3, 8011c68 <__sflush_r+0x78>
 8011c66:	6560      	str	r0, [r4, #84]	@ 0x54
 8011c68:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011c6a:	602f      	str	r7, [r5, #0]
 8011c6c:	b1b9      	cbz	r1, 8011c9e <__sflush_r+0xae>
 8011c6e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011c72:	4299      	cmp	r1, r3
 8011c74:	d002      	beq.n	8011c7c <__sflush_r+0x8c>
 8011c76:	4628      	mov	r0, r5
 8011c78:	f7ff f9e0 	bl	801103c <_free_r>
 8011c7c:	2300      	movs	r3, #0
 8011c7e:	6363      	str	r3, [r4, #52]	@ 0x34
 8011c80:	e00d      	b.n	8011c9e <__sflush_r+0xae>
 8011c82:	2301      	movs	r3, #1
 8011c84:	4628      	mov	r0, r5
 8011c86:	47b0      	blx	r6
 8011c88:	4602      	mov	r2, r0
 8011c8a:	1c50      	adds	r0, r2, #1
 8011c8c:	d1c9      	bne.n	8011c22 <__sflush_r+0x32>
 8011c8e:	682b      	ldr	r3, [r5, #0]
 8011c90:	2b00      	cmp	r3, #0
 8011c92:	d0c6      	beq.n	8011c22 <__sflush_r+0x32>
 8011c94:	2b1d      	cmp	r3, #29
 8011c96:	d001      	beq.n	8011c9c <__sflush_r+0xac>
 8011c98:	2b16      	cmp	r3, #22
 8011c9a:	d11e      	bne.n	8011cda <__sflush_r+0xea>
 8011c9c:	602f      	str	r7, [r5, #0]
 8011c9e:	2000      	movs	r0, #0
 8011ca0:	e022      	b.n	8011ce8 <__sflush_r+0xf8>
 8011ca2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011ca6:	b21b      	sxth	r3, r3
 8011ca8:	e01b      	b.n	8011ce2 <__sflush_r+0xf2>
 8011caa:	690f      	ldr	r7, [r1, #16]
 8011cac:	2f00      	cmp	r7, #0
 8011cae:	d0f6      	beq.n	8011c9e <__sflush_r+0xae>
 8011cb0:	0793      	lsls	r3, r2, #30
 8011cb2:	680e      	ldr	r6, [r1, #0]
 8011cb4:	bf08      	it	eq
 8011cb6:	694b      	ldreq	r3, [r1, #20]
 8011cb8:	600f      	str	r7, [r1, #0]
 8011cba:	bf18      	it	ne
 8011cbc:	2300      	movne	r3, #0
 8011cbe:	eba6 0807 	sub.w	r8, r6, r7
 8011cc2:	608b      	str	r3, [r1, #8]
 8011cc4:	f1b8 0f00 	cmp.w	r8, #0
 8011cc8:	dde9      	ble.n	8011c9e <__sflush_r+0xae>
 8011cca:	6a21      	ldr	r1, [r4, #32]
 8011ccc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8011cce:	4643      	mov	r3, r8
 8011cd0:	463a      	mov	r2, r7
 8011cd2:	4628      	mov	r0, r5
 8011cd4:	47b0      	blx	r6
 8011cd6:	2800      	cmp	r0, #0
 8011cd8:	dc08      	bgt.n	8011cec <__sflush_r+0xfc>
 8011cda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011cde:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011ce2:	81a3      	strh	r3, [r4, #12]
 8011ce4:	f04f 30ff 	mov.w	r0, #4294967295
 8011ce8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011cec:	4407      	add	r7, r0
 8011cee:	eba8 0800 	sub.w	r8, r8, r0
 8011cf2:	e7e7      	b.n	8011cc4 <__sflush_r+0xd4>
 8011cf4:	dfbffffe 	.word	0xdfbffffe

08011cf8 <_fflush_r>:
 8011cf8:	b538      	push	{r3, r4, r5, lr}
 8011cfa:	690b      	ldr	r3, [r1, #16]
 8011cfc:	4605      	mov	r5, r0
 8011cfe:	460c      	mov	r4, r1
 8011d00:	b913      	cbnz	r3, 8011d08 <_fflush_r+0x10>
 8011d02:	2500      	movs	r5, #0
 8011d04:	4628      	mov	r0, r5
 8011d06:	bd38      	pop	{r3, r4, r5, pc}
 8011d08:	b118      	cbz	r0, 8011d12 <_fflush_r+0x1a>
 8011d0a:	6a03      	ldr	r3, [r0, #32]
 8011d0c:	b90b      	cbnz	r3, 8011d12 <_fflush_r+0x1a>
 8011d0e:	f7fe fa9b 	bl	8010248 <__sinit>
 8011d12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011d16:	2b00      	cmp	r3, #0
 8011d18:	d0f3      	beq.n	8011d02 <_fflush_r+0xa>
 8011d1a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8011d1c:	07d0      	lsls	r0, r2, #31
 8011d1e:	d404      	bmi.n	8011d2a <_fflush_r+0x32>
 8011d20:	0599      	lsls	r1, r3, #22
 8011d22:	d402      	bmi.n	8011d2a <_fflush_r+0x32>
 8011d24:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011d26:	f7fe fba6 	bl	8010476 <__retarget_lock_acquire_recursive>
 8011d2a:	4628      	mov	r0, r5
 8011d2c:	4621      	mov	r1, r4
 8011d2e:	f7ff ff5f 	bl	8011bf0 <__sflush_r>
 8011d32:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011d34:	07da      	lsls	r2, r3, #31
 8011d36:	4605      	mov	r5, r0
 8011d38:	d4e4      	bmi.n	8011d04 <_fflush_r+0xc>
 8011d3a:	89a3      	ldrh	r3, [r4, #12]
 8011d3c:	059b      	lsls	r3, r3, #22
 8011d3e:	d4e1      	bmi.n	8011d04 <_fflush_r+0xc>
 8011d40:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011d42:	f7fe fb99 	bl	8010478 <__retarget_lock_release_recursive>
 8011d46:	e7dd      	b.n	8011d04 <_fflush_r+0xc>

08011d48 <memmove>:
 8011d48:	4288      	cmp	r0, r1
 8011d4a:	b510      	push	{r4, lr}
 8011d4c:	eb01 0402 	add.w	r4, r1, r2
 8011d50:	d902      	bls.n	8011d58 <memmove+0x10>
 8011d52:	4284      	cmp	r4, r0
 8011d54:	4623      	mov	r3, r4
 8011d56:	d807      	bhi.n	8011d68 <memmove+0x20>
 8011d58:	1e43      	subs	r3, r0, #1
 8011d5a:	42a1      	cmp	r1, r4
 8011d5c:	d008      	beq.n	8011d70 <memmove+0x28>
 8011d5e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011d62:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011d66:	e7f8      	b.n	8011d5a <memmove+0x12>
 8011d68:	4402      	add	r2, r0
 8011d6a:	4601      	mov	r1, r0
 8011d6c:	428a      	cmp	r2, r1
 8011d6e:	d100      	bne.n	8011d72 <memmove+0x2a>
 8011d70:	bd10      	pop	{r4, pc}
 8011d72:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011d76:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011d7a:	e7f7      	b.n	8011d6c <memmove+0x24>

08011d7c <_sbrk_r>:
 8011d7c:	b538      	push	{r3, r4, r5, lr}
 8011d7e:	4d06      	ldr	r5, [pc, #24]	@ (8011d98 <_sbrk_r+0x1c>)
 8011d80:	2300      	movs	r3, #0
 8011d82:	4604      	mov	r4, r0
 8011d84:	4608      	mov	r0, r1
 8011d86:	602b      	str	r3, [r5, #0]
 8011d88:	f7ef fcf8 	bl	800177c <_sbrk>
 8011d8c:	1c43      	adds	r3, r0, #1
 8011d8e:	d102      	bne.n	8011d96 <_sbrk_r+0x1a>
 8011d90:	682b      	ldr	r3, [r5, #0]
 8011d92:	b103      	cbz	r3, 8011d96 <_sbrk_r+0x1a>
 8011d94:	6023      	str	r3, [r4, #0]
 8011d96:	bd38      	pop	{r3, r4, r5, pc}
 8011d98:	2400259c 	.word	0x2400259c

08011d9c <memcpy>:
 8011d9c:	440a      	add	r2, r1
 8011d9e:	4291      	cmp	r1, r2
 8011da0:	f100 33ff 	add.w	r3, r0, #4294967295
 8011da4:	d100      	bne.n	8011da8 <memcpy+0xc>
 8011da6:	4770      	bx	lr
 8011da8:	b510      	push	{r4, lr}
 8011daa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011dae:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011db2:	4291      	cmp	r1, r2
 8011db4:	d1f9      	bne.n	8011daa <memcpy+0xe>
 8011db6:	bd10      	pop	{r4, pc}

08011db8 <__assert_func>:
 8011db8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011dba:	4614      	mov	r4, r2
 8011dbc:	461a      	mov	r2, r3
 8011dbe:	4b09      	ldr	r3, [pc, #36]	@ (8011de4 <__assert_func+0x2c>)
 8011dc0:	681b      	ldr	r3, [r3, #0]
 8011dc2:	4605      	mov	r5, r0
 8011dc4:	68d8      	ldr	r0, [r3, #12]
 8011dc6:	b954      	cbnz	r4, 8011dde <__assert_func+0x26>
 8011dc8:	4b07      	ldr	r3, [pc, #28]	@ (8011de8 <__assert_func+0x30>)
 8011dca:	461c      	mov	r4, r3
 8011dcc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011dd0:	9100      	str	r1, [sp, #0]
 8011dd2:	462b      	mov	r3, r5
 8011dd4:	4905      	ldr	r1, [pc, #20]	@ (8011dec <__assert_func+0x34>)
 8011dd6:	f000 f86f 	bl	8011eb8 <fiprintf>
 8011dda:	f000 f87f 	bl	8011edc <abort>
 8011dde:	4b04      	ldr	r3, [pc, #16]	@ (8011df0 <__assert_func+0x38>)
 8011de0:	e7f4      	b.n	8011dcc <__assert_func+0x14>
 8011de2:	bf00      	nop
 8011de4:	24000144 	.word	0x24000144
 8011de8:	080128be 	.word	0x080128be
 8011dec:	08012890 	.word	0x08012890
 8011df0:	08012883 	.word	0x08012883

08011df4 <_calloc_r>:
 8011df4:	b570      	push	{r4, r5, r6, lr}
 8011df6:	fba1 5402 	umull	r5, r4, r1, r2
 8011dfa:	b93c      	cbnz	r4, 8011e0c <_calloc_r+0x18>
 8011dfc:	4629      	mov	r1, r5
 8011dfe:	f7ff f991 	bl	8011124 <_malloc_r>
 8011e02:	4606      	mov	r6, r0
 8011e04:	b928      	cbnz	r0, 8011e12 <_calloc_r+0x1e>
 8011e06:	2600      	movs	r6, #0
 8011e08:	4630      	mov	r0, r6
 8011e0a:	bd70      	pop	{r4, r5, r6, pc}
 8011e0c:	220c      	movs	r2, #12
 8011e0e:	6002      	str	r2, [r0, #0]
 8011e10:	e7f9      	b.n	8011e06 <_calloc_r+0x12>
 8011e12:	462a      	mov	r2, r5
 8011e14:	4621      	mov	r1, r4
 8011e16:	f7fe fab0 	bl	801037a <memset>
 8011e1a:	e7f5      	b.n	8011e08 <_calloc_r+0x14>

08011e1c <__ascii_mbtowc>:
 8011e1c:	b082      	sub	sp, #8
 8011e1e:	b901      	cbnz	r1, 8011e22 <__ascii_mbtowc+0x6>
 8011e20:	a901      	add	r1, sp, #4
 8011e22:	b142      	cbz	r2, 8011e36 <__ascii_mbtowc+0x1a>
 8011e24:	b14b      	cbz	r3, 8011e3a <__ascii_mbtowc+0x1e>
 8011e26:	7813      	ldrb	r3, [r2, #0]
 8011e28:	600b      	str	r3, [r1, #0]
 8011e2a:	7812      	ldrb	r2, [r2, #0]
 8011e2c:	1e10      	subs	r0, r2, #0
 8011e2e:	bf18      	it	ne
 8011e30:	2001      	movne	r0, #1
 8011e32:	b002      	add	sp, #8
 8011e34:	4770      	bx	lr
 8011e36:	4610      	mov	r0, r2
 8011e38:	e7fb      	b.n	8011e32 <__ascii_mbtowc+0x16>
 8011e3a:	f06f 0001 	mvn.w	r0, #1
 8011e3e:	e7f8      	b.n	8011e32 <__ascii_mbtowc+0x16>

08011e40 <_realloc_r>:
 8011e40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011e44:	4680      	mov	r8, r0
 8011e46:	4615      	mov	r5, r2
 8011e48:	460c      	mov	r4, r1
 8011e4a:	b921      	cbnz	r1, 8011e56 <_realloc_r+0x16>
 8011e4c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011e50:	4611      	mov	r1, r2
 8011e52:	f7ff b967 	b.w	8011124 <_malloc_r>
 8011e56:	b92a      	cbnz	r2, 8011e64 <_realloc_r+0x24>
 8011e58:	f7ff f8f0 	bl	801103c <_free_r>
 8011e5c:	2400      	movs	r4, #0
 8011e5e:	4620      	mov	r0, r4
 8011e60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011e64:	f000 f841 	bl	8011eea <_malloc_usable_size_r>
 8011e68:	4285      	cmp	r5, r0
 8011e6a:	4606      	mov	r6, r0
 8011e6c:	d802      	bhi.n	8011e74 <_realloc_r+0x34>
 8011e6e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8011e72:	d8f4      	bhi.n	8011e5e <_realloc_r+0x1e>
 8011e74:	4629      	mov	r1, r5
 8011e76:	4640      	mov	r0, r8
 8011e78:	f7ff f954 	bl	8011124 <_malloc_r>
 8011e7c:	4607      	mov	r7, r0
 8011e7e:	2800      	cmp	r0, #0
 8011e80:	d0ec      	beq.n	8011e5c <_realloc_r+0x1c>
 8011e82:	42b5      	cmp	r5, r6
 8011e84:	462a      	mov	r2, r5
 8011e86:	4621      	mov	r1, r4
 8011e88:	bf28      	it	cs
 8011e8a:	4632      	movcs	r2, r6
 8011e8c:	f7ff ff86 	bl	8011d9c <memcpy>
 8011e90:	4621      	mov	r1, r4
 8011e92:	4640      	mov	r0, r8
 8011e94:	f7ff f8d2 	bl	801103c <_free_r>
 8011e98:	463c      	mov	r4, r7
 8011e9a:	e7e0      	b.n	8011e5e <_realloc_r+0x1e>

08011e9c <__ascii_wctomb>:
 8011e9c:	4603      	mov	r3, r0
 8011e9e:	4608      	mov	r0, r1
 8011ea0:	b141      	cbz	r1, 8011eb4 <__ascii_wctomb+0x18>
 8011ea2:	2aff      	cmp	r2, #255	@ 0xff
 8011ea4:	d904      	bls.n	8011eb0 <__ascii_wctomb+0x14>
 8011ea6:	228a      	movs	r2, #138	@ 0x8a
 8011ea8:	601a      	str	r2, [r3, #0]
 8011eaa:	f04f 30ff 	mov.w	r0, #4294967295
 8011eae:	4770      	bx	lr
 8011eb0:	700a      	strb	r2, [r1, #0]
 8011eb2:	2001      	movs	r0, #1
 8011eb4:	4770      	bx	lr
	...

08011eb8 <fiprintf>:
 8011eb8:	b40e      	push	{r1, r2, r3}
 8011eba:	b503      	push	{r0, r1, lr}
 8011ebc:	4601      	mov	r1, r0
 8011ebe:	ab03      	add	r3, sp, #12
 8011ec0:	4805      	ldr	r0, [pc, #20]	@ (8011ed8 <fiprintf+0x20>)
 8011ec2:	f853 2b04 	ldr.w	r2, [r3], #4
 8011ec6:	6800      	ldr	r0, [r0, #0]
 8011ec8:	9301      	str	r3, [sp, #4]
 8011eca:	f000 f83f 	bl	8011f4c <_vfiprintf_r>
 8011ece:	b002      	add	sp, #8
 8011ed0:	f85d eb04 	ldr.w	lr, [sp], #4
 8011ed4:	b003      	add	sp, #12
 8011ed6:	4770      	bx	lr
 8011ed8:	24000144 	.word	0x24000144

08011edc <abort>:
 8011edc:	b508      	push	{r3, lr}
 8011ede:	2006      	movs	r0, #6
 8011ee0:	f000 fa08 	bl	80122f4 <raise>
 8011ee4:	2001      	movs	r0, #1
 8011ee6:	f7ef fbd1 	bl	800168c <_exit>

08011eea <_malloc_usable_size_r>:
 8011eea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011eee:	1f18      	subs	r0, r3, #4
 8011ef0:	2b00      	cmp	r3, #0
 8011ef2:	bfbc      	itt	lt
 8011ef4:	580b      	ldrlt	r3, [r1, r0]
 8011ef6:	18c0      	addlt	r0, r0, r3
 8011ef8:	4770      	bx	lr

08011efa <__sfputc_r>:
 8011efa:	6893      	ldr	r3, [r2, #8]
 8011efc:	3b01      	subs	r3, #1
 8011efe:	2b00      	cmp	r3, #0
 8011f00:	b410      	push	{r4}
 8011f02:	6093      	str	r3, [r2, #8]
 8011f04:	da08      	bge.n	8011f18 <__sfputc_r+0x1e>
 8011f06:	6994      	ldr	r4, [r2, #24]
 8011f08:	42a3      	cmp	r3, r4
 8011f0a:	db01      	blt.n	8011f10 <__sfputc_r+0x16>
 8011f0c:	290a      	cmp	r1, #10
 8011f0e:	d103      	bne.n	8011f18 <__sfputc_r+0x1e>
 8011f10:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011f14:	f000 b932 	b.w	801217c <__swbuf_r>
 8011f18:	6813      	ldr	r3, [r2, #0]
 8011f1a:	1c58      	adds	r0, r3, #1
 8011f1c:	6010      	str	r0, [r2, #0]
 8011f1e:	7019      	strb	r1, [r3, #0]
 8011f20:	4608      	mov	r0, r1
 8011f22:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011f26:	4770      	bx	lr

08011f28 <__sfputs_r>:
 8011f28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011f2a:	4606      	mov	r6, r0
 8011f2c:	460f      	mov	r7, r1
 8011f2e:	4614      	mov	r4, r2
 8011f30:	18d5      	adds	r5, r2, r3
 8011f32:	42ac      	cmp	r4, r5
 8011f34:	d101      	bne.n	8011f3a <__sfputs_r+0x12>
 8011f36:	2000      	movs	r0, #0
 8011f38:	e007      	b.n	8011f4a <__sfputs_r+0x22>
 8011f3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011f3e:	463a      	mov	r2, r7
 8011f40:	4630      	mov	r0, r6
 8011f42:	f7ff ffda 	bl	8011efa <__sfputc_r>
 8011f46:	1c43      	adds	r3, r0, #1
 8011f48:	d1f3      	bne.n	8011f32 <__sfputs_r+0xa>
 8011f4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08011f4c <_vfiprintf_r>:
 8011f4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f50:	460d      	mov	r5, r1
 8011f52:	b09d      	sub	sp, #116	@ 0x74
 8011f54:	4614      	mov	r4, r2
 8011f56:	4698      	mov	r8, r3
 8011f58:	4606      	mov	r6, r0
 8011f5a:	b118      	cbz	r0, 8011f64 <_vfiprintf_r+0x18>
 8011f5c:	6a03      	ldr	r3, [r0, #32]
 8011f5e:	b90b      	cbnz	r3, 8011f64 <_vfiprintf_r+0x18>
 8011f60:	f7fe f972 	bl	8010248 <__sinit>
 8011f64:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011f66:	07d9      	lsls	r1, r3, #31
 8011f68:	d405      	bmi.n	8011f76 <_vfiprintf_r+0x2a>
 8011f6a:	89ab      	ldrh	r3, [r5, #12]
 8011f6c:	059a      	lsls	r2, r3, #22
 8011f6e:	d402      	bmi.n	8011f76 <_vfiprintf_r+0x2a>
 8011f70:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011f72:	f7fe fa80 	bl	8010476 <__retarget_lock_acquire_recursive>
 8011f76:	89ab      	ldrh	r3, [r5, #12]
 8011f78:	071b      	lsls	r3, r3, #28
 8011f7a:	d501      	bpl.n	8011f80 <_vfiprintf_r+0x34>
 8011f7c:	692b      	ldr	r3, [r5, #16]
 8011f7e:	b99b      	cbnz	r3, 8011fa8 <_vfiprintf_r+0x5c>
 8011f80:	4629      	mov	r1, r5
 8011f82:	4630      	mov	r0, r6
 8011f84:	f000 f938 	bl	80121f8 <__swsetup_r>
 8011f88:	b170      	cbz	r0, 8011fa8 <_vfiprintf_r+0x5c>
 8011f8a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011f8c:	07dc      	lsls	r4, r3, #31
 8011f8e:	d504      	bpl.n	8011f9a <_vfiprintf_r+0x4e>
 8011f90:	f04f 30ff 	mov.w	r0, #4294967295
 8011f94:	b01d      	add	sp, #116	@ 0x74
 8011f96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011f9a:	89ab      	ldrh	r3, [r5, #12]
 8011f9c:	0598      	lsls	r0, r3, #22
 8011f9e:	d4f7      	bmi.n	8011f90 <_vfiprintf_r+0x44>
 8011fa0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011fa2:	f7fe fa69 	bl	8010478 <__retarget_lock_release_recursive>
 8011fa6:	e7f3      	b.n	8011f90 <_vfiprintf_r+0x44>
 8011fa8:	2300      	movs	r3, #0
 8011faa:	9309      	str	r3, [sp, #36]	@ 0x24
 8011fac:	2320      	movs	r3, #32
 8011fae:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011fb2:	f8cd 800c 	str.w	r8, [sp, #12]
 8011fb6:	2330      	movs	r3, #48	@ 0x30
 8011fb8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8012168 <_vfiprintf_r+0x21c>
 8011fbc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011fc0:	f04f 0901 	mov.w	r9, #1
 8011fc4:	4623      	mov	r3, r4
 8011fc6:	469a      	mov	sl, r3
 8011fc8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011fcc:	b10a      	cbz	r2, 8011fd2 <_vfiprintf_r+0x86>
 8011fce:	2a25      	cmp	r2, #37	@ 0x25
 8011fd0:	d1f9      	bne.n	8011fc6 <_vfiprintf_r+0x7a>
 8011fd2:	ebba 0b04 	subs.w	fp, sl, r4
 8011fd6:	d00b      	beq.n	8011ff0 <_vfiprintf_r+0xa4>
 8011fd8:	465b      	mov	r3, fp
 8011fda:	4622      	mov	r2, r4
 8011fdc:	4629      	mov	r1, r5
 8011fde:	4630      	mov	r0, r6
 8011fe0:	f7ff ffa2 	bl	8011f28 <__sfputs_r>
 8011fe4:	3001      	adds	r0, #1
 8011fe6:	f000 80a7 	beq.w	8012138 <_vfiprintf_r+0x1ec>
 8011fea:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011fec:	445a      	add	r2, fp
 8011fee:	9209      	str	r2, [sp, #36]	@ 0x24
 8011ff0:	f89a 3000 	ldrb.w	r3, [sl]
 8011ff4:	2b00      	cmp	r3, #0
 8011ff6:	f000 809f 	beq.w	8012138 <_vfiprintf_r+0x1ec>
 8011ffa:	2300      	movs	r3, #0
 8011ffc:	f04f 32ff 	mov.w	r2, #4294967295
 8012000:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012004:	f10a 0a01 	add.w	sl, sl, #1
 8012008:	9304      	str	r3, [sp, #16]
 801200a:	9307      	str	r3, [sp, #28]
 801200c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8012010:	931a      	str	r3, [sp, #104]	@ 0x68
 8012012:	4654      	mov	r4, sl
 8012014:	2205      	movs	r2, #5
 8012016:	f814 1b01 	ldrb.w	r1, [r4], #1
 801201a:	4853      	ldr	r0, [pc, #332]	@ (8012168 <_vfiprintf_r+0x21c>)
 801201c:	f7ee f960 	bl	80002e0 <memchr>
 8012020:	9a04      	ldr	r2, [sp, #16]
 8012022:	b9d8      	cbnz	r0, 801205c <_vfiprintf_r+0x110>
 8012024:	06d1      	lsls	r1, r2, #27
 8012026:	bf44      	itt	mi
 8012028:	2320      	movmi	r3, #32
 801202a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801202e:	0713      	lsls	r3, r2, #28
 8012030:	bf44      	itt	mi
 8012032:	232b      	movmi	r3, #43	@ 0x2b
 8012034:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012038:	f89a 3000 	ldrb.w	r3, [sl]
 801203c:	2b2a      	cmp	r3, #42	@ 0x2a
 801203e:	d015      	beq.n	801206c <_vfiprintf_r+0x120>
 8012040:	9a07      	ldr	r2, [sp, #28]
 8012042:	4654      	mov	r4, sl
 8012044:	2000      	movs	r0, #0
 8012046:	f04f 0c0a 	mov.w	ip, #10
 801204a:	4621      	mov	r1, r4
 801204c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012050:	3b30      	subs	r3, #48	@ 0x30
 8012052:	2b09      	cmp	r3, #9
 8012054:	d94b      	bls.n	80120ee <_vfiprintf_r+0x1a2>
 8012056:	b1b0      	cbz	r0, 8012086 <_vfiprintf_r+0x13a>
 8012058:	9207      	str	r2, [sp, #28]
 801205a:	e014      	b.n	8012086 <_vfiprintf_r+0x13a>
 801205c:	eba0 0308 	sub.w	r3, r0, r8
 8012060:	fa09 f303 	lsl.w	r3, r9, r3
 8012064:	4313      	orrs	r3, r2
 8012066:	9304      	str	r3, [sp, #16]
 8012068:	46a2      	mov	sl, r4
 801206a:	e7d2      	b.n	8012012 <_vfiprintf_r+0xc6>
 801206c:	9b03      	ldr	r3, [sp, #12]
 801206e:	1d19      	adds	r1, r3, #4
 8012070:	681b      	ldr	r3, [r3, #0]
 8012072:	9103      	str	r1, [sp, #12]
 8012074:	2b00      	cmp	r3, #0
 8012076:	bfbb      	ittet	lt
 8012078:	425b      	neglt	r3, r3
 801207a:	f042 0202 	orrlt.w	r2, r2, #2
 801207e:	9307      	strge	r3, [sp, #28]
 8012080:	9307      	strlt	r3, [sp, #28]
 8012082:	bfb8      	it	lt
 8012084:	9204      	strlt	r2, [sp, #16]
 8012086:	7823      	ldrb	r3, [r4, #0]
 8012088:	2b2e      	cmp	r3, #46	@ 0x2e
 801208a:	d10a      	bne.n	80120a2 <_vfiprintf_r+0x156>
 801208c:	7863      	ldrb	r3, [r4, #1]
 801208e:	2b2a      	cmp	r3, #42	@ 0x2a
 8012090:	d132      	bne.n	80120f8 <_vfiprintf_r+0x1ac>
 8012092:	9b03      	ldr	r3, [sp, #12]
 8012094:	1d1a      	adds	r2, r3, #4
 8012096:	681b      	ldr	r3, [r3, #0]
 8012098:	9203      	str	r2, [sp, #12]
 801209a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801209e:	3402      	adds	r4, #2
 80120a0:	9305      	str	r3, [sp, #20]
 80120a2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8012178 <_vfiprintf_r+0x22c>
 80120a6:	7821      	ldrb	r1, [r4, #0]
 80120a8:	2203      	movs	r2, #3
 80120aa:	4650      	mov	r0, sl
 80120ac:	f7ee f918 	bl	80002e0 <memchr>
 80120b0:	b138      	cbz	r0, 80120c2 <_vfiprintf_r+0x176>
 80120b2:	9b04      	ldr	r3, [sp, #16]
 80120b4:	eba0 000a 	sub.w	r0, r0, sl
 80120b8:	2240      	movs	r2, #64	@ 0x40
 80120ba:	4082      	lsls	r2, r0
 80120bc:	4313      	orrs	r3, r2
 80120be:	3401      	adds	r4, #1
 80120c0:	9304      	str	r3, [sp, #16]
 80120c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80120c6:	4829      	ldr	r0, [pc, #164]	@ (801216c <_vfiprintf_r+0x220>)
 80120c8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80120cc:	2206      	movs	r2, #6
 80120ce:	f7ee f907 	bl	80002e0 <memchr>
 80120d2:	2800      	cmp	r0, #0
 80120d4:	d03f      	beq.n	8012156 <_vfiprintf_r+0x20a>
 80120d6:	4b26      	ldr	r3, [pc, #152]	@ (8012170 <_vfiprintf_r+0x224>)
 80120d8:	bb1b      	cbnz	r3, 8012122 <_vfiprintf_r+0x1d6>
 80120da:	9b03      	ldr	r3, [sp, #12]
 80120dc:	3307      	adds	r3, #7
 80120de:	f023 0307 	bic.w	r3, r3, #7
 80120e2:	3308      	adds	r3, #8
 80120e4:	9303      	str	r3, [sp, #12]
 80120e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80120e8:	443b      	add	r3, r7
 80120ea:	9309      	str	r3, [sp, #36]	@ 0x24
 80120ec:	e76a      	b.n	8011fc4 <_vfiprintf_r+0x78>
 80120ee:	fb0c 3202 	mla	r2, ip, r2, r3
 80120f2:	460c      	mov	r4, r1
 80120f4:	2001      	movs	r0, #1
 80120f6:	e7a8      	b.n	801204a <_vfiprintf_r+0xfe>
 80120f8:	2300      	movs	r3, #0
 80120fa:	3401      	adds	r4, #1
 80120fc:	9305      	str	r3, [sp, #20]
 80120fe:	4619      	mov	r1, r3
 8012100:	f04f 0c0a 	mov.w	ip, #10
 8012104:	4620      	mov	r0, r4
 8012106:	f810 2b01 	ldrb.w	r2, [r0], #1
 801210a:	3a30      	subs	r2, #48	@ 0x30
 801210c:	2a09      	cmp	r2, #9
 801210e:	d903      	bls.n	8012118 <_vfiprintf_r+0x1cc>
 8012110:	2b00      	cmp	r3, #0
 8012112:	d0c6      	beq.n	80120a2 <_vfiprintf_r+0x156>
 8012114:	9105      	str	r1, [sp, #20]
 8012116:	e7c4      	b.n	80120a2 <_vfiprintf_r+0x156>
 8012118:	fb0c 2101 	mla	r1, ip, r1, r2
 801211c:	4604      	mov	r4, r0
 801211e:	2301      	movs	r3, #1
 8012120:	e7f0      	b.n	8012104 <_vfiprintf_r+0x1b8>
 8012122:	ab03      	add	r3, sp, #12
 8012124:	9300      	str	r3, [sp, #0]
 8012126:	462a      	mov	r2, r5
 8012128:	4b12      	ldr	r3, [pc, #72]	@ (8012174 <_vfiprintf_r+0x228>)
 801212a:	a904      	add	r1, sp, #16
 801212c:	4630      	mov	r0, r6
 801212e:	f7fd fc57 	bl	800f9e0 <_printf_float>
 8012132:	4607      	mov	r7, r0
 8012134:	1c78      	adds	r0, r7, #1
 8012136:	d1d6      	bne.n	80120e6 <_vfiprintf_r+0x19a>
 8012138:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801213a:	07d9      	lsls	r1, r3, #31
 801213c:	d405      	bmi.n	801214a <_vfiprintf_r+0x1fe>
 801213e:	89ab      	ldrh	r3, [r5, #12]
 8012140:	059a      	lsls	r2, r3, #22
 8012142:	d402      	bmi.n	801214a <_vfiprintf_r+0x1fe>
 8012144:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012146:	f7fe f997 	bl	8010478 <__retarget_lock_release_recursive>
 801214a:	89ab      	ldrh	r3, [r5, #12]
 801214c:	065b      	lsls	r3, r3, #25
 801214e:	f53f af1f 	bmi.w	8011f90 <_vfiprintf_r+0x44>
 8012152:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012154:	e71e      	b.n	8011f94 <_vfiprintf_r+0x48>
 8012156:	ab03      	add	r3, sp, #12
 8012158:	9300      	str	r3, [sp, #0]
 801215a:	462a      	mov	r2, r5
 801215c:	4b05      	ldr	r3, [pc, #20]	@ (8012174 <_vfiprintf_r+0x228>)
 801215e:	a904      	add	r1, sp, #16
 8012160:	4630      	mov	r0, r6
 8012162:	f7fd fec5 	bl	800fef0 <_printf_i>
 8012166:	e7e4      	b.n	8012132 <_vfiprintf_r+0x1e6>
 8012168:	08012868 	.word	0x08012868
 801216c:	08012872 	.word	0x08012872
 8012170:	0800f9e1 	.word	0x0800f9e1
 8012174:	08011f29 	.word	0x08011f29
 8012178:	0801286e 	.word	0x0801286e

0801217c <__swbuf_r>:
 801217c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801217e:	460e      	mov	r6, r1
 8012180:	4614      	mov	r4, r2
 8012182:	4605      	mov	r5, r0
 8012184:	b118      	cbz	r0, 801218e <__swbuf_r+0x12>
 8012186:	6a03      	ldr	r3, [r0, #32]
 8012188:	b90b      	cbnz	r3, 801218e <__swbuf_r+0x12>
 801218a:	f7fe f85d 	bl	8010248 <__sinit>
 801218e:	69a3      	ldr	r3, [r4, #24]
 8012190:	60a3      	str	r3, [r4, #8]
 8012192:	89a3      	ldrh	r3, [r4, #12]
 8012194:	071a      	lsls	r2, r3, #28
 8012196:	d501      	bpl.n	801219c <__swbuf_r+0x20>
 8012198:	6923      	ldr	r3, [r4, #16]
 801219a:	b943      	cbnz	r3, 80121ae <__swbuf_r+0x32>
 801219c:	4621      	mov	r1, r4
 801219e:	4628      	mov	r0, r5
 80121a0:	f000 f82a 	bl	80121f8 <__swsetup_r>
 80121a4:	b118      	cbz	r0, 80121ae <__swbuf_r+0x32>
 80121a6:	f04f 37ff 	mov.w	r7, #4294967295
 80121aa:	4638      	mov	r0, r7
 80121ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80121ae:	6823      	ldr	r3, [r4, #0]
 80121b0:	6922      	ldr	r2, [r4, #16]
 80121b2:	1a98      	subs	r0, r3, r2
 80121b4:	6963      	ldr	r3, [r4, #20]
 80121b6:	b2f6      	uxtb	r6, r6
 80121b8:	4283      	cmp	r3, r0
 80121ba:	4637      	mov	r7, r6
 80121bc:	dc05      	bgt.n	80121ca <__swbuf_r+0x4e>
 80121be:	4621      	mov	r1, r4
 80121c0:	4628      	mov	r0, r5
 80121c2:	f7ff fd99 	bl	8011cf8 <_fflush_r>
 80121c6:	2800      	cmp	r0, #0
 80121c8:	d1ed      	bne.n	80121a6 <__swbuf_r+0x2a>
 80121ca:	68a3      	ldr	r3, [r4, #8]
 80121cc:	3b01      	subs	r3, #1
 80121ce:	60a3      	str	r3, [r4, #8]
 80121d0:	6823      	ldr	r3, [r4, #0]
 80121d2:	1c5a      	adds	r2, r3, #1
 80121d4:	6022      	str	r2, [r4, #0]
 80121d6:	701e      	strb	r6, [r3, #0]
 80121d8:	6962      	ldr	r2, [r4, #20]
 80121da:	1c43      	adds	r3, r0, #1
 80121dc:	429a      	cmp	r2, r3
 80121de:	d004      	beq.n	80121ea <__swbuf_r+0x6e>
 80121e0:	89a3      	ldrh	r3, [r4, #12]
 80121e2:	07db      	lsls	r3, r3, #31
 80121e4:	d5e1      	bpl.n	80121aa <__swbuf_r+0x2e>
 80121e6:	2e0a      	cmp	r6, #10
 80121e8:	d1df      	bne.n	80121aa <__swbuf_r+0x2e>
 80121ea:	4621      	mov	r1, r4
 80121ec:	4628      	mov	r0, r5
 80121ee:	f7ff fd83 	bl	8011cf8 <_fflush_r>
 80121f2:	2800      	cmp	r0, #0
 80121f4:	d0d9      	beq.n	80121aa <__swbuf_r+0x2e>
 80121f6:	e7d6      	b.n	80121a6 <__swbuf_r+0x2a>

080121f8 <__swsetup_r>:
 80121f8:	b538      	push	{r3, r4, r5, lr}
 80121fa:	4b29      	ldr	r3, [pc, #164]	@ (80122a0 <__swsetup_r+0xa8>)
 80121fc:	4605      	mov	r5, r0
 80121fe:	6818      	ldr	r0, [r3, #0]
 8012200:	460c      	mov	r4, r1
 8012202:	b118      	cbz	r0, 801220c <__swsetup_r+0x14>
 8012204:	6a03      	ldr	r3, [r0, #32]
 8012206:	b90b      	cbnz	r3, 801220c <__swsetup_r+0x14>
 8012208:	f7fe f81e 	bl	8010248 <__sinit>
 801220c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012210:	0719      	lsls	r1, r3, #28
 8012212:	d422      	bmi.n	801225a <__swsetup_r+0x62>
 8012214:	06da      	lsls	r2, r3, #27
 8012216:	d407      	bmi.n	8012228 <__swsetup_r+0x30>
 8012218:	2209      	movs	r2, #9
 801221a:	602a      	str	r2, [r5, #0]
 801221c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012220:	81a3      	strh	r3, [r4, #12]
 8012222:	f04f 30ff 	mov.w	r0, #4294967295
 8012226:	e033      	b.n	8012290 <__swsetup_r+0x98>
 8012228:	0758      	lsls	r0, r3, #29
 801222a:	d512      	bpl.n	8012252 <__swsetup_r+0x5a>
 801222c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801222e:	b141      	cbz	r1, 8012242 <__swsetup_r+0x4a>
 8012230:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012234:	4299      	cmp	r1, r3
 8012236:	d002      	beq.n	801223e <__swsetup_r+0x46>
 8012238:	4628      	mov	r0, r5
 801223a:	f7fe feff 	bl	801103c <_free_r>
 801223e:	2300      	movs	r3, #0
 8012240:	6363      	str	r3, [r4, #52]	@ 0x34
 8012242:	89a3      	ldrh	r3, [r4, #12]
 8012244:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8012248:	81a3      	strh	r3, [r4, #12]
 801224a:	2300      	movs	r3, #0
 801224c:	6063      	str	r3, [r4, #4]
 801224e:	6923      	ldr	r3, [r4, #16]
 8012250:	6023      	str	r3, [r4, #0]
 8012252:	89a3      	ldrh	r3, [r4, #12]
 8012254:	f043 0308 	orr.w	r3, r3, #8
 8012258:	81a3      	strh	r3, [r4, #12]
 801225a:	6923      	ldr	r3, [r4, #16]
 801225c:	b94b      	cbnz	r3, 8012272 <__swsetup_r+0x7a>
 801225e:	89a3      	ldrh	r3, [r4, #12]
 8012260:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8012264:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012268:	d003      	beq.n	8012272 <__swsetup_r+0x7a>
 801226a:	4621      	mov	r1, r4
 801226c:	4628      	mov	r0, r5
 801226e:	f000 f883 	bl	8012378 <__smakebuf_r>
 8012272:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012276:	f013 0201 	ands.w	r2, r3, #1
 801227a:	d00a      	beq.n	8012292 <__swsetup_r+0x9a>
 801227c:	2200      	movs	r2, #0
 801227e:	60a2      	str	r2, [r4, #8]
 8012280:	6962      	ldr	r2, [r4, #20]
 8012282:	4252      	negs	r2, r2
 8012284:	61a2      	str	r2, [r4, #24]
 8012286:	6922      	ldr	r2, [r4, #16]
 8012288:	b942      	cbnz	r2, 801229c <__swsetup_r+0xa4>
 801228a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801228e:	d1c5      	bne.n	801221c <__swsetup_r+0x24>
 8012290:	bd38      	pop	{r3, r4, r5, pc}
 8012292:	0799      	lsls	r1, r3, #30
 8012294:	bf58      	it	pl
 8012296:	6962      	ldrpl	r2, [r4, #20]
 8012298:	60a2      	str	r2, [r4, #8]
 801229a:	e7f4      	b.n	8012286 <__swsetup_r+0x8e>
 801229c:	2000      	movs	r0, #0
 801229e:	e7f7      	b.n	8012290 <__swsetup_r+0x98>
 80122a0:	24000144 	.word	0x24000144

080122a4 <_raise_r>:
 80122a4:	291f      	cmp	r1, #31
 80122a6:	b538      	push	{r3, r4, r5, lr}
 80122a8:	4605      	mov	r5, r0
 80122aa:	460c      	mov	r4, r1
 80122ac:	d904      	bls.n	80122b8 <_raise_r+0x14>
 80122ae:	2316      	movs	r3, #22
 80122b0:	6003      	str	r3, [r0, #0]
 80122b2:	f04f 30ff 	mov.w	r0, #4294967295
 80122b6:	bd38      	pop	{r3, r4, r5, pc}
 80122b8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80122ba:	b112      	cbz	r2, 80122c2 <_raise_r+0x1e>
 80122bc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80122c0:	b94b      	cbnz	r3, 80122d6 <_raise_r+0x32>
 80122c2:	4628      	mov	r0, r5
 80122c4:	f000 f830 	bl	8012328 <_getpid_r>
 80122c8:	4622      	mov	r2, r4
 80122ca:	4601      	mov	r1, r0
 80122cc:	4628      	mov	r0, r5
 80122ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80122d2:	f000 b817 	b.w	8012304 <_kill_r>
 80122d6:	2b01      	cmp	r3, #1
 80122d8:	d00a      	beq.n	80122f0 <_raise_r+0x4c>
 80122da:	1c59      	adds	r1, r3, #1
 80122dc:	d103      	bne.n	80122e6 <_raise_r+0x42>
 80122de:	2316      	movs	r3, #22
 80122e0:	6003      	str	r3, [r0, #0]
 80122e2:	2001      	movs	r0, #1
 80122e4:	e7e7      	b.n	80122b6 <_raise_r+0x12>
 80122e6:	2100      	movs	r1, #0
 80122e8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80122ec:	4620      	mov	r0, r4
 80122ee:	4798      	blx	r3
 80122f0:	2000      	movs	r0, #0
 80122f2:	e7e0      	b.n	80122b6 <_raise_r+0x12>

080122f4 <raise>:
 80122f4:	4b02      	ldr	r3, [pc, #8]	@ (8012300 <raise+0xc>)
 80122f6:	4601      	mov	r1, r0
 80122f8:	6818      	ldr	r0, [r3, #0]
 80122fa:	f7ff bfd3 	b.w	80122a4 <_raise_r>
 80122fe:	bf00      	nop
 8012300:	24000144 	.word	0x24000144

08012304 <_kill_r>:
 8012304:	b538      	push	{r3, r4, r5, lr}
 8012306:	4d07      	ldr	r5, [pc, #28]	@ (8012324 <_kill_r+0x20>)
 8012308:	2300      	movs	r3, #0
 801230a:	4604      	mov	r4, r0
 801230c:	4608      	mov	r0, r1
 801230e:	4611      	mov	r1, r2
 8012310:	602b      	str	r3, [r5, #0]
 8012312:	f7ef f9ab 	bl	800166c <_kill>
 8012316:	1c43      	adds	r3, r0, #1
 8012318:	d102      	bne.n	8012320 <_kill_r+0x1c>
 801231a:	682b      	ldr	r3, [r5, #0]
 801231c:	b103      	cbz	r3, 8012320 <_kill_r+0x1c>
 801231e:	6023      	str	r3, [r4, #0]
 8012320:	bd38      	pop	{r3, r4, r5, pc}
 8012322:	bf00      	nop
 8012324:	2400259c 	.word	0x2400259c

08012328 <_getpid_r>:
 8012328:	f7ef b998 	b.w	800165c <_getpid>

0801232c <__swhatbuf_r>:
 801232c:	b570      	push	{r4, r5, r6, lr}
 801232e:	460c      	mov	r4, r1
 8012330:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012334:	2900      	cmp	r1, #0
 8012336:	b096      	sub	sp, #88	@ 0x58
 8012338:	4615      	mov	r5, r2
 801233a:	461e      	mov	r6, r3
 801233c:	da0d      	bge.n	801235a <__swhatbuf_r+0x2e>
 801233e:	89a3      	ldrh	r3, [r4, #12]
 8012340:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8012344:	f04f 0100 	mov.w	r1, #0
 8012348:	bf14      	ite	ne
 801234a:	2340      	movne	r3, #64	@ 0x40
 801234c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8012350:	2000      	movs	r0, #0
 8012352:	6031      	str	r1, [r6, #0]
 8012354:	602b      	str	r3, [r5, #0]
 8012356:	b016      	add	sp, #88	@ 0x58
 8012358:	bd70      	pop	{r4, r5, r6, pc}
 801235a:	466a      	mov	r2, sp
 801235c:	f000 f848 	bl	80123f0 <_fstat_r>
 8012360:	2800      	cmp	r0, #0
 8012362:	dbec      	blt.n	801233e <__swhatbuf_r+0x12>
 8012364:	9901      	ldr	r1, [sp, #4]
 8012366:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801236a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801236e:	4259      	negs	r1, r3
 8012370:	4159      	adcs	r1, r3
 8012372:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8012376:	e7eb      	b.n	8012350 <__swhatbuf_r+0x24>

08012378 <__smakebuf_r>:
 8012378:	898b      	ldrh	r3, [r1, #12]
 801237a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801237c:	079d      	lsls	r5, r3, #30
 801237e:	4606      	mov	r6, r0
 8012380:	460c      	mov	r4, r1
 8012382:	d507      	bpl.n	8012394 <__smakebuf_r+0x1c>
 8012384:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8012388:	6023      	str	r3, [r4, #0]
 801238a:	6123      	str	r3, [r4, #16]
 801238c:	2301      	movs	r3, #1
 801238e:	6163      	str	r3, [r4, #20]
 8012390:	b003      	add	sp, #12
 8012392:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012394:	ab01      	add	r3, sp, #4
 8012396:	466a      	mov	r2, sp
 8012398:	f7ff ffc8 	bl	801232c <__swhatbuf_r>
 801239c:	9f00      	ldr	r7, [sp, #0]
 801239e:	4605      	mov	r5, r0
 80123a0:	4639      	mov	r1, r7
 80123a2:	4630      	mov	r0, r6
 80123a4:	f7fe febe 	bl	8011124 <_malloc_r>
 80123a8:	b948      	cbnz	r0, 80123be <__smakebuf_r+0x46>
 80123aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80123ae:	059a      	lsls	r2, r3, #22
 80123b0:	d4ee      	bmi.n	8012390 <__smakebuf_r+0x18>
 80123b2:	f023 0303 	bic.w	r3, r3, #3
 80123b6:	f043 0302 	orr.w	r3, r3, #2
 80123ba:	81a3      	strh	r3, [r4, #12]
 80123bc:	e7e2      	b.n	8012384 <__smakebuf_r+0xc>
 80123be:	89a3      	ldrh	r3, [r4, #12]
 80123c0:	6020      	str	r0, [r4, #0]
 80123c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80123c6:	81a3      	strh	r3, [r4, #12]
 80123c8:	9b01      	ldr	r3, [sp, #4]
 80123ca:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80123ce:	b15b      	cbz	r3, 80123e8 <__smakebuf_r+0x70>
 80123d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80123d4:	4630      	mov	r0, r6
 80123d6:	f000 f81d 	bl	8012414 <_isatty_r>
 80123da:	b128      	cbz	r0, 80123e8 <__smakebuf_r+0x70>
 80123dc:	89a3      	ldrh	r3, [r4, #12]
 80123de:	f023 0303 	bic.w	r3, r3, #3
 80123e2:	f043 0301 	orr.w	r3, r3, #1
 80123e6:	81a3      	strh	r3, [r4, #12]
 80123e8:	89a3      	ldrh	r3, [r4, #12]
 80123ea:	431d      	orrs	r5, r3
 80123ec:	81a5      	strh	r5, [r4, #12]
 80123ee:	e7cf      	b.n	8012390 <__smakebuf_r+0x18>

080123f0 <_fstat_r>:
 80123f0:	b538      	push	{r3, r4, r5, lr}
 80123f2:	4d07      	ldr	r5, [pc, #28]	@ (8012410 <_fstat_r+0x20>)
 80123f4:	2300      	movs	r3, #0
 80123f6:	4604      	mov	r4, r0
 80123f8:	4608      	mov	r0, r1
 80123fa:	4611      	mov	r1, r2
 80123fc:	602b      	str	r3, [r5, #0]
 80123fe:	f7ef f995 	bl	800172c <_fstat>
 8012402:	1c43      	adds	r3, r0, #1
 8012404:	d102      	bne.n	801240c <_fstat_r+0x1c>
 8012406:	682b      	ldr	r3, [r5, #0]
 8012408:	b103      	cbz	r3, 801240c <_fstat_r+0x1c>
 801240a:	6023      	str	r3, [r4, #0]
 801240c:	bd38      	pop	{r3, r4, r5, pc}
 801240e:	bf00      	nop
 8012410:	2400259c 	.word	0x2400259c

08012414 <_isatty_r>:
 8012414:	b538      	push	{r3, r4, r5, lr}
 8012416:	4d06      	ldr	r5, [pc, #24]	@ (8012430 <_isatty_r+0x1c>)
 8012418:	2300      	movs	r3, #0
 801241a:	4604      	mov	r4, r0
 801241c:	4608      	mov	r0, r1
 801241e:	602b      	str	r3, [r5, #0]
 8012420:	f7ef f994 	bl	800174c <_isatty>
 8012424:	1c43      	adds	r3, r0, #1
 8012426:	d102      	bne.n	801242e <_isatty_r+0x1a>
 8012428:	682b      	ldr	r3, [r5, #0]
 801242a:	b103      	cbz	r3, 801242e <_isatty_r+0x1a>
 801242c:	6023      	str	r3, [r4, #0]
 801242e:	bd38      	pop	{r3, r4, r5, pc}
 8012430:	2400259c 	.word	0x2400259c

08012434 <lrintf>:
 8012434:	ee10 3a10 	vmov	r3, s0
 8012438:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801243c:	f1a2 007f 	sub.w	r0, r2, #127	@ 0x7f
 8012440:	281e      	cmp	r0, #30
 8012442:	b082      	sub	sp, #8
 8012444:	dc2f      	bgt.n	80124a6 <lrintf+0x72>
 8012446:	1c41      	adds	r1, r0, #1
 8012448:	da02      	bge.n	8012450 <lrintf+0x1c>
 801244a:	2000      	movs	r0, #0
 801244c:	b002      	add	sp, #8
 801244e:	4770      	bx	lr
 8012450:	2816      	cmp	r0, #22
 8012452:	ea4f 71d3 	mov.w	r1, r3, lsr #31
 8012456:	dd0a      	ble.n	801246e <lrintf+0x3a>
 8012458:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801245c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8012460:	3a96      	subs	r2, #150	@ 0x96
 8012462:	fa03 f002 	lsl.w	r0, r3, r2
 8012466:	2900      	cmp	r1, #0
 8012468:	d0f0      	beq.n	801244c <lrintf+0x18>
 801246a:	4240      	negs	r0, r0
 801246c:	e7ee      	b.n	801244c <lrintf+0x18>
 801246e:	4b10      	ldr	r3, [pc, #64]	@ (80124b0 <lrintf+0x7c>)
 8012470:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8012474:	ed93 7a00 	vldr	s14, [r3]
 8012478:	ee37 0a00 	vadd.f32	s0, s14, s0
 801247c:	ed8d 0a01 	vstr	s0, [sp, #4]
 8012480:	eddd 7a01 	vldr	s15, [sp, #4]
 8012484:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012488:	ee17 3a90 	vmov	r3, s15
 801248c:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8012490:	d0db      	beq.n	801244a <lrintf+0x16>
 8012492:	f3c3 0016 	ubfx	r0, r3, #0, #23
 8012496:	f3c3 53c7 	ubfx	r3, r3, #23, #8
 801249a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 801249e:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 80124a2:	40d8      	lsrs	r0, r3
 80124a4:	e7df      	b.n	8012466 <lrintf+0x32>
 80124a6:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80124aa:	ee17 0a90 	vmov	r0, s15
 80124ae:	e7cd      	b.n	801244c <lrintf+0x18>
 80124b0:	080129c0 	.word	0x080129c0
 80124b4:	00000000 	.word	0x00000000

080124b8 <floor>:
 80124b8:	ee10 3a90 	vmov	r3, s1
 80124bc:	f3c3 500a 	ubfx	r0, r3, #20, #11
 80124c0:	ee10 2a10 	vmov	r2, s0
 80124c4:	f2a0 31ff 	subw	r1, r0, #1023	@ 0x3ff
 80124c8:	2913      	cmp	r1, #19
 80124ca:	b530      	push	{r4, r5, lr}
 80124cc:	4615      	mov	r5, r2
 80124ce:	dc33      	bgt.n	8012538 <floor+0x80>
 80124d0:	2900      	cmp	r1, #0
 80124d2:	da18      	bge.n	8012506 <floor+0x4e>
 80124d4:	ed9f 7b30 	vldr	d7, [pc, #192]	@ 8012598 <floor+0xe0>
 80124d8:	ee30 0b07 	vadd.f64	d0, d0, d7
 80124dc:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80124e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80124e4:	dd0a      	ble.n	80124fc <floor+0x44>
 80124e6:	2b00      	cmp	r3, #0
 80124e8:	da50      	bge.n	801258c <floor+0xd4>
 80124ea:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80124ee:	4313      	orrs	r3, r2
 80124f0:	2200      	movs	r2, #0
 80124f2:	4293      	cmp	r3, r2
 80124f4:	4b2a      	ldr	r3, [pc, #168]	@ (80125a0 <floor+0xe8>)
 80124f6:	bf08      	it	eq
 80124f8:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 80124fc:	4619      	mov	r1, r3
 80124fe:	4610      	mov	r0, r2
 8012500:	ec41 0b10 	vmov	d0, r0, r1
 8012504:	e01f      	b.n	8012546 <floor+0x8e>
 8012506:	4827      	ldr	r0, [pc, #156]	@ (80125a4 <floor+0xec>)
 8012508:	4108      	asrs	r0, r1
 801250a:	ea03 0400 	and.w	r4, r3, r0
 801250e:	4314      	orrs	r4, r2
 8012510:	d019      	beq.n	8012546 <floor+0x8e>
 8012512:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8012598 <floor+0xe0>
 8012516:	ee30 0b07 	vadd.f64	d0, d0, d7
 801251a:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801251e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012522:	ddeb      	ble.n	80124fc <floor+0x44>
 8012524:	2b00      	cmp	r3, #0
 8012526:	bfbe      	ittt	lt
 8012528:	f44f 1280 	movlt.w	r2, #1048576	@ 0x100000
 801252c:	410a      	asrlt	r2, r1
 801252e:	189b      	addlt	r3, r3, r2
 8012530:	ea23 0300 	bic.w	r3, r3, r0
 8012534:	2200      	movs	r2, #0
 8012536:	e7e1      	b.n	80124fc <floor+0x44>
 8012538:	2933      	cmp	r1, #51	@ 0x33
 801253a:	dd05      	ble.n	8012548 <floor+0x90>
 801253c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8012540:	d101      	bne.n	8012546 <floor+0x8e>
 8012542:	ee30 0b00 	vadd.f64	d0, d0, d0
 8012546:	bd30      	pop	{r4, r5, pc}
 8012548:	f2a0 4413 	subw	r4, r0, #1043	@ 0x413
 801254c:	f04f 30ff 	mov.w	r0, #4294967295
 8012550:	40e0      	lsrs	r0, r4
 8012552:	4210      	tst	r0, r2
 8012554:	d0f7      	beq.n	8012546 <floor+0x8e>
 8012556:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 8012598 <floor+0xe0>
 801255a:	ee30 0b07 	vadd.f64	d0, d0, d7
 801255e:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8012562:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012566:	ddc9      	ble.n	80124fc <floor+0x44>
 8012568:	2b00      	cmp	r3, #0
 801256a:	da02      	bge.n	8012572 <floor+0xba>
 801256c:	2914      	cmp	r1, #20
 801256e:	d103      	bne.n	8012578 <floor+0xc0>
 8012570:	3301      	adds	r3, #1
 8012572:	ea22 0200 	bic.w	r2, r2, r0
 8012576:	e7c1      	b.n	80124fc <floor+0x44>
 8012578:	2401      	movs	r4, #1
 801257a:	f1c1 0134 	rsb	r1, r1, #52	@ 0x34
 801257e:	fa04 f101 	lsl.w	r1, r4, r1
 8012582:	440a      	add	r2, r1
 8012584:	42aa      	cmp	r2, r5
 8012586:	bf38      	it	cc
 8012588:	191b      	addcc	r3, r3, r4
 801258a:	e7f2      	b.n	8012572 <floor+0xba>
 801258c:	2200      	movs	r2, #0
 801258e:	4613      	mov	r3, r2
 8012590:	e7b4      	b.n	80124fc <floor+0x44>
 8012592:	bf00      	nop
 8012594:	f3af 8000 	nop.w
 8012598:	8800759c 	.word	0x8800759c
 801259c:	7e37e43c 	.word	0x7e37e43c
 80125a0:	bff00000 	.word	0xbff00000
 80125a4:	000fffff 	.word	0x000fffff

080125a8 <_init>:
 80125a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80125aa:	bf00      	nop
 80125ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80125ae:	bc08      	pop	{r3}
 80125b0:	469e      	mov	lr, r3
 80125b2:	4770      	bx	lr

080125b4 <_fini>:
 80125b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80125b6:	bf00      	nop
 80125b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80125ba:	bc08      	pop	{r3}
 80125bc:	469e      	mov	lr, r3
 80125be:	4770      	bx	lr
