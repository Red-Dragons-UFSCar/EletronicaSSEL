
Rx_M4_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007d7c  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  08008014  08008014  00009014  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008058  08008058  0000a02c  2**0
                  CONTENTS
  4 .ARM          00000008  08008058  08008058  00009058  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008060  08008060  0000a02c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008060  08008060  00009060  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008064  08008064  00009064  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000002c  24000000  08008068  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004f8  2400002c  08008094  0000a02c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  24000524  08008094  0000a524  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000a02c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018cb1  00000000  00000000  0000a05a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003053  00000000  00000000  00022d0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012a8  00000000  00000000  00025d60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e80  00000000  00000000  00027008  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003b9de  00000000  00000000  00027e88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b368  00000000  00000000  00063866  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00187dc9  00000000  00000000  0007ebce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00206997  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004e28  00000000  00000000  002069dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000047  00000000  00000000  0020b804  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	2400002c 	.word	0x2400002c
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08007ffc 	.word	0x08007ffc

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000030 	.word	0x24000030
 80002d4:	08007ffc 	.word	0x08007ffc

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96a 	b.w	80005c4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	460c      	mov	r4, r1
 8000310:	2b00      	cmp	r3, #0
 8000312:	d14e      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000314:	4694      	mov	ip, r2
 8000316:	458c      	cmp	ip, r1
 8000318:	4686      	mov	lr, r0
 800031a:	fab2 f282 	clz	r2, r2
 800031e:	d962      	bls.n	80003e6 <__udivmoddi4+0xde>
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0320 	rsb	r3, r2, #32
 8000326:	4091      	lsls	r1, r2
 8000328:	fa20 f303 	lsr.w	r3, r0, r3
 800032c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000330:	4319      	orrs	r1, r3
 8000332:	fa00 fe02 	lsl.w	lr, r0, r2
 8000336:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033a:	fa1f f68c 	uxth.w	r6, ip
 800033e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000342:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000346:	fb07 1114 	mls	r1, r7, r4, r1
 800034a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034e:	fb04 f106 	mul.w	r1, r4, r6
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f104 30ff 	add.w	r0, r4, #4294967295
 800035e:	f080 8112 	bcs.w	8000586 <__udivmoddi4+0x27e>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 810f 	bls.w	8000586 <__udivmoddi4+0x27e>
 8000368:	3c02      	subs	r4, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	fa1f f38e 	uxth.w	r3, lr
 8000372:	fbb1 f0f7 	udiv	r0, r1, r7
 8000376:	fb07 1110 	mls	r1, r7, r0, r1
 800037a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037e:	fb00 f606 	mul.w	r6, r0, r6
 8000382:	429e      	cmp	r6, r3
 8000384:	d90a      	bls.n	800039c <__udivmoddi4+0x94>
 8000386:	eb1c 0303 	adds.w	r3, ip, r3
 800038a:	f100 31ff 	add.w	r1, r0, #4294967295
 800038e:	f080 80fc 	bcs.w	800058a <__udivmoddi4+0x282>
 8000392:	429e      	cmp	r6, r3
 8000394:	f240 80f9 	bls.w	800058a <__udivmoddi4+0x282>
 8000398:	4463      	add	r3, ip
 800039a:	3802      	subs	r0, #2
 800039c:	1b9b      	subs	r3, r3, r6
 800039e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003a2:	2100      	movs	r1, #0
 80003a4:	b11d      	cbz	r5, 80003ae <__udivmoddi4+0xa6>
 80003a6:	40d3      	lsrs	r3, r2
 80003a8:	2200      	movs	r2, #0
 80003aa:	e9c5 3200 	strd	r3, r2, [r5]
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d905      	bls.n	80003c2 <__udivmoddi4+0xba>
 80003b6:	b10d      	cbz	r5, 80003bc <__udivmoddi4+0xb4>
 80003b8:	e9c5 0100 	strd	r0, r1, [r5]
 80003bc:	2100      	movs	r1, #0
 80003be:	4608      	mov	r0, r1
 80003c0:	e7f5      	b.n	80003ae <__udivmoddi4+0xa6>
 80003c2:	fab3 f183 	clz	r1, r3
 80003c6:	2900      	cmp	r1, #0
 80003c8:	d146      	bne.n	8000458 <__udivmoddi4+0x150>
 80003ca:	42a3      	cmp	r3, r4
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0xcc>
 80003ce:	4290      	cmp	r0, r2
 80003d0:	f0c0 80f0 	bcc.w	80005b4 <__udivmoddi4+0x2ac>
 80003d4:	1a86      	subs	r6, r0, r2
 80003d6:	eb64 0303 	sbc.w	r3, r4, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	2d00      	cmp	r5, #0
 80003de:	d0e6      	beq.n	80003ae <__udivmoddi4+0xa6>
 80003e0:	e9c5 6300 	strd	r6, r3, [r5]
 80003e4:	e7e3      	b.n	80003ae <__udivmoddi4+0xa6>
 80003e6:	2a00      	cmp	r2, #0
 80003e8:	f040 8090 	bne.w	800050c <__udivmoddi4+0x204>
 80003ec:	eba1 040c 	sub.w	r4, r1, ip
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	fa1f f78c 	uxth.w	r7, ip
 80003f8:	2101      	movs	r1, #1
 80003fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80003fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000402:	fb08 4416 	mls	r4, r8, r6, r4
 8000406:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040a:	fb07 f006 	mul.w	r0, r7, r6
 800040e:	4298      	cmp	r0, r3
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x11c>
 8000412:	eb1c 0303 	adds.w	r3, ip, r3
 8000416:	f106 34ff 	add.w	r4, r6, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x11a>
 800041c:	4298      	cmp	r0, r3
 800041e:	f200 80cd 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 8000422:	4626      	mov	r6, r4
 8000424:	1a1c      	subs	r4, r3, r0
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb4 f0f8 	udiv	r0, r4, r8
 800042e:	fb08 4410 	mls	r4, r8, r0, r4
 8000432:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000436:	fb00 f707 	mul.w	r7, r0, r7
 800043a:	429f      	cmp	r7, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x148>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 34ff 	add.w	r4, r0, #4294967295
 8000446:	d202      	bcs.n	800044e <__udivmoddi4+0x146>
 8000448:	429f      	cmp	r7, r3
 800044a:	f200 80b0 	bhi.w	80005ae <__udivmoddi4+0x2a6>
 800044e:	4620      	mov	r0, r4
 8000450:	1bdb      	subs	r3, r3, r7
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	e7a5      	b.n	80003a4 <__udivmoddi4+0x9c>
 8000458:	f1c1 0620 	rsb	r6, r1, #32
 800045c:	408b      	lsls	r3, r1
 800045e:	fa22 f706 	lsr.w	r7, r2, r6
 8000462:	431f      	orrs	r7, r3
 8000464:	fa20 fc06 	lsr.w	ip, r0, r6
 8000468:	fa04 f301 	lsl.w	r3, r4, r1
 800046c:	ea43 030c 	orr.w	r3, r3, ip
 8000470:	40f4      	lsrs	r4, r6
 8000472:	fa00 f801 	lsl.w	r8, r0, r1
 8000476:	0c38      	lsrs	r0, r7, #16
 8000478:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800047c:	fbb4 fef0 	udiv	lr, r4, r0
 8000480:	fa1f fc87 	uxth.w	ip, r7
 8000484:	fb00 441e 	mls	r4, r0, lr, r4
 8000488:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048c:	fb0e f90c 	mul.w	r9, lr, ip
 8000490:	45a1      	cmp	r9, r4
 8000492:	fa02 f201 	lsl.w	r2, r2, r1
 8000496:	d90a      	bls.n	80004ae <__udivmoddi4+0x1a6>
 8000498:	193c      	adds	r4, r7, r4
 800049a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800049e:	f080 8084 	bcs.w	80005aa <__udivmoddi4+0x2a2>
 80004a2:	45a1      	cmp	r9, r4
 80004a4:	f240 8081 	bls.w	80005aa <__udivmoddi4+0x2a2>
 80004a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	eba4 0409 	sub.w	r4, r4, r9
 80004b2:	fa1f f983 	uxth.w	r9, r3
 80004b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ba:	fb00 4413 	mls	r4, r0, r3, r4
 80004be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c6:	45a4      	cmp	ip, r4
 80004c8:	d907      	bls.n	80004da <__udivmoddi4+0x1d2>
 80004ca:	193c      	adds	r4, r7, r4
 80004cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80004d0:	d267      	bcs.n	80005a2 <__udivmoddi4+0x29a>
 80004d2:	45a4      	cmp	ip, r4
 80004d4:	d965      	bls.n	80005a2 <__udivmoddi4+0x29a>
 80004d6:	3b02      	subs	r3, #2
 80004d8:	443c      	add	r4, r7
 80004da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004de:	fba0 9302 	umull	r9, r3, r0, r2
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	429c      	cmp	r4, r3
 80004e8:	46ce      	mov	lr, r9
 80004ea:	469c      	mov	ip, r3
 80004ec:	d351      	bcc.n	8000592 <__udivmoddi4+0x28a>
 80004ee:	d04e      	beq.n	800058e <__udivmoddi4+0x286>
 80004f0:	b155      	cbz	r5, 8000508 <__udivmoddi4+0x200>
 80004f2:	ebb8 030e 	subs.w	r3, r8, lr
 80004f6:	eb64 040c 	sbc.w	r4, r4, ip
 80004fa:	fa04 f606 	lsl.w	r6, r4, r6
 80004fe:	40cb      	lsrs	r3, r1
 8000500:	431e      	orrs	r6, r3
 8000502:	40cc      	lsrs	r4, r1
 8000504:	e9c5 6400 	strd	r6, r4, [r5]
 8000508:	2100      	movs	r1, #0
 800050a:	e750      	b.n	80003ae <__udivmoddi4+0xa6>
 800050c:	f1c2 0320 	rsb	r3, r2, #32
 8000510:	fa20 f103 	lsr.w	r1, r0, r3
 8000514:	fa0c fc02 	lsl.w	ip, ip, r2
 8000518:	fa24 f303 	lsr.w	r3, r4, r3
 800051c:	4094      	lsls	r4, r2
 800051e:	430c      	orrs	r4, r1
 8000520:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000524:	fa00 fe02 	lsl.w	lr, r0, r2
 8000528:	fa1f f78c 	uxth.w	r7, ip
 800052c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000530:	fb08 3110 	mls	r1, r8, r0, r3
 8000534:	0c23      	lsrs	r3, r4, #16
 8000536:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053a:	fb00 f107 	mul.w	r1, r0, r7
 800053e:	4299      	cmp	r1, r3
 8000540:	d908      	bls.n	8000554 <__udivmoddi4+0x24c>
 8000542:	eb1c 0303 	adds.w	r3, ip, r3
 8000546:	f100 36ff 	add.w	r6, r0, #4294967295
 800054a:	d22c      	bcs.n	80005a6 <__udivmoddi4+0x29e>
 800054c:	4299      	cmp	r1, r3
 800054e:	d92a      	bls.n	80005a6 <__udivmoddi4+0x29e>
 8000550:	3802      	subs	r0, #2
 8000552:	4463      	add	r3, ip
 8000554:	1a5b      	subs	r3, r3, r1
 8000556:	b2a4      	uxth	r4, r4
 8000558:	fbb3 f1f8 	udiv	r1, r3, r8
 800055c:	fb08 3311 	mls	r3, r8, r1, r3
 8000560:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000564:	fb01 f307 	mul.w	r3, r1, r7
 8000568:	42a3      	cmp	r3, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x276>
 800056c:	eb1c 0404 	adds.w	r4, ip, r4
 8000570:	f101 36ff 	add.w	r6, r1, #4294967295
 8000574:	d213      	bcs.n	800059e <__udivmoddi4+0x296>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d911      	bls.n	800059e <__udivmoddi4+0x296>
 800057a:	3902      	subs	r1, #2
 800057c:	4464      	add	r4, ip
 800057e:	1ae4      	subs	r4, r4, r3
 8000580:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000584:	e739      	b.n	80003fa <__udivmoddi4+0xf2>
 8000586:	4604      	mov	r4, r0
 8000588:	e6f0      	b.n	800036c <__udivmoddi4+0x64>
 800058a:	4608      	mov	r0, r1
 800058c:	e706      	b.n	800039c <__udivmoddi4+0x94>
 800058e:	45c8      	cmp	r8, r9
 8000590:	d2ae      	bcs.n	80004f0 <__udivmoddi4+0x1e8>
 8000592:	ebb9 0e02 	subs.w	lr, r9, r2
 8000596:	eb63 0c07 	sbc.w	ip, r3, r7
 800059a:	3801      	subs	r0, #1
 800059c:	e7a8      	b.n	80004f0 <__udivmoddi4+0x1e8>
 800059e:	4631      	mov	r1, r6
 80005a0:	e7ed      	b.n	800057e <__udivmoddi4+0x276>
 80005a2:	4603      	mov	r3, r0
 80005a4:	e799      	b.n	80004da <__udivmoddi4+0x1d2>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e7d4      	b.n	8000554 <__udivmoddi4+0x24c>
 80005aa:	46d6      	mov	lr, sl
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1a6>
 80005ae:	4463      	add	r3, ip
 80005b0:	3802      	subs	r0, #2
 80005b2:	e74d      	b.n	8000450 <__udivmoddi4+0x148>
 80005b4:	4606      	mov	r6, r0
 80005b6:	4623      	mov	r3, r4
 80005b8:	4608      	mov	r0, r1
 80005ba:	e70f      	b.n	80003dc <__udivmoddi4+0xd4>
 80005bc:	3e02      	subs	r6, #2
 80005be:	4463      	add	r3, ip
 80005c0:	e730      	b.n	8000424 <__udivmoddi4+0x11c>
 80005c2:	bf00      	nop

080005c4 <__aeabi_idiv0>:
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop

080005c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005cc:	4b3d      	ldr	r3, [pc, #244]	@ (80006c4 <SystemInit+0xfc>)
 80005ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80005d2:	4a3c      	ldr	r2, [pc, #240]	@ (80006c4 <SystemInit+0xfc>)
 80005d4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80005d8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005dc:	4b39      	ldr	r3, [pc, #228]	@ (80006c4 <SystemInit+0xfc>)
 80005de:	691b      	ldr	r3, [r3, #16]
 80005e0:	4a38      	ldr	r2, [pc, #224]	@ (80006c4 <SystemInit+0xfc>)
 80005e2:	f043 0310 	orr.w	r3, r3, #16
 80005e6:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005e8:	4b37      	ldr	r3, [pc, #220]	@ (80006c8 <SystemInit+0x100>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	f003 030f 	and.w	r3, r3, #15
 80005f0:	2b06      	cmp	r3, #6
 80005f2:	d807      	bhi.n	8000604 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80005f4:	4b34      	ldr	r3, [pc, #208]	@ (80006c8 <SystemInit+0x100>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	f023 030f 	bic.w	r3, r3, #15
 80005fc:	4a32      	ldr	r2, [pc, #200]	@ (80006c8 <SystemInit+0x100>)
 80005fe:	f043 0307 	orr.w	r3, r3, #7
 8000602:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000604:	4b31      	ldr	r3, [pc, #196]	@ (80006cc <SystemInit+0x104>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4a30      	ldr	r2, [pc, #192]	@ (80006cc <SystemInit+0x104>)
 800060a:	f043 0301 	orr.w	r3, r3, #1
 800060e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000610:	4b2e      	ldr	r3, [pc, #184]	@ (80006cc <SystemInit+0x104>)
 8000612:	2200      	movs	r2, #0
 8000614:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000616:	4b2d      	ldr	r3, [pc, #180]	@ (80006cc <SystemInit+0x104>)
 8000618:	681a      	ldr	r2, [r3, #0]
 800061a:	492c      	ldr	r1, [pc, #176]	@ (80006cc <SystemInit+0x104>)
 800061c:	4b2c      	ldr	r3, [pc, #176]	@ (80006d0 <SystemInit+0x108>)
 800061e:	4013      	ands	r3, r2
 8000620:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000622:	4b29      	ldr	r3, [pc, #164]	@ (80006c8 <SystemInit+0x100>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	f003 0308 	and.w	r3, r3, #8
 800062a:	2b00      	cmp	r3, #0
 800062c:	d007      	beq.n	800063e <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800062e:	4b26      	ldr	r3, [pc, #152]	@ (80006c8 <SystemInit+0x100>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	f023 030f 	bic.w	r3, r3, #15
 8000636:	4a24      	ldr	r2, [pc, #144]	@ (80006c8 <SystemInit+0x100>)
 8000638:	f043 0307 	orr.w	r3, r3, #7
 800063c:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800063e:	4b23      	ldr	r3, [pc, #140]	@ (80006cc <SystemInit+0x104>)
 8000640:	2200      	movs	r2, #0
 8000642:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000644:	4b21      	ldr	r3, [pc, #132]	@ (80006cc <SystemInit+0x104>)
 8000646:	2200      	movs	r2, #0
 8000648:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800064a:	4b20      	ldr	r3, [pc, #128]	@ (80006cc <SystemInit+0x104>)
 800064c:	2200      	movs	r2, #0
 800064e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000650:	4b1e      	ldr	r3, [pc, #120]	@ (80006cc <SystemInit+0x104>)
 8000652:	4a20      	ldr	r2, [pc, #128]	@ (80006d4 <SystemInit+0x10c>)
 8000654:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000656:	4b1d      	ldr	r3, [pc, #116]	@ (80006cc <SystemInit+0x104>)
 8000658:	4a1f      	ldr	r2, [pc, #124]	@ (80006d8 <SystemInit+0x110>)
 800065a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800065c:	4b1b      	ldr	r3, [pc, #108]	@ (80006cc <SystemInit+0x104>)
 800065e:	4a1f      	ldr	r2, [pc, #124]	@ (80006dc <SystemInit+0x114>)
 8000660:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000662:	4b1a      	ldr	r3, [pc, #104]	@ (80006cc <SystemInit+0x104>)
 8000664:	2200      	movs	r2, #0
 8000666:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000668:	4b18      	ldr	r3, [pc, #96]	@ (80006cc <SystemInit+0x104>)
 800066a:	4a1c      	ldr	r2, [pc, #112]	@ (80006dc <SystemInit+0x114>)
 800066c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800066e:	4b17      	ldr	r3, [pc, #92]	@ (80006cc <SystemInit+0x104>)
 8000670:	2200      	movs	r2, #0
 8000672:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000674:	4b15      	ldr	r3, [pc, #84]	@ (80006cc <SystemInit+0x104>)
 8000676:	4a19      	ldr	r2, [pc, #100]	@ (80006dc <SystemInit+0x114>)
 8000678:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800067a:	4b14      	ldr	r3, [pc, #80]	@ (80006cc <SystemInit+0x104>)
 800067c:	2200      	movs	r2, #0
 800067e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000680:	4b12      	ldr	r3, [pc, #72]	@ (80006cc <SystemInit+0x104>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	4a11      	ldr	r2, [pc, #68]	@ (80006cc <SystemInit+0x104>)
 8000686:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800068a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800068c:	4b0f      	ldr	r3, [pc, #60]	@ (80006cc <SystemInit+0x104>)
 800068e:	2200      	movs	r2, #0
 8000690:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000692:	4b13      	ldr	r3, [pc, #76]	@ (80006e0 <SystemInit+0x118>)
 8000694:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000696:	4a12      	ldr	r2, [pc, #72]	@ (80006e0 <SystemInit+0x118>)
 8000698:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800069c:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800069e:	4b11      	ldr	r3, [pc, #68]	@ (80006e4 <SystemInit+0x11c>)
 80006a0:	681a      	ldr	r2, [r3, #0]
 80006a2:	4b11      	ldr	r3, [pc, #68]	@ (80006e8 <SystemInit+0x120>)
 80006a4:	4013      	ands	r3, r2
 80006a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80006aa:	d202      	bcs.n	80006b2 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006ac:	4b0f      	ldr	r3, [pc, #60]	@ (80006ec <SystemInit+0x124>)
 80006ae:	2201      	movs	r2, #1
 80006b0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006b2:	4b0f      	ldr	r3, [pc, #60]	@ (80006f0 <SystemInit+0x128>)
 80006b4:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80006b8:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80006ba:	bf00      	nop
 80006bc:	46bd      	mov	sp, r7
 80006be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c2:	4770      	bx	lr
 80006c4:	e000ed00 	.word	0xe000ed00
 80006c8:	52002000 	.word	0x52002000
 80006cc:	58024400 	.word	0x58024400
 80006d0:	eaf6ed7f 	.word	0xeaf6ed7f
 80006d4:	02020200 	.word	0x02020200
 80006d8:	01ff0000 	.word	0x01ff0000
 80006dc:	01010280 	.word	0x01010280
 80006e0:	580000c0 	.word	0x580000c0
 80006e4:	5c001000 	.word	0x5c001000
 80006e8:	ffff0000 	.word	0xffff0000
 80006ec:	51008108 	.word	0x51008108
 80006f0:	52004000 	.word	0x52004000

080006f4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b082      	sub	sp, #8
 80006f8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80006fa:	4b19      	ldr	r3, [pc, #100]	@ (8000760 <MX_DMA_Init+0x6c>)
 80006fc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000700:	4a17      	ldr	r2, [pc, #92]	@ (8000760 <MX_DMA_Init+0x6c>)
 8000702:	f043 0301 	orr.w	r3, r3, #1
 8000706:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800070a:	4b15      	ldr	r3, [pc, #84]	@ (8000760 <MX_DMA_Init+0x6c>)
 800070c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000710:	f003 0301 	and.w	r3, r3, #1
 8000714:	607b      	str	r3, [r7, #4]
 8000716:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000718:	2200      	movs	r2, #0
 800071a:	2100      	movs	r1, #0
 800071c:	200c      	movs	r0, #12
 800071e:	f001 fb16 	bl	8001d4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000722:	200c      	movs	r0, #12
 8000724:	f001 fb2d 	bl	8001d82 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000728:	2200      	movs	r2, #0
 800072a:	2100      	movs	r1, #0
 800072c:	200e      	movs	r0, #14
 800072e:	f001 fb0e 	bl	8001d4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000732:	200e      	movs	r0, #14
 8000734:	f001 fb25 	bl	8001d82 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8000738:	2200      	movs	r2, #0
 800073a:	2100      	movs	r1, #0
 800073c:	200f      	movs	r0, #15
 800073e:	f001 fb06 	bl	8001d4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000742:	200f      	movs	r0, #15
 8000744:	f001 fb1d 	bl	8001d82 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000748:	2200      	movs	r2, #0
 800074a:	2100      	movs	r1, #0
 800074c:	2010      	movs	r0, #16
 800074e:	f001 fafe 	bl	8001d4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000752:	2010      	movs	r0, #16
 8000754:	f001 fb15 	bl	8001d82 <HAL_NVIC_EnableIRQ>

}
 8000758:	bf00      	nop
 800075a:	3708      	adds	r7, #8
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}
 8000760:	58024400 	.word	0x58024400

08000764 <dshot_init>:
static void dshot_enable_dma_request();


/* Functions */
void dshot_init(dshot_type_e dshot_type)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b082      	sub	sp, #8
 8000768:	af00      	add	r7, sp, #0
 800076a:	4603      	mov	r3, r0
 800076c:	71fb      	strb	r3, [r7, #7]
	dshot_set_timer(dshot_type);
 800076e:	79fb      	ldrb	r3, [r7, #7]
 8000770:	4618      	mov	r0, r3
 8000772:	f000 f833 	bl	80007dc <dshot_set_timer>
	dshot_put_tc_callback_function();
 8000776:	f000 f8d3 	bl	8000920 <dshot_put_tc_callback_function>
	dshot_start_pwm();
 800077a:	f000 f8ef 	bl	800095c <dshot_start_pwm>
}
 800077e:	bf00      	nop
 8000780:	3708      	adds	r7, #8
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}

08000786 <dshot_write>:

void dshot_write(uint16_t* motor_value)
{
 8000786:	b580      	push	{r7, lr}
 8000788:	b082      	sub	sp, #8
 800078a:	af00      	add	r7, sp, #0
 800078c:	6078      	str	r0, [r7, #4]
	dshot_prepare_dmabuffer_all(motor_value);
 800078e:	6878      	ldr	r0, [r7, #4]
 8000790:	f000 f962 	bl	8000a58 <dshot_prepare_dmabuffer_all>
	dshot_dma_start();
 8000794:	f000 f98c 	bl	8000ab0 <dshot_dma_start>
	dshot_enable_dma_request();
 8000798:	f000 f9c2 	bl	8000b20 <dshot_enable_dma_request>
}
 800079c:	bf00      	nop
 800079e:	3708      	adds	r7, #8
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}

080007a4 <dshot_choose_type>:


/* Static functions */
static uint32_t dshot_choose_type(dshot_type_e dshot_type)
{
 80007a4:	b480      	push	{r7}
 80007a6:	b083      	sub	sp, #12
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	4603      	mov	r3, r0
 80007ac:	71fb      	strb	r3, [r7, #7]
	switch (dshot_type)
 80007ae:	79fb      	ldrb	r3, [r7, #7]
 80007b0:	2b01      	cmp	r3, #1
 80007b2:	d003      	beq.n	80007bc <dshot_choose_type+0x18>
 80007b4:	2b02      	cmp	r3, #2
 80007b6:	d103      	bne.n	80007c0 <dshot_choose_type+0x1c>
	{
		case(DSHOT600):
				return DSHOT600_HZ;
 80007b8:	4b05      	ldr	r3, [pc, #20]	@ (80007d0 <dshot_choose_type+0x2c>)
 80007ba:	e002      	b.n	80007c2 <dshot_choose_type+0x1e>

		case(DSHOT300):
				return DSHOT300_HZ;
 80007bc:	4b05      	ldr	r3, [pc, #20]	@ (80007d4 <dshot_choose_type+0x30>)
 80007be:	e000      	b.n	80007c2 <dshot_choose_type+0x1e>

		default:
		case(DSHOT150):
				return DSHOT150_HZ;
 80007c0:	4b05      	ldr	r3, [pc, #20]	@ (80007d8 <dshot_choose_type+0x34>)
	}
}
 80007c2:	4618      	mov	r0, r3
 80007c4:	370c      	adds	r7, #12
 80007c6:	46bd      	mov	sp, r7
 80007c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007cc:	4770      	bx	lr
 80007ce:	bf00      	nop
 80007d0:	00b71b00 	.word	0x00b71b00
 80007d4:	005b8d80 	.word	0x005b8d80
 80007d8:	002dc6c0 	.word	0x002dc6c0

080007dc <dshot_set_timer>:

static void dshot_set_timer(dshot_type_e dshot_type)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	ed2d 8b02 	vpush	{d8}
 80007e2:	b084      	sub	sp, #16
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	4603      	mov	r3, r0
 80007e8:	71fb      	strb	r3, [r7, #7]
	uint16_t dshot_prescaler;
	uint32_t timer_clock = TIMER_CLOCK; // all timer clock is same as SystemCoreClock in stm32f411
 80007ea:	4b27      	ldr	r3, [pc, #156]	@ (8000888 <dshot_set_timer+0xac>)
 80007ec:	60fb      	str	r3, [r7, #12]

	// Calculate prescaler by dshot type
	dshot_prescaler = lrintf((float) timer_clock / dshot_choose_type(dshot_type) + 0.01f) - 1;
 80007ee:	68fb      	ldr	r3, [r7, #12]
 80007f0:	ee07 3a90 	vmov	s15, r3
 80007f4:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 80007f8:	79fb      	ldrb	r3, [r7, #7]
 80007fa:	4618      	mov	r0, r3
 80007fc:	f7ff ffd2 	bl	80007a4 <dshot_choose_type>
 8000800:	ee07 0a90 	vmov	s15, r0
 8000804:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000808:	eec8 7a07 	vdiv.f32	s15, s16, s14
 800080c:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 800088c <dshot_set_timer+0xb0>
 8000810:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000814:	eeb0 0a67 	vmov.f32	s0, s15
 8000818:	f007 fbb0 	bl	8007f7c <lrintf>
 800081c:	4603      	mov	r3, r0
 800081e:	b29b      	uxth	r3, r3
 8000820:	3b01      	subs	r3, #1
 8000822:	817b      	strh	r3, [r7, #10]

	// motor1
	__HAL_TIM_SET_PRESCALER(MOTOR_1_TIM, dshot_prescaler);
 8000824:	4b1a      	ldr	r3, [pc, #104]	@ (8000890 <dshot_set_timer+0xb4>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	897a      	ldrh	r2, [r7, #10]
 800082a:	629a      	str	r2, [r3, #40]	@ 0x28
	__HAL_TIM_SET_AUTORELOAD(MOTOR_1_TIM, MOTOR_BITLENGTH);
 800082c:	4b18      	ldr	r3, [pc, #96]	@ (8000890 <dshot_set_timer+0xb4>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	2214      	movs	r2, #20
 8000832:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000834:	4b16      	ldr	r3, [pc, #88]	@ (8000890 <dshot_set_timer+0xb4>)
 8000836:	2214      	movs	r2, #20
 8000838:	60da      	str	r2, [r3, #12]

	// motor2
	__HAL_TIM_SET_PRESCALER(MOTOR_2_TIM, dshot_prescaler);
 800083a:	4b16      	ldr	r3, [pc, #88]	@ (8000894 <dshot_set_timer+0xb8>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	897a      	ldrh	r2, [r7, #10]
 8000840:	629a      	str	r2, [r3, #40]	@ 0x28
	__HAL_TIM_SET_AUTORELOAD(MOTOR_2_TIM, MOTOR_BITLENGTH);
 8000842:	4b14      	ldr	r3, [pc, #80]	@ (8000894 <dshot_set_timer+0xb8>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	2214      	movs	r2, #20
 8000848:	62da      	str	r2, [r3, #44]	@ 0x2c
 800084a:	4b12      	ldr	r3, [pc, #72]	@ (8000894 <dshot_set_timer+0xb8>)
 800084c:	2214      	movs	r2, #20
 800084e:	60da      	str	r2, [r3, #12]

	// motor3
	__HAL_TIM_SET_PRESCALER(MOTOR_3_TIM, dshot_prescaler);
 8000850:	4b10      	ldr	r3, [pc, #64]	@ (8000894 <dshot_set_timer+0xb8>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	897a      	ldrh	r2, [r7, #10]
 8000856:	629a      	str	r2, [r3, #40]	@ 0x28
	__HAL_TIM_SET_AUTORELOAD(MOTOR_3_TIM, MOTOR_BITLENGTH);
 8000858:	4b0e      	ldr	r3, [pc, #56]	@ (8000894 <dshot_set_timer+0xb8>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	2214      	movs	r2, #20
 800085e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000860:	4b0c      	ldr	r3, [pc, #48]	@ (8000894 <dshot_set_timer+0xb8>)
 8000862:	2214      	movs	r2, #20
 8000864:	60da      	str	r2, [r3, #12]

	// motor4
	__HAL_TIM_SET_PRESCALER(MOTOR_4_TIM, dshot_prescaler);
 8000866:	4b0a      	ldr	r3, [pc, #40]	@ (8000890 <dshot_set_timer+0xb4>)
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	897a      	ldrh	r2, [r7, #10]
 800086c:	629a      	str	r2, [r3, #40]	@ 0x28
	__HAL_TIM_SET_AUTORELOAD(MOTOR_4_TIM, MOTOR_BITLENGTH);
 800086e:	4b08      	ldr	r3, [pc, #32]	@ (8000890 <dshot_set_timer+0xb4>)
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	2214      	movs	r2, #20
 8000874:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000876:	4b06      	ldr	r3, [pc, #24]	@ (8000890 <dshot_set_timer+0xb4>)
 8000878:	2214      	movs	r2, #20
 800087a:	60da      	str	r2, [r3, #12]
}
 800087c:	bf00      	nop
 800087e:	3710      	adds	r7, #16
 8000880:	46bd      	mov	sp, r7
 8000882:	ecbd 8b02 	vpop	{d8}
 8000886:	bd80      	pop	{r7, pc}
 8000888:	05f5e100 	.word	0x05f5e100
 800088c:	3c23d70a 	.word	0x3c23d70a
 8000890:	24000258 	.word	0x24000258
 8000894:	240001c0 	.word	0x240001c0

08000898 <dshot_dma_tc_callback>:

// __HAL_TIM_DISABLE_DMA is needed to eliminate the delay between different dshot signals
// I don't know why :(
static void dshot_dma_tc_callback(DMA_HandleTypeDef *hdma)
{
 8000898:	b480      	push	{r7}
 800089a:	b085      	sub	sp, #20
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
	TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80008a4:	60fb      	str	r3, [r7, #12]

	if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80008a6:	68fb      	ldr	r3, [r7, #12]
 80008a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80008aa:	687a      	ldr	r2, [r7, #4]
 80008ac:	429a      	cmp	r2, r3
 80008ae:	d108      	bne.n	80008c2 <dshot_dma_tc_callback+0x2a>
	{
		__HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 80008b0:	68fb      	ldr	r3, [r7, #12]
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	68da      	ldr	r2, [r3, #12]
 80008b6:	68fb      	ldr	r3, [r7, #12]
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80008be:	60da      	str	r2, [r3, #12]
	}
	else if(hdma == htim->hdma[TIM_DMA_ID_CC4])
	{
		__HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
	}
}
 80008c0:	e028      	b.n	8000914 <dshot_dma_tc_callback+0x7c>
	else if(hdma == htim->hdma[TIM_DMA_ID_CC2])
 80008c2:	68fb      	ldr	r3, [r7, #12]
 80008c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80008c6:	687a      	ldr	r2, [r7, #4]
 80008c8:	429a      	cmp	r2, r3
 80008ca:	d108      	bne.n	80008de <dshot_dma_tc_callback+0x46>
		__HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	68da      	ldr	r2, [r3, #12]
 80008d2:	68fb      	ldr	r3, [r7, #12]
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80008da:	60da      	str	r2, [r3, #12]
}
 80008dc:	e01a      	b.n	8000914 <dshot_dma_tc_callback+0x7c>
	else if(hdma == htim->hdma[TIM_DMA_ID_CC3])
 80008de:	68fb      	ldr	r3, [r7, #12]
 80008e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80008e2:	687a      	ldr	r2, [r7, #4]
 80008e4:	429a      	cmp	r2, r3
 80008e6:	d108      	bne.n	80008fa <dshot_dma_tc_callback+0x62>
		__HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 80008e8:	68fb      	ldr	r3, [r7, #12]
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	68da      	ldr	r2, [r3, #12]
 80008ee:	68fb      	ldr	r3, [r7, #12]
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80008f6:	60da      	str	r2, [r3, #12]
}
 80008f8:	e00c      	b.n	8000914 <dshot_dma_tc_callback+0x7c>
	else if(hdma == htim->hdma[TIM_DMA_ID_CC4])
 80008fa:	68fb      	ldr	r3, [r7, #12]
 80008fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008fe:	687a      	ldr	r2, [r7, #4]
 8000900:	429a      	cmp	r2, r3
 8000902:	d107      	bne.n	8000914 <dshot_dma_tc_callback+0x7c>
		__HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8000904:	68fb      	ldr	r3, [r7, #12]
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	68da      	ldr	r2, [r3, #12]
 800090a:	68fb      	ldr	r3, [r7, #12]
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8000912:	60da      	str	r2, [r3, #12]
}
 8000914:	bf00      	nop
 8000916:	3714      	adds	r7, #20
 8000918:	46bd      	mov	sp, r7
 800091a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091e:	4770      	bx	lr

08000920 <dshot_put_tc_callback_function>:

static void dshot_put_tc_callback_function()
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
	// TIM_DMA_ID_CCx depends on timer channel
	MOTOR_1_TIM->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = dshot_dma_tc_callback;
 8000924:	4b0a      	ldr	r3, [pc, #40]	@ (8000950 <dshot_put_tc_callback_function+0x30>)
 8000926:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000928:	4a0a      	ldr	r2, [pc, #40]	@ (8000954 <dshot_put_tc_callback_function+0x34>)
 800092a:	63da      	str	r2, [r3, #60]	@ 0x3c
	MOTOR_2_TIM->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = dshot_dma_tc_callback;
 800092c:	4b0a      	ldr	r3, [pc, #40]	@ (8000958 <dshot_put_tc_callback_function+0x38>)
 800092e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000930:	4a08      	ldr	r2, [pc, #32]	@ (8000954 <dshot_put_tc_callback_function+0x34>)
 8000932:	63da      	str	r2, [r3, #60]	@ 0x3c
	MOTOR_3_TIM->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = dshot_dma_tc_callback;
 8000934:	4b08      	ldr	r3, [pc, #32]	@ (8000958 <dshot_put_tc_callback_function+0x38>)
 8000936:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000938:	4a06      	ldr	r2, [pc, #24]	@ (8000954 <dshot_put_tc_callback_function+0x34>)
 800093a:	63da      	str	r2, [r3, #60]	@ 0x3c
	MOTOR_4_TIM->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = dshot_dma_tc_callback;
 800093c:	4b04      	ldr	r3, [pc, #16]	@ (8000950 <dshot_put_tc_callback_function+0x30>)
 800093e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000940:	4a04      	ldr	r2, [pc, #16]	@ (8000954 <dshot_put_tc_callback_function+0x34>)
 8000942:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8000944:	bf00      	nop
 8000946:	46bd      	mov	sp, r7
 8000948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094c:	4770      	bx	lr
 800094e:	bf00      	nop
 8000950:	24000258 	.word	0x24000258
 8000954:	08000899 	.word	0x08000899
 8000958:	240001c0 	.word	0x240001c0

0800095c <dshot_start_pwm>:

static void dshot_start_pwm()
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
	// Start the timer channel now.
    // Enabling/disabling DMA request can restart a new cycle without PWM start/stop.
  	HAL_TIM_PWM_Start(MOTOR_1_TIM, MOTOR_1_TIM_CHANNEL);
 8000960:	210c      	movs	r1, #12
 8000962:	4808      	ldr	r0, [pc, #32]	@ (8000984 <dshot_start_pwm+0x28>)
 8000964:	f005 f9bc 	bl	8005ce0 <HAL_TIM_PWM_Start>
  	HAL_TIM_PWM_Start(MOTOR_2_TIM, MOTOR_2_TIM_CHANNEL);
 8000968:	2108      	movs	r1, #8
 800096a:	4807      	ldr	r0, [pc, #28]	@ (8000988 <dshot_start_pwm+0x2c>)
 800096c:	f005 f9b8 	bl	8005ce0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(MOTOR_3_TIM, MOTOR_3_TIM_CHANNEL);
 8000970:	2100      	movs	r1, #0
 8000972:	4805      	ldr	r0, [pc, #20]	@ (8000988 <dshot_start_pwm+0x2c>)
 8000974:	f005 f9b4 	bl	8005ce0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(MOTOR_4_TIM, MOTOR_4_TIM_CHANNEL);
 8000978:	2104      	movs	r1, #4
 800097a:	4802      	ldr	r0, [pc, #8]	@ (8000984 <dshot_start_pwm+0x28>)
 800097c:	f005 f9b0 	bl	8005ce0 <HAL_TIM_PWM_Start>
}
 8000980:	bf00      	nop
 8000982:	bd80      	pop	{r7, pc}
 8000984:	24000258 	.word	0x24000258
 8000988:	240001c0 	.word	0x240001c0

0800098c <dshot_prepare_packet>:

static uint16_t dshot_prepare_packet(uint16_t value)
{
 800098c:	b480      	push	{r7}
 800098e:	b087      	sub	sp, #28
 8000990:	af00      	add	r7, sp, #0
 8000992:	4603      	mov	r3, r0
 8000994:	80fb      	strh	r3, [r7, #6]
	uint16_t packet;
	bool dshot_telemetry = false;
 8000996:	2300      	movs	r3, #0
 8000998:	72fb      	strb	r3, [r7, #11]

	packet = (value << 1) | (dshot_telemetry ? 1 : 0);
 800099a:	88fb      	ldrh	r3, [r7, #6]
 800099c:	005b      	lsls	r3, r3, #1
 800099e:	b21a      	sxth	r2, r3
 80009a0:	7afb      	ldrb	r3, [r7, #11]
 80009a2:	b21b      	sxth	r3, r3
 80009a4:	4313      	orrs	r3, r2
 80009a6:	b21b      	sxth	r3, r3
 80009a8:	813b      	strh	r3, [r7, #8]

	// compute checksum
	unsigned csum = 0;
 80009aa:	2300      	movs	r3, #0
 80009ac:	617b      	str	r3, [r7, #20]
	unsigned csum_data = packet;
 80009ae:	893b      	ldrh	r3, [r7, #8]
 80009b0:	613b      	str	r3, [r7, #16]

	for(int i = 0; i < 3; i++)
 80009b2:	2300      	movs	r3, #0
 80009b4:	60fb      	str	r3, [r7, #12]
 80009b6:	e009      	b.n	80009cc <dshot_prepare_packet+0x40>
	{
        csum ^=  csum_data; // xor data by nibbles
 80009b8:	697a      	ldr	r2, [r7, #20]
 80009ba:	693b      	ldr	r3, [r7, #16]
 80009bc:	4053      	eors	r3, r2
 80009be:	617b      	str	r3, [r7, #20]
        csum_data >>= 4;
 80009c0:	693b      	ldr	r3, [r7, #16]
 80009c2:	091b      	lsrs	r3, r3, #4
 80009c4:	613b      	str	r3, [r7, #16]
	for(int i = 0; i < 3; i++)
 80009c6:	68fb      	ldr	r3, [r7, #12]
 80009c8:	3301      	adds	r3, #1
 80009ca:	60fb      	str	r3, [r7, #12]
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	2b02      	cmp	r3, #2
 80009d0:	ddf2      	ble.n	80009b8 <dshot_prepare_packet+0x2c>
	}

	csum &= 0xf;
 80009d2:	697b      	ldr	r3, [r7, #20]
 80009d4:	f003 030f 	and.w	r3, r3, #15
 80009d8:	617b      	str	r3, [r7, #20]
	packet = (packet << 4) | csum;
 80009da:	893b      	ldrh	r3, [r7, #8]
 80009dc:	011b      	lsls	r3, r3, #4
 80009de:	b29a      	uxth	r2, r3
 80009e0:	697b      	ldr	r3, [r7, #20]
 80009e2:	b29b      	uxth	r3, r3
 80009e4:	4313      	orrs	r3, r2
 80009e6:	813b      	strh	r3, [r7, #8]

	return packet;
 80009e8:	893b      	ldrh	r3, [r7, #8]
}
 80009ea:	4618      	mov	r0, r3
 80009ec:	371c      	adds	r7, #28
 80009ee:	46bd      	mov	sp, r7
 80009f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f4:	4770      	bx	lr

080009f6 <dshot_prepare_dmabuffer>:

// Convert 16 bits packet to 16 pwm signal
static void dshot_prepare_dmabuffer(uint32_t* motor_dmabuffer, uint16_t value)
{
 80009f6:	b580      	push	{r7, lr}
 80009f8:	b084      	sub	sp, #16
 80009fa:	af00      	add	r7, sp, #0
 80009fc:	6078      	str	r0, [r7, #4]
 80009fe:	460b      	mov	r3, r1
 8000a00:	807b      	strh	r3, [r7, #2]
	uint16_t packet;
	packet = dshot_prepare_packet(value);
 8000a02:	887b      	ldrh	r3, [r7, #2]
 8000a04:	4618      	mov	r0, r3
 8000a06:	f7ff ffc1 	bl	800098c <dshot_prepare_packet>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	81fb      	strh	r3, [r7, #14]

	for(int i = 0; i < 16; i++)
 8000a0e:	2300      	movs	r3, #0
 8000a10:	60bb      	str	r3, [r7, #8]
 8000a12:	e011      	b.n	8000a38 <dshot_prepare_dmabuffer+0x42>
	{
		motor_dmabuffer[i] = (packet & 0x8000) ? MOTOR_BIT_1 : MOTOR_BIT_0;
 8000a14:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	da01      	bge.n	8000a20 <dshot_prepare_dmabuffer+0x2a>
 8000a1c:	220e      	movs	r2, #14
 8000a1e:	e000      	b.n	8000a22 <dshot_prepare_dmabuffer+0x2c>
 8000a20:	2207      	movs	r2, #7
 8000a22:	68bb      	ldr	r3, [r7, #8]
 8000a24:	009b      	lsls	r3, r3, #2
 8000a26:	6879      	ldr	r1, [r7, #4]
 8000a28:	440b      	add	r3, r1
 8000a2a:	601a      	str	r2, [r3, #0]
		packet <<= 1;
 8000a2c:	89fb      	ldrh	r3, [r7, #14]
 8000a2e:	005b      	lsls	r3, r3, #1
 8000a30:	81fb      	strh	r3, [r7, #14]
	for(int i = 0; i < 16; i++)
 8000a32:	68bb      	ldr	r3, [r7, #8]
 8000a34:	3301      	adds	r3, #1
 8000a36:	60bb      	str	r3, [r7, #8]
 8000a38:	68bb      	ldr	r3, [r7, #8]
 8000a3a:	2b0f      	cmp	r3, #15
 8000a3c:	ddea      	ble.n	8000a14 <dshot_prepare_dmabuffer+0x1e>
	}

	motor_dmabuffer[16] = 0;
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	3340      	adds	r3, #64	@ 0x40
 8000a42:	2200      	movs	r2, #0
 8000a44:	601a      	str	r2, [r3, #0]
	motor_dmabuffer[17] = 0;
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	3344      	adds	r3, #68	@ 0x44
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	601a      	str	r2, [r3, #0]
}
 8000a4e:	bf00      	nop
 8000a50:	3710      	adds	r7, #16
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
	...

08000a58 <dshot_prepare_dmabuffer_all>:

static void dshot_prepare_dmabuffer_all(uint16_t* motor_value)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b082      	sub	sp, #8
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
	dshot_prepare_dmabuffer(motor1_dmabuffer, motor_value[0]);
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	881b      	ldrh	r3, [r3, #0]
 8000a64:	4619      	mov	r1, r3
 8000a66:	480e      	ldr	r0, [pc, #56]	@ (8000aa0 <dshot_prepare_dmabuffer_all+0x48>)
 8000a68:	f7ff ffc5 	bl	80009f6 <dshot_prepare_dmabuffer>
	dshot_prepare_dmabuffer(motor2_dmabuffer, motor_value[1]);
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	3302      	adds	r3, #2
 8000a70:	881b      	ldrh	r3, [r3, #0]
 8000a72:	4619      	mov	r1, r3
 8000a74:	480b      	ldr	r0, [pc, #44]	@ (8000aa4 <dshot_prepare_dmabuffer_all+0x4c>)
 8000a76:	f7ff ffbe 	bl	80009f6 <dshot_prepare_dmabuffer>
	dshot_prepare_dmabuffer(motor3_dmabuffer, motor_value[2]);
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	3304      	adds	r3, #4
 8000a7e:	881b      	ldrh	r3, [r3, #0]
 8000a80:	4619      	mov	r1, r3
 8000a82:	4809      	ldr	r0, [pc, #36]	@ (8000aa8 <dshot_prepare_dmabuffer_all+0x50>)
 8000a84:	f7ff ffb7 	bl	80009f6 <dshot_prepare_dmabuffer>
	dshot_prepare_dmabuffer(motor4_dmabuffer, motor_value[3]);
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	3306      	adds	r3, #6
 8000a8c:	881b      	ldrh	r3, [r3, #0]
 8000a8e:	4619      	mov	r1, r3
 8000a90:	4806      	ldr	r0, [pc, #24]	@ (8000aac <dshot_prepare_dmabuffer_all+0x54>)
 8000a92:	f7ff ffb0 	bl	80009f6 <dshot_prepare_dmabuffer>
}
 8000a96:	bf00      	nop
 8000a98:	3708      	adds	r7, #8
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	24000048 	.word	0x24000048
 8000aa4:	24000090 	.word	0x24000090
 8000aa8:	240000d8 	.word	0x240000d8
 8000aac:	24000120 	.word	0x24000120

08000ab0 <dshot_dma_start>:

static void dshot_dma_start()
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
	HAL_DMA_Start_IT(MOTOR_1_TIM->hdma[TIM_DMA_ID_CC4], (uint32_t)motor1_dmabuffer, (uint32_t)&MOTOR_1_TIM->Instance->CCR4, DSHOT_DMA_BUFFER_SIZE);
 8000ab4:	4b14      	ldr	r3, [pc, #80]	@ (8000b08 <dshot_dma_start+0x58>)
 8000ab6:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8000ab8:	4914      	ldr	r1, [pc, #80]	@ (8000b0c <dshot_dma_start+0x5c>)
 8000aba:	4b13      	ldr	r3, [pc, #76]	@ (8000b08 <dshot_dma_start+0x58>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	3340      	adds	r3, #64	@ 0x40
 8000ac0:	461a      	mov	r2, r3
 8000ac2:	2312      	movs	r3, #18
 8000ac4:	f001 fce8 	bl	8002498 <HAL_DMA_Start_IT>
	HAL_DMA_Start_IT(MOTOR_2_TIM->hdma[TIM_DMA_ID_CC3], (uint32_t)motor2_dmabuffer, (uint32_t)&MOTOR_2_TIM->Instance->CCR3, DSHOT_DMA_BUFFER_SIZE);
 8000ac8:	4b11      	ldr	r3, [pc, #68]	@ (8000b10 <dshot_dma_start+0x60>)
 8000aca:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8000acc:	4911      	ldr	r1, [pc, #68]	@ (8000b14 <dshot_dma_start+0x64>)
 8000ace:	4b10      	ldr	r3, [pc, #64]	@ (8000b10 <dshot_dma_start+0x60>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	333c      	adds	r3, #60	@ 0x3c
 8000ad4:	461a      	mov	r2, r3
 8000ad6:	2312      	movs	r3, #18
 8000ad8:	f001 fcde 	bl	8002498 <HAL_DMA_Start_IT>
	HAL_DMA_Start_IT(MOTOR_3_TIM->hdma[TIM_DMA_ID_CC1], (uint32_t)motor3_dmabuffer, (uint32_t)&MOTOR_3_TIM->Instance->CCR1, DSHOT_DMA_BUFFER_SIZE);
 8000adc:	4b0c      	ldr	r3, [pc, #48]	@ (8000b10 <dshot_dma_start+0x60>)
 8000ade:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8000ae0:	490d      	ldr	r1, [pc, #52]	@ (8000b18 <dshot_dma_start+0x68>)
 8000ae2:	4b0b      	ldr	r3, [pc, #44]	@ (8000b10 <dshot_dma_start+0x60>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	3334      	adds	r3, #52	@ 0x34
 8000ae8:	461a      	mov	r2, r3
 8000aea:	2312      	movs	r3, #18
 8000aec:	f001 fcd4 	bl	8002498 <HAL_DMA_Start_IT>
	HAL_DMA_Start_IT(MOTOR_4_TIM->hdma[TIM_DMA_ID_CC2], (uint32_t)motor4_dmabuffer, (uint32_t)&MOTOR_4_TIM->Instance->CCR2, DSHOT_DMA_BUFFER_SIZE);
 8000af0:	4b05      	ldr	r3, [pc, #20]	@ (8000b08 <dshot_dma_start+0x58>)
 8000af2:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8000af4:	4909      	ldr	r1, [pc, #36]	@ (8000b1c <dshot_dma_start+0x6c>)
 8000af6:	4b04      	ldr	r3, [pc, #16]	@ (8000b08 <dshot_dma_start+0x58>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	3338      	adds	r3, #56	@ 0x38
 8000afc:	461a      	mov	r2, r3
 8000afe:	2312      	movs	r3, #18
 8000b00:	f001 fcca 	bl	8002498 <HAL_DMA_Start_IT>
}
 8000b04:	bf00      	nop
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	24000258 	.word	0x24000258
 8000b0c:	24000048 	.word	0x24000048
 8000b10:	240001c0 	.word	0x240001c0
 8000b14:	24000090 	.word	0x24000090
 8000b18:	240000d8 	.word	0x240000d8
 8000b1c:	24000120 	.word	0x24000120

08000b20 <dshot_enable_dma_request>:

static void dshot_enable_dma_request()
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
	__HAL_TIM_ENABLE_DMA(MOTOR_1_TIM, TIM_DMA_CC4);
 8000b24:	4b12      	ldr	r3, [pc, #72]	@ (8000b70 <dshot_enable_dma_request+0x50>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	68da      	ldr	r2, [r3, #12]
 8000b2a:	4b11      	ldr	r3, [pc, #68]	@ (8000b70 <dshot_enable_dma_request+0x50>)
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8000b32:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_DMA(MOTOR_2_TIM, TIM_DMA_CC3);
 8000b34:	4b0f      	ldr	r3, [pc, #60]	@ (8000b74 <dshot_enable_dma_request+0x54>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	68da      	ldr	r2, [r3, #12]
 8000b3a:	4b0e      	ldr	r3, [pc, #56]	@ (8000b74 <dshot_enable_dma_request+0x54>)
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8000b42:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_DMA(MOTOR_3_TIM, TIM_DMA_CC1);
 8000b44:	4b0b      	ldr	r3, [pc, #44]	@ (8000b74 <dshot_enable_dma_request+0x54>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	68da      	ldr	r2, [r3, #12]
 8000b4a:	4b0a      	ldr	r3, [pc, #40]	@ (8000b74 <dshot_enable_dma_request+0x54>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000b52:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_DMA(MOTOR_4_TIM, TIM_DMA_CC2);
 8000b54:	4b06      	ldr	r3, [pc, #24]	@ (8000b70 <dshot_enable_dma_request+0x50>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	68da      	ldr	r2, [r3, #12]
 8000b5a:	4b05      	ldr	r3, [pc, #20]	@ (8000b70 <dshot_enable_dma_request+0x50>)
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8000b62:	60da      	str	r2, [r3, #12]
}
 8000b64:	bf00      	nop
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr
 8000b6e:	bf00      	nop
 8000b70:	24000258 	.word	0x24000258
 8000b74:	240001c0 	.word	0x240001c0

08000b78 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b08a      	sub	sp, #40	@ 0x28
 8000b7c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b7e:	f107 0314 	add.w	r3, r7, #20
 8000b82:	2200      	movs	r2, #0
 8000b84:	601a      	str	r2, [r3, #0]
 8000b86:	605a      	str	r2, [r3, #4]
 8000b88:	609a      	str	r2, [r3, #8]
 8000b8a:	60da      	str	r2, [r3, #12]
 8000b8c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b8e:	4b49      	ldr	r3, [pc, #292]	@ (8000cb4 <MX_GPIO_Init+0x13c>)
 8000b90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b94:	4a47      	ldr	r2, [pc, #284]	@ (8000cb4 <MX_GPIO_Init+0x13c>)
 8000b96:	f043 0304 	orr.w	r3, r3, #4
 8000b9a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b9e:	4b45      	ldr	r3, [pc, #276]	@ (8000cb4 <MX_GPIO_Init+0x13c>)
 8000ba0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ba4:	f003 0304 	and.w	r3, r3, #4
 8000ba8:	613b      	str	r3, [r7, #16]
 8000baa:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bac:	4b41      	ldr	r3, [pc, #260]	@ (8000cb4 <MX_GPIO_Init+0x13c>)
 8000bae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bb2:	4a40      	ldr	r2, [pc, #256]	@ (8000cb4 <MX_GPIO_Init+0x13c>)
 8000bb4:	f043 0301 	orr.w	r3, r3, #1
 8000bb8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000bbc:	4b3d      	ldr	r3, [pc, #244]	@ (8000cb4 <MX_GPIO_Init+0x13c>)
 8000bbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bc2:	f003 0301 	and.w	r3, r3, #1
 8000bc6:	60fb      	str	r3, [r7, #12]
 8000bc8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bca:	4b3a      	ldr	r3, [pc, #232]	@ (8000cb4 <MX_GPIO_Init+0x13c>)
 8000bcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bd0:	4a38      	ldr	r2, [pc, #224]	@ (8000cb4 <MX_GPIO_Init+0x13c>)
 8000bd2:	f043 0302 	orr.w	r3, r3, #2
 8000bd6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000bda:	4b36      	ldr	r3, [pc, #216]	@ (8000cb4 <MX_GPIO_Init+0x13c>)
 8000bdc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000be0:	f003 0302 	and.w	r3, r3, #2
 8000be4:	60bb      	str	r3, [r7, #8]
 8000be6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000be8:	4b32      	ldr	r3, [pc, #200]	@ (8000cb4 <MX_GPIO_Init+0x13c>)
 8000bea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bee:	4a31      	ldr	r2, [pc, #196]	@ (8000cb4 <MX_GPIO_Init+0x13c>)
 8000bf0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000bf4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000bf8:	4b2e      	ldr	r3, [pc, #184]	@ (8000cb4 <MX_GPIO_Init+0x13c>)
 8000bfa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bfe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000c02:	607b      	str	r3, [r7, #4]
 8000c04:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000c06:	2332      	movs	r3, #50	@ 0x32
 8000c08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c0a:	2302      	movs	r3, #2
 8000c0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c12:	2300      	movs	r3, #0
 8000c14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c16:	230b      	movs	r3, #11
 8000c18:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c1a:	f107 0314 	add.w	r3, r7, #20
 8000c1e:	4619      	mov	r1, r3
 8000c20:	4825      	ldr	r0, [pc, #148]	@ (8000cb8 <MX_GPIO_Init+0x140>)
 8000c22:	f003 fa25 	bl	8004070 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000c26:	2380      	movs	r3, #128	@ 0x80
 8000c28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c2a:	2302      	movs	r3, #2
 8000c2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c32:	2300      	movs	r3, #0
 8000c34:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c36:	230b      	movs	r3, #11
 8000c38:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c3a:	f107 0314 	add.w	r3, r7, #20
 8000c3e:	4619      	mov	r1, r3
 8000c40:	481e      	ldr	r0, [pc, #120]	@ (8000cbc <MX_GPIO_Init+0x144>)
 8000c42:	f003 fa15 	bl	8004070 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000c46:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c4c:	2302      	movs	r3, #2
 8000c4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c50:	2300      	movs	r3, #0
 8000c52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c54:	2300      	movs	r3, #0
 8000c56:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c58:	230b      	movs	r3, #11
 8000c5a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c5c:	f107 0314 	add.w	r3, r7, #20
 8000c60:	4619      	mov	r1, r3
 8000c62:	4817      	ldr	r0, [pc, #92]	@ (8000cc0 <MX_GPIO_Init+0x148>)
 8000c64:	f003 fa04 	bl	8004070 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000c68:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8000c6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c6e:	2302      	movs	r3, #2
 8000c70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c72:	2300      	movs	r3, #0
 8000c74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c76:	2300      	movs	r3, #0
 8000c78:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000c7a:	230a      	movs	r3, #10
 8000c7c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c7e:	f107 0314 	add.w	r3, r7, #20
 8000c82:	4619      	mov	r1, r3
 8000c84:	480d      	ldr	r0, [pc, #52]	@ (8000cbc <MX_GPIO_Init+0x144>)
 8000c86:	f003 f9f3 	bl	8004070 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000c8a:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000c8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c90:	2302      	movs	r3, #2
 8000c92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c94:	2300      	movs	r3, #0
 8000c96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c9c:	230b      	movs	r3, #11
 8000c9e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ca0:	f107 0314 	add.w	r3, r7, #20
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	4807      	ldr	r0, [pc, #28]	@ (8000cc4 <MX_GPIO_Init+0x14c>)
 8000ca8:	f003 f9e2 	bl	8004070 <HAL_GPIO_Init>

}
 8000cac:	bf00      	nop
 8000cae:	3728      	adds	r7, #40	@ 0x28
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	58024400 	.word	0x58024400
 8000cb8:	58020800 	.word	0x58020800
 8000cbc:	58020000 	.word	0x58020000
 8000cc0:	58020400 	.word	0x58020400
 8000cc4:	58021800 	.word	0x58021800

08000cc8 <get_M4>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t * get_M4() // get data from M4 to M7 buffer
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b083      	sub	sp, #12
 8000ccc:	af00      	add	r7, sp, #0
	static uint8_t buffer[32]; // buffer to receive data
	if (xfr_ptr->sts_4to7 == 1) // if M4 to M7 buffer has data
 8000cce:	4b16      	ldr	r3, [pc, #88]	@ (8000d28 <get_M4+0x60>)
 8000cd0:	781b      	ldrb	r3, [r3, #0]
 8000cd2:	b2db      	uxtb	r3, r3
 8000cd4:	2b01      	cmp	r3, #1
 8000cd6:	d11f      	bne.n	8000d18 <get_M4+0x50>
	{
		xfr_ptr->sts_4to7 = 2; // lock the M4 to M7 buffer
 8000cd8:	4b13      	ldr	r3, [pc, #76]	@ (8000d28 <get_M4+0x60>)
 8000cda:	2202      	movs	r2, #2
 8000cdc:	701a      	strb	r2, [r3, #0]
		for(int n = 0; n < 32; n++)
 8000cde:	2300      	movs	r3, #0
 8000ce0:	607b      	str	r3, [r7, #4]
 8000ce2:	e013      	b.n	8000d0c <get_M4+0x44>
		{
			buffer[n] = xfr_ptr->M4toM7[n]; // transfer data
 8000ce4:	4a10      	ldr	r2, [pc, #64]	@ (8000d28 <get_M4+0x60>)
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	4413      	add	r3, r2
 8000cea:	3302      	adds	r3, #2
 8000cec:	781b      	ldrb	r3, [r3, #0]
 8000cee:	b2d9      	uxtb	r1, r3
 8000cf0:	4a0e      	ldr	r2, [pc, #56]	@ (8000d2c <get_M4+0x64>)
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	4413      	add	r3, r2
 8000cf6:	460a      	mov	r2, r1
 8000cf8:	701a      	strb	r2, [r3, #0]
			xfr_ptr->M4toM7[n] = 0; // clear M4 to M7 buffer
 8000cfa:	4a0b      	ldr	r2, [pc, #44]	@ (8000d28 <get_M4+0x60>)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	4413      	add	r3, r2
 8000d00:	3302      	adds	r3, #2
 8000d02:	2200      	movs	r2, #0
 8000d04:	701a      	strb	r2, [r3, #0]
		for(int n = 0; n < 32; n++)
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	3301      	adds	r3, #1
 8000d0a:	607b      	str	r3, [r7, #4]
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	2b1f      	cmp	r3, #31
 8000d10:	dde8      	ble.n	8000ce4 <get_M4+0x1c>
		}
		xfr_ptr->sts_4to7 = 0; // M4 to M7 buffer is empty
 8000d12:	4b05      	ldr	r3, [pc, #20]	@ (8000d28 <get_M4+0x60>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	701a      	strb	r2, [r3, #0]
	}
	return buffer; // return the buffer (pointer)
 8000d18:	4b04      	ldr	r3, [pc, #16]	@ (8000d2c <get_M4+0x64>)
}
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	370c      	adds	r7, #12
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr
 8000d26:	bf00      	nop
 8000d28:	38001000 	.word	0x38001000
 8000d2c:	240001a0 	.word	0x240001a0

08000d30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b086      	sub	sp, #24
 8000d34:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000d36:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000d3a:	617b      	str	r3, [r7, #20]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000d3c:	bf00      	nop
 8000d3e:	4b5c      	ldr	r3, [pc, #368]	@ (8000eb0 <main+0x180>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d004      	beq.n	8000d54 <main+0x24>
 8000d4a:	697b      	ldr	r3, [r7, #20]
 8000d4c:	1e5a      	subs	r2, r3, #1
 8000d4e:	617a      	str	r2, [r7, #20]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	dcf4      	bgt.n	8000d3e <main+0xe>
  if ( timeout < 0 )
 8000d54:	697b      	ldr	r3, [r7, #20]
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	da01      	bge.n	8000d5e <main+0x2e>
  {
  Error_Handler();
 8000d5a:	f000 f935 	bl	8000fc8 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d5e:	f000 fe59 	bl	8001a14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d62:	f000 f8b3 	bl	8000ecc <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000d66:	4b52      	ldr	r3, [pc, #328]	@ (8000eb0 <main+0x180>)
 8000d68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d6c:	4a50      	ldr	r2, [pc, #320]	@ (8000eb0 <main+0x180>)
 8000d6e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000d72:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d76:	4b4e      	ldr	r3, [pc, #312]	@ (8000eb0 <main+0x180>)
 8000d78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d7c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000d80:	607b      	str	r3, [r7, #4]
 8000d82:	687b      	ldr	r3, [r7, #4]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000d84:	2000      	movs	r0, #0
 8000d86:	f003 fb57 	bl	8004438 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000d8a:	2100      	movs	r1, #0
 8000d8c:	2000      	movs	r0, #0
 8000d8e:	f003 fb6d 	bl	800446c <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000d92:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000d96:	617b      	str	r3, [r7, #20]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000d98:	bf00      	nop
 8000d9a:	4b45      	ldr	r3, [pc, #276]	@ (8000eb0 <main+0x180>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d104      	bne.n	8000db0 <main+0x80>
 8000da6:	697b      	ldr	r3, [r7, #20]
 8000da8:	1e5a      	subs	r2, r3, #1
 8000daa:	617a      	str	r2, [r7, #20]
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	dcf4      	bgt.n	8000d9a <main+0x6a>
if ( timeout < 0 )
 8000db0:	697b      	ldr	r3, [r7, #20]
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	da01      	bge.n	8000dba <main+0x8a>
{
Error_Handler();
 8000db6:	f000 f907 	bl	8000fc8 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dba:	f7ff fedd 	bl	8000b78 <MX_GPIO_Init>
  MX_DMA_Init();
 8000dbe:	f7ff fc99 	bl	80006f4 <MX_DMA_Init>
  MX_TIM2_Init();
 8000dc2:	f000 f991 	bl	80010e8 <MX_TIM2_Init>
  MX_TIM5_Init();
 8000dc6:	f000 fa41 	bl	800124c <MX_TIM5_Init>
  MX_TIM3_Init();
 8000dca:	f000 f9f1 	bl	80011b0 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
	uint8_t * xfr_data; // pointer to transfer data


	//initialize inter-core status pointers
	xfr_ptr->sts_4to7 = 0;
 8000dce:	4b39      	ldr	r3, [pc, #228]	@ (8000eb4 <main+0x184>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	701a      	strb	r2, [r3, #0]
	xfr_ptr->sts_7to4 = 0;
 8000dd4:	4b37      	ldr	r3, [pc, #220]	@ (8000eb4 <main+0x184>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	705a      	strb	r2, [r3, #1]

	dshot_init(DSHOT150);
 8000dda:	2000      	movs	r0, #0
 8000ddc:	f7ff fcc2 	bl	8000764 <dshot_init>
	  if (HAL_TIM_Base_Start_IT(&htim3) != HAL_OK)
 8000de0:	4835      	ldr	r0, [pc, #212]	@ (8000eb8 <main+0x188>)
 8000de2:	f004 fead 	bl	8005b40 <HAL_TIM_Base_Start_IT>
 8000de6:	4603      	mov	r3, r0
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d001      	beq.n	8000df0 <main+0xc0>
	    {
	      /* Starting Error */
	      Error_Handler();
 8000dec:	f000 f8ec 	bl	8000fc8 <Error_Handler>
	    }
  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 8000df0:	2000      	movs	r0, #0
 8000df2:	f000 fc47 	bl	8001684 <BSP_LED_Init>
  BSP_LED_Init(LED_YELLOW);
 8000df6:	2001      	movs	r0, #1
 8000df8:	f000 fc44 	bl	8001684 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 8000dfc:	2002      	movs	r0, #2
 8000dfe:	f000 fc41 	bl	8001684 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8000e02:	2101      	movs	r1, #1
 8000e04:	2000      	movs	r0, #0
 8000e06:	f000 fcb3 	bl	8001770 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 8000e0a:	4b2c      	ldr	r3, [pc, #176]	@ (8000ebc <main+0x18c>)
 8000e0c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000e10:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 8000e12:	4b2a      	ldr	r3, [pc, #168]	@ (8000ebc <main+0x18c>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 8000e18:	4b28      	ldr	r3, [pc, #160]	@ (8000ebc <main+0x18c>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 8000e1e:	4b27      	ldr	r3, [pc, #156]	@ (8000ebc <main+0x18c>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8000e24:	4b25      	ldr	r3, [pc, #148]	@ (8000ebc <main+0x18c>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 8000e2a:	4924      	ldr	r1, [pc, #144]	@ (8000ebc <main+0x18c>)
 8000e2c:	2000      	movs	r0, #0
 8000e2e:	f000 fd2f 	bl	8001890 <BSP_COM_Init>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d001      	beq.n	8000e3c <main+0x10c>
  {
    Error_Handler();
 8000e38:	f000 f8c6 	bl	8000fc8 <Error_Handler>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // if  M4 to M7 buffer has data
	  	  if (xfr_ptr->sts_4to7 == 1)
 8000e3c:	4b1d      	ldr	r3, [pc, #116]	@ (8000eb4 <main+0x184>)
 8000e3e:	781b      	ldrb	r3, [r3, #0]
 8000e40:	b2db      	uxtb	r3, r3
 8000e42:	2b01      	cmp	r3, #1
 8000e44:	d102      	bne.n	8000e4c <main+0x11c>
	  	  {
	  		  xfr_data = get_M4(); // get data sent from M4 to M7
 8000e46:	f7ff ff3f 	bl	8000cc8 <get_M4>
 8000e4a:	6138      	str	r0, [r7, #16]
	  	  }
	  	  for(uint8_t n = 0; n<32;n++){
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	73fb      	strb	r3, [r7, #15]
 8000e50:	e009      	b.n	8000e66 <main+0x136>
	  		  Mensagem[n] = xfr_data[n];
 8000e52:	7bfb      	ldrb	r3, [r7, #15]
 8000e54:	693a      	ldr	r2, [r7, #16]
 8000e56:	441a      	add	r2, r3
 8000e58:	7bfb      	ldrb	r3, [r7, #15]
 8000e5a:	7811      	ldrb	r1, [r2, #0]
 8000e5c:	4a18      	ldr	r2, [pc, #96]	@ (8000ec0 <main+0x190>)
 8000e5e:	54d1      	strb	r1, [r2, r3]
	  	  for(uint8_t n = 0; n<32;n++){
 8000e60:	7bfb      	ldrb	r3, [r7, #15]
 8000e62:	3301      	adds	r3, #1
 8000e64:	73fb      	strb	r3, [r7, #15]
 8000e66:	7bfb      	ldrb	r3, [r7, #15]
 8000e68:	2b1f      	cmp	r3, #31
 8000e6a:	d9f2      	bls.n	8000e52 <main+0x122>
	  	  }
	  	  for(int n=0;n<4;n++){
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	60bb      	str	r3, [r7, #8]
 8000e70:	e013      	b.n	8000e9a <main+0x16a>
	  		  motores[n] = (Mensagem[n]*2048)/255;
 8000e72:	4a13      	ldr	r2, [pc, #76]	@ (8000ec0 <main+0x190>)
 8000e74:	68bb      	ldr	r3, [r7, #8]
 8000e76:	4413      	add	r3, r2
 8000e78:	781b      	ldrb	r3, [r3, #0]
 8000e7a:	02db      	lsls	r3, r3, #11
 8000e7c:	4a11      	ldr	r2, [pc, #68]	@ (8000ec4 <main+0x194>)
 8000e7e:	fb82 1203 	smull	r1, r2, r2, r3
 8000e82:	441a      	add	r2, r3
 8000e84:	11d2      	asrs	r2, r2, #7
 8000e86:	17db      	asrs	r3, r3, #31
 8000e88:	1ad3      	subs	r3, r2, r3
 8000e8a:	b299      	uxth	r1, r3
 8000e8c:	4a0e      	ldr	r2, [pc, #56]	@ (8000ec8 <main+0x198>)
 8000e8e:	68bb      	ldr	r3, [r7, #8]
 8000e90:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	  	  for(int n=0;n<4;n++){
 8000e94:	68bb      	ldr	r3, [r7, #8]
 8000e96:	3301      	adds	r3, #1
 8000e98:	60bb      	str	r3, [r7, #8]
 8000e9a:	68bb      	ldr	r3, [r7, #8]
 8000e9c:	2b03      	cmp	r3, #3
 8000e9e:	dde8      	ble.n	8000e72 <main+0x142>

	  	  }
	  	  dshot_write(motores);
 8000ea0:	4809      	ldr	r0, [pc, #36]	@ (8000ec8 <main+0x198>)
 8000ea2:	f7ff fc70 	bl	8000786 <dshot_write>
	  	  HAL_Delay(1);
 8000ea6:	2001      	movs	r0, #1
 8000ea8:	f000 fe46 	bl	8001b38 <HAL_Delay>
	  	  if (xfr_ptr->sts_4to7 == 1)
 8000eac:	e7c6      	b.n	8000e3c <main+0x10c>
 8000eae:	bf00      	nop
 8000eb0:	58024400 	.word	0x58024400
 8000eb4:	38001000 	.word	0x38001000
 8000eb8:	2400020c 	.word	0x2400020c
 8000ebc:	24000168 	.word	0x24000168
 8000ec0:	24000178 	.word	0x24000178
 8000ec4:	80808081 	.word	0x80808081
 8000ec8:	24000198 	.word	0x24000198

08000ecc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b09c      	sub	sp, #112	@ 0x70
 8000ed0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ed2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ed6:	224c      	movs	r2, #76	@ 0x4c
 8000ed8:	2100      	movs	r1, #0
 8000eda:	4618      	mov	r0, r3
 8000edc:	f007 f822 	bl	8007f24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ee0:	1d3b      	adds	r3, r7, #4
 8000ee2:	2220      	movs	r2, #32
 8000ee4:	2100      	movs	r1, #0
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f007 f81c 	bl	8007f24 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000eec:	2004      	movs	r0, #4
 8000eee:	f003 fad1 	bl	8004494 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	603b      	str	r3, [r7, #0]
 8000ef6:	4b32      	ldr	r3, [pc, #200]	@ (8000fc0 <SystemClock_Config+0xf4>)
 8000ef8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000efa:	4a31      	ldr	r2, [pc, #196]	@ (8000fc0 <SystemClock_Config+0xf4>)
 8000efc:	f023 0301 	bic.w	r3, r3, #1
 8000f00:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000f02:	4b2f      	ldr	r3, [pc, #188]	@ (8000fc0 <SystemClock_Config+0xf4>)
 8000f04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f06:	f003 0301 	and.w	r3, r3, #1
 8000f0a:	603b      	str	r3, [r7, #0]
 8000f0c:	4b2d      	ldr	r3, [pc, #180]	@ (8000fc4 <SystemClock_Config+0xf8>)
 8000f0e:	699b      	ldr	r3, [r3, #24]
 8000f10:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000f14:	4a2b      	ldr	r2, [pc, #172]	@ (8000fc4 <SystemClock_Config+0xf8>)
 8000f16:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f1a:	6193      	str	r3, [r2, #24]
 8000f1c:	4b29      	ldr	r3, [pc, #164]	@ (8000fc4 <SystemClock_Config+0xf8>)
 8000f1e:	699b      	ldr	r3, [r3, #24]
 8000f20:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000f24:	603b      	str	r3, [r7, #0]
 8000f26:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000f28:	bf00      	nop
 8000f2a:	4b26      	ldr	r3, [pc, #152]	@ (8000fc4 <SystemClock_Config+0xf8>)
 8000f2c:	699b      	ldr	r3, [r3, #24]
 8000f2e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000f32:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000f36:	d1f8      	bne.n	8000f2a <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f38:	2302      	movs	r3, #2
 8000f3a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f40:	2340      	movs	r3, #64	@ 0x40
 8000f42:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f44:	2302      	movs	r3, #2
 8000f46:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000f4c:	2304      	movs	r3, #4
 8000f4e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 25;
 8000f50:	2319      	movs	r3, #25
 8000f52:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000f54:	2302      	movs	r3, #2
 8000f56:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000f58:	2305      	movs	r3, #5
 8000f5a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000f5c:	2302      	movs	r3, #2
 8000f5e:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000f60:	230c      	movs	r3, #12
 8000f62:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000f64:	2300      	movs	r3, #0
 8000f66:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f6c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f70:	4618      	mov	r0, r3
 8000f72:	f003 fae9 	bl	8004548 <HAL_RCC_OscConfig>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d001      	beq.n	8000f80 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000f7c:	f000 f824 	bl	8000fc8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f80:	233f      	movs	r3, #63	@ 0x3f
 8000f82:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f84:	2303      	movs	r3, #3
 8000f86:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000f90:	2340      	movs	r3, #64	@ 0x40
 8000f92:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000f94:	2340      	movs	r3, #64	@ 0x40
 8000f96:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000f98:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000f9c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000f9e:	2340      	movs	r3, #64	@ 0x40
 8000fa0:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000fa2:	1d3b      	adds	r3, r7, #4
 8000fa4:	2104      	movs	r1, #4
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f003 ff28 	bl	8004dfc <HAL_RCC_ClockConfig>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d001      	beq.n	8000fb6 <SystemClock_Config+0xea>
  {
    Error_Handler();
 8000fb2:	f000 f809 	bl	8000fc8 <Error_Handler>
  }
}
 8000fb6:	bf00      	nop
 8000fb8:	3770      	adds	r7, #112	@ 0x70
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	58000400 	.word	0x58000400
 8000fc4:	58024800 	.word	0x58024800

08000fc8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fcc:	b672      	cpsid	i
}
 8000fce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fd0:	bf00      	nop
 8000fd2:	e7fd      	b.n	8000fd0 <Error_Handler+0x8>

08000fd4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b083      	sub	sp, #12
 8000fd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fda:	4b0a      	ldr	r3, [pc, #40]	@ (8001004 <HAL_MspInit+0x30>)
 8000fdc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000fe0:	4a08      	ldr	r2, [pc, #32]	@ (8001004 <HAL_MspInit+0x30>)
 8000fe2:	f043 0302 	orr.w	r3, r3, #2
 8000fe6:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000fea:	4b06      	ldr	r3, [pc, #24]	@ (8001004 <HAL_MspInit+0x30>)
 8000fec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000ff0:	f003 0302 	and.w	r3, r3, #2
 8000ff4:	607b      	str	r3, [r7, #4]
 8000ff6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ff8:	bf00      	nop
 8000ffa:	370c      	adds	r7, #12
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001002:	4770      	bx	lr
 8001004:	58024400 	.word	0x58024400

08001008 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800100c:	bf00      	nop
 800100e:	e7fd      	b.n	800100c <NMI_Handler+0x4>

08001010 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001014:	bf00      	nop
 8001016:	e7fd      	b.n	8001014 <HardFault_Handler+0x4>

08001018 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800101c:	bf00      	nop
 800101e:	e7fd      	b.n	800101c <MemManage_Handler+0x4>

08001020 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001024:	bf00      	nop
 8001026:	e7fd      	b.n	8001024 <BusFault_Handler+0x4>

08001028 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800102c:	bf00      	nop
 800102e:	e7fd      	b.n	800102c <UsageFault_Handler+0x4>

08001030 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001034:	bf00      	nop
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr

0800103e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800103e:	b480      	push	{r7}
 8001040:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001042:	bf00      	nop
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr

0800104c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001050:	bf00      	nop
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr

0800105a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800105a:	b580      	push	{r7, lr}
 800105c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800105e:	f000 fd4b 	bl	8001af8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001062:	bf00      	nop
 8001064:	bd80      	pop	{r7, pc}
	...

08001068 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch3);
 800106c:	4802      	ldr	r0, [pc, #8]	@ (8001078 <DMA1_Stream1_IRQHandler+0x10>)
 800106e:	f001 fc7d 	bl	800296c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001072:	bf00      	nop
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	2400031c 	.word	0x2400031c

0800107c <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch4);
 8001080:	4802      	ldr	r0, [pc, #8]	@ (800108c <DMA1_Stream3_IRQHandler+0x10>)
 8001082:	f001 fc73 	bl	800296c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001086:	bf00      	nop
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	2400040c 	.word	0x2400040c

08001090 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch2);
 8001094:	4802      	ldr	r0, [pc, #8]	@ (80010a0 <DMA1_Stream4_IRQHandler+0x10>)
 8001096:	f001 fc69 	bl	800296c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800109a:	bf00      	nop
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	24000394 	.word	0x24000394

080010a4 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 80010a8:	4802      	ldr	r0, [pc, #8]	@ (80010b4 <DMA1_Stream5_IRQHandler+0x10>)
 80010aa:	f001 fc5f 	bl	800296c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80010ae:	bf00      	nop
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	240002a4 	.word	0x240002a4

080010b8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80010bc:	4804      	ldr	r0, [pc, #16]	@ (80010d0 <TIM3_IRQHandler+0x18>)
 80010be:	f004 ff1d 	bl	8005efc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
  HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_14);
 80010c2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80010c6:	4803      	ldr	r0, [pc, #12]	@ (80010d4 <TIM3_IRQHandler+0x1c>)
 80010c8:	f003 f99b 	bl	8004402 <HAL_GPIO_TogglePin>
  /* USER CODE END TIM3_IRQn 1 */
}
 80010cc:	bf00      	nop
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	2400020c 	.word	0x2400020c
 80010d4:	58020400 	.word	0x58020400

080010d8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 80010dc:	2000      	movs	r0, #0
 80010de:	f000 fbb9 	bl	8001854 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80010e2:	bf00      	nop
 80010e4:	bd80      	pop	{r7, pc}
	...

080010e8 <MX_TIM2_Init>:
DMA_HandleTypeDef hdma_tim5_ch2;
DMA_HandleTypeDef hdma_tim5_ch4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b08a      	sub	sp, #40	@ 0x28
 80010ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010ee:	f107 031c 	add.w	r3, r7, #28
 80010f2:	2200      	movs	r2, #0
 80010f4:	601a      	str	r2, [r3, #0]
 80010f6:	605a      	str	r2, [r3, #4]
 80010f8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010fa:	463b      	mov	r3, r7
 80010fc:	2200      	movs	r2, #0
 80010fe:	601a      	str	r2, [r3, #0]
 8001100:	605a      	str	r2, [r3, #4]
 8001102:	609a      	str	r2, [r3, #8]
 8001104:	60da      	str	r2, [r3, #12]
 8001106:	611a      	str	r2, [r3, #16]
 8001108:	615a      	str	r2, [r3, #20]
 800110a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800110c:	4b27      	ldr	r3, [pc, #156]	@ (80011ac <MX_TIM2_Init+0xc4>)
 800110e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001112:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001114:	4b25      	ldr	r3, [pc, #148]	@ (80011ac <MX_TIM2_Init+0xc4>)
 8001116:	2200      	movs	r2, #0
 8001118:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800111a:	4b24      	ldr	r3, [pc, #144]	@ (80011ac <MX_TIM2_Init+0xc4>)
 800111c:	2200      	movs	r2, #0
 800111e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 8001120:	4b22      	ldr	r3, [pc, #136]	@ (80011ac <MX_TIM2_Init+0xc4>)
 8001122:	2200      	movs	r2, #0
 8001124:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001126:	4b21      	ldr	r3, [pc, #132]	@ (80011ac <MX_TIM2_Init+0xc4>)
 8001128:	2200      	movs	r2, #0
 800112a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800112c:	4b1f      	ldr	r3, [pc, #124]	@ (80011ac <MX_TIM2_Init+0xc4>)
 800112e:	2200      	movs	r2, #0
 8001130:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001132:	481e      	ldr	r0, [pc, #120]	@ (80011ac <MX_TIM2_Init+0xc4>)
 8001134:	f004 fd7c 	bl	8005c30 <HAL_TIM_PWM_Init>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800113e:	f7ff ff43 	bl	8000fc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001142:	2300      	movs	r3, #0
 8001144:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001146:	2300      	movs	r3, #0
 8001148:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800114a:	f107 031c 	add.w	r3, r7, #28
 800114e:	4619      	mov	r1, r3
 8001150:	4816      	ldr	r0, [pc, #88]	@ (80011ac <MX_TIM2_Init+0xc4>)
 8001152:	f005 fe59 	bl	8006e08 <HAL_TIMEx_MasterConfigSynchronization>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d001      	beq.n	8001160 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 800115c:	f7ff ff34 	bl	8000fc8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001160:	2360      	movs	r3, #96	@ 0x60
 8001162:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001164:	2300      	movs	r3, #0
 8001166:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001168:	2300      	movs	r3, #0
 800116a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800116c:	2300      	movs	r3, #0
 800116e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001170:	463b      	mov	r3, r7
 8001172:	2200      	movs	r2, #0
 8001174:	4619      	mov	r1, r3
 8001176:	480d      	ldr	r0, [pc, #52]	@ (80011ac <MX_TIM2_Init+0xc4>)
 8001178:	f004 ffc8 	bl	800610c <HAL_TIM_PWM_ConfigChannel>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8001182:	f7ff ff21 	bl	8000fc8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001186:	463b      	mov	r3, r7
 8001188:	2208      	movs	r2, #8
 800118a:	4619      	mov	r1, r3
 800118c:	4807      	ldr	r0, [pc, #28]	@ (80011ac <MX_TIM2_Init+0xc4>)
 800118e:	f004 ffbd 	bl	800610c <HAL_TIM_PWM_ConfigChannel>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d001      	beq.n	800119c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001198:	f7ff ff16 	bl	8000fc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800119c:	4803      	ldr	r0, [pc, #12]	@ (80011ac <MX_TIM2_Init+0xc4>)
 800119e:	f000 f9e7 	bl	8001570 <HAL_TIM_MspPostInit>

}
 80011a2:	bf00      	nop
 80011a4:	3728      	adds	r7, #40	@ 0x28
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	240001c0 	.word	0x240001c0

080011b0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b088      	sub	sp, #32
 80011b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011b6:	f107 0310 	add.w	r3, r7, #16
 80011ba:	2200      	movs	r2, #0
 80011bc:	601a      	str	r2, [r3, #0]
 80011be:	605a      	str	r2, [r3, #4]
 80011c0:	609a      	str	r2, [r3, #8]
 80011c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011c4:	1d3b      	adds	r3, r7, #4
 80011c6:	2200      	movs	r2, #0
 80011c8:	601a      	str	r2, [r3, #0]
 80011ca:	605a      	str	r2, [r3, #4]
 80011cc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80011ce:	4b1d      	ldr	r3, [pc, #116]	@ (8001244 <MX_TIM3_Init+0x94>)
 80011d0:	4a1d      	ldr	r2, [pc, #116]	@ (8001248 <MX_TIM3_Init+0x98>)
 80011d2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 9999;
 80011d4:	4b1b      	ldr	r3, [pc, #108]	@ (8001244 <MX_TIM3_Init+0x94>)
 80011d6:	f242 720f 	movw	r2, #9999	@ 0x270f
 80011da:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011dc:	4b19      	ldr	r3, [pc, #100]	@ (8001244 <MX_TIM3_Init+0x94>)
 80011de:	2200      	movs	r2, #0
 80011e0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 80011e2:	4b18      	ldr	r3, [pc, #96]	@ (8001244 <MX_TIM3_Init+0x94>)
 80011e4:	2263      	movs	r2, #99	@ 0x63
 80011e6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011e8:	4b16      	ldr	r3, [pc, #88]	@ (8001244 <MX_TIM3_Init+0x94>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011ee:	4b15      	ldr	r3, [pc, #84]	@ (8001244 <MX_TIM3_Init+0x94>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80011f4:	4813      	ldr	r0, [pc, #76]	@ (8001244 <MX_TIM3_Init+0x94>)
 80011f6:	f004 fc4b 	bl	8005a90 <HAL_TIM_Base_Init>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d001      	beq.n	8001204 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001200:	f7ff fee2 	bl	8000fc8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001204:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001208:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800120a:	f107 0310 	add.w	r3, r7, #16
 800120e:	4619      	mov	r1, r3
 8001210:	480c      	ldr	r0, [pc, #48]	@ (8001244 <MX_TIM3_Init+0x94>)
 8001212:	f005 f88f 	bl	8006334 <HAL_TIM_ConfigClockSource>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d001      	beq.n	8001220 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 800121c:	f7ff fed4 	bl	8000fc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001220:	2300      	movs	r3, #0
 8001222:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001224:	2300      	movs	r3, #0
 8001226:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001228:	1d3b      	adds	r3, r7, #4
 800122a:	4619      	mov	r1, r3
 800122c:	4805      	ldr	r0, [pc, #20]	@ (8001244 <MX_TIM3_Init+0x94>)
 800122e:	f005 fdeb 	bl	8006e08 <HAL_TIMEx_MasterConfigSynchronization>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d001      	beq.n	800123c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001238:	f7ff fec6 	bl	8000fc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800123c:	bf00      	nop
 800123e:	3720      	adds	r7, #32
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	2400020c 	.word	0x2400020c
 8001248:	40000400 	.word	0x40000400

0800124c <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b08a      	sub	sp, #40	@ 0x28
 8001250:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001252:	f107 031c 	add.w	r3, r7, #28
 8001256:	2200      	movs	r2, #0
 8001258:	601a      	str	r2, [r3, #0]
 800125a:	605a      	str	r2, [r3, #4]
 800125c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800125e:	463b      	mov	r3, r7
 8001260:	2200      	movs	r2, #0
 8001262:	601a      	str	r2, [r3, #0]
 8001264:	605a      	str	r2, [r3, #4]
 8001266:	609a      	str	r2, [r3, #8]
 8001268:	60da      	str	r2, [r3, #12]
 800126a:	611a      	str	r2, [r3, #16]
 800126c:	615a      	str	r2, [r3, #20]
 800126e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001270:	4b26      	ldr	r3, [pc, #152]	@ (800130c <MX_TIM5_Init+0xc0>)
 8001272:	4a27      	ldr	r2, [pc, #156]	@ (8001310 <MX_TIM5_Init+0xc4>)
 8001274:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001276:	4b25      	ldr	r3, [pc, #148]	@ (800130c <MX_TIM5_Init+0xc0>)
 8001278:	2200      	movs	r2, #0
 800127a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800127c:	4b23      	ldr	r3, [pc, #140]	@ (800130c <MX_TIM5_Init+0xc0>)
 800127e:	2200      	movs	r2, #0
 8001280:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 0;
 8001282:	4b22      	ldr	r3, [pc, #136]	@ (800130c <MX_TIM5_Init+0xc0>)
 8001284:	2200      	movs	r2, #0
 8001286:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001288:	4b20      	ldr	r3, [pc, #128]	@ (800130c <MX_TIM5_Init+0xc0>)
 800128a:	2200      	movs	r2, #0
 800128c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800128e:	4b1f      	ldr	r3, [pc, #124]	@ (800130c <MX_TIM5_Init+0xc0>)
 8001290:	2200      	movs	r2, #0
 8001292:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001294:	481d      	ldr	r0, [pc, #116]	@ (800130c <MX_TIM5_Init+0xc0>)
 8001296:	f004 fccb 	bl	8005c30 <HAL_TIM_PWM_Init>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 80012a0:	f7ff fe92 	bl	8000fc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012a4:	2300      	movs	r3, #0
 80012a6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012a8:	2300      	movs	r3, #0
 80012aa:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80012ac:	f107 031c 	add.w	r3, r7, #28
 80012b0:	4619      	mov	r1, r3
 80012b2:	4816      	ldr	r0, [pc, #88]	@ (800130c <MX_TIM5_Init+0xc0>)
 80012b4:	f005 fda8 	bl	8006e08 <HAL_TIMEx_MasterConfigSynchronization>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 80012be:	f7ff fe83 	bl	8000fc8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012c2:	2360      	movs	r3, #96	@ 0x60
 80012c4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80012c6:	2300      	movs	r3, #0
 80012c8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012ca:	2300      	movs	r3, #0
 80012cc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012ce:	2300      	movs	r3, #0
 80012d0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80012d2:	463b      	mov	r3, r7
 80012d4:	2204      	movs	r2, #4
 80012d6:	4619      	mov	r1, r3
 80012d8:	480c      	ldr	r0, [pc, #48]	@ (800130c <MX_TIM5_Init+0xc0>)
 80012da:	f004 ff17 	bl	800610c <HAL_TIM_PWM_ConfigChannel>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d001      	beq.n	80012e8 <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 80012e4:	f7ff fe70 	bl	8000fc8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80012e8:	463b      	mov	r3, r7
 80012ea:	220c      	movs	r2, #12
 80012ec:	4619      	mov	r1, r3
 80012ee:	4807      	ldr	r0, [pc, #28]	@ (800130c <MX_TIM5_Init+0xc0>)
 80012f0:	f004 ff0c 	bl	800610c <HAL_TIM_PWM_ConfigChannel>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d001      	beq.n	80012fe <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 80012fa:	f7ff fe65 	bl	8000fc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80012fe:	4803      	ldr	r0, [pc, #12]	@ (800130c <MX_TIM5_Init+0xc0>)
 8001300:	f000 f936 	bl	8001570 <HAL_TIM_MspPostInit>

}
 8001304:	bf00      	nop
 8001306:	3728      	adds	r7, #40	@ 0x28
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}
 800130c:	24000258 	.word	0x24000258
 8001310:	40000c00 	.word	0x40000c00

08001314 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b084      	sub	sp, #16
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001324:	d16f      	bne.n	8001406 <HAL_TIM_PWM_MspInit+0xf2>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001326:	4b74      	ldr	r3, [pc, #464]	@ (80014f8 <HAL_TIM_PWM_MspInit+0x1e4>)
 8001328:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800132c:	4a72      	ldr	r2, [pc, #456]	@ (80014f8 <HAL_TIM_PWM_MspInit+0x1e4>)
 800132e:	f043 0301 	orr.w	r3, r3, #1
 8001332:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001336:	4b70      	ldr	r3, [pc, #448]	@ (80014f8 <HAL_TIM_PWM_MspInit+0x1e4>)
 8001338:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800133c:	f003 0301 	and.w	r3, r3, #1
 8001340:	60fb      	str	r3, [r7, #12]
 8001342:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 DMA Init */
    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Stream5;
 8001344:	4b6d      	ldr	r3, [pc, #436]	@ (80014fc <HAL_TIM_PWM_MspInit+0x1e8>)
 8001346:	4a6e      	ldr	r2, [pc, #440]	@ (8001500 <HAL_TIM_PWM_MspInit+0x1ec>)
 8001348:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Request = DMA_REQUEST_TIM2_CH1;
 800134a:	4b6c      	ldr	r3, [pc, #432]	@ (80014fc <HAL_TIM_PWM_MspInit+0x1e8>)
 800134c:	2212      	movs	r2, #18
 800134e:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001350:	4b6a      	ldr	r3, [pc, #424]	@ (80014fc <HAL_TIM_PWM_MspInit+0x1e8>)
 8001352:	2240      	movs	r2, #64	@ 0x40
 8001354:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001356:	4b69      	ldr	r3, [pc, #420]	@ (80014fc <HAL_TIM_PWM_MspInit+0x1e8>)
 8001358:	2200      	movs	r2, #0
 800135a:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800135c:	4b67      	ldr	r3, [pc, #412]	@ (80014fc <HAL_TIM_PWM_MspInit+0x1e8>)
 800135e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001362:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001364:	4b65      	ldr	r3, [pc, #404]	@ (80014fc <HAL_TIM_PWM_MspInit+0x1e8>)
 8001366:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800136a:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800136c:	4b63      	ldr	r3, [pc, #396]	@ (80014fc <HAL_TIM_PWM_MspInit+0x1e8>)
 800136e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001372:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Mode = DMA_NORMAL;
 8001374:	4b61      	ldr	r3, [pc, #388]	@ (80014fc <HAL_TIM_PWM_MspInit+0x1e8>)
 8001376:	2200      	movs	r2, #0
 8001378:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 800137a:	4b60      	ldr	r3, [pc, #384]	@ (80014fc <HAL_TIM_PWM_MspInit+0x1e8>)
 800137c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001380:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001382:	4b5e      	ldr	r3, [pc, #376]	@ (80014fc <HAL_TIM_PWM_MspInit+0x1e8>)
 8001384:	2200      	movs	r2, #0
 8001386:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 8001388:	485c      	ldr	r0, [pc, #368]	@ (80014fc <HAL_TIM_PWM_MspInit+0x1e8>)
 800138a:	f000 fd29 	bl	8001de0 <HAL_DMA_Init>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d001      	beq.n	8001398 <HAL_TIM_PWM_MspInit+0x84>
    {
      Error_Handler();
 8001394:	f7ff fe18 	bl	8000fc8 <Error_Handler>
    }

    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	4a58      	ldr	r2, [pc, #352]	@ (80014fc <HAL_TIM_PWM_MspInit+0x1e8>)
 800139c:	625a      	str	r2, [r3, #36]	@ 0x24
 800139e:	4a57      	ldr	r2, [pc, #348]	@ (80014fc <HAL_TIM_PWM_MspInit+0x1e8>)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	6393      	str	r3, [r2, #56]	@ 0x38

    /* TIM2_CH3 Init */
    hdma_tim2_ch3.Instance = DMA1_Stream1;
 80013a4:	4b57      	ldr	r3, [pc, #348]	@ (8001504 <HAL_TIM_PWM_MspInit+0x1f0>)
 80013a6:	4a58      	ldr	r2, [pc, #352]	@ (8001508 <HAL_TIM_PWM_MspInit+0x1f4>)
 80013a8:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch3.Init.Request = DMA_REQUEST_TIM2_CH3;
 80013aa:	4b56      	ldr	r3, [pc, #344]	@ (8001504 <HAL_TIM_PWM_MspInit+0x1f0>)
 80013ac:	2214      	movs	r2, #20
 80013ae:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80013b0:	4b54      	ldr	r3, [pc, #336]	@ (8001504 <HAL_TIM_PWM_MspInit+0x1f0>)
 80013b2:	2240      	movs	r2, #64	@ 0x40
 80013b4:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 80013b6:	4b53      	ldr	r3, [pc, #332]	@ (8001504 <HAL_TIM_PWM_MspInit+0x1f0>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch3.Init.MemInc = DMA_MINC_ENABLE;
 80013bc:	4b51      	ldr	r3, [pc, #324]	@ (8001504 <HAL_TIM_PWM_MspInit+0x1f0>)
 80013be:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80013c2:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80013c4:	4b4f      	ldr	r3, [pc, #316]	@ (8001504 <HAL_TIM_PWM_MspInit+0x1f0>)
 80013c6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80013ca:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80013cc:	4b4d      	ldr	r3, [pc, #308]	@ (8001504 <HAL_TIM_PWM_MspInit+0x1f0>)
 80013ce:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80013d2:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch3.Init.Mode = DMA_NORMAL;
 80013d4:	4b4b      	ldr	r3, [pc, #300]	@ (8001504 <HAL_TIM_PWM_MspInit+0x1f0>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch3.Init.Priority = DMA_PRIORITY_HIGH;
 80013da:	4b4a      	ldr	r3, [pc, #296]	@ (8001504 <HAL_TIM_PWM_MspInit+0x1f0>)
 80013dc:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80013e0:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80013e2:	4b48      	ldr	r3, [pc, #288]	@ (8001504 <HAL_TIM_PWM_MspInit+0x1f0>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch3) != HAL_OK)
 80013e8:	4846      	ldr	r0, [pc, #280]	@ (8001504 <HAL_TIM_PWM_MspInit+0x1f0>)
 80013ea:	f000 fcf9 	bl	8001de0 <HAL_DMA_Init>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d001      	beq.n	80013f8 <HAL_TIM_PWM_MspInit+0xe4>
    {
      Error_Handler();
 80013f4:	f7ff fde8 	bl	8000fc8 <Error_Handler>
    }

    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC3],hdma_tim2_ch3);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	4a42      	ldr	r2, [pc, #264]	@ (8001504 <HAL_TIM_PWM_MspInit+0x1f0>)
 80013fc:	62da      	str	r2, [r3, #44]	@ 0x2c
 80013fe:	4a41      	ldr	r2, [pc, #260]	@ (8001504 <HAL_TIM_PWM_MspInit+0x1f0>)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8001404:	e073      	b.n	80014ee <HAL_TIM_PWM_MspInit+0x1da>
  else if(tim_pwmHandle->Instance==TIM5)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	4a40      	ldr	r2, [pc, #256]	@ (800150c <HAL_TIM_PWM_MspInit+0x1f8>)
 800140c:	4293      	cmp	r3, r2
 800140e:	d16e      	bne.n	80014ee <HAL_TIM_PWM_MspInit+0x1da>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001410:	4b39      	ldr	r3, [pc, #228]	@ (80014f8 <HAL_TIM_PWM_MspInit+0x1e4>)
 8001412:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001416:	4a38      	ldr	r2, [pc, #224]	@ (80014f8 <HAL_TIM_PWM_MspInit+0x1e4>)
 8001418:	f043 0308 	orr.w	r3, r3, #8
 800141c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001420:	4b35      	ldr	r3, [pc, #212]	@ (80014f8 <HAL_TIM_PWM_MspInit+0x1e4>)
 8001422:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001426:	f003 0308 	and.w	r3, r3, #8
 800142a:	60bb      	str	r3, [r7, #8]
 800142c:	68bb      	ldr	r3, [r7, #8]
    hdma_tim5_ch2.Instance = DMA1_Stream4;
 800142e:	4b38      	ldr	r3, [pc, #224]	@ (8001510 <HAL_TIM_PWM_MspInit+0x1fc>)
 8001430:	4a38      	ldr	r2, [pc, #224]	@ (8001514 <HAL_TIM_PWM_MspInit+0x200>)
 8001432:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch2.Init.Request = DMA_REQUEST_TIM5_CH2;
 8001434:	4b36      	ldr	r3, [pc, #216]	@ (8001510 <HAL_TIM_PWM_MspInit+0x1fc>)
 8001436:	2238      	movs	r2, #56	@ 0x38
 8001438:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800143a:	4b35      	ldr	r3, [pc, #212]	@ (8001510 <HAL_TIM_PWM_MspInit+0x1fc>)
 800143c:	2240      	movs	r2, #64	@ 0x40
 800143e:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001440:	4b33      	ldr	r3, [pc, #204]	@ (8001510 <HAL_TIM_PWM_MspInit+0x1fc>)
 8001442:	2200      	movs	r2, #0
 8001444:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8001446:	4b32      	ldr	r3, [pc, #200]	@ (8001510 <HAL_TIM_PWM_MspInit+0x1fc>)
 8001448:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800144c:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800144e:	4b30      	ldr	r3, [pc, #192]	@ (8001510 <HAL_TIM_PWM_MspInit+0x1fc>)
 8001450:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001454:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001456:	4b2e      	ldr	r3, [pc, #184]	@ (8001510 <HAL_TIM_PWM_MspInit+0x1fc>)
 8001458:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800145c:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch2.Init.Mode = DMA_NORMAL;
 800145e:	4b2c      	ldr	r3, [pc, #176]	@ (8001510 <HAL_TIM_PWM_MspInit+0x1fc>)
 8001460:	2200      	movs	r2, #0
 8001462:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch2.Init.Priority = DMA_PRIORITY_HIGH;
 8001464:	4b2a      	ldr	r3, [pc, #168]	@ (8001510 <HAL_TIM_PWM_MspInit+0x1fc>)
 8001466:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800146a:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800146c:	4b28      	ldr	r3, [pc, #160]	@ (8001510 <HAL_TIM_PWM_MspInit+0x1fc>)
 800146e:	2200      	movs	r2, #0
 8001470:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim5_ch2) != HAL_OK)
 8001472:	4827      	ldr	r0, [pc, #156]	@ (8001510 <HAL_TIM_PWM_MspInit+0x1fc>)
 8001474:	f000 fcb4 	bl	8001de0 <HAL_DMA_Init>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d001      	beq.n	8001482 <HAL_TIM_PWM_MspInit+0x16e>
      Error_Handler();
 800147e:	f7ff fda3 	bl	8000fc8 <Error_Handler>
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC2],hdma_tim5_ch2);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	4a22      	ldr	r2, [pc, #136]	@ (8001510 <HAL_TIM_PWM_MspInit+0x1fc>)
 8001486:	629a      	str	r2, [r3, #40]	@ 0x28
 8001488:	4a21      	ldr	r2, [pc, #132]	@ (8001510 <HAL_TIM_PWM_MspInit+0x1fc>)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_tim5_ch4.Instance = DMA1_Stream3;
 800148e:	4b22      	ldr	r3, [pc, #136]	@ (8001518 <HAL_TIM_PWM_MspInit+0x204>)
 8001490:	4a22      	ldr	r2, [pc, #136]	@ (800151c <HAL_TIM_PWM_MspInit+0x208>)
 8001492:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch4.Init.Request = DMA_REQUEST_TIM5_CH4;
 8001494:	4b20      	ldr	r3, [pc, #128]	@ (8001518 <HAL_TIM_PWM_MspInit+0x204>)
 8001496:	223a      	movs	r2, #58	@ 0x3a
 8001498:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800149a:	4b1f      	ldr	r3, [pc, #124]	@ (8001518 <HAL_TIM_PWM_MspInit+0x204>)
 800149c:	2240      	movs	r2, #64	@ 0x40
 800149e:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 80014a0:	4b1d      	ldr	r3, [pc, #116]	@ (8001518 <HAL_TIM_PWM_MspInit+0x204>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch4.Init.MemInc = DMA_MINC_ENABLE;
 80014a6:	4b1c      	ldr	r3, [pc, #112]	@ (8001518 <HAL_TIM_PWM_MspInit+0x204>)
 80014a8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80014ac:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80014ae:	4b1a      	ldr	r3, [pc, #104]	@ (8001518 <HAL_TIM_PWM_MspInit+0x204>)
 80014b0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80014b4:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80014b6:	4b18      	ldr	r3, [pc, #96]	@ (8001518 <HAL_TIM_PWM_MspInit+0x204>)
 80014b8:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80014bc:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch4.Init.Mode = DMA_NORMAL;
 80014be:	4b16      	ldr	r3, [pc, #88]	@ (8001518 <HAL_TIM_PWM_MspInit+0x204>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch4.Init.Priority = DMA_PRIORITY_HIGH;
 80014c4:	4b14      	ldr	r3, [pc, #80]	@ (8001518 <HAL_TIM_PWM_MspInit+0x204>)
 80014c6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80014ca:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch4.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80014cc:	4b12      	ldr	r3, [pc, #72]	@ (8001518 <HAL_TIM_PWM_MspInit+0x204>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim5_ch4) != HAL_OK)
 80014d2:	4811      	ldr	r0, [pc, #68]	@ (8001518 <HAL_TIM_PWM_MspInit+0x204>)
 80014d4:	f000 fc84 	bl	8001de0 <HAL_DMA_Init>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d001      	beq.n	80014e2 <HAL_TIM_PWM_MspInit+0x1ce>
      Error_Handler();
 80014de:	f7ff fd73 	bl	8000fc8 <Error_Handler>
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC4],hdma_tim5_ch4);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	4a0c      	ldr	r2, [pc, #48]	@ (8001518 <HAL_TIM_PWM_MspInit+0x204>)
 80014e6:	631a      	str	r2, [r3, #48]	@ 0x30
 80014e8:	4a0b      	ldr	r2, [pc, #44]	@ (8001518 <HAL_TIM_PWM_MspInit+0x204>)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80014ee:	bf00      	nop
 80014f0:	3710      	adds	r7, #16
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	58024400 	.word	0x58024400
 80014fc:	240002a4 	.word	0x240002a4
 8001500:	40020088 	.word	0x40020088
 8001504:	2400031c 	.word	0x2400031c
 8001508:	40020028 	.word	0x40020028
 800150c:	40000c00 	.word	0x40000c00
 8001510:	24000394 	.word	0x24000394
 8001514:	40020070 	.word	0x40020070
 8001518:	2400040c 	.word	0x2400040c
 800151c:	40020058 	.word	0x40020058

08001520 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b084      	sub	sp, #16
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4a0e      	ldr	r2, [pc, #56]	@ (8001568 <HAL_TIM_Base_MspInit+0x48>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d116      	bne.n	8001560 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001532:	4b0e      	ldr	r3, [pc, #56]	@ (800156c <HAL_TIM_Base_MspInit+0x4c>)
 8001534:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001538:	4a0c      	ldr	r2, [pc, #48]	@ (800156c <HAL_TIM_Base_MspInit+0x4c>)
 800153a:	f043 0302 	orr.w	r3, r3, #2
 800153e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001542:	4b0a      	ldr	r3, [pc, #40]	@ (800156c <HAL_TIM_Base_MspInit+0x4c>)
 8001544:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001548:	f003 0302 	and.w	r3, r3, #2
 800154c:	60fb      	str	r3, [r7, #12]
 800154e:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001550:	2200      	movs	r2, #0
 8001552:	2100      	movs	r1, #0
 8001554:	201d      	movs	r0, #29
 8001556:	f000 fbfa 	bl	8001d4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800155a:	201d      	movs	r0, #29
 800155c:	f000 fc11 	bl	8001d82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001560:	bf00      	nop
 8001562:	3710      	adds	r7, #16
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}
 8001568:	40000400 	.word	0x40000400
 800156c:	58024400 	.word	0x58024400

08001570 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b08a      	sub	sp, #40	@ 0x28
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001578:	f107 0314 	add.w	r3, r7, #20
 800157c:	2200      	movs	r2, #0
 800157e:	601a      	str	r2, [r3, #0]
 8001580:	605a      	str	r2, [r3, #4]
 8001582:	609a      	str	r2, [r3, #8]
 8001584:	60da      	str	r2, [r3, #12]
 8001586:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001590:	d11f      	bne.n	80015d2 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001592:	4b24      	ldr	r3, [pc, #144]	@ (8001624 <HAL_TIM_MspPostInit+0xb4>)
 8001594:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001598:	4a22      	ldr	r2, [pc, #136]	@ (8001624 <HAL_TIM_MspPostInit+0xb4>)
 800159a:	f043 0301 	orr.w	r3, r3, #1
 800159e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80015a2:	4b20      	ldr	r3, [pc, #128]	@ (8001624 <HAL_TIM_MspPostInit+0xb4>)
 80015a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015a8:	f003 0301 	and.w	r3, r3, #1
 80015ac:	613b      	str	r3, [r7, #16]
 80015ae:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 80015b0:	2305      	movs	r3, #5
 80015b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b4:	2302      	movs	r3, #2
 80015b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b8:	2300      	movs	r3, #0
 80015ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015bc:	2300      	movs	r3, #0
 80015be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80015c0:	2301      	movs	r3, #1
 80015c2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015c4:	f107 0314 	add.w	r3, r7, #20
 80015c8:	4619      	mov	r1, r3
 80015ca:	4817      	ldr	r0, [pc, #92]	@ (8001628 <HAL_TIM_MspPostInit+0xb8>)
 80015cc:	f002 fd50 	bl	8004070 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 80015d0:	e023      	b.n	800161a <HAL_TIM_MspPostInit+0xaa>
  else if(timHandle->Instance==TIM5)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4a15      	ldr	r2, [pc, #84]	@ (800162c <HAL_TIM_MspPostInit+0xbc>)
 80015d8:	4293      	cmp	r3, r2
 80015da:	d11e      	bne.n	800161a <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015dc:	4b11      	ldr	r3, [pc, #68]	@ (8001624 <HAL_TIM_MspPostInit+0xb4>)
 80015de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015e2:	4a10      	ldr	r2, [pc, #64]	@ (8001624 <HAL_TIM_MspPostInit+0xb4>)
 80015e4:	f043 0301 	orr.w	r3, r3, #1
 80015e8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80015ec:	4b0d      	ldr	r3, [pc, #52]	@ (8001624 <HAL_TIM_MspPostInit+0xb4>)
 80015ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015f2:	f003 0301 	and.w	r3, r3, #1
 80015f6:	60fb      	str	r3, [r7, #12]
 80015f8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 80015fa:	230a      	movs	r3, #10
 80015fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015fe:	2302      	movs	r3, #2
 8001600:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001602:	2300      	movs	r3, #0
 8001604:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001606:	2300      	movs	r3, #0
 8001608:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800160a:	2302      	movs	r3, #2
 800160c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800160e:	f107 0314 	add.w	r3, r7, #20
 8001612:	4619      	mov	r1, r3
 8001614:	4804      	ldr	r0, [pc, #16]	@ (8001628 <HAL_TIM_MspPostInit+0xb8>)
 8001616:	f002 fd2b 	bl	8004070 <HAL_GPIO_Init>
}
 800161a:	bf00      	nop
 800161c:	3728      	adds	r7, #40	@ 0x28
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	58024400 	.word	0x58024400
 8001628:	58020000 	.word	0x58020000
 800162c:	40000c00 	.word	0x40000c00

08001630 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001630:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001668 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001634:	f7fe ffc8 	bl	80005c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001638:	480c      	ldr	r0, [pc, #48]	@ (800166c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800163a:	490d      	ldr	r1, [pc, #52]	@ (8001670 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800163c:	4a0d      	ldr	r2, [pc, #52]	@ (8001674 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800163e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001640:	e002      	b.n	8001648 <LoopCopyDataInit>

08001642 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001642:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001644:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001646:	3304      	adds	r3, #4

08001648 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001648:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800164a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800164c:	d3f9      	bcc.n	8001642 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800164e:	4a0a      	ldr	r2, [pc, #40]	@ (8001678 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001650:	4c0a      	ldr	r4, [pc, #40]	@ (800167c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001652:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001654:	e001      	b.n	800165a <LoopFillZerobss>

08001656 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001656:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001658:	3204      	adds	r2, #4

0800165a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800165a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800165c:	d3fb      	bcc.n	8001656 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800165e:	f006 fc69 	bl	8007f34 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001662:	f7ff fb65 	bl	8000d30 <main>
  bx  lr
 8001666:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001668:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800166c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001670:	2400002c 	.word	0x2400002c
  ldr r2, =_sidata
 8001674:	08008068 	.word	0x08008068
  ldr r2, =_sbss
 8001678:	2400002c 	.word	0x2400002c
  ldr r4, =_ebss
 800167c:	24000524 	.word	0x24000524

08001680 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001680:	e7fe      	b.n	8001680 <ADC3_IRQHandler>
	...

08001684 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b08c      	sub	sp, #48	@ 0x30
 8001688:	af00      	add	r7, sp, #0
 800168a:	4603      	mov	r3, r0
 800168c:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800168e:	2300      	movs	r3, #0
 8001690:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8001692:	79fb      	ldrb	r3, [r7, #7]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d009      	beq.n	80016ac <BSP_LED_Init+0x28>
 8001698:	79fb      	ldrb	r3, [r7, #7]
 800169a:	2b01      	cmp	r3, #1
 800169c:	d006      	beq.n	80016ac <BSP_LED_Init+0x28>
 800169e:	79fb      	ldrb	r3, [r7, #7]
 80016a0:	2b02      	cmp	r3, #2
 80016a2:	d003      	beq.n	80016ac <BSP_LED_Init+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80016a4:	f06f 0301 	mvn.w	r3, #1
 80016a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80016aa:	e055      	b.n	8001758 <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if(Led == LED1)
 80016ac:	79fb      	ldrb	r3, [r7, #7]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d10f      	bne.n	80016d2 <BSP_LED_Init+0x4e>
    {
      LED1_GPIO_CLK_ENABLE();
 80016b2:	4b2c      	ldr	r3, [pc, #176]	@ (8001764 <BSP_LED_Init+0xe0>)
 80016b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016b8:	4a2a      	ldr	r2, [pc, #168]	@ (8001764 <BSP_LED_Init+0xe0>)
 80016ba:	f043 0302 	orr.w	r3, r3, #2
 80016be:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80016c2:	4b28      	ldr	r3, [pc, #160]	@ (8001764 <BSP_LED_Init+0xe0>)
 80016c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016c8:	f003 0302 	and.w	r3, r3, #2
 80016cc:	617b      	str	r3, [r7, #20]
 80016ce:	697b      	ldr	r3, [r7, #20]
 80016d0:	e021      	b.n	8001716 <BSP_LED_Init+0x92>
    }
    else if(Led == LED2)
 80016d2:	79fb      	ldrb	r3, [r7, #7]
 80016d4:	2b01      	cmp	r3, #1
 80016d6:	d10f      	bne.n	80016f8 <BSP_LED_Init+0x74>
    {
      LED2_GPIO_CLK_ENABLE();
 80016d8:	4b22      	ldr	r3, [pc, #136]	@ (8001764 <BSP_LED_Init+0xe0>)
 80016da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016de:	4a21      	ldr	r2, [pc, #132]	@ (8001764 <BSP_LED_Init+0xe0>)
 80016e0:	f043 0310 	orr.w	r3, r3, #16
 80016e4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80016e8:	4b1e      	ldr	r3, [pc, #120]	@ (8001764 <BSP_LED_Init+0xe0>)
 80016ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016ee:	f003 0310 	and.w	r3, r3, #16
 80016f2:	613b      	str	r3, [r7, #16]
 80016f4:	693b      	ldr	r3, [r7, #16]
 80016f6:	e00e      	b.n	8001716 <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 80016f8:	4b1a      	ldr	r3, [pc, #104]	@ (8001764 <BSP_LED_Init+0xe0>)
 80016fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016fe:	4a19      	ldr	r2, [pc, #100]	@ (8001764 <BSP_LED_Init+0xe0>)
 8001700:	f043 0302 	orr.w	r3, r3, #2
 8001704:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001708:	4b16      	ldr	r3, [pc, #88]	@ (8001764 <BSP_LED_Init+0xe0>)
 800170a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800170e:	f003 0302 	and.w	r3, r3, #2
 8001712:	60fb      	str	r3, [r7, #12]
 8001714:	68fb      	ldr	r3, [r7, #12]
    }
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 8001716:	79fb      	ldrb	r3, [r7, #7]
 8001718:	4a13      	ldr	r2, [pc, #76]	@ (8001768 <BSP_LED_Init+0xe4>)
 800171a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800171e:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8001720:	2301      	movs	r3, #1
 8001722:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8001724:	2300      	movs	r3, #0
 8001726:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001728:	2303      	movs	r3, #3
 800172a:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 800172c:	79fb      	ldrb	r3, [r7, #7]
 800172e:	4a0f      	ldr	r2, [pc, #60]	@ (800176c <BSP_LED_Init+0xe8>)
 8001730:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001734:	f107 0218 	add.w	r2, r7, #24
 8001738:	4611      	mov	r1, r2
 800173a:	4618      	mov	r0, r3
 800173c:	f002 fc98 	bl	8004070 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8001740:	79fb      	ldrb	r3, [r7, #7]
 8001742:	4a0a      	ldr	r2, [pc, #40]	@ (800176c <BSP_LED_Init+0xe8>)
 8001744:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001748:	79fb      	ldrb	r3, [r7, #7]
 800174a:	4a07      	ldr	r2, [pc, #28]	@ (8001768 <BSP_LED_Init+0xe4>)
 800174c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001750:	2200      	movs	r2, #0
 8001752:	4619      	mov	r1, r3
 8001754:	f002 fe3c 	bl	80043d0 <HAL_GPIO_WritePin>
  }

  return ret;
 8001758:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800175a:	4618      	mov	r0, r3
 800175c:	3730      	adds	r7, #48	@ 0x30
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	58024400 	.word	0x58024400
 8001768:	08008024 	.word	0x08008024
 800176c:	2400000c 	.word	0x2400000c

08001770 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b088      	sub	sp, #32
 8001774:	af00      	add	r7, sp, #0
 8001776:	4603      	mov	r3, r0
 8001778:	460a      	mov	r2, r1
 800177a:	71fb      	strb	r3, [r7, #7]
 800177c:	4613      	mov	r3, r2
 800177e:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 8001780:	4b2e      	ldr	r3, [pc, #184]	@ (800183c <BSP_PB_Init+0xcc>)
 8001782:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001786:	4a2d      	ldr	r2, [pc, #180]	@ (800183c <BSP_PB_Init+0xcc>)
 8001788:	f043 0304 	orr.w	r3, r3, #4
 800178c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001790:	4b2a      	ldr	r3, [pc, #168]	@ (800183c <BSP_PB_Init+0xcc>)
 8001792:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001796:	f003 0304 	and.w	r3, r3, #4
 800179a:	60bb      	str	r3, [r7, #8]
 800179c:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 800179e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80017a2:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 80017a4:	2302      	movs	r3, #2
 80017a6:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80017a8:	2302      	movs	r3, #2
 80017aa:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 80017ac:	79bb      	ldrb	r3, [r7, #6]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d10c      	bne.n	80017cc <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 80017b2:	2300      	movs	r3, #0
 80017b4:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 80017b6:	79fb      	ldrb	r3, [r7, #7]
 80017b8:	4a21      	ldr	r2, [pc, #132]	@ (8001840 <BSP_PB_Init+0xd0>)
 80017ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017be:	f107 020c 	add.w	r2, r7, #12
 80017c2:	4611      	mov	r1, r2
 80017c4:	4618      	mov	r0, r3
 80017c6:	f002 fc53 	bl	8004070 <HAL_GPIO_Init>
 80017ca:	e031      	b.n	8001830 <BSP_PB_Init+0xc0>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 80017cc:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80017d0:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 80017d2:	79fb      	ldrb	r3, [r7, #7]
 80017d4:	4a1a      	ldr	r2, [pc, #104]	@ (8001840 <BSP_PB_Init+0xd0>)
 80017d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017da:	f107 020c 	add.w	r2, r7, #12
 80017de:	4611      	mov	r1, r2
 80017e0:	4618      	mov	r0, r3
 80017e2:	f002 fc45 	bl	8004070 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 80017e6:	79fb      	ldrb	r3, [r7, #7]
 80017e8:	00db      	lsls	r3, r3, #3
 80017ea:	4a16      	ldr	r2, [pc, #88]	@ (8001844 <BSP_PB_Init+0xd4>)
 80017ec:	441a      	add	r2, r3
 80017ee:	79fb      	ldrb	r3, [r7, #7]
 80017f0:	4915      	ldr	r1, [pc, #84]	@ (8001848 <BSP_PB_Init+0xd8>)
 80017f2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80017f6:	4619      	mov	r1, r3
 80017f8:	4610      	mov	r0, r2
 80017fa:	f002 fbe8 	bl	8003fce <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 80017fe:	79fb      	ldrb	r3, [r7, #7]
 8001800:	00db      	lsls	r3, r3, #3
 8001802:	4a10      	ldr	r2, [pc, #64]	@ (8001844 <BSP_PB_Init+0xd4>)
 8001804:	1898      	adds	r0, r3, r2
 8001806:	79fb      	ldrb	r3, [r7, #7]
 8001808:	4a10      	ldr	r2, [pc, #64]	@ (800184c <BSP_PB_Init+0xdc>)
 800180a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800180e:	461a      	mov	r2, r3
 8001810:	2100      	movs	r1, #0
 8001812:	f002 fbbd 	bl	8003f90 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8001816:	2028      	movs	r0, #40	@ 0x28
 8001818:	79fb      	ldrb	r3, [r7, #7]
 800181a:	4a0d      	ldr	r2, [pc, #52]	@ (8001850 <BSP_PB_Init+0xe0>)
 800181c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001820:	2200      	movs	r2, #0
 8001822:	4619      	mov	r1, r3
 8001824:	f000 fa93 	bl	8001d4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8001828:	2328      	movs	r3, #40	@ 0x28
 800182a:	4618      	mov	r0, r3
 800182c:	f000 faa9 	bl	8001d82 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8001830:	2300      	movs	r3, #0
}
 8001832:	4618      	mov	r0, r3
 8001834:	3720      	adds	r7, #32
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	58024400 	.word	0x58024400
 8001840:	24000018 	.word	0x24000018
 8001844:	24000484 	.word	0x24000484
 8001848:	0800802c 	.word	0x0800802c
 800184c:	2400001c 	.word	0x2400001c
 8001850:	24000020 	.word	0x24000020

08001854 <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b082      	sub	sp, #8
 8001858:	af00      	add	r7, sp, #0
 800185a:	4603      	mov	r3, r0
 800185c:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 800185e:	79fb      	ldrb	r3, [r7, #7]
 8001860:	00db      	lsls	r3, r3, #3
 8001862:	4a04      	ldr	r2, [pc, #16]	@ (8001874 <BSP_PB_IRQHandler+0x20>)
 8001864:	4413      	add	r3, r2
 8001866:	4618      	mov	r0, r3
 8001868:	f002 fbc6 	bl	8003ff8 <HAL_EXTI_IRQHandler>
}
 800186c:	bf00      	nop
 800186e:	3708      	adds	r7, #8
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}
 8001874:	24000484 	.word	0x24000484

08001878 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8001878:	b480      	push	{r7}
 800187a:	b083      	sub	sp, #12
 800187c:	af00      	add	r7, sp, #0
 800187e:	4603      	mov	r3, r0
 8001880:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 8001882:	bf00      	nop
 8001884:	370c      	adds	r7, #12
 8001886:	46bd      	mov	sp, r7
 8001888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188c:	4770      	bx	lr
	...

08001890 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b084      	sub	sp, #16
 8001894:	af00      	add	r7, sp, #0
 8001896:	4603      	mov	r3, r0
 8001898:	6039      	str	r1, [r7, #0]
 800189a:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800189c:	2300      	movs	r3, #0
 800189e:	60fb      	str	r3, [r7, #12]

  if(COM >= COMn)
 80018a0:	79fb      	ldrb	r3, [r7, #7]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d003      	beq.n	80018ae <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80018a6:	f06f 0301 	mvn.w	r3, #1
 80018aa:	60fb      	str	r3, [r7, #12]
 80018ac:	e018      	b.n	80018e0 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 80018ae:	79fb      	ldrb	r3, [r7, #7]
 80018b0:	2294      	movs	r2, #148	@ 0x94
 80018b2:	fb02 f303 	mul.w	r3, r2, r3
 80018b6:	4a0d      	ldr	r2, [pc, #52]	@ (80018ec <BSP_COM_Init+0x5c>)
 80018b8:	4413      	add	r3, r2
 80018ba:	4618      	mov	r0, r3
 80018bc:	f000 f852 	bl	8001964 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_USART3_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 80018c0:	79fb      	ldrb	r3, [r7, #7]
 80018c2:	2294      	movs	r2, #148	@ 0x94
 80018c4:	fb02 f303 	mul.w	r3, r2, r3
 80018c8:	4a08      	ldr	r2, [pc, #32]	@ (80018ec <BSP_COM_Init+0x5c>)
 80018ca:	4413      	add	r3, r2
 80018cc:	6839      	ldr	r1, [r7, #0]
 80018ce:	4618      	mov	r0, r3
 80018d0:	f000 f80e 	bl	80018f0 <MX_USART3_Init>
 80018d4:	4603      	mov	r3, r0
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d002      	beq.n	80018e0 <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80018da:	f06f 0303 	mvn.w	r3, #3
 80018de:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80018e0:	68fb      	ldr	r3, [r7, #12]
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	3710      	adds	r7, #16
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	2400048c 	.word	0x2400048c

080018f0 <MX_USART3_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART3_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b082      	sub	sp, #8
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
 80018f8:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 80018fa:	4b15      	ldr	r3, [pc, #84]	@ (8001950 <MX_USART3_Init+0x60>)
 80018fc:	681a      	ldr	r2, [r3, #0]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	681a      	ldr	r2, [r3, #0]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	220c      	movs	r2, #12
 800190e:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	895b      	ldrh	r3, [r3, #10]
 8001914:	461a      	mov	r2, r3
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = (uint32_t)COM_Init->WordLength;
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	685a      	ldr	r2, [r3, #4]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	891b      	ldrh	r3, [r3, #8]
 8001926:	461a      	mov	r2, r3
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	899b      	ldrh	r3, [r3, #12]
 8001930:	461a      	mov	r2, r3
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800193c:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 800193e:	6878      	ldr	r0, [r7, #4]
 8001940:	f005 fb0e 	bl	8006f60 <HAL_UART_Init>
 8001944:	4603      	mov	r3, r0
}
 8001946:	4618      	mov	r0, r3
 8001948:	3708      	adds	r7, #8
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	24000008 	.word	0x24000008

08001954 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8001958:	2000      	movs	r0, #0
 800195a:	f7ff ff8d 	bl	8001878 <BSP_PB_Callback>
}
 800195e:	bf00      	nop
 8001960:	bd80      	pop	{r7, pc}
	...

08001964 <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b08a      	sub	sp, #40	@ 0x28
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 800196c:	4b27      	ldr	r3, [pc, #156]	@ (8001a0c <COM1_MspInit+0xa8>)
 800196e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001972:	4a26      	ldr	r2, [pc, #152]	@ (8001a0c <COM1_MspInit+0xa8>)
 8001974:	f043 0308 	orr.w	r3, r3, #8
 8001978:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800197c:	4b23      	ldr	r3, [pc, #140]	@ (8001a0c <COM1_MspInit+0xa8>)
 800197e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001982:	f003 0308 	and.w	r3, r3, #8
 8001986:	613b      	str	r3, [r7, #16]
 8001988:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 800198a:	4b20      	ldr	r3, [pc, #128]	@ (8001a0c <COM1_MspInit+0xa8>)
 800198c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001990:	4a1e      	ldr	r2, [pc, #120]	@ (8001a0c <COM1_MspInit+0xa8>)
 8001992:	f043 0308 	orr.w	r3, r3, #8
 8001996:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800199a:	4b1c      	ldr	r3, [pc, #112]	@ (8001a0c <COM1_MspInit+0xa8>)
 800199c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80019a0:	f003 0308 	and.w	r3, r3, #8
 80019a4:	60fb      	str	r3, [r7, #12]
 80019a6:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 80019a8:	4b18      	ldr	r3, [pc, #96]	@ (8001a0c <COM1_MspInit+0xa8>)
 80019aa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80019ae:	4a17      	ldr	r2, [pc, #92]	@ (8001a0c <COM1_MspInit+0xa8>)
 80019b0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80019b4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80019b8:	4b14      	ldr	r3, [pc, #80]	@ (8001a0c <COM1_MspInit+0xa8>)
 80019ba:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80019be:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80019c2:	60bb      	str	r3, [r7, #8]
 80019c4:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin = COM1_TX_PIN;
 80019c6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80019ca:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80019cc:	2302      	movs	r3, #2
 80019ce:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80019d0:	2302      	movs	r3, #2
 80019d2:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_PULLUP;
 80019d4:	2301      	movs	r3, #1
 80019d6:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 80019d8:	2307      	movs	r3, #7
 80019da:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 80019dc:	f107 0314 	add.w	r3, r7, #20
 80019e0:	4619      	mov	r1, r3
 80019e2:	480b      	ldr	r0, [pc, #44]	@ (8001a10 <COM1_MspInit+0xac>)
 80019e4:	f002 fb44 	bl	8004070 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 80019e8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80019ec:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80019ee:	2302      	movs	r3, #2
 80019f0:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 80019f2:	2307      	movs	r3, #7
 80019f4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 80019f6:	f107 0314 	add.w	r3, r7, #20
 80019fa:	4619      	mov	r1, r3
 80019fc:	4804      	ldr	r0, [pc, #16]	@ (8001a10 <COM1_MspInit+0xac>)
 80019fe:	f002 fb37 	bl	8004070 <HAL_GPIO_Init>
}
 8001a02:	bf00      	nop
 8001a04:	3728      	adds	r7, #40	@ 0x28
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	58024400 	.word	0x58024400
 8001a10:	58020c00 	.word	0x58020c00

08001a14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b082      	sub	sp, #8
 8001a18:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a1a:	2003      	movs	r0, #3
 8001a1c:	f000 f98c 	bl	8001d38 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001a20:	f003 fba2 	bl	8005168 <HAL_RCC_GetSysClockFreq>
 8001a24:	4602      	mov	r2, r0
 8001a26:	4b15      	ldr	r3, [pc, #84]	@ (8001a7c <HAL_Init+0x68>)
 8001a28:	699b      	ldr	r3, [r3, #24]
 8001a2a:	0a1b      	lsrs	r3, r3, #8
 8001a2c:	f003 030f 	and.w	r3, r3, #15
 8001a30:	4913      	ldr	r1, [pc, #76]	@ (8001a80 <HAL_Init+0x6c>)
 8001a32:	5ccb      	ldrb	r3, [r1, r3]
 8001a34:	f003 031f 	and.w	r3, r3, #31
 8001a38:	fa22 f303 	lsr.w	r3, r2, r3
 8001a3c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001a3e:	4b0f      	ldr	r3, [pc, #60]	@ (8001a7c <HAL_Init+0x68>)
 8001a40:	699b      	ldr	r3, [r3, #24]
 8001a42:	f003 030f 	and.w	r3, r3, #15
 8001a46:	4a0e      	ldr	r2, [pc, #56]	@ (8001a80 <HAL_Init+0x6c>)
 8001a48:	5cd3      	ldrb	r3, [r2, r3]
 8001a4a:	f003 031f 	and.w	r3, r3, #31
 8001a4e:	687a      	ldr	r2, [r7, #4]
 8001a50:	fa22 f303 	lsr.w	r3, r2, r3
 8001a54:	4a0b      	ldr	r2, [pc, #44]	@ (8001a84 <HAL_Init+0x70>)
 8001a56:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001a58:	4a0b      	ldr	r2, [pc, #44]	@ (8001a88 <HAL_Init+0x74>)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a5e:	2000      	movs	r0, #0
 8001a60:	f000 f814 	bl	8001a8c <HAL_InitTick>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d001      	beq.n	8001a6e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	e002      	b.n	8001a74 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001a6e:	f7ff fab1 	bl	8000fd4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a72:	2300      	movs	r3, #0
}
 8001a74:	4618      	mov	r0, r3
 8001a76:	3708      	adds	r7, #8
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	58024400 	.word	0x58024400
 8001a80:	08008014 	.word	0x08008014
 8001a84:	24000004 	.word	0x24000004
 8001a88:	24000000 	.word	0x24000000

08001a8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b082      	sub	sp, #8
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001a94:	4b15      	ldr	r3, [pc, #84]	@ (8001aec <HAL_InitTick+0x60>)
 8001a96:	781b      	ldrb	r3, [r3, #0]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d101      	bne.n	8001aa0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	e021      	b.n	8001ae4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001aa0:	4b13      	ldr	r3, [pc, #76]	@ (8001af0 <HAL_InitTick+0x64>)
 8001aa2:	681a      	ldr	r2, [r3, #0]
 8001aa4:	4b11      	ldr	r3, [pc, #68]	@ (8001aec <HAL_InitTick+0x60>)
 8001aa6:	781b      	ldrb	r3, [r3, #0]
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001aae:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ab2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f000 f971 	bl	8001d9e <HAL_SYSTICK_Config>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d001      	beq.n	8001ac6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	e00e      	b.n	8001ae4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2b0f      	cmp	r3, #15
 8001aca:	d80a      	bhi.n	8001ae2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001acc:	2200      	movs	r2, #0
 8001ace:	6879      	ldr	r1, [r7, #4]
 8001ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ad4:	f000 f93b 	bl	8001d4e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ad8:	4a06      	ldr	r2, [pc, #24]	@ (8001af4 <HAL_InitTick+0x68>)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	e000      	b.n	8001ae4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	3708      	adds	r7, #8
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	24000028 	.word	0x24000028
 8001af0:	24000000 	.word	0x24000000
 8001af4:	24000024 	.word	0x24000024

08001af8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001afc:	4b06      	ldr	r3, [pc, #24]	@ (8001b18 <HAL_IncTick+0x20>)
 8001afe:	781b      	ldrb	r3, [r3, #0]
 8001b00:	461a      	mov	r2, r3
 8001b02:	4b06      	ldr	r3, [pc, #24]	@ (8001b1c <HAL_IncTick+0x24>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4413      	add	r3, r2
 8001b08:	4a04      	ldr	r2, [pc, #16]	@ (8001b1c <HAL_IncTick+0x24>)
 8001b0a:	6013      	str	r3, [r2, #0]
}
 8001b0c:	bf00      	nop
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr
 8001b16:	bf00      	nop
 8001b18:	24000028 	.word	0x24000028
 8001b1c:	24000520 	.word	0x24000520

08001b20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0
  return uwTick;
 8001b24:	4b03      	ldr	r3, [pc, #12]	@ (8001b34 <HAL_GetTick+0x14>)
 8001b26:	681b      	ldr	r3, [r3, #0]
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr
 8001b32:	bf00      	nop
 8001b34:	24000520 	.word	0x24000520

08001b38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b084      	sub	sp, #16
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b40:	f7ff ffee 	bl	8001b20 <HAL_GetTick>
 8001b44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b50:	d005      	beq.n	8001b5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b52:	4b0a      	ldr	r3, [pc, #40]	@ (8001b7c <HAL_Delay+0x44>)
 8001b54:	781b      	ldrb	r3, [r3, #0]
 8001b56:	461a      	mov	r2, r3
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	4413      	add	r3, r2
 8001b5c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b5e:	bf00      	nop
 8001b60:	f7ff ffde 	bl	8001b20 <HAL_GetTick>
 8001b64:	4602      	mov	r2, r0
 8001b66:	68bb      	ldr	r3, [r7, #8]
 8001b68:	1ad3      	subs	r3, r2, r3
 8001b6a:	68fa      	ldr	r2, [r7, #12]
 8001b6c:	429a      	cmp	r2, r3
 8001b6e:	d8f7      	bhi.n	8001b60 <HAL_Delay+0x28>
  {
  }
}
 8001b70:	bf00      	nop
 8001b72:	bf00      	nop
 8001b74:	3710      	adds	r7, #16
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	24000028 	.word	0x24000028

08001b80 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001b80:	b480      	push	{r7}
 8001b82:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001b84:	4b03      	ldr	r3, [pc, #12]	@ (8001b94 <HAL_GetREVID+0x14>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	0c1b      	lsrs	r3, r3, #16
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b92:	4770      	bx	lr
 8001b94:	5c001000 	.word	0x5c001000

08001b98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b085      	sub	sp, #20
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	f003 0307 	and.w	r3, r3, #7
 8001ba6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ba8:	4b0b      	ldr	r3, [pc, #44]	@ (8001bd8 <__NVIC_SetPriorityGrouping+0x40>)
 8001baa:	68db      	ldr	r3, [r3, #12]
 8001bac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bae:	68ba      	ldr	r2, [r7, #8]
 8001bb0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bbc:	68bb      	ldr	r3, [r7, #8]
 8001bbe:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001bc0:	4b06      	ldr	r3, [pc, #24]	@ (8001bdc <__NVIC_SetPriorityGrouping+0x44>)
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bc6:	4a04      	ldr	r2, [pc, #16]	@ (8001bd8 <__NVIC_SetPriorityGrouping+0x40>)
 8001bc8:	68bb      	ldr	r3, [r7, #8]
 8001bca:	60d3      	str	r3, [r2, #12]
}
 8001bcc:	bf00      	nop
 8001bce:	3714      	adds	r7, #20
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd6:	4770      	bx	lr
 8001bd8:	e000ed00 	.word	0xe000ed00
 8001bdc:	05fa0000 	.word	0x05fa0000

08001be0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001be0:	b480      	push	{r7}
 8001be2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001be4:	4b04      	ldr	r3, [pc, #16]	@ (8001bf8 <__NVIC_GetPriorityGrouping+0x18>)
 8001be6:	68db      	ldr	r3, [r3, #12]
 8001be8:	0a1b      	lsrs	r3, r3, #8
 8001bea:	f003 0307 	and.w	r3, r3, #7
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf6:	4770      	bx	lr
 8001bf8:	e000ed00 	.word	0xe000ed00

08001bfc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b083      	sub	sp, #12
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	4603      	mov	r3, r0
 8001c04:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001c06:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	db0b      	blt.n	8001c26 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c0e:	88fb      	ldrh	r3, [r7, #6]
 8001c10:	f003 021f 	and.w	r2, r3, #31
 8001c14:	4907      	ldr	r1, [pc, #28]	@ (8001c34 <__NVIC_EnableIRQ+0x38>)
 8001c16:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c1a:	095b      	lsrs	r3, r3, #5
 8001c1c:	2001      	movs	r0, #1
 8001c1e:	fa00 f202 	lsl.w	r2, r0, r2
 8001c22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001c26:	bf00      	nop
 8001c28:	370c      	adds	r7, #12
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr
 8001c32:	bf00      	nop
 8001c34:	e000e100 	.word	0xe000e100

08001c38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b083      	sub	sp, #12
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	4603      	mov	r3, r0
 8001c40:	6039      	str	r1, [r7, #0]
 8001c42:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001c44:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	db0a      	blt.n	8001c62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	b2da      	uxtb	r2, r3
 8001c50:	490c      	ldr	r1, [pc, #48]	@ (8001c84 <__NVIC_SetPriority+0x4c>)
 8001c52:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c56:	0112      	lsls	r2, r2, #4
 8001c58:	b2d2      	uxtb	r2, r2
 8001c5a:	440b      	add	r3, r1
 8001c5c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c60:	e00a      	b.n	8001c78 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	b2da      	uxtb	r2, r3
 8001c66:	4908      	ldr	r1, [pc, #32]	@ (8001c88 <__NVIC_SetPriority+0x50>)
 8001c68:	88fb      	ldrh	r3, [r7, #6]
 8001c6a:	f003 030f 	and.w	r3, r3, #15
 8001c6e:	3b04      	subs	r3, #4
 8001c70:	0112      	lsls	r2, r2, #4
 8001c72:	b2d2      	uxtb	r2, r2
 8001c74:	440b      	add	r3, r1
 8001c76:	761a      	strb	r2, [r3, #24]
}
 8001c78:	bf00      	nop
 8001c7a:	370c      	adds	r7, #12
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c82:	4770      	bx	lr
 8001c84:	e000e100 	.word	0xe000e100
 8001c88:	e000ed00 	.word	0xe000ed00

08001c8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b089      	sub	sp, #36	@ 0x24
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	60f8      	str	r0, [r7, #12]
 8001c94:	60b9      	str	r1, [r7, #8]
 8001c96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	f003 0307 	and.w	r3, r3, #7
 8001c9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ca0:	69fb      	ldr	r3, [r7, #28]
 8001ca2:	f1c3 0307 	rsb	r3, r3, #7
 8001ca6:	2b04      	cmp	r3, #4
 8001ca8:	bf28      	it	cs
 8001caa:	2304      	movcs	r3, #4
 8001cac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cae:	69fb      	ldr	r3, [r7, #28]
 8001cb0:	3304      	adds	r3, #4
 8001cb2:	2b06      	cmp	r3, #6
 8001cb4:	d902      	bls.n	8001cbc <NVIC_EncodePriority+0x30>
 8001cb6:	69fb      	ldr	r3, [r7, #28]
 8001cb8:	3b03      	subs	r3, #3
 8001cba:	e000      	b.n	8001cbe <NVIC_EncodePriority+0x32>
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cc0:	f04f 32ff 	mov.w	r2, #4294967295
 8001cc4:	69bb      	ldr	r3, [r7, #24]
 8001cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cca:	43da      	mvns	r2, r3
 8001ccc:	68bb      	ldr	r3, [r7, #8]
 8001cce:	401a      	ands	r2, r3
 8001cd0:	697b      	ldr	r3, [r7, #20]
 8001cd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cd4:	f04f 31ff 	mov.w	r1, #4294967295
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	fa01 f303 	lsl.w	r3, r1, r3
 8001cde:	43d9      	mvns	r1, r3
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ce4:	4313      	orrs	r3, r2
         );
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	3724      	adds	r7, #36	@ 0x24
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr
	...

08001cf4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b082      	sub	sp, #8
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	3b01      	subs	r3, #1
 8001d00:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001d04:	d301      	bcc.n	8001d0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d06:	2301      	movs	r3, #1
 8001d08:	e00f      	b.n	8001d2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d0a:	4a0a      	ldr	r2, [pc, #40]	@ (8001d34 <SysTick_Config+0x40>)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	3b01      	subs	r3, #1
 8001d10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d12:	210f      	movs	r1, #15
 8001d14:	f04f 30ff 	mov.w	r0, #4294967295
 8001d18:	f7ff ff8e 	bl	8001c38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d1c:	4b05      	ldr	r3, [pc, #20]	@ (8001d34 <SysTick_Config+0x40>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d22:	4b04      	ldr	r3, [pc, #16]	@ (8001d34 <SysTick_Config+0x40>)
 8001d24:	2207      	movs	r2, #7
 8001d26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d28:	2300      	movs	r3, #0
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	3708      	adds	r7, #8
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	e000e010 	.word	0xe000e010

08001d38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b082      	sub	sp, #8
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d40:	6878      	ldr	r0, [r7, #4]
 8001d42:	f7ff ff29 	bl	8001b98 <__NVIC_SetPriorityGrouping>
}
 8001d46:	bf00      	nop
 8001d48:	3708      	adds	r7, #8
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}

08001d4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d4e:	b580      	push	{r7, lr}
 8001d50:	b086      	sub	sp, #24
 8001d52:	af00      	add	r7, sp, #0
 8001d54:	4603      	mov	r3, r0
 8001d56:	60b9      	str	r1, [r7, #8]
 8001d58:	607a      	str	r2, [r7, #4]
 8001d5a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001d5c:	f7ff ff40 	bl	8001be0 <__NVIC_GetPriorityGrouping>
 8001d60:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d62:	687a      	ldr	r2, [r7, #4]
 8001d64:	68b9      	ldr	r1, [r7, #8]
 8001d66:	6978      	ldr	r0, [r7, #20]
 8001d68:	f7ff ff90 	bl	8001c8c <NVIC_EncodePriority>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001d72:	4611      	mov	r1, r2
 8001d74:	4618      	mov	r0, r3
 8001d76:	f7ff ff5f 	bl	8001c38 <__NVIC_SetPriority>
}
 8001d7a:	bf00      	nop
 8001d7c:	3718      	adds	r7, #24
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}

08001d82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d82:	b580      	push	{r7, lr}
 8001d84:	b082      	sub	sp, #8
 8001d86:	af00      	add	r7, sp, #0
 8001d88:	4603      	mov	r3, r0
 8001d8a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d8c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d90:	4618      	mov	r0, r3
 8001d92:	f7ff ff33 	bl	8001bfc <__NVIC_EnableIRQ>
}
 8001d96:	bf00      	nop
 8001d98:	3708      	adds	r7, #8
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}

08001d9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d9e:	b580      	push	{r7, lr}
 8001da0:	b082      	sub	sp, #8
 8001da2:	af00      	add	r7, sp, #0
 8001da4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001da6:	6878      	ldr	r0, [r7, #4]
 8001da8:	f7ff ffa4 	bl	8001cf4 <SysTick_Config>
 8001dac:	4603      	mov	r3, r0
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	3708      	adds	r7, #8
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
	...

08001db8 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8001db8:	b480      	push	{r7}
 8001dba:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8001dbc:	4b07      	ldr	r3, [pc, #28]	@ (8001ddc <HAL_GetCurrentCPUID+0x24>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	091b      	lsrs	r3, r3, #4
 8001dc2:	f003 030f 	and.w	r3, r3, #15
 8001dc6:	2b07      	cmp	r3, #7
 8001dc8:	d101      	bne.n	8001dce <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 8001dca:	2303      	movs	r3, #3
 8001dcc:	e000      	b.n	8001dd0 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 8001dce:	2301      	movs	r3, #1
  }
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr
 8001dda:	bf00      	nop
 8001ddc:	e000ed00 	.word	0xe000ed00

08001de0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b086      	sub	sp, #24
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001de8:	f7ff fe9a 	bl	8001b20 <HAL_GetTick>
 8001dec:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d101      	bne.n	8001df8 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001df4:	2301      	movs	r3, #1
 8001df6:	e316      	b.n	8002426 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a66      	ldr	r2, [pc, #408]	@ (8001f98 <HAL_DMA_Init+0x1b8>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d04a      	beq.n	8001e98 <HAL_DMA_Init+0xb8>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4a65      	ldr	r2, [pc, #404]	@ (8001f9c <HAL_DMA_Init+0x1bc>)
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d045      	beq.n	8001e98 <HAL_DMA_Init+0xb8>
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a63      	ldr	r2, [pc, #396]	@ (8001fa0 <HAL_DMA_Init+0x1c0>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d040      	beq.n	8001e98 <HAL_DMA_Init+0xb8>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4a62      	ldr	r2, [pc, #392]	@ (8001fa4 <HAL_DMA_Init+0x1c4>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d03b      	beq.n	8001e98 <HAL_DMA_Init+0xb8>
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a60      	ldr	r2, [pc, #384]	@ (8001fa8 <HAL_DMA_Init+0x1c8>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d036      	beq.n	8001e98 <HAL_DMA_Init+0xb8>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a5f      	ldr	r2, [pc, #380]	@ (8001fac <HAL_DMA_Init+0x1cc>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d031      	beq.n	8001e98 <HAL_DMA_Init+0xb8>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a5d      	ldr	r2, [pc, #372]	@ (8001fb0 <HAL_DMA_Init+0x1d0>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d02c      	beq.n	8001e98 <HAL_DMA_Init+0xb8>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4a5c      	ldr	r2, [pc, #368]	@ (8001fb4 <HAL_DMA_Init+0x1d4>)
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d027      	beq.n	8001e98 <HAL_DMA_Init+0xb8>
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4a5a      	ldr	r2, [pc, #360]	@ (8001fb8 <HAL_DMA_Init+0x1d8>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d022      	beq.n	8001e98 <HAL_DMA_Init+0xb8>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4a59      	ldr	r2, [pc, #356]	@ (8001fbc <HAL_DMA_Init+0x1dc>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d01d      	beq.n	8001e98 <HAL_DMA_Init+0xb8>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a57      	ldr	r2, [pc, #348]	@ (8001fc0 <HAL_DMA_Init+0x1e0>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d018      	beq.n	8001e98 <HAL_DMA_Init+0xb8>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4a56      	ldr	r2, [pc, #344]	@ (8001fc4 <HAL_DMA_Init+0x1e4>)
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d013      	beq.n	8001e98 <HAL_DMA_Init+0xb8>
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a54      	ldr	r2, [pc, #336]	@ (8001fc8 <HAL_DMA_Init+0x1e8>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d00e      	beq.n	8001e98 <HAL_DMA_Init+0xb8>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4a53      	ldr	r2, [pc, #332]	@ (8001fcc <HAL_DMA_Init+0x1ec>)
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d009      	beq.n	8001e98 <HAL_DMA_Init+0xb8>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a51      	ldr	r2, [pc, #324]	@ (8001fd0 <HAL_DMA_Init+0x1f0>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d004      	beq.n	8001e98 <HAL_DMA_Init+0xb8>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4a50      	ldr	r2, [pc, #320]	@ (8001fd4 <HAL_DMA_Init+0x1f4>)
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d101      	bne.n	8001e9c <HAL_DMA_Init+0xbc>
 8001e98:	2301      	movs	r3, #1
 8001e9a:	e000      	b.n	8001e9e <HAL_DMA_Init+0xbe>
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	f000 813b 	beq.w	800211a <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2202      	movs	r2, #2
 8001ea8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2200      	movs	r2, #0
 8001eb0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a37      	ldr	r2, [pc, #220]	@ (8001f98 <HAL_DMA_Init+0x1b8>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d04a      	beq.n	8001f54 <HAL_DMA_Init+0x174>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4a36      	ldr	r2, [pc, #216]	@ (8001f9c <HAL_DMA_Init+0x1bc>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d045      	beq.n	8001f54 <HAL_DMA_Init+0x174>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a34      	ldr	r2, [pc, #208]	@ (8001fa0 <HAL_DMA_Init+0x1c0>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d040      	beq.n	8001f54 <HAL_DMA_Init+0x174>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4a33      	ldr	r2, [pc, #204]	@ (8001fa4 <HAL_DMA_Init+0x1c4>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d03b      	beq.n	8001f54 <HAL_DMA_Init+0x174>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a31      	ldr	r2, [pc, #196]	@ (8001fa8 <HAL_DMA_Init+0x1c8>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d036      	beq.n	8001f54 <HAL_DMA_Init+0x174>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4a30      	ldr	r2, [pc, #192]	@ (8001fac <HAL_DMA_Init+0x1cc>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d031      	beq.n	8001f54 <HAL_DMA_Init+0x174>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a2e      	ldr	r2, [pc, #184]	@ (8001fb0 <HAL_DMA_Init+0x1d0>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d02c      	beq.n	8001f54 <HAL_DMA_Init+0x174>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4a2d      	ldr	r2, [pc, #180]	@ (8001fb4 <HAL_DMA_Init+0x1d4>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d027      	beq.n	8001f54 <HAL_DMA_Init+0x174>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a2b      	ldr	r2, [pc, #172]	@ (8001fb8 <HAL_DMA_Init+0x1d8>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d022      	beq.n	8001f54 <HAL_DMA_Init+0x174>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4a2a      	ldr	r2, [pc, #168]	@ (8001fbc <HAL_DMA_Init+0x1dc>)
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d01d      	beq.n	8001f54 <HAL_DMA_Init+0x174>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a28      	ldr	r2, [pc, #160]	@ (8001fc0 <HAL_DMA_Init+0x1e0>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d018      	beq.n	8001f54 <HAL_DMA_Init+0x174>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4a27      	ldr	r2, [pc, #156]	@ (8001fc4 <HAL_DMA_Init+0x1e4>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d013      	beq.n	8001f54 <HAL_DMA_Init+0x174>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a25      	ldr	r2, [pc, #148]	@ (8001fc8 <HAL_DMA_Init+0x1e8>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d00e      	beq.n	8001f54 <HAL_DMA_Init+0x174>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4a24      	ldr	r2, [pc, #144]	@ (8001fcc <HAL_DMA_Init+0x1ec>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d009      	beq.n	8001f54 <HAL_DMA_Init+0x174>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a22      	ldr	r2, [pc, #136]	@ (8001fd0 <HAL_DMA_Init+0x1f0>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d004      	beq.n	8001f54 <HAL_DMA_Init+0x174>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4a21      	ldr	r2, [pc, #132]	@ (8001fd4 <HAL_DMA_Init+0x1f4>)
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d108      	bne.n	8001f66 <HAL_DMA_Init+0x186>
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	681a      	ldr	r2, [r3, #0]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f022 0201 	bic.w	r2, r2, #1
 8001f62:	601a      	str	r2, [r3, #0]
 8001f64:	e007      	b.n	8001f76 <HAL_DMA_Init+0x196>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	681a      	ldr	r2, [r3, #0]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f022 0201 	bic.w	r2, r2, #1
 8001f74:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001f76:	e02f      	b.n	8001fd8 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001f78:	f7ff fdd2 	bl	8001b20 <HAL_GetTick>
 8001f7c:	4602      	mov	r2, r0
 8001f7e:	693b      	ldr	r3, [r7, #16]
 8001f80:	1ad3      	subs	r3, r2, r3
 8001f82:	2b05      	cmp	r3, #5
 8001f84:	d928      	bls.n	8001fd8 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2220      	movs	r2, #32
 8001f8a:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2203      	movs	r2, #3
 8001f90:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8001f94:	2301      	movs	r3, #1
 8001f96:	e246      	b.n	8002426 <HAL_DMA_Init+0x646>
 8001f98:	40020010 	.word	0x40020010
 8001f9c:	40020028 	.word	0x40020028
 8001fa0:	40020040 	.word	0x40020040
 8001fa4:	40020058 	.word	0x40020058
 8001fa8:	40020070 	.word	0x40020070
 8001fac:	40020088 	.word	0x40020088
 8001fb0:	400200a0 	.word	0x400200a0
 8001fb4:	400200b8 	.word	0x400200b8
 8001fb8:	40020410 	.word	0x40020410
 8001fbc:	40020428 	.word	0x40020428
 8001fc0:	40020440 	.word	0x40020440
 8001fc4:	40020458 	.word	0x40020458
 8001fc8:	40020470 	.word	0x40020470
 8001fcc:	40020488 	.word	0x40020488
 8001fd0:	400204a0 	.word	0x400204a0
 8001fd4:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f003 0301 	and.w	r3, r3, #1
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d1c8      	bne.n	8001f78 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001fee:	697a      	ldr	r2, [r7, #20]
 8001ff0:	4b83      	ldr	r3, [pc, #524]	@ (8002200 <HAL_DMA_Init+0x420>)
 8001ff2:	4013      	ands	r3, r2
 8001ff4:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8001ffe:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	691b      	ldr	r3, [r3, #16]
 8002004:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800200a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	699b      	ldr	r3, [r3, #24]
 8002010:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002016:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6a1b      	ldr	r3, [r3, #32]
 800201c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800201e:	697a      	ldr	r2, [r7, #20]
 8002020:	4313      	orrs	r3, r2
 8002022:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002028:	2b04      	cmp	r3, #4
 800202a:	d107      	bne.n	800203c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002034:	4313      	orrs	r3, r2
 8002036:	697a      	ldr	r2, [r7, #20]
 8002038:	4313      	orrs	r3, r2
 800203a:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 800203c:	4b71      	ldr	r3, [pc, #452]	@ (8002204 <HAL_DMA_Init+0x424>)
 800203e:	681a      	ldr	r2, [r3, #0]
 8002040:	4b71      	ldr	r3, [pc, #452]	@ (8002208 <HAL_DMA_Init+0x428>)
 8002042:	4013      	ands	r3, r2
 8002044:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002048:	d328      	bcc.n	800209c <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	2b28      	cmp	r3, #40	@ 0x28
 8002050:	d903      	bls.n	800205a <HAL_DMA_Init+0x27a>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	2b2e      	cmp	r3, #46	@ 0x2e
 8002058:	d917      	bls.n	800208a <HAL_DMA_Init+0x2aa>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	2b3e      	cmp	r3, #62	@ 0x3e
 8002060:	d903      	bls.n	800206a <HAL_DMA_Init+0x28a>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	2b42      	cmp	r3, #66	@ 0x42
 8002068:	d90f      	bls.n	800208a <HAL_DMA_Init+0x2aa>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	2b46      	cmp	r3, #70	@ 0x46
 8002070:	d903      	bls.n	800207a <HAL_DMA_Init+0x29a>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	2b48      	cmp	r3, #72	@ 0x48
 8002078:	d907      	bls.n	800208a <HAL_DMA_Init+0x2aa>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	2b4e      	cmp	r3, #78	@ 0x4e
 8002080:	d905      	bls.n	800208e <HAL_DMA_Init+0x2ae>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	2b52      	cmp	r3, #82	@ 0x52
 8002088:	d801      	bhi.n	800208e <HAL_DMA_Init+0x2ae>
 800208a:	2301      	movs	r3, #1
 800208c:	e000      	b.n	8002090 <HAL_DMA_Init+0x2b0>
 800208e:	2300      	movs	r3, #0
 8002090:	2b00      	cmp	r3, #0
 8002092:	d003      	beq.n	800209c <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800209a:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	697a      	ldr	r2, [r7, #20]
 80020a2:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	695b      	ldr	r3, [r3, #20]
 80020aa:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	f023 0307 	bic.w	r3, r3, #7
 80020b2:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020b8:	697a      	ldr	r2, [r7, #20]
 80020ba:	4313      	orrs	r3, r2
 80020bc:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020c2:	2b04      	cmp	r3, #4
 80020c4:	d117      	bne.n	80020f6 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020ca:	697a      	ldr	r2, [r7, #20]
 80020cc:	4313      	orrs	r3, r2
 80020ce:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d00e      	beq.n	80020f6 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80020d8:	6878      	ldr	r0, [r7, #4]
 80020da:	f001 fdcf 	bl	8003c7c <DMA_CheckFifoParam>
 80020de:	4603      	mov	r3, r0
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d008      	beq.n	80020f6 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2240      	movs	r2, #64	@ 0x40
 80020e8:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2201      	movs	r2, #1
 80020ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
 80020f4:	e197      	b.n	8002426 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	697a      	ldr	r2, [r7, #20]
 80020fc:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80020fe:	6878      	ldr	r0, [r7, #4]
 8002100:	f001 fd0a 	bl	8003b18 <DMA_CalcBaseAndBitshift>
 8002104:	4603      	mov	r3, r0
 8002106:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800210c:	f003 031f 	and.w	r3, r3, #31
 8002110:	223f      	movs	r2, #63	@ 0x3f
 8002112:	409a      	lsls	r2, r3
 8002114:	68bb      	ldr	r3, [r7, #8]
 8002116:	609a      	str	r2, [r3, #8]
 8002118:	e0cd      	b.n	80022b6 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4a3b      	ldr	r2, [pc, #236]	@ (800220c <HAL_DMA_Init+0x42c>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d022      	beq.n	800216a <HAL_DMA_Init+0x38a>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a39      	ldr	r2, [pc, #228]	@ (8002210 <HAL_DMA_Init+0x430>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d01d      	beq.n	800216a <HAL_DMA_Init+0x38a>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4a38      	ldr	r2, [pc, #224]	@ (8002214 <HAL_DMA_Init+0x434>)
 8002134:	4293      	cmp	r3, r2
 8002136:	d018      	beq.n	800216a <HAL_DMA_Init+0x38a>
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a36      	ldr	r2, [pc, #216]	@ (8002218 <HAL_DMA_Init+0x438>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d013      	beq.n	800216a <HAL_DMA_Init+0x38a>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a35      	ldr	r2, [pc, #212]	@ (800221c <HAL_DMA_Init+0x43c>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d00e      	beq.n	800216a <HAL_DMA_Init+0x38a>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a33      	ldr	r2, [pc, #204]	@ (8002220 <HAL_DMA_Init+0x440>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d009      	beq.n	800216a <HAL_DMA_Init+0x38a>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4a32      	ldr	r2, [pc, #200]	@ (8002224 <HAL_DMA_Init+0x444>)
 800215c:	4293      	cmp	r3, r2
 800215e:	d004      	beq.n	800216a <HAL_DMA_Init+0x38a>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a30      	ldr	r2, [pc, #192]	@ (8002228 <HAL_DMA_Init+0x448>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d101      	bne.n	800216e <HAL_DMA_Init+0x38e>
 800216a:	2301      	movs	r3, #1
 800216c:	e000      	b.n	8002170 <HAL_DMA_Init+0x390>
 800216e:	2300      	movs	r3, #0
 8002170:	2b00      	cmp	r3, #0
 8002172:	f000 8097 	beq.w	80022a4 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a24      	ldr	r2, [pc, #144]	@ (800220c <HAL_DMA_Init+0x42c>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d021      	beq.n	80021c4 <HAL_DMA_Init+0x3e4>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a22      	ldr	r2, [pc, #136]	@ (8002210 <HAL_DMA_Init+0x430>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d01c      	beq.n	80021c4 <HAL_DMA_Init+0x3e4>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a21      	ldr	r2, [pc, #132]	@ (8002214 <HAL_DMA_Init+0x434>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d017      	beq.n	80021c4 <HAL_DMA_Init+0x3e4>
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a1f      	ldr	r2, [pc, #124]	@ (8002218 <HAL_DMA_Init+0x438>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d012      	beq.n	80021c4 <HAL_DMA_Init+0x3e4>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4a1e      	ldr	r2, [pc, #120]	@ (800221c <HAL_DMA_Init+0x43c>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d00d      	beq.n	80021c4 <HAL_DMA_Init+0x3e4>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a1c      	ldr	r2, [pc, #112]	@ (8002220 <HAL_DMA_Init+0x440>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d008      	beq.n	80021c4 <HAL_DMA_Init+0x3e4>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4a1b      	ldr	r2, [pc, #108]	@ (8002224 <HAL_DMA_Init+0x444>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d003      	beq.n	80021c4 <HAL_DMA_Init+0x3e4>
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a19      	ldr	r2, [pc, #100]	@ (8002228 <HAL_DMA_Init+0x448>)
 80021c2:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2202      	movs	r2, #2
 80021c8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2200      	movs	r2, #0
 80021d0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80021dc:	697a      	ldr	r2, [r7, #20]
 80021de:	4b13      	ldr	r3, [pc, #76]	@ (800222c <HAL_DMA_Init+0x44c>)
 80021e0:	4013      	ands	r3, r2
 80021e2:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	689b      	ldr	r3, [r3, #8]
 80021e8:	2b40      	cmp	r3, #64	@ 0x40
 80021ea:	d021      	beq.n	8002230 <HAL_DMA_Init+0x450>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	689b      	ldr	r3, [r3, #8]
 80021f0:	2b80      	cmp	r3, #128	@ 0x80
 80021f2:	d102      	bne.n	80021fa <HAL_DMA_Init+0x41a>
 80021f4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80021f8:	e01b      	b.n	8002232 <HAL_DMA_Init+0x452>
 80021fa:	2300      	movs	r3, #0
 80021fc:	e019      	b.n	8002232 <HAL_DMA_Init+0x452>
 80021fe:	bf00      	nop
 8002200:	fe10803f 	.word	0xfe10803f
 8002204:	5c001000 	.word	0x5c001000
 8002208:	ffff0000 	.word	0xffff0000
 800220c:	58025408 	.word	0x58025408
 8002210:	5802541c 	.word	0x5802541c
 8002214:	58025430 	.word	0x58025430
 8002218:	58025444 	.word	0x58025444
 800221c:	58025458 	.word	0x58025458
 8002220:	5802546c 	.word	0x5802546c
 8002224:	58025480 	.word	0x58025480
 8002228:	58025494 	.word	0x58025494
 800222c:	fffe000f 	.word	0xfffe000f
 8002230:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002232:	687a      	ldr	r2, [r7, #4]
 8002234:	68d2      	ldr	r2, [r2, #12]
 8002236:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002238:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	691b      	ldr	r3, [r3, #16]
 800223e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002240:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	695b      	ldr	r3, [r3, #20]
 8002246:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002248:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	699b      	ldr	r3, [r3, #24]
 800224e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002250:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	69db      	ldr	r3, [r3, #28]
 8002256:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002258:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6a1b      	ldr	r3, [r3, #32]
 800225e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002260:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002262:	697a      	ldr	r2, [r7, #20]
 8002264:	4313      	orrs	r3, r2
 8002266:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	697a      	ldr	r2, [r7, #20]
 800226e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	461a      	mov	r2, r3
 8002276:	4b6e      	ldr	r3, [pc, #440]	@ (8002430 <HAL_DMA_Init+0x650>)
 8002278:	4413      	add	r3, r2
 800227a:	4a6e      	ldr	r2, [pc, #440]	@ (8002434 <HAL_DMA_Init+0x654>)
 800227c:	fba2 2303 	umull	r2, r3, r2, r3
 8002280:	091b      	lsrs	r3, r3, #4
 8002282:	009a      	lsls	r2, r3, #2
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002288:	6878      	ldr	r0, [r7, #4]
 800228a:	f001 fc45 	bl	8003b18 <DMA_CalcBaseAndBitshift>
 800228e:	4603      	mov	r3, r0
 8002290:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002296:	f003 031f 	and.w	r3, r3, #31
 800229a:	2201      	movs	r2, #1
 800229c:	409a      	lsls	r2, r3
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	605a      	str	r2, [r3, #4]
 80022a2:	e008      	b.n	80022b6 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2240      	movs	r2, #64	@ 0x40
 80022a8:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2203      	movs	r2, #3
 80022ae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	e0b7      	b.n	8002426 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a5f      	ldr	r2, [pc, #380]	@ (8002438 <HAL_DMA_Init+0x658>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d072      	beq.n	80023a6 <HAL_DMA_Init+0x5c6>
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a5d      	ldr	r2, [pc, #372]	@ (800243c <HAL_DMA_Init+0x65c>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d06d      	beq.n	80023a6 <HAL_DMA_Init+0x5c6>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a5c      	ldr	r2, [pc, #368]	@ (8002440 <HAL_DMA_Init+0x660>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d068      	beq.n	80023a6 <HAL_DMA_Init+0x5c6>
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a5a      	ldr	r2, [pc, #360]	@ (8002444 <HAL_DMA_Init+0x664>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d063      	beq.n	80023a6 <HAL_DMA_Init+0x5c6>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a59      	ldr	r2, [pc, #356]	@ (8002448 <HAL_DMA_Init+0x668>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d05e      	beq.n	80023a6 <HAL_DMA_Init+0x5c6>
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a57      	ldr	r2, [pc, #348]	@ (800244c <HAL_DMA_Init+0x66c>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d059      	beq.n	80023a6 <HAL_DMA_Init+0x5c6>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4a56      	ldr	r2, [pc, #344]	@ (8002450 <HAL_DMA_Init+0x670>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d054      	beq.n	80023a6 <HAL_DMA_Init+0x5c6>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a54      	ldr	r2, [pc, #336]	@ (8002454 <HAL_DMA_Init+0x674>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d04f      	beq.n	80023a6 <HAL_DMA_Init+0x5c6>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a53      	ldr	r2, [pc, #332]	@ (8002458 <HAL_DMA_Init+0x678>)
 800230c:	4293      	cmp	r3, r2
 800230e:	d04a      	beq.n	80023a6 <HAL_DMA_Init+0x5c6>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a51      	ldr	r2, [pc, #324]	@ (800245c <HAL_DMA_Init+0x67c>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d045      	beq.n	80023a6 <HAL_DMA_Init+0x5c6>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a50      	ldr	r2, [pc, #320]	@ (8002460 <HAL_DMA_Init+0x680>)
 8002320:	4293      	cmp	r3, r2
 8002322:	d040      	beq.n	80023a6 <HAL_DMA_Init+0x5c6>
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a4e      	ldr	r2, [pc, #312]	@ (8002464 <HAL_DMA_Init+0x684>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d03b      	beq.n	80023a6 <HAL_DMA_Init+0x5c6>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a4d      	ldr	r2, [pc, #308]	@ (8002468 <HAL_DMA_Init+0x688>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d036      	beq.n	80023a6 <HAL_DMA_Init+0x5c6>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a4b      	ldr	r2, [pc, #300]	@ (800246c <HAL_DMA_Init+0x68c>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d031      	beq.n	80023a6 <HAL_DMA_Init+0x5c6>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a4a      	ldr	r2, [pc, #296]	@ (8002470 <HAL_DMA_Init+0x690>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d02c      	beq.n	80023a6 <HAL_DMA_Init+0x5c6>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a48      	ldr	r2, [pc, #288]	@ (8002474 <HAL_DMA_Init+0x694>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d027      	beq.n	80023a6 <HAL_DMA_Init+0x5c6>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a47      	ldr	r2, [pc, #284]	@ (8002478 <HAL_DMA_Init+0x698>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d022      	beq.n	80023a6 <HAL_DMA_Init+0x5c6>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a45      	ldr	r2, [pc, #276]	@ (800247c <HAL_DMA_Init+0x69c>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d01d      	beq.n	80023a6 <HAL_DMA_Init+0x5c6>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a44      	ldr	r2, [pc, #272]	@ (8002480 <HAL_DMA_Init+0x6a0>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d018      	beq.n	80023a6 <HAL_DMA_Init+0x5c6>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a42      	ldr	r2, [pc, #264]	@ (8002484 <HAL_DMA_Init+0x6a4>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d013      	beq.n	80023a6 <HAL_DMA_Init+0x5c6>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a41      	ldr	r2, [pc, #260]	@ (8002488 <HAL_DMA_Init+0x6a8>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d00e      	beq.n	80023a6 <HAL_DMA_Init+0x5c6>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a3f      	ldr	r2, [pc, #252]	@ (800248c <HAL_DMA_Init+0x6ac>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d009      	beq.n	80023a6 <HAL_DMA_Init+0x5c6>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a3e      	ldr	r2, [pc, #248]	@ (8002490 <HAL_DMA_Init+0x6b0>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d004      	beq.n	80023a6 <HAL_DMA_Init+0x5c6>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a3c      	ldr	r2, [pc, #240]	@ (8002494 <HAL_DMA_Init+0x6b4>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d101      	bne.n	80023aa <HAL_DMA_Init+0x5ca>
 80023a6:	2301      	movs	r3, #1
 80023a8:	e000      	b.n	80023ac <HAL_DMA_Init+0x5cc>
 80023aa:	2300      	movs	r3, #0
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d032      	beq.n	8002416 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80023b0:	6878      	ldr	r0, [r7, #4]
 80023b2:	f001 fcdf 	bl	8003d74 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	689b      	ldr	r3, [r3, #8]
 80023ba:	2b80      	cmp	r3, #128	@ 0x80
 80023bc:	d102      	bne.n	80023c4 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2200      	movs	r2, #0
 80023c2:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	685a      	ldr	r2, [r3, #4]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023cc:	b2d2      	uxtb	r2, r2
 80023ce:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80023d4:	687a      	ldr	r2, [r7, #4]
 80023d6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80023d8:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d010      	beq.n	8002404 <HAL_DMA_Init+0x624>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	2b08      	cmp	r3, #8
 80023e8:	d80c      	bhi.n	8002404 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80023ea:	6878      	ldr	r0, [r7, #4]
 80023ec:	f001 fd5c 	bl	8003ea8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80023f4:	2200      	movs	r2, #0
 80023f6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023fc:	687a      	ldr	r2, [r7, #4]
 80023fe:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002400:	605a      	str	r2, [r3, #4]
 8002402:	e008      	b.n	8002416 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2200      	movs	r2, #0
 8002408:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2200      	movs	r2, #0
 800240e:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2200      	movs	r2, #0
 8002414:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2200      	movs	r2, #0
 800241a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2201      	movs	r2, #1
 8002420:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002424:	2300      	movs	r3, #0
}
 8002426:	4618      	mov	r0, r3
 8002428:	3718      	adds	r7, #24
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}
 800242e:	bf00      	nop
 8002430:	a7fdabf8 	.word	0xa7fdabf8
 8002434:	cccccccd 	.word	0xcccccccd
 8002438:	40020010 	.word	0x40020010
 800243c:	40020028 	.word	0x40020028
 8002440:	40020040 	.word	0x40020040
 8002444:	40020058 	.word	0x40020058
 8002448:	40020070 	.word	0x40020070
 800244c:	40020088 	.word	0x40020088
 8002450:	400200a0 	.word	0x400200a0
 8002454:	400200b8 	.word	0x400200b8
 8002458:	40020410 	.word	0x40020410
 800245c:	40020428 	.word	0x40020428
 8002460:	40020440 	.word	0x40020440
 8002464:	40020458 	.word	0x40020458
 8002468:	40020470 	.word	0x40020470
 800246c:	40020488 	.word	0x40020488
 8002470:	400204a0 	.word	0x400204a0
 8002474:	400204b8 	.word	0x400204b8
 8002478:	58025408 	.word	0x58025408
 800247c:	5802541c 	.word	0x5802541c
 8002480:	58025430 	.word	0x58025430
 8002484:	58025444 	.word	0x58025444
 8002488:	58025458 	.word	0x58025458
 800248c:	5802546c 	.word	0x5802546c
 8002490:	58025480 	.word	0x58025480
 8002494:	58025494 	.word	0x58025494

08002498 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b086      	sub	sp, #24
 800249c:	af00      	add	r7, sp, #0
 800249e:	60f8      	str	r0, [r7, #12]
 80024a0:	60b9      	str	r1, [r7, #8]
 80024a2:	607a      	str	r2, [r7, #4]
 80024a4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80024a6:	2300      	movs	r3, #0
 80024a8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d101      	bne.n	80024b4 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80024b0:	2301      	movs	r3, #1
 80024b2:	e226      	b.n	8002902 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80024ba:	2b01      	cmp	r3, #1
 80024bc:	d101      	bne.n	80024c2 <HAL_DMA_Start_IT+0x2a>
 80024be:	2302      	movs	r3, #2
 80024c0:	e21f      	b.n	8002902 <HAL_DMA_Start_IT+0x46a>
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	2201      	movs	r2, #1
 80024c6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	2b01      	cmp	r3, #1
 80024d4:	f040 820a 	bne.w	80028ec <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	2202      	movs	r2, #2
 80024dc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	2200      	movs	r2, #0
 80024e4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a68      	ldr	r2, [pc, #416]	@ (800268c <HAL_DMA_Start_IT+0x1f4>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d04a      	beq.n	8002586 <HAL_DMA_Start_IT+0xee>
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a66      	ldr	r2, [pc, #408]	@ (8002690 <HAL_DMA_Start_IT+0x1f8>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d045      	beq.n	8002586 <HAL_DMA_Start_IT+0xee>
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4a65      	ldr	r2, [pc, #404]	@ (8002694 <HAL_DMA_Start_IT+0x1fc>)
 8002500:	4293      	cmp	r3, r2
 8002502:	d040      	beq.n	8002586 <HAL_DMA_Start_IT+0xee>
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a63      	ldr	r2, [pc, #396]	@ (8002698 <HAL_DMA_Start_IT+0x200>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d03b      	beq.n	8002586 <HAL_DMA_Start_IT+0xee>
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a62      	ldr	r2, [pc, #392]	@ (800269c <HAL_DMA_Start_IT+0x204>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d036      	beq.n	8002586 <HAL_DMA_Start_IT+0xee>
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a60      	ldr	r2, [pc, #384]	@ (80026a0 <HAL_DMA_Start_IT+0x208>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d031      	beq.n	8002586 <HAL_DMA_Start_IT+0xee>
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a5f      	ldr	r2, [pc, #380]	@ (80026a4 <HAL_DMA_Start_IT+0x20c>)
 8002528:	4293      	cmp	r3, r2
 800252a:	d02c      	beq.n	8002586 <HAL_DMA_Start_IT+0xee>
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a5d      	ldr	r2, [pc, #372]	@ (80026a8 <HAL_DMA_Start_IT+0x210>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d027      	beq.n	8002586 <HAL_DMA_Start_IT+0xee>
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a5c      	ldr	r2, [pc, #368]	@ (80026ac <HAL_DMA_Start_IT+0x214>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d022      	beq.n	8002586 <HAL_DMA_Start_IT+0xee>
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a5a      	ldr	r2, [pc, #360]	@ (80026b0 <HAL_DMA_Start_IT+0x218>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d01d      	beq.n	8002586 <HAL_DMA_Start_IT+0xee>
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4a59      	ldr	r2, [pc, #356]	@ (80026b4 <HAL_DMA_Start_IT+0x21c>)
 8002550:	4293      	cmp	r3, r2
 8002552:	d018      	beq.n	8002586 <HAL_DMA_Start_IT+0xee>
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a57      	ldr	r2, [pc, #348]	@ (80026b8 <HAL_DMA_Start_IT+0x220>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d013      	beq.n	8002586 <HAL_DMA_Start_IT+0xee>
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4a56      	ldr	r2, [pc, #344]	@ (80026bc <HAL_DMA_Start_IT+0x224>)
 8002564:	4293      	cmp	r3, r2
 8002566:	d00e      	beq.n	8002586 <HAL_DMA_Start_IT+0xee>
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a54      	ldr	r2, [pc, #336]	@ (80026c0 <HAL_DMA_Start_IT+0x228>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d009      	beq.n	8002586 <HAL_DMA_Start_IT+0xee>
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4a53      	ldr	r2, [pc, #332]	@ (80026c4 <HAL_DMA_Start_IT+0x22c>)
 8002578:	4293      	cmp	r3, r2
 800257a:	d004      	beq.n	8002586 <HAL_DMA_Start_IT+0xee>
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a51      	ldr	r2, [pc, #324]	@ (80026c8 <HAL_DMA_Start_IT+0x230>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d108      	bne.n	8002598 <HAL_DMA_Start_IT+0x100>
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	681a      	ldr	r2, [r3, #0]
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f022 0201 	bic.w	r2, r2, #1
 8002594:	601a      	str	r2, [r3, #0]
 8002596:	e007      	b.n	80025a8 <HAL_DMA_Start_IT+0x110>
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	681a      	ldr	r2, [r3, #0]
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f022 0201 	bic.w	r2, r2, #1
 80025a6:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	687a      	ldr	r2, [r7, #4]
 80025ac:	68b9      	ldr	r1, [r7, #8]
 80025ae:	68f8      	ldr	r0, [r7, #12]
 80025b0:	f001 f906 	bl	80037c0 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a34      	ldr	r2, [pc, #208]	@ (800268c <HAL_DMA_Start_IT+0x1f4>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d04a      	beq.n	8002654 <HAL_DMA_Start_IT+0x1bc>
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a33      	ldr	r2, [pc, #204]	@ (8002690 <HAL_DMA_Start_IT+0x1f8>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d045      	beq.n	8002654 <HAL_DMA_Start_IT+0x1bc>
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a31      	ldr	r2, [pc, #196]	@ (8002694 <HAL_DMA_Start_IT+0x1fc>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d040      	beq.n	8002654 <HAL_DMA_Start_IT+0x1bc>
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a30      	ldr	r2, [pc, #192]	@ (8002698 <HAL_DMA_Start_IT+0x200>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d03b      	beq.n	8002654 <HAL_DMA_Start_IT+0x1bc>
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a2e      	ldr	r2, [pc, #184]	@ (800269c <HAL_DMA_Start_IT+0x204>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d036      	beq.n	8002654 <HAL_DMA_Start_IT+0x1bc>
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a2d      	ldr	r2, [pc, #180]	@ (80026a0 <HAL_DMA_Start_IT+0x208>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d031      	beq.n	8002654 <HAL_DMA_Start_IT+0x1bc>
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a2b      	ldr	r2, [pc, #172]	@ (80026a4 <HAL_DMA_Start_IT+0x20c>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d02c      	beq.n	8002654 <HAL_DMA_Start_IT+0x1bc>
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a2a      	ldr	r2, [pc, #168]	@ (80026a8 <HAL_DMA_Start_IT+0x210>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d027      	beq.n	8002654 <HAL_DMA_Start_IT+0x1bc>
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a28      	ldr	r2, [pc, #160]	@ (80026ac <HAL_DMA_Start_IT+0x214>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d022      	beq.n	8002654 <HAL_DMA_Start_IT+0x1bc>
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a27      	ldr	r2, [pc, #156]	@ (80026b0 <HAL_DMA_Start_IT+0x218>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d01d      	beq.n	8002654 <HAL_DMA_Start_IT+0x1bc>
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a25      	ldr	r2, [pc, #148]	@ (80026b4 <HAL_DMA_Start_IT+0x21c>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d018      	beq.n	8002654 <HAL_DMA_Start_IT+0x1bc>
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a24      	ldr	r2, [pc, #144]	@ (80026b8 <HAL_DMA_Start_IT+0x220>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d013      	beq.n	8002654 <HAL_DMA_Start_IT+0x1bc>
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a22      	ldr	r2, [pc, #136]	@ (80026bc <HAL_DMA_Start_IT+0x224>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d00e      	beq.n	8002654 <HAL_DMA_Start_IT+0x1bc>
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a21      	ldr	r2, [pc, #132]	@ (80026c0 <HAL_DMA_Start_IT+0x228>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d009      	beq.n	8002654 <HAL_DMA_Start_IT+0x1bc>
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a1f      	ldr	r2, [pc, #124]	@ (80026c4 <HAL_DMA_Start_IT+0x22c>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d004      	beq.n	8002654 <HAL_DMA_Start_IT+0x1bc>
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a1e      	ldr	r2, [pc, #120]	@ (80026c8 <HAL_DMA_Start_IT+0x230>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d101      	bne.n	8002658 <HAL_DMA_Start_IT+0x1c0>
 8002654:	2301      	movs	r3, #1
 8002656:	e000      	b.n	800265a <HAL_DMA_Start_IT+0x1c2>
 8002658:	2300      	movs	r3, #0
 800265a:	2b00      	cmp	r3, #0
 800265c:	d036      	beq.n	80026cc <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f023 021e 	bic.w	r2, r3, #30
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f042 0216 	orr.w	r2, r2, #22
 8002670:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002676:	2b00      	cmp	r3, #0
 8002678:	d03e      	beq.n	80026f8 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f042 0208 	orr.w	r2, r2, #8
 8002688:	601a      	str	r2, [r3, #0]
 800268a:	e035      	b.n	80026f8 <HAL_DMA_Start_IT+0x260>
 800268c:	40020010 	.word	0x40020010
 8002690:	40020028 	.word	0x40020028
 8002694:	40020040 	.word	0x40020040
 8002698:	40020058 	.word	0x40020058
 800269c:	40020070 	.word	0x40020070
 80026a0:	40020088 	.word	0x40020088
 80026a4:	400200a0 	.word	0x400200a0
 80026a8:	400200b8 	.word	0x400200b8
 80026ac:	40020410 	.word	0x40020410
 80026b0:	40020428 	.word	0x40020428
 80026b4:	40020440 	.word	0x40020440
 80026b8:	40020458 	.word	0x40020458
 80026bc:	40020470 	.word	0x40020470
 80026c0:	40020488 	.word	0x40020488
 80026c4:	400204a0 	.word	0x400204a0
 80026c8:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f023 020e 	bic.w	r2, r3, #14
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f042 020a 	orr.w	r2, r2, #10
 80026de:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d007      	beq.n	80026f8 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	681a      	ldr	r2, [r3, #0]
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f042 0204 	orr.w	r2, r2, #4
 80026f6:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a83      	ldr	r2, [pc, #524]	@ (800290c <HAL_DMA_Start_IT+0x474>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d072      	beq.n	80027e8 <HAL_DMA_Start_IT+0x350>
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a82      	ldr	r2, [pc, #520]	@ (8002910 <HAL_DMA_Start_IT+0x478>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d06d      	beq.n	80027e8 <HAL_DMA_Start_IT+0x350>
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a80      	ldr	r2, [pc, #512]	@ (8002914 <HAL_DMA_Start_IT+0x47c>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d068      	beq.n	80027e8 <HAL_DMA_Start_IT+0x350>
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a7f      	ldr	r2, [pc, #508]	@ (8002918 <HAL_DMA_Start_IT+0x480>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d063      	beq.n	80027e8 <HAL_DMA_Start_IT+0x350>
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a7d      	ldr	r2, [pc, #500]	@ (800291c <HAL_DMA_Start_IT+0x484>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d05e      	beq.n	80027e8 <HAL_DMA_Start_IT+0x350>
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a7c      	ldr	r2, [pc, #496]	@ (8002920 <HAL_DMA_Start_IT+0x488>)
 8002730:	4293      	cmp	r3, r2
 8002732:	d059      	beq.n	80027e8 <HAL_DMA_Start_IT+0x350>
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a7a      	ldr	r2, [pc, #488]	@ (8002924 <HAL_DMA_Start_IT+0x48c>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d054      	beq.n	80027e8 <HAL_DMA_Start_IT+0x350>
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a79      	ldr	r2, [pc, #484]	@ (8002928 <HAL_DMA_Start_IT+0x490>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d04f      	beq.n	80027e8 <HAL_DMA_Start_IT+0x350>
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a77      	ldr	r2, [pc, #476]	@ (800292c <HAL_DMA_Start_IT+0x494>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d04a      	beq.n	80027e8 <HAL_DMA_Start_IT+0x350>
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4a76      	ldr	r2, [pc, #472]	@ (8002930 <HAL_DMA_Start_IT+0x498>)
 8002758:	4293      	cmp	r3, r2
 800275a:	d045      	beq.n	80027e8 <HAL_DMA_Start_IT+0x350>
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a74      	ldr	r2, [pc, #464]	@ (8002934 <HAL_DMA_Start_IT+0x49c>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d040      	beq.n	80027e8 <HAL_DMA_Start_IT+0x350>
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a73      	ldr	r2, [pc, #460]	@ (8002938 <HAL_DMA_Start_IT+0x4a0>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d03b      	beq.n	80027e8 <HAL_DMA_Start_IT+0x350>
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a71      	ldr	r2, [pc, #452]	@ (800293c <HAL_DMA_Start_IT+0x4a4>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d036      	beq.n	80027e8 <HAL_DMA_Start_IT+0x350>
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a70      	ldr	r2, [pc, #448]	@ (8002940 <HAL_DMA_Start_IT+0x4a8>)
 8002780:	4293      	cmp	r3, r2
 8002782:	d031      	beq.n	80027e8 <HAL_DMA_Start_IT+0x350>
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a6e      	ldr	r2, [pc, #440]	@ (8002944 <HAL_DMA_Start_IT+0x4ac>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d02c      	beq.n	80027e8 <HAL_DMA_Start_IT+0x350>
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4a6d      	ldr	r2, [pc, #436]	@ (8002948 <HAL_DMA_Start_IT+0x4b0>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d027      	beq.n	80027e8 <HAL_DMA_Start_IT+0x350>
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a6b      	ldr	r2, [pc, #428]	@ (800294c <HAL_DMA_Start_IT+0x4b4>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d022      	beq.n	80027e8 <HAL_DMA_Start_IT+0x350>
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4a6a      	ldr	r2, [pc, #424]	@ (8002950 <HAL_DMA_Start_IT+0x4b8>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d01d      	beq.n	80027e8 <HAL_DMA_Start_IT+0x350>
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a68      	ldr	r2, [pc, #416]	@ (8002954 <HAL_DMA_Start_IT+0x4bc>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d018      	beq.n	80027e8 <HAL_DMA_Start_IT+0x350>
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a67      	ldr	r2, [pc, #412]	@ (8002958 <HAL_DMA_Start_IT+0x4c0>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d013      	beq.n	80027e8 <HAL_DMA_Start_IT+0x350>
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a65      	ldr	r2, [pc, #404]	@ (800295c <HAL_DMA_Start_IT+0x4c4>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d00e      	beq.n	80027e8 <HAL_DMA_Start_IT+0x350>
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a64      	ldr	r2, [pc, #400]	@ (8002960 <HAL_DMA_Start_IT+0x4c8>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d009      	beq.n	80027e8 <HAL_DMA_Start_IT+0x350>
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a62      	ldr	r2, [pc, #392]	@ (8002964 <HAL_DMA_Start_IT+0x4cc>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d004      	beq.n	80027e8 <HAL_DMA_Start_IT+0x350>
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a61      	ldr	r2, [pc, #388]	@ (8002968 <HAL_DMA_Start_IT+0x4d0>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d101      	bne.n	80027ec <HAL_DMA_Start_IT+0x354>
 80027e8:	2301      	movs	r3, #1
 80027ea:	e000      	b.n	80027ee <HAL_DMA_Start_IT+0x356>
 80027ec:	2300      	movs	r3, #0
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d01a      	beq.n	8002828 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d007      	beq.n	8002810 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002804:	681a      	ldr	r2, [r3, #0]
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800280a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800280e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002814:	2b00      	cmp	r3, #0
 8002816:	d007      	beq.n	8002828 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800281c:	681a      	ldr	r2, [r3, #0]
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002822:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002826:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a37      	ldr	r2, [pc, #220]	@ (800290c <HAL_DMA_Start_IT+0x474>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d04a      	beq.n	80028c8 <HAL_DMA_Start_IT+0x430>
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a36      	ldr	r2, [pc, #216]	@ (8002910 <HAL_DMA_Start_IT+0x478>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d045      	beq.n	80028c8 <HAL_DMA_Start_IT+0x430>
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a34      	ldr	r2, [pc, #208]	@ (8002914 <HAL_DMA_Start_IT+0x47c>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d040      	beq.n	80028c8 <HAL_DMA_Start_IT+0x430>
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4a33      	ldr	r2, [pc, #204]	@ (8002918 <HAL_DMA_Start_IT+0x480>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d03b      	beq.n	80028c8 <HAL_DMA_Start_IT+0x430>
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a31      	ldr	r2, [pc, #196]	@ (800291c <HAL_DMA_Start_IT+0x484>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d036      	beq.n	80028c8 <HAL_DMA_Start_IT+0x430>
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a30      	ldr	r2, [pc, #192]	@ (8002920 <HAL_DMA_Start_IT+0x488>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d031      	beq.n	80028c8 <HAL_DMA_Start_IT+0x430>
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a2e      	ldr	r2, [pc, #184]	@ (8002924 <HAL_DMA_Start_IT+0x48c>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d02c      	beq.n	80028c8 <HAL_DMA_Start_IT+0x430>
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a2d      	ldr	r2, [pc, #180]	@ (8002928 <HAL_DMA_Start_IT+0x490>)
 8002874:	4293      	cmp	r3, r2
 8002876:	d027      	beq.n	80028c8 <HAL_DMA_Start_IT+0x430>
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a2b      	ldr	r2, [pc, #172]	@ (800292c <HAL_DMA_Start_IT+0x494>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d022      	beq.n	80028c8 <HAL_DMA_Start_IT+0x430>
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4a2a      	ldr	r2, [pc, #168]	@ (8002930 <HAL_DMA_Start_IT+0x498>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d01d      	beq.n	80028c8 <HAL_DMA_Start_IT+0x430>
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a28      	ldr	r2, [pc, #160]	@ (8002934 <HAL_DMA_Start_IT+0x49c>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d018      	beq.n	80028c8 <HAL_DMA_Start_IT+0x430>
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a27      	ldr	r2, [pc, #156]	@ (8002938 <HAL_DMA_Start_IT+0x4a0>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d013      	beq.n	80028c8 <HAL_DMA_Start_IT+0x430>
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a25      	ldr	r2, [pc, #148]	@ (800293c <HAL_DMA_Start_IT+0x4a4>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d00e      	beq.n	80028c8 <HAL_DMA_Start_IT+0x430>
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a24      	ldr	r2, [pc, #144]	@ (8002940 <HAL_DMA_Start_IT+0x4a8>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d009      	beq.n	80028c8 <HAL_DMA_Start_IT+0x430>
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a22      	ldr	r2, [pc, #136]	@ (8002944 <HAL_DMA_Start_IT+0x4ac>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d004      	beq.n	80028c8 <HAL_DMA_Start_IT+0x430>
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4a21      	ldr	r2, [pc, #132]	@ (8002948 <HAL_DMA_Start_IT+0x4b0>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d108      	bne.n	80028da <HAL_DMA_Start_IT+0x442>
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	681a      	ldr	r2, [r3, #0]
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f042 0201 	orr.w	r2, r2, #1
 80028d6:	601a      	str	r2, [r3, #0]
 80028d8:	e012      	b.n	8002900 <HAL_DMA_Start_IT+0x468>
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	681a      	ldr	r2, [r3, #0]
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f042 0201 	orr.w	r2, r2, #1
 80028e8:	601a      	str	r2, [r3, #0]
 80028ea:	e009      	b.n	8002900 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80028f2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	2200      	movs	r2, #0
 80028f8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 80028fc:	2301      	movs	r3, #1
 80028fe:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002900:	7dfb      	ldrb	r3, [r7, #23]
}
 8002902:	4618      	mov	r0, r3
 8002904:	3718      	adds	r7, #24
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}
 800290a:	bf00      	nop
 800290c:	40020010 	.word	0x40020010
 8002910:	40020028 	.word	0x40020028
 8002914:	40020040 	.word	0x40020040
 8002918:	40020058 	.word	0x40020058
 800291c:	40020070 	.word	0x40020070
 8002920:	40020088 	.word	0x40020088
 8002924:	400200a0 	.word	0x400200a0
 8002928:	400200b8 	.word	0x400200b8
 800292c:	40020410 	.word	0x40020410
 8002930:	40020428 	.word	0x40020428
 8002934:	40020440 	.word	0x40020440
 8002938:	40020458 	.word	0x40020458
 800293c:	40020470 	.word	0x40020470
 8002940:	40020488 	.word	0x40020488
 8002944:	400204a0 	.word	0x400204a0
 8002948:	400204b8 	.word	0x400204b8
 800294c:	58025408 	.word	0x58025408
 8002950:	5802541c 	.word	0x5802541c
 8002954:	58025430 	.word	0x58025430
 8002958:	58025444 	.word	0x58025444
 800295c:	58025458 	.word	0x58025458
 8002960:	5802546c 	.word	0x5802546c
 8002964:	58025480 	.word	0x58025480
 8002968:	58025494 	.word	0x58025494

0800296c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b08a      	sub	sp, #40	@ 0x28
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8002974:	2300      	movs	r3, #0
 8002976:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002978:	4b67      	ldr	r3, [pc, #412]	@ (8002b18 <HAL_DMA_IRQHandler+0x1ac>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a67      	ldr	r2, [pc, #412]	@ (8002b1c <HAL_DMA_IRQHandler+0x1b0>)
 800297e:	fba2 2303 	umull	r2, r3, r2, r3
 8002982:	0a9b      	lsrs	r3, r3, #10
 8002984:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800298a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002990:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8002992:	6a3b      	ldr	r3, [r7, #32]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8002998:	69fb      	ldr	r3, [r7, #28]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a5f      	ldr	r2, [pc, #380]	@ (8002b20 <HAL_DMA_IRQHandler+0x1b4>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d04a      	beq.n	8002a3e <HAL_DMA_IRQHandler+0xd2>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a5d      	ldr	r2, [pc, #372]	@ (8002b24 <HAL_DMA_IRQHandler+0x1b8>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d045      	beq.n	8002a3e <HAL_DMA_IRQHandler+0xd2>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a5c      	ldr	r2, [pc, #368]	@ (8002b28 <HAL_DMA_IRQHandler+0x1bc>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d040      	beq.n	8002a3e <HAL_DMA_IRQHandler+0xd2>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a5a      	ldr	r2, [pc, #360]	@ (8002b2c <HAL_DMA_IRQHandler+0x1c0>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d03b      	beq.n	8002a3e <HAL_DMA_IRQHandler+0xd2>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a59      	ldr	r2, [pc, #356]	@ (8002b30 <HAL_DMA_IRQHandler+0x1c4>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d036      	beq.n	8002a3e <HAL_DMA_IRQHandler+0xd2>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a57      	ldr	r2, [pc, #348]	@ (8002b34 <HAL_DMA_IRQHandler+0x1c8>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d031      	beq.n	8002a3e <HAL_DMA_IRQHandler+0xd2>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a56      	ldr	r2, [pc, #344]	@ (8002b38 <HAL_DMA_IRQHandler+0x1cc>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d02c      	beq.n	8002a3e <HAL_DMA_IRQHandler+0xd2>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a54      	ldr	r2, [pc, #336]	@ (8002b3c <HAL_DMA_IRQHandler+0x1d0>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d027      	beq.n	8002a3e <HAL_DMA_IRQHandler+0xd2>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4a53      	ldr	r2, [pc, #332]	@ (8002b40 <HAL_DMA_IRQHandler+0x1d4>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d022      	beq.n	8002a3e <HAL_DMA_IRQHandler+0xd2>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a51      	ldr	r2, [pc, #324]	@ (8002b44 <HAL_DMA_IRQHandler+0x1d8>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d01d      	beq.n	8002a3e <HAL_DMA_IRQHandler+0xd2>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a50      	ldr	r2, [pc, #320]	@ (8002b48 <HAL_DMA_IRQHandler+0x1dc>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d018      	beq.n	8002a3e <HAL_DMA_IRQHandler+0xd2>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a4e      	ldr	r2, [pc, #312]	@ (8002b4c <HAL_DMA_IRQHandler+0x1e0>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d013      	beq.n	8002a3e <HAL_DMA_IRQHandler+0xd2>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a4d      	ldr	r2, [pc, #308]	@ (8002b50 <HAL_DMA_IRQHandler+0x1e4>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d00e      	beq.n	8002a3e <HAL_DMA_IRQHandler+0xd2>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a4b      	ldr	r2, [pc, #300]	@ (8002b54 <HAL_DMA_IRQHandler+0x1e8>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d009      	beq.n	8002a3e <HAL_DMA_IRQHandler+0xd2>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a4a      	ldr	r2, [pc, #296]	@ (8002b58 <HAL_DMA_IRQHandler+0x1ec>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d004      	beq.n	8002a3e <HAL_DMA_IRQHandler+0xd2>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a48      	ldr	r2, [pc, #288]	@ (8002b5c <HAL_DMA_IRQHandler+0x1f0>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d101      	bne.n	8002a42 <HAL_DMA_IRQHandler+0xd6>
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e000      	b.n	8002a44 <HAL_DMA_IRQHandler+0xd8>
 8002a42:	2300      	movs	r3, #0
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	f000 842b 	beq.w	80032a0 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a4e:	f003 031f 	and.w	r3, r3, #31
 8002a52:	2208      	movs	r2, #8
 8002a54:	409a      	lsls	r2, r3
 8002a56:	69bb      	ldr	r3, [r7, #24]
 8002a58:	4013      	ands	r3, r2
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	f000 80a2 	beq.w	8002ba4 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a2e      	ldr	r2, [pc, #184]	@ (8002b20 <HAL_DMA_IRQHandler+0x1b4>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d04a      	beq.n	8002b00 <HAL_DMA_IRQHandler+0x194>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a2d      	ldr	r2, [pc, #180]	@ (8002b24 <HAL_DMA_IRQHandler+0x1b8>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d045      	beq.n	8002b00 <HAL_DMA_IRQHandler+0x194>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a2b      	ldr	r2, [pc, #172]	@ (8002b28 <HAL_DMA_IRQHandler+0x1bc>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d040      	beq.n	8002b00 <HAL_DMA_IRQHandler+0x194>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a2a      	ldr	r2, [pc, #168]	@ (8002b2c <HAL_DMA_IRQHandler+0x1c0>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d03b      	beq.n	8002b00 <HAL_DMA_IRQHandler+0x194>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a28      	ldr	r2, [pc, #160]	@ (8002b30 <HAL_DMA_IRQHandler+0x1c4>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d036      	beq.n	8002b00 <HAL_DMA_IRQHandler+0x194>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a27      	ldr	r2, [pc, #156]	@ (8002b34 <HAL_DMA_IRQHandler+0x1c8>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d031      	beq.n	8002b00 <HAL_DMA_IRQHandler+0x194>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a25      	ldr	r2, [pc, #148]	@ (8002b38 <HAL_DMA_IRQHandler+0x1cc>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d02c      	beq.n	8002b00 <HAL_DMA_IRQHandler+0x194>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a24      	ldr	r2, [pc, #144]	@ (8002b3c <HAL_DMA_IRQHandler+0x1d0>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d027      	beq.n	8002b00 <HAL_DMA_IRQHandler+0x194>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a22      	ldr	r2, [pc, #136]	@ (8002b40 <HAL_DMA_IRQHandler+0x1d4>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d022      	beq.n	8002b00 <HAL_DMA_IRQHandler+0x194>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4a21      	ldr	r2, [pc, #132]	@ (8002b44 <HAL_DMA_IRQHandler+0x1d8>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d01d      	beq.n	8002b00 <HAL_DMA_IRQHandler+0x194>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a1f      	ldr	r2, [pc, #124]	@ (8002b48 <HAL_DMA_IRQHandler+0x1dc>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d018      	beq.n	8002b00 <HAL_DMA_IRQHandler+0x194>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a1e      	ldr	r2, [pc, #120]	@ (8002b4c <HAL_DMA_IRQHandler+0x1e0>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d013      	beq.n	8002b00 <HAL_DMA_IRQHandler+0x194>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a1c      	ldr	r2, [pc, #112]	@ (8002b50 <HAL_DMA_IRQHandler+0x1e4>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d00e      	beq.n	8002b00 <HAL_DMA_IRQHandler+0x194>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a1b      	ldr	r2, [pc, #108]	@ (8002b54 <HAL_DMA_IRQHandler+0x1e8>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d009      	beq.n	8002b00 <HAL_DMA_IRQHandler+0x194>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a19      	ldr	r2, [pc, #100]	@ (8002b58 <HAL_DMA_IRQHandler+0x1ec>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d004      	beq.n	8002b00 <HAL_DMA_IRQHandler+0x194>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4a18      	ldr	r2, [pc, #96]	@ (8002b5c <HAL_DMA_IRQHandler+0x1f0>)
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d12f      	bne.n	8002b60 <HAL_DMA_IRQHandler+0x1f4>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f003 0304 	and.w	r3, r3, #4
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	bf14      	ite	ne
 8002b0e:	2301      	movne	r3, #1
 8002b10:	2300      	moveq	r3, #0
 8002b12:	b2db      	uxtb	r3, r3
 8002b14:	e02e      	b.n	8002b74 <HAL_DMA_IRQHandler+0x208>
 8002b16:	bf00      	nop
 8002b18:	24000000 	.word	0x24000000
 8002b1c:	1b4e81b5 	.word	0x1b4e81b5
 8002b20:	40020010 	.word	0x40020010
 8002b24:	40020028 	.word	0x40020028
 8002b28:	40020040 	.word	0x40020040
 8002b2c:	40020058 	.word	0x40020058
 8002b30:	40020070 	.word	0x40020070
 8002b34:	40020088 	.word	0x40020088
 8002b38:	400200a0 	.word	0x400200a0
 8002b3c:	400200b8 	.word	0x400200b8
 8002b40:	40020410 	.word	0x40020410
 8002b44:	40020428 	.word	0x40020428
 8002b48:	40020440 	.word	0x40020440
 8002b4c:	40020458 	.word	0x40020458
 8002b50:	40020470 	.word	0x40020470
 8002b54:	40020488 	.word	0x40020488
 8002b58:	400204a0 	.word	0x400204a0
 8002b5c:	400204b8 	.word	0x400204b8
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f003 0308 	and.w	r3, r3, #8
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	bf14      	ite	ne
 8002b6e:	2301      	movne	r3, #1
 8002b70:	2300      	moveq	r3, #0
 8002b72:	b2db      	uxtb	r3, r3
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d015      	beq.n	8002ba4 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	681a      	ldr	r2, [r3, #0]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f022 0204 	bic.w	r2, r2, #4
 8002b86:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b8c:	f003 031f 	and.w	r3, r3, #31
 8002b90:	2208      	movs	r2, #8
 8002b92:	409a      	lsls	r2, r3
 8002b94:	6a3b      	ldr	r3, [r7, #32]
 8002b96:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b9c:	f043 0201 	orr.w	r2, r3, #1
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ba8:	f003 031f 	and.w	r3, r3, #31
 8002bac:	69ba      	ldr	r2, [r7, #24]
 8002bae:	fa22 f303 	lsr.w	r3, r2, r3
 8002bb2:	f003 0301 	and.w	r3, r3, #1
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d06e      	beq.n	8002c98 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a69      	ldr	r2, [pc, #420]	@ (8002d64 <HAL_DMA_IRQHandler+0x3f8>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d04a      	beq.n	8002c5a <HAL_DMA_IRQHandler+0x2ee>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a67      	ldr	r2, [pc, #412]	@ (8002d68 <HAL_DMA_IRQHandler+0x3fc>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d045      	beq.n	8002c5a <HAL_DMA_IRQHandler+0x2ee>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a66      	ldr	r2, [pc, #408]	@ (8002d6c <HAL_DMA_IRQHandler+0x400>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d040      	beq.n	8002c5a <HAL_DMA_IRQHandler+0x2ee>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a64      	ldr	r2, [pc, #400]	@ (8002d70 <HAL_DMA_IRQHandler+0x404>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d03b      	beq.n	8002c5a <HAL_DMA_IRQHandler+0x2ee>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a63      	ldr	r2, [pc, #396]	@ (8002d74 <HAL_DMA_IRQHandler+0x408>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d036      	beq.n	8002c5a <HAL_DMA_IRQHandler+0x2ee>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a61      	ldr	r2, [pc, #388]	@ (8002d78 <HAL_DMA_IRQHandler+0x40c>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d031      	beq.n	8002c5a <HAL_DMA_IRQHandler+0x2ee>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a60      	ldr	r2, [pc, #384]	@ (8002d7c <HAL_DMA_IRQHandler+0x410>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d02c      	beq.n	8002c5a <HAL_DMA_IRQHandler+0x2ee>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a5e      	ldr	r2, [pc, #376]	@ (8002d80 <HAL_DMA_IRQHandler+0x414>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d027      	beq.n	8002c5a <HAL_DMA_IRQHandler+0x2ee>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a5d      	ldr	r2, [pc, #372]	@ (8002d84 <HAL_DMA_IRQHandler+0x418>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d022      	beq.n	8002c5a <HAL_DMA_IRQHandler+0x2ee>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a5b      	ldr	r2, [pc, #364]	@ (8002d88 <HAL_DMA_IRQHandler+0x41c>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d01d      	beq.n	8002c5a <HAL_DMA_IRQHandler+0x2ee>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a5a      	ldr	r2, [pc, #360]	@ (8002d8c <HAL_DMA_IRQHandler+0x420>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d018      	beq.n	8002c5a <HAL_DMA_IRQHandler+0x2ee>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a58      	ldr	r2, [pc, #352]	@ (8002d90 <HAL_DMA_IRQHandler+0x424>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d013      	beq.n	8002c5a <HAL_DMA_IRQHandler+0x2ee>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a57      	ldr	r2, [pc, #348]	@ (8002d94 <HAL_DMA_IRQHandler+0x428>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d00e      	beq.n	8002c5a <HAL_DMA_IRQHandler+0x2ee>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a55      	ldr	r2, [pc, #340]	@ (8002d98 <HAL_DMA_IRQHandler+0x42c>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d009      	beq.n	8002c5a <HAL_DMA_IRQHandler+0x2ee>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a54      	ldr	r2, [pc, #336]	@ (8002d9c <HAL_DMA_IRQHandler+0x430>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d004      	beq.n	8002c5a <HAL_DMA_IRQHandler+0x2ee>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a52      	ldr	r2, [pc, #328]	@ (8002da0 <HAL_DMA_IRQHandler+0x434>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d10a      	bne.n	8002c70 <HAL_DMA_IRQHandler+0x304>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	695b      	ldr	r3, [r3, #20]
 8002c60:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	bf14      	ite	ne
 8002c68:	2301      	movne	r3, #1
 8002c6a:	2300      	moveq	r3, #0
 8002c6c:	b2db      	uxtb	r3, r3
 8002c6e:	e003      	b.n	8002c78 <HAL_DMA_IRQHandler+0x30c>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	2300      	movs	r3, #0
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d00d      	beq.n	8002c98 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c80:	f003 031f 	and.w	r3, r3, #31
 8002c84:	2201      	movs	r2, #1
 8002c86:	409a      	lsls	r2, r3
 8002c88:	6a3b      	ldr	r3, [r7, #32]
 8002c8a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c90:	f043 0202 	orr.w	r2, r3, #2
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c9c:	f003 031f 	and.w	r3, r3, #31
 8002ca0:	2204      	movs	r2, #4
 8002ca2:	409a      	lsls	r2, r3
 8002ca4:	69bb      	ldr	r3, [r7, #24]
 8002ca6:	4013      	ands	r3, r2
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	f000 808f 	beq.w	8002dcc <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a2c      	ldr	r2, [pc, #176]	@ (8002d64 <HAL_DMA_IRQHandler+0x3f8>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d04a      	beq.n	8002d4e <HAL_DMA_IRQHandler+0x3e2>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a2a      	ldr	r2, [pc, #168]	@ (8002d68 <HAL_DMA_IRQHandler+0x3fc>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d045      	beq.n	8002d4e <HAL_DMA_IRQHandler+0x3e2>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a29      	ldr	r2, [pc, #164]	@ (8002d6c <HAL_DMA_IRQHandler+0x400>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d040      	beq.n	8002d4e <HAL_DMA_IRQHandler+0x3e2>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a27      	ldr	r2, [pc, #156]	@ (8002d70 <HAL_DMA_IRQHandler+0x404>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d03b      	beq.n	8002d4e <HAL_DMA_IRQHandler+0x3e2>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a26      	ldr	r2, [pc, #152]	@ (8002d74 <HAL_DMA_IRQHandler+0x408>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d036      	beq.n	8002d4e <HAL_DMA_IRQHandler+0x3e2>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a24      	ldr	r2, [pc, #144]	@ (8002d78 <HAL_DMA_IRQHandler+0x40c>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d031      	beq.n	8002d4e <HAL_DMA_IRQHandler+0x3e2>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a23      	ldr	r2, [pc, #140]	@ (8002d7c <HAL_DMA_IRQHandler+0x410>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d02c      	beq.n	8002d4e <HAL_DMA_IRQHandler+0x3e2>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a21      	ldr	r2, [pc, #132]	@ (8002d80 <HAL_DMA_IRQHandler+0x414>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d027      	beq.n	8002d4e <HAL_DMA_IRQHandler+0x3e2>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a20      	ldr	r2, [pc, #128]	@ (8002d84 <HAL_DMA_IRQHandler+0x418>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d022      	beq.n	8002d4e <HAL_DMA_IRQHandler+0x3e2>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a1e      	ldr	r2, [pc, #120]	@ (8002d88 <HAL_DMA_IRQHandler+0x41c>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d01d      	beq.n	8002d4e <HAL_DMA_IRQHandler+0x3e2>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a1d      	ldr	r2, [pc, #116]	@ (8002d8c <HAL_DMA_IRQHandler+0x420>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d018      	beq.n	8002d4e <HAL_DMA_IRQHandler+0x3e2>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a1b      	ldr	r2, [pc, #108]	@ (8002d90 <HAL_DMA_IRQHandler+0x424>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d013      	beq.n	8002d4e <HAL_DMA_IRQHandler+0x3e2>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a1a      	ldr	r2, [pc, #104]	@ (8002d94 <HAL_DMA_IRQHandler+0x428>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d00e      	beq.n	8002d4e <HAL_DMA_IRQHandler+0x3e2>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a18      	ldr	r2, [pc, #96]	@ (8002d98 <HAL_DMA_IRQHandler+0x42c>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d009      	beq.n	8002d4e <HAL_DMA_IRQHandler+0x3e2>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a17      	ldr	r2, [pc, #92]	@ (8002d9c <HAL_DMA_IRQHandler+0x430>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d004      	beq.n	8002d4e <HAL_DMA_IRQHandler+0x3e2>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a15      	ldr	r2, [pc, #84]	@ (8002da0 <HAL_DMA_IRQHandler+0x434>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d12a      	bne.n	8002da4 <HAL_DMA_IRQHandler+0x438>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f003 0302 	and.w	r3, r3, #2
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	bf14      	ite	ne
 8002d5c:	2301      	movne	r3, #1
 8002d5e:	2300      	moveq	r3, #0
 8002d60:	b2db      	uxtb	r3, r3
 8002d62:	e023      	b.n	8002dac <HAL_DMA_IRQHandler+0x440>
 8002d64:	40020010 	.word	0x40020010
 8002d68:	40020028 	.word	0x40020028
 8002d6c:	40020040 	.word	0x40020040
 8002d70:	40020058 	.word	0x40020058
 8002d74:	40020070 	.word	0x40020070
 8002d78:	40020088 	.word	0x40020088
 8002d7c:	400200a0 	.word	0x400200a0
 8002d80:	400200b8 	.word	0x400200b8
 8002d84:	40020410 	.word	0x40020410
 8002d88:	40020428 	.word	0x40020428
 8002d8c:	40020440 	.word	0x40020440
 8002d90:	40020458 	.word	0x40020458
 8002d94:	40020470 	.word	0x40020470
 8002d98:	40020488 	.word	0x40020488
 8002d9c:	400204a0 	.word	0x400204a0
 8002da0:	400204b8 	.word	0x400204b8
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	2300      	movs	r3, #0
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d00d      	beq.n	8002dcc <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002db4:	f003 031f 	and.w	r3, r3, #31
 8002db8:	2204      	movs	r2, #4
 8002dba:	409a      	lsls	r2, r3
 8002dbc:	6a3b      	ldr	r3, [r7, #32]
 8002dbe:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002dc4:	f043 0204 	orr.w	r2, r3, #4
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dd0:	f003 031f 	and.w	r3, r3, #31
 8002dd4:	2210      	movs	r2, #16
 8002dd6:	409a      	lsls	r2, r3
 8002dd8:	69bb      	ldr	r3, [r7, #24]
 8002dda:	4013      	ands	r3, r2
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	f000 80a6 	beq.w	8002f2e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a85      	ldr	r2, [pc, #532]	@ (8002ffc <HAL_DMA_IRQHandler+0x690>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d04a      	beq.n	8002e82 <HAL_DMA_IRQHandler+0x516>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a83      	ldr	r2, [pc, #524]	@ (8003000 <HAL_DMA_IRQHandler+0x694>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d045      	beq.n	8002e82 <HAL_DMA_IRQHandler+0x516>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a82      	ldr	r2, [pc, #520]	@ (8003004 <HAL_DMA_IRQHandler+0x698>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d040      	beq.n	8002e82 <HAL_DMA_IRQHandler+0x516>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a80      	ldr	r2, [pc, #512]	@ (8003008 <HAL_DMA_IRQHandler+0x69c>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d03b      	beq.n	8002e82 <HAL_DMA_IRQHandler+0x516>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a7f      	ldr	r2, [pc, #508]	@ (800300c <HAL_DMA_IRQHandler+0x6a0>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d036      	beq.n	8002e82 <HAL_DMA_IRQHandler+0x516>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a7d      	ldr	r2, [pc, #500]	@ (8003010 <HAL_DMA_IRQHandler+0x6a4>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d031      	beq.n	8002e82 <HAL_DMA_IRQHandler+0x516>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a7c      	ldr	r2, [pc, #496]	@ (8003014 <HAL_DMA_IRQHandler+0x6a8>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d02c      	beq.n	8002e82 <HAL_DMA_IRQHandler+0x516>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a7a      	ldr	r2, [pc, #488]	@ (8003018 <HAL_DMA_IRQHandler+0x6ac>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d027      	beq.n	8002e82 <HAL_DMA_IRQHandler+0x516>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4a79      	ldr	r2, [pc, #484]	@ (800301c <HAL_DMA_IRQHandler+0x6b0>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d022      	beq.n	8002e82 <HAL_DMA_IRQHandler+0x516>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a77      	ldr	r2, [pc, #476]	@ (8003020 <HAL_DMA_IRQHandler+0x6b4>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d01d      	beq.n	8002e82 <HAL_DMA_IRQHandler+0x516>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a76      	ldr	r2, [pc, #472]	@ (8003024 <HAL_DMA_IRQHandler+0x6b8>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d018      	beq.n	8002e82 <HAL_DMA_IRQHandler+0x516>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a74      	ldr	r2, [pc, #464]	@ (8003028 <HAL_DMA_IRQHandler+0x6bc>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d013      	beq.n	8002e82 <HAL_DMA_IRQHandler+0x516>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a73      	ldr	r2, [pc, #460]	@ (800302c <HAL_DMA_IRQHandler+0x6c0>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d00e      	beq.n	8002e82 <HAL_DMA_IRQHandler+0x516>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a71      	ldr	r2, [pc, #452]	@ (8003030 <HAL_DMA_IRQHandler+0x6c4>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d009      	beq.n	8002e82 <HAL_DMA_IRQHandler+0x516>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4a70      	ldr	r2, [pc, #448]	@ (8003034 <HAL_DMA_IRQHandler+0x6c8>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d004      	beq.n	8002e82 <HAL_DMA_IRQHandler+0x516>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a6e      	ldr	r2, [pc, #440]	@ (8003038 <HAL_DMA_IRQHandler+0x6cc>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d10a      	bne.n	8002e98 <HAL_DMA_IRQHandler+0x52c>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f003 0308 	and.w	r3, r3, #8
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	bf14      	ite	ne
 8002e90:	2301      	movne	r3, #1
 8002e92:	2300      	moveq	r3, #0
 8002e94:	b2db      	uxtb	r3, r3
 8002e96:	e009      	b.n	8002eac <HAL_DMA_IRQHandler+0x540>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f003 0304 	and.w	r3, r3, #4
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	bf14      	ite	ne
 8002ea6:	2301      	movne	r3, #1
 8002ea8:	2300      	moveq	r3, #0
 8002eaa:	b2db      	uxtb	r3, r3
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d03e      	beq.n	8002f2e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002eb4:	f003 031f 	and.w	r3, r3, #31
 8002eb8:	2210      	movs	r2, #16
 8002eba:	409a      	lsls	r2, r3
 8002ebc:	6a3b      	ldr	r3, [r7, #32]
 8002ebe:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d018      	beq.n	8002f00 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d108      	bne.n	8002eee <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d024      	beq.n	8002f2e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ee8:	6878      	ldr	r0, [r7, #4]
 8002eea:	4798      	blx	r3
 8002eec:	e01f      	b.n	8002f2e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d01b      	beq.n	8002f2e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002efa:	6878      	ldr	r0, [r7, #4]
 8002efc:	4798      	blx	r3
 8002efe:	e016      	b.n	8002f2e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d107      	bne.n	8002f1e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	681a      	ldr	r2, [r3, #0]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f022 0208 	bic.w	r2, r2, #8
 8002f1c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d003      	beq.n	8002f2e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f2a:	6878      	ldr	r0, [r7, #4]
 8002f2c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f32:	f003 031f 	and.w	r3, r3, #31
 8002f36:	2220      	movs	r2, #32
 8002f38:	409a      	lsls	r2, r3
 8002f3a:	69bb      	ldr	r3, [r7, #24]
 8002f3c:	4013      	ands	r3, r2
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	f000 8110 	beq.w	8003164 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a2c      	ldr	r2, [pc, #176]	@ (8002ffc <HAL_DMA_IRQHandler+0x690>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d04a      	beq.n	8002fe4 <HAL_DMA_IRQHandler+0x678>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a2b      	ldr	r2, [pc, #172]	@ (8003000 <HAL_DMA_IRQHandler+0x694>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d045      	beq.n	8002fe4 <HAL_DMA_IRQHandler+0x678>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a29      	ldr	r2, [pc, #164]	@ (8003004 <HAL_DMA_IRQHandler+0x698>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d040      	beq.n	8002fe4 <HAL_DMA_IRQHandler+0x678>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a28      	ldr	r2, [pc, #160]	@ (8003008 <HAL_DMA_IRQHandler+0x69c>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d03b      	beq.n	8002fe4 <HAL_DMA_IRQHandler+0x678>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a26      	ldr	r2, [pc, #152]	@ (800300c <HAL_DMA_IRQHandler+0x6a0>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d036      	beq.n	8002fe4 <HAL_DMA_IRQHandler+0x678>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a25      	ldr	r2, [pc, #148]	@ (8003010 <HAL_DMA_IRQHandler+0x6a4>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d031      	beq.n	8002fe4 <HAL_DMA_IRQHandler+0x678>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a23      	ldr	r2, [pc, #140]	@ (8003014 <HAL_DMA_IRQHandler+0x6a8>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d02c      	beq.n	8002fe4 <HAL_DMA_IRQHandler+0x678>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a22      	ldr	r2, [pc, #136]	@ (8003018 <HAL_DMA_IRQHandler+0x6ac>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d027      	beq.n	8002fe4 <HAL_DMA_IRQHandler+0x678>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a20      	ldr	r2, [pc, #128]	@ (800301c <HAL_DMA_IRQHandler+0x6b0>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d022      	beq.n	8002fe4 <HAL_DMA_IRQHandler+0x678>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a1f      	ldr	r2, [pc, #124]	@ (8003020 <HAL_DMA_IRQHandler+0x6b4>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d01d      	beq.n	8002fe4 <HAL_DMA_IRQHandler+0x678>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a1d      	ldr	r2, [pc, #116]	@ (8003024 <HAL_DMA_IRQHandler+0x6b8>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d018      	beq.n	8002fe4 <HAL_DMA_IRQHandler+0x678>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a1c      	ldr	r2, [pc, #112]	@ (8003028 <HAL_DMA_IRQHandler+0x6bc>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d013      	beq.n	8002fe4 <HAL_DMA_IRQHandler+0x678>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a1a      	ldr	r2, [pc, #104]	@ (800302c <HAL_DMA_IRQHandler+0x6c0>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d00e      	beq.n	8002fe4 <HAL_DMA_IRQHandler+0x678>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a19      	ldr	r2, [pc, #100]	@ (8003030 <HAL_DMA_IRQHandler+0x6c4>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d009      	beq.n	8002fe4 <HAL_DMA_IRQHandler+0x678>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a17      	ldr	r2, [pc, #92]	@ (8003034 <HAL_DMA_IRQHandler+0x6c8>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d004      	beq.n	8002fe4 <HAL_DMA_IRQHandler+0x678>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a16      	ldr	r2, [pc, #88]	@ (8003038 <HAL_DMA_IRQHandler+0x6cc>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d12b      	bne.n	800303c <HAL_DMA_IRQHandler+0x6d0>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f003 0310 	and.w	r3, r3, #16
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	bf14      	ite	ne
 8002ff2:	2301      	movne	r3, #1
 8002ff4:	2300      	moveq	r3, #0
 8002ff6:	b2db      	uxtb	r3, r3
 8002ff8:	e02a      	b.n	8003050 <HAL_DMA_IRQHandler+0x6e4>
 8002ffa:	bf00      	nop
 8002ffc:	40020010 	.word	0x40020010
 8003000:	40020028 	.word	0x40020028
 8003004:	40020040 	.word	0x40020040
 8003008:	40020058 	.word	0x40020058
 800300c:	40020070 	.word	0x40020070
 8003010:	40020088 	.word	0x40020088
 8003014:	400200a0 	.word	0x400200a0
 8003018:	400200b8 	.word	0x400200b8
 800301c:	40020410 	.word	0x40020410
 8003020:	40020428 	.word	0x40020428
 8003024:	40020440 	.word	0x40020440
 8003028:	40020458 	.word	0x40020458
 800302c:	40020470 	.word	0x40020470
 8003030:	40020488 	.word	0x40020488
 8003034:	400204a0 	.word	0x400204a0
 8003038:	400204b8 	.word	0x400204b8
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f003 0302 	and.w	r3, r3, #2
 8003046:	2b00      	cmp	r3, #0
 8003048:	bf14      	ite	ne
 800304a:	2301      	movne	r3, #1
 800304c:	2300      	moveq	r3, #0
 800304e:	b2db      	uxtb	r3, r3
 8003050:	2b00      	cmp	r3, #0
 8003052:	f000 8087 	beq.w	8003164 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800305a:	f003 031f 	and.w	r3, r3, #31
 800305e:	2220      	movs	r2, #32
 8003060:	409a      	lsls	r2, r3
 8003062:	6a3b      	ldr	r3, [r7, #32]
 8003064:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800306c:	b2db      	uxtb	r3, r3
 800306e:	2b04      	cmp	r3, #4
 8003070:	d139      	bne.n	80030e6 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	681a      	ldr	r2, [r3, #0]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f022 0216 	bic.w	r2, r2, #22
 8003080:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	695a      	ldr	r2, [r3, #20]
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003090:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003096:	2b00      	cmp	r3, #0
 8003098:	d103      	bne.n	80030a2 <HAL_DMA_IRQHandler+0x736>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d007      	beq.n	80030b2 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	681a      	ldr	r2, [r3, #0]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f022 0208 	bic.w	r2, r2, #8
 80030b0:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030b6:	f003 031f 	and.w	r3, r3, #31
 80030ba:	223f      	movs	r2, #63	@ 0x3f
 80030bc:	409a      	lsls	r2, r3
 80030be:	6a3b      	ldr	r3, [r7, #32]
 80030c0:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2201      	movs	r2, #1
 80030c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2200      	movs	r2, #0
 80030ce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	f000 834a 	beq.w	8003770 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80030e0:	6878      	ldr	r0, [r7, #4]
 80030e2:	4798      	blx	r3
          }
          return;
 80030e4:	e344      	b.n	8003770 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d018      	beq.n	8003126 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d108      	bne.n	8003114 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003106:	2b00      	cmp	r3, #0
 8003108:	d02c      	beq.n	8003164 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	4798      	blx	r3
 8003112:	e027      	b.n	8003164 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003118:	2b00      	cmp	r3, #0
 800311a:	d023      	beq.n	8003164 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003120:	6878      	ldr	r0, [r7, #4]
 8003122:	4798      	blx	r3
 8003124:	e01e      	b.n	8003164 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003130:	2b00      	cmp	r3, #0
 8003132:	d10f      	bne.n	8003154 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	681a      	ldr	r2, [r3, #0]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f022 0210 	bic.w	r2, r2, #16
 8003142:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2201      	movs	r2, #1
 8003148:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2200      	movs	r2, #0
 8003150:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003158:	2b00      	cmp	r3, #0
 800315a:	d003      	beq.n	8003164 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003160:	6878      	ldr	r0, [r7, #4]
 8003162:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003168:	2b00      	cmp	r3, #0
 800316a:	f000 8306 	beq.w	800377a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003172:	f003 0301 	and.w	r3, r3, #1
 8003176:	2b00      	cmp	r3, #0
 8003178:	f000 8088 	beq.w	800328c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2204      	movs	r2, #4
 8003180:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a7a      	ldr	r2, [pc, #488]	@ (8003374 <HAL_DMA_IRQHandler+0xa08>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d04a      	beq.n	8003224 <HAL_DMA_IRQHandler+0x8b8>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a79      	ldr	r2, [pc, #484]	@ (8003378 <HAL_DMA_IRQHandler+0xa0c>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d045      	beq.n	8003224 <HAL_DMA_IRQHandler+0x8b8>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a77      	ldr	r2, [pc, #476]	@ (800337c <HAL_DMA_IRQHandler+0xa10>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d040      	beq.n	8003224 <HAL_DMA_IRQHandler+0x8b8>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a76      	ldr	r2, [pc, #472]	@ (8003380 <HAL_DMA_IRQHandler+0xa14>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d03b      	beq.n	8003224 <HAL_DMA_IRQHandler+0x8b8>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a74      	ldr	r2, [pc, #464]	@ (8003384 <HAL_DMA_IRQHandler+0xa18>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d036      	beq.n	8003224 <HAL_DMA_IRQHandler+0x8b8>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a73      	ldr	r2, [pc, #460]	@ (8003388 <HAL_DMA_IRQHandler+0xa1c>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d031      	beq.n	8003224 <HAL_DMA_IRQHandler+0x8b8>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a71      	ldr	r2, [pc, #452]	@ (800338c <HAL_DMA_IRQHandler+0xa20>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d02c      	beq.n	8003224 <HAL_DMA_IRQHandler+0x8b8>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a70      	ldr	r2, [pc, #448]	@ (8003390 <HAL_DMA_IRQHandler+0xa24>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d027      	beq.n	8003224 <HAL_DMA_IRQHandler+0x8b8>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a6e      	ldr	r2, [pc, #440]	@ (8003394 <HAL_DMA_IRQHandler+0xa28>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d022      	beq.n	8003224 <HAL_DMA_IRQHandler+0x8b8>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a6d      	ldr	r2, [pc, #436]	@ (8003398 <HAL_DMA_IRQHandler+0xa2c>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d01d      	beq.n	8003224 <HAL_DMA_IRQHandler+0x8b8>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a6b      	ldr	r2, [pc, #428]	@ (800339c <HAL_DMA_IRQHandler+0xa30>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d018      	beq.n	8003224 <HAL_DMA_IRQHandler+0x8b8>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a6a      	ldr	r2, [pc, #424]	@ (80033a0 <HAL_DMA_IRQHandler+0xa34>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d013      	beq.n	8003224 <HAL_DMA_IRQHandler+0x8b8>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a68      	ldr	r2, [pc, #416]	@ (80033a4 <HAL_DMA_IRQHandler+0xa38>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d00e      	beq.n	8003224 <HAL_DMA_IRQHandler+0x8b8>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a67      	ldr	r2, [pc, #412]	@ (80033a8 <HAL_DMA_IRQHandler+0xa3c>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d009      	beq.n	8003224 <HAL_DMA_IRQHandler+0x8b8>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a65      	ldr	r2, [pc, #404]	@ (80033ac <HAL_DMA_IRQHandler+0xa40>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d004      	beq.n	8003224 <HAL_DMA_IRQHandler+0x8b8>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a64      	ldr	r2, [pc, #400]	@ (80033b0 <HAL_DMA_IRQHandler+0xa44>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d108      	bne.n	8003236 <HAL_DMA_IRQHandler+0x8ca>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	681a      	ldr	r2, [r3, #0]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f022 0201 	bic.w	r2, r2, #1
 8003232:	601a      	str	r2, [r3, #0]
 8003234:	e007      	b.n	8003246 <HAL_DMA_IRQHandler+0x8da>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	681a      	ldr	r2, [r3, #0]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f022 0201 	bic.w	r2, r2, #1
 8003244:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	3301      	adds	r3, #1
 800324a:	60fb      	str	r3, [r7, #12]
 800324c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800324e:	429a      	cmp	r2, r3
 8003250:	d307      	bcc.n	8003262 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f003 0301 	and.w	r3, r3, #1
 800325c:	2b00      	cmp	r3, #0
 800325e:	d1f2      	bne.n	8003246 <HAL_DMA_IRQHandler+0x8da>
 8003260:	e000      	b.n	8003264 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8003262:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f003 0301 	and.w	r3, r3, #1
 800326e:	2b00      	cmp	r3, #0
 8003270:	d004      	beq.n	800327c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2203      	movs	r2, #3
 8003276:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800327a:	e003      	b.n	8003284 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2201      	movs	r2, #1
 8003280:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2200      	movs	r2, #0
 8003288:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003290:	2b00      	cmp	r3, #0
 8003292:	f000 8272 	beq.w	800377a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800329a:	6878      	ldr	r0, [r7, #4]
 800329c:	4798      	blx	r3
 800329e:	e26c      	b.n	800377a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a43      	ldr	r2, [pc, #268]	@ (80033b4 <HAL_DMA_IRQHandler+0xa48>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d022      	beq.n	80032f0 <HAL_DMA_IRQHandler+0x984>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a42      	ldr	r2, [pc, #264]	@ (80033b8 <HAL_DMA_IRQHandler+0xa4c>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d01d      	beq.n	80032f0 <HAL_DMA_IRQHandler+0x984>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a40      	ldr	r2, [pc, #256]	@ (80033bc <HAL_DMA_IRQHandler+0xa50>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d018      	beq.n	80032f0 <HAL_DMA_IRQHandler+0x984>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a3f      	ldr	r2, [pc, #252]	@ (80033c0 <HAL_DMA_IRQHandler+0xa54>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d013      	beq.n	80032f0 <HAL_DMA_IRQHandler+0x984>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a3d      	ldr	r2, [pc, #244]	@ (80033c4 <HAL_DMA_IRQHandler+0xa58>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d00e      	beq.n	80032f0 <HAL_DMA_IRQHandler+0x984>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a3c      	ldr	r2, [pc, #240]	@ (80033c8 <HAL_DMA_IRQHandler+0xa5c>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d009      	beq.n	80032f0 <HAL_DMA_IRQHandler+0x984>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a3a      	ldr	r2, [pc, #232]	@ (80033cc <HAL_DMA_IRQHandler+0xa60>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d004      	beq.n	80032f0 <HAL_DMA_IRQHandler+0x984>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a39      	ldr	r2, [pc, #228]	@ (80033d0 <HAL_DMA_IRQHandler+0xa64>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d101      	bne.n	80032f4 <HAL_DMA_IRQHandler+0x988>
 80032f0:	2301      	movs	r3, #1
 80032f2:	e000      	b.n	80032f6 <HAL_DMA_IRQHandler+0x98a>
 80032f4:	2300      	movs	r3, #0
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	f000 823f 	beq.w	800377a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003308:	f003 031f 	and.w	r3, r3, #31
 800330c:	2204      	movs	r2, #4
 800330e:	409a      	lsls	r2, r3
 8003310:	697b      	ldr	r3, [r7, #20]
 8003312:	4013      	ands	r3, r2
 8003314:	2b00      	cmp	r3, #0
 8003316:	f000 80cd 	beq.w	80034b4 <HAL_DMA_IRQHandler+0xb48>
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	f003 0304 	and.w	r3, r3, #4
 8003320:	2b00      	cmp	r3, #0
 8003322:	f000 80c7 	beq.w	80034b4 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800332a:	f003 031f 	and.w	r3, r3, #31
 800332e:	2204      	movs	r2, #4
 8003330:	409a      	lsls	r2, r3
 8003332:	69fb      	ldr	r3, [r7, #28]
 8003334:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800333c:	2b00      	cmp	r3, #0
 800333e:	d049      	beq.n	80033d4 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003340:	693b      	ldr	r3, [r7, #16]
 8003342:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003346:	2b00      	cmp	r3, #0
 8003348:	d109      	bne.n	800335e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800334e:	2b00      	cmp	r3, #0
 8003350:	f000 8210 	beq.w	8003774 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003358:	6878      	ldr	r0, [r7, #4]
 800335a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800335c:	e20a      	b.n	8003774 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003362:	2b00      	cmp	r3, #0
 8003364:	f000 8206 	beq.w	8003774 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800336c:	6878      	ldr	r0, [r7, #4]
 800336e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003370:	e200      	b.n	8003774 <HAL_DMA_IRQHandler+0xe08>
 8003372:	bf00      	nop
 8003374:	40020010 	.word	0x40020010
 8003378:	40020028 	.word	0x40020028
 800337c:	40020040 	.word	0x40020040
 8003380:	40020058 	.word	0x40020058
 8003384:	40020070 	.word	0x40020070
 8003388:	40020088 	.word	0x40020088
 800338c:	400200a0 	.word	0x400200a0
 8003390:	400200b8 	.word	0x400200b8
 8003394:	40020410 	.word	0x40020410
 8003398:	40020428 	.word	0x40020428
 800339c:	40020440 	.word	0x40020440
 80033a0:	40020458 	.word	0x40020458
 80033a4:	40020470 	.word	0x40020470
 80033a8:	40020488 	.word	0x40020488
 80033ac:	400204a0 	.word	0x400204a0
 80033b0:	400204b8 	.word	0x400204b8
 80033b4:	58025408 	.word	0x58025408
 80033b8:	5802541c 	.word	0x5802541c
 80033bc:	58025430 	.word	0x58025430
 80033c0:	58025444 	.word	0x58025444
 80033c4:	58025458 	.word	0x58025458
 80033c8:	5802546c 	.word	0x5802546c
 80033cc:	58025480 	.word	0x58025480
 80033d0:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80033d4:	693b      	ldr	r3, [r7, #16]
 80033d6:	f003 0320 	and.w	r3, r3, #32
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d160      	bne.n	80034a0 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a7f      	ldr	r2, [pc, #508]	@ (80035e0 <HAL_DMA_IRQHandler+0xc74>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d04a      	beq.n	800347e <HAL_DMA_IRQHandler+0xb12>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a7d      	ldr	r2, [pc, #500]	@ (80035e4 <HAL_DMA_IRQHandler+0xc78>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d045      	beq.n	800347e <HAL_DMA_IRQHandler+0xb12>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a7c      	ldr	r2, [pc, #496]	@ (80035e8 <HAL_DMA_IRQHandler+0xc7c>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d040      	beq.n	800347e <HAL_DMA_IRQHandler+0xb12>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a7a      	ldr	r2, [pc, #488]	@ (80035ec <HAL_DMA_IRQHandler+0xc80>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d03b      	beq.n	800347e <HAL_DMA_IRQHandler+0xb12>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a79      	ldr	r2, [pc, #484]	@ (80035f0 <HAL_DMA_IRQHandler+0xc84>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d036      	beq.n	800347e <HAL_DMA_IRQHandler+0xb12>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a77      	ldr	r2, [pc, #476]	@ (80035f4 <HAL_DMA_IRQHandler+0xc88>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d031      	beq.n	800347e <HAL_DMA_IRQHandler+0xb12>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a76      	ldr	r2, [pc, #472]	@ (80035f8 <HAL_DMA_IRQHandler+0xc8c>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d02c      	beq.n	800347e <HAL_DMA_IRQHandler+0xb12>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a74      	ldr	r2, [pc, #464]	@ (80035fc <HAL_DMA_IRQHandler+0xc90>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d027      	beq.n	800347e <HAL_DMA_IRQHandler+0xb12>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a73      	ldr	r2, [pc, #460]	@ (8003600 <HAL_DMA_IRQHandler+0xc94>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d022      	beq.n	800347e <HAL_DMA_IRQHandler+0xb12>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a71      	ldr	r2, [pc, #452]	@ (8003604 <HAL_DMA_IRQHandler+0xc98>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d01d      	beq.n	800347e <HAL_DMA_IRQHandler+0xb12>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a70      	ldr	r2, [pc, #448]	@ (8003608 <HAL_DMA_IRQHandler+0xc9c>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d018      	beq.n	800347e <HAL_DMA_IRQHandler+0xb12>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a6e      	ldr	r2, [pc, #440]	@ (800360c <HAL_DMA_IRQHandler+0xca0>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d013      	beq.n	800347e <HAL_DMA_IRQHandler+0xb12>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a6d      	ldr	r2, [pc, #436]	@ (8003610 <HAL_DMA_IRQHandler+0xca4>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d00e      	beq.n	800347e <HAL_DMA_IRQHandler+0xb12>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a6b      	ldr	r2, [pc, #428]	@ (8003614 <HAL_DMA_IRQHandler+0xca8>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d009      	beq.n	800347e <HAL_DMA_IRQHandler+0xb12>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a6a      	ldr	r2, [pc, #424]	@ (8003618 <HAL_DMA_IRQHandler+0xcac>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d004      	beq.n	800347e <HAL_DMA_IRQHandler+0xb12>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a68      	ldr	r2, [pc, #416]	@ (800361c <HAL_DMA_IRQHandler+0xcb0>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d108      	bne.n	8003490 <HAL_DMA_IRQHandler+0xb24>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	681a      	ldr	r2, [r3, #0]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f022 0208 	bic.w	r2, r2, #8
 800348c:	601a      	str	r2, [r3, #0]
 800348e:	e007      	b.n	80034a0 <HAL_DMA_IRQHandler+0xb34>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	681a      	ldr	r2, [r3, #0]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f022 0204 	bic.w	r2, r2, #4
 800349e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	f000 8165 	beq.w	8003774 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034ae:	6878      	ldr	r0, [r7, #4]
 80034b0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80034b2:	e15f      	b.n	8003774 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034b8:	f003 031f 	and.w	r3, r3, #31
 80034bc:	2202      	movs	r2, #2
 80034be:	409a      	lsls	r2, r3
 80034c0:	697b      	ldr	r3, [r7, #20]
 80034c2:	4013      	ands	r3, r2
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	f000 80c5 	beq.w	8003654 <HAL_DMA_IRQHandler+0xce8>
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	f003 0302 	and.w	r3, r3, #2
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	f000 80bf 	beq.w	8003654 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034da:	f003 031f 	and.w	r3, r3, #31
 80034de:	2202      	movs	r2, #2
 80034e0:	409a      	lsls	r2, r3
 80034e2:	69fb      	ldr	r3, [r7, #28]
 80034e4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80034e6:	693b      	ldr	r3, [r7, #16]
 80034e8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d018      	beq.n	8003522 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80034f0:	693b      	ldr	r3, [r7, #16]
 80034f2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d109      	bne.n	800350e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034fe:	2b00      	cmp	r3, #0
 8003500:	f000 813a 	beq.w	8003778 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003508:	6878      	ldr	r0, [r7, #4]
 800350a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800350c:	e134      	b.n	8003778 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003512:	2b00      	cmp	r3, #0
 8003514:	f000 8130 	beq.w	8003778 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800351c:	6878      	ldr	r0, [r7, #4]
 800351e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003520:	e12a      	b.n	8003778 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003522:	693b      	ldr	r3, [r7, #16]
 8003524:	f003 0320 	and.w	r3, r3, #32
 8003528:	2b00      	cmp	r3, #0
 800352a:	f040 8089 	bne.w	8003640 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a2b      	ldr	r2, [pc, #172]	@ (80035e0 <HAL_DMA_IRQHandler+0xc74>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d04a      	beq.n	80035ce <HAL_DMA_IRQHandler+0xc62>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a29      	ldr	r2, [pc, #164]	@ (80035e4 <HAL_DMA_IRQHandler+0xc78>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d045      	beq.n	80035ce <HAL_DMA_IRQHandler+0xc62>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a28      	ldr	r2, [pc, #160]	@ (80035e8 <HAL_DMA_IRQHandler+0xc7c>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d040      	beq.n	80035ce <HAL_DMA_IRQHandler+0xc62>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a26      	ldr	r2, [pc, #152]	@ (80035ec <HAL_DMA_IRQHandler+0xc80>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d03b      	beq.n	80035ce <HAL_DMA_IRQHandler+0xc62>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a25      	ldr	r2, [pc, #148]	@ (80035f0 <HAL_DMA_IRQHandler+0xc84>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d036      	beq.n	80035ce <HAL_DMA_IRQHandler+0xc62>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a23      	ldr	r2, [pc, #140]	@ (80035f4 <HAL_DMA_IRQHandler+0xc88>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d031      	beq.n	80035ce <HAL_DMA_IRQHandler+0xc62>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a22      	ldr	r2, [pc, #136]	@ (80035f8 <HAL_DMA_IRQHandler+0xc8c>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d02c      	beq.n	80035ce <HAL_DMA_IRQHandler+0xc62>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a20      	ldr	r2, [pc, #128]	@ (80035fc <HAL_DMA_IRQHandler+0xc90>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d027      	beq.n	80035ce <HAL_DMA_IRQHandler+0xc62>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a1f      	ldr	r2, [pc, #124]	@ (8003600 <HAL_DMA_IRQHandler+0xc94>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d022      	beq.n	80035ce <HAL_DMA_IRQHandler+0xc62>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a1d      	ldr	r2, [pc, #116]	@ (8003604 <HAL_DMA_IRQHandler+0xc98>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d01d      	beq.n	80035ce <HAL_DMA_IRQHandler+0xc62>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a1c      	ldr	r2, [pc, #112]	@ (8003608 <HAL_DMA_IRQHandler+0xc9c>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d018      	beq.n	80035ce <HAL_DMA_IRQHandler+0xc62>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a1a      	ldr	r2, [pc, #104]	@ (800360c <HAL_DMA_IRQHandler+0xca0>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d013      	beq.n	80035ce <HAL_DMA_IRQHandler+0xc62>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a19      	ldr	r2, [pc, #100]	@ (8003610 <HAL_DMA_IRQHandler+0xca4>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d00e      	beq.n	80035ce <HAL_DMA_IRQHandler+0xc62>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a17      	ldr	r2, [pc, #92]	@ (8003614 <HAL_DMA_IRQHandler+0xca8>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d009      	beq.n	80035ce <HAL_DMA_IRQHandler+0xc62>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a16      	ldr	r2, [pc, #88]	@ (8003618 <HAL_DMA_IRQHandler+0xcac>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d004      	beq.n	80035ce <HAL_DMA_IRQHandler+0xc62>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a14      	ldr	r2, [pc, #80]	@ (800361c <HAL_DMA_IRQHandler+0xcb0>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d128      	bne.n	8003620 <HAL_DMA_IRQHandler+0xcb4>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	681a      	ldr	r2, [r3, #0]
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f022 0214 	bic.w	r2, r2, #20
 80035dc:	601a      	str	r2, [r3, #0]
 80035de:	e027      	b.n	8003630 <HAL_DMA_IRQHandler+0xcc4>
 80035e0:	40020010 	.word	0x40020010
 80035e4:	40020028 	.word	0x40020028
 80035e8:	40020040 	.word	0x40020040
 80035ec:	40020058 	.word	0x40020058
 80035f0:	40020070 	.word	0x40020070
 80035f4:	40020088 	.word	0x40020088
 80035f8:	400200a0 	.word	0x400200a0
 80035fc:	400200b8 	.word	0x400200b8
 8003600:	40020410 	.word	0x40020410
 8003604:	40020428 	.word	0x40020428
 8003608:	40020440 	.word	0x40020440
 800360c:	40020458 	.word	0x40020458
 8003610:	40020470 	.word	0x40020470
 8003614:	40020488 	.word	0x40020488
 8003618:	400204a0 	.word	0x400204a0
 800361c:	400204b8 	.word	0x400204b8
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	681a      	ldr	r2, [r3, #0]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f022 020a 	bic.w	r2, r2, #10
 800362e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2201      	movs	r2, #1
 8003634:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2200      	movs	r2, #0
 800363c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003644:	2b00      	cmp	r3, #0
 8003646:	f000 8097 	beq.w	8003778 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800364e:	6878      	ldr	r0, [r7, #4]
 8003650:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003652:	e091      	b.n	8003778 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003658:	f003 031f 	and.w	r3, r3, #31
 800365c:	2208      	movs	r2, #8
 800365e:	409a      	lsls	r2, r3
 8003660:	697b      	ldr	r3, [r7, #20]
 8003662:	4013      	ands	r3, r2
 8003664:	2b00      	cmp	r3, #0
 8003666:	f000 8088 	beq.w	800377a <HAL_DMA_IRQHandler+0xe0e>
 800366a:	693b      	ldr	r3, [r7, #16]
 800366c:	f003 0308 	and.w	r3, r3, #8
 8003670:	2b00      	cmp	r3, #0
 8003672:	f000 8082 	beq.w	800377a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a41      	ldr	r2, [pc, #260]	@ (8003780 <HAL_DMA_IRQHandler+0xe14>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d04a      	beq.n	8003716 <HAL_DMA_IRQHandler+0xdaa>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a3f      	ldr	r2, [pc, #252]	@ (8003784 <HAL_DMA_IRQHandler+0xe18>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d045      	beq.n	8003716 <HAL_DMA_IRQHandler+0xdaa>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a3e      	ldr	r2, [pc, #248]	@ (8003788 <HAL_DMA_IRQHandler+0xe1c>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d040      	beq.n	8003716 <HAL_DMA_IRQHandler+0xdaa>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a3c      	ldr	r2, [pc, #240]	@ (800378c <HAL_DMA_IRQHandler+0xe20>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d03b      	beq.n	8003716 <HAL_DMA_IRQHandler+0xdaa>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a3b      	ldr	r2, [pc, #236]	@ (8003790 <HAL_DMA_IRQHandler+0xe24>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d036      	beq.n	8003716 <HAL_DMA_IRQHandler+0xdaa>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a39      	ldr	r2, [pc, #228]	@ (8003794 <HAL_DMA_IRQHandler+0xe28>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d031      	beq.n	8003716 <HAL_DMA_IRQHandler+0xdaa>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4a38      	ldr	r2, [pc, #224]	@ (8003798 <HAL_DMA_IRQHandler+0xe2c>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d02c      	beq.n	8003716 <HAL_DMA_IRQHandler+0xdaa>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a36      	ldr	r2, [pc, #216]	@ (800379c <HAL_DMA_IRQHandler+0xe30>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d027      	beq.n	8003716 <HAL_DMA_IRQHandler+0xdaa>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4a35      	ldr	r2, [pc, #212]	@ (80037a0 <HAL_DMA_IRQHandler+0xe34>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d022      	beq.n	8003716 <HAL_DMA_IRQHandler+0xdaa>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a33      	ldr	r2, [pc, #204]	@ (80037a4 <HAL_DMA_IRQHandler+0xe38>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d01d      	beq.n	8003716 <HAL_DMA_IRQHandler+0xdaa>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4a32      	ldr	r2, [pc, #200]	@ (80037a8 <HAL_DMA_IRQHandler+0xe3c>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d018      	beq.n	8003716 <HAL_DMA_IRQHandler+0xdaa>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a30      	ldr	r2, [pc, #192]	@ (80037ac <HAL_DMA_IRQHandler+0xe40>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d013      	beq.n	8003716 <HAL_DMA_IRQHandler+0xdaa>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a2f      	ldr	r2, [pc, #188]	@ (80037b0 <HAL_DMA_IRQHandler+0xe44>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d00e      	beq.n	8003716 <HAL_DMA_IRQHandler+0xdaa>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a2d      	ldr	r2, [pc, #180]	@ (80037b4 <HAL_DMA_IRQHandler+0xe48>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d009      	beq.n	8003716 <HAL_DMA_IRQHandler+0xdaa>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a2c      	ldr	r2, [pc, #176]	@ (80037b8 <HAL_DMA_IRQHandler+0xe4c>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d004      	beq.n	8003716 <HAL_DMA_IRQHandler+0xdaa>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a2a      	ldr	r2, [pc, #168]	@ (80037bc <HAL_DMA_IRQHandler+0xe50>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d108      	bne.n	8003728 <HAL_DMA_IRQHandler+0xdbc>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	681a      	ldr	r2, [r3, #0]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f022 021c 	bic.w	r2, r2, #28
 8003724:	601a      	str	r2, [r3, #0]
 8003726:	e007      	b.n	8003738 <HAL_DMA_IRQHandler+0xdcc>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	681a      	ldr	r2, [r3, #0]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f022 020e 	bic.w	r2, r2, #14
 8003736:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800373c:	f003 031f 	and.w	r3, r3, #31
 8003740:	2201      	movs	r2, #1
 8003742:	409a      	lsls	r2, r3
 8003744:	69fb      	ldr	r3, [r7, #28]
 8003746:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2201      	movs	r2, #1
 800374c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2201      	movs	r2, #1
 8003752:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2200      	movs	r2, #0
 800375a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003762:	2b00      	cmp	r3, #0
 8003764:	d009      	beq.n	800377a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800376a:	6878      	ldr	r0, [r7, #4]
 800376c:	4798      	blx	r3
 800376e:	e004      	b.n	800377a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8003770:	bf00      	nop
 8003772:	e002      	b.n	800377a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003774:	bf00      	nop
 8003776:	e000      	b.n	800377a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003778:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800377a:	3728      	adds	r7, #40	@ 0x28
 800377c:	46bd      	mov	sp, r7
 800377e:	bd80      	pop	{r7, pc}
 8003780:	40020010 	.word	0x40020010
 8003784:	40020028 	.word	0x40020028
 8003788:	40020040 	.word	0x40020040
 800378c:	40020058 	.word	0x40020058
 8003790:	40020070 	.word	0x40020070
 8003794:	40020088 	.word	0x40020088
 8003798:	400200a0 	.word	0x400200a0
 800379c:	400200b8 	.word	0x400200b8
 80037a0:	40020410 	.word	0x40020410
 80037a4:	40020428 	.word	0x40020428
 80037a8:	40020440 	.word	0x40020440
 80037ac:	40020458 	.word	0x40020458
 80037b0:	40020470 	.word	0x40020470
 80037b4:	40020488 	.word	0x40020488
 80037b8:	400204a0 	.word	0x400204a0
 80037bc:	400204b8 	.word	0x400204b8

080037c0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80037c0:	b480      	push	{r7}
 80037c2:	b087      	sub	sp, #28
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	60f8      	str	r0, [r7, #12]
 80037c8:	60b9      	str	r1, [r7, #8]
 80037ca:	607a      	str	r2, [r7, #4]
 80037cc:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037d2:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037d8:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4a7f      	ldr	r2, [pc, #508]	@ (80039dc <DMA_SetConfig+0x21c>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d072      	beq.n	80038ca <DMA_SetConfig+0x10a>
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a7d      	ldr	r2, [pc, #500]	@ (80039e0 <DMA_SetConfig+0x220>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d06d      	beq.n	80038ca <DMA_SetConfig+0x10a>
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a7c      	ldr	r2, [pc, #496]	@ (80039e4 <DMA_SetConfig+0x224>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d068      	beq.n	80038ca <DMA_SetConfig+0x10a>
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a7a      	ldr	r2, [pc, #488]	@ (80039e8 <DMA_SetConfig+0x228>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d063      	beq.n	80038ca <DMA_SetConfig+0x10a>
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4a79      	ldr	r2, [pc, #484]	@ (80039ec <DMA_SetConfig+0x22c>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d05e      	beq.n	80038ca <DMA_SetConfig+0x10a>
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a77      	ldr	r2, [pc, #476]	@ (80039f0 <DMA_SetConfig+0x230>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d059      	beq.n	80038ca <DMA_SetConfig+0x10a>
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4a76      	ldr	r2, [pc, #472]	@ (80039f4 <DMA_SetConfig+0x234>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d054      	beq.n	80038ca <DMA_SetConfig+0x10a>
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a74      	ldr	r2, [pc, #464]	@ (80039f8 <DMA_SetConfig+0x238>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d04f      	beq.n	80038ca <DMA_SetConfig+0x10a>
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a73      	ldr	r2, [pc, #460]	@ (80039fc <DMA_SetConfig+0x23c>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d04a      	beq.n	80038ca <DMA_SetConfig+0x10a>
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a71      	ldr	r2, [pc, #452]	@ (8003a00 <DMA_SetConfig+0x240>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d045      	beq.n	80038ca <DMA_SetConfig+0x10a>
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4a70      	ldr	r2, [pc, #448]	@ (8003a04 <DMA_SetConfig+0x244>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d040      	beq.n	80038ca <DMA_SetConfig+0x10a>
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a6e      	ldr	r2, [pc, #440]	@ (8003a08 <DMA_SetConfig+0x248>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d03b      	beq.n	80038ca <DMA_SetConfig+0x10a>
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a6d      	ldr	r2, [pc, #436]	@ (8003a0c <DMA_SetConfig+0x24c>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d036      	beq.n	80038ca <DMA_SetConfig+0x10a>
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a6b      	ldr	r2, [pc, #428]	@ (8003a10 <DMA_SetConfig+0x250>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d031      	beq.n	80038ca <DMA_SetConfig+0x10a>
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a6a      	ldr	r2, [pc, #424]	@ (8003a14 <DMA_SetConfig+0x254>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d02c      	beq.n	80038ca <DMA_SetConfig+0x10a>
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a68      	ldr	r2, [pc, #416]	@ (8003a18 <DMA_SetConfig+0x258>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d027      	beq.n	80038ca <DMA_SetConfig+0x10a>
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a67      	ldr	r2, [pc, #412]	@ (8003a1c <DMA_SetConfig+0x25c>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d022      	beq.n	80038ca <DMA_SetConfig+0x10a>
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a65      	ldr	r2, [pc, #404]	@ (8003a20 <DMA_SetConfig+0x260>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d01d      	beq.n	80038ca <DMA_SetConfig+0x10a>
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a64      	ldr	r2, [pc, #400]	@ (8003a24 <DMA_SetConfig+0x264>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d018      	beq.n	80038ca <DMA_SetConfig+0x10a>
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a62      	ldr	r2, [pc, #392]	@ (8003a28 <DMA_SetConfig+0x268>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d013      	beq.n	80038ca <DMA_SetConfig+0x10a>
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4a61      	ldr	r2, [pc, #388]	@ (8003a2c <DMA_SetConfig+0x26c>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d00e      	beq.n	80038ca <DMA_SetConfig+0x10a>
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a5f      	ldr	r2, [pc, #380]	@ (8003a30 <DMA_SetConfig+0x270>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d009      	beq.n	80038ca <DMA_SetConfig+0x10a>
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a5e      	ldr	r2, [pc, #376]	@ (8003a34 <DMA_SetConfig+0x274>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d004      	beq.n	80038ca <DMA_SetConfig+0x10a>
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a5c      	ldr	r2, [pc, #368]	@ (8003a38 <DMA_SetConfig+0x278>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d101      	bne.n	80038ce <DMA_SetConfig+0x10e>
 80038ca:	2301      	movs	r3, #1
 80038cc:	e000      	b.n	80038d0 <DMA_SetConfig+0x110>
 80038ce:	2300      	movs	r3, #0
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d00d      	beq.n	80038f0 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80038d8:	68fa      	ldr	r2, [r7, #12]
 80038da:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80038dc:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d004      	beq.n	80038f0 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038ea:	68fa      	ldr	r2, [r7, #12]
 80038ec:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80038ee:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a39      	ldr	r2, [pc, #228]	@ (80039dc <DMA_SetConfig+0x21c>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d04a      	beq.n	8003990 <DMA_SetConfig+0x1d0>
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4a38      	ldr	r2, [pc, #224]	@ (80039e0 <DMA_SetConfig+0x220>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d045      	beq.n	8003990 <DMA_SetConfig+0x1d0>
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a36      	ldr	r2, [pc, #216]	@ (80039e4 <DMA_SetConfig+0x224>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d040      	beq.n	8003990 <DMA_SetConfig+0x1d0>
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4a35      	ldr	r2, [pc, #212]	@ (80039e8 <DMA_SetConfig+0x228>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d03b      	beq.n	8003990 <DMA_SetConfig+0x1d0>
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a33      	ldr	r2, [pc, #204]	@ (80039ec <DMA_SetConfig+0x22c>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d036      	beq.n	8003990 <DMA_SetConfig+0x1d0>
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4a32      	ldr	r2, [pc, #200]	@ (80039f0 <DMA_SetConfig+0x230>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d031      	beq.n	8003990 <DMA_SetConfig+0x1d0>
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a30      	ldr	r2, [pc, #192]	@ (80039f4 <DMA_SetConfig+0x234>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d02c      	beq.n	8003990 <DMA_SetConfig+0x1d0>
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4a2f      	ldr	r2, [pc, #188]	@ (80039f8 <DMA_SetConfig+0x238>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d027      	beq.n	8003990 <DMA_SetConfig+0x1d0>
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a2d      	ldr	r2, [pc, #180]	@ (80039fc <DMA_SetConfig+0x23c>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d022      	beq.n	8003990 <DMA_SetConfig+0x1d0>
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4a2c      	ldr	r2, [pc, #176]	@ (8003a00 <DMA_SetConfig+0x240>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d01d      	beq.n	8003990 <DMA_SetConfig+0x1d0>
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a2a      	ldr	r2, [pc, #168]	@ (8003a04 <DMA_SetConfig+0x244>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d018      	beq.n	8003990 <DMA_SetConfig+0x1d0>
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a29      	ldr	r2, [pc, #164]	@ (8003a08 <DMA_SetConfig+0x248>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d013      	beq.n	8003990 <DMA_SetConfig+0x1d0>
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a27      	ldr	r2, [pc, #156]	@ (8003a0c <DMA_SetConfig+0x24c>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d00e      	beq.n	8003990 <DMA_SetConfig+0x1d0>
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a26      	ldr	r2, [pc, #152]	@ (8003a10 <DMA_SetConfig+0x250>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d009      	beq.n	8003990 <DMA_SetConfig+0x1d0>
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a24      	ldr	r2, [pc, #144]	@ (8003a14 <DMA_SetConfig+0x254>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d004      	beq.n	8003990 <DMA_SetConfig+0x1d0>
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a23      	ldr	r2, [pc, #140]	@ (8003a18 <DMA_SetConfig+0x258>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d101      	bne.n	8003994 <DMA_SetConfig+0x1d4>
 8003990:	2301      	movs	r3, #1
 8003992:	e000      	b.n	8003996 <DMA_SetConfig+0x1d6>
 8003994:	2300      	movs	r3, #0
 8003996:	2b00      	cmp	r3, #0
 8003998:	d059      	beq.n	8003a4e <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800399e:	f003 031f 	and.w	r3, r3, #31
 80039a2:	223f      	movs	r2, #63	@ 0x3f
 80039a4:	409a      	lsls	r2, r3
 80039a6:	697b      	ldr	r3, [r7, #20]
 80039a8:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	681a      	ldr	r2, [r3, #0]
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80039b8:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	683a      	ldr	r2, [r7, #0]
 80039c0:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	689b      	ldr	r3, [r3, #8]
 80039c6:	2b40      	cmp	r3, #64	@ 0x40
 80039c8:	d138      	bne.n	8003a3c <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	687a      	ldr	r2, [r7, #4]
 80039d0:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	68ba      	ldr	r2, [r7, #8]
 80039d8:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80039da:	e086      	b.n	8003aea <DMA_SetConfig+0x32a>
 80039dc:	40020010 	.word	0x40020010
 80039e0:	40020028 	.word	0x40020028
 80039e4:	40020040 	.word	0x40020040
 80039e8:	40020058 	.word	0x40020058
 80039ec:	40020070 	.word	0x40020070
 80039f0:	40020088 	.word	0x40020088
 80039f4:	400200a0 	.word	0x400200a0
 80039f8:	400200b8 	.word	0x400200b8
 80039fc:	40020410 	.word	0x40020410
 8003a00:	40020428 	.word	0x40020428
 8003a04:	40020440 	.word	0x40020440
 8003a08:	40020458 	.word	0x40020458
 8003a0c:	40020470 	.word	0x40020470
 8003a10:	40020488 	.word	0x40020488
 8003a14:	400204a0 	.word	0x400204a0
 8003a18:	400204b8 	.word	0x400204b8
 8003a1c:	58025408 	.word	0x58025408
 8003a20:	5802541c 	.word	0x5802541c
 8003a24:	58025430 	.word	0x58025430
 8003a28:	58025444 	.word	0x58025444
 8003a2c:	58025458 	.word	0x58025458
 8003a30:	5802546c 	.word	0x5802546c
 8003a34:	58025480 	.word	0x58025480
 8003a38:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	68ba      	ldr	r2, [r7, #8]
 8003a42:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	687a      	ldr	r2, [r7, #4]
 8003a4a:	60da      	str	r2, [r3, #12]
}
 8003a4c:	e04d      	b.n	8003aea <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4a29      	ldr	r2, [pc, #164]	@ (8003af8 <DMA_SetConfig+0x338>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d022      	beq.n	8003a9e <DMA_SetConfig+0x2de>
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a27      	ldr	r2, [pc, #156]	@ (8003afc <DMA_SetConfig+0x33c>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d01d      	beq.n	8003a9e <DMA_SetConfig+0x2de>
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a26      	ldr	r2, [pc, #152]	@ (8003b00 <DMA_SetConfig+0x340>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d018      	beq.n	8003a9e <DMA_SetConfig+0x2de>
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a24      	ldr	r2, [pc, #144]	@ (8003b04 <DMA_SetConfig+0x344>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d013      	beq.n	8003a9e <DMA_SetConfig+0x2de>
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a23      	ldr	r2, [pc, #140]	@ (8003b08 <DMA_SetConfig+0x348>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d00e      	beq.n	8003a9e <DMA_SetConfig+0x2de>
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4a21      	ldr	r2, [pc, #132]	@ (8003b0c <DMA_SetConfig+0x34c>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d009      	beq.n	8003a9e <DMA_SetConfig+0x2de>
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4a20      	ldr	r2, [pc, #128]	@ (8003b10 <DMA_SetConfig+0x350>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d004      	beq.n	8003a9e <DMA_SetConfig+0x2de>
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a1e      	ldr	r2, [pc, #120]	@ (8003b14 <DMA_SetConfig+0x354>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d101      	bne.n	8003aa2 <DMA_SetConfig+0x2e2>
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	e000      	b.n	8003aa4 <DMA_SetConfig+0x2e4>
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d020      	beq.n	8003aea <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003aac:	f003 031f 	and.w	r3, r3, #31
 8003ab0:	2201      	movs	r2, #1
 8003ab2:	409a      	lsls	r2, r3
 8003ab4:	693b      	ldr	r3, [r7, #16]
 8003ab6:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	683a      	ldr	r2, [r7, #0]
 8003abe:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	689b      	ldr	r3, [r3, #8]
 8003ac4:	2b40      	cmp	r3, #64	@ 0x40
 8003ac6:	d108      	bne.n	8003ada <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	687a      	ldr	r2, [r7, #4]
 8003ace:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	68ba      	ldr	r2, [r7, #8]
 8003ad6:	60da      	str	r2, [r3, #12]
}
 8003ad8:	e007      	b.n	8003aea <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	68ba      	ldr	r2, [r7, #8]
 8003ae0:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	687a      	ldr	r2, [r7, #4]
 8003ae8:	60da      	str	r2, [r3, #12]
}
 8003aea:	bf00      	nop
 8003aec:	371c      	adds	r7, #28
 8003aee:	46bd      	mov	sp, r7
 8003af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af4:	4770      	bx	lr
 8003af6:	bf00      	nop
 8003af8:	58025408 	.word	0x58025408
 8003afc:	5802541c 	.word	0x5802541c
 8003b00:	58025430 	.word	0x58025430
 8003b04:	58025444 	.word	0x58025444
 8003b08:	58025458 	.word	0x58025458
 8003b0c:	5802546c 	.word	0x5802546c
 8003b10:	58025480 	.word	0x58025480
 8003b14:	58025494 	.word	0x58025494

08003b18 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b085      	sub	sp, #20
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a42      	ldr	r2, [pc, #264]	@ (8003c30 <DMA_CalcBaseAndBitshift+0x118>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d04a      	beq.n	8003bc0 <DMA_CalcBaseAndBitshift+0xa8>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a41      	ldr	r2, [pc, #260]	@ (8003c34 <DMA_CalcBaseAndBitshift+0x11c>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d045      	beq.n	8003bc0 <DMA_CalcBaseAndBitshift+0xa8>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a3f      	ldr	r2, [pc, #252]	@ (8003c38 <DMA_CalcBaseAndBitshift+0x120>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d040      	beq.n	8003bc0 <DMA_CalcBaseAndBitshift+0xa8>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a3e      	ldr	r2, [pc, #248]	@ (8003c3c <DMA_CalcBaseAndBitshift+0x124>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d03b      	beq.n	8003bc0 <DMA_CalcBaseAndBitshift+0xa8>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a3c      	ldr	r2, [pc, #240]	@ (8003c40 <DMA_CalcBaseAndBitshift+0x128>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d036      	beq.n	8003bc0 <DMA_CalcBaseAndBitshift+0xa8>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a3b      	ldr	r2, [pc, #236]	@ (8003c44 <DMA_CalcBaseAndBitshift+0x12c>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d031      	beq.n	8003bc0 <DMA_CalcBaseAndBitshift+0xa8>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a39      	ldr	r2, [pc, #228]	@ (8003c48 <DMA_CalcBaseAndBitshift+0x130>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d02c      	beq.n	8003bc0 <DMA_CalcBaseAndBitshift+0xa8>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a38      	ldr	r2, [pc, #224]	@ (8003c4c <DMA_CalcBaseAndBitshift+0x134>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d027      	beq.n	8003bc0 <DMA_CalcBaseAndBitshift+0xa8>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a36      	ldr	r2, [pc, #216]	@ (8003c50 <DMA_CalcBaseAndBitshift+0x138>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d022      	beq.n	8003bc0 <DMA_CalcBaseAndBitshift+0xa8>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a35      	ldr	r2, [pc, #212]	@ (8003c54 <DMA_CalcBaseAndBitshift+0x13c>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d01d      	beq.n	8003bc0 <DMA_CalcBaseAndBitshift+0xa8>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a33      	ldr	r2, [pc, #204]	@ (8003c58 <DMA_CalcBaseAndBitshift+0x140>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d018      	beq.n	8003bc0 <DMA_CalcBaseAndBitshift+0xa8>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a32      	ldr	r2, [pc, #200]	@ (8003c5c <DMA_CalcBaseAndBitshift+0x144>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d013      	beq.n	8003bc0 <DMA_CalcBaseAndBitshift+0xa8>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a30      	ldr	r2, [pc, #192]	@ (8003c60 <DMA_CalcBaseAndBitshift+0x148>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d00e      	beq.n	8003bc0 <DMA_CalcBaseAndBitshift+0xa8>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a2f      	ldr	r2, [pc, #188]	@ (8003c64 <DMA_CalcBaseAndBitshift+0x14c>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d009      	beq.n	8003bc0 <DMA_CalcBaseAndBitshift+0xa8>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a2d      	ldr	r2, [pc, #180]	@ (8003c68 <DMA_CalcBaseAndBitshift+0x150>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d004      	beq.n	8003bc0 <DMA_CalcBaseAndBitshift+0xa8>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a2c      	ldr	r2, [pc, #176]	@ (8003c6c <DMA_CalcBaseAndBitshift+0x154>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d101      	bne.n	8003bc4 <DMA_CalcBaseAndBitshift+0xac>
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	e000      	b.n	8003bc6 <DMA_CalcBaseAndBitshift+0xae>
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d024      	beq.n	8003c14 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	b2db      	uxtb	r3, r3
 8003bd0:	3b10      	subs	r3, #16
 8003bd2:	4a27      	ldr	r2, [pc, #156]	@ (8003c70 <DMA_CalcBaseAndBitshift+0x158>)
 8003bd4:	fba2 2303 	umull	r2, r3, r2, r3
 8003bd8:	091b      	lsrs	r3, r3, #4
 8003bda:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	f003 0307 	and.w	r3, r3, #7
 8003be2:	4a24      	ldr	r2, [pc, #144]	@ (8003c74 <DMA_CalcBaseAndBitshift+0x15c>)
 8003be4:	5cd3      	ldrb	r3, [r2, r3]
 8003be6:	461a      	mov	r2, r3
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	2b03      	cmp	r3, #3
 8003bf0:	d908      	bls.n	8003c04 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	461a      	mov	r2, r3
 8003bf8:	4b1f      	ldr	r3, [pc, #124]	@ (8003c78 <DMA_CalcBaseAndBitshift+0x160>)
 8003bfa:	4013      	ands	r3, r2
 8003bfc:	1d1a      	adds	r2, r3, #4
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	659a      	str	r2, [r3, #88]	@ 0x58
 8003c02:	e00d      	b.n	8003c20 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	461a      	mov	r2, r3
 8003c0a:	4b1b      	ldr	r3, [pc, #108]	@ (8003c78 <DMA_CalcBaseAndBitshift+0x160>)
 8003c0c:	4013      	ands	r3, r2
 8003c0e:	687a      	ldr	r2, [r7, #4]
 8003c10:	6593      	str	r3, [r2, #88]	@ 0x58
 8003c12:	e005      	b.n	8003c20 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003c24:	4618      	mov	r0, r3
 8003c26:	3714      	adds	r7, #20
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2e:	4770      	bx	lr
 8003c30:	40020010 	.word	0x40020010
 8003c34:	40020028 	.word	0x40020028
 8003c38:	40020040 	.word	0x40020040
 8003c3c:	40020058 	.word	0x40020058
 8003c40:	40020070 	.word	0x40020070
 8003c44:	40020088 	.word	0x40020088
 8003c48:	400200a0 	.word	0x400200a0
 8003c4c:	400200b8 	.word	0x400200b8
 8003c50:	40020410 	.word	0x40020410
 8003c54:	40020428 	.word	0x40020428
 8003c58:	40020440 	.word	0x40020440
 8003c5c:	40020458 	.word	0x40020458
 8003c60:	40020470 	.word	0x40020470
 8003c64:	40020488 	.word	0x40020488
 8003c68:	400204a0 	.word	0x400204a0
 8003c6c:	400204b8 	.word	0x400204b8
 8003c70:	aaaaaaab 	.word	0xaaaaaaab
 8003c74:	08008030 	.word	0x08008030
 8003c78:	fffffc00 	.word	0xfffffc00

08003c7c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b085      	sub	sp, #20
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c84:	2300      	movs	r3, #0
 8003c86:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	699b      	ldr	r3, [r3, #24]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d120      	bne.n	8003cd2 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c94:	2b03      	cmp	r3, #3
 8003c96:	d858      	bhi.n	8003d4a <DMA_CheckFifoParam+0xce>
 8003c98:	a201      	add	r2, pc, #4	@ (adr r2, 8003ca0 <DMA_CheckFifoParam+0x24>)
 8003c9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c9e:	bf00      	nop
 8003ca0:	08003cb1 	.word	0x08003cb1
 8003ca4:	08003cc3 	.word	0x08003cc3
 8003ca8:	08003cb1 	.word	0x08003cb1
 8003cac:	08003d4b 	.word	0x08003d4b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cb4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d048      	beq.n	8003d4e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003cc0:	e045      	b.n	8003d4e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cc6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003cca:	d142      	bne.n	8003d52 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8003ccc:	2301      	movs	r3, #1
 8003cce:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003cd0:	e03f      	b.n	8003d52 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	699b      	ldr	r3, [r3, #24]
 8003cd6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003cda:	d123      	bne.n	8003d24 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ce0:	2b03      	cmp	r3, #3
 8003ce2:	d838      	bhi.n	8003d56 <DMA_CheckFifoParam+0xda>
 8003ce4:	a201      	add	r2, pc, #4	@ (adr r2, 8003cec <DMA_CheckFifoParam+0x70>)
 8003ce6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cea:	bf00      	nop
 8003cec:	08003cfd 	.word	0x08003cfd
 8003cf0:	08003d03 	.word	0x08003d03
 8003cf4:	08003cfd 	.word	0x08003cfd
 8003cf8:	08003d15 	.word	0x08003d15
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	73fb      	strb	r3, [r7, #15]
        break;
 8003d00:	e030      	b.n	8003d64 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d06:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d025      	beq.n	8003d5a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003d12:	e022      	b.n	8003d5a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d18:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003d1c:	d11f      	bne.n	8003d5e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003d22:	e01c      	b.n	8003d5e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d28:	2b02      	cmp	r3, #2
 8003d2a:	d902      	bls.n	8003d32 <DMA_CheckFifoParam+0xb6>
 8003d2c:	2b03      	cmp	r3, #3
 8003d2e:	d003      	beq.n	8003d38 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8003d30:	e018      	b.n	8003d64 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	73fb      	strb	r3, [r7, #15]
        break;
 8003d36:	e015      	b.n	8003d64 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d3c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d00e      	beq.n	8003d62 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8003d44:	2301      	movs	r3, #1
 8003d46:	73fb      	strb	r3, [r7, #15]
    break;
 8003d48:	e00b      	b.n	8003d62 <DMA_CheckFifoParam+0xe6>
        break;
 8003d4a:	bf00      	nop
 8003d4c:	e00a      	b.n	8003d64 <DMA_CheckFifoParam+0xe8>
        break;
 8003d4e:	bf00      	nop
 8003d50:	e008      	b.n	8003d64 <DMA_CheckFifoParam+0xe8>
        break;
 8003d52:	bf00      	nop
 8003d54:	e006      	b.n	8003d64 <DMA_CheckFifoParam+0xe8>
        break;
 8003d56:	bf00      	nop
 8003d58:	e004      	b.n	8003d64 <DMA_CheckFifoParam+0xe8>
        break;
 8003d5a:	bf00      	nop
 8003d5c:	e002      	b.n	8003d64 <DMA_CheckFifoParam+0xe8>
        break;
 8003d5e:	bf00      	nop
 8003d60:	e000      	b.n	8003d64 <DMA_CheckFifoParam+0xe8>
    break;
 8003d62:	bf00      	nop
    }
  }

  return status;
 8003d64:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d66:	4618      	mov	r0, r3
 8003d68:	3714      	adds	r7, #20
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d70:	4770      	bx	lr
 8003d72:	bf00      	nop

08003d74 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003d74:	b480      	push	{r7}
 8003d76:	b085      	sub	sp, #20
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a38      	ldr	r2, [pc, #224]	@ (8003e68 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d022      	beq.n	8003dd2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a36      	ldr	r2, [pc, #216]	@ (8003e6c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d01d      	beq.n	8003dd2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a35      	ldr	r2, [pc, #212]	@ (8003e70 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d018      	beq.n	8003dd2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a33      	ldr	r2, [pc, #204]	@ (8003e74 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d013      	beq.n	8003dd2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a32      	ldr	r2, [pc, #200]	@ (8003e78 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d00e      	beq.n	8003dd2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a30      	ldr	r2, [pc, #192]	@ (8003e7c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d009      	beq.n	8003dd2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a2f      	ldr	r2, [pc, #188]	@ (8003e80 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d004      	beq.n	8003dd2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a2d      	ldr	r2, [pc, #180]	@ (8003e84 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d101      	bne.n	8003dd6 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	e000      	b.n	8003dd8 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d01a      	beq.n	8003e12 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	b2db      	uxtb	r3, r3
 8003de2:	3b08      	subs	r3, #8
 8003de4:	4a28      	ldr	r2, [pc, #160]	@ (8003e88 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8003de6:	fba2 2303 	umull	r2, r3, r2, r3
 8003dea:	091b      	lsrs	r3, r3, #4
 8003dec:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8003dee:	68fa      	ldr	r2, [r7, #12]
 8003df0:	4b26      	ldr	r3, [pc, #152]	@ (8003e8c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8003df2:	4413      	add	r3, r2
 8003df4:	009b      	lsls	r3, r3, #2
 8003df6:	461a      	mov	r2, r3
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	4a24      	ldr	r2, [pc, #144]	@ (8003e90 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8003e00:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	f003 031f 	and.w	r3, r3, #31
 8003e08:	2201      	movs	r2, #1
 8003e0a:	409a      	lsls	r2, r3
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8003e10:	e024      	b.n	8003e5c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	b2db      	uxtb	r3, r3
 8003e18:	3b10      	subs	r3, #16
 8003e1a:	4a1e      	ldr	r2, [pc, #120]	@ (8003e94 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8003e1c:	fba2 2303 	umull	r2, r3, r2, r3
 8003e20:	091b      	lsrs	r3, r3, #4
 8003e22:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	4a1c      	ldr	r2, [pc, #112]	@ (8003e98 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d806      	bhi.n	8003e3a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8003e2c:	68bb      	ldr	r3, [r7, #8]
 8003e2e:	4a1b      	ldr	r2, [pc, #108]	@ (8003e9c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d902      	bls.n	8003e3a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	3308      	adds	r3, #8
 8003e38:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8003e3a:	68fa      	ldr	r2, [r7, #12]
 8003e3c:	4b18      	ldr	r3, [pc, #96]	@ (8003ea0 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8003e3e:	4413      	add	r3, r2
 8003e40:	009b      	lsls	r3, r3, #2
 8003e42:	461a      	mov	r2, r3
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	4a16      	ldr	r2, [pc, #88]	@ (8003ea4 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8003e4c:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	f003 031f 	and.w	r3, r3, #31
 8003e54:	2201      	movs	r2, #1
 8003e56:	409a      	lsls	r2, r3
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003e5c:	bf00      	nop
 8003e5e:	3714      	adds	r7, #20
 8003e60:	46bd      	mov	sp, r7
 8003e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e66:	4770      	bx	lr
 8003e68:	58025408 	.word	0x58025408
 8003e6c:	5802541c 	.word	0x5802541c
 8003e70:	58025430 	.word	0x58025430
 8003e74:	58025444 	.word	0x58025444
 8003e78:	58025458 	.word	0x58025458
 8003e7c:	5802546c 	.word	0x5802546c
 8003e80:	58025480 	.word	0x58025480
 8003e84:	58025494 	.word	0x58025494
 8003e88:	cccccccd 	.word	0xcccccccd
 8003e8c:	16009600 	.word	0x16009600
 8003e90:	58025880 	.word	0x58025880
 8003e94:	aaaaaaab 	.word	0xaaaaaaab
 8003e98:	400204b8 	.word	0x400204b8
 8003e9c:	4002040f 	.word	0x4002040f
 8003ea0:	10008200 	.word	0x10008200
 8003ea4:	40020880 	.word	0x40020880

08003ea8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	b085      	sub	sp, #20
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	b2db      	uxtb	r3, r3
 8003eb6:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d04a      	beq.n	8003f54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	2b08      	cmp	r3, #8
 8003ec2:	d847      	bhi.n	8003f54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a25      	ldr	r2, [pc, #148]	@ (8003f60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d022      	beq.n	8003f14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4a24      	ldr	r2, [pc, #144]	@ (8003f64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d01d      	beq.n	8003f14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a22      	ldr	r2, [pc, #136]	@ (8003f68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d018      	beq.n	8003f14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4a21      	ldr	r2, [pc, #132]	@ (8003f6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d013      	beq.n	8003f14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a1f      	ldr	r2, [pc, #124]	@ (8003f70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d00e      	beq.n	8003f14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4a1e      	ldr	r2, [pc, #120]	@ (8003f74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d009      	beq.n	8003f14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a1c      	ldr	r2, [pc, #112]	@ (8003f78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d004      	beq.n	8003f14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a1b      	ldr	r2, [pc, #108]	@ (8003f7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d101      	bne.n	8003f18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8003f14:	2301      	movs	r3, #1
 8003f16:	e000      	b.n	8003f1a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8003f18:	2300      	movs	r3, #0
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d00a      	beq.n	8003f34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8003f1e:	68fa      	ldr	r2, [r7, #12]
 8003f20:	4b17      	ldr	r3, [pc, #92]	@ (8003f80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8003f22:	4413      	add	r3, r2
 8003f24:	009b      	lsls	r3, r3, #2
 8003f26:	461a      	mov	r2, r3
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	4a15      	ldr	r2, [pc, #84]	@ (8003f84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8003f30:	671a      	str	r2, [r3, #112]	@ 0x70
 8003f32:	e009      	b.n	8003f48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003f34:	68fa      	ldr	r2, [r7, #12]
 8003f36:	4b14      	ldr	r3, [pc, #80]	@ (8003f88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8003f38:	4413      	add	r3, r2
 8003f3a:	009b      	lsls	r3, r3, #2
 8003f3c:	461a      	mov	r2, r3
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	4a11      	ldr	r2, [pc, #68]	@ (8003f8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8003f46:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	3b01      	subs	r3, #1
 8003f4c:	2201      	movs	r2, #1
 8003f4e:	409a      	lsls	r2, r3
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8003f54:	bf00      	nop
 8003f56:	3714      	adds	r7, #20
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5e:	4770      	bx	lr
 8003f60:	58025408 	.word	0x58025408
 8003f64:	5802541c 	.word	0x5802541c
 8003f68:	58025430 	.word	0x58025430
 8003f6c:	58025444 	.word	0x58025444
 8003f70:	58025458 	.word	0x58025458
 8003f74:	5802546c 	.word	0x5802546c
 8003f78:	58025480 	.word	0x58025480
 8003f7c:	58025494 	.word	0x58025494
 8003f80:	1600963f 	.word	0x1600963f
 8003f84:	58025940 	.word	0x58025940
 8003f88:	1000823f 	.word	0x1000823f
 8003f8c:	40020940 	.word	0x40020940

08003f90 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8003f90:	b480      	push	{r7}
 8003f92:	b087      	sub	sp, #28
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	60f8      	str	r0, [r7, #12]
 8003f98:	460b      	mov	r3, r1
 8003f9a:	607a      	str	r2, [r7, #4]
 8003f9c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	75fb      	strb	r3, [r7, #23]

  /* Check null pointer */
  if (hexti == NULL)
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d101      	bne.n	8003fac <HAL_EXTI_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8003fa8:	2301      	movs	r3, #1
 8003faa:	e00a      	b.n	8003fc2 <HAL_EXTI_RegisterCallback+0x32>
  }

  switch (CallbackID)
 8003fac:	7afb      	ldrb	r3, [r7, #11]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d103      	bne.n	8003fba <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	687a      	ldr	r2, [r7, #4]
 8003fb6:	605a      	str	r2, [r3, #4]
      break;
 8003fb8:	e002      	b.n	8003fc0 <HAL_EXTI_RegisterCallback+0x30>

    default:
      status = HAL_ERROR;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	75fb      	strb	r3, [r7, #23]
      break;
 8003fbe:	bf00      	nop
  }

  return status;
 8003fc0:	7dfb      	ldrb	r3, [r7, #23]
}
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	371c      	adds	r7, #28
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fcc:	4770      	bx	lr

08003fce <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8003fce:	b480      	push	{r7}
 8003fd0:	b083      	sub	sp, #12
 8003fd2:	af00      	add	r7, sp, #0
 8003fd4:	6078      	str	r0, [r7, #4]
 8003fd6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d101      	bne.n	8003fe2 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	e003      	b.n	8003fea <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	683a      	ldr	r2, [r7, #0]
 8003fe6:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8003fe8:	2300      	movs	r3, #0
  }
}
 8003fea:	4618      	mov	r0, r3
 8003fec:	370c      	adds	r7, #12
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff4:	4770      	bx	lr
	...

08003ff8 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b086      	sub	sp, #24
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	0c1b      	lsrs	r3, r3, #16
 8004006:	f003 0303 	and.w	r3, r3, #3
 800400a:	613b      	str	r3, [r7, #16]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f003 031f 	and.w	r3, r3, #31
 8004014:	2201      	movs	r2, #1
 8004016:	fa02 f303 	lsl.w	r3, r2, r3
 800401a:	60fb      	str	r3, [r7, #12]

#if defined(DUAL_CORE)
  if (HAL_GetCurrentCPUID() == CM7_CPUID)
 800401c:	f7fd fecc 	bl	8001db8 <HAL_GetCurrentCPUID>
 8004020:	4603      	mov	r3, r0
 8004022:	2b03      	cmp	r3, #3
 8004024:	d105      	bne.n	8004032 <HAL_EXTI_IRQHandler+0x3a>
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
 8004026:	693b      	ldr	r3, [r7, #16]
 8004028:	011a      	lsls	r2, r3, #4
 800402a:	4b0f      	ldr	r3, [pc, #60]	@ (8004068 <HAL_EXTI_IRQHandler+0x70>)
 800402c:	4413      	add	r3, r2
 800402e:	617b      	str	r3, [r7, #20]
 8004030:	e004      	b.n	800403c <HAL_EXTI_IRQHandler+0x44>
  }
  else /* Cortex-M4*/
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->C2PR1 + (EXTI_MODE_OFFSET * offset));
 8004032:	693b      	ldr	r3, [r7, #16]
 8004034:	011a      	lsls	r2, r3, #4
 8004036:	4b0d      	ldr	r3, [pc, #52]	@ (800406c <HAL_EXTI_IRQHandler+0x74>)
 8004038:	4413      	add	r3, r2
 800403a:	617b      	str	r3, [r7, #20]
#else
  regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
#endif /* DUAL_CORE */

  /* Get pending bit  */
  regval = (*regaddr & maskline);
 800403c:	697b      	ldr	r3, [r7, #20]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	68fa      	ldr	r2, [r7, #12]
 8004042:	4013      	ands	r3, r2
 8004044:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00U)
 8004046:	68bb      	ldr	r3, [r7, #8]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d009      	beq.n	8004060 <HAL_EXTI_IRQHandler+0x68>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 800404c:	697b      	ldr	r3, [r7, #20]
 800404e:	68fa      	ldr	r2, [r7, #12]
 8004050:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d002      	beq.n	8004060 <HAL_EXTI_IRQHandler+0x68>
    {
      hexti->PendingCallback();
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	4798      	blx	r3
    }
  }
}
 8004060:	bf00      	nop
 8004062:	3718      	adds	r7, #24
 8004064:	46bd      	mov	sp, r7
 8004066:	bd80      	pop	{r7, pc}
 8004068:	58000088 	.word	0x58000088
 800406c:	580000c8 	.word	0x580000c8

08004070 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004070:	b480      	push	{r7}
 8004072:	b089      	sub	sp, #36	@ 0x24
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
 8004078:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800407a:	2300      	movs	r3, #0
 800407c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800407e:	4b89      	ldr	r3, [pc, #548]	@ (80042a4 <HAL_GPIO_Init+0x234>)
 8004080:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004082:	e194      	b.n	80043ae <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	681a      	ldr	r2, [r3, #0]
 8004088:	2101      	movs	r1, #1
 800408a:	69fb      	ldr	r3, [r7, #28]
 800408c:	fa01 f303 	lsl.w	r3, r1, r3
 8004090:	4013      	ands	r3, r2
 8004092:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004094:	693b      	ldr	r3, [r7, #16]
 8004096:	2b00      	cmp	r3, #0
 8004098:	f000 8186 	beq.w	80043a8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	f003 0303 	and.w	r3, r3, #3
 80040a4:	2b01      	cmp	r3, #1
 80040a6:	d005      	beq.n	80040b4 <HAL_GPIO_Init+0x44>
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	f003 0303 	and.w	r3, r3, #3
 80040b0:	2b02      	cmp	r3, #2
 80040b2:	d130      	bne.n	8004116 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	689b      	ldr	r3, [r3, #8]
 80040b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80040ba:	69fb      	ldr	r3, [r7, #28]
 80040bc:	005b      	lsls	r3, r3, #1
 80040be:	2203      	movs	r2, #3
 80040c0:	fa02 f303 	lsl.w	r3, r2, r3
 80040c4:	43db      	mvns	r3, r3
 80040c6:	69ba      	ldr	r2, [r7, #24]
 80040c8:	4013      	ands	r3, r2
 80040ca:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	68da      	ldr	r2, [r3, #12]
 80040d0:	69fb      	ldr	r3, [r7, #28]
 80040d2:	005b      	lsls	r3, r3, #1
 80040d4:	fa02 f303 	lsl.w	r3, r2, r3
 80040d8:	69ba      	ldr	r2, [r7, #24]
 80040da:	4313      	orrs	r3, r2
 80040dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	69ba      	ldr	r2, [r7, #24]
 80040e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80040ea:	2201      	movs	r2, #1
 80040ec:	69fb      	ldr	r3, [r7, #28]
 80040ee:	fa02 f303 	lsl.w	r3, r2, r3
 80040f2:	43db      	mvns	r3, r3
 80040f4:	69ba      	ldr	r2, [r7, #24]
 80040f6:	4013      	ands	r3, r2
 80040f8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	091b      	lsrs	r3, r3, #4
 8004100:	f003 0201 	and.w	r2, r3, #1
 8004104:	69fb      	ldr	r3, [r7, #28]
 8004106:	fa02 f303 	lsl.w	r3, r2, r3
 800410a:	69ba      	ldr	r2, [r7, #24]
 800410c:	4313      	orrs	r3, r2
 800410e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	69ba      	ldr	r2, [r7, #24]
 8004114:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	f003 0303 	and.w	r3, r3, #3
 800411e:	2b03      	cmp	r3, #3
 8004120:	d017      	beq.n	8004152 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	68db      	ldr	r3, [r3, #12]
 8004126:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004128:	69fb      	ldr	r3, [r7, #28]
 800412a:	005b      	lsls	r3, r3, #1
 800412c:	2203      	movs	r2, #3
 800412e:	fa02 f303 	lsl.w	r3, r2, r3
 8004132:	43db      	mvns	r3, r3
 8004134:	69ba      	ldr	r2, [r7, #24]
 8004136:	4013      	ands	r3, r2
 8004138:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	689a      	ldr	r2, [r3, #8]
 800413e:	69fb      	ldr	r3, [r7, #28]
 8004140:	005b      	lsls	r3, r3, #1
 8004142:	fa02 f303 	lsl.w	r3, r2, r3
 8004146:	69ba      	ldr	r2, [r7, #24]
 8004148:	4313      	orrs	r3, r2
 800414a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	69ba      	ldr	r2, [r7, #24]
 8004150:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	685b      	ldr	r3, [r3, #4]
 8004156:	f003 0303 	and.w	r3, r3, #3
 800415a:	2b02      	cmp	r3, #2
 800415c:	d123      	bne.n	80041a6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800415e:	69fb      	ldr	r3, [r7, #28]
 8004160:	08da      	lsrs	r2, r3, #3
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	3208      	adds	r2, #8
 8004166:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800416a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800416c:	69fb      	ldr	r3, [r7, #28]
 800416e:	f003 0307 	and.w	r3, r3, #7
 8004172:	009b      	lsls	r3, r3, #2
 8004174:	220f      	movs	r2, #15
 8004176:	fa02 f303 	lsl.w	r3, r2, r3
 800417a:	43db      	mvns	r3, r3
 800417c:	69ba      	ldr	r2, [r7, #24]
 800417e:	4013      	ands	r3, r2
 8004180:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	691a      	ldr	r2, [r3, #16]
 8004186:	69fb      	ldr	r3, [r7, #28]
 8004188:	f003 0307 	and.w	r3, r3, #7
 800418c:	009b      	lsls	r3, r3, #2
 800418e:	fa02 f303 	lsl.w	r3, r2, r3
 8004192:	69ba      	ldr	r2, [r7, #24]
 8004194:	4313      	orrs	r3, r2
 8004196:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004198:	69fb      	ldr	r3, [r7, #28]
 800419a:	08da      	lsrs	r2, r3, #3
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	3208      	adds	r2, #8
 80041a0:	69b9      	ldr	r1, [r7, #24]
 80041a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80041ac:	69fb      	ldr	r3, [r7, #28]
 80041ae:	005b      	lsls	r3, r3, #1
 80041b0:	2203      	movs	r2, #3
 80041b2:	fa02 f303 	lsl.w	r3, r2, r3
 80041b6:	43db      	mvns	r3, r3
 80041b8:	69ba      	ldr	r2, [r7, #24]
 80041ba:	4013      	ands	r3, r2
 80041bc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	f003 0203 	and.w	r2, r3, #3
 80041c6:	69fb      	ldr	r3, [r7, #28]
 80041c8:	005b      	lsls	r3, r3, #1
 80041ca:	fa02 f303 	lsl.w	r3, r2, r3
 80041ce:	69ba      	ldr	r2, [r7, #24]
 80041d0:	4313      	orrs	r3, r2
 80041d2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	69ba      	ldr	r2, [r7, #24]
 80041d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	f000 80e0 	beq.w	80043a8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80041e8:	4b2f      	ldr	r3, [pc, #188]	@ (80042a8 <HAL_GPIO_Init+0x238>)
 80041ea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80041ee:	4a2e      	ldr	r2, [pc, #184]	@ (80042a8 <HAL_GPIO_Init+0x238>)
 80041f0:	f043 0302 	orr.w	r3, r3, #2
 80041f4:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80041f8:	4b2b      	ldr	r3, [pc, #172]	@ (80042a8 <HAL_GPIO_Init+0x238>)
 80041fa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80041fe:	f003 0302 	and.w	r3, r3, #2
 8004202:	60fb      	str	r3, [r7, #12]
 8004204:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004206:	4a29      	ldr	r2, [pc, #164]	@ (80042ac <HAL_GPIO_Init+0x23c>)
 8004208:	69fb      	ldr	r3, [r7, #28]
 800420a:	089b      	lsrs	r3, r3, #2
 800420c:	3302      	adds	r3, #2
 800420e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004212:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004214:	69fb      	ldr	r3, [r7, #28]
 8004216:	f003 0303 	and.w	r3, r3, #3
 800421a:	009b      	lsls	r3, r3, #2
 800421c:	220f      	movs	r2, #15
 800421e:	fa02 f303 	lsl.w	r3, r2, r3
 8004222:	43db      	mvns	r3, r3
 8004224:	69ba      	ldr	r2, [r7, #24]
 8004226:	4013      	ands	r3, r2
 8004228:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	4a20      	ldr	r2, [pc, #128]	@ (80042b0 <HAL_GPIO_Init+0x240>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d052      	beq.n	80042d8 <HAL_GPIO_Init+0x268>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	4a1f      	ldr	r2, [pc, #124]	@ (80042b4 <HAL_GPIO_Init+0x244>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d031      	beq.n	800429e <HAL_GPIO_Init+0x22e>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	4a1e      	ldr	r2, [pc, #120]	@ (80042b8 <HAL_GPIO_Init+0x248>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d02b      	beq.n	800429a <HAL_GPIO_Init+0x22a>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	4a1d      	ldr	r2, [pc, #116]	@ (80042bc <HAL_GPIO_Init+0x24c>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d025      	beq.n	8004296 <HAL_GPIO_Init+0x226>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	4a1c      	ldr	r2, [pc, #112]	@ (80042c0 <HAL_GPIO_Init+0x250>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d01f      	beq.n	8004292 <HAL_GPIO_Init+0x222>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	4a1b      	ldr	r2, [pc, #108]	@ (80042c4 <HAL_GPIO_Init+0x254>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d019      	beq.n	800428e <HAL_GPIO_Init+0x21e>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	4a1a      	ldr	r2, [pc, #104]	@ (80042c8 <HAL_GPIO_Init+0x258>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d013      	beq.n	800428a <HAL_GPIO_Init+0x21a>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	4a19      	ldr	r2, [pc, #100]	@ (80042cc <HAL_GPIO_Init+0x25c>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d00d      	beq.n	8004286 <HAL_GPIO_Init+0x216>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	4a18      	ldr	r2, [pc, #96]	@ (80042d0 <HAL_GPIO_Init+0x260>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d007      	beq.n	8004282 <HAL_GPIO_Init+0x212>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	4a17      	ldr	r2, [pc, #92]	@ (80042d4 <HAL_GPIO_Init+0x264>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d101      	bne.n	800427e <HAL_GPIO_Init+0x20e>
 800427a:	2309      	movs	r3, #9
 800427c:	e02d      	b.n	80042da <HAL_GPIO_Init+0x26a>
 800427e:	230a      	movs	r3, #10
 8004280:	e02b      	b.n	80042da <HAL_GPIO_Init+0x26a>
 8004282:	2308      	movs	r3, #8
 8004284:	e029      	b.n	80042da <HAL_GPIO_Init+0x26a>
 8004286:	2307      	movs	r3, #7
 8004288:	e027      	b.n	80042da <HAL_GPIO_Init+0x26a>
 800428a:	2306      	movs	r3, #6
 800428c:	e025      	b.n	80042da <HAL_GPIO_Init+0x26a>
 800428e:	2305      	movs	r3, #5
 8004290:	e023      	b.n	80042da <HAL_GPIO_Init+0x26a>
 8004292:	2304      	movs	r3, #4
 8004294:	e021      	b.n	80042da <HAL_GPIO_Init+0x26a>
 8004296:	2303      	movs	r3, #3
 8004298:	e01f      	b.n	80042da <HAL_GPIO_Init+0x26a>
 800429a:	2302      	movs	r3, #2
 800429c:	e01d      	b.n	80042da <HAL_GPIO_Init+0x26a>
 800429e:	2301      	movs	r3, #1
 80042a0:	e01b      	b.n	80042da <HAL_GPIO_Init+0x26a>
 80042a2:	bf00      	nop
 80042a4:	58000080 	.word	0x58000080
 80042a8:	58024400 	.word	0x58024400
 80042ac:	58000400 	.word	0x58000400
 80042b0:	58020000 	.word	0x58020000
 80042b4:	58020400 	.word	0x58020400
 80042b8:	58020800 	.word	0x58020800
 80042bc:	58020c00 	.word	0x58020c00
 80042c0:	58021000 	.word	0x58021000
 80042c4:	58021400 	.word	0x58021400
 80042c8:	58021800 	.word	0x58021800
 80042cc:	58021c00 	.word	0x58021c00
 80042d0:	58022000 	.word	0x58022000
 80042d4:	58022400 	.word	0x58022400
 80042d8:	2300      	movs	r3, #0
 80042da:	69fa      	ldr	r2, [r7, #28]
 80042dc:	f002 0203 	and.w	r2, r2, #3
 80042e0:	0092      	lsls	r2, r2, #2
 80042e2:	4093      	lsls	r3, r2
 80042e4:	69ba      	ldr	r2, [r7, #24]
 80042e6:	4313      	orrs	r3, r2
 80042e8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80042ea:	4938      	ldr	r1, [pc, #224]	@ (80043cc <HAL_GPIO_Init+0x35c>)
 80042ec:	69fb      	ldr	r3, [r7, #28]
 80042ee:	089b      	lsrs	r3, r3, #2
 80042f0:	3302      	adds	r3, #2
 80042f2:	69ba      	ldr	r2, [r7, #24]
 80042f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80042f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004300:	693b      	ldr	r3, [r7, #16]
 8004302:	43db      	mvns	r3, r3
 8004304:	69ba      	ldr	r2, [r7, #24]
 8004306:	4013      	ands	r3, r2
 8004308:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004312:	2b00      	cmp	r3, #0
 8004314:	d003      	beq.n	800431e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8004316:	69ba      	ldr	r2, [r7, #24]
 8004318:	693b      	ldr	r3, [r7, #16]
 800431a:	4313      	orrs	r3, r2
 800431c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800431e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004322:	69bb      	ldr	r3, [r7, #24]
 8004324:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004326:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800432e:	693b      	ldr	r3, [r7, #16]
 8004330:	43db      	mvns	r3, r3
 8004332:	69ba      	ldr	r2, [r7, #24]
 8004334:	4013      	ands	r3, r2
 8004336:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004340:	2b00      	cmp	r3, #0
 8004342:	d003      	beq.n	800434c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004344:	69ba      	ldr	r2, [r7, #24]
 8004346:	693b      	ldr	r3, [r7, #16]
 8004348:	4313      	orrs	r3, r2
 800434a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800434c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004350:	69bb      	ldr	r3, [r7, #24]
 8004352:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004354:	697b      	ldr	r3, [r7, #20]
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800435a:	693b      	ldr	r3, [r7, #16]
 800435c:	43db      	mvns	r3, r3
 800435e:	69ba      	ldr	r2, [r7, #24]
 8004360:	4013      	ands	r3, r2
 8004362:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800436c:	2b00      	cmp	r3, #0
 800436e:	d003      	beq.n	8004378 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8004370:	69ba      	ldr	r2, [r7, #24]
 8004372:	693b      	ldr	r3, [r7, #16]
 8004374:	4313      	orrs	r3, r2
 8004376:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	69ba      	ldr	r2, [r7, #24]
 800437c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800437e:	697b      	ldr	r3, [r7, #20]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004384:	693b      	ldr	r3, [r7, #16]
 8004386:	43db      	mvns	r3, r3
 8004388:	69ba      	ldr	r2, [r7, #24]
 800438a:	4013      	ands	r3, r2
 800438c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004396:	2b00      	cmp	r3, #0
 8004398:	d003      	beq.n	80043a2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800439a:	69ba      	ldr	r2, [r7, #24]
 800439c:	693b      	ldr	r3, [r7, #16]
 800439e:	4313      	orrs	r3, r2
 80043a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80043a2:	697b      	ldr	r3, [r7, #20]
 80043a4:	69ba      	ldr	r2, [r7, #24]
 80043a6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80043a8:	69fb      	ldr	r3, [r7, #28]
 80043aa:	3301      	adds	r3, #1
 80043ac:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	681a      	ldr	r2, [r3, #0]
 80043b2:	69fb      	ldr	r3, [r7, #28]
 80043b4:	fa22 f303 	lsr.w	r3, r2, r3
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	f47f ae63 	bne.w	8004084 <HAL_GPIO_Init+0x14>
  }
}
 80043be:	bf00      	nop
 80043c0:	bf00      	nop
 80043c2:	3724      	adds	r7, #36	@ 0x24
 80043c4:	46bd      	mov	sp, r7
 80043c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ca:	4770      	bx	lr
 80043cc:	58000400 	.word	0x58000400

080043d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80043d0:	b480      	push	{r7}
 80043d2:	b083      	sub	sp, #12
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
 80043d8:	460b      	mov	r3, r1
 80043da:	807b      	strh	r3, [r7, #2]
 80043dc:	4613      	mov	r3, r2
 80043de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80043e0:	787b      	ldrb	r3, [r7, #1]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d003      	beq.n	80043ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80043e6:	887a      	ldrh	r2, [r7, #2]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80043ec:	e003      	b.n	80043f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80043ee:	887b      	ldrh	r3, [r7, #2]
 80043f0:	041a      	lsls	r2, r3, #16
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	619a      	str	r2, [r3, #24]
}
 80043f6:	bf00      	nop
 80043f8:	370c      	adds	r7, #12
 80043fa:	46bd      	mov	sp, r7
 80043fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004400:	4770      	bx	lr

08004402 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004402:	b480      	push	{r7}
 8004404:	b085      	sub	sp, #20
 8004406:	af00      	add	r7, sp, #0
 8004408:	6078      	str	r0, [r7, #4]
 800440a:	460b      	mov	r3, r1
 800440c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	695b      	ldr	r3, [r3, #20]
 8004412:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004414:	887a      	ldrh	r2, [r7, #2]
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	4013      	ands	r3, r2
 800441a:	041a      	lsls	r2, r3, #16
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	43d9      	mvns	r1, r3
 8004420:	887b      	ldrh	r3, [r7, #2]
 8004422:	400b      	ands	r3, r1
 8004424:	431a      	orrs	r2, r3
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	619a      	str	r2, [r3, #24]
}
 800442a:	bf00      	nop
 800442c:	3714      	adds	r7, #20
 800442e:	46bd      	mov	sp, r7
 8004430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004434:	4770      	bx	lr
	...

08004438 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8004438:	b480      	push	{r7}
 800443a:	b083      	sub	sp, #12
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8004440:	4a08      	ldr	r2, [pc, #32]	@ (8004464 <HAL_HSEM_FastTake+0x2c>)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	3320      	adds	r3, #32
 8004446:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800444a:	4a07      	ldr	r2, [pc, #28]	@ (8004468 <HAL_HSEM_FastTake+0x30>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d101      	bne.n	8004454 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8004450:	2300      	movs	r3, #0
 8004452:	e000      	b.n	8004456 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8004454:	2301      	movs	r3, #1
}
 8004456:	4618      	mov	r0, r3
 8004458:	370c      	adds	r7, #12
 800445a:	46bd      	mov	sp, r7
 800445c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004460:	4770      	bx	lr
 8004462:	bf00      	nop
 8004464:	58026400 	.word	0x58026400
 8004468:	80000300 	.word	0x80000300

0800446c <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 800446c:	b480      	push	{r7}
 800446e:	b083      	sub	sp, #12
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
 8004474:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8004476:	4906      	ldr	r1, [pc, #24]	@ (8004490 <HAL_HSEM_Release+0x24>)
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8004484:	bf00      	nop
 8004486:	370c      	adds	r7, #12
 8004488:	46bd      	mov	sp, r7
 800448a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448e:	4770      	bx	lr
 8004490:	58026400 	.word	0x58026400

08004494 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b084      	sub	sp, #16
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800449c:	4b29      	ldr	r3, [pc, #164]	@ (8004544 <HAL_PWREx_ConfigSupply+0xb0>)
 800449e:	68db      	ldr	r3, [r3, #12]
 80044a0:	f003 0307 	and.w	r3, r3, #7
 80044a4:	2b06      	cmp	r3, #6
 80044a6:	d00a      	beq.n	80044be <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80044a8:	4b26      	ldr	r3, [pc, #152]	@ (8004544 <HAL_PWREx_ConfigSupply+0xb0>)
 80044aa:	68db      	ldr	r3, [r3, #12]
 80044ac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80044b0:	687a      	ldr	r2, [r7, #4]
 80044b2:	429a      	cmp	r2, r3
 80044b4:	d001      	beq.n	80044ba <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80044b6:	2301      	movs	r3, #1
 80044b8:	e040      	b.n	800453c <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80044ba:	2300      	movs	r3, #0
 80044bc:	e03e      	b.n	800453c <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80044be:	4b21      	ldr	r3, [pc, #132]	@ (8004544 <HAL_PWREx_ConfigSupply+0xb0>)
 80044c0:	68db      	ldr	r3, [r3, #12]
 80044c2:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 80044c6:	491f      	ldr	r1, [pc, #124]	@ (8004544 <HAL_PWREx_ConfigSupply+0xb0>)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	4313      	orrs	r3, r2
 80044cc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80044ce:	f7fd fb27 	bl	8001b20 <HAL_GetTick>
 80044d2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80044d4:	e009      	b.n	80044ea <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80044d6:	f7fd fb23 	bl	8001b20 <HAL_GetTick>
 80044da:	4602      	mov	r2, r0
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	1ad3      	subs	r3, r2, r3
 80044e0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80044e4:	d901      	bls.n	80044ea <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80044e6:	2301      	movs	r3, #1
 80044e8:	e028      	b.n	800453c <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80044ea:	4b16      	ldr	r3, [pc, #88]	@ (8004544 <HAL_PWREx_ConfigSupply+0xb0>)
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80044f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80044f6:	d1ee      	bne.n	80044d6 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2b1e      	cmp	r3, #30
 80044fc:	d008      	beq.n	8004510 <HAL_PWREx_ConfigSupply+0x7c>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2b2e      	cmp	r3, #46	@ 0x2e
 8004502:	d005      	beq.n	8004510 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2b1d      	cmp	r3, #29
 8004508:	d002      	beq.n	8004510 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2b2d      	cmp	r3, #45	@ 0x2d
 800450e:	d114      	bne.n	800453a <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8004510:	f7fd fb06 	bl	8001b20 <HAL_GetTick>
 8004514:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8004516:	e009      	b.n	800452c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004518:	f7fd fb02 	bl	8001b20 <HAL_GetTick>
 800451c:	4602      	mov	r2, r0
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	1ad3      	subs	r3, r2, r3
 8004522:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004526:	d901      	bls.n	800452c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8004528:	2301      	movs	r3, #1
 800452a:	e007      	b.n	800453c <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800452c:	4b05      	ldr	r3, [pc, #20]	@ (8004544 <HAL_PWREx_ConfigSupply+0xb0>)
 800452e:	68db      	ldr	r3, [r3, #12]
 8004530:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004534:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004538:	d1ee      	bne.n	8004518 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800453a:	2300      	movs	r3, #0
}
 800453c:	4618      	mov	r0, r3
 800453e:	3710      	adds	r7, #16
 8004540:	46bd      	mov	sp, r7
 8004542:	bd80      	pop	{r7, pc}
 8004544:	58024800 	.word	0x58024800

08004548 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b08c      	sub	sp, #48	@ 0x30
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d102      	bne.n	800455c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004556:	2301      	movs	r3, #1
 8004558:	f000 bc48 	b.w	8004dec <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f003 0301 	and.w	r3, r3, #1
 8004564:	2b00      	cmp	r3, #0
 8004566:	f000 8088 	beq.w	800467a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800456a:	4b99      	ldr	r3, [pc, #612]	@ (80047d0 <HAL_RCC_OscConfig+0x288>)
 800456c:	691b      	ldr	r3, [r3, #16]
 800456e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004572:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004574:	4b96      	ldr	r3, [pc, #600]	@ (80047d0 <HAL_RCC_OscConfig+0x288>)
 8004576:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004578:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800457a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800457c:	2b10      	cmp	r3, #16
 800457e:	d007      	beq.n	8004590 <HAL_RCC_OscConfig+0x48>
 8004580:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004582:	2b18      	cmp	r3, #24
 8004584:	d111      	bne.n	80045aa <HAL_RCC_OscConfig+0x62>
 8004586:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004588:	f003 0303 	and.w	r3, r3, #3
 800458c:	2b02      	cmp	r3, #2
 800458e:	d10c      	bne.n	80045aa <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004590:	4b8f      	ldr	r3, [pc, #572]	@ (80047d0 <HAL_RCC_OscConfig+0x288>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004598:	2b00      	cmp	r3, #0
 800459a:	d06d      	beq.n	8004678 <HAL_RCC_OscConfig+0x130>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d169      	bne.n	8004678 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80045a4:	2301      	movs	r3, #1
 80045a6:	f000 bc21 	b.w	8004dec <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80045b2:	d106      	bne.n	80045c2 <HAL_RCC_OscConfig+0x7a>
 80045b4:	4b86      	ldr	r3, [pc, #536]	@ (80047d0 <HAL_RCC_OscConfig+0x288>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4a85      	ldr	r2, [pc, #532]	@ (80047d0 <HAL_RCC_OscConfig+0x288>)
 80045ba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80045be:	6013      	str	r3, [r2, #0]
 80045c0:	e02e      	b.n	8004620 <HAL_RCC_OscConfig+0xd8>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d10c      	bne.n	80045e4 <HAL_RCC_OscConfig+0x9c>
 80045ca:	4b81      	ldr	r3, [pc, #516]	@ (80047d0 <HAL_RCC_OscConfig+0x288>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4a80      	ldr	r2, [pc, #512]	@ (80047d0 <HAL_RCC_OscConfig+0x288>)
 80045d0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80045d4:	6013      	str	r3, [r2, #0]
 80045d6:	4b7e      	ldr	r3, [pc, #504]	@ (80047d0 <HAL_RCC_OscConfig+0x288>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4a7d      	ldr	r2, [pc, #500]	@ (80047d0 <HAL_RCC_OscConfig+0x288>)
 80045dc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80045e0:	6013      	str	r3, [r2, #0]
 80045e2:	e01d      	b.n	8004620 <HAL_RCC_OscConfig+0xd8>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80045ec:	d10c      	bne.n	8004608 <HAL_RCC_OscConfig+0xc0>
 80045ee:	4b78      	ldr	r3, [pc, #480]	@ (80047d0 <HAL_RCC_OscConfig+0x288>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4a77      	ldr	r2, [pc, #476]	@ (80047d0 <HAL_RCC_OscConfig+0x288>)
 80045f4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80045f8:	6013      	str	r3, [r2, #0]
 80045fa:	4b75      	ldr	r3, [pc, #468]	@ (80047d0 <HAL_RCC_OscConfig+0x288>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4a74      	ldr	r2, [pc, #464]	@ (80047d0 <HAL_RCC_OscConfig+0x288>)
 8004600:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004604:	6013      	str	r3, [r2, #0]
 8004606:	e00b      	b.n	8004620 <HAL_RCC_OscConfig+0xd8>
 8004608:	4b71      	ldr	r3, [pc, #452]	@ (80047d0 <HAL_RCC_OscConfig+0x288>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4a70      	ldr	r2, [pc, #448]	@ (80047d0 <HAL_RCC_OscConfig+0x288>)
 800460e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004612:	6013      	str	r3, [r2, #0]
 8004614:	4b6e      	ldr	r3, [pc, #440]	@ (80047d0 <HAL_RCC_OscConfig+0x288>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4a6d      	ldr	r2, [pc, #436]	@ (80047d0 <HAL_RCC_OscConfig+0x288>)
 800461a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800461e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d013      	beq.n	8004650 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004628:	f7fd fa7a 	bl	8001b20 <HAL_GetTick>
 800462c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800462e:	e008      	b.n	8004642 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004630:	f7fd fa76 	bl	8001b20 <HAL_GetTick>
 8004634:	4602      	mov	r2, r0
 8004636:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004638:	1ad3      	subs	r3, r2, r3
 800463a:	2b64      	cmp	r3, #100	@ 0x64
 800463c:	d901      	bls.n	8004642 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800463e:	2303      	movs	r3, #3
 8004640:	e3d4      	b.n	8004dec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004642:	4b63      	ldr	r3, [pc, #396]	@ (80047d0 <HAL_RCC_OscConfig+0x288>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800464a:	2b00      	cmp	r3, #0
 800464c:	d0f0      	beq.n	8004630 <HAL_RCC_OscConfig+0xe8>
 800464e:	e014      	b.n	800467a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004650:	f7fd fa66 	bl	8001b20 <HAL_GetTick>
 8004654:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004656:	e008      	b.n	800466a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004658:	f7fd fa62 	bl	8001b20 <HAL_GetTick>
 800465c:	4602      	mov	r2, r0
 800465e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004660:	1ad3      	subs	r3, r2, r3
 8004662:	2b64      	cmp	r3, #100	@ 0x64
 8004664:	d901      	bls.n	800466a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004666:	2303      	movs	r3, #3
 8004668:	e3c0      	b.n	8004dec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800466a:	4b59      	ldr	r3, [pc, #356]	@ (80047d0 <HAL_RCC_OscConfig+0x288>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004672:	2b00      	cmp	r3, #0
 8004674:	d1f0      	bne.n	8004658 <HAL_RCC_OscConfig+0x110>
 8004676:	e000      	b.n	800467a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004678:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f003 0302 	and.w	r3, r3, #2
 8004682:	2b00      	cmp	r3, #0
 8004684:	f000 80ca 	beq.w	800481c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004688:	4b51      	ldr	r3, [pc, #324]	@ (80047d0 <HAL_RCC_OscConfig+0x288>)
 800468a:	691b      	ldr	r3, [r3, #16]
 800468c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004690:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004692:	4b4f      	ldr	r3, [pc, #316]	@ (80047d0 <HAL_RCC_OscConfig+0x288>)
 8004694:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004696:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004698:	6a3b      	ldr	r3, [r7, #32]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d007      	beq.n	80046ae <HAL_RCC_OscConfig+0x166>
 800469e:	6a3b      	ldr	r3, [r7, #32]
 80046a0:	2b18      	cmp	r3, #24
 80046a2:	d156      	bne.n	8004752 <HAL_RCC_OscConfig+0x20a>
 80046a4:	69fb      	ldr	r3, [r7, #28]
 80046a6:	f003 0303 	and.w	r3, r3, #3
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d151      	bne.n	8004752 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80046ae:	4b48      	ldr	r3, [pc, #288]	@ (80047d0 <HAL_RCC_OscConfig+0x288>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f003 0304 	and.w	r3, r3, #4
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d005      	beq.n	80046c6 <HAL_RCC_OscConfig+0x17e>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	68db      	ldr	r3, [r3, #12]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d101      	bne.n	80046c6 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80046c2:	2301      	movs	r3, #1
 80046c4:	e392      	b.n	8004dec <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80046c6:	4b42      	ldr	r3, [pc, #264]	@ (80047d0 <HAL_RCC_OscConfig+0x288>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f023 0219 	bic.w	r2, r3, #25
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	68db      	ldr	r3, [r3, #12]
 80046d2:	493f      	ldr	r1, [pc, #252]	@ (80047d0 <HAL_RCC_OscConfig+0x288>)
 80046d4:	4313      	orrs	r3, r2
 80046d6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046d8:	f7fd fa22 	bl	8001b20 <HAL_GetTick>
 80046dc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80046de:	e008      	b.n	80046f2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046e0:	f7fd fa1e 	bl	8001b20 <HAL_GetTick>
 80046e4:	4602      	mov	r2, r0
 80046e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046e8:	1ad3      	subs	r3, r2, r3
 80046ea:	2b02      	cmp	r3, #2
 80046ec:	d901      	bls.n	80046f2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80046ee:	2303      	movs	r3, #3
 80046f0:	e37c      	b.n	8004dec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80046f2:	4b37      	ldr	r3, [pc, #220]	@ (80047d0 <HAL_RCC_OscConfig+0x288>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f003 0304 	and.w	r3, r3, #4
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d0f0      	beq.n	80046e0 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046fe:	f7fd fa3f 	bl	8001b80 <HAL_GetREVID>
 8004702:	4603      	mov	r3, r0
 8004704:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004708:	4293      	cmp	r3, r2
 800470a:	d817      	bhi.n	800473c <HAL_RCC_OscConfig+0x1f4>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	691b      	ldr	r3, [r3, #16]
 8004710:	2b40      	cmp	r3, #64	@ 0x40
 8004712:	d108      	bne.n	8004726 <HAL_RCC_OscConfig+0x1de>
 8004714:	4b2e      	ldr	r3, [pc, #184]	@ (80047d0 <HAL_RCC_OscConfig+0x288>)
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800471c:	4a2c      	ldr	r2, [pc, #176]	@ (80047d0 <HAL_RCC_OscConfig+0x288>)
 800471e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004722:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004724:	e07a      	b.n	800481c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004726:	4b2a      	ldr	r3, [pc, #168]	@ (80047d0 <HAL_RCC_OscConfig+0x288>)
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	691b      	ldr	r3, [r3, #16]
 8004732:	031b      	lsls	r3, r3, #12
 8004734:	4926      	ldr	r1, [pc, #152]	@ (80047d0 <HAL_RCC_OscConfig+0x288>)
 8004736:	4313      	orrs	r3, r2
 8004738:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800473a:	e06f      	b.n	800481c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800473c:	4b24      	ldr	r3, [pc, #144]	@ (80047d0 <HAL_RCC_OscConfig+0x288>)
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	691b      	ldr	r3, [r3, #16]
 8004748:	061b      	lsls	r3, r3, #24
 800474a:	4921      	ldr	r1, [pc, #132]	@ (80047d0 <HAL_RCC_OscConfig+0x288>)
 800474c:	4313      	orrs	r3, r2
 800474e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004750:	e064      	b.n	800481c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	68db      	ldr	r3, [r3, #12]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d047      	beq.n	80047ea <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800475a:	4b1d      	ldr	r3, [pc, #116]	@ (80047d0 <HAL_RCC_OscConfig+0x288>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f023 0219 	bic.w	r2, r3, #25
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	68db      	ldr	r3, [r3, #12]
 8004766:	491a      	ldr	r1, [pc, #104]	@ (80047d0 <HAL_RCC_OscConfig+0x288>)
 8004768:	4313      	orrs	r3, r2
 800476a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800476c:	f7fd f9d8 	bl	8001b20 <HAL_GetTick>
 8004770:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004772:	e008      	b.n	8004786 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004774:	f7fd f9d4 	bl	8001b20 <HAL_GetTick>
 8004778:	4602      	mov	r2, r0
 800477a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800477c:	1ad3      	subs	r3, r2, r3
 800477e:	2b02      	cmp	r3, #2
 8004780:	d901      	bls.n	8004786 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8004782:	2303      	movs	r3, #3
 8004784:	e332      	b.n	8004dec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004786:	4b12      	ldr	r3, [pc, #72]	@ (80047d0 <HAL_RCC_OscConfig+0x288>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f003 0304 	and.w	r3, r3, #4
 800478e:	2b00      	cmp	r3, #0
 8004790:	d0f0      	beq.n	8004774 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004792:	f7fd f9f5 	bl	8001b80 <HAL_GetREVID>
 8004796:	4603      	mov	r3, r0
 8004798:	f241 0203 	movw	r2, #4099	@ 0x1003
 800479c:	4293      	cmp	r3, r2
 800479e:	d819      	bhi.n	80047d4 <HAL_RCC_OscConfig+0x28c>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	691b      	ldr	r3, [r3, #16]
 80047a4:	2b40      	cmp	r3, #64	@ 0x40
 80047a6:	d108      	bne.n	80047ba <HAL_RCC_OscConfig+0x272>
 80047a8:	4b09      	ldr	r3, [pc, #36]	@ (80047d0 <HAL_RCC_OscConfig+0x288>)
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80047b0:	4a07      	ldr	r2, [pc, #28]	@ (80047d0 <HAL_RCC_OscConfig+0x288>)
 80047b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80047b6:	6053      	str	r3, [r2, #4]
 80047b8:	e030      	b.n	800481c <HAL_RCC_OscConfig+0x2d4>
 80047ba:	4b05      	ldr	r3, [pc, #20]	@ (80047d0 <HAL_RCC_OscConfig+0x288>)
 80047bc:	685b      	ldr	r3, [r3, #4]
 80047be:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	691b      	ldr	r3, [r3, #16]
 80047c6:	031b      	lsls	r3, r3, #12
 80047c8:	4901      	ldr	r1, [pc, #4]	@ (80047d0 <HAL_RCC_OscConfig+0x288>)
 80047ca:	4313      	orrs	r3, r2
 80047cc:	604b      	str	r3, [r1, #4]
 80047ce:	e025      	b.n	800481c <HAL_RCC_OscConfig+0x2d4>
 80047d0:	58024400 	.word	0x58024400
 80047d4:	4b9a      	ldr	r3, [pc, #616]	@ (8004a40 <HAL_RCC_OscConfig+0x4f8>)
 80047d6:	685b      	ldr	r3, [r3, #4]
 80047d8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	691b      	ldr	r3, [r3, #16]
 80047e0:	061b      	lsls	r3, r3, #24
 80047e2:	4997      	ldr	r1, [pc, #604]	@ (8004a40 <HAL_RCC_OscConfig+0x4f8>)
 80047e4:	4313      	orrs	r3, r2
 80047e6:	604b      	str	r3, [r1, #4]
 80047e8:	e018      	b.n	800481c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80047ea:	4b95      	ldr	r3, [pc, #596]	@ (8004a40 <HAL_RCC_OscConfig+0x4f8>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4a94      	ldr	r2, [pc, #592]	@ (8004a40 <HAL_RCC_OscConfig+0x4f8>)
 80047f0:	f023 0301 	bic.w	r3, r3, #1
 80047f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047f6:	f7fd f993 	bl	8001b20 <HAL_GetTick>
 80047fa:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80047fc:	e008      	b.n	8004810 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80047fe:	f7fd f98f 	bl	8001b20 <HAL_GetTick>
 8004802:	4602      	mov	r2, r0
 8004804:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004806:	1ad3      	subs	r3, r2, r3
 8004808:	2b02      	cmp	r3, #2
 800480a:	d901      	bls.n	8004810 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800480c:	2303      	movs	r3, #3
 800480e:	e2ed      	b.n	8004dec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004810:	4b8b      	ldr	r3, [pc, #556]	@ (8004a40 <HAL_RCC_OscConfig+0x4f8>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f003 0304 	and.w	r3, r3, #4
 8004818:	2b00      	cmp	r3, #0
 800481a:	d1f0      	bne.n	80047fe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f003 0310 	and.w	r3, r3, #16
 8004824:	2b00      	cmp	r3, #0
 8004826:	f000 80a9 	beq.w	800497c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800482a:	4b85      	ldr	r3, [pc, #532]	@ (8004a40 <HAL_RCC_OscConfig+0x4f8>)
 800482c:	691b      	ldr	r3, [r3, #16]
 800482e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004832:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004834:	4b82      	ldr	r3, [pc, #520]	@ (8004a40 <HAL_RCC_OscConfig+0x4f8>)
 8004836:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004838:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800483a:	69bb      	ldr	r3, [r7, #24]
 800483c:	2b08      	cmp	r3, #8
 800483e:	d007      	beq.n	8004850 <HAL_RCC_OscConfig+0x308>
 8004840:	69bb      	ldr	r3, [r7, #24]
 8004842:	2b18      	cmp	r3, #24
 8004844:	d13a      	bne.n	80048bc <HAL_RCC_OscConfig+0x374>
 8004846:	697b      	ldr	r3, [r7, #20]
 8004848:	f003 0303 	and.w	r3, r3, #3
 800484c:	2b01      	cmp	r3, #1
 800484e:	d135      	bne.n	80048bc <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004850:	4b7b      	ldr	r3, [pc, #492]	@ (8004a40 <HAL_RCC_OscConfig+0x4f8>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004858:	2b00      	cmp	r3, #0
 800485a:	d005      	beq.n	8004868 <HAL_RCC_OscConfig+0x320>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	69db      	ldr	r3, [r3, #28]
 8004860:	2b80      	cmp	r3, #128	@ 0x80
 8004862:	d001      	beq.n	8004868 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8004864:	2301      	movs	r3, #1
 8004866:	e2c1      	b.n	8004dec <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004868:	f7fd f98a 	bl	8001b80 <HAL_GetREVID>
 800486c:	4603      	mov	r3, r0
 800486e:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004872:	4293      	cmp	r3, r2
 8004874:	d817      	bhi.n	80048a6 <HAL_RCC_OscConfig+0x35e>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6a1b      	ldr	r3, [r3, #32]
 800487a:	2b20      	cmp	r3, #32
 800487c:	d108      	bne.n	8004890 <HAL_RCC_OscConfig+0x348>
 800487e:	4b70      	ldr	r3, [pc, #448]	@ (8004a40 <HAL_RCC_OscConfig+0x4f8>)
 8004880:	685b      	ldr	r3, [r3, #4]
 8004882:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8004886:	4a6e      	ldr	r2, [pc, #440]	@ (8004a40 <HAL_RCC_OscConfig+0x4f8>)
 8004888:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800488c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800488e:	e075      	b.n	800497c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004890:	4b6b      	ldr	r3, [pc, #428]	@ (8004a40 <HAL_RCC_OscConfig+0x4f8>)
 8004892:	685b      	ldr	r3, [r3, #4]
 8004894:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6a1b      	ldr	r3, [r3, #32]
 800489c:	069b      	lsls	r3, r3, #26
 800489e:	4968      	ldr	r1, [pc, #416]	@ (8004a40 <HAL_RCC_OscConfig+0x4f8>)
 80048a0:	4313      	orrs	r3, r2
 80048a2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80048a4:	e06a      	b.n	800497c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80048a6:	4b66      	ldr	r3, [pc, #408]	@ (8004a40 <HAL_RCC_OscConfig+0x4f8>)
 80048a8:	68db      	ldr	r3, [r3, #12]
 80048aa:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6a1b      	ldr	r3, [r3, #32]
 80048b2:	061b      	lsls	r3, r3, #24
 80048b4:	4962      	ldr	r1, [pc, #392]	@ (8004a40 <HAL_RCC_OscConfig+0x4f8>)
 80048b6:	4313      	orrs	r3, r2
 80048b8:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80048ba:	e05f      	b.n	800497c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	69db      	ldr	r3, [r3, #28]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d042      	beq.n	800494a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80048c4:	4b5e      	ldr	r3, [pc, #376]	@ (8004a40 <HAL_RCC_OscConfig+0x4f8>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a5d      	ldr	r2, [pc, #372]	@ (8004a40 <HAL_RCC_OscConfig+0x4f8>)
 80048ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80048ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048d0:	f7fd f926 	bl	8001b20 <HAL_GetTick>
 80048d4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80048d6:	e008      	b.n	80048ea <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80048d8:	f7fd f922 	bl	8001b20 <HAL_GetTick>
 80048dc:	4602      	mov	r2, r0
 80048de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048e0:	1ad3      	subs	r3, r2, r3
 80048e2:	2b02      	cmp	r3, #2
 80048e4:	d901      	bls.n	80048ea <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80048e6:	2303      	movs	r3, #3
 80048e8:	e280      	b.n	8004dec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80048ea:	4b55      	ldr	r3, [pc, #340]	@ (8004a40 <HAL_RCC_OscConfig+0x4f8>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d0f0      	beq.n	80048d8 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80048f6:	f7fd f943 	bl	8001b80 <HAL_GetREVID>
 80048fa:	4603      	mov	r3, r0
 80048fc:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004900:	4293      	cmp	r3, r2
 8004902:	d817      	bhi.n	8004934 <HAL_RCC_OscConfig+0x3ec>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6a1b      	ldr	r3, [r3, #32]
 8004908:	2b20      	cmp	r3, #32
 800490a:	d108      	bne.n	800491e <HAL_RCC_OscConfig+0x3d6>
 800490c:	4b4c      	ldr	r3, [pc, #304]	@ (8004a40 <HAL_RCC_OscConfig+0x4f8>)
 800490e:	685b      	ldr	r3, [r3, #4]
 8004910:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8004914:	4a4a      	ldr	r2, [pc, #296]	@ (8004a40 <HAL_RCC_OscConfig+0x4f8>)
 8004916:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800491a:	6053      	str	r3, [r2, #4]
 800491c:	e02e      	b.n	800497c <HAL_RCC_OscConfig+0x434>
 800491e:	4b48      	ldr	r3, [pc, #288]	@ (8004a40 <HAL_RCC_OscConfig+0x4f8>)
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6a1b      	ldr	r3, [r3, #32]
 800492a:	069b      	lsls	r3, r3, #26
 800492c:	4944      	ldr	r1, [pc, #272]	@ (8004a40 <HAL_RCC_OscConfig+0x4f8>)
 800492e:	4313      	orrs	r3, r2
 8004930:	604b      	str	r3, [r1, #4]
 8004932:	e023      	b.n	800497c <HAL_RCC_OscConfig+0x434>
 8004934:	4b42      	ldr	r3, [pc, #264]	@ (8004a40 <HAL_RCC_OscConfig+0x4f8>)
 8004936:	68db      	ldr	r3, [r3, #12]
 8004938:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6a1b      	ldr	r3, [r3, #32]
 8004940:	061b      	lsls	r3, r3, #24
 8004942:	493f      	ldr	r1, [pc, #252]	@ (8004a40 <HAL_RCC_OscConfig+0x4f8>)
 8004944:	4313      	orrs	r3, r2
 8004946:	60cb      	str	r3, [r1, #12]
 8004948:	e018      	b.n	800497c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800494a:	4b3d      	ldr	r3, [pc, #244]	@ (8004a40 <HAL_RCC_OscConfig+0x4f8>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4a3c      	ldr	r2, [pc, #240]	@ (8004a40 <HAL_RCC_OscConfig+0x4f8>)
 8004950:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004954:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004956:	f7fd f8e3 	bl	8001b20 <HAL_GetTick>
 800495a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800495c:	e008      	b.n	8004970 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800495e:	f7fd f8df 	bl	8001b20 <HAL_GetTick>
 8004962:	4602      	mov	r2, r0
 8004964:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004966:	1ad3      	subs	r3, r2, r3
 8004968:	2b02      	cmp	r3, #2
 800496a:	d901      	bls.n	8004970 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800496c:	2303      	movs	r3, #3
 800496e:	e23d      	b.n	8004dec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004970:	4b33      	ldr	r3, [pc, #204]	@ (8004a40 <HAL_RCC_OscConfig+0x4f8>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004978:	2b00      	cmp	r3, #0
 800497a:	d1f0      	bne.n	800495e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f003 0308 	and.w	r3, r3, #8
 8004984:	2b00      	cmp	r3, #0
 8004986:	d036      	beq.n	80049f6 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	695b      	ldr	r3, [r3, #20]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d019      	beq.n	80049c4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004990:	4b2b      	ldr	r3, [pc, #172]	@ (8004a40 <HAL_RCC_OscConfig+0x4f8>)
 8004992:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004994:	4a2a      	ldr	r2, [pc, #168]	@ (8004a40 <HAL_RCC_OscConfig+0x4f8>)
 8004996:	f043 0301 	orr.w	r3, r3, #1
 800499a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800499c:	f7fd f8c0 	bl	8001b20 <HAL_GetTick>
 80049a0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80049a2:	e008      	b.n	80049b6 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80049a4:	f7fd f8bc 	bl	8001b20 <HAL_GetTick>
 80049a8:	4602      	mov	r2, r0
 80049aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049ac:	1ad3      	subs	r3, r2, r3
 80049ae:	2b02      	cmp	r3, #2
 80049b0:	d901      	bls.n	80049b6 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80049b2:	2303      	movs	r3, #3
 80049b4:	e21a      	b.n	8004dec <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80049b6:	4b22      	ldr	r3, [pc, #136]	@ (8004a40 <HAL_RCC_OscConfig+0x4f8>)
 80049b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80049ba:	f003 0302 	and.w	r3, r3, #2
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d0f0      	beq.n	80049a4 <HAL_RCC_OscConfig+0x45c>
 80049c2:	e018      	b.n	80049f6 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80049c4:	4b1e      	ldr	r3, [pc, #120]	@ (8004a40 <HAL_RCC_OscConfig+0x4f8>)
 80049c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80049c8:	4a1d      	ldr	r2, [pc, #116]	@ (8004a40 <HAL_RCC_OscConfig+0x4f8>)
 80049ca:	f023 0301 	bic.w	r3, r3, #1
 80049ce:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049d0:	f7fd f8a6 	bl	8001b20 <HAL_GetTick>
 80049d4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80049d6:	e008      	b.n	80049ea <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80049d8:	f7fd f8a2 	bl	8001b20 <HAL_GetTick>
 80049dc:	4602      	mov	r2, r0
 80049de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049e0:	1ad3      	subs	r3, r2, r3
 80049e2:	2b02      	cmp	r3, #2
 80049e4:	d901      	bls.n	80049ea <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80049e6:	2303      	movs	r3, #3
 80049e8:	e200      	b.n	8004dec <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80049ea:	4b15      	ldr	r3, [pc, #84]	@ (8004a40 <HAL_RCC_OscConfig+0x4f8>)
 80049ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80049ee:	f003 0302 	and.w	r3, r3, #2
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d1f0      	bne.n	80049d8 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f003 0320 	and.w	r3, r3, #32
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d039      	beq.n	8004a76 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	699b      	ldr	r3, [r3, #24]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d01c      	beq.n	8004a44 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004a0a:	4b0d      	ldr	r3, [pc, #52]	@ (8004a40 <HAL_RCC_OscConfig+0x4f8>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4a0c      	ldr	r2, [pc, #48]	@ (8004a40 <HAL_RCC_OscConfig+0x4f8>)
 8004a10:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004a14:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004a16:	f7fd f883 	bl	8001b20 <HAL_GetTick>
 8004a1a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004a1c:	e008      	b.n	8004a30 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004a1e:	f7fd f87f 	bl	8001b20 <HAL_GetTick>
 8004a22:	4602      	mov	r2, r0
 8004a24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a26:	1ad3      	subs	r3, r2, r3
 8004a28:	2b02      	cmp	r3, #2
 8004a2a:	d901      	bls.n	8004a30 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8004a2c:	2303      	movs	r3, #3
 8004a2e:	e1dd      	b.n	8004dec <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004a30:	4b03      	ldr	r3, [pc, #12]	@ (8004a40 <HAL_RCC_OscConfig+0x4f8>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d0f0      	beq.n	8004a1e <HAL_RCC_OscConfig+0x4d6>
 8004a3c:	e01b      	b.n	8004a76 <HAL_RCC_OscConfig+0x52e>
 8004a3e:	bf00      	nop
 8004a40:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004a44:	4b9b      	ldr	r3, [pc, #620]	@ (8004cb4 <HAL_RCC_OscConfig+0x76c>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4a9a      	ldr	r2, [pc, #616]	@ (8004cb4 <HAL_RCC_OscConfig+0x76c>)
 8004a4a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004a4e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004a50:	f7fd f866 	bl	8001b20 <HAL_GetTick>
 8004a54:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004a56:	e008      	b.n	8004a6a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004a58:	f7fd f862 	bl	8001b20 <HAL_GetTick>
 8004a5c:	4602      	mov	r2, r0
 8004a5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a60:	1ad3      	subs	r3, r2, r3
 8004a62:	2b02      	cmp	r3, #2
 8004a64:	d901      	bls.n	8004a6a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8004a66:	2303      	movs	r3, #3
 8004a68:	e1c0      	b.n	8004dec <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004a6a:	4b92      	ldr	r3, [pc, #584]	@ (8004cb4 <HAL_RCC_OscConfig+0x76c>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d1f0      	bne.n	8004a58 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f003 0304 	and.w	r3, r3, #4
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	f000 8081 	beq.w	8004b86 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004a84:	4b8c      	ldr	r3, [pc, #560]	@ (8004cb8 <HAL_RCC_OscConfig+0x770>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a8b      	ldr	r2, [pc, #556]	@ (8004cb8 <HAL_RCC_OscConfig+0x770>)
 8004a8a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004a8e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004a90:	f7fd f846 	bl	8001b20 <HAL_GetTick>
 8004a94:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004a96:	e008      	b.n	8004aaa <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a98:	f7fd f842 	bl	8001b20 <HAL_GetTick>
 8004a9c:	4602      	mov	r2, r0
 8004a9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004aa0:	1ad3      	subs	r3, r2, r3
 8004aa2:	2b64      	cmp	r3, #100	@ 0x64
 8004aa4:	d901      	bls.n	8004aaa <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8004aa6:	2303      	movs	r3, #3
 8004aa8:	e1a0      	b.n	8004dec <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004aaa:	4b83      	ldr	r3, [pc, #524]	@ (8004cb8 <HAL_RCC_OscConfig+0x770>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d0f0      	beq.n	8004a98 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	689b      	ldr	r3, [r3, #8]
 8004aba:	2b01      	cmp	r3, #1
 8004abc:	d106      	bne.n	8004acc <HAL_RCC_OscConfig+0x584>
 8004abe:	4b7d      	ldr	r3, [pc, #500]	@ (8004cb4 <HAL_RCC_OscConfig+0x76c>)
 8004ac0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ac2:	4a7c      	ldr	r2, [pc, #496]	@ (8004cb4 <HAL_RCC_OscConfig+0x76c>)
 8004ac4:	f043 0301 	orr.w	r3, r3, #1
 8004ac8:	6713      	str	r3, [r2, #112]	@ 0x70
 8004aca:	e02d      	b.n	8004b28 <HAL_RCC_OscConfig+0x5e0>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	689b      	ldr	r3, [r3, #8]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d10c      	bne.n	8004aee <HAL_RCC_OscConfig+0x5a6>
 8004ad4:	4b77      	ldr	r3, [pc, #476]	@ (8004cb4 <HAL_RCC_OscConfig+0x76c>)
 8004ad6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ad8:	4a76      	ldr	r2, [pc, #472]	@ (8004cb4 <HAL_RCC_OscConfig+0x76c>)
 8004ada:	f023 0301 	bic.w	r3, r3, #1
 8004ade:	6713      	str	r3, [r2, #112]	@ 0x70
 8004ae0:	4b74      	ldr	r3, [pc, #464]	@ (8004cb4 <HAL_RCC_OscConfig+0x76c>)
 8004ae2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ae4:	4a73      	ldr	r2, [pc, #460]	@ (8004cb4 <HAL_RCC_OscConfig+0x76c>)
 8004ae6:	f023 0304 	bic.w	r3, r3, #4
 8004aea:	6713      	str	r3, [r2, #112]	@ 0x70
 8004aec:	e01c      	b.n	8004b28 <HAL_RCC_OscConfig+0x5e0>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	689b      	ldr	r3, [r3, #8]
 8004af2:	2b05      	cmp	r3, #5
 8004af4:	d10c      	bne.n	8004b10 <HAL_RCC_OscConfig+0x5c8>
 8004af6:	4b6f      	ldr	r3, [pc, #444]	@ (8004cb4 <HAL_RCC_OscConfig+0x76c>)
 8004af8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004afa:	4a6e      	ldr	r2, [pc, #440]	@ (8004cb4 <HAL_RCC_OscConfig+0x76c>)
 8004afc:	f043 0304 	orr.w	r3, r3, #4
 8004b00:	6713      	str	r3, [r2, #112]	@ 0x70
 8004b02:	4b6c      	ldr	r3, [pc, #432]	@ (8004cb4 <HAL_RCC_OscConfig+0x76c>)
 8004b04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b06:	4a6b      	ldr	r2, [pc, #428]	@ (8004cb4 <HAL_RCC_OscConfig+0x76c>)
 8004b08:	f043 0301 	orr.w	r3, r3, #1
 8004b0c:	6713      	str	r3, [r2, #112]	@ 0x70
 8004b0e:	e00b      	b.n	8004b28 <HAL_RCC_OscConfig+0x5e0>
 8004b10:	4b68      	ldr	r3, [pc, #416]	@ (8004cb4 <HAL_RCC_OscConfig+0x76c>)
 8004b12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b14:	4a67      	ldr	r2, [pc, #412]	@ (8004cb4 <HAL_RCC_OscConfig+0x76c>)
 8004b16:	f023 0301 	bic.w	r3, r3, #1
 8004b1a:	6713      	str	r3, [r2, #112]	@ 0x70
 8004b1c:	4b65      	ldr	r3, [pc, #404]	@ (8004cb4 <HAL_RCC_OscConfig+0x76c>)
 8004b1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b20:	4a64      	ldr	r2, [pc, #400]	@ (8004cb4 <HAL_RCC_OscConfig+0x76c>)
 8004b22:	f023 0304 	bic.w	r3, r3, #4
 8004b26:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	689b      	ldr	r3, [r3, #8]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d015      	beq.n	8004b5c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b30:	f7fc fff6 	bl	8001b20 <HAL_GetTick>
 8004b34:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004b36:	e00a      	b.n	8004b4e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b38:	f7fc fff2 	bl	8001b20 <HAL_GetTick>
 8004b3c:	4602      	mov	r2, r0
 8004b3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b40:	1ad3      	subs	r3, r2, r3
 8004b42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d901      	bls.n	8004b4e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8004b4a:	2303      	movs	r3, #3
 8004b4c:	e14e      	b.n	8004dec <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004b4e:	4b59      	ldr	r3, [pc, #356]	@ (8004cb4 <HAL_RCC_OscConfig+0x76c>)
 8004b50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b52:	f003 0302 	and.w	r3, r3, #2
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d0ee      	beq.n	8004b38 <HAL_RCC_OscConfig+0x5f0>
 8004b5a:	e014      	b.n	8004b86 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b5c:	f7fc ffe0 	bl	8001b20 <HAL_GetTick>
 8004b60:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004b62:	e00a      	b.n	8004b7a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b64:	f7fc ffdc 	bl	8001b20 <HAL_GetTick>
 8004b68:	4602      	mov	r2, r0
 8004b6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b6c:	1ad3      	subs	r3, r2, r3
 8004b6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d901      	bls.n	8004b7a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8004b76:	2303      	movs	r3, #3
 8004b78:	e138      	b.n	8004dec <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004b7a:	4b4e      	ldr	r3, [pc, #312]	@ (8004cb4 <HAL_RCC_OscConfig+0x76c>)
 8004b7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b7e:	f003 0302 	and.w	r3, r3, #2
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d1ee      	bne.n	8004b64 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	f000 812d 	beq.w	8004dea <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004b90:	4b48      	ldr	r3, [pc, #288]	@ (8004cb4 <HAL_RCC_OscConfig+0x76c>)
 8004b92:	691b      	ldr	r3, [r3, #16]
 8004b94:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004b98:	2b18      	cmp	r3, #24
 8004b9a:	f000 80bd 	beq.w	8004d18 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ba2:	2b02      	cmp	r3, #2
 8004ba4:	f040 809e 	bne.w	8004ce4 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ba8:	4b42      	ldr	r3, [pc, #264]	@ (8004cb4 <HAL_RCC_OscConfig+0x76c>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4a41      	ldr	r2, [pc, #260]	@ (8004cb4 <HAL_RCC_OscConfig+0x76c>)
 8004bae:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004bb2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bb4:	f7fc ffb4 	bl	8001b20 <HAL_GetTick>
 8004bb8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004bba:	e008      	b.n	8004bce <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bbc:	f7fc ffb0 	bl	8001b20 <HAL_GetTick>
 8004bc0:	4602      	mov	r2, r0
 8004bc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bc4:	1ad3      	subs	r3, r2, r3
 8004bc6:	2b02      	cmp	r3, #2
 8004bc8:	d901      	bls.n	8004bce <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8004bca:	2303      	movs	r3, #3
 8004bcc:	e10e      	b.n	8004dec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004bce:	4b39      	ldr	r3, [pc, #228]	@ (8004cb4 <HAL_RCC_OscConfig+0x76c>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d1f0      	bne.n	8004bbc <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004bda:	4b36      	ldr	r3, [pc, #216]	@ (8004cb4 <HAL_RCC_OscConfig+0x76c>)
 8004bdc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004bde:	4b37      	ldr	r3, [pc, #220]	@ (8004cbc <HAL_RCC_OscConfig+0x774>)
 8004be0:	4013      	ands	r3, r2
 8004be2:	687a      	ldr	r2, [r7, #4]
 8004be4:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8004be6:	687a      	ldr	r2, [r7, #4]
 8004be8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004bea:	0112      	lsls	r2, r2, #4
 8004bec:	430a      	orrs	r2, r1
 8004bee:	4931      	ldr	r1, [pc, #196]	@ (8004cb4 <HAL_RCC_OscConfig+0x76c>)
 8004bf0:	4313      	orrs	r3, r2
 8004bf2:	628b      	str	r3, [r1, #40]	@ 0x28
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bf8:	3b01      	subs	r3, #1
 8004bfa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c02:	3b01      	subs	r3, #1
 8004c04:	025b      	lsls	r3, r3, #9
 8004c06:	b29b      	uxth	r3, r3
 8004c08:	431a      	orrs	r2, r3
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c0e:	3b01      	subs	r3, #1
 8004c10:	041b      	lsls	r3, r3, #16
 8004c12:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004c16:	431a      	orrs	r2, r3
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c1c:	3b01      	subs	r3, #1
 8004c1e:	061b      	lsls	r3, r3, #24
 8004c20:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004c24:	4923      	ldr	r1, [pc, #140]	@ (8004cb4 <HAL_RCC_OscConfig+0x76c>)
 8004c26:	4313      	orrs	r3, r2
 8004c28:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8004c2a:	4b22      	ldr	r3, [pc, #136]	@ (8004cb4 <HAL_RCC_OscConfig+0x76c>)
 8004c2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c2e:	4a21      	ldr	r2, [pc, #132]	@ (8004cb4 <HAL_RCC_OscConfig+0x76c>)
 8004c30:	f023 0301 	bic.w	r3, r3, #1
 8004c34:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004c36:	4b1f      	ldr	r3, [pc, #124]	@ (8004cb4 <HAL_RCC_OscConfig+0x76c>)
 8004c38:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004c3a:	4b21      	ldr	r3, [pc, #132]	@ (8004cc0 <HAL_RCC_OscConfig+0x778>)
 8004c3c:	4013      	ands	r3, r2
 8004c3e:	687a      	ldr	r2, [r7, #4]
 8004c40:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004c42:	00d2      	lsls	r2, r2, #3
 8004c44:	491b      	ldr	r1, [pc, #108]	@ (8004cb4 <HAL_RCC_OscConfig+0x76c>)
 8004c46:	4313      	orrs	r3, r2
 8004c48:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004c4a:	4b1a      	ldr	r3, [pc, #104]	@ (8004cb4 <HAL_RCC_OscConfig+0x76c>)
 8004c4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c4e:	f023 020c 	bic.w	r2, r3, #12
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c56:	4917      	ldr	r1, [pc, #92]	@ (8004cb4 <HAL_RCC_OscConfig+0x76c>)
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004c5c:	4b15      	ldr	r3, [pc, #84]	@ (8004cb4 <HAL_RCC_OscConfig+0x76c>)
 8004c5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c60:	f023 0202 	bic.w	r2, r3, #2
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c68:	4912      	ldr	r1, [pc, #72]	@ (8004cb4 <HAL_RCC_OscConfig+0x76c>)
 8004c6a:	4313      	orrs	r3, r2
 8004c6c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004c6e:	4b11      	ldr	r3, [pc, #68]	@ (8004cb4 <HAL_RCC_OscConfig+0x76c>)
 8004c70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c72:	4a10      	ldr	r2, [pc, #64]	@ (8004cb4 <HAL_RCC_OscConfig+0x76c>)
 8004c74:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c78:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c7a:	4b0e      	ldr	r3, [pc, #56]	@ (8004cb4 <HAL_RCC_OscConfig+0x76c>)
 8004c7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c7e:	4a0d      	ldr	r2, [pc, #52]	@ (8004cb4 <HAL_RCC_OscConfig+0x76c>)
 8004c80:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004c84:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004c86:	4b0b      	ldr	r3, [pc, #44]	@ (8004cb4 <HAL_RCC_OscConfig+0x76c>)
 8004c88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c8a:	4a0a      	ldr	r2, [pc, #40]	@ (8004cb4 <HAL_RCC_OscConfig+0x76c>)
 8004c8c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004c90:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8004c92:	4b08      	ldr	r3, [pc, #32]	@ (8004cb4 <HAL_RCC_OscConfig+0x76c>)
 8004c94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c96:	4a07      	ldr	r2, [pc, #28]	@ (8004cb4 <HAL_RCC_OscConfig+0x76c>)
 8004c98:	f043 0301 	orr.w	r3, r3, #1
 8004c9c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004c9e:	4b05      	ldr	r3, [pc, #20]	@ (8004cb4 <HAL_RCC_OscConfig+0x76c>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4a04      	ldr	r2, [pc, #16]	@ (8004cb4 <HAL_RCC_OscConfig+0x76c>)
 8004ca4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004ca8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004caa:	f7fc ff39 	bl	8001b20 <HAL_GetTick>
 8004cae:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004cb0:	e011      	b.n	8004cd6 <HAL_RCC_OscConfig+0x78e>
 8004cb2:	bf00      	nop
 8004cb4:	58024400 	.word	0x58024400
 8004cb8:	58024800 	.word	0x58024800
 8004cbc:	fffffc0c 	.word	0xfffffc0c
 8004cc0:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cc4:	f7fc ff2c 	bl	8001b20 <HAL_GetTick>
 8004cc8:	4602      	mov	r2, r0
 8004cca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ccc:	1ad3      	subs	r3, r2, r3
 8004cce:	2b02      	cmp	r3, #2
 8004cd0:	d901      	bls.n	8004cd6 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8004cd2:	2303      	movs	r3, #3
 8004cd4:	e08a      	b.n	8004dec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004cd6:	4b47      	ldr	r3, [pc, #284]	@ (8004df4 <HAL_RCC_OscConfig+0x8ac>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d0f0      	beq.n	8004cc4 <HAL_RCC_OscConfig+0x77c>
 8004ce2:	e082      	b.n	8004dea <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ce4:	4b43      	ldr	r3, [pc, #268]	@ (8004df4 <HAL_RCC_OscConfig+0x8ac>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4a42      	ldr	r2, [pc, #264]	@ (8004df4 <HAL_RCC_OscConfig+0x8ac>)
 8004cea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004cee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cf0:	f7fc ff16 	bl	8001b20 <HAL_GetTick>
 8004cf4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004cf6:	e008      	b.n	8004d0a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cf8:	f7fc ff12 	bl	8001b20 <HAL_GetTick>
 8004cfc:	4602      	mov	r2, r0
 8004cfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d00:	1ad3      	subs	r3, r2, r3
 8004d02:	2b02      	cmp	r3, #2
 8004d04:	d901      	bls.n	8004d0a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8004d06:	2303      	movs	r3, #3
 8004d08:	e070      	b.n	8004dec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004d0a:	4b3a      	ldr	r3, [pc, #232]	@ (8004df4 <HAL_RCC_OscConfig+0x8ac>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d1f0      	bne.n	8004cf8 <HAL_RCC_OscConfig+0x7b0>
 8004d16:	e068      	b.n	8004dea <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004d18:	4b36      	ldr	r3, [pc, #216]	@ (8004df4 <HAL_RCC_OscConfig+0x8ac>)
 8004d1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d1c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004d1e:	4b35      	ldr	r3, [pc, #212]	@ (8004df4 <HAL_RCC_OscConfig+0x8ac>)
 8004d20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d22:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d28:	2b01      	cmp	r3, #1
 8004d2a:	d031      	beq.n	8004d90 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d2c:	693b      	ldr	r3, [r7, #16]
 8004d2e:	f003 0203 	and.w	r2, r3, #3
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d36:	429a      	cmp	r2, r3
 8004d38:	d12a      	bne.n	8004d90 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004d3a:	693b      	ldr	r3, [r7, #16]
 8004d3c:	091b      	lsrs	r3, r3, #4
 8004d3e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d46:	429a      	cmp	r2, r3
 8004d48:	d122      	bne.n	8004d90 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d54:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004d56:	429a      	cmp	r2, r3
 8004d58:	d11a      	bne.n	8004d90 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	0a5b      	lsrs	r3, r3, #9
 8004d5e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d66:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004d68:	429a      	cmp	r2, r3
 8004d6a:	d111      	bne.n	8004d90 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	0c1b      	lsrs	r3, r3, #16
 8004d70:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d78:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004d7a:	429a      	cmp	r2, r3
 8004d7c:	d108      	bne.n	8004d90 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	0e1b      	lsrs	r3, r3, #24
 8004d82:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d8a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004d8c:	429a      	cmp	r2, r3
 8004d8e:	d001      	beq.n	8004d94 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8004d90:	2301      	movs	r3, #1
 8004d92:	e02b      	b.n	8004dec <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004d94:	4b17      	ldr	r3, [pc, #92]	@ (8004df4 <HAL_RCC_OscConfig+0x8ac>)
 8004d96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d98:	08db      	lsrs	r3, r3, #3
 8004d9a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004d9e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004da4:	693a      	ldr	r2, [r7, #16]
 8004da6:	429a      	cmp	r2, r3
 8004da8:	d01f      	beq.n	8004dea <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8004daa:	4b12      	ldr	r3, [pc, #72]	@ (8004df4 <HAL_RCC_OscConfig+0x8ac>)
 8004dac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dae:	4a11      	ldr	r2, [pc, #68]	@ (8004df4 <HAL_RCC_OscConfig+0x8ac>)
 8004db0:	f023 0301 	bic.w	r3, r3, #1
 8004db4:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004db6:	f7fc feb3 	bl	8001b20 <HAL_GetTick>
 8004dba:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004dbc:	bf00      	nop
 8004dbe:	f7fc feaf 	bl	8001b20 <HAL_GetTick>
 8004dc2:	4602      	mov	r2, r0
 8004dc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d0f9      	beq.n	8004dbe <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004dca:	4b0a      	ldr	r3, [pc, #40]	@ (8004df4 <HAL_RCC_OscConfig+0x8ac>)
 8004dcc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004dce:	4b0a      	ldr	r3, [pc, #40]	@ (8004df8 <HAL_RCC_OscConfig+0x8b0>)
 8004dd0:	4013      	ands	r3, r2
 8004dd2:	687a      	ldr	r2, [r7, #4]
 8004dd4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004dd6:	00d2      	lsls	r2, r2, #3
 8004dd8:	4906      	ldr	r1, [pc, #24]	@ (8004df4 <HAL_RCC_OscConfig+0x8ac>)
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8004dde:	4b05      	ldr	r3, [pc, #20]	@ (8004df4 <HAL_RCC_OscConfig+0x8ac>)
 8004de0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004de2:	4a04      	ldr	r2, [pc, #16]	@ (8004df4 <HAL_RCC_OscConfig+0x8ac>)
 8004de4:	f043 0301 	orr.w	r3, r3, #1
 8004de8:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8004dea:	2300      	movs	r3, #0
}
 8004dec:	4618      	mov	r0, r3
 8004dee:	3730      	adds	r7, #48	@ 0x30
 8004df0:	46bd      	mov	sp, r7
 8004df2:	bd80      	pop	{r7, pc}
 8004df4:	58024400 	.word	0x58024400
 8004df8:	ffff0007 	.word	0xffff0007

08004dfc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b086      	sub	sp, #24
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
 8004e04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d101      	bne.n	8004e10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	e19c      	b.n	800514a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004e10:	4b8a      	ldr	r3, [pc, #552]	@ (800503c <HAL_RCC_ClockConfig+0x240>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f003 030f 	and.w	r3, r3, #15
 8004e18:	683a      	ldr	r2, [r7, #0]
 8004e1a:	429a      	cmp	r2, r3
 8004e1c:	d910      	bls.n	8004e40 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e1e:	4b87      	ldr	r3, [pc, #540]	@ (800503c <HAL_RCC_ClockConfig+0x240>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f023 020f 	bic.w	r2, r3, #15
 8004e26:	4985      	ldr	r1, [pc, #532]	@ (800503c <HAL_RCC_ClockConfig+0x240>)
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	4313      	orrs	r3, r2
 8004e2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e2e:	4b83      	ldr	r3, [pc, #524]	@ (800503c <HAL_RCC_ClockConfig+0x240>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f003 030f 	and.w	r3, r3, #15
 8004e36:	683a      	ldr	r2, [r7, #0]
 8004e38:	429a      	cmp	r2, r3
 8004e3a:	d001      	beq.n	8004e40 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004e3c:	2301      	movs	r3, #1
 8004e3e:	e184      	b.n	800514a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f003 0304 	and.w	r3, r3, #4
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d010      	beq.n	8004e6e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	691a      	ldr	r2, [r3, #16]
 8004e50:	4b7b      	ldr	r3, [pc, #492]	@ (8005040 <HAL_RCC_ClockConfig+0x244>)
 8004e52:	699b      	ldr	r3, [r3, #24]
 8004e54:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004e58:	429a      	cmp	r2, r3
 8004e5a:	d908      	bls.n	8004e6e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004e5c:	4b78      	ldr	r3, [pc, #480]	@ (8005040 <HAL_RCC_ClockConfig+0x244>)
 8004e5e:	699b      	ldr	r3, [r3, #24]
 8004e60:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	691b      	ldr	r3, [r3, #16]
 8004e68:	4975      	ldr	r1, [pc, #468]	@ (8005040 <HAL_RCC_ClockConfig+0x244>)
 8004e6a:	4313      	orrs	r3, r2
 8004e6c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f003 0308 	and.w	r3, r3, #8
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d010      	beq.n	8004e9c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	695a      	ldr	r2, [r3, #20]
 8004e7e:	4b70      	ldr	r3, [pc, #448]	@ (8005040 <HAL_RCC_ClockConfig+0x244>)
 8004e80:	69db      	ldr	r3, [r3, #28]
 8004e82:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004e86:	429a      	cmp	r2, r3
 8004e88:	d908      	bls.n	8004e9c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004e8a:	4b6d      	ldr	r3, [pc, #436]	@ (8005040 <HAL_RCC_ClockConfig+0x244>)
 8004e8c:	69db      	ldr	r3, [r3, #28]
 8004e8e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	695b      	ldr	r3, [r3, #20]
 8004e96:	496a      	ldr	r1, [pc, #424]	@ (8005040 <HAL_RCC_ClockConfig+0x244>)
 8004e98:	4313      	orrs	r3, r2
 8004e9a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f003 0310 	and.w	r3, r3, #16
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d010      	beq.n	8004eca <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	699a      	ldr	r2, [r3, #24]
 8004eac:	4b64      	ldr	r3, [pc, #400]	@ (8005040 <HAL_RCC_ClockConfig+0x244>)
 8004eae:	69db      	ldr	r3, [r3, #28]
 8004eb0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004eb4:	429a      	cmp	r2, r3
 8004eb6:	d908      	bls.n	8004eca <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004eb8:	4b61      	ldr	r3, [pc, #388]	@ (8005040 <HAL_RCC_ClockConfig+0x244>)
 8004eba:	69db      	ldr	r3, [r3, #28]
 8004ebc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	699b      	ldr	r3, [r3, #24]
 8004ec4:	495e      	ldr	r1, [pc, #376]	@ (8005040 <HAL_RCC_ClockConfig+0x244>)
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f003 0320 	and.w	r3, r3, #32
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d010      	beq.n	8004ef8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	69da      	ldr	r2, [r3, #28]
 8004eda:	4b59      	ldr	r3, [pc, #356]	@ (8005040 <HAL_RCC_ClockConfig+0x244>)
 8004edc:	6a1b      	ldr	r3, [r3, #32]
 8004ede:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004ee2:	429a      	cmp	r2, r3
 8004ee4:	d908      	bls.n	8004ef8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004ee6:	4b56      	ldr	r3, [pc, #344]	@ (8005040 <HAL_RCC_ClockConfig+0x244>)
 8004ee8:	6a1b      	ldr	r3, [r3, #32]
 8004eea:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	69db      	ldr	r3, [r3, #28]
 8004ef2:	4953      	ldr	r1, [pc, #332]	@ (8005040 <HAL_RCC_ClockConfig+0x244>)
 8004ef4:	4313      	orrs	r3, r2
 8004ef6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f003 0302 	and.w	r3, r3, #2
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d010      	beq.n	8004f26 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	68da      	ldr	r2, [r3, #12]
 8004f08:	4b4d      	ldr	r3, [pc, #308]	@ (8005040 <HAL_RCC_ClockConfig+0x244>)
 8004f0a:	699b      	ldr	r3, [r3, #24]
 8004f0c:	f003 030f 	and.w	r3, r3, #15
 8004f10:	429a      	cmp	r2, r3
 8004f12:	d908      	bls.n	8004f26 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f14:	4b4a      	ldr	r3, [pc, #296]	@ (8005040 <HAL_RCC_ClockConfig+0x244>)
 8004f16:	699b      	ldr	r3, [r3, #24]
 8004f18:	f023 020f 	bic.w	r2, r3, #15
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	68db      	ldr	r3, [r3, #12]
 8004f20:	4947      	ldr	r1, [pc, #284]	@ (8005040 <HAL_RCC_ClockConfig+0x244>)
 8004f22:	4313      	orrs	r3, r2
 8004f24:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f003 0301 	and.w	r3, r3, #1
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d055      	beq.n	8004fde <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004f32:	4b43      	ldr	r3, [pc, #268]	@ (8005040 <HAL_RCC_ClockConfig+0x244>)
 8004f34:	699b      	ldr	r3, [r3, #24]
 8004f36:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	689b      	ldr	r3, [r3, #8]
 8004f3e:	4940      	ldr	r1, [pc, #256]	@ (8005040 <HAL_RCC_ClockConfig+0x244>)
 8004f40:	4313      	orrs	r3, r2
 8004f42:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	685b      	ldr	r3, [r3, #4]
 8004f48:	2b02      	cmp	r3, #2
 8004f4a:	d107      	bne.n	8004f5c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004f4c:	4b3c      	ldr	r3, [pc, #240]	@ (8005040 <HAL_RCC_ClockConfig+0x244>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d121      	bne.n	8004f9c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004f58:	2301      	movs	r3, #1
 8004f5a:	e0f6      	b.n	800514a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	685b      	ldr	r3, [r3, #4]
 8004f60:	2b03      	cmp	r3, #3
 8004f62:	d107      	bne.n	8004f74 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004f64:	4b36      	ldr	r3, [pc, #216]	@ (8005040 <HAL_RCC_ClockConfig+0x244>)
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d115      	bne.n	8004f9c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004f70:	2301      	movs	r3, #1
 8004f72:	e0ea      	b.n	800514a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	685b      	ldr	r3, [r3, #4]
 8004f78:	2b01      	cmp	r3, #1
 8004f7a:	d107      	bne.n	8004f8c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004f7c:	4b30      	ldr	r3, [pc, #192]	@ (8005040 <HAL_RCC_ClockConfig+0x244>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d109      	bne.n	8004f9c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004f88:	2301      	movs	r3, #1
 8004f8a:	e0de      	b.n	800514a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004f8c:	4b2c      	ldr	r3, [pc, #176]	@ (8005040 <HAL_RCC_ClockConfig+0x244>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f003 0304 	and.w	r3, r3, #4
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d101      	bne.n	8004f9c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004f98:	2301      	movs	r3, #1
 8004f9a:	e0d6      	b.n	800514a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004f9c:	4b28      	ldr	r3, [pc, #160]	@ (8005040 <HAL_RCC_ClockConfig+0x244>)
 8004f9e:	691b      	ldr	r3, [r3, #16]
 8004fa0:	f023 0207 	bic.w	r2, r3, #7
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	685b      	ldr	r3, [r3, #4]
 8004fa8:	4925      	ldr	r1, [pc, #148]	@ (8005040 <HAL_RCC_ClockConfig+0x244>)
 8004faa:	4313      	orrs	r3, r2
 8004fac:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004fae:	f7fc fdb7 	bl	8001b20 <HAL_GetTick>
 8004fb2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fb4:	e00a      	b.n	8004fcc <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004fb6:	f7fc fdb3 	bl	8001b20 <HAL_GetTick>
 8004fba:	4602      	mov	r2, r0
 8004fbc:	697b      	ldr	r3, [r7, #20]
 8004fbe:	1ad3      	subs	r3, r2, r3
 8004fc0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d901      	bls.n	8004fcc <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8004fc8:	2303      	movs	r3, #3
 8004fca:	e0be      	b.n	800514a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fcc:	4b1c      	ldr	r3, [pc, #112]	@ (8005040 <HAL_RCC_ClockConfig+0x244>)
 8004fce:	691b      	ldr	r3, [r3, #16]
 8004fd0:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	685b      	ldr	r3, [r3, #4]
 8004fd8:	00db      	lsls	r3, r3, #3
 8004fda:	429a      	cmp	r2, r3
 8004fdc:	d1eb      	bne.n	8004fb6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f003 0302 	and.w	r3, r3, #2
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d010      	beq.n	800500c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	68da      	ldr	r2, [r3, #12]
 8004fee:	4b14      	ldr	r3, [pc, #80]	@ (8005040 <HAL_RCC_ClockConfig+0x244>)
 8004ff0:	699b      	ldr	r3, [r3, #24]
 8004ff2:	f003 030f 	and.w	r3, r3, #15
 8004ff6:	429a      	cmp	r2, r3
 8004ff8:	d208      	bcs.n	800500c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ffa:	4b11      	ldr	r3, [pc, #68]	@ (8005040 <HAL_RCC_ClockConfig+0x244>)
 8004ffc:	699b      	ldr	r3, [r3, #24]
 8004ffe:	f023 020f 	bic.w	r2, r3, #15
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	68db      	ldr	r3, [r3, #12]
 8005006:	490e      	ldr	r1, [pc, #56]	@ (8005040 <HAL_RCC_ClockConfig+0x244>)
 8005008:	4313      	orrs	r3, r2
 800500a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800500c:	4b0b      	ldr	r3, [pc, #44]	@ (800503c <HAL_RCC_ClockConfig+0x240>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f003 030f 	and.w	r3, r3, #15
 8005014:	683a      	ldr	r2, [r7, #0]
 8005016:	429a      	cmp	r2, r3
 8005018:	d214      	bcs.n	8005044 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800501a:	4b08      	ldr	r3, [pc, #32]	@ (800503c <HAL_RCC_ClockConfig+0x240>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f023 020f 	bic.w	r2, r3, #15
 8005022:	4906      	ldr	r1, [pc, #24]	@ (800503c <HAL_RCC_ClockConfig+0x240>)
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	4313      	orrs	r3, r2
 8005028:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800502a:	4b04      	ldr	r3, [pc, #16]	@ (800503c <HAL_RCC_ClockConfig+0x240>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f003 030f 	and.w	r3, r3, #15
 8005032:	683a      	ldr	r2, [r7, #0]
 8005034:	429a      	cmp	r2, r3
 8005036:	d005      	beq.n	8005044 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005038:	2301      	movs	r3, #1
 800503a:	e086      	b.n	800514a <HAL_RCC_ClockConfig+0x34e>
 800503c:	52002000 	.word	0x52002000
 8005040:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f003 0304 	and.w	r3, r3, #4
 800504c:	2b00      	cmp	r3, #0
 800504e:	d010      	beq.n	8005072 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	691a      	ldr	r2, [r3, #16]
 8005054:	4b3f      	ldr	r3, [pc, #252]	@ (8005154 <HAL_RCC_ClockConfig+0x358>)
 8005056:	699b      	ldr	r3, [r3, #24]
 8005058:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800505c:	429a      	cmp	r2, r3
 800505e:	d208      	bcs.n	8005072 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005060:	4b3c      	ldr	r3, [pc, #240]	@ (8005154 <HAL_RCC_ClockConfig+0x358>)
 8005062:	699b      	ldr	r3, [r3, #24]
 8005064:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	691b      	ldr	r3, [r3, #16]
 800506c:	4939      	ldr	r1, [pc, #228]	@ (8005154 <HAL_RCC_ClockConfig+0x358>)
 800506e:	4313      	orrs	r3, r2
 8005070:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f003 0308 	and.w	r3, r3, #8
 800507a:	2b00      	cmp	r3, #0
 800507c:	d010      	beq.n	80050a0 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	695a      	ldr	r2, [r3, #20]
 8005082:	4b34      	ldr	r3, [pc, #208]	@ (8005154 <HAL_RCC_ClockConfig+0x358>)
 8005084:	69db      	ldr	r3, [r3, #28]
 8005086:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800508a:	429a      	cmp	r2, r3
 800508c:	d208      	bcs.n	80050a0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800508e:	4b31      	ldr	r3, [pc, #196]	@ (8005154 <HAL_RCC_ClockConfig+0x358>)
 8005090:	69db      	ldr	r3, [r3, #28]
 8005092:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	695b      	ldr	r3, [r3, #20]
 800509a:	492e      	ldr	r1, [pc, #184]	@ (8005154 <HAL_RCC_ClockConfig+0x358>)
 800509c:	4313      	orrs	r3, r2
 800509e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f003 0310 	and.w	r3, r3, #16
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d010      	beq.n	80050ce <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	699a      	ldr	r2, [r3, #24]
 80050b0:	4b28      	ldr	r3, [pc, #160]	@ (8005154 <HAL_RCC_ClockConfig+0x358>)
 80050b2:	69db      	ldr	r3, [r3, #28]
 80050b4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80050b8:	429a      	cmp	r2, r3
 80050ba:	d208      	bcs.n	80050ce <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80050bc:	4b25      	ldr	r3, [pc, #148]	@ (8005154 <HAL_RCC_ClockConfig+0x358>)
 80050be:	69db      	ldr	r3, [r3, #28]
 80050c0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	699b      	ldr	r3, [r3, #24]
 80050c8:	4922      	ldr	r1, [pc, #136]	@ (8005154 <HAL_RCC_ClockConfig+0x358>)
 80050ca:	4313      	orrs	r3, r2
 80050cc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f003 0320 	and.w	r3, r3, #32
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d010      	beq.n	80050fc <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	69da      	ldr	r2, [r3, #28]
 80050de:	4b1d      	ldr	r3, [pc, #116]	@ (8005154 <HAL_RCC_ClockConfig+0x358>)
 80050e0:	6a1b      	ldr	r3, [r3, #32]
 80050e2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80050e6:	429a      	cmp	r2, r3
 80050e8:	d208      	bcs.n	80050fc <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80050ea:	4b1a      	ldr	r3, [pc, #104]	@ (8005154 <HAL_RCC_ClockConfig+0x358>)
 80050ec:	6a1b      	ldr	r3, [r3, #32]
 80050ee:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	69db      	ldr	r3, [r3, #28]
 80050f6:	4917      	ldr	r1, [pc, #92]	@ (8005154 <HAL_RCC_ClockConfig+0x358>)
 80050f8:	4313      	orrs	r3, r2
 80050fa:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80050fc:	f000 f834 	bl	8005168 <HAL_RCC_GetSysClockFreq>
 8005100:	4602      	mov	r2, r0
 8005102:	4b14      	ldr	r3, [pc, #80]	@ (8005154 <HAL_RCC_ClockConfig+0x358>)
 8005104:	699b      	ldr	r3, [r3, #24]
 8005106:	0a1b      	lsrs	r3, r3, #8
 8005108:	f003 030f 	and.w	r3, r3, #15
 800510c:	4912      	ldr	r1, [pc, #72]	@ (8005158 <HAL_RCC_ClockConfig+0x35c>)
 800510e:	5ccb      	ldrb	r3, [r1, r3]
 8005110:	f003 031f 	and.w	r3, r3, #31
 8005114:	fa22 f303 	lsr.w	r3, r2, r3
 8005118:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800511a:	4b0e      	ldr	r3, [pc, #56]	@ (8005154 <HAL_RCC_ClockConfig+0x358>)
 800511c:	699b      	ldr	r3, [r3, #24]
 800511e:	f003 030f 	and.w	r3, r3, #15
 8005122:	4a0d      	ldr	r2, [pc, #52]	@ (8005158 <HAL_RCC_ClockConfig+0x35c>)
 8005124:	5cd3      	ldrb	r3, [r2, r3]
 8005126:	f003 031f 	and.w	r3, r3, #31
 800512a:	693a      	ldr	r2, [r7, #16]
 800512c:	fa22 f303 	lsr.w	r3, r2, r3
 8005130:	4a0a      	ldr	r2, [pc, #40]	@ (800515c <HAL_RCC_ClockConfig+0x360>)
 8005132:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005134:	4a0a      	ldr	r2, [pc, #40]	@ (8005160 <HAL_RCC_ClockConfig+0x364>)
 8005136:	693b      	ldr	r3, [r7, #16]
 8005138:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800513a:	4b0a      	ldr	r3, [pc, #40]	@ (8005164 <HAL_RCC_ClockConfig+0x368>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	4618      	mov	r0, r3
 8005140:	f7fc fca4 	bl	8001a8c <HAL_InitTick>
 8005144:	4603      	mov	r3, r0
 8005146:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005148:	7bfb      	ldrb	r3, [r7, #15]
}
 800514a:	4618      	mov	r0, r3
 800514c:	3718      	adds	r7, #24
 800514e:	46bd      	mov	sp, r7
 8005150:	bd80      	pop	{r7, pc}
 8005152:	bf00      	nop
 8005154:	58024400 	.word	0x58024400
 8005158:	08008014 	.word	0x08008014
 800515c:	24000004 	.word	0x24000004
 8005160:	24000000 	.word	0x24000000
 8005164:	24000024 	.word	0x24000024

08005168 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005168:	b480      	push	{r7}
 800516a:	b089      	sub	sp, #36	@ 0x24
 800516c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800516e:	4bb3      	ldr	r3, [pc, #716]	@ (800543c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005170:	691b      	ldr	r3, [r3, #16]
 8005172:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005176:	2b18      	cmp	r3, #24
 8005178:	f200 8155 	bhi.w	8005426 <HAL_RCC_GetSysClockFreq+0x2be>
 800517c:	a201      	add	r2, pc, #4	@ (adr r2, 8005184 <HAL_RCC_GetSysClockFreq+0x1c>)
 800517e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005182:	bf00      	nop
 8005184:	080051e9 	.word	0x080051e9
 8005188:	08005427 	.word	0x08005427
 800518c:	08005427 	.word	0x08005427
 8005190:	08005427 	.word	0x08005427
 8005194:	08005427 	.word	0x08005427
 8005198:	08005427 	.word	0x08005427
 800519c:	08005427 	.word	0x08005427
 80051a0:	08005427 	.word	0x08005427
 80051a4:	0800520f 	.word	0x0800520f
 80051a8:	08005427 	.word	0x08005427
 80051ac:	08005427 	.word	0x08005427
 80051b0:	08005427 	.word	0x08005427
 80051b4:	08005427 	.word	0x08005427
 80051b8:	08005427 	.word	0x08005427
 80051bc:	08005427 	.word	0x08005427
 80051c0:	08005427 	.word	0x08005427
 80051c4:	08005215 	.word	0x08005215
 80051c8:	08005427 	.word	0x08005427
 80051cc:	08005427 	.word	0x08005427
 80051d0:	08005427 	.word	0x08005427
 80051d4:	08005427 	.word	0x08005427
 80051d8:	08005427 	.word	0x08005427
 80051dc:	08005427 	.word	0x08005427
 80051e0:	08005427 	.word	0x08005427
 80051e4:	0800521b 	.word	0x0800521b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80051e8:	4b94      	ldr	r3, [pc, #592]	@ (800543c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f003 0320 	and.w	r3, r3, #32
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d009      	beq.n	8005208 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80051f4:	4b91      	ldr	r3, [pc, #580]	@ (800543c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	08db      	lsrs	r3, r3, #3
 80051fa:	f003 0303 	and.w	r3, r3, #3
 80051fe:	4a90      	ldr	r2, [pc, #576]	@ (8005440 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005200:	fa22 f303 	lsr.w	r3, r2, r3
 8005204:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8005206:	e111      	b.n	800542c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005208:	4b8d      	ldr	r3, [pc, #564]	@ (8005440 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800520a:	61bb      	str	r3, [r7, #24]
      break;
 800520c:	e10e      	b.n	800542c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800520e:	4b8d      	ldr	r3, [pc, #564]	@ (8005444 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005210:	61bb      	str	r3, [r7, #24]
      break;
 8005212:	e10b      	b.n	800542c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8005214:	4b8c      	ldr	r3, [pc, #560]	@ (8005448 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005216:	61bb      	str	r3, [r7, #24]
      break;
 8005218:	e108      	b.n	800542c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800521a:	4b88      	ldr	r3, [pc, #544]	@ (800543c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800521c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800521e:	f003 0303 	and.w	r3, r3, #3
 8005222:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005224:	4b85      	ldr	r3, [pc, #532]	@ (800543c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005226:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005228:	091b      	lsrs	r3, r3, #4
 800522a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800522e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005230:	4b82      	ldr	r3, [pc, #520]	@ (800543c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005232:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005234:	f003 0301 	and.w	r3, r3, #1
 8005238:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800523a:	4b80      	ldr	r3, [pc, #512]	@ (800543c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800523c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800523e:	08db      	lsrs	r3, r3, #3
 8005240:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005244:	68fa      	ldr	r2, [r7, #12]
 8005246:	fb02 f303 	mul.w	r3, r2, r3
 800524a:	ee07 3a90 	vmov	s15, r3
 800524e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005252:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8005256:	693b      	ldr	r3, [r7, #16]
 8005258:	2b00      	cmp	r3, #0
 800525a:	f000 80e1 	beq.w	8005420 <HAL_RCC_GetSysClockFreq+0x2b8>
 800525e:	697b      	ldr	r3, [r7, #20]
 8005260:	2b02      	cmp	r3, #2
 8005262:	f000 8083 	beq.w	800536c <HAL_RCC_GetSysClockFreq+0x204>
 8005266:	697b      	ldr	r3, [r7, #20]
 8005268:	2b02      	cmp	r3, #2
 800526a:	f200 80a1 	bhi.w	80053b0 <HAL_RCC_GetSysClockFreq+0x248>
 800526e:	697b      	ldr	r3, [r7, #20]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d003      	beq.n	800527c <HAL_RCC_GetSysClockFreq+0x114>
 8005274:	697b      	ldr	r3, [r7, #20]
 8005276:	2b01      	cmp	r3, #1
 8005278:	d056      	beq.n	8005328 <HAL_RCC_GetSysClockFreq+0x1c0>
 800527a:	e099      	b.n	80053b0 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800527c:	4b6f      	ldr	r3, [pc, #444]	@ (800543c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f003 0320 	and.w	r3, r3, #32
 8005284:	2b00      	cmp	r3, #0
 8005286:	d02d      	beq.n	80052e4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005288:	4b6c      	ldr	r3, [pc, #432]	@ (800543c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	08db      	lsrs	r3, r3, #3
 800528e:	f003 0303 	and.w	r3, r3, #3
 8005292:	4a6b      	ldr	r2, [pc, #428]	@ (8005440 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005294:	fa22 f303 	lsr.w	r3, r2, r3
 8005298:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	ee07 3a90 	vmov	s15, r3
 80052a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052a4:	693b      	ldr	r3, [r7, #16]
 80052a6:	ee07 3a90 	vmov	s15, r3
 80052aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80052b2:	4b62      	ldr	r3, [pc, #392]	@ (800543c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80052b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052ba:	ee07 3a90 	vmov	s15, r3
 80052be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052c2:	ed97 6a02 	vldr	s12, [r7, #8]
 80052c6:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800544c <HAL_RCC_GetSysClockFreq+0x2e4>
 80052ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80052ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80052d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80052d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80052da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052de:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80052e2:	e087      	b.n	80053f4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80052e4:	693b      	ldr	r3, [r7, #16]
 80052e6:	ee07 3a90 	vmov	s15, r3
 80052ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052ee:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8005450 <HAL_RCC_GetSysClockFreq+0x2e8>
 80052f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80052f6:	4b51      	ldr	r3, [pc, #324]	@ (800543c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80052f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052fe:	ee07 3a90 	vmov	s15, r3
 8005302:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005306:	ed97 6a02 	vldr	s12, [r7, #8]
 800530a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800544c <HAL_RCC_GetSysClockFreq+0x2e4>
 800530e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005312:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005316:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800531a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800531e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005322:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005326:	e065      	b.n	80053f4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005328:	693b      	ldr	r3, [r7, #16]
 800532a:	ee07 3a90 	vmov	s15, r3
 800532e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005332:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8005454 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005336:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800533a:	4b40      	ldr	r3, [pc, #256]	@ (800543c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800533c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800533e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005342:	ee07 3a90 	vmov	s15, r3
 8005346:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800534a:	ed97 6a02 	vldr	s12, [r7, #8]
 800534e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800544c <HAL_RCC_GetSysClockFreq+0x2e4>
 8005352:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005356:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800535a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800535e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005362:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005366:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800536a:	e043      	b.n	80053f4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800536c:	693b      	ldr	r3, [r7, #16]
 800536e:	ee07 3a90 	vmov	s15, r3
 8005372:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005376:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8005458 <HAL_RCC_GetSysClockFreq+0x2f0>
 800537a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800537e:	4b2f      	ldr	r3, [pc, #188]	@ (800543c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005380:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005382:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005386:	ee07 3a90 	vmov	s15, r3
 800538a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800538e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005392:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800544c <HAL_RCC_GetSysClockFreq+0x2e4>
 8005396:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800539a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800539e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80053a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80053a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053aa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80053ae:	e021      	b.n	80053f4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80053b0:	693b      	ldr	r3, [r7, #16]
 80053b2:	ee07 3a90 	vmov	s15, r3
 80053b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053ba:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8005454 <HAL_RCC_GetSysClockFreq+0x2ec>
 80053be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053c2:	4b1e      	ldr	r3, [pc, #120]	@ (800543c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80053c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053ca:	ee07 3a90 	vmov	s15, r3
 80053ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053d2:	ed97 6a02 	vldr	s12, [r7, #8]
 80053d6:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800544c <HAL_RCC_GetSysClockFreq+0x2e4>
 80053da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80053de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80053e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80053e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80053ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053ee:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80053f2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80053f4:	4b11      	ldr	r3, [pc, #68]	@ (800543c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80053f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053f8:	0a5b      	lsrs	r3, r3, #9
 80053fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80053fe:	3301      	adds	r3, #1
 8005400:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	ee07 3a90 	vmov	s15, r3
 8005408:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800540c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005410:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005414:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005418:	ee17 3a90 	vmov	r3, s15
 800541c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800541e:	e005      	b.n	800542c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8005420:	2300      	movs	r3, #0
 8005422:	61bb      	str	r3, [r7, #24]
      break;
 8005424:	e002      	b.n	800542c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8005426:	4b07      	ldr	r3, [pc, #28]	@ (8005444 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005428:	61bb      	str	r3, [r7, #24]
      break;
 800542a:	bf00      	nop
  }

  return sysclockfreq;
 800542c:	69bb      	ldr	r3, [r7, #24]
}
 800542e:	4618      	mov	r0, r3
 8005430:	3724      	adds	r7, #36	@ 0x24
 8005432:	46bd      	mov	sp, r7
 8005434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005438:	4770      	bx	lr
 800543a:	bf00      	nop
 800543c:	58024400 	.word	0x58024400
 8005440:	03d09000 	.word	0x03d09000
 8005444:	003d0900 	.word	0x003d0900
 8005448:	017d7840 	.word	0x017d7840
 800544c:	46000000 	.word	0x46000000
 8005450:	4c742400 	.word	0x4c742400
 8005454:	4a742400 	.word	0x4a742400
 8005458:	4bbebc20 	.word	0x4bbebc20

0800545c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b082      	sub	sp, #8
 8005460:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005462:	f7ff fe81 	bl	8005168 <HAL_RCC_GetSysClockFreq>
 8005466:	4602      	mov	r2, r0
 8005468:	4b10      	ldr	r3, [pc, #64]	@ (80054ac <HAL_RCC_GetHCLKFreq+0x50>)
 800546a:	699b      	ldr	r3, [r3, #24]
 800546c:	0a1b      	lsrs	r3, r3, #8
 800546e:	f003 030f 	and.w	r3, r3, #15
 8005472:	490f      	ldr	r1, [pc, #60]	@ (80054b0 <HAL_RCC_GetHCLKFreq+0x54>)
 8005474:	5ccb      	ldrb	r3, [r1, r3]
 8005476:	f003 031f 	and.w	r3, r3, #31
 800547a:	fa22 f303 	lsr.w	r3, r2, r3
 800547e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005480:	4b0a      	ldr	r3, [pc, #40]	@ (80054ac <HAL_RCC_GetHCLKFreq+0x50>)
 8005482:	699b      	ldr	r3, [r3, #24]
 8005484:	f003 030f 	and.w	r3, r3, #15
 8005488:	4a09      	ldr	r2, [pc, #36]	@ (80054b0 <HAL_RCC_GetHCLKFreq+0x54>)
 800548a:	5cd3      	ldrb	r3, [r2, r3]
 800548c:	f003 031f 	and.w	r3, r3, #31
 8005490:	687a      	ldr	r2, [r7, #4]
 8005492:	fa22 f303 	lsr.w	r3, r2, r3
 8005496:	4a07      	ldr	r2, [pc, #28]	@ (80054b4 <HAL_RCC_GetHCLKFreq+0x58>)
 8005498:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800549a:	4a07      	ldr	r2, [pc, #28]	@ (80054b8 <HAL_RCC_GetHCLKFreq+0x5c>)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80054a0:	4b04      	ldr	r3, [pc, #16]	@ (80054b4 <HAL_RCC_GetHCLKFreq+0x58>)
 80054a2:	681b      	ldr	r3, [r3, #0]
}
 80054a4:	4618      	mov	r0, r3
 80054a6:	3708      	adds	r7, #8
 80054a8:	46bd      	mov	sp, r7
 80054aa:	bd80      	pop	{r7, pc}
 80054ac:	58024400 	.word	0x58024400
 80054b0:	08008014 	.word	0x08008014
 80054b4:	24000004 	.word	0x24000004
 80054b8:	24000000 	.word	0x24000000

080054bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80054c0:	f7ff ffcc 	bl	800545c <HAL_RCC_GetHCLKFreq>
 80054c4:	4602      	mov	r2, r0
 80054c6:	4b06      	ldr	r3, [pc, #24]	@ (80054e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80054c8:	69db      	ldr	r3, [r3, #28]
 80054ca:	091b      	lsrs	r3, r3, #4
 80054cc:	f003 0307 	and.w	r3, r3, #7
 80054d0:	4904      	ldr	r1, [pc, #16]	@ (80054e4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80054d2:	5ccb      	ldrb	r3, [r1, r3]
 80054d4:	f003 031f 	and.w	r3, r3, #31
 80054d8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80054dc:	4618      	mov	r0, r3
 80054de:	bd80      	pop	{r7, pc}
 80054e0:	58024400 	.word	0x58024400
 80054e4:	08008014 	.word	0x08008014

080054e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80054ec:	f7ff ffb6 	bl	800545c <HAL_RCC_GetHCLKFreq>
 80054f0:	4602      	mov	r2, r0
 80054f2:	4b06      	ldr	r3, [pc, #24]	@ (800550c <HAL_RCC_GetPCLK2Freq+0x24>)
 80054f4:	69db      	ldr	r3, [r3, #28]
 80054f6:	0a1b      	lsrs	r3, r3, #8
 80054f8:	f003 0307 	and.w	r3, r3, #7
 80054fc:	4904      	ldr	r1, [pc, #16]	@ (8005510 <HAL_RCC_GetPCLK2Freq+0x28>)
 80054fe:	5ccb      	ldrb	r3, [r1, r3]
 8005500:	f003 031f 	and.w	r3, r3, #31
 8005504:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005508:	4618      	mov	r0, r3
 800550a:	bd80      	pop	{r7, pc}
 800550c:	58024400 	.word	0x58024400
 8005510:	08008014 	.word	0x08008014

08005514 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005514:	b580      	push	{r7, lr}
 8005516:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005518:	f7ff ffa0 	bl	800545c <HAL_RCC_GetHCLKFreq>
 800551c:	4602      	mov	r2, r0
 800551e:	4b06      	ldr	r3, [pc, #24]	@ (8005538 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005520:	6a1b      	ldr	r3, [r3, #32]
 8005522:	091b      	lsrs	r3, r3, #4
 8005524:	f003 0307 	and.w	r3, r3, #7
 8005528:	4904      	ldr	r1, [pc, #16]	@ (800553c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800552a:	5ccb      	ldrb	r3, [r1, r3]
 800552c:	f003 031f 	and.w	r3, r3, #31
 8005530:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005534:	4618      	mov	r0, r3
 8005536:	bd80      	pop	{r7, pc}
 8005538:	58024400 	.word	0x58024400
 800553c:	08008014 	.word	0x08008014

08005540 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8005540:	b480      	push	{r7}
 8005542:	b089      	sub	sp, #36	@ 0x24
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005548:	4ba1      	ldr	r3, [pc, #644]	@ (80057d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800554a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800554c:	f003 0303 	and.w	r3, r3, #3
 8005550:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8005552:	4b9f      	ldr	r3, [pc, #636]	@ (80057d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005554:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005556:	0b1b      	lsrs	r3, r3, #12
 8005558:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800555c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800555e:	4b9c      	ldr	r3, [pc, #624]	@ (80057d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005560:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005562:	091b      	lsrs	r3, r3, #4
 8005564:	f003 0301 	and.w	r3, r3, #1
 8005568:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800556a:	4b99      	ldr	r3, [pc, #612]	@ (80057d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800556c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800556e:	08db      	lsrs	r3, r3, #3
 8005570:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005574:	693a      	ldr	r2, [r7, #16]
 8005576:	fb02 f303 	mul.w	r3, r2, r3
 800557a:	ee07 3a90 	vmov	s15, r3
 800557e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005582:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005586:	697b      	ldr	r3, [r7, #20]
 8005588:	2b00      	cmp	r3, #0
 800558a:	f000 8111 	beq.w	80057b0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800558e:	69bb      	ldr	r3, [r7, #24]
 8005590:	2b02      	cmp	r3, #2
 8005592:	f000 8083 	beq.w	800569c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005596:	69bb      	ldr	r3, [r7, #24]
 8005598:	2b02      	cmp	r3, #2
 800559a:	f200 80a1 	bhi.w	80056e0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800559e:	69bb      	ldr	r3, [r7, #24]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d003      	beq.n	80055ac <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80055a4:	69bb      	ldr	r3, [r7, #24]
 80055a6:	2b01      	cmp	r3, #1
 80055a8:	d056      	beq.n	8005658 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80055aa:	e099      	b.n	80056e0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80055ac:	4b88      	ldr	r3, [pc, #544]	@ (80057d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f003 0320 	and.w	r3, r3, #32
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d02d      	beq.n	8005614 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80055b8:	4b85      	ldr	r3, [pc, #532]	@ (80057d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	08db      	lsrs	r3, r3, #3
 80055be:	f003 0303 	and.w	r3, r3, #3
 80055c2:	4a84      	ldr	r2, [pc, #528]	@ (80057d4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80055c4:	fa22 f303 	lsr.w	r3, r2, r3
 80055c8:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80055ca:	68bb      	ldr	r3, [r7, #8]
 80055cc:	ee07 3a90 	vmov	s15, r3
 80055d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055d4:	697b      	ldr	r3, [r7, #20]
 80055d6:	ee07 3a90 	vmov	s15, r3
 80055da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80055e2:	4b7b      	ldr	r3, [pc, #492]	@ (80057d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80055e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055ea:	ee07 3a90 	vmov	s15, r3
 80055ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80055f6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80057d8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80055fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80055fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005602:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005606:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800560a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800560e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005612:	e087      	b.n	8005724 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005614:	697b      	ldr	r3, [r7, #20]
 8005616:	ee07 3a90 	vmov	s15, r3
 800561a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800561e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80057dc <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005622:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005626:	4b6a      	ldr	r3, [pc, #424]	@ (80057d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005628:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800562a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800562e:	ee07 3a90 	vmov	s15, r3
 8005632:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005636:	ed97 6a03 	vldr	s12, [r7, #12]
 800563a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80057d8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800563e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005642:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005646:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800564a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800564e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005652:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005656:	e065      	b.n	8005724 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005658:	697b      	ldr	r3, [r7, #20]
 800565a:	ee07 3a90 	vmov	s15, r3
 800565e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005662:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80057e0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005666:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800566a:	4b59      	ldr	r3, [pc, #356]	@ (80057d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800566c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800566e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005672:	ee07 3a90 	vmov	s15, r3
 8005676:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800567a:	ed97 6a03 	vldr	s12, [r7, #12]
 800567e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80057d8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005682:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005686:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800568a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800568e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005692:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005696:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800569a:	e043      	b.n	8005724 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800569c:	697b      	ldr	r3, [r7, #20]
 800569e:	ee07 3a90 	vmov	s15, r3
 80056a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056a6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80057e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80056aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056ae:	4b48      	ldr	r3, [pc, #288]	@ (80057d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80056b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056b6:	ee07 3a90 	vmov	s15, r3
 80056ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056be:	ed97 6a03 	vldr	s12, [r7, #12]
 80056c2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80057d8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80056c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80056ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80056ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80056d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80056d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80056de:	e021      	b.n	8005724 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80056e0:	697b      	ldr	r3, [r7, #20]
 80056e2:	ee07 3a90 	vmov	s15, r3
 80056e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056ea:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80057e0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80056ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056f2:	4b37      	ldr	r3, [pc, #220]	@ (80057d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80056f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056fa:	ee07 3a90 	vmov	s15, r3
 80056fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005702:	ed97 6a03 	vldr	s12, [r7, #12]
 8005706:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80057d8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800570a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800570e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005712:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005716:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800571a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800571e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005722:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8005724:	4b2a      	ldr	r3, [pc, #168]	@ (80057d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005726:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005728:	0a5b      	lsrs	r3, r3, #9
 800572a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800572e:	ee07 3a90 	vmov	s15, r3
 8005732:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005736:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800573a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800573e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005742:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005746:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800574a:	ee17 2a90 	vmov	r2, s15
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8005752:	4b1f      	ldr	r3, [pc, #124]	@ (80057d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005754:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005756:	0c1b      	lsrs	r3, r3, #16
 8005758:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800575c:	ee07 3a90 	vmov	s15, r3
 8005760:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005764:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005768:	ee37 7a87 	vadd.f32	s14, s15, s14
 800576c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005770:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005774:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005778:	ee17 2a90 	vmov	r2, s15
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8005780:	4b13      	ldr	r3, [pc, #76]	@ (80057d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005782:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005784:	0e1b      	lsrs	r3, r3, #24
 8005786:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800578a:	ee07 3a90 	vmov	s15, r3
 800578e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005792:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005796:	ee37 7a87 	vadd.f32	s14, s15, s14
 800579a:	edd7 6a07 	vldr	s13, [r7, #28]
 800579e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80057a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80057a6:	ee17 2a90 	vmov	r2, s15
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80057ae:	e008      	b.n	80057c2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2200      	movs	r2, #0
 80057b4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2200      	movs	r2, #0
 80057ba:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2200      	movs	r2, #0
 80057c0:	609a      	str	r2, [r3, #8]
}
 80057c2:	bf00      	nop
 80057c4:	3724      	adds	r7, #36	@ 0x24
 80057c6:	46bd      	mov	sp, r7
 80057c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057cc:	4770      	bx	lr
 80057ce:	bf00      	nop
 80057d0:	58024400 	.word	0x58024400
 80057d4:	03d09000 	.word	0x03d09000
 80057d8:	46000000 	.word	0x46000000
 80057dc:	4c742400 	.word	0x4c742400
 80057e0:	4a742400 	.word	0x4a742400
 80057e4:	4bbebc20 	.word	0x4bbebc20

080057e8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80057e8:	b480      	push	{r7}
 80057ea:	b089      	sub	sp, #36	@ 0x24
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80057f0:	4ba1      	ldr	r3, [pc, #644]	@ (8005a78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80057f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057f4:	f003 0303 	and.w	r3, r3, #3
 80057f8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80057fa:	4b9f      	ldr	r3, [pc, #636]	@ (8005a78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80057fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057fe:	0d1b      	lsrs	r3, r3, #20
 8005800:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005804:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005806:	4b9c      	ldr	r3, [pc, #624]	@ (8005a78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005808:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800580a:	0a1b      	lsrs	r3, r3, #8
 800580c:	f003 0301 	and.w	r3, r3, #1
 8005810:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8005812:	4b99      	ldr	r3, [pc, #612]	@ (8005a78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005814:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005816:	08db      	lsrs	r3, r3, #3
 8005818:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800581c:	693a      	ldr	r2, [r7, #16]
 800581e:	fb02 f303 	mul.w	r3, r2, r3
 8005822:	ee07 3a90 	vmov	s15, r3
 8005826:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800582a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800582e:	697b      	ldr	r3, [r7, #20]
 8005830:	2b00      	cmp	r3, #0
 8005832:	f000 8111 	beq.w	8005a58 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8005836:	69bb      	ldr	r3, [r7, #24]
 8005838:	2b02      	cmp	r3, #2
 800583a:	f000 8083 	beq.w	8005944 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800583e:	69bb      	ldr	r3, [r7, #24]
 8005840:	2b02      	cmp	r3, #2
 8005842:	f200 80a1 	bhi.w	8005988 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8005846:	69bb      	ldr	r3, [r7, #24]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d003      	beq.n	8005854 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800584c:	69bb      	ldr	r3, [r7, #24]
 800584e:	2b01      	cmp	r3, #1
 8005850:	d056      	beq.n	8005900 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005852:	e099      	b.n	8005988 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005854:	4b88      	ldr	r3, [pc, #544]	@ (8005a78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f003 0320 	and.w	r3, r3, #32
 800585c:	2b00      	cmp	r3, #0
 800585e:	d02d      	beq.n	80058bc <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005860:	4b85      	ldr	r3, [pc, #532]	@ (8005a78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	08db      	lsrs	r3, r3, #3
 8005866:	f003 0303 	and.w	r3, r3, #3
 800586a:	4a84      	ldr	r2, [pc, #528]	@ (8005a7c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800586c:	fa22 f303 	lsr.w	r3, r2, r3
 8005870:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005872:	68bb      	ldr	r3, [r7, #8]
 8005874:	ee07 3a90 	vmov	s15, r3
 8005878:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800587c:	697b      	ldr	r3, [r7, #20]
 800587e:	ee07 3a90 	vmov	s15, r3
 8005882:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005886:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800588a:	4b7b      	ldr	r3, [pc, #492]	@ (8005a78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800588c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800588e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005892:	ee07 3a90 	vmov	s15, r3
 8005896:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800589a:	ed97 6a03 	vldr	s12, [r7, #12]
 800589e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005a80 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80058a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80058a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80058aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80058ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80058b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058b6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80058ba:	e087      	b.n	80059cc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80058bc:	697b      	ldr	r3, [r7, #20]
 80058be:	ee07 3a90 	vmov	s15, r3
 80058c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058c6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8005a84 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80058ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80058ce:	4b6a      	ldr	r3, [pc, #424]	@ (8005a78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80058d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058d6:	ee07 3a90 	vmov	s15, r3
 80058da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058de:	ed97 6a03 	vldr	s12, [r7, #12]
 80058e2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8005a80 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80058e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80058ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80058ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80058f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80058f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058fa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80058fe:	e065      	b.n	80059cc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005900:	697b      	ldr	r3, [r7, #20]
 8005902:	ee07 3a90 	vmov	s15, r3
 8005906:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800590a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005a88 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800590e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005912:	4b59      	ldr	r3, [pc, #356]	@ (8005a78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005914:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005916:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800591a:	ee07 3a90 	vmov	s15, r3
 800591e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005922:	ed97 6a03 	vldr	s12, [r7, #12]
 8005926:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8005a80 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800592a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800592e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005932:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005936:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800593a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800593e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005942:	e043      	b.n	80059cc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005944:	697b      	ldr	r3, [r7, #20]
 8005946:	ee07 3a90 	vmov	s15, r3
 800594a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800594e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8005a8c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8005952:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005956:	4b48      	ldr	r3, [pc, #288]	@ (8005a78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005958:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800595a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800595e:	ee07 3a90 	vmov	s15, r3
 8005962:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005966:	ed97 6a03 	vldr	s12, [r7, #12]
 800596a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8005a80 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800596e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005972:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005976:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800597a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800597e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005982:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005986:	e021      	b.n	80059cc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005988:	697b      	ldr	r3, [r7, #20]
 800598a:	ee07 3a90 	vmov	s15, r3
 800598e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005992:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8005a88 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005996:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800599a:	4b37      	ldr	r3, [pc, #220]	@ (8005a78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800599c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800599e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059a2:	ee07 3a90 	vmov	s15, r3
 80059a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80059ae:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8005a80 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80059b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80059b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80059ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80059be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80059c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80059ca:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80059cc:	4b2a      	ldr	r3, [pc, #168]	@ (8005a78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80059ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059d0:	0a5b      	lsrs	r3, r3, #9
 80059d2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80059d6:	ee07 3a90 	vmov	s15, r3
 80059da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059de:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80059e2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80059e6:	edd7 6a07 	vldr	s13, [r7, #28]
 80059ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80059ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80059f2:	ee17 2a90 	vmov	r2, s15
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80059fa:	4b1f      	ldr	r3, [pc, #124]	@ (8005a78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80059fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059fe:	0c1b      	lsrs	r3, r3, #16
 8005a00:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005a04:	ee07 3a90 	vmov	s15, r3
 8005a08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a0c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005a10:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005a14:	edd7 6a07 	vldr	s13, [r7, #28]
 8005a18:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005a1c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005a20:	ee17 2a90 	vmov	r2, s15
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8005a28:	4b13      	ldr	r3, [pc, #76]	@ (8005a78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005a2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a2c:	0e1b      	lsrs	r3, r3, #24
 8005a2e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005a32:	ee07 3a90 	vmov	s15, r3
 8005a36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a3a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005a3e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005a42:	edd7 6a07 	vldr	s13, [r7, #28]
 8005a46:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005a4a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005a4e:	ee17 2a90 	vmov	r2, s15
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005a56:	e008      	b.n	8005a6a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2200      	movs	r2, #0
 8005a62:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2200      	movs	r2, #0
 8005a68:	609a      	str	r2, [r3, #8]
}
 8005a6a:	bf00      	nop
 8005a6c:	3724      	adds	r7, #36	@ 0x24
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a74:	4770      	bx	lr
 8005a76:	bf00      	nop
 8005a78:	58024400 	.word	0x58024400
 8005a7c:	03d09000 	.word	0x03d09000
 8005a80:	46000000 	.word	0x46000000
 8005a84:	4c742400 	.word	0x4c742400
 8005a88:	4a742400 	.word	0x4a742400
 8005a8c:	4bbebc20 	.word	0x4bbebc20

08005a90 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b082      	sub	sp, #8
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d101      	bne.n	8005aa2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	e049      	b.n	8005b36 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005aa8:	b2db      	uxtb	r3, r3
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d106      	bne.n	8005abc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005ab6:	6878      	ldr	r0, [r7, #4]
 8005ab8:	f7fb fd32 	bl	8001520 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2202      	movs	r2, #2
 8005ac0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681a      	ldr	r2, [r3, #0]
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	3304      	adds	r3, #4
 8005acc:	4619      	mov	r1, r3
 8005ace:	4610      	mov	r0, r2
 8005ad0:	f000 fd5a 	bl	8006588 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2201      	movs	r2, #1
 8005ad8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2201      	movs	r2, #1
 8005ae0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2201      	movs	r2, #1
 8005ae8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2201      	movs	r2, #1
 8005af0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2201      	movs	r2, #1
 8005af8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2201      	movs	r2, #1
 8005b00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2201      	movs	r2, #1
 8005b08:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2201      	movs	r2, #1
 8005b10:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2201      	movs	r2, #1
 8005b18:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2201      	movs	r2, #1
 8005b20:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2201      	movs	r2, #1
 8005b28:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2201      	movs	r2, #1
 8005b30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005b34:	2300      	movs	r3, #0
}
 8005b36:	4618      	mov	r0, r3
 8005b38:	3708      	adds	r7, #8
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	bd80      	pop	{r7, pc}
	...

08005b40 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005b40:	b480      	push	{r7}
 8005b42:	b085      	sub	sp, #20
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005b4e:	b2db      	uxtb	r3, r3
 8005b50:	2b01      	cmp	r3, #1
 8005b52:	d001      	beq.n	8005b58 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005b54:	2301      	movs	r3, #1
 8005b56:	e054      	b.n	8005c02 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2202      	movs	r2, #2
 8005b5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	68da      	ldr	r2, [r3, #12]
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f042 0201 	orr.w	r2, r2, #1
 8005b6e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	4a26      	ldr	r2, [pc, #152]	@ (8005c10 <HAL_TIM_Base_Start_IT+0xd0>)
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d022      	beq.n	8005bc0 <HAL_TIM_Base_Start_IT+0x80>
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b82:	d01d      	beq.n	8005bc0 <HAL_TIM_Base_Start_IT+0x80>
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	4a22      	ldr	r2, [pc, #136]	@ (8005c14 <HAL_TIM_Base_Start_IT+0xd4>)
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d018      	beq.n	8005bc0 <HAL_TIM_Base_Start_IT+0x80>
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	4a21      	ldr	r2, [pc, #132]	@ (8005c18 <HAL_TIM_Base_Start_IT+0xd8>)
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d013      	beq.n	8005bc0 <HAL_TIM_Base_Start_IT+0x80>
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	4a1f      	ldr	r2, [pc, #124]	@ (8005c1c <HAL_TIM_Base_Start_IT+0xdc>)
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d00e      	beq.n	8005bc0 <HAL_TIM_Base_Start_IT+0x80>
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	4a1e      	ldr	r2, [pc, #120]	@ (8005c20 <HAL_TIM_Base_Start_IT+0xe0>)
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	d009      	beq.n	8005bc0 <HAL_TIM_Base_Start_IT+0x80>
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	4a1c      	ldr	r2, [pc, #112]	@ (8005c24 <HAL_TIM_Base_Start_IT+0xe4>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d004      	beq.n	8005bc0 <HAL_TIM_Base_Start_IT+0x80>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	4a1b      	ldr	r2, [pc, #108]	@ (8005c28 <HAL_TIM_Base_Start_IT+0xe8>)
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	d115      	bne.n	8005bec <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	689a      	ldr	r2, [r3, #8]
 8005bc6:	4b19      	ldr	r3, [pc, #100]	@ (8005c2c <HAL_TIM_Base_Start_IT+0xec>)
 8005bc8:	4013      	ands	r3, r2
 8005bca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	2b06      	cmp	r3, #6
 8005bd0:	d015      	beq.n	8005bfe <HAL_TIM_Base_Start_IT+0xbe>
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005bd8:	d011      	beq.n	8005bfe <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	681a      	ldr	r2, [r3, #0]
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f042 0201 	orr.w	r2, r2, #1
 8005be8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bea:	e008      	b.n	8005bfe <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	681a      	ldr	r2, [r3, #0]
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f042 0201 	orr.w	r2, r2, #1
 8005bfa:	601a      	str	r2, [r3, #0]
 8005bfc:	e000      	b.n	8005c00 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bfe:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005c00:	2300      	movs	r3, #0
}
 8005c02:	4618      	mov	r0, r3
 8005c04:	3714      	adds	r7, #20
 8005c06:	46bd      	mov	sp, r7
 8005c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0c:	4770      	bx	lr
 8005c0e:	bf00      	nop
 8005c10:	40010000 	.word	0x40010000
 8005c14:	40000400 	.word	0x40000400
 8005c18:	40000800 	.word	0x40000800
 8005c1c:	40000c00 	.word	0x40000c00
 8005c20:	40010400 	.word	0x40010400
 8005c24:	40001800 	.word	0x40001800
 8005c28:	40014000 	.word	0x40014000
 8005c2c:	00010007 	.word	0x00010007

08005c30 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b082      	sub	sp, #8
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d101      	bne.n	8005c42 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005c3e:	2301      	movs	r3, #1
 8005c40:	e049      	b.n	8005cd6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005c48:	b2db      	uxtb	r3, r3
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d106      	bne.n	8005c5c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	2200      	movs	r2, #0
 8005c52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005c56:	6878      	ldr	r0, [r7, #4]
 8005c58:	f7fb fb5c 	bl	8001314 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2202      	movs	r2, #2
 8005c60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681a      	ldr	r2, [r3, #0]
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	3304      	adds	r3, #4
 8005c6c:	4619      	mov	r1, r3
 8005c6e:	4610      	mov	r0, r2
 8005c70:	f000 fc8a 	bl	8006588 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2201      	movs	r2, #1
 8005c78:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2201      	movs	r2, #1
 8005c80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2201      	movs	r2, #1
 8005c88:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2201      	movs	r2, #1
 8005c90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2201      	movs	r2, #1
 8005c98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2201      	movs	r2, #1
 8005ca0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2201      	movs	r2, #1
 8005ca8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2201      	movs	r2, #1
 8005cb0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2201      	movs	r2, #1
 8005cb8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2201      	movs	r2, #1
 8005cc0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2201      	movs	r2, #1
 8005cc8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2201      	movs	r2, #1
 8005cd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005cd4:	2300      	movs	r3, #0
}
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	3708      	adds	r7, #8
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	bd80      	pop	{r7, pc}
	...

08005ce0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	b084      	sub	sp, #16
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
 8005ce8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d109      	bne.n	8005d04 <HAL_TIM_PWM_Start+0x24>
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005cf6:	b2db      	uxtb	r3, r3
 8005cf8:	2b01      	cmp	r3, #1
 8005cfa:	bf14      	ite	ne
 8005cfc:	2301      	movne	r3, #1
 8005cfe:	2300      	moveq	r3, #0
 8005d00:	b2db      	uxtb	r3, r3
 8005d02:	e03c      	b.n	8005d7e <HAL_TIM_PWM_Start+0x9e>
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	2b04      	cmp	r3, #4
 8005d08:	d109      	bne.n	8005d1e <HAL_TIM_PWM_Start+0x3e>
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005d10:	b2db      	uxtb	r3, r3
 8005d12:	2b01      	cmp	r3, #1
 8005d14:	bf14      	ite	ne
 8005d16:	2301      	movne	r3, #1
 8005d18:	2300      	moveq	r3, #0
 8005d1a:	b2db      	uxtb	r3, r3
 8005d1c:	e02f      	b.n	8005d7e <HAL_TIM_PWM_Start+0x9e>
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	2b08      	cmp	r3, #8
 8005d22:	d109      	bne.n	8005d38 <HAL_TIM_PWM_Start+0x58>
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005d2a:	b2db      	uxtb	r3, r3
 8005d2c:	2b01      	cmp	r3, #1
 8005d2e:	bf14      	ite	ne
 8005d30:	2301      	movne	r3, #1
 8005d32:	2300      	moveq	r3, #0
 8005d34:	b2db      	uxtb	r3, r3
 8005d36:	e022      	b.n	8005d7e <HAL_TIM_PWM_Start+0x9e>
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	2b0c      	cmp	r3, #12
 8005d3c:	d109      	bne.n	8005d52 <HAL_TIM_PWM_Start+0x72>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005d44:	b2db      	uxtb	r3, r3
 8005d46:	2b01      	cmp	r3, #1
 8005d48:	bf14      	ite	ne
 8005d4a:	2301      	movne	r3, #1
 8005d4c:	2300      	moveq	r3, #0
 8005d4e:	b2db      	uxtb	r3, r3
 8005d50:	e015      	b.n	8005d7e <HAL_TIM_PWM_Start+0x9e>
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	2b10      	cmp	r3, #16
 8005d56:	d109      	bne.n	8005d6c <HAL_TIM_PWM_Start+0x8c>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005d5e:	b2db      	uxtb	r3, r3
 8005d60:	2b01      	cmp	r3, #1
 8005d62:	bf14      	ite	ne
 8005d64:	2301      	movne	r3, #1
 8005d66:	2300      	moveq	r3, #0
 8005d68:	b2db      	uxtb	r3, r3
 8005d6a:	e008      	b.n	8005d7e <HAL_TIM_PWM_Start+0x9e>
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005d72:	b2db      	uxtb	r3, r3
 8005d74:	2b01      	cmp	r3, #1
 8005d76:	bf14      	ite	ne
 8005d78:	2301      	movne	r3, #1
 8005d7a:	2300      	moveq	r3, #0
 8005d7c:	b2db      	uxtb	r3, r3
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d001      	beq.n	8005d86 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005d82:	2301      	movs	r3, #1
 8005d84:	e0a1      	b.n	8005eca <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d104      	bne.n	8005d96 <HAL_TIM_PWM_Start+0xb6>
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2202      	movs	r2, #2
 8005d90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005d94:	e023      	b.n	8005dde <HAL_TIM_PWM_Start+0xfe>
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	2b04      	cmp	r3, #4
 8005d9a:	d104      	bne.n	8005da6 <HAL_TIM_PWM_Start+0xc6>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2202      	movs	r2, #2
 8005da0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005da4:	e01b      	b.n	8005dde <HAL_TIM_PWM_Start+0xfe>
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	2b08      	cmp	r3, #8
 8005daa:	d104      	bne.n	8005db6 <HAL_TIM_PWM_Start+0xd6>
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2202      	movs	r2, #2
 8005db0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005db4:	e013      	b.n	8005dde <HAL_TIM_PWM_Start+0xfe>
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	2b0c      	cmp	r3, #12
 8005dba:	d104      	bne.n	8005dc6 <HAL_TIM_PWM_Start+0xe6>
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2202      	movs	r2, #2
 8005dc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005dc4:	e00b      	b.n	8005dde <HAL_TIM_PWM_Start+0xfe>
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	2b10      	cmp	r3, #16
 8005dca:	d104      	bne.n	8005dd6 <HAL_TIM_PWM_Start+0xf6>
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2202      	movs	r2, #2
 8005dd0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005dd4:	e003      	b.n	8005dde <HAL_TIM_PWM_Start+0xfe>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2202      	movs	r2, #2
 8005dda:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	2201      	movs	r2, #1
 8005de4:	6839      	ldr	r1, [r7, #0]
 8005de6:	4618      	mov	r0, r3
 8005de8:	f000 ffe8 	bl	8006dbc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	4a38      	ldr	r2, [pc, #224]	@ (8005ed4 <HAL_TIM_PWM_Start+0x1f4>)
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d013      	beq.n	8005e1e <HAL_TIM_PWM_Start+0x13e>
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	4a37      	ldr	r2, [pc, #220]	@ (8005ed8 <HAL_TIM_PWM_Start+0x1f8>)
 8005dfc:	4293      	cmp	r3, r2
 8005dfe:	d00e      	beq.n	8005e1e <HAL_TIM_PWM_Start+0x13e>
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	4a35      	ldr	r2, [pc, #212]	@ (8005edc <HAL_TIM_PWM_Start+0x1fc>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d009      	beq.n	8005e1e <HAL_TIM_PWM_Start+0x13e>
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	4a34      	ldr	r2, [pc, #208]	@ (8005ee0 <HAL_TIM_PWM_Start+0x200>)
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d004      	beq.n	8005e1e <HAL_TIM_PWM_Start+0x13e>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	4a32      	ldr	r2, [pc, #200]	@ (8005ee4 <HAL_TIM_PWM_Start+0x204>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d101      	bne.n	8005e22 <HAL_TIM_PWM_Start+0x142>
 8005e1e:	2301      	movs	r3, #1
 8005e20:	e000      	b.n	8005e24 <HAL_TIM_PWM_Start+0x144>
 8005e22:	2300      	movs	r3, #0
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d007      	beq.n	8005e38 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005e36:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	4a25      	ldr	r2, [pc, #148]	@ (8005ed4 <HAL_TIM_PWM_Start+0x1f4>)
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	d022      	beq.n	8005e88 <HAL_TIM_PWM_Start+0x1a8>
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e4a:	d01d      	beq.n	8005e88 <HAL_TIM_PWM_Start+0x1a8>
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	4a25      	ldr	r2, [pc, #148]	@ (8005ee8 <HAL_TIM_PWM_Start+0x208>)
 8005e52:	4293      	cmp	r3, r2
 8005e54:	d018      	beq.n	8005e88 <HAL_TIM_PWM_Start+0x1a8>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	4a24      	ldr	r2, [pc, #144]	@ (8005eec <HAL_TIM_PWM_Start+0x20c>)
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	d013      	beq.n	8005e88 <HAL_TIM_PWM_Start+0x1a8>
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	4a22      	ldr	r2, [pc, #136]	@ (8005ef0 <HAL_TIM_PWM_Start+0x210>)
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d00e      	beq.n	8005e88 <HAL_TIM_PWM_Start+0x1a8>
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	4a1a      	ldr	r2, [pc, #104]	@ (8005ed8 <HAL_TIM_PWM_Start+0x1f8>)
 8005e70:	4293      	cmp	r3, r2
 8005e72:	d009      	beq.n	8005e88 <HAL_TIM_PWM_Start+0x1a8>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	4a1e      	ldr	r2, [pc, #120]	@ (8005ef4 <HAL_TIM_PWM_Start+0x214>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d004      	beq.n	8005e88 <HAL_TIM_PWM_Start+0x1a8>
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	4a16      	ldr	r2, [pc, #88]	@ (8005edc <HAL_TIM_PWM_Start+0x1fc>)
 8005e84:	4293      	cmp	r3, r2
 8005e86:	d115      	bne.n	8005eb4 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	689a      	ldr	r2, [r3, #8]
 8005e8e:	4b1a      	ldr	r3, [pc, #104]	@ (8005ef8 <HAL_TIM_PWM_Start+0x218>)
 8005e90:	4013      	ands	r3, r2
 8005e92:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	2b06      	cmp	r3, #6
 8005e98:	d015      	beq.n	8005ec6 <HAL_TIM_PWM_Start+0x1e6>
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005ea0:	d011      	beq.n	8005ec6 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	681a      	ldr	r2, [r3, #0]
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f042 0201 	orr.w	r2, r2, #1
 8005eb0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005eb2:	e008      	b.n	8005ec6 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	681a      	ldr	r2, [r3, #0]
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f042 0201 	orr.w	r2, r2, #1
 8005ec2:	601a      	str	r2, [r3, #0]
 8005ec4:	e000      	b.n	8005ec8 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ec6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005ec8:	2300      	movs	r3, #0
}
 8005eca:	4618      	mov	r0, r3
 8005ecc:	3710      	adds	r7, #16
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	bd80      	pop	{r7, pc}
 8005ed2:	bf00      	nop
 8005ed4:	40010000 	.word	0x40010000
 8005ed8:	40010400 	.word	0x40010400
 8005edc:	40014000 	.word	0x40014000
 8005ee0:	40014400 	.word	0x40014400
 8005ee4:	40014800 	.word	0x40014800
 8005ee8:	40000400 	.word	0x40000400
 8005eec:	40000800 	.word	0x40000800
 8005ef0:	40000c00 	.word	0x40000c00
 8005ef4:	40001800 	.word	0x40001800
 8005ef8:	00010007 	.word	0x00010007

08005efc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b084      	sub	sp, #16
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	68db      	ldr	r3, [r3, #12]
 8005f0a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	691b      	ldr	r3, [r3, #16]
 8005f12:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	f003 0302 	and.w	r3, r3, #2
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d020      	beq.n	8005f60 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	f003 0302 	and.w	r3, r3, #2
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d01b      	beq.n	8005f60 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f06f 0202 	mvn.w	r2, #2
 8005f30:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2201      	movs	r2, #1
 8005f36:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	699b      	ldr	r3, [r3, #24]
 8005f3e:	f003 0303 	and.w	r3, r3, #3
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d003      	beq.n	8005f4e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005f46:	6878      	ldr	r0, [r7, #4]
 8005f48:	f000 fb00 	bl	800654c <HAL_TIM_IC_CaptureCallback>
 8005f4c:	e005      	b.n	8005f5a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f4e:	6878      	ldr	r0, [r7, #4]
 8005f50:	f000 faf2 	bl	8006538 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f54:	6878      	ldr	r0, [r7, #4]
 8005f56:	f000 fb03 	bl	8006560 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005f60:	68bb      	ldr	r3, [r7, #8]
 8005f62:	f003 0304 	and.w	r3, r3, #4
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d020      	beq.n	8005fac <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	f003 0304 	and.w	r3, r3, #4
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d01b      	beq.n	8005fac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f06f 0204 	mvn.w	r2, #4
 8005f7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2202      	movs	r2, #2
 8005f82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	699b      	ldr	r3, [r3, #24]
 8005f8a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d003      	beq.n	8005f9a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f92:	6878      	ldr	r0, [r7, #4]
 8005f94:	f000 fada 	bl	800654c <HAL_TIM_IC_CaptureCallback>
 8005f98:	e005      	b.n	8005fa6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f9a:	6878      	ldr	r0, [r7, #4]
 8005f9c:	f000 facc 	bl	8006538 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fa0:	6878      	ldr	r0, [r7, #4]
 8005fa2:	f000 fadd 	bl	8006560 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2200      	movs	r2, #0
 8005faa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005fac:	68bb      	ldr	r3, [r7, #8]
 8005fae:	f003 0308 	and.w	r3, r3, #8
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d020      	beq.n	8005ff8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	f003 0308 	and.w	r3, r3, #8
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d01b      	beq.n	8005ff8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f06f 0208 	mvn.w	r2, #8
 8005fc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2204      	movs	r2, #4
 8005fce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	69db      	ldr	r3, [r3, #28]
 8005fd6:	f003 0303 	and.w	r3, r3, #3
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d003      	beq.n	8005fe6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005fde:	6878      	ldr	r0, [r7, #4]
 8005fe0:	f000 fab4 	bl	800654c <HAL_TIM_IC_CaptureCallback>
 8005fe4:	e005      	b.n	8005ff2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fe6:	6878      	ldr	r0, [r7, #4]
 8005fe8:	f000 faa6 	bl	8006538 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fec:	6878      	ldr	r0, [r7, #4]
 8005fee:	f000 fab7 	bl	8006560 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005ff8:	68bb      	ldr	r3, [r7, #8]
 8005ffa:	f003 0310 	and.w	r3, r3, #16
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d020      	beq.n	8006044 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	f003 0310 	and.w	r3, r3, #16
 8006008:	2b00      	cmp	r3, #0
 800600a:	d01b      	beq.n	8006044 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f06f 0210 	mvn.w	r2, #16
 8006014:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2208      	movs	r2, #8
 800601a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	69db      	ldr	r3, [r3, #28]
 8006022:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006026:	2b00      	cmp	r3, #0
 8006028:	d003      	beq.n	8006032 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800602a:	6878      	ldr	r0, [r7, #4]
 800602c:	f000 fa8e 	bl	800654c <HAL_TIM_IC_CaptureCallback>
 8006030:	e005      	b.n	800603e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006032:	6878      	ldr	r0, [r7, #4]
 8006034:	f000 fa80 	bl	8006538 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006038:	6878      	ldr	r0, [r7, #4]
 800603a:	f000 fa91 	bl	8006560 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2200      	movs	r2, #0
 8006042:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006044:	68bb      	ldr	r3, [r7, #8]
 8006046:	f003 0301 	and.w	r3, r3, #1
 800604a:	2b00      	cmp	r3, #0
 800604c:	d00c      	beq.n	8006068 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	f003 0301 	and.w	r3, r3, #1
 8006054:	2b00      	cmp	r3, #0
 8006056:	d007      	beq.n	8006068 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f06f 0201 	mvn.w	r2, #1
 8006060:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006062:	6878      	ldr	r0, [r7, #4]
 8006064:	f000 fa5e 	bl	8006524 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006068:	68bb      	ldr	r3, [r7, #8]
 800606a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800606e:	2b00      	cmp	r3, #0
 8006070:	d104      	bne.n	800607c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8006072:	68bb      	ldr	r3, [r7, #8]
 8006074:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006078:	2b00      	cmp	r3, #0
 800607a:	d00c      	beq.n	8006096 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006082:	2b00      	cmp	r3, #0
 8006084:	d007      	beq.n	8006096 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800608e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006090:	6878      	ldr	r0, [r7, #4]
 8006092:	f000 ff51 	bl	8006f38 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006096:	68bb      	ldr	r3, [r7, #8]
 8006098:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800609c:	2b00      	cmp	r3, #0
 800609e:	d00c      	beq.n	80060ba <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d007      	beq.n	80060ba <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80060b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80060b4:	6878      	ldr	r0, [r7, #4]
 80060b6:	f000 ff49 	bl	8006f4c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80060ba:	68bb      	ldr	r3, [r7, #8]
 80060bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d00c      	beq.n	80060de <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d007      	beq.n	80060de <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80060d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80060d8:	6878      	ldr	r0, [r7, #4]
 80060da:	f000 fa4b 	bl	8006574 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80060de:	68bb      	ldr	r3, [r7, #8]
 80060e0:	f003 0320 	and.w	r3, r3, #32
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d00c      	beq.n	8006102 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	f003 0320 	and.w	r3, r3, #32
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d007      	beq.n	8006102 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f06f 0220 	mvn.w	r2, #32
 80060fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80060fc:	6878      	ldr	r0, [r7, #4]
 80060fe:	f000 ff11 	bl	8006f24 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006102:	bf00      	nop
 8006104:	3710      	adds	r7, #16
 8006106:	46bd      	mov	sp, r7
 8006108:	bd80      	pop	{r7, pc}
	...

0800610c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800610c:	b580      	push	{r7, lr}
 800610e:	b086      	sub	sp, #24
 8006110:	af00      	add	r7, sp, #0
 8006112:	60f8      	str	r0, [r7, #12]
 8006114:	60b9      	str	r1, [r7, #8]
 8006116:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006118:	2300      	movs	r3, #0
 800611a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006122:	2b01      	cmp	r3, #1
 8006124:	d101      	bne.n	800612a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006126:	2302      	movs	r3, #2
 8006128:	e0ff      	b.n	800632a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	2201      	movs	r2, #1
 800612e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	2b14      	cmp	r3, #20
 8006136:	f200 80f0 	bhi.w	800631a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800613a:	a201      	add	r2, pc, #4	@ (adr r2, 8006140 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800613c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006140:	08006195 	.word	0x08006195
 8006144:	0800631b 	.word	0x0800631b
 8006148:	0800631b 	.word	0x0800631b
 800614c:	0800631b 	.word	0x0800631b
 8006150:	080061d5 	.word	0x080061d5
 8006154:	0800631b 	.word	0x0800631b
 8006158:	0800631b 	.word	0x0800631b
 800615c:	0800631b 	.word	0x0800631b
 8006160:	08006217 	.word	0x08006217
 8006164:	0800631b 	.word	0x0800631b
 8006168:	0800631b 	.word	0x0800631b
 800616c:	0800631b 	.word	0x0800631b
 8006170:	08006257 	.word	0x08006257
 8006174:	0800631b 	.word	0x0800631b
 8006178:	0800631b 	.word	0x0800631b
 800617c:	0800631b 	.word	0x0800631b
 8006180:	08006299 	.word	0x08006299
 8006184:	0800631b 	.word	0x0800631b
 8006188:	0800631b 	.word	0x0800631b
 800618c:	0800631b 	.word	0x0800631b
 8006190:	080062d9 	.word	0x080062d9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	68b9      	ldr	r1, [r7, #8]
 800619a:	4618      	mov	r0, r3
 800619c:	f000 fa9a 	bl	80066d4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	699a      	ldr	r2, [r3, #24]
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f042 0208 	orr.w	r2, r2, #8
 80061ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	699a      	ldr	r2, [r3, #24]
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f022 0204 	bic.w	r2, r2, #4
 80061be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	6999      	ldr	r1, [r3, #24]
 80061c6:	68bb      	ldr	r3, [r7, #8]
 80061c8:	691a      	ldr	r2, [r3, #16]
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	430a      	orrs	r2, r1
 80061d0:	619a      	str	r2, [r3, #24]
      break;
 80061d2:	e0a5      	b.n	8006320 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	68b9      	ldr	r1, [r7, #8]
 80061da:	4618      	mov	r0, r3
 80061dc:	f000 fb0a 	bl	80067f4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	699a      	ldr	r2, [r3, #24]
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80061ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	699a      	ldr	r2, [r3, #24]
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80061fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	6999      	ldr	r1, [r3, #24]
 8006206:	68bb      	ldr	r3, [r7, #8]
 8006208:	691b      	ldr	r3, [r3, #16]
 800620a:	021a      	lsls	r2, r3, #8
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	430a      	orrs	r2, r1
 8006212:	619a      	str	r2, [r3, #24]
      break;
 8006214:	e084      	b.n	8006320 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	68b9      	ldr	r1, [r7, #8]
 800621c:	4618      	mov	r0, r3
 800621e:	f000 fb73 	bl	8006908 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	69da      	ldr	r2, [r3, #28]
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f042 0208 	orr.w	r2, r2, #8
 8006230:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	69da      	ldr	r2, [r3, #28]
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f022 0204 	bic.w	r2, r2, #4
 8006240:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	69d9      	ldr	r1, [r3, #28]
 8006248:	68bb      	ldr	r3, [r7, #8]
 800624a:	691a      	ldr	r2, [r3, #16]
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	430a      	orrs	r2, r1
 8006252:	61da      	str	r2, [r3, #28]
      break;
 8006254:	e064      	b.n	8006320 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	68b9      	ldr	r1, [r7, #8]
 800625c:	4618      	mov	r0, r3
 800625e:	f000 fbdb 	bl	8006a18 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	69da      	ldr	r2, [r3, #28]
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006270:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	69da      	ldr	r2, [r3, #28]
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006280:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	69d9      	ldr	r1, [r3, #28]
 8006288:	68bb      	ldr	r3, [r7, #8]
 800628a:	691b      	ldr	r3, [r3, #16]
 800628c:	021a      	lsls	r2, r3, #8
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	430a      	orrs	r2, r1
 8006294:	61da      	str	r2, [r3, #28]
      break;
 8006296:	e043      	b.n	8006320 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	68b9      	ldr	r1, [r7, #8]
 800629e:	4618      	mov	r0, r3
 80062a0:	f000 fc24 	bl	8006aec <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f042 0208 	orr.w	r2, r2, #8
 80062b2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f022 0204 	bic.w	r2, r2, #4
 80062c2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80062ca:	68bb      	ldr	r3, [r7, #8]
 80062cc:	691a      	ldr	r2, [r3, #16]
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	430a      	orrs	r2, r1
 80062d4:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80062d6:	e023      	b.n	8006320 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	68b9      	ldr	r1, [r7, #8]
 80062de:	4618      	mov	r0, r3
 80062e0:	f000 fc68 	bl	8006bb4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80062f2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006302:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800630a:	68bb      	ldr	r3, [r7, #8]
 800630c:	691b      	ldr	r3, [r3, #16]
 800630e:	021a      	lsls	r2, r3, #8
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	430a      	orrs	r2, r1
 8006316:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8006318:	e002      	b.n	8006320 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800631a:	2301      	movs	r3, #1
 800631c:	75fb      	strb	r3, [r7, #23]
      break;
 800631e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	2200      	movs	r2, #0
 8006324:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006328:	7dfb      	ldrb	r3, [r7, #23]
}
 800632a:	4618      	mov	r0, r3
 800632c:	3718      	adds	r7, #24
 800632e:	46bd      	mov	sp, r7
 8006330:	bd80      	pop	{r7, pc}
 8006332:	bf00      	nop

08006334 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006334:	b580      	push	{r7, lr}
 8006336:	b084      	sub	sp, #16
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
 800633c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800633e:	2300      	movs	r3, #0
 8006340:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006348:	2b01      	cmp	r3, #1
 800634a:	d101      	bne.n	8006350 <HAL_TIM_ConfigClockSource+0x1c>
 800634c:	2302      	movs	r3, #2
 800634e:	e0dc      	b.n	800650a <HAL_TIM_ConfigClockSource+0x1d6>
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2201      	movs	r2, #1
 8006354:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2202      	movs	r2, #2
 800635c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	689b      	ldr	r3, [r3, #8]
 8006366:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006368:	68ba      	ldr	r2, [r7, #8]
 800636a:	4b6a      	ldr	r3, [pc, #424]	@ (8006514 <HAL_TIM_ConfigClockSource+0x1e0>)
 800636c:	4013      	ands	r3, r2
 800636e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006370:	68bb      	ldr	r3, [r7, #8]
 8006372:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006376:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	68ba      	ldr	r2, [r7, #8]
 800637e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	4a64      	ldr	r2, [pc, #400]	@ (8006518 <HAL_TIM_ConfigClockSource+0x1e4>)
 8006386:	4293      	cmp	r3, r2
 8006388:	f000 80a9 	beq.w	80064de <HAL_TIM_ConfigClockSource+0x1aa>
 800638c:	4a62      	ldr	r2, [pc, #392]	@ (8006518 <HAL_TIM_ConfigClockSource+0x1e4>)
 800638e:	4293      	cmp	r3, r2
 8006390:	f200 80ae 	bhi.w	80064f0 <HAL_TIM_ConfigClockSource+0x1bc>
 8006394:	4a61      	ldr	r2, [pc, #388]	@ (800651c <HAL_TIM_ConfigClockSource+0x1e8>)
 8006396:	4293      	cmp	r3, r2
 8006398:	f000 80a1 	beq.w	80064de <HAL_TIM_ConfigClockSource+0x1aa>
 800639c:	4a5f      	ldr	r2, [pc, #380]	@ (800651c <HAL_TIM_ConfigClockSource+0x1e8>)
 800639e:	4293      	cmp	r3, r2
 80063a0:	f200 80a6 	bhi.w	80064f0 <HAL_TIM_ConfigClockSource+0x1bc>
 80063a4:	4a5e      	ldr	r2, [pc, #376]	@ (8006520 <HAL_TIM_ConfigClockSource+0x1ec>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	f000 8099 	beq.w	80064de <HAL_TIM_ConfigClockSource+0x1aa>
 80063ac:	4a5c      	ldr	r2, [pc, #368]	@ (8006520 <HAL_TIM_ConfigClockSource+0x1ec>)
 80063ae:	4293      	cmp	r3, r2
 80063b0:	f200 809e 	bhi.w	80064f0 <HAL_TIM_ConfigClockSource+0x1bc>
 80063b4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80063b8:	f000 8091 	beq.w	80064de <HAL_TIM_ConfigClockSource+0x1aa>
 80063bc:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80063c0:	f200 8096 	bhi.w	80064f0 <HAL_TIM_ConfigClockSource+0x1bc>
 80063c4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80063c8:	f000 8089 	beq.w	80064de <HAL_TIM_ConfigClockSource+0x1aa>
 80063cc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80063d0:	f200 808e 	bhi.w	80064f0 <HAL_TIM_ConfigClockSource+0x1bc>
 80063d4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80063d8:	d03e      	beq.n	8006458 <HAL_TIM_ConfigClockSource+0x124>
 80063da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80063de:	f200 8087 	bhi.w	80064f0 <HAL_TIM_ConfigClockSource+0x1bc>
 80063e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80063e6:	f000 8086 	beq.w	80064f6 <HAL_TIM_ConfigClockSource+0x1c2>
 80063ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80063ee:	d87f      	bhi.n	80064f0 <HAL_TIM_ConfigClockSource+0x1bc>
 80063f0:	2b70      	cmp	r3, #112	@ 0x70
 80063f2:	d01a      	beq.n	800642a <HAL_TIM_ConfigClockSource+0xf6>
 80063f4:	2b70      	cmp	r3, #112	@ 0x70
 80063f6:	d87b      	bhi.n	80064f0 <HAL_TIM_ConfigClockSource+0x1bc>
 80063f8:	2b60      	cmp	r3, #96	@ 0x60
 80063fa:	d050      	beq.n	800649e <HAL_TIM_ConfigClockSource+0x16a>
 80063fc:	2b60      	cmp	r3, #96	@ 0x60
 80063fe:	d877      	bhi.n	80064f0 <HAL_TIM_ConfigClockSource+0x1bc>
 8006400:	2b50      	cmp	r3, #80	@ 0x50
 8006402:	d03c      	beq.n	800647e <HAL_TIM_ConfigClockSource+0x14a>
 8006404:	2b50      	cmp	r3, #80	@ 0x50
 8006406:	d873      	bhi.n	80064f0 <HAL_TIM_ConfigClockSource+0x1bc>
 8006408:	2b40      	cmp	r3, #64	@ 0x40
 800640a:	d058      	beq.n	80064be <HAL_TIM_ConfigClockSource+0x18a>
 800640c:	2b40      	cmp	r3, #64	@ 0x40
 800640e:	d86f      	bhi.n	80064f0 <HAL_TIM_ConfigClockSource+0x1bc>
 8006410:	2b30      	cmp	r3, #48	@ 0x30
 8006412:	d064      	beq.n	80064de <HAL_TIM_ConfigClockSource+0x1aa>
 8006414:	2b30      	cmp	r3, #48	@ 0x30
 8006416:	d86b      	bhi.n	80064f0 <HAL_TIM_ConfigClockSource+0x1bc>
 8006418:	2b20      	cmp	r3, #32
 800641a:	d060      	beq.n	80064de <HAL_TIM_ConfigClockSource+0x1aa>
 800641c:	2b20      	cmp	r3, #32
 800641e:	d867      	bhi.n	80064f0 <HAL_TIM_ConfigClockSource+0x1bc>
 8006420:	2b00      	cmp	r3, #0
 8006422:	d05c      	beq.n	80064de <HAL_TIM_ConfigClockSource+0x1aa>
 8006424:	2b10      	cmp	r3, #16
 8006426:	d05a      	beq.n	80064de <HAL_TIM_ConfigClockSource+0x1aa>
 8006428:	e062      	b.n	80064f0 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800643a:	f000 fc9f 	bl	8006d7c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	689b      	ldr	r3, [r3, #8]
 8006444:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006446:	68bb      	ldr	r3, [r7, #8]
 8006448:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800644c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	68ba      	ldr	r2, [r7, #8]
 8006454:	609a      	str	r2, [r3, #8]
      break;
 8006456:	e04f      	b.n	80064f8 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006468:	f000 fc88 	bl	8006d7c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	689a      	ldr	r2, [r3, #8]
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800647a:	609a      	str	r2, [r3, #8]
      break;
 800647c:	e03c      	b.n	80064f8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800648a:	461a      	mov	r2, r3
 800648c:	f000 fbf8 	bl	8006c80 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	2150      	movs	r1, #80	@ 0x50
 8006496:	4618      	mov	r0, r3
 8006498:	f000 fc52 	bl	8006d40 <TIM_ITRx_SetConfig>
      break;
 800649c:	e02c      	b.n	80064f8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80064aa:	461a      	mov	r2, r3
 80064ac:	f000 fc17 	bl	8006cde <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	2160      	movs	r1, #96	@ 0x60
 80064b6:	4618      	mov	r0, r3
 80064b8:	f000 fc42 	bl	8006d40 <TIM_ITRx_SetConfig>
      break;
 80064bc:	e01c      	b.n	80064f8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80064ca:	461a      	mov	r2, r3
 80064cc:	f000 fbd8 	bl	8006c80 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	2140      	movs	r1, #64	@ 0x40
 80064d6:	4618      	mov	r0, r3
 80064d8:	f000 fc32 	bl	8006d40 <TIM_ITRx_SetConfig>
      break;
 80064dc:	e00c      	b.n	80064f8 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681a      	ldr	r2, [r3, #0]
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	4619      	mov	r1, r3
 80064e8:	4610      	mov	r0, r2
 80064ea:	f000 fc29 	bl	8006d40 <TIM_ITRx_SetConfig>
      break;
 80064ee:	e003      	b.n	80064f8 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 80064f0:	2301      	movs	r3, #1
 80064f2:	73fb      	strb	r3, [r7, #15]
      break;
 80064f4:	e000      	b.n	80064f8 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 80064f6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2201      	movs	r2, #1
 80064fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2200      	movs	r2, #0
 8006504:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006508:	7bfb      	ldrb	r3, [r7, #15]
}
 800650a:	4618      	mov	r0, r3
 800650c:	3710      	adds	r7, #16
 800650e:	46bd      	mov	sp, r7
 8006510:	bd80      	pop	{r7, pc}
 8006512:	bf00      	nop
 8006514:	ffceff88 	.word	0xffceff88
 8006518:	00100040 	.word	0x00100040
 800651c:	00100030 	.word	0x00100030
 8006520:	00100020 	.word	0x00100020

08006524 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006524:	b480      	push	{r7}
 8006526:	b083      	sub	sp, #12
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800652c:	bf00      	nop
 800652e:	370c      	adds	r7, #12
 8006530:	46bd      	mov	sp, r7
 8006532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006536:	4770      	bx	lr

08006538 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006538:	b480      	push	{r7}
 800653a:	b083      	sub	sp, #12
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006540:	bf00      	nop
 8006542:	370c      	adds	r7, #12
 8006544:	46bd      	mov	sp, r7
 8006546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654a:	4770      	bx	lr

0800654c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800654c:	b480      	push	{r7}
 800654e:	b083      	sub	sp, #12
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006554:	bf00      	nop
 8006556:	370c      	adds	r7, #12
 8006558:	46bd      	mov	sp, r7
 800655a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655e:	4770      	bx	lr

08006560 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006560:	b480      	push	{r7}
 8006562:	b083      	sub	sp, #12
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006568:	bf00      	nop
 800656a:	370c      	adds	r7, #12
 800656c:	46bd      	mov	sp, r7
 800656e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006572:	4770      	bx	lr

08006574 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006574:	b480      	push	{r7}
 8006576:	b083      	sub	sp, #12
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800657c:	bf00      	nop
 800657e:	370c      	adds	r7, #12
 8006580:	46bd      	mov	sp, r7
 8006582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006586:	4770      	bx	lr

08006588 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006588:	b480      	push	{r7}
 800658a:	b085      	sub	sp, #20
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
 8006590:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	4a46      	ldr	r2, [pc, #280]	@ (80066b4 <TIM_Base_SetConfig+0x12c>)
 800659c:	4293      	cmp	r3, r2
 800659e:	d013      	beq.n	80065c8 <TIM_Base_SetConfig+0x40>
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80065a6:	d00f      	beq.n	80065c8 <TIM_Base_SetConfig+0x40>
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	4a43      	ldr	r2, [pc, #268]	@ (80066b8 <TIM_Base_SetConfig+0x130>)
 80065ac:	4293      	cmp	r3, r2
 80065ae:	d00b      	beq.n	80065c8 <TIM_Base_SetConfig+0x40>
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	4a42      	ldr	r2, [pc, #264]	@ (80066bc <TIM_Base_SetConfig+0x134>)
 80065b4:	4293      	cmp	r3, r2
 80065b6:	d007      	beq.n	80065c8 <TIM_Base_SetConfig+0x40>
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	4a41      	ldr	r2, [pc, #260]	@ (80066c0 <TIM_Base_SetConfig+0x138>)
 80065bc:	4293      	cmp	r3, r2
 80065be:	d003      	beq.n	80065c8 <TIM_Base_SetConfig+0x40>
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	4a40      	ldr	r2, [pc, #256]	@ (80066c4 <TIM_Base_SetConfig+0x13c>)
 80065c4:	4293      	cmp	r3, r2
 80065c6:	d108      	bne.n	80065da <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80065ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	685b      	ldr	r3, [r3, #4]
 80065d4:	68fa      	ldr	r2, [r7, #12]
 80065d6:	4313      	orrs	r3, r2
 80065d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	4a35      	ldr	r2, [pc, #212]	@ (80066b4 <TIM_Base_SetConfig+0x12c>)
 80065de:	4293      	cmp	r3, r2
 80065e0:	d01f      	beq.n	8006622 <TIM_Base_SetConfig+0x9a>
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80065e8:	d01b      	beq.n	8006622 <TIM_Base_SetConfig+0x9a>
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	4a32      	ldr	r2, [pc, #200]	@ (80066b8 <TIM_Base_SetConfig+0x130>)
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d017      	beq.n	8006622 <TIM_Base_SetConfig+0x9a>
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	4a31      	ldr	r2, [pc, #196]	@ (80066bc <TIM_Base_SetConfig+0x134>)
 80065f6:	4293      	cmp	r3, r2
 80065f8:	d013      	beq.n	8006622 <TIM_Base_SetConfig+0x9a>
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	4a30      	ldr	r2, [pc, #192]	@ (80066c0 <TIM_Base_SetConfig+0x138>)
 80065fe:	4293      	cmp	r3, r2
 8006600:	d00f      	beq.n	8006622 <TIM_Base_SetConfig+0x9a>
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	4a2f      	ldr	r2, [pc, #188]	@ (80066c4 <TIM_Base_SetConfig+0x13c>)
 8006606:	4293      	cmp	r3, r2
 8006608:	d00b      	beq.n	8006622 <TIM_Base_SetConfig+0x9a>
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	4a2e      	ldr	r2, [pc, #184]	@ (80066c8 <TIM_Base_SetConfig+0x140>)
 800660e:	4293      	cmp	r3, r2
 8006610:	d007      	beq.n	8006622 <TIM_Base_SetConfig+0x9a>
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	4a2d      	ldr	r2, [pc, #180]	@ (80066cc <TIM_Base_SetConfig+0x144>)
 8006616:	4293      	cmp	r3, r2
 8006618:	d003      	beq.n	8006622 <TIM_Base_SetConfig+0x9a>
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	4a2c      	ldr	r2, [pc, #176]	@ (80066d0 <TIM_Base_SetConfig+0x148>)
 800661e:	4293      	cmp	r3, r2
 8006620:	d108      	bne.n	8006634 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006628:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800662a:	683b      	ldr	r3, [r7, #0]
 800662c:	68db      	ldr	r3, [r3, #12]
 800662e:	68fa      	ldr	r2, [r7, #12]
 8006630:	4313      	orrs	r3, r2
 8006632:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	695b      	ldr	r3, [r3, #20]
 800663e:	4313      	orrs	r3, r2
 8006640:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	68fa      	ldr	r2, [r7, #12]
 8006646:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	689a      	ldr	r2, [r3, #8]
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	681a      	ldr	r2, [r3, #0]
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	4a16      	ldr	r2, [pc, #88]	@ (80066b4 <TIM_Base_SetConfig+0x12c>)
 800665c:	4293      	cmp	r3, r2
 800665e:	d00f      	beq.n	8006680 <TIM_Base_SetConfig+0xf8>
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	4a18      	ldr	r2, [pc, #96]	@ (80066c4 <TIM_Base_SetConfig+0x13c>)
 8006664:	4293      	cmp	r3, r2
 8006666:	d00b      	beq.n	8006680 <TIM_Base_SetConfig+0xf8>
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	4a17      	ldr	r2, [pc, #92]	@ (80066c8 <TIM_Base_SetConfig+0x140>)
 800666c:	4293      	cmp	r3, r2
 800666e:	d007      	beq.n	8006680 <TIM_Base_SetConfig+0xf8>
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	4a16      	ldr	r2, [pc, #88]	@ (80066cc <TIM_Base_SetConfig+0x144>)
 8006674:	4293      	cmp	r3, r2
 8006676:	d003      	beq.n	8006680 <TIM_Base_SetConfig+0xf8>
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	4a15      	ldr	r2, [pc, #84]	@ (80066d0 <TIM_Base_SetConfig+0x148>)
 800667c:	4293      	cmp	r3, r2
 800667e:	d103      	bne.n	8006688 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	691a      	ldr	r2, [r3, #16]
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2201      	movs	r2, #1
 800668c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	691b      	ldr	r3, [r3, #16]
 8006692:	f003 0301 	and.w	r3, r3, #1
 8006696:	2b01      	cmp	r3, #1
 8006698:	d105      	bne.n	80066a6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	691b      	ldr	r3, [r3, #16]
 800669e:	f023 0201 	bic.w	r2, r3, #1
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	611a      	str	r2, [r3, #16]
  }
}
 80066a6:	bf00      	nop
 80066a8:	3714      	adds	r7, #20
 80066aa:	46bd      	mov	sp, r7
 80066ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b0:	4770      	bx	lr
 80066b2:	bf00      	nop
 80066b4:	40010000 	.word	0x40010000
 80066b8:	40000400 	.word	0x40000400
 80066bc:	40000800 	.word	0x40000800
 80066c0:	40000c00 	.word	0x40000c00
 80066c4:	40010400 	.word	0x40010400
 80066c8:	40014000 	.word	0x40014000
 80066cc:	40014400 	.word	0x40014400
 80066d0:	40014800 	.word	0x40014800

080066d4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80066d4:	b480      	push	{r7}
 80066d6:	b087      	sub	sp, #28
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
 80066dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6a1b      	ldr	r3, [r3, #32]
 80066e2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	6a1b      	ldr	r3, [r3, #32]
 80066e8:	f023 0201 	bic.w	r2, r3, #1
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	685b      	ldr	r3, [r3, #4]
 80066f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	699b      	ldr	r3, [r3, #24]
 80066fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80066fc:	68fa      	ldr	r2, [r7, #12]
 80066fe:	4b37      	ldr	r3, [pc, #220]	@ (80067dc <TIM_OC1_SetConfig+0x108>)
 8006700:	4013      	ands	r3, r2
 8006702:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	f023 0303 	bic.w	r3, r3, #3
 800670a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	68fa      	ldr	r2, [r7, #12]
 8006712:	4313      	orrs	r3, r2
 8006714:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006716:	697b      	ldr	r3, [r7, #20]
 8006718:	f023 0302 	bic.w	r3, r3, #2
 800671c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	689b      	ldr	r3, [r3, #8]
 8006722:	697a      	ldr	r2, [r7, #20]
 8006724:	4313      	orrs	r3, r2
 8006726:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	4a2d      	ldr	r2, [pc, #180]	@ (80067e0 <TIM_OC1_SetConfig+0x10c>)
 800672c:	4293      	cmp	r3, r2
 800672e:	d00f      	beq.n	8006750 <TIM_OC1_SetConfig+0x7c>
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	4a2c      	ldr	r2, [pc, #176]	@ (80067e4 <TIM_OC1_SetConfig+0x110>)
 8006734:	4293      	cmp	r3, r2
 8006736:	d00b      	beq.n	8006750 <TIM_OC1_SetConfig+0x7c>
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	4a2b      	ldr	r2, [pc, #172]	@ (80067e8 <TIM_OC1_SetConfig+0x114>)
 800673c:	4293      	cmp	r3, r2
 800673e:	d007      	beq.n	8006750 <TIM_OC1_SetConfig+0x7c>
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	4a2a      	ldr	r2, [pc, #168]	@ (80067ec <TIM_OC1_SetConfig+0x118>)
 8006744:	4293      	cmp	r3, r2
 8006746:	d003      	beq.n	8006750 <TIM_OC1_SetConfig+0x7c>
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	4a29      	ldr	r2, [pc, #164]	@ (80067f0 <TIM_OC1_SetConfig+0x11c>)
 800674c:	4293      	cmp	r3, r2
 800674e:	d10c      	bne.n	800676a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006750:	697b      	ldr	r3, [r7, #20]
 8006752:	f023 0308 	bic.w	r3, r3, #8
 8006756:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	68db      	ldr	r3, [r3, #12]
 800675c:	697a      	ldr	r2, [r7, #20]
 800675e:	4313      	orrs	r3, r2
 8006760:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006762:	697b      	ldr	r3, [r7, #20]
 8006764:	f023 0304 	bic.w	r3, r3, #4
 8006768:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	4a1c      	ldr	r2, [pc, #112]	@ (80067e0 <TIM_OC1_SetConfig+0x10c>)
 800676e:	4293      	cmp	r3, r2
 8006770:	d00f      	beq.n	8006792 <TIM_OC1_SetConfig+0xbe>
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	4a1b      	ldr	r2, [pc, #108]	@ (80067e4 <TIM_OC1_SetConfig+0x110>)
 8006776:	4293      	cmp	r3, r2
 8006778:	d00b      	beq.n	8006792 <TIM_OC1_SetConfig+0xbe>
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	4a1a      	ldr	r2, [pc, #104]	@ (80067e8 <TIM_OC1_SetConfig+0x114>)
 800677e:	4293      	cmp	r3, r2
 8006780:	d007      	beq.n	8006792 <TIM_OC1_SetConfig+0xbe>
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	4a19      	ldr	r2, [pc, #100]	@ (80067ec <TIM_OC1_SetConfig+0x118>)
 8006786:	4293      	cmp	r3, r2
 8006788:	d003      	beq.n	8006792 <TIM_OC1_SetConfig+0xbe>
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	4a18      	ldr	r2, [pc, #96]	@ (80067f0 <TIM_OC1_SetConfig+0x11c>)
 800678e:	4293      	cmp	r3, r2
 8006790:	d111      	bne.n	80067b6 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006792:	693b      	ldr	r3, [r7, #16]
 8006794:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006798:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800679a:	693b      	ldr	r3, [r7, #16]
 800679c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80067a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80067a2:	683b      	ldr	r3, [r7, #0]
 80067a4:	695b      	ldr	r3, [r3, #20]
 80067a6:	693a      	ldr	r2, [r7, #16]
 80067a8:	4313      	orrs	r3, r2
 80067aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	699b      	ldr	r3, [r3, #24]
 80067b0:	693a      	ldr	r2, [r7, #16]
 80067b2:	4313      	orrs	r3, r2
 80067b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	693a      	ldr	r2, [r7, #16]
 80067ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	68fa      	ldr	r2, [r7, #12]
 80067c0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	685a      	ldr	r2, [r3, #4]
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	697a      	ldr	r2, [r7, #20]
 80067ce:	621a      	str	r2, [r3, #32]
}
 80067d0:	bf00      	nop
 80067d2:	371c      	adds	r7, #28
 80067d4:	46bd      	mov	sp, r7
 80067d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067da:	4770      	bx	lr
 80067dc:	fffeff8f 	.word	0xfffeff8f
 80067e0:	40010000 	.word	0x40010000
 80067e4:	40010400 	.word	0x40010400
 80067e8:	40014000 	.word	0x40014000
 80067ec:	40014400 	.word	0x40014400
 80067f0:	40014800 	.word	0x40014800

080067f4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80067f4:	b480      	push	{r7}
 80067f6:	b087      	sub	sp, #28
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
 80067fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6a1b      	ldr	r3, [r3, #32]
 8006802:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	6a1b      	ldr	r3, [r3, #32]
 8006808:	f023 0210 	bic.w	r2, r3, #16
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	685b      	ldr	r3, [r3, #4]
 8006814:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	699b      	ldr	r3, [r3, #24]
 800681a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800681c:	68fa      	ldr	r2, [r7, #12]
 800681e:	4b34      	ldr	r3, [pc, #208]	@ (80068f0 <TIM_OC2_SetConfig+0xfc>)
 8006820:	4013      	ands	r3, r2
 8006822:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800682a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	021b      	lsls	r3, r3, #8
 8006832:	68fa      	ldr	r2, [r7, #12]
 8006834:	4313      	orrs	r3, r2
 8006836:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006838:	697b      	ldr	r3, [r7, #20]
 800683a:	f023 0320 	bic.w	r3, r3, #32
 800683e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	689b      	ldr	r3, [r3, #8]
 8006844:	011b      	lsls	r3, r3, #4
 8006846:	697a      	ldr	r2, [r7, #20]
 8006848:	4313      	orrs	r3, r2
 800684a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	4a29      	ldr	r2, [pc, #164]	@ (80068f4 <TIM_OC2_SetConfig+0x100>)
 8006850:	4293      	cmp	r3, r2
 8006852:	d003      	beq.n	800685c <TIM_OC2_SetConfig+0x68>
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	4a28      	ldr	r2, [pc, #160]	@ (80068f8 <TIM_OC2_SetConfig+0x104>)
 8006858:	4293      	cmp	r3, r2
 800685a:	d10d      	bne.n	8006878 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800685c:	697b      	ldr	r3, [r7, #20]
 800685e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006862:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	68db      	ldr	r3, [r3, #12]
 8006868:	011b      	lsls	r3, r3, #4
 800686a:	697a      	ldr	r2, [r7, #20]
 800686c:	4313      	orrs	r3, r2
 800686e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006870:	697b      	ldr	r3, [r7, #20]
 8006872:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006876:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	4a1e      	ldr	r2, [pc, #120]	@ (80068f4 <TIM_OC2_SetConfig+0x100>)
 800687c:	4293      	cmp	r3, r2
 800687e:	d00f      	beq.n	80068a0 <TIM_OC2_SetConfig+0xac>
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	4a1d      	ldr	r2, [pc, #116]	@ (80068f8 <TIM_OC2_SetConfig+0x104>)
 8006884:	4293      	cmp	r3, r2
 8006886:	d00b      	beq.n	80068a0 <TIM_OC2_SetConfig+0xac>
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	4a1c      	ldr	r2, [pc, #112]	@ (80068fc <TIM_OC2_SetConfig+0x108>)
 800688c:	4293      	cmp	r3, r2
 800688e:	d007      	beq.n	80068a0 <TIM_OC2_SetConfig+0xac>
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	4a1b      	ldr	r2, [pc, #108]	@ (8006900 <TIM_OC2_SetConfig+0x10c>)
 8006894:	4293      	cmp	r3, r2
 8006896:	d003      	beq.n	80068a0 <TIM_OC2_SetConfig+0xac>
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	4a1a      	ldr	r2, [pc, #104]	@ (8006904 <TIM_OC2_SetConfig+0x110>)
 800689c:	4293      	cmp	r3, r2
 800689e:	d113      	bne.n	80068c8 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80068a0:	693b      	ldr	r3, [r7, #16]
 80068a2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80068a6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80068a8:	693b      	ldr	r3, [r7, #16]
 80068aa:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80068ae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	695b      	ldr	r3, [r3, #20]
 80068b4:	009b      	lsls	r3, r3, #2
 80068b6:	693a      	ldr	r2, [r7, #16]
 80068b8:	4313      	orrs	r3, r2
 80068ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	699b      	ldr	r3, [r3, #24]
 80068c0:	009b      	lsls	r3, r3, #2
 80068c2:	693a      	ldr	r2, [r7, #16]
 80068c4:	4313      	orrs	r3, r2
 80068c6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	693a      	ldr	r2, [r7, #16]
 80068cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	68fa      	ldr	r2, [r7, #12]
 80068d2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	685a      	ldr	r2, [r3, #4]
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	697a      	ldr	r2, [r7, #20]
 80068e0:	621a      	str	r2, [r3, #32]
}
 80068e2:	bf00      	nop
 80068e4:	371c      	adds	r7, #28
 80068e6:	46bd      	mov	sp, r7
 80068e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ec:	4770      	bx	lr
 80068ee:	bf00      	nop
 80068f0:	feff8fff 	.word	0xfeff8fff
 80068f4:	40010000 	.word	0x40010000
 80068f8:	40010400 	.word	0x40010400
 80068fc:	40014000 	.word	0x40014000
 8006900:	40014400 	.word	0x40014400
 8006904:	40014800 	.word	0x40014800

08006908 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006908:	b480      	push	{r7}
 800690a:	b087      	sub	sp, #28
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
 8006910:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6a1b      	ldr	r3, [r3, #32]
 8006916:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	6a1b      	ldr	r3, [r3, #32]
 800691c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	685b      	ldr	r3, [r3, #4]
 8006928:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	69db      	ldr	r3, [r3, #28]
 800692e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006930:	68fa      	ldr	r2, [r7, #12]
 8006932:	4b33      	ldr	r3, [pc, #204]	@ (8006a00 <TIM_OC3_SetConfig+0xf8>)
 8006934:	4013      	ands	r3, r2
 8006936:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	f023 0303 	bic.w	r3, r3, #3
 800693e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	68fa      	ldr	r2, [r7, #12]
 8006946:	4313      	orrs	r3, r2
 8006948:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800694a:	697b      	ldr	r3, [r7, #20]
 800694c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006950:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	689b      	ldr	r3, [r3, #8]
 8006956:	021b      	lsls	r3, r3, #8
 8006958:	697a      	ldr	r2, [r7, #20]
 800695a:	4313      	orrs	r3, r2
 800695c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	4a28      	ldr	r2, [pc, #160]	@ (8006a04 <TIM_OC3_SetConfig+0xfc>)
 8006962:	4293      	cmp	r3, r2
 8006964:	d003      	beq.n	800696e <TIM_OC3_SetConfig+0x66>
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	4a27      	ldr	r2, [pc, #156]	@ (8006a08 <TIM_OC3_SetConfig+0x100>)
 800696a:	4293      	cmp	r3, r2
 800696c:	d10d      	bne.n	800698a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800696e:	697b      	ldr	r3, [r7, #20]
 8006970:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006974:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006976:	683b      	ldr	r3, [r7, #0]
 8006978:	68db      	ldr	r3, [r3, #12]
 800697a:	021b      	lsls	r3, r3, #8
 800697c:	697a      	ldr	r2, [r7, #20]
 800697e:	4313      	orrs	r3, r2
 8006980:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006982:	697b      	ldr	r3, [r7, #20]
 8006984:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006988:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	4a1d      	ldr	r2, [pc, #116]	@ (8006a04 <TIM_OC3_SetConfig+0xfc>)
 800698e:	4293      	cmp	r3, r2
 8006990:	d00f      	beq.n	80069b2 <TIM_OC3_SetConfig+0xaa>
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	4a1c      	ldr	r2, [pc, #112]	@ (8006a08 <TIM_OC3_SetConfig+0x100>)
 8006996:	4293      	cmp	r3, r2
 8006998:	d00b      	beq.n	80069b2 <TIM_OC3_SetConfig+0xaa>
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	4a1b      	ldr	r2, [pc, #108]	@ (8006a0c <TIM_OC3_SetConfig+0x104>)
 800699e:	4293      	cmp	r3, r2
 80069a0:	d007      	beq.n	80069b2 <TIM_OC3_SetConfig+0xaa>
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	4a1a      	ldr	r2, [pc, #104]	@ (8006a10 <TIM_OC3_SetConfig+0x108>)
 80069a6:	4293      	cmp	r3, r2
 80069a8:	d003      	beq.n	80069b2 <TIM_OC3_SetConfig+0xaa>
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	4a19      	ldr	r2, [pc, #100]	@ (8006a14 <TIM_OC3_SetConfig+0x10c>)
 80069ae:	4293      	cmp	r3, r2
 80069b0:	d113      	bne.n	80069da <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80069b2:	693b      	ldr	r3, [r7, #16]
 80069b4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80069b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80069ba:	693b      	ldr	r3, [r7, #16]
 80069bc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80069c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80069c2:	683b      	ldr	r3, [r7, #0]
 80069c4:	695b      	ldr	r3, [r3, #20]
 80069c6:	011b      	lsls	r3, r3, #4
 80069c8:	693a      	ldr	r2, [r7, #16]
 80069ca:	4313      	orrs	r3, r2
 80069cc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	699b      	ldr	r3, [r3, #24]
 80069d2:	011b      	lsls	r3, r3, #4
 80069d4:	693a      	ldr	r2, [r7, #16]
 80069d6:	4313      	orrs	r3, r2
 80069d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	693a      	ldr	r2, [r7, #16]
 80069de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	68fa      	ldr	r2, [r7, #12]
 80069e4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	685a      	ldr	r2, [r3, #4]
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	697a      	ldr	r2, [r7, #20]
 80069f2:	621a      	str	r2, [r3, #32]
}
 80069f4:	bf00      	nop
 80069f6:	371c      	adds	r7, #28
 80069f8:	46bd      	mov	sp, r7
 80069fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fe:	4770      	bx	lr
 8006a00:	fffeff8f 	.word	0xfffeff8f
 8006a04:	40010000 	.word	0x40010000
 8006a08:	40010400 	.word	0x40010400
 8006a0c:	40014000 	.word	0x40014000
 8006a10:	40014400 	.word	0x40014400
 8006a14:	40014800 	.word	0x40014800

08006a18 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006a18:	b480      	push	{r7}
 8006a1a:	b087      	sub	sp, #28
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
 8006a20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	6a1b      	ldr	r3, [r3, #32]
 8006a26:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	6a1b      	ldr	r3, [r3, #32]
 8006a2c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	685b      	ldr	r3, [r3, #4]
 8006a38:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	69db      	ldr	r3, [r3, #28]
 8006a3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006a40:	68fa      	ldr	r2, [r7, #12]
 8006a42:	4b24      	ldr	r3, [pc, #144]	@ (8006ad4 <TIM_OC4_SetConfig+0xbc>)
 8006a44:	4013      	ands	r3, r2
 8006a46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006a4e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	021b      	lsls	r3, r3, #8
 8006a56:	68fa      	ldr	r2, [r7, #12]
 8006a58:	4313      	orrs	r3, r2
 8006a5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006a5c:	693b      	ldr	r3, [r7, #16]
 8006a5e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006a62:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	689b      	ldr	r3, [r3, #8]
 8006a68:	031b      	lsls	r3, r3, #12
 8006a6a:	693a      	ldr	r2, [r7, #16]
 8006a6c:	4313      	orrs	r3, r2
 8006a6e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	4a19      	ldr	r2, [pc, #100]	@ (8006ad8 <TIM_OC4_SetConfig+0xc0>)
 8006a74:	4293      	cmp	r3, r2
 8006a76:	d00f      	beq.n	8006a98 <TIM_OC4_SetConfig+0x80>
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	4a18      	ldr	r2, [pc, #96]	@ (8006adc <TIM_OC4_SetConfig+0xc4>)
 8006a7c:	4293      	cmp	r3, r2
 8006a7e:	d00b      	beq.n	8006a98 <TIM_OC4_SetConfig+0x80>
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	4a17      	ldr	r2, [pc, #92]	@ (8006ae0 <TIM_OC4_SetConfig+0xc8>)
 8006a84:	4293      	cmp	r3, r2
 8006a86:	d007      	beq.n	8006a98 <TIM_OC4_SetConfig+0x80>
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	4a16      	ldr	r2, [pc, #88]	@ (8006ae4 <TIM_OC4_SetConfig+0xcc>)
 8006a8c:	4293      	cmp	r3, r2
 8006a8e:	d003      	beq.n	8006a98 <TIM_OC4_SetConfig+0x80>
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	4a15      	ldr	r2, [pc, #84]	@ (8006ae8 <TIM_OC4_SetConfig+0xd0>)
 8006a94:	4293      	cmp	r3, r2
 8006a96:	d109      	bne.n	8006aac <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006a98:	697b      	ldr	r3, [r7, #20]
 8006a9a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006a9e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	695b      	ldr	r3, [r3, #20]
 8006aa4:	019b      	lsls	r3, r3, #6
 8006aa6:	697a      	ldr	r2, [r7, #20]
 8006aa8:	4313      	orrs	r3, r2
 8006aaa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	697a      	ldr	r2, [r7, #20]
 8006ab0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	68fa      	ldr	r2, [r7, #12]
 8006ab6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	685a      	ldr	r2, [r3, #4]
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	693a      	ldr	r2, [r7, #16]
 8006ac4:	621a      	str	r2, [r3, #32]
}
 8006ac6:	bf00      	nop
 8006ac8:	371c      	adds	r7, #28
 8006aca:	46bd      	mov	sp, r7
 8006acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad0:	4770      	bx	lr
 8006ad2:	bf00      	nop
 8006ad4:	feff8fff 	.word	0xfeff8fff
 8006ad8:	40010000 	.word	0x40010000
 8006adc:	40010400 	.word	0x40010400
 8006ae0:	40014000 	.word	0x40014000
 8006ae4:	40014400 	.word	0x40014400
 8006ae8:	40014800 	.word	0x40014800

08006aec <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006aec:	b480      	push	{r7}
 8006aee:	b087      	sub	sp, #28
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
 8006af4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	6a1b      	ldr	r3, [r3, #32]
 8006afa:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	6a1b      	ldr	r3, [r3, #32]
 8006b00:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	685b      	ldr	r3, [r3, #4]
 8006b0c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006b14:	68fa      	ldr	r2, [r7, #12]
 8006b16:	4b21      	ldr	r3, [pc, #132]	@ (8006b9c <TIM_OC5_SetConfig+0xb0>)
 8006b18:	4013      	ands	r3, r2
 8006b1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	68fa      	ldr	r2, [r7, #12]
 8006b22:	4313      	orrs	r3, r2
 8006b24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006b26:	693b      	ldr	r3, [r7, #16]
 8006b28:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006b2c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	689b      	ldr	r3, [r3, #8]
 8006b32:	041b      	lsls	r3, r3, #16
 8006b34:	693a      	ldr	r2, [r7, #16]
 8006b36:	4313      	orrs	r3, r2
 8006b38:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	4a18      	ldr	r2, [pc, #96]	@ (8006ba0 <TIM_OC5_SetConfig+0xb4>)
 8006b3e:	4293      	cmp	r3, r2
 8006b40:	d00f      	beq.n	8006b62 <TIM_OC5_SetConfig+0x76>
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	4a17      	ldr	r2, [pc, #92]	@ (8006ba4 <TIM_OC5_SetConfig+0xb8>)
 8006b46:	4293      	cmp	r3, r2
 8006b48:	d00b      	beq.n	8006b62 <TIM_OC5_SetConfig+0x76>
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	4a16      	ldr	r2, [pc, #88]	@ (8006ba8 <TIM_OC5_SetConfig+0xbc>)
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	d007      	beq.n	8006b62 <TIM_OC5_SetConfig+0x76>
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	4a15      	ldr	r2, [pc, #84]	@ (8006bac <TIM_OC5_SetConfig+0xc0>)
 8006b56:	4293      	cmp	r3, r2
 8006b58:	d003      	beq.n	8006b62 <TIM_OC5_SetConfig+0x76>
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	4a14      	ldr	r2, [pc, #80]	@ (8006bb0 <TIM_OC5_SetConfig+0xc4>)
 8006b5e:	4293      	cmp	r3, r2
 8006b60:	d109      	bne.n	8006b76 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006b62:	697b      	ldr	r3, [r7, #20]
 8006b64:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006b68:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	695b      	ldr	r3, [r3, #20]
 8006b6e:	021b      	lsls	r3, r3, #8
 8006b70:	697a      	ldr	r2, [r7, #20]
 8006b72:	4313      	orrs	r3, r2
 8006b74:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	697a      	ldr	r2, [r7, #20]
 8006b7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	68fa      	ldr	r2, [r7, #12]
 8006b80:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006b82:	683b      	ldr	r3, [r7, #0]
 8006b84:	685a      	ldr	r2, [r3, #4]
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	693a      	ldr	r2, [r7, #16]
 8006b8e:	621a      	str	r2, [r3, #32]
}
 8006b90:	bf00      	nop
 8006b92:	371c      	adds	r7, #28
 8006b94:	46bd      	mov	sp, r7
 8006b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9a:	4770      	bx	lr
 8006b9c:	fffeff8f 	.word	0xfffeff8f
 8006ba0:	40010000 	.word	0x40010000
 8006ba4:	40010400 	.word	0x40010400
 8006ba8:	40014000 	.word	0x40014000
 8006bac:	40014400 	.word	0x40014400
 8006bb0:	40014800 	.word	0x40014800

08006bb4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006bb4:	b480      	push	{r7}
 8006bb6:	b087      	sub	sp, #28
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]
 8006bbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	6a1b      	ldr	r3, [r3, #32]
 8006bc2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	6a1b      	ldr	r3, [r3, #32]
 8006bc8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	685b      	ldr	r3, [r3, #4]
 8006bd4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006bda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006bdc:	68fa      	ldr	r2, [r7, #12]
 8006bde:	4b22      	ldr	r3, [pc, #136]	@ (8006c68 <TIM_OC6_SetConfig+0xb4>)
 8006be0:	4013      	ands	r3, r2
 8006be2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006be4:	683b      	ldr	r3, [r7, #0]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	021b      	lsls	r3, r3, #8
 8006bea:	68fa      	ldr	r2, [r7, #12]
 8006bec:	4313      	orrs	r3, r2
 8006bee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006bf0:	693b      	ldr	r3, [r7, #16]
 8006bf2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006bf6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	689b      	ldr	r3, [r3, #8]
 8006bfc:	051b      	lsls	r3, r3, #20
 8006bfe:	693a      	ldr	r2, [r7, #16]
 8006c00:	4313      	orrs	r3, r2
 8006c02:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	4a19      	ldr	r2, [pc, #100]	@ (8006c6c <TIM_OC6_SetConfig+0xb8>)
 8006c08:	4293      	cmp	r3, r2
 8006c0a:	d00f      	beq.n	8006c2c <TIM_OC6_SetConfig+0x78>
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	4a18      	ldr	r2, [pc, #96]	@ (8006c70 <TIM_OC6_SetConfig+0xbc>)
 8006c10:	4293      	cmp	r3, r2
 8006c12:	d00b      	beq.n	8006c2c <TIM_OC6_SetConfig+0x78>
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	4a17      	ldr	r2, [pc, #92]	@ (8006c74 <TIM_OC6_SetConfig+0xc0>)
 8006c18:	4293      	cmp	r3, r2
 8006c1a:	d007      	beq.n	8006c2c <TIM_OC6_SetConfig+0x78>
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	4a16      	ldr	r2, [pc, #88]	@ (8006c78 <TIM_OC6_SetConfig+0xc4>)
 8006c20:	4293      	cmp	r3, r2
 8006c22:	d003      	beq.n	8006c2c <TIM_OC6_SetConfig+0x78>
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	4a15      	ldr	r2, [pc, #84]	@ (8006c7c <TIM_OC6_SetConfig+0xc8>)
 8006c28:	4293      	cmp	r3, r2
 8006c2a:	d109      	bne.n	8006c40 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006c2c:	697b      	ldr	r3, [r7, #20]
 8006c2e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006c32:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	695b      	ldr	r3, [r3, #20]
 8006c38:	029b      	lsls	r3, r3, #10
 8006c3a:	697a      	ldr	r2, [r7, #20]
 8006c3c:	4313      	orrs	r3, r2
 8006c3e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	697a      	ldr	r2, [r7, #20]
 8006c44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	68fa      	ldr	r2, [r7, #12]
 8006c4a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	685a      	ldr	r2, [r3, #4]
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	693a      	ldr	r2, [r7, #16]
 8006c58:	621a      	str	r2, [r3, #32]
}
 8006c5a:	bf00      	nop
 8006c5c:	371c      	adds	r7, #28
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c64:	4770      	bx	lr
 8006c66:	bf00      	nop
 8006c68:	feff8fff 	.word	0xfeff8fff
 8006c6c:	40010000 	.word	0x40010000
 8006c70:	40010400 	.word	0x40010400
 8006c74:	40014000 	.word	0x40014000
 8006c78:	40014400 	.word	0x40014400
 8006c7c:	40014800 	.word	0x40014800

08006c80 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006c80:	b480      	push	{r7}
 8006c82:	b087      	sub	sp, #28
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	60f8      	str	r0, [r7, #12]
 8006c88:	60b9      	str	r1, [r7, #8]
 8006c8a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	6a1b      	ldr	r3, [r3, #32]
 8006c90:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	6a1b      	ldr	r3, [r3, #32]
 8006c96:	f023 0201 	bic.w	r2, r3, #1
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	699b      	ldr	r3, [r3, #24]
 8006ca2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006ca4:	693b      	ldr	r3, [r7, #16]
 8006ca6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006caa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	011b      	lsls	r3, r3, #4
 8006cb0:	693a      	ldr	r2, [r7, #16]
 8006cb2:	4313      	orrs	r3, r2
 8006cb4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006cb6:	697b      	ldr	r3, [r7, #20]
 8006cb8:	f023 030a 	bic.w	r3, r3, #10
 8006cbc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006cbe:	697a      	ldr	r2, [r7, #20]
 8006cc0:	68bb      	ldr	r3, [r7, #8]
 8006cc2:	4313      	orrs	r3, r2
 8006cc4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	693a      	ldr	r2, [r7, #16]
 8006cca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	697a      	ldr	r2, [r7, #20]
 8006cd0:	621a      	str	r2, [r3, #32]
}
 8006cd2:	bf00      	nop
 8006cd4:	371c      	adds	r7, #28
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cdc:	4770      	bx	lr

08006cde <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006cde:	b480      	push	{r7}
 8006ce0:	b087      	sub	sp, #28
 8006ce2:	af00      	add	r7, sp, #0
 8006ce4:	60f8      	str	r0, [r7, #12]
 8006ce6:	60b9      	str	r1, [r7, #8]
 8006ce8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	6a1b      	ldr	r3, [r3, #32]
 8006cee:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	6a1b      	ldr	r3, [r3, #32]
 8006cf4:	f023 0210 	bic.w	r2, r3, #16
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	699b      	ldr	r3, [r3, #24]
 8006d00:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006d02:	693b      	ldr	r3, [r7, #16]
 8006d04:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006d08:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	031b      	lsls	r3, r3, #12
 8006d0e:	693a      	ldr	r2, [r7, #16]
 8006d10:	4313      	orrs	r3, r2
 8006d12:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006d14:	697b      	ldr	r3, [r7, #20]
 8006d16:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006d1a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006d1c:	68bb      	ldr	r3, [r7, #8]
 8006d1e:	011b      	lsls	r3, r3, #4
 8006d20:	697a      	ldr	r2, [r7, #20]
 8006d22:	4313      	orrs	r3, r2
 8006d24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	693a      	ldr	r2, [r7, #16]
 8006d2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	697a      	ldr	r2, [r7, #20]
 8006d30:	621a      	str	r2, [r3, #32]
}
 8006d32:	bf00      	nop
 8006d34:	371c      	adds	r7, #28
 8006d36:	46bd      	mov	sp, r7
 8006d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3c:	4770      	bx	lr
	...

08006d40 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006d40:	b480      	push	{r7}
 8006d42:	b085      	sub	sp, #20
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
 8006d48:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	689b      	ldr	r3, [r3, #8]
 8006d4e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006d50:	68fa      	ldr	r2, [r7, #12]
 8006d52:	4b09      	ldr	r3, [pc, #36]	@ (8006d78 <TIM_ITRx_SetConfig+0x38>)
 8006d54:	4013      	ands	r3, r2
 8006d56:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006d58:	683a      	ldr	r2, [r7, #0]
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	4313      	orrs	r3, r2
 8006d5e:	f043 0307 	orr.w	r3, r3, #7
 8006d62:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	68fa      	ldr	r2, [r7, #12]
 8006d68:	609a      	str	r2, [r3, #8]
}
 8006d6a:	bf00      	nop
 8006d6c:	3714      	adds	r7, #20
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d74:	4770      	bx	lr
 8006d76:	bf00      	nop
 8006d78:	ffcfff8f 	.word	0xffcfff8f

08006d7c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006d7c:	b480      	push	{r7}
 8006d7e:	b087      	sub	sp, #28
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	60f8      	str	r0, [r7, #12]
 8006d84:	60b9      	str	r1, [r7, #8]
 8006d86:	607a      	str	r2, [r7, #4]
 8006d88:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	689b      	ldr	r3, [r3, #8]
 8006d8e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006d90:	697b      	ldr	r3, [r7, #20]
 8006d92:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006d96:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006d98:	683b      	ldr	r3, [r7, #0]
 8006d9a:	021a      	lsls	r2, r3, #8
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	431a      	orrs	r2, r3
 8006da0:	68bb      	ldr	r3, [r7, #8]
 8006da2:	4313      	orrs	r3, r2
 8006da4:	697a      	ldr	r2, [r7, #20]
 8006da6:	4313      	orrs	r3, r2
 8006da8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	697a      	ldr	r2, [r7, #20]
 8006dae:	609a      	str	r2, [r3, #8]
}
 8006db0:	bf00      	nop
 8006db2:	371c      	adds	r7, #28
 8006db4:	46bd      	mov	sp, r7
 8006db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dba:	4770      	bx	lr

08006dbc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006dbc:	b480      	push	{r7}
 8006dbe:	b087      	sub	sp, #28
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	60f8      	str	r0, [r7, #12]
 8006dc4:	60b9      	str	r1, [r7, #8]
 8006dc6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006dc8:	68bb      	ldr	r3, [r7, #8]
 8006dca:	f003 031f 	and.w	r3, r3, #31
 8006dce:	2201      	movs	r2, #1
 8006dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8006dd4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	6a1a      	ldr	r2, [r3, #32]
 8006dda:	697b      	ldr	r3, [r7, #20]
 8006ddc:	43db      	mvns	r3, r3
 8006dde:	401a      	ands	r2, r3
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	6a1a      	ldr	r2, [r3, #32]
 8006de8:	68bb      	ldr	r3, [r7, #8]
 8006dea:	f003 031f 	and.w	r3, r3, #31
 8006dee:	6879      	ldr	r1, [r7, #4]
 8006df0:	fa01 f303 	lsl.w	r3, r1, r3
 8006df4:	431a      	orrs	r2, r3
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	621a      	str	r2, [r3, #32]
}
 8006dfa:	bf00      	nop
 8006dfc:	371c      	adds	r7, #28
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e04:	4770      	bx	lr
	...

08006e08 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006e08:	b480      	push	{r7}
 8006e0a:	b085      	sub	sp, #20
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
 8006e10:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006e18:	2b01      	cmp	r3, #1
 8006e1a:	d101      	bne.n	8006e20 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006e1c:	2302      	movs	r3, #2
 8006e1e:	e06d      	b.n	8006efc <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2201      	movs	r2, #1
 8006e24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2202      	movs	r2, #2
 8006e2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	685b      	ldr	r3, [r3, #4]
 8006e36:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	689b      	ldr	r3, [r3, #8]
 8006e3e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	4a30      	ldr	r2, [pc, #192]	@ (8006f08 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006e46:	4293      	cmp	r3, r2
 8006e48:	d004      	beq.n	8006e54 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	4a2f      	ldr	r2, [pc, #188]	@ (8006f0c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006e50:	4293      	cmp	r3, r2
 8006e52:	d108      	bne.n	8006e66 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006e5a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006e5c:	683b      	ldr	r3, [r7, #0]
 8006e5e:	685b      	ldr	r3, [r3, #4]
 8006e60:	68fa      	ldr	r2, [r7, #12]
 8006e62:	4313      	orrs	r3, r2
 8006e64:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e6c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	68fa      	ldr	r2, [r7, #12]
 8006e74:	4313      	orrs	r3, r2
 8006e76:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	68fa      	ldr	r2, [r7, #12]
 8006e7e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	4a20      	ldr	r2, [pc, #128]	@ (8006f08 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006e86:	4293      	cmp	r3, r2
 8006e88:	d022      	beq.n	8006ed0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006e92:	d01d      	beq.n	8006ed0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	4a1d      	ldr	r2, [pc, #116]	@ (8006f10 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006e9a:	4293      	cmp	r3, r2
 8006e9c:	d018      	beq.n	8006ed0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	4a1c      	ldr	r2, [pc, #112]	@ (8006f14 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006ea4:	4293      	cmp	r3, r2
 8006ea6:	d013      	beq.n	8006ed0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	4a1a      	ldr	r2, [pc, #104]	@ (8006f18 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006eae:	4293      	cmp	r3, r2
 8006eb0:	d00e      	beq.n	8006ed0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	4a15      	ldr	r2, [pc, #84]	@ (8006f0c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006eb8:	4293      	cmp	r3, r2
 8006eba:	d009      	beq.n	8006ed0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	4a16      	ldr	r2, [pc, #88]	@ (8006f1c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006ec2:	4293      	cmp	r3, r2
 8006ec4:	d004      	beq.n	8006ed0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	4a15      	ldr	r2, [pc, #84]	@ (8006f20 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006ecc:	4293      	cmp	r3, r2
 8006ece:	d10c      	bne.n	8006eea <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006ed0:	68bb      	ldr	r3, [r7, #8]
 8006ed2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006ed6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	689b      	ldr	r3, [r3, #8]
 8006edc:	68ba      	ldr	r2, [r7, #8]
 8006ede:	4313      	orrs	r3, r2
 8006ee0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	68ba      	ldr	r2, [r7, #8]
 8006ee8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	2201      	movs	r2, #1
 8006eee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006efa:	2300      	movs	r3, #0
}
 8006efc:	4618      	mov	r0, r3
 8006efe:	3714      	adds	r7, #20
 8006f00:	46bd      	mov	sp, r7
 8006f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f06:	4770      	bx	lr
 8006f08:	40010000 	.word	0x40010000
 8006f0c:	40010400 	.word	0x40010400
 8006f10:	40000400 	.word	0x40000400
 8006f14:	40000800 	.word	0x40000800
 8006f18:	40000c00 	.word	0x40000c00
 8006f1c:	40001800 	.word	0x40001800
 8006f20:	40014000 	.word	0x40014000

08006f24 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006f24:	b480      	push	{r7}
 8006f26:	b083      	sub	sp, #12
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006f2c:	bf00      	nop
 8006f2e:	370c      	adds	r7, #12
 8006f30:	46bd      	mov	sp, r7
 8006f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f36:	4770      	bx	lr

08006f38 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006f38:	b480      	push	{r7}
 8006f3a:	b083      	sub	sp, #12
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006f40:	bf00      	nop
 8006f42:	370c      	adds	r7, #12
 8006f44:	46bd      	mov	sp, r7
 8006f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4a:	4770      	bx	lr

08006f4c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006f4c:	b480      	push	{r7}
 8006f4e:	b083      	sub	sp, #12
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006f54:	bf00      	nop
 8006f56:	370c      	adds	r7, #12
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5e:	4770      	bx	lr

08006f60 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006f60:	b580      	push	{r7, lr}
 8006f62:	b082      	sub	sp, #8
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d101      	bne.n	8006f72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006f6e:	2301      	movs	r3, #1
 8006f70:	e042      	b.n	8006ff8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d106      	bne.n	8006f8a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2200      	movs	r2, #0
 8006f80:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006f84:	6878      	ldr	r0, [r7, #4]
 8006f86:	f000 f83b 	bl	8007000 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	2224      	movs	r2, #36	@ 0x24
 8006f8e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	681a      	ldr	r2, [r3, #0]
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	f022 0201 	bic.w	r2, r2, #1
 8006fa0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d002      	beq.n	8006fb0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006faa:	6878      	ldr	r0, [r7, #4]
 8006fac:	f000 fd9a 	bl	8007ae4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006fb0:	6878      	ldr	r0, [r7, #4]
 8006fb2:	f000 f82f 	bl	8007014 <UART_SetConfig>
 8006fb6:	4603      	mov	r3, r0
 8006fb8:	2b01      	cmp	r3, #1
 8006fba:	d101      	bne.n	8006fc0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006fbc:	2301      	movs	r3, #1
 8006fbe:	e01b      	b.n	8006ff8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	685a      	ldr	r2, [r3, #4]
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006fce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	689a      	ldr	r2, [r3, #8]
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006fde:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	681a      	ldr	r2, [r3, #0]
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	f042 0201 	orr.w	r2, r2, #1
 8006fee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006ff0:	6878      	ldr	r0, [r7, #4]
 8006ff2:	f000 fe19 	bl	8007c28 <UART_CheckIdleState>
 8006ff6:	4603      	mov	r3, r0
}
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	3708      	adds	r7, #8
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	bd80      	pop	{r7, pc}

08007000 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8007000:	b480      	push	{r7}
 8007002:	b083      	sub	sp, #12
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8007008:	bf00      	nop
 800700a:	370c      	adds	r7, #12
 800700c:	46bd      	mov	sp, r7
 800700e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007012:	4770      	bx	lr

08007014 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007014:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007018:	b092      	sub	sp, #72	@ 0x48
 800701a:	af00      	add	r7, sp, #0
 800701c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800701e:	2300      	movs	r3, #0
 8007020:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007024:	697b      	ldr	r3, [r7, #20]
 8007026:	689a      	ldr	r2, [r3, #8]
 8007028:	697b      	ldr	r3, [r7, #20]
 800702a:	691b      	ldr	r3, [r3, #16]
 800702c:	431a      	orrs	r2, r3
 800702e:	697b      	ldr	r3, [r7, #20]
 8007030:	695b      	ldr	r3, [r3, #20]
 8007032:	431a      	orrs	r2, r3
 8007034:	697b      	ldr	r3, [r7, #20]
 8007036:	69db      	ldr	r3, [r3, #28]
 8007038:	4313      	orrs	r3, r2
 800703a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800703c:	697b      	ldr	r3, [r7, #20]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	681a      	ldr	r2, [r3, #0]
 8007042:	4bbe      	ldr	r3, [pc, #760]	@ (800733c <UART_SetConfig+0x328>)
 8007044:	4013      	ands	r3, r2
 8007046:	697a      	ldr	r2, [r7, #20]
 8007048:	6812      	ldr	r2, [r2, #0]
 800704a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800704c:	430b      	orrs	r3, r1
 800704e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007050:	697b      	ldr	r3, [r7, #20]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	685b      	ldr	r3, [r3, #4]
 8007056:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800705a:	697b      	ldr	r3, [r7, #20]
 800705c:	68da      	ldr	r2, [r3, #12]
 800705e:	697b      	ldr	r3, [r7, #20]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	430a      	orrs	r2, r1
 8007064:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007066:	697b      	ldr	r3, [r7, #20]
 8007068:	699b      	ldr	r3, [r3, #24]
 800706a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800706c:	697b      	ldr	r3, [r7, #20]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	4ab3      	ldr	r2, [pc, #716]	@ (8007340 <UART_SetConfig+0x32c>)
 8007072:	4293      	cmp	r3, r2
 8007074:	d004      	beq.n	8007080 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007076:	697b      	ldr	r3, [r7, #20]
 8007078:	6a1b      	ldr	r3, [r3, #32]
 800707a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800707c:	4313      	orrs	r3, r2
 800707e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007080:	697b      	ldr	r3, [r7, #20]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	689a      	ldr	r2, [r3, #8]
 8007086:	4baf      	ldr	r3, [pc, #700]	@ (8007344 <UART_SetConfig+0x330>)
 8007088:	4013      	ands	r3, r2
 800708a:	697a      	ldr	r2, [r7, #20]
 800708c:	6812      	ldr	r2, [r2, #0]
 800708e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007090:	430b      	orrs	r3, r1
 8007092:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007094:	697b      	ldr	r3, [r7, #20]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800709a:	f023 010f 	bic.w	r1, r3, #15
 800709e:	697b      	ldr	r3, [r7, #20]
 80070a0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80070a2:	697b      	ldr	r3, [r7, #20]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	430a      	orrs	r2, r1
 80070a8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80070aa:	697b      	ldr	r3, [r7, #20]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	4aa6      	ldr	r2, [pc, #664]	@ (8007348 <UART_SetConfig+0x334>)
 80070b0:	4293      	cmp	r3, r2
 80070b2:	d177      	bne.n	80071a4 <UART_SetConfig+0x190>
 80070b4:	4ba5      	ldr	r3, [pc, #660]	@ (800734c <UART_SetConfig+0x338>)
 80070b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80070b8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80070bc:	2b28      	cmp	r3, #40	@ 0x28
 80070be:	d86d      	bhi.n	800719c <UART_SetConfig+0x188>
 80070c0:	a201      	add	r2, pc, #4	@ (adr r2, 80070c8 <UART_SetConfig+0xb4>)
 80070c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070c6:	bf00      	nop
 80070c8:	0800716d 	.word	0x0800716d
 80070cc:	0800719d 	.word	0x0800719d
 80070d0:	0800719d 	.word	0x0800719d
 80070d4:	0800719d 	.word	0x0800719d
 80070d8:	0800719d 	.word	0x0800719d
 80070dc:	0800719d 	.word	0x0800719d
 80070e0:	0800719d 	.word	0x0800719d
 80070e4:	0800719d 	.word	0x0800719d
 80070e8:	08007175 	.word	0x08007175
 80070ec:	0800719d 	.word	0x0800719d
 80070f0:	0800719d 	.word	0x0800719d
 80070f4:	0800719d 	.word	0x0800719d
 80070f8:	0800719d 	.word	0x0800719d
 80070fc:	0800719d 	.word	0x0800719d
 8007100:	0800719d 	.word	0x0800719d
 8007104:	0800719d 	.word	0x0800719d
 8007108:	0800717d 	.word	0x0800717d
 800710c:	0800719d 	.word	0x0800719d
 8007110:	0800719d 	.word	0x0800719d
 8007114:	0800719d 	.word	0x0800719d
 8007118:	0800719d 	.word	0x0800719d
 800711c:	0800719d 	.word	0x0800719d
 8007120:	0800719d 	.word	0x0800719d
 8007124:	0800719d 	.word	0x0800719d
 8007128:	08007185 	.word	0x08007185
 800712c:	0800719d 	.word	0x0800719d
 8007130:	0800719d 	.word	0x0800719d
 8007134:	0800719d 	.word	0x0800719d
 8007138:	0800719d 	.word	0x0800719d
 800713c:	0800719d 	.word	0x0800719d
 8007140:	0800719d 	.word	0x0800719d
 8007144:	0800719d 	.word	0x0800719d
 8007148:	0800718d 	.word	0x0800718d
 800714c:	0800719d 	.word	0x0800719d
 8007150:	0800719d 	.word	0x0800719d
 8007154:	0800719d 	.word	0x0800719d
 8007158:	0800719d 	.word	0x0800719d
 800715c:	0800719d 	.word	0x0800719d
 8007160:	0800719d 	.word	0x0800719d
 8007164:	0800719d 	.word	0x0800719d
 8007168:	08007195 	.word	0x08007195
 800716c:	2301      	movs	r3, #1
 800716e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007172:	e222      	b.n	80075ba <UART_SetConfig+0x5a6>
 8007174:	2304      	movs	r3, #4
 8007176:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800717a:	e21e      	b.n	80075ba <UART_SetConfig+0x5a6>
 800717c:	2308      	movs	r3, #8
 800717e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007182:	e21a      	b.n	80075ba <UART_SetConfig+0x5a6>
 8007184:	2310      	movs	r3, #16
 8007186:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800718a:	e216      	b.n	80075ba <UART_SetConfig+0x5a6>
 800718c:	2320      	movs	r3, #32
 800718e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007192:	e212      	b.n	80075ba <UART_SetConfig+0x5a6>
 8007194:	2340      	movs	r3, #64	@ 0x40
 8007196:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800719a:	e20e      	b.n	80075ba <UART_SetConfig+0x5a6>
 800719c:	2380      	movs	r3, #128	@ 0x80
 800719e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80071a2:	e20a      	b.n	80075ba <UART_SetConfig+0x5a6>
 80071a4:	697b      	ldr	r3, [r7, #20]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	4a69      	ldr	r2, [pc, #420]	@ (8007350 <UART_SetConfig+0x33c>)
 80071aa:	4293      	cmp	r3, r2
 80071ac:	d130      	bne.n	8007210 <UART_SetConfig+0x1fc>
 80071ae:	4b67      	ldr	r3, [pc, #412]	@ (800734c <UART_SetConfig+0x338>)
 80071b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80071b2:	f003 0307 	and.w	r3, r3, #7
 80071b6:	2b05      	cmp	r3, #5
 80071b8:	d826      	bhi.n	8007208 <UART_SetConfig+0x1f4>
 80071ba:	a201      	add	r2, pc, #4	@ (adr r2, 80071c0 <UART_SetConfig+0x1ac>)
 80071bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071c0:	080071d9 	.word	0x080071d9
 80071c4:	080071e1 	.word	0x080071e1
 80071c8:	080071e9 	.word	0x080071e9
 80071cc:	080071f1 	.word	0x080071f1
 80071d0:	080071f9 	.word	0x080071f9
 80071d4:	08007201 	.word	0x08007201
 80071d8:	2300      	movs	r3, #0
 80071da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80071de:	e1ec      	b.n	80075ba <UART_SetConfig+0x5a6>
 80071e0:	2304      	movs	r3, #4
 80071e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80071e6:	e1e8      	b.n	80075ba <UART_SetConfig+0x5a6>
 80071e8:	2308      	movs	r3, #8
 80071ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80071ee:	e1e4      	b.n	80075ba <UART_SetConfig+0x5a6>
 80071f0:	2310      	movs	r3, #16
 80071f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80071f6:	e1e0      	b.n	80075ba <UART_SetConfig+0x5a6>
 80071f8:	2320      	movs	r3, #32
 80071fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80071fe:	e1dc      	b.n	80075ba <UART_SetConfig+0x5a6>
 8007200:	2340      	movs	r3, #64	@ 0x40
 8007202:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007206:	e1d8      	b.n	80075ba <UART_SetConfig+0x5a6>
 8007208:	2380      	movs	r3, #128	@ 0x80
 800720a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800720e:	e1d4      	b.n	80075ba <UART_SetConfig+0x5a6>
 8007210:	697b      	ldr	r3, [r7, #20]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	4a4f      	ldr	r2, [pc, #316]	@ (8007354 <UART_SetConfig+0x340>)
 8007216:	4293      	cmp	r3, r2
 8007218:	d130      	bne.n	800727c <UART_SetConfig+0x268>
 800721a:	4b4c      	ldr	r3, [pc, #304]	@ (800734c <UART_SetConfig+0x338>)
 800721c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800721e:	f003 0307 	and.w	r3, r3, #7
 8007222:	2b05      	cmp	r3, #5
 8007224:	d826      	bhi.n	8007274 <UART_SetConfig+0x260>
 8007226:	a201      	add	r2, pc, #4	@ (adr r2, 800722c <UART_SetConfig+0x218>)
 8007228:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800722c:	08007245 	.word	0x08007245
 8007230:	0800724d 	.word	0x0800724d
 8007234:	08007255 	.word	0x08007255
 8007238:	0800725d 	.word	0x0800725d
 800723c:	08007265 	.word	0x08007265
 8007240:	0800726d 	.word	0x0800726d
 8007244:	2300      	movs	r3, #0
 8007246:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800724a:	e1b6      	b.n	80075ba <UART_SetConfig+0x5a6>
 800724c:	2304      	movs	r3, #4
 800724e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007252:	e1b2      	b.n	80075ba <UART_SetConfig+0x5a6>
 8007254:	2308      	movs	r3, #8
 8007256:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800725a:	e1ae      	b.n	80075ba <UART_SetConfig+0x5a6>
 800725c:	2310      	movs	r3, #16
 800725e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007262:	e1aa      	b.n	80075ba <UART_SetConfig+0x5a6>
 8007264:	2320      	movs	r3, #32
 8007266:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800726a:	e1a6      	b.n	80075ba <UART_SetConfig+0x5a6>
 800726c:	2340      	movs	r3, #64	@ 0x40
 800726e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007272:	e1a2      	b.n	80075ba <UART_SetConfig+0x5a6>
 8007274:	2380      	movs	r3, #128	@ 0x80
 8007276:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800727a:	e19e      	b.n	80075ba <UART_SetConfig+0x5a6>
 800727c:	697b      	ldr	r3, [r7, #20]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	4a35      	ldr	r2, [pc, #212]	@ (8007358 <UART_SetConfig+0x344>)
 8007282:	4293      	cmp	r3, r2
 8007284:	d130      	bne.n	80072e8 <UART_SetConfig+0x2d4>
 8007286:	4b31      	ldr	r3, [pc, #196]	@ (800734c <UART_SetConfig+0x338>)
 8007288:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800728a:	f003 0307 	and.w	r3, r3, #7
 800728e:	2b05      	cmp	r3, #5
 8007290:	d826      	bhi.n	80072e0 <UART_SetConfig+0x2cc>
 8007292:	a201      	add	r2, pc, #4	@ (adr r2, 8007298 <UART_SetConfig+0x284>)
 8007294:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007298:	080072b1 	.word	0x080072b1
 800729c:	080072b9 	.word	0x080072b9
 80072a0:	080072c1 	.word	0x080072c1
 80072a4:	080072c9 	.word	0x080072c9
 80072a8:	080072d1 	.word	0x080072d1
 80072ac:	080072d9 	.word	0x080072d9
 80072b0:	2300      	movs	r3, #0
 80072b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80072b6:	e180      	b.n	80075ba <UART_SetConfig+0x5a6>
 80072b8:	2304      	movs	r3, #4
 80072ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80072be:	e17c      	b.n	80075ba <UART_SetConfig+0x5a6>
 80072c0:	2308      	movs	r3, #8
 80072c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80072c6:	e178      	b.n	80075ba <UART_SetConfig+0x5a6>
 80072c8:	2310      	movs	r3, #16
 80072ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80072ce:	e174      	b.n	80075ba <UART_SetConfig+0x5a6>
 80072d0:	2320      	movs	r3, #32
 80072d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80072d6:	e170      	b.n	80075ba <UART_SetConfig+0x5a6>
 80072d8:	2340      	movs	r3, #64	@ 0x40
 80072da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80072de:	e16c      	b.n	80075ba <UART_SetConfig+0x5a6>
 80072e0:	2380      	movs	r3, #128	@ 0x80
 80072e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80072e6:	e168      	b.n	80075ba <UART_SetConfig+0x5a6>
 80072e8:	697b      	ldr	r3, [r7, #20]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	4a1b      	ldr	r2, [pc, #108]	@ (800735c <UART_SetConfig+0x348>)
 80072ee:	4293      	cmp	r3, r2
 80072f0:	d142      	bne.n	8007378 <UART_SetConfig+0x364>
 80072f2:	4b16      	ldr	r3, [pc, #88]	@ (800734c <UART_SetConfig+0x338>)
 80072f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80072f6:	f003 0307 	and.w	r3, r3, #7
 80072fa:	2b05      	cmp	r3, #5
 80072fc:	d838      	bhi.n	8007370 <UART_SetConfig+0x35c>
 80072fe:	a201      	add	r2, pc, #4	@ (adr r2, 8007304 <UART_SetConfig+0x2f0>)
 8007300:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007304:	0800731d 	.word	0x0800731d
 8007308:	08007325 	.word	0x08007325
 800730c:	0800732d 	.word	0x0800732d
 8007310:	08007335 	.word	0x08007335
 8007314:	08007361 	.word	0x08007361
 8007318:	08007369 	.word	0x08007369
 800731c:	2300      	movs	r3, #0
 800731e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007322:	e14a      	b.n	80075ba <UART_SetConfig+0x5a6>
 8007324:	2304      	movs	r3, #4
 8007326:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800732a:	e146      	b.n	80075ba <UART_SetConfig+0x5a6>
 800732c:	2308      	movs	r3, #8
 800732e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007332:	e142      	b.n	80075ba <UART_SetConfig+0x5a6>
 8007334:	2310      	movs	r3, #16
 8007336:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800733a:	e13e      	b.n	80075ba <UART_SetConfig+0x5a6>
 800733c:	cfff69f3 	.word	0xcfff69f3
 8007340:	58000c00 	.word	0x58000c00
 8007344:	11fff4ff 	.word	0x11fff4ff
 8007348:	40011000 	.word	0x40011000
 800734c:	58024400 	.word	0x58024400
 8007350:	40004400 	.word	0x40004400
 8007354:	40004800 	.word	0x40004800
 8007358:	40004c00 	.word	0x40004c00
 800735c:	40005000 	.word	0x40005000
 8007360:	2320      	movs	r3, #32
 8007362:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007366:	e128      	b.n	80075ba <UART_SetConfig+0x5a6>
 8007368:	2340      	movs	r3, #64	@ 0x40
 800736a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800736e:	e124      	b.n	80075ba <UART_SetConfig+0x5a6>
 8007370:	2380      	movs	r3, #128	@ 0x80
 8007372:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007376:	e120      	b.n	80075ba <UART_SetConfig+0x5a6>
 8007378:	697b      	ldr	r3, [r7, #20]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	4acb      	ldr	r2, [pc, #812]	@ (80076ac <UART_SetConfig+0x698>)
 800737e:	4293      	cmp	r3, r2
 8007380:	d176      	bne.n	8007470 <UART_SetConfig+0x45c>
 8007382:	4bcb      	ldr	r3, [pc, #812]	@ (80076b0 <UART_SetConfig+0x69c>)
 8007384:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007386:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800738a:	2b28      	cmp	r3, #40	@ 0x28
 800738c:	d86c      	bhi.n	8007468 <UART_SetConfig+0x454>
 800738e:	a201      	add	r2, pc, #4	@ (adr r2, 8007394 <UART_SetConfig+0x380>)
 8007390:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007394:	08007439 	.word	0x08007439
 8007398:	08007469 	.word	0x08007469
 800739c:	08007469 	.word	0x08007469
 80073a0:	08007469 	.word	0x08007469
 80073a4:	08007469 	.word	0x08007469
 80073a8:	08007469 	.word	0x08007469
 80073ac:	08007469 	.word	0x08007469
 80073b0:	08007469 	.word	0x08007469
 80073b4:	08007441 	.word	0x08007441
 80073b8:	08007469 	.word	0x08007469
 80073bc:	08007469 	.word	0x08007469
 80073c0:	08007469 	.word	0x08007469
 80073c4:	08007469 	.word	0x08007469
 80073c8:	08007469 	.word	0x08007469
 80073cc:	08007469 	.word	0x08007469
 80073d0:	08007469 	.word	0x08007469
 80073d4:	08007449 	.word	0x08007449
 80073d8:	08007469 	.word	0x08007469
 80073dc:	08007469 	.word	0x08007469
 80073e0:	08007469 	.word	0x08007469
 80073e4:	08007469 	.word	0x08007469
 80073e8:	08007469 	.word	0x08007469
 80073ec:	08007469 	.word	0x08007469
 80073f0:	08007469 	.word	0x08007469
 80073f4:	08007451 	.word	0x08007451
 80073f8:	08007469 	.word	0x08007469
 80073fc:	08007469 	.word	0x08007469
 8007400:	08007469 	.word	0x08007469
 8007404:	08007469 	.word	0x08007469
 8007408:	08007469 	.word	0x08007469
 800740c:	08007469 	.word	0x08007469
 8007410:	08007469 	.word	0x08007469
 8007414:	08007459 	.word	0x08007459
 8007418:	08007469 	.word	0x08007469
 800741c:	08007469 	.word	0x08007469
 8007420:	08007469 	.word	0x08007469
 8007424:	08007469 	.word	0x08007469
 8007428:	08007469 	.word	0x08007469
 800742c:	08007469 	.word	0x08007469
 8007430:	08007469 	.word	0x08007469
 8007434:	08007461 	.word	0x08007461
 8007438:	2301      	movs	r3, #1
 800743a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800743e:	e0bc      	b.n	80075ba <UART_SetConfig+0x5a6>
 8007440:	2304      	movs	r3, #4
 8007442:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007446:	e0b8      	b.n	80075ba <UART_SetConfig+0x5a6>
 8007448:	2308      	movs	r3, #8
 800744a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800744e:	e0b4      	b.n	80075ba <UART_SetConfig+0x5a6>
 8007450:	2310      	movs	r3, #16
 8007452:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007456:	e0b0      	b.n	80075ba <UART_SetConfig+0x5a6>
 8007458:	2320      	movs	r3, #32
 800745a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800745e:	e0ac      	b.n	80075ba <UART_SetConfig+0x5a6>
 8007460:	2340      	movs	r3, #64	@ 0x40
 8007462:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007466:	e0a8      	b.n	80075ba <UART_SetConfig+0x5a6>
 8007468:	2380      	movs	r3, #128	@ 0x80
 800746a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800746e:	e0a4      	b.n	80075ba <UART_SetConfig+0x5a6>
 8007470:	697b      	ldr	r3, [r7, #20]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	4a8f      	ldr	r2, [pc, #572]	@ (80076b4 <UART_SetConfig+0x6a0>)
 8007476:	4293      	cmp	r3, r2
 8007478:	d130      	bne.n	80074dc <UART_SetConfig+0x4c8>
 800747a:	4b8d      	ldr	r3, [pc, #564]	@ (80076b0 <UART_SetConfig+0x69c>)
 800747c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800747e:	f003 0307 	and.w	r3, r3, #7
 8007482:	2b05      	cmp	r3, #5
 8007484:	d826      	bhi.n	80074d4 <UART_SetConfig+0x4c0>
 8007486:	a201      	add	r2, pc, #4	@ (adr r2, 800748c <UART_SetConfig+0x478>)
 8007488:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800748c:	080074a5 	.word	0x080074a5
 8007490:	080074ad 	.word	0x080074ad
 8007494:	080074b5 	.word	0x080074b5
 8007498:	080074bd 	.word	0x080074bd
 800749c:	080074c5 	.word	0x080074c5
 80074a0:	080074cd 	.word	0x080074cd
 80074a4:	2300      	movs	r3, #0
 80074a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80074aa:	e086      	b.n	80075ba <UART_SetConfig+0x5a6>
 80074ac:	2304      	movs	r3, #4
 80074ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80074b2:	e082      	b.n	80075ba <UART_SetConfig+0x5a6>
 80074b4:	2308      	movs	r3, #8
 80074b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80074ba:	e07e      	b.n	80075ba <UART_SetConfig+0x5a6>
 80074bc:	2310      	movs	r3, #16
 80074be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80074c2:	e07a      	b.n	80075ba <UART_SetConfig+0x5a6>
 80074c4:	2320      	movs	r3, #32
 80074c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80074ca:	e076      	b.n	80075ba <UART_SetConfig+0x5a6>
 80074cc:	2340      	movs	r3, #64	@ 0x40
 80074ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80074d2:	e072      	b.n	80075ba <UART_SetConfig+0x5a6>
 80074d4:	2380      	movs	r3, #128	@ 0x80
 80074d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80074da:	e06e      	b.n	80075ba <UART_SetConfig+0x5a6>
 80074dc:	697b      	ldr	r3, [r7, #20]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	4a75      	ldr	r2, [pc, #468]	@ (80076b8 <UART_SetConfig+0x6a4>)
 80074e2:	4293      	cmp	r3, r2
 80074e4:	d130      	bne.n	8007548 <UART_SetConfig+0x534>
 80074e6:	4b72      	ldr	r3, [pc, #456]	@ (80076b0 <UART_SetConfig+0x69c>)
 80074e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80074ea:	f003 0307 	and.w	r3, r3, #7
 80074ee:	2b05      	cmp	r3, #5
 80074f0:	d826      	bhi.n	8007540 <UART_SetConfig+0x52c>
 80074f2:	a201      	add	r2, pc, #4	@ (adr r2, 80074f8 <UART_SetConfig+0x4e4>)
 80074f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074f8:	08007511 	.word	0x08007511
 80074fc:	08007519 	.word	0x08007519
 8007500:	08007521 	.word	0x08007521
 8007504:	08007529 	.word	0x08007529
 8007508:	08007531 	.word	0x08007531
 800750c:	08007539 	.word	0x08007539
 8007510:	2300      	movs	r3, #0
 8007512:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007516:	e050      	b.n	80075ba <UART_SetConfig+0x5a6>
 8007518:	2304      	movs	r3, #4
 800751a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800751e:	e04c      	b.n	80075ba <UART_SetConfig+0x5a6>
 8007520:	2308      	movs	r3, #8
 8007522:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007526:	e048      	b.n	80075ba <UART_SetConfig+0x5a6>
 8007528:	2310      	movs	r3, #16
 800752a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800752e:	e044      	b.n	80075ba <UART_SetConfig+0x5a6>
 8007530:	2320      	movs	r3, #32
 8007532:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007536:	e040      	b.n	80075ba <UART_SetConfig+0x5a6>
 8007538:	2340      	movs	r3, #64	@ 0x40
 800753a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800753e:	e03c      	b.n	80075ba <UART_SetConfig+0x5a6>
 8007540:	2380      	movs	r3, #128	@ 0x80
 8007542:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007546:	e038      	b.n	80075ba <UART_SetConfig+0x5a6>
 8007548:	697b      	ldr	r3, [r7, #20]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	4a5b      	ldr	r2, [pc, #364]	@ (80076bc <UART_SetConfig+0x6a8>)
 800754e:	4293      	cmp	r3, r2
 8007550:	d130      	bne.n	80075b4 <UART_SetConfig+0x5a0>
 8007552:	4b57      	ldr	r3, [pc, #348]	@ (80076b0 <UART_SetConfig+0x69c>)
 8007554:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007556:	f003 0307 	and.w	r3, r3, #7
 800755a:	2b05      	cmp	r3, #5
 800755c:	d826      	bhi.n	80075ac <UART_SetConfig+0x598>
 800755e:	a201      	add	r2, pc, #4	@ (adr r2, 8007564 <UART_SetConfig+0x550>)
 8007560:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007564:	0800757d 	.word	0x0800757d
 8007568:	08007585 	.word	0x08007585
 800756c:	0800758d 	.word	0x0800758d
 8007570:	08007595 	.word	0x08007595
 8007574:	0800759d 	.word	0x0800759d
 8007578:	080075a5 	.word	0x080075a5
 800757c:	2302      	movs	r3, #2
 800757e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007582:	e01a      	b.n	80075ba <UART_SetConfig+0x5a6>
 8007584:	2304      	movs	r3, #4
 8007586:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800758a:	e016      	b.n	80075ba <UART_SetConfig+0x5a6>
 800758c:	2308      	movs	r3, #8
 800758e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007592:	e012      	b.n	80075ba <UART_SetConfig+0x5a6>
 8007594:	2310      	movs	r3, #16
 8007596:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800759a:	e00e      	b.n	80075ba <UART_SetConfig+0x5a6>
 800759c:	2320      	movs	r3, #32
 800759e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075a2:	e00a      	b.n	80075ba <UART_SetConfig+0x5a6>
 80075a4:	2340      	movs	r3, #64	@ 0x40
 80075a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075aa:	e006      	b.n	80075ba <UART_SetConfig+0x5a6>
 80075ac:	2380      	movs	r3, #128	@ 0x80
 80075ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075b2:	e002      	b.n	80075ba <UART_SetConfig+0x5a6>
 80075b4:	2380      	movs	r3, #128	@ 0x80
 80075b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80075ba:	697b      	ldr	r3, [r7, #20]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	4a3f      	ldr	r2, [pc, #252]	@ (80076bc <UART_SetConfig+0x6a8>)
 80075c0:	4293      	cmp	r3, r2
 80075c2:	f040 80f8 	bne.w	80077b6 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80075c6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80075ca:	2b20      	cmp	r3, #32
 80075cc:	dc46      	bgt.n	800765c <UART_SetConfig+0x648>
 80075ce:	2b02      	cmp	r3, #2
 80075d0:	f2c0 8082 	blt.w	80076d8 <UART_SetConfig+0x6c4>
 80075d4:	3b02      	subs	r3, #2
 80075d6:	2b1e      	cmp	r3, #30
 80075d8:	d87e      	bhi.n	80076d8 <UART_SetConfig+0x6c4>
 80075da:	a201      	add	r2, pc, #4	@ (adr r2, 80075e0 <UART_SetConfig+0x5cc>)
 80075dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075e0:	08007663 	.word	0x08007663
 80075e4:	080076d9 	.word	0x080076d9
 80075e8:	0800766b 	.word	0x0800766b
 80075ec:	080076d9 	.word	0x080076d9
 80075f0:	080076d9 	.word	0x080076d9
 80075f4:	080076d9 	.word	0x080076d9
 80075f8:	0800767b 	.word	0x0800767b
 80075fc:	080076d9 	.word	0x080076d9
 8007600:	080076d9 	.word	0x080076d9
 8007604:	080076d9 	.word	0x080076d9
 8007608:	080076d9 	.word	0x080076d9
 800760c:	080076d9 	.word	0x080076d9
 8007610:	080076d9 	.word	0x080076d9
 8007614:	080076d9 	.word	0x080076d9
 8007618:	0800768b 	.word	0x0800768b
 800761c:	080076d9 	.word	0x080076d9
 8007620:	080076d9 	.word	0x080076d9
 8007624:	080076d9 	.word	0x080076d9
 8007628:	080076d9 	.word	0x080076d9
 800762c:	080076d9 	.word	0x080076d9
 8007630:	080076d9 	.word	0x080076d9
 8007634:	080076d9 	.word	0x080076d9
 8007638:	080076d9 	.word	0x080076d9
 800763c:	080076d9 	.word	0x080076d9
 8007640:	080076d9 	.word	0x080076d9
 8007644:	080076d9 	.word	0x080076d9
 8007648:	080076d9 	.word	0x080076d9
 800764c:	080076d9 	.word	0x080076d9
 8007650:	080076d9 	.word	0x080076d9
 8007654:	080076d9 	.word	0x080076d9
 8007658:	080076cb 	.word	0x080076cb
 800765c:	2b40      	cmp	r3, #64	@ 0x40
 800765e:	d037      	beq.n	80076d0 <UART_SetConfig+0x6bc>
 8007660:	e03a      	b.n	80076d8 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8007662:	f7fd ff57 	bl	8005514 <HAL_RCCEx_GetD3PCLK1Freq>
 8007666:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007668:	e03c      	b.n	80076e4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800766a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800766e:	4618      	mov	r0, r3
 8007670:	f7fd ff66 	bl	8005540 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007674:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007676:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007678:	e034      	b.n	80076e4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800767a:	f107 0318 	add.w	r3, r7, #24
 800767e:	4618      	mov	r0, r3
 8007680:	f7fe f8b2 	bl	80057e8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007684:	69fb      	ldr	r3, [r7, #28]
 8007686:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007688:	e02c      	b.n	80076e4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800768a:	4b09      	ldr	r3, [pc, #36]	@ (80076b0 <UART_SetConfig+0x69c>)
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	f003 0320 	and.w	r3, r3, #32
 8007692:	2b00      	cmp	r3, #0
 8007694:	d016      	beq.n	80076c4 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007696:	4b06      	ldr	r3, [pc, #24]	@ (80076b0 <UART_SetConfig+0x69c>)
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	08db      	lsrs	r3, r3, #3
 800769c:	f003 0303 	and.w	r3, r3, #3
 80076a0:	4a07      	ldr	r2, [pc, #28]	@ (80076c0 <UART_SetConfig+0x6ac>)
 80076a2:	fa22 f303 	lsr.w	r3, r2, r3
 80076a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80076a8:	e01c      	b.n	80076e4 <UART_SetConfig+0x6d0>
 80076aa:	bf00      	nop
 80076ac:	40011400 	.word	0x40011400
 80076b0:	58024400 	.word	0x58024400
 80076b4:	40007800 	.word	0x40007800
 80076b8:	40007c00 	.word	0x40007c00
 80076bc:	58000c00 	.word	0x58000c00
 80076c0:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80076c4:	4b9d      	ldr	r3, [pc, #628]	@ (800793c <UART_SetConfig+0x928>)
 80076c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80076c8:	e00c      	b.n	80076e4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80076ca:	4b9d      	ldr	r3, [pc, #628]	@ (8007940 <UART_SetConfig+0x92c>)
 80076cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80076ce:	e009      	b.n	80076e4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80076d0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80076d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80076d6:	e005      	b.n	80076e4 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80076d8:	2300      	movs	r3, #0
 80076da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80076dc:	2301      	movs	r3, #1
 80076de:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80076e2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80076e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	f000 81de 	beq.w	8007aa8 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80076ec:	697b      	ldr	r3, [r7, #20]
 80076ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076f0:	4a94      	ldr	r2, [pc, #592]	@ (8007944 <UART_SetConfig+0x930>)
 80076f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80076f6:	461a      	mov	r2, r3
 80076f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80076fa:	fbb3 f3f2 	udiv	r3, r3, r2
 80076fe:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007700:	697b      	ldr	r3, [r7, #20]
 8007702:	685a      	ldr	r2, [r3, #4]
 8007704:	4613      	mov	r3, r2
 8007706:	005b      	lsls	r3, r3, #1
 8007708:	4413      	add	r3, r2
 800770a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800770c:	429a      	cmp	r2, r3
 800770e:	d305      	bcc.n	800771c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007710:	697b      	ldr	r3, [r7, #20]
 8007712:	685b      	ldr	r3, [r3, #4]
 8007714:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007716:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007718:	429a      	cmp	r2, r3
 800771a:	d903      	bls.n	8007724 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800771c:	2301      	movs	r3, #1
 800771e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007722:	e1c1      	b.n	8007aa8 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007724:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007726:	2200      	movs	r2, #0
 8007728:	60bb      	str	r3, [r7, #8]
 800772a:	60fa      	str	r2, [r7, #12]
 800772c:	697b      	ldr	r3, [r7, #20]
 800772e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007730:	4a84      	ldr	r2, [pc, #528]	@ (8007944 <UART_SetConfig+0x930>)
 8007732:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007736:	b29b      	uxth	r3, r3
 8007738:	2200      	movs	r2, #0
 800773a:	603b      	str	r3, [r7, #0]
 800773c:	607a      	str	r2, [r7, #4]
 800773e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007742:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007746:	f7f8 fdc7 	bl	80002d8 <__aeabi_uldivmod>
 800774a:	4602      	mov	r2, r0
 800774c:	460b      	mov	r3, r1
 800774e:	4610      	mov	r0, r2
 8007750:	4619      	mov	r1, r3
 8007752:	f04f 0200 	mov.w	r2, #0
 8007756:	f04f 0300 	mov.w	r3, #0
 800775a:	020b      	lsls	r3, r1, #8
 800775c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007760:	0202      	lsls	r2, r0, #8
 8007762:	6979      	ldr	r1, [r7, #20]
 8007764:	6849      	ldr	r1, [r1, #4]
 8007766:	0849      	lsrs	r1, r1, #1
 8007768:	2000      	movs	r0, #0
 800776a:	460c      	mov	r4, r1
 800776c:	4605      	mov	r5, r0
 800776e:	eb12 0804 	adds.w	r8, r2, r4
 8007772:	eb43 0905 	adc.w	r9, r3, r5
 8007776:	697b      	ldr	r3, [r7, #20]
 8007778:	685b      	ldr	r3, [r3, #4]
 800777a:	2200      	movs	r2, #0
 800777c:	469a      	mov	sl, r3
 800777e:	4693      	mov	fp, r2
 8007780:	4652      	mov	r2, sl
 8007782:	465b      	mov	r3, fp
 8007784:	4640      	mov	r0, r8
 8007786:	4649      	mov	r1, r9
 8007788:	f7f8 fda6 	bl	80002d8 <__aeabi_uldivmod>
 800778c:	4602      	mov	r2, r0
 800778e:	460b      	mov	r3, r1
 8007790:	4613      	mov	r3, r2
 8007792:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007794:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007796:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800779a:	d308      	bcc.n	80077ae <UART_SetConfig+0x79a>
 800779c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800779e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80077a2:	d204      	bcs.n	80077ae <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80077a4:	697b      	ldr	r3, [r7, #20]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80077aa:	60da      	str	r2, [r3, #12]
 80077ac:	e17c      	b.n	8007aa8 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80077ae:	2301      	movs	r3, #1
 80077b0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80077b4:	e178      	b.n	8007aa8 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80077b6:	697b      	ldr	r3, [r7, #20]
 80077b8:	69db      	ldr	r3, [r3, #28]
 80077ba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80077be:	f040 80c5 	bne.w	800794c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80077c2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80077c6:	2b20      	cmp	r3, #32
 80077c8:	dc48      	bgt.n	800785c <UART_SetConfig+0x848>
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	db7b      	blt.n	80078c6 <UART_SetConfig+0x8b2>
 80077ce:	2b20      	cmp	r3, #32
 80077d0:	d879      	bhi.n	80078c6 <UART_SetConfig+0x8b2>
 80077d2:	a201      	add	r2, pc, #4	@ (adr r2, 80077d8 <UART_SetConfig+0x7c4>)
 80077d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077d8:	08007863 	.word	0x08007863
 80077dc:	0800786b 	.word	0x0800786b
 80077e0:	080078c7 	.word	0x080078c7
 80077e4:	080078c7 	.word	0x080078c7
 80077e8:	08007873 	.word	0x08007873
 80077ec:	080078c7 	.word	0x080078c7
 80077f0:	080078c7 	.word	0x080078c7
 80077f4:	080078c7 	.word	0x080078c7
 80077f8:	08007883 	.word	0x08007883
 80077fc:	080078c7 	.word	0x080078c7
 8007800:	080078c7 	.word	0x080078c7
 8007804:	080078c7 	.word	0x080078c7
 8007808:	080078c7 	.word	0x080078c7
 800780c:	080078c7 	.word	0x080078c7
 8007810:	080078c7 	.word	0x080078c7
 8007814:	080078c7 	.word	0x080078c7
 8007818:	08007893 	.word	0x08007893
 800781c:	080078c7 	.word	0x080078c7
 8007820:	080078c7 	.word	0x080078c7
 8007824:	080078c7 	.word	0x080078c7
 8007828:	080078c7 	.word	0x080078c7
 800782c:	080078c7 	.word	0x080078c7
 8007830:	080078c7 	.word	0x080078c7
 8007834:	080078c7 	.word	0x080078c7
 8007838:	080078c7 	.word	0x080078c7
 800783c:	080078c7 	.word	0x080078c7
 8007840:	080078c7 	.word	0x080078c7
 8007844:	080078c7 	.word	0x080078c7
 8007848:	080078c7 	.word	0x080078c7
 800784c:	080078c7 	.word	0x080078c7
 8007850:	080078c7 	.word	0x080078c7
 8007854:	080078c7 	.word	0x080078c7
 8007858:	080078b9 	.word	0x080078b9
 800785c:	2b40      	cmp	r3, #64	@ 0x40
 800785e:	d02e      	beq.n	80078be <UART_SetConfig+0x8aa>
 8007860:	e031      	b.n	80078c6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007862:	f7fd fe2b 	bl	80054bc <HAL_RCC_GetPCLK1Freq>
 8007866:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007868:	e033      	b.n	80078d2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800786a:	f7fd fe3d 	bl	80054e8 <HAL_RCC_GetPCLK2Freq>
 800786e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007870:	e02f      	b.n	80078d2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007872:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007876:	4618      	mov	r0, r3
 8007878:	f7fd fe62 	bl	8005540 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800787c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800787e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007880:	e027      	b.n	80078d2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007882:	f107 0318 	add.w	r3, r7, #24
 8007886:	4618      	mov	r0, r3
 8007888:	f7fd ffae 	bl	80057e8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800788c:	69fb      	ldr	r3, [r7, #28]
 800788e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007890:	e01f      	b.n	80078d2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007892:	4b2d      	ldr	r3, [pc, #180]	@ (8007948 <UART_SetConfig+0x934>)
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	f003 0320 	and.w	r3, r3, #32
 800789a:	2b00      	cmp	r3, #0
 800789c:	d009      	beq.n	80078b2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800789e:	4b2a      	ldr	r3, [pc, #168]	@ (8007948 <UART_SetConfig+0x934>)
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	08db      	lsrs	r3, r3, #3
 80078a4:	f003 0303 	and.w	r3, r3, #3
 80078a8:	4a24      	ldr	r2, [pc, #144]	@ (800793c <UART_SetConfig+0x928>)
 80078aa:	fa22 f303 	lsr.w	r3, r2, r3
 80078ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80078b0:	e00f      	b.n	80078d2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80078b2:	4b22      	ldr	r3, [pc, #136]	@ (800793c <UART_SetConfig+0x928>)
 80078b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80078b6:	e00c      	b.n	80078d2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80078b8:	4b21      	ldr	r3, [pc, #132]	@ (8007940 <UART_SetConfig+0x92c>)
 80078ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80078bc:	e009      	b.n	80078d2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80078be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80078c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80078c4:	e005      	b.n	80078d2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80078c6:	2300      	movs	r3, #0
 80078c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80078ca:	2301      	movs	r3, #1
 80078cc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80078d0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80078d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	f000 80e7 	beq.w	8007aa8 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80078da:	697b      	ldr	r3, [r7, #20]
 80078dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078de:	4a19      	ldr	r2, [pc, #100]	@ (8007944 <UART_SetConfig+0x930>)
 80078e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80078e4:	461a      	mov	r2, r3
 80078e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80078e8:	fbb3 f3f2 	udiv	r3, r3, r2
 80078ec:	005a      	lsls	r2, r3, #1
 80078ee:	697b      	ldr	r3, [r7, #20]
 80078f0:	685b      	ldr	r3, [r3, #4]
 80078f2:	085b      	lsrs	r3, r3, #1
 80078f4:	441a      	add	r2, r3
 80078f6:	697b      	ldr	r3, [r7, #20]
 80078f8:	685b      	ldr	r3, [r3, #4]
 80078fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80078fe:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007900:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007902:	2b0f      	cmp	r3, #15
 8007904:	d916      	bls.n	8007934 <UART_SetConfig+0x920>
 8007906:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007908:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800790c:	d212      	bcs.n	8007934 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800790e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007910:	b29b      	uxth	r3, r3
 8007912:	f023 030f 	bic.w	r3, r3, #15
 8007916:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007918:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800791a:	085b      	lsrs	r3, r3, #1
 800791c:	b29b      	uxth	r3, r3
 800791e:	f003 0307 	and.w	r3, r3, #7
 8007922:	b29a      	uxth	r2, r3
 8007924:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007926:	4313      	orrs	r3, r2
 8007928:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800792a:	697b      	ldr	r3, [r7, #20]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8007930:	60da      	str	r2, [r3, #12]
 8007932:	e0b9      	b.n	8007aa8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8007934:	2301      	movs	r3, #1
 8007936:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800793a:	e0b5      	b.n	8007aa8 <UART_SetConfig+0xa94>
 800793c:	03d09000 	.word	0x03d09000
 8007940:	003d0900 	.word	0x003d0900
 8007944:	08008038 	.word	0x08008038
 8007948:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800794c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007950:	2b20      	cmp	r3, #32
 8007952:	dc49      	bgt.n	80079e8 <UART_SetConfig+0x9d4>
 8007954:	2b00      	cmp	r3, #0
 8007956:	db7c      	blt.n	8007a52 <UART_SetConfig+0xa3e>
 8007958:	2b20      	cmp	r3, #32
 800795a:	d87a      	bhi.n	8007a52 <UART_SetConfig+0xa3e>
 800795c:	a201      	add	r2, pc, #4	@ (adr r2, 8007964 <UART_SetConfig+0x950>)
 800795e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007962:	bf00      	nop
 8007964:	080079ef 	.word	0x080079ef
 8007968:	080079f7 	.word	0x080079f7
 800796c:	08007a53 	.word	0x08007a53
 8007970:	08007a53 	.word	0x08007a53
 8007974:	080079ff 	.word	0x080079ff
 8007978:	08007a53 	.word	0x08007a53
 800797c:	08007a53 	.word	0x08007a53
 8007980:	08007a53 	.word	0x08007a53
 8007984:	08007a0f 	.word	0x08007a0f
 8007988:	08007a53 	.word	0x08007a53
 800798c:	08007a53 	.word	0x08007a53
 8007990:	08007a53 	.word	0x08007a53
 8007994:	08007a53 	.word	0x08007a53
 8007998:	08007a53 	.word	0x08007a53
 800799c:	08007a53 	.word	0x08007a53
 80079a0:	08007a53 	.word	0x08007a53
 80079a4:	08007a1f 	.word	0x08007a1f
 80079a8:	08007a53 	.word	0x08007a53
 80079ac:	08007a53 	.word	0x08007a53
 80079b0:	08007a53 	.word	0x08007a53
 80079b4:	08007a53 	.word	0x08007a53
 80079b8:	08007a53 	.word	0x08007a53
 80079bc:	08007a53 	.word	0x08007a53
 80079c0:	08007a53 	.word	0x08007a53
 80079c4:	08007a53 	.word	0x08007a53
 80079c8:	08007a53 	.word	0x08007a53
 80079cc:	08007a53 	.word	0x08007a53
 80079d0:	08007a53 	.word	0x08007a53
 80079d4:	08007a53 	.word	0x08007a53
 80079d8:	08007a53 	.word	0x08007a53
 80079dc:	08007a53 	.word	0x08007a53
 80079e0:	08007a53 	.word	0x08007a53
 80079e4:	08007a45 	.word	0x08007a45
 80079e8:	2b40      	cmp	r3, #64	@ 0x40
 80079ea:	d02e      	beq.n	8007a4a <UART_SetConfig+0xa36>
 80079ec:	e031      	b.n	8007a52 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80079ee:	f7fd fd65 	bl	80054bc <HAL_RCC_GetPCLK1Freq>
 80079f2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80079f4:	e033      	b.n	8007a5e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80079f6:	f7fd fd77 	bl	80054e8 <HAL_RCC_GetPCLK2Freq>
 80079fa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80079fc:	e02f      	b.n	8007a5e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80079fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007a02:	4618      	mov	r0, r3
 8007a04:	f7fd fd9c 	bl	8005540 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007a08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007a0c:	e027      	b.n	8007a5e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007a0e:	f107 0318 	add.w	r3, r7, #24
 8007a12:	4618      	mov	r0, r3
 8007a14:	f7fd fee8 	bl	80057e8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007a18:	69fb      	ldr	r3, [r7, #28]
 8007a1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007a1c:	e01f      	b.n	8007a5e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007a1e:	4b2d      	ldr	r3, [pc, #180]	@ (8007ad4 <UART_SetConfig+0xac0>)
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	f003 0320 	and.w	r3, r3, #32
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d009      	beq.n	8007a3e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007a2a:	4b2a      	ldr	r3, [pc, #168]	@ (8007ad4 <UART_SetConfig+0xac0>)
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	08db      	lsrs	r3, r3, #3
 8007a30:	f003 0303 	and.w	r3, r3, #3
 8007a34:	4a28      	ldr	r2, [pc, #160]	@ (8007ad8 <UART_SetConfig+0xac4>)
 8007a36:	fa22 f303 	lsr.w	r3, r2, r3
 8007a3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007a3c:	e00f      	b.n	8007a5e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8007a3e:	4b26      	ldr	r3, [pc, #152]	@ (8007ad8 <UART_SetConfig+0xac4>)
 8007a40:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007a42:	e00c      	b.n	8007a5e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007a44:	4b25      	ldr	r3, [pc, #148]	@ (8007adc <UART_SetConfig+0xac8>)
 8007a46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007a48:	e009      	b.n	8007a5e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007a4a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007a4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007a50:	e005      	b.n	8007a5e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8007a52:	2300      	movs	r3, #0
 8007a54:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007a56:	2301      	movs	r3, #1
 8007a58:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007a5c:	bf00      	nop
    }

    if (pclk != 0U)
 8007a5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d021      	beq.n	8007aa8 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007a64:	697b      	ldr	r3, [r7, #20]
 8007a66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a68:	4a1d      	ldr	r2, [pc, #116]	@ (8007ae0 <UART_SetConfig+0xacc>)
 8007a6a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007a6e:	461a      	mov	r2, r3
 8007a70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007a72:	fbb3 f2f2 	udiv	r2, r3, r2
 8007a76:	697b      	ldr	r3, [r7, #20]
 8007a78:	685b      	ldr	r3, [r3, #4]
 8007a7a:	085b      	lsrs	r3, r3, #1
 8007a7c:	441a      	add	r2, r3
 8007a7e:	697b      	ldr	r3, [r7, #20]
 8007a80:	685b      	ldr	r3, [r3, #4]
 8007a82:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a86:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007a88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a8a:	2b0f      	cmp	r3, #15
 8007a8c:	d909      	bls.n	8007aa2 <UART_SetConfig+0xa8e>
 8007a8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007a94:	d205      	bcs.n	8007aa2 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007a96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a98:	b29a      	uxth	r2, r3
 8007a9a:	697b      	ldr	r3, [r7, #20]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	60da      	str	r2, [r3, #12]
 8007aa0:	e002      	b.n	8007aa8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8007aa2:	2301      	movs	r3, #1
 8007aa4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007aa8:	697b      	ldr	r3, [r7, #20]
 8007aaa:	2201      	movs	r2, #1
 8007aac:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8007ab0:	697b      	ldr	r3, [r7, #20]
 8007ab2:	2201      	movs	r2, #1
 8007ab4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007ab8:	697b      	ldr	r3, [r7, #20]
 8007aba:	2200      	movs	r2, #0
 8007abc:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007abe:	697b      	ldr	r3, [r7, #20]
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8007ac4:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8007ac8:	4618      	mov	r0, r3
 8007aca:	3748      	adds	r7, #72	@ 0x48
 8007acc:	46bd      	mov	sp, r7
 8007ace:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007ad2:	bf00      	nop
 8007ad4:	58024400 	.word	0x58024400
 8007ad8:	03d09000 	.word	0x03d09000
 8007adc:	003d0900 	.word	0x003d0900
 8007ae0:	08008038 	.word	0x08008038

08007ae4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007ae4:	b480      	push	{r7}
 8007ae6:	b083      	sub	sp, #12
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007af0:	f003 0308 	and.w	r3, r3, #8
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d00a      	beq.n	8007b0e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	685b      	ldr	r3, [r3, #4]
 8007afe:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	430a      	orrs	r2, r1
 8007b0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b12:	f003 0301 	and.w	r3, r3, #1
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d00a      	beq.n	8007b30 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	685b      	ldr	r3, [r3, #4]
 8007b20:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	430a      	orrs	r2, r1
 8007b2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b34:	f003 0302 	and.w	r3, r3, #2
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d00a      	beq.n	8007b52 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	685b      	ldr	r3, [r3, #4]
 8007b42:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	430a      	orrs	r2, r1
 8007b50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b56:	f003 0304 	and.w	r3, r3, #4
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d00a      	beq.n	8007b74 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	685b      	ldr	r3, [r3, #4]
 8007b64:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	430a      	orrs	r2, r1
 8007b72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b78:	f003 0310 	and.w	r3, r3, #16
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d00a      	beq.n	8007b96 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	689b      	ldr	r3, [r3, #8]
 8007b86:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	430a      	orrs	r2, r1
 8007b94:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b9a:	f003 0320 	and.w	r3, r3, #32
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d00a      	beq.n	8007bb8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	689b      	ldr	r3, [r3, #8]
 8007ba8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	430a      	orrs	r2, r1
 8007bb6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bbc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d01a      	beq.n	8007bfa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	685b      	ldr	r3, [r3, #4]
 8007bca:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	430a      	orrs	r2, r1
 8007bd8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007bde:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007be2:	d10a      	bne.n	8007bfa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	685b      	ldr	r3, [r3, #4]
 8007bea:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	430a      	orrs	r2, r1
 8007bf8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bfe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d00a      	beq.n	8007c1c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	685b      	ldr	r3, [r3, #4]
 8007c0c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	430a      	orrs	r2, r1
 8007c1a:	605a      	str	r2, [r3, #4]
  }
}
 8007c1c:	bf00      	nop
 8007c1e:	370c      	adds	r7, #12
 8007c20:	46bd      	mov	sp, r7
 8007c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c26:	4770      	bx	lr

08007c28 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007c28:	b580      	push	{r7, lr}
 8007c2a:	b098      	sub	sp, #96	@ 0x60
 8007c2c:	af02      	add	r7, sp, #8
 8007c2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	2200      	movs	r2, #0
 8007c34:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007c38:	f7f9 ff72 	bl	8001b20 <HAL_GetTick>
 8007c3c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	f003 0308 	and.w	r3, r3, #8
 8007c48:	2b08      	cmp	r3, #8
 8007c4a:	d12f      	bne.n	8007cac <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007c4c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007c50:	9300      	str	r3, [sp, #0]
 8007c52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007c54:	2200      	movs	r2, #0
 8007c56:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007c5a:	6878      	ldr	r0, [r7, #4]
 8007c5c:	f000 f88e 	bl	8007d7c <UART_WaitOnFlagUntilTimeout>
 8007c60:	4603      	mov	r3, r0
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d022      	beq.n	8007cac <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c6e:	e853 3f00 	ldrex	r3, [r3]
 8007c72:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007c74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c76:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007c7a:	653b      	str	r3, [r7, #80]	@ 0x50
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	461a      	mov	r2, r3
 8007c82:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007c84:	647b      	str	r3, [r7, #68]	@ 0x44
 8007c86:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c88:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007c8a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007c8c:	e841 2300 	strex	r3, r2, [r1]
 8007c90:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007c92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d1e6      	bne.n	8007c66 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2220      	movs	r2, #32
 8007c9c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007ca8:	2303      	movs	r3, #3
 8007caa:	e063      	b.n	8007d74 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	f003 0304 	and.w	r3, r3, #4
 8007cb6:	2b04      	cmp	r3, #4
 8007cb8:	d149      	bne.n	8007d4e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007cba:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007cbe:	9300      	str	r3, [sp, #0]
 8007cc0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007cc8:	6878      	ldr	r0, [r7, #4]
 8007cca:	f000 f857 	bl	8007d7c <UART_WaitOnFlagUntilTimeout>
 8007cce:	4603      	mov	r3, r0
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d03c      	beq.n	8007d4e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cdc:	e853 3f00 	ldrex	r3, [r3]
 8007ce0:	623b      	str	r3, [r7, #32]
   return(result);
 8007ce2:	6a3b      	ldr	r3, [r7, #32]
 8007ce4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007ce8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	461a      	mov	r2, r3
 8007cf0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007cf2:	633b      	str	r3, [r7, #48]	@ 0x30
 8007cf4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cf6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007cf8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007cfa:	e841 2300 	strex	r3, r2, [r1]
 8007cfe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007d00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d1e6      	bne.n	8007cd4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	3308      	adds	r3, #8
 8007d0c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d0e:	693b      	ldr	r3, [r7, #16]
 8007d10:	e853 3f00 	ldrex	r3, [r3]
 8007d14:	60fb      	str	r3, [r7, #12]
   return(result);
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	f023 0301 	bic.w	r3, r3, #1
 8007d1c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	3308      	adds	r3, #8
 8007d24:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007d26:	61fa      	str	r2, [r7, #28]
 8007d28:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d2a:	69b9      	ldr	r1, [r7, #24]
 8007d2c:	69fa      	ldr	r2, [r7, #28]
 8007d2e:	e841 2300 	strex	r3, r2, [r1]
 8007d32:	617b      	str	r3, [r7, #20]
   return(result);
 8007d34:	697b      	ldr	r3, [r7, #20]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d1e5      	bne.n	8007d06 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	2220      	movs	r2, #32
 8007d3e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	2200      	movs	r2, #0
 8007d46:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007d4a:	2303      	movs	r3, #3
 8007d4c:	e012      	b.n	8007d74 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	2220      	movs	r2, #32
 8007d52:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	2220      	movs	r2, #32
 8007d5a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	2200      	movs	r2, #0
 8007d62:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	2200      	movs	r2, #0
 8007d68:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	2200      	movs	r2, #0
 8007d6e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007d72:	2300      	movs	r3, #0
}
 8007d74:	4618      	mov	r0, r3
 8007d76:	3758      	adds	r7, #88	@ 0x58
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	bd80      	pop	{r7, pc}

08007d7c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	b084      	sub	sp, #16
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	60f8      	str	r0, [r7, #12]
 8007d84:	60b9      	str	r1, [r7, #8]
 8007d86:	603b      	str	r3, [r7, #0]
 8007d88:	4613      	mov	r3, r2
 8007d8a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007d8c:	e04f      	b.n	8007e2e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007d8e:	69bb      	ldr	r3, [r7, #24]
 8007d90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d94:	d04b      	beq.n	8007e2e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d96:	f7f9 fec3 	bl	8001b20 <HAL_GetTick>
 8007d9a:	4602      	mov	r2, r0
 8007d9c:	683b      	ldr	r3, [r7, #0]
 8007d9e:	1ad3      	subs	r3, r2, r3
 8007da0:	69ba      	ldr	r2, [r7, #24]
 8007da2:	429a      	cmp	r2, r3
 8007da4:	d302      	bcc.n	8007dac <UART_WaitOnFlagUntilTimeout+0x30>
 8007da6:	69bb      	ldr	r3, [r7, #24]
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d101      	bne.n	8007db0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007dac:	2303      	movs	r3, #3
 8007dae:	e04e      	b.n	8007e4e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	f003 0304 	and.w	r3, r3, #4
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d037      	beq.n	8007e2e <UART_WaitOnFlagUntilTimeout+0xb2>
 8007dbe:	68bb      	ldr	r3, [r7, #8]
 8007dc0:	2b80      	cmp	r3, #128	@ 0x80
 8007dc2:	d034      	beq.n	8007e2e <UART_WaitOnFlagUntilTimeout+0xb2>
 8007dc4:	68bb      	ldr	r3, [r7, #8]
 8007dc6:	2b40      	cmp	r3, #64	@ 0x40
 8007dc8:	d031      	beq.n	8007e2e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	69db      	ldr	r3, [r3, #28]
 8007dd0:	f003 0308 	and.w	r3, r3, #8
 8007dd4:	2b08      	cmp	r3, #8
 8007dd6:	d110      	bne.n	8007dfa <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	2208      	movs	r2, #8
 8007dde:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007de0:	68f8      	ldr	r0, [r7, #12]
 8007de2:	f000 f839 	bl	8007e58 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	2208      	movs	r2, #8
 8007dea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	2200      	movs	r2, #0
 8007df2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8007df6:	2301      	movs	r3, #1
 8007df8:	e029      	b.n	8007e4e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	69db      	ldr	r3, [r3, #28]
 8007e00:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007e04:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007e08:	d111      	bne.n	8007e2e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007e12:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007e14:	68f8      	ldr	r0, [r7, #12]
 8007e16:	f000 f81f 	bl	8007e58 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	2220      	movs	r2, #32
 8007e1e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	2200      	movs	r2, #0
 8007e26:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8007e2a:	2303      	movs	r3, #3
 8007e2c:	e00f      	b.n	8007e4e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	69da      	ldr	r2, [r3, #28]
 8007e34:	68bb      	ldr	r3, [r7, #8]
 8007e36:	4013      	ands	r3, r2
 8007e38:	68ba      	ldr	r2, [r7, #8]
 8007e3a:	429a      	cmp	r2, r3
 8007e3c:	bf0c      	ite	eq
 8007e3e:	2301      	moveq	r3, #1
 8007e40:	2300      	movne	r3, #0
 8007e42:	b2db      	uxtb	r3, r3
 8007e44:	461a      	mov	r2, r3
 8007e46:	79fb      	ldrb	r3, [r7, #7]
 8007e48:	429a      	cmp	r2, r3
 8007e4a:	d0a0      	beq.n	8007d8e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007e4c:	2300      	movs	r3, #0
}
 8007e4e:	4618      	mov	r0, r3
 8007e50:	3710      	adds	r7, #16
 8007e52:	46bd      	mov	sp, r7
 8007e54:	bd80      	pop	{r7, pc}
	...

08007e58 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007e58:	b480      	push	{r7}
 8007e5a:	b095      	sub	sp, #84	@ 0x54
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e68:	e853 3f00 	ldrex	r3, [r3]
 8007e6c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007e6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e70:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007e74:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	461a      	mov	r2, r3
 8007e7c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007e7e:	643b      	str	r3, [r7, #64]	@ 0x40
 8007e80:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e82:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007e84:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007e86:	e841 2300 	strex	r3, r2, [r1]
 8007e8a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007e8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d1e6      	bne.n	8007e60 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	3308      	adds	r3, #8
 8007e98:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e9a:	6a3b      	ldr	r3, [r7, #32]
 8007e9c:	e853 3f00 	ldrex	r3, [r3]
 8007ea0:	61fb      	str	r3, [r7, #28]
   return(result);
 8007ea2:	69fa      	ldr	r2, [r7, #28]
 8007ea4:	4b1e      	ldr	r3, [pc, #120]	@ (8007f20 <UART_EndRxTransfer+0xc8>)
 8007ea6:	4013      	ands	r3, r2
 8007ea8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	3308      	adds	r3, #8
 8007eb0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007eb2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007eb4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eb6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007eb8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007eba:	e841 2300 	strex	r3, r2, [r1]
 8007ebe:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007ec0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d1e5      	bne.n	8007e92 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007eca:	2b01      	cmp	r3, #1
 8007ecc:	d118      	bne.n	8007f00 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	e853 3f00 	ldrex	r3, [r3]
 8007eda:	60bb      	str	r3, [r7, #8]
   return(result);
 8007edc:	68bb      	ldr	r3, [r7, #8]
 8007ede:	f023 0310 	bic.w	r3, r3, #16
 8007ee2:	647b      	str	r3, [r7, #68]	@ 0x44
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	461a      	mov	r2, r3
 8007eea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007eec:	61bb      	str	r3, [r7, #24]
 8007eee:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ef0:	6979      	ldr	r1, [r7, #20]
 8007ef2:	69ba      	ldr	r2, [r7, #24]
 8007ef4:	e841 2300 	strex	r3, r2, [r1]
 8007ef8:	613b      	str	r3, [r7, #16]
   return(result);
 8007efa:	693b      	ldr	r3, [r7, #16]
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d1e6      	bne.n	8007ece <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	2220      	movs	r2, #32
 8007f04:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	2200      	movs	r2, #0
 8007f12:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007f14:	bf00      	nop
 8007f16:	3754      	adds	r7, #84	@ 0x54
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1e:	4770      	bx	lr
 8007f20:	effffffe 	.word	0xeffffffe

08007f24 <memset>:
 8007f24:	4402      	add	r2, r0
 8007f26:	4603      	mov	r3, r0
 8007f28:	4293      	cmp	r3, r2
 8007f2a:	d100      	bne.n	8007f2e <memset+0xa>
 8007f2c:	4770      	bx	lr
 8007f2e:	f803 1b01 	strb.w	r1, [r3], #1
 8007f32:	e7f9      	b.n	8007f28 <memset+0x4>

08007f34 <__libc_init_array>:
 8007f34:	b570      	push	{r4, r5, r6, lr}
 8007f36:	4d0d      	ldr	r5, [pc, #52]	@ (8007f6c <__libc_init_array+0x38>)
 8007f38:	4c0d      	ldr	r4, [pc, #52]	@ (8007f70 <__libc_init_array+0x3c>)
 8007f3a:	1b64      	subs	r4, r4, r5
 8007f3c:	10a4      	asrs	r4, r4, #2
 8007f3e:	2600      	movs	r6, #0
 8007f40:	42a6      	cmp	r6, r4
 8007f42:	d109      	bne.n	8007f58 <__libc_init_array+0x24>
 8007f44:	4d0b      	ldr	r5, [pc, #44]	@ (8007f74 <__libc_init_array+0x40>)
 8007f46:	4c0c      	ldr	r4, [pc, #48]	@ (8007f78 <__libc_init_array+0x44>)
 8007f48:	f000 f858 	bl	8007ffc <_init>
 8007f4c:	1b64      	subs	r4, r4, r5
 8007f4e:	10a4      	asrs	r4, r4, #2
 8007f50:	2600      	movs	r6, #0
 8007f52:	42a6      	cmp	r6, r4
 8007f54:	d105      	bne.n	8007f62 <__libc_init_array+0x2e>
 8007f56:	bd70      	pop	{r4, r5, r6, pc}
 8007f58:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f5c:	4798      	blx	r3
 8007f5e:	3601      	adds	r6, #1
 8007f60:	e7ee      	b.n	8007f40 <__libc_init_array+0xc>
 8007f62:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f66:	4798      	blx	r3
 8007f68:	3601      	adds	r6, #1
 8007f6a:	e7f2      	b.n	8007f52 <__libc_init_array+0x1e>
 8007f6c:	08008060 	.word	0x08008060
 8007f70:	08008060 	.word	0x08008060
 8007f74:	08008060 	.word	0x08008060
 8007f78:	08008064 	.word	0x08008064

08007f7c <lrintf>:
 8007f7c:	ee10 3a10 	vmov	r3, s0
 8007f80:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8007f84:	f1a2 007f 	sub.w	r0, r2, #127	@ 0x7f
 8007f88:	281e      	cmp	r0, #30
 8007f8a:	b082      	sub	sp, #8
 8007f8c:	dc2f      	bgt.n	8007fee <lrintf+0x72>
 8007f8e:	1c41      	adds	r1, r0, #1
 8007f90:	da02      	bge.n	8007f98 <lrintf+0x1c>
 8007f92:	2000      	movs	r0, #0
 8007f94:	b002      	add	sp, #8
 8007f96:	4770      	bx	lr
 8007f98:	2816      	cmp	r0, #22
 8007f9a:	ea4f 71d3 	mov.w	r1, r3, lsr #31
 8007f9e:	dd0a      	ble.n	8007fb6 <lrintf+0x3a>
 8007fa0:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8007fa4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007fa8:	3a96      	subs	r2, #150	@ 0x96
 8007faa:	fa03 f002 	lsl.w	r0, r3, r2
 8007fae:	2900      	cmp	r1, #0
 8007fb0:	d0f0      	beq.n	8007f94 <lrintf+0x18>
 8007fb2:	4240      	negs	r0, r0
 8007fb4:	e7ee      	b.n	8007f94 <lrintf+0x18>
 8007fb6:	4b10      	ldr	r3, [pc, #64]	@ (8007ff8 <lrintf+0x7c>)
 8007fb8:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8007fbc:	ed93 7a00 	vldr	s14, [r3]
 8007fc0:	ee37 0a00 	vadd.f32	s0, s14, s0
 8007fc4:	ed8d 0a01 	vstr	s0, [sp, #4]
 8007fc8:	eddd 7a01 	vldr	s15, [sp, #4]
 8007fcc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007fd0:	ee17 3a90 	vmov	r3, s15
 8007fd4:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8007fd8:	d0db      	beq.n	8007f92 <lrintf+0x16>
 8007fda:	f3c3 0016 	ubfx	r0, r3, #0, #23
 8007fde:	f3c3 53c7 	ubfx	r3, r3, #23, #8
 8007fe2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8007fe6:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 8007fea:	40d8      	lsrs	r0, r3
 8007fec:	e7df      	b.n	8007fae <lrintf+0x32>
 8007fee:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8007ff2:	ee17 0a90 	vmov	r0, s15
 8007ff6:	e7cd      	b.n	8007f94 <lrintf+0x18>
 8007ff8:	08008050 	.word	0x08008050

08007ffc <_init>:
 8007ffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ffe:	bf00      	nop
 8008000:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008002:	bc08      	pop	{r3}
 8008004:	469e      	mov	lr, r3
 8008006:	4770      	bx	lr

08008008 <_fini>:
 8008008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800800a:	bf00      	nop
 800800c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800800e:	bc08      	pop	{r3}
 8008010:	469e      	mov	lr, r3
 8008012:	4770      	bx	lr
