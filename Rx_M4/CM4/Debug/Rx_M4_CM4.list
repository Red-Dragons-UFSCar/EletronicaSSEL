
Rx_M4_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002dc0  08100298  08100298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08103058  08103058  00004058  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08103078  08103078  00004078  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08103080  08103080  00004080  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08103084  08103084  00004084  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000018  10000000  08103088  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000000e4  10000018  081030a0  00005018  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  100000fc  081030a0  000050fc  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00005018  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000b4d7  00000000  00000000  00005048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00001ef8  00000000  00000000  0001051f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000a10  00000000  00000000  00012418  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 0000076a  00000000  00000000  00012e28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003a05f  00000000  00000000  00013592  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0000d46b  00000000  00000000  0004d5f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0017cbf5  00000000  00000000  0005aa5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001d7651  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00002764  00000000  00000000  001d7694  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000056  00000000  00000000  001d9df8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08100298 <__do_global_dtors_aux>:
 8100298:	b510      	push	{r4, lr}
 810029a:	4c05      	ldr	r4, [pc, #20]	@ (81002b0 <__do_global_dtors_aux+0x18>)
 810029c:	7823      	ldrb	r3, [r4, #0]
 810029e:	b933      	cbnz	r3, 81002ae <__do_global_dtors_aux+0x16>
 81002a0:	4b04      	ldr	r3, [pc, #16]	@ (81002b4 <__do_global_dtors_aux+0x1c>)
 81002a2:	b113      	cbz	r3, 81002aa <__do_global_dtors_aux+0x12>
 81002a4:	4804      	ldr	r0, [pc, #16]	@ (81002b8 <__do_global_dtors_aux+0x20>)
 81002a6:	f3af 8000 	nop.w
 81002aa:	2301      	movs	r3, #1
 81002ac:	7023      	strb	r3, [r4, #0]
 81002ae:	bd10      	pop	{r4, pc}
 81002b0:	10000018 	.word	0x10000018
 81002b4:	00000000 	.word	0x00000000
 81002b8:	08103040 	.word	0x08103040

081002bc <frame_dummy>:
 81002bc:	b508      	push	{r3, lr}
 81002be:	4b03      	ldr	r3, [pc, #12]	@ (81002cc <frame_dummy+0x10>)
 81002c0:	b11b      	cbz	r3, 81002ca <frame_dummy+0xe>
 81002c2:	4903      	ldr	r1, [pc, #12]	@ (81002d0 <frame_dummy+0x14>)
 81002c4:	4803      	ldr	r0, [pc, #12]	@ (81002d4 <frame_dummy+0x18>)
 81002c6:	f3af 8000 	nop.w
 81002ca:	bd08      	pop	{r3, pc}
 81002cc:	00000000 	.word	0x00000000
 81002d0:	1000001c 	.word	0x1000001c
 81002d4:	08103040 	.word	0x08103040

081002d8 <__aeabi_uldivmod>:
 81002d8:	b953      	cbnz	r3, 81002f0 <__aeabi_uldivmod+0x18>
 81002da:	b94a      	cbnz	r2, 81002f0 <__aeabi_uldivmod+0x18>
 81002dc:	2900      	cmp	r1, #0
 81002de:	bf08      	it	eq
 81002e0:	2800      	cmpeq	r0, #0
 81002e2:	bf1c      	itt	ne
 81002e4:	f04f 31ff 	movne.w	r1, #4294967295
 81002e8:	f04f 30ff 	movne.w	r0, #4294967295
 81002ec:	f000 b96a 	b.w	81005c4 <__aeabi_idiv0>
 81002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 81002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 81002f8:	f000 f806 	bl	8100308 <__udivmoddi4>
 81002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8100304:	b004      	add	sp, #16
 8100306:	4770      	bx	lr

08100308 <__udivmoddi4>:
 8100308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810030c:	9d08      	ldr	r5, [sp, #32]
 810030e:	460c      	mov	r4, r1
 8100310:	2b00      	cmp	r3, #0
 8100312:	d14e      	bne.n	81003b2 <__udivmoddi4+0xaa>
 8100314:	4694      	mov	ip, r2
 8100316:	458c      	cmp	ip, r1
 8100318:	4686      	mov	lr, r0
 810031a:	fab2 f282 	clz	r2, r2
 810031e:	d962      	bls.n	81003e6 <__udivmoddi4+0xde>
 8100320:	b14a      	cbz	r2, 8100336 <__udivmoddi4+0x2e>
 8100322:	f1c2 0320 	rsb	r3, r2, #32
 8100326:	4091      	lsls	r1, r2
 8100328:	fa20 f303 	lsr.w	r3, r0, r3
 810032c:	fa0c fc02 	lsl.w	ip, ip, r2
 8100330:	4319      	orrs	r1, r3
 8100332:	fa00 fe02 	lsl.w	lr, r0, r2
 8100336:	ea4f 471c 	mov.w	r7, ip, lsr #16
 810033a:	fa1f f68c 	uxth.w	r6, ip
 810033e:	fbb1 f4f7 	udiv	r4, r1, r7
 8100342:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8100346:	fb07 1114 	mls	r1, r7, r4, r1
 810034a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 810034e:	fb04 f106 	mul.w	r1, r4, r6
 8100352:	4299      	cmp	r1, r3
 8100354:	d90a      	bls.n	810036c <__udivmoddi4+0x64>
 8100356:	eb1c 0303 	adds.w	r3, ip, r3
 810035a:	f104 30ff 	add.w	r0, r4, #4294967295
 810035e:	f080 8112 	bcs.w	8100586 <__udivmoddi4+0x27e>
 8100362:	4299      	cmp	r1, r3
 8100364:	f240 810f 	bls.w	8100586 <__udivmoddi4+0x27e>
 8100368:	3c02      	subs	r4, #2
 810036a:	4463      	add	r3, ip
 810036c:	1a59      	subs	r1, r3, r1
 810036e:	fa1f f38e 	uxth.w	r3, lr
 8100372:	fbb1 f0f7 	udiv	r0, r1, r7
 8100376:	fb07 1110 	mls	r1, r7, r0, r1
 810037a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 810037e:	fb00 f606 	mul.w	r6, r0, r6
 8100382:	429e      	cmp	r6, r3
 8100384:	d90a      	bls.n	810039c <__udivmoddi4+0x94>
 8100386:	eb1c 0303 	adds.w	r3, ip, r3
 810038a:	f100 31ff 	add.w	r1, r0, #4294967295
 810038e:	f080 80fc 	bcs.w	810058a <__udivmoddi4+0x282>
 8100392:	429e      	cmp	r6, r3
 8100394:	f240 80f9 	bls.w	810058a <__udivmoddi4+0x282>
 8100398:	4463      	add	r3, ip
 810039a:	3802      	subs	r0, #2
 810039c:	1b9b      	subs	r3, r3, r6
 810039e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 81003a2:	2100      	movs	r1, #0
 81003a4:	b11d      	cbz	r5, 81003ae <__udivmoddi4+0xa6>
 81003a6:	40d3      	lsrs	r3, r2
 81003a8:	2200      	movs	r2, #0
 81003aa:	e9c5 3200 	strd	r3, r2, [r5]
 81003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 81003b2:	428b      	cmp	r3, r1
 81003b4:	d905      	bls.n	81003c2 <__udivmoddi4+0xba>
 81003b6:	b10d      	cbz	r5, 81003bc <__udivmoddi4+0xb4>
 81003b8:	e9c5 0100 	strd	r0, r1, [r5]
 81003bc:	2100      	movs	r1, #0
 81003be:	4608      	mov	r0, r1
 81003c0:	e7f5      	b.n	81003ae <__udivmoddi4+0xa6>
 81003c2:	fab3 f183 	clz	r1, r3
 81003c6:	2900      	cmp	r1, #0
 81003c8:	d146      	bne.n	8100458 <__udivmoddi4+0x150>
 81003ca:	42a3      	cmp	r3, r4
 81003cc:	d302      	bcc.n	81003d4 <__udivmoddi4+0xcc>
 81003ce:	4290      	cmp	r0, r2
 81003d0:	f0c0 80f0 	bcc.w	81005b4 <__udivmoddi4+0x2ac>
 81003d4:	1a86      	subs	r6, r0, r2
 81003d6:	eb64 0303 	sbc.w	r3, r4, r3
 81003da:	2001      	movs	r0, #1
 81003dc:	2d00      	cmp	r5, #0
 81003de:	d0e6      	beq.n	81003ae <__udivmoddi4+0xa6>
 81003e0:	e9c5 6300 	strd	r6, r3, [r5]
 81003e4:	e7e3      	b.n	81003ae <__udivmoddi4+0xa6>
 81003e6:	2a00      	cmp	r2, #0
 81003e8:	f040 8090 	bne.w	810050c <__udivmoddi4+0x204>
 81003ec:	eba1 040c 	sub.w	r4, r1, ip
 81003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 81003f4:	fa1f f78c 	uxth.w	r7, ip
 81003f8:	2101      	movs	r1, #1
 81003fa:	fbb4 f6f8 	udiv	r6, r4, r8
 81003fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8100402:	fb08 4416 	mls	r4, r8, r6, r4
 8100406:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 810040a:	fb07 f006 	mul.w	r0, r7, r6
 810040e:	4298      	cmp	r0, r3
 8100410:	d908      	bls.n	8100424 <__udivmoddi4+0x11c>
 8100412:	eb1c 0303 	adds.w	r3, ip, r3
 8100416:	f106 34ff 	add.w	r4, r6, #4294967295
 810041a:	d202      	bcs.n	8100422 <__udivmoddi4+0x11a>
 810041c:	4298      	cmp	r0, r3
 810041e:	f200 80cd 	bhi.w	81005bc <__udivmoddi4+0x2b4>
 8100422:	4626      	mov	r6, r4
 8100424:	1a1c      	subs	r4, r3, r0
 8100426:	fa1f f38e 	uxth.w	r3, lr
 810042a:	fbb4 f0f8 	udiv	r0, r4, r8
 810042e:	fb08 4410 	mls	r4, r8, r0, r4
 8100432:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8100436:	fb00 f707 	mul.w	r7, r0, r7
 810043a:	429f      	cmp	r7, r3
 810043c:	d908      	bls.n	8100450 <__udivmoddi4+0x148>
 810043e:	eb1c 0303 	adds.w	r3, ip, r3
 8100442:	f100 34ff 	add.w	r4, r0, #4294967295
 8100446:	d202      	bcs.n	810044e <__udivmoddi4+0x146>
 8100448:	429f      	cmp	r7, r3
 810044a:	f200 80b0 	bhi.w	81005ae <__udivmoddi4+0x2a6>
 810044e:	4620      	mov	r0, r4
 8100450:	1bdb      	subs	r3, r3, r7
 8100452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8100456:	e7a5      	b.n	81003a4 <__udivmoddi4+0x9c>
 8100458:	f1c1 0620 	rsb	r6, r1, #32
 810045c:	408b      	lsls	r3, r1
 810045e:	fa22 f706 	lsr.w	r7, r2, r6
 8100462:	431f      	orrs	r7, r3
 8100464:	fa20 fc06 	lsr.w	ip, r0, r6
 8100468:	fa04 f301 	lsl.w	r3, r4, r1
 810046c:	ea43 030c 	orr.w	r3, r3, ip
 8100470:	40f4      	lsrs	r4, r6
 8100472:	fa00 f801 	lsl.w	r8, r0, r1
 8100476:	0c38      	lsrs	r0, r7, #16
 8100478:	ea4f 4913 	mov.w	r9, r3, lsr #16
 810047c:	fbb4 fef0 	udiv	lr, r4, r0
 8100480:	fa1f fc87 	uxth.w	ip, r7
 8100484:	fb00 441e 	mls	r4, r0, lr, r4
 8100488:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 810048c:	fb0e f90c 	mul.w	r9, lr, ip
 8100490:	45a1      	cmp	r9, r4
 8100492:	fa02 f201 	lsl.w	r2, r2, r1
 8100496:	d90a      	bls.n	81004ae <__udivmoddi4+0x1a6>
 8100498:	193c      	adds	r4, r7, r4
 810049a:	f10e 3aff 	add.w	sl, lr, #4294967295
 810049e:	f080 8084 	bcs.w	81005aa <__udivmoddi4+0x2a2>
 81004a2:	45a1      	cmp	r9, r4
 81004a4:	f240 8081 	bls.w	81005aa <__udivmoddi4+0x2a2>
 81004a8:	f1ae 0e02 	sub.w	lr, lr, #2
 81004ac:	443c      	add	r4, r7
 81004ae:	eba4 0409 	sub.w	r4, r4, r9
 81004b2:	fa1f f983 	uxth.w	r9, r3
 81004b6:	fbb4 f3f0 	udiv	r3, r4, r0
 81004ba:	fb00 4413 	mls	r4, r0, r3, r4
 81004be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 81004c2:	fb03 fc0c 	mul.w	ip, r3, ip
 81004c6:	45a4      	cmp	ip, r4
 81004c8:	d907      	bls.n	81004da <__udivmoddi4+0x1d2>
 81004ca:	193c      	adds	r4, r7, r4
 81004cc:	f103 30ff 	add.w	r0, r3, #4294967295
 81004d0:	d267      	bcs.n	81005a2 <__udivmoddi4+0x29a>
 81004d2:	45a4      	cmp	ip, r4
 81004d4:	d965      	bls.n	81005a2 <__udivmoddi4+0x29a>
 81004d6:	3b02      	subs	r3, #2
 81004d8:	443c      	add	r4, r7
 81004da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 81004de:	fba0 9302 	umull	r9, r3, r0, r2
 81004e2:	eba4 040c 	sub.w	r4, r4, ip
 81004e6:	429c      	cmp	r4, r3
 81004e8:	46ce      	mov	lr, r9
 81004ea:	469c      	mov	ip, r3
 81004ec:	d351      	bcc.n	8100592 <__udivmoddi4+0x28a>
 81004ee:	d04e      	beq.n	810058e <__udivmoddi4+0x286>
 81004f0:	b155      	cbz	r5, 8100508 <__udivmoddi4+0x200>
 81004f2:	ebb8 030e 	subs.w	r3, r8, lr
 81004f6:	eb64 040c 	sbc.w	r4, r4, ip
 81004fa:	fa04 f606 	lsl.w	r6, r4, r6
 81004fe:	40cb      	lsrs	r3, r1
 8100500:	431e      	orrs	r6, r3
 8100502:	40cc      	lsrs	r4, r1
 8100504:	e9c5 6400 	strd	r6, r4, [r5]
 8100508:	2100      	movs	r1, #0
 810050a:	e750      	b.n	81003ae <__udivmoddi4+0xa6>
 810050c:	f1c2 0320 	rsb	r3, r2, #32
 8100510:	fa20 f103 	lsr.w	r1, r0, r3
 8100514:	fa0c fc02 	lsl.w	ip, ip, r2
 8100518:	fa24 f303 	lsr.w	r3, r4, r3
 810051c:	4094      	lsls	r4, r2
 810051e:	430c      	orrs	r4, r1
 8100520:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8100524:	fa00 fe02 	lsl.w	lr, r0, r2
 8100528:	fa1f f78c 	uxth.w	r7, ip
 810052c:	fbb3 f0f8 	udiv	r0, r3, r8
 8100530:	fb08 3110 	mls	r1, r8, r0, r3
 8100534:	0c23      	lsrs	r3, r4, #16
 8100536:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 810053a:	fb00 f107 	mul.w	r1, r0, r7
 810053e:	4299      	cmp	r1, r3
 8100540:	d908      	bls.n	8100554 <__udivmoddi4+0x24c>
 8100542:	eb1c 0303 	adds.w	r3, ip, r3
 8100546:	f100 36ff 	add.w	r6, r0, #4294967295
 810054a:	d22c      	bcs.n	81005a6 <__udivmoddi4+0x29e>
 810054c:	4299      	cmp	r1, r3
 810054e:	d92a      	bls.n	81005a6 <__udivmoddi4+0x29e>
 8100550:	3802      	subs	r0, #2
 8100552:	4463      	add	r3, ip
 8100554:	1a5b      	subs	r3, r3, r1
 8100556:	b2a4      	uxth	r4, r4
 8100558:	fbb3 f1f8 	udiv	r1, r3, r8
 810055c:	fb08 3311 	mls	r3, r8, r1, r3
 8100560:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8100564:	fb01 f307 	mul.w	r3, r1, r7
 8100568:	42a3      	cmp	r3, r4
 810056a:	d908      	bls.n	810057e <__udivmoddi4+0x276>
 810056c:	eb1c 0404 	adds.w	r4, ip, r4
 8100570:	f101 36ff 	add.w	r6, r1, #4294967295
 8100574:	d213      	bcs.n	810059e <__udivmoddi4+0x296>
 8100576:	42a3      	cmp	r3, r4
 8100578:	d911      	bls.n	810059e <__udivmoddi4+0x296>
 810057a:	3902      	subs	r1, #2
 810057c:	4464      	add	r4, ip
 810057e:	1ae4      	subs	r4, r4, r3
 8100580:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8100584:	e739      	b.n	81003fa <__udivmoddi4+0xf2>
 8100586:	4604      	mov	r4, r0
 8100588:	e6f0      	b.n	810036c <__udivmoddi4+0x64>
 810058a:	4608      	mov	r0, r1
 810058c:	e706      	b.n	810039c <__udivmoddi4+0x94>
 810058e:	45c8      	cmp	r8, r9
 8100590:	d2ae      	bcs.n	81004f0 <__udivmoddi4+0x1e8>
 8100592:	ebb9 0e02 	subs.w	lr, r9, r2
 8100596:	eb63 0c07 	sbc.w	ip, r3, r7
 810059a:	3801      	subs	r0, #1
 810059c:	e7a8      	b.n	81004f0 <__udivmoddi4+0x1e8>
 810059e:	4631      	mov	r1, r6
 81005a0:	e7ed      	b.n	810057e <__udivmoddi4+0x276>
 81005a2:	4603      	mov	r3, r0
 81005a4:	e799      	b.n	81004da <__udivmoddi4+0x1d2>
 81005a6:	4630      	mov	r0, r6
 81005a8:	e7d4      	b.n	8100554 <__udivmoddi4+0x24c>
 81005aa:	46d6      	mov	lr, sl
 81005ac:	e77f      	b.n	81004ae <__udivmoddi4+0x1a6>
 81005ae:	4463      	add	r3, ip
 81005b0:	3802      	subs	r0, #2
 81005b2:	e74d      	b.n	8100450 <__udivmoddi4+0x148>
 81005b4:	4606      	mov	r6, r0
 81005b6:	4623      	mov	r3, r4
 81005b8:	4608      	mov	r0, r1
 81005ba:	e70f      	b.n	81003dc <__udivmoddi4+0xd4>
 81005bc:	3e02      	subs	r6, #2
 81005be:	4463      	add	r3, ip
 81005c0:	e730      	b.n	8100424 <__udivmoddi4+0x11c>
 81005c2:	bf00      	nop

081005c4 <__aeabi_idiv0>:
 81005c4:	4770      	bx	lr
 81005c6:	bf00      	nop

081005c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 81005c8:	b480      	push	{r7}
 81005ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 81005cc:	4b09      	ldr	r3, [pc, #36]	@ (81005f4 <SystemInit+0x2c>)
 81005ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 81005d2:	4a08      	ldr	r2, [pc, #32]	@ (81005f4 <SystemInit+0x2c>)
 81005d4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 81005d8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 81005dc:	4b05      	ldr	r3, [pc, #20]	@ (81005f4 <SystemInit+0x2c>)
 81005de:	691b      	ldr	r3, [r3, #16]
 81005e0:	4a04      	ldr	r2, [pc, #16]	@ (81005f4 <SystemInit+0x2c>)
 81005e2:	f043 0310 	orr.w	r3, r3, #16
 81005e6:	6113      	str	r3, [r2, #16]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 81005e8:	bf00      	nop
 81005ea:	46bd      	mov	sp, r7
 81005ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 81005f0:	4770      	bx	lr
 81005f2:	bf00      	nop
 81005f4:	e000ed00 	.word	0xe000ed00

081005f8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 81005f8:	b480      	push	{r7}
 81005fa:	b083      	sub	sp, #12
 81005fc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 81005fe:	4b0a      	ldr	r3, [pc, #40]	@ (8100628 <MX_DMA_Init+0x30>)
 8100600:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8100604:	4a08      	ldr	r2, [pc, #32]	@ (8100628 <MX_DMA_Init+0x30>)
 8100606:	f043 0301 	orr.w	r3, r3, #1
 810060a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 810060e:	4b06      	ldr	r3, [pc, #24]	@ (8100628 <MX_DMA_Init+0x30>)
 8100610:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8100614:	f003 0301 	and.w	r3, r3, #1
 8100618:	607b      	str	r3, [r7, #4]
 810061a:	687b      	ldr	r3, [r7, #4]

}
 810061c:	bf00      	nop
 810061e:	370c      	adds	r7, #12
 8100620:	46bd      	mov	sp, r7
 8100622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100626:	4770      	bx	lr
 8100628:	58024400 	.word	0x58024400

0810062c <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 810062c:	b580      	push	{r7, lr}
 810062e:	b088      	sub	sp, #32
 8100630:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8100632:	f107 030c 	add.w	r3, r7, #12
 8100636:	2200      	movs	r2, #0
 8100638:	601a      	str	r2, [r3, #0]
 810063a:	605a      	str	r2, [r3, #4]
 810063c:	609a      	str	r2, [r3, #8]
 810063e:	60da      	str	r2, [r3, #12]
 8100640:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8100642:	4b23      	ldr	r3, [pc, #140]	@ (81006d0 <MX_GPIO_Init+0xa4>)
 8100644:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100648:	4a21      	ldr	r2, [pc, #132]	@ (81006d0 <MX_GPIO_Init+0xa4>)
 810064a:	f043 0301 	orr.w	r3, r3, #1
 810064e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8100652:	4b1f      	ldr	r3, [pc, #124]	@ (81006d0 <MX_GPIO_Init+0xa4>)
 8100654:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100658:	f003 0301 	and.w	r3, r3, #1
 810065c:	60bb      	str	r3, [r7, #8]
 810065e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8100660:	4b1b      	ldr	r3, [pc, #108]	@ (81006d0 <MX_GPIO_Init+0xa4>)
 8100662:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100666:	4a1a      	ldr	r2, [pc, #104]	@ (81006d0 <MX_GPIO_Init+0xa4>)
 8100668:	f043 0308 	orr.w	r3, r3, #8
 810066c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8100670:	4b17      	ldr	r3, [pc, #92]	@ (81006d0 <MX_GPIO_Init+0xa4>)
 8100672:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100676:	f003 0308 	and.w	r3, r3, #8
 810067a:	607b      	str	r3, [r7, #4]
 810067c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 810067e:	4b14      	ldr	r3, [pc, #80]	@ (81006d0 <MX_GPIO_Init+0xa4>)
 8100680:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100684:	4a12      	ldr	r2, [pc, #72]	@ (81006d0 <MX_GPIO_Init+0xa4>)
 8100686:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 810068a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810068e:	4b10      	ldr	r3, [pc, #64]	@ (81006d0 <MX_GPIO_Init+0xa4>)
 8100690:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100694:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8100698:	603b      	str	r3, [r7, #0]
 810069a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, CS_Pin|CE_Pin, GPIO_PIN_RESET);
 810069c:	2200      	movs	r2, #0
 810069e:	f44f 41a0 	mov.w	r1, #20480	@ 0x5000
 81006a2:	480c      	ldr	r0, [pc, #48]	@ (81006d4 <MX_GPIO_Init+0xa8>)
 81006a4:	f001 f8be 	bl	8101824 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = CS_Pin|CE_Pin;
 81006a8:	f44f 43a0 	mov.w	r3, #20480	@ 0x5000
 81006ac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 81006ae:	2301      	movs	r3, #1
 81006b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 81006b2:	2300      	movs	r3, #0
 81006b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81006b6:	2300      	movs	r3, #0
 81006b8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 81006ba:	f107 030c 	add.w	r3, r7, #12
 81006be:	4619      	mov	r1, r3
 81006c0:	4804      	ldr	r0, [pc, #16]	@ (81006d4 <MX_GPIO_Init+0xa8>)
 81006c2:	f000 feff 	bl	81014c4 <HAL_GPIO_Init>

}
 81006c6:	bf00      	nop
 81006c8:	3720      	adds	r7, #32
 81006ca:	46bd      	mov	sp, r7
 81006cc:	bd80      	pop	{r7, pc}
 81006ce:	bf00      	nop
 81006d0:	58024400 	.word	0x58024400
 81006d4:	58021800 	.word	0x58021800

081006d8 <Rx_mode>:
	NRF_Reset();
	NRF_WriteRegister(NRF_REG_TX_ADDR,Adress,5);
	//Para enviar a mensagem usar função transmitandwait
}

void Rx_mode(uint8_t Adress[5]){
 81006d8:	b580      	push	{r7, lr}
 81006da:	b084      	sub	sp, #16
 81006dc:	af02      	add	r7, sp, #8
 81006de:	6078      	str	r0, [r7, #4]

	if(NRF_Init(&hspi1, GPIOG, GPIO_PIN_12, GPIOG, GPIO_PIN_14) != NRF_OK){
 81006e0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 81006e4:	9300      	str	r3, [sp, #0]
 81006e6:	4b0f      	ldr	r3, [pc, #60]	@ (8100724 <Rx_mode+0x4c>)
 81006e8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 81006ec:	490d      	ldr	r1, [pc, #52]	@ (8100724 <Rx_mode+0x4c>)
 81006ee:	480e      	ldr	r0, [pc, #56]	@ (8100728 <Rx_mode+0x50>)
 81006f0:	f000 fafc 	bl	8100cec <NRF_Init>
 81006f4:	4603      	mov	r3, r0
 81006f6:	2b00      	cmp	r3, #0
 81006f8:	d001      	beq.n	81006fe <Rx_mode+0x26>
		Error_Handler();
 81006fa:	f000 f8b7 	bl	810086c <Error_Handler>
	}

	NRF_Reset();
 81006fe:	f000 fb31 	bl	8100d64 <NRF_Reset>
	NRF_WriteRegister(NRF_REG_RX_ADDR_P0,Adress,5);
 8100702:	2205      	movs	r2, #5
 8100704:	6879      	ldr	r1, [r7, #4]
 8100706:	200a      	movs	r0, #10
 8100708:	f000 f9ba 	bl	8100a80 <NRF_WriteRegister>

	NRF_WriteRegisterByte(NRF_REG_RX_PW_P0,32); //00111111 - 32 bytes
 810070c:	2120      	movs	r1, #32
 810070e:	2011      	movs	r0, #17
 8100710:	f000 f9cc 	bl	8100aac <NRF_WriteRegisterByte>

	NRF_EnterMode(NRF_MODE_RX);
 8100714:	2002      	movs	r0, #2
 8100716:	f000 fa73 	bl	8100c00 <NRF_EnterMode>
}
 810071a:	bf00      	nop
 810071c:	3708      	adds	r7, #8
 810071e:	46bd      	mov	sp, r7
 8100720:	bd80      	pop	{r7, pc}
 8100722:	bf00      	nop
 8100724:	58021800 	.word	0x58021800
 8100728:	10000070 	.word	0x10000070

0810072c <ReceiveData>:

NRF_Status ReceiveData (uint8_t *data){
 810072c:	b580      	push	{r7, lr}
 810072e:	b084      	sub	sp, #16
 8100730:	af00      	add	r7, sp, #0
 8100732:	6078      	str	r0, [r7, #4]
	NRF_Status ret = NRF_ERROR;
 8100734:	2304      	movs	r3, #4
 8100736:	73fb      	strb	r3, [r7, #15]
	uint8_t status = NRF_ReadStatus();
 8100738:	f000 f9e2 	bl	8100b00 <NRF_ReadStatus>
 810073c:	4603      	mov	r3, r0
 810073e:	73bb      	strb	r3, [r7, #14]
	uint8_t STATUS_REGISTER_RX_DR_BIT = 6;
 8100740:	2306      	movs	r3, #6
 8100742:	737b      	strb	r3, [r7, #13]
	if(status & (1<<STATUS_REGISTER_RX_DR_BIT)){
 8100744:	7bba      	ldrb	r2, [r7, #14]
 8100746:	7b7b      	ldrb	r3, [r7, #13]
 8100748:	fa42 f303 	asr.w	r3, r2, r3
 810074c:	f003 0301 	and.w	r3, r3, #1
 8100750:	2b00      	cmp	r3, #0
 8100752:	d00a      	beq.n	810076a <ReceiveData+0x3e>
		NRF_ReadPayload(data, 32);
 8100754:	2120      	movs	r1, #32
 8100756:	6878      	ldr	r0, [r7, #4]
 8100758:	f000 fb9e 	bl	8100e98 <NRF_ReadPayload>
		ret = NRF_OK;
 810075c:	2300      	movs	r3, #0
 810075e:	73fb      	strb	r3, [r7, #15]
		NRF_SetRegisterBit(NRF_REG_STATUS, 6);
 8100760:	2106      	movs	r1, #6
 8100762:	2007      	movs	r0, #7
 8100764:	f000 f9e8 	bl	8100b38 <NRF_SetRegisterBit>
 8100768:	e001      	b.n	810076e <ReceiveData+0x42>
	} else {
		ret = NRF_ERROR;
 810076a:	2304      	movs	r3, #4
 810076c:	73fb      	strb	r3, [r7, #15]
	}
	return ret;
 810076e:	7bfb      	ldrb	r3, [r7, #15]
}
 8100770:	4618      	mov	r0, r3
 8100772:	3710      	adds	r7, #16
 8100774:	46bd      	mov	sp, r7
 8100776:	bd80      	pop	{r7, pc}

08100778 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8100778:	b580      	push	{r7, lr}
 810077a:	b084      	sub	sp, #16
 810077c:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 810077e:	4b34      	ldr	r3, [pc, #208]	@ (8100850 <main+0xd8>)
 8100780:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100784:	4a32      	ldr	r2, [pc, #200]	@ (8100850 <main+0xd8>)
 8100786:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 810078a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810078e:	4b30      	ldr	r3, [pc, #192]	@ (8100850 <main+0xd8>)
 8100790:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100794:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8100798:	607b      	str	r3, [r7, #4]
 810079a:	687b      	ldr	r3, [r7, #4]
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 810079c:	2001      	movs	r0, #1
 810079e:	f001 f875 	bl	810188c <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 81007a2:	f001 f8ff 	bl	81019a4 <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 81007a6:	2201      	movs	r2, #1
 81007a8:	2102      	movs	r1, #2
 81007aa:	2000      	movs	r0, #0
 81007ac:	f001 f880 	bl	81018b0 <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 81007b0:	4b28      	ldr	r3, [pc, #160]	@ (8100854 <main+0xdc>)
 81007b2:	681b      	ldr	r3, [r3, #0]
 81007b4:	091b      	lsrs	r3, r3, #4
 81007b6:	f003 030f 	and.w	r3, r3, #15
 81007ba:	2b07      	cmp	r3, #7
 81007bc:	d108      	bne.n	81007d0 <main+0x58>
 81007be:	4b26      	ldr	r3, [pc, #152]	@ (8100858 <main+0xe0>)
 81007c0:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 81007c4:	4a24      	ldr	r2, [pc, #144]	@ (8100858 <main+0xe0>)
 81007c6:	f043 0301 	orr.w	r3, r3, #1
 81007ca:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104
 81007ce:	e007      	b.n	81007e0 <main+0x68>
 81007d0:	4b21      	ldr	r3, [pc, #132]	@ (8100858 <main+0xe0>)
 81007d2:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 81007d6:	4a20      	ldr	r2, [pc, #128]	@ (8100858 <main+0xe0>)
 81007d8:	f043 0301 	orr.w	r3, r3, #1
 81007dc:	f8c2 3114 	str.w	r3, [r2, #276]	@ 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 81007e0:	f000 fca0 	bl	8101124 <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 81007e4:	f7ff ff22 	bl	810062c <MX_GPIO_Init>
  MX_DMA_Init();
 81007e8:	f7ff ff06 	bl	81005f8 <MX_DMA_Init>
  MX_SPI1_Init();
 81007ec:	f000 fb66 	bl	8100ebc <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  Rx_mode(TxAdress);
 81007f0:	481a      	ldr	r0, [pc, #104]	@ (810085c <main+0xe4>)
 81007f2:	f7ff ff71 	bl	81006d8 <Rx_mode>
  NRF_Status ret = NRF_OK;
 81007f6:	2300      	movs	r3, #0
 81007f8:	72fb      	strb	r3, [r7, #11]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 ret = ReceiveData(RxData);
 81007fa:	4819      	ldr	r0, [pc, #100]	@ (8100860 <main+0xe8>)
 81007fc:	f7ff ff96 	bl	810072c <ReceiveData>
 8100800:	4603      	mov	r3, r0
 8100802:	72fb      	strb	r3, [r7, #11]
	 if(ret == NRF_OK){
 8100804:	7afb      	ldrb	r3, [r7, #11]
 8100806:	2b00      	cmp	r3, #0
 8100808:	d103      	bne.n	8100812 <main+0x9a>
		 HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 810080a:	2101      	movs	r1, #1
 810080c:	4815      	ldr	r0, [pc, #84]	@ (8100864 <main+0xec>)
 810080e:	f001 f822 	bl	8101856 <HAL_GPIO_TogglePin>

	 }
	 if(xfr_ptr->sts_4to7 == 0){
 8100812:	4b15      	ldr	r3, [pc, #84]	@ (8100868 <main+0xf0>)
 8100814:	781b      	ldrb	r3, [r3, #0]
 8100816:	b2db      	uxtb	r3, r3
 8100818:	2b00      	cmp	r3, #0
 810081a:	d115      	bne.n	8100848 <main+0xd0>
		 for(int n = 0; n < 32; n++){
 810081c:	2300      	movs	r3, #0
 810081e:	60fb      	str	r3, [r7, #12]
 8100820:	e00c      	b.n	810083c <main+0xc4>
		 	xfr_ptr->M4toM7[n] = RxData[n];
 8100822:	4a11      	ldr	r2, [pc, #68]	@ (8100868 <main+0xf0>)
 8100824:	490e      	ldr	r1, [pc, #56]	@ (8100860 <main+0xe8>)
 8100826:	68fb      	ldr	r3, [r7, #12]
 8100828:	440b      	add	r3, r1
 810082a:	7819      	ldrb	r1, [r3, #0]
 810082c:	68fb      	ldr	r3, [r7, #12]
 810082e:	4413      	add	r3, r2
 8100830:	3302      	adds	r3, #2
 8100832:	460a      	mov	r2, r1
 8100834:	701a      	strb	r2, [r3, #0]
		 for(int n = 0; n < 32; n++){
 8100836:	68fb      	ldr	r3, [r7, #12]
 8100838:	3301      	adds	r3, #1
 810083a:	60fb      	str	r3, [r7, #12]
 810083c:	68fb      	ldr	r3, [r7, #12]
 810083e:	2b1f      	cmp	r3, #31
 8100840:	ddef      	ble.n	8100822 <main+0xaa>
		 	}
		 xfr_ptr->sts_4to7 =1;
 8100842:	4b09      	ldr	r3, [pc, #36]	@ (8100868 <main+0xf0>)
 8100844:	2201      	movs	r2, #1
 8100846:	701a      	strb	r2, [r3, #0]
	 }
	 HAL_Delay(10);
 8100848:	200a      	movs	r0, #10
 810084a:	f000 fd1f 	bl	810128c <HAL_Delay>
	 ret = ReceiveData(RxData);
 810084e:	e7d4      	b.n	81007fa <main+0x82>
 8100850:	58024400 	.word	0x58024400
 8100854:	e000ed00 	.word	0xe000ed00
 8100858:	58026400 	.word	0x58026400
 810085c:	10000008 	.word	0x10000008
 8100860:	10000034 	.word	0x10000034
 8100864:	58020400 	.word	0x58020400
 8100868:	38001000 	.word	0x38001000

0810086c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 810086c:	b480      	push	{r7}
 810086e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8100870:	b672      	cpsid	i
}
 8100872:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8100874:	bf00      	nop
 8100876:	e7fd      	b.n	8100874 <Error_Handler+0x8>

08100878 <csn_set>:
int current_mode = NRF_MODE_POWERDOWN; // Modo atual do NRF

/* Funções de Pinagem do NRF*/

//Pino CS em Alto (Dispositivo não está conversando com o uC)
void csn_set() {
 8100878:	b580      	push	{r7, lr}
 810087a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(NRF_CSN_Port, NRF_CSN_Pin, GPIO_PIN_SET);
 810087c:	4b04      	ldr	r3, [pc, #16]	@ (8100890 <csn_set+0x18>)
 810087e:	681b      	ldr	r3, [r3, #0]
 8100880:	4a04      	ldr	r2, [pc, #16]	@ (8100894 <csn_set+0x1c>)
 8100882:	8811      	ldrh	r1, [r2, #0]
 8100884:	2201      	movs	r2, #1
 8100886:	4618      	mov	r0, r3
 8100888:	f000 ffcc 	bl	8101824 <HAL_GPIO_WritePin>
}
 810088c:	bf00      	nop
 810088e:	bd80      	pop	{r7, pc}
 8100890:	10000058 	.word	0x10000058
 8100894:	1000005c 	.word	0x1000005c

08100898 <csn_reset>:

//Pino CS em Baixo (Dispositivo  está conversando com o uC)
void csn_reset() {
 8100898:	b580      	push	{r7, lr}
 810089a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(NRF_CSN_Port, NRF_CSN_Pin, GPIO_PIN_RESET);
 810089c:	4b04      	ldr	r3, [pc, #16]	@ (81008b0 <csn_reset+0x18>)
 810089e:	681b      	ldr	r3, [r3, #0]
 81008a0:	4a04      	ldr	r2, [pc, #16]	@ (81008b4 <csn_reset+0x1c>)
 81008a2:	8811      	ldrh	r1, [r2, #0]
 81008a4:	2200      	movs	r2, #0
 81008a6:	4618      	mov	r0, r3
 81008a8:	f000 ffbc 	bl	8101824 <HAL_GPIO_WritePin>
}
 81008ac:	bf00      	nop
 81008ae:	bd80      	pop	{r7, pc}
 81008b0:	10000058 	.word	0x10000058
 81008b4:	1000005c 	.word	0x1000005c

081008b8 <ce_set>:

//Pino CE em Alto (Dispositivo está em funcionamento,Tx ou Rx)
void ce_set() {
 81008b8:	b580      	push	{r7, lr}
 81008ba:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(NRF_CE_Port, NRF_CE_Pin, GPIO_PIN_SET);
 81008bc:	4b04      	ldr	r3, [pc, #16]	@ (81008d0 <ce_set+0x18>)
 81008be:	681b      	ldr	r3, [r3, #0]
 81008c0:	4a04      	ldr	r2, [pc, #16]	@ (81008d4 <ce_set+0x1c>)
 81008c2:	8811      	ldrh	r1, [r2, #0]
 81008c4:	2201      	movs	r2, #1
 81008c6:	4618      	mov	r0, r3
 81008c8:	f000 ffac 	bl	8101824 <HAL_GPIO_WritePin>
}
 81008cc:	bf00      	nop
 81008ce:	bd80      	pop	{r7, pc}
 81008d0:	10000060 	.word	0x10000060
 81008d4:	10000064 	.word	0x10000064

081008d8 <ce_reset>:

//Pino CE em Baixo (Dispositivo está em standby)
void ce_reset() {
 81008d8:	b580      	push	{r7, lr}
 81008da:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(NRF_CE_Port, NRF_CE_Pin, GPIO_PIN_RESET);
 81008dc:	4b04      	ldr	r3, [pc, #16]	@ (81008f0 <ce_reset+0x18>)
 81008de:	681b      	ldr	r3, [r3, #0]
 81008e0:	4a04      	ldr	r2, [pc, #16]	@ (81008f4 <ce_reset+0x1c>)
 81008e2:	8811      	ldrh	r1, [r2, #0]
 81008e4:	2200      	movs	r2, #0
 81008e6:	4618      	mov	r0, r3
 81008e8:	f000 ff9c 	bl	8101824 <HAL_GPIO_WritePin>
}
 81008ec:	bf00      	nop
 81008ee:	bd80      	pop	{r7, pc}
 81008f0:	10000060 	.word	0x10000060
 81008f4:	10000064 	.word	0x10000064

081008f8 <wait>:
uint8_t read_ce() {
  return HAL_GPIO_ReadPin(NRF_CE_Port, NRF_CE_Pin);
}

//Função de "Esperar" em us
void wait(uint64_t us) {
 81008f8:	b5b0      	push	{r4, r5, r7, lr}
 81008fa:	b084      	sub	sp, #16
 81008fc:	af00      	add	r7, sp, #0
 81008fe:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t volatile cycles = CPU_Freq * us / 1000000; //Quantos ciclos de CPU deverão ser esperados para alcancar tal tempo
 8100902:	4915      	ldr	r1, [pc, #84]	@ (8100958 <wait+0x60>)
 8100904:	6809      	ldr	r1, [r1, #0]
 8100906:	2000      	movs	r0, #0
 8100908:	460a      	mov	r2, r1
 810090a:	4603      	mov	r3, r0
 810090c:	6839      	ldr	r1, [r7, #0]
 810090e:	fb03 f001 	mul.w	r0, r3, r1
 8100912:	6879      	ldr	r1, [r7, #4]
 8100914:	fb02 f101 	mul.w	r1, r2, r1
 8100918:	4401      	add	r1, r0
 810091a:	6838      	ldr	r0, [r7, #0]
 810091c:	fba0 4502 	umull	r4, r5, r0, r2
 8100920:	194b      	adds	r3, r1, r5
 8100922:	461d      	mov	r5, r3
 8100924:	4a0d      	ldr	r2, [pc, #52]	@ (810095c <wait+0x64>)
 8100926:	f04f 0300 	mov.w	r3, #0
 810092a:	4620      	mov	r0, r4
 810092c:	4629      	mov	r1, r5
 810092e:	f7ff fcd3 	bl	81002d8 <__aeabi_uldivmod>
 8100932:	4602      	mov	r2, r0
 8100934:	460b      	mov	r3, r1
 8100936:	4613      	mov	r3, r2
 8100938:	60fb      	str	r3, [r7, #12]
  uint32_t volatile current = 0; //Quantos se passaram
 810093a:	2300      	movs	r3, #0
 810093c:	60bb      	str	r3, [r7, #8]
  while (current <= cycles) {
 810093e:	e002      	b.n	8100946 <wait+0x4e>
    current++;
 8100940:	68bb      	ldr	r3, [r7, #8]
 8100942:	3301      	adds	r3, #1
 8100944:	60bb      	str	r3, [r7, #8]
  while (current <= cycles) {
 8100946:	68ba      	ldr	r2, [r7, #8]
 8100948:	68fb      	ldr	r3, [r7, #12]
 810094a:	429a      	cmp	r2, r3
 810094c:	d9f8      	bls.n	8100940 <wait+0x48>
  }
}
 810094e:	bf00      	nop
 8100950:	bf00      	nop
 8100952:	3710      	adds	r7, #16
 8100954:	46bd      	mov	sp, r7
 8100956:	bdb0      	pop	{r4, r5, r7, pc}
 8100958:	10000068 	.word	0x10000068
 810095c:	000f4240 	.word	0x000f4240

08100960 <NRF_SendCommand>:

/* Funções Para enviar e receber do NRFL01 em "Baixo" Nível */

//Função para enviar um comando para o NRF
NRF_Status NRF_SendCommand(uint8_t cmd) {
 8100960:	b580      	push	{r7, lr}
 8100962:	b086      	sub	sp, #24
 8100964:	af02      	add	r7, sp, #8
 8100966:	4603      	mov	r3, r0
 8100968:	71fb      	strb	r3, [r7, #7]
  NRF_Status ret = NRF_OK;
 810096a:	2300      	movs	r3, #0
 810096c:	73fb      	strb	r3, [r7, #15]
  uint8_t status;

  csn_reset(); //Seleciona o dispositivo
 810096e:	f7ff ff93 	bl	8100898 <csn_reset>
  ret = (NRF_Status)HAL_SPI_TransmitReceive(HSPI, &cmd, &status, 1, NRF_SPI_TIMEOUT_DUR); //Envia o comando e retorna o status
 8100972:	4b0c      	ldr	r3, [pc, #48]	@ (81009a4 <NRF_SendCommand+0x44>)
 8100974:	6818      	ldr	r0, [r3, #0]
 8100976:	f107 020e 	add.w	r2, r7, #14
 810097a:	1df9      	adds	r1, r7, #7
 810097c:	230a      	movs	r3, #10
 810097e:	9300      	str	r3, [sp, #0]
 8100980:	2301      	movs	r3, #1
 8100982:	f001 ff17 	bl	81027b4 <HAL_SPI_TransmitReceive>
 8100986:	4603      	mov	r3, r0
 8100988:	73fb      	strb	r3, [r7, #15]
  if (ret != NRF_OK) { //Verifica se o comando foi enviado corretamente
 810098a:	7bfb      	ldrb	r3, [r7, #15]
 810098c:	2b00      	cmp	r3, #0
 810098e:	d001      	beq.n	8100994 <NRF_SendCommand+0x34>
    return ret;
 8100990:	7bfb      	ldrb	r3, [r7, #15]
 8100992:	e002      	b.n	810099a <NRF_SendCommand+0x3a>
  }
  csn_set(); //Desseleciona o dispositivo
 8100994:	f7ff ff70 	bl	8100878 <csn_set>

  return ret;
 8100998:	7bfb      	ldrb	r3, [r7, #15]
}
 810099a:	4618      	mov	r0, r3
 810099c:	3710      	adds	r7, #16
 810099e:	46bd      	mov	sp, r7
 81009a0:	bd80      	pop	{r7, pc}
 81009a2:	bf00      	nop
 81009a4:	10000054 	.word	0x10000054

081009a8 <NRF_SendWriteCommand>:

/* Função para enviar um comando de escrita*/
NRF_Status NRF_SendWriteCommand(uint8_t cmd, uint8_t *write, uint8_t length) {
 81009a8:	b580      	push	{r7, lr}
 81009aa:	b086      	sub	sp, #24
 81009ac:	af02      	add	r7, sp, #8
 81009ae:	4603      	mov	r3, r0
 81009b0:	6039      	str	r1, [r7, #0]
 81009b2:	71fb      	strb	r3, [r7, #7]
 81009b4:	4613      	mov	r3, r2
 81009b6:	71bb      	strb	r3, [r7, #6]
  NRF_Status ret = NRF_OK;
 81009b8:	2300      	movs	r3, #0
 81009ba:	73fb      	strb	r3, [r7, #15]
  uint8_t status;

  csn_reset(); //Seleciona o dispositivo
 81009bc:	f7ff ff6c 	bl	8100898 <csn_reset>
  ret = (NRF_Status)HAL_SPI_TransmitReceive(HSPI, &cmd, &status, 1, NRF_SPI_TIMEOUT_DUR); //Manda pro NRF o comando de escrita
 81009c0:	4b13      	ldr	r3, [pc, #76]	@ (8100a10 <NRF_SendWriteCommand+0x68>)
 81009c2:	6818      	ldr	r0, [r3, #0]
 81009c4:	f107 020e 	add.w	r2, r7, #14
 81009c8:	1df9      	adds	r1, r7, #7
 81009ca:	230a      	movs	r3, #10
 81009cc:	9300      	str	r3, [sp, #0]
 81009ce:	2301      	movs	r3, #1
 81009d0:	f001 fef0 	bl	81027b4 <HAL_SPI_TransmitReceive>
 81009d4:	4603      	mov	r3, r0
 81009d6:	73fb      	strb	r3, [r7, #15]
  if (ret != NRF_OK) { //Verifica se está ok para escrever
 81009d8:	7bfb      	ldrb	r3, [r7, #15]
 81009da:	2b00      	cmp	r3, #0
 81009dc:	d001      	beq.n	81009e2 <NRF_SendWriteCommand+0x3a>
	//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
    return ret;
 81009de:	7bfb      	ldrb	r3, [r7, #15]
 81009e0:	e011      	b.n	8100a06 <NRF_SendWriteCommand+0x5e>
  }
  ret = (NRF_Status)HAL_SPI_Transmit(HSPI, write, length, NRF_SPI_TIMEOUT_DUR); //Manda  o que será escrito no registro
 81009e2:	4b0b      	ldr	r3, [pc, #44]	@ (8100a10 <NRF_SendWriteCommand+0x68>)
 81009e4:	6818      	ldr	r0, [r3, #0]
 81009e6:	79bb      	ldrb	r3, [r7, #6]
 81009e8:	b29a      	uxth	r2, r3
 81009ea:	230a      	movs	r3, #10
 81009ec:	6839      	ldr	r1, [r7, #0]
 81009ee:	f001 fa85 	bl	8101efc <HAL_SPI_Transmit>
 81009f2:	4603      	mov	r3, r0
 81009f4:	73fb      	strb	r3, [r7, #15]
  if (ret != NRF_OK) {//Verifica se o processo foi um sucesso
 81009f6:	7bfb      	ldrb	r3, [r7, #15]
 81009f8:	2b00      	cmp	r3, #0
 81009fa:	d001      	beq.n	8100a00 <NRF_SendWriteCommand+0x58>
    return ret;
 81009fc:	7bfb      	ldrb	r3, [r7, #15]
 81009fe:	e002      	b.n	8100a06 <NRF_SendWriteCommand+0x5e>
  }
  csn_set(); //Desseleciona o dispositivo
 8100a00:	f7ff ff3a 	bl	8100878 <csn_set>

  return ret; //Retorna o Resultado
 8100a04:	7bfb      	ldrb	r3, [r7, #15]
}
 8100a06:	4618      	mov	r0, r3
 8100a08:	3710      	adds	r7, #16
 8100a0a:	46bd      	mov	sp, r7
 8100a0c:	bd80      	pop	{r7, pc}
 8100a0e:	bf00      	nop
 8100a10:	10000054 	.word	0x10000054

08100a14 <NRF_SendReadCommand>:

//Função para enviar um comando de leitura
NRF_Status NRF_SendReadCommand(uint8_t cmd, uint8_t *read, uint8_t length) {
 8100a14:	b580      	push	{r7, lr}
 8100a16:	b086      	sub	sp, #24
 8100a18:	af02      	add	r7, sp, #8
 8100a1a:	4603      	mov	r3, r0
 8100a1c:	6039      	str	r1, [r7, #0]
 8100a1e:	71fb      	strb	r3, [r7, #7]
 8100a20:	4613      	mov	r3, r2
 8100a22:	71bb      	strb	r3, [r7, #6]
  NRF_Status ret = NRF_OK;
 8100a24:	2300      	movs	r3, #0
 8100a26:	73fb      	strb	r3, [r7, #15]
  uint8_t status;

  csn_reset(); //Seleciona o dispositivo
 8100a28:	f7ff ff36 	bl	8100898 <csn_reset>
  ret = (NRF_Status)HAL_SPI_TransmitReceive(HSPI, &cmd, &status, 1, NRF_SPI_TIMEOUT_DUR);//Manda pro NRF o comando de Leitura
 8100a2c:	4b13      	ldr	r3, [pc, #76]	@ (8100a7c <NRF_SendReadCommand+0x68>)
 8100a2e:	6818      	ldr	r0, [r3, #0]
 8100a30:	f107 020e 	add.w	r2, r7, #14
 8100a34:	1df9      	adds	r1, r7, #7
 8100a36:	230a      	movs	r3, #10
 8100a38:	9300      	str	r3, [sp, #0]
 8100a3a:	2301      	movs	r3, #1
 8100a3c:	f001 feba 	bl	81027b4 <HAL_SPI_TransmitReceive>
 8100a40:	4603      	mov	r3, r0
 8100a42:	73fb      	strb	r3, [r7, #15]
  if(ret != NRF_OK) { //Verifica se o processo foi um sucesso
 8100a44:	7bfb      	ldrb	r3, [r7, #15]
 8100a46:	2b00      	cmp	r3, #0
 8100a48:	d001      	beq.n	8100a4e <NRF_SendReadCommand+0x3a>
    return ret;
 8100a4a:	7bfb      	ldrb	r3, [r7, #15]
 8100a4c:	e011      	b.n	8100a72 <NRF_SendReadCommand+0x5e>
  }
  ret = (NRF_Status)HAL_SPI_Receive(HSPI, read, length, NRF_SPI_TIMEOUT_DUR);//Recebe o que se deseja ler do NRF
 8100a4e:	4b0b      	ldr	r3, [pc, #44]	@ (8100a7c <NRF_SendReadCommand+0x68>)
 8100a50:	6818      	ldr	r0, [r3, #0]
 8100a52:	79bb      	ldrb	r3, [r7, #6]
 8100a54:	b29a      	uxth	r2, r3
 8100a56:	230a      	movs	r3, #10
 8100a58:	6839      	ldr	r1, [r7, #0]
 8100a5a:	f001 fc3a 	bl	81022d2 <HAL_SPI_Receive>
 8100a5e:	4603      	mov	r3, r0
 8100a60:	73fb      	strb	r3, [r7, #15]
  if(ret != NRF_OK) {
 8100a62:	7bfb      	ldrb	r3, [r7, #15]
 8100a64:	2b00      	cmp	r3, #0
 8100a66:	d001      	beq.n	8100a6c <NRF_SendReadCommand+0x58>
    return ret;
 8100a68:	7bfb      	ldrb	r3, [r7, #15]
 8100a6a:	e002      	b.n	8100a72 <NRF_SendReadCommand+0x5e>
  }
  csn_set();//Desseleciona o dispositvo
 8100a6c:	f7ff ff04 	bl	8100878 <csn_set>

  return ret;//Retorna o resultado
 8100a70:	7bfb      	ldrb	r3, [r7, #15]
}
 8100a72:	4618      	mov	r0, r3
 8100a74:	3710      	adds	r7, #16
 8100a76:	46bd      	mov	sp, r7
 8100a78:	bd80      	pop	{r7, pc}
 8100a7a:	bf00      	nop
 8100a7c:	10000054 	.word	0x10000054

08100a80 <NRF_WriteRegister>:
/* Escreve no Registro do NRF
 * Param - Registro a ser escrito
 * Param - O que será escrito
 * Param - O tamanho (em bytes)
 *  							*/
NRF_Status NRF_WriteRegister(uint8_t reg, uint8_t *write, uint8_t length) {
 8100a80:	b580      	push	{r7, lr}
 8100a82:	b082      	sub	sp, #8
 8100a84:	af00      	add	r7, sp, #0
 8100a86:	4603      	mov	r3, r0
 8100a88:	6039      	str	r1, [r7, #0]
 8100a8a:	71fb      	strb	r3, [r7, #7]
 8100a8c:	4613      	mov	r3, r2
 8100a8e:	71bb      	strb	r3, [r7, #6]
  return NRF_SendWriteCommand(NRF_CMD_W_REGISTER | reg, write, length);
 8100a90:	79fb      	ldrb	r3, [r7, #7]
 8100a92:	f043 0320 	orr.w	r3, r3, #32
 8100a96:	b2db      	uxtb	r3, r3
 8100a98:	79ba      	ldrb	r2, [r7, #6]
 8100a9a:	6839      	ldr	r1, [r7, #0]
 8100a9c:	4618      	mov	r0, r3
 8100a9e:	f7ff ff83 	bl	81009a8 <NRF_SendWriteCommand>
 8100aa2:	4603      	mov	r3, r0
}
 8100aa4:	4618      	mov	r0, r3
 8100aa6:	3708      	adds	r7, #8
 8100aa8:	46bd      	mov	sp, r7
 8100aaa:	bd80      	pop	{r7, pc}

08100aac <NRF_WriteRegisterByte>:

/* Escreve em um byte da Memória do NRF
 * Param - Registro a ser escrito
 * Param - O que será escrito
 *  							*/
NRF_Status NRF_WriteRegisterByte(uint8_t reg, uint8_t byte) {
 8100aac:	b580      	push	{r7, lr}
 8100aae:	b084      	sub	sp, #16
 8100ab0:	af00      	add	r7, sp, #0
 8100ab2:	4603      	mov	r3, r0
 8100ab4:	460a      	mov	r2, r1
 8100ab6:	71fb      	strb	r3, [r7, #7]
 8100ab8:	4613      	mov	r3, r2
 8100aba:	71bb      	strb	r3, [r7, #6]
  uint8_t write = byte;
 8100abc:	79bb      	ldrb	r3, [r7, #6]
 8100abe:	73fb      	strb	r3, [r7, #15]
  return NRF_WriteRegister(reg, &write, 1);
 8100ac0:	f107 010f 	add.w	r1, r7, #15
 8100ac4:	79fb      	ldrb	r3, [r7, #7]
 8100ac6:	2201      	movs	r2, #1
 8100ac8:	4618      	mov	r0, r3
 8100aca:	f7ff ffd9 	bl	8100a80 <NRF_WriteRegister>
 8100ace:	4603      	mov	r3, r0
}
 8100ad0:	4618      	mov	r0, r3
 8100ad2:	3710      	adds	r7, #16
 8100ad4:	46bd      	mov	sp, r7
 8100ad6:	bd80      	pop	{r7, pc}

08100ad8 <NRF_ReadRegister>:
/* Lê no Registro do NRF
 * Param - Registro a ser lido
 * Param - Ponteiro para variável onde será salvo
 * Param - O tamanho (em bytes)
 *  							*/
NRF_Status NRF_ReadRegister(uint8_t reg, uint8_t *read, uint8_t length) {
 8100ad8:	b580      	push	{r7, lr}
 8100ada:	b082      	sub	sp, #8
 8100adc:	af00      	add	r7, sp, #0
 8100ade:	4603      	mov	r3, r0
 8100ae0:	6039      	str	r1, [r7, #0]
 8100ae2:	71fb      	strb	r3, [r7, #7]
 8100ae4:	4613      	mov	r3, r2
 8100ae6:	71bb      	strb	r3, [r7, #6]
  return NRF_SendReadCommand(NRF_CMD_R_REGISTER | reg, read, length);
 8100ae8:	79ba      	ldrb	r2, [r7, #6]
 8100aea:	79fb      	ldrb	r3, [r7, #7]
 8100aec:	6839      	ldr	r1, [r7, #0]
 8100aee:	4618      	mov	r0, r3
 8100af0:	f7ff ff90 	bl	8100a14 <NRF_SendReadCommand>
 8100af4:	4603      	mov	r3, r0
}
 8100af6:	4618      	mov	r0, r3
 8100af8:	3708      	adds	r7, #8
 8100afa:	46bd      	mov	sp, r7
 8100afc:	bd80      	pop	{r7, pc}
	...

08100b00 <NRF_ReadStatus>:
  NRF_SendReadCommand(NRF_CMD_R_REGISTER | reg, &read, 1);
  return read;
}

//Lê o Status do NRF
uint8_t NRF_ReadStatus() {
 8100b00:	b580      	push	{r7, lr}
 8100b02:	b084      	sub	sp, #16
 8100b04:	af02      	add	r7, sp, #8
  uint8_t status = 0x00;
 8100b06:	2300      	movs	r3, #0
 8100b08:	71fb      	strb	r3, [r7, #7]
  uint8_t cmd = NRF_CMD_NOP;
 8100b0a:	23ff      	movs	r3, #255	@ 0xff
 8100b0c:	71bb      	strb	r3, [r7, #6]

  csn_reset();
 8100b0e:	f7ff fec3 	bl	8100898 <csn_reset>
  HAL_SPI_TransmitReceive(HSPI, &cmd, &status, 1, NRF_SPI_TIMEOUT_DUR);
 8100b12:	4b08      	ldr	r3, [pc, #32]	@ (8100b34 <NRF_ReadStatus+0x34>)
 8100b14:	6818      	ldr	r0, [r3, #0]
 8100b16:	1dfa      	adds	r2, r7, #7
 8100b18:	1db9      	adds	r1, r7, #6
 8100b1a:	230a      	movs	r3, #10
 8100b1c:	9300      	str	r3, [sp, #0]
 8100b1e:	2301      	movs	r3, #1
 8100b20:	f001 fe48 	bl	81027b4 <HAL_SPI_TransmitReceive>
  csn_set();
 8100b24:	f7ff fea8 	bl	8100878 <csn_set>

  return status;
 8100b28:	79fb      	ldrb	r3, [r7, #7]
}
 8100b2a:	4618      	mov	r0, r3
 8100b2c:	3708      	adds	r7, #8
 8100b2e:	46bd      	mov	sp, r7
 8100b30:	bd80      	pop	{r7, pc}
 8100b32:	bf00      	nop
 8100b34:	10000054 	.word	0x10000054

08100b38 <NRF_SetRegisterBit>:

/* Seta um Bit específico de um Registro para 1
 * Param - Registro a ser escrito
 * Param - Qual bit será alterado para 1
 *  											*/
NRF_Status NRF_SetRegisterBit(uint8_t reg, uint8_t bit) {
 8100b38:	b580      	push	{r7, lr}
 8100b3a:	b084      	sub	sp, #16
 8100b3c:	af00      	add	r7, sp, #0
 8100b3e:	4603      	mov	r3, r0
 8100b40:	460a      	mov	r2, r1
 8100b42:	71fb      	strb	r3, [r7, #7]
 8100b44:	4613      	mov	r3, r2
 8100b46:	71bb      	strb	r3, [r7, #6]
  NRF_Status ret = NRF_OK;
 8100b48:	2300      	movs	r3, #0
 8100b4a:	73fb      	strb	r3, [r7, #15]
  uint8_t cfg = 0x00;
 8100b4c:	2300      	movs	r3, #0
 8100b4e:	73bb      	strb	r3, [r7, #14]

  ret = NRF_ReadRegister(reg, &cfg, 1); //Pega a informação do byte do registro
 8100b50:	f107 010e 	add.w	r1, r7, #14
 8100b54:	79fb      	ldrb	r3, [r7, #7]
 8100b56:	2201      	movs	r2, #1
 8100b58:	4618      	mov	r0, r3
 8100b5a:	f7ff ffbd 	bl	8100ad8 <NRF_ReadRegister>
 8100b5e:	4603      	mov	r3, r0
 8100b60:	73fb      	strb	r3, [r7, #15]
  if (ret != NRF_OK) {
 8100b62:	7bfb      	ldrb	r3, [r7, #15]
 8100b64:	2b00      	cmp	r3, #0
 8100b66:	d001      	beq.n	8100b6c <NRF_SetRegisterBit+0x34>
    return ret;
 8100b68:	7bfb      	ldrb	r3, [r7, #15]
 8100b6a:	e012      	b.n	8100b92 <NRF_SetRegisterBit+0x5a>
  }

  cfg = cfg | (1 << bit); //Altera o bit por meio de um OU binário
 8100b6c:	79bb      	ldrb	r3, [r7, #6]
 8100b6e:	2201      	movs	r2, #1
 8100b70:	fa02 f303 	lsl.w	r3, r2, r3
 8100b74:	b25a      	sxtb	r2, r3
 8100b76:	7bbb      	ldrb	r3, [r7, #14]
 8100b78:	b25b      	sxtb	r3, r3
 8100b7a:	4313      	orrs	r3, r2
 8100b7c:	b25b      	sxtb	r3, r3
 8100b7e:	b2db      	uxtb	r3, r3
 8100b80:	73bb      	strb	r3, [r7, #14]
  return NRF_WriteRegister(reg, &cfg, 1); //Escreve o registro de volta
 8100b82:	f107 010e 	add.w	r1, r7, #14
 8100b86:	79fb      	ldrb	r3, [r7, #7]
 8100b88:	2201      	movs	r2, #1
 8100b8a:	4618      	mov	r0, r3
 8100b8c:	f7ff ff78 	bl	8100a80 <NRF_WriteRegister>
 8100b90:	4603      	mov	r3, r0
}
 8100b92:	4618      	mov	r0, r3
 8100b94:	3710      	adds	r7, #16
 8100b96:	46bd      	mov	sp, r7
 8100b98:	bd80      	pop	{r7, pc}

08100b9a <NRF_ResetRegisterBit>:

/* Seta um Bit específico de um Registro para 0
 * Param - Registro a ser escrito
 * Param - Qual bit será alterado para 1
 *  											*/
NRF_Status NRF_ResetRegisterBit(uint8_t reg, uint8_t bit) {
 8100b9a:	b580      	push	{r7, lr}
 8100b9c:	b084      	sub	sp, #16
 8100b9e:	af00      	add	r7, sp, #0
 8100ba0:	4603      	mov	r3, r0
 8100ba2:	460a      	mov	r2, r1
 8100ba4:	71fb      	strb	r3, [r7, #7]
 8100ba6:	4613      	mov	r3, r2
 8100ba8:	71bb      	strb	r3, [r7, #6]
  NRF_Status ret = NRF_OK;
 8100baa:	2300      	movs	r3, #0
 8100bac:	73fb      	strb	r3, [r7, #15]
  uint8_t cfg = 0x00;
 8100bae:	2300      	movs	r3, #0
 8100bb0:	73bb      	strb	r3, [r7, #14]

  ret = NRF_ReadRegister(reg, &cfg, 1);//Pega a informação do byte do registro
 8100bb2:	f107 010e 	add.w	r1, r7, #14
 8100bb6:	79fb      	ldrb	r3, [r7, #7]
 8100bb8:	2201      	movs	r2, #1
 8100bba:	4618      	mov	r0, r3
 8100bbc:	f7ff ff8c 	bl	8100ad8 <NRF_ReadRegister>
 8100bc0:	4603      	mov	r3, r0
 8100bc2:	73fb      	strb	r3, [r7, #15]
  if (ret != NRF_OK) {
 8100bc4:	7bfb      	ldrb	r3, [r7, #15]
 8100bc6:	2b00      	cmp	r3, #0
 8100bc8:	d001      	beq.n	8100bce <NRF_ResetRegisterBit+0x34>
    return ret;
 8100bca:	7bfb      	ldrb	r3, [r7, #15]
 8100bcc:	e014      	b.n	8100bf8 <NRF_ResetRegisterBit+0x5e>
  }

  cfg = cfg & ~(1 << bit);//Altera o bit por meio de um E binário
 8100bce:	79bb      	ldrb	r3, [r7, #6]
 8100bd0:	2201      	movs	r2, #1
 8100bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8100bd6:	b25b      	sxtb	r3, r3
 8100bd8:	43db      	mvns	r3, r3
 8100bda:	b25a      	sxtb	r2, r3
 8100bdc:	7bbb      	ldrb	r3, [r7, #14]
 8100bde:	b25b      	sxtb	r3, r3
 8100be0:	4013      	ands	r3, r2
 8100be2:	b25b      	sxtb	r3, r3
 8100be4:	b2db      	uxtb	r3, r3
 8100be6:	73bb      	strb	r3, [r7, #14]
  return NRF_WriteRegister(reg, &cfg, 1);//Escreve o registro de volta
 8100be8:	f107 010e 	add.w	r1, r7, #14
 8100bec:	79fb      	ldrb	r3, [r7, #7]
 8100bee:	2201      	movs	r2, #1
 8100bf0:	4618      	mov	r0, r3
 8100bf2:	f7ff ff45 	bl	8100a80 <NRF_WriteRegister>
 8100bf6:	4603      	mov	r3, r0
}
 8100bf8:	4618      	mov	r0, r3
 8100bfa:	3710      	adds	r7, #16
 8100bfc:	46bd      	mov	sp, r7
 8100bfe:	bd80      	pop	{r7, pc}

08100c00 <NRF_EnterMode>:
 * NRF_MODE_STANDBY1 - Standby
 * NRF_MODE_RX - Modo de Recepção
 * NRF_MODE_Tx - Modo de Transmissão
 * Retorno: Status
 *  								*/
NRF_Status NRF_EnterMode(uint8_t mode) {
 8100c00:	b580      	push	{r7, lr}
 8100c02:	b084      	sub	sp, #16
 8100c04:	af00      	add	r7, sp, #0
 8100c06:	4603      	mov	r3, r0
 8100c08:	71fb      	strb	r3, [r7, #7]
  NRF_Status ret = NRF_OK;
 8100c0a:	2300      	movs	r3, #0
 8100c0c:	73fb      	strb	r3, [r7, #15]

  switch(mode) {
 8100c0e:	79fb      	ldrb	r3, [r7, #7]
 8100c10:	2b03      	cmp	r3, #3
 8100c12:	d859      	bhi.n	8100cc8 <NRF_EnterMode+0xc8>
 8100c14:	a201      	add	r2, pc, #4	@ (adr r2, 8100c1c <NRF_EnterMode+0x1c>)
 8100c16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8100c1a:	bf00      	nop
 8100c1c:	08100c2d 	.word	0x08100c2d
 8100c20:	08100c43 	.word	0x08100c43
 8100c24:	08100c8d 	.word	0x08100c8d
 8100c28:	08100cab 	.word	0x08100cab
    case NRF_MODE_POWERDOWN:
      csn_set();
 8100c2c:	f7ff fe24 	bl	8100878 <csn_set>
      ce_reset();
 8100c30:	f7ff fe52 	bl	81008d8 <ce_reset>
      ret = NRF_ResetRegisterBit(NRF_REG_CONFIG, CFG_BIT_PWR_UP); //Seta o bit de Power up em 0
 8100c34:	2101      	movs	r1, #1
 8100c36:	2000      	movs	r0, #0
 8100c38:	f7ff ffaf 	bl	8100b9a <NRF_ResetRegisterBit>
 8100c3c:	4603      	mov	r3, r0
 8100c3e:	73fb      	strb	r3, [r7, #15]
      break;
 8100c40:	e046      	b.n	8100cd0 <NRF_EnterMode+0xd0>
    case NRF_MODE_STANDBY1:
      if (current_mode == NRF_MODE_POWERDOWN) {
 8100c42:	4b29      	ldr	r3, [pc, #164]	@ (8100ce8 <NRF_EnterMode+0xe8>)
 8100c44:	681b      	ldr	r3, [r3, #0]
 8100c46:	2b00      	cmp	r3, #0
 8100c48:	d10c      	bne.n	8100c64 <NRF_EnterMode+0x64>
        ret = NRF_SetRegisterBit(NRF_REG_CONFIG, CFG_BIT_PWR_UP); //Seta o bit de Power up em 1
 8100c4a:	2101      	movs	r1, #1
 8100c4c:	2000      	movs	r0, #0
 8100c4e:	f7ff ff73 	bl	8100b38 <NRF_SetRegisterBit>
 8100c52:	4603      	mov	r3, r0
 8100c54:	73fb      	strb	r3, [r7, #15]
        wait(1500);
 8100c56:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8100c5a:	f04f 0100 	mov.w	r1, #0
 8100c5e:	f7ff fe4b 	bl	81008f8 <wait>
        ret = NRF_ResetRegisterBit(NRF_REG_CONFIG, CFG_BIT_PRIM_RX);
        ce_reset();
      } else if (current_mode == NRF_MODE_TX) {
        ce_reset();
      }
      break;
 8100c62:	e034      	b.n	8100cce <NRF_EnterMode+0xce>
      } else if (current_mode == NRF_MODE_RX) {
 8100c64:	4b20      	ldr	r3, [pc, #128]	@ (8100ce8 <NRF_EnterMode+0xe8>)
 8100c66:	681b      	ldr	r3, [r3, #0]
 8100c68:	2b02      	cmp	r3, #2
 8100c6a:	d108      	bne.n	8100c7e <NRF_EnterMode+0x7e>
        ret = NRF_ResetRegisterBit(NRF_REG_CONFIG, CFG_BIT_PRIM_RX);
 8100c6c:	2100      	movs	r1, #0
 8100c6e:	2000      	movs	r0, #0
 8100c70:	f7ff ff93 	bl	8100b9a <NRF_ResetRegisterBit>
 8100c74:	4603      	mov	r3, r0
 8100c76:	73fb      	strb	r3, [r7, #15]
        ce_reset();
 8100c78:	f7ff fe2e 	bl	81008d8 <ce_reset>
      break;
 8100c7c:	e027      	b.n	8100cce <NRF_EnterMode+0xce>
      } else if (current_mode == NRF_MODE_TX) {
 8100c7e:	4b1a      	ldr	r3, [pc, #104]	@ (8100ce8 <NRF_EnterMode+0xe8>)
 8100c80:	681b      	ldr	r3, [r3, #0]
 8100c82:	2b03      	cmp	r3, #3
 8100c84:	d123      	bne.n	8100cce <NRF_EnterMode+0xce>
        ce_reset();
 8100c86:	f7ff fe27 	bl	81008d8 <ce_reset>
      break;
 8100c8a:	e020      	b.n	8100cce <NRF_EnterMode+0xce>
    case NRF_MODE_RX:
      if (current_mode != NRF_MODE_STANDBY1) { //O dispositivo deve estar em standby para passar para o modo Rx
 8100c8c:	4b16      	ldr	r3, [pc, #88]	@ (8100ce8 <NRF_EnterMode+0xe8>)
 8100c8e:	681b      	ldr	r3, [r3, #0]
 8100c90:	2b01      	cmp	r3, #1
 8100c92:	d001      	beq.n	8100c98 <NRF_EnterMode+0x98>
        return NRF_BAD_TRANSITION;
 8100c94:	2306      	movs	r3, #6
 8100c96:	e022      	b.n	8100cde <NRF_EnterMode+0xde>
      }
      ret = NRF_SetRegisterBit(NRF_REG_CONFIG, CFG_BIT_PRIM_RX); // 1 = Rx
 8100c98:	2100      	movs	r1, #0
 8100c9a:	2000      	movs	r0, #0
 8100c9c:	f7ff ff4c 	bl	8100b38 <NRF_SetRegisterBit>
 8100ca0:	4603      	mov	r3, r0
 8100ca2:	73fb      	strb	r3, [r7, #15]
      ce_set();
 8100ca4:	f7ff fe08 	bl	81008b8 <ce_set>
      break;
 8100ca8:	e012      	b.n	8100cd0 <NRF_EnterMode+0xd0>
    case NRF_MODE_TX:
      if (current_mode != NRF_MODE_STANDBY1) {
 8100caa:	4b0f      	ldr	r3, [pc, #60]	@ (8100ce8 <NRF_EnterMode+0xe8>)
 8100cac:	681b      	ldr	r3, [r3, #0]
 8100cae:	2b01      	cmp	r3, #1
 8100cb0:	d001      	beq.n	8100cb6 <NRF_EnterMode+0xb6>
        return NRF_BAD_TRANSITION;
 8100cb2:	2306      	movs	r3, #6
 8100cb4:	e013      	b.n	8100cde <NRF_EnterMode+0xde>
      }
      ret = NRF_ResetRegisterBit(NRF_REG_CONFIG, CFG_BIT_PRIM_RX); // 0 = Tx
 8100cb6:	2100      	movs	r1, #0
 8100cb8:	2000      	movs	r0, #0
 8100cba:	f7ff ff6e 	bl	8100b9a <NRF_ResetRegisterBit>
 8100cbe:	4603      	mov	r3, r0
 8100cc0:	73fb      	strb	r3, [r7, #15]
      ce_set();
 8100cc2:	f7ff fdf9 	bl	81008b8 <ce_set>
      break;
 8100cc6:	e003      	b.n	8100cd0 <NRF_EnterMode+0xd0>
    default:
      ret = NRF_ERROR;
 8100cc8:	2304      	movs	r3, #4
 8100cca:	73fb      	strb	r3, [r7, #15]
      break;
 8100ccc:	e000      	b.n	8100cd0 <NRF_EnterMode+0xd0>
      break;
 8100cce:	bf00      	nop
  }

  if (ret == NRF_OK) {
 8100cd0:	7bfb      	ldrb	r3, [r7, #15]
 8100cd2:	2b00      	cmp	r3, #0
 8100cd4:	d102      	bne.n	8100cdc <NRF_EnterMode+0xdc>
    current_mode = mode;
 8100cd6:	79fb      	ldrb	r3, [r7, #7]
 8100cd8:	4a03      	ldr	r2, [pc, #12]	@ (8100ce8 <NRF_EnterMode+0xe8>)
 8100cda:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8100cdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8100cde:	4618      	mov	r0, r3
 8100ce0:	3710      	adds	r7, #16
 8100ce2:	46bd      	mov	sp, r7
 8100ce4:	bd80      	pop	{r7, pc}
 8100ce6:	bf00      	nop
 8100ce8:	1000006c 	.word	0x1000006c

08100cec <NRF_Init>:
 * Param - Pino Chip Select
 * Param - Porta Chip Enable
 * Param - Pino Chip Enable
 * Retorno: Status
 *  								*/
NRF_Status NRF_Init(SPI_HandleTypeDef *handle, GPIO_TypeDef *PortCSN, uint16_t PinCSN, GPIO_TypeDef *PortCE, uint16_t PinCE) {
 8100cec:	b580      	push	{r7, lr}
 8100cee:	b084      	sub	sp, #16
 8100cf0:	af00      	add	r7, sp, #0
 8100cf2:	60f8      	str	r0, [r7, #12]
 8100cf4:	60b9      	str	r1, [r7, #8]
 8100cf6:	603b      	str	r3, [r7, #0]
 8100cf8:	4613      	mov	r3, r2
 8100cfa:	80fb      	strh	r3, [r7, #6]
  HSPI = handle;
 8100cfc:	4a13      	ldr	r2, [pc, #76]	@ (8100d4c <NRF_Init+0x60>)
 8100cfe:	68fb      	ldr	r3, [r7, #12]
 8100d00:	6013      	str	r3, [r2, #0]
  NRF_CSN_Port = PortCSN;
 8100d02:	4a13      	ldr	r2, [pc, #76]	@ (8100d50 <NRF_Init+0x64>)
 8100d04:	68bb      	ldr	r3, [r7, #8]
 8100d06:	6013      	str	r3, [r2, #0]
  NRF_CSN_Pin = PinCSN;
 8100d08:	4a12      	ldr	r2, [pc, #72]	@ (8100d54 <NRF_Init+0x68>)
 8100d0a:	88fb      	ldrh	r3, [r7, #6]
 8100d0c:	8013      	strh	r3, [r2, #0]
  NRF_CE_Port = PortCE;
 8100d0e:	4a12      	ldr	r2, [pc, #72]	@ (8100d58 <NRF_Init+0x6c>)
 8100d10:	683b      	ldr	r3, [r7, #0]
 8100d12:	6013      	str	r3, [r2, #0]
  NRF_CE_Pin = PinCE;
 8100d14:	4a11      	ldr	r2, [pc, #68]	@ (8100d5c <NRF_Init+0x70>)
 8100d16:	8b3b      	ldrh	r3, [r7, #24]
 8100d18:	8013      	strh	r3, [r2, #0]

  CPU_Freq = HAL_RCC_GetSysClockFreq();
 8100d1a:	f000 fe51 	bl	81019c0 <HAL_RCC_GetSysClockFreq>
 8100d1e:	4603      	mov	r3, r0
 8100d20:	4a0f      	ldr	r2, [pc, #60]	@ (8100d60 <NRF_Init+0x74>)
 8100d22:	6013      	str	r3, [r2, #0]
  if (CPU_Freq == 0x00) {
 8100d24:	4b0e      	ldr	r3, [pc, #56]	@ (8100d60 <NRF_Init+0x74>)
 8100d26:	681b      	ldr	r3, [r3, #0]
 8100d28:	2b00      	cmp	r3, #0
 8100d2a:	d101      	bne.n	8100d30 <NRF_Init+0x44>
    return NRF_ERROR;
 8100d2c:	2304      	movs	r3, #4
 8100d2e:	e008      	b.n	8100d42 <NRF_Init+0x56>
  }

  // Make sure CSN is pulled high
  csn_set();
 8100d30:	f7ff fda2 	bl	8100878 <csn_set>

  // Takes ~100ms from power on to start up
  HAL_Delay(100);
 8100d34:	2064      	movs	r0, #100	@ 0x64
 8100d36:	f000 faa9 	bl	810128c <HAL_Delay>

  return NRF_EnterMode(NRF_MODE_STANDBY1);
 8100d3a:	2001      	movs	r0, #1
 8100d3c:	f7ff ff60 	bl	8100c00 <NRF_EnterMode>
 8100d40:	4603      	mov	r3, r0
}
 8100d42:	4618      	mov	r0, r3
 8100d44:	3710      	adds	r7, #16
 8100d46:	46bd      	mov	sp, r7
 8100d48:	bd80      	pop	{r7, pc}
 8100d4a:	bf00      	nop
 8100d4c:	10000054 	.word	0x10000054
 8100d50:	10000058 	.word	0x10000058
 8100d54:	1000005c 	.word	0x1000005c
 8100d58:	10000060 	.word	0x10000060
 8100d5c:	10000064 	.word	0x10000064
 8100d60:	10000068 	.word	0x10000068

08100d64 <NRF_Reset>:


//Reseta o NRF  o mantendo em stanby
void NRF_Reset() {
 8100d64:	b580      	push	{r7, lr}
 8100d66:	b084      	sub	sp, #16
 8100d68:	af00      	add	r7, sp, #0
  NRF_EnterMode(NRF_MODE_POWERDOWN);
 8100d6a:	2000      	movs	r0, #0
 8100d6c:	f7ff ff48 	bl	8100c00 <NRF_EnterMode>
  NRF_EnterMode(NRF_MODE_STANDBY1);
 8100d70:	2001      	movs	r0, #1
 8100d72:	f7ff ff45 	bl	8100c00 <NRF_EnterMode>

  // Flush FIFOs
  NRF_EnterMode(NRF_MODE_TX);
 8100d76:	2003      	movs	r0, #3
 8100d78:	f7ff ff42 	bl	8100c00 <NRF_EnterMode>
  NRF_SendCommand(NRF_CMD_FLUSH_TX);
 8100d7c:	20e1      	movs	r0, #225	@ 0xe1
 8100d7e:	f7ff fdef 	bl	8100960 <NRF_SendCommand>
  NRF_EnterMode(NRF_MODE_STANDBY1);
 8100d82:	2001      	movs	r0, #1
 8100d84:	f7ff ff3c 	bl	8100c00 <NRF_EnterMode>
  NRF_EnterMode(NRF_MODE_RX);
 8100d88:	2002      	movs	r0, #2
 8100d8a:	f7ff ff39 	bl	8100c00 <NRF_EnterMode>
  NRF_SendCommand(NRF_CMD_FLUSH_RX);
 8100d8e:	20e2      	movs	r0, #226	@ 0xe2
 8100d90:	f7ff fde6 	bl	8100960 <NRF_SendCommand>
  NRF_EnterMode(NRF_MODE_STANDBY1);
 8100d94:	2001      	movs	r0, #1
 8100d96:	f7ff ff33 	bl	8100c00 <NRF_EnterMode>

  // Flush register -> LER DATASHEET!!!!!!!!!!!!!!
  NRF_WriteRegisterByte(NRF_REG_CONFIG,       0x0A);// 00001010
 8100d9a:	210a      	movs	r1, #10
 8100d9c:	2000      	movs	r0, #0
 8100d9e:	f7ff fe85 	bl	8100aac <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_EN_AA,        0x00);// 00000000 = AutoAcknologment desligado em todos os Pipes
 8100da2:	2100      	movs	r1, #0
 8100da4:	2001      	movs	r0, #1
 8100da6:	f7ff fe81 	bl	8100aac <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_EN_RXADDR,    0x03);//00000011 -> Pipes 0 e 1 no Rx
 8100daa:	2103      	movs	r1, #3
 8100dac:	2002      	movs	r0, #2
 8100dae:	f7ff fe7d 	bl	8100aac <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_SETUP_AW,     0x03);//00000011 -> 5 bytes no adresss
 8100db2:	2103      	movs	r1, #3
 8100db4:	2003      	movs	r0, #3
 8100db6:	f7ff fe79 	bl	8100aac <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_SETUP_RETR,   0x03);//00000000 -> re-transmit desabilitado
 8100dba:	2103      	movs	r1, #3
 8100dbc:	2004      	movs	r0, #4
 8100dbe:	f7ff fe75 	bl	8100aac <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_RF_CH,        0x02);//00000010 -> Canal 3
 8100dc2:	2102      	movs	r1, #2
 8100dc4:	2005      	movs	r0, #5
 8100dc6:	f7ff fe71 	bl	8100aac <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_RF_SETUP,     0x0e);//00001110 -> LNA desligado, 0dBm, 2MBs
 8100dca:	210e      	movs	r1, #14
 8100dcc:	2006      	movs	r0, #6
 8100dce:	f7ff fe6d 	bl	8100aac <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_STATUS,       0x70); // clear flags
 8100dd2:	2170      	movs	r1, #112	@ 0x70
 8100dd4:	2007      	movs	r0, #7
 8100dd6:	f7ff fe69 	bl	8100aac <NRF_WriteRegisterByte>

  uint8_t address[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 8100dda:	4a2d      	ldr	r2, [pc, #180]	@ (8100e90 <NRF_Reset+0x12c>)
 8100ddc:	f107 0308 	add.w	r3, r7, #8
 8100de0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8100de4:	6018      	str	r0, [r3, #0]
 8100de6:	3304      	adds	r3, #4
 8100de8:	7019      	strb	r1, [r3, #0]
  uint8_t address2[5] = {0xC2, 0xC2, 0xC2, 0xC2, 0xC2};
 8100dea:	4a2a      	ldr	r2, [pc, #168]	@ (8100e94 <NRF_Reset+0x130>)
 8100dec:	463b      	mov	r3, r7
 8100dee:	e892 0003 	ldmia.w	r2, {r0, r1}
 8100df2:	6018      	str	r0, [r3, #0]
 8100df4:	3304      	adds	r3, #4
 8100df6:	7019      	strb	r1, [r3, #0]
  NRF_WriteRegister(NRF_REG_RX_ADDR_P0, address, 5); //Adress do pipe 0
 8100df8:	f107 0308 	add.w	r3, r7, #8
 8100dfc:	2205      	movs	r2, #5
 8100dfe:	4619      	mov	r1, r3
 8100e00:	200a      	movs	r0, #10
 8100e02:	f7ff fe3d 	bl	8100a80 <NRF_WriteRegister>
  NRF_WriteRegister(NRF_REG_RX_ADDR_P1, address2, 5); //Adress pipe 1
 8100e06:	463b      	mov	r3, r7
 8100e08:	2205      	movs	r2, #5
 8100e0a:	4619      	mov	r1, r3
 8100e0c:	200b      	movs	r0, #11
 8100e0e:	f7ff fe37 	bl	8100a80 <NRF_WriteRegister>
  NRF_WriteRegisterByte(NRF_REG_RX_ADDR_P2,   0xC3);
 8100e12:	21c3      	movs	r1, #195	@ 0xc3
 8100e14:	200c      	movs	r0, #12
 8100e16:	f7ff fe49 	bl	8100aac <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_RX_ADDR_P3,   0xC4);
 8100e1a:	21c4      	movs	r1, #196	@ 0xc4
 8100e1c:	200d      	movs	r0, #13
 8100e1e:	f7ff fe45 	bl	8100aac <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_RX_ADDR_P4,   0xC5);
 8100e22:	21c5      	movs	r1, #197	@ 0xc5
 8100e24:	200e      	movs	r0, #14
 8100e26:	f7ff fe41 	bl	8100aac <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_RX_ADDR_P5,   0xC6);
 8100e2a:	21c6      	movs	r1, #198	@ 0xc6
 8100e2c:	200f      	movs	r0, #15
 8100e2e:	f7ff fe3d 	bl	8100aac <NRF_WriteRegisterByte>
  NRF_WriteRegister(NRF_REG_TX_ADDR, address, 5);
 8100e32:	f107 0308 	add.w	r3, r7, #8
 8100e36:	2205      	movs	r2, #5
 8100e38:	4619      	mov	r1, r3
 8100e3a:	2010      	movs	r0, #16
 8100e3c:	f7ff fe20 	bl	8100a80 <NRF_WriteRegister>
  NRF_WriteRegisterByte(NRF_REG_RX_PW_P0,     0x00);
 8100e40:	2100      	movs	r1, #0
 8100e42:	2011      	movs	r0, #17
 8100e44:	f7ff fe32 	bl	8100aac <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_RX_PW_P1,     0x00);
 8100e48:	2100      	movs	r1, #0
 8100e4a:	2012      	movs	r0, #18
 8100e4c:	f7ff fe2e 	bl	8100aac <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_RX_PW_P2,     0x00);
 8100e50:	2100      	movs	r1, #0
 8100e52:	2013      	movs	r0, #19
 8100e54:	f7ff fe2a 	bl	8100aac <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_RX_PW_P3,     0x00);
 8100e58:	2100      	movs	r1, #0
 8100e5a:	2014      	movs	r0, #20
 8100e5c:	f7ff fe26 	bl	8100aac <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_RX_PW_P4,     0x00);
 8100e60:	2100      	movs	r1, #0
 8100e62:	2015      	movs	r0, #21
 8100e64:	f7ff fe22 	bl	8100aac <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_RX_PW_P5,     0x00);
 8100e68:	2100      	movs	r1, #0
 8100e6a:	2016      	movs	r0, #22
 8100e6c:	f7ff fe1e 	bl	8100aac <NRF_WriteRegisterByte>

  NRF_WriteRegisterByte(NRF_REG_FIFO_STATUS,  0x00);
 8100e70:	2100      	movs	r1, #0
 8100e72:	2017      	movs	r0, #23
 8100e74:	f7ff fe1a 	bl	8100aac <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_DYNPD,        0x00);
 8100e78:	2100      	movs	r1, #0
 8100e7a:	201c      	movs	r0, #28
 8100e7c:	f7ff fe16 	bl	8100aac <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_FEATURE,      0x00);
 8100e80:	2100      	movs	r1, #0
 8100e82:	201d      	movs	r0, #29
 8100e84:	f7ff fe12 	bl	8100aac <NRF_WriteRegisterByte>
}
 8100e88:	bf00      	nop
 8100e8a:	3710      	adds	r7, #16
 8100e8c:	46bd      	mov	sp, r7
 8100e8e:	bd80      	pop	{r7, pc}
 8100e90:	08103058 	.word	0x08103058
 8100e94:	08103060 	.word	0x08103060

08100e98 <NRF_ReadPayload>:

NRF_Status NRF_WriteAckPayload(uint8_t pipe, uint8_t *payload, uint8_t length) {
  return NRF_SendWriteCommand(NRF_CMD_W_ACK_PAYLOAD | pipe, payload, length);
}

NRF_Status NRF_ReadPayload(uint8_t *read, uint8_t length) {
 8100e98:	b580      	push	{r7, lr}
 8100e9a:	b082      	sub	sp, #8
 8100e9c:	af00      	add	r7, sp, #0
 8100e9e:	6078      	str	r0, [r7, #4]
 8100ea0:	460b      	mov	r3, r1
 8100ea2:	70fb      	strb	r3, [r7, #3]
  return NRF_SendReadCommand(NRF_CMD_R_RX_PAYLOAD, read, length);
 8100ea4:	78fb      	ldrb	r3, [r7, #3]
 8100ea6:	461a      	mov	r2, r3
 8100ea8:	6879      	ldr	r1, [r7, #4]
 8100eaa:	2061      	movs	r0, #97	@ 0x61
 8100eac:	f7ff fdb2 	bl	8100a14 <NRF_SendReadCommand>
 8100eb0:	4603      	mov	r3, r0
}
 8100eb2:	4618      	mov	r0, r3
 8100eb4:	3708      	adds	r7, #8
 8100eb6:	46bd      	mov	sp, r7
 8100eb8:	bd80      	pop	{r7, pc}
	...

08100ebc <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8100ebc:	b580      	push	{r7, lr}
 8100ebe:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8100ec0:	4b27      	ldr	r3, [pc, #156]	@ (8100f60 <MX_SPI1_Init+0xa4>)
 8100ec2:	4a28      	ldr	r2, [pc, #160]	@ (8100f64 <MX_SPI1_Init+0xa8>)
 8100ec4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8100ec6:	4b26      	ldr	r3, [pc, #152]	@ (8100f60 <MX_SPI1_Init+0xa4>)
 8100ec8:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8100ecc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8100ece:	4b24      	ldr	r3, [pc, #144]	@ (8100f60 <MX_SPI1_Init+0xa4>)
 8100ed0:	2200      	movs	r2, #0
 8100ed2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8100ed4:	4b22      	ldr	r3, [pc, #136]	@ (8100f60 <MX_SPI1_Init+0xa4>)
 8100ed6:	2207      	movs	r2, #7
 8100ed8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8100eda:	4b21      	ldr	r3, [pc, #132]	@ (8100f60 <MX_SPI1_Init+0xa4>)
 8100edc:	2200      	movs	r2, #0
 8100ede:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8100ee0:	4b1f      	ldr	r3, [pc, #124]	@ (8100f60 <MX_SPI1_Init+0xa4>)
 8100ee2:	2200      	movs	r2, #0
 8100ee4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8100ee6:	4b1e      	ldr	r3, [pc, #120]	@ (8100f60 <MX_SPI1_Init+0xa4>)
 8100ee8:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8100eec:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8100eee:	4b1c      	ldr	r3, [pc, #112]	@ (8100f60 <MX_SPI1_Init+0xa4>)
 8100ef0:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8100ef4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8100ef6:	4b1a      	ldr	r3, [pc, #104]	@ (8100f60 <MX_SPI1_Init+0xa4>)
 8100ef8:	2200      	movs	r2, #0
 8100efa:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8100efc:	4b18      	ldr	r3, [pc, #96]	@ (8100f60 <MX_SPI1_Init+0xa4>)
 8100efe:	2200      	movs	r2, #0
 8100f00:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8100f02:	4b17      	ldr	r3, [pc, #92]	@ (8100f60 <MX_SPI1_Init+0xa4>)
 8100f04:	2200      	movs	r2, #0
 8100f06:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8100f08:	4b15      	ldr	r3, [pc, #84]	@ (8100f60 <MX_SPI1_Init+0xa4>)
 8100f0a:	2200      	movs	r2, #0
 8100f0c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8100f0e:	4b14      	ldr	r3, [pc, #80]	@ (8100f60 <MX_SPI1_Init+0xa4>)
 8100f10:	2200      	movs	r2, #0
 8100f12:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8100f14:	4b12      	ldr	r3, [pc, #72]	@ (8100f60 <MX_SPI1_Init+0xa4>)
 8100f16:	2200      	movs	r2, #0
 8100f18:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8100f1a:	4b11      	ldr	r3, [pc, #68]	@ (8100f60 <MX_SPI1_Init+0xa4>)
 8100f1c:	2200      	movs	r2, #0
 8100f1e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8100f20:	4b0f      	ldr	r3, [pc, #60]	@ (8100f60 <MX_SPI1_Init+0xa4>)
 8100f22:	2200      	movs	r2, #0
 8100f24:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8100f26:	4b0e      	ldr	r3, [pc, #56]	@ (8100f60 <MX_SPI1_Init+0xa4>)
 8100f28:	2200      	movs	r2, #0
 8100f2a:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8100f2c:	4b0c      	ldr	r3, [pc, #48]	@ (8100f60 <MX_SPI1_Init+0xa4>)
 8100f2e:	2200      	movs	r2, #0
 8100f30:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8100f32:	4b0b      	ldr	r3, [pc, #44]	@ (8100f60 <MX_SPI1_Init+0xa4>)
 8100f34:	2200      	movs	r2, #0
 8100f36:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8100f38:	4b09      	ldr	r3, [pc, #36]	@ (8100f60 <MX_SPI1_Init+0xa4>)
 8100f3a:	2200      	movs	r2, #0
 8100f3c:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_ENABLE;
 8100f3e:	4b08      	ldr	r3, [pc, #32]	@ (8100f60 <MX_SPI1_Init+0xa4>)
 8100f40:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8100f44:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8100f46:	4b06      	ldr	r3, [pc, #24]	@ (8100f60 <MX_SPI1_Init+0xa4>)
 8100f48:	2200      	movs	r2, #0
 8100f4a:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8100f4c:	4804      	ldr	r0, [pc, #16]	@ (8100f60 <MX_SPI1_Init+0xa4>)
 8100f4e:	f000 feb1 	bl	8101cb4 <HAL_SPI_Init>
 8100f52:	4603      	mov	r3, r0
 8100f54:	2b00      	cmp	r3, #0
 8100f56:	d001      	beq.n	8100f5c <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8100f58:	f7ff fc88 	bl	810086c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8100f5c:	bf00      	nop
 8100f5e:	bd80      	pop	{r7, pc}
 8100f60:	10000070 	.word	0x10000070
 8100f64:	40013000 	.word	0x40013000

08100f68 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8100f68:	b580      	push	{r7, lr}
 8100f6a:	b08a      	sub	sp, #40	@ 0x28
 8100f6c:	af00      	add	r7, sp, #0
 8100f6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8100f70:	f107 0314 	add.w	r3, r7, #20
 8100f74:	2200      	movs	r2, #0
 8100f76:	601a      	str	r2, [r3, #0]
 8100f78:	605a      	str	r2, [r3, #4]
 8100f7a:	609a      	str	r2, [r3, #8]
 8100f7c:	60da      	str	r2, [r3, #12]
 8100f7e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8100f80:	687b      	ldr	r3, [r7, #4]
 8100f82:	681b      	ldr	r3, [r3, #0]
 8100f84:	4a29      	ldr	r2, [pc, #164]	@ (810102c <HAL_SPI_MspInit+0xc4>)
 8100f86:	4293      	cmp	r3, r2
 8100f88:	d14c      	bne.n	8101024 <HAL_SPI_MspInit+0xbc>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8100f8a:	4b29      	ldr	r3, [pc, #164]	@ (8101030 <HAL_SPI_MspInit+0xc8>)
 8100f8c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8100f90:	4a27      	ldr	r2, [pc, #156]	@ (8101030 <HAL_SPI_MspInit+0xc8>)
 8100f92:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8100f96:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8100f9a:	4b25      	ldr	r3, [pc, #148]	@ (8101030 <HAL_SPI_MspInit+0xc8>)
 8100f9c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8100fa0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8100fa4:	613b      	str	r3, [r7, #16]
 8100fa6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8100fa8:	4b21      	ldr	r3, [pc, #132]	@ (8101030 <HAL_SPI_MspInit+0xc8>)
 8100faa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100fae:	4a20      	ldr	r2, [pc, #128]	@ (8101030 <HAL_SPI_MspInit+0xc8>)
 8100fb0:	f043 0301 	orr.w	r3, r3, #1
 8100fb4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8100fb8:	4b1d      	ldr	r3, [pc, #116]	@ (8101030 <HAL_SPI_MspInit+0xc8>)
 8100fba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100fbe:	f003 0301 	and.w	r3, r3, #1
 8100fc2:	60fb      	str	r3, [r7, #12]
 8100fc4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8100fc6:	4b1a      	ldr	r3, [pc, #104]	@ (8101030 <HAL_SPI_MspInit+0xc8>)
 8100fc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100fcc:	4a18      	ldr	r2, [pc, #96]	@ (8101030 <HAL_SPI_MspInit+0xc8>)
 8100fce:	f043 0308 	orr.w	r3, r3, #8
 8100fd2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8100fd6:	4b16      	ldr	r3, [pc, #88]	@ (8101030 <HAL_SPI_MspInit+0xc8>)
 8100fd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100fdc:	f003 0308 	and.w	r3, r3, #8
 8100fe0:	60bb      	str	r3, [r7, #8]
 8100fe2:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PD7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8100fe4:	2360      	movs	r3, #96	@ 0x60
 8100fe6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8100fe8:	2302      	movs	r3, #2
 8100fea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100fec:	2300      	movs	r3, #0
 8100fee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8100ff0:	2300      	movs	r3, #0
 8100ff2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8100ff4:	2305      	movs	r3, #5
 8100ff6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8100ff8:	f107 0314 	add.w	r3, r7, #20
 8100ffc:	4619      	mov	r1, r3
 8100ffe:	480d      	ldr	r0, [pc, #52]	@ (8101034 <HAL_SPI_MspInit+0xcc>)
 8101000:	f000 fa60 	bl	81014c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8101004:	2380      	movs	r3, #128	@ 0x80
 8101006:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101008:	2302      	movs	r3, #2
 810100a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 810100c:	2300      	movs	r3, #0
 810100e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101010:	2300      	movs	r3, #0
 8101012:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8101014:	2305      	movs	r3, #5
 8101016:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8101018:	f107 0314 	add.w	r3, r7, #20
 810101c:	4619      	mov	r1, r3
 810101e:	4806      	ldr	r0, [pc, #24]	@ (8101038 <HAL_SPI_MspInit+0xd0>)
 8101020:	f000 fa50 	bl	81014c4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8101024:	bf00      	nop
 8101026:	3728      	adds	r7, #40	@ 0x28
 8101028:	46bd      	mov	sp, r7
 810102a:	bd80      	pop	{r7, pc}
 810102c:	40013000 	.word	0x40013000
 8101030:	58024400 	.word	0x58024400
 8101034:	58020000 	.word	0x58020000
 8101038:	58020c00 	.word	0x58020c00

0810103c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 810103c:	b480      	push	{r7}
 810103e:	b083      	sub	sp, #12
 8101040:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8101042:	4b0a      	ldr	r3, [pc, #40]	@ (810106c <HAL_MspInit+0x30>)
 8101044:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8101048:	4a08      	ldr	r2, [pc, #32]	@ (810106c <HAL_MspInit+0x30>)
 810104a:	f043 0302 	orr.w	r3, r3, #2
 810104e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8101052:	4b06      	ldr	r3, [pc, #24]	@ (810106c <HAL_MspInit+0x30>)
 8101054:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8101058:	f003 0302 	and.w	r3, r3, #2
 810105c:	607b      	str	r3, [r7, #4]
 810105e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8101060:	bf00      	nop
 8101062:	370c      	adds	r7, #12
 8101064:	46bd      	mov	sp, r7
 8101066:	f85d 7b04 	ldr.w	r7, [sp], #4
 810106a:	4770      	bx	lr
 810106c:	58024400 	.word	0x58024400

08101070 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8101070:	b480      	push	{r7}
 8101072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8101074:	bf00      	nop
 8101076:	e7fd      	b.n	8101074 <NMI_Handler+0x4>

08101078 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8101078:	b480      	push	{r7}
 810107a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 810107c:	bf00      	nop
 810107e:	e7fd      	b.n	810107c <HardFault_Handler+0x4>

08101080 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8101080:	b480      	push	{r7}
 8101082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8101084:	bf00      	nop
 8101086:	e7fd      	b.n	8101084 <MemManage_Handler+0x4>

08101088 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8101088:	b480      	push	{r7}
 810108a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 810108c:	bf00      	nop
 810108e:	e7fd      	b.n	810108c <BusFault_Handler+0x4>

08101090 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8101090:	b480      	push	{r7}
 8101092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8101094:	bf00      	nop
 8101096:	e7fd      	b.n	8101094 <UsageFault_Handler+0x4>

08101098 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8101098:	b480      	push	{r7}
 810109a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 810109c:	bf00      	nop
 810109e:	46bd      	mov	sp, r7
 81010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81010a4:	4770      	bx	lr

081010a6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 81010a6:	b480      	push	{r7}
 81010a8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 81010aa:	bf00      	nop
 81010ac:	46bd      	mov	sp, r7
 81010ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 81010b2:	4770      	bx	lr

081010b4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 81010b4:	b480      	push	{r7}
 81010b6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 81010b8:	bf00      	nop
 81010ba:	46bd      	mov	sp, r7
 81010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81010c0:	4770      	bx	lr

081010c2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 81010c2:	b580      	push	{r7, lr}
 81010c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 81010c6:	f000 f8c1 	bl	810124c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 81010ca:	bf00      	nop
 81010cc:	bd80      	pop	{r7, pc}
	...

081010d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 81010d0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8101108 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 81010d4:	f7ff fa78 	bl	81005c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 81010d8:	480c      	ldr	r0, [pc, #48]	@ (810110c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 81010da:	490d      	ldr	r1, [pc, #52]	@ (8101110 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 81010dc:	4a0d      	ldr	r2, [pc, #52]	@ (8101114 <LoopFillZerobss+0x1a>)
  movs r3, #0
 81010de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 81010e0:	e002      	b.n	81010e8 <LoopCopyDataInit>

081010e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 81010e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 81010e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 81010e6:	3304      	adds	r3, #4

081010e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 81010e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 81010ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 81010ec:	d3f9      	bcc.n	81010e2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 81010ee:	4a0a      	ldr	r2, [pc, #40]	@ (8101118 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 81010f0:	4c0a      	ldr	r4, [pc, #40]	@ (810111c <LoopFillZerobss+0x22>)
  movs r3, #0
 81010f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 81010f4:	e001      	b.n	81010fa <LoopFillZerobss>

081010f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 81010f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 81010f8:	3204      	adds	r2, #4

081010fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 81010fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 81010fc:	d3fb      	bcc.n	81010f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 81010fe:	f001 ff7b 	bl	8102ff8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8101102:	f7ff fb39 	bl	8100778 <main>
  bx  lr
 8101106:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8101108:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 810110c:	10000000 	.word	0x10000000
  ldr r1, =_edata
 8101110:	10000018 	.word	0x10000018
  ldr r2, =_sidata
 8101114:	08103088 	.word	0x08103088
  ldr r2, =_sbss
 8101118:	10000018 	.word	0x10000018
  ldr r4, =_ebss
 810111c:	100000fc 	.word	0x100000fc

08101120 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8101120:	e7fe      	b.n	8101120 <ADC3_IRQHandler>
	...

08101124 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8101124:	b580      	push	{r7, lr}
 8101126:	b082      	sub	sp, #8
 8101128:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 810112a:	4b28      	ldr	r3, [pc, #160]	@ (81011cc <HAL_Init+0xa8>)
 810112c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8101130:	4a26      	ldr	r2, [pc, #152]	@ (81011cc <HAL_Init+0xa8>)
 8101132:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8101136:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 810113a:	4b24      	ldr	r3, [pc, #144]	@ (81011cc <HAL_Init+0xa8>)
 810113c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8101140:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8101144:	603b      	str	r3, [r7, #0]
 8101146:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 8101148:	4b21      	ldr	r3, [pc, #132]	@ (81011d0 <HAL_Init+0xac>)
 810114a:	681b      	ldr	r3, [r3, #0]
 810114c:	f423 237f 	bic.w	r3, r3, #1044480	@ 0xff000
 8101150:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8101154:	4a1e      	ldr	r2, [pc, #120]	@ (81011d0 <HAL_Init+0xac>)
 8101156:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 810115a:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 810115c:	4b1c      	ldr	r3, [pc, #112]	@ (81011d0 <HAL_Init+0xac>)
 810115e:	681b      	ldr	r3, [r3, #0]
 8101160:	4a1b      	ldr	r2, [pc, #108]	@ (81011d0 <HAL_Init+0xac>)
 8101162:	f043 0301 	orr.w	r3, r3, #1
 8101166:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8101168:	2003      	movs	r0, #3
 810116a:	f000 f965 	bl	8101438 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 810116e:	f000 fc27 	bl	81019c0 <HAL_RCC_GetSysClockFreq>
 8101172:	4602      	mov	r2, r0
 8101174:	4b15      	ldr	r3, [pc, #84]	@ (81011cc <HAL_Init+0xa8>)
 8101176:	699b      	ldr	r3, [r3, #24]
 8101178:	0a1b      	lsrs	r3, r3, #8
 810117a:	f003 030f 	and.w	r3, r3, #15
 810117e:	4915      	ldr	r1, [pc, #84]	@ (81011d4 <HAL_Init+0xb0>)
 8101180:	5ccb      	ldrb	r3, [r1, r3]
 8101182:	f003 031f 	and.w	r3, r3, #31
 8101186:	fa22 f303 	lsr.w	r3, r2, r3
 810118a:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 810118c:	4b0f      	ldr	r3, [pc, #60]	@ (81011cc <HAL_Init+0xa8>)
 810118e:	699b      	ldr	r3, [r3, #24]
 8101190:	f003 030f 	and.w	r3, r3, #15
 8101194:	4a0f      	ldr	r2, [pc, #60]	@ (81011d4 <HAL_Init+0xb0>)
 8101196:	5cd3      	ldrb	r3, [r2, r3]
 8101198:	f003 031f 	and.w	r3, r3, #31
 810119c:	687a      	ldr	r2, [r7, #4]
 810119e:	fa22 f303 	lsr.w	r3, r2, r3
 81011a2:	4a0d      	ldr	r2, [pc, #52]	@ (81011d8 <HAL_Init+0xb4>)
 81011a4:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 81011a6:	4b0c      	ldr	r3, [pc, #48]	@ (81011d8 <HAL_Init+0xb4>)
 81011a8:	681b      	ldr	r3, [r3, #0]
 81011aa:	4a0c      	ldr	r2, [pc, #48]	@ (81011dc <HAL_Init+0xb8>)
 81011ac:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 81011ae:	2000      	movs	r0, #0
 81011b0:	f000 f816 	bl	81011e0 <HAL_InitTick>
 81011b4:	4603      	mov	r3, r0
 81011b6:	2b00      	cmp	r3, #0
 81011b8:	d001      	beq.n	81011be <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 81011ba:	2301      	movs	r3, #1
 81011bc:	e002      	b.n	81011c4 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 81011be:	f7ff ff3d 	bl	810103c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 81011c2:	2300      	movs	r3, #0
}
 81011c4:	4618      	mov	r0, r3
 81011c6:	3708      	adds	r7, #8
 81011c8:	46bd      	mov	sp, r7
 81011ca:	bd80      	pop	{r7, pc}
 81011cc:	58024400 	.word	0x58024400
 81011d0:	40024400 	.word	0x40024400
 81011d4:	08103068 	.word	0x08103068
 81011d8:	10000004 	.word	0x10000004
 81011dc:	10000000 	.word	0x10000000

081011e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 81011e0:	b580      	push	{r7, lr}
 81011e2:	b082      	sub	sp, #8
 81011e4:	af00      	add	r7, sp, #0
 81011e6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 81011e8:	4b15      	ldr	r3, [pc, #84]	@ (8101240 <HAL_InitTick+0x60>)
 81011ea:	781b      	ldrb	r3, [r3, #0]
 81011ec:	2b00      	cmp	r3, #0
 81011ee:	d101      	bne.n	81011f4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 81011f0:	2301      	movs	r3, #1
 81011f2:	e021      	b.n	8101238 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 81011f4:	4b13      	ldr	r3, [pc, #76]	@ (8101244 <HAL_InitTick+0x64>)
 81011f6:	681a      	ldr	r2, [r3, #0]
 81011f8:	4b11      	ldr	r3, [pc, #68]	@ (8101240 <HAL_InitTick+0x60>)
 81011fa:	781b      	ldrb	r3, [r3, #0]
 81011fc:	4619      	mov	r1, r3
 81011fe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8101202:	fbb3 f3f1 	udiv	r3, r3, r1
 8101206:	fbb2 f3f3 	udiv	r3, r2, r3
 810120a:	4618      	mov	r0, r3
 810120c:	f000 f939 	bl	8101482 <HAL_SYSTICK_Config>
 8101210:	4603      	mov	r3, r0
 8101212:	2b00      	cmp	r3, #0
 8101214:	d001      	beq.n	810121a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8101216:	2301      	movs	r3, #1
 8101218:	e00e      	b.n	8101238 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 810121a:	687b      	ldr	r3, [r7, #4]
 810121c:	2b0f      	cmp	r3, #15
 810121e:	d80a      	bhi.n	8101236 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8101220:	2200      	movs	r2, #0
 8101222:	6879      	ldr	r1, [r7, #4]
 8101224:	f04f 30ff 	mov.w	r0, #4294967295
 8101228:	f000 f911 	bl	810144e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 810122c:	4a06      	ldr	r2, [pc, #24]	@ (8101248 <HAL_InitTick+0x68>)
 810122e:	687b      	ldr	r3, [r7, #4]
 8101230:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8101232:	2300      	movs	r3, #0
 8101234:	e000      	b.n	8101238 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8101236:	2301      	movs	r3, #1
}
 8101238:	4618      	mov	r0, r3
 810123a:	3708      	adds	r7, #8
 810123c:	46bd      	mov	sp, r7
 810123e:	bd80      	pop	{r7, pc}
 8101240:	10000014 	.word	0x10000014
 8101244:	10000000 	.word	0x10000000
 8101248:	10000010 	.word	0x10000010

0810124c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 810124c:	b480      	push	{r7}
 810124e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8101250:	4b06      	ldr	r3, [pc, #24]	@ (810126c <HAL_IncTick+0x20>)
 8101252:	781b      	ldrb	r3, [r3, #0]
 8101254:	461a      	mov	r2, r3
 8101256:	4b06      	ldr	r3, [pc, #24]	@ (8101270 <HAL_IncTick+0x24>)
 8101258:	681b      	ldr	r3, [r3, #0]
 810125a:	4413      	add	r3, r2
 810125c:	4a04      	ldr	r2, [pc, #16]	@ (8101270 <HAL_IncTick+0x24>)
 810125e:	6013      	str	r3, [r2, #0]
}
 8101260:	bf00      	nop
 8101262:	46bd      	mov	sp, r7
 8101264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101268:	4770      	bx	lr
 810126a:	bf00      	nop
 810126c:	10000014 	.word	0x10000014
 8101270:	100000f8 	.word	0x100000f8

08101274 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8101274:	b480      	push	{r7}
 8101276:	af00      	add	r7, sp, #0
  return uwTick;
 8101278:	4b03      	ldr	r3, [pc, #12]	@ (8101288 <HAL_GetTick+0x14>)
 810127a:	681b      	ldr	r3, [r3, #0]
}
 810127c:	4618      	mov	r0, r3
 810127e:	46bd      	mov	sp, r7
 8101280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101284:	4770      	bx	lr
 8101286:	bf00      	nop
 8101288:	100000f8 	.word	0x100000f8

0810128c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 810128c:	b580      	push	{r7, lr}
 810128e:	b084      	sub	sp, #16
 8101290:	af00      	add	r7, sp, #0
 8101292:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8101294:	f7ff ffee 	bl	8101274 <HAL_GetTick>
 8101298:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 810129a:	687b      	ldr	r3, [r7, #4]
 810129c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 810129e:	68fb      	ldr	r3, [r7, #12]
 81012a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 81012a4:	d005      	beq.n	81012b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 81012a6:	4b0a      	ldr	r3, [pc, #40]	@ (81012d0 <HAL_Delay+0x44>)
 81012a8:	781b      	ldrb	r3, [r3, #0]
 81012aa:	461a      	mov	r2, r3
 81012ac:	68fb      	ldr	r3, [r7, #12]
 81012ae:	4413      	add	r3, r2
 81012b0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 81012b2:	bf00      	nop
 81012b4:	f7ff ffde 	bl	8101274 <HAL_GetTick>
 81012b8:	4602      	mov	r2, r0
 81012ba:	68bb      	ldr	r3, [r7, #8]
 81012bc:	1ad3      	subs	r3, r2, r3
 81012be:	68fa      	ldr	r2, [r7, #12]
 81012c0:	429a      	cmp	r2, r3
 81012c2:	d8f7      	bhi.n	81012b4 <HAL_Delay+0x28>
  {
  }
}
 81012c4:	bf00      	nop
 81012c6:	bf00      	nop
 81012c8:	3710      	adds	r7, #16
 81012ca:	46bd      	mov	sp, r7
 81012cc:	bd80      	pop	{r7, pc}
 81012ce:	bf00      	nop
 81012d0:	10000014 	.word	0x10000014

081012d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 81012d4:	b480      	push	{r7}
 81012d6:	b085      	sub	sp, #20
 81012d8:	af00      	add	r7, sp, #0
 81012da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 81012dc:	687b      	ldr	r3, [r7, #4]
 81012de:	f003 0307 	and.w	r3, r3, #7
 81012e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 81012e4:	4b0c      	ldr	r3, [pc, #48]	@ (8101318 <__NVIC_SetPriorityGrouping+0x44>)
 81012e6:	68db      	ldr	r3, [r3, #12]
 81012e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 81012ea:	68ba      	ldr	r2, [r7, #8]
 81012ec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 81012f0:	4013      	ands	r3, r2
 81012f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 81012f4:	68fb      	ldr	r3, [r7, #12]
 81012f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 81012f8:	68bb      	ldr	r3, [r7, #8]
 81012fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 81012fc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8101300:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8101304:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8101306:	4a04      	ldr	r2, [pc, #16]	@ (8101318 <__NVIC_SetPriorityGrouping+0x44>)
 8101308:	68bb      	ldr	r3, [r7, #8]
 810130a:	60d3      	str	r3, [r2, #12]
}
 810130c:	bf00      	nop
 810130e:	3714      	adds	r7, #20
 8101310:	46bd      	mov	sp, r7
 8101312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101316:	4770      	bx	lr
 8101318:	e000ed00 	.word	0xe000ed00

0810131c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 810131c:	b480      	push	{r7}
 810131e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8101320:	4b04      	ldr	r3, [pc, #16]	@ (8101334 <__NVIC_GetPriorityGrouping+0x18>)
 8101322:	68db      	ldr	r3, [r3, #12]
 8101324:	0a1b      	lsrs	r3, r3, #8
 8101326:	f003 0307 	and.w	r3, r3, #7
}
 810132a:	4618      	mov	r0, r3
 810132c:	46bd      	mov	sp, r7
 810132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101332:	4770      	bx	lr
 8101334:	e000ed00 	.word	0xe000ed00

08101338 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8101338:	b480      	push	{r7}
 810133a:	b083      	sub	sp, #12
 810133c:	af00      	add	r7, sp, #0
 810133e:	4603      	mov	r3, r0
 8101340:	6039      	str	r1, [r7, #0]
 8101342:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8101344:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101348:	2b00      	cmp	r3, #0
 810134a:	db0a      	blt.n	8101362 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 810134c:	683b      	ldr	r3, [r7, #0]
 810134e:	b2da      	uxtb	r2, r3
 8101350:	490c      	ldr	r1, [pc, #48]	@ (8101384 <__NVIC_SetPriority+0x4c>)
 8101352:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101356:	0112      	lsls	r2, r2, #4
 8101358:	b2d2      	uxtb	r2, r2
 810135a:	440b      	add	r3, r1
 810135c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8101360:	e00a      	b.n	8101378 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8101362:	683b      	ldr	r3, [r7, #0]
 8101364:	b2da      	uxtb	r2, r3
 8101366:	4908      	ldr	r1, [pc, #32]	@ (8101388 <__NVIC_SetPriority+0x50>)
 8101368:	88fb      	ldrh	r3, [r7, #6]
 810136a:	f003 030f 	and.w	r3, r3, #15
 810136e:	3b04      	subs	r3, #4
 8101370:	0112      	lsls	r2, r2, #4
 8101372:	b2d2      	uxtb	r2, r2
 8101374:	440b      	add	r3, r1
 8101376:	761a      	strb	r2, [r3, #24]
}
 8101378:	bf00      	nop
 810137a:	370c      	adds	r7, #12
 810137c:	46bd      	mov	sp, r7
 810137e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101382:	4770      	bx	lr
 8101384:	e000e100 	.word	0xe000e100
 8101388:	e000ed00 	.word	0xe000ed00

0810138c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 810138c:	b480      	push	{r7}
 810138e:	b089      	sub	sp, #36	@ 0x24
 8101390:	af00      	add	r7, sp, #0
 8101392:	60f8      	str	r0, [r7, #12]
 8101394:	60b9      	str	r1, [r7, #8]
 8101396:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8101398:	68fb      	ldr	r3, [r7, #12]
 810139a:	f003 0307 	and.w	r3, r3, #7
 810139e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 81013a0:	69fb      	ldr	r3, [r7, #28]
 81013a2:	f1c3 0307 	rsb	r3, r3, #7
 81013a6:	2b04      	cmp	r3, #4
 81013a8:	bf28      	it	cs
 81013aa:	2304      	movcs	r3, #4
 81013ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 81013ae:	69fb      	ldr	r3, [r7, #28]
 81013b0:	3304      	adds	r3, #4
 81013b2:	2b06      	cmp	r3, #6
 81013b4:	d902      	bls.n	81013bc <NVIC_EncodePriority+0x30>
 81013b6:	69fb      	ldr	r3, [r7, #28]
 81013b8:	3b03      	subs	r3, #3
 81013ba:	e000      	b.n	81013be <NVIC_EncodePriority+0x32>
 81013bc:	2300      	movs	r3, #0
 81013be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 81013c0:	f04f 32ff 	mov.w	r2, #4294967295
 81013c4:	69bb      	ldr	r3, [r7, #24]
 81013c6:	fa02 f303 	lsl.w	r3, r2, r3
 81013ca:	43da      	mvns	r2, r3
 81013cc:	68bb      	ldr	r3, [r7, #8]
 81013ce:	401a      	ands	r2, r3
 81013d0:	697b      	ldr	r3, [r7, #20]
 81013d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 81013d4:	f04f 31ff 	mov.w	r1, #4294967295
 81013d8:	697b      	ldr	r3, [r7, #20]
 81013da:	fa01 f303 	lsl.w	r3, r1, r3
 81013de:	43d9      	mvns	r1, r3
 81013e0:	687b      	ldr	r3, [r7, #4]
 81013e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 81013e4:	4313      	orrs	r3, r2
         );
}
 81013e6:	4618      	mov	r0, r3
 81013e8:	3724      	adds	r7, #36	@ 0x24
 81013ea:	46bd      	mov	sp, r7
 81013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 81013f0:	4770      	bx	lr
	...

081013f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 81013f4:	b580      	push	{r7, lr}
 81013f6:	b082      	sub	sp, #8
 81013f8:	af00      	add	r7, sp, #0
 81013fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 81013fc:	687b      	ldr	r3, [r7, #4]
 81013fe:	3b01      	subs	r3, #1
 8101400:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8101404:	d301      	bcc.n	810140a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8101406:	2301      	movs	r3, #1
 8101408:	e00f      	b.n	810142a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 810140a:	4a0a      	ldr	r2, [pc, #40]	@ (8101434 <SysTick_Config+0x40>)
 810140c:	687b      	ldr	r3, [r7, #4]
 810140e:	3b01      	subs	r3, #1
 8101410:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8101412:	210f      	movs	r1, #15
 8101414:	f04f 30ff 	mov.w	r0, #4294967295
 8101418:	f7ff ff8e 	bl	8101338 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 810141c:	4b05      	ldr	r3, [pc, #20]	@ (8101434 <SysTick_Config+0x40>)
 810141e:	2200      	movs	r2, #0
 8101420:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8101422:	4b04      	ldr	r3, [pc, #16]	@ (8101434 <SysTick_Config+0x40>)
 8101424:	2207      	movs	r2, #7
 8101426:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8101428:	2300      	movs	r3, #0
}
 810142a:	4618      	mov	r0, r3
 810142c:	3708      	adds	r7, #8
 810142e:	46bd      	mov	sp, r7
 8101430:	bd80      	pop	{r7, pc}
 8101432:	bf00      	nop
 8101434:	e000e010 	.word	0xe000e010

08101438 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8101438:	b580      	push	{r7, lr}
 810143a:	b082      	sub	sp, #8
 810143c:	af00      	add	r7, sp, #0
 810143e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8101440:	6878      	ldr	r0, [r7, #4]
 8101442:	f7ff ff47 	bl	81012d4 <__NVIC_SetPriorityGrouping>
}
 8101446:	bf00      	nop
 8101448:	3708      	adds	r7, #8
 810144a:	46bd      	mov	sp, r7
 810144c:	bd80      	pop	{r7, pc}

0810144e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 810144e:	b580      	push	{r7, lr}
 8101450:	b086      	sub	sp, #24
 8101452:	af00      	add	r7, sp, #0
 8101454:	4603      	mov	r3, r0
 8101456:	60b9      	str	r1, [r7, #8]
 8101458:	607a      	str	r2, [r7, #4]
 810145a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 810145c:	f7ff ff5e 	bl	810131c <__NVIC_GetPriorityGrouping>
 8101460:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8101462:	687a      	ldr	r2, [r7, #4]
 8101464:	68b9      	ldr	r1, [r7, #8]
 8101466:	6978      	ldr	r0, [r7, #20]
 8101468:	f7ff ff90 	bl	810138c <NVIC_EncodePriority>
 810146c:	4602      	mov	r2, r0
 810146e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8101472:	4611      	mov	r1, r2
 8101474:	4618      	mov	r0, r3
 8101476:	f7ff ff5f 	bl	8101338 <__NVIC_SetPriority>
}
 810147a:	bf00      	nop
 810147c:	3718      	adds	r7, #24
 810147e:	46bd      	mov	sp, r7
 8101480:	bd80      	pop	{r7, pc}

08101482 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8101482:	b580      	push	{r7, lr}
 8101484:	b082      	sub	sp, #8
 8101486:	af00      	add	r7, sp, #0
 8101488:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 810148a:	6878      	ldr	r0, [r7, #4]
 810148c:	f7ff ffb2 	bl	81013f4 <SysTick_Config>
 8101490:	4603      	mov	r3, r0
}
 8101492:	4618      	mov	r0, r3
 8101494:	3708      	adds	r7, #8
 8101496:	46bd      	mov	sp, r7
 8101498:	bd80      	pop	{r7, pc}
	...

0810149c <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 810149c:	b480      	push	{r7}
 810149e:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 81014a0:	4b07      	ldr	r3, [pc, #28]	@ (81014c0 <HAL_GetCurrentCPUID+0x24>)
 81014a2:	681b      	ldr	r3, [r3, #0]
 81014a4:	091b      	lsrs	r3, r3, #4
 81014a6:	f003 030f 	and.w	r3, r3, #15
 81014aa:	2b07      	cmp	r3, #7
 81014ac:	d101      	bne.n	81014b2 <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 81014ae:	2303      	movs	r3, #3
 81014b0:	e000      	b.n	81014b4 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 81014b2:	2301      	movs	r3, #1
  }
}
 81014b4:	4618      	mov	r0, r3
 81014b6:	46bd      	mov	sp, r7
 81014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81014bc:	4770      	bx	lr
 81014be:	bf00      	nop
 81014c0:	e000ed00 	.word	0xe000ed00

081014c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 81014c4:	b480      	push	{r7}
 81014c6:	b089      	sub	sp, #36	@ 0x24
 81014c8:	af00      	add	r7, sp, #0
 81014ca:	6078      	str	r0, [r7, #4]
 81014cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 81014ce:	2300      	movs	r3, #0
 81014d0:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 81014d2:	4b89      	ldr	r3, [pc, #548]	@ (81016f8 <HAL_GPIO_Init+0x234>)
 81014d4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 81014d6:	e194      	b.n	8101802 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 81014d8:	683b      	ldr	r3, [r7, #0]
 81014da:	681a      	ldr	r2, [r3, #0]
 81014dc:	2101      	movs	r1, #1
 81014de:	69fb      	ldr	r3, [r7, #28]
 81014e0:	fa01 f303 	lsl.w	r3, r1, r3
 81014e4:	4013      	ands	r3, r2
 81014e6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 81014e8:	693b      	ldr	r3, [r7, #16]
 81014ea:	2b00      	cmp	r3, #0
 81014ec:	f000 8186 	beq.w	81017fc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 81014f0:	683b      	ldr	r3, [r7, #0]
 81014f2:	685b      	ldr	r3, [r3, #4]
 81014f4:	f003 0303 	and.w	r3, r3, #3
 81014f8:	2b01      	cmp	r3, #1
 81014fa:	d005      	beq.n	8101508 <HAL_GPIO_Init+0x44>
 81014fc:	683b      	ldr	r3, [r7, #0]
 81014fe:	685b      	ldr	r3, [r3, #4]
 8101500:	f003 0303 	and.w	r3, r3, #3
 8101504:	2b02      	cmp	r3, #2
 8101506:	d130      	bne.n	810156a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8101508:	687b      	ldr	r3, [r7, #4]
 810150a:	689b      	ldr	r3, [r3, #8]
 810150c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 810150e:	69fb      	ldr	r3, [r7, #28]
 8101510:	005b      	lsls	r3, r3, #1
 8101512:	2203      	movs	r2, #3
 8101514:	fa02 f303 	lsl.w	r3, r2, r3
 8101518:	43db      	mvns	r3, r3
 810151a:	69ba      	ldr	r2, [r7, #24]
 810151c:	4013      	ands	r3, r2
 810151e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8101520:	683b      	ldr	r3, [r7, #0]
 8101522:	68da      	ldr	r2, [r3, #12]
 8101524:	69fb      	ldr	r3, [r7, #28]
 8101526:	005b      	lsls	r3, r3, #1
 8101528:	fa02 f303 	lsl.w	r3, r2, r3
 810152c:	69ba      	ldr	r2, [r7, #24]
 810152e:	4313      	orrs	r3, r2
 8101530:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8101532:	687b      	ldr	r3, [r7, #4]
 8101534:	69ba      	ldr	r2, [r7, #24]
 8101536:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8101538:	687b      	ldr	r3, [r7, #4]
 810153a:	685b      	ldr	r3, [r3, #4]
 810153c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 810153e:	2201      	movs	r2, #1
 8101540:	69fb      	ldr	r3, [r7, #28]
 8101542:	fa02 f303 	lsl.w	r3, r2, r3
 8101546:	43db      	mvns	r3, r3
 8101548:	69ba      	ldr	r2, [r7, #24]
 810154a:	4013      	ands	r3, r2
 810154c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 810154e:	683b      	ldr	r3, [r7, #0]
 8101550:	685b      	ldr	r3, [r3, #4]
 8101552:	091b      	lsrs	r3, r3, #4
 8101554:	f003 0201 	and.w	r2, r3, #1
 8101558:	69fb      	ldr	r3, [r7, #28]
 810155a:	fa02 f303 	lsl.w	r3, r2, r3
 810155e:	69ba      	ldr	r2, [r7, #24]
 8101560:	4313      	orrs	r3, r2
 8101562:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8101564:	687b      	ldr	r3, [r7, #4]
 8101566:	69ba      	ldr	r2, [r7, #24]
 8101568:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 810156a:	683b      	ldr	r3, [r7, #0]
 810156c:	685b      	ldr	r3, [r3, #4]
 810156e:	f003 0303 	and.w	r3, r3, #3
 8101572:	2b03      	cmp	r3, #3
 8101574:	d017      	beq.n	81015a6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8101576:	687b      	ldr	r3, [r7, #4]
 8101578:	68db      	ldr	r3, [r3, #12]
 810157a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 810157c:	69fb      	ldr	r3, [r7, #28]
 810157e:	005b      	lsls	r3, r3, #1
 8101580:	2203      	movs	r2, #3
 8101582:	fa02 f303 	lsl.w	r3, r2, r3
 8101586:	43db      	mvns	r3, r3
 8101588:	69ba      	ldr	r2, [r7, #24]
 810158a:	4013      	ands	r3, r2
 810158c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 810158e:	683b      	ldr	r3, [r7, #0]
 8101590:	689a      	ldr	r2, [r3, #8]
 8101592:	69fb      	ldr	r3, [r7, #28]
 8101594:	005b      	lsls	r3, r3, #1
 8101596:	fa02 f303 	lsl.w	r3, r2, r3
 810159a:	69ba      	ldr	r2, [r7, #24]
 810159c:	4313      	orrs	r3, r2
 810159e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 81015a0:	687b      	ldr	r3, [r7, #4]
 81015a2:	69ba      	ldr	r2, [r7, #24]
 81015a4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 81015a6:	683b      	ldr	r3, [r7, #0]
 81015a8:	685b      	ldr	r3, [r3, #4]
 81015aa:	f003 0303 	and.w	r3, r3, #3
 81015ae:	2b02      	cmp	r3, #2
 81015b0:	d123      	bne.n	81015fa <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 81015b2:	69fb      	ldr	r3, [r7, #28]
 81015b4:	08da      	lsrs	r2, r3, #3
 81015b6:	687b      	ldr	r3, [r7, #4]
 81015b8:	3208      	adds	r2, #8
 81015ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 81015be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 81015c0:	69fb      	ldr	r3, [r7, #28]
 81015c2:	f003 0307 	and.w	r3, r3, #7
 81015c6:	009b      	lsls	r3, r3, #2
 81015c8:	220f      	movs	r2, #15
 81015ca:	fa02 f303 	lsl.w	r3, r2, r3
 81015ce:	43db      	mvns	r3, r3
 81015d0:	69ba      	ldr	r2, [r7, #24]
 81015d2:	4013      	ands	r3, r2
 81015d4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 81015d6:	683b      	ldr	r3, [r7, #0]
 81015d8:	691a      	ldr	r2, [r3, #16]
 81015da:	69fb      	ldr	r3, [r7, #28]
 81015dc:	f003 0307 	and.w	r3, r3, #7
 81015e0:	009b      	lsls	r3, r3, #2
 81015e2:	fa02 f303 	lsl.w	r3, r2, r3
 81015e6:	69ba      	ldr	r2, [r7, #24]
 81015e8:	4313      	orrs	r3, r2
 81015ea:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 81015ec:	69fb      	ldr	r3, [r7, #28]
 81015ee:	08da      	lsrs	r2, r3, #3
 81015f0:	687b      	ldr	r3, [r7, #4]
 81015f2:	3208      	adds	r2, #8
 81015f4:	69b9      	ldr	r1, [r7, #24]
 81015f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 81015fa:	687b      	ldr	r3, [r7, #4]
 81015fc:	681b      	ldr	r3, [r3, #0]
 81015fe:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8101600:	69fb      	ldr	r3, [r7, #28]
 8101602:	005b      	lsls	r3, r3, #1
 8101604:	2203      	movs	r2, #3
 8101606:	fa02 f303 	lsl.w	r3, r2, r3
 810160a:	43db      	mvns	r3, r3
 810160c:	69ba      	ldr	r2, [r7, #24]
 810160e:	4013      	ands	r3, r2
 8101610:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8101612:	683b      	ldr	r3, [r7, #0]
 8101614:	685b      	ldr	r3, [r3, #4]
 8101616:	f003 0203 	and.w	r2, r3, #3
 810161a:	69fb      	ldr	r3, [r7, #28]
 810161c:	005b      	lsls	r3, r3, #1
 810161e:	fa02 f303 	lsl.w	r3, r2, r3
 8101622:	69ba      	ldr	r2, [r7, #24]
 8101624:	4313      	orrs	r3, r2
 8101626:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8101628:	687b      	ldr	r3, [r7, #4]
 810162a:	69ba      	ldr	r2, [r7, #24]
 810162c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 810162e:	683b      	ldr	r3, [r7, #0]
 8101630:	685b      	ldr	r3, [r3, #4]
 8101632:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8101636:	2b00      	cmp	r3, #0
 8101638:	f000 80e0 	beq.w	81017fc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 810163c:	4b2f      	ldr	r3, [pc, #188]	@ (81016fc <HAL_GPIO_Init+0x238>)
 810163e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8101642:	4a2e      	ldr	r2, [pc, #184]	@ (81016fc <HAL_GPIO_Init+0x238>)
 8101644:	f043 0302 	orr.w	r3, r3, #2
 8101648:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 810164c:	4b2b      	ldr	r3, [pc, #172]	@ (81016fc <HAL_GPIO_Init+0x238>)
 810164e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8101652:	f003 0302 	and.w	r3, r3, #2
 8101656:	60fb      	str	r3, [r7, #12]
 8101658:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 810165a:	4a29      	ldr	r2, [pc, #164]	@ (8101700 <HAL_GPIO_Init+0x23c>)
 810165c:	69fb      	ldr	r3, [r7, #28]
 810165e:	089b      	lsrs	r3, r3, #2
 8101660:	3302      	adds	r3, #2
 8101662:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8101666:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8101668:	69fb      	ldr	r3, [r7, #28]
 810166a:	f003 0303 	and.w	r3, r3, #3
 810166e:	009b      	lsls	r3, r3, #2
 8101670:	220f      	movs	r2, #15
 8101672:	fa02 f303 	lsl.w	r3, r2, r3
 8101676:	43db      	mvns	r3, r3
 8101678:	69ba      	ldr	r2, [r7, #24]
 810167a:	4013      	ands	r3, r2
 810167c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 810167e:	687b      	ldr	r3, [r7, #4]
 8101680:	4a20      	ldr	r2, [pc, #128]	@ (8101704 <HAL_GPIO_Init+0x240>)
 8101682:	4293      	cmp	r3, r2
 8101684:	d052      	beq.n	810172c <HAL_GPIO_Init+0x268>
 8101686:	687b      	ldr	r3, [r7, #4]
 8101688:	4a1f      	ldr	r2, [pc, #124]	@ (8101708 <HAL_GPIO_Init+0x244>)
 810168a:	4293      	cmp	r3, r2
 810168c:	d031      	beq.n	81016f2 <HAL_GPIO_Init+0x22e>
 810168e:	687b      	ldr	r3, [r7, #4]
 8101690:	4a1e      	ldr	r2, [pc, #120]	@ (810170c <HAL_GPIO_Init+0x248>)
 8101692:	4293      	cmp	r3, r2
 8101694:	d02b      	beq.n	81016ee <HAL_GPIO_Init+0x22a>
 8101696:	687b      	ldr	r3, [r7, #4]
 8101698:	4a1d      	ldr	r2, [pc, #116]	@ (8101710 <HAL_GPIO_Init+0x24c>)
 810169a:	4293      	cmp	r3, r2
 810169c:	d025      	beq.n	81016ea <HAL_GPIO_Init+0x226>
 810169e:	687b      	ldr	r3, [r7, #4]
 81016a0:	4a1c      	ldr	r2, [pc, #112]	@ (8101714 <HAL_GPIO_Init+0x250>)
 81016a2:	4293      	cmp	r3, r2
 81016a4:	d01f      	beq.n	81016e6 <HAL_GPIO_Init+0x222>
 81016a6:	687b      	ldr	r3, [r7, #4]
 81016a8:	4a1b      	ldr	r2, [pc, #108]	@ (8101718 <HAL_GPIO_Init+0x254>)
 81016aa:	4293      	cmp	r3, r2
 81016ac:	d019      	beq.n	81016e2 <HAL_GPIO_Init+0x21e>
 81016ae:	687b      	ldr	r3, [r7, #4]
 81016b0:	4a1a      	ldr	r2, [pc, #104]	@ (810171c <HAL_GPIO_Init+0x258>)
 81016b2:	4293      	cmp	r3, r2
 81016b4:	d013      	beq.n	81016de <HAL_GPIO_Init+0x21a>
 81016b6:	687b      	ldr	r3, [r7, #4]
 81016b8:	4a19      	ldr	r2, [pc, #100]	@ (8101720 <HAL_GPIO_Init+0x25c>)
 81016ba:	4293      	cmp	r3, r2
 81016bc:	d00d      	beq.n	81016da <HAL_GPIO_Init+0x216>
 81016be:	687b      	ldr	r3, [r7, #4]
 81016c0:	4a18      	ldr	r2, [pc, #96]	@ (8101724 <HAL_GPIO_Init+0x260>)
 81016c2:	4293      	cmp	r3, r2
 81016c4:	d007      	beq.n	81016d6 <HAL_GPIO_Init+0x212>
 81016c6:	687b      	ldr	r3, [r7, #4]
 81016c8:	4a17      	ldr	r2, [pc, #92]	@ (8101728 <HAL_GPIO_Init+0x264>)
 81016ca:	4293      	cmp	r3, r2
 81016cc:	d101      	bne.n	81016d2 <HAL_GPIO_Init+0x20e>
 81016ce:	2309      	movs	r3, #9
 81016d0:	e02d      	b.n	810172e <HAL_GPIO_Init+0x26a>
 81016d2:	230a      	movs	r3, #10
 81016d4:	e02b      	b.n	810172e <HAL_GPIO_Init+0x26a>
 81016d6:	2308      	movs	r3, #8
 81016d8:	e029      	b.n	810172e <HAL_GPIO_Init+0x26a>
 81016da:	2307      	movs	r3, #7
 81016dc:	e027      	b.n	810172e <HAL_GPIO_Init+0x26a>
 81016de:	2306      	movs	r3, #6
 81016e0:	e025      	b.n	810172e <HAL_GPIO_Init+0x26a>
 81016e2:	2305      	movs	r3, #5
 81016e4:	e023      	b.n	810172e <HAL_GPIO_Init+0x26a>
 81016e6:	2304      	movs	r3, #4
 81016e8:	e021      	b.n	810172e <HAL_GPIO_Init+0x26a>
 81016ea:	2303      	movs	r3, #3
 81016ec:	e01f      	b.n	810172e <HAL_GPIO_Init+0x26a>
 81016ee:	2302      	movs	r3, #2
 81016f0:	e01d      	b.n	810172e <HAL_GPIO_Init+0x26a>
 81016f2:	2301      	movs	r3, #1
 81016f4:	e01b      	b.n	810172e <HAL_GPIO_Init+0x26a>
 81016f6:	bf00      	nop
 81016f8:	580000c0 	.word	0x580000c0
 81016fc:	58024400 	.word	0x58024400
 8101700:	58000400 	.word	0x58000400
 8101704:	58020000 	.word	0x58020000
 8101708:	58020400 	.word	0x58020400
 810170c:	58020800 	.word	0x58020800
 8101710:	58020c00 	.word	0x58020c00
 8101714:	58021000 	.word	0x58021000
 8101718:	58021400 	.word	0x58021400
 810171c:	58021800 	.word	0x58021800
 8101720:	58021c00 	.word	0x58021c00
 8101724:	58022000 	.word	0x58022000
 8101728:	58022400 	.word	0x58022400
 810172c:	2300      	movs	r3, #0
 810172e:	69fa      	ldr	r2, [r7, #28]
 8101730:	f002 0203 	and.w	r2, r2, #3
 8101734:	0092      	lsls	r2, r2, #2
 8101736:	4093      	lsls	r3, r2
 8101738:	69ba      	ldr	r2, [r7, #24]
 810173a:	4313      	orrs	r3, r2
 810173c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 810173e:	4938      	ldr	r1, [pc, #224]	@ (8101820 <HAL_GPIO_Init+0x35c>)
 8101740:	69fb      	ldr	r3, [r7, #28]
 8101742:	089b      	lsrs	r3, r3, #2
 8101744:	3302      	adds	r3, #2
 8101746:	69ba      	ldr	r2, [r7, #24]
 8101748:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 810174c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8101750:	681b      	ldr	r3, [r3, #0]
 8101752:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8101754:	693b      	ldr	r3, [r7, #16]
 8101756:	43db      	mvns	r3, r3
 8101758:	69ba      	ldr	r2, [r7, #24]
 810175a:	4013      	ands	r3, r2
 810175c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 810175e:	683b      	ldr	r3, [r7, #0]
 8101760:	685b      	ldr	r3, [r3, #4]
 8101762:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8101766:	2b00      	cmp	r3, #0
 8101768:	d003      	beq.n	8101772 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 810176a:	69ba      	ldr	r2, [r7, #24]
 810176c:	693b      	ldr	r3, [r7, #16]
 810176e:	4313      	orrs	r3, r2
 8101770:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8101772:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8101776:	69bb      	ldr	r3, [r7, #24]
 8101778:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 810177a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 810177e:	685b      	ldr	r3, [r3, #4]
 8101780:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8101782:	693b      	ldr	r3, [r7, #16]
 8101784:	43db      	mvns	r3, r3
 8101786:	69ba      	ldr	r2, [r7, #24]
 8101788:	4013      	ands	r3, r2
 810178a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 810178c:	683b      	ldr	r3, [r7, #0]
 810178e:	685b      	ldr	r3, [r3, #4]
 8101790:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8101794:	2b00      	cmp	r3, #0
 8101796:	d003      	beq.n	81017a0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8101798:	69ba      	ldr	r2, [r7, #24]
 810179a:	693b      	ldr	r3, [r7, #16]
 810179c:	4313      	orrs	r3, r2
 810179e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 81017a0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 81017a4:	69bb      	ldr	r3, [r7, #24]
 81017a6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 81017a8:	697b      	ldr	r3, [r7, #20]
 81017aa:	685b      	ldr	r3, [r3, #4]
 81017ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 81017ae:	693b      	ldr	r3, [r7, #16]
 81017b0:	43db      	mvns	r3, r3
 81017b2:	69ba      	ldr	r2, [r7, #24]
 81017b4:	4013      	ands	r3, r2
 81017b6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 81017b8:	683b      	ldr	r3, [r7, #0]
 81017ba:	685b      	ldr	r3, [r3, #4]
 81017bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 81017c0:	2b00      	cmp	r3, #0
 81017c2:	d003      	beq.n	81017cc <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 81017c4:	69ba      	ldr	r2, [r7, #24]
 81017c6:	693b      	ldr	r3, [r7, #16]
 81017c8:	4313      	orrs	r3, r2
 81017ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 81017cc:	697b      	ldr	r3, [r7, #20]
 81017ce:	69ba      	ldr	r2, [r7, #24]
 81017d0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 81017d2:	697b      	ldr	r3, [r7, #20]
 81017d4:	681b      	ldr	r3, [r3, #0]
 81017d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 81017d8:	693b      	ldr	r3, [r7, #16]
 81017da:	43db      	mvns	r3, r3
 81017dc:	69ba      	ldr	r2, [r7, #24]
 81017de:	4013      	ands	r3, r2
 81017e0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 81017e2:	683b      	ldr	r3, [r7, #0]
 81017e4:	685b      	ldr	r3, [r3, #4]
 81017e6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 81017ea:	2b00      	cmp	r3, #0
 81017ec:	d003      	beq.n	81017f6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 81017ee:	69ba      	ldr	r2, [r7, #24]
 81017f0:	693b      	ldr	r3, [r7, #16]
 81017f2:	4313      	orrs	r3, r2
 81017f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 81017f6:	697b      	ldr	r3, [r7, #20]
 81017f8:	69ba      	ldr	r2, [r7, #24]
 81017fa:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 81017fc:	69fb      	ldr	r3, [r7, #28]
 81017fe:	3301      	adds	r3, #1
 8101800:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8101802:	683b      	ldr	r3, [r7, #0]
 8101804:	681a      	ldr	r2, [r3, #0]
 8101806:	69fb      	ldr	r3, [r7, #28]
 8101808:	fa22 f303 	lsr.w	r3, r2, r3
 810180c:	2b00      	cmp	r3, #0
 810180e:	f47f ae63 	bne.w	81014d8 <HAL_GPIO_Init+0x14>
  }
}
 8101812:	bf00      	nop
 8101814:	bf00      	nop
 8101816:	3724      	adds	r7, #36	@ 0x24
 8101818:	46bd      	mov	sp, r7
 810181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810181e:	4770      	bx	lr
 8101820:	58000400 	.word	0x58000400

08101824 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8101824:	b480      	push	{r7}
 8101826:	b083      	sub	sp, #12
 8101828:	af00      	add	r7, sp, #0
 810182a:	6078      	str	r0, [r7, #4]
 810182c:	460b      	mov	r3, r1
 810182e:	807b      	strh	r3, [r7, #2]
 8101830:	4613      	mov	r3, r2
 8101832:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8101834:	787b      	ldrb	r3, [r7, #1]
 8101836:	2b00      	cmp	r3, #0
 8101838:	d003      	beq.n	8101842 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 810183a:	887a      	ldrh	r2, [r7, #2]
 810183c:	687b      	ldr	r3, [r7, #4]
 810183e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8101840:	e003      	b.n	810184a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8101842:	887b      	ldrh	r3, [r7, #2]
 8101844:	041a      	lsls	r2, r3, #16
 8101846:	687b      	ldr	r3, [r7, #4]
 8101848:	619a      	str	r2, [r3, #24]
}
 810184a:	bf00      	nop
 810184c:	370c      	adds	r7, #12
 810184e:	46bd      	mov	sp, r7
 8101850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101854:	4770      	bx	lr

08101856 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8101856:	b480      	push	{r7}
 8101858:	b085      	sub	sp, #20
 810185a:	af00      	add	r7, sp, #0
 810185c:	6078      	str	r0, [r7, #4]
 810185e:	460b      	mov	r3, r1
 8101860:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8101862:	687b      	ldr	r3, [r7, #4]
 8101864:	695b      	ldr	r3, [r3, #20]
 8101866:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8101868:	887a      	ldrh	r2, [r7, #2]
 810186a:	68fb      	ldr	r3, [r7, #12]
 810186c:	4013      	ands	r3, r2
 810186e:	041a      	lsls	r2, r3, #16
 8101870:	68fb      	ldr	r3, [r7, #12]
 8101872:	43d9      	mvns	r1, r3
 8101874:	887b      	ldrh	r3, [r7, #2]
 8101876:	400b      	ands	r3, r1
 8101878:	431a      	orrs	r2, r3
 810187a:	687b      	ldr	r3, [r7, #4]
 810187c:	619a      	str	r2, [r3, #24]
}
 810187e:	bf00      	nop
 8101880:	3714      	adds	r7, #20
 8101882:	46bd      	mov	sp, r7
 8101884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101888:	4770      	bx	lr
	...

0810188c <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 810188c:	b480      	push	{r7}
 810188e:	b083      	sub	sp, #12
 8101890:	af00      	add	r7, sp, #0
 8101892:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 8101894:	4b05      	ldr	r3, [pc, #20]	@ (81018ac <HAL_HSEM_ActivateNotification+0x20>)
 8101896:	681a      	ldr	r2, [r3, #0]
 8101898:	4904      	ldr	r1, [pc, #16]	@ (81018ac <HAL_HSEM_ActivateNotification+0x20>)
 810189a:	687b      	ldr	r3, [r7, #4]
 810189c:	4313      	orrs	r3, r2
 810189e:	600b      	str	r3, [r1, #0]
#endif
}
 81018a0:	bf00      	nop
 81018a2:	370c      	adds	r7, #12
 81018a4:	46bd      	mov	sp, r7
 81018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81018aa:	4770      	bx	lr
 81018ac:	58026510 	.word	0x58026510

081018b0 <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 81018b0:	b580      	push	{r7, lr}
 81018b2:	b084      	sub	sp, #16
 81018b4:	af00      	add	r7, sp, #0
 81018b6:	60f8      	str	r0, [r7, #12]
 81018b8:	460b      	mov	r3, r1
 81018ba:	607a      	str	r2, [r7, #4]
 81018bc:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 81018be:	4b37      	ldr	r3, [pc, #220]	@ (810199c <HAL_PWREx_EnterSTOPMode+0xec>)
 81018c0:	681b      	ldr	r3, [r3, #0]
 81018c2:	f023 0201 	bic.w	r2, r3, #1
 81018c6:	4935      	ldr	r1, [pc, #212]	@ (810199c <HAL_PWREx_EnterSTOPMode+0xec>)
 81018c8:	68fb      	ldr	r3, [r7, #12]
 81018ca:	4313      	orrs	r3, r2
 81018cc:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 81018ce:	687b      	ldr	r3, [r7, #4]
 81018d0:	2b00      	cmp	r3, #0
 81018d2:	d123      	bne.n	810191c <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 81018d4:	f7ff fde2 	bl	810149c <HAL_GetCurrentCPUID>
 81018d8:	4603      	mov	r3, r0
 81018da:	2b03      	cmp	r3, #3
 81018dc:	d158      	bne.n	8101990 <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 81018de:	4b2f      	ldr	r3, [pc, #188]	@ (810199c <HAL_PWREx_EnterSTOPMode+0xec>)
 81018e0:	691b      	ldr	r3, [r3, #16]
 81018e2:	4a2e      	ldr	r2, [pc, #184]	@ (810199c <HAL_PWREx_EnterSTOPMode+0xec>)
 81018e4:	f023 0301 	bic.w	r3, r3, #1
 81018e8:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81018ea:	4b2d      	ldr	r3, [pc, #180]	@ (81019a0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81018ec:	691b      	ldr	r3, [r3, #16]
 81018ee:	4a2c      	ldr	r2, [pc, #176]	@ (81019a0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81018f0:	f043 0304 	orr.w	r3, r3, #4
 81018f4:	6113      	str	r3, [r2, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 81018f6:	f3bf 8f4f 	dsb	sy
}
 81018fa:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 81018fc:	f3bf 8f6f 	isb	sy
}
 8101900:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8101902:	7afb      	ldrb	r3, [r7, #11]
 8101904:	2b01      	cmp	r3, #1
 8101906:	d101      	bne.n	810190c <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8101908:	bf30      	wfi
 810190a:	e000      	b.n	810190e <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 810190c:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 810190e:	4b24      	ldr	r3, [pc, #144]	@ (81019a0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101910:	691b      	ldr	r3, [r3, #16]
 8101912:	4a23      	ldr	r2, [pc, #140]	@ (81019a0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101914:	f023 0304 	bic.w	r3, r3, #4
 8101918:	6113      	str	r3, [r2, #16]
 810191a:	e03c      	b.n	8101996 <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 810191c:	687b      	ldr	r3, [r7, #4]
 810191e:	2b01      	cmp	r3, #1
 8101920:	d123      	bne.n	810196a <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 8101922:	f7ff fdbb 	bl	810149c <HAL_GetCurrentCPUID>
 8101926:	4603      	mov	r3, r0
 8101928:	2b01      	cmp	r3, #1
 810192a:	d133      	bne.n	8101994 <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 810192c:	4b1b      	ldr	r3, [pc, #108]	@ (810199c <HAL_PWREx_EnterSTOPMode+0xec>)
 810192e:	695b      	ldr	r3, [r3, #20]
 8101930:	4a1a      	ldr	r2, [pc, #104]	@ (810199c <HAL_PWREx_EnterSTOPMode+0xec>)
 8101932:	f023 0302 	bic.w	r3, r3, #2
 8101936:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8101938:	4b19      	ldr	r3, [pc, #100]	@ (81019a0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 810193a:	691b      	ldr	r3, [r3, #16]
 810193c:	4a18      	ldr	r2, [pc, #96]	@ (81019a0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 810193e:	f043 0304 	orr.w	r3, r3, #4
 8101942:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8101944:	f3bf 8f4f 	dsb	sy
}
 8101948:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 810194a:	f3bf 8f6f 	isb	sy
}
 810194e:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8101950:	7afb      	ldrb	r3, [r7, #11]
 8101952:	2b01      	cmp	r3, #1
 8101954:	d101      	bne.n	810195a <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8101956:	bf30      	wfi
 8101958:	e000      	b.n	810195c <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 810195a:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 810195c:	4b10      	ldr	r3, [pc, #64]	@ (81019a0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 810195e:	691b      	ldr	r3, [r3, #16]
 8101960:	4a0f      	ldr	r2, [pc, #60]	@ (81019a0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101962:	f023 0304 	bic.w	r3, r3, #4
 8101966:	6113      	str	r3, [r2, #16]
 8101968:	e015      	b.n	8101996 <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 810196a:	f7ff fd97 	bl	810149c <HAL_GetCurrentCPUID>
 810196e:	4603      	mov	r3, r0
 8101970:	2b03      	cmp	r3, #3
 8101972:	d106      	bne.n	8101982 <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 8101974:	4b09      	ldr	r3, [pc, #36]	@ (810199c <HAL_PWREx_EnterSTOPMode+0xec>)
 8101976:	691b      	ldr	r3, [r3, #16]
 8101978:	4a08      	ldr	r2, [pc, #32]	@ (810199c <HAL_PWREx_EnterSTOPMode+0xec>)
 810197a:	f023 0304 	bic.w	r3, r3, #4
 810197e:	6113      	str	r3, [r2, #16]
 8101980:	e009      	b.n	8101996 <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 8101982:	4b06      	ldr	r3, [pc, #24]	@ (810199c <HAL_PWREx_EnterSTOPMode+0xec>)
 8101984:	695b      	ldr	r3, [r3, #20]
 8101986:	4a05      	ldr	r2, [pc, #20]	@ (810199c <HAL_PWREx_EnterSTOPMode+0xec>)
 8101988:	f023 0304 	bic.w	r3, r3, #4
 810198c:	6153      	str	r3, [r2, #20]
 810198e:	e002      	b.n	8101996 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8101990:	bf00      	nop
 8101992:	e000      	b.n	8101996 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8101994:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 8101996:	3710      	adds	r7, #16
 8101998:	46bd      	mov	sp, r7
 810199a:	bd80      	pop	{r7, pc}
 810199c:	58024800 	.word	0x58024800
 81019a0:	e000ed00 	.word	0xe000ed00

081019a4 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 81019a4:	b580      	push	{r7, lr}
 81019a6:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 81019a8:	f7ff fd78 	bl	810149c <HAL_GetCurrentCPUID>
 81019ac:	4603      	mov	r3, r0
 81019ae:	2b03      	cmp	r3, #3
 81019b0:	d101      	bne.n	81019b6 <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 81019b2:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 81019b4:	e001      	b.n	81019ba <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 81019b6:	bf40      	sev
    __WFE ();
 81019b8:	bf20      	wfe
}
 81019ba:	bf00      	nop
 81019bc:	bd80      	pop	{r7, pc}
	...

081019c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 81019c0:	b480      	push	{r7}
 81019c2:	b089      	sub	sp, #36	@ 0x24
 81019c4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 81019c6:	4bb3      	ldr	r3, [pc, #716]	@ (8101c94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81019c8:	691b      	ldr	r3, [r3, #16]
 81019ca:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 81019ce:	2b18      	cmp	r3, #24
 81019d0:	f200 8155 	bhi.w	8101c7e <HAL_RCC_GetSysClockFreq+0x2be>
 81019d4:	a201      	add	r2, pc, #4	@ (adr r2, 81019dc <HAL_RCC_GetSysClockFreq+0x1c>)
 81019d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81019da:	bf00      	nop
 81019dc:	08101a41 	.word	0x08101a41
 81019e0:	08101c7f 	.word	0x08101c7f
 81019e4:	08101c7f 	.word	0x08101c7f
 81019e8:	08101c7f 	.word	0x08101c7f
 81019ec:	08101c7f 	.word	0x08101c7f
 81019f0:	08101c7f 	.word	0x08101c7f
 81019f4:	08101c7f 	.word	0x08101c7f
 81019f8:	08101c7f 	.word	0x08101c7f
 81019fc:	08101a67 	.word	0x08101a67
 8101a00:	08101c7f 	.word	0x08101c7f
 8101a04:	08101c7f 	.word	0x08101c7f
 8101a08:	08101c7f 	.word	0x08101c7f
 8101a0c:	08101c7f 	.word	0x08101c7f
 8101a10:	08101c7f 	.word	0x08101c7f
 8101a14:	08101c7f 	.word	0x08101c7f
 8101a18:	08101c7f 	.word	0x08101c7f
 8101a1c:	08101a6d 	.word	0x08101a6d
 8101a20:	08101c7f 	.word	0x08101c7f
 8101a24:	08101c7f 	.word	0x08101c7f
 8101a28:	08101c7f 	.word	0x08101c7f
 8101a2c:	08101c7f 	.word	0x08101c7f
 8101a30:	08101c7f 	.word	0x08101c7f
 8101a34:	08101c7f 	.word	0x08101c7f
 8101a38:	08101c7f 	.word	0x08101c7f
 8101a3c:	08101a73 	.word	0x08101a73
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8101a40:	4b94      	ldr	r3, [pc, #592]	@ (8101c94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101a42:	681b      	ldr	r3, [r3, #0]
 8101a44:	f003 0320 	and.w	r3, r3, #32
 8101a48:	2b00      	cmp	r3, #0
 8101a4a:	d009      	beq.n	8101a60 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8101a4c:	4b91      	ldr	r3, [pc, #580]	@ (8101c94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101a4e:	681b      	ldr	r3, [r3, #0]
 8101a50:	08db      	lsrs	r3, r3, #3
 8101a52:	f003 0303 	and.w	r3, r3, #3
 8101a56:	4a90      	ldr	r2, [pc, #576]	@ (8101c98 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8101a58:	fa22 f303 	lsr.w	r3, r2, r3
 8101a5c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8101a5e:	e111      	b.n	8101c84 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8101a60:	4b8d      	ldr	r3, [pc, #564]	@ (8101c98 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8101a62:	61bb      	str	r3, [r7, #24]
      break;
 8101a64:	e10e      	b.n	8101c84 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8101a66:	4b8d      	ldr	r3, [pc, #564]	@ (8101c9c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8101a68:	61bb      	str	r3, [r7, #24]
      break;
 8101a6a:	e10b      	b.n	8101c84 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8101a6c:	4b8c      	ldr	r3, [pc, #560]	@ (8101ca0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8101a6e:	61bb      	str	r3, [r7, #24]
      break;
 8101a70:	e108      	b.n	8101c84 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8101a72:	4b88      	ldr	r3, [pc, #544]	@ (8101c94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101a74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8101a76:	f003 0303 	and.w	r3, r3, #3
 8101a7a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8101a7c:	4b85      	ldr	r3, [pc, #532]	@ (8101c94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101a7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8101a80:	091b      	lsrs	r3, r3, #4
 8101a82:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8101a86:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8101a88:	4b82      	ldr	r3, [pc, #520]	@ (8101c94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101a8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8101a8c:	f003 0301 	and.w	r3, r3, #1
 8101a90:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8101a92:	4b80      	ldr	r3, [pc, #512]	@ (8101c94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101a94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8101a96:	08db      	lsrs	r3, r3, #3
 8101a98:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8101a9c:	68fa      	ldr	r2, [r7, #12]
 8101a9e:	fb02 f303 	mul.w	r3, r2, r3
 8101aa2:	ee07 3a90 	vmov	s15, r3
 8101aa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101aaa:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8101aae:	693b      	ldr	r3, [r7, #16]
 8101ab0:	2b00      	cmp	r3, #0
 8101ab2:	f000 80e1 	beq.w	8101c78 <HAL_RCC_GetSysClockFreq+0x2b8>
 8101ab6:	697b      	ldr	r3, [r7, #20]
 8101ab8:	2b02      	cmp	r3, #2
 8101aba:	f000 8083 	beq.w	8101bc4 <HAL_RCC_GetSysClockFreq+0x204>
 8101abe:	697b      	ldr	r3, [r7, #20]
 8101ac0:	2b02      	cmp	r3, #2
 8101ac2:	f200 80a1 	bhi.w	8101c08 <HAL_RCC_GetSysClockFreq+0x248>
 8101ac6:	697b      	ldr	r3, [r7, #20]
 8101ac8:	2b00      	cmp	r3, #0
 8101aca:	d003      	beq.n	8101ad4 <HAL_RCC_GetSysClockFreq+0x114>
 8101acc:	697b      	ldr	r3, [r7, #20]
 8101ace:	2b01      	cmp	r3, #1
 8101ad0:	d056      	beq.n	8101b80 <HAL_RCC_GetSysClockFreq+0x1c0>
 8101ad2:	e099      	b.n	8101c08 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8101ad4:	4b6f      	ldr	r3, [pc, #444]	@ (8101c94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101ad6:	681b      	ldr	r3, [r3, #0]
 8101ad8:	f003 0320 	and.w	r3, r3, #32
 8101adc:	2b00      	cmp	r3, #0
 8101ade:	d02d      	beq.n	8101b3c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8101ae0:	4b6c      	ldr	r3, [pc, #432]	@ (8101c94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101ae2:	681b      	ldr	r3, [r3, #0]
 8101ae4:	08db      	lsrs	r3, r3, #3
 8101ae6:	f003 0303 	and.w	r3, r3, #3
 8101aea:	4a6b      	ldr	r2, [pc, #428]	@ (8101c98 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8101aec:	fa22 f303 	lsr.w	r3, r2, r3
 8101af0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8101af2:	687b      	ldr	r3, [r7, #4]
 8101af4:	ee07 3a90 	vmov	s15, r3
 8101af8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8101afc:	693b      	ldr	r3, [r7, #16]
 8101afe:	ee07 3a90 	vmov	s15, r3
 8101b02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101b06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8101b0a:	4b62      	ldr	r3, [pc, #392]	@ (8101c94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101b0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8101b0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8101b12:	ee07 3a90 	vmov	s15, r3
 8101b16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8101b1a:	ed97 6a02 	vldr	s12, [r7, #8]
 8101b1e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8101ca4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8101b22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8101b26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8101b2a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8101b2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8101b32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101b36:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8101b3a:	e087      	b.n	8101c4c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8101b3c:	693b      	ldr	r3, [r7, #16]
 8101b3e:	ee07 3a90 	vmov	s15, r3
 8101b42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101b46:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8101ca8 <HAL_RCC_GetSysClockFreq+0x2e8>
 8101b4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8101b4e:	4b51      	ldr	r3, [pc, #324]	@ (8101c94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101b50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8101b52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8101b56:	ee07 3a90 	vmov	s15, r3
 8101b5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8101b5e:	ed97 6a02 	vldr	s12, [r7, #8]
 8101b62:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8101ca4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8101b66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8101b6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8101b6e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8101b72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8101b76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101b7a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8101b7e:	e065      	b.n	8101c4c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8101b80:	693b      	ldr	r3, [r7, #16]
 8101b82:	ee07 3a90 	vmov	s15, r3
 8101b86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101b8a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8101cac <HAL_RCC_GetSysClockFreq+0x2ec>
 8101b8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8101b92:	4b40      	ldr	r3, [pc, #256]	@ (8101c94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101b94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8101b96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8101b9a:	ee07 3a90 	vmov	s15, r3
 8101b9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8101ba2:	ed97 6a02 	vldr	s12, [r7, #8]
 8101ba6:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8101ca4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8101baa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8101bae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8101bb2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8101bb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8101bba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101bbe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8101bc2:	e043      	b.n	8101c4c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8101bc4:	693b      	ldr	r3, [r7, #16]
 8101bc6:	ee07 3a90 	vmov	s15, r3
 8101bca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101bce:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8101cb0 <HAL_RCC_GetSysClockFreq+0x2f0>
 8101bd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8101bd6:	4b2f      	ldr	r3, [pc, #188]	@ (8101c94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101bd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8101bda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8101bde:	ee07 3a90 	vmov	s15, r3
 8101be2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8101be6:	ed97 6a02 	vldr	s12, [r7, #8]
 8101bea:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8101ca4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8101bee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8101bf2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8101bf6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8101bfa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8101bfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101c02:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8101c06:	e021      	b.n	8101c4c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8101c08:	693b      	ldr	r3, [r7, #16]
 8101c0a:	ee07 3a90 	vmov	s15, r3
 8101c0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101c12:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8101cac <HAL_RCC_GetSysClockFreq+0x2ec>
 8101c16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8101c1a:	4b1e      	ldr	r3, [pc, #120]	@ (8101c94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101c1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8101c1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8101c22:	ee07 3a90 	vmov	s15, r3
 8101c26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8101c2a:	ed97 6a02 	vldr	s12, [r7, #8]
 8101c2e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8101ca4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8101c32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8101c36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8101c3a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8101c3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8101c42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101c46:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8101c4a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8101c4c:	4b11      	ldr	r3, [pc, #68]	@ (8101c94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101c4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8101c50:	0a5b      	lsrs	r3, r3, #9
 8101c52:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8101c56:	3301      	adds	r3, #1
 8101c58:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8101c5a:	683b      	ldr	r3, [r7, #0]
 8101c5c:	ee07 3a90 	vmov	s15, r3
 8101c60:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8101c64:	edd7 6a07 	vldr	s13, [r7, #28]
 8101c68:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8101c6c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8101c70:	ee17 3a90 	vmov	r3, s15
 8101c74:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8101c76:	e005      	b.n	8101c84 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8101c78:	2300      	movs	r3, #0
 8101c7a:	61bb      	str	r3, [r7, #24]
      break;
 8101c7c:	e002      	b.n	8101c84 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8101c7e:	4b07      	ldr	r3, [pc, #28]	@ (8101c9c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8101c80:	61bb      	str	r3, [r7, #24]
      break;
 8101c82:	bf00      	nop
  }

  return sysclockfreq;
 8101c84:	69bb      	ldr	r3, [r7, #24]
}
 8101c86:	4618      	mov	r0, r3
 8101c88:	3724      	adds	r7, #36	@ 0x24
 8101c8a:	46bd      	mov	sp, r7
 8101c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101c90:	4770      	bx	lr
 8101c92:	bf00      	nop
 8101c94:	58024400 	.word	0x58024400
 8101c98:	03d09000 	.word	0x03d09000
 8101c9c:	003d0900 	.word	0x003d0900
 8101ca0:	017d7840 	.word	0x017d7840
 8101ca4:	46000000 	.word	0x46000000
 8101ca8:	4c742400 	.word	0x4c742400
 8101cac:	4a742400 	.word	0x4a742400
 8101cb0:	4bbebc20 	.word	0x4bbebc20

08101cb4 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8101cb4:	b580      	push	{r7, lr}
 8101cb6:	b084      	sub	sp, #16
 8101cb8:	af00      	add	r7, sp, #0
 8101cba:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8101cbc:	687b      	ldr	r3, [r7, #4]
 8101cbe:	2b00      	cmp	r3, #0
 8101cc0:	d101      	bne.n	8101cc6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8101cc2:	2301      	movs	r3, #1
 8101cc4:	e10f      	b.n	8101ee6 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8101cc6:	687b      	ldr	r3, [r7, #4]
 8101cc8:	2200      	movs	r2, #0
 8101cca:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8101ccc:	687b      	ldr	r3, [r7, #4]
 8101cce:	681b      	ldr	r3, [r3, #0]
 8101cd0:	4a87      	ldr	r2, [pc, #540]	@ (8101ef0 <HAL_SPI_Init+0x23c>)
 8101cd2:	4293      	cmp	r3, r2
 8101cd4:	d00f      	beq.n	8101cf6 <HAL_SPI_Init+0x42>
 8101cd6:	687b      	ldr	r3, [r7, #4]
 8101cd8:	681b      	ldr	r3, [r3, #0]
 8101cda:	4a86      	ldr	r2, [pc, #536]	@ (8101ef4 <HAL_SPI_Init+0x240>)
 8101cdc:	4293      	cmp	r3, r2
 8101cde:	d00a      	beq.n	8101cf6 <HAL_SPI_Init+0x42>
 8101ce0:	687b      	ldr	r3, [r7, #4]
 8101ce2:	681b      	ldr	r3, [r3, #0]
 8101ce4:	4a84      	ldr	r2, [pc, #528]	@ (8101ef8 <HAL_SPI_Init+0x244>)
 8101ce6:	4293      	cmp	r3, r2
 8101ce8:	d005      	beq.n	8101cf6 <HAL_SPI_Init+0x42>
 8101cea:	687b      	ldr	r3, [r7, #4]
 8101cec:	68db      	ldr	r3, [r3, #12]
 8101cee:	2b0f      	cmp	r3, #15
 8101cf0:	d901      	bls.n	8101cf6 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8101cf2:	2301      	movs	r3, #1
 8101cf4:	e0f7      	b.n	8101ee6 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8101cf6:	6878      	ldr	r0, [r7, #4]
 8101cf8:	f001 f962 	bl	8102fc0 <SPI_GetPacketSize>
 8101cfc:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8101cfe:	687b      	ldr	r3, [r7, #4]
 8101d00:	681b      	ldr	r3, [r3, #0]
 8101d02:	4a7b      	ldr	r2, [pc, #492]	@ (8101ef0 <HAL_SPI_Init+0x23c>)
 8101d04:	4293      	cmp	r3, r2
 8101d06:	d00c      	beq.n	8101d22 <HAL_SPI_Init+0x6e>
 8101d08:	687b      	ldr	r3, [r7, #4]
 8101d0a:	681b      	ldr	r3, [r3, #0]
 8101d0c:	4a79      	ldr	r2, [pc, #484]	@ (8101ef4 <HAL_SPI_Init+0x240>)
 8101d0e:	4293      	cmp	r3, r2
 8101d10:	d007      	beq.n	8101d22 <HAL_SPI_Init+0x6e>
 8101d12:	687b      	ldr	r3, [r7, #4]
 8101d14:	681b      	ldr	r3, [r3, #0]
 8101d16:	4a78      	ldr	r2, [pc, #480]	@ (8101ef8 <HAL_SPI_Init+0x244>)
 8101d18:	4293      	cmp	r3, r2
 8101d1a:	d002      	beq.n	8101d22 <HAL_SPI_Init+0x6e>
 8101d1c:	68fb      	ldr	r3, [r7, #12]
 8101d1e:	2b08      	cmp	r3, #8
 8101d20:	d811      	bhi.n	8101d46 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8101d22:	687b      	ldr	r3, [r7, #4]
 8101d24:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8101d26:	4a72      	ldr	r2, [pc, #456]	@ (8101ef0 <HAL_SPI_Init+0x23c>)
 8101d28:	4293      	cmp	r3, r2
 8101d2a:	d009      	beq.n	8101d40 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8101d2c:	687b      	ldr	r3, [r7, #4]
 8101d2e:	681b      	ldr	r3, [r3, #0]
 8101d30:	4a70      	ldr	r2, [pc, #448]	@ (8101ef4 <HAL_SPI_Init+0x240>)
 8101d32:	4293      	cmp	r3, r2
 8101d34:	d004      	beq.n	8101d40 <HAL_SPI_Init+0x8c>
 8101d36:	687b      	ldr	r3, [r7, #4]
 8101d38:	681b      	ldr	r3, [r3, #0]
 8101d3a:	4a6f      	ldr	r2, [pc, #444]	@ (8101ef8 <HAL_SPI_Init+0x244>)
 8101d3c:	4293      	cmp	r3, r2
 8101d3e:	d104      	bne.n	8101d4a <HAL_SPI_Init+0x96>
 8101d40:	68fb      	ldr	r3, [r7, #12]
 8101d42:	2b10      	cmp	r3, #16
 8101d44:	d901      	bls.n	8101d4a <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8101d46:	2301      	movs	r3, #1
 8101d48:	e0cd      	b.n	8101ee6 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8101d4a:	687b      	ldr	r3, [r7, #4]
 8101d4c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8101d50:	b2db      	uxtb	r3, r3
 8101d52:	2b00      	cmp	r3, #0
 8101d54:	d106      	bne.n	8101d64 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8101d56:	687b      	ldr	r3, [r7, #4]
 8101d58:	2200      	movs	r2, #0
 8101d5a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8101d5e:	6878      	ldr	r0, [r7, #4]
 8101d60:	f7ff f902 	bl	8100f68 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8101d64:	687b      	ldr	r3, [r7, #4]
 8101d66:	2202      	movs	r2, #2
 8101d68:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8101d6c:	687b      	ldr	r3, [r7, #4]
 8101d6e:	681b      	ldr	r3, [r3, #0]
 8101d70:	681a      	ldr	r2, [r3, #0]
 8101d72:	687b      	ldr	r3, [r7, #4]
 8101d74:	681b      	ldr	r3, [r3, #0]
 8101d76:	f022 0201 	bic.w	r2, r2, #1
 8101d7a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8101d7c:	687b      	ldr	r3, [r7, #4]
 8101d7e:	681b      	ldr	r3, [r3, #0]
 8101d80:	689b      	ldr	r3, [r3, #8]
 8101d82:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8101d86:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8101d88:	687b      	ldr	r3, [r7, #4]
 8101d8a:	699b      	ldr	r3, [r3, #24]
 8101d8c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8101d90:	d119      	bne.n	8101dc6 <HAL_SPI_Init+0x112>
 8101d92:	687b      	ldr	r3, [r7, #4]
 8101d94:	685b      	ldr	r3, [r3, #4]
 8101d96:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8101d9a:	d103      	bne.n	8101da4 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8101d9c:	687b      	ldr	r3, [r7, #4]
 8101d9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8101da0:	2b00      	cmp	r3, #0
 8101da2:	d008      	beq.n	8101db6 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8101da4:	687b      	ldr	r3, [r7, #4]
 8101da6:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8101da8:	2b00      	cmp	r3, #0
 8101daa:	d10c      	bne.n	8101dc6 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8101dac:	687b      	ldr	r3, [r7, #4]
 8101dae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8101db0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8101db4:	d107      	bne.n	8101dc6 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8101db6:	687b      	ldr	r3, [r7, #4]
 8101db8:	681b      	ldr	r3, [r3, #0]
 8101dba:	681a      	ldr	r2, [r3, #0]
 8101dbc:	687b      	ldr	r3, [r7, #4]
 8101dbe:	681b      	ldr	r3, [r3, #0]
 8101dc0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8101dc4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8101dc6:	687b      	ldr	r3, [r7, #4]
 8101dc8:	685b      	ldr	r3, [r3, #4]
 8101dca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8101dce:	2b00      	cmp	r3, #0
 8101dd0:	d00f      	beq.n	8101df2 <HAL_SPI_Init+0x13e>
 8101dd2:	687b      	ldr	r3, [r7, #4]
 8101dd4:	68db      	ldr	r3, [r3, #12]
 8101dd6:	2b06      	cmp	r3, #6
 8101dd8:	d90b      	bls.n	8101df2 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8101dda:	687b      	ldr	r3, [r7, #4]
 8101ddc:	681b      	ldr	r3, [r3, #0]
 8101dde:	681b      	ldr	r3, [r3, #0]
 8101de0:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8101de4:	687b      	ldr	r3, [r7, #4]
 8101de6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8101de8:	687b      	ldr	r3, [r7, #4]
 8101dea:	681b      	ldr	r3, [r3, #0]
 8101dec:	430a      	orrs	r2, r1
 8101dee:	601a      	str	r2, [r3, #0]
 8101df0:	e007      	b.n	8101e02 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8101df2:	687b      	ldr	r3, [r7, #4]
 8101df4:	681b      	ldr	r3, [r3, #0]
 8101df6:	681a      	ldr	r2, [r3, #0]
 8101df8:	687b      	ldr	r3, [r7, #4]
 8101dfa:	681b      	ldr	r3, [r3, #0]
 8101dfc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8101e00:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8101e02:	687b      	ldr	r3, [r7, #4]
 8101e04:	69da      	ldr	r2, [r3, #28]
 8101e06:	687b      	ldr	r3, [r7, #4]
 8101e08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8101e0a:	431a      	orrs	r2, r3
 8101e0c:	68bb      	ldr	r3, [r7, #8]
 8101e0e:	431a      	orrs	r2, r3
 8101e10:	687b      	ldr	r3, [r7, #4]
 8101e12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8101e14:	ea42 0103 	orr.w	r1, r2, r3
 8101e18:	687b      	ldr	r3, [r7, #4]
 8101e1a:	68da      	ldr	r2, [r3, #12]
 8101e1c:	687b      	ldr	r3, [r7, #4]
 8101e1e:	681b      	ldr	r3, [r3, #0]
 8101e20:	430a      	orrs	r2, r1
 8101e22:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8101e24:	687b      	ldr	r3, [r7, #4]
 8101e26:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8101e28:	687b      	ldr	r3, [r7, #4]
 8101e2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8101e2c:	431a      	orrs	r2, r3
 8101e2e:	687b      	ldr	r3, [r7, #4]
 8101e30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8101e32:	431a      	orrs	r2, r3
 8101e34:	687b      	ldr	r3, [r7, #4]
 8101e36:	699b      	ldr	r3, [r3, #24]
 8101e38:	431a      	orrs	r2, r3
 8101e3a:	687b      	ldr	r3, [r7, #4]
 8101e3c:	691b      	ldr	r3, [r3, #16]
 8101e3e:	431a      	orrs	r2, r3
 8101e40:	687b      	ldr	r3, [r7, #4]
 8101e42:	695b      	ldr	r3, [r3, #20]
 8101e44:	431a      	orrs	r2, r3
 8101e46:	687b      	ldr	r3, [r7, #4]
 8101e48:	6a1b      	ldr	r3, [r3, #32]
 8101e4a:	431a      	orrs	r2, r3
 8101e4c:	687b      	ldr	r3, [r7, #4]
 8101e4e:	685b      	ldr	r3, [r3, #4]
 8101e50:	431a      	orrs	r2, r3
 8101e52:	687b      	ldr	r3, [r7, #4]
 8101e54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8101e56:	431a      	orrs	r2, r3
 8101e58:	687b      	ldr	r3, [r7, #4]
 8101e5a:	689b      	ldr	r3, [r3, #8]
 8101e5c:	431a      	orrs	r2, r3
 8101e5e:	687b      	ldr	r3, [r7, #4]
 8101e60:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8101e62:	ea42 0103 	orr.w	r1, r2, r3
 8101e66:	687b      	ldr	r3, [r7, #4]
 8101e68:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8101e6a:	687b      	ldr	r3, [r7, #4]
 8101e6c:	681b      	ldr	r3, [r3, #0]
 8101e6e:	430a      	orrs	r2, r1
 8101e70:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8101e72:	687b      	ldr	r3, [r7, #4]
 8101e74:	685b      	ldr	r3, [r3, #4]
 8101e76:	2b00      	cmp	r3, #0
 8101e78:	d113      	bne.n	8101ea2 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8101e7a:	687b      	ldr	r3, [r7, #4]
 8101e7c:	681b      	ldr	r3, [r3, #0]
 8101e7e:	689b      	ldr	r3, [r3, #8]
 8101e80:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8101e84:	687b      	ldr	r3, [r7, #4]
 8101e86:	681b      	ldr	r3, [r3, #0]
 8101e88:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8101e8c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8101e8e:	687b      	ldr	r3, [r7, #4]
 8101e90:	681b      	ldr	r3, [r3, #0]
 8101e92:	689b      	ldr	r3, [r3, #8]
 8101e94:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8101e98:	687b      	ldr	r3, [r7, #4]
 8101e9a:	681b      	ldr	r3, [r3, #0]
 8101e9c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8101ea0:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8101ea2:	687b      	ldr	r3, [r7, #4]
 8101ea4:	681b      	ldr	r3, [r3, #0]
 8101ea6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8101ea8:	687b      	ldr	r3, [r7, #4]
 8101eaa:	681b      	ldr	r3, [r3, #0]
 8101eac:	f022 0201 	bic.w	r2, r2, #1
 8101eb0:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8101eb2:	687b      	ldr	r3, [r7, #4]
 8101eb4:	685b      	ldr	r3, [r3, #4]
 8101eb6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8101eba:	2b00      	cmp	r3, #0
 8101ebc:	d00a      	beq.n	8101ed4 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8101ebe:	687b      	ldr	r3, [r7, #4]
 8101ec0:	681b      	ldr	r3, [r3, #0]
 8101ec2:	68db      	ldr	r3, [r3, #12]
 8101ec4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8101ec8:	687b      	ldr	r3, [r7, #4]
 8101eca:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8101ecc:	687b      	ldr	r3, [r7, #4]
 8101ece:	681b      	ldr	r3, [r3, #0]
 8101ed0:	430a      	orrs	r2, r1
 8101ed2:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8101ed4:	687b      	ldr	r3, [r7, #4]
 8101ed6:	2200      	movs	r2, #0
 8101ed8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8101edc:	687b      	ldr	r3, [r7, #4]
 8101ede:	2201      	movs	r2, #1
 8101ee0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8101ee4:	2300      	movs	r3, #0
}
 8101ee6:	4618      	mov	r0, r3
 8101ee8:	3710      	adds	r7, #16
 8101eea:	46bd      	mov	sp, r7
 8101eec:	bd80      	pop	{r7, pc}
 8101eee:	bf00      	nop
 8101ef0:	40013000 	.word	0x40013000
 8101ef4:	40003800 	.word	0x40003800
 8101ef8:	40003c00 	.word	0x40003c00

08101efc <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8101efc:	b580      	push	{r7, lr}
 8101efe:	b088      	sub	sp, #32
 8101f00:	af02      	add	r7, sp, #8
 8101f02:	60f8      	str	r0, [r7, #12]
 8101f04:	60b9      	str	r1, [r7, #8]
 8101f06:	603b      	str	r3, [r7, #0]
 8101f08:	4613      	mov	r3, r2
 8101f0a:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8101f0c:	68fb      	ldr	r3, [r7, #12]
 8101f0e:	681b      	ldr	r3, [r3, #0]
 8101f10:	3320      	adds	r3, #32
 8101f12:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8101f14:	f7ff f9ae 	bl	8101274 <HAL_GetTick>
 8101f18:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8101f1a:	68fb      	ldr	r3, [r7, #12]
 8101f1c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8101f20:	b2db      	uxtb	r3, r3
 8101f22:	2b01      	cmp	r3, #1
 8101f24:	d001      	beq.n	8101f2a <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 8101f26:	2302      	movs	r3, #2
 8101f28:	e1cf      	b.n	81022ca <HAL_SPI_Transmit+0x3ce>
  }

  if ((pData == NULL) || (Size == 0UL))
 8101f2a:	68bb      	ldr	r3, [r7, #8]
 8101f2c:	2b00      	cmp	r3, #0
 8101f2e:	d002      	beq.n	8101f36 <HAL_SPI_Transmit+0x3a>
 8101f30:	88fb      	ldrh	r3, [r7, #6]
 8101f32:	2b00      	cmp	r3, #0
 8101f34:	d101      	bne.n	8101f3a <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 8101f36:	2301      	movs	r3, #1
 8101f38:	e1c7      	b.n	81022ca <HAL_SPI_Transmit+0x3ce>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8101f3a:	68fb      	ldr	r3, [r7, #12]
 8101f3c:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8101f40:	2b01      	cmp	r3, #1
 8101f42:	d101      	bne.n	8101f48 <HAL_SPI_Transmit+0x4c>
 8101f44:	2302      	movs	r3, #2
 8101f46:	e1c0      	b.n	81022ca <HAL_SPI_Transmit+0x3ce>
 8101f48:	68fb      	ldr	r3, [r7, #12]
 8101f4a:	2201      	movs	r2, #1
 8101f4c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8101f50:	68fb      	ldr	r3, [r7, #12]
 8101f52:	2203      	movs	r2, #3
 8101f54:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8101f58:	68fb      	ldr	r3, [r7, #12]
 8101f5a:	2200      	movs	r2, #0
 8101f5c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8101f60:	68fb      	ldr	r3, [r7, #12]
 8101f62:	68ba      	ldr	r2, [r7, #8]
 8101f64:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 8101f66:	68fb      	ldr	r3, [r7, #12]
 8101f68:	88fa      	ldrh	r2, [r7, #6]
 8101f6a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 8101f6e:	68fb      	ldr	r3, [r7, #12]
 8101f70:	88fa      	ldrh	r2, [r7, #6]
 8101f72:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8101f76:	68fb      	ldr	r3, [r7, #12]
 8101f78:	2200      	movs	r2, #0
 8101f7a:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8101f7c:	68fb      	ldr	r3, [r7, #12]
 8101f7e:	2200      	movs	r2, #0
 8101f80:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8101f84:	68fb      	ldr	r3, [r7, #12]
 8101f86:	2200      	movs	r2, #0
 8101f88:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 8101f8c:	68fb      	ldr	r3, [r7, #12]
 8101f8e:	2200      	movs	r2, #0
 8101f90:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 8101f92:	68fb      	ldr	r3, [r7, #12]
 8101f94:	2200      	movs	r2, #0
 8101f96:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8101f98:	68fb      	ldr	r3, [r7, #12]
 8101f9a:	689b      	ldr	r3, [r3, #8]
 8101f9c:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8101fa0:	d108      	bne.n	8101fb4 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 8101fa2:	68fb      	ldr	r3, [r7, #12]
 8101fa4:	681b      	ldr	r3, [r3, #0]
 8101fa6:	681a      	ldr	r2, [r3, #0]
 8101fa8:	68fb      	ldr	r3, [r7, #12]
 8101faa:	681b      	ldr	r3, [r3, #0]
 8101fac:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8101fb0:	601a      	str	r2, [r3, #0]
 8101fb2:	e009      	b.n	8101fc8 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8101fb4:	68fb      	ldr	r3, [r7, #12]
 8101fb6:	681b      	ldr	r3, [r3, #0]
 8101fb8:	68db      	ldr	r3, [r3, #12]
 8101fba:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8101fbe:	68fb      	ldr	r3, [r7, #12]
 8101fc0:	681b      	ldr	r3, [r3, #0]
 8101fc2:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8101fc6:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8101fc8:	68fb      	ldr	r3, [r7, #12]
 8101fca:	681b      	ldr	r3, [r3, #0]
 8101fcc:	685b      	ldr	r3, [r3, #4]
 8101fce:	0c1b      	lsrs	r3, r3, #16
 8101fd0:	041b      	lsls	r3, r3, #16
 8101fd2:	88f9      	ldrh	r1, [r7, #6]
 8101fd4:	68fa      	ldr	r2, [r7, #12]
 8101fd6:	6812      	ldr	r2, [r2, #0]
 8101fd8:	430b      	orrs	r3, r1
 8101fda:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8101fdc:	68fb      	ldr	r3, [r7, #12]
 8101fde:	681b      	ldr	r3, [r3, #0]
 8101fe0:	681a      	ldr	r2, [r3, #0]
 8101fe2:	68fb      	ldr	r3, [r7, #12]
 8101fe4:	681b      	ldr	r3, [r3, #0]
 8101fe6:	f042 0201 	orr.w	r2, r2, #1
 8101fea:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8101fec:	68fb      	ldr	r3, [r7, #12]
 8101fee:	685b      	ldr	r3, [r3, #4]
 8101ff0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8101ff4:	d107      	bne.n	8102006 <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8101ff6:	68fb      	ldr	r3, [r7, #12]
 8101ff8:	681b      	ldr	r3, [r3, #0]
 8101ffa:	681a      	ldr	r2, [r3, #0]
 8101ffc:	68fb      	ldr	r3, [r7, #12]
 8101ffe:	681b      	ldr	r3, [r3, #0]
 8102000:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8102004:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8102006:	68fb      	ldr	r3, [r7, #12]
 8102008:	68db      	ldr	r3, [r3, #12]
 810200a:	2b0f      	cmp	r3, #15
 810200c:	d947      	bls.n	810209e <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 810200e:	e03f      	b.n	8102090 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8102010:	68fb      	ldr	r3, [r7, #12]
 8102012:	681b      	ldr	r3, [r3, #0]
 8102014:	695b      	ldr	r3, [r3, #20]
 8102016:	f003 0302 	and.w	r3, r3, #2
 810201a:	2b02      	cmp	r3, #2
 810201c:	d114      	bne.n	8102048 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 810201e:	68fb      	ldr	r3, [r7, #12]
 8102020:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8102022:	68fb      	ldr	r3, [r7, #12]
 8102024:	681b      	ldr	r3, [r3, #0]
 8102026:	6812      	ldr	r2, [r2, #0]
 8102028:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 810202a:	68fb      	ldr	r3, [r7, #12]
 810202c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 810202e:	1d1a      	adds	r2, r3, #4
 8102030:	68fb      	ldr	r3, [r7, #12]
 8102032:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8102034:	68fb      	ldr	r3, [r7, #12]
 8102036:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 810203a:	b29b      	uxth	r3, r3
 810203c:	3b01      	subs	r3, #1
 810203e:	b29a      	uxth	r2, r3
 8102040:	68fb      	ldr	r3, [r7, #12]
 8102042:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8102046:	e023      	b.n	8102090 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8102048:	f7ff f914 	bl	8101274 <HAL_GetTick>
 810204c:	4602      	mov	r2, r0
 810204e:	693b      	ldr	r3, [r7, #16]
 8102050:	1ad3      	subs	r3, r2, r3
 8102052:	683a      	ldr	r2, [r7, #0]
 8102054:	429a      	cmp	r2, r3
 8102056:	d803      	bhi.n	8102060 <HAL_SPI_Transmit+0x164>
 8102058:	683b      	ldr	r3, [r7, #0]
 810205a:	f1b3 3fff 	cmp.w	r3, #4294967295
 810205e:	d102      	bne.n	8102066 <HAL_SPI_Transmit+0x16a>
 8102060:	683b      	ldr	r3, [r7, #0]
 8102062:	2b00      	cmp	r3, #0
 8102064:	d114      	bne.n	8102090 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8102066:	68f8      	ldr	r0, [r7, #12]
 8102068:	f000 fedc 	bl	8102e24 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 810206c:	68fb      	ldr	r3, [r7, #12]
 810206e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8102072:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8102076:	68fb      	ldr	r3, [r7, #12]
 8102078:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 810207c:	68fb      	ldr	r3, [r7, #12]
 810207e:	2201      	movs	r2, #1
 8102080:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8102084:	68fb      	ldr	r3, [r7, #12]
 8102086:	2200      	movs	r2, #0
 8102088:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 810208c:	2303      	movs	r3, #3
 810208e:	e11c      	b.n	81022ca <HAL_SPI_Transmit+0x3ce>
    while (hspi->TxXferCount > 0UL)
 8102090:	68fb      	ldr	r3, [r7, #12]
 8102092:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8102096:	b29b      	uxth	r3, r3
 8102098:	2b00      	cmp	r3, #0
 810209a:	d1b9      	bne.n	8102010 <HAL_SPI_Transmit+0x114>
 810209c:	e0ef      	b.n	810227e <HAL_SPI_Transmit+0x382>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 810209e:	68fb      	ldr	r3, [r7, #12]
 81020a0:	68db      	ldr	r3, [r3, #12]
 81020a2:	2b07      	cmp	r3, #7
 81020a4:	f240 80e4 	bls.w	8102270 <HAL_SPI_Transmit+0x374>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 81020a8:	e05d      	b.n	8102166 <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 81020aa:	68fb      	ldr	r3, [r7, #12]
 81020ac:	681b      	ldr	r3, [r3, #0]
 81020ae:	695b      	ldr	r3, [r3, #20]
 81020b0:	f003 0302 	and.w	r3, r3, #2
 81020b4:	2b02      	cmp	r3, #2
 81020b6:	d132      	bne.n	810211e <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 81020b8:	68fb      	ldr	r3, [r7, #12]
 81020ba:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 81020be:	b29b      	uxth	r3, r3
 81020c0:	2b01      	cmp	r3, #1
 81020c2:	d918      	bls.n	81020f6 <HAL_SPI_Transmit+0x1fa>
 81020c4:	68fb      	ldr	r3, [r7, #12]
 81020c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 81020c8:	2b00      	cmp	r3, #0
 81020ca:	d014      	beq.n	81020f6 <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 81020cc:	68fb      	ldr	r3, [r7, #12]
 81020ce:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 81020d0:	68fb      	ldr	r3, [r7, #12]
 81020d2:	681b      	ldr	r3, [r3, #0]
 81020d4:	6812      	ldr	r2, [r2, #0]
 81020d6:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 81020d8:	68fb      	ldr	r3, [r7, #12]
 81020da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 81020dc:	1d1a      	adds	r2, r3, #4
 81020de:	68fb      	ldr	r3, [r7, #12]
 81020e0:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 81020e2:	68fb      	ldr	r3, [r7, #12]
 81020e4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 81020e8:	b29b      	uxth	r3, r3
 81020ea:	3b02      	subs	r3, #2
 81020ec:	b29a      	uxth	r2, r3
 81020ee:	68fb      	ldr	r3, [r7, #12]
 81020f0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 81020f4:	e037      	b.n	8102166 <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 81020f6:	68fb      	ldr	r3, [r7, #12]
 81020f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 81020fa:	881a      	ldrh	r2, [r3, #0]
 81020fc:	697b      	ldr	r3, [r7, #20]
 81020fe:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8102100:	68fb      	ldr	r3, [r7, #12]
 8102102:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8102104:	1c9a      	adds	r2, r3, #2
 8102106:	68fb      	ldr	r3, [r7, #12]
 8102108:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 810210a:	68fb      	ldr	r3, [r7, #12]
 810210c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8102110:	b29b      	uxth	r3, r3
 8102112:	3b01      	subs	r3, #1
 8102114:	b29a      	uxth	r2, r3
 8102116:	68fb      	ldr	r3, [r7, #12]
 8102118:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 810211c:	e023      	b.n	8102166 <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 810211e:	f7ff f8a9 	bl	8101274 <HAL_GetTick>
 8102122:	4602      	mov	r2, r0
 8102124:	693b      	ldr	r3, [r7, #16]
 8102126:	1ad3      	subs	r3, r2, r3
 8102128:	683a      	ldr	r2, [r7, #0]
 810212a:	429a      	cmp	r2, r3
 810212c:	d803      	bhi.n	8102136 <HAL_SPI_Transmit+0x23a>
 810212e:	683b      	ldr	r3, [r7, #0]
 8102130:	f1b3 3fff 	cmp.w	r3, #4294967295
 8102134:	d102      	bne.n	810213c <HAL_SPI_Transmit+0x240>
 8102136:	683b      	ldr	r3, [r7, #0]
 8102138:	2b00      	cmp	r3, #0
 810213a:	d114      	bne.n	8102166 <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 810213c:	68f8      	ldr	r0, [r7, #12]
 810213e:	f000 fe71 	bl	8102e24 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8102142:	68fb      	ldr	r3, [r7, #12]
 8102144:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8102148:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 810214c:	68fb      	ldr	r3, [r7, #12]
 810214e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8102152:	68fb      	ldr	r3, [r7, #12]
 8102154:	2201      	movs	r2, #1
 8102156:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 810215a:	68fb      	ldr	r3, [r7, #12]
 810215c:	2200      	movs	r2, #0
 810215e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8102162:	2303      	movs	r3, #3
 8102164:	e0b1      	b.n	81022ca <HAL_SPI_Transmit+0x3ce>
    while (hspi->TxXferCount > 0UL)
 8102166:	68fb      	ldr	r3, [r7, #12]
 8102168:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 810216c:	b29b      	uxth	r3, r3
 810216e:	2b00      	cmp	r3, #0
 8102170:	d19b      	bne.n	81020aa <HAL_SPI_Transmit+0x1ae>
 8102172:	e084      	b.n	810227e <HAL_SPI_Transmit+0x382>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8102174:	68fb      	ldr	r3, [r7, #12]
 8102176:	681b      	ldr	r3, [r3, #0]
 8102178:	695b      	ldr	r3, [r3, #20]
 810217a:	f003 0302 	and.w	r3, r3, #2
 810217e:	2b02      	cmp	r3, #2
 8102180:	d152      	bne.n	8102228 <HAL_SPI_Transmit+0x32c>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8102182:	68fb      	ldr	r3, [r7, #12]
 8102184:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8102188:	b29b      	uxth	r3, r3
 810218a:	2b03      	cmp	r3, #3
 810218c:	d918      	bls.n	81021c0 <HAL_SPI_Transmit+0x2c4>
 810218e:	68fb      	ldr	r3, [r7, #12]
 8102190:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8102192:	2b40      	cmp	r3, #64	@ 0x40
 8102194:	d914      	bls.n	81021c0 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8102196:	68fb      	ldr	r3, [r7, #12]
 8102198:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 810219a:	68fb      	ldr	r3, [r7, #12]
 810219c:	681b      	ldr	r3, [r3, #0]
 810219e:	6812      	ldr	r2, [r2, #0]
 81021a0:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 81021a2:	68fb      	ldr	r3, [r7, #12]
 81021a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 81021a6:	1d1a      	adds	r2, r3, #4
 81021a8:	68fb      	ldr	r3, [r7, #12]
 81021aa:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 81021ac:	68fb      	ldr	r3, [r7, #12]
 81021ae:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 81021b2:	b29b      	uxth	r3, r3
 81021b4:	3b04      	subs	r3, #4
 81021b6:	b29a      	uxth	r2, r3
 81021b8:	68fb      	ldr	r3, [r7, #12]
 81021ba:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 81021be:	e057      	b.n	8102270 <HAL_SPI_Transmit+0x374>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 81021c0:	68fb      	ldr	r3, [r7, #12]
 81021c2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 81021c6:	b29b      	uxth	r3, r3
 81021c8:	2b01      	cmp	r3, #1
 81021ca:	d917      	bls.n	81021fc <HAL_SPI_Transmit+0x300>
 81021cc:	68fb      	ldr	r3, [r7, #12]
 81021ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 81021d0:	2b00      	cmp	r3, #0
 81021d2:	d013      	beq.n	81021fc <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 81021d4:	68fb      	ldr	r3, [r7, #12]
 81021d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 81021d8:	881a      	ldrh	r2, [r3, #0]
 81021da:	697b      	ldr	r3, [r7, #20]
 81021dc:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 81021de:	68fb      	ldr	r3, [r7, #12]
 81021e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 81021e2:	1c9a      	adds	r2, r3, #2
 81021e4:	68fb      	ldr	r3, [r7, #12]
 81021e6:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 81021e8:	68fb      	ldr	r3, [r7, #12]
 81021ea:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 81021ee:	b29b      	uxth	r3, r3
 81021f0:	3b02      	subs	r3, #2
 81021f2:	b29a      	uxth	r2, r3
 81021f4:	68fb      	ldr	r3, [r7, #12]
 81021f6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 81021fa:	e039      	b.n	8102270 <HAL_SPI_Transmit+0x374>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 81021fc:	68fb      	ldr	r3, [r7, #12]
 81021fe:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8102200:	68fb      	ldr	r3, [r7, #12]
 8102202:	681b      	ldr	r3, [r3, #0]
 8102204:	3320      	adds	r3, #32
 8102206:	7812      	ldrb	r2, [r2, #0]
 8102208:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 810220a:	68fb      	ldr	r3, [r7, #12]
 810220c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 810220e:	1c5a      	adds	r2, r3, #1
 8102210:	68fb      	ldr	r3, [r7, #12]
 8102212:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8102214:	68fb      	ldr	r3, [r7, #12]
 8102216:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 810221a:	b29b      	uxth	r3, r3
 810221c:	3b01      	subs	r3, #1
 810221e:	b29a      	uxth	r2, r3
 8102220:	68fb      	ldr	r3, [r7, #12]
 8102222:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8102226:	e023      	b.n	8102270 <HAL_SPI_Transmit+0x374>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8102228:	f7ff f824 	bl	8101274 <HAL_GetTick>
 810222c:	4602      	mov	r2, r0
 810222e:	693b      	ldr	r3, [r7, #16]
 8102230:	1ad3      	subs	r3, r2, r3
 8102232:	683a      	ldr	r2, [r7, #0]
 8102234:	429a      	cmp	r2, r3
 8102236:	d803      	bhi.n	8102240 <HAL_SPI_Transmit+0x344>
 8102238:	683b      	ldr	r3, [r7, #0]
 810223a:	f1b3 3fff 	cmp.w	r3, #4294967295
 810223e:	d102      	bne.n	8102246 <HAL_SPI_Transmit+0x34a>
 8102240:	683b      	ldr	r3, [r7, #0]
 8102242:	2b00      	cmp	r3, #0
 8102244:	d114      	bne.n	8102270 <HAL_SPI_Transmit+0x374>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8102246:	68f8      	ldr	r0, [r7, #12]
 8102248:	f000 fdec 	bl	8102e24 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 810224c:	68fb      	ldr	r3, [r7, #12]
 810224e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8102252:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8102256:	68fb      	ldr	r3, [r7, #12]
 8102258:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 810225c:	68fb      	ldr	r3, [r7, #12]
 810225e:	2201      	movs	r2, #1
 8102260:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8102264:	68fb      	ldr	r3, [r7, #12]
 8102266:	2200      	movs	r2, #0
 8102268:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 810226c:	2303      	movs	r3, #3
 810226e:	e02c      	b.n	81022ca <HAL_SPI_Transmit+0x3ce>
    while (hspi->TxXferCount > 0UL)
 8102270:	68fb      	ldr	r3, [r7, #12]
 8102272:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8102276:	b29b      	uxth	r3, r3
 8102278:	2b00      	cmp	r3, #0
 810227a:	f47f af7b 	bne.w	8102174 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 810227e:	693b      	ldr	r3, [r7, #16]
 8102280:	9300      	str	r3, [sp, #0]
 8102282:	683b      	ldr	r3, [r7, #0]
 8102284:	2200      	movs	r2, #0
 8102286:	2108      	movs	r1, #8
 8102288:	68f8      	ldr	r0, [r7, #12]
 810228a:	f000 fe6b 	bl	8102f64 <SPI_WaitOnFlagUntilTimeout>
 810228e:	4603      	mov	r3, r0
 8102290:	2b00      	cmp	r3, #0
 8102292:	d007      	beq.n	81022a4 <HAL_SPI_Transmit+0x3a8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8102294:	68fb      	ldr	r3, [r7, #12]
 8102296:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 810229a:	f043 0220 	orr.w	r2, r3, #32
 810229e:	68fb      	ldr	r3, [r7, #12]
 81022a0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 81022a4:	68f8      	ldr	r0, [r7, #12]
 81022a6:	f000 fdbd 	bl	8102e24 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 81022aa:	68fb      	ldr	r3, [r7, #12]
 81022ac:	2201      	movs	r2, #1
 81022ae:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 81022b2:	68fb      	ldr	r3, [r7, #12]
 81022b4:	2200      	movs	r2, #0
 81022b6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 81022ba:	68fb      	ldr	r3, [r7, #12]
 81022bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 81022c0:	2b00      	cmp	r3, #0
 81022c2:	d001      	beq.n	81022c8 <HAL_SPI_Transmit+0x3cc>
  {
    return HAL_ERROR;
 81022c4:	2301      	movs	r3, #1
 81022c6:	e000      	b.n	81022ca <HAL_SPI_Transmit+0x3ce>
  }
  else
  {
    return HAL_OK;
 81022c8:	2300      	movs	r3, #0
  }
}
 81022ca:	4618      	mov	r0, r3
 81022cc:	3718      	adds	r7, #24
 81022ce:	46bd      	mov	sp, r7
 81022d0:	bd80      	pop	{r7, pc}

081022d2 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 81022d2:	b580      	push	{r7, lr}
 81022d4:	b088      	sub	sp, #32
 81022d6:	af00      	add	r7, sp, #0
 81022d8:	60f8      	str	r0, [r7, #12]
 81022da:	60b9      	str	r1, [r7, #8]
 81022dc:	603b      	str	r3, [r7, #0]
 81022de:	4613      	mov	r3, r2
 81022e0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 81022e2:	68fb      	ldr	r3, [r7, #12]
 81022e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 81022e6:	095b      	lsrs	r3, r3, #5
 81022e8:	b29b      	uxth	r3, r3
 81022ea:	3301      	adds	r3, #1
 81022ec:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 81022ee:	68fb      	ldr	r3, [r7, #12]
 81022f0:	681b      	ldr	r3, [r3, #0]
 81022f2:	3330      	adds	r3, #48	@ 0x30
 81022f4:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 81022f6:	f7fe ffbd 	bl	8101274 <HAL_GetTick>
 81022fa:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 81022fc:	68fb      	ldr	r3, [r7, #12]
 81022fe:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8102302:	b2db      	uxtb	r3, r3
 8102304:	2b01      	cmp	r3, #1
 8102306:	d001      	beq.n	810230c <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 8102308:	2302      	movs	r3, #2
 810230a:	e24e      	b.n	81027aa <HAL_SPI_Receive+0x4d8>
  }

  if ((pData == NULL) || (Size == 0UL))
 810230c:	68bb      	ldr	r3, [r7, #8]
 810230e:	2b00      	cmp	r3, #0
 8102310:	d002      	beq.n	8102318 <HAL_SPI_Receive+0x46>
 8102312:	88fb      	ldrh	r3, [r7, #6]
 8102314:	2b00      	cmp	r3, #0
 8102316:	d101      	bne.n	810231c <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 8102318:	2301      	movs	r3, #1
 810231a:	e246      	b.n	81027aa <HAL_SPI_Receive+0x4d8>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 810231c:	68fb      	ldr	r3, [r7, #12]
 810231e:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8102322:	2b01      	cmp	r3, #1
 8102324:	d101      	bne.n	810232a <HAL_SPI_Receive+0x58>
 8102326:	2302      	movs	r3, #2
 8102328:	e23f      	b.n	81027aa <HAL_SPI_Receive+0x4d8>
 810232a:	68fb      	ldr	r3, [r7, #12]
 810232c:	2201      	movs	r2, #1
 810232e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8102332:	68fb      	ldr	r3, [r7, #12]
 8102334:	2204      	movs	r2, #4
 8102336:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 810233a:	68fb      	ldr	r3, [r7, #12]
 810233c:	2200      	movs	r2, #0
 810233e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8102342:	68fb      	ldr	r3, [r7, #12]
 8102344:	68ba      	ldr	r2, [r7, #8]
 8102346:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 8102348:	68fb      	ldr	r3, [r7, #12]
 810234a:	88fa      	ldrh	r2, [r7, #6]
 810234c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 8102350:	68fb      	ldr	r3, [r7, #12]
 8102352:	88fa      	ldrh	r2, [r7, #6]
 8102354:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 8102358:	68fb      	ldr	r3, [r7, #12]
 810235a:	2200      	movs	r2, #0
 810235c:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 810235e:	68fb      	ldr	r3, [r7, #12]
 8102360:	2200      	movs	r2, #0
 8102362:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8102366:	68fb      	ldr	r3, [r7, #12]
 8102368:	2200      	movs	r2, #0
 810236a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 810236e:	68fb      	ldr	r3, [r7, #12]
 8102370:	2200      	movs	r2, #0
 8102372:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 8102374:	68fb      	ldr	r3, [r7, #12]
 8102376:	2200      	movs	r2, #0
 8102378:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 810237a:	68fb      	ldr	r3, [r7, #12]
 810237c:	689b      	ldr	r3, [r3, #8]
 810237e:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8102382:	d108      	bne.n	8102396 <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 8102384:	68fb      	ldr	r3, [r7, #12]
 8102386:	681b      	ldr	r3, [r3, #0]
 8102388:	681a      	ldr	r2, [r3, #0]
 810238a:	68fb      	ldr	r3, [r7, #12]
 810238c:	681b      	ldr	r3, [r3, #0]
 810238e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8102392:	601a      	str	r2, [r3, #0]
 8102394:	e009      	b.n	81023aa <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 8102396:	68fb      	ldr	r3, [r7, #12]
 8102398:	681b      	ldr	r3, [r3, #0]
 810239a:	68db      	ldr	r3, [r3, #12]
 810239c:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 81023a0:	68fb      	ldr	r3, [r7, #12]
 81023a2:	681b      	ldr	r3, [r3, #0]
 81023a4:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 81023a8:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 81023aa:	68fb      	ldr	r3, [r7, #12]
 81023ac:	681b      	ldr	r3, [r3, #0]
 81023ae:	685b      	ldr	r3, [r3, #4]
 81023b0:	0c1b      	lsrs	r3, r3, #16
 81023b2:	041b      	lsls	r3, r3, #16
 81023b4:	88f9      	ldrh	r1, [r7, #6]
 81023b6:	68fa      	ldr	r2, [r7, #12]
 81023b8:	6812      	ldr	r2, [r2, #0]
 81023ba:	430b      	orrs	r3, r1
 81023bc:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 81023be:	68fb      	ldr	r3, [r7, #12]
 81023c0:	681b      	ldr	r3, [r3, #0]
 81023c2:	681a      	ldr	r2, [r3, #0]
 81023c4:	68fb      	ldr	r3, [r7, #12]
 81023c6:	681b      	ldr	r3, [r3, #0]
 81023c8:	f042 0201 	orr.w	r2, r2, #1
 81023cc:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 81023ce:	68fb      	ldr	r3, [r7, #12]
 81023d0:	685b      	ldr	r3, [r3, #4]
 81023d2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 81023d6:	d107      	bne.n	81023e8 <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 81023d8:	68fb      	ldr	r3, [r7, #12]
 81023da:	681b      	ldr	r3, [r3, #0]
 81023dc:	681a      	ldr	r2, [r3, #0]
 81023de:	68fb      	ldr	r3, [r7, #12]
 81023e0:	681b      	ldr	r3, [r3, #0]
 81023e2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 81023e6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 81023e8:	68fb      	ldr	r3, [r7, #12]
 81023ea:	68db      	ldr	r3, [r3, #12]
 81023ec:	2b0f      	cmp	r3, #15
 81023ee:	d96c      	bls.n	81024ca <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 81023f0:	e064      	b.n	81024bc <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 81023f2:	68fb      	ldr	r3, [r7, #12]
 81023f4:	681b      	ldr	r3, [r3, #0]
 81023f6:	695b      	ldr	r3, [r3, #20]
 81023f8:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 81023fa:	68fb      	ldr	r3, [r7, #12]
 81023fc:	681b      	ldr	r3, [r3, #0]
 81023fe:	695b      	ldr	r3, [r3, #20]
 8102400:	f003 0301 	and.w	r3, r3, #1
 8102404:	2b01      	cmp	r3, #1
 8102406:	d114      	bne.n	8102432 <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8102408:	68fb      	ldr	r3, [r7, #12]
 810240a:	681a      	ldr	r2, [r3, #0]
 810240c:	68fb      	ldr	r3, [r7, #12]
 810240e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8102410:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8102412:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8102414:	68fb      	ldr	r3, [r7, #12]
 8102416:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8102418:	1d1a      	adds	r2, r3, #4
 810241a:	68fb      	ldr	r3, [r7, #12]
 810241c:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 810241e:	68fb      	ldr	r3, [r7, #12]
 8102420:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8102424:	b29b      	uxth	r3, r3
 8102426:	3b01      	subs	r3, #1
 8102428:	b29a      	uxth	r2, r3
 810242a:	68fb      	ldr	r3, [r7, #12]
 810242c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8102430:	e044      	b.n	81024bc <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8102432:	68fb      	ldr	r3, [r7, #12]
 8102434:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8102438:	b29b      	uxth	r3, r3
 810243a:	8bfa      	ldrh	r2, [r7, #30]
 810243c:	429a      	cmp	r2, r3
 810243e:	d919      	bls.n	8102474 <HAL_SPI_Receive+0x1a2>
 8102440:	693b      	ldr	r3, [r7, #16]
 8102442:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8102446:	2b00      	cmp	r3, #0
 8102448:	d014      	beq.n	8102474 <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 810244a:	68fb      	ldr	r3, [r7, #12]
 810244c:	681a      	ldr	r2, [r3, #0]
 810244e:	68fb      	ldr	r3, [r7, #12]
 8102450:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8102452:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8102454:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8102456:	68fb      	ldr	r3, [r7, #12]
 8102458:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 810245a:	1d1a      	adds	r2, r3, #4
 810245c:	68fb      	ldr	r3, [r7, #12]
 810245e:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8102460:	68fb      	ldr	r3, [r7, #12]
 8102462:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8102466:	b29b      	uxth	r3, r3
 8102468:	3b01      	subs	r3, #1
 810246a:	b29a      	uxth	r2, r3
 810246c:	68fb      	ldr	r3, [r7, #12]
 810246e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8102472:	e023      	b.n	81024bc <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8102474:	f7fe fefe 	bl	8101274 <HAL_GetTick>
 8102478:	4602      	mov	r2, r0
 810247a:	697b      	ldr	r3, [r7, #20]
 810247c:	1ad3      	subs	r3, r2, r3
 810247e:	683a      	ldr	r2, [r7, #0]
 8102480:	429a      	cmp	r2, r3
 8102482:	d803      	bhi.n	810248c <HAL_SPI_Receive+0x1ba>
 8102484:	683b      	ldr	r3, [r7, #0]
 8102486:	f1b3 3fff 	cmp.w	r3, #4294967295
 810248a:	d102      	bne.n	8102492 <HAL_SPI_Receive+0x1c0>
 810248c:	683b      	ldr	r3, [r7, #0]
 810248e:	2b00      	cmp	r3, #0
 8102490:	d114      	bne.n	81024bc <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8102492:	68f8      	ldr	r0, [r7, #12]
 8102494:	f000 fcc6 	bl	8102e24 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8102498:	68fb      	ldr	r3, [r7, #12]
 810249a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 810249e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 81024a2:	68fb      	ldr	r3, [r7, #12]
 81024a4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 81024a8:	68fb      	ldr	r3, [r7, #12]
 81024aa:	2201      	movs	r2, #1
 81024ac:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 81024b0:	68fb      	ldr	r3, [r7, #12]
 81024b2:	2200      	movs	r2, #0
 81024b4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 81024b8:	2303      	movs	r3, #3
 81024ba:	e176      	b.n	81027aa <HAL_SPI_Receive+0x4d8>
    while (hspi->RxXferCount > 0UL)
 81024bc:	68fb      	ldr	r3, [r7, #12]
 81024be:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 81024c2:	b29b      	uxth	r3, r3
 81024c4:	2b00      	cmp	r3, #0
 81024c6:	d194      	bne.n	81023f2 <HAL_SPI_Receive+0x120>
 81024c8:	e15c      	b.n	8102784 <HAL_SPI_Receive+0x4b2>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 81024ca:	68fb      	ldr	r3, [r7, #12]
 81024cc:	68db      	ldr	r3, [r3, #12]
 81024ce:	2b07      	cmp	r3, #7
 81024d0:	f240 8151 	bls.w	8102776 <HAL_SPI_Receive+0x4a4>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 81024d4:	e08f      	b.n	81025f6 <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 81024d6:	68fb      	ldr	r3, [r7, #12]
 81024d8:	681b      	ldr	r3, [r3, #0]
 81024da:	695b      	ldr	r3, [r3, #20]
 81024dc:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 81024de:	68fb      	ldr	r3, [r7, #12]
 81024e0:	681b      	ldr	r3, [r3, #0]
 81024e2:	695b      	ldr	r3, [r3, #20]
 81024e4:	f003 0301 	and.w	r3, r3, #1
 81024e8:	2b01      	cmp	r3, #1
 81024ea:	d114      	bne.n	8102516 <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 81024ec:	68fb      	ldr	r3, [r7, #12]
 81024ee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 81024f0:	69ba      	ldr	r2, [r7, #24]
 81024f2:	8812      	ldrh	r2, [r2, #0]
 81024f4:	b292      	uxth	r2, r2
 81024f6:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 81024f8:	68fb      	ldr	r3, [r7, #12]
 81024fa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 81024fc:	1c9a      	adds	r2, r3, #2
 81024fe:	68fb      	ldr	r3, [r7, #12]
 8102500:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8102502:	68fb      	ldr	r3, [r7, #12]
 8102504:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8102508:	b29b      	uxth	r3, r3
 810250a:	3b01      	subs	r3, #1
 810250c:	b29a      	uxth	r2, r3
 810250e:	68fb      	ldr	r3, [r7, #12]
 8102510:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8102514:	e06f      	b.n	81025f6 <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8102516:	68fb      	ldr	r3, [r7, #12]
 8102518:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 810251c:	b29b      	uxth	r3, r3
 810251e:	8bfa      	ldrh	r2, [r7, #30]
 8102520:	429a      	cmp	r2, r3
 8102522:	d924      	bls.n	810256e <HAL_SPI_Receive+0x29c>
 8102524:	693b      	ldr	r3, [r7, #16]
 8102526:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 810252a:	2b00      	cmp	r3, #0
 810252c:	d01f      	beq.n	810256e <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 810252e:	68fb      	ldr	r3, [r7, #12]
 8102530:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8102532:	69ba      	ldr	r2, [r7, #24]
 8102534:	8812      	ldrh	r2, [r2, #0]
 8102536:	b292      	uxth	r2, r2
 8102538:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 810253a:	68fb      	ldr	r3, [r7, #12]
 810253c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 810253e:	1c9a      	adds	r2, r3, #2
 8102540:	68fb      	ldr	r3, [r7, #12]
 8102542:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8102544:	68fb      	ldr	r3, [r7, #12]
 8102546:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8102548:	69ba      	ldr	r2, [r7, #24]
 810254a:	8812      	ldrh	r2, [r2, #0]
 810254c:	b292      	uxth	r2, r2
 810254e:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8102550:	68fb      	ldr	r3, [r7, #12]
 8102552:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8102554:	1c9a      	adds	r2, r3, #2
 8102556:	68fb      	ldr	r3, [r7, #12]
 8102558:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 810255a:	68fb      	ldr	r3, [r7, #12]
 810255c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8102560:	b29b      	uxth	r3, r3
 8102562:	3b02      	subs	r3, #2
 8102564:	b29a      	uxth	r2, r3
 8102566:	68fb      	ldr	r3, [r7, #12]
 8102568:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 810256c:	e043      	b.n	81025f6 <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 810256e:	68fb      	ldr	r3, [r7, #12]
 8102570:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8102574:	b29b      	uxth	r3, r3
 8102576:	2b01      	cmp	r3, #1
 8102578:	d119      	bne.n	81025ae <HAL_SPI_Receive+0x2dc>
 810257a:	693b      	ldr	r3, [r7, #16]
 810257c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8102580:	2b00      	cmp	r3, #0
 8102582:	d014      	beq.n	81025ae <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8102584:	68fb      	ldr	r3, [r7, #12]
 8102586:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8102588:	69ba      	ldr	r2, [r7, #24]
 810258a:	8812      	ldrh	r2, [r2, #0]
 810258c:	b292      	uxth	r2, r2
 810258e:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8102590:	68fb      	ldr	r3, [r7, #12]
 8102592:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8102594:	1c9a      	adds	r2, r3, #2
 8102596:	68fb      	ldr	r3, [r7, #12]
 8102598:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 810259a:	68fb      	ldr	r3, [r7, #12]
 810259c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 81025a0:	b29b      	uxth	r3, r3
 81025a2:	3b01      	subs	r3, #1
 81025a4:	b29a      	uxth	r2, r3
 81025a6:	68fb      	ldr	r3, [r7, #12]
 81025a8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 81025ac:	e023      	b.n	81025f6 <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 81025ae:	f7fe fe61 	bl	8101274 <HAL_GetTick>
 81025b2:	4602      	mov	r2, r0
 81025b4:	697b      	ldr	r3, [r7, #20]
 81025b6:	1ad3      	subs	r3, r2, r3
 81025b8:	683a      	ldr	r2, [r7, #0]
 81025ba:	429a      	cmp	r2, r3
 81025bc:	d803      	bhi.n	81025c6 <HAL_SPI_Receive+0x2f4>
 81025be:	683b      	ldr	r3, [r7, #0]
 81025c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 81025c4:	d102      	bne.n	81025cc <HAL_SPI_Receive+0x2fa>
 81025c6:	683b      	ldr	r3, [r7, #0]
 81025c8:	2b00      	cmp	r3, #0
 81025ca:	d114      	bne.n	81025f6 <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 81025cc:	68f8      	ldr	r0, [r7, #12]
 81025ce:	f000 fc29 	bl	8102e24 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 81025d2:	68fb      	ldr	r3, [r7, #12]
 81025d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 81025d8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 81025dc:	68fb      	ldr	r3, [r7, #12]
 81025de:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 81025e2:	68fb      	ldr	r3, [r7, #12]
 81025e4:	2201      	movs	r2, #1
 81025e6:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 81025ea:	68fb      	ldr	r3, [r7, #12]
 81025ec:	2200      	movs	r2, #0
 81025ee:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 81025f2:	2303      	movs	r3, #3
 81025f4:	e0d9      	b.n	81027aa <HAL_SPI_Receive+0x4d8>
    while (hspi->RxXferCount > 0UL)
 81025f6:	68fb      	ldr	r3, [r7, #12]
 81025f8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 81025fc:	b29b      	uxth	r3, r3
 81025fe:	2b00      	cmp	r3, #0
 8102600:	f47f af69 	bne.w	81024d6 <HAL_SPI_Receive+0x204>
 8102604:	e0be      	b.n	8102784 <HAL_SPI_Receive+0x4b2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8102606:	68fb      	ldr	r3, [r7, #12]
 8102608:	681b      	ldr	r3, [r3, #0]
 810260a:	695b      	ldr	r3, [r3, #20]
 810260c:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 810260e:	68fb      	ldr	r3, [r7, #12]
 8102610:	681b      	ldr	r3, [r3, #0]
 8102612:	695b      	ldr	r3, [r3, #20]
 8102614:	f003 0301 	and.w	r3, r3, #1
 8102618:	2b01      	cmp	r3, #1
 810261a:	d117      	bne.n	810264c <HAL_SPI_Receive+0x37a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 810261c:	68fb      	ldr	r3, [r7, #12]
 810261e:	681b      	ldr	r3, [r3, #0]
 8102620:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8102624:	68fb      	ldr	r3, [r7, #12]
 8102626:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8102628:	7812      	ldrb	r2, [r2, #0]
 810262a:	b2d2      	uxtb	r2, r2
 810262c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 810262e:	68fb      	ldr	r3, [r7, #12]
 8102630:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8102632:	1c5a      	adds	r2, r3, #1
 8102634:	68fb      	ldr	r3, [r7, #12]
 8102636:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8102638:	68fb      	ldr	r3, [r7, #12]
 810263a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 810263e:	b29b      	uxth	r3, r3
 8102640:	3b01      	subs	r3, #1
 8102642:	b29a      	uxth	r2, r3
 8102644:	68fb      	ldr	r3, [r7, #12]
 8102646:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 810264a:	e094      	b.n	8102776 <HAL_SPI_Receive+0x4a4>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 810264c:	68fb      	ldr	r3, [r7, #12]
 810264e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8102652:	b29b      	uxth	r3, r3
 8102654:	8bfa      	ldrh	r2, [r7, #30]
 8102656:	429a      	cmp	r2, r3
 8102658:	d946      	bls.n	81026e8 <HAL_SPI_Receive+0x416>
 810265a:	693b      	ldr	r3, [r7, #16]
 810265c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8102660:	2b00      	cmp	r3, #0
 8102662:	d041      	beq.n	81026e8 <HAL_SPI_Receive+0x416>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8102664:	68fb      	ldr	r3, [r7, #12]
 8102666:	681b      	ldr	r3, [r3, #0]
 8102668:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 810266c:	68fb      	ldr	r3, [r7, #12]
 810266e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8102670:	7812      	ldrb	r2, [r2, #0]
 8102672:	b2d2      	uxtb	r2, r2
 8102674:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8102676:	68fb      	ldr	r3, [r7, #12]
 8102678:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 810267a:	1c5a      	adds	r2, r3, #1
 810267c:	68fb      	ldr	r3, [r7, #12]
 810267e:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8102680:	68fb      	ldr	r3, [r7, #12]
 8102682:	681b      	ldr	r3, [r3, #0]
 8102684:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8102688:	68fb      	ldr	r3, [r7, #12]
 810268a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 810268c:	7812      	ldrb	r2, [r2, #0]
 810268e:	b2d2      	uxtb	r2, r2
 8102690:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8102692:	68fb      	ldr	r3, [r7, #12]
 8102694:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8102696:	1c5a      	adds	r2, r3, #1
 8102698:	68fb      	ldr	r3, [r7, #12]
 810269a:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 810269c:	68fb      	ldr	r3, [r7, #12]
 810269e:	681b      	ldr	r3, [r3, #0]
 81026a0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 81026a4:	68fb      	ldr	r3, [r7, #12]
 81026a6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 81026a8:	7812      	ldrb	r2, [r2, #0]
 81026aa:	b2d2      	uxtb	r2, r2
 81026ac:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 81026ae:	68fb      	ldr	r3, [r7, #12]
 81026b0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 81026b2:	1c5a      	adds	r2, r3, #1
 81026b4:	68fb      	ldr	r3, [r7, #12]
 81026b6:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 81026b8:	68fb      	ldr	r3, [r7, #12]
 81026ba:	681b      	ldr	r3, [r3, #0]
 81026bc:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 81026c0:	68fb      	ldr	r3, [r7, #12]
 81026c2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 81026c4:	7812      	ldrb	r2, [r2, #0]
 81026c6:	b2d2      	uxtb	r2, r2
 81026c8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 81026ca:	68fb      	ldr	r3, [r7, #12]
 81026cc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 81026ce:	1c5a      	adds	r2, r3, #1
 81026d0:	68fb      	ldr	r3, [r7, #12]
 81026d2:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 81026d4:	68fb      	ldr	r3, [r7, #12]
 81026d6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 81026da:	b29b      	uxth	r3, r3
 81026dc:	3b04      	subs	r3, #4
 81026de:	b29a      	uxth	r2, r3
 81026e0:	68fb      	ldr	r3, [r7, #12]
 81026e2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 81026e6:	e046      	b.n	8102776 <HAL_SPI_Receive+0x4a4>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 81026e8:	68fb      	ldr	r3, [r7, #12]
 81026ea:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 81026ee:	b29b      	uxth	r3, r3
 81026f0:	2b03      	cmp	r3, #3
 81026f2:	d81c      	bhi.n	810272e <HAL_SPI_Receive+0x45c>
 81026f4:	693b      	ldr	r3, [r7, #16]
 81026f6:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 81026fa:	2b00      	cmp	r3, #0
 81026fc:	d017      	beq.n	810272e <HAL_SPI_Receive+0x45c>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 81026fe:	68fb      	ldr	r3, [r7, #12]
 8102700:	681b      	ldr	r3, [r3, #0]
 8102702:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8102706:	68fb      	ldr	r3, [r7, #12]
 8102708:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 810270a:	7812      	ldrb	r2, [r2, #0]
 810270c:	b2d2      	uxtb	r2, r2
 810270e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8102710:	68fb      	ldr	r3, [r7, #12]
 8102712:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8102714:	1c5a      	adds	r2, r3, #1
 8102716:	68fb      	ldr	r3, [r7, #12]
 8102718:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 810271a:	68fb      	ldr	r3, [r7, #12]
 810271c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8102720:	b29b      	uxth	r3, r3
 8102722:	3b01      	subs	r3, #1
 8102724:	b29a      	uxth	r2, r3
 8102726:	68fb      	ldr	r3, [r7, #12]
 8102728:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 810272c:	e023      	b.n	8102776 <HAL_SPI_Receive+0x4a4>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 810272e:	f7fe fda1 	bl	8101274 <HAL_GetTick>
 8102732:	4602      	mov	r2, r0
 8102734:	697b      	ldr	r3, [r7, #20]
 8102736:	1ad3      	subs	r3, r2, r3
 8102738:	683a      	ldr	r2, [r7, #0]
 810273a:	429a      	cmp	r2, r3
 810273c:	d803      	bhi.n	8102746 <HAL_SPI_Receive+0x474>
 810273e:	683b      	ldr	r3, [r7, #0]
 8102740:	f1b3 3fff 	cmp.w	r3, #4294967295
 8102744:	d102      	bne.n	810274c <HAL_SPI_Receive+0x47a>
 8102746:	683b      	ldr	r3, [r7, #0]
 8102748:	2b00      	cmp	r3, #0
 810274a:	d114      	bne.n	8102776 <HAL_SPI_Receive+0x4a4>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 810274c:	68f8      	ldr	r0, [r7, #12]
 810274e:	f000 fb69 	bl	8102e24 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8102752:	68fb      	ldr	r3, [r7, #12]
 8102754:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8102758:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 810275c:	68fb      	ldr	r3, [r7, #12]
 810275e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8102762:	68fb      	ldr	r3, [r7, #12]
 8102764:	2201      	movs	r2, #1
 8102766:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 810276a:	68fb      	ldr	r3, [r7, #12]
 810276c:	2200      	movs	r2, #0
 810276e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8102772:	2303      	movs	r3, #3
 8102774:	e019      	b.n	81027aa <HAL_SPI_Receive+0x4d8>
    while (hspi->RxXferCount > 0UL)
 8102776:	68fb      	ldr	r3, [r7, #12]
 8102778:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 810277c:	b29b      	uxth	r3, r3
 810277e:	2b00      	cmp	r3, #0
 8102780:	f47f af41 	bne.w	8102606 <HAL_SPI_Receive+0x334>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8102784:	68f8      	ldr	r0, [r7, #12]
 8102786:	f000 fb4d 	bl	8102e24 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 810278a:	68fb      	ldr	r3, [r7, #12]
 810278c:	2201      	movs	r2, #1
 810278e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8102792:	68fb      	ldr	r3, [r7, #12]
 8102794:	2200      	movs	r2, #0
 8102796:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 810279a:	68fb      	ldr	r3, [r7, #12]
 810279c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 81027a0:	2b00      	cmp	r3, #0
 81027a2:	d001      	beq.n	81027a8 <HAL_SPI_Receive+0x4d6>
  {
    return HAL_ERROR;
 81027a4:	2301      	movs	r3, #1
 81027a6:	e000      	b.n	81027aa <HAL_SPI_Receive+0x4d8>
  }
  else
  {
    return HAL_OK;
 81027a8:	2300      	movs	r3, #0
  }
}
 81027aa:	4618      	mov	r0, r3
 81027ac:	3720      	adds	r7, #32
 81027ae:	46bd      	mov	sp, r7
 81027b0:	bd80      	pop	{r7, pc}
	...

081027b4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 81027b4:	b580      	push	{r7, lr}
 81027b6:	b08e      	sub	sp, #56	@ 0x38
 81027b8:	af02      	add	r7, sp, #8
 81027ba:	60f8      	str	r0, [r7, #12]
 81027bc:	60b9      	str	r1, [r7, #8]
 81027be:	607a      	str	r2, [r7, #4]
 81027c0:	807b      	strh	r3, [r7, #2]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 81027c2:	68fb      	ldr	r3, [r7, #12]
 81027c4:	681b      	ldr	r3, [r3, #0]
 81027c6:	3320      	adds	r3, #32
 81027c8:	627b      	str	r3, [r7, #36]	@ 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 81027ca:	68fb      	ldr	r3, [r7, #12]
 81027cc:	681b      	ldr	r3, [r3, #0]
 81027ce:	3330      	adds	r3, #48	@ 0x30
 81027d0:	623b      	str	r3, [r7, #32]
  uint32_t   fifo_length;
  uint32_t   temp_sr_reg;
  uint16_t   initial_TxXferCount;
  uint16_t   initial_RxXferCount;
  uint16_t   init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 81027d2:	68fb      	ldr	r3, [r7, #12]
 81027d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 81027d6:	095b      	lsrs	r3, r3, #5
 81027d8:	b29b      	uxth	r3, r3
 81027da:	3301      	adds	r3, #1
 81027dc:	83fb      	strh	r3, [r7, #30]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 81027de:	f7fe fd49 	bl	8101274 <HAL_GetTick>
 81027e2:	61b8      	str	r0, [r7, #24]

  initial_TxXferCount = Size;
 81027e4:	887b      	ldrh	r3, [r7, #2]
 81027e6:	857b      	strh	r3, [r7, #42]	@ 0x2a
  initial_RxXferCount = Size;
 81027e8:	887b      	ldrh	r3, [r7, #2]
 81027ea:	853b      	strh	r3, [r7, #40]	@ 0x28

  if (hspi->State != HAL_SPI_STATE_READY)
 81027ec:	68fb      	ldr	r3, [r7, #12]
 81027ee:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 81027f2:	b2db      	uxtb	r3, r3
 81027f4:	2b01      	cmp	r3, #1
 81027f6:	d001      	beq.n	81027fc <HAL_SPI_TransmitReceive+0x48>
  {
    return HAL_BUSY;
 81027f8:	2302      	movs	r3, #2
 81027fa:	e30e      	b.n	8102e1a <HAL_SPI_TransmitReceive+0x666>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 81027fc:	68bb      	ldr	r3, [r7, #8]
 81027fe:	2b00      	cmp	r3, #0
 8102800:	d005      	beq.n	810280e <HAL_SPI_TransmitReceive+0x5a>
 8102802:	687b      	ldr	r3, [r7, #4]
 8102804:	2b00      	cmp	r3, #0
 8102806:	d002      	beq.n	810280e <HAL_SPI_TransmitReceive+0x5a>
 8102808:	887b      	ldrh	r3, [r7, #2]
 810280a:	2b00      	cmp	r3, #0
 810280c:	d101      	bne.n	8102812 <HAL_SPI_TransmitReceive+0x5e>
  {
    return HAL_ERROR;
 810280e:	2301      	movs	r3, #1
 8102810:	e303      	b.n	8102e1a <HAL_SPI_TransmitReceive+0x666>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8102812:	68fb      	ldr	r3, [r7, #12]
 8102814:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8102818:	2b01      	cmp	r3, #1
 810281a:	d101      	bne.n	8102820 <HAL_SPI_TransmitReceive+0x6c>
 810281c:	2302      	movs	r3, #2
 810281e:	e2fc      	b.n	8102e1a <HAL_SPI_TransmitReceive+0x666>
 8102820:	68fb      	ldr	r3, [r7, #12]
 8102822:	2201      	movs	r2, #1
 8102824:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 8102828:	68fb      	ldr	r3, [r7, #12]
 810282a:	2205      	movs	r2, #5
 810282c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8102830:	68fb      	ldr	r3, [r7, #12]
 8102832:	2200      	movs	r2, #0
 8102834:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8102838:	68fb      	ldr	r3, [r7, #12]
 810283a:	687a      	ldr	r2, [r7, #4]
 810283c:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount = Size;
 810283e:	68fb      	ldr	r3, [r7, #12]
 8102840:	887a      	ldrh	r2, [r7, #2]
 8102842:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferSize  = Size;
 8102846:	68fb      	ldr	r3, [r7, #12]
 8102848:	887a      	ldrh	r2, [r7, #2]
 810284a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 810284e:	68fb      	ldr	r3, [r7, #12]
 8102850:	68ba      	ldr	r2, [r7, #8]
 8102852:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount = Size;
 8102854:	68fb      	ldr	r3, [r7, #12]
 8102856:	887a      	ldrh	r2, [r7, #2]
 8102858:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->TxXferSize  = Size;
 810285c:	68fb      	ldr	r3, [r7, #12]
 810285e:	887a      	ldrh	r2, [r7, #2]
 8102860:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8102864:	68fb      	ldr	r3, [r7, #12]
 8102866:	2200      	movs	r2, #0
 8102868:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 810286a:	68fb      	ldr	r3, [r7, #12]
 810286c:	2200      	movs	r2, #0
 810286e:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 8102870:	68fb      	ldr	r3, [r7, #12]
 8102872:	681b      	ldr	r3, [r3, #0]
 8102874:	68da      	ldr	r2, [r3, #12]
 8102876:	68fb      	ldr	r3, [r7, #12]
 8102878:	681b      	ldr	r3, [r3, #0]
 810287a:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 810287e:	60da      	str	r2, [r3, #12]

  /* Initialize FIFO length */
  if (IS_SPI_HIGHEND_INSTANCE(hspi->Instance))
 8102880:	68fb      	ldr	r3, [r7, #12]
 8102882:	681b      	ldr	r3, [r3, #0]
 8102884:	4a70      	ldr	r2, [pc, #448]	@ (8102a48 <HAL_SPI_TransmitReceive+0x294>)
 8102886:	4293      	cmp	r3, r2
 8102888:	d009      	beq.n	810289e <HAL_SPI_TransmitReceive+0xea>
 810288a:	68fb      	ldr	r3, [r7, #12]
 810288c:	681b      	ldr	r3, [r3, #0]
 810288e:	4a6f      	ldr	r2, [pc, #444]	@ (8102a4c <HAL_SPI_TransmitReceive+0x298>)
 8102890:	4293      	cmp	r3, r2
 8102892:	d004      	beq.n	810289e <HAL_SPI_TransmitReceive+0xea>
 8102894:	68fb      	ldr	r3, [r7, #12]
 8102896:	681b      	ldr	r3, [r3, #0]
 8102898:	4a6d      	ldr	r2, [pc, #436]	@ (8102a50 <HAL_SPI_TransmitReceive+0x29c>)
 810289a:	4293      	cmp	r3, r2
 810289c:	d102      	bne.n	81028a4 <HAL_SPI_TransmitReceive+0xf0>
  {
    fifo_length = SPI_HIGHEND_FIFO_SIZE;
 810289e:	2310      	movs	r3, #16
 81028a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 81028a2:	e001      	b.n	81028a8 <HAL_SPI_TransmitReceive+0xf4>
  }
  else
  {
    fifo_length = SPI_LOWEND_FIFO_SIZE;
 81028a4:	2308      	movs	r3, #8
 81028a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 81028a8:	68fb      	ldr	r3, [r7, #12]
 81028aa:	681b      	ldr	r3, [r3, #0]
 81028ac:	685b      	ldr	r3, [r3, #4]
 81028ae:	0c1b      	lsrs	r3, r3, #16
 81028b0:	041b      	lsls	r3, r3, #16
 81028b2:	8879      	ldrh	r1, [r7, #2]
 81028b4:	68fa      	ldr	r2, [r7, #12]
 81028b6:	6812      	ldr	r2, [r2, #0]
 81028b8:	430b      	orrs	r3, r1
 81028ba:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 81028bc:	68fb      	ldr	r3, [r7, #12]
 81028be:	681b      	ldr	r3, [r3, #0]
 81028c0:	681a      	ldr	r2, [r3, #0]
 81028c2:	68fb      	ldr	r3, [r7, #12]
 81028c4:	681b      	ldr	r3, [r3, #0]
 81028c6:	f042 0201 	orr.w	r2, r2, #1
 81028ca:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 81028cc:	68fb      	ldr	r3, [r7, #12]
 81028ce:	685b      	ldr	r3, [r3, #4]
 81028d0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 81028d4:	d107      	bne.n	81028e6 <HAL_SPI_TransmitReceive+0x132>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 81028d6:	68fb      	ldr	r3, [r7, #12]
 81028d8:	681b      	ldr	r3, [r3, #0]
 81028da:	681a      	ldr	r2, [r3, #0]
 81028dc:	68fb      	ldr	r3, [r7, #12]
 81028de:	681b      	ldr	r3, [r3, #0]
 81028e0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 81028e4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 81028e6:	68fb      	ldr	r3, [r7, #12]
 81028e8:	68db      	ldr	r3, [r3, #12]
 81028ea:	2b0f      	cmp	r3, #15
 81028ec:	f240 80a2 	bls.w	8102a34 <HAL_SPI_TransmitReceive+0x280>
  {
    /* Adapt fifo length to 32bits data width */
    fifo_length = (fifo_length / 4UL);
 81028f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81028f2:	089b      	lsrs	r3, r3, #2
 81028f4:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 81028f6:	e094      	b.n	8102a22 <HAL_SPI_TransmitReceive+0x26e>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 81028f8:	68fb      	ldr	r3, [r7, #12]
 81028fa:	681b      	ldr	r3, [r3, #0]
 81028fc:	695b      	ldr	r3, [r3, #20]
 81028fe:	f003 0302 	and.w	r3, r3, #2
 8102902:	2b02      	cmp	r3, #2
 8102904:	d120      	bne.n	8102948 <HAL_SPI_TransmitReceive+0x194>
 8102906:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8102908:	2b00      	cmp	r3, #0
 810290a:	d01d      	beq.n	8102948 <HAL_SPI_TransmitReceive+0x194>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 810290c:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 810290e:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8102910:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8102912:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8102914:	429a      	cmp	r2, r3
 8102916:	d217      	bcs.n	8102948 <HAL_SPI_TransmitReceive+0x194>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8102918:	68fb      	ldr	r3, [r7, #12]
 810291a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 810291c:	68fb      	ldr	r3, [r7, #12]
 810291e:	681b      	ldr	r3, [r3, #0]
 8102920:	6812      	ldr	r2, [r2, #0]
 8102922:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8102924:	68fb      	ldr	r3, [r7, #12]
 8102926:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8102928:	1d1a      	adds	r2, r3, #4
 810292a:	68fb      	ldr	r3, [r7, #12]
 810292c:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount --;
 810292e:	68fb      	ldr	r3, [r7, #12]
 8102930:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8102934:	b29b      	uxth	r3, r3
 8102936:	3b01      	subs	r3, #1
 8102938:	b29a      	uxth	r2, r3
 810293a:	68fb      	ldr	r3, [r7, #12]
 810293c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8102940:	68fb      	ldr	r3, [r7, #12]
 8102942:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8102946:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8102948:	68fb      	ldr	r3, [r7, #12]
 810294a:	681b      	ldr	r3, [r3, #0]
 810294c:	695b      	ldr	r3, [r3, #20]
 810294e:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8102950:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8102952:	2b00      	cmp	r3, #0
 8102954:	d065      	beq.n	8102a22 <HAL_SPI_TransmitReceive+0x26e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8102956:	68fb      	ldr	r3, [r7, #12]
 8102958:	681b      	ldr	r3, [r3, #0]
 810295a:	695b      	ldr	r3, [r3, #20]
 810295c:	f003 0301 	and.w	r3, r3, #1
 8102960:	2b01      	cmp	r3, #1
 8102962:	d118      	bne.n	8102996 <HAL_SPI_TransmitReceive+0x1e2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8102964:	68fb      	ldr	r3, [r7, #12]
 8102966:	681a      	ldr	r2, [r3, #0]
 8102968:	68fb      	ldr	r3, [r7, #12]
 810296a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 810296c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 810296e:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8102970:	68fb      	ldr	r3, [r7, #12]
 8102972:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8102974:	1d1a      	adds	r2, r3, #4
 8102976:	68fb      	ldr	r3, [r7, #12]
 8102978:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 810297a:	68fb      	ldr	r3, [r7, #12]
 810297c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8102980:	b29b      	uxth	r3, r3
 8102982:	3b01      	subs	r3, #1
 8102984:	b29a      	uxth	r2, r3
 8102986:	68fb      	ldr	r3, [r7, #12]
 8102988:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 810298c:	68fb      	ldr	r3, [r7, #12]
 810298e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8102992:	853b      	strh	r3, [r7, #40]	@ 0x28
 8102994:	e045      	b.n	8102a22 <HAL_SPI_TransmitReceive+0x26e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8102996:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8102998:	8bfb      	ldrh	r3, [r7, #30]
 810299a:	429a      	cmp	r2, r3
 810299c:	d21d      	bcs.n	81029da <HAL_SPI_TransmitReceive+0x226>
 810299e:	697b      	ldr	r3, [r7, #20]
 81029a0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 81029a4:	2b00      	cmp	r3, #0
 81029a6:	d018      	beq.n	81029da <HAL_SPI_TransmitReceive+0x226>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 81029a8:	68fb      	ldr	r3, [r7, #12]
 81029aa:	681a      	ldr	r2, [r3, #0]
 81029ac:	68fb      	ldr	r3, [r7, #12]
 81029ae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 81029b0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 81029b2:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 81029b4:	68fb      	ldr	r3, [r7, #12]
 81029b6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 81029b8:	1d1a      	adds	r2, r3, #4
 81029ba:	68fb      	ldr	r3, [r7, #12]
 81029bc:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 81029be:	68fb      	ldr	r3, [r7, #12]
 81029c0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 81029c4:	b29b      	uxth	r3, r3
 81029c6:	3b01      	subs	r3, #1
 81029c8:	b29a      	uxth	r2, r3
 81029ca:	68fb      	ldr	r3, [r7, #12]
 81029cc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 81029d0:	68fb      	ldr	r3, [r7, #12]
 81029d2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 81029d6:	853b      	strh	r3, [r7, #40]	@ 0x28
 81029d8:	e023      	b.n	8102a22 <HAL_SPI_TransmitReceive+0x26e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 81029da:	f7fe fc4b 	bl	8101274 <HAL_GetTick>
 81029de:	4602      	mov	r2, r0
 81029e0:	69bb      	ldr	r3, [r7, #24]
 81029e2:	1ad3      	subs	r3, r2, r3
 81029e4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 81029e6:	429a      	cmp	r2, r3
 81029e8:	d803      	bhi.n	81029f2 <HAL_SPI_TransmitReceive+0x23e>
 81029ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81029ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 81029f0:	d102      	bne.n	81029f8 <HAL_SPI_TransmitReceive+0x244>
 81029f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81029f4:	2b00      	cmp	r3, #0
 81029f6:	d114      	bne.n	8102a22 <HAL_SPI_TransmitReceive+0x26e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 81029f8:	68f8      	ldr	r0, [r7, #12]
 81029fa:	f000 fa13 	bl	8102e24 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 81029fe:	68fb      	ldr	r3, [r7, #12]
 8102a00:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8102a04:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8102a08:	68fb      	ldr	r3, [r7, #12]
 8102a0a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 8102a0e:	68fb      	ldr	r3, [r7, #12]
 8102a10:	2201      	movs	r2, #1
 8102a12:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 8102a16:	68fb      	ldr	r3, [r7, #12]
 8102a18:	2200      	movs	r2, #0
 8102a1a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 8102a1e:	2303      	movs	r3, #3
 8102a20:	e1fb      	b.n	8102e1a <HAL_SPI_TransmitReceive+0x666>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8102a22:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8102a24:	2b00      	cmp	r3, #0
 8102a26:	f47f af67 	bne.w	81028f8 <HAL_SPI_TransmitReceive+0x144>
 8102a2a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8102a2c:	2b00      	cmp	r3, #0
 8102a2e:	f47f af63 	bne.w	81028f8 <HAL_SPI_TransmitReceive+0x144>
 8102a32:	e1cc      	b.n	8102dce <HAL_SPI_TransmitReceive+0x61a>
        }
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8102a34:	68fb      	ldr	r3, [r7, #12]
 8102a36:	68db      	ldr	r3, [r3, #12]
 8102a38:	2b07      	cmp	r3, #7
 8102a3a:	f240 81c0 	bls.w	8102dbe <HAL_SPI_TransmitReceive+0x60a>
  {
    /* Adapt fifo length to 16bits data width */
    fifo_length = (fifo_length / 2UL);
 8102a3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8102a40:	085b      	lsrs	r3, r3, #1
 8102a42:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8102a44:	e0c7      	b.n	8102bd6 <HAL_SPI_TransmitReceive+0x422>
 8102a46:	bf00      	nop
 8102a48:	40013000 	.word	0x40013000
 8102a4c:	40003800 	.word	0x40003800
 8102a50:	40003c00 	.word	0x40003c00
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8102a54:	68fb      	ldr	r3, [r7, #12]
 8102a56:	681b      	ldr	r3, [r3, #0]
 8102a58:	695b      	ldr	r3, [r3, #20]
 8102a5a:	f003 0302 	and.w	r3, r3, #2
 8102a5e:	2b02      	cmp	r3, #2
 8102a60:	d11f      	bne.n	8102aa2 <HAL_SPI_TransmitReceive+0x2ee>
 8102a62:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8102a64:	2b00      	cmp	r3, #0
 8102a66:	d01c      	beq.n	8102aa2 <HAL_SPI_TransmitReceive+0x2ee>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8102a68:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8102a6a:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8102a6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8102a6e:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8102a70:	429a      	cmp	r2, r3
 8102a72:	d216      	bcs.n	8102aa2 <HAL_SPI_TransmitReceive+0x2ee>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8102a74:	68fb      	ldr	r3, [r7, #12]
 8102a76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8102a78:	881a      	ldrh	r2, [r3, #0]
 8102a7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8102a7c:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8102a7e:	68fb      	ldr	r3, [r7, #12]
 8102a80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8102a82:	1c9a      	adds	r2, r3, #2
 8102a84:	68fb      	ldr	r3, [r7, #12]
 8102a86:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8102a88:	68fb      	ldr	r3, [r7, #12]
 8102a8a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8102a8e:	b29b      	uxth	r3, r3
 8102a90:	3b01      	subs	r3, #1
 8102a92:	b29a      	uxth	r2, r3
 8102a94:	68fb      	ldr	r3, [r7, #12]
 8102a96:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8102a9a:	68fb      	ldr	r3, [r7, #12]
 8102a9c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8102aa0:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8102aa2:	68fb      	ldr	r3, [r7, #12]
 8102aa4:	681b      	ldr	r3, [r3, #0]
 8102aa6:	695b      	ldr	r3, [r3, #20]
 8102aa8:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8102aaa:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8102aac:	2b00      	cmp	r3, #0
 8102aae:	f000 8092 	beq.w	8102bd6 <HAL_SPI_TransmitReceive+0x422>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8102ab2:	68fb      	ldr	r3, [r7, #12]
 8102ab4:	681b      	ldr	r3, [r3, #0]
 8102ab6:	695b      	ldr	r3, [r3, #20]
 8102ab8:	f003 0301 	and.w	r3, r3, #1
 8102abc:	2b01      	cmp	r3, #1
 8102abe:	d118      	bne.n	8102af2 <HAL_SPI_TransmitReceive+0x33e>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8102ac0:	68fb      	ldr	r3, [r7, #12]
 8102ac2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8102ac4:	6a3a      	ldr	r2, [r7, #32]
 8102ac6:	8812      	ldrh	r2, [r2, #0]
 8102ac8:	b292      	uxth	r2, r2
 8102aca:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8102acc:	68fb      	ldr	r3, [r7, #12]
 8102ace:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8102ad0:	1c9a      	adds	r2, r3, #2
 8102ad2:	68fb      	ldr	r3, [r7, #12]
 8102ad4:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8102ad6:	68fb      	ldr	r3, [r7, #12]
 8102ad8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8102adc:	b29b      	uxth	r3, r3
 8102ade:	3b01      	subs	r3, #1
 8102ae0:	b29a      	uxth	r2, r3
 8102ae2:	68fb      	ldr	r3, [r7, #12]
 8102ae4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8102ae8:	68fb      	ldr	r3, [r7, #12]
 8102aea:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8102aee:	853b      	strh	r3, [r7, #40]	@ 0x28
 8102af0:	e071      	b.n	8102bd6 <HAL_SPI_TransmitReceive+0x422>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8102af2:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8102af4:	8bfb      	ldrh	r3, [r7, #30]
 8102af6:	429a      	cmp	r2, r3
 8102af8:	d228      	bcs.n	8102b4c <HAL_SPI_TransmitReceive+0x398>
 8102afa:	697b      	ldr	r3, [r7, #20]
 8102afc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8102b00:	2b00      	cmp	r3, #0
 8102b02:	d023      	beq.n	8102b4c <HAL_SPI_TransmitReceive+0x398>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8102b04:	68fb      	ldr	r3, [r7, #12]
 8102b06:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8102b08:	6a3a      	ldr	r2, [r7, #32]
 8102b0a:	8812      	ldrh	r2, [r2, #0]
 8102b0c:	b292      	uxth	r2, r2
 8102b0e:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8102b10:	68fb      	ldr	r3, [r7, #12]
 8102b12:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8102b14:	1c9a      	adds	r2, r3, #2
 8102b16:	68fb      	ldr	r3, [r7, #12]
 8102b18:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8102b1a:	68fb      	ldr	r3, [r7, #12]
 8102b1c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8102b1e:	6a3a      	ldr	r2, [r7, #32]
 8102b20:	8812      	ldrh	r2, [r2, #0]
 8102b22:	b292      	uxth	r2, r2
 8102b24:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8102b26:	68fb      	ldr	r3, [r7, #12]
 8102b28:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8102b2a:	1c9a      	adds	r2, r3, #2
 8102b2c:	68fb      	ldr	r3, [r7, #12]
 8102b2e:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8102b30:	68fb      	ldr	r3, [r7, #12]
 8102b32:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8102b36:	b29b      	uxth	r3, r3
 8102b38:	3b02      	subs	r3, #2
 8102b3a:	b29a      	uxth	r2, r3
 8102b3c:	68fb      	ldr	r3, [r7, #12]
 8102b3e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8102b42:	68fb      	ldr	r3, [r7, #12]
 8102b44:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8102b48:	853b      	strh	r3, [r7, #40]	@ 0x28
 8102b4a:	e044      	b.n	8102bd6 <HAL_SPI_TransmitReceive+0x422>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 8102b4c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8102b4e:	2b01      	cmp	r3, #1
 8102b50:	d11d      	bne.n	8102b8e <HAL_SPI_TransmitReceive+0x3da>
 8102b52:	697b      	ldr	r3, [r7, #20]
 8102b54:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8102b58:	2b00      	cmp	r3, #0
 8102b5a:	d018      	beq.n	8102b8e <HAL_SPI_TransmitReceive+0x3da>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8102b5c:	68fb      	ldr	r3, [r7, #12]
 8102b5e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8102b60:	6a3a      	ldr	r2, [r7, #32]
 8102b62:	8812      	ldrh	r2, [r2, #0]
 8102b64:	b292      	uxth	r2, r2
 8102b66:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8102b68:	68fb      	ldr	r3, [r7, #12]
 8102b6a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8102b6c:	1c9a      	adds	r2, r3, #2
 8102b6e:	68fb      	ldr	r3, [r7, #12]
 8102b70:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8102b72:	68fb      	ldr	r3, [r7, #12]
 8102b74:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8102b78:	b29b      	uxth	r3, r3
 8102b7a:	3b01      	subs	r3, #1
 8102b7c:	b29a      	uxth	r2, r3
 8102b7e:	68fb      	ldr	r3, [r7, #12]
 8102b80:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8102b84:	68fb      	ldr	r3, [r7, #12]
 8102b86:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8102b8a:	853b      	strh	r3, [r7, #40]	@ 0x28
 8102b8c:	e023      	b.n	8102bd6 <HAL_SPI_TransmitReceive+0x422>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8102b8e:	f7fe fb71 	bl	8101274 <HAL_GetTick>
 8102b92:	4602      	mov	r2, r0
 8102b94:	69bb      	ldr	r3, [r7, #24]
 8102b96:	1ad3      	subs	r3, r2, r3
 8102b98:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8102b9a:	429a      	cmp	r2, r3
 8102b9c:	d803      	bhi.n	8102ba6 <HAL_SPI_TransmitReceive+0x3f2>
 8102b9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8102ba0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8102ba4:	d102      	bne.n	8102bac <HAL_SPI_TransmitReceive+0x3f8>
 8102ba6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8102ba8:	2b00      	cmp	r3, #0
 8102baa:	d114      	bne.n	8102bd6 <HAL_SPI_TransmitReceive+0x422>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8102bac:	68f8      	ldr	r0, [r7, #12]
 8102bae:	f000 f939 	bl	8102e24 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8102bb2:	68fb      	ldr	r3, [r7, #12]
 8102bb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8102bb8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8102bbc:	68fb      	ldr	r3, [r7, #12]
 8102bbe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 8102bc2:	68fb      	ldr	r3, [r7, #12]
 8102bc4:	2201      	movs	r2, #1
 8102bc6:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 8102bca:	68fb      	ldr	r3, [r7, #12]
 8102bcc:	2200      	movs	r2, #0
 8102bce:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 8102bd2:	2303      	movs	r3, #3
 8102bd4:	e121      	b.n	8102e1a <HAL_SPI_TransmitReceive+0x666>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8102bd6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8102bd8:	2b00      	cmp	r3, #0
 8102bda:	f47f af3b 	bne.w	8102a54 <HAL_SPI_TransmitReceive+0x2a0>
 8102bde:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8102be0:	2b00      	cmp	r3, #0
 8102be2:	f47f af37 	bne.w	8102a54 <HAL_SPI_TransmitReceive+0x2a0>
 8102be6:	e0f2      	b.n	8102dce <HAL_SPI_TransmitReceive+0x61a>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8102be8:	68fb      	ldr	r3, [r7, #12]
 8102bea:	681b      	ldr	r3, [r3, #0]
 8102bec:	695b      	ldr	r3, [r3, #20]
 8102bee:	f003 0302 	and.w	r3, r3, #2
 8102bf2:	2b02      	cmp	r3, #2
 8102bf4:	d121      	bne.n	8102c3a <HAL_SPI_TransmitReceive+0x486>
 8102bf6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8102bf8:	2b00      	cmp	r3, #0
 8102bfa:	d01e      	beq.n	8102c3a <HAL_SPI_TransmitReceive+0x486>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8102bfc:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8102bfe:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8102c00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8102c02:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8102c04:	429a      	cmp	r2, r3
 8102c06:	d218      	bcs.n	8102c3a <HAL_SPI_TransmitReceive+0x486>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8102c08:	68fb      	ldr	r3, [r7, #12]
 8102c0a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8102c0c:	68fb      	ldr	r3, [r7, #12]
 8102c0e:	681b      	ldr	r3, [r3, #0]
 8102c10:	3320      	adds	r3, #32
 8102c12:	7812      	ldrb	r2, [r2, #0]
 8102c14:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8102c16:	68fb      	ldr	r3, [r7, #12]
 8102c18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8102c1a:	1c5a      	adds	r2, r3, #1
 8102c1c:	68fb      	ldr	r3, [r7, #12]
 8102c1e:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8102c20:	68fb      	ldr	r3, [r7, #12]
 8102c22:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8102c26:	b29b      	uxth	r3, r3
 8102c28:	3b01      	subs	r3, #1
 8102c2a:	b29a      	uxth	r2, r3
 8102c2c:	68fb      	ldr	r3, [r7, #12]
 8102c2e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8102c32:	68fb      	ldr	r3, [r7, #12]
 8102c34:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8102c38:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8102c3a:	68fb      	ldr	r3, [r7, #12]
 8102c3c:	681b      	ldr	r3, [r3, #0]
 8102c3e:	695b      	ldr	r3, [r3, #20]
 8102c40:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8102c42:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8102c44:	2b00      	cmp	r3, #0
 8102c46:	f000 80ba 	beq.w	8102dbe <HAL_SPI_TransmitReceive+0x60a>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8102c4a:	68fb      	ldr	r3, [r7, #12]
 8102c4c:	681b      	ldr	r3, [r3, #0]
 8102c4e:	695b      	ldr	r3, [r3, #20]
 8102c50:	f003 0301 	and.w	r3, r3, #1
 8102c54:	2b01      	cmp	r3, #1
 8102c56:	d11b      	bne.n	8102c90 <HAL_SPI_TransmitReceive+0x4dc>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8102c58:	68fb      	ldr	r3, [r7, #12]
 8102c5a:	681b      	ldr	r3, [r3, #0]
 8102c5c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8102c60:	68fb      	ldr	r3, [r7, #12]
 8102c62:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8102c64:	7812      	ldrb	r2, [r2, #0]
 8102c66:	b2d2      	uxtb	r2, r2
 8102c68:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8102c6a:	68fb      	ldr	r3, [r7, #12]
 8102c6c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8102c6e:	1c5a      	adds	r2, r3, #1
 8102c70:	68fb      	ldr	r3, [r7, #12]
 8102c72:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8102c74:	68fb      	ldr	r3, [r7, #12]
 8102c76:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8102c7a:	b29b      	uxth	r3, r3
 8102c7c:	3b01      	subs	r3, #1
 8102c7e:	b29a      	uxth	r2, r3
 8102c80:	68fb      	ldr	r3, [r7, #12]
 8102c82:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8102c86:	68fb      	ldr	r3, [r7, #12]
 8102c88:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8102c8c:	853b      	strh	r3, [r7, #40]	@ 0x28
 8102c8e:	e096      	b.n	8102dbe <HAL_SPI_TransmitReceive+0x60a>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8102c90:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8102c92:	8bfb      	ldrh	r3, [r7, #30]
 8102c94:	429a      	cmp	r2, r3
 8102c96:	d24a      	bcs.n	8102d2e <HAL_SPI_TransmitReceive+0x57a>
 8102c98:	697b      	ldr	r3, [r7, #20]
 8102c9a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8102c9e:	2b00      	cmp	r3, #0
 8102ca0:	d045      	beq.n	8102d2e <HAL_SPI_TransmitReceive+0x57a>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8102ca2:	68fb      	ldr	r3, [r7, #12]
 8102ca4:	681b      	ldr	r3, [r3, #0]
 8102ca6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8102caa:	68fb      	ldr	r3, [r7, #12]
 8102cac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8102cae:	7812      	ldrb	r2, [r2, #0]
 8102cb0:	b2d2      	uxtb	r2, r2
 8102cb2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8102cb4:	68fb      	ldr	r3, [r7, #12]
 8102cb6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8102cb8:	1c5a      	adds	r2, r3, #1
 8102cba:	68fb      	ldr	r3, [r7, #12]
 8102cbc:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8102cbe:	68fb      	ldr	r3, [r7, #12]
 8102cc0:	681b      	ldr	r3, [r3, #0]
 8102cc2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8102cc6:	68fb      	ldr	r3, [r7, #12]
 8102cc8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8102cca:	7812      	ldrb	r2, [r2, #0]
 8102ccc:	b2d2      	uxtb	r2, r2
 8102cce:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8102cd0:	68fb      	ldr	r3, [r7, #12]
 8102cd2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8102cd4:	1c5a      	adds	r2, r3, #1
 8102cd6:	68fb      	ldr	r3, [r7, #12]
 8102cd8:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8102cda:	68fb      	ldr	r3, [r7, #12]
 8102cdc:	681b      	ldr	r3, [r3, #0]
 8102cde:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8102ce2:	68fb      	ldr	r3, [r7, #12]
 8102ce4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8102ce6:	7812      	ldrb	r2, [r2, #0]
 8102ce8:	b2d2      	uxtb	r2, r2
 8102cea:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8102cec:	68fb      	ldr	r3, [r7, #12]
 8102cee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8102cf0:	1c5a      	adds	r2, r3, #1
 8102cf2:	68fb      	ldr	r3, [r7, #12]
 8102cf4:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8102cf6:	68fb      	ldr	r3, [r7, #12]
 8102cf8:	681b      	ldr	r3, [r3, #0]
 8102cfa:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8102cfe:	68fb      	ldr	r3, [r7, #12]
 8102d00:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8102d02:	7812      	ldrb	r2, [r2, #0]
 8102d04:	b2d2      	uxtb	r2, r2
 8102d06:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8102d08:	68fb      	ldr	r3, [r7, #12]
 8102d0a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8102d0c:	1c5a      	adds	r2, r3, #1
 8102d0e:	68fb      	ldr	r3, [r7, #12]
 8102d10:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 8102d12:	68fb      	ldr	r3, [r7, #12]
 8102d14:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8102d18:	b29b      	uxth	r3, r3
 8102d1a:	3b04      	subs	r3, #4
 8102d1c:	b29a      	uxth	r2, r3
 8102d1e:	68fb      	ldr	r3, [r7, #12]
 8102d20:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8102d24:	68fb      	ldr	r3, [r7, #12]
 8102d26:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8102d2a:	853b      	strh	r3, [r7, #40]	@ 0x28
 8102d2c:	e047      	b.n	8102dbe <HAL_SPI_TransmitReceive+0x60a>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 8102d2e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8102d30:	2b03      	cmp	r3, #3
 8102d32:	d820      	bhi.n	8102d76 <HAL_SPI_TransmitReceive+0x5c2>
 8102d34:	697b      	ldr	r3, [r7, #20]
 8102d36:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 8102d3a:	2b00      	cmp	r3, #0
 8102d3c:	d01b      	beq.n	8102d76 <HAL_SPI_TransmitReceive+0x5c2>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8102d3e:	68fb      	ldr	r3, [r7, #12]
 8102d40:	681b      	ldr	r3, [r3, #0]
 8102d42:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8102d46:	68fb      	ldr	r3, [r7, #12]
 8102d48:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8102d4a:	7812      	ldrb	r2, [r2, #0]
 8102d4c:	b2d2      	uxtb	r2, r2
 8102d4e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8102d50:	68fb      	ldr	r3, [r7, #12]
 8102d52:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8102d54:	1c5a      	adds	r2, r3, #1
 8102d56:	68fb      	ldr	r3, [r7, #12]
 8102d58:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8102d5a:	68fb      	ldr	r3, [r7, #12]
 8102d5c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8102d60:	b29b      	uxth	r3, r3
 8102d62:	3b01      	subs	r3, #1
 8102d64:	b29a      	uxth	r2, r3
 8102d66:	68fb      	ldr	r3, [r7, #12]
 8102d68:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8102d6c:	68fb      	ldr	r3, [r7, #12]
 8102d6e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8102d72:	853b      	strh	r3, [r7, #40]	@ 0x28
 8102d74:	e023      	b.n	8102dbe <HAL_SPI_TransmitReceive+0x60a>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8102d76:	f7fe fa7d 	bl	8101274 <HAL_GetTick>
 8102d7a:	4602      	mov	r2, r0
 8102d7c:	69bb      	ldr	r3, [r7, #24]
 8102d7e:	1ad3      	subs	r3, r2, r3
 8102d80:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8102d82:	429a      	cmp	r2, r3
 8102d84:	d803      	bhi.n	8102d8e <HAL_SPI_TransmitReceive+0x5da>
 8102d86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8102d88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8102d8c:	d102      	bne.n	8102d94 <HAL_SPI_TransmitReceive+0x5e0>
 8102d8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8102d90:	2b00      	cmp	r3, #0
 8102d92:	d114      	bne.n	8102dbe <HAL_SPI_TransmitReceive+0x60a>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8102d94:	68f8      	ldr	r0, [r7, #12]
 8102d96:	f000 f845 	bl	8102e24 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8102d9a:	68fb      	ldr	r3, [r7, #12]
 8102d9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8102da0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8102da4:	68fb      	ldr	r3, [r7, #12]
 8102da6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 8102daa:	68fb      	ldr	r3, [r7, #12]
 8102dac:	2201      	movs	r2, #1
 8102dae:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 8102db2:	68fb      	ldr	r3, [r7, #12]
 8102db4:	2200      	movs	r2, #0
 8102db6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 8102dba:	2303      	movs	r3, #3
 8102dbc:	e02d      	b.n	8102e1a <HAL_SPI_TransmitReceive+0x666>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8102dbe:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8102dc0:	2b00      	cmp	r3, #0
 8102dc2:	f47f af11 	bne.w	8102be8 <HAL_SPI_TransmitReceive+0x434>
 8102dc6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8102dc8:	2b00      	cmp	r3, #0
 8102dca:	f47f af0d 	bne.w	8102be8 <HAL_SPI_TransmitReceive+0x434>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8102dce:	69bb      	ldr	r3, [r7, #24]
 8102dd0:	9300      	str	r3, [sp, #0]
 8102dd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8102dd4:	2200      	movs	r2, #0
 8102dd6:	2108      	movs	r1, #8
 8102dd8:	68f8      	ldr	r0, [r7, #12]
 8102dda:	f000 f8c3 	bl	8102f64 <SPI_WaitOnFlagUntilTimeout>
 8102dde:	4603      	mov	r3, r0
 8102de0:	2b00      	cmp	r3, #0
 8102de2:	d007      	beq.n	8102df4 <HAL_SPI_TransmitReceive+0x640>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8102de4:	68fb      	ldr	r3, [r7, #12]
 8102de6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8102dea:	f043 0220 	orr.w	r2, r3, #32
 8102dee:	68fb      	ldr	r3, [r7, #12]
 8102df0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8102df4:	68f8      	ldr	r0, [r7, #12]
 8102df6:	f000 f815 	bl	8102e24 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8102dfa:	68fb      	ldr	r3, [r7, #12]
 8102dfc:	2201      	movs	r2, #1
 8102dfe:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8102e02:	68fb      	ldr	r3, [r7, #12]
 8102e04:	2200      	movs	r2, #0
 8102e06:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8102e0a:	68fb      	ldr	r3, [r7, #12]
 8102e0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8102e10:	2b00      	cmp	r3, #0
 8102e12:	d001      	beq.n	8102e18 <HAL_SPI_TransmitReceive+0x664>
  {
    return HAL_ERROR;
 8102e14:	2301      	movs	r3, #1
 8102e16:	e000      	b.n	8102e1a <HAL_SPI_TransmitReceive+0x666>
  }
  else
  {
    return HAL_OK;
 8102e18:	2300      	movs	r3, #0
  }
}
 8102e1a:	4618      	mov	r0, r3
 8102e1c:	3730      	adds	r7, #48	@ 0x30
 8102e1e:	46bd      	mov	sp, r7
 8102e20:	bd80      	pop	{r7, pc}
 8102e22:	bf00      	nop

08102e24 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8102e24:	b480      	push	{r7}
 8102e26:	b085      	sub	sp, #20
 8102e28:	af00      	add	r7, sp, #0
 8102e2a:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8102e2c:	687b      	ldr	r3, [r7, #4]
 8102e2e:	681b      	ldr	r3, [r3, #0]
 8102e30:	695b      	ldr	r3, [r3, #20]
 8102e32:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8102e34:	687b      	ldr	r3, [r7, #4]
 8102e36:	681b      	ldr	r3, [r3, #0]
 8102e38:	699a      	ldr	r2, [r3, #24]
 8102e3a:	687b      	ldr	r3, [r7, #4]
 8102e3c:	681b      	ldr	r3, [r3, #0]
 8102e3e:	f042 0208 	orr.w	r2, r2, #8
 8102e42:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8102e44:	687b      	ldr	r3, [r7, #4]
 8102e46:	681b      	ldr	r3, [r3, #0]
 8102e48:	699a      	ldr	r2, [r3, #24]
 8102e4a:	687b      	ldr	r3, [r7, #4]
 8102e4c:	681b      	ldr	r3, [r3, #0]
 8102e4e:	f042 0210 	orr.w	r2, r2, #16
 8102e52:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8102e54:	687b      	ldr	r3, [r7, #4]
 8102e56:	681b      	ldr	r3, [r3, #0]
 8102e58:	681a      	ldr	r2, [r3, #0]
 8102e5a:	687b      	ldr	r3, [r7, #4]
 8102e5c:	681b      	ldr	r3, [r3, #0]
 8102e5e:	f022 0201 	bic.w	r2, r2, #1
 8102e62:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8102e64:	687b      	ldr	r3, [r7, #4]
 8102e66:	681b      	ldr	r3, [r3, #0]
 8102e68:	691b      	ldr	r3, [r3, #16]
 8102e6a:	687a      	ldr	r2, [r7, #4]
 8102e6c:	6812      	ldr	r2, [r2, #0]
 8102e6e:	f423 735b 	bic.w	r3, r3, #876	@ 0x36c
 8102e72:	f023 0303 	bic.w	r3, r3, #3
 8102e76:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8102e78:	687b      	ldr	r3, [r7, #4]
 8102e7a:	681b      	ldr	r3, [r3, #0]
 8102e7c:	689a      	ldr	r2, [r3, #8]
 8102e7e:	687b      	ldr	r3, [r7, #4]
 8102e80:	681b      	ldr	r3, [r3, #0]
 8102e82:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8102e86:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8102e88:	687b      	ldr	r3, [r7, #4]
 8102e8a:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8102e8e:	b2db      	uxtb	r3, r3
 8102e90:	2b04      	cmp	r3, #4
 8102e92:	d014      	beq.n	8102ebe <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8102e94:	68fb      	ldr	r3, [r7, #12]
 8102e96:	f003 0320 	and.w	r3, r3, #32
 8102e9a:	2b00      	cmp	r3, #0
 8102e9c:	d00f      	beq.n	8102ebe <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8102e9e:	687b      	ldr	r3, [r7, #4]
 8102ea0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8102ea4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8102ea8:	687b      	ldr	r3, [r7, #4]
 8102eaa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8102eae:	687b      	ldr	r3, [r7, #4]
 8102eb0:	681b      	ldr	r3, [r3, #0]
 8102eb2:	699a      	ldr	r2, [r3, #24]
 8102eb4:	687b      	ldr	r3, [r7, #4]
 8102eb6:	681b      	ldr	r3, [r3, #0]
 8102eb8:	f042 0220 	orr.w	r2, r2, #32
 8102ebc:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8102ebe:	687b      	ldr	r3, [r7, #4]
 8102ec0:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8102ec4:	b2db      	uxtb	r3, r3
 8102ec6:	2b03      	cmp	r3, #3
 8102ec8:	d014      	beq.n	8102ef4 <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8102eca:	68fb      	ldr	r3, [r7, #12]
 8102ecc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8102ed0:	2b00      	cmp	r3, #0
 8102ed2:	d00f      	beq.n	8102ef4 <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8102ed4:	687b      	ldr	r3, [r7, #4]
 8102ed6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8102eda:	f043 0204 	orr.w	r2, r3, #4
 8102ede:	687b      	ldr	r3, [r7, #4]
 8102ee0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8102ee4:	687b      	ldr	r3, [r7, #4]
 8102ee6:	681b      	ldr	r3, [r3, #0]
 8102ee8:	699a      	ldr	r2, [r3, #24]
 8102eea:	687b      	ldr	r3, [r7, #4]
 8102eec:	681b      	ldr	r3, [r3, #0]
 8102eee:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8102ef2:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8102ef4:	68fb      	ldr	r3, [r7, #12]
 8102ef6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8102efa:	2b00      	cmp	r3, #0
 8102efc:	d00f      	beq.n	8102f1e <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8102efe:	687b      	ldr	r3, [r7, #4]
 8102f00:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8102f04:	f043 0201 	orr.w	r2, r3, #1
 8102f08:	687b      	ldr	r3, [r7, #4]
 8102f0a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8102f0e:	687b      	ldr	r3, [r7, #4]
 8102f10:	681b      	ldr	r3, [r3, #0]
 8102f12:	699a      	ldr	r2, [r3, #24]
 8102f14:	687b      	ldr	r3, [r7, #4]
 8102f16:	681b      	ldr	r3, [r3, #0]
 8102f18:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8102f1c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8102f1e:	68fb      	ldr	r3, [r7, #12]
 8102f20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8102f24:	2b00      	cmp	r3, #0
 8102f26:	d00f      	beq.n	8102f48 <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8102f28:	687b      	ldr	r3, [r7, #4]
 8102f2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8102f2e:	f043 0208 	orr.w	r2, r3, #8
 8102f32:	687b      	ldr	r3, [r7, #4]
 8102f34:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8102f38:	687b      	ldr	r3, [r7, #4]
 8102f3a:	681b      	ldr	r3, [r3, #0]
 8102f3c:	699a      	ldr	r2, [r3, #24]
 8102f3e:	687b      	ldr	r3, [r7, #4]
 8102f40:	681b      	ldr	r3, [r3, #0]
 8102f42:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8102f46:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8102f48:	687b      	ldr	r3, [r7, #4]
 8102f4a:	2200      	movs	r2, #0
 8102f4c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8102f50:	687b      	ldr	r3, [r7, #4]
 8102f52:	2200      	movs	r2, #0
 8102f54:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 8102f58:	bf00      	nop
 8102f5a:	3714      	adds	r7, #20
 8102f5c:	46bd      	mov	sp, r7
 8102f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102f62:	4770      	bx	lr

08102f64 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8102f64:	b580      	push	{r7, lr}
 8102f66:	b084      	sub	sp, #16
 8102f68:	af00      	add	r7, sp, #0
 8102f6a:	60f8      	str	r0, [r7, #12]
 8102f6c:	60b9      	str	r1, [r7, #8]
 8102f6e:	603b      	str	r3, [r7, #0]
 8102f70:	4613      	mov	r3, r2
 8102f72:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8102f74:	e010      	b.n	8102f98 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8102f76:	f7fe f97d 	bl	8101274 <HAL_GetTick>
 8102f7a:	4602      	mov	r2, r0
 8102f7c:	69bb      	ldr	r3, [r7, #24]
 8102f7e:	1ad3      	subs	r3, r2, r3
 8102f80:	683a      	ldr	r2, [r7, #0]
 8102f82:	429a      	cmp	r2, r3
 8102f84:	d803      	bhi.n	8102f8e <SPI_WaitOnFlagUntilTimeout+0x2a>
 8102f86:	683b      	ldr	r3, [r7, #0]
 8102f88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8102f8c:	d102      	bne.n	8102f94 <SPI_WaitOnFlagUntilTimeout+0x30>
 8102f8e:	683b      	ldr	r3, [r7, #0]
 8102f90:	2b00      	cmp	r3, #0
 8102f92:	d101      	bne.n	8102f98 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8102f94:	2303      	movs	r3, #3
 8102f96:	e00f      	b.n	8102fb8 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8102f98:	68fb      	ldr	r3, [r7, #12]
 8102f9a:	681b      	ldr	r3, [r3, #0]
 8102f9c:	695a      	ldr	r2, [r3, #20]
 8102f9e:	68bb      	ldr	r3, [r7, #8]
 8102fa0:	4013      	ands	r3, r2
 8102fa2:	68ba      	ldr	r2, [r7, #8]
 8102fa4:	429a      	cmp	r2, r3
 8102fa6:	bf0c      	ite	eq
 8102fa8:	2301      	moveq	r3, #1
 8102faa:	2300      	movne	r3, #0
 8102fac:	b2db      	uxtb	r3, r3
 8102fae:	461a      	mov	r2, r3
 8102fb0:	79fb      	ldrb	r3, [r7, #7]
 8102fb2:	429a      	cmp	r2, r3
 8102fb4:	d0df      	beq.n	8102f76 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8102fb6:	2300      	movs	r3, #0
}
 8102fb8:	4618      	mov	r0, r3
 8102fba:	3710      	adds	r7, #16
 8102fbc:	46bd      	mov	sp, r7
 8102fbe:	bd80      	pop	{r7, pc}

08102fc0 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8102fc0:	b480      	push	{r7}
 8102fc2:	b085      	sub	sp, #20
 8102fc4:	af00      	add	r7, sp, #0
 8102fc6:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8102fc8:	687b      	ldr	r3, [r7, #4]
 8102fca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8102fcc:	095b      	lsrs	r3, r3, #5
 8102fce:	3301      	adds	r3, #1
 8102fd0:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8102fd2:	687b      	ldr	r3, [r7, #4]
 8102fd4:	68db      	ldr	r3, [r3, #12]
 8102fd6:	3301      	adds	r3, #1
 8102fd8:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8102fda:	68bb      	ldr	r3, [r7, #8]
 8102fdc:	3307      	adds	r3, #7
 8102fde:	08db      	lsrs	r3, r3, #3
 8102fe0:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8102fe2:	68bb      	ldr	r3, [r7, #8]
 8102fe4:	68fa      	ldr	r2, [r7, #12]
 8102fe6:	fb02 f303 	mul.w	r3, r2, r3
}
 8102fea:	4618      	mov	r0, r3
 8102fec:	3714      	adds	r7, #20
 8102fee:	46bd      	mov	sp, r7
 8102ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102ff4:	4770      	bx	lr
	...

08102ff8 <__libc_init_array>:
 8102ff8:	b570      	push	{r4, r5, r6, lr}
 8102ffa:	4d0d      	ldr	r5, [pc, #52]	@ (8103030 <__libc_init_array+0x38>)
 8102ffc:	4c0d      	ldr	r4, [pc, #52]	@ (8103034 <__libc_init_array+0x3c>)
 8102ffe:	1b64      	subs	r4, r4, r5
 8103000:	10a4      	asrs	r4, r4, #2
 8103002:	2600      	movs	r6, #0
 8103004:	42a6      	cmp	r6, r4
 8103006:	d109      	bne.n	810301c <__libc_init_array+0x24>
 8103008:	4d0b      	ldr	r5, [pc, #44]	@ (8103038 <__libc_init_array+0x40>)
 810300a:	4c0c      	ldr	r4, [pc, #48]	@ (810303c <__libc_init_array+0x44>)
 810300c:	f000 f818 	bl	8103040 <_init>
 8103010:	1b64      	subs	r4, r4, r5
 8103012:	10a4      	asrs	r4, r4, #2
 8103014:	2600      	movs	r6, #0
 8103016:	42a6      	cmp	r6, r4
 8103018:	d105      	bne.n	8103026 <__libc_init_array+0x2e>
 810301a:	bd70      	pop	{r4, r5, r6, pc}
 810301c:	f855 3b04 	ldr.w	r3, [r5], #4
 8103020:	4798      	blx	r3
 8103022:	3601      	adds	r6, #1
 8103024:	e7ee      	b.n	8103004 <__libc_init_array+0xc>
 8103026:	f855 3b04 	ldr.w	r3, [r5], #4
 810302a:	4798      	blx	r3
 810302c:	3601      	adds	r6, #1
 810302e:	e7f2      	b.n	8103016 <__libc_init_array+0x1e>
 8103030:	08103080 	.word	0x08103080
 8103034:	08103080 	.word	0x08103080
 8103038:	08103080 	.word	0x08103080
 810303c:	08103084 	.word	0x08103084

08103040 <_init>:
 8103040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8103042:	bf00      	nop
 8103044:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8103046:	bc08      	pop	{r3}
 8103048:	469e      	mov	lr, r3
 810304a:	4770      	bx	lr

0810304c <_fini>:
 810304c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810304e:	bf00      	nop
 8103050:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8103052:	bc08      	pop	{r3}
 8103054:	469e      	mov	lr, r3
 8103056:	4770      	bx	lr
