
Rx_M4_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f54  08100298  08100298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  081031ec  081031ec  000041ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08103214  08103214  00004214  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0810321c  0810321c  0000421c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08103220  08103220  00004220  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000014  10000000  08103224  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000000dc  10000014  08103238  00005014  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  100000f0  08103238  000050f0  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00005014  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000b588  00000000  00000000  00005044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00001f09  00000000  00000000  000105cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000a10  00000000  00000000  000124d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 0000076a  00000000  00000000  00012ee8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003a05f  00000000  00000000  00013652  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0000d48f  00000000  00000000  0004d6b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0017cbb1  00000000  00000000  0005ab40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001d76f1  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00002764  00000000  00000000  001d7734  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000004e  00000000  00000000  001d9e98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08100298 <__do_global_dtors_aux>:
 8100298:	b510      	push	{r4, lr}
 810029a:	4c05      	ldr	r4, [pc, #20]	@ (81002b0 <__do_global_dtors_aux+0x18>)
 810029c:	7823      	ldrb	r3, [r4, #0]
 810029e:	b933      	cbnz	r3, 81002ae <__do_global_dtors_aux+0x16>
 81002a0:	4b04      	ldr	r3, [pc, #16]	@ (81002b4 <__do_global_dtors_aux+0x1c>)
 81002a2:	b113      	cbz	r3, 81002aa <__do_global_dtors_aux+0x12>
 81002a4:	4804      	ldr	r0, [pc, #16]	@ (81002b8 <__do_global_dtors_aux+0x20>)
 81002a6:	f3af 8000 	nop.w
 81002aa:	2301      	movs	r3, #1
 81002ac:	7023      	strb	r3, [r4, #0]
 81002ae:	bd10      	pop	{r4, pc}
 81002b0:	10000014 	.word	0x10000014
 81002b4:	00000000 	.word	0x00000000
 81002b8:	081031d4 	.word	0x081031d4

081002bc <frame_dummy>:
 81002bc:	b508      	push	{r3, lr}
 81002be:	4b03      	ldr	r3, [pc, #12]	@ (81002cc <frame_dummy+0x10>)
 81002c0:	b11b      	cbz	r3, 81002ca <frame_dummy+0xe>
 81002c2:	4903      	ldr	r1, [pc, #12]	@ (81002d0 <frame_dummy+0x14>)
 81002c4:	4803      	ldr	r0, [pc, #12]	@ (81002d4 <frame_dummy+0x18>)
 81002c6:	f3af 8000 	nop.w
 81002ca:	bd08      	pop	{r3, pc}
 81002cc:	00000000 	.word	0x00000000
 81002d0:	10000018 	.word	0x10000018
 81002d4:	081031d4 	.word	0x081031d4

081002d8 <__aeabi_uldivmod>:
 81002d8:	b953      	cbnz	r3, 81002f0 <__aeabi_uldivmod+0x18>
 81002da:	b94a      	cbnz	r2, 81002f0 <__aeabi_uldivmod+0x18>
 81002dc:	2900      	cmp	r1, #0
 81002de:	bf08      	it	eq
 81002e0:	2800      	cmpeq	r0, #0
 81002e2:	bf1c      	itt	ne
 81002e4:	f04f 31ff 	movne.w	r1, #4294967295
 81002e8:	f04f 30ff 	movne.w	r0, #4294967295
 81002ec:	f000 b96a 	b.w	81005c4 <__aeabi_idiv0>
 81002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 81002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 81002f8:	f000 f806 	bl	8100308 <__udivmoddi4>
 81002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8100304:	b004      	add	sp, #16
 8100306:	4770      	bx	lr

08100308 <__udivmoddi4>:
 8100308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810030c:	9d08      	ldr	r5, [sp, #32]
 810030e:	460c      	mov	r4, r1
 8100310:	2b00      	cmp	r3, #0
 8100312:	d14e      	bne.n	81003b2 <__udivmoddi4+0xaa>
 8100314:	4694      	mov	ip, r2
 8100316:	458c      	cmp	ip, r1
 8100318:	4686      	mov	lr, r0
 810031a:	fab2 f282 	clz	r2, r2
 810031e:	d962      	bls.n	81003e6 <__udivmoddi4+0xde>
 8100320:	b14a      	cbz	r2, 8100336 <__udivmoddi4+0x2e>
 8100322:	f1c2 0320 	rsb	r3, r2, #32
 8100326:	4091      	lsls	r1, r2
 8100328:	fa20 f303 	lsr.w	r3, r0, r3
 810032c:	fa0c fc02 	lsl.w	ip, ip, r2
 8100330:	4319      	orrs	r1, r3
 8100332:	fa00 fe02 	lsl.w	lr, r0, r2
 8100336:	ea4f 471c 	mov.w	r7, ip, lsr #16
 810033a:	fa1f f68c 	uxth.w	r6, ip
 810033e:	fbb1 f4f7 	udiv	r4, r1, r7
 8100342:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8100346:	fb07 1114 	mls	r1, r7, r4, r1
 810034a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 810034e:	fb04 f106 	mul.w	r1, r4, r6
 8100352:	4299      	cmp	r1, r3
 8100354:	d90a      	bls.n	810036c <__udivmoddi4+0x64>
 8100356:	eb1c 0303 	adds.w	r3, ip, r3
 810035a:	f104 30ff 	add.w	r0, r4, #4294967295
 810035e:	f080 8112 	bcs.w	8100586 <__udivmoddi4+0x27e>
 8100362:	4299      	cmp	r1, r3
 8100364:	f240 810f 	bls.w	8100586 <__udivmoddi4+0x27e>
 8100368:	3c02      	subs	r4, #2
 810036a:	4463      	add	r3, ip
 810036c:	1a59      	subs	r1, r3, r1
 810036e:	fa1f f38e 	uxth.w	r3, lr
 8100372:	fbb1 f0f7 	udiv	r0, r1, r7
 8100376:	fb07 1110 	mls	r1, r7, r0, r1
 810037a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 810037e:	fb00 f606 	mul.w	r6, r0, r6
 8100382:	429e      	cmp	r6, r3
 8100384:	d90a      	bls.n	810039c <__udivmoddi4+0x94>
 8100386:	eb1c 0303 	adds.w	r3, ip, r3
 810038a:	f100 31ff 	add.w	r1, r0, #4294967295
 810038e:	f080 80fc 	bcs.w	810058a <__udivmoddi4+0x282>
 8100392:	429e      	cmp	r6, r3
 8100394:	f240 80f9 	bls.w	810058a <__udivmoddi4+0x282>
 8100398:	4463      	add	r3, ip
 810039a:	3802      	subs	r0, #2
 810039c:	1b9b      	subs	r3, r3, r6
 810039e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 81003a2:	2100      	movs	r1, #0
 81003a4:	b11d      	cbz	r5, 81003ae <__udivmoddi4+0xa6>
 81003a6:	40d3      	lsrs	r3, r2
 81003a8:	2200      	movs	r2, #0
 81003aa:	e9c5 3200 	strd	r3, r2, [r5]
 81003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 81003b2:	428b      	cmp	r3, r1
 81003b4:	d905      	bls.n	81003c2 <__udivmoddi4+0xba>
 81003b6:	b10d      	cbz	r5, 81003bc <__udivmoddi4+0xb4>
 81003b8:	e9c5 0100 	strd	r0, r1, [r5]
 81003bc:	2100      	movs	r1, #0
 81003be:	4608      	mov	r0, r1
 81003c0:	e7f5      	b.n	81003ae <__udivmoddi4+0xa6>
 81003c2:	fab3 f183 	clz	r1, r3
 81003c6:	2900      	cmp	r1, #0
 81003c8:	d146      	bne.n	8100458 <__udivmoddi4+0x150>
 81003ca:	42a3      	cmp	r3, r4
 81003cc:	d302      	bcc.n	81003d4 <__udivmoddi4+0xcc>
 81003ce:	4290      	cmp	r0, r2
 81003d0:	f0c0 80f0 	bcc.w	81005b4 <__udivmoddi4+0x2ac>
 81003d4:	1a86      	subs	r6, r0, r2
 81003d6:	eb64 0303 	sbc.w	r3, r4, r3
 81003da:	2001      	movs	r0, #1
 81003dc:	2d00      	cmp	r5, #0
 81003de:	d0e6      	beq.n	81003ae <__udivmoddi4+0xa6>
 81003e0:	e9c5 6300 	strd	r6, r3, [r5]
 81003e4:	e7e3      	b.n	81003ae <__udivmoddi4+0xa6>
 81003e6:	2a00      	cmp	r2, #0
 81003e8:	f040 8090 	bne.w	810050c <__udivmoddi4+0x204>
 81003ec:	eba1 040c 	sub.w	r4, r1, ip
 81003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 81003f4:	fa1f f78c 	uxth.w	r7, ip
 81003f8:	2101      	movs	r1, #1
 81003fa:	fbb4 f6f8 	udiv	r6, r4, r8
 81003fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8100402:	fb08 4416 	mls	r4, r8, r6, r4
 8100406:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 810040a:	fb07 f006 	mul.w	r0, r7, r6
 810040e:	4298      	cmp	r0, r3
 8100410:	d908      	bls.n	8100424 <__udivmoddi4+0x11c>
 8100412:	eb1c 0303 	adds.w	r3, ip, r3
 8100416:	f106 34ff 	add.w	r4, r6, #4294967295
 810041a:	d202      	bcs.n	8100422 <__udivmoddi4+0x11a>
 810041c:	4298      	cmp	r0, r3
 810041e:	f200 80cd 	bhi.w	81005bc <__udivmoddi4+0x2b4>
 8100422:	4626      	mov	r6, r4
 8100424:	1a1c      	subs	r4, r3, r0
 8100426:	fa1f f38e 	uxth.w	r3, lr
 810042a:	fbb4 f0f8 	udiv	r0, r4, r8
 810042e:	fb08 4410 	mls	r4, r8, r0, r4
 8100432:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8100436:	fb00 f707 	mul.w	r7, r0, r7
 810043a:	429f      	cmp	r7, r3
 810043c:	d908      	bls.n	8100450 <__udivmoddi4+0x148>
 810043e:	eb1c 0303 	adds.w	r3, ip, r3
 8100442:	f100 34ff 	add.w	r4, r0, #4294967295
 8100446:	d202      	bcs.n	810044e <__udivmoddi4+0x146>
 8100448:	429f      	cmp	r7, r3
 810044a:	f200 80b0 	bhi.w	81005ae <__udivmoddi4+0x2a6>
 810044e:	4620      	mov	r0, r4
 8100450:	1bdb      	subs	r3, r3, r7
 8100452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8100456:	e7a5      	b.n	81003a4 <__udivmoddi4+0x9c>
 8100458:	f1c1 0620 	rsb	r6, r1, #32
 810045c:	408b      	lsls	r3, r1
 810045e:	fa22 f706 	lsr.w	r7, r2, r6
 8100462:	431f      	orrs	r7, r3
 8100464:	fa20 fc06 	lsr.w	ip, r0, r6
 8100468:	fa04 f301 	lsl.w	r3, r4, r1
 810046c:	ea43 030c 	orr.w	r3, r3, ip
 8100470:	40f4      	lsrs	r4, r6
 8100472:	fa00 f801 	lsl.w	r8, r0, r1
 8100476:	0c38      	lsrs	r0, r7, #16
 8100478:	ea4f 4913 	mov.w	r9, r3, lsr #16
 810047c:	fbb4 fef0 	udiv	lr, r4, r0
 8100480:	fa1f fc87 	uxth.w	ip, r7
 8100484:	fb00 441e 	mls	r4, r0, lr, r4
 8100488:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 810048c:	fb0e f90c 	mul.w	r9, lr, ip
 8100490:	45a1      	cmp	r9, r4
 8100492:	fa02 f201 	lsl.w	r2, r2, r1
 8100496:	d90a      	bls.n	81004ae <__udivmoddi4+0x1a6>
 8100498:	193c      	adds	r4, r7, r4
 810049a:	f10e 3aff 	add.w	sl, lr, #4294967295
 810049e:	f080 8084 	bcs.w	81005aa <__udivmoddi4+0x2a2>
 81004a2:	45a1      	cmp	r9, r4
 81004a4:	f240 8081 	bls.w	81005aa <__udivmoddi4+0x2a2>
 81004a8:	f1ae 0e02 	sub.w	lr, lr, #2
 81004ac:	443c      	add	r4, r7
 81004ae:	eba4 0409 	sub.w	r4, r4, r9
 81004b2:	fa1f f983 	uxth.w	r9, r3
 81004b6:	fbb4 f3f0 	udiv	r3, r4, r0
 81004ba:	fb00 4413 	mls	r4, r0, r3, r4
 81004be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 81004c2:	fb03 fc0c 	mul.w	ip, r3, ip
 81004c6:	45a4      	cmp	ip, r4
 81004c8:	d907      	bls.n	81004da <__udivmoddi4+0x1d2>
 81004ca:	193c      	adds	r4, r7, r4
 81004cc:	f103 30ff 	add.w	r0, r3, #4294967295
 81004d0:	d267      	bcs.n	81005a2 <__udivmoddi4+0x29a>
 81004d2:	45a4      	cmp	ip, r4
 81004d4:	d965      	bls.n	81005a2 <__udivmoddi4+0x29a>
 81004d6:	3b02      	subs	r3, #2
 81004d8:	443c      	add	r4, r7
 81004da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 81004de:	fba0 9302 	umull	r9, r3, r0, r2
 81004e2:	eba4 040c 	sub.w	r4, r4, ip
 81004e6:	429c      	cmp	r4, r3
 81004e8:	46ce      	mov	lr, r9
 81004ea:	469c      	mov	ip, r3
 81004ec:	d351      	bcc.n	8100592 <__udivmoddi4+0x28a>
 81004ee:	d04e      	beq.n	810058e <__udivmoddi4+0x286>
 81004f0:	b155      	cbz	r5, 8100508 <__udivmoddi4+0x200>
 81004f2:	ebb8 030e 	subs.w	r3, r8, lr
 81004f6:	eb64 040c 	sbc.w	r4, r4, ip
 81004fa:	fa04 f606 	lsl.w	r6, r4, r6
 81004fe:	40cb      	lsrs	r3, r1
 8100500:	431e      	orrs	r6, r3
 8100502:	40cc      	lsrs	r4, r1
 8100504:	e9c5 6400 	strd	r6, r4, [r5]
 8100508:	2100      	movs	r1, #0
 810050a:	e750      	b.n	81003ae <__udivmoddi4+0xa6>
 810050c:	f1c2 0320 	rsb	r3, r2, #32
 8100510:	fa20 f103 	lsr.w	r1, r0, r3
 8100514:	fa0c fc02 	lsl.w	ip, ip, r2
 8100518:	fa24 f303 	lsr.w	r3, r4, r3
 810051c:	4094      	lsls	r4, r2
 810051e:	430c      	orrs	r4, r1
 8100520:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8100524:	fa00 fe02 	lsl.w	lr, r0, r2
 8100528:	fa1f f78c 	uxth.w	r7, ip
 810052c:	fbb3 f0f8 	udiv	r0, r3, r8
 8100530:	fb08 3110 	mls	r1, r8, r0, r3
 8100534:	0c23      	lsrs	r3, r4, #16
 8100536:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 810053a:	fb00 f107 	mul.w	r1, r0, r7
 810053e:	4299      	cmp	r1, r3
 8100540:	d908      	bls.n	8100554 <__udivmoddi4+0x24c>
 8100542:	eb1c 0303 	adds.w	r3, ip, r3
 8100546:	f100 36ff 	add.w	r6, r0, #4294967295
 810054a:	d22c      	bcs.n	81005a6 <__udivmoddi4+0x29e>
 810054c:	4299      	cmp	r1, r3
 810054e:	d92a      	bls.n	81005a6 <__udivmoddi4+0x29e>
 8100550:	3802      	subs	r0, #2
 8100552:	4463      	add	r3, ip
 8100554:	1a5b      	subs	r3, r3, r1
 8100556:	b2a4      	uxth	r4, r4
 8100558:	fbb3 f1f8 	udiv	r1, r3, r8
 810055c:	fb08 3311 	mls	r3, r8, r1, r3
 8100560:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8100564:	fb01 f307 	mul.w	r3, r1, r7
 8100568:	42a3      	cmp	r3, r4
 810056a:	d908      	bls.n	810057e <__udivmoddi4+0x276>
 810056c:	eb1c 0404 	adds.w	r4, ip, r4
 8100570:	f101 36ff 	add.w	r6, r1, #4294967295
 8100574:	d213      	bcs.n	810059e <__udivmoddi4+0x296>
 8100576:	42a3      	cmp	r3, r4
 8100578:	d911      	bls.n	810059e <__udivmoddi4+0x296>
 810057a:	3902      	subs	r1, #2
 810057c:	4464      	add	r4, ip
 810057e:	1ae4      	subs	r4, r4, r3
 8100580:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8100584:	e739      	b.n	81003fa <__udivmoddi4+0xf2>
 8100586:	4604      	mov	r4, r0
 8100588:	e6f0      	b.n	810036c <__udivmoddi4+0x64>
 810058a:	4608      	mov	r0, r1
 810058c:	e706      	b.n	810039c <__udivmoddi4+0x94>
 810058e:	45c8      	cmp	r8, r9
 8100590:	d2ae      	bcs.n	81004f0 <__udivmoddi4+0x1e8>
 8100592:	ebb9 0e02 	subs.w	lr, r9, r2
 8100596:	eb63 0c07 	sbc.w	ip, r3, r7
 810059a:	3801      	subs	r0, #1
 810059c:	e7a8      	b.n	81004f0 <__udivmoddi4+0x1e8>
 810059e:	4631      	mov	r1, r6
 81005a0:	e7ed      	b.n	810057e <__udivmoddi4+0x276>
 81005a2:	4603      	mov	r3, r0
 81005a4:	e799      	b.n	81004da <__udivmoddi4+0x1d2>
 81005a6:	4630      	mov	r0, r6
 81005a8:	e7d4      	b.n	8100554 <__udivmoddi4+0x24c>
 81005aa:	46d6      	mov	lr, sl
 81005ac:	e77f      	b.n	81004ae <__udivmoddi4+0x1a6>
 81005ae:	4463      	add	r3, ip
 81005b0:	3802      	subs	r0, #2
 81005b2:	e74d      	b.n	8100450 <__udivmoddi4+0x148>
 81005b4:	4606      	mov	r6, r0
 81005b6:	4623      	mov	r3, r4
 81005b8:	4608      	mov	r0, r1
 81005ba:	e70f      	b.n	81003dc <__udivmoddi4+0xd4>
 81005bc:	3e02      	subs	r6, #2
 81005be:	4463      	add	r3, ip
 81005c0:	e730      	b.n	8100424 <__udivmoddi4+0x11c>
 81005c2:	bf00      	nop

081005c4 <__aeabi_idiv0>:
 81005c4:	4770      	bx	lr
 81005c6:	bf00      	nop

081005c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 81005c8:	b480      	push	{r7}
 81005ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 81005cc:	4b09      	ldr	r3, [pc, #36]	@ (81005f4 <SystemInit+0x2c>)
 81005ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 81005d2:	4a08      	ldr	r2, [pc, #32]	@ (81005f4 <SystemInit+0x2c>)
 81005d4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 81005d8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 81005dc:	4b05      	ldr	r3, [pc, #20]	@ (81005f4 <SystemInit+0x2c>)
 81005de:	691b      	ldr	r3, [r3, #16]
 81005e0:	4a04      	ldr	r2, [pc, #16]	@ (81005f4 <SystemInit+0x2c>)
 81005e2:	f043 0310 	orr.w	r3, r3, #16
 81005e6:	6113      	str	r3, [r2, #16]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 81005e8:	bf00      	nop
 81005ea:	46bd      	mov	sp, r7
 81005ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 81005f0:	4770      	bx	lr
 81005f2:	bf00      	nop
 81005f4:	e000ed00 	.word	0xe000ed00

081005f8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 81005f8:	b480      	push	{r7}
 81005fa:	b083      	sub	sp, #12
 81005fc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 81005fe:	4b0a      	ldr	r3, [pc, #40]	@ (8100628 <MX_DMA_Init+0x30>)
 8100600:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8100604:	4a08      	ldr	r2, [pc, #32]	@ (8100628 <MX_DMA_Init+0x30>)
 8100606:	f043 0301 	orr.w	r3, r3, #1
 810060a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 810060e:	4b06      	ldr	r3, [pc, #24]	@ (8100628 <MX_DMA_Init+0x30>)
 8100610:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8100614:	f003 0301 	and.w	r3, r3, #1
 8100618:	607b      	str	r3, [r7, #4]
 810061a:	687b      	ldr	r3, [r7, #4]

}
 810061c:	bf00      	nop
 810061e:	370c      	adds	r7, #12
 8100620:	46bd      	mov	sp, r7
 8100622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100626:	4770      	bx	lr
 8100628:	58024400 	.word	0x58024400

0810062c <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 810062c:	b580      	push	{r7, lr}
 810062e:	b08a      	sub	sp, #40	@ 0x28
 8100630:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8100632:	f107 0314 	add.w	r3, r7, #20
 8100636:	2200      	movs	r2, #0
 8100638:	601a      	str	r2, [r3, #0]
 810063a:	605a      	str	r2, [r3, #4]
 810063c:	609a      	str	r2, [r3, #8]
 810063e:	60da      	str	r2, [r3, #12]
 8100640:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8100642:	4b4b      	ldr	r3, [pc, #300]	@ (8100770 <MX_GPIO_Init+0x144>)
 8100644:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100648:	4a49      	ldr	r2, [pc, #292]	@ (8100770 <MX_GPIO_Init+0x144>)
 810064a:	f043 0310 	orr.w	r3, r3, #16
 810064e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8100652:	4b47      	ldr	r3, [pc, #284]	@ (8100770 <MX_GPIO_Init+0x144>)
 8100654:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100658:	f003 0310 	and.w	r3, r3, #16
 810065c:	613b      	str	r3, [r7, #16]
 810065e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8100660:	4b43      	ldr	r3, [pc, #268]	@ (8100770 <MX_GPIO_Init+0x144>)
 8100662:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100666:	4a42      	ldr	r2, [pc, #264]	@ (8100770 <MX_GPIO_Init+0x144>)
 8100668:	f043 0301 	orr.w	r3, r3, #1
 810066c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8100670:	4b3f      	ldr	r3, [pc, #252]	@ (8100770 <MX_GPIO_Init+0x144>)
 8100672:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100676:	f003 0301 	and.w	r3, r3, #1
 810067a:	60fb      	str	r3, [r7, #12]
 810067c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 810067e:	4b3c      	ldr	r3, [pc, #240]	@ (8100770 <MX_GPIO_Init+0x144>)
 8100680:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100684:	4a3a      	ldr	r2, [pc, #232]	@ (8100770 <MX_GPIO_Init+0x144>)
 8100686:	f043 0304 	orr.w	r3, r3, #4
 810068a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810068e:	4b38      	ldr	r3, [pc, #224]	@ (8100770 <MX_GPIO_Init+0x144>)
 8100690:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100694:	f003 0304 	and.w	r3, r3, #4
 8100698:	60bb      	str	r3, [r7, #8]
 810069a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 810069c:	4b34      	ldr	r3, [pc, #208]	@ (8100770 <MX_GPIO_Init+0x144>)
 810069e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81006a2:	4a33      	ldr	r2, [pc, #204]	@ (8100770 <MX_GPIO_Init+0x144>)
 81006a4:	f043 0308 	orr.w	r3, r3, #8
 81006a8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81006ac:	4b30      	ldr	r3, [pc, #192]	@ (8100770 <MX_GPIO_Init+0x144>)
 81006ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81006b2:	f003 0308 	and.w	r3, r3, #8
 81006b6:	607b      	str	r3, [r7, #4]
 81006b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 81006ba:	4b2d      	ldr	r3, [pc, #180]	@ (8100770 <MX_GPIO_Init+0x144>)
 81006bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81006c0:	4a2b      	ldr	r2, [pc, #172]	@ (8100770 <MX_GPIO_Init+0x144>)
 81006c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 81006c6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81006ca:	4b29      	ldr	r3, [pc, #164]	@ (8100770 <MX_GPIO_Init+0x144>)
 81006cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81006d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 81006d4:	603b      	str	r3, [r7, #0]
 81006d6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_0, GPIO_PIN_RESET);
 81006d8:	2200      	movs	r2, #0
 81006da:	2105      	movs	r1, #5
 81006dc:	4825      	ldr	r0, [pc, #148]	@ (8100774 <MX_GPIO_Init+0x148>)
 81006de:	f001 f96b 	bl	81019b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_RESET);
 81006e2:	2200      	movs	r2, #0
 81006e4:	2110      	movs	r1, #16
 81006e6:	4824      	ldr	r0, [pc, #144]	@ (8100778 <MX_GPIO_Init+0x14c>)
 81006e8:	f001 f966 	bl	81019b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, CS_Pin|CE_Pin, GPIO_PIN_RESET);
 81006ec:	2200      	movs	r2, #0
 81006ee:	f44f 41a0 	mov.w	r1, #20480	@ 0x5000
 81006f2:	4822      	ldr	r0, [pc, #136]	@ (810077c <MX_GPIO_Init+0x150>)
 81006f4:	f001 f960 	bl	81019b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_0;
 81006f8:	2305      	movs	r3, #5
 81006fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 81006fc:	2301      	movs	r3, #1
 81006fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100700:	2300      	movs	r3, #0
 8100702:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8100704:	2300      	movs	r3, #0
 8100706:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8100708:	f107 0314 	add.w	r3, r7, #20
 810070c:	4619      	mov	r1, r3
 810070e:	4819      	ldr	r0, [pc, #100]	@ (8100774 <MX_GPIO_Init+0x148>)
 8100710:	f000 ff8a 	bl	8101628 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC10 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8100714:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8100718:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 810071a:	2300      	movs	r3, #0
 810071c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 810071e:	2302      	movs	r3, #2
 8100720:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8100722:	f107 0314 	add.w	r3, r7, #20
 8100726:	4619      	mov	r1, r3
 8100728:	4815      	ldr	r0, [pc, #84]	@ (8100780 <MX_GPIO_Init+0x154>)
 810072a:	f000 ff7d 	bl	8101628 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 810072e:	2310      	movs	r3, #16
 8100730:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8100732:	2301      	movs	r3, #1
 8100734:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100736:	2300      	movs	r3, #0
 8100738:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 810073a:	2300      	movs	r3, #0
 810073c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 810073e:	f107 0314 	add.w	r3, r7, #20
 8100742:	4619      	mov	r1, r3
 8100744:	480c      	ldr	r0, [pc, #48]	@ (8100778 <MX_GPIO_Init+0x14c>)
 8100746:	f000 ff6f 	bl	8101628 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = CS_Pin|CE_Pin;
 810074a:	f44f 43a0 	mov.w	r3, #20480	@ 0x5000
 810074e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8100750:	2301      	movs	r3, #1
 8100752:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100754:	2300      	movs	r3, #0
 8100756:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8100758:	2300      	movs	r3, #0
 810075a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 810075c:	f107 0314 	add.w	r3, r7, #20
 8100760:	4619      	mov	r1, r3
 8100762:	4806      	ldr	r0, [pc, #24]	@ (810077c <MX_GPIO_Init+0x150>)
 8100764:	f000 ff60 	bl	8101628 <HAL_GPIO_Init>

}
 8100768:	bf00      	nop
 810076a:	3728      	adds	r7, #40	@ 0x28
 810076c:	46bd      	mov	sp, r7
 810076e:	bd80      	pop	{r7, pc}
 8100770:	58024400 	.word	0x58024400
 8100774:	58021000 	.word	0x58021000
 8100778:	58020c00 	.word	0x58020c00
 810077c:	58021800 	.word	0x58021800
 8100780:	58020800 	.word	0x58020800

08100784 <Rx_mode>:
	NRF_Reset();
	NRF_WriteRegister(NRF_REG_TX_ADDR,Adress,5);
	//Para enviar a mensagem usar função transmitandwait
}

void Rx_mode(uint8_t Adress[5]){
 8100784:	b580      	push	{r7, lr}
 8100786:	b084      	sub	sp, #16
 8100788:	af02      	add	r7, sp, #8
 810078a:	6078      	str	r0, [r7, #4]

	if(NRF_Init(&hspi1, GPIOG, GPIO_PIN_12, GPIOG, GPIO_PIN_14) != NRF_OK){
 810078c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8100790:	9300      	str	r3, [sp, #0]
 8100792:	4b0f      	ldr	r3, [pc, #60]	@ (81007d0 <Rx_mode+0x4c>)
 8100794:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8100798:	490d      	ldr	r1, [pc, #52]	@ (81007d0 <Rx_mode+0x4c>)
 810079a:	480e      	ldr	r0, [pc, #56]	@ (81007d4 <Rx_mode+0x50>)
 810079c:	f000 fb42 	bl	8100e24 <NRF_Init>
 81007a0:	4603      	mov	r3, r0
 81007a2:	2b00      	cmp	r3, #0
 81007a4:	d001      	beq.n	81007aa <Rx_mode+0x26>
		Error_Handler();
 81007a6:	f000 f8fd 	bl	81009a4 <Error_Handler>
	}

	NRF_Reset();
 81007aa:	f000 fb77 	bl	8100e9c <NRF_Reset>

	NRF_WriteRegister(NRF_REG_RX_ADDR_P0,Adress,5);
 81007ae:	2205      	movs	r2, #5
 81007b0:	6879      	ldr	r1, [r7, #4]
 81007b2:	200a      	movs	r0, #10
 81007b4:	f000 fa00 	bl	8100bb8 <NRF_WriteRegister>

	NRF_WriteRegisterByte(NRF_REG_RX_PW_P0,sizeof(RxData));
 81007b8:	2118      	movs	r1, #24
 81007ba:	2011      	movs	r0, #17
 81007bc:	f000 fa12 	bl	8100be4 <NRF_WriteRegisterByte>

	NRF_EnterMode(NRF_MODE_RX);
 81007c0:	2002      	movs	r0, #2
 81007c2:	f000 fab9 	bl	8100d38 <NRF_EnterMode>
}
 81007c6:	bf00      	nop
 81007c8:	3708      	adds	r7, #8
 81007ca:	46bd      	mov	sp, r7
 81007cc:	bd80      	pop	{r7, pc}
 81007ce:	bf00      	nop
 81007d0:	58021800 	.word	0x58021800
 81007d4:	10000064 	.word	0x10000064

081007d8 <ReceiveData>:

NRF_Status ReceiveData (uint8_t *data, uint32_t len){
 81007d8:	b580      	push	{r7, lr}
 81007da:	b084      	sub	sp, #16
 81007dc:	af00      	add	r7, sp, #0
 81007de:	6078      	str	r0, [r7, #4]
 81007e0:	6039      	str	r1, [r7, #0]
	NRF_Status ret = NRF_ERROR;
 81007e2:	2304      	movs	r3, #4
 81007e4:	73fb      	strb	r3, [r7, #15]
	uint8_t status = NRF_ReadStatus();
 81007e6:	f000 fa27 	bl	8100c38 <NRF_ReadStatus>
 81007ea:	4603      	mov	r3, r0
 81007ec:	73bb      	strb	r3, [r7, #14]
	NRF_WriteAckPayload(0 , Ack_data, sizeof(Ack_data));
 81007ee:	4b12      	ldr	r3, [pc, #72]	@ (8100838 <ReceiveData+0x60>)
 81007f0:	681b      	ldr	r3, [r3, #0]
 81007f2:	2204      	movs	r2, #4
 81007f4:	4619      	mov	r1, r3
 81007f6:	2000      	movs	r0, #0
 81007f8:	f000 fbea 	bl	8100fd0 <NRF_WriteAckPayload>
	uint8_t STATUS_REGISTER_RX_DR_BIT = 6;
 81007fc:	2306      	movs	r3, #6
 81007fe:	737b      	strb	r3, [r7, #13]
	if(status & (1<<STATUS_REGISTER_RX_DR_BIT)){
 8100800:	7bba      	ldrb	r2, [r7, #14]
 8100802:	7b7b      	ldrb	r3, [r7, #13]
 8100804:	fa42 f303 	asr.w	r3, r2, r3
 8100808:	f003 0301 	and.w	r3, r3, #1
 810080c:	2b00      	cmp	r3, #0
 810080e:	d00c      	beq.n	810082a <ReceiveData+0x52>
		NRF_ReadPayload(data,len);
 8100810:	683b      	ldr	r3, [r7, #0]
 8100812:	b2db      	uxtb	r3, r3
 8100814:	4619      	mov	r1, r3
 8100816:	6878      	ldr	r0, [r7, #4]
 8100818:	f000 fbf0 	bl	8100ffc <NRF_ReadPayload>
		ret = NRF_OK;
 810081c:	2300      	movs	r3, #0
 810081e:	73fb      	strb	r3, [r7, #15]
		NRF_SetRegisterBit(NRF_REG_STATUS, 6);
 8100820:	2106      	movs	r1, #6
 8100822:	2007      	movs	r0, #7
 8100824:	f000 fa24 	bl	8100c70 <NRF_SetRegisterBit>
 8100828:	e001      	b.n	810082e <ReceiveData+0x56>
	} else {
		ret = NRF_ERROR;
 810082a:	2304      	movs	r3, #4
 810082c:	73fb      	strb	r3, [r7, #15]
	}
	return ret;
 810082e:	7bfb      	ldrb	r3, [r7, #15]
}
 8100830:	4618      	mov	r0, r3
 8100832:	3710      	adds	r7, #16
 8100834:	46bd      	mov	sp, r7
 8100836:	bd80      	pop	{r7, pc}
 8100838:	10000008 	.word	0x10000008

0810083c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 810083c:	b580      	push	{r7, lr}
 810083e:	b086      	sub	sp, #24
 8100840:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 8100842:	4b4f      	ldr	r3, [pc, #316]	@ (8100980 <main+0x144>)
 8100844:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100848:	4a4d      	ldr	r2, [pc, #308]	@ (8100980 <main+0x144>)
 810084a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 810084e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8100852:	4b4b      	ldr	r3, [pc, #300]	@ (8100980 <main+0x144>)
 8100854:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100858:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 810085c:	607b      	str	r3, [r7, #4]
 810085e:	687b      	ldr	r3, [r7, #4]
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8100860:	2001      	movs	r0, #1
 8100862:	f001 f8dd 	bl	8101a20 <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 8100866:	f001 f967 	bl	8101b38 <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 810086a:	2201      	movs	r2, #1
 810086c:	2102      	movs	r1, #2
 810086e:	2000      	movs	r0, #0
 8100870:	f001 f8e8 	bl	8101a44 <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8100874:	4b43      	ldr	r3, [pc, #268]	@ (8100984 <main+0x148>)
 8100876:	681b      	ldr	r3, [r3, #0]
 8100878:	091b      	lsrs	r3, r3, #4
 810087a:	f003 030f 	and.w	r3, r3, #15
 810087e:	2b07      	cmp	r3, #7
 8100880:	d108      	bne.n	8100894 <main+0x58>
 8100882:	4b41      	ldr	r3, [pc, #260]	@ (8100988 <main+0x14c>)
 8100884:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8100888:	4a3f      	ldr	r2, [pc, #252]	@ (8100988 <main+0x14c>)
 810088a:	f043 0301 	orr.w	r3, r3, #1
 810088e:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104
 8100892:	e007      	b.n	81008a4 <main+0x68>
 8100894:	4b3c      	ldr	r3, [pc, #240]	@ (8100988 <main+0x14c>)
 8100896:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 810089a:	4a3b      	ldr	r2, [pc, #236]	@ (8100988 <main+0x14c>)
 810089c:	f043 0301 	orr.w	r3, r3, #1
 81008a0:	f8c2 3114 	str.w	r3, [r2, #276]	@ 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 81008a4:	f000 fcf0 	bl	8101288 <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 81008a8:	f7ff fec0 	bl	810062c <MX_GPIO_Init>
  MX_DMA_Init();
 81008ac:	f7ff fea4 	bl	81005f8 <MX_DMA_Init>
  MX_SPI1_Init();
 81008b0:	f000 fbb6 	bl	8101020 <MX_SPI1_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  GPIO_PinState PinState[2];

  //definicao do robo por meio da entrada de tensao no pinc10 e Pinc11//
  PinState[0]= HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_10);
 81008b4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 81008b8:	4834      	ldr	r0, [pc, #208]	@ (810098c <main+0x150>)
 81008ba:	f001 f865 	bl	8101988 <HAL_GPIO_ReadPin>
 81008be:	4603      	mov	r3, r0
 81008c0:	743b      	strb	r3, [r7, #16]
  PinState[1]= HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_11);
 81008c2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 81008c6:	4831      	ldr	r0, [pc, #196]	@ (810098c <main+0x150>)
 81008c8:	f001 f85e 	bl	8101988 <HAL_GPIO_ReadPin>
 81008cc:	4603      	mov	r3, r0
 81008ce:	747b      	strb	r3, [r7, #17]

  uint8_t TxAdress0[] = {1,2,3,4,5};
 81008d0:	4a2f      	ldr	r2, [pc, #188]	@ (8100990 <main+0x154>)
 81008d2:	f107 0308 	add.w	r3, r7, #8
 81008d6:	e892 0003 	ldmia.w	r2, {r0, r1}
 81008da:	6018      	str	r0, [r3, #0]
 81008dc:	3304      	adds	r3, #4
 81008de:	7019      	strb	r1, [r3, #0]
  Rx_mode(TxAdress0);
 81008e0:	f107 0308 	add.w	r3, r7, #8
 81008e4:	4618      	mov	r0, r3
 81008e6:	f7ff ff4d 	bl	8100784 <Rx_mode>
  if((PinState[0]==0)&&(PinState[1]==0)){
 81008ea:	7c3b      	ldrb	r3, [r7, #16]
 81008ec:	2b00      	cmp	r3, #0
 81008ee:	d106      	bne.n	81008fe <main+0xc2>
 81008f0:	7c7b      	ldrb	r3, [r7, #17]
 81008f2:	2b00      	cmp	r3, #0
 81008f4:	d103      	bne.n	81008fe <main+0xc2>
	  NRF_WriteRegisterByte(NRF_REG_RF_CH,0x02); // Canal 3
 81008f6:	2102      	movs	r1, #2
 81008f8:	2005      	movs	r0, #5
 81008fa:	f000 f973 	bl	8100be4 <NRF_WriteRegisterByte>

  }
  if(PinState[0]==1){
 81008fe:	7c3b      	ldrb	r3, [r7, #16]
 8100900:	2b01      	cmp	r3, #1
 8100902:	d107      	bne.n	8100914 <main+0xd8>
	  NRF_WriteRegisterByte(NRF_REG_RF_CH,0x03); // Canal 4
 8100904:	2103      	movs	r1, #3
 8100906:	2005      	movs	r0, #5
 8100908:	f000 f96c 	bl	8100be4 <NRF_WriteRegisterByte>
	  HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_0);
 810090c:	2101      	movs	r1, #1
 810090e:	4821      	ldr	r0, [pc, #132]	@ (8100994 <main+0x158>)
 8100910:	f001 f86b 	bl	81019ea <HAL_GPIO_TogglePin>
  }
  if(PinState[1]==1){
 8100914:	7c7b      	ldrb	r3, [r7, #17]
 8100916:	2b01      	cmp	r3, #1
 8100918:	d107      	bne.n	810092a <main+0xee>
	  NRF_WriteRegisterByte(NRF_REG_RF_CH,0x04); //Canal 5
 810091a:	2104      	movs	r1, #4
 810091c:	2005      	movs	r0, #5
 810091e:	f000 f961 	bl	8100be4 <NRF_WriteRegisterByte>
	  HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_2);
 8100922:	2104      	movs	r1, #4
 8100924:	481b      	ldr	r0, [pc, #108]	@ (8100994 <main+0x158>)
 8100926:	f001 f860 	bl	81019ea <HAL_GPIO_TogglePin>
  }
  NRF_Status ret = NRF_OK;
 810092a:	2300      	movs	r3, #0
 810092c:	74fb      	strb	r3, [r7, #19]
  while (1)
  {
	 //comunicacao com o outro core
	 ret = ReceiveData(RxData, sizeof(RxData));
 810092e:	2118      	movs	r1, #24
 8100930:	4819      	ldr	r0, [pc, #100]	@ (8100998 <main+0x15c>)
 8100932:	f7ff ff51 	bl	81007d8 <ReceiveData>
 8100936:	4603      	mov	r3, r0
 8100938:	74fb      	strb	r3, [r7, #19]
	 if(ret == NRF_OK){
 810093a:	7cfb      	ldrb	r3, [r7, #19]
 810093c:	2b00      	cmp	r3, #0
 810093e:	d103      	bne.n	8100948 <main+0x10c>
		 HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8100940:	2101      	movs	r1, #1
 8100942:	4816      	ldr	r0, [pc, #88]	@ (810099c <main+0x160>)
 8100944:	f001 f851 	bl	81019ea <HAL_GPIO_TogglePin>

	 }
	 if(xfr_ptr->sts_4to7 == 0){
 8100948:	4b15      	ldr	r3, [pc, #84]	@ (81009a0 <main+0x164>)
 810094a:	781b      	ldrb	r3, [r3, #0]
 810094c:	b2db      	uxtb	r3, r3
 810094e:	2b00      	cmp	r3, #0
 8100950:	d1ed      	bne.n	810092e <main+0xf2>
		 for(int n = 0; n < 6; n++){
 8100952:	2300      	movs	r3, #0
 8100954:	617b      	str	r3, [r7, #20]
 8100956:	e00b      	b.n	8100970 <main+0x134>
		 	xfr_ptr->M4toM7[n] = RxData[n];
 8100958:	4911      	ldr	r1, [pc, #68]	@ (81009a0 <main+0x164>)
 810095a:	4a0f      	ldr	r2, [pc, #60]	@ (8100998 <main+0x15c>)
 810095c:	697b      	ldr	r3, [r7, #20]
 810095e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8100962:	697b      	ldr	r3, [r7, #20]
 8100964:	009b      	lsls	r3, r3, #2
 8100966:	440b      	add	r3, r1
 8100968:	605a      	str	r2, [r3, #4]
		 for(int n = 0; n < 6; n++){
 810096a:	697b      	ldr	r3, [r7, #20]
 810096c:	3301      	adds	r3, #1
 810096e:	617b      	str	r3, [r7, #20]
 8100970:	697b      	ldr	r3, [r7, #20]
 8100972:	2b05      	cmp	r3, #5
 8100974:	ddf0      	ble.n	8100958 <main+0x11c>
		 	}
		 xfr_ptr->sts_4to7 =1;
 8100976:	4b0a      	ldr	r3, [pc, #40]	@ (81009a0 <main+0x164>)
 8100978:	2201      	movs	r2, #1
 810097a:	701a      	strb	r2, [r3, #0]
	 ret = ReceiveData(RxData, sizeof(RxData));
 810097c:	e7d7      	b.n	810092e <main+0xf2>
 810097e:	bf00      	nop
 8100980:	58024400 	.word	0x58024400
 8100984:	e000ed00 	.word	0xe000ed00
 8100988:	58026400 	.word	0x58026400
 810098c:	58020800 	.word	0x58020800
 8100990:	081031ec 	.word	0x081031ec
 8100994:	58021000 	.word	0x58021000
 8100998:	10000030 	.word	0x10000030
 810099c:	58020400 	.word	0x58020400
 81009a0:	38001000 	.word	0x38001000

081009a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 81009a4:	b480      	push	{r7}
 81009a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 81009a8:	b672      	cpsid	i
}
 81009aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 81009ac:	bf00      	nop
 81009ae:	e7fd      	b.n	81009ac <Error_Handler+0x8>

081009b0 <csn_set>:
int current_mode = NRF_MODE_POWERDOWN; // Modo atual do NRF

/* Funções de Pinagem do NRF*/

//Pino CS em Alto (Dispositivo não está conversando com o uC)
void csn_set() {
 81009b0:	b580      	push	{r7, lr}
 81009b2:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(NRF_CSN_Port, NRF_CSN_Pin, GPIO_PIN_SET);
 81009b4:	4b04      	ldr	r3, [pc, #16]	@ (81009c8 <csn_set+0x18>)
 81009b6:	681b      	ldr	r3, [r3, #0]
 81009b8:	4a04      	ldr	r2, [pc, #16]	@ (81009cc <csn_set+0x1c>)
 81009ba:	8811      	ldrh	r1, [r2, #0]
 81009bc:	2201      	movs	r2, #1
 81009be:	4618      	mov	r0, r3
 81009c0:	f000 fffa 	bl	81019b8 <HAL_GPIO_WritePin>
}
 81009c4:	bf00      	nop
 81009c6:	bd80      	pop	{r7, pc}
 81009c8:	1000004c 	.word	0x1000004c
 81009cc:	10000050 	.word	0x10000050

081009d0 <csn_reset>:

//Pino CS em Baixo (Dispositivo  está conversando com o uC)
void csn_reset() {
 81009d0:	b580      	push	{r7, lr}
 81009d2:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(NRF_CSN_Port, NRF_CSN_Pin, GPIO_PIN_RESET);
 81009d4:	4b04      	ldr	r3, [pc, #16]	@ (81009e8 <csn_reset+0x18>)
 81009d6:	681b      	ldr	r3, [r3, #0]
 81009d8:	4a04      	ldr	r2, [pc, #16]	@ (81009ec <csn_reset+0x1c>)
 81009da:	8811      	ldrh	r1, [r2, #0]
 81009dc:	2200      	movs	r2, #0
 81009de:	4618      	mov	r0, r3
 81009e0:	f000 ffea 	bl	81019b8 <HAL_GPIO_WritePin>
}
 81009e4:	bf00      	nop
 81009e6:	bd80      	pop	{r7, pc}
 81009e8:	1000004c 	.word	0x1000004c
 81009ec:	10000050 	.word	0x10000050

081009f0 <ce_set>:

//Pino CE em Alto (Dispositivo está em funcionamento,Tx ou Rx)
void ce_set() {
 81009f0:	b580      	push	{r7, lr}
 81009f2:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(NRF_CE_Port, NRF_CE_Pin, GPIO_PIN_SET);
 81009f4:	4b04      	ldr	r3, [pc, #16]	@ (8100a08 <ce_set+0x18>)
 81009f6:	681b      	ldr	r3, [r3, #0]
 81009f8:	4a04      	ldr	r2, [pc, #16]	@ (8100a0c <ce_set+0x1c>)
 81009fa:	8811      	ldrh	r1, [r2, #0]
 81009fc:	2201      	movs	r2, #1
 81009fe:	4618      	mov	r0, r3
 8100a00:	f000 ffda 	bl	81019b8 <HAL_GPIO_WritePin>
}
 8100a04:	bf00      	nop
 8100a06:	bd80      	pop	{r7, pc}
 8100a08:	10000054 	.word	0x10000054
 8100a0c:	10000058 	.word	0x10000058

08100a10 <ce_reset>:

//Pino CE em Baixo (Dispositivo está em standby)
void ce_reset() {
 8100a10:	b580      	push	{r7, lr}
 8100a12:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(NRF_CE_Port, NRF_CE_Pin, GPIO_PIN_RESET);
 8100a14:	4b04      	ldr	r3, [pc, #16]	@ (8100a28 <ce_reset+0x18>)
 8100a16:	681b      	ldr	r3, [r3, #0]
 8100a18:	4a04      	ldr	r2, [pc, #16]	@ (8100a2c <ce_reset+0x1c>)
 8100a1a:	8811      	ldrh	r1, [r2, #0]
 8100a1c:	2200      	movs	r2, #0
 8100a1e:	4618      	mov	r0, r3
 8100a20:	f000 ffca 	bl	81019b8 <HAL_GPIO_WritePin>
}
 8100a24:	bf00      	nop
 8100a26:	bd80      	pop	{r7, pc}
 8100a28:	10000054 	.word	0x10000054
 8100a2c:	10000058 	.word	0x10000058

08100a30 <wait>:
uint8_t read_ce() {
  return HAL_GPIO_ReadPin(NRF_CE_Port, NRF_CE_Pin);
}

//Função de "Esperar" em us
void wait(uint64_t us) {
 8100a30:	b5b0      	push	{r4, r5, r7, lr}
 8100a32:	b084      	sub	sp, #16
 8100a34:	af00      	add	r7, sp, #0
 8100a36:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t volatile cycles = CPU_Freq * us / 1000000; //Quantos ciclos de CPU deverão ser esperados para alcancar tal tempo
 8100a3a:	4915      	ldr	r1, [pc, #84]	@ (8100a90 <wait+0x60>)
 8100a3c:	6809      	ldr	r1, [r1, #0]
 8100a3e:	2000      	movs	r0, #0
 8100a40:	460a      	mov	r2, r1
 8100a42:	4603      	mov	r3, r0
 8100a44:	6839      	ldr	r1, [r7, #0]
 8100a46:	fb03 f001 	mul.w	r0, r3, r1
 8100a4a:	6879      	ldr	r1, [r7, #4]
 8100a4c:	fb02 f101 	mul.w	r1, r2, r1
 8100a50:	4401      	add	r1, r0
 8100a52:	6838      	ldr	r0, [r7, #0]
 8100a54:	fba0 4502 	umull	r4, r5, r0, r2
 8100a58:	194b      	adds	r3, r1, r5
 8100a5a:	461d      	mov	r5, r3
 8100a5c:	4a0d      	ldr	r2, [pc, #52]	@ (8100a94 <wait+0x64>)
 8100a5e:	f04f 0300 	mov.w	r3, #0
 8100a62:	4620      	mov	r0, r4
 8100a64:	4629      	mov	r1, r5
 8100a66:	f7ff fc37 	bl	81002d8 <__aeabi_uldivmod>
 8100a6a:	4602      	mov	r2, r0
 8100a6c:	460b      	mov	r3, r1
 8100a6e:	4613      	mov	r3, r2
 8100a70:	60fb      	str	r3, [r7, #12]
  uint32_t volatile current = 0; //Quantos se passaram
 8100a72:	2300      	movs	r3, #0
 8100a74:	60bb      	str	r3, [r7, #8]
  while (current <= cycles) {
 8100a76:	e002      	b.n	8100a7e <wait+0x4e>
    current++;
 8100a78:	68bb      	ldr	r3, [r7, #8]
 8100a7a:	3301      	adds	r3, #1
 8100a7c:	60bb      	str	r3, [r7, #8]
  while (current <= cycles) {
 8100a7e:	68ba      	ldr	r2, [r7, #8]
 8100a80:	68fb      	ldr	r3, [r7, #12]
 8100a82:	429a      	cmp	r2, r3
 8100a84:	d9f8      	bls.n	8100a78 <wait+0x48>
  }
}
 8100a86:	bf00      	nop
 8100a88:	bf00      	nop
 8100a8a:	3710      	adds	r7, #16
 8100a8c:	46bd      	mov	sp, r7
 8100a8e:	bdb0      	pop	{r4, r5, r7, pc}
 8100a90:	1000005c 	.word	0x1000005c
 8100a94:	000f4240 	.word	0x000f4240

08100a98 <NRF_SendCommand>:

/* Funções Para enviar e receber do NRFL01 em "Baixo" Nível */

//Função para enviar um comando para o NRF
NRF_Status NRF_SendCommand(uint8_t cmd) {
 8100a98:	b580      	push	{r7, lr}
 8100a9a:	b086      	sub	sp, #24
 8100a9c:	af02      	add	r7, sp, #8
 8100a9e:	4603      	mov	r3, r0
 8100aa0:	71fb      	strb	r3, [r7, #7]
  NRF_Status ret = NRF_OK;
 8100aa2:	2300      	movs	r3, #0
 8100aa4:	73fb      	strb	r3, [r7, #15]
  uint8_t status;

  csn_reset(); //Seleciona o dispositivo
 8100aa6:	f7ff ff93 	bl	81009d0 <csn_reset>
  ret = (NRF_Status)HAL_SPI_TransmitReceive(HSPI, &cmd, &status, 1, NRF_SPI_TIMEOUT_DUR); //Envia o comando e retorna o status
 8100aaa:	4b0c      	ldr	r3, [pc, #48]	@ (8100adc <NRF_SendCommand+0x44>)
 8100aac:	6818      	ldr	r0, [r3, #0]
 8100aae:	f107 020e 	add.w	r2, r7, #14
 8100ab2:	1df9      	adds	r1, r7, #7
 8100ab4:	230a      	movs	r3, #10
 8100ab6:	9300      	str	r3, [sp, #0]
 8100ab8:	2301      	movs	r3, #1
 8100aba:	f001 ff45 	bl	8102948 <HAL_SPI_TransmitReceive>
 8100abe:	4603      	mov	r3, r0
 8100ac0:	73fb      	strb	r3, [r7, #15]
  if (ret != NRF_OK) { //Verifica se o comando foi enviado corretamente
 8100ac2:	7bfb      	ldrb	r3, [r7, #15]
 8100ac4:	2b00      	cmp	r3, #0
 8100ac6:	d001      	beq.n	8100acc <NRF_SendCommand+0x34>
    return ret;
 8100ac8:	7bfb      	ldrb	r3, [r7, #15]
 8100aca:	e002      	b.n	8100ad2 <NRF_SendCommand+0x3a>
  }
  csn_set(); //Desseleciona o dispositivo
 8100acc:	f7ff ff70 	bl	81009b0 <csn_set>

  return ret;
 8100ad0:	7bfb      	ldrb	r3, [r7, #15]
}
 8100ad2:	4618      	mov	r0, r3
 8100ad4:	3710      	adds	r7, #16
 8100ad6:	46bd      	mov	sp, r7
 8100ad8:	bd80      	pop	{r7, pc}
 8100ada:	bf00      	nop
 8100adc:	10000048 	.word	0x10000048

08100ae0 <NRF_SendWriteCommand>:

/* Função para enviar um comando de escrita*/
NRF_Status NRF_SendWriteCommand(uint8_t cmd, uint8_t *write, uint8_t length) {
 8100ae0:	b580      	push	{r7, lr}
 8100ae2:	b086      	sub	sp, #24
 8100ae4:	af02      	add	r7, sp, #8
 8100ae6:	4603      	mov	r3, r0
 8100ae8:	6039      	str	r1, [r7, #0]
 8100aea:	71fb      	strb	r3, [r7, #7]
 8100aec:	4613      	mov	r3, r2
 8100aee:	71bb      	strb	r3, [r7, #6]
  NRF_Status ret = NRF_OK;
 8100af0:	2300      	movs	r3, #0
 8100af2:	73fb      	strb	r3, [r7, #15]
  uint8_t status;

  csn_reset(); //Seleciona o dispositivo
 8100af4:	f7ff ff6c 	bl	81009d0 <csn_reset>
  ret = (NRF_Status)HAL_SPI_TransmitReceive(HSPI, &cmd, &status, 1, NRF_SPI_TIMEOUT_DUR); //Manda pro NRF o comando de escrita
 8100af8:	4b13      	ldr	r3, [pc, #76]	@ (8100b48 <NRF_SendWriteCommand+0x68>)
 8100afa:	6818      	ldr	r0, [r3, #0]
 8100afc:	f107 020e 	add.w	r2, r7, #14
 8100b00:	1df9      	adds	r1, r7, #7
 8100b02:	230a      	movs	r3, #10
 8100b04:	9300      	str	r3, [sp, #0]
 8100b06:	2301      	movs	r3, #1
 8100b08:	f001 ff1e 	bl	8102948 <HAL_SPI_TransmitReceive>
 8100b0c:	4603      	mov	r3, r0
 8100b0e:	73fb      	strb	r3, [r7, #15]
  if (ret != NRF_OK) { //Verifica se está ok para escrever
 8100b10:	7bfb      	ldrb	r3, [r7, #15]
 8100b12:	2b00      	cmp	r3, #0
 8100b14:	d001      	beq.n	8100b1a <NRF_SendWriteCommand+0x3a>
	//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
    return ret;
 8100b16:	7bfb      	ldrb	r3, [r7, #15]
 8100b18:	e011      	b.n	8100b3e <NRF_SendWriteCommand+0x5e>
  }
  ret = (NRF_Status)HAL_SPI_Transmit(HSPI, write, length, NRF_SPI_TIMEOUT_DUR); //Manda  o que será escrito no registro
 8100b1a:	4b0b      	ldr	r3, [pc, #44]	@ (8100b48 <NRF_SendWriteCommand+0x68>)
 8100b1c:	6818      	ldr	r0, [r3, #0]
 8100b1e:	79bb      	ldrb	r3, [r7, #6]
 8100b20:	b29a      	uxth	r2, r3
 8100b22:	230a      	movs	r3, #10
 8100b24:	6839      	ldr	r1, [r7, #0]
 8100b26:	f001 fab3 	bl	8102090 <HAL_SPI_Transmit>
 8100b2a:	4603      	mov	r3, r0
 8100b2c:	73fb      	strb	r3, [r7, #15]
  if (ret != NRF_OK) {//Verifica se o processo foi um sucesso
 8100b2e:	7bfb      	ldrb	r3, [r7, #15]
 8100b30:	2b00      	cmp	r3, #0
 8100b32:	d001      	beq.n	8100b38 <NRF_SendWriteCommand+0x58>
    return ret;
 8100b34:	7bfb      	ldrb	r3, [r7, #15]
 8100b36:	e002      	b.n	8100b3e <NRF_SendWriteCommand+0x5e>
  }
  csn_set(); //Desseleciona o dispositivo
 8100b38:	f7ff ff3a 	bl	81009b0 <csn_set>

  return ret; //Retorna o Resultado
 8100b3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8100b3e:	4618      	mov	r0, r3
 8100b40:	3710      	adds	r7, #16
 8100b42:	46bd      	mov	sp, r7
 8100b44:	bd80      	pop	{r7, pc}
 8100b46:	bf00      	nop
 8100b48:	10000048 	.word	0x10000048

08100b4c <NRF_SendReadCommand>:

//Função para enviar um comando de leitura
NRF_Status NRF_SendReadCommand(uint8_t cmd, uint8_t *read, uint8_t length) {
 8100b4c:	b580      	push	{r7, lr}
 8100b4e:	b086      	sub	sp, #24
 8100b50:	af02      	add	r7, sp, #8
 8100b52:	4603      	mov	r3, r0
 8100b54:	6039      	str	r1, [r7, #0]
 8100b56:	71fb      	strb	r3, [r7, #7]
 8100b58:	4613      	mov	r3, r2
 8100b5a:	71bb      	strb	r3, [r7, #6]
  NRF_Status ret = NRF_OK;
 8100b5c:	2300      	movs	r3, #0
 8100b5e:	73fb      	strb	r3, [r7, #15]
  uint8_t status;

  csn_reset(); //Seleciona o dispositivo
 8100b60:	f7ff ff36 	bl	81009d0 <csn_reset>
  ret = (NRF_Status)HAL_SPI_TransmitReceive(HSPI, &cmd, &status, 1, NRF_SPI_TIMEOUT_DUR);//Manda pro NRF o comando de Leitura
 8100b64:	4b13      	ldr	r3, [pc, #76]	@ (8100bb4 <NRF_SendReadCommand+0x68>)
 8100b66:	6818      	ldr	r0, [r3, #0]
 8100b68:	f107 020e 	add.w	r2, r7, #14
 8100b6c:	1df9      	adds	r1, r7, #7
 8100b6e:	230a      	movs	r3, #10
 8100b70:	9300      	str	r3, [sp, #0]
 8100b72:	2301      	movs	r3, #1
 8100b74:	f001 fee8 	bl	8102948 <HAL_SPI_TransmitReceive>
 8100b78:	4603      	mov	r3, r0
 8100b7a:	73fb      	strb	r3, [r7, #15]
  if(ret != NRF_OK) { //Verifica se o processo foi um sucesso
 8100b7c:	7bfb      	ldrb	r3, [r7, #15]
 8100b7e:	2b00      	cmp	r3, #0
 8100b80:	d001      	beq.n	8100b86 <NRF_SendReadCommand+0x3a>
    return ret;
 8100b82:	7bfb      	ldrb	r3, [r7, #15]
 8100b84:	e011      	b.n	8100baa <NRF_SendReadCommand+0x5e>
  }
  ret = (NRF_Status)HAL_SPI_Receive(HSPI, read, length, NRF_SPI_TIMEOUT_DUR);//Recebe o que se deseja ler do NRF
 8100b86:	4b0b      	ldr	r3, [pc, #44]	@ (8100bb4 <NRF_SendReadCommand+0x68>)
 8100b88:	6818      	ldr	r0, [r3, #0]
 8100b8a:	79bb      	ldrb	r3, [r7, #6]
 8100b8c:	b29a      	uxth	r2, r3
 8100b8e:	230a      	movs	r3, #10
 8100b90:	6839      	ldr	r1, [r7, #0]
 8100b92:	f001 fc68 	bl	8102466 <HAL_SPI_Receive>
 8100b96:	4603      	mov	r3, r0
 8100b98:	73fb      	strb	r3, [r7, #15]
  if(ret != NRF_OK) {
 8100b9a:	7bfb      	ldrb	r3, [r7, #15]
 8100b9c:	2b00      	cmp	r3, #0
 8100b9e:	d001      	beq.n	8100ba4 <NRF_SendReadCommand+0x58>
    return ret;
 8100ba0:	7bfb      	ldrb	r3, [r7, #15]
 8100ba2:	e002      	b.n	8100baa <NRF_SendReadCommand+0x5e>
  }
  csn_set();//Desseleciona o dispositvo
 8100ba4:	f7ff ff04 	bl	81009b0 <csn_set>

  return ret;//Retorna o resultado
 8100ba8:	7bfb      	ldrb	r3, [r7, #15]
}
 8100baa:	4618      	mov	r0, r3
 8100bac:	3710      	adds	r7, #16
 8100bae:	46bd      	mov	sp, r7
 8100bb0:	bd80      	pop	{r7, pc}
 8100bb2:	bf00      	nop
 8100bb4:	10000048 	.word	0x10000048

08100bb8 <NRF_WriteRegister>:
/* Escreve no Registro do NRF
 * Param - Registro a ser escrito
 * Param - O que será escrito
 * Param - O tamanho (em bytes)
 *  							*/
NRF_Status NRF_WriteRegister(uint8_t reg, uint8_t *write, uint8_t length) {
 8100bb8:	b580      	push	{r7, lr}
 8100bba:	b082      	sub	sp, #8
 8100bbc:	af00      	add	r7, sp, #0
 8100bbe:	4603      	mov	r3, r0
 8100bc0:	6039      	str	r1, [r7, #0]
 8100bc2:	71fb      	strb	r3, [r7, #7]
 8100bc4:	4613      	mov	r3, r2
 8100bc6:	71bb      	strb	r3, [r7, #6]
  return NRF_SendWriteCommand(NRF_CMD_W_REGISTER | reg, write, length);
 8100bc8:	79fb      	ldrb	r3, [r7, #7]
 8100bca:	f043 0320 	orr.w	r3, r3, #32
 8100bce:	b2db      	uxtb	r3, r3
 8100bd0:	79ba      	ldrb	r2, [r7, #6]
 8100bd2:	6839      	ldr	r1, [r7, #0]
 8100bd4:	4618      	mov	r0, r3
 8100bd6:	f7ff ff83 	bl	8100ae0 <NRF_SendWriteCommand>
 8100bda:	4603      	mov	r3, r0
}
 8100bdc:	4618      	mov	r0, r3
 8100bde:	3708      	adds	r7, #8
 8100be0:	46bd      	mov	sp, r7
 8100be2:	bd80      	pop	{r7, pc}

08100be4 <NRF_WriteRegisterByte>:

/* Escreve em um byte da Memória do NRF
 * Param - Registro a ser escrito
 * Param - O que será escrito
 *  							*/
NRF_Status NRF_WriteRegisterByte(uint8_t reg, uint8_t byte) {
 8100be4:	b580      	push	{r7, lr}
 8100be6:	b084      	sub	sp, #16
 8100be8:	af00      	add	r7, sp, #0
 8100bea:	4603      	mov	r3, r0
 8100bec:	460a      	mov	r2, r1
 8100bee:	71fb      	strb	r3, [r7, #7]
 8100bf0:	4613      	mov	r3, r2
 8100bf2:	71bb      	strb	r3, [r7, #6]
  uint8_t write = byte;
 8100bf4:	79bb      	ldrb	r3, [r7, #6]
 8100bf6:	73fb      	strb	r3, [r7, #15]
  return NRF_WriteRegister(reg, &write, 1);
 8100bf8:	f107 010f 	add.w	r1, r7, #15
 8100bfc:	79fb      	ldrb	r3, [r7, #7]
 8100bfe:	2201      	movs	r2, #1
 8100c00:	4618      	mov	r0, r3
 8100c02:	f7ff ffd9 	bl	8100bb8 <NRF_WriteRegister>
 8100c06:	4603      	mov	r3, r0
}
 8100c08:	4618      	mov	r0, r3
 8100c0a:	3710      	adds	r7, #16
 8100c0c:	46bd      	mov	sp, r7
 8100c0e:	bd80      	pop	{r7, pc}

08100c10 <NRF_ReadRegister>:
/* Lê no Registro do NRF
 * Param - Registro a ser lido
 * Param - Ponteiro para variável onde será salvo
 * Param - O tamanho (em bytes)
 *  							*/
NRF_Status NRF_ReadRegister(uint8_t reg, uint8_t *read, uint8_t length) {
 8100c10:	b580      	push	{r7, lr}
 8100c12:	b082      	sub	sp, #8
 8100c14:	af00      	add	r7, sp, #0
 8100c16:	4603      	mov	r3, r0
 8100c18:	6039      	str	r1, [r7, #0]
 8100c1a:	71fb      	strb	r3, [r7, #7]
 8100c1c:	4613      	mov	r3, r2
 8100c1e:	71bb      	strb	r3, [r7, #6]
  return NRF_SendReadCommand(NRF_CMD_R_REGISTER | reg, read, length);
 8100c20:	79ba      	ldrb	r2, [r7, #6]
 8100c22:	79fb      	ldrb	r3, [r7, #7]
 8100c24:	6839      	ldr	r1, [r7, #0]
 8100c26:	4618      	mov	r0, r3
 8100c28:	f7ff ff90 	bl	8100b4c <NRF_SendReadCommand>
 8100c2c:	4603      	mov	r3, r0
}
 8100c2e:	4618      	mov	r0, r3
 8100c30:	3708      	adds	r7, #8
 8100c32:	46bd      	mov	sp, r7
 8100c34:	bd80      	pop	{r7, pc}
	...

08100c38 <NRF_ReadStatus>:
  NRF_SendReadCommand(NRF_CMD_R_REGISTER | reg, &read, 1);
  return read;
}

//Lê o Status do NRF
uint8_t NRF_ReadStatus() {
 8100c38:	b580      	push	{r7, lr}
 8100c3a:	b084      	sub	sp, #16
 8100c3c:	af02      	add	r7, sp, #8
  uint8_t status = 0x00;
 8100c3e:	2300      	movs	r3, #0
 8100c40:	71fb      	strb	r3, [r7, #7]
  uint8_t cmd = NRF_CMD_NOP;
 8100c42:	23ff      	movs	r3, #255	@ 0xff
 8100c44:	71bb      	strb	r3, [r7, #6]

  csn_reset();
 8100c46:	f7ff fec3 	bl	81009d0 <csn_reset>
  HAL_SPI_TransmitReceive(HSPI, &cmd, &status, 1, NRF_SPI_TIMEOUT_DUR);
 8100c4a:	4b08      	ldr	r3, [pc, #32]	@ (8100c6c <NRF_ReadStatus+0x34>)
 8100c4c:	6818      	ldr	r0, [r3, #0]
 8100c4e:	1dfa      	adds	r2, r7, #7
 8100c50:	1db9      	adds	r1, r7, #6
 8100c52:	230a      	movs	r3, #10
 8100c54:	9300      	str	r3, [sp, #0]
 8100c56:	2301      	movs	r3, #1
 8100c58:	f001 fe76 	bl	8102948 <HAL_SPI_TransmitReceive>
  csn_set();
 8100c5c:	f7ff fea8 	bl	81009b0 <csn_set>

  return status;
 8100c60:	79fb      	ldrb	r3, [r7, #7]
}
 8100c62:	4618      	mov	r0, r3
 8100c64:	3708      	adds	r7, #8
 8100c66:	46bd      	mov	sp, r7
 8100c68:	bd80      	pop	{r7, pc}
 8100c6a:	bf00      	nop
 8100c6c:	10000048 	.word	0x10000048

08100c70 <NRF_SetRegisterBit>:

/* Seta um Bit específico de um Registro para 1
 * Param - Registro a ser escrito
 * Param - Qual bit será alterado para 1
 *  											*/
NRF_Status NRF_SetRegisterBit(uint8_t reg, uint8_t bit) {
 8100c70:	b580      	push	{r7, lr}
 8100c72:	b084      	sub	sp, #16
 8100c74:	af00      	add	r7, sp, #0
 8100c76:	4603      	mov	r3, r0
 8100c78:	460a      	mov	r2, r1
 8100c7a:	71fb      	strb	r3, [r7, #7]
 8100c7c:	4613      	mov	r3, r2
 8100c7e:	71bb      	strb	r3, [r7, #6]
  NRF_Status ret = NRF_OK;
 8100c80:	2300      	movs	r3, #0
 8100c82:	73fb      	strb	r3, [r7, #15]
  uint8_t cfg = 0x00;
 8100c84:	2300      	movs	r3, #0
 8100c86:	73bb      	strb	r3, [r7, #14]

  ret = NRF_ReadRegister(reg, &cfg, 1); //Pega a informação do byte do registro
 8100c88:	f107 010e 	add.w	r1, r7, #14
 8100c8c:	79fb      	ldrb	r3, [r7, #7]
 8100c8e:	2201      	movs	r2, #1
 8100c90:	4618      	mov	r0, r3
 8100c92:	f7ff ffbd 	bl	8100c10 <NRF_ReadRegister>
 8100c96:	4603      	mov	r3, r0
 8100c98:	73fb      	strb	r3, [r7, #15]
  if (ret != NRF_OK) {
 8100c9a:	7bfb      	ldrb	r3, [r7, #15]
 8100c9c:	2b00      	cmp	r3, #0
 8100c9e:	d001      	beq.n	8100ca4 <NRF_SetRegisterBit+0x34>
    return ret;
 8100ca0:	7bfb      	ldrb	r3, [r7, #15]
 8100ca2:	e012      	b.n	8100cca <NRF_SetRegisterBit+0x5a>
  }

  cfg = cfg | (1 << bit); //Altera o bit por meio de um OU binário
 8100ca4:	79bb      	ldrb	r3, [r7, #6]
 8100ca6:	2201      	movs	r2, #1
 8100ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8100cac:	b25a      	sxtb	r2, r3
 8100cae:	7bbb      	ldrb	r3, [r7, #14]
 8100cb0:	b25b      	sxtb	r3, r3
 8100cb2:	4313      	orrs	r3, r2
 8100cb4:	b25b      	sxtb	r3, r3
 8100cb6:	b2db      	uxtb	r3, r3
 8100cb8:	73bb      	strb	r3, [r7, #14]
  return NRF_WriteRegister(reg, &cfg, 1); //Escreve o registro de volta
 8100cba:	f107 010e 	add.w	r1, r7, #14
 8100cbe:	79fb      	ldrb	r3, [r7, #7]
 8100cc0:	2201      	movs	r2, #1
 8100cc2:	4618      	mov	r0, r3
 8100cc4:	f7ff ff78 	bl	8100bb8 <NRF_WriteRegister>
 8100cc8:	4603      	mov	r3, r0
}
 8100cca:	4618      	mov	r0, r3
 8100ccc:	3710      	adds	r7, #16
 8100cce:	46bd      	mov	sp, r7
 8100cd0:	bd80      	pop	{r7, pc}

08100cd2 <NRF_ResetRegisterBit>:

/* Seta um Bit específico de um Registro para 0
 * Param - Registro a ser escrito
 * Param - Qual bit será alterado para 1
 *  											*/
NRF_Status NRF_ResetRegisterBit(uint8_t reg, uint8_t bit) {
 8100cd2:	b580      	push	{r7, lr}
 8100cd4:	b084      	sub	sp, #16
 8100cd6:	af00      	add	r7, sp, #0
 8100cd8:	4603      	mov	r3, r0
 8100cda:	460a      	mov	r2, r1
 8100cdc:	71fb      	strb	r3, [r7, #7]
 8100cde:	4613      	mov	r3, r2
 8100ce0:	71bb      	strb	r3, [r7, #6]
  NRF_Status ret = NRF_OK;
 8100ce2:	2300      	movs	r3, #0
 8100ce4:	73fb      	strb	r3, [r7, #15]
  uint8_t cfg = 0x00;
 8100ce6:	2300      	movs	r3, #0
 8100ce8:	73bb      	strb	r3, [r7, #14]

  ret = NRF_ReadRegister(reg, &cfg, 1);//Pega a informação do byte do registro
 8100cea:	f107 010e 	add.w	r1, r7, #14
 8100cee:	79fb      	ldrb	r3, [r7, #7]
 8100cf0:	2201      	movs	r2, #1
 8100cf2:	4618      	mov	r0, r3
 8100cf4:	f7ff ff8c 	bl	8100c10 <NRF_ReadRegister>
 8100cf8:	4603      	mov	r3, r0
 8100cfa:	73fb      	strb	r3, [r7, #15]
  if (ret != NRF_OK) {
 8100cfc:	7bfb      	ldrb	r3, [r7, #15]
 8100cfe:	2b00      	cmp	r3, #0
 8100d00:	d001      	beq.n	8100d06 <NRF_ResetRegisterBit+0x34>
    return ret;
 8100d02:	7bfb      	ldrb	r3, [r7, #15]
 8100d04:	e014      	b.n	8100d30 <NRF_ResetRegisterBit+0x5e>
  }

  cfg = cfg & ~(1 << bit);//Altera o bit por meio de um E binário
 8100d06:	79bb      	ldrb	r3, [r7, #6]
 8100d08:	2201      	movs	r2, #1
 8100d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8100d0e:	b25b      	sxtb	r3, r3
 8100d10:	43db      	mvns	r3, r3
 8100d12:	b25a      	sxtb	r2, r3
 8100d14:	7bbb      	ldrb	r3, [r7, #14]
 8100d16:	b25b      	sxtb	r3, r3
 8100d18:	4013      	ands	r3, r2
 8100d1a:	b25b      	sxtb	r3, r3
 8100d1c:	b2db      	uxtb	r3, r3
 8100d1e:	73bb      	strb	r3, [r7, #14]
  return NRF_WriteRegister(reg, &cfg, 1);//Escreve o registro de volta
 8100d20:	f107 010e 	add.w	r1, r7, #14
 8100d24:	79fb      	ldrb	r3, [r7, #7]
 8100d26:	2201      	movs	r2, #1
 8100d28:	4618      	mov	r0, r3
 8100d2a:	f7ff ff45 	bl	8100bb8 <NRF_WriteRegister>
 8100d2e:	4603      	mov	r3, r0
}
 8100d30:	4618      	mov	r0, r3
 8100d32:	3710      	adds	r7, #16
 8100d34:	46bd      	mov	sp, r7
 8100d36:	bd80      	pop	{r7, pc}

08100d38 <NRF_EnterMode>:
 * NRF_MODE_STANDBY1 - Standby
 * NRF_MODE_RX - Modo de Recepção
 * NRF_MODE_Tx - Modo de Transmissão
 * Retorno: Status
 *  								*/
NRF_Status NRF_EnterMode(uint8_t mode) {
 8100d38:	b580      	push	{r7, lr}
 8100d3a:	b084      	sub	sp, #16
 8100d3c:	af00      	add	r7, sp, #0
 8100d3e:	4603      	mov	r3, r0
 8100d40:	71fb      	strb	r3, [r7, #7]
  NRF_Status ret = NRF_OK;
 8100d42:	2300      	movs	r3, #0
 8100d44:	73fb      	strb	r3, [r7, #15]

  switch(mode) {
 8100d46:	79fb      	ldrb	r3, [r7, #7]
 8100d48:	2b03      	cmp	r3, #3
 8100d4a:	d859      	bhi.n	8100e00 <NRF_EnterMode+0xc8>
 8100d4c:	a201      	add	r2, pc, #4	@ (adr r2, 8100d54 <NRF_EnterMode+0x1c>)
 8100d4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8100d52:	bf00      	nop
 8100d54:	08100d65 	.word	0x08100d65
 8100d58:	08100d7b 	.word	0x08100d7b
 8100d5c:	08100dc5 	.word	0x08100dc5
 8100d60:	08100de3 	.word	0x08100de3
    case NRF_MODE_POWERDOWN:
      csn_set();
 8100d64:	f7ff fe24 	bl	81009b0 <csn_set>
      ce_reset();
 8100d68:	f7ff fe52 	bl	8100a10 <ce_reset>
      ret = NRF_ResetRegisterBit(NRF_REG_CONFIG, CFG_BIT_PWR_UP); //Seta o bit de Power up em 0
 8100d6c:	2101      	movs	r1, #1
 8100d6e:	2000      	movs	r0, #0
 8100d70:	f7ff ffaf 	bl	8100cd2 <NRF_ResetRegisterBit>
 8100d74:	4603      	mov	r3, r0
 8100d76:	73fb      	strb	r3, [r7, #15]
      break;
 8100d78:	e046      	b.n	8100e08 <NRF_EnterMode+0xd0>
    case NRF_MODE_STANDBY1:
      if (current_mode == NRF_MODE_POWERDOWN) {
 8100d7a:	4b29      	ldr	r3, [pc, #164]	@ (8100e20 <NRF_EnterMode+0xe8>)
 8100d7c:	681b      	ldr	r3, [r3, #0]
 8100d7e:	2b00      	cmp	r3, #0
 8100d80:	d10c      	bne.n	8100d9c <NRF_EnterMode+0x64>
        ret = NRF_SetRegisterBit(NRF_REG_CONFIG, CFG_BIT_PWR_UP); //Seta o bit de Power up em 1
 8100d82:	2101      	movs	r1, #1
 8100d84:	2000      	movs	r0, #0
 8100d86:	f7ff ff73 	bl	8100c70 <NRF_SetRegisterBit>
 8100d8a:	4603      	mov	r3, r0
 8100d8c:	73fb      	strb	r3, [r7, #15]
        wait(1500);
 8100d8e:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8100d92:	f04f 0100 	mov.w	r1, #0
 8100d96:	f7ff fe4b 	bl	8100a30 <wait>
        ret = NRF_ResetRegisterBit(NRF_REG_CONFIG, CFG_BIT_PRIM_RX);
        ce_reset();
      } else if (current_mode == NRF_MODE_TX) {
        ce_reset();
      }
      break;
 8100d9a:	e034      	b.n	8100e06 <NRF_EnterMode+0xce>
      } else if (current_mode == NRF_MODE_RX) {
 8100d9c:	4b20      	ldr	r3, [pc, #128]	@ (8100e20 <NRF_EnterMode+0xe8>)
 8100d9e:	681b      	ldr	r3, [r3, #0]
 8100da0:	2b02      	cmp	r3, #2
 8100da2:	d108      	bne.n	8100db6 <NRF_EnterMode+0x7e>
        ret = NRF_ResetRegisterBit(NRF_REG_CONFIG, CFG_BIT_PRIM_RX);
 8100da4:	2100      	movs	r1, #0
 8100da6:	2000      	movs	r0, #0
 8100da8:	f7ff ff93 	bl	8100cd2 <NRF_ResetRegisterBit>
 8100dac:	4603      	mov	r3, r0
 8100dae:	73fb      	strb	r3, [r7, #15]
        ce_reset();
 8100db0:	f7ff fe2e 	bl	8100a10 <ce_reset>
      break;
 8100db4:	e027      	b.n	8100e06 <NRF_EnterMode+0xce>
      } else if (current_mode == NRF_MODE_TX) {
 8100db6:	4b1a      	ldr	r3, [pc, #104]	@ (8100e20 <NRF_EnterMode+0xe8>)
 8100db8:	681b      	ldr	r3, [r3, #0]
 8100dba:	2b03      	cmp	r3, #3
 8100dbc:	d123      	bne.n	8100e06 <NRF_EnterMode+0xce>
        ce_reset();
 8100dbe:	f7ff fe27 	bl	8100a10 <ce_reset>
      break;
 8100dc2:	e020      	b.n	8100e06 <NRF_EnterMode+0xce>
    case NRF_MODE_RX:
      if (current_mode != NRF_MODE_STANDBY1) { //O dispositivo deve estar em standby para passar para o modo Rx
 8100dc4:	4b16      	ldr	r3, [pc, #88]	@ (8100e20 <NRF_EnterMode+0xe8>)
 8100dc6:	681b      	ldr	r3, [r3, #0]
 8100dc8:	2b01      	cmp	r3, #1
 8100dca:	d001      	beq.n	8100dd0 <NRF_EnterMode+0x98>
        return NRF_BAD_TRANSITION;
 8100dcc:	2306      	movs	r3, #6
 8100dce:	e022      	b.n	8100e16 <NRF_EnterMode+0xde>
      }
      ret = NRF_SetRegisterBit(NRF_REG_CONFIG, CFG_BIT_PRIM_RX); // 1 = Rx
 8100dd0:	2100      	movs	r1, #0
 8100dd2:	2000      	movs	r0, #0
 8100dd4:	f7ff ff4c 	bl	8100c70 <NRF_SetRegisterBit>
 8100dd8:	4603      	mov	r3, r0
 8100dda:	73fb      	strb	r3, [r7, #15]
      ce_set();
 8100ddc:	f7ff fe08 	bl	81009f0 <ce_set>
      break;
 8100de0:	e012      	b.n	8100e08 <NRF_EnterMode+0xd0>
    case NRF_MODE_TX:
      if (current_mode != NRF_MODE_STANDBY1) {
 8100de2:	4b0f      	ldr	r3, [pc, #60]	@ (8100e20 <NRF_EnterMode+0xe8>)
 8100de4:	681b      	ldr	r3, [r3, #0]
 8100de6:	2b01      	cmp	r3, #1
 8100de8:	d001      	beq.n	8100dee <NRF_EnterMode+0xb6>
        return NRF_BAD_TRANSITION;
 8100dea:	2306      	movs	r3, #6
 8100dec:	e013      	b.n	8100e16 <NRF_EnterMode+0xde>
      }
      ret = NRF_ResetRegisterBit(NRF_REG_CONFIG, CFG_BIT_PRIM_RX); // 0 = Tx
 8100dee:	2100      	movs	r1, #0
 8100df0:	2000      	movs	r0, #0
 8100df2:	f7ff ff6e 	bl	8100cd2 <NRF_ResetRegisterBit>
 8100df6:	4603      	mov	r3, r0
 8100df8:	73fb      	strb	r3, [r7, #15]
      ce_set();
 8100dfa:	f7ff fdf9 	bl	81009f0 <ce_set>
      break;
 8100dfe:	e003      	b.n	8100e08 <NRF_EnterMode+0xd0>
    default:
      ret = NRF_ERROR;
 8100e00:	2304      	movs	r3, #4
 8100e02:	73fb      	strb	r3, [r7, #15]
      break;
 8100e04:	e000      	b.n	8100e08 <NRF_EnterMode+0xd0>
      break;
 8100e06:	bf00      	nop
  }

  if (ret == NRF_OK) {
 8100e08:	7bfb      	ldrb	r3, [r7, #15]
 8100e0a:	2b00      	cmp	r3, #0
 8100e0c:	d102      	bne.n	8100e14 <NRF_EnterMode+0xdc>
    current_mode = mode;
 8100e0e:	79fb      	ldrb	r3, [r7, #7]
 8100e10:	4a03      	ldr	r2, [pc, #12]	@ (8100e20 <NRF_EnterMode+0xe8>)
 8100e12:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8100e14:	7bfb      	ldrb	r3, [r7, #15]
}
 8100e16:	4618      	mov	r0, r3
 8100e18:	3710      	adds	r7, #16
 8100e1a:	46bd      	mov	sp, r7
 8100e1c:	bd80      	pop	{r7, pc}
 8100e1e:	bf00      	nop
 8100e20:	10000060 	.word	0x10000060

08100e24 <NRF_Init>:
 * Param - Pino Chip Select
 * Param - Porta Chip Enable
 * Param - Pino Chip Enable
 * Retorno: Status
 *  								*/
NRF_Status NRF_Init(SPI_HandleTypeDef *handle, GPIO_TypeDef *PortCSN, uint16_t PinCSN, GPIO_TypeDef *PortCE, uint16_t PinCE) {
 8100e24:	b580      	push	{r7, lr}
 8100e26:	b084      	sub	sp, #16
 8100e28:	af00      	add	r7, sp, #0
 8100e2a:	60f8      	str	r0, [r7, #12]
 8100e2c:	60b9      	str	r1, [r7, #8]
 8100e2e:	603b      	str	r3, [r7, #0]
 8100e30:	4613      	mov	r3, r2
 8100e32:	80fb      	strh	r3, [r7, #6]
  HSPI = handle;
 8100e34:	4a13      	ldr	r2, [pc, #76]	@ (8100e84 <NRF_Init+0x60>)
 8100e36:	68fb      	ldr	r3, [r7, #12]
 8100e38:	6013      	str	r3, [r2, #0]
  NRF_CSN_Port = PortCSN;
 8100e3a:	4a13      	ldr	r2, [pc, #76]	@ (8100e88 <NRF_Init+0x64>)
 8100e3c:	68bb      	ldr	r3, [r7, #8]
 8100e3e:	6013      	str	r3, [r2, #0]
  NRF_CSN_Pin = PinCSN;
 8100e40:	4a12      	ldr	r2, [pc, #72]	@ (8100e8c <NRF_Init+0x68>)
 8100e42:	88fb      	ldrh	r3, [r7, #6]
 8100e44:	8013      	strh	r3, [r2, #0]
  NRF_CE_Port = PortCE;
 8100e46:	4a12      	ldr	r2, [pc, #72]	@ (8100e90 <NRF_Init+0x6c>)
 8100e48:	683b      	ldr	r3, [r7, #0]
 8100e4a:	6013      	str	r3, [r2, #0]
  NRF_CE_Pin = PinCE;
 8100e4c:	4a11      	ldr	r2, [pc, #68]	@ (8100e94 <NRF_Init+0x70>)
 8100e4e:	8b3b      	ldrh	r3, [r7, #24]
 8100e50:	8013      	strh	r3, [r2, #0]

  CPU_Freq = HAL_RCC_GetSysClockFreq();
 8100e52:	f000 fe7f 	bl	8101b54 <HAL_RCC_GetSysClockFreq>
 8100e56:	4603      	mov	r3, r0
 8100e58:	4a0f      	ldr	r2, [pc, #60]	@ (8100e98 <NRF_Init+0x74>)
 8100e5a:	6013      	str	r3, [r2, #0]
  if (CPU_Freq == 0x00) {
 8100e5c:	4b0e      	ldr	r3, [pc, #56]	@ (8100e98 <NRF_Init+0x74>)
 8100e5e:	681b      	ldr	r3, [r3, #0]
 8100e60:	2b00      	cmp	r3, #0
 8100e62:	d101      	bne.n	8100e68 <NRF_Init+0x44>
    return NRF_ERROR;
 8100e64:	2304      	movs	r3, #4
 8100e66:	e008      	b.n	8100e7a <NRF_Init+0x56>
  }

  // Make sure CSN is pulled high
  csn_set();
 8100e68:	f7ff fda2 	bl	81009b0 <csn_set>

  // Takes ~100ms from power on to start up
  HAL_Delay(100);
 8100e6c:	2064      	movs	r0, #100	@ 0x64
 8100e6e:	f000 fabf 	bl	81013f0 <HAL_Delay>

  return NRF_EnterMode(NRF_MODE_STANDBY1);
 8100e72:	2001      	movs	r0, #1
 8100e74:	f7ff ff60 	bl	8100d38 <NRF_EnterMode>
 8100e78:	4603      	mov	r3, r0
}
 8100e7a:	4618      	mov	r0, r3
 8100e7c:	3710      	adds	r7, #16
 8100e7e:	46bd      	mov	sp, r7
 8100e80:	bd80      	pop	{r7, pc}
 8100e82:	bf00      	nop
 8100e84:	10000048 	.word	0x10000048
 8100e88:	1000004c 	.word	0x1000004c
 8100e8c:	10000050 	.word	0x10000050
 8100e90:	10000054 	.word	0x10000054
 8100e94:	10000058 	.word	0x10000058
 8100e98:	1000005c 	.word	0x1000005c

08100e9c <NRF_Reset>:


//Reseta o NRF  o mantendo em stanby
void NRF_Reset() {
 8100e9c:	b580      	push	{r7, lr}
 8100e9e:	b084      	sub	sp, #16
 8100ea0:	af00      	add	r7, sp, #0
  NRF_EnterMode(NRF_MODE_POWERDOWN);
 8100ea2:	2000      	movs	r0, #0
 8100ea4:	f7ff ff48 	bl	8100d38 <NRF_EnterMode>
  NRF_EnterMode(NRF_MODE_STANDBY1);
 8100ea8:	2001      	movs	r0, #1
 8100eaa:	f7ff ff45 	bl	8100d38 <NRF_EnterMode>

  // Flush FIFOs
  NRF_EnterMode(NRF_MODE_TX);
 8100eae:	2003      	movs	r0, #3
 8100eb0:	f7ff ff42 	bl	8100d38 <NRF_EnterMode>
  NRF_SendCommand(NRF_CMD_FLUSH_TX);
 8100eb4:	20e1      	movs	r0, #225	@ 0xe1
 8100eb6:	f7ff fdef 	bl	8100a98 <NRF_SendCommand>
  NRF_EnterMode(NRF_MODE_STANDBY1);
 8100eba:	2001      	movs	r0, #1
 8100ebc:	f7ff ff3c 	bl	8100d38 <NRF_EnterMode>
  NRF_EnterMode(NRF_MODE_RX);
 8100ec0:	2002      	movs	r0, #2
 8100ec2:	f7ff ff39 	bl	8100d38 <NRF_EnterMode>
  NRF_SendCommand(NRF_CMD_FLUSH_RX);
 8100ec6:	20e2      	movs	r0, #226	@ 0xe2
 8100ec8:	f7ff fde6 	bl	8100a98 <NRF_SendCommand>
  NRF_EnterMode(NRF_MODE_STANDBY1);
 8100ecc:	2001      	movs	r0, #1
 8100ece:	f7ff ff33 	bl	8100d38 <NRF_EnterMode>

  // Flush register -> LER DATASHEET!!!!!!!!!!!!!!
  NRF_WriteRegisterByte(NRF_REG_CONFIG,       0x0A);// 00001010
 8100ed2:	210a      	movs	r1, #10
 8100ed4:	2000      	movs	r0, #0
 8100ed6:	f7ff fe85 	bl	8100be4 <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_EN_AA,        0x3f);// 00000000 = AutoAcknologment ligado em todos os Pipes
 8100eda:	213f      	movs	r1, #63	@ 0x3f
 8100edc:	2001      	movs	r0, #1
 8100ede:	f7ff fe81 	bl	8100be4 <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_EN_RXADDR,    0x03);//00000011 -> Pipes 0 e 1 no Rx
 8100ee2:	2103      	movs	r1, #3
 8100ee4:	2002      	movs	r0, #2
 8100ee6:	f7ff fe7d 	bl	8100be4 <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_SETUP_AW,     0x03);//00000011 -> 5 bytes no adresss
 8100eea:	2103      	movs	r1, #3
 8100eec:	2003      	movs	r0, #3
 8100eee:	f7ff fe79 	bl	8100be4 <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_SETUP_RETR,   0xFF);//00000000 -> re-transmit habilitado. bits 7->4 delay de re-transmit(250uss).
 8100ef2:	21ff      	movs	r1, #255	@ 0xff
 8100ef4:	2004      	movs	r0, #4
 8100ef6:	f7ff fe75 	bl	8100be4 <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_RF_CH,        0x02);//00000010 -> Canal 3
 8100efa:	2102      	movs	r1, #2
 8100efc:	2005      	movs	r0, #5
 8100efe:	f7ff fe71 	bl	8100be4 <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_RF_SETUP,     0x0e);//00001110 -> LNA desligado, 0dBm, 2MBs
 8100f02:	210e      	movs	r1, #14
 8100f04:	2006      	movs	r0, #6
 8100f06:	f7ff fe6d 	bl	8100be4 <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_STATUS,       0x70); // clear flags
 8100f0a:	2170      	movs	r1, #112	@ 0x70
 8100f0c:	2007      	movs	r0, #7
 8100f0e:	f7ff fe69 	bl	8100be4 <NRF_WriteRegisterByte>

  uint8_t address[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 8100f12:	4a2d      	ldr	r2, [pc, #180]	@ (8100fc8 <NRF_Reset+0x12c>)
 8100f14:	f107 0308 	add.w	r3, r7, #8
 8100f18:	e892 0003 	ldmia.w	r2, {r0, r1}
 8100f1c:	6018      	str	r0, [r3, #0]
 8100f1e:	3304      	adds	r3, #4
 8100f20:	7019      	strb	r1, [r3, #0]
  uint8_t address2[5] = {0xC2, 0xC2, 0xC2, 0xC2, 0xC2};
 8100f22:	4a2a      	ldr	r2, [pc, #168]	@ (8100fcc <NRF_Reset+0x130>)
 8100f24:	463b      	mov	r3, r7
 8100f26:	e892 0003 	ldmia.w	r2, {r0, r1}
 8100f2a:	6018      	str	r0, [r3, #0]
 8100f2c:	3304      	adds	r3, #4
 8100f2e:	7019      	strb	r1, [r3, #0]
  NRF_WriteRegister(NRF_REG_RX_ADDR_P0, address, 5); //Adress do pipe 0
 8100f30:	f107 0308 	add.w	r3, r7, #8
 8100f34:	2205      	movs	r2, #5
 8100f36:	4619      	mov	r1, r3
 8100f38:	200a      	movs	r0, #10
 8100f3a:	f7ff fe3d 	bl	8100bb8 <NRF_WriteRegister>
  NRF_WriteRegister(NRF_REG_RX_ADDR_P1, address2, 5); //Adress pipe 1
 8100f3e:	463b      	mov	r3, r7
 8100f40:	2205      	movs	r2, #5
 8100f42:	4619      	mov	r1, r3
 8100f44:	200b      	movs	r0, #11
 8100f46:	f7ff fe37 	bl	8100bb8 <NRF_WriteRegister>
  NRF_WriteRegisterByte(NRF_REG_RX_ADDR_P2,   0xC3);
 8100f4a:	21c3      	movs	r1, #195	@ 0xc3
 8100f4c:	200c      	movs	r0, #12
 8100f4e:	f7ff fe49 	bl	8100be4 <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_RX_ADDR_P3,   0xC4);
 8100f52:	21c4      	movs	r1, #196	@ 0xc4
 8100f54:	200d      	movs	r0, #13
 8100f56:	f7ff fe45 	bl	8100be4 <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_RX_ADDR_P4,   0xC5);
 8100f5a:	21c5      	movs	r1, #197	@ 0xc5
 8100f5c:	200e      	movs	r0, #14
 8100f5e:	f7ff fe41 	bl	8100be4 <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_RX_ADDR_P5,   0xC6);
 8100f62:	21c6      	movs	r1, #198	@ 0xc6
 8100f64:	200f      	movs	r0, #15
 8100f66:	f7ff fe3d 	bl	8100be4 <NRF_WriteRegisterByte>
  NRF_WriteRegister(NRF_REG_TX_ADDR, address, 5);
 8100f6a:	f107 0308 	add.w	r3, r7, #8
 8100f6e:	2205      	movs	r2, #5
 8100f70:	4619      	mov	r1, r3
 8100f72:	2010      	movs	r0, #16
 8100f74:	f7ff fe20 	bl	8100bb8 <NRF_WriteRegister>
  NRF_WriteRegisterByte(NRF_REG_RX_PW_P0,     0x00);
 8100f78:	2100      	movs	r1, #0
 8100f7a:	2011      	movs	r0, #17
 8100f7c:	f7ff fe32 	bl	8100be4 <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_RX_PW_P1,     0x00);
 8100f80:	2100      	movs	r1, #0
 8100f82:	2012      	movs	r0, #18
 8100f84:	f7ff fe2e 	bl	8100be4 <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_RX_PW_P2,     0x00);
 8100f88:	2100      	movs	r1, #0
 8100f8a:	2013      	movs	r0, #19
 8100f8c:	f7ff fe2a 	bl	8100be4 <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_RX_PW_P3,     0x00);
 8100f90:	2100      	movs	r1, #0
 8100f92:	2014      	movs	r0, #20
 8100f94:	f7ff fe26 	bl	8100be4 <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_RX_PW_P4,     0x00);
 8100f98:	2100      	movs	r1, #0
 8100f9a:	2015      	movs	r0, #21
 8100f9c:	f7ff fe22 	bl	8100be4 <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_RX_PW_P5,     0x00);
 8100fa0:	2100      	movs	r1, #0
 8100fa2:	2016      	movs	r0, #22
 8100fa4:	f7ff fe1e 	bl	8100be4 <NRF_WriteRegisterByte>

  NRF_WriteRegisterByte(NRF_REG_FIFO_STATUS,  0x00);
 8100fa8:	2100      	movs	r1, #0
 8100faa:	2017      	movs	r0, #23
 8100fac:	f7ff fe1a 	bl	8100be4 <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_DYNPD,        0x00);
 8100fb0:	2100      	movs	r1, #0
 8100fb2:	201c      	movs	r0, #28
 8100fb4:	f7ff fe16 	bl	8100be4 <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_FEATURE,      0x00);
 8100fb8:	2100      	movs	r1, #0
 8100fba:	201d      	movs	r0, #29
 8100fbc:	f7ff fe12 	bl	8100be4 <NRF_WriteRegisterByte>
}
 8100fc0:	bf00      	nop
 8100fc2:	3710      	adds	r7, #16
 8100fc4:	46bd      	mov	sp, r7
 8100fc6:	bd80      	pop	{r7, pc}
 8100fc8:	081031f4 	.word	0x081031f4
 8100fcc:	081031fc 	.word	0x081031fc

08100fd0 <NRF_WriteAckPayload>:

NRF_Status NRF_WritePayloadNoAck(uint8_t *payload, uint8_t length) {
  return NRF_SendWriteCommand(NRF_CMD_W_TX_PAYLOAD_NO_ACK, payload, length);
}

NRF_Status NRF_WriteAckPayload(uint8_t pipe, uint8_t *payload, uint8_t length) {
 8100fd0:	b580      	push	{r7, lr}
 8100fd2:	b082      	sub	sp, #8
 8100fd4:	af00      	add	r7, sp, #0
 8100fd6:	4603      	mov	r3, r0
 8100fd8:	6039      	str	r1, [r7, #0]
 8100fda:	71fb      	strb	r3, [r7, #7]
 8100fdc:	4613      	mov	r3, r2
 8100fde:	71bb      	strb	r3, [r7, #6]
  return NRF_SendWriteCommand(NRF_CMD_W_ACK_PAYLOAD | pipe, payload, length);
 8100fe0:	79fb      	ldrb	r3, [r7, #7]
 8100fe2:	f063 0357 	orn	r3, r3, #87	@ 0x57
 8100fe6:	b2db      	uxtb	r3, r3
 8100fe8:	79ba      	ldrb	r2, [r7, #6]
 8100fea:	6839      	ldr	r1, [r7, #0]
 8100fec:	4618      	mov	r0, r3
 8100fee:	f7ff fd77 	bl	8100ae0 <NRF_SendWriteCommand>
 8100ff2:	4603      	mov	r3, r0
}
 8100ff4:	4618      	mov	r0, r3
 8100ff6:	3708      	adds	r7, #8
 8100ff8:	46bd      	mov	sp, r7
 8100ffa:	bd80      	pop	{r7, pc}

08100ffc <NRF_ReadPayload>:

NRF_Status NRF_ReadPayload(uint8_t *read, uint8_t length) {
 8100ffc:	b580      	push	{r7, lr}
 8100ffe:	b082      	sub	sp, #8
 8101000:	af00      	add	r7, sp, #0
 8101002:	6078      	str	r0, [r7, #4]
 8101004:	460b      	mov	r3, r1
 8101006:	70fb      	strb	r3, [r7, #3]
  return NRF_SendReadCommand(NRF_CMD_R_RX_PAYLOAD, read, length);
 8101008:	78fb      	ldrb	r3, [r7, #3]
 810100a:	461a      	mov	r2, r3
 810100c:	6879      	ldr	r1, [r7, #4]
 810100e:	2061      	movs	r0, #97	@ 0x61
 8101010:	f7ff fd9c 	bl	8100b4c <NRF_SendReadCommand>
 8101014:	4603      	mov	r3, r0
}
 8101016:	4618      	mov	r0, r3
 8101018:	3708      	adds	r7, #8
 810101a:	46bd      	mov	sp, r7
 810101c:	bd80      	pop	{r7, pc}
	...

08101020 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8101020:	b580      	push	{r7, lr}
 8101022:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8101024:	4b27      	ldr	r3, [pc, #156]	@ (81010c4 <MX_SPI1_Init+0xa4>)
 8101026:	4a28      	ldr	r2, [pc, #160]	@ (81010c8 <MX_SPI1_Init+0xa8>)
 8101028:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 810102a:	4b26      	ldr	r3, [pc, #152]	@ (81010c4 <MX_SPI1_Init+0xa4>)
 810102c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8101030:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8101032:	4b24      	ldr	r3, [pc, #144]	@ (81010c4 <MX_SPI1_Init+0xa4>)
 8101034:	2200      	movs	r2, #0
 8101036:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8101038:	4b22      	ldr	r3, [pc, #136]	@ (81010c4 <MX_SPI1_Init+0xa4>)
 810103a:	2207      	movs	r2, #7
 810103c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 810103e:	4b21      	ldr	r3, [pc, #132]	@ (81010c4 <MX_SPI1_Init+0xa4>)
 8101040:	2200      	movs	r2, #0
 8101042:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8101044:	4b1f      	ldr	r3, [pc, #124]	@ (81010c4 <MX_SPI1_Init+0xa4>)
 8101046:	2200      	movs	r2, #0
 8101048:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 810104a:	4b1e      	ldr	r3, [pc, #120]	@ (81010c4 <MX_SPI1_Init+0xa4>)
 810104c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8101050:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8101052:	4b1c      	ldr	r3, [pc, #112]	@ (81010c4 <MX_SPI1_Init+0xa4>)
 8101054:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8101058:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 810105a:	4b1a      	ldr	r3, [pc, #104]	@ (81010c4 <MX_SPI1_Init+0xa4>)
 810105c:	2200      	movs	r2, #0
 810105e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8101060:	4b18      	ldr	r3, [pc, #96]	@ (81010c4 <MX_SPI1_Init+0xa4>)
 8101062:	2200      	movs	r2, #0
 8101064:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8101066:	4b17      	ldr	r3, [pc, #92]	@ (81010c4 <MX_SPI1_Init+0xa4>)
 8101068:	2200      	movs	r2, #0
 810106a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 810106c:	4b15      	ldr	r3, [pc, #84]	@ (81010c4 <MX_SPI1_Init+0xa4>)
 810106e:	2200      	movs	r2, #0
 8101070:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8101072:	4b14      	ldr	r3, [pc, #80]	@ (81010c4 <MX_SPI1_Init+0xa4>)
 8101074:	2200      	movs	r2, #0
 8101076:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8101078:	4b12      	ldr	r3, [pc, #72]	@ (81010c4 <MX_SPI1_Init+0xa4>)
 810107a:	2200      	movs	r2, #0
 810107c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 810107e:	4b11      	ldr	r3, [pc, #68]	@ (81010c4 <MX_SPI1_Init+0xa4>)
 8101080:	2200      	movs	r2, #0
 8101082:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8101084:	4b0f      	ldr	r3, [pc, #60]	@ (81010c4 <MX_SPI1_Init+0xa4>)
 8101086:	2200      	movs	r2, #0
 8101088:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 810108a:	4b0e      	ldr	r3, [pc, #56]	@ (81010c4 <MX_SPI1_Init+0xa4>)
 810108c:	2200      	movs	r2, #0
 810108e:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8101090:	4b0c      	ldr	r3, [pc, #48]	@ (81010c4 <MX_SPI1_Init+0xa4>)
 8101092:	2200      	movs	r2, #0
 8101094:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8101096:	4b0b      	ldr	r3, [pc, #44]	@ (81010c4 <MX_SPI1_Init+0xa4>)
 8101098:	2200      	movs	r2, #0
 810109a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 810109c:	4b09      	ldr	r3, [pc, #36]	@ (81010c4 <MX_SPI1_Init+0xa4>)
 810109e:	2200      	movs	r2, #0
 81010a0:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_ENABLE;
 81010a2:	4b08      	ldr	r3, [pc, #32]	@ (81010c4 <MX_SPI1_Init+0xa4>)
 81010a4:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 81010a8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 81010aa:	4b06      	ldr	r3, [pc, #24]	@ (81010c4 <MX_SPI1_Init+0xa4>)
 81010ac:	2200      	movs	r2, #0
 81010ae:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 81010b0:	4804      	ldr	r0, [pc, #16]	@ (81010c4 <MX_SPI1_Init+0xa4>)
 81010b2:	f000 fec9 	bl	8101e48 <HAL_SPI_Init>
 81010b6:	4603      	mov	r3, r0
 81010b8:	2b00      	cmp	r3, #0
 81010ba:	d001      	beq.n	81010c0 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 81010bc:	f7ff fc72 	bl	81009a4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 81010c0:	bf00      	nop
 81010c2:	bd80      	pop	{r7, pc}
 81010c4:	10000064 	.word	0x10000064
 81010c8:	40013000 	.word	0x40013000

081010cc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 81010cc:	b580      	push	{r7, lr}
 81010ce:	b08a      	sub	sp, #40	@ 0x28
 81010d0:	af00      	add	r7, sp, #0
 81010d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81010d4:	f107 0314 	add.w	r3, r7, #20
 81010d8:	2200      	movs	r2, #0
 81010da:	601a      	str	r2, [r3, #0]
 81010dc:	605a      	str	r2, [r3, #4]
 81010de:	609a      	str	r2, [r3, #8]
 81010e0:	60da      	str	r2, [r3, #12]
 81010e2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 81010e4:	687b      	ldr	r3, [r7, #4]
 81010e6:	681b      	ldr	r3, [r3, #0]
 81010e8:	4a29      	ldr	r2, [pc, #164]	@ (8101190 <HAL_SPI_MspInit+0xc4>)
 81010ea:	4293      	cmp	r3, r2
 81010ec:	d14c      	bne.n	8101188 <HAL_SPI_MspInit+0xbc>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 81010ee:	4b29      	ldr	r3, [pc, #164]	@ (8101194 <HAL_SPI_MspInit+0xc8>)
 81010f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 81010f4:	4a27      	ldr	r2, [pc, #156]	@ (8101194 <HAL_SPI_MspInit+0xc8>)
 81010f6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 81010fa:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 81010fe:	4b25      	ldr	r3, [pc, #148]	@ (8101194 <HAL_SPI_MspInit+0xc8>)
 8101100:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8101104:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8101108:	613b      	str	r3, [r7, #16]
 810110a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 810110c:	4b21      	ldr	r3, [pc, #132]	@ (8101194 <HAL_SPI_MspInit+0xc8>)
 810110e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101112:	4a20      	ldr	r2, [pc, #128]	@ (8101194 <HAL_SPI_MspInit+0xc8>)
 8101114:	f043 0301 	orr.w	r3, r3, #1
 8101118:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810111c:	4b1d      	ldr	r3, [pc, #116]	@ (8101194 <HAL_SPI_MspInit+0xc8>)
 810111e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101122:	f003 0301 	and.w	r3, r3, #1
 8101126:	60fb      	str	r3, [r7, #12]
 8101128:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 810112a:	4b1a      	ldr	r3, [pc, #104]	@ (8101194 <HAL_SPI_MspInit+0xc8>)
 810112c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101130:	4a18      	ldr	r2, [pc, #96]	@ (8101194 <HAL_SPI_MspInit+0xc8>)
 8101132:	f043 0308 	orr.w	r3, r3, #8
 8101136:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810113a:	4b16      	ldr	r3, [pc, #88]	@ (8101194 <HAL_SPI_MspInit+0xc8>)
 810113c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101140:	f003 0308 	and.w	r3, r3, #8
 8101144:	60bb      	str	r3, [r7, #8]
 8101146:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PD7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8101148:	2360      	movs	r3, #96	@ 0x60
 810114a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810114c:	2302      	movs	r3, #2
 810114e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101150:	2300      	movs	r3, #0
 8101152:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101154:	2300      	movs	r3, #0
 8101156:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8101158:	2305      	movs	r3, #5
 810115a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 810115c:	f107 0314 	add.w	r3, r7, #20
 8101160:	4619      	mov	r1, r3
 8101162:	480d      	ldr	r0, [pc, #52]	@ (8101198 <HAL_SPI_MspInit+0xcc>)
 8101164:	f000 fa60 	bl	8101628 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8101168:	2380      	movs	r3, #128	@ 0x80
 810116a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810116c:	2302      	movs	r3, #2
 810116e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101170:	2300      	movs	r3, #0
 8101172:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101174:	2300      	movs	r3, #0
 8101176:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8101178:	2305      	movs	r3, #5
 810117a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 810117c:	f107 0314 	add.w	r3, r7, #20
 8101180:	4619      	mov	r1, r3
 8101182:	4806      	ldr	r0, [pc, #24]	@ (810119c <HAL_SPI_MspInit+0xd0>)
 8101184:	f000 fa50 	bl	8101628 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8101188:	bf00      	nop
 810118a:	3728      	adds	r7, #40	@ 0x28
 810118c:	46bd      	mov	sp, r7
 810118e:	bd80      	pop	{r7, pc}
 8101190:	40013000 	.word	0x40013000
 8101194:	58024400 	.word	0x58024400
 8101198:	58020000 	.word	0x58020000
 810119c:	58020c00 	.word	0x58020c00

081011a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 81011a0:	b480      	push	{r7}
 81011a2:	b083      	sub	sp, #12
 81011a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 81011a6:	4b0a      	ldr	r3, [pc, #40]	@ (81011d0 <HAL_MspInit+0x30>)
 81011a8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 81011ac:	4a08      	ldr	r2, [pc, #32]	@ (81011d0 <HAL_MspInit+0x30>)
 81011ae:	f043 0302 	orr.w	r3, r3, #2
 81011b2:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 81011b6:	4b06      	ldr	r3, [pc, #24]	@ (81011d0 <HAL_MspInit+0x30>)
 81011b8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 81011bc:	f003 0302 	and.w	r3, r3, #2
 81011c0:	607b      	str	r3, [r7, #4]
 81011c2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 81011c4:	bf00      	nop
 81011c6:	370c      	adds	r7, #12
 81011c8:	46bd      	mov	sp, r7
 81011ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 81011ce:	4770      	bx	lr
 81011d0:	58024400 	.word	0x58024400

081011d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 81011d4:	b480      	push	{r7}
 81011d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 81011d8:	bf00      	nop
 81011da:	e7fd      	b.n	81011d8 <NMI_Handler+0x4>

081011dc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 81011dc:	b480      	push	{r7}
 81011de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 81011e0:	bf00      	nop
 81011e2:	e7fd      	b.n	81011e0 <HardFault_Handler+0x4>

081011e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 81011e4:	b480      	push	{r7}
 81011e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 81011e8:	bf00      	nop
 81011ea:	e7fd      	b.n	81011e8 <MemManage_Handler+0x4>

081011ec <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 81011ec:	b480      	push	{r7}
 81011ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 81011f0:	bf00      	nop
 81011f2:	e7fd      	b.n	81011f0 <BusFault_Handler+0x4>

081011f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 81011f4:	b480      	push	{r7}
 81011f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 81011f8:	bf00      	nop
 81011fa:	e7fd      	b.n	81011f8 <UsageFault_Handler+0x4>

081011fc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 81011fc:	b480      	push	{r7}
 81011fe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8101200:	bf00      	nop
 8101202:	46bd      	mov	sp, r7
 8101204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101208:	4770      	bx	lr

0810120a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 810120a:	b480      	push	{r7}
 810120c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 810120e:	bf00      	nop
 8101210:	46bd      	mov	sp, r7
 8101212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101216:	4770      	bx	lr

08101218 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8101218:	b480      	push	{r7}
 810121a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 810121c:	bf00      	nop
 810121e:	46bd      	mov	sp, r7
 8101220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101224:	4770      	bx	lr

08101226 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8101226:	b580      	push	{r7, lr}
 8101228:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 810122a:	f000 f8c1 	bl	81013b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 810122e:	bf00      	nop
 8101230:	bd80      	pop	{r7, pc}
	...

08101234 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8101234:	f8df d034 	ldr.w	sp, [pc, #52]	@ 810126c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8101238:	f7ff f9c6 	bl	81005c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 810123c:	480c      	ldr	r0, [pc, #48]	@ (8101270 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 810123e:	490d      	ldr	r1, [pc, #52]	@ (8101274 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8101240:	4a0d      	ldr	r2, [pc, #52]	@ (8101278 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8101242:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8101244:	e002      	b.n	810124c <LoopCopyDataInit>

08101246 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8101246:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8101248:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 810124a:	3304      	adds	r3, #4

0810124c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 810124c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 810124e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8101250:	d3f9      	bcc.n	8101246 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8101252:	4a0a      	ldr	r2, [pc, #40]	@ (810127c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8101254:	4c0a      	ldr	r4, [pc, #40]	@ (8101280 <LoopFillZerobss+0x22>)
  movs r3, #0
 8101256:	2300      	movs	r3, #0
  b LoopFillZerobss
 8101258:	e001      	b.n	810125e <LoopFillZerobss>

0810125a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 810125a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 810125c:	3204      	adds	r2, #4

0810125e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 810125e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8101260:	d3fb      	bcc.n	810125a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8101262:	f001 ff93 	bl	810318c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8101266:	f7ff fae9 	bl	810083c <main>
  bx  lr
 810126a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 810126c:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 8101270:	10000000 	.word	0x10000000
  ldr r1, =_edata
 8101274:	10000014 	.word	0x10000014
  ldr r2, =_sidata
 8101278:	08103224 	.word	0x08103224
  ldr r2, =_sbss
 810127c:	10000014 	.word	0x10000014
  ldr r4, =_ebss
 8101280:	100000f0 	.word	0x100000f0

08101284 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8101284:	e7fe      	b.n	8101284 <ADC3_IRQHandler>
	...

08101288 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8101288:	b580      	push	{r7, lr}
 810128a:	b082      	sub	sp, #8
 810128c:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 810128e:	4b28      	ldr	r3, [pc, #160]	@ (8101330 <HAL_Init+0xa8>)
 8101290:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8101294:	4a26      	ldr	r2, [pc, #152]	@ (8101330 <HAL_Init+0xa8>)
 8101296:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 810129a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 810129e:	4b24      	ldr	r3, [pc, #144]	@ (8101330 <HAL_Init+0xa8>)
 81012a0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 81012a4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 81012a8:	603b      	str	r3, [r7, #0]
 81012aa:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 81012ac:	4b21      	ldr	r3, [pc, #132]	@ (8101334 <HAL_Init+0xac>)
 81012ae:	681b      	ldr	r3, [r3, #0]
 81012b0:	f423 237f 	bic.w	r3, r3, #1044480	@ 0xff000
 81012b4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 81012b8:	4a1e      	ldr	r2, [pc, #120]	@ (8101334 <HAL_Init+0xac>)
 81012ba:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 81012be:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 81012c0:	4b1c      	ldr	r3, [pc, #112]	@ (8101334 <HAL_Init+0xac>)
 81012c2:	681b      	ldr	r3, [r3, #0]
 81012c4:	4a1b      	ldr	r2, [pc, #108]	@ (8101334 <HAL_Init+0xac>)
 81012c6:	f043 0301 	orr.w	r3, r3, #1
 81012ca:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 81012cc:	2003      	movs	r0, #3
 81012ce:	f000 f965 	bl	810159c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 81012d2:	f000 fc3f 	bl	8101b54 <HAL_RCC_GetSysClockFreq>
 81012d6:	4602      	mov	r2, r0
 81012d8:	4b15      	ldr	r3, [pc, #84]	@ (8101330 <HAL_Init+0xa8>)
 81012da:	699b      	ldr	r3, [r3, #24]
 81012dc:	0a1b      	lsrs	r3, r3, #8
 81012de:	f003 030f 	and.w	r3, r3, #15
 81012e2:	4915      	ldr	r1, [pc, #84]	@ (8101338 <HAL_Init+0xb0>)
 81012e4:	5ccb      	ldrb	r3, [r1, r3]
 81012e6:	f003 031f 	and.w	r3, r3, #31
 81012ea:	fa22 f303 	lsr.w	r3, r2, r3
 81012ee:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 81012f0:	4b0f      	ldr	r3, [pc, #60]	@ (8101330 <HAL_Init+0xa8>)
 81012f2:	699b      	ldr	r3, [r3, #24]
 81012f4:	f003 030f 	and.w	r3, r3, #15
 81012f8:	4a0f      	ldr	r2, [pc, #60]	@ (8101338 <HAL_Init+0xb0>)
 81012fa:	5cd3      	ldrb	r3, [r2, r3]
 81012fc:	f003 031f 	and.w	r3, r3, #31
 8101300:	687a      	ldr	r2, [r7, #4]
 8101302:	fa22 f303 	lsr.w	r3, r2, r3
 8101306:	4a0d      	ldr	r2, [pc, #52]	@ (810133c <HAL_Init+0xb4>)
 8101308:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 810130a:	4b0c      	ldr	r3, [pc, #48]	@ (810133c <HAL_Init+0xb4>)
 810130c:	681b      	ldr	r3, [r3, #0]
 810130e:	4a0c      	ldr	r2, [pc, #48]	@ (8101340 <HAL_Init+0xb8>)
 8101310:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8101312:	2000      	movs	r0, #0
 8101314:	f000 f816 	bl	8101344 <HAL_InitTick>
 8101318:	4603      	mov	r3, r0
 810131a:	2b00      	cmp	r3, #0
 810131c:	d001      	beq.n	8101322 <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 810131e:	2301      	movs	r3, #1
 8101320:	e002      	b.n	8101328 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8101322:	f7ff ff3d 	bl	81011a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8101326:	2300      	movs	r3, #0
}
 8101328:	4618      	mov	r0, r3
 810132a:	3708      	adds	r7, #8
 810132c:	46bd      	mov	sp, r7
 810132e:	bd80      	pop	{r7, pc}
 8101330:	58024400 	.word	0x58024400
 8101334:	40024400 	.word	0x40024400
 8101338:	08103204 	.word	0x08103204
 810133c:	10000004 	.word	0x10000004
 8101340:	10000000 	.word	0x10000000

08101344 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8101344:	b580      	push	{r7, lr}
 8101346:	b082      	sub	sp, #8
 8101348:	af00      	add	r7, sp, #0
 810134a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 810134c:	4b15      	ldr	r3, [pc, #84]	@ (81013a4 <HAL_InitTick+0x60>)
 810134e:	781b      	ldrb	r3, [r3, #0]
 8101350:	2b00      	cmp	r3, #0
 8101352:	d101      	bne.n	8101358 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8101354:	2301      	movs	r3, #1
 8101356:	e021      	b.n	810139c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8101358:	4b13      	ldr	r3, [pc, #76]	@ (81013a8 <HAL_InitTick+0x64>)
 810135a:	681a      	ldr	r2, [r3, #0]
 810135c:	4b11      	ldr	r3, [pc, #68]	@ (81013a4 <HAL_InitTick+0x60>)
 810135e:	781b      	ldrb	r3, [r3, #0]
 8101360:	4619      	mov	r1, r3
 8101362:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8101366:	fbb3 f3f1 	udiv	r3, r3, r1
 810136a:	fbb2 f3f3 	udiv	r3, r2, r3
 810136e:	4618      	mov	r0, r3
 8101370:	f000 f939 	bl	81015e6 <HAL_SYSTICK_Config>
 8101374:	4603      	mov	r3, r0
 8101376:	2b00      	cmp	r3, #0
 8101378:	d001      	beq.n	810137e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 810137a:	2301      	movs	r3, #1
 810137c:	e00e      	b.n	810139c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 810137e:	687b      	ldr	r3, [r7, #4]
 8101380:	2b0f      	cmp	r3, #15
 8101382:	d80a      	bhi.n	810139a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8101384:	2200      	movs	r2, #0
 8101386:	6879      	ldr	r1, [r7, #4]
 8101388:	f04f 30ff 	mov.w	r0, #4294967295
 810138c:	f000 f911 	bl	81015b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8101390:	4a06      	ldr	r2, [pc, #24]	@ (81013ac <HAL_InitTick+0x68>)
 8101392:	687b      	ldr	r3, [r7, #4]
 8101394:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8101396:	2300      	movs	r3, #0
 8101398:	e000      	b.n	810139c <HAL_InitTick+0x58>
    return HAL_ERROR;
 810139a:	2301      	movs	r3, #1
}
 810139c:	4618      	mov	r0, r3
 810139e:	3708      	adds	r7, #8
 81013a0:	46bd      	mov	sp, r7
 81013a2:	bd80      	pop	{r7, pc}
 81013a4:	10000010 	.word	0x10000010
 81013a8:	10000000 	.word	0x10000000
 81013ac:	1000000c 	.word	0x1000000c

081013b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 81013b0:	b480      	push	{r7}
 81013b2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 81013b4:	4b06      	ldr	r3, [pc, #24]	@ (81013d0 <HAL_IncTick+0x20>)
 81013b6:	781b      	ldrb	r3, [r3, #0]
 81013b8:	461a      	mov	r2, r3
 81013ba:	4b06      	ldr	r3, [pc, #24]	@ (81013d4 <HAL_IncTick+0x24>)
 81013bc:	681b      	ldr	r3, [r3, #0]
 81013be:	4413      	add	r3, r2
 81013c0:	4a04      	ldr	r2, [pc, #16]	@ (81013d4 <HAL_IncTick+0x24>)
 81013c2:	6013      	str	r3, [r2, #0]
}
 81013c4:	bf00      	nop
 81013c6:	46bd      	mov	sp, r7
 81013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81013cc:	4770      	bx	lr
 81013ce:	bf00      	nop
 81013d0:	10000010 	.word	0x10000010
 81013d4:	100000ec 	.word	0x100000ec

081013d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 81013d8:	b480      	push	{r7}
 81013da:	af00      	add	r7, sp, #0
  return uwTick;
 81013dc:	4b03      	ldr	r3, [pc, #12]	@ (81013ec <HAL_GetTick+0x14>)
 81013de:	681b      	ldr	r3, [r3, #0]
}
 81013e0:	4618      	mov	r0, r3
 81013e2:	46bd      	mov	sp, r7
 81013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81013e8:	4770      	bx	lr
 81013ea:	bf00      	nop
 81013ec:	100000ec 	.word	0x100000ec

081013f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 81013f0:	b580      	push	{r7, lr}
 81013f2:	b084      	sub	sp, #16
 81013f4:	af00      	add	r7, sp, #0
 81013f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 81013f8:	f7ff ffee 	bl	81013d8 <HAL_GetTick>
 81013fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 81013fe:	687b      	ldr	r3, [r7, #4]
 8101400:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8101402:	68fb      	ldr	r3, [r7, #12]
 8101404:	f1b3 3fff 	cmp.w	r3, #4294967295
 8101408:	d005      	beq.n	8101416 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 810140a:	4b0a      	ldr	r3, [pc, #40]	@ (8101434 <HAL_Delay+0x44>)
 810140c:	781b      	ldrb	r3, [r3, #0]
 810140e:	461a      	mov	r2, r3
 8101410:	68fb      	ldr	r3, [r7, #12]
 8101412:	4413      	add	r3, r2
 8101414:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8101416:	bf00      	nop
 8101418:	f7ff ffde 	bl	81013d8 <HAL_GetTick>
 810141c:	4602      	mov	r2, r0
 810141e:	68bb      	ldr	r3, [r7, #8]
 8101420:	1ad3      	subs	r3, r2, r3
 8101422:	68fa      	ldr	r2, [r7, #12]
 8101424:	429a      	cmp	r2, r3
 8101426:	d8f7      	bhi.n	8101418 <HAL_Delay+0x28>
  {
  }
}
 8101428:	bf00      	nop
 810142a:	bf00      	nop
 810142c:	3710      	adds	r7, #16
 810142e:	46bd      	mov	sp, r7
 8101430:	bd80      	pop	{r7, pc}
 8101432:	bf00      	nop
 8101434:	10000010 	.word	0x10000010

08101438 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8101438:	b480      	push	{r7}
 810143a:	b085      	sub	sp, #20
 810143c:	af00      	add	r7, sp, #0
 810143e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8101440:	687b      	ldr	r3, [r7, #4]
 8101442:	f003 0307 	and.w	r3, r3, #7
 8101446:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8101448:	4b0c      	ldr	r3, [pc, #48]	@ (810147c <__NVIC_SetPriorityGrouping+0x44>)
 810144a:	68db      	ldr	r3, [r3, #12]
 810144c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 810144e:	68ba      	ldr	r2, [r7, #8]
 8101450:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8101454:	4013      	ands	r3, r2
 8101456:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8101458:	68fb      	ldr	r3, [r7, #12]
 810145a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 810145c:	68bb      	ldr	r3, [r7, #8]
 810145e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8101460:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8101464:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8101468:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 810146a:	4a04      	ldr	r2, [pc, #16]	@ (810147c <__NVIC_SetPriorityGrouping+0x44>)
 810146c:	68bb      	ldr	r3, [r7, #8]
 810146e:	60d3      	str	r3, [r2, #12]
}
 8101470:	bf00      	nop
 8101472:	3714      	adds	r7, #20
 8101474:	46bd      	mov	sp, r7
 8101476:	f85d 7b04 	ldr.w	r7, [sp], #4
 810147a:	4770      	bx	lr
 810147c:	e000ed00 	.word	0xe000ed00

08101480 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8101480:	b480      	push	{r7}
 8101482:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8101484:	4b04      	ldr	r3, [pc, #16]	@ (8101498 <__NVIC_GetPriorityGrouping+0x18>)
 8101486:	68db      	ldr	r3, [r3, #12]
 8101488:	0a1b      	lsrs	r3, r3, #8
 810148a:	f003 0307 	and.w	r3, r3, #7
}
 810148e:	4618      	mov	r0, r3
 8101490:	46bd      	mov	sp, r7
 8101492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101496:	4770      	bx	lr
 8101498:	e000ed00 	.word	0xe000ed00

0810149c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 810149c:	b480      	push	{r7}
 810149e:	b083      	sub	sp, #12
 81014a0:	af00      	add	r7, sp, #0
 81014a2:	4603      	mov	r3, r0
 81014a4:	6039      	str	r1, [r7, #0]
 81014a6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 81014a8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81014ac:	2b00      	cmp	r3, #0
 81014ae:	db0a      	blt.n	81014c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 81014b0:	683b      	ldr	r3, [r7, #0]
 81014b2:	b2da      	uxtb	r2, r3
 81014b4:	490c      	ldr	r1, [pc, #48]	@ (81014e8 <__NVIC_SetPriority+0x4c>)
 81014b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81014ba:	0112      	lsls	r2, r2, #4
 81014bc:	b2d2      	uxtb	r2, r2
 81014be:	440b      	add	r3, r1
 81014c0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 81014c4:	e00a      	b.n	81014dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 81014c6:	683b      	ldr	r3, [r7, #0]
 81014c8:	b2da      	uxtb	r2, r3
 81014ca:	4908      	ldr	r1, [pc, #32]	@ (81014ec <__NVIC_SetPriority+0x50>)
 81014cc:	88fb      	ldrh	r3, [r7, #6]
 81014ce:	f003 030f 	and.w	r3, r3, #15
 81014d2:	3b04      	subs	r3, #4
 81014d4:	0112      	lsls	r2, r2, #4
 81014d6:	b2d2      	uxtb	r2, r2
 81014d8:	440b      	add	r3, r1
 81014da:	761a      	strb	r2, [r3, #24]
}
 81014dc:	bf00      	nop
 81014de:	370c      	adds	r7, #12
 81014e0:	46bd      	mov	sp, r7
 81014e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81014e6:	4770      	bx	lr
 81014e8:	e000e100 	.word	0xe000e100
 81014ec:	e000ed00 	.word	0xe000ed00

081014f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 81014f0:	b480      	push	{r7}
 81014f2:	b089      	sub	sp, #36	@ 0x24
 81014f4:	af00      	add	r7, sp, #0
 81014f6:	60f8      	str	r0, [r7, #12]
 81014f8:	60b9      	str	r1, [r7, #8]
 81014fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 81014fc:	68fb      	ldr	r3, [r7, #12]
 81014fe:	f003 0307 	and.w	r3, r3, #7
 8101502:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8101504:	69fb      	ldr	r3, [r7, #28]
 8101506:	f1c3 0307 	rsb	r3, r3, #7
 810150a:	2b04      	cmp	r3, #4
 810150c:	bf28      	it	cs
 810150e:	2304      	movcs	r3, #4
 8101510:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8101512:	69fb      	ldr	r3, [r7, #28]
 8101514:	3304      	adds	r3, #4
 8101516:	2b06      	cmp	r3, #6
 8101518:	d902      	bls.n	8101520 <NVIC_EncodePriority+0x30>
 810151a:	69fb      	ldr	r3, [r7, #28]
 810151c:	3b03      	subs	r3, #3
 810151e:	e000      	b.n	8101522 <NVIC_EncodePriority+0x32>
 8101520:	2300      	movs	r3, #0
 8101522:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8101524:	f04f 32ff 	mov.w	r2, #4294967295
 8101528:	69bb      	ldr	r3, [r7, #24]
 810152a:	fa02 f303 	lsl.w	r3, r2, r3
 810152e:	43da      	mvns	r2, r3
 8101530:	68bb      	ldr	r3, [r7, #8]
 8101532:	401a      	ands	r2, r3
 8101534:	697b      	ldr	r3, [r7, #20]
 8101536:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8101538:	f04f 31ff 	mov.w	r1, #4294967295
 810153c:	697b      	ldr	r3, [r7, #20]
 810153e:	fa01 f303 	lsl.w	r3, r1, r3
 8101542:	43d9      	mvns	r1, r3
 8101544:	687b      	ldr	r3, [r7, #4]
 8101546:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8101548:	4313      	orrs	r3, r2
         );
}
 810154a:	4618      	mov	r0, r3
 810154c:	3724      	adds	r7, #36	@ 0x24
 810154e:	46bd      	mov	sp, r7
 8101550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101554:	4770      	bx	lr
	...

08101558 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8101558:	b580      	push	{r7, lr}
 810155a:	b082      	sub	sp, #8
 810155c:	af00      	add	r7, sp, #0
 810155e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8101560:	687b      	ldr	r3, [r7, #4]
 8101562:	3b01      	subs	r3, #1
 8101564:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8101568:	d301      	bcc.n	810156e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 810156a:	2301      	movs	r3, #1
 810156c:	e00f      	b.n	810158e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 810156e:	4a0a      	ldr	r2, [pc, #40]	@ (8101598 <SysTick_Config+0x40>)
 8101570:	687b      	ldr	r3, [r7, #4]
 8101572:	3b01      	subs	r3, #1
 8101574:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8101576:	210f      	movs	r1, #15
 8101578:	f04f 30ff 	mov.w	r0, #4294967295
 810157c:	f7ff ff8e 	bl	810149c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8101580:	4b05      	ldr	r3, [pc, #20]	@ (8101598 <SysTick_Config+0x40>)
 8101582:	2200      	movs	r2, #0
 8101584:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8101586:	4b04      	ldr	r3, [pc, #16]	@ (8101598 <SysTick_Config+0x40>)
 8101588:	2207      	movs	r2, #7
 810158a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 810158c:	2300      	movs	r3, #0
}
 810158e:	4618      	mov	r0, r3
 8101590:	3708      	adds	r7, #8
 8101592:	46bd      	mov	sp, r7
 8101594:	bd80      	pop	{r7, pc}
 8101596:	bf00      	nop
 8101598:	e000e010 	.word	0xe000e010

0810159c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 810159c:	b580      	push	{r7, lr}
 810159e:	b082      	sub	sp, #8
 81015a0:	af00      	add	r7, sp, #0
 81015a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 81015a4:	6878      	ldr	r0, [r7, #4]
 81015a6:	f7ff ff47 	bl	8101438 <__NVIC_SetPriorityGrouping>
}
 81015aa:	bf00      	nop
 81015ac:	3708      	adds	r7, #8
 81015ae:	46bd      	mov	sp, r7
 81015b0:	bd80      	pop	{r7, pc}

081015b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 81015b2:	b580      	push	{r7, lr}
 81015b4:	b086      	sub	sp, #24
 81015b6:	af00      	add	r7, sp, #0
 81015b8:	4603      	mov	r3, r0
 81015ba:	60b9      	str	r1, [r7, #8]
 81015bc:	607a      	str	r2, [r7, #4]
 81015be:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 81015c0:	f7ff ff5e 	bl	8101480 <__NVIC_GetPriorityGrouping>
 81015c4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 81015c6:	687a      	ldr	r2, [r7, #4]
 81015c8:	68b9      	ldr	r1, [r7, #8]
 81015ca:	6978      	ldr	r0, [r7, #20]
 81015cc:	f7ff ff90 	bl	81014f0 <NVIC_EncodePriority>
 81015d0:	4602      	mov	r2, r0
 81015d2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 81015d6:	4611      	mov	r1, r2
 81015d8:	4618      	mov	r0, r3
 81015da:	f7ff ff5f 	bl	810149c <__NVIC_SetPriority>
}
 81015de:	bf00      	nop
 81015e0:	3718      	adds	r7, #24
 81015e2:	46bd      	mov	sp, r7
 81015e4:	bd80      	pop	{r7, pc}

081015e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 81015e6:	b580      	push	{r7, lr}
 81015e8:	b082      	sub	sp, #8
 81015ea:	af00      	add	r7, sp, #0
 81015ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 81015ee:	6878      	ldr	r0, [r7, #4]
 81015f0:	f7ff ffb2 	bl	8101558 <SysTick_Config>
 81015f4:	4603      	mov	r3, r0
}
 81015f6:	4618      	mov	r0, r3
 81015f8:	3708      	adds	r7, #8
 81015fa:	46bd      	mov	sp, r7
 81015fc:	bd80      	pop	{r7, pc}
	...

08101600 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8101600:	b480      	push	{r7}
 8101602:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8101604:	4b07      	ldr	r3, [pc, #28]	@ (8101624 <HAL_GetCurrentCPUID+0x24>)
 8101606:	681b      	ldr	r3, [r3, #0]
 8101608:	091b      	lsrs	r3, r3, #4
 810160a:	f003 030f 	and.w	r3, r3, #15
 810160e:	2b07      	cmp	r3, #7
 8101610:	d101      	bne.n	8101616 <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 8101612:	2303      	movs	r3, #3
 8101614:	e000      	b.n	8101618 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 8101616:	2301      	movs	r3, #1
  }
}
 8101618:	4618      	mov	r0, r3
 810161a:	46bd      	mov	sp, r7
 810161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101620:	4770      	bx	lr
 8101622:	bf00      	nop
 8101624:	e000ed00 	.word	0xe000ed00

08101628 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8101628:	b480      	push	{r7}
 810162a:	b089      	sub	sp, #36	@ 0x24
 810162c:	af00      	add	r7, sp, #0
 810162e:	6078      	str	r0, [r7, #4]
 8101630:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8101632:	2300      	movs	r3, #0
 8101634:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 8101636:	4b89      	ldr	r3, [pc, #548]	@ (810185c <HAL_GPIO_Init+0x234>)
 8101638:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 810163a:	e194      	b.n	8101966 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 810163c:	683b      	ldr	r3, [r7, #0]
 810163e:	681a      	ldr	r2, [r3, #0]
 8101640:	2101      	movs	r1, #1
 8101642:	69fb      	ldr	r3, [r7, #28]
 8101644:	fa01 f303 	lsl.w	r3, r1, r3
 8101648:	4013      	ands	r3, r2
 810164a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 810164c:	693b      	ldr	r3, [r7, #16]
 810164e:	2b00      	cmp	r3, #0
 8101650:	f000 8186 	beq.w	8101960 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8101654:	683b      	ldr	r3, [r7, #0]
 8101656:	685b      	ldr	r3, [r3, #4]
 8101658:	f003 0303 	and.w	r3, r3, #3
 810165c:	2b01      	cmp	r3, #1
 810165e:	d005      	beq.n	810166c <HAL_GPIO_Init+0x44>
 8101660:	683b      	ldr	r3, [r7, #0]
 8101662:	685b      	ldr	r3, [r3, #4]
 8101664:	f003 0303 	and.w	r3, r3, #3
 8101668:	2b02      	cmp	r3, #2
 810166a:	d130      	bne.n	81016ce <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 810166c:	687b      	ldr	r3, [r7, #4]
 810166e:	689b      	ldr	r3, [r3, #8]
 8101670:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8101672:	69fb      	ldr	r3, [r7, #28]
 8101674:	005b      	lsls	r3, r3, #1
 8101676:	2203      	movs	r2, #3
 8101678:	fa02 f303 	lsl.w	r3, r2, r3
 810167c:	43db      	mvns	r3, r3
 810167e:	69ba      	ldr	r2, [r7, #24]
 8101680:	4013      	ands	r3, r2
 8101682:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8101684:	683b      	ldr	r3, [r7, #0]
 8101686:	68da      	ldr	r2, [r3, #12]
 8101688:	69fb      	ldr	r3, [r7, #28]
 810168a:	005b      	lsls	r3, r3, #1
 810168c:	fa02 f303 	lsl.w	r3, r2, r3
 8101690:	69ba      	ldr	r2, [r7, #24]
 8101692:	4313      	orrs	r3, r2
 8101694:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8101696:	687b      	ldr	r3, [r7, #4]
 8101698:	69ba      	ldr	r2, [r7, #24]
 810169a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 810169c:	687b      	ldr	r3, [r7, #4]
 810169e:	685b      	ldr	r3, [r3, #4]
 81016a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 81016a2:	2201      	movs	r2, #1
 81016a4:	69fb      	ldr	r3, [r7, #28]
 81016a6:	fa02 f303 	lsl.w	r3, r2, r3
 81016aa:	43db      	mvns	r3, r3
 81016ac:	69ba      	ldr	r2, [r7, #24]
 81016ae:	4013      	ands	r3, r2
 81016b0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 81016b2:	683b      	ldr	r3, [r7, #0]
 81016b4:	685b      	ldr	r3, [r3, #4]
 81016b6:	091b      	lsrs	r3, r3, #4
 81016b8:	f003 0201 	and.w	r2, r3, #1
 81016bc:	69fb      	ldr	r3, [r7, #28]
 81016be:	fa02 f303 	lsl.w	r3, r2, r3
 81016c2:	69ba      	ldr	r2, [r7, #24]
 81016c4:	4313      	orrs	r3, r2
 81016c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 81016c8:	687b      	ldr	r3, [r7, #4]
 81016ca:	69ba      	ldr	r2, [r7, #24]
 81016cc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 81016ce:	683b      	ldr	r3, [r7, #0]
 81016d0:	685b      	ldr	r3, [r3, #4]
 81016d2:	f003 0303 	and.w	r3, r3, #3
 81016d6:	2b03      	cmp	r3, #3
 81016d8:	d017      	beq.n	810170a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 81016da:	687b      	ldr	r3, [r7, #4]
 81016dc:	68db      	ldr	r3, [r3, #12]
 81016de:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 81016e0:	69fb      	ldr	r3, [r7, #28]
 81016e2:	005b      	lsls	r3, r3, #1
 81016e4:	2203      	movs	r2, #3
 81016e6:	fa02 f303 	lsl.w	r3, r2, r3
 81016ea:	43db      	mvns	r3, r3
 81016ec:	69ba      	ldr	r2, [r7, #24]
 81016ee:	4013      	ands	r3, r2
 81016f0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 81016f2:	683b      	ldr	r3, [r7, #0]
 81016f4:	689a      	ldr	r2, [r3, #8]
 81016f6:	69fb      	ldr	r3, [r7, #28]
 81016f8:	005b      	lsls	r3, r3, #1
 81016fa:	fa02 f303 	lsl.w	r3, r2, r3
 81016fe:	69ba      	ldr	r2, [r7, #24]
 8101700:	4313      	orrs	r3, r2
 8101702:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8101704:	687b      	ldr	r3, [r7, #4]
 8101706:	69ba      	ldr	r2, [r7, #24]
 8101708:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 810170a:	683b      	ldr	r3, [r7, #0]
 810170c:	685b      	ldr	r3, [r3, #4]
 810170e:	f003 0303 	and.w	r3, r3, #3
 8101712:	2b02      	cmp	r3, #2
 8101714:	d123      	bne.n	810175e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8101716:	69fb      	ldr	r3, [r7, #28]
 8101718:	08da      	lsrs	r2, r3, #3
 810171a:	687b      	ldr	r3, [r7, #4]
 810171c:	3208      	adds	r2, #8
 810171e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8101722:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8101724:	69fb      	ldr	r3, [r7, #28]
 8101726:	f003 0307 	and.w	r3, r3, #7
 810172a:	009b      	lsls	r3, r3, #2
 810172c:	220f      	movs	r2, #15
 810172e:	fa02 f303 	lsl.w	r3, r2, r3
 8101732:	43db      	mvns	r3, r3
 8101734:	69ba      	ldr	r2, [r7, #24]
 8101736:	4013      	ands	r3, r2
 8101738:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 810173a:	683b      	ldr	r3, [r7, #0]
 810173c:	691a      	ldr	r2, [r3, #16]
 810173e:	69fb      	ldr	r3, [r7, #28]
 8101740:	f003 0307 	and.w	r3, r3, #7
 8101744:	009b      	lsls	r3, r3, #2
 8101746:	fa02 f303 	lsl.w	r3, r2, r3
 810174a:	69ba      	ldr	r2, [r7, #24]
 810174c:	4313      	orrs	r3, r2
 810174e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8101750:	69fb      	ldr	r3, [r7, #28]
 8101752:	08da      	lsrs	r2, r3, #3
 8101754:	687b      	ldr	r3, [r7, #4]
 8101756:	3208      	adds	r2, #8
 8101758:	69b9      	ldr	r1, [r7, #24]
 810175a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 810175e:	687b      	ldr	r3, [r7, #4]
 8101760:	681b      	ldr	r3, [r3, #0]
 8101762:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8101764:	69fb      	ldr	r3, [r7, #28]
 8101766:	005b      	lsls	r3, r3, #1
 8101768:	2203      	movs	r2, #3
 810176a:	fa02 f303 	lsl.w	r3, r2, r3
 810176e:	43db      	mvns	r3, r3
 8101770:	69ba      	ldr	r2, [r7, #24]
 8101772:	4013      	ands	r3, r2
 8101774:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8101776:	683b      	ldr	r3, [r7, #0]
 8101778:	685b      	ldr	r3, [r3, #4]
 810177a:	f003 0203 	and.w	r2, r3, #3
 810177e:	69fb      	ldr	r3, [r7, #28]
 8101780:	005b      	lsls	r3, r3, #1
 8101782:	fa02 f303 	lsl.w	r3, r2, r3
 8101786:	69ba      	ldr	r2, [r7, #24]
 8101788:	4313      	orrs	r3, r2
 810178a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 810178c:	687b      	ldr	r3, [r7, #4]
 810178e:	69ba      	ldr	r2, [r7, #24]
 8101790:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8101792:	683b      	ldr	r3, [r7, #0]
 8101794:	685b      	ldr	r3, [r3, #4]
 8101796:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 810179a:	2b00      	cmp	r3, #0
 810179c:	f000 80e0 	beq.w	8101960 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 81017a0:	4b2f      	ldr	r3, [pc, #188]	@ (8101860 <HAL_GPIO_Init+0x238>)
 81017a2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 81017a6:	4a2e      	ldr	r2, [pc, #184]	@ (8101860 <HAL_GPIO_Init+0x238>)
 81017a8:	f043 0302 	orr.w	r3, r3, #2
 81017ac:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 81017b0:	4b2b      	ldr	r3, [pc, #172]	@ (8101860 <HAL_GPIO_Init+0x238>)
 81017b2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 81017b6:	f003 0302 	and.w	r3, r3, #2
 81017ba:	60fb      	str	r3, [r7, #12]
 81017bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 81017be:	4a29      	ldr	r2, [pc, #164]	@ (8101864 <HAL_GPIO_Init+0x23c>)
 81017c0:	69fb      	ldr	r3, [r7, #28]
 81017c2:	089b      	lsrs	r3, r3, #2
 81017c4:	3302      	adds	r3, #2
 81017c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 81017ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 81017cc:	69fb      	ldr	r3, [r7, #28]
 81017ce:	f003 0303 	and.w	r3, r3, #3
 81017d2:	009b      	lsls	r3, r3, #2
 81017d4:	220f      	movs	r2, #15
 81017d6:	fa02 f303 	lsl.w	r3, r2, r3
 81017da:	43db      	mvns	r3, r3
 81017dc:	69ba      	ldr	r2, [r7, #24]
 81017de:	4013      	ands	r3, r2
 81017e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 81017e2:	687b      	ldr	r3, [r7, #4]
 81017e4:	4a20      	ldr	r2, [pc, #128]	@ (8101868 <HAL_GPIO_Init+0x240>)
 81017e6:	4293      	cmp	r3, r2
 81017e8:	d052      	beq.n	8101890 <HAL_GPIO_Init+0x268>
 81017ea:	687b      	ldr	r3, [r7, #4]
 81017ec:	4a1f      	ldr	r2, [pc, #124]	@ (810186c <HAL_GPIO_Init+0x244>)
 81017ee:	4293      	cmp	r3, r2
 81017f0:	d031      	beq.n	8101856 <HAL_GPIO_Init+0x22e>
 81017f2:	687b      	ldr	r3, [r7, #4]
 81017f4:	4a1e      	ldr	r2, [pc, #120]	@ (8101870 <HAL_GPIO_Init+0x248>)
 81017f6:	4293      	cmp	r3, r2
 81017f8:	d02b      	beq.n	8101852 <HAL_GPIO_Init+0x22a>
 81017fa:	687b      	ldr	r3, [r7, #4]
 81017fc:	4a1d      	ldr	r2, [pc, #116]	@ (8101874 <HAL_GPIO_Init+0x24c>)
 81017fe:	4293      	cmp	r3, r2
 8101800:	d025      	beq.n	810184e <HAL_GPIO_Init+0x226>
 8101802:	687b      	ldr	r3, [r7, #4]
 8101804:	4a1c      	ldr	r2, [pc, #112]	@ (8101878 <HAL_GPIO_Init+0x250>)
 8101806:	4293      	cmp	r3, r2
 8101808:	d01f      	beq.n	810184a <HAL_GPIO_Init+0x222>
 810180a:	687b      	ldr	r3, [r7, #4]
 810180c:	4a1b      	ldr	r2, [pc, #108]	@ (810187c <HAL_GPIO_Init+0x254>)
 810180e:	4293      	cmp	r3, r2
 8101810:	d019      	beq.n	8101846 <HAL_GPIO_Init+0x21e>
 8101812:	687b      	ldr	r3, [r7, #4]
 8101814:	4a1a      	ldr	r2, [pc, #104]	@ (8101880 <HAL_GPIO_Init+0x258>)
 8101816:	4293      	cmp	r3, r2
 8101818:	d013      	beq.n	8101842 <HAL_GPIO_Init+0x21a>
 810181a:	687b      	ldr	r3, [r7, #4]
 810181c:	4a19      	ldr	r2, [pc, #100]	@ (8101884 <HAL_GPIO_Init+0x25c>)
 810181e:	4293      	cmp	r3, r2
 8101820:	d00d      	beq.n	810183e <HAL_GPIO_Init+0x216>
 8101822:	687b      	ldr	r3, [r7, #4]
 8101824:	4a18      	ldr	r2, [pc, #96]	@ (8101888 <HAL_GPIO_Init+0x260>)
 8101826:	4293      	cmp	r3, r2
 8101828:	d007      	beq.n	810183a <HAL_GPIO_Init+0x212>
 810182a:	687b      	ldr	r3, [r7, #4]
 810182c:	4a17      	ldr	r2, [pc, #92]	@ (810188c <HAL_GPIO_Init+0x264>)
 810182e:	4293      	cmp	r3, r2
 8101830:	d101      	bne.n	8101836 <HAL_GPIO_Init+0x20e>
 8101832:	2309      	movs	r3, #9
 8101834:	e02d      	b.n	8101892 <HAL_GPIO_Init+0x26a>
 8101836:	230a      	movs	r3, #10
 8101838:	e02b      	b.n	8101892 <HAL_GPIO_Init+0x26a>
 810183a:	2308      	movs	r3, #8
 810183c:	e029      	b.n	8101892 <HAL_GPIO_Init+0x26a>
 810183e:	2307      	movs	r3, #7
 8101840:	e027      	b.n	8101892 <HAL_GPIO_Init+0x26a>
 8101842:	2306      	movs	r3, #6
 8101844:	e025      	b.n	8101892 <HAL_GPIO_Init+0x26a>
 8101846:	2305      	movs	r3, #5
 8101848:	e023      	b.n	8101892 <HAL_GPIO_Init+0x26a>
 810184a:	2304      	movs	r3, #4
 810184c:	e021      	b.n	8101892 <HAL_GPIO_Init+0x26a>
 810184e:	2303      	movs	r3, #3
 8101850:	e01f      	b.n	8101892 <HAL_GPIO_Init+0x26a>
 8101852:	2302      	movs	r3, #2
 8101854:	e01d      	b.n	8101892 <HAL_GPIO_Init+0x26a>
 8101856:	2301      	movs	r3, #1
 8101858:	e01b      	b.n	8101892 <HAL_GPIO_Init+0x26a>
 810185a:	bf00      	nop
 810185c:	580000c0 	.word	0x580000c0
 8101860:	58024400 	.word	0x58024400
 8101864:	58000400 	.word	0x58000400
 8101868:	58020000 	.word	0x58020000
 810186c:	58020400 	.word	0x58020400
 8101870:	58020800 	.word	0x58020800
 8101874:	58020c00 	.word	0x58020c00
 8101878:	58021000 	.word	0x58021000
 810187c:	58021400 	.word	0x58021400
 8101880:	58021800 	.word	0x58021800
 8101884:	58021c00 	.word	0x58021c00
 8101888:	58022000 	.word	0x58022000
 810188c:	58022400 	.word	0x58022400
 8101890:	2300      	movs	r3, #0
 8101892:	69fa      	ldr	r2, [r7, #28]
 8101894:	f002 0203 	and.w	r2, r2, #3
 8101898:	0092      	lsls	r2, r2, #2
 810189a:	4093      	lsls	r3, r2
 810189c:	69ba      	ldr	r2, [r7, #24]
 810189e:	4313      	orrs	r3, r2
 81018a0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 81018a2:	4938      	ldr	r1, [pc, #224]	@ (8101984 <HAL_GPIO_Init+0x35c>)
 81018a4:	69fb      	ldr	r3, [r7, #28]
 81018a6:	089b      	lsrs	r3, r3, #2
 81018a8:	3302      	adds	r3, #2
 81018aa:	69ba      	ldr	r2, [r7, #24]
 81018ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 81018b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 81018b4:	681b      	ldr	r3, [r3, #0]
 81018b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 81018b8:	693b      	ldr	r3, [r7, #16]
 81018ba:	43db      	mvns	r3, r3
 81018bc:	69ba      	ldr	r2, [r7, #24]
 81018be:	4013      	ands	r3, r2
 81018c0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 81018c2:	683b      	ldr	r3, [r7, #0]
 81018c4:	685b      	ldr	r3, [r3, #4]
 81018c6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 81018ca:	2b00      	cmp	r3, #0
 81018cc:	d003      	beq.n	81018d6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 81018ce:	69ba      	ldr	r2, [r7, #24]
 81018d0:	693b      	ldr	r3, [r7, #16]
 81018d2:	4313      	orrs	r3, r2
 81018d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 81018d6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 81018da:	69bb      	ldr	r3, [r7, #24]
 81018dc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 81018de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 81018e2:	685b      	ldr	r3, [r3, #4]
 81018e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 81018e6:	693b      	ldr	r3, [r7, #16]
 81018e8:	43db      	mvns	r3, r3
 81018ea:	69ba      	ldr	r2, [r7, #24]
 81018ec:	4013      	ands	r3, r2
 81018ee:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 81018f0:	683b      	ldr	r3, [r7, #0]
 81018f2:	685b      	ldr	r3, [r3, #4]
 81018f4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 81018f8:	2b00      	cmp	r3, #0
 81018fa:	d003      	beq.n	8101904 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 81018fc:	69ba      	ldr	r2, [r7, #24]
 81018fe:	693b      	ldr	r3, [r7, #16]
 8101900:	4313      	orrs	r3, r2
 8101902:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8101904:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8101908:	69bb      	ldr	r3, [r7, #24]
 810190a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 810190c:	697b      	ldr	r3, [r7, #20]
 810190e:	685b      	ldr	r3, [r3, #4]
 8101910:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8101912:	693b      	ldr	r3, [r7, #16]
 8101914:	43db      	mvns	r3, r3
 8101916:	69ba      	ldr	r2, [r7, #24]
 8101918:	4013      	ands	r3, r2
 810191a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 810191c:	683b      	ldr	r3, [r7, #0]
 810191e:	685b      	ldr	r3, [r3, #4]
 8101920:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8101924:	2b00      	cmp	r3, #0
 8101926:	d003      	beq.n	8101930 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8101928:	69ba      	ldr	r2, [r7, #24]
 810192a:	693b      	ldr	r3, [r7, #16]
 810192c:	4313      	orrs	r3, r2
 810192e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8101930:	697b      	ldr	r3, [r7, #20]
 8101932:	69ba      	ldr	r2, [r7, #24]
 8101934:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8101936:	697b      	ldr	r3, [r7, #20]
 8101938:	681b      	ldr	r3, [r3, #0]
 810193a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 810193c:	693b      	ldr	r3, [r7, #16]
 810193e:	43db      	mvns	r3, r3
 8101940:	69ba      	ldr	r2, [r7, #24]
 8101942:	4013      	ands	r3, r2
 8101944:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8101946:	683b      	ldr	r3, [r7, #0]
 8101948:	685b      	ldr	r3, [r3, #4]
 810194a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 810194e:	2b00      	cmp	r3, #0
 8101950:	d003      	beq.n	810195a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8101952:	69ba      	ldr	r2, [r7, #24]
 8101954:	693b      	ldr	r3, [r7, #16]
 8101956:	4313      	orrs	r3, r2
 8101958:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 810195a:	697b      	ldr	r3, [r7, #20]
 810195c:	69ba      	ldr	r2, [r7, #24]
 810195e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8101960:	69fb      	ldr	r3, [r7, #28]
 8101962:	3301      	adds	r3, #1
 8101964:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8101966:	683b      	ldr	r3, [r7, #0]
 8101968:	681a      	ldr	r2, [r3, #0]
 810196a:	69fb      	ldr	r3, [r7, #28]
 810196c:	fa22 f303 	lsr.w	r3, r2, r3
 8101970:	2b00      	cmp	r3, #0
 8101972:	f47f ae63 	bne.w	810163c <HAL_GPIO_Init+0x14>
  }
}
 8101976:	bf00      	nop
 8101978:	bf00      	nop
 810197a:	3724      	adds	r7, #36	@ 0x24
 810197c:	46bd      	mov	sp, r7
 810197e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101982:	4770      	bx	lr
 8101984:	58000400 	.word	0x58000400

08101988 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8101988:	b480      	push	{r7}
 810198a:	b085      	sub	sp, #20
 810198c:	af00      	add	r7, sp, #0
 810198e:	6078      	str	r0, [r7, #4]
 8101990:	460b      	mov	r3, r1
 8101992:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8101994:	687b      	ldr	r3, [r7, #4]
 8101996:	691a      	ldr	r2, [r3, #16]
 8101998:	887b      	ldrh	r3, [r7, #2]
 810199a:	4013      	ands	r3, r2
 810199c:	2b00      	cmp	r3, #0
 810199e:	d002      	beq.n	81019a6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 81019a0:	2301      	movs	r3, #1
 81019a2:	73fb      	strb	r3, [r7, #15]
 81019a4:	e001      	b.n	81019aa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 81019a6:	2300      	movs	r3, #0
 81019a8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 81019aa:	7bfb      	ldrb	r3, [r7, #15]
}
 81019ac:	4618      	mov	r0, r3
 81019ae:	3714      	adds	r7, #20
 81019b0:	46bd      	mov	sp, r7
 81019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81019b6:	4770      	bx	lr

081019b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 81019b8:	b480      	push	{r7}
 81019ba:	b083      	sub	sp, #12
 81019bc:	af00      	add	r7, sp, #0
 81019be:	6078      	str	r0, [r7, #4]
 81019c0:	460b      	mov	r3, r1
 81019c2:	807b      	strh	r3, [r7, #2]
 81019c4:	4613      	mov	r3, r2
 81019c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 81019c8:	787b      	ldrb	r3, [r7, #1]
 81019ca:	2b00      	cmp	r3, #0
 81019cc:	d003      	beq.n	81019d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 81019ce:	887a      	ldrh	r2, [r7, #2]
 81019d0:	687b      	ldr	r3, [r7, #4]
 81019d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 81019d4:	e003      	b.n	81019de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 81019d6:	887b      	ldrh	r3, [r7, #2]
 81019d8:	041a      	lsls	r2, r3, #16
 81019da:	687b      	ldr	r3, [r7, #4]
 81019dc:	619a      	str	r2, [r3, #24]
}
 81019de:	bf00      	nop
 81019e0:	370c      	adds	r7, #12
 81019e2:	46bd      	mov	sp, r7
 81019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81019e8:	4770      	bx	lr

081019ea <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 81019ea:	b480      	push	{r7}
 81019ec:	b085      	sub	sp, #20
 81019ee:	af00      	add	r7, sp, #0
 81019f0:	6078      	str	r0, [r7, #4]
 81019f2:	460b      	mov	r3, r1
 81019f4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 81019f6:	687b      	ldr	r3, [r7, #4]
 81019f8:	695b      	ldr	r3, [r3, #20]
 81019fa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 81019fc:	887a      	ldrh	r2, [r7, #2]
 81019fe:	68fb      	ldr	r3, [r7, #12]
 8101a00:	4013      	ands	r3, r2
 8101a02:	041a      	lsls	r2, r3, #16
 8101a04:	68fb      	ldr	r3, [r7, #12]
 8101a06:	43d9      	mvns	r1, r3
 8101a08:	887b      	ldrh	r3, [r7, #2]
 8101a0a:	400b      	ands	r3, r1
 8101a0c:	431a      	orrs	r2, r3
 8101a0e:	687b      	ldr	r3, [r7, #4]
 8101a10:	619a      	str	r2, [r3, #24]
}
 8101a12:	bf00      	nop
 8101a14:	3714      	adds	r7, #20
 8101a16:	46bd      	mov	sp, r7
 8101a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101a1c:	4770      	bx	lr
	...

08101a20 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 8101a20:	b480      	push	{r7}
 8101a22:	b083      	sub	sp, #12
 8101a24:	af00      	add	r7, sp, #0
 8101a26:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 8101a28:	4b05      	ldr	r3, [pc, #20]	@ (8101a40 <HAL_HSEM_ActivateNotification+0x20>)
 8101a2a:	681a      	ldr	r2, [r3, #0]
 8101a2c:	4904      	ldr	r1, [pc, #16]	@ (8101a40 <HAL_HSEM_ActivateNotification+0x20>)
 8101a2e:	687b      	ldr	r3, [r7, #4]
 8101a30:	4313      	orrs	r3, r2
 8101a32:	600b      	str	r3, [r1, #0]
#endif
}
 8101a34:	bf00      	nop
 8101a36:	370c      	adds	r7, #12
 8101a38:	46bd      	mov	sp, r7
 8101a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101a3e:	4770      	bx	lr
 8101a40:	58026510 	.word	0x58026510

08101a44 <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 8101a44:	b580      	push	{r7, lr}
 8101a46:	b084      	sub	sp, #16
 8101a48:	af00      	add	r7, sp, #0
 8101a4a:	60f8      	str	r0, [r7, #12]
 8101a4c:	460b      	mov	r3, r1
 8101a4e:	607a      	str	r2, [r7, #4]
 8101a50:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8101a52:	4b37      	ldr	r3, [pc, #220]	@ (8101b30 <HAL_PWREx_EnterSTOPMode+0xec>)
 8101a54:	681b      	ldr	r3, [r3, #0]
 8101a56:	f023 0201 	bic.w	r2, r3, #1
 8101a5a:	4935      	ldr	r1, [pc, #212]	@ (8101b30 <HAL_PWREx_EnterSTOPMode+0xec>)
 8101a5c:	68fb      	ldr	r3, [r7, #12]
 8101a5e:	4313      	orrs	r3, r2
 8101a60:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 8101a62:	687b      	ldr	r3, [r7, #4]
 8101a64:	2b00      	cmp	r3, #0
 8101a66:	d123      	bne.n	8101ab0 <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 8101a68:	f7ff fdca 	bl	8101600 <HAL_GetCurrentCPUID>
 8101a6c:	4603      	mov	r3, r0
 8101a6e:	2b03      	cmp	r3, #3
 8101a70:	d158      	bne.n	8101b24 <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 8101a72:	4b2f      	ldr	r3, [pc, #188]	@ (8101b30 <HAL_PWREx_EnterSTOPMode+0xec>)
 8101a74:	691b      	ldr	r3, [r3, #16]
 8101a76:	4a2e      	ldr	r2, [pc, #184]	@ (8101b30 <HAL_PWREx_EnterSTOPMode+0xec>)
 8101a78:	f023 0301 	bic.w	r3, r3, #1
 8101a7c:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8101a7e:	4b2d      	ldr	r3, [pc, #180]	@ (8101b34 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101a80:	691b      	ldr	r3, [r3, #16]
 8101a82:	4a2c      	ldr	r2, [pc, #176]	@ (8101b34 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101a84:	f043 0304 	orr.w	r3, r3, #4
 8101a88:	6113      	str	r3, [r2, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8101a8a:	f3bf 8f4f 	dsb	sy
}
 8101a8e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8101a90:	f3bf 8f6f 	isb	sy
}
 8101a94:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8101a96:	7afb      	ldrb	r3, [r7, #11]
 8101a98:	2b01      	cmp	r3, #1
 8101a9a:	d101      	bne.n	8101aa0 <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8101a9c:	bf30      	wfi
 8101a9e:	e000      	b.n	8101aa2 <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8101aa0:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8101aa2:	4b24      	ldr	r3, [pc, #144]	@ (8101b34 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101aa4:	691b      	ldr	r3, [r3, #16]
 8101aa6:	4a23      	ldr	r2, [pc, #140]	@ (8101b34 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101aa8:	f023 0304 	bic.w	r3, r3, #4
 8101aac:	6113      	str	r3, [r2, #16]
 8101aae:	e03c      	b.n	8101b2a <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 8101ab0:	687b      	ldr	r3, [r7, #4]
 8101ab2:	2b01      	cmp	r3, #1
 8101ab4:	d123      	bne.n	8101afe <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 8101ab6:	f7ff fda3 	bl	8101600 <HAL_GetCurrentCPUID>
 8101aba:	4603      	mov	r3, r0
 8101abc:	2b01      	cmp	r3, #1
 8101abe:	d133      	bne.n	8101b28 <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 8101ac0:	4b1b      	ldr	r3, [pc, #108]	@ (8101b30 <HAL_PWREx_EnterSTOPMode+0xec>)
 8101ac2:	695b      	ldr	r3, [r3, #20]
 8101ac4:	4a1a      	ldr	r2, [pc, #104]	@ (8101b30 <HAL_PWREx_EnterSTOPMode+0xec>)
 8101ac6:	f023 0302 	bic.w	r3, r3, #2
 8101aca:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8101acc:	4b19      	ldr	r3, [pc, #100]	@ (8101b34 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101ace:	691b      	ldr	r3, [r3, #16]
 8101ad0:	4a18      	ldr	r2, [pc, #96]	@ (8101b34 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101ad2:	f043 0304 	orr.w	r3, r3, #4
 8101ad6:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8101ad8:	f3bf 8f4f 	dsb	sy
}
 8101adc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8101ade:	f3bf 8f6f 	isb	sy
}
 8101ae2:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8101ae4:	7afb      	ldrb	r3, [r7, #11]
 8101ae6:	2b01      	cmp	r3, #1
 8101ae8:	d101      	bne.n	8101aee <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8101aea:	bf30      	wfi
 8101aec:	e000      	b.n	8101af0 <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8101aee:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8101af0:	4b10      	ldr	r3, [pc, #64]	@ (8101b34 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101af2:	691b      	ldr	r3, [r3, #16]
 8101af4:	4a0f      	ldr	r2, [pc, #60]	@ (8101b34 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101af6:	f023 0304 	bic.w	r3, r3, #4
 8101afa:	6113      	str	r3, [r2, #16]
 8101afc:	e015      	b.n	8101b2a <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8101afe:	f7ff fd7f 	bl	8101600 <HAL_GetCurrentCPUID>
 8101b02:	4603      	mov	r3, r0
 8101b04:	2b03      	cmp	r3, #3
 8101b06:	d106      	bne.n	8101b16 <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 8101b08:	4b09      	ldr	r3, [pc, #36]	@ (8101b30 <HAL_PWREx_EnterSTOPMode+0xec>)
 8101b0a:	691b      	ldr	r3, [r3, #16]
 8101b0c:	4a08      	ldr	r2, [pc, #32]	@ (8101b30 <HAL_PWREx_EnterSTOPMode+0xec>)
 8101b0e:	f023 0304 	bic.w	r3, r3, #4
 8101b12:	6113      	str	r3, [r2, #16]
 8101b14:	e009      	b.n	8101b2a <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 8101b16:	4b06      	ldr	r3, [pc, #24]	@ (8101b30 <HAL_PWREx_EnterSTOPMode+0xec>)
 8101b18:	695b      	ldr	r3, [r3, #20]
 8101b1a:	4a05      	ldr	r2, [pc, #20]	@ (8101b30 <HAL_PWREx_EnterSTOPMode+0xec>)
 8101b1c:	f023 0304 	bic.w	r3, r3, #4
 8101b20:	6153      	str	r3, [r2, #20]
 8101b22:	e002      	b.n	8101b2a <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8101b24:	bf00      	nop
 8101b26:	e000      	b.n	8101b2a <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8101b28:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 8101b2a:	3710      	adds	r7, #16
 8101b2c:	46bd      	mov	sp, r7
 8101b2e:	bd80      	pop	{r7, pc}
 8101b30:	58024800 	.word	0x58024800
 8101b34:	e000ed00 	.word	0xe000ed00

08101b38 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 8101b38:	b580      	push	{r7, lr}
 8101b3a:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8101b3c:	f7ff fd60 	bl	8101600 <HAL_GetCurrentCPUID>
 8101b40:	4603      	mov	r3, r0
 8101b42:	2b03      	cmp	r3, #3
 8101b44:	d101      	bne.n	8101b4a <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 8101b46:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 8101b48:	e001      	b.n	8101b4e <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 8101b4a:	bf40      	sev
    __WFE ();
 8101b4c:	bf20      	wfe
}
 8101b4e:	bf00      	nop
 8101b50:	bd80      	pop	{r7, pc}
	...

08101b54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8101b54:	b480      	push	{r7}
 8101b56:	b089      	sub	sp, #36	@ 0x24
 8101b58:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8101b5a:	4bb3      	ldr	r3, [pc, #716]	@ (8101e28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101b5c:	691b      	ldr	r3, [r3, #16]
 8101b5e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8101b62:	2b18      	cmp	r3, #24
 8101b64:	f200 8155 	bhi.w	8101e12 <HAL_RCC_GetSysClockFreq+0x2be>
 8101b68:	a201      	add	r2, pc, #4	@ (adr r2, 8101b70 <HAL_RCC_GetSysClockFreq+0x1c>)
 8101b6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8101b6e:	bf00      	nop
 8101b70:	08101bd5 	.word	0x08101bd5
 8101b74:	08101e13 	.word	0x08101e13
 8101b78:	08101e13 	.word	0x08101e13
 8101b7c:	08101e13 	.word	0x08101e13
 8101b80:	08101e13 	.word	0x08101e13
 8101b84:	08101e13 	.word	0x08101e13
 8101b88:	08101e13 	.word	0x08101e13
 8101b8c:	08101e13 	.word	0x08101e13
 8101b90:	08101bfb 	.word	0x08101bfb
 8101b94:	08101e13 	.word	0x08101e13
 8101b98:	08101e13 	.word	0x08101e13
 8101b9c:	08101e13 	.word	0x08101e13
 8101ba0:	08101e13 	.word	0x08101e13
 8101ba4:	08101e13 	.word	0x08101e13
 8101ba8:	08101e13 	.word	0x08101e13
 8101bac:	08101e13 	.word	0x08101e13
 8101bb0:	08101c01 	.word	0x08101c01
 8101bb4:	08101e13 	.word	0x08101e13
 8101bb8:	08101e13 	.word	0x08101e13
 8101bbc:	08101e13 	.word	0x08101e13
 8101bc0:	08101e13 	.word	0x08101e13
 8101bc4:	08101e13 	.word	0x08101e13
 8101bc8:	08101e13 	.word	0x08101e13
 8101bcc:	08101e13 	.word	0x08101e13
 8101bd0:	08101c07 	.word	0x08101c07
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8101bd4:	4b94      	ldr	r3, [pc, #592]	@ (8101e28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101bd6:	681b      	ldr	r3, [r3, #0]
 8101bd8:	f003 0320 	and.w	r3, r3, #32
 8101bdc:	2b00      	cmp	r3, #0
 8101bde:	d009      	beq.n	8101bf4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8101be0:	4b91      	ldr	r3, [pc, #580]	@ (8101e28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101be2:	681b      	ldr	r3, [r3, #0]
 8101be4:	08db      	lsrs	r3, r3, #3
 8101be6:	f003 0303 	and.w	r3, r3, #3
 8101bea:	4a90      	ldr	r2, [pc, #576]	@ (8101e2c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8101bec:	fa22 f303 	lsr.w	r3, r2, r3
 8101bf0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8101bf2:	e111      	b.n	8101e18 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8101bf4:	4b8d      	ldr	r3, [pc, #564]	@ (8101e2c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8101bf6:	61bb      	str	r3, [r7, #24]
      break;
 8101bf8:	e10e      	b.n	8101e18 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8101bfa:	4b8d      	ldr	r3, [pc, #564]	@ (8101e30 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8101bfc:	61bb      	str	r3, [r7, #24]
      break;
 8101bfe:	e10b      	b.n	8101e18 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8101c00:	4b8c      	ldr	r3, [pc, #560]	@ (8101e34 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8101c02:	61bb      	str	r3, [r7, #24]
      break;
 8101c04:	e108      	b.n	8101e18 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8101c06:	4b88      	ldr	r3, [pc, #544]	@ (8101e28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101c08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8101c0a:	f003 0303 	and.w	r3, r3, #3
 8101c0e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8101c10:	4b85      	ldr	r3, [pc, #532]	@ (8101e28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101c12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8101c14:	091b      	lsrs	r3, r3, #4
 8101c16:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8101c1a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8101c1c:	4b82      	ldr	r3, [pc, #520]	@ (8101e28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101c1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8101c20:	f003 0301 	and.w	r3, r3, #1
 8101c24:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8101c26:	4b80      	ldr	r3, [pc, #512]	@ (8101e28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101c28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8101c2a:	08db      	lsrs	r3, r3, #3
 8101c2c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8101c30:	68fa      	ldr	r2, [r7, #12]
 8101c32:	fb02 f303 	mul.w	r3, r2, r3
 8101c36:	ee07 3a90 	vmov	s15, r3
 8101c3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101c3e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8101c42:	693b      	ldr	r3, [r7, #16]
 8101c44:	2b00      	cmp	r3, #0
 8101c46:	f000 80e1 	beq.w	8101e0c <HAL_RCC_GetSysClockFreq+0x2b8>
 8101c4a:	697b      	ldr	r3, [r7, #20]
 8101c4c:	2b02      	cmp	r3, #2
 8101c4e:	f000 8083 	beq.w	8101d58 <HAL_RCC_GetSysClockFreq+0x204>
 8101c52:	697b      	ldr	r3, [r7, #20]
 8101c54:	2b02      	cmp	r3, #2
 8101c56:	f200 80a1 	bhi.w	8101d9c <HAL_RCC_GetSysClockFreq+0x248>
 8101c5a:	697b      	ldr	r3, [r7, #20]
 8101c5c:	2b00      	cmp	r3, #0
 8101c5e:	d003      	beq.n	8101c68 <HAL_RCC_GetSysClockFreq+0x114>
 8101c60:	697b      	ldr	r3, [r7, #20]
 8101c62:	2b01      	cmp	r3, #1
 8101c64:	d056      	beq.n	8101d14 <HAL_RCC_GetSysClockFreq+0x1c0>
 8101c66:	e099      	b.n	8101d9c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8101c68:	4b6f      	ldr	r3, [pc, #444]	@ (8101e28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101c6a:	681b      	ldr	r3, [r3, #0]
 8101c6c:	f003 0320 	and.w	r3, r3, #32
 8101c70:	2b00      	cmp	r3, #0
 8101c72:	d02d      	beq.n	8101cd0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8101c74:	4b6c      	ldr	r3, [pc, #432]	@ (8101e28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101c76:	681b      	ldr	r3, [r3, #0]
 8101c78:	08db      	lsrs	r3, r3, #3
 8101c7a:	f003 0303 	and.w	r3, r3, #3
 8101c7e:	4a6b      	ldr	r2, [pc, #428]	@ (8101e2c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8101c80:	fa22 f303 	lsr.w	r3, r2, r3
 8101c84:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8101c86:	687b      	ldr	r3, [r7, #4]
 8101c88:	ee07 3a90 	vmov	s15, r3
 8101c8c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8101c90:	693b      	ldr	r3, [r7, #16]
 8101c92:	ee07 3a90 	vmov	s15, r3
 8101c96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101c9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8101c9e:	4b62      	ldr	r3, [pc, #392]	@ (8101e28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101ca0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8101ca2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8101ca6:	ee07 3a90 	vmov	s15, r3
 8101caa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8101cae:	ed97 6a02 	vldr	s12, [r7, #8]
 8101cb2:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8101e38 <HAL_RCC_GetSysClockFreq+0x2e4>
 8101cb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8101cba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8101cbe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8101cc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8101cc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101cca:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8101cce:	e087      	b.n	8101de0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8101cd0:	693b      	ldr	r3, [r7, #16]
 8101cd2:	ee07 3a90 	vmov	s15, r3
 8101cd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101cda:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8101e3c <HAL_RCC_GetSysClockFreq+0x2e8>
 8101cde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8101ce2:	4b51      	ldr	r3, [pc, #324]	@ (8101e28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101ce4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8101ce6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8101cea:	ee07 3a90 	vmov	s15, r3
 8101cee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8101cf2:	ed97 6a02 	vldr	s12, [r7, #8]
 8101cf6:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8101e38 <HAL_RCC_GetSysClockFreq+0x2e4>
 8101cfa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8101cfe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8101d02:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8101d06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8101d0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101d0e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8101d12:	e065      	b.n	8101de0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8101d14:	693b      	ldr	r3, [r7, #16]
 8101d16:	ee07 3a90 	vmov	s15, r3
 8101d1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101d1e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8101e40 <HAL_RCC_GetSysClockFreq+0x2ec>
 8101d22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8101d26:	4b40      	ldr	r3, [pc, #256]	@ (8101e28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101d28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8101d2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8101d2e:	ee07 3a90 	vmov	s15, r3
 8101d32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8101d36:	ed97 6a02 	vldr	s12, [r7, #8]
 8101d3a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8101e38 <HAL_RCC_GetSysClockFreq+0x2e4>
 8101d3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8101d42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8101d46:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8101d4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8101d4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101d52:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8101d56:	e043      	b.n	8101de0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8101d58:	693b      	ldr	r3, [r7, #16]
 8101d5a:	ee07 3a90 	vmov	s15, r3
 8101d5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101d62:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8101e44 <HAL_RCC_GetSysClockFreq+0x2f0>
 8101d66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8101d6a:	4b2f      	ldr	r3, [pc, #188]	@ (8101e28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101d6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8101d6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8101d72:	ee07 3a90 	vmov	s15, r3
 8101d76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8101d7a:	ed97 6a02 	vldr	s12, [r7, #8]
 8101d7e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8101e38 <HAL_RCC_GetSysClockFreq+0x2e4>
 8101d82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8101d86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8101d8a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8101d8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8101d92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101d96:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8101d9a:	e021      	b.n	8101de0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8101d9c:	693b      	ldr	r3, [r7, #16]
 8101d9e:	ee07 3a90 	vmov	s15, r3
 8101da2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101da6:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8101e40 <HAL_RCC_GetSysClockFreq+0x2ec>
 8101daa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8101dae:	4b1e      	ldr	r3, [pc, #120]	@ (8101e28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101db0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8101db2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8101db6:	ee07 3a90 	vmov	s15, r3
 8101dba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8101dbe:	ed97 6a02 	vldr	s12, [r7, #8]
 8101dc2:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8101e38 <HAL_RCC_GetSysClockFreq+0x2e4>
 8101dc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8101dca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8101dce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8101dd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8101dd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101dda:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8101dde:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8101de0:	4b11      	ldr	r3, [pc, #68]	@ (8101e28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101de2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8101de4:	0a5b      	lsrs	r3, r3, #9
 8101de6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8101dea:	3301      	adds	r3, #1
 8101dec:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8101dee:	683b      	ldr	r3, [r7, #0]
 8101df0:	ee07 3a90 	vmov	s15, r3
 8101df4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8101df8:	edd7 6a07 	vldr	s13, [r7, #28]
 8101dfc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8101e00:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8101e04:	ee17 3a90 	vmov	r3, s15
 8101e08:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8101e0a:	e005      	b.n	8101e18 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8101e0c:	2300      	movs	r3, #0
 8101e0e:	61bb      	str	r3, [r7, #24]
      break;
 8101e10:	e002      	b.n	8101e18 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8101e12:	4b07      	ldr	r3, [pc, #28]	@ (8101e30 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8101e14:	61bb      	str	r3, [r7, #24]
      break;
 8101e16:	bf00      	nop
  }

  return sysclockfreq;
 8101e18:	69bb      	ldr	r3, [r7, #24]
}
 8101e1a:	4618      	mov	r0, r3
 8101e1c:	3724      	adds	r7, #36	@ 0x24
 8101e1e:	46bd      	mov	sp, r7
 8101e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101e24:	4770      	bx	lr
 8101e26:	bf00      	nop
 8101e28:	58024400 	.word	0x58024400
 8101e2c:	03d09000 	.word	0x03d09000
 8101e30:	003d0900 	.word	0x003d0900
 8101e34:	017d7840 	.word	0x017d7840
 8101e38:	46000000 	.word	0x46000000
 8101e3c:	4c742400 	.word	0x4c742400
 8101e40:	4a742400 	.word	0x4a742400
 8101e44:	4bbebc20 	.word	0x4bbebc20

08101e48 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8101e48:	b580      	push	{r7, lr}
 8101e4a:	b084      	sub	sp, #16
 8101e4c:	af00      	add	r7, sp, #0
 8101e4e:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8101e50:	687b      	ldr	r3, [r7, #4]
 8101e52:	2b00      	cmp	r3, #0
 8101e54:	d101      	bne.n	8101e5a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8101e56:	2301      	movs	r3, #1
 8101e58:	e10f      	b.n	810207a <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8101e5a:	687b      	ldr	r3, [r7, #4]
 8101e5c:	2200      	movs	r2, #0
 8101e5e:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8101e60:	687b      	ldr	r3, [r7, #4]
 8101e62:	681b      	ldr	r3, [r3, #0]
 8101e64:	4a87      	ldr	r2, [pc, #540]	@ (8102084 <HAL_SPI_Init+0x23c>)
 8101e66:	4293      	cmp	r3, r2
 8101e68:	d00f      	beq.n	8101e8a <HAL_SPI_Init+0x42>
 8101e6a:	687b      	ldr	r3, [r7, #4]
 8101e6c:	681b      	ldr	r3, [r3, #0]
 8101e6e:	4a86      	ldr	r2, [pc, #536]	@ (8102088 <HAL_SPI_Init+0x240>)
 8101e70:	4293      	cmp	r3, r2
 8101e72:	d00a      	beq.n	8101e8a <HAL_SPI_Init+0x42>
 8101e74:	687b      	ldr	r3, [r7, #4]
 8101e76:	681b      	ldr	r3, [r3, #0]
 8101e78:	4a84      	ldr	r2, [pc, #528]	@ (810208c <HAL_SPI_Init+0x244>)
 8101e7a:	4293      	cmp	r3, r2
 8101e7c:	d005      	beq.n	8101e8a <HAL_SPI_Init+0x42>
 8101e7e:	687b      	ldr	r3, [r7, #4]
 8101e80:	68db      	ldr	r3, [r3, #12]
 8101e82:	2b0f      	cmp	r3, #15
 8101e84:	d901      	bls.n	8101e8a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8101e86:	2301      	movs	r3, #1
 8101e88:	e0f7      	b.n	810207a <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8101e8a:	6878      	ldr	r0, [r7, #4]
 8101e8c:	f001 f962 	bl	8103154 <SPI_GetPacketSize>
 8101e90:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8101e92:	687b      	ldr	r3, [r7, #4]
 8101e94:	681b      	ldr	r3, [r3, #0]
 8101e96:	4a7b      	ldr	r2, [pc, #492]	@ (8102084 <HAL_SPI_Init+0x23c>)
 8101e98:	4293      	cmp	r3, r2
 8101e9a:	d00c      	beq.n	8101eb6 <HAL_SPI_Init+0x6e>
 8101e9c:	687b      	ldr	r3, [r7, #4]
 8101e9e:	681b      	ldr	r3, [r3, #0]
 8101ea0:	4a79      	ldr	r2, [pc, #484]	@ (8102088 <HAL_SPI_Init+0x240>)
 8101ea2:	4293      	cmp	r3, r2
 8101ea4:	d007      	beq.n	8101eb6 <HAL_SPI_Init+0x6e>
 8101ea6:	687b      	ldr	r3, [r7, #4]
 8101ea8:	681b      	ldr	r3, [r3, #0]
 8101eaa:	4a78      	ldr	r2, [pc, #480]	@ (810208c <HAL_SPI_Init+0x244>)
 8101eac:	4293      	cmp	r3, r2
 8101eae:	d002      	beq.n	8101eb6 <HAL_SPI_Init+0x6e>
 8101eb0:	68fb      	ldr	r3, [r7, #12]
 8101eb2:	2b08      	cmp	r3, #8
 8101eb4:	d811      	bhi.n	8101eda <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8101eb6:	687b      	ldr	r3, [r7, #4]
 8101eb8:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8101eba:	4a72      	ldr	r2, [pc, #456]	@ (8102084 <HAL_SPI_Init+0x23c>)
 8101ebc:	4293      	cmp	r3, r2
 8101ebe:	d009      	beq.n	8101ed4 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8101ec0:	687b      	ldr	r3, [r7, #4]
 8101ec2:	681b      	ldr	r3, [r3, #0]
 8101ec4:	4a70      	ldr	r2, [pc, #448]	@ (8102088 <HAL_SPI_Init+0x240>)
 8101ec6:	4293      	cmp	r3, r2
 8101ec8:	d004      	beq.n	8101ed4 <HAL_SPI_Init+0x8c>
 8101eca:	687b      	ldr	r3, [r7, #4]
 8101ecc:	681b      	ldr	r3, [r3, #0]
 8101ece:	4a6f      	ldr	r2, [pc, #444]	@ (810208c <HAL_SPI_Init+0x244>)
 8101ed0:	4293      	cmp	r3, r2
 8101ed2:	d104      	bne.n	8101ede <HAL_SPI_Init+0x96>
 8101ed4:	68fb      	ldr	r3, [r7, #12]
 8101ed6:	2b10      	cmp	r3, #16
 8101ed8:	d901      	bls.n	8101ede <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8101eda:	2301      	movs	r3, #1
 8101edc:	e0cd      	b.n	810207a <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8101ede:	687b      	ldr	r3, [r7, #4]
 8101ee0:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8101ee4:	b2db      	uxtb	r3, r3
 8101ee6:	2b00      	cmp	r3, #0
 8101ee8:	d106      	bne.n	8101ef8 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8101eea:	687b      	ldr	r3, [r7, #4]
 8101eec:	2200      	movs	r2, #0
 8101eee:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8101ef2:	6878      	ldr	r0, [r7, #4]
 8101ef4:	f7ff f8ea 	bl	81010cc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8101ef8:	687b      	ldr	r3, [r7, #4]
 8101efa:	2202      	movs	r2, #2
 8101efc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8101f00:	687b      	ldr	r3, [r7, #4]
 8101f02:	681b      	ldr	r3, [r3, #0]
 8101f04:	681a      	ldr	r2, [r3, #0]
 8101f06:	687b      	ldr	r3, [r7, #4]
 8101f08:	681b      	ldr	r3, [r3, #0]
 8101f0a:	f022 0201 	bic.w	r2, r2, #1
 8101f0e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8101f10:	687b      	ldr	r3, [r7, #4]
 8101f12:	681b      	ldr	r3, [r3, #0]
 8101f14:	689b      	ldr	r3, [r3, #8]
 8101f16:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8101f1a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8101f1c:	687b      	ldr	r3, [r7, #4]
 8101f1e:	699b      	ldr	r3, [r3, #24]
 8101f20:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8101f24:	d119      	bne.n	8101f5a <HAL_SPI_Init+0x112>
 8101f26:	687b      	ldr	r3, [r7, #4]
 8101f28:	685b      	ldr	r3, [r3, #4]
 8101f2a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8101f2e:	d103      	bne.n	8101f38 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8101f30:	687b      	ldr	r3, [r7, #4]
 8101f32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8101f34:	2b00      	cmp	r3, #0
 8101f36:	d008      	beq.n	8101f4a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8101f38:	687b      	ldr	r3, [r7, #4]
 8101f3a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8101f3c:	2b00      	cmp	r3, #0
 8101f3e:	d10c      	bne.n	8101f5a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8101f40:	687b      	ldr	r3, [r7, #4]
 8101f42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8101f44:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8101f48:	d107      	bne.n	8101f5a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8101f4a:	687b      	ldr	r3, [r7, #4]
 8101f4c:	681b      	ldr	r3, [r3, #0]
 8101f4e:	681a      	ldr	r2, [r3, #0]
 8101f50:	687b      	ldr	r3, [r7, #4]
 8101f52:	681b      	ldr	r3, [r3, #0]
 8101f54:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8101f58:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8101f5a:	687b      	ldr	r3, [r7, #4]
 8101f5c:	685b      	ldr	r3, [r3, #4]
 8101f5e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8101f62:	2b00      	cmp	r3, #0
 8101f64:	d00f      	beq.n	8101f86 <HAL_SPI_Init+0x13e>
 8101f66:	687b      	ldr	r3, [r7, #4]
 8101f68:	68db      	ldr	r3, [r3, #12]
 8101f6a:	2b06      	cmp	r3, #6
 8101f6c:	d90b      	bls.n	8101f86 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8101f6e:	687b      	ldr	r3, [r7, #4]
 8101f70:	681b      	ldr	r3, [r3, #0]
 8101f72:	681b      	ldr	r3, [r3, #0]
 8101f74:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8101f78:	687b      	ldr	r3, [r7, #4]
 8101f7a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8101f7c:	687b      	ldr	r3, [r7, #4]
 8101f7e:	681b      	ldr	r3, [r3, #0]
 8101f80:	430a      	orrs	r2, r1
 8101f82:	601a      	str	r2, [r3, #0]
 8101f84:	e007      	b.n	8101f96 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8101f86:	687b      	ldr	r3, [r7, #4]
 8101f88:	681b      	ldr	r3, [r3, #0]
 8101f8a:	681a      	ldr	r2, [r3, #0]
 8101f8c:	687b      	ldr	r3, [r7, #4]
 8101f8e:	681b      	ldr	r3, [r3, #0]
 8101f90:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8101f94:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8101f96:	687b      	ldr	r3, [r7, #4]
 8101f98:	69da      	ldr	r2, [r3, #28]
 8101f9a:	687b      	ldr	r3, [r7, #4]
 8101f9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8101f9e:	431a      	orrs	r2, r3
 8101fa0:	68bb      	ldr	r3, [r7, #8]
 8101fa2:	431a      	orrs	r2, r3
 8101fa4:	687b      	ldr	r3, [r7, #4]
 8101fa6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8101fa8:	ea42 0103 	orr.w	r1, r2, r3
 8101fac:	687b      	ldr	r3, [r7, #4]
 8101fae:	68da      	ldr	r2, [r3, #12]
 8101fb0:	687b      	ldr	r3, [r7, #4]
 8101fb2:	681b      	ldr	r3, [r3, #0]
 8101fb4:	430a      	orrs	r2, r1
 8101fb6:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8101fb8:	687b      	ldr	r3, [r7, #4]
 8101fba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8101fbc:	687b      	ldr	r3, [r7, #4]
 8101fbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8101fc0:	431a      	orrs	r2, r3
 8101fc2:	687b      	ldr	r3, [r7, #4]
 8101fc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8101fc6:	431a      	orrs	r2, r3
 8101fc8:	687b      	ldr	r3, [r7, #4]
 8101fca:	699b      	ldr	r3, [r3, #24]
 8101fcc:	431a      	orrs	r2, r3
 8101fce:	687b      	ldr	r3, [r7, #4]
 8101fd0:	691b      	ldr	r3, [r3, #16]
 8101fd2:	431a      	orrs	r2, r3
 8101fd4:	687b      	ldr	r3, [r7, #4]
 8101fd6:	695b      	ldr	r3, [r3, #20]
 8101fd8:	431a      	orrs	r2, r3
 8101fda:	687b      	ldr	r3, [r7, #4]
 8101fdc:	6a1b      	ldr	r3, [r3, #32]
 8101fde:	431a      	orrs	r2, r3
 8101fe0:	687b      	ldr	r3, [r7, #4]
 8101fe2:	685b      	ldr	r3, [r3, #4]
 8101fe4:	431a      	orrs	r2, r3
 8101fe6:	687b      	ldr	r3, [r7, #4]
 8101fe8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8101fea:	431a      	orrs	r2, r3
 8101fec:	687b      	ldr	r3, [r7, #4]
 8101fee:	689b      	ldr	r3, [r3, #8]
 8101ff0:	431a      	orrs	r2, r3
 8101ff2:	687b      	ldr	r3, [r7, #4]
 8101ff4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8101ff6:	ea42 0103 	orr.w	r1, r2, r3
 8101ffa:	687b      	ldr	r3, [r7, #4]
 8101ffc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8101ffe:	687b      	ldr	r3, [r7, #4]
 8102000:	681b      	ldr	r3, [r3, #0]
 8102002:	430a      	orrs	r2, r1
 8102004:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8102006:	687b      	ldr	r3, [r7, #4]
 8102008:	685b      	ldr	r3, [r3, #4]
 810200a:	2b00      	cmp	r3, #0
 810200c:	d113      	bne.n	8102036 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 810200e:	687b      	ldr	r3, [r7, #4]
 8102010:	681b      	ldr	r3, [r3, #0]
 8102012:	689b      	ldr	r3, [r3, #8]
 8102014:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8102018:	687b      	ldr	r3, [r7, #4]
 810201a:	681b      	ldr	r3, [r3, #0]
 810201c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8102020:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8102022:	687b      	ldr	r3, [r7, #4]
 8102024:	681b      	ldr	r3, [r3, #0]
 8102026:	689b      	ldr	r3, [r3, #8]
 8102028:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 810202c:	687b      	ldr	r3, [r7, #4]
 810202e:	681b      	ldr	r3, [r3, #0]
 8102030:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8102034:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8102036:	687b      	ldr	r3, [r7, #4]
 8102038:	681b      	ldr	r3, [r3, #0]
 810203a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 810203c:	687b      	ldr	r3, [r7, #4]
 810203e:	681b      	ldr	r3, [r3, #0]
 8102040:	f022 0201 	bic.w	r2, r2, #1
 8102044:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8102046:	687b      	ldr	r3, [r7, #4]
 8102048:	685b      	ldr	r3, [r3, #4]
 810204a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 810204e:	2b00      	cmp	r3, #0
 8102050:	d00a      	beq.n	8102068 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8102052:	687b      	ldr	r3, [r7, #4]
 8102054:	681b      	ldr	r3, [r3, #0]
 8102056:	68db      	ldr	r3, [r3, #12]
 8102058:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 810205c:	687b      	ldr	r3, [r7, #4]
 810205e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8102060:	687b      	ldr	r3, [r7, #4]
 8102062:	681b      	ldr	r3, [r3, #0]
 8102064:	430a      	orrs	r2, r1
 8102066:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8102068:	687b      	ldr	r3, [r7, #4]
 810206a:	2200      	movs	r2, #0
 810206c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8102070:	687b      	ldr	r3, [r7, #4]
 8102072:	2201      	movs	r2, #1
 8102074:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8102078:	2300      	movs	r3, #0
}
 810207a:	4618      	mov	r0, r3
 810207c:	3710      	adds	r7, #16
 810207e:	46bd      	mov	sp, r7
 8102080:	bd80      	pop	{r7, pc}
 8102082:	bf00      	nop
 8102084:	40013000 	.word	0x40013000
 8102088:	40003800 	.word	0x40003800
 810208c:	40003c00 	.word	0x40003c00

08102090 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8102090:	b580      	push	{r7, lr}
 8102092:	b088      	sub	sp, #32
 8102094:	af02      	add	r7, sp, #8
 8102096:	60f8      	str	r0, [r7, #12]
 8102098:	60b9      	str	r1, [r7, #8]
 810209a:	603b      	str	r3, [r7, #0]
 810209c:	4613      	mov	r3, r2
 810209e:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 81020a0:	68fb      	ldr	r3, [r7, #12]
 81020a2:	681b      	ldr	r3, [r3, #0]
 81020a4:	3320      	adds	r3, #32
 81020a6:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 81020a8:	f7ff f996 	bl	81013d8 <HAL_GetTick>
 81020ac:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 81020ae:	68fb      	ldr	r3, [r7, #12]
 81020b0:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 81020b4:	b2db      	uxtb	r3, r3
 81020b6:	2b01      	cmp	r3, #1
 81020b8:	d001      	beq.n	81020be <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 81020ba:	2302      	movs	r3, #2
 81020bc:	e1cf      	b.n	810245e <HAL_SPI_Transmit+0x3ce>
  }

  if ((pData == NULL) || (Size == 0UL))
 81020be:	68bb      	ldr	r3, [r7, #8]
 81020c0:	2b00      	cmp	r3, #0
 81020c2:	d002      	beq.n	81020ca <HAL_SPI_Transmit+0x3a>
 81020c4:	88fb      	ldrh	r3, [r7, #6]
 81020c6:	2b00      	cmp	r3, #0
 81020c8:	d101      	bne.n	81020ce <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 81020ca:	2301      	movs	r3, #1
 81020cc:	e1c7      	b.n	810245e <HAL_SPI_Transmit+0x3ce>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 81020ce:	68fb      	ldr	r3, [r7, #12]
 81020d0:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 81020d4:	2b01      	cmp	r3, #1
 81020d6:	d101      	bne.n	81020dc <HAL_SPI_Transmit+0x4c>
 81020d8:	2302      	movs	r3, #2
 81020da:	e1c0      	b.n	810245e <HAL_SPI_Transmit+0x3ce>
 81020dc:	68fb      	ldr	r3, [r7, #12]
 81020de:	2201      	movs	r2, #1
 81020e0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 81020e4:	68fb      	ldr	r3, [r7, #12]
 81020e6:	2203      	movs	r2, #3
 81020e8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 81020ec:	68fb      	ldr	r3, [r7, #12]
 81020ee:	2200      	movs	r2, #0
 81020f0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 81020f4:	68fb      	ldr	r3, [r7, #12]
 81020f6:	68ba      	ldr	r2, [r7, #8]
 81020f8:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 81020fa:	68fb      	ldr	r3, [r7, #12]
 81020fc:	88fa      	ldrh	r2, [r7, #6]
 81020fe:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 8102102:	68fb      	ldr	r3, [r7, #12]
 8102104:	88fa      	ldrh	r2, [r7, #6]
 8102106:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 810210a:	68fb      	ldr	r3, [r7, #12]
 810210c:	2200      	movs	r2, #0
 810210e:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8102110:	68fb      	ldr	r3, [r7, #12]
 8102112:	2200      	movs	r2, #0
 8102114:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8102118:	68fb      	ldr	r3, [r7, #12]
 810211a:	2200      	movs	r2, #0
 810211c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 8102120:	68fb      	ldr	r3, [r7, #12]
 8102122:	2200      	movs	r2, #0
 8102124:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 8102126:	68fb      	ldr	r3, [r7, #12]
 8102128:	2200      	movs	r2, #0
 810212a:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 810212c:	68fb      	ldr	r3, [r7, #12]
 810212e:	689b      	ldr	r3, [r3, #8]
 8102130:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8102134:	d108      	bne.n	8102148 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 8102136:	68fb      	ldr	r3, [r7, #12]
 8102138:	681b      	ldr	r3, [r3, #0]
 810213a:	681a      	ldr	r2, [r3, #0]
 810213c:	68fb      	ldr	r3, [r7, #12]
 810213e:	681b      	ldr	r3, [r3, #0]
 8102140:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8102144:	601a      	str	r2, [r3, #0]
 8102146:	e009      	b.n	810215c <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8102148:	68fb      	ldr	r3, [r7, #12]
 810214a:	681b      	ldr	r3, [r3, #0]
 810214c:	68db      	ldr	r3, [r3, #12]
 810214e:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8102152:	68fb      	ldr	r3, [r7, #12]
 8102154:	681b      	ldr	r3, [r3, #0]
 8102156:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 810215a:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 810215c:	68fb      	ldr	r3, [r7, #12]
 810215e:	681b      	ldr	r3, [r3, #0]
 8102160:	685b      	ldr	r3, [r3, #4]
 8102162:	0c1b      	lsrs	r3, r3, #16
 8102164:	041b      	lsls	r3, r3, #16
 8102166:	88f9      	ldrh	r1, [r7, #6]
 8102168:	68fa      	ldr	r2, [r7, #12]
 810216a:	6812      	ldr	r2, [r2, #0]
 810216c:	430b      	orrs	r3, r1
 810216e:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8102170:	68fb      	ldr	r3, [r7, #12]
 8102172:	681b      	ldr	r3, [r3, #0]
 8102174:	681a      	ldr	r2, [r3, #0]
 8102176:	68fb      	ldr	r3, [r7, #12]
 8102178:	681b      	ldr	r3, [r3, #0]
 810217a:	f042 0201 	orr.w	r2, r2, #1
 810217e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8102180:	68fb      	ldr	r3, [r7, #12]
 8102182:	685b      	ldr	r3, [r3, #4]
 8102184:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8102188:	d107      	bne.n	810219a <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 810218a:	68fb      	ldr	r3, [r7, #12]
 810218c:	681b      	ldr	r3, [r3, #0]
 810218e:	681a      	ldr	r2, [r3, #0]
 8102190:	68fb      	ldr	r3, [r7, #12]
 8102192:	681b      	ldr	r3, [r3, #0]
 8102194:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8102198:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 810219a:	68fb      	ldr	r3, [r7, #12]
 810219c:	68db      	ldr	r3, [r3, #12]
 810219e:	2b0f      	cmp	r3, #15
 81021a0:	d947      	bls.n	8102232 <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 81021a2:	e03f      	b.n	8102224 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 81021a4:	68fb      	ldr	r3, [r7, #12]
 81021a6:	681b      	ldr	r3, [r3, #0]
 81021a8:	695b      	ldr	r3, [r3, #20]
 81021aa:	f003 0302 	and.w	r3, r3, #2
 81021ae:	2b02      	cmp	r3, #2
 81021b0:	d114      	bne.n	81021dc <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 81021b2:	68fb      	ldr	r3, [r7, #12]
 81021b4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 81021b6:	68fb      	ldr	r3, [r7, #12]
 81021b8:	681b      	ldr	r3, [r3, #0]
 81021ba:	6812      	ldr	r2, [r2, #0]
 81021bc:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 81021be:	68fb      	ldr	r3, [r7, #12]
 81021c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 81021c2:	1d1a      	adds	r2, r3, #4
 81021c4:	68fb      	ldr	r3, [r7, #12]
 81021c6:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 81021c8:	68fb      	ldr	r3, [r7, #12]
 81021ca:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 81021ce:	b29b      	uxth	r3, r3
 81021d0:	3b01      	subs	r3, #1
 81021d2:	b29a      	uxth	r2, r3
 81021d4:	68fb      	ldr	r3, [r7, #12]
 81021d6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 81021da:	e023      	b.n	8102224 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 81021dc:	f7ff f8fc 	bl	81013d8 <HAL_GetTick>
 81021e0:	4602      	mov	r2, r0
 81021e2:	693b      	ldr	r3, [r7, #16]
 81021e4:	1ad3      	subs	r3, r2, r3
 81021e6:	683a      	ldr	r2, [r7, #0]
 81021e8:	429a      	cmp	r2, r3
 81021ea:	d803      	bhi.n	81021f4 <HAL_SPI_Transmit+0x164>
 81021ec:	683b      	ldr	r3, [r7, #0]
 81021ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 81021f2:	d102      	bne.n	81021fa <HAL_SPI_Transmit+0x16a>
 81021f4:	683b      	ldr	r3, [r7, #0]
 81021f6:	2b00      	cmp	r3, #0
 81021f8:	d114      	bne.n	8102224 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 81021fa:	68f8      	ldr	r0, [r7, #12]
 81021fc:	f000 fedc 	bl	8102fb8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8102200:	68fb      	ldr	r3, [r7, #12]
 8102202:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8102206:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 810220a:	68fb      	ldr	r3, [r7, #12]
 810220c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8102210:	68fb      	ldr	r3, [r7, #12]
 8102212:	2201      	movs	r2, #1
 8102214:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8102218:	68fb      	ldr	r3, [r7, #12]
 810221a:	2200      	movs	r2, #0
 810221c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8102220:	2303      	movs	r3, #3
 8102222:	e11c      	b.n	810245e <HAL_SPI_Transmit+0x3ce>
    while (hspi->TxXferCount > 0UL)
 8102224:	68fb      	ldr	r3, [r7, #12]
 8102226:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 810222a:	b29b      	uxth	r3, r3
 810222c:	2b00      	cmp	r3, #0
 810222e:	d1b9      	bne.n	81021a4 <HAL_SPI_Transmit+0x114>
 8102230:	e0ef      	b.n	8102412 <HAL_SPI_Transmit+0x382>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8102232:	68fb      	ldr	r3, [r7, #12]
 8102234:	68db      	ldr	r3, [r3, #12]
 8102236:	2b07      	cmp	r3, #7
 8102238:	f240 80e4 	bls.w	8102404 <HAL_SPI_Transmit+0x374>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 810223c:	e05d      	b.n	81022fa <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 810223e:	68fb      	ldr	r3, [r7, #12]
 8102240:	681b      	ldr	r3, [r3, #0]
 8102242:	695b      	ldr	r3, [r3, #20]
 8102244:	f003 0302 	and.w	r3, r3, #2
 8102248:	2b02      	cmp	r3, #2
 810224a:	d132      	bne.n	81022b2 <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 810224c:	68fb      	ldr	r3, [r7, #12]
 810224e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8102252:	b29b      	uxth	r3, r3
 8102254:	2b01      	cmp	r3, #1
 8102256:	d918      	bls.n	810228a <HAL_SPI_Transmit+0x1fa>
 8102258:	68fb      	ldr	r3, [r7, #12]
 810225a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810225c:	2b00      	cmp	r3, #0
 810225e:	d014      	beq.n	810228a <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8102260:	68fb      	ldr	r3, [r7, #12]
 8102262:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8102264:	68fb      	ldr	r3, [r7, #12]
 8102266:	681b      	ldr	r3, [r3, #0]
 8102268:	6812      	ldr	r2, [r2, #0]
 810226a:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 810226c:	68fb      	ldr	r3, [r7, #12]
 810226e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8102270:	1d1a      	adds	r2, r3, #4
 8102272:	68fb      	ldr	r3, [r7, #12]
 8102274:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8102276:	68fb      	ldr	r3, [r7, #12]
 8102278:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 810227c:	b29b      	uxth	r3, r3
 810227e:	3b02      	subs	r3, #2
 8102280:	b29a      	uxth	r2, r3
 8102282:	68fb      	ldr	r3, [r7, #12]
 8102284:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8102288:	e037      	b.n	81022fa <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 810228a:	68fb      	ldr	r3, [r7, #12]
 810228c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 810228e:	881a      	ldrh	r2, [r3, #0]
 8102290:	697b      	ldr	r3, [r7, #20]
 8102292:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8102294:	68fb      	ldr	r3, [r7, #12]
 8102296:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8102298:	1c9a      	adds	r2, r3, #2
 810229a:	68fb      	ldr	r3, [r7, #12]
 810229c:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 810229e:	68fb      	ldr	r3, [r7, #12]
 81022a0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 81022a4:	b29b      	uxth	r3, r3
 81022a6:	3b01      	subs	r3, #1
 81022a8:	b29a      	uxth	r2, r3
 81022aa:	68fb      	ldr	r3, [r7, #12]
 81022ac:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 81022b0:	e023      	b.n	81022fa <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 81022b2:	f7ff f891 	bl	81013d8 <HAL_GetTick>
 81022b6:	4602      	mov	r2, r0
 81022b8:	693b      	ldr	r3, [r7, #16]
 81022ba:	1ad3      	subs	r3, r2, r3
 81022bc:	683a      	ldr	r2, [r7, #0]
 81022be:	429a      	cmp	r2, r3
 81022c0:	d803      	bhi.n	81022ca <HAL_SPI_Transmit+0x23a>
 81022c2:	683b      	ldr	r3, [r7, #0]
 81022c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 81022c8:	d102      	bne.n	81022d0 <HAL_SPI_Transmit+0x240>
 81022ca:	683b      	ldr	r3, [r7, #0]
 81022cc:	2b00      	cmp	r3, #0
 81022ce:	d114      	bne.n	81022fa <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 81022d0:	68f8      	ldr	r0, [r7, #12]
 81022d2:	f000 fe71 	bl	8102fb8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 81022d6:	68fb      	ldr	r3, [r7, #12]
 81022d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 81022dc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 81022e0:	68fb      	ldr	r3, [r7, #12]
 81022e2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 81022e6:	68fb      	ldr	r3, [r7, #12]
 81022e8:	2201      	movs	r2, #1
 81022ea:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 81022ee:	68fb      	ldr	r3, [r7, #12]
 81022f0:	2200      	movs	r2, #0
 81022f2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 81022f6:	2303      	movs	r3, #3
 81022f8:	e0b1      	b.n	810245e <HAL_SPI_Transmit+0x3ce>
    while (hspi->TxXferCount > 0UL)
 81022fa:	68fb      	ldr	r3, [r7, #12]
 81022fc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8102300:	b29b      	uxth	r3, r3
 8102302:	2b00      	cmp	r3, #0
 8102304:	d19b      	bne.n	810223e <HAL_SPI_Transmit+0x1ae>
 8102306:	e084      	b.n	8102412 <HAL_SPI_Transmit+0x382>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8102308:	68fb      	ldr	r3, [r7, #12]
 810230a:	681b      	ldr	r3, [r3, #0]
 810230c:	695b      	ldr	r3, [r3, #20]
 810230e:	f003 0302 	and.w	r3, r3, #2
 8102312:	2b02      	cmp	r3, #2
 8102314:	d152      	bne.n	81023bc <HAL_SPI_Transmit+0x32c>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8102316:	68fb      	ldr	r3, [r7, #12]
 8102318:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 810231c:	b29b      	uxth	r3, r3
 810231e:	2b03      	cmp	r3, #3
 8102320:	d918      	bls.n	8102354 <HAL_SPI_Transmit+0x2c4>
 8102322:	68fb      	ldr	r3, [r7, #12]
 8102324:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8102326:	2b40      	cmp	r3, #64	@ 0x40
 8102328:	d914      	bls.n	8102354 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 810232a:	68fb      	ldr	r3, [r7, #12]
 810232c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 810232e:	68fb      	ldr	r3, [r7, #12]
 8102330:	681b      	ldr	r3, [r3, #0]
 8102332:	6812      	ldr	r2, [r2, #0]
 8102334:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8102336:	68fb      	ldr	r3, [r7, #12]
 8102338:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 810233a:	1d1a      	adds	r2, r3, #4
 810233c:	68fb      	ldr	r3, [r7, #12]
 810233e:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8102340:	68fb      	ldr	r3, [r7, #12]
 8102342:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8102346:	b29b      	uxth	r3, r3
 8102348:	3b04      	subs	r3, #4
 810234a:	b29a      	uxth	r2, r3
 810234c:	68fb      	ldr	r3, [r7, #12]
 810234e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8102352:	e057      	b.n	8102404 <HAL_SPI_Transmit+0x374>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8102354:	68fb      	ldr	r3, [r7, #12]
 8102356:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 810235a:	b29b      	uxth	r3, r3
 810235c:	2b01      	cmp	r3, #1
 810235e:	d917      	bls.n	8102390 <HAL_SPI_Transmit+0x300>
 8102360:	68fb      	ldr	r3, [r7, #12]
 8102362:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8102364:	2b00      	cmp	r3, #0
 8102366:	d013      	beq.n	8102390 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8102368:	68fb      	ldr	r3, [r7, #12]
 810236a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 810236c:	881a      	ldrh	r2, [r3, #0]
 810236e:	697b      	ldr	r3, [r7, #20]
 8102370:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8102372:	68fb      	ldr	r3, [r7, #12]
 8102374:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8102376:	1c9a      	adds	r2, r3, #2
 8102378:	68fb      	ldr	r3, [r7, #12]
 810237a:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 810237c:	68fb      	ldr	r3, [r7, #12]
 810237e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8102382:	b29b      	uxth	r3, r3
 8102384:	3b02      	subs	r3, #2
 8102386:	b29a      	uxth	r2, r3
 8102388:	68fb      	ldr	r3, [r7, #12]
 810238a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 810238e:	e039      	b.n	8102404 <HAL_SPI_Transmit+0x374>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8102390:	68fb      	ldr	r3, [r7, #12]
 8102392:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8102394:	68fb      	ldr	r3, [r7, #12]
 8102396:	681b      	ldr	r3, [r3, #0]
 8102398:	3320      	adds	r3, #32
 810239a:	7812      	ldrb	r2, [r2, #0]
 810239c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 810239e:	68fb      	ldr	r3, [r7, #12]
 81023a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 81023a2:	1c5a      	adds	r2, r3, #1
 81023a4:	68fb      	ldr	r3, [r7, #12]
 81023a6:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 81023a8:	68fb      	ldr	r3, [r7, #12]
 81023aa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 81023ae:	b29b      	uxth	r3, r3
 81023b0:	3b01      	subs	r3, #1
 81023b2:	b29a      	uxth	r2, r3
 81023b4:	68fb      	ldr	r3, [r7, #12]
 81023b6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 81023ba:	e023      	b.n	8102404 <HAL_SPI_Transmit+0x374>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 81023bc:	f7ff f80c 	bl	81013d8 <HAL_GetTick>
 81023c0:	4602      	mov	r2, r0
 81023c2:	693b      	ldr	r3, [r7, #16]
 81023c4:	1ad3      	subs	r3, r2, r3
 81023c6:	683a      	ldr	r2, [r7, #0]
 81023c8:	429a      	cmp	r2, r3
 81023ca:	d803      	bhi.n	81023d4 <HAL_SPI_Transmit+0x344>
 81023cc:	683b      	ldr	r3, [r7, #0]
 81023ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 81023d2:	d102      	bne.n	81023da <HAL_SPI_Transmit+0x34a>
 81023d4:	683b      	ldr	r3, [r7, #0]
 81023d6:	2b00      	cmp	r3, #0
 81023d8:	d114      	bne.n	8102404 <HAL_SPI_Transmit+0x374>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 81023da:	68f8      	ldr	r0, [r7, #12]
 81023dc:	f000 fdec 	bl	8102fb8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 81023e0:	68fb      	ldr	r3, [r7, #12]
 81023e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 81023e6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 81023ea:	68fb      	ldr	r3, [r7, #12]
 81023ec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 81023f0:	68fb      	ldr	r3, [r7, #12]
 81023f2:	2201      	movs	r2, #1
 81023f4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 81023f8:	68fb      	ldr	r3, [r7, #12]
 81023fa:	2200      	movs	r2, #0
 81023fc:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8102400:	2303      	movs	r3, #3
 8102402:	e02c      	b.n	810245e <HAL_SPI_Transmit+0x3ce>
    while (hspi->TxXferCount > 0UL)
 8102404:	68fb      	ldr	r3, [r7, #12]
 8102406:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 810240a:	b29b      	uxth	r3, r3
 810240c:	2b00      	cmp	r3, #0
 810240e:	f47f af7b 	bne.w	8102308 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8102412:	693b      	ldr	r3, [r7, #16]
 8102414:	9300      	str	r3, [sp, #0]
 8102416:	683b      	ldr	r3, [r7, #0]
 8102418:	2200      	movs	r2, #0
 810241a:	2108      	movs	r1, #8
 810241c:	68f8      	ldr	r0, [r7, #12]
 810241e:	f000 fe6b 	bl	81030f8 <SPI_WaitOnFlagUntilTimeout>
 8102422:	4603      	mov	r3, r0
 8102424:	2b00      	cmp	r3, #0
 8102426:	d007      	beq.n	8102438 <HAL_SPI_Transmit+0x3a8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8102428:	68fb      	ldr	r3, [r7, #12]
 810242a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 810242e:	f043 0220 	orr.w	r2, r3, #32
 8102432:	68fb      	ldr	r3, [r7, #12]
 8102434:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8102438:	68f8      	ldr	r0, [r7, #12]
 810243a:	f000 fdbd 	bl	8102fb8 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 810243e:	68fb      	ldr	r3, [r7, #12]
 8102440:	2201      	movs	r2, #1
 8102442:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8102446:	68fb      	ldr	r3, [r7, #12]
 8102448:	2200      	movs	r2, #0
 810244a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 810244e:	68fb      	ldr	r3, [r7, #12]
 8102450:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8102454:	2b00      	cmp	r3, #0
 8102456:	d001      	beq.n	810245c <HAL_SPI_Transmit+0x3cc>
  {
    return HAL_ERROR;
 8102458:	2301      	movs	r3, #1
 810245a:	e000      	b.n	810245e <HAL_SPI_Transmit+0x3ce>
  }
  else
  {
    return HAL_OK;
 810245c:	2300      	movs	r3, #0
  }
}
 810245e:	4618      	mov	r0, r3
 8102460:	3718      	adds	r7, #24
 8102462:	46bd      	mov	sp, r7
 8102464:	bd80      	pop	{r7, pc}

08102466 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8102466:	b580      	push	{r7, lr}
 8102468:	b088      	sub	sp, #32
 810246a:	af00      	add	r7, sp, #0
 810246c:	60f8      	str	r0, [r7, #12]
 810246e:	60b9      	str	r1, [r7, #8]
 8102470:	603b      	str	r3, [r7, #0]
 8102472:	4613      	mov	r3, r2
 8102474:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 8102476:	68fb      	ldr	r3, [r7, #12]
 8102478:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810247a:	095b      	lsrs	r3, r3, #5
 810247c:	b29b      	uxth	r3, r3
 810247e:	3301      	adds	r3, #1
 8102480:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8102482:	68fb      	ldr	r3, [r7, #12]
 8102484:	681b      	ldr	r3, [r3, #0]
 8102486:	3330      	adds	r3, #48	@ 0x30
 8102488:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 810248a:	f7fe ffa5 	bl	81013d8 <HAL_GetTick>
 810248e:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8102490:	68fb      	ldr	r3, [r7, #12]
 8102492:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8102496:	b2db      	uxtb	r3, r3
 8102498:	2b01      	cmp	r3, #1
 810249a:	d001      	beq.n	81024a0 <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 810249c:	2302      	movs	r3, #2
 810249e:	e24e      	b.n	810293e <HAL_SPI_Receive+0x4d8>
  }

  if ((pData == NULL) || (Size == 0UL))
 81024a0:	68bb      	ldr	r3, [r7, #8]
 81024a2:	2b00      	cmp	r3, #0
 81024a4:	d002      	beq.n	81024ac <HAL_SPI_Receive+0x46>
 81024a6:	88fb      	ldrh	r3, [r7, #6]
 81024a8:	2b00      	cmp	r3, #0
 81024aa:	d101      	bne.n	81024b0 <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 81024ac:	2301      	movs	r3, #1
 81024ae:	e246      	b.n	810293e <HAL_SPI_Receive+0x4d8>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 81024b0:	68fb      	ldr	r3, [r7, #12]
 81024b2:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 81024b6:	2b01      	cmp	r3, #1
 81024b8:	d101      	bne.n	81024be <HAL_SPI_Receive+0x58>
 81024ba:	2302      	movs	r3, #2
 81024bc:	e23f      	b.n	810293e <HAL_SPI_Receive+0x4d8>
 81024be:	68fb      	ldr	r3, [r7, #12]
 81024c0:	2201      	movs	r2, #1
 81024c2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 81024c6:	68fb      	ldr	r3, [r7, #12]
 81024c8:	2204      	movs	r2, #4
 81024ca:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 81024ce:	68fb      	ldr	r3, [r7, #12]
 81024d0:	2200      	movs	r2, #0
 81024d2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 81024d6:	68fb      	ldr	r3, [r7, #12]
 81024d8:	68ba      	ldr	r2, [r7, #8]
 81024da:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 81024dc:	68fb      	ldr	r3, [r7, #12]
 81024de:	88fa      	ldrh	r2, [r7, #6]
 81024e0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 81024e4:	68fb      	ldr	r3, [r7, #12]
 81024e6:	88fa      	ldrh	r2, [r7, #6]
 81024e8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 81024ec:	68fb      	ldr	r3, [r7, #12]
 81024ee:	2200      	movs	r2, #0
 81024f0:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 81024f2:	68fb      	ldr	r3, [r7, #12]
 81024f4:	2200      	movs	r2, #0
 81024f6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 81024fa:	68fb      	ldr	r3, [r7, #12]
 81024fc:	2200      	movs	r2, #0
 81024fe:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 8102502:	68fb      	ldr	r3, [r7, #12]
 8102504:	2200      	movs	r2, #0
 8102506:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 8102508:	68fb      	ldr	r3, [r7, #12]
 810250a:	2200      	movs	r2, #0
 810250c:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 810250e:	68fb      	ldr	r3, [r7, #12]
 8102510:	689b      	ldr	r3, [r3, #8]
 8102512:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8102516:	d108      	bne.n	810252a <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 8102518:	68fb      	ldr	r3, [r7, #12]
 810251a:	681b      	ldr	r3, [r3, #0]
 810251c:	681a      	ldr	r2, [r3, #0]
 810251e:	68fb      	ldr	r3, [r7, #12]
 8102520:	681b      	ldr	r3, [r3, #0]
 8102522:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8102526:	601a      	str	r2, [r3, #0]
 8102528:	e009      	b.n	810253e <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 810252a:	68fb      	ldr	r3, [r7, #12]
 810252c:	681b      	ldr	r3, [r3, #0]
 810252e:	68db      	ldr	r3, [r3, #12]
 8102530:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8102534:	68fb      	ldr	r3, [r7, #12]
 8102536:	681b      	ldr	r3, [r3, #0]
 8102538:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 810253c:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 810253e:	68fb      	ldr	r3, [r7, #12]
 8102540:	681b      	ldr	r3, [r3, #0]
 8102542:	685b      	ldr	r3, [r3, #4]
 8102544:	0c1b      	lsrs	r3, r3, #16
 8102546:	041b      	lsls	r3, r3, #16
 8102548:	88f9      	ldrh	r1, [r7, #6]
 810254a:	68fa      	ldr	r2, [r7, #12]
 810254c:	6812      	ldr	r2, [r2, #0]
 810254e:	430b      	orrs	r3, r1
 8102550:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8102552:	68fb      	ldr	r3, [r7, #12]
 8102554:	681b      	ldr	r3, [r3, #0]
 8102556:	681a      	ldr	r2, [r3, #0]
 8102558:	68fb      	ldr	r3, [r7, #12]
 810255a:	681b      	ldr	r3, [r3, #0]
 810255c:	f042 0201 	orr.w	r2, r2, #1
 8102560:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8102562:	68fb      	ldr	r3, [r7, #12]
 8102564:	685b      	ldr	r3, [r3, #4]
 8102566:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 810256a:	d107      	bne.n	810257c <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 810256c:	68fb      	ldr	r3, [r7, #12]
 810256e:	681b      	ldr	r3, [r3, #0]
 8102570:	681a      	ldr	r2, [r3, #0]
 8102572:	68fb      	ldr	r3, [r7, #12]
 8102574:	681b      	ldr	r3, [r3, #0]
 8102576:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 810257a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 810257c:	68fb      	ldr	r3, [r7, #12]
 810257e:	68db      	ldr	r3, [r3, #12]
 8102580:	2b0f      	cmp	r3, #15
 8102582:	d96c      	bls.n	810265e <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8102584:	e064      	b.n	8102650 <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8102586:	68fb      	ldr	r3, [r7, #12]
 8102588:	681b      	ldr	r3, [r3, #0]
 810258a:	695b      	ldr	r3, [r3, #20]
 810258c:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 810258e:	68fb      	ldr	r3, [r7, #12]
 8102590:	681b      	ldr	r3, [r3, #0]
 8102592:	695b      	ldr	r3, [r3, #20]
 8102594:	f003 0301 	and.w	r3, r3, #1
 8102598:	2b01      	cmp	r3, #1
 810259a:	d114      	bne.n	81025c6 <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 810259c:	68fb      	ldr	r3, [r7, #12]
 810259e:	681a      	ldr	r2, [r3, #0]
 81025a0:	68fb      	ldr	r3, [r7, #12]
 81025a2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 81025a4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 81025a6:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 81025a8:	68fb      	ldr	r3, [r7, #12]
 81025aa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 81025ac:	1d1a      	adds	r2, r3, #4
 81025ae:	68fb      	ldr	r3, [r7, #12]
 81025b0:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 81025b2:	68fb      	ldr	r3, [r7, #12]
 81025b4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 81025b8:	b29b      	uxth	r3, r3
 81025ba:	3b01      	subs	r3, #1
 81025bc:	b29a      	uxth	r2, r3
 81025be:	68fb      	ldr	r3, [r7, #12]
 81025c0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 81025c4:	e044      	b.n	8102650 <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 81025c6:	68fb      	ldr	r3, [r7, #12]
 81025c8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 81025cc:	b29b      	uxth	r3, r3
 81025ce:	8bfa      	ldrh	r2, [r7, #30]
 81025d0:	429a      	cmp	r2, r3
 81025d2:	d919      	bls.n	8102608 <HAL_SPI_Receive+0x1a2>
 81025d4:	693b      	ldr	r3, [r7, #16]
 81025d6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 81025da:	2b00      	cmp	r3, #0
 81025dc:	d014      	beq.n	8102608 <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 81025de:	68fb      	ldr	r3, [r7, #12]
 81025e0:	681a      	ldr	r2, [r3, #0]
 81025e2:	68fb      	ldr	r3, [r7, #12]
 81025e4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 81025e6:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 81025e8:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 81025ea:	68fb      	ldr	r3, [r7, #12]
 81025ec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 81025ee:	1d1a      	adds	r2, r3, #4
 81025f0:	68fb      	ldr	r3, [r7, #12]
 81025f2:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 81025f4:	68fb      	ldr	r3, [r7, #12]
 81025f6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 81025fa:	b29b      	uxth	r3, r3
 81025fc:	3b01      	subs	r3, #1
 81025fe:	b29a      	uxth	r2, r3
 8102600:	68fb      	ldr	r3, [r7, #12]
 8102602:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8102606:	e023      	b.n	8102650 <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8102608:	f7fe fee6 	bl	81013d8 <HAL_GetTick>
 810260c:	4602      	mov	r2, r0
 810260e:	697b      	ldr	r3, [r7, #20]
 8102610:	1ad3      	subs	r3, r2, r3
 8102612:	683a      	ldr	r2, [r7, #0]
 8102614:	429a      	cmp	r2, r3
 8102616:	d803      	bhi.n	8102620 <HAL_SPI_Receive+0x1ba>
 8102618:	683b      	ldr	r3, [r7, #0]
 810261a:	f1b3 3fff 	cmp.w	r3, #4294967295
 810261e:	d102      	bne.n	8102626 <HAL_SPI_Receive+0x1c0>
 8102620:	683b      	ldr	r3, [r7, #0]
 8102622:	2b00      	cmp	r3, #0
 8102624:	d114      	bne.n	8102650 <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8102626:	68f8      	ldr	r0, [r7, #12]
 8102628:	f000 fcc6 	bl	8102fb8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 810262c:	68fb      	ldr	r3, [r7, #12]
 810262e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8102632:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8102636:	68fb      	ldr	r3, [r7, #12]
 8102638:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 810263c:	68fb      	ldr	r3, [r7, #12]
 810263e:	2201      	movs	r2, #1
 8102640:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8102644:	68fb      	ldr	r3, [r7, #12]
 8102646:	2200      	movs	r2, #0
 8102648:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 810264c:	2303      	movs	r3, #3
 810264e:	e176      	b.n	810293e <HAL_SPI_Receive+0x4d8>
    while (hspi->RxXferCount > 0UL)
 8102650:	68fb      	ldr	r3, [r7, #12]
 8102652:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8102656:	b29b      	uxth	r3, r3
 8102658:	2b00      	cmp	r3, #0
 810265a:	d194      	bne.n	8102586 <HAL_SPI_Receive+0x120>
 810265c:	e15c      	b.n	8102918 <HAL_SPI_Receive+0x4b2>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 810265e:	68fb      	ldr	r3, [r7, #12]
 8102660:	68db      	ldr	r3, [r3, #12]
 8102662:	2b07      	cmp	r3, #7
 8102664:	f240 8151 	bls.w	810290a <HAL_SPI_Receive+0x4a4>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8102668:	e08f      	b.n	810278a <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 810266a:	68fb      	ldr	r3, [r7, #12]
 810266c:	681b      	ldr	r3, [r3, #0]
 810266e:	695b      	ldr	r3, [r3, #20]
 8102670:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8102672:	68fb      	ldr	r3, [r7, #12]
 8102674:	681b      	ldr	r3, [r3, #0]
 8102676:	695b      	ldr	r3, [r3, #20]
 8102678:	f003 0301 	and.w	r3, r3, #1
 810267c:	2b01      	cmp	r3, #1
 810267e:	d114      	bne.n	81026aa <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8102680:	68fb      	ldr	r3, [r7, #12]
 8102682:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8102684:	69ba      	ldr	r2, [r7, #24]
 8102686:	8812      	ldrh	r2, [r2, #0]
 8102688:	b292      	uxth	r2, r2
 810268a:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 810268c:	68fb      	ldr	r3, [r7, #12]
 810268e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8102690:	1c9a      	adds	r2, r3, #2
 8102692:	68fb      	ldr	r3, [r7, #12]
 8102694:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8102696:	68fb      	ldr	r3, [r7, #12]
 8102698:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 810269c:	b29b      	uxth	r3, r3
 810269e:	3b01      	subs	r3, #1
 81026a0:	b29a      	uxth	r2, r3
 81026a2:	68fb      	ldr	r3, [r7, #12]
 81026a4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 81026a8:	e06f      	b.n	810278a <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 81026aa:	68fb      	ldr	r3, [r7, #12]
 81026ac:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 81026b0:	b29b      	uxth	r3, r3
 81026b2:	8bfa      	ldrh	r2, [r7, #30]
 81026b4:	429a      	cmp	r2, r3
 81026b6:	d924      	bls.n	8102702 <HAL_SPI_Receive+0x29c>
 81026b8:	693b      	ldr	r3, [r7, #16]
 81026ba:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 81026be:	2b00      	cmp	r3, #0
 81026c0:	d01f      	beq.n	8102702 <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 81026c2:	68fb      	ldr	r3, [r7, #12]
 81026c4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 81026c6:	69ba      	ldr	r2, [r7, #24]
 81026c8:	8812      	ldrh	r2, [r2, #0]
 81026ca:	b292      	uxth	r2, r2
 81026cc:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 81026ce:	68fb      	ldr	r3, [r7, #12]
 81026d0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 81026d2:	1c9a      	adds	r2, r3, #2
 81026d4:	68fb      	ldr	r3, [r7, #12]
 81026d6:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 81026d8:	68fb      	ldr	r3, [r7, #12]
 81026da:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 81026dc:	69ba      	ldr	r2, [r7, #24]
 81026de:	8812      	ldrh	r2, [r2, #0]
 81026e0:	b292      	uxth	r2, r2
 81026e2:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 81026e4:	68fb      	ldr	r3, [r7, #12]
 81026e6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 81026e8:	1c9a      	adds	r2, r3, #2
 81026ea:	68fb      	ldr	r3, [r7, #12]
 81026ec:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 81026ee:	68fb      	ldr	r3, [r7, #12]
 81026f0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 81026f4:	b29b      	uxth	r3, r3
 81026f6:	3b02      	subs	r3, #2
 81026f8:	b29a      	uxth	r2, r3
 81026fa:	68fb      	ldr	r3, [r7, #12]
 81026fc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8102700:	e043      	b.n	810278a <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 8102702:	68fb      	ldr	r3, [r7, #12]
 8102704:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8102708:	b29b      	uxth	r3, r3
 810270a:	2b01      	cmp	r3, #1
 810270c:	d119      	bne.n	8102742 <HAL_SPI_Receive+0x2dc>
 810270e:	693b      	ldr	r3, [r7, #16]
 8102710:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8102714:	2b00      	cmp	r3, #0
 8102716:	d014      	beq.n	8102742 <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8102718:	68fb      	ldr	r3, [r7, #12]
 810271a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 810271c:	69ba      	ldr	r2, [r7, #24]
 810271e:	8812      	ldrh	r2, [r2, #0]
 8102720:	b292      	uxth	r2, r2
 8102722:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8102724:	68fb      	ldr	r3, [r7, #12]
 8102726:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8102728:	1c9a      	adds	r2, r3, #2
 810272a:	68fb      	ldr	r3, [r7, #12]
 810272c:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 810272e:	68fb      	ldr	r3, [r7, #12]
 8102730:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8102734:	b29b      	uxth	r3, r3
 8102736:	3b01      	subs	r3, #1
 8102738:	b29a      	uxth	r2, r3
 810273a:	68fb      	ldr	r3, [r7, #12]
 810273c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8102740:	e023      	b.n	810278a <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8102742:	f7fe fe49 	bl	81013d8 <HAL_GetTick>
 8102746:	4602      	mov	r2, r0
 8102748:	697b      	ldr	r3, [r7, #20]
 810274a:	1ad3      	subs	r3, r2, r3
 810274c:	683a      	ldr	r2, [r7, #0]
 810274e:	429a      	cmp	r2, r3
 8102750:	d803      	bhi.n	810275a <HAL_SPI_Receive+0x2f4>
 8102752:	683b      	ldr	r3, [r7, #0]
 8102754:	f1b3 3fff 	cmp.w	r3, #4294967295
 8102758:	d102      	bne.n	8102760 <HAL_SPI_Receive+0x2fa>
 810275a:	683b      	ldr	r3, [r7, #0]
 810275c:	2b00      	cmp	r3, #0
 810275e:	d114      	bne.n	810278a <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8102760:	68f8      	ldr	r0, [r7, #12]
 8102762:	f000 fc29 	bl	8102fb8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8102766:	68fb      	ldr	r3, [r7, #12]
 8102768:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 810276c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8102770:	68fb      	ldr	r3, [r7, #12]
 8102772:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8102776:	68fb      	ldr	r3, [r7, #12]
 8102778:	2201      	movs	r2, #1
 810277a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 810277e:	68fb      	ldr	r3, [r7, #12]
 8102780:	2200      	movs	r2, #0
 8102782:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8102786:	2303      	movs	r3, #3
 8102788:	e0d9      	b.n	810293e <HAL_SPI_Receive+0x4d8>
    while (hspi->RxXferCount > 0UL)
 810278a:	68fb      	ldr	r3, [r7, #12]
 810278c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8102790:	b29b      	uxth	r3, r3
 8102792:	2b00      	cmp	r3, #0
 8102794:	f47f af69 	bne.w	810266a <HAL_SPI_Receive+0x204>
 8102798:	e0be      	b.n	8102918 <HAL_SPI_Receive+0x4b2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 810279a:	68fb      	ldr	r3, [r7, #12]
 810279c:	681b      	ldr	r3, [r3, #0]
 810279e:	695b      	ldr	r3, [r3, #20]
 81027a0:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 81027a2:	68fb      	ldr	r3, [r7, #12]
 81027a4:	681b      	ldr	r3, [r3, #0]
 81027a6:	695b      	ldr	r3, [r3, #20]
 81027a8:	f003 0301 	and.w	r3, r3, #1
 81027ac:	2b01      	cmp	r3, #1
 81027ae:	d117      	bne.n	81027e0 <HAL_SPI_Receive+0x37a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 81027b0:	68fb      	ldr	r3, [r7, #12]
 81027b2:	681b      	ldr	r3, [r3, #0]
 81027b4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 81027b8:	68fb      	ldr	r3, [r7, #12]
 81027ba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 81027bc:	7812      	ldrb	r2, [r2, #0]
 81027be:	b2d2      	uxtb	r2, r2
 81027c0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 81027c2:	68fb      	ldr	r3, [r7, #12]
 81027c4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 81027c6:	1c5a      	adds	r2, r3, #1
 81027c8:	68fb      	ldr	r3, [r7, #12]
 81027ca:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 81027cc:	68fb      	ldr	r3, [r7, #12]
 81027ce:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 81027d2:	b29b      	uxth	r3, r3
 81027d4:	3b01      	subs	r3, #1
 81027d6:	b29a      	uxth	r2, r3
 81027d8:	68fb      	ldr	r3, [r7, #12]
 81027da:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 81027de:	e094      	b.n	810290a <HAL_SPI_Receive+0x4a4>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 81027e0:	68fb      	ldr	r3, [r7, #12]
 81027e2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 81027e6:	b29b      	uxth	r3, r3
 81027e8:	8bfa      	ldrh	r2, [r7, #30]
 81027ea:	429a      	cmp	r2, r3
 81027ec:	d946      	bls.n	810287c <HAL_SPI_Receive+0x416>
 81027ee:	693b      	ldr	r3, [r7, #16]
 81027f0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 81027f4:	2b00      	cmp	r3, #0
 81027f6:	d041      	beq.n	810287c <HAL_SPI_Receive+0x416>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 81027f8:	68fb      	ldr	r3, [r7, #12]
 81027fa:	681b      	ldr	r3, [r3, #0]
 81027fc:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8102800:	68fb      	ldr	r3, [r7, #12]
 8102802:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8102804:	7812      	ldrb	r2, [r2, #0]
 8102806:	b2d2      	uxtb	r2, r2
 8102808:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 810280a:	68fb      	ldr	r3, [r7, #12]
 810280c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 810280e:	1c5a      	adds	r2, r3, #1
 8102810:	68fb      	ldr	r3, [r7, #12]
 8102812:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8102814:	68fb      	ldr	r3, [r7, #12]
 8102816:	681b      	ldr	r3, [r3, #0]
 8102818:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 810281c:	68fb      	ldr	r3, [r7, #12]
 810281e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8102820:	7812      	ldrb	r2, [r2, #0]
 8102822:	b2d2      	uxtb	r2, r2
 8102824:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8102826:	68fb      	ldr	r3, [r7, #12]
 8102828:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 810282a:	1c5a      	adds	r2, r3, #1
 810282c:	68fb      	ldr	r3, [r7, #12]
 810282e:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8102830:	68fb      	ldr	r3, [r7, #12]
 8102832:	681b      	ldr	r3, [r3, #0]
 8102834:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8102838:	68fb      	ldr	r3, [r7, #12]
 810283a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 810283c:	7812      	ldrb	r2, [r2, #0]
 810283e:	b2d2      	uxtb	r2, r2
 8102840:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8102842:	68fb      	ldr	r3, [r7, #12]
 8102844:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8102846:	1c5a      	adds	r2, r3, #1
 8102848:	68fb      	ldr	r3, [r7, #12]
 810284a:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 810284c:	68fb      	ldr	r3, [r7, #12]
 810284e:	681b      	ldr	r3, [r3, #0]
 8102850:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8102854:	68fb      	ldr	r3, [r7, #12]
 8102856:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8102858:	7812      	ldrb	r2, [r2, #0]
 810285a:	b2d2      	uxtb	r2, r2
 810285c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 810285e:	68fb      	ldr	r3, [r7, #12]
 8102860:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8102862:	1c5a      	adds	r2, r3, #1
 8102864:	68fb      	ldr	r3, [r7, #12]
 8102866:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 8102868:	68fb      	ldr	r3, [r7, #12]
 810286a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 810286e:	b29b      	uxth	r3, r3
 8102870:	3b04      	subs	r3, #4
 8102872:	b29a      	uxth	r2, r3
 8102874:	68fb      	ldr	r3, [r7, #12]
 8102876:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 810287a:	e046      	b.n	810290a <HAL_SPI_Receive+0x4a4>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 810287c:	68fb      	ldr	r3, [r7, #12]
 810287e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8102882:	b29b      	uxth	r3, r3
 8102884:	2b03      	cmp	r3, #3
 8102886:	d81c      	bhi.n	81028c2 <HAL_SPI_Receive+0x45c>
 8102888:	693b      	ldr	r3, [r7, #16]
 810288a:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 810288e:	2b00      	cmp	r3, #0
 8102890:	d017      	beq.n	81028c2 <HAL_SPI_Receive+0x45c>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8102892:	68fb      	ldr	r3, [r7, #12]
 8102894:	681b      	ldr	r3, [r3, #0]
 8102896:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 810289a:	68fb      	ldr	r3, [r7, #12]
 810289c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 810289e:	7812      	ldrb	r2, [r2, #0]
 81028a0:	b2d2      	uxtb	r2, r2
 81028a2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 81028a4:	68fb      	ldr	r3, [r7, #12]
 81028a6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 81028a8:	1c5a      	adds	r2, r3, #1
 81028aa:	68fb      	ldr	r3, [r7, #12]
 81028ac:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 81028ae:	68fb      	ldr	r3, [r7, #12]
 81028b0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 81028b4:	b29b      	uxth	r3, r3
 81028b6:	3b01      	subs	r3, #1
 81028b8:	b29a      	uxth	r2, r3
 81028ba:	68fb      	ldr	r3, [r7, #12]
 81028bc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 81028c0:	e023      	b.n	810290a <HAL_SPI_Receive+0x4a4>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 81028c2:	f7fe fd89 	bl	81013d8 <HAL_GetTick>
 81028c6:	4602      	mov	r2, r0
 81028c8:	697b      	ldr	r3, [r7, #20]
 81028ca:	1ad3      	subs	r3, r2, r3
 81028cc:	683a      	ldr	r2, [r7, #0]
 81028ce:	429a      	cmp	r2, r3
 81028d0:	d803      	bhi.n	81028da <HAL_SPI_Receive+0x474>
 81028d2:	683b      	ldr	r3, [r7, #0]
 81028d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 81028d8:	d102      	bne.n	81028e0 <HAL_SPI_Receive+0x47a>
 81028da:	683b      	ldr	r3, [r7, #0]
 81028dc:	2b00      	cmp	r3, #0
 81028de:	d114      	bne.n	810290a <HAL_SPI_Receive+0x4a4>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 81028e0:	68f8      	ldr	r0, [r7, #12]
 81028e2:	f000 fb69 	bl	8102fb8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 81028e6:	68fb      	ldr	r3, [r7, #12]
 81028e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 81028ec:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 81028f0:	68fb      	ldr	r3, [r7, #12]
 81028f2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 81028f6:	68fb      	ldr	r3, [r7, #12]
 81028f8:	2201      	movs	r2, #1
 81028fa:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 81028fe:	68fb      	ldr	r3, [r7, #12]
 8102900:	2200      	movs	r2, #0
 8102902:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8102906:	2303      	movs	r3, #3
 8102908:	e019      	b.n	810293e <HAL_SPI_Receive+0x4d8>
    while (hspi->RxXferCount > 0UL)
 810290a:	68fb      	ldr	r3, [r7, #12]
 810290c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8102910:	b29b      	uxth	r3, r3
 8102912:	2b00      	cmp	r3, #0
 8102914:	f47f af41 	bne.w	810279a <HAL_SPI_Receive+0x334>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8102918:	68f8      	ldr	r0, [r7, #12]
 810291a:	f000 fb4d 	bl	8102fb8 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 810291e:	68fb      	ldr	r3, [r7, #12]
 8102920:	2201      	movs	r2, #1
 8102922:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8102926:	68fb      	ldr	r3, [r7, #12]
 8102928:	2200      	movs	r2, #0
 810292a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 810292e:	68fb      	ldr	r3, [r7, #12]
 8102930:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8102934:	2b00      	cmp	r3, #0
 8102936:	d001      	beq.n	810293c <HAL_SPI_Receive+0x4d6>
  {
    return HAL_ERROR;
 8102938:	2301      	movs	r3, #1
 810293a:	e000      	b.n	810293e <HAL_SPI_Receive+0x4d8>
  }
  else
  {
    return HAL_OK;
 810293c:	2300      	movs	r3, #0
  }
}
 810293e:	4618      	mov	r0, r3
 8102940:	3720      	adds	r7, #32
 8102942:	46bd      	mov	sp, r7
 8102944:	bd80      	pop	{r7, pc}
	...

08102948 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8102948:	b580      	push	{r7, lr}
 810294a:	b08e      	sub	sp, #56	@ 0x38
 810294c:	af02      	add	r7, sp, #8
 810294e:	60f8      	str	r0, [r7, #12]
 8102950:	60b9      	str	r1, [r7, #8]
 8102952:	607a      	str	r2, [r7, #4]
 8102954:	807b      	strh	r3, [r7, #2]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8102956:	68fb      	ldr	r3, [r7, #12]
 8102958:	681b      	ldr	r3, [r3, #0]
 810295a:	3320      	adds	r3, #32
 810295c:	627b      	str	r3, [r7, #36]	@ 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 810295e:	68fb      	ldr	r3, [r7, #12]
 8102960:	681b      	ldr	r3, [r3, #0]
 8102962:	3330      	adds	r3, #48	@ 0x30
 8102964:	623b      	str	r3, [r7, #32]
  uint32_t   fifo_length;
  uint32_t   temp_sr_reg;
  uint16_t   initial_TxXferCount;
  uint16_t   initial_RxXferCount;
  uint16_t   init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 8102966:	68fb      	ldr	r3, [r7, #12]
 8102968:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810296a:	095b      	lsrs	r3, r3, #5
 810296c:	b29b      	uxth	r3, r3
 810296e:	3301      	adds	r3, #1
 8102970:	83fb      	strh	r3, [r7, #30]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8102972:	f7fe fd31 	bl	81013d8 <HAL_GetTick>
 8102976:	61b8      	str	r0, [r7, #24]

  initial_TxXferCount = Size;
 8102978:	887b      	ldrh	r3, [r7, #2]
 810297a:	857b      	strh	r3, [r7, #42]	@ 0x2a
  initial_RxXferCount = Size;
 810297c:	887b      	ldrh	r3, [r7, #2]
 810297e:	853b      	strh	r3, [r7, #40]	@ 0x28

  if (hspi->State != HAL_SPI_STATE_READY)
 8102980:	68fb      	ldr	r3, [r7, #12]
 8102982:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8102986:	b2db      	uxtb	r3, r3
 8102988:	2b01      	cmp	r3, #1
 810298a:	d001      	beq.n	8102990 <HAL_SPI_TransmitReceive+0x48>
  {
    return HAL_BUSY;
 810298c:	2302      	movs	r3, #2
 810298e:	e30e      	b.n	8102fae <HAL_SPI_TransmitReceive+0x666>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8102990:	68bb      	ldr	r3, [r7, #8]
 8102992:	2b00      	cmp	r3, #0
 8102994:	d005      	beq.n	81029a2 <HAL_SPI_TransmitReceive+0x5a>
 8102996:	687b      	ldr	r3, [r7, #4]
 8102998:	2b00      	cmp	r3, #0
 810299a:	d002      	beq.n	81029a2 <HAL_SPI_TransmitReceive+0x5a>
 810299c:	887b      	ldrh	r3, [r7, #2]
 810299e:	2b00      	cmp	r3, #0
 81029a0:	d101      	bne.n	81029a6 <HAL_SPI_TransmitReceive+0x5e>
  {
    return HAL_ERROR;
 81029a2:	2301      	movs	r3, #1
 81029a4:	e303      	b.n	8102fae <HAL_SPI_TransmitReceive+0x666>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 81029a6:	68fb      	ldr	r3, [r7, #12]
 81029a8:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 81029ac:	2b01      	cmp	r3, #1
 81029ae:	d101      	bne.n	81029b4 <HAL_SPI_TransmitReceive+0x6c>
 81029b0:	2302      	movs	r3, #2
 81029b2:	e2fc      	b.n	8102fae <HAL_SPI_TransmitReceive+0x666>
 81029b4:	68fb      	ldr	r3, [r7, #12]
 81029b6:	2201      	movs	r2, #1
 81029b8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 81029bc:	68fb      	ldr	r3, [r7, #12]
 81029be:	2205      	movs	r2, #5
 81029c0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 81029c4:	68fb      	ldr	r3, [r7, #12]
 81029c6:	2200      	movs	r2, #0
 81029c8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 81029cc:	68fb      	ldr	r3, [r7, #12]
 81029ce:	687a      	ldr	r2, [r7, #4]
 81029d0:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount = Size;
 81029d2:	68fb      	ldr	r3, [r7, #12]
 81029d4:	887a      	ldrh	r2, [r7, #2]
 81029d6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferSize  = Size;
 81029da:	68fb      	ldr	r3, [r7, #12]
 81029dc:	887a      	ldrh	r2, [r7, #2]
 81029de:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 81029e2:	68fb      	ldr	r3, [r7, #12]
 81029e4:	68ba      	ldr	r2, [r7, #8]
 81029e6:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount = Size;
 81029e8:	68fb      	ldr	r3, [r7, #12]
 81029ea:	887a      	ldrh	r2, [r7, #2]
 81029ec:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->TxXferSize  = Size;
 81029f0:	68fb      	ldr	r3, [r7, #12]
 81029f2:	887a      	ldrh	r2, [r7, #2]
 81029f4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 81029f8:	68fb      	ldr	r3, [r7, #12]
 81029fa:	2200      	movs	r2, #0
 81029fc:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 81029fe:	68fb      	ldr	r3, [r7, #12]
 8102a00:	2200      	movs	r2, #0
 8102a02:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 8102a04:	68fb      	ldr	r3, [r7, #12]
 8102a06:	681b      	ldr	r3, [r3, #0]
 8102a08:	68da      	ldr	r2, [r3, #12]
 8102a0a:	68fb      	ldr	r3, [r7, #12]
 8102a0c:	681b      	ldr	r3, [r3, #0]
 8102a0e:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 8102a12:	60da      	str	r2, [r3, #12]

  /* Initialize FIFO length */
  if (IS_SPI_HIGHEND_INSTANCE(hspi->Instance))
 8102a14:	68fb      	ldr	r3, [r7, #12]
 8102a16:	681b      	ldr	r3, [r3, #0]
 8102a18:	4a70      	ldr	r2, [pc, #448]	@ (8102bdc <HAL_SPI_TransmitReceive+0x294>)
 8102a1a:	4293      	cmp	r3, r2
 8102a1c:	d009      	beq.n	8102a32 <HAL_SPI_TransmitReceive+0xea>
 8102a1e:	68fb      	ldr	r3, [r7, #12]
 8102a20:	681b      	ldr	r3, [r3, #0]
 8102a22:	4a6f      	ldr	r2, [pc, #444]	@ (8102be0 <HAL_SPI_TransmitReceive+0x298>)
 8102a24:	4293      	cmp	r3, r2
 8102a26:	d004      	beq.n	8102a32 <HAL_SPI_TransmitReceive+0xea>
 8102a28:	68fb      	ldr	r3, [r7, #12]
 8102a2a:	681b      	ldr	r3, [r3, #0]
 8102a2c:	4a6d      	ldr	r2, [pc, #436]	@ (8102be4 <HAL_SPI_TransmitReceive+0x29c>)
 8102a2e:	4293      	cmp	r3, r2
 8102a30:	d102      	bne.n	8102a38 <HAL_SPI_TransmitReceive+0xf0>
  {
    fifo_length = SPI_HIGHEND_FIFO_SIZE;
 8102a32:	2310      	movs	r3, #16
 8102a34:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8102a36:	e001      	b.n	8102a3c <HAL_SPI_TransmitReceive+0xf4>
  }
  else
  {
    fifo_length = SPI_LOWEND_FIFO_SIZE;
 8102a38:	2308      	movs	r3, #8
 8102a3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8102a3c:	68fb      	ldr	r3, [r7, #12]
 8102a3e:	681b      	ldr	r3, [r3, #0]
 8102a40:	685b      	ldr	r3, [r3, #4]
 8102a42:	0c1b      	lsrs	r3, r3, #16
 8102a44:	041b      	lsls	r3, r3, #16
 8102a46:	8879      	ldrh	r1, [r7, #2]
 8102a48:	68fa      	ldr	r2, [r7, #12]
 8102a4a:	6812      	ldr	r2, [r2, #0]
 8102a4c:	430b      	orrs	r3, r1
 8102a4e:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 8102a50:	68fb      	ldr	r3, [r7, #12]
 8102a52:	681b      	ldr	r3, [r3, #0]
 8102a54:	681a      	ldr	r2, [r3, #0]
 8102a56:	68fb      	ldr	r3, [r7, #12]
 8102a58:	681b      	ldr	r3, [r3, #0]
 8102a5a:	f042 0201 	orr.w	r2, r2, #1
 8102a5e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8102a60:	68fb      	ldr	r3, [r7, #12]
 8102a62:	685b      	ldr	r3, [r3, #4]
 8102a64:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8102a68:	d107      	bne.n	8102a7a <HAL_SPI_TransmitReceive+0x132>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8102a6a:	68fb      	ldr	r3, [r7, #12]
 8102a6c:	681b      	ldr	r3, [r3, #0]
 8102a6e:	681a      	ldr	r2, [r3, #0]
 8102a70:	68fb      	ldr	r3, [r7, #12]
 8102a72:	681b      	ldr	r3, [r3, #0]
 8102a74:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8102a78:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8102a7a:	68fb      	ldr	r3, [r7, #12]
 8102a7c:	68db      	ldr	r3, [r3, #12]
 8102a7e:	2b0f      	cmp	r3, #15
 8102a80:	f240 80a2 	bls.w	8102bc8 <HAL_SPI_TransmitReceive+0x280>
  {
    /* Adapt fifo length to 32bits data width */
    fifo_length = (fifo_length / 4UL);
 8102a84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8102a86:	089b      	lsrs	r3, r3, #2
 8102a88:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8102a8a:	e094      	b.n	8102bb6 <HAL_SPI_TransmitReceive+0x26e>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8102a8c:	68fb      	ldr	r3, [r7, #12]
 8102a8e:	681b      	ldr	r3, [r3, #0]
 8102a90:	695b      	ldr	r3, [r3, #20]
 8102a92:	f003 0302 	and.w	r3, r3, #2
 8102a96:	2b02      	cmp	r3, #2
 8102a98:	d120      	bne.n	8102adc <HAL_SPI_TransmitReceive+0x194>
 8102a9a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8102a9c:	2b00      	cmp	r3, #0
 8102a9e:	d01d      	beq.n	8102adc <HAL_SPI_TransmitReceive+0x194>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8102aa0:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8102aa2:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8102aa4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8102aa6:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8102aa8:	429a      	cmp	r2, r3
 8102aaa:	d217      	bcs.n	8102adc <HAL_SPI_TransmitReceive+0x194>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8102aac:	68fb      	ldr	r3, [r7, #12]
 8102aae:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8102ab0:	68fb      	ldr	r3, [r7, #12]
 8102ab2:	681b      	ldr	r3, [r3, #0]
 8102ab4:	6812      	ldr	r2, [r2, #0]
 8102ab6:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8102ab8:	68fb      	ldr	r3, [r7, #12]
 8102aba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8102abc:	1d1a      	adds	r2, r3, #4
 8102abe:	68fb      	ldr	r3, [r7, #12]
 8102ac0:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount --;
 8102ac2:	68fb      	ldr	r3, [r7, #12]
 8102ac4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8102ac8:	b29b      	uxth	r3, r3
 8102aca:	3b01      	subs	r3, #1
 8102acc:	b29a      	uxth	r2, r3
 8102ace:	68fb      	ldr	r3, [r7, #12]
 8102ad0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8102ad4:	68fb      	ldr	r3, [r7, #12]
 8102ad6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8102ada:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8102adc:	68fb      	ldr	r3, [r7, #12]
 8102ade:	681b      	ldr	r3, [r3, #0]
 8102ae0:	695b      	ldr	r3, [r3, #20]
 8102ae2:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8102ae4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8102ae6:	2b00      	cmp	r3, #0
 8102ae8:	d065      	beq.n	8102bb6 <HAL_SPI_TransmitReceive+0x26e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8102aea:	68fb      	ldr	r3, [r7, #12]
 8102aec:	681b      	ldr	r3, [r3, #0]
 8102aee:	695b      	ldr	r3, [r3, #20]
 8102af0:	f003 0301 	and.w	r3, r3, #1
 8102af4:	2b01      	cmp	r3, #1
 8102af6:	d118      	bne.n	8102b2a <HAL_SPI_TransmitReceive+0x1e2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8102af8:	68fb      	ldr	r3, [r7, #12]
 8102afa:	681a      	ldr	r2, [r3, #0]
 8102afc:	68fb      	ldr	r3, [r7, #12]
 8102afe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8102b00:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8102b02:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8102b04:	68fb      	ldr	r3, [r7, #12]
 8102b06:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8102b08:	1d1a      	adds	r2, r3, #4
 8102b0a:	68fb      	ldr	r3, [r7, #12]
 8102b0c:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8102b0e:	68fb      	ldr	r3, [r7, #12]
 8102b10:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8102b14:	b29b      	uxth	r3, r3
 8102b16:	3b01      	subs	r3, #1
 8102b18:	b29a      	uxth	r2, r3
 8102b1a:	68fb      	ldr	r3, [r7, #12]
 8102b1c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8102b20:	68fb      	ldr	r3, [r7, #12]
 8102b22:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8102b26:	853b      	strh	r3, [r7, #40]	@ 0x28
 8102b28:	e045      	b.n	8102bb6 <HAL_SPI_TransmitReceive+0x26e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8102b2a:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8102b2c:	8bfb      	ldrh	r3, [r7, #30]
 8102b2e:	429a      	cmp	r2, r3
 8102b30:	d21d      	bcs.n	8102b6e <HAL_SPI_TransmitReceive+0x226>
 8102b32:	697b      	ldr	r3, [r7, #20]
 8102b34:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8102b38:	2b00      	cmp	r3, #0
 8102b3a:	d018      	beq.n	8102b6e <HAL_SPI_TransmitReceive+0x226>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8102b3c:	68fb      	ldr	r3, [r7, #12]
 8102b3e:	681a      	ldr	r2, [r3, #0]
 8102b40:	68fb      	ldr	r3, [r7, #12]
 8102b42:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8102b44:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8102b46:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8102b48:	68fb      	ldr	r3, [r7, #12]
 8102b4a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8102b4c:	1d1a      	adds	r2, r3, #4
 8102b4e:	68fb      	ldr	r3, [r7, #12]
 8102b50:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8102b52:	68fb      	ldr	r3, [r7, #12]
 8102b54:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8102b58:	b29b      	uxth	r3, r3
 8102b5a:	3b01      	subs	r3, #1
 8102b5c:	b29a      	uxth	r2, r3
 8102b5e:	68fb      	ldr	r3, [r7, #12]
 8102b60:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8102b64:	68fb      	ldr	r3, [r7, #12]
 8102b66:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8102b6a:	853b      	strh	r3, [r7, #40]	@ 0x28
 8102b6c:	e023      	b.n	8102bb6 <HAL_SPI_TransmitReceive+0x26e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8102b6e:	f7fe fc33 	bl	81013d8 <HAL_GetTick>
 8102b72:	4602      	mov	r2, r0
 8102b74:	69bb      	ldr	r3, [r7, #24]
 8102b76:	1ad3      	subs	r3, r2, r3
 8102b78:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8102b7a:	429a      	cmp	r2, r3
 8102b7c:	d803      	bhi.n	8102b86 <HAL_SPI_TransmitReceive+0x23e>
 8102b7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8102b80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8102b84:	d102      	bne.n	8102b8c <HAL_SPI_TransmitReceive+0x244>
 8102b86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8102b88:	2b00      	cmp	r3, #0
 8102b8a:	d114      	bne.n	8102bb6 <HAL_SPI_TransmitReceive+0x26e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8102b8c:	68f8      	ldr	r0, [r7, #12]
 8102b8e:	f000 fa13 	bl	8102fb8 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8102b92:	68fb      	ldr	r3, [r7, #12]
 8102b94:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8102b98:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8102b9c:	68fb      	ldr	r3, [r7, #12]
 8102b9e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 8102ba2:	68fb      	ldr	r3, [r7, #12]
 8102ba4:	2201      	movs	r2, #1
 8102ba6:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 8102baa:	68fb      	ldr	r3, [r7, #12]
 8102bac:	2200      	movs	r2, #0
 8102bae:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 8102bb2:	2303      	movs	r3, #3
 8102bb4:	e1fb      	b.n	8102fae <HAL_SPI_TransmitReceive+0x666>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8102bb6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8102bb8:	2b00      	cmp	r3, #0
 8102bba:	f47f af67 	bne.w	8102a8c <HAL_SPI_TransmitReceive+0x144>
 8102bbe:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8102bc0:	2b00      	cmp	r3, #0
 8102bc2:	f47f af63 	bne.w	8102a8c <HAL_SPI_TransmitReceive+0x144>
 8102bc6:	e1cc      	b.n	8102f62 <HAL_SPI_TransmitReceive+0x61a>
        }
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8102bc8:	68fb      	ldr	r3, [r7, #12]
 8102bca:	68db      	ldr	r3, [r3, #12]
 8102bcc:	2b07      	cmp	r3, #7
 8102bce:	f240 81c0 	bls.w	8102f52 <HAL_SPI_TransmitReceive+0x60a>
  {
    /* Adapt fifo length to 16bits data width */
    fifo_length = (fifo_length / 2UL);
 8102bd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8102bd4:	085b      	lsrs	r3, r3, #1
 8102bd6:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8102bd8:	e0c7      	b.n	8102d6a <HAL_SPI_TransmitReceive+0x422>
 8102bda:	bf00      	nop
 8102bdc:	40013000 	.word	0x40013000
 8102be0:	40003800 	.word	0x40003800
 8102be4:	40003c00 	.word	0x40003c00
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8102be8:	68fb      	ldr	r3, [r7, #12]
 8102bea:	681b      	ldr	r3, [r3, #0]
 8102bec:	695b      	ldr	r3, [r3, #20]
 8102bee:	f003 0302 	and.w	r3, r3, #2
 8102bf2:	2b02      	cmp	r3, #2
 8102bf4:	d11f      	bne.n	8102c36 <HAL_SPI_TransmitReceive+0x2ee>
 8102bf6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8102bf8:	2b00      	cmp	r3, #0
 8102bfa:	d01c      	beq.n	8102c36 <HAL_SPI_TransmitReceive+0x2ee>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8102bfc:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8102bfe:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8102c00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8102c02:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8102c04:	429a      	cmp	r2, r3
 8102c06:	d216      	bcs.n	8102c36 <HAL_SPI_TransmitReceive+0x2ee>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8102c08:	68fb      	ldr	r3, [r7, #12]
 8102c0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8102c0c:	881a      	ldrh	r2, [r3, #0]
 8102c0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8102c10:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8102c12:	68fb      	ldr	r3, [r7, #12]
 8102c14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8102c16:	1c9a      	adds	r2, r3, #2
 8102c18:	68fb      	ldr	r3, [r7, #12]
 8102c1a:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8102c1c:	68fb      	ldr	r3, [r7, #12]
 8102c1e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8102c22:	b29b      	uxth	r3, r3
 8102c24:	3b01      	subs	r3, #1
 8102c26:	b29a      	uxth	r2, r3
 8102c28:	68fb      	ldr	r3, [r7, #12]
 8102c2a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8102c2e:	68fb      	ldr	r3, [r7, #12]
 8102c30:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8102c34:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8102c36:	68fb      	ldr	r3, [r7, #12]
 8102c38:	681b      	ldr	r3, [r3, #0]
 8102c3a:	695b      	ldr	r3, [r3, #20]
 8102c3c:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8102c3e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8102c40:	2b00      	cmp	r3, #0
 8102c42:	f000 8092 	beq.w	8102d6a <HAL_SPI_TransmitReceive+0x422>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8102c46:	68fb      	ldr	r3, [r7, #12]
 8102c48:	681b      	ldr	r3, [r3, #0]
 8102c4a:	695b      	ldr	r3, [r3, #20]
 8102c4c:	f003 0301 	and.w	r3, r3, #1
 8102c50:	2b01      	cmp	r3, #1
 8102c52:	d118      	bne.n	8102c86 <HAL_SPI_TransmitReceive+0x33e>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8102c54:	68fb      	ldr	r3, [r7, #12]
 8102c56:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8102c58:	6a3a      	ldr	r2, [r7, #32]
 8102c5a:	8812      	ldrh	r2, [r2, #0]
 8102c5c:	b292      	uxth	r2, r2
 8102c5e:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8102c60:	68fb      	ldr	r3, [r7, #12]
 8102c62:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8102c64:	1c9a      	adds	r2, r3, #2
 8102c66:	68fb      	ldr	r3, [r7, #12]
 8102c68:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8102c6a:	68fb      	ldr	r3, [r7, #12]
 8102c6c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8102c70:	b29b      	uxth	r3, r3
 8102c72:	3b01      	subs	r3, #1
 8102c74:	b29a      	uxth	r2, r3
 8102c76:	68fb      	ldr	r3, [r7, #12]
 8102c78:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8102c7c:	68fb      	ldr	r3, [r7, #12]
 8102c7e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8102c82:	853b      	strh	r3, [r7, #40]	@ 0x28
 8102c84:	e071      	b.n	8102d6a <HAL_SPI_TransmitReceive+0x422>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8102c86:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8102c88:	8bfb      	ldrh	r3, [r7, #30]
 8102c8a:	429a      	cmp	r2, r3
 8102c8c:	d228      	bcs.n	8102ce0 <HAL_SPI_TransmitReceive+0x398>
 8102c8e:	697b      	ldr	r3, [r7, #20]
 8102c90:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8102c94:	2b00      	cmp	r3, #0
 8102c96:	d023      	beq.n	8102ce0 <HAL_SPI_TransmitReceive+0x398>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8102c98:	68fb      	ldr	r3, [r7, #12]
 8102c9a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8102c9c:	6a3a      	ldr	r2, [r7, #32]
 8102c9e:	8812      	ldrh	r2, [r2, #0]
 8102ca0:	b292      	uxth	r2, r2
 8102ca2:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8102ca4:	68fb      	ldr	r3, [r7, #12]
 8102ca6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8102ca8:	1c9a      	adds	r2, r3, #2
 8102caa:	68fb      	ldr	r3, [r7, #12]
 8102cac:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8102cae:	68fb      	ldr	r3, [r7, #12]
 8102cb0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8102cb2:	6a3a      	ldr	r2, [r7, #32]
 8102cb4:	8812      	ldrh	r2, [r2, #0]
 8102cb6:	b292      	uxth	r2, r2
 8102cb8:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8102cba:	68fb      	ldr	r3, [r7, #12]
 8102cbc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8102cbe:	1c9a      	adds	r2, r3, #2
 8102cc0:	68fb      	ldr	r3, [r7, #12]
 8102cc2:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8102cc4:	68fb      	ldr	r3, [r7, #12]
 8102cc6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8102cca:	b29b      	uxth	r3, r3
 8102ccc:	3b02      	subs	r3, #2
 8102cce:	b29a      	uxth	r2, r3
 8102cd0:	68fb      	ldr	r3, [r7, #12]
 8102cd2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8102cd6:	68fb      	ldr	r3, [r7, #12]
 8102cd8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8102cdc:	853b      	strh	r3, [r7, #40]	@ 0x28
 8102cde:	e044      	b.n	8102d6a <HAL_SPI_TransmitReceive+0x422>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 8102ce0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8102ce2:	2b01      	cmp	r3, #1
 8102ce4:	d11d      	bne.n	8102d22 <HAL_SPI_TransmitReceive+0x3da>
 8102ce6:	697b      	ldr	r3, [r7, #20]
 8102ce8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8102cec:	2b00      	cmp	r3, #0
 8102cee:	d018      	beq.n	8102d22 <HAL_SPI_TransmitReceive+0x3da>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8102cf0:	68fb      	ldr	r3, [r7, #12]
 8102cf2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8102cf4:	6a3a      	ldr	r2, [r7, #32]
 8102cf6:	8812      	ldrh	r2, [r2, #0]
 8102cf8:	b292      	uxth	r2, r2
 8102cfa:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8102cfc:	68fb      	ldr	r3, [r7, #12]
 8102cfe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8102d00:	1c9a      	adds	r2, r3, #2
 8102d02:	68fb      	ldr	r3, [r7, #12]
 8102d04:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8102d06:	68fb      	ldr	r3, [r7, #12]
 8102d08:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8102d0c:	b29b      	uxth	r3, r3
 8102d0e:	3b01      	subs	r3, #1
 8102d10:	b29a      	uxth	r2, r3
 8102d12:	68fb      	ldr	r3, [r7, #12]
 8102d14:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8102d18:	68fb      	ldr	r3, [r7, #12]
 8102d1a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8102d1e:	853b      	strh	r3, [r7, #40]	@ 0x28
 8102d20:	e023      	b.n	8102d6a <HAL_SPI_TransmitReceive+0x422>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8102d22:	f7fe fb59 	bl	81013d8 <HAL_GetTick>
 8102d26:	4602      	mov	r2, r0
 8102d28:	69bb      	ldr	r3, [r7, #24]
 8102d2a:	1ad3      	subs	r3, r2, r3
 8102d2c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8102d2e:	429a      	cmp	r2, r3
 8102d30:	d803      	bhi.n	8102d3a <HAL_SPI_TransmitReceive+0x3f2>
 8102d32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8102d34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8102d38:	d102      	bne.n	8102d40 <HAL_SPI_TransmitReceive+0x3f8>
 8102d3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8102d3c:	2b00      	cmp	r3, #0
 8102d3e:	d114      	bne.n	8102d6a <HAL_SPI_TransmitReceive+0x422>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8102d40:	68f8      	ldr	r0, [r7, #12]
 8102d42:	f000 f939 	bl	8102fb8 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8102d46:	68fb      	ldr	r3, [r7, #12]
 8102d48:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8102d4c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8102d50:	68fb      	ldr	r3, [r7, #12]
 8102d52:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 8102d56:	68fb      	ldr	r3, [r7, #12]
 8102d58:	2201      	movs	r2, #1
 8102d5a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 8102d5e:	68fb      	ldr	r3, [r7, #12]
 8102d60:	2200      	movs	r2, #0
 8102d62:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 8102d66:	2303      	movs	r3, #3
 8102d68:	e121      	b.n	8102fae <HAL_SPI_TransmitReceive+0x666>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8102d6a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8102d6c:	2b00      	cmp	r3, #0
 8102d6e:	f47f af3b 	bne.w	8102be8 <HAL_SPI_TransmitReceive+0x2a0>
 8102d72:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8102d74:	2b00      	cmp	r3, #0
 8102d76:	f47f af37 	bne.w	8102be8 <HAL_SPI_TransmitReceive+0x2a0>
 8102d7a:	e0f2      	b.n	8102f62 <HAL_SPI_TransmitReceive+0x61a>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8102d7c:	68fb      	ldr	r3, [r7, #12]
 8102d7e:	681b      	ldr	r3, [r3, #0]
 8102d80:	695b      	ldr	r3, [r3, #20]
 8102d82:	f003 0302 	and.w	r3, r3, #2
 8102d86:	2b02      	cmp	r3, #2
 8102d88:	d121      	bne.n	8102dce <HAL_SPI_TransmitReceive+0x486>
 8102d8a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8102d8c:	2b00      	cmp	r3, #0
 8102d8e:	d01e      	beq.n	8102dce <HAL_SPI_TransmitReceive+0x486>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8102d90:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8102d92:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8102d94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8102d96:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8102d98:	429a      	cmp	r2, r3
 8102d9a:	d218      	bcs.n	8102dce <HAL_SPI_TransmitReceive+0x486>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8102d9c:	68fb      	ldr	r3, [r7, #12]
 8102d9e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8102da0:	68fb      	ldr	r3, [r7, #12]
 8102da2:	681b      	ldr	r3, [r3, #0]
 8102da4:	3320      	adds	r3, #32
 8102da6:	7812      	ldrb	r2, [r2, #0]
 8102da8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8102daa:	68fb      	ldr	r3, [r7, #12]
 8102dac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8102dae:	1c5a      	adds	r2, r3, #1
 8102db0:	68fb      	ldr	r3, [r7, #12]
 8102db2:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8102db4:	68fb      	ldr	r3, [r7, #12]
 8102db6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8102dba:	b29b      	uxth	r3, r3
 8102dbc:	3b01      	subs	r3, #1
 8102dbe:	b29a      	uxth	r2, r3
 8102dc0:	68fb      	ldr	r3, [r7, #12]
 8102dc2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8102dc6:	68fb      	ldr	r3, [r7, #12]
 8102dc8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8102dcc:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8102dce:	68fb      	ldr	r3, [r7, #12]
 8102dd0:	681b      	ldr	r3, [r3, #0]
 8102dd2:	695b      	ldr	r3, [r3, #20]
 8102dd4:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8102dd6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8102dd8:	2b00      	cmp	r3, #0
 8102dda:	f000 80ba 	beq.w	8102f52 <HAL_SPI_TransmitReceive+0x60a>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8102dde:	68fb      	ldr	r3, [r7, #12]
 8102de0:	681b      	ldr	r3, [r3, #0]
 8102de2:	695b      	ldr	r3, [r3, #20]
 8102de4:	f003 0301 	and.w	r3, r3, #1
 8102de8:	2b01      	cmp	r3, #1
 8102dea:	d11b      	bne.n	8102e24 <HAL_SPI_TransmitReceive+0x4dc>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8102dec:	68fb      	ldr	r3, [r7, #12]
 8102dee:	681b      	ldr	r3, [r3, #0]
 8102df0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8102df4:	68fb      	ldr	r3, [r7, #12]
 8102df6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8102df8:	7812      	ldrb	r2, [r2, #0]
 8102dfa:	b2d2      	uxtb	r2, r2
 8102dfc:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8102dfe:	68fb      	ldr	r3, [r7, #12]
 8102e00:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8102e02:	1c5a      	adds	r2, r3, #1
 8102e04:	68fb      	ldr	r3, [r7, #12]
 8102e06:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8102e08:	68fb      	ldr	r3, [r7, #12]
 8102e0a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8102e0e:	b29b      	uxth	r3, r3
 8102e10:	3b01      	subs	r3, #1
 8102e12:	b29a      	uxth	r2, r3
 8102e14:	68fb      	ldr	r3, [r7, #12]
 8102e16:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8102e1a:	68fb      	ldr	r3, [r7, #12]
 8102e1c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8102e20:	853b      	strh	r3, [r7, #40]	@ 0x28
 8102e22:	e096      	b.n	8102f52 <HAL_SPI_TransmitReceive+0x60a>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8102e24:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8102e26:	8bfb      	ldrh	r3, [r7, #30]
 8102e28:	429a      	cmp	r2, r3
 8102e2a:	d24a      	bcs.n	8102ec2 <HAL_SPI_TransmitReceive+0x57a>
 8102e2c:	697b      	ldr	r3, [r7, #20]
 8102e2e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8102e32:	2b00      	cmp	r3, #0
 8102e34:	d045      	beq.n	8102ec2 <HAL_SPI_TransmitReceive+0x57a>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8102e36:	68fb      	ldr	r3, [r7, #12]
 8102e38:	681b      	ldr	r3, [r3, #0]
 8102e3a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8102e3e:	68fb      	ldr	r3, [r7, #12]
 8102e40:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8102e42:	7812      	ldrb	r2, [r2, #0]
 8102e44:	b2d2      	uxtb	r2, r2
 8102e46:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8102e48:	68fb      	ldr	r3, [r7, #12]
 8102e4a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8102e4c:	1c5a      	adds	r2, r3, #1
 8102e4e:	68fb      	ldr	r3, [r7, #12]
 8102e50:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8102e52:	68fb      	ldr	r3, [r7, #12]
 8102e54:	681b      	ldr	r3, [r3, #0]
 8102e56:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8102e5a:	68fb      	ldr	r3, [r7, #12]
 8102e5c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8102e5e:	7812      	ldrb	r2, [r2, #0]
 8102e60:	b2d2      	uxtb	r2, r2
 8102e62:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8102e64:	68fb      	ldr	r3, [r7, #12]
 8102e66:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8102e68:	1c5a      	adds	r2, r3, #1
 8102e6a:	68fb      	ldr	r3, [r7, #12]
 8102e6c:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8102e6e:	68fb      	ldr	r3, [r7, #12]
 8102e70:	681b      	ldr	r3, [r3, #0]
 8102e72:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8102e76:	68fb      	ldr	r3, [r7, #12]
 8102e78:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8102e7a:	7812      	ldrb	r2, [r2, #0]
 8102e7c:	b2d2      	uxtb	r2, r2
 8102e7e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8102e80:	68fb      	ldr	r3, [r7, #12]
 8102e82:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8102e84:	1c5a      	adds	r2, r3, #1
 8102e86:	68fb      	ldr	r3, [r7, #12]
 8102e88:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8102e8a:	68fb      	ldr	r3, [r7, #12]
 8102e8c:	681b      	ldr	r3, [r3, #0]
 8102e8e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8102e92:	68fb      	ldr	r3, [r7, #12]
 8102e94:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8102e96:	7812      	ldrb	r2, [r2, #0]
 8102e98:	b2d2      	uxtb	r2, r2
 8102e9a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8102e9c:	68fb      	ldr	r3, [r7, #12]
 8102e9e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8102ea0:	1c5a      	adds	r2, r3, #1
 8102ea2:	68fb      	ldr	r3, [r7, #12]
 8102ea4:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 8102ea6:	68fb      	ldr	r3, [r7, #12]
 8102ea8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8102eac:	b29b      	uxth	r3, r3
 8102eae:	3b04      	subs	r3, #4
 8102eb0:	b29a      	uxth	r2, r3
 8102eb2:	68fb      	ldr	r3, [r7, #12]
 8102eb4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8102eb8:	68fb      	ldr	r3, [r7, #12]
 8102eba:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8102ebe:	853b      	strh	r3, [r7, #40]	@ 0x28
 8102ec0:	e047      	b.n	8102f52 <HAL_SPI_TransmitReceive+0x60a>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 8102ec2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8102ec4:	2b03      	cmp	r3, #3
 8102ec6:	d820      	bhi.n	8102f0a <HAL_SPI_TransmitReceive+0x5c2>
 8102ec8:	697b      	ldr	r3, [r7, #20]
 8102eca:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 8102ece:	2b00      	cmp	r3, #0
 8102ed0:	d01b      	beq.n	8102f0a <HAL_SPI_TransmitReceive+0x5c2>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8102ed2:	68fb      	ldr	r3, [r7, #12]
 8102ed4:	681b      	ldr	r3, [r3, #0]
 8102ed6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8102eda:	68fb      	ldr	r3, [r7, #12]
 8102edc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8102ede:	7812      	ldrb	r2, [r2, #0]
 8102ee0:	b2d2      	uxtb	r2, r2
 8102ee2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8102ee4:	68fb      	ldr	r3, [r7, #12]
 8102ee6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8102ee8:	1c5a      	adds	r2, r3, #1
 8102eea:	68fb      	ldr	r3, [r7, #12]
 8102eec:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8102eee:	68fb      	ldr	r3, [r7, #12]
 8102ef0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8102ef4:	b29b      	uxth	r3, r3
 8102ef6:	3b01      	subs	r3, #1
 8102ef8:	b29a      	uxth	r2, r3
 8102efa:	68fb      	ldr	r3, [r7, #12]
 8102efc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8102f00:	68fb      	ldr	r3, [r7, #12]
 8102f02:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8102f06:	853b      	strh	r3, [r7, #40]	@ 0x28
 8102f08:	e023      	b.n	8102f52 <HAL_SPI_TransmitReceive+0x60a>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8102f0a:	f7fe fa65 	bl	81013d8 <HAL_GetTick>
 8102f0e:	4602      	mov	r2, r0
 8102f10:	69bb      	ldr	r3, [r7, #24]
 8102f12:	1ad3      	subs	r3, r2, r3
 8102f14:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8102f16:	429a      	cmp	r2, r3
 8102f18:	d803      	bhi.n	8102f22 <HAL_SPI_TransmitReceive+0x5da>
 8102f1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8102f1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8102f20:	d102      	bne.n	8102f28 <HAL_SPI_TransmitReceive+0x5e0>
 8102f22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8102f24:	2b00      	cmp	r3, #0
 8102f26:	d114      	bne.n	8102f52 <HAL_SPI_TransmitReceive+0x60a>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8102f28:	68f8      	ldr	r0, [r7, #12]
 8102f2a:	f000 f845 	bl	8102fb8 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8102f2e:	68fb      	ldr	r3, [r7, #12]
 8102f30:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8102f34:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8102f38:	68fb      	ldr	r3, [r7, #12]
 8102f3a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 8102f3e:	68fb      	ldr	r3, [r7, #12]
 8102f40:	2201      	movs	r2, #1
 8102f42:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 8102f46:	68fb      	ldr	r3, [r7, #12]
 8102f48:	2200      	movs	r2, #0
 8102f4a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 8102f4e:	2303      	movs	r3, #3
 8102f50:	e02d      	b.n	8102fae <HAL_SPI_TransmitReceive+0x666>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8102f52:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8102f54:	2b00      	cmp	r3, #0
 8102f56:	f47f af11 	bne.w	8102d7c <HAL_SPI_TransmitReceive+0x434>
 8102f5a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8102f5c:	2b00      	cmp	r3, #0
 8102f5e:	f47f af0d 	bne.w	8102d7c <HAL_SPI_TransmitReceive+0x434>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8102f62:	69bb      	ldr	r3, [r7, #24]
 8102f64:	9300      	str	r3, [sp, #0]
 8102f66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8102f68:	2200      	movs	r2, #0
 8102f6a:	2108      	movs	r1, #8
 8102f6c:	68f8      	ldr	r0, [r7, #12]
 8102f6e:	f000 f8c3 	bl	81030f8 <SPI_WaitOnFlagUntilTimeout>
 8102f72:	4603      	mov	r3, r0
 8102f74:	2b00      	cmp	r3, #0
 8102f76:	d007      	beq.n	8102f88 <HAL_SPI_TransmitReceive+0x640>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8102f78:	68fb      	ldr	r3, [r7, #12]
 8102f7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8102f7e:	f043 0220 	orr.w	r2, r3, #32
 8102f82:	68fb      	ldr	r3, [r7, #12]
 8102f84:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8102f88:	68f8      	ldr	r0, [r7, #12]
 8102f8a:	f000 f815 	bl	8102fb8 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8102f8e:	68fb      	ldr	r3, [r7, #12]
 8102f90:	2201      	movs	r2, #1
 8102f92:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8102f96:	68fb      	ldr	r3, [r7, #12]
 8102f98:	2200      	movs	r2, #0
 8102f9a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8102f9e:	68fb      	ldr	r3, [r7, #12]
 8102fa0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8102fa4:	2b00      	cmp	r3, #0
 8102fa6:	d001      	beq.n	8102fac <HAL_SPI_TransmitReceive+0x664>
  {
    return HAL_ERROR;
 8102fa8:	2301      	movs	r3, #1
 8102faa:	e000      	b.n	8102fae <HAL_SPI_TransmitReceive+0x666>
  }
  else
  {
    return HAL_OK;
 8102fac:	2300      	movs	r3, #0
  }
}
 8102fae:	4618      	mov	r0, r3
 8102fb0:	3730      	adds	r7, #48	@ 0x30
 8102fb2:	46bd      	mov	sp, r7
 8102fb4:	bd80      	pop	{r7, pc}
 8102fb6:	bf00      	nop

08102fb8 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8102fb8:	b480      	push	{r7}
 8102fba:	b085      	sub	sp, #20
 8102fbc:	af00      	add	r7, sp, #0
 8102fbe:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8102fc0:	687b      	ldr	r3, [r7, #4]
 8102fc2:	681b      	ldr	r3, [r3, #0]
 8102fc4:	695b      	ldr	r3, [r3, #20]
 8102fc6:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8102fc8:	687b      	ldr	r3, [r7, #4]
 8102fca:	681b      	ldr	r3, [r3, #0]
 8102fcc:	699a      	ldr	r2, [r3, #24]
 8102fce:	687b      	ldr	r3, [r7, #4]
 8102fd0:	681b      	ldr	r3, [r3, #0]
 8102fd2:	f042 0208 	orr.w	r2, r2, #8
 8102fd6:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8102fd8:	687b      	ldr	r3, [r7, #4]
 8102fda:	681b      	ldr	r3, [r3, #0]
 8102fdc:	699a      	ldr	r2, [r3, #24]
 8102fde:	687b      	ldr	r3, [r7, #4]
 8102fe0:	681b      	ldr	r3, [r3, #0]
 8102fe2:	f042 0210 	orr.w	r2, r2, #16
 8102fe6:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8102fe8:	687b      	ldr	r3, [r7, #4]
 8102fea:	681b      	ldr	r3, [r3, #0]
 8102fec:	681a      	ldr	r2, [r3, #0]
 8102fee:	687b      	ldr	r3, [r7, #4]
 8102ff0:	681b      	ldr	r3, [r3, #0]
 8102ff2:	f022 0201 	bic.w	r2, r2, #1
 8102ff6:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8102ff8:	687b      	ldr	r3, [r7, #4]
 8102ffa:	681b      	ldr	r3, [r3, #0]
 8102ffc:	691b      	ldr	r3, [r3, #16]
 8102ffe:	687a      	ldr	r2, [r7, #4]
 8103000:	6812      	ldr	r2, [r2, #0]
 8103002:	f423 735b 	bic.w	r3, r3, #876	@ 0x36c
 8103006:	f023 0303 	bic.w	r3, r3, #3
 810300a:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 810300c:	687b      	ldr	r3, [r7, #4]
 810300e:	681b      	ldr	r3, [r3, #0]
 8103010:	689a      	ldr	r2, [r3, #8]
 8103012:	687b      	ldr	r3, [r7, #4]
 8103014:	681b      	ldr	r3, [r3, #0]
 8103016:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 810301a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 810301c:	687b      	ldr	r3, [r7, #4]
 810301e:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8103022:	b2db      	uxtb	r3, r3
 8103024:	2b04      	cmp	r3, #4
 8103026:	d014      	beq.n	8103052 <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8103028:	68fb      	ldr	r3, [r7, #12]
 810302a:	f003 0320 	and.w	r3, r3, #32
 810302e:	2b00      	cmp	r3, #0
 8103030:	d00f      	beq.n	8103052 <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8103032:	687b      	ldr	r3, [r7, #4]
 8103034:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8103038:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 810303c:	687b      	ldr	r3, [r7, #4]
 810303e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8103042:	687b      	ldr	r3, [r7, #4]
 8103044:	681b      	ldr	r3, [r3, #0]
 8103046:	699a      	ldr	r2, [r3, #24]
 8103048:	687b      	ldr	r3, [r7, #4]
 810304a:	681b      	ldr	r3, [r3, #0]
 810304c:	f042 0220 	orr.w	r2, r2, #32
 8103050:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8103052:	687b      	ldr	r3, [r7, #4]
 8103054:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8103058:	b2db      	uxtb	r3, r3
 810305a:	2b03      	cmp	r3, #3
 810305c:	d014      	beq.n	8103088 <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 810305e:	68fb      	ldr	r3, [r7, #12]
 8103060:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8103064:	2b00      	cmp	r3, #0
 8103066:	d00f      	beq.n	8103088 <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8103068:	687b      	ldr	r3, [r7, #4]
 810306a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 810306e:	f043 0204 	orr.w	r2, r3, #4
 8103072:	687b      	ldr	r3, [r7, #4]
 8103074:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8103078:	687b      	ldr	r3, [r7, #4]
 810307a:	681b      	ldr	r3, [r3, #0]
 810307c:	699a      	ldr	r2, [r3, #24]
 810307e:	687b      	ldr	r3, [r7, #4]
 8103080:	681b      	ldr	r3, [r3, #0]
 8103082:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8103086:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8103088:	68fb      	ldr	r3, [r7, #12]
 810308a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 810308e:	2b00      	cmp	r3, #0
 8103090:	d00f      	beq.n	81030b2 <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8103092:	687b      	ldr	r3, [r7, #4]
 8103094:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8103098:	f043 0201 	orr.w	r2, r3, #1
 810309c:	687b      	ldr	r3, [r7, #4]
 810309e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 81030a2:	687b      	ldr	r3, [r7, #4]
 81030a4:	681b      	ldr	r3, [r3, #0]
 81030a6:	699a      	ldr	r2, [r3, #24]
 81030a8:	687b      	ldr	r3, [r7, #4]
 81030aa:	681b      	ldr	r3, [r3, #0]
 81030ac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 81030b0:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 81030b2:	68fb      	ldr	r3, [r7, #12]
 81030b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 81030b8:	2b00      	cmp	r3, #0
 81030ba:	d00f      	beq.n	81030dc <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 81030bc:	687b      	ldr	r3, [r7, #4]
 81030be:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 81030c2:	f043 0208 	orr.w	r2, r3, #8
 81030c6:	687b      	ldr	r3, [r7, #4]
 81030c8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 81030cc:	687b      	ldr	r3, [r7, #4]
 81030ce:	681b      	ldr	r3, [r3, #0]
 81030d0:	699a      	ldr	r2, [r3, #24]
 81030d2:	687b      	ldr	r3, [r7, #4]
 81030d4:	681b      	ldr	r3, [r3, #0]
 81030d6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 81030da:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 81030dc:	687b      	ldr	r3, [r7, #4]
 81030de:	2200      	movs	r2, #0
 81030e0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 81030e4:	687b      	ldr	r3, [r7, #4]
 81030e6:	2200      	movs	r2, #0
 81030e8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 81030ec:	bf00      	nop
 81030ee:	3714      	adds	r7, #20
 81030f0:	46bd      	mov	sp, r7
 81030f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81030f6:	4770      	bx	lr

081030f8 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 81030f8:	b580      	push	{r7, lr}
 81030fa:	b084      	sub	sp, #16
 81030fc:	af00      	add	r7, sp, #0
 81030fe:	60f8      	str	r0, [r7, #12]
 8103100:	60b9      	str	r1, [r7, #8]
 8103102:	603b      	str	r3, [r7, #0]
 8103104:	4613      	mov	r3, r2
 8103106:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8103108:	e010      	b.n	810312c <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 810310a:	f7fe f965 	bl	81013d8 <HAL_GetTick>
 810310e:	4602      	mov	r2, r0
 8103110:	69bb      	ldr	r3, [r7, #24]
 8103112:	1ad3      	subs	r3, r2, r3
 8103114:	683a      	ldr	r2, [r7, #0]
 8103116:	429a      	cmp	r2, r3
 8103118:	d803      	bhi.n	8103122 <SPI_WaitOnFlagUntilTimeout+0x2a>
 810311a:	683b      	ldr	r3, [r7, #0]
 810311c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8103120:	d102      	bne.n	8103128 <SPI_WaitOnFlagUntilTimeout+0x30>
 8103122:	683b      	ldr	r3, [r7, #0]
 8103124:	2b00      	cmp	r3, #0
 8103126:	d101      	bne.n	810312c <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8103128:	2303      	movs	r3, #3
 810312a:	e00f      	b.n	810314c <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 810312c:	68fb      	ldr	r3, [r7, #12]
 810312e:	681b      	ldr	r3, [r3, #0]
 8103130:	695a      	ldr	r2, [r3, #20]
 8103132:	68bb      	ldr	r3, [r7, #8]
 8103134:	4013      	ands	r3, r2
 8103136:	68ba      	ldr	r2, [r7, #8]
 8103138:	429a      	cmp	r2, r3
 810313a:	bf0c      	ite	eq
 810313c:	2301      	moveq	r3, #1
 810313e:	2300      	movne	r3, #0
 8103140:	b2db      	uxtb	r3, r3
 8103142:	461a      	mov	r2, r3
 8103144:	79fb      	ldrb	r3, [r7, #7]
 8103146:	429a      	cmp	r2, r3
 8103148:	d0df      	beq.n	810310a <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 810314a:	2300      	movs	r3, #0
}
 810314c:	4618      	mov	r0, r3
 810314e:	3710      	adds	r7, #16
 8103150:	46bd      	mov	sp, r7
 8103152:	bd80      	pop	{r7, pc}

08103154 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8103154:	b480      	push	{r7}
 8103156:	b085      	sub	sp, #20
 8103158:	af00      	add	r7, sp, #0
 810315a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 810315c:	687b      	ldr	r3, [r7, #4]
 810315e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8103160:	095b      	lsrs	r3, r3, #5
 8103162:	3301      	adds	r3, #1
 8103164:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8103166:	687b      	ldr	r3, [r7, #4]
 8103168:	68db      	ldr	r3, [r3, #12]
 810316a:	3301      	adds	r3, #1
 810316c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 810316e:	68bb      	ldr	r3, [r7, #8]
 8103170:	3307      	adds	r3, #7
 8103172:	08db      	lsrs	r3, r3, #3
 8103174:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8103176:	68bb      	ldr	r3, [r7, #8]
 8103178:	68fa      	ldr	r2, [r7, #12]
 810317a:	fb02 f303 	mul.w	r3, r2, r3
}
 810317e:	4618      	mov	r0, r3
 8103180:	3714      	adds	r7, #20
 8103182:	46bd      	mov	sp, r7
 8103184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103188:	4770      	bx	lr
	...

0810318c <__libc_init_array>:
 810318c:	b570      	push	{r4, r5, r6, lr}
 810318e:	4d0d      	ldr	r5, [pc, #52]	@ (81031c4 <__libc_init_array+0x38>)
 8103190:	4c0d      	ldr	r4, [pc, #52]	@ (81031c8 <__libc_init_array+0x3c>)
 8103192:	1b64      	subs	r4, r4, r5
 8103194:	10a4      	asrs	r4, r4, #2
 8103196:	2600      	movs	r6, #0
 8103198:	42a6      	cmp	r6, r4
 810319a:	d109      	bne.n	81031b0 <__libc_init_array+0x24>
 810319c:	4d0b      	ldr	r5, [pc, #44]	@ (81031cc <__libc_init_array+0x40>)
 810319e:	4c0c      	ldr	r4, [pc, #48]	@ (81031d0 <__libc_init_array+0x44>)
 81031a0:	f000 f818 	bl	81031d4 <_init>
 81031a4:	1b64      	subs	r4, r4, r5
 81031a6:	10a4      	asrs	r4, r4, #2
 81031a8:	2600      	movs	r6, #0
 81031aa:	42a6      	cmp	r6, r4
 81031ac:	d105      	bne.n	81031ba <__libc_init_array+0x2e>
 81031ae:	bd70      	pop	{r4, r5, r6, pc}
 81031b0:	f855 3b04 	ldr.w	r3, [r5], #4
 81031b4:	4798      	blx	r3
 81031b6:	3601      	adds	r6, #1
 81031b8:	e7ee      	b.n	8103198 <__libc_init_array+0xc>
 81031ba:	f855 3b04 	ldr.w	r3, [r5], #4
 81031be:	4798      	blx	r3
 81031c0:	3601      	adds	r6, #1
 81031c2:	e7f2      	b.n	81031aa <__libc_init_array+0x1e>
 81031c4:	0810321c 	.word	0x0810321c
 81031c8:	0810321c 	.word	0x0810321c
 81031cc:	0810321c 	.word	0x0810321c
 81031d0:	08103220 	.word	0x08103220

081031d4 <_init>:
 81031d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 81031d6:	bf00      	nop
 81031d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 81031da:	bc08      	pop	{r3}
 81031dc:	469e      	mov	lr, r3
 81031de:	4770      	bx	lr

081031e0 <_fini>:
 81031e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 81031e2:	bf00      	nop
 81031e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 81031e6:	bc08      	pop	{r3}
 81031e8:	469e      	mov	lr, r3
 81031ea:	4770      	bx	lr
