
Rx_M4_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003504  08100298  08100298  00001298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  0810379c  0810379c  0000479c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  081037bc  081037bc  000047bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  081037c4  081037c4  000047c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  081037c8  081037c8  000047c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000018  10000000  081037cc  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000000e4  10000018  081037e4  00005018  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  100000fc  081037e4  000050fc  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00005018  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000b553  00000000  00000000  00005048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00001ef8  00000000  00000000  0001059b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000a10  00000000  00000000  00012498  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 0000076a  00000000  00000000  00012ea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003a05f  00000000  00000000  00013612  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0000d481  00000000  00000000  0004d671  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0017cbfe  00000000  00000000  0005aaf2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001d76f0  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000290c  00000000  00000000  001d7734  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000056  00000000  00000000  001da040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08100298 <__do_global_dtors_aux>:
 8100298:	b510      	push	{r4, lr}
 810029a:	4c05      	ldr	r4, [pc, #20]	@ (81002b0 <__do_global_dtors_aux+0x18>)
 810029c:	7823      	ldrb	r3, [r4, #0]
 810029e:	b933      	cbnz	r3, 81002ae <__do_global_dtors_aux+0x16>
 81002a0:	4b04      	ldr	r3, [pc, #16]	@ (81002b4 <__do_global_dtors_aux+0x1c>)
 81002a2:	b113      	cbz	r3, 81002aa <__do_global_dtors_aux+0x12>
 81002a4:	4804      	ldr	r0, [pc, #16]	@ (81002b8 <__do_global_dtors_aux+0x20>)
 81002a6:	f3af 8000 	nop.w
 81002aa:	2301      	movs	r3, #1
 81002ac:	7023      	strb	r3, [r4, #0]
 81002ae:	bd10      	pop	{r4, pc}
 81002b0:	10000018 	.word	0x10000018
 81002b4:	00000000 	.word	0x00000000
 81002b8:	08103784 	.word	0x08103784

081002bc <frame_dummy>:
 81002bc:	b508      	push	{r3, lr}
 81002be:	4b03      	ldr	r3, [pc, #12]	@ (81002cc <frame_dummy+0x10>)
 81002c0:	b11b      	cbz	r3, 81002ca <frame_dummy+0xe>
 81002c2:	4903      	ldr	r1, [pc, #12]	@ (81002d0 <frame_dummy+0x14>)
 81002c4:	4803      	ldr	r0, [pc, #12]	@ (81002d4 <frame_dummy+0x18>)
 81002c6:	f3af 8000 	nop.w
 81002ca:	bd08      	pop	{r3, pc}
 81002cc:	00000000 	.word	0x00000000
 81002d0:	1000001c 	.word	0x1000001c
 81002d4:	08103784 	.word	0x08103784

081002d8 <__aeabi_dmul>:
 81002d8:	b570      	push	{r4, r5, r6, lr}
 81002da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 81002de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 81002e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 81002e6:	bf1d      	ittte	ne
 81002e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 81002ec:	ea94 0f0c 	teqne	r4, ip
 81002f0:	ea95 0f0c 	teqne	r5, ip
 81002f4:	f000 f8de 	bleq	81004b4 <__aeabi_dmul+0x1dc>
 81002f8:	442c      	add	r4, r5
 81002fa:	ea81 0603 	eor.w	r6, r1, r3
 81002fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8100302:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8100306:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 810030a:	bf18      	it	ne
 810030c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8100310:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8100314:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8100318:	d038      	beq.n	810038c <__aeabi_dmul+0xb4>
 810031a:	fba0 ce02 	umull	ip, lr, r0, r2
 810031e:	f04f 0500 	mov.w	r5, #0
 8100322:	fbe1 e502 	umlal	lr, r5, r1, r2
 8100326:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 810032a:	fbe0 e503 	umlal	lr, r5, r0, r3
 810032e:	f04f 0600 	mov.w	r6, #0
 8100332:	fbe1 5603 	umlal	r5, r6, r1, r3
 8100336:	f09c 0f00 	teq	ip, #0
 810033a:	bf18      	it	ne
 810033c:	f04e 0e01 	orrne.w	lr, lr, #1
 8100340:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8100344:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8100348:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 810034c:	d204      	bcs.n	8100358 <__aeabi_dmul+0x80>
 810034e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8100352:	416d      	adcs	r5, r5
 8100354:	eb46 0606 	adc.w	r6, r6, r6
 8100358:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 810035c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8100360:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8100364:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8100368:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 810036c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8100370:	bf88      	it	hi
 8100372:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8100376:	d81e      	bhi.n	81003b6 <__aeabi_dmul+0xde>
 8100378:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 810037c:	bf08      	it	eq
 810037e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8100382:	f150 0000 	adcs.w	r0, r0, #0
 8100386:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 810038a:	bd70      	pop	{r4, r5, r6, pc}
 810038c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8100390:	ea46 0101 	orr.w	r1, r6, r1
 8100394:	ea40 0002 	orr.w	r0, r0, r2
 8100398:	ea81 0103 	eor.w	r1, r1, r3
 810039c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 81003a0:	bfc2      	ittt	gt
 81003a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 81003a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 81003aa:	bd70      	popgt	{r4, r5, r6, pc}
 81003ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 81003b0:	f04f 0e00 	mov.w	lr, #0
 81003b4:	3c01      	subs	r4, #1
 81003b6:	f300 80ab 	bgt.w	8100510 <__aeabi_dmul+0x238>
 81003ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 81003be:	bfde      	ittt	le
 81003c0:	2000      	movle	r0, #0
 81003c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 81003c6:	bd70      	pople	{r4, r5, r6, pc}
 81003c8:	f1c4 0400 	rsb	r4, r4, #0
 81003cc:	3c20      	subs	r4, #32
 81003ce:	da35      	bge.n	810043c <__aeabi_dmul+0x164>
 81003d0:	340c      	adds	r4, #12
 81003d2:	dc1b      	bgt.n	810040c <__aeabi_dmul+0x134>
 81003d4:	f104 0414 	add.w	r4, r4, #20
 81003d8:	f1c4 0520 	rsb	r5, r4, #32
 81003dc:	fa00 f305 	lsl.w	r3, r0, r5
 81003e0:	fa20 f004 	lsr.w	r0, r0, r4
 81003e4:	fa01 f205 	lsl.w	r2, r1, r5
 81003e8:	ea40 0002 	orr.w	r0, r0, r2
 81003ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 81003f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 81003f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 81003f8:	fa21 f604 	lsr.w	r6, r1, r4
 81003fc:	eb42 0106 	adc.w	r1, r2, r6
 8100400:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8100404:	bf08      	it	eq
 8100406:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 810040a:	bd70      	pop	{r4, r5, r6, pc}
 810040c:	f1c4 040c 	rsb	r4, r4, #12
 8100410:	f1c4 0520 	rsb	r5, r4, #32
 8100414:	fa00 f304 	lsl.w	r3, r0, r4
 8100418:	fa20 f005 	lsr.w	r0, r0, r5
 810041c:	fa01 f204 	lsl.w	r2, r1, r4
 8100420:	ea40 0002 	orr.w	r0, r0, r2
 8100424:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8100428:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 810042c:	f141 0100 	adc.w	r1, r1, #0
 8100430:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8100434:	bf08      	it	eq
 8100436:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 810043a:	bd70      	pop	{r4, r5, r6, pc}
 810043c:	f1c4 0520 	rsb	r5, r4, #32
 8100440:	fa00 f205 	lsl.w	r2, r0, r5
 8100444:	ea4e 0e02 	orr.w	lr, lr, r2
 8100448:	fa20 f304 	lsr.w	r3, r0, r4
 810044c:	fa01 f205 	lsl.w	r2, r1, r5
 8100450:	ea43 0302 	orr.w	r3, r3, r2
 8100454:	fa21 f004 	lsr.w	r0, r1, r4
 8100458:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 810045c:	fa21 f204 	lsr.w	r2, r1, r4
 8100460:	ea20 0002 	bic.w	r0, r0, r2
 8100464:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8100468:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 810046c:	bf08      	it	eq
 810046e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8100472:	bd70      	pop	{r4, r5, r6, pc}
 8100474:	f094 0f00 	teq	r4, #0
 8100478:	d10f      	bne.n	810049a <__aeabi_dmul+0x1c2>
 810047a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 810047e:	0040      	lsls	r0, r0, #1
 8100480:	eb41 0101 	adc.w	r1, r1, r1
 8100484:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8100488:	bf08      	it	eq
 810048a:	3c01      	subeq	r4, #1
 810048c:	d0f7      	beq.n	810047e <__aeabi_dmul+0x1a6>
 810048e:	ea41 0106 	orr.w	r1, r1, r6
 8100492:	f095 0f00 	teq	r5, #0
 8100496:	bf18      	it	ne
 8100498:	4770      	bxne	lr
 810049a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 810049e:	0052      	lsls	r2, r2, #1
 81004a0:	eb43 0303 	adc.w	r3, r3, r3
 81004a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 81004a8:	bf08      	it	eq
 81004aa:	3d01      	subeq	r5, #1
 81004ac:	d0f7      	beq.n	810049e <__aeabi_dmul+0x1c6>
 81004ae:	ea43 0306 	orr.w	r3, r3, r6
 81004b2:	4770      	bx	lr
 81004b4:	ea94 0f0c 	teq	r4, ip
 81004b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 81004bc:	bf18      	it	ne
 81004be:	ea95 0f0c 	teqne	r5, ip
 81004c2:	d00c      	beq.n	81004de <__aeabi_dmul+0x206>
 81004c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 81004c8:	bf18      	it	ne
 81004ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 81004ce:	d1d1      	bne.n	8100474 <__aeabi_dmul+0x19c>
 81004d0:	ea81 0103 	eor.w	r1, r1, r3
 81004d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 81004d8:	f04f 0000 	mov.w	r0, #0
 81004dc:	bd70      	pop	{r4, r5, r6, pc}
 81004de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 81004e2:	bf06      	itte	eq
 81004e4:	4610      	moveq	r0, r2
 81004e6:	4619      	moveq	r1, r3
 81004e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 81004ec:	d019      	beq.n	8100522 <__aeabi_dmul+0x24a>
 81004ee:	ea94 0f0c 	teq	r4, ip
 81004f2:	d102      	bne.n	81004fa <__aeabi_dmul+0x222>
 81004f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 81004f8:	d113      	bne.n	8100522 <__aeabi_dmul+0x24a>
 81004fa:	ea95 0f0c 	teq	r5, ip
 81004fe:	d105      	bne.n	810050c <__aeabi_dmul+0x234>
 8100500:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8100504:	bf1c      	itt	ne
 8100506:	4610      	movne	r0, r2
 8100508:	4619      	movne	r1, r3
 810050a:	d10a      	bne.n	8100522 <__aeabi_dmul+0x24a>
 810050c:	ea81 0103 	eor.w	r1, r1, r3
 8100510:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8100514:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8100518:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 810051c:	f04f 0000 	mov.w	r0, #0
 8100520:	bd70      	pop	{r4, r5, r6, pc}
 8100522:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8100526:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 810052a:	bd70      	pop	{r4, r5, r6, pc}

0810052c <__aeabi_drsub>:
 810052c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8100530:	e002      	b.n	8100538 <__adddf3>
 8100532:	bf00      	nop

08100534 <__aeabi_dsub>:
 8100534:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08100538 <__adddf3>:
 8100538:	b530      	push	{r4, r5, lr}
 810053a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 810053e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8100542:	ea94 0f05 	teq	r4, r5
 8100546:	bf08      	it	eq
 8100548:	ea90 0f02 	teqeq	r0, r2
 810054c:	bf1f      	itttt	ne
 810054e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8100552:	ea55 0c02 	orrsne.w	ip, r5, r2
 8100556:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 810055a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 810055e:	f000 80e2 	beq.w	8100726 <__adddf3+0x1ee>
 8100562:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8100566:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 810056a:	bfb8      	it	lt
 810056c:	426d      	neglt	r5, r5
 810056e:	dd0c      	ble.n	810058a <__adddf3+0x52>
 8100570:	442c      	add	r4, r5
 8100572:	ea80 0202 	eor.w	r2, r0, r2
 8100576:	ea81 0303 	eor.w	r3, r1, r3
 810057a:	ea82 0000 	eor.w	r0, r2, r0
 810057e:	ea83 0101 	eor.w	r1, r3, r1
 8100582:	ea80 0202 	eor.w	r2, r0, r2
 8100586:	ea81 0303 	eor.w	r3, r1, r3
 810058a:	2d36      	cmp	r5, #54	@ 0x36
 810058c:	bf88      	it	hi
 810058e:	bd30      	pophi	{r4, r5, pc}
 8100590:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8100594:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8100598:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 810059c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 81005a0:	d002      	beq.n	81005a8 <__adddf3+0x70>
 81005a2:	4240      	negs	r0, r0
 81005a4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 81005a8:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 81005ac:	ea4f 3303 	mov.w	r3, r3, lsl #12
 81005b0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 81005b4:	d002      	beq.n	81005bc <__adddf3+0x84>
 81005b6:	4252      	negs	r2, r2
 81005b8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 81005bc:	ea94 0f05 	teq	r4, r5
 81005c0:	f000 80a7 	beq.w	8100712 <__adddf3+0x1da>
 81005c4:	f1a4 0401 	sub.w	r4, r4, #1
 81005c8:	f1d5 0e20 	rsbs	lr, r5, #32
 81005cc:	db0d      	blt.n	81005ea <__adddf3+0xb2>
 81005ce:	fa02 fc0e 	lsl.w	ip, r2, lr
 81005d2:	fa22 f205 	lsr.w	r2, r2, r5
 81005d6:	1880      	adds	r0, r0, r2
 81005d8:	f141 0100 	adc.w	r1, r1, #0
 81005dc:	fa03 f20e 	lsl.w	r2, r3, lr
 81005e0:	1880      	adds	r0, r0, r2
 81005e2:	fa43 f305 	asr.w	r3, r3, r5
 81005e6:	4159      	adcs	r1, r3
 81005e8:	e00e      	b.n	8100608 <__adddf3+0xd0>
 81005ea:	f1a5 0520 	sub.w	r5, r5, #32
 81005ee:	f10e 0e20 	add.w	lr, lr, #32
 81005f2:	2a01      	cmp	r2, #1
 81005f4:	fa03 fc0e 	lsl.w	ip, r3, lr
 81005f8:	bf28      	it	cs
 81005fa:	f04c 0c02 	orrcs.w	ip, ip, #2
 81005fe:	fa43 f305 	asr.w	r3, r3, r5
 8100602:	18c0      	adds	r0, r0, r3
 8100604:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8100608:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 810060c:	d507      	bpl.n	810061e <__adddf3+0xe6>
 810060e:	f04f 0e00 	mov.w	lr, #0
 8100612:	f1dc 0c00 	rsbs	ip, ip, #0
 8100616:	eb7e 0000 	sbcs.w	r0, lr, r0
 810061a:	eb6e 0101 	sbc.w	r1, lr, r1
 810061e:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8100622:	d31b      	bcc.n	810065c <__adddf3+0x124>
 8100624:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8100628:	d30c      	bcc.n	8100644 <__adddf3+0x10c>
 810062a:	0849      	lsrs	r1, r1, #1
 810062c:	ea5f 0030 	movs.w	r0, r0, rrx
 8100630:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8100634:	f104 0401 	add.w	r4, r4, #1
 8100638:	ea4f 5244 	mov.w	r2, r4, lsl #21
 810063c:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8100640:	f080 809a 	bcs.w	8100778 <__adddf3+0x240>
 8100644:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8100648:	bf08      	it	eq
 810064a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 810064e:	f150 0000 	adcs.w	r0, r0, #0
 8100652:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8100656:	ea41 0105 	orr.w	r1, r1, r5
 810065a:	bd30      	pop	{r4, r5, pc}
 810065c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8100660:	4140      	adcs	r0, r0
 8100662:	eb41 0101 	adc.w	r1, r1, r1
 8100666:	3c01      	subs	r4, #1
 8100668:	bf28      	it	cs
 810066a:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 810066e:	d2e9      	bcs.n	8100644 <__adddf3+0x10c>
 8100670:	f091 0f00 	teq	r1, #0
 8100674:	bf04      	itt	eq
 8100676:	4601      	moveq	r1, r0
 8100678:	2000      	moveq	r0, #0
 810067a:	fab1 f381 	clz	r3, r1
 810067e:	bf08      	it	eq
 8100680:	3320      	addeq	r3, #32
 8100682:	f1a3 030b 	sub.w	r3, r3, #11
 8100686:	f1b3 0220 	subs.w	r2, r3, #32
 810068a:	da0c      	bge.n	81006a6 <__adddf3+0x16e>
 810068c:	320c      	adds	r2, #12
 810068e:	dd08      	ble.n	81006a2 <__adddf3+0x16a>
 8100690:	f102 0c14 	add.w	ip, r2, #20
 8100694:	f1c2 020c 	rsb	r2, r2, #12
 8100698:	fa01 f00c 	lsl.w	r0, r1, ip
 810069c:	fa21 f102 	lsr.w	r1, r1, r2
 81006a0:	e00c      	b.n	81006bc <__adddf3+0x184>
 81006a2:	f102 0214 	add.w	r2, r2, #20
 81006a6:	bfd8      	it	le
 81006a8:	f1c2 0c20 	rsble	ip, r2, #32
 81006ac:	fa01 f102 	lsl.w	r1, r1, r2
 81006b0:	fa20 fc0c 	lsr.w	ip, r0, ip
 81006b4:	bfdc      	itt	le
 81006b6:	ea41 010c 	orrle.w	r1, r1, ip
 81006ba:	4090      	lslle	r0, r2
 81006bc:	1ae4      	subs	r4, r4, r3
 81006be:	bfa2      	ittt	ge
 81006c0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 81006c4:	4329      	orrge	r1, r5
 81006c6:	bd30      	popge	{r4, r5, pc}
 81006c8:	ea6f 0404 	mvn.w	r4, r4
 81006cc:	3c1f      	subs	r4, #31
 81006ce:	da1c      	bge.n	810070a <__adddf3+0x1d2>
 81006d0:	340c      	adds	r4, #12
 81006d2:	dc0e      	bgt.n	81006f2 <__adddf3+0x1ba>
 81006d4:	f104 0414 	add.w	r4, r4, #20
 81006d8:	f1c4 0220 	rsb	r2, r4, #32
 81006dc:	fa20 f004 	lsr.w	r0, r0, r4
 81006e0:	fa01 f302 	lsl.w	r3, r1, r2
 81006e4:	ea40 0003 	orr.w	r0, r0, r3
 81006e8:	fa21 f304 	lsr.w	r3, r1, r4
 81006ec:	ea45 0103 	orr.w	r1, r5, r3
 81006f0:	bd30      	pop	{r4, r5, pc}
 81006f2:	f1c4 040c 	rsb	r4, r4, #12
 81006f6:	f1c4 0220 	rsb	r2, r4, #32
 81006fa:	fa20 f002 	lsr.w	r0, r0, r2
 81006fe:	fa01 f304 	lsl.w	r3, r1, r4
 8100702:	ea40 0003 	orr.w	r0, r0, r3
 8100706:	4629      	mov	r1, r5
 8100708:	bd30      	pop	{r4, r5, pc}
 810070a:	fa21 f004 	lsr.w	r0, r1, r4
 810070e:	4629      	mov	r1, r5
 8100710:	bd30      	pop	{r4, r5, pc}
 8100712:	f094 0f00 	teq	r4, #0
 8100716:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 810071a:	bf06      	itte	eq
 810071c:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8100720:	3401      	addeq	r4, #1
 8100722:	3d01      	subne	r5, #1
 8100724:	e74e      	b.n	81005c4 <__adddf3+0x8c>
 8100726:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 810072a:	bf18      	it	ne
 810072c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8100730:	d029      	beq.n	8100786 <__adddf3+0x24e>
 8100732:	ea94 0f05 	teq	r4, r5
 8100736:	bf08      	it	eq
 8100738:	ea90 0f02 	teqeq	r0, r2
 810073c:	d005      	beq.n	810074a <__adddf3+0x212>
 810073e:	ea54 0c00 	orrs.w	ip, r4, r0
 8100742:	bf04      	itt	eq
 8100744:	4619      	moveq	r1, r3
 8100746:	4610      	moveq	r0, r2
 8100748:	bd30      	pop	{r4, r5, pc}
 810074a:	ea91 0f03 	teq	r1, r3
 810074e:	bf1e      	ittt	ne
 8100750:	2100      	movne	r1, #0
 8100752:	2000      	movne	r0, #0
 8100754:	bd30      	popne	{r4, r5, pc}
 8100756:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 810075a:	d105      	bne.n	8100768 <__adddf3+0x230>
 810075c:	0040      	lsls	r0, r0, #1
 810075e:	4149      	adcs	r1, r1
 8100760:	bf28      	it	cs
 8100762:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8100766:	bd30      	pop	{r4, r5, pc}
 8100768:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 810076c:	bf3c      	itt	cc
 810076e:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8100772:	bd30      	popcc	{r4, r5, pc}
 8100774:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8100778:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 810077c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8100780:	f04f 0000 	mov.w	r0, #0
 8100784:	bd30      	pop	{r4, r5, pc}
 8100786:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 810078a:	bf1a      	itte	ne
 810078c:	4619      	movne	r1, r3
 810078e:	4610      	movne	r0, r2
 8100790:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8100794:	bf1c      	itt	ne
 8100796:	460b      	movne	r3, r1
 8100798:	4602      	movne	r2, r0
 810079a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 810079e:	bf06      	itte	eq
 81007a0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 81007a4:	ea91 0f03 	teqeq	r1, r3
 81007a8:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 81007ac:	bd30      	pop	{r4, r5, pc}
 81007ae:	bf00      	nop

081007b0 <__aeabi_ui2d>:
 81007b0:	f090 0f00 	teq	r0, #0
 81007b4:	bf04      	itt	eq
 81007b6:	2100      	moveq	r1, #0
 81007b8:	4770      	bxeq	lr
 81007ba:	b530      	push	{r4, r5, lr}
 81007bc:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 81007c0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 81007c4:	f04f 0500 	mov.w	r5, #0
 81007c8:	f04f 0100 	mov.w	r1, #0
 81007cc:	e750      	b.n	8100670 <__adddf3+0x138>
 81007ce:	bf00      	nop

081007d0 <__aeabi_i2d>:
 81007d0:	f090 0f00 	teq	r0, #0
 81007d4:	bf04      	itt	eq
 81007d6:	2100      	moveq	r1, #0
 81007d8:	4770      	bxeq	lr
 81007da:	b530      	push	{r4, r5, lr}
 81007dc:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 81007e0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 81007e4:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 81007e8:	bf48      	it	mi
 81007ea:	4240      	negmi	r0, r0
 81007ec:	f04f 0100 	mov.w	r1, #0
 81007f0:	e73e      	b.n	8100670 <__adddf3+0x138>
 81007f2:	bf00      	nop

081007f4 <__aeabi_f2d>:
 81007f4:	0042      	lsls	r2, r0, #1
 81007f6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 81007fa:	ea4f 0131 	mov.w	r1, r1, rrx
 81007fe:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8100802:	bf1f      	itttt	ne
 8100804:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8100808:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 810080c:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8100810:	4770      	bxne	lr
 8100812:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8100816:	bf08      	it	eq
 8100818:	4770      	bxeq	lr
 810081a:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 810081e:	bf04      	itt	eq
 8100820:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8100824:	4770      	bxeq	lr
 8100826:	b530      	push	{r4, r5, lr}
 8100828:	f44f 7460 	mov.w	r4, #896	@ 0x380
 810082c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8100830:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8100834:	e71c      	b.n	8100670 <__adddf3+0x138>
 8100836:	bf00      	nop

08100838 <__aeabi_ul2d>:
 8100838:	ea50 0201 	orrs.w	r2, r0, r1
 810083c:	bf08      	it	eq
 810083e:	4770      	bxeq	lr
 8100840:	b530      	push	{r4, r5, lr}
 8100842:	f04f 0500 	mov.w	r5, #0
 8100846:	e00a      	b.n	810085e <__aeabi_l2d+0x16>

08100848 <__aeabi_l2d>:
 8100848:	ea50 0201 	orrs.w	r2, r0, r1
 810084c:	bf08      	it	eq
 810084e:	4770      	bxeq	lr
 8100850:	b530      	push	{r4, r5, lr}
 8100852:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8100856:	d502      	bpl.n	810085e <__aeabi_l2d+0x16>
 8100858:	4240      	negs	r0, r0
 810085a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 810085e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8100862:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8100866:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 810086a:	f43f aed8 	beq.w	810061e <__adddf3+0xe6>
 810086e:	f04f 0203 	mov.w	r2, #3
 8100872:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8100876:	bf18      	it	ne
 8100878:	3203      	addne	r2, #3
 810087a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 810087e:	bf18      	it	ne
 8100880:	3203      	addne	r2, #3
 8100882:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8100886:	f1c2 0320 	rsb	r3, r2, #32
 810088a:	fa00 fc03 	lsl.w	ip, r0, r3
 810088e:	fa20 f002 	lsr.w	r0, r0, r2
 8100892:	fa01 fe03 	lsl.w	lr, r1, r3
 8100896:	ea40 000e 	orr.w	r0, r0, lr
 810089a:	fa21 f102 	lsr.w	r1, r1, r2
 810089e:	4414      	add	r4, r2
 81008a0:	e6bd      	b.n	810061e <__adddf3+0xe6>
 81008a2:	bf00      	nop

081008a4 <__gedf2>:
 81008a4:	f04f 3cff 	mov.w	ip, #4294967295
 81008a8:	e006      	b.n	81008b8 <__cmpdf2+0x4>
 81008aa:	bf00      	nop

081008ac <__ledf2>:
 81008ac:	f04f 0c01 	mov.w	ip, #1
 81008b0:	e002      	b.n	81008b8 <__cmpdf2+0x4>
 81008b2:	bf00      	nop

081008b4 <__cmpdf2>:
 81008b4:	f04f 0c01 	mov.w	ip, #1
 81008b8:	f84d cd04 	str.w	ip, [sp, #-4]!
 81008bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 81008c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 81008c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 81008c8:	bf18      	it	ne
 81008ca:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 81008ce:	d01b      	beq.n	8100908 <__cmpdf2+0x54>
 81008d0:	b001      	add	sp, #4
 81008d2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 81008d6:	bf0c      	ite	eq
 81008d8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 81008dc:	ea91 0f03 	teqne	r1, r3
 81008e0:	bf02      	ittt	eq
 81008e2:	ea90 0f02 	teqeq	r0, r2
 81008e6:	2000      	moveq	r0, #0
 81008e8:	4770      	bxeq	lr
 81008ea:	f110 0f00 	cmn.w	r0, #0
 81008ee:	ea91 0f03 	teq	r1, r3
 81008f2:	bf58      	it	pl
 81008f4:	4299      	cmppl	r1, r3
 81008f6:	bf08      	it	eq
 81008f8:	4290      	cmpeq	r0, r2
 81008fa:	bf2c      	ite	cs
 81008fc:	17d8      	asrcs	r0, r3, #31
 81008fe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8100902:	f040 0001 	orr.w	r0, r0, #1
 8100906:	4770      	bx	lr
 8100908:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 810090c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100910:	d102      	bne.n	8100918 <__cmpdf2+0x64>
 8100912:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100916:	d107      	bne.n	8100928 <__cmpdf2+0x74>
 8100918:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 810091c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100920:	d1d6      	bne.n	81008d0 <__cmpdf2+0x1c>
 8100922:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100926:	d0d3      	beq.n	81008d0 <__cmpdf2+0x1c>
 8100928:	f85d 0b04 	ldr.w	r0, [sp], #4
 810092c:	4770      	bx	lr
 810092e:	bf00      	nop

08100930 <__aeabi_cdrcmple>:
 8100930:	4684      	mov	ip, r0
 8100932:	4610      	mov	r0, r2
 8100934:	4662      	mov	r2, ip
 8100936:	468c      	mov	ip, r1
 8100938:	4619      	mov	r1, r3
 810093a:	4663      	mov	r3, ip
 810093c:	e000      	b.n	8100940 <__aeabi_cdcmpeq>
 810093e:	bf00      	nop

08100940 <__aeabi_cdcmpeq>:
 8100940:	b501      	push	{r0, lr}
 8100942:	f7ff ffb7 	bl	81008b4 <__cmpdf2>
 8100946:	2800      	cmp	r0, #0
 8100948:	bf48      	it	mi
 810094a:	f110 0f00 	cmnmi.w	r0, #0
 810094e:	bd01      	pop	{r0, pc}

08100950 <__aeabi_dcmpeq>:
 8100950:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100954:	f7ff fff4 	bl	8100940 <__aeabi_cdcmpeq>
 8100958:	bf0c      	ite	eq
 810095a:	2001      	moveq	r0, #1
 810095c:	2000      	movne	r0, #0
 810095e:	f85d fb08 	ldr.w	pc, [sp], #8
 8100962:	bf00      	nop

08100964 <__aeabi_dcmplt>:
 8100964:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100968:	f7ff ffea 	bl	8100940 <__aeabi_cdcmpeq>
 810096c:	bf34      	ite	cc
 810096e:	2001      	movcc	r0, #1
 8100970:	2000      	movcs	r0, #0
 8100972:	f85d fb08 	ldr.w	pc, [sp], #8
 8100976:	bf00      	nop

08100978 <__aeabi_dcmple>:
 8100978:	f84d ed08 	str.w	lr, [sp, #-8]!
 810097c:	f7ff ffe0 	bl	8100940 <__aeabi_cdcmpeq>
 8100980:	bf94      	ite	ls
 8100982:	2001      	movls	r0, #1
 8100984:	2000      	movhi	r0, #0
 8100986:	f85d fb08 	ldr.w	pc, [sp], #8
 810098a:	bf00      	nop

0810098c <__aeabi_dcmpge>:
 810098c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100990:	f7ff ffce 	bl	8100930 <__aeabi_cdrcmple>
 8100994:	bf94      	ite	ls
 8100996:	2001      	movls	r0, #1
 8100998:	2000      	movhi	r0, #0
 810099a:	f85d fb08 	ldr.w	pc, [sp], #8
 810099e:	bf00      	nop

081009a0 <__aeabi_dcmpgt>:
 81009a0:	f84d ed08 	str.w	lr, [sp, #-8]!
 81009a4:	f7ff ffc4 	bl	8100930 <__aeabi_cdrcmple>
 81009a8:	bf34      	ite	cc
 81009aa:	2001      	movcc	r0, #1
 81009ac:	2000      	movcs	r0, #0
 81009ae:	f85d fb08 	ldr.w	pc, [sp], #8
 81009b2:	bf00      	nop

081009b4 <__aeabi_uldivmod>:
 81009b4:	b953      	cbnz	r3, 81009cc <__aeabi_uldivmod+0x18>
 81009b6:	b94a      	cbnz	r2, 81009cc <__aeabi_uldivmod+0x18>
 81009b8:	2900      	cmp	r1, #0
 81009ba:	bf08      	it	eq
 81009bc:	2800      	cmpeq	r0, #0
 81009be:	bf1c      	itt	ne
 81009c0:	f04f 31ff 	movne.w	r1, #4294967295
 81009c4:	f04f 30ff 	movne.w	r0, #4294967295
 81009c8:	f000 b96a 	b.w	8100ca0 <__aeabi_idiv0>
 81009cc:	f1ad 0c08 	sub.w	ip, sp, #8
 81009d0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 81009d4:	f000 f806 	bl	81009e4 <__udivmoddi4>
 81009d8:	f8dd e004 	ldr.w	lr, [sp, #4]
 81009dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 81009e0:	b004      	add	sp, #16
 81009e2:	4770      	bx	lr

081009e4 <__udivmoddi4>:
 81009e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 81009e8:	9d08      	ldr	r5, [sp, #32]
 81009ea:	460c      	mov	r4, r1
 81009ec:	2b00      	cmp	r3, #0
 81009ee:	d14e      	bne.n	8100a8e <__udivmoddi4+0xaa>
 81009f0:	4694      	mov	ip, r2
 81009f2:	458c      	cmp	ip, r1
 81009f4:	4686      	mov	lr, r0
 81009f6:	fab2 f282 	clz	r2, r2
 81009fa:	d962      	bls.n	8100ac2 <__udivmoddi4+0xde>
 81009fc:	b14a      	cbz	r2, 8100a12 <__udivmoddi4+0x2e>
 81009fe:	f1c2 0320 	rsb	r3, r2, #32
 8100a02:	4091      	lsls	r1, r2
 8100a04:	fa20 f303 	lsr.w	r3, r0, r3
 8100a08:	fa0c fc02 	lsl.w	ip, ip, r2
 8100a0c:	4319      	orrs	r1, r3
 8100a0e:	fa00 fe02 	lsl.w	lr, r0, r2
 8100a12:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8100a16:	fa1f f68c 	uxth.w	r6, ip
 8100a1a:	fbb1 f4f7 	udiv	r4, r1, r7
 8100a1e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8100a22:	fb07 1114 	mls	r1, r7, r4, r1
 8100a26:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8100a2a:	fb04 f106 	mul.w	r1, r4, r6
 8100a2e:	4299      	cmp	r1, r3
 8100a30:	d90a      	bls.n	8100a48 <__udivmoddi4+0x64>
 8100a32:	eb1c 0303 	adds.w	r3, ip, r3
 8100a36:	f104 30ff 	add.w	r0, r4, #4294967295
 8100a3a:	f080 8112 	bcs.w	8100c62 <__udivmoddi4+0x27e>
 8100a3e:	4299      	cmp	r1, r3
 8100a40:	f240 810f 	bls.w	8100c62 <__udivmoddi4+0x27e>
 8100a44:	3c02      	subs	r4, #2
 8100a46:	4463      	add	r3, ip
 8100a48:	1a59      	subs	r1, r3, r1
 8100a4a:	fa1f f38e 	uxth.w	r3, lr
 8100a4e:	fbb1 f0f7 	udiv	r0, r1, r7
 8100a52:	fb07 1110 	mls	r1, r7, r0, r1
 8100a56:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8100a5a:	fb00 f606 	mul.w	r6, r0, r6
 8100a5e:	429e      	cmp	r6, r3
 8100a60:	d90a      	bls.n	8100a78 <__udivmoddi4+0x94>
 8100a62:	eb1c 0303 	adds.w	r3, ip, r3
 8100a66:	f100 31ff 	add.w	r1, r0, #4294967295
 8100a6a:	f080 80fc 	bcs.w	8100c66 <__udivmoddi4+0x282>
 8100a6e:	429e      	cmp	r6, r3
 8100a70:	f240 80f9 	bls.w	8100c66 <__udivmoddi4+0x282>
 8100a74:	4463      	add	r3, ip
 8100a76:	3802      	subs	r0, #2
 8100a78:	1b9b      	subs	r3, r3, r6
 8100a7a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8100a7e:	2100      	movs	r1, #0
 8100a80:	b11d      	cbz	r5, 8100a8a <__udivmoddi4+0xa6>
 8100a82:	40d3      	lsrs	r3, r2
 8100a84:	2200      	movs	r2, #0
 8100a86:	e9c5 3200 	strd	r3, r2, [r5]
 8100a8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8100a8e:	428b      	cmp	r3, r1
 8100a90:	d905      	bls.n	8100a9e <__udivmoddi4+0xba>
 8100a92:	b10d      	cbz	r5, 8100a98 <__udivmoddi4+0xb4>
 8100a94:	e9c5 0100 	strd	r0, r1, [r5]
 8100a98:	2100      	movs	r1, #0
 8100a9a:	4608      	mov	r0, r1
 8100a9c:	e7f5      	b.n	8100a8a <__udivmoddi4+0xa6>
 8100a9e:	fab3 f183 	clz	r1, r3
 8100aa2:	2900      	cmp	r1, #0
 8100aa4:	d146      	bne.n	8100b34 <__udivmoddi4+0x150>
 8100aa6:	42a3      	cmp	r3, r4
 8100aa8:	d302      	bcc.n	8100ab0 <__udivmoddi4+0xcc>
 8100aaa:	4290      	cmp	r0, r2
 8100aac:	f0c0 80f0 	bcc.w	8100c90 <__udivmoddi4+0x2ac>
 8100ab0:	1a86      	subs	r6, r0, r2
 8100ab2:	eb64 0303 	sbc.w	r3, r4, r3
 8100ab6:	2001      	movs	r0, #1
 8100ab8:	2d00      	cmp	r5, #0
 8100aba:	d0e6      	beq.n	8100a8a <__udivmoddi4+0xa6>
 8100abc:	e9c5 6300 	strd	r6, r3, [r5]
 8100ac0:	e7e3      	b.n	8100a8a <__udivmoddi4+0xa6>
 8100ac2:	2a00      	cmp	r2, #0
 8100ac4:	f040 8090 	bne.w	8100be8 <__udivmoddi4+0x204>
 8100ac8:	eba1 040c 	sub.w	r4, r1, ip
 8100acc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8100ad0:	fa1f f78c 	uxth.w	r7, ip
 8100ad4:	2101      	movs	r1, #1
 8100ad6:	fbb4 f6f8 	udiv	r6, r4, r8
 8100ada:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8100ade:	fb08 4416 	mls	r4, r8, r6, r4
 8100ae2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8100ae6:	fb07 f006 	mul.w	r0, r7, r6
 8100aea:	4298      	cmp	r0, r3
 8100aec:	d908      	bls.n	8100b00 <__udivmoddi4+0x11c>
 8100aee:	eb1c 0303 	adds.w	r3, ip, r3
 8100af2:	f106 34ff 	add.w	r4, r6, #4294967295
 8100af6:	d202      	bcs.n	8100afe <__udivmoddi4+0x11a>
 8100af8:	4298      	cmp	r0, r3
 8100afa:	f200 80cd 	bhi.w	8100c98 <__udivmoddi4+0x2b4>
 8100afe:	4626      	mov	r6, r4
 8100b00:	1a1c      	subs	r4, r3, r0
 8100b02:	fa1f f38e 	uxth.w	r3, lr
 8100b06:	fbb4 f0f8 	udiv	r0, r4, r8
 8100b0a:	fb08 4410 	mls	r4, r8, r0, r4
 8100b0e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8100b12:	fb00 f707 	mul.w	r7, r0, r7
 8100b16:	429f      	cmp	r7, r3
 8100b18:	d908      	bls.n	8100b2c <__udivmoddi4+0x148>
 8100b1a:	eb1c 0303 	adds.w	r3, ip, r3
 8100b1e:	f100 34ff 	add.w	r4, r0, #4294967295
 8100b22:	d202      	bcs.n	8100b2a <__udivmoddi4+0x146>
 8100b24:	429f      	cmp	r7, r3
 8100b26:	f200 80b0 	bhi.w	8100c8a <__udivmoddi4+0x2a6>
 8100b2a:	4620      	mov	r0, r4
 8100b2c:	1bdb      	subs	r3, r3, r7
 8100b2e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8100b32:	e7a5      	b.n	8100a80 <__udivmoddi4+0x9c>
 8100b34:	f1c1 0620 	rsb	r6, r1, #32
 8100b38:	408b      	lsls	r3, r1
 8100b3a:	fa22 f706 	lsr.w	r7, r2, r6
 8100b3e:	431f      	orrs	r7, r3
 8100b40:	fa20 fc06 	lsr.w	ip, r0, r6
 8100b44:	fa04 f301 	lsl.w	r3, r4, r1
 8100b48:	ea43 030c 	orr.w	r3, r3, ip
 8100b4c:	40f4      	lsrs	r4, r6
 8100b4e:	fa00 f801 	lsl.w	r8, r0, r1
 8100b52:	0c38      	lsrs	r0, r7, #16
 8100b54:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8100b58:	fbb4 fef0 	udiv	lr, r4, r0
 8100b5c:	fa1f fc87 	uxth.w	ip, r7
 8100b60:	fb00 441e 	mls	r4, r0, lr, r4
 8100b64:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8100b68:	fb0e f90c 	mul.w	r9, lr, ip
 8100b6c:	45a1      	cmp	r9, r4
 8100b6e:	fa02 f201 	lsl.w	r2, r2, r1
 8100b72:	d90a      	bls.n	8100b8a <__udivmoddi4+0x1a6>
 8100b74:	193c      	adds	r4, r7, r4
 8100b76:	f10e 3aff 	add.w	sl, lr, #4294967295
 8100b7a:	f080 8084 	bcs.w	8100c86 <__udivmoddi4+0x2a2>
 8100b7e:	45a1      	cmp	r9, r4
 8100b80:	f240 8081 	bls.w	8100c86 <__udivmoddi4+0x2a2>
 8100b84:	f1ae 0e02 	sub.w	lr, lr, #2
 8100b88:	443c      	add	r4, r7
 8100b8a:	eba4 0409 	sub.w	r4, r4, r9
 8100b8e:	fa1f f983 	uxth.w	r9, r3
 8100b92:	fbb4 f3f0 	udiv	r3, r4, r0
 8100b96:	fb00 4413 	mls	r4, r0, r3, r4
 8100b9a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8100b9e:	fb03 fc0c 	mul.w	ip, r3, ip
 8100ba2:	45a4      	cmp	ip, r4
 8100ba4:	d907      	bls.n	8100bb6 <__udivmoddi4+0x1d2>
 8100ba6:	193c      	adds	r4, r7, r4
 8100ba8:	f103 30ff 	add.w	r0, r3, #4294967295
 8100bac:	d267      	bcs.n	8100c7e <__udivmoddi4+0x29a>
 8100bae:	45a4      	cmp	ip, r4
 8100bb0:	d965      	bls.n	8100c7e <__udivmoddi4+0x29a>
 8100bb2:	3b02      	subs	r3, #2
 8100bb4:	443c      	add	r4, r7
 8100bb6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8100bba:	fba0 9302 	umull	r9, r3, r0, r2
 8100bbe:	eba4 040c 	sub.w	r4, r4, ip
 8100bc2:	429c      	cmp	r4, r3
 8100bc4:	46ce      	mov	lr, r9
 8100bc6:	469c      	mov	ip, r3
 8100bc8:	d351      	bcc.n	8100c6e <__udivmoddi4+0x28a>
 8100bca:	d04e      	beq.n	8100c6a <__udivmoddi4+0x286>
 8100bcc:	b155      	cbz	r5, 8100be4 <__udivmoddi4+0x200>
 8100bce:	ebb8 030e 	subs.w	r3, r8, lr
 8100bd2:	eb64 040c 	sbc.w	r4, r4, ip
 8100bd6:	fa04 f606 	lsl.w	r6, r4, r6
 8100bda:	40cb      	lsrs	r3, r1
 8100bdc:	431e      	orrs	r6, r3
 8100bde:	40cc      	lsrs	r4, r1
 8100be0:	e9c5 6400 	strd	r6, r4, [r5]
 8100be4:	2100      	movs	r1, #0
 8100be6:	e750      	b.n	8100a8a <__udivmoddi4+0xa6>
 8100be8:	f1c2 0320 	rsb	r3, r2, #32
 8100bec:	fa20 f103 	lsr.w	r1, r0, r3
 8100bf0:	fa0c fc02 	lsl.w	ip, ip, r2
 8100bf4:	fa24 f303 	lsr.w	r3, r4, r3
 8100bf8:	4094      	lsls	r4, r2
 8100bfa:	430c      	orrs	r4, r1
 8100bfc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8100c00:	fa00 fe02 	lsl.w	lr, r0, r2
 8100c04:	fa1f f78c 	uxth.w	r7, ip
 8100c08:	fbb3 f0f8 	udiv	r0, r3, r8
 8100c0c:	fb08 3110 	mls	r1, r8, r0, r3
 8100c10:	0c23      	lsrs	r3, r4, #16
 8100c12:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8100c16:	fb00 f107 	mul.w	r1, r0, r7
 8100c1a:	4299      	cmp	r1, r3
 8100c1c:	d908      	bls.n	8100c30 <__udivmoddi4+0x24c>
 8100c1e:	eb1c 0303 	adds.w	r3, ip, r3
 8100c22:	f100 36ff 	add.w	r6, r0, #4294967295
 8100c26:	d22c      	bcs.n	8100c82 <__udivmoddi4+0x29e>
 8100c28:	4299      	cmp	r1, r3
 8100c2a:	d92a      	bls.n	8100c82 <__udivmoddi4+0x29e>
 8100c2c:	3802      	subs	r0, #2
 8100c2e:	4463      	add	r3, ip
 8100c30:	1a5b      	subs	r3, r3, r1
 8100c32:	b2a4      	uxth	r4, r4
 8100c34:	fbb3 f1f8 	udiv	r1, r3, r8
 8100c38:	fb08 3311 	mls	r3, r8, r1, r3
 8100c3c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8100c40:	fb01 f307 	mul.w	r3, r1, r7
 8100c44:	42a3      	cmp	r3, r4
 8100c46:	d908      	bls.n	8100c5a <__udivmoddi4+0x276>
 8100c48:	eb1c 0404 	adds.w	r4, ip, r4
 8100c4c:	f101 36ff 	add.w	r6, r1, #4294967295
 8100c50:	d213      	bcs.n	8100c7a <__udivmoddi4+0x296>
 8100c52:	42a3      	cmp	r3, r4
 8100c54:	d911      	bls.n	8100c7a <__udivmoddi4+0x296>
 8100c56:	3902      	subs	r1, #2
 8100c58:	4464      	add	r4, ip
 8100c5a:	1ae4      	subs	r4, r4, r3
 8100c5c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8100c60:	e739      	b.n	8100ad6 <__udivmoddi4+0xf2>
 8100c62:	4604      	mov	r4, r0
 8100c64:	e6f0      	b.n	8100a48 <__udivmoddi4+0x64>
 8100c66:	4608      	mov	r0, r1
 8100c68:	e706      	b.n	8100a78 <__udivmoddi4+0x94>
 8100c6a:	45c8      	cmp	r8, r9
 8100c6c:	d2ae      	bcs.n	8100bcc <__udivmoddi4+0x1e8>
 8100c6e:	ebb9 0e02 	subs.w	lr, r9, r2
 8100c72:	eb63 0c07 	sbc.w	ip, r3, r7
 8100c76:	3801      	subs	r0, #1
 8100c78:	e7a8      	b.n	8100bcc <__udivmoddi4+0x1e8>
 8100c7a:	4631      	mov	r1, r6
 8100c7c:	e7ed      	b.n	8100c5a <__udivmoddi4+0x276>
 8100c7e:	4603      	mov	r3, r0
 8100c80:	e799      	b.n	8100bb6 <__udivmoddi4+0x1d2>
 8100c82:	4630      	mov	r0, r6
 8100c84:	e7d4      	b.n	8100c30 <__udivmoddi4+0x24c>
 8100c86:	46d6      	mov	lr, sl
 8100c88:	e77f      	b.n	8100b8a <__udivmoddi4+0x1a6>
 8100c8a:	4463      	add	r3, ip
 8100c8c:	3802      	subs	r0, #2
 8100c8e:	e74d      	b.n	8100b2c <__udivmoddi4+0x148>
 8100c90:	4606      	mov	r6, r0
 8100c92:	4623      	mov	r3, r4
 8100c94:	4608      	mov	r0, r1
 8100c96:	e70f      	b.n	8100ab8 <__udivmoddi4+0xd4>
 8100c98:	3e02      	subs	r6, #2
 8100c9a:	4463      	add	r3, ip
 8100c9c:	e730      	b.n	8100b00 <__udivmoddi4+0x11c>
 8100c9e:	bf00      	nop

08100ca0 <__aeabi_idiv0>:
 8100ca0:	4770      	bx	lr
 8100ca2:	bf00      	nop

08100ca4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8100ca4:	b480      	push	{r7}
 8100ca6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8100ca8:	4b09      	ldr	r3, [pc, #36]	@ (8100cd0 <SystemInit+0x2c>)
 8100caa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8100cae:	4a08      	ldr	r2, [pc, #32]	@ (8100cd0 <SystemInit+0x2c>)
 8100cb0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8100cb4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8100cb8:	4b05      	ldr	r3, [pc, #20]	@ (8100cd0 <SystemInit+0x2c>)
 8100cba:	691b      	ldr	r3, [r3, #16]
 8100cbc:	4a04      	ldr	r2, [pc, #16]	@ (8100cd0 <SystemInit+0x2c>)
 8100cbe:	f043 0310 	orr.w	r3, r3, #16
 8100cc2:	6113      	str	r3, [r2, #16]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8100cc4:	bf00      	nop
 8100cc6:	46bd      	mov	sp, r7
 8100cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100ccc:	4770      	bx	lr
 8100cce:	bf00      	nop
 8100cd0:	e000ed00 	.word	0xe000ed00

08100cd4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8100cd4:	b480      	push	{r7}
 8100cd6:	b083      	sub	sp, #12
 8100cd8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8100cda:	4b0a      	ldr	r3, [pc, #40]	@ (8100d04 <MX_DMA_Init+0x30>)
 8100cdc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8100ce0:	4a08      	ldr	r2, [pc, #32]	@ (8100d04 <MX_DMA_Init+0x30>)
 8100ce2:	f043 0301 	orr.w	r3, r3, #1
 8100ce6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8100cea:	4b06      	ldr	r3, [pc, #24]	@ (8100d04 <MX_DMA_Init+0x30>)
 8100cec:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8100cf0:	f003 0301 	and.w	r3, r3, #1
 8100cf4:	607b      	str	r3, [r7, #4]
 8100cf6:	687b      	ldr	r3, [r7, #4]

}
 8100cf8:	bf00      	nop
 8100cfa:	370c      	adds	r7, #12
 8100cfc:	46bd      	mov	sp, r7
 8100cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100d02:	4770      	bx	lr
 8100d04:	58024400 	.word	0x58024400

08100d08 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8100d08:	b580      	push	{r7, lr}
 8100d0a:	b088      	sub	sp, #32
 8100d0c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8100d0e:	f107 030c 	add.w	r3, r7, #12
 8100d12:	2200      	movs	r2, #0
 8100d14:	601a      	str	r2, [r3, #0]
 8100d16:	605a      	str	r2, [r3, #4]
 8100d18:	609a      	str	r2, [r3, #8]
 8100d1a:	60da      	str	r2, [r3, #12]
 8100d1c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8100d1e:	4b23      	ldr	r3, [pc, #140]	@ (8100dac <MX_GPIO_Init+0xa4>)
 8100d20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100d24:	4a21      	ldr	r2, [pc, #132]	@ (8100dac <MX_GPIO_Init+0xa4>)
 8100d26:	f043 0301 	orr.w	r3, r3, #1
 8100d2a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8100d2e:	4b1f      	ldr	r3, [pc, #124]	@ (8100dac <MX_GPIO_Init+0xa4>)
 8100d30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100d34:	f003 0301 	and.w	r3, r3, #1
 8100d38:	60bb      	str	r3, [r7, #8]
 8100d3a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8100d3c:	4b1b      	ldr	r3, [pc, #108]	@ (8100dac <MX_GPIO_Init+0xa4>)
 8100d3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100d42:	4a1a      	ldr	r2, [pc, #104]	@ (8100dac <MX_GPIO_Init+0xa4>)
 8100d44:	f043 0308 	orr.w	r3, r3, #8
 8100d48:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8100d4c:	4b17      	ldr	r3, [pc, #92]	@ (8100dac <MX_GPIO_Init+0xa4>)
 8100d4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100d52:	f003 0308 	and.w	r3, r3, #8
 8100d56:	607b      	str	r3, [r7, #4]
 8100d58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8100d5a:	4b14      	ldr	r3, [pc, #80]	@ (8100dac <MX_GPIO_Init+0xa4>)
 8100d5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100d60:	4a12      	ldr	r2, [pc, #72]	@ (8100dac <MX_GPIO_Init+0xa4>)
 8100d62:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8100d66:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8100d6a:	4b10      	ldr	r3, [pc, #64]	@ (8100dac <MX_GPIO_Init+0xa4>)
 8100d6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100d70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8100d74:	603b      	str	r3, [r7, #0]
 8100d76:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, CS_Pin|CE_Pin, GPIO_PIN_RESET);
 8100d78:	2200      	movs	r2, #0
 8100d7a:	f44f 41a0 	mov.w	r1, #20480	@ 0x5000
 8100d7e:	480c      	ldr	r0, [pc, #48]	@ (8100db0 <MX_GPIO_Init+0xa8>)
 8100d80:	f001 f8f2 	bl	8101f68 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = CS_Pin|CE_Pin;
 8100d84:	f44f 43a0 	mov.w	r3, #20480	@ 0x5000
 8100d88:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8100d8a:	2301      	movs	r3, #1
 8100d8c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100d8e:	2300      	movs	r3, #0
 8100d90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8100d92:	2300      	movs	r3, #0
 8100d94:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8100d96:	f107 030c 	add.w	r3, r7, #12
 8100d9a:	4619      	mov	r1, r3
 8100d9c:	4804      	ldr	r0, [pc, #16]	@ (8100db0 <MX_GPIO_Init+0xa8>)
 8100d9e:	f000 ff33 	bl	8101c08 <HAL_GPIO_Init>

}
 8100da2:	bf00      	nop
 8100da4:	3720      	adds	r7, #32
 8100da6:	46bd      	mov	sp, r7
 8100da8:	bd80      	pop	{r7, pc}
 8100daa:	bf00      	nop
 8100dac:	58024400 	.word	0x58024400
 8100db0:	58021800 	.word	0x58021800

08100db4 <Rx_mode>:
	NRF_Reset();
	NRF_WriteRegister(NRF_REG_TX_ADDR,Adress,5);
	//Para enviar a mensagem usar função transmitandwait
}

void Rx_mode(uint8_t Adress[5]){
 8100db4:	b580      	push	{r7, lr}
 8100db6:	b084      	sub	sp, #16
 8100db8:	af02      	add	r7, sp, #8
 8100dba:	6078      	str	r0, [r7, #4]

	if(NRF_Init(&hspi1, GPIOG, GPIO_PIN_12, GPIOG, GPIO_PIN_14) != NRF_OK){
 8100dbc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8100dc0:	9300      	str	r3, [sp, #0]
 8100dc2:	4b0f      	ldr	r3, [pc, #60]	@ (8100e00 <Rx_mode+0x4c>)
 8100dc4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8100dc8:	490d      	ldr	r1, [pc, #52]	@ (8100e00 <Rx_mode+0x4c>)
 8100dca:	480e      	ldr	r0, [pc, #56]	@ (8100e04 <Rx_mode+0x50>)
 8100dcc:	f000 fb30 	bl	8101430 <NRF_Init>
 8100dd0:	4603      	mov	r3, r0
 8100dd2:	2b00      	cmp	r3, #0
 8100dd4:	d001      	beq.n	8100dda <Rx_mode+0x26>
		Error_Handler();
 8100dd6:	f000 f8eb 	bl	8100fb0 <Error_Handler>
	}

	NRF_Reset();
 8100dda:	f000 fb65 	bl	81014a8 <NRF_Reset>
	NRF_WriteRegister(NRF_REG_RX_ADDR_P0,Adress,5);
 8100dde:	2205      	movs	r2, #5
 8100de0:	6879      	ldr	r1, [r7, #4]
 8100de2:	200a      	movs	r0, #10
 8100de4:	f000 f9ee 	bl	81011c4 <NRF_WriteRegister>

	NRF_WriteRegisterByte(NRF_REG_RX_PW_P0,32); //00111111 - 32 bytes
 8100de8:	2120      	movs	r1, #32
 8100dea:	2011      	movs	r0, #17
 8100dec:	f000 fa00 	bl	81011f0 <NRF_WriteRegisterByte>

	NRF_EnterMode(NRF_MODE_RX);
 8100df0:	2002      	movs	r0, #2
 8100df2:	f000 faa7 	bl	8101344 <NRF_EnterMode>
}
 8100df6:	bf00      	nop
 8100df8:	3708      	adds	r7, #8
 8100dfa:	46bd      	mov	sp, r7
 8100dfc:	bd80      	pop	{r7, pc}
 8100dfe:	bf00      	nop
 8100e00:	58021800 	.word	0x58021800
 8100e04:	10000070 	.word	0x10000070

08100e08 <ReceiveData>:

NRF_Status ReceiveData (uint8_t *data){
 8100e08:	b580      	push	{r7, lr}
 8100e0a:	b084      	sub	sp, #16
 8100e0c:	af00      	add	r7, sp, #0
 8100e0e:	6078      	str	r0, [r7, #4]
	NRF_Status ret = NRF_ERROR;
 8100e10:	2304      	movs	r3, #4
 8100e12:	73fb      	strb	r3, [r7, #15]
	uint8_t status = NRF_ReadStatus();
 8100e14:	f000 fa16 	bl	8101244 <NRF_ReadStatus>
 8100e18:	4603      	mov	r3, r0
 8100e1a:	73bb      	strb	r3, [r7, #14]
	uint8_t STATUS_REGISTER_RX_DR_BIT = 6;
 8100e1c:	2306      	movs	r3, #6
 8100e1e:	737b      	strb	r3, [r7, #13]
	if(status & (1<<STATUS_REGISTER_RX_DR_BIT)){
 8100e20:	7bba      	ldrb	r2, [r7, #14]
 8100e22:	7b7b      	ldrb	r3, [r7, #13]
 8100e24:	fa42 f303 	asr.w	r3, r2, r3
 8100e28:	f003 0301 	and.w	r3, r3, #1
 8100e2c:	2b00      	cmp	r3, #0
 8100e2e:	d00a      	beq.n	8100e46 <ReceiveData+0x3e>
		NRF_ReadPayload(data, 32);
 8100e30:	2120      	movs	r1, #32
 8100e32:	6878      	ldr	r0, [r7, #4]
 8100e34:	f000 fbd2 	bl	81015dc <NRF_ReadPayload>
		ret = NRF_OK;
 8100e38:	2300      	movs	r3, #0
 8100e3a:	73fb      	strb	r3, [r7, #15]
		NRF_SetRegisterBit(NRF_REG_STATUS, 6);
 8100e3c:	2106      	movs	r1, #6
 8100e3e:	2007      	movs	r0, #7
 8100e40:	f000 fa1c 	bl	810127c <NRF_SetRegisterBit>
 8100e44:	e001      	b.n	8100e4a <ReceiveData+0x42>
	} else {
		ret = NRF_ERROR;
 8100e46:	2304      	movs	r3, #4
 8100e48:	73fb      	strb	r3, [r7, #15]
	}
	return ret;
 8100e4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8100e4c:	4618      	mov	r0, r3
 8100e4e:	3710      	adds	r7, #16
 8100e50:	46bd      	mov	sp, r7
 8100e52:	bd80      	pop	{r7, pc}
 8100e54:	0000      	movs	r0, r0
	...

08100e58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8100e58:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8100e5c:	b086      	sub	sp, #24
 8100e5e:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 8100e60:	4b4b      	ldr	r3, [pc, #300]	@ (8100f90 <main+0x138>)
 8100e62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100e66:	4a4a      	ldr	r2, [pc, #296]	@ (8100f90 <main+0x138>)
 8100e68:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8100e6c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8100e70:	4b47      	ldr	r3, [pc, #284]	@ (8100f90 <main+0x138>)
 8100e72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100e76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8100e7a:	607b      	str	r3, [r7, #4]
 8100e7c:	687b      	ldr	r3, [r7, #4]
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8100e7e:	2001      	movs	r0, #1
 8100e80:	f001 f8a6 	bl	8101fd0 <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 8100e84:	f001 f930 	bl	81020e8 <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 8100e88:	2201      	movs	r2, #1
 8100e8a:	2102      	movs	r1, #2
 8100e8c:	2000      	movs	r0, #0
 8100e8e:	f001 f8b1 	bl	8101ff4 <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8100e92:	4b40      	ldr	r3, [pc, #256]	@ (8100f94 <main+0x13c>)
 8100e94:	681b      	ldr	r3, [r3, #0]
 8100e96:	091b      	lsrs	r3, r3, #4
 8100e98:	f003 030f 	and.w	r3, r3, #15
 8100e9c:	2b07      	cmp	r3, #7
 8100e9e:	d108      	bne.n	8100eb2 <main+0x5a>
 8100ea0:	4b3d      	ldr	r3, [pc, #244]	@ (8100f98 <main+0x140>)
 8100ea2:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8100ea6:	4a3c      	ldr	r2, [pc, #240]	@ (8100f98 <main+0x140>)
 8100ea8:	f043 0301 	orr.w	r3, r3, #1
 8100eac:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104
 8100eb0:	e007      	b.n	8100ec2 <main+0x6a>
 8100eb2:	4b39      	ldr	r3, [pc, #228]	@ (8100f98 <main+0x140>)
 8100eb4:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8100eb8:	4a37      	ldr	r2, [pc, #220]	@ (8100f98 <main+0x140>)
 8100eba:	f043 0301 	orr.w	r3, r3, #1
 8100ebe:	f8c2 3114 	str.w	r3, [r2, #276]	@ 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8100ec2:	f000 fcd1 	bl	8101868 <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8100ec6:	f7ff ff1f 	bl	8100d08 <MX_GPIO_Init>
  MX_DMA_Init();
 8100eca:	f7ff ff03 	bl	8100cd4 <MX_DMA_Init>
  MX_SPI1_Init();
 8100ece:	f000 fb97 	bl	8101600 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  Rx_mode(TxAdress);
 8100ed2:	4832      	ldr	r0, [pc, #200]	@ (8100f9c <main+0x144>)
 8100ed4:	f7ff ff6e 	bl	8100db4 <Rx_mode>
  int count = 0;
 8100ed8:	2300      	movs	r3, #0
 8100eda:	617b      	str	r3, [r7, #20]
  int num = 1000;
 8100edc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8100ee0:	60fb      	str	r3, [r7, #12]
  NRF_Status ret = NRF_OK;
 8100ee2:	2300      	movs	r3, #0
 8100ee4:	72fb      	strb	r3, [r7, #11]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 ret = ReceiveData(RxData);
 8100ee6:	482e      	ldr	r0, [pc, #184]	@ (8100fa0 <main+0x148>)
 8100ee8:	f7ff ff8e 	bl	8100e08 <ReceiveData>
 8100eec:	4603      	mov	r3, r0
 8100eee:	72fb      	strb	r3, [r7, #11]
	 if(ret == NRF_OK){
 8100ef0:	7afb      	ldrb	r3, [r7, #11]
 8100ef2:	2b00      	cmp	r3, #0
 8100ef4:	d106      	bne.n	8100f04 <main+0xac>
		 HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8100ef6:	2101      	movs	r1, #1
 8100ef8:	482a      	ldr	r0, [pc, #168]	@ (8100fa4 <main+0x14c>)
 8100efa:	f001 f84e 	bl	8101f9a <HAL_GPIO_TogglePin>
		 count = count+1;
 8100efe:	697b      	ldr	r3, [r7, #20]
 8100f00:	3301      	adds	r3, #1
 8100f02:	617b      	str	r3, [r7, #20]
	 } else {
		 //HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_14);
	 }

	 if(count >= num - (num*0.01)){
 8100f04:	6978      	ldr	r0, [r7, #20]
 8100f06:	f7ff fc63 	bl	81007d0 <__aeabi_i2d>
 8100f0a:	4604      	mov	r4, r0
 8100f0c:	460d      	mov	r5, r1
 8100f0e:	68f8      	ldr	r0, [r7, #12]
 8100f10:	f7ff fc5e 	bl	81007d0 <__aeabi_i2d>
 8100f14:	4680      	mov	r8, r0
 8100f16:	4689      	mov	r9, r1
 8100f18:	68f8      	ldr	r0, [r7, #12]
 8100f1a:	f7ff fc59 	bl	81007d0 <__aeabi_i2d>
 8100f1e:	a31a      	add	r3, pc, #104	@ (adr r3, 8100f88 <main+0x130>)
 8100f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8100f24:	f7ff f9d8 	bl	81002d8 <__aeabi_dmul>
 8100f28:	4602      	mov	r2, r0
 8100f2a:	460b      	mov	r3, r1
 8100f2c:	4640      	mov	r0, r8
 8100f2e:	4649      	mov	r1, r9
 8100f30:	f7ff fb00 	bl	8100534 <__aeabi_dsub>
 8100f34:	4602      	mov	r2, r0
 8100f36:	460b      	mov	r3, r1
 8100f38:	4620      	mov	r0, r4
 8100f3a:	4629      	mov	r1, r5
 8100f3c:	f7ff fd26 	bl	810098c <__aeabi_dcmpge>
 8100f40:	4603      	mov	r3, r0
 8100f42:	2b00      	cmp	r3, #0
 8100f44:	d004      	beq.n	8100f50 <main+0xf8>
		 HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, 1);
 8100f46:	2201      	movs	r2, #1
 8100f48:	2102      	movs	r1, #2
 8100f4a:	4817      	ldr	r0, [pc, #92]	@ (8100fa8 <main+0x150>)
 8100f4c:	f001 f80c 	bl	8101f68 <HAL_GPIO_WritePin>
	 }
	 if(xfr_ptr->sts_4to7 == 0){
 8100f50:	4b16      	ldr	r3, [pc, #88]	@ (8100fac <main+0x154>)
 8100f52:	781b      	ldrb	r3, [r3, #0]
 8100f54:	b2db      	uxtb	r3, r3
 8100f56:	2b00      	cmp	r3, #0
 8100f58:	d1c5      	bne.n	8100ee6 <main+0x8e>
		 for(int n = 0; n < 32; n++){
 8100f5a:	2300      	movs	r3, #0
 8100f5c:	613b      	str	r3, [r7, #16]
 8100f5e:	e00c      	b.n	8100f7a <main+0x122>
		 	xfr_ptr->M4toM7[n] = RxData[n];
 8100f60:	4a12      	ldr	r2, [pc, #72]	@ (8100fac <main+0x154>)
 8100f62:	490f      	ldr	r1, [pc, #60]	@ (8100fa0 <main+0x148>)
 8100f64:	693b      	ldr	r3, [r7, #16]
 8100f66:	440b      	add	r3, r1
 8100f68:	7819      	ldrb	r1, [r3, #0]
 8100f6a:	693b      	ldr	r3, [r7, #16]
 8100f6c:	4413      	add	r3, r2
 8100f6e:	3302      	adds	r3, #2
 8100f70:	460a      	mov	r2, r1
 8100f72:	701a      	strb	r2, [r3, #0]
		 for(int n = 0; n < 32; n++){
 8100f74:	693b      	ldr	r3, [r7, #16]
 8100f76:	3301      	adds	r3, #1
 8100f78:	613b      	str	r3, [r7, #16]
 8100f7a:	693b      	ldr	r3, [r7, #16]
 8100f7c:	2b1f      	cmp	r3, #31
 8100f7e:	ddef      	ble.n	8100f60 <main+0x108>
		 	}
		 xfr_ptr->sts_4to7 =1;
 8100f80:	4b0a      	ldr	r3, [pc, #40]	@ (8100fac <main+0x154>)
 8100f82:	2201      	movs	r2, #1
 8100f84:	701a      	strb	r2, [r3, #0]
	 ret = ReceiveData(RxData);
 8100f86:	e7ae      	b.n	8100ee6 <main+0x8e>
 8100f88:	47ae147b 	.word	0x47ae147b
 8100f8c:	3f847ae1 	.word	0x3f847ae1
 8100f90:	58024400 	.word	0x58024400
 8100f94:	e000ed00 	.word	0xe000ed00
 8100f98:	58026400 	.word	0x58026400
 8100f9c:	10000008 	.word	0x10000008
 8100fa0:	10000034 	.word	0x10000034
 8100fa4:	58020400 	.word	0x58020400
 8100fa8:	58021000 	.word	0x58021000
 8100fac:	38001000 	.word	0x38001000

08100fb0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8100fb0:	b480      	push	{r7}
 8100fb2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8100fb4:	b672      	cpsid	i
}
 8100fb6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8100fb8:	bf00      	nop
 8100fba:	e7fd      	b.n	8100fb8 <Error_Handler+0x8>

08100fbc <csn_set>:
int current_mode = NRF_MODE_POWERDOWN; // Modo atual do NRF

/* Funções de Pinagem do NRF*/

//Pino CS em Alto (Dispositivo não está conversando com o uC)
void csn_set() {
 8100fbc:	b580      	push	{r7, lr}
 8100fbe:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(NRF_CSN_Port, NRF_CSN_Pin, GPIO_PIN_SET);
 8100fc0:	4b04      	ldr	r3, [pc, #16]	@ (8100fd4 <csn_set+0x18>)
 8100fc2:	681b      	ldr	r3, [r3, #0]
 8100fc4:	4a04      	ldr	r2, [pc, #16]	@ (8100fd8 <csn_set+0x1c>)
 8100fc6:	8811      	ldrh	r1, [r2, #0]
 8100fc8:	2201      	movs	r2, #1
 8100fca:	4618      	mov	r0, r3
 8100fcc:	f000 ffcc 	bl	8101f68 <HAL_GPIO_WritePin>
}
 8100fd0:	bf00      	nop
 8100fd2:	bd80      	pop	{r7, pc}
 8100fd4:	10000058 	.word	0x10000058
 8100fd8:	1000005c 	.word	0x1000005c

08100fdc <csn_reset>:

//Pino CS em Baixo (Dispositivo  está conversando com o uC)
void csn_reset() {
 8100fdc:	b580      	push	{r7, lr}
 8100fde:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(NRF_CSN_Port, NRF_CSN_Pin, GPIO_PIN_RESET);
 8100fe0:	4b04      	ldr	r3, [pc, #16]	@ (8100ff4 <csn_reset+0x18>)
 8100fe2:	681b      	ldr	r3, [r3, #0]
 8100fe4:	4a04      	ldr	r2, [pc, #16]	@ (8100ff8 <csn_reset+0x1c>)
 8100fe6:	8811      	ldrh	r1, [r2, #0]
 8100fe8:	2200      	movs	r2, #0
 8100fea:	4618      	mov	r0, r3
 8100fec:	f000 ffbc 	bl	8101f68 <HAL_GPIO_WritePin>
}
 8100ff0:	bf00      	nop
 8100ff2:	bd80      	pop	{r7, pc}
 8100ff4:	10000058 	.word	0x10000058
 8100ff8:	1000005c 	.word	0x1000005c

08100ffc <ce_set>:

//Pino CE em Alto (Dispositivo está em funcionamento,Tx ou Rx)
void ce_set() {
 8100ffc:	b580      	push	{r7, lr}
 8100ffe:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(NRF_CE_Port, NRF_CE_Pin, GPIO_PIN_SET);
 8101000:	4b04      	ldr	r3, [pc, #16]	@ (8101014 <ce_set+0x18>)
 8101002:	681b      	ldr	r3, [r3, #0]
 8101004:	4a04      	ldr	r2, [pc, #16]	@ (8101018 <ce_set+0x1c>)
 8101006:	8811      	ldrh	r1, [r2, #0]
 8101008:	2201      	movs	r2, #1
 810100a:	4618      	mov	r0, r3
 810100c:	f000 ffac 	bl	8101f68 <HAL_GPIO_WritePin>
}
 8101010:	bf00      	nop
 8101012:	bd80      	pop	{r7, pc}
 8101014:	10000060 	.word	0x10000060
 8101018:	10000064 	.word	0x10000064

0810101c <ce_reset>:

//Pino CE em Baixo (Dispositivo está em standby)
void ce_reset() {
 810101c:	b580      	push	{r7, lr}
 810101e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(NRF_CE_Port, NRF_CE_Pin, GPIO_PIN_RESET);
 8101020:	4b04      	ldr	r3, [pc, #16]	@ (8101034 <ce_reset+0x18>)
 8101022:	681b      	ldr	r3, [r3, #0]
 8101024:	4a04      	ldr	r2, [pc, #16]	@ (8101038 <ce_reset+0x1c>)
 8101026:	8811      	ldrh	r1, [r2, #0]
 8101028:	2200      	movs	r2, #0
 810102a:	4618      	mov	r0, r3
 810102c:	f000 ff9c 	bl	8101f68 <HAL_GPIO_WritePin>
}
 8101030:	bf00      	nop
 8101032:	bd80      	pop	{r7, pc}
 8101034:	10000060 	.word	0x10000060
 8101038:	10000064 	.word	0x10000064

0810103c <wait>:
uint8_t read_ce() {
  return HAL_GPIO_ReadPin(NRF_CE_Port, NRF_CE_Pin);
}

//Função de "Esperar" em us
void wait(uint64_t us) {
 810103c:	b5b0      	push	{r4, r5, r7, lr}
 810103e:	b084      	sub	sp, #16
 8101040:	af00      	add	r7, sp, #0
 8101042:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t volatile cycles = CPU_Freq * us / 1000000; //Quantos ciclos de CPU deverão ser esperados para alcancar tal tempo
 8101046:	4915      	ldr	r1, [pc, #84]	@ (810109c <wait+0x60>)
 8101048:	6809      	ldr	r1, [r1, #0]
 810104a:	2000      	movs	r0, #0
 810104c:	460a      	mov	r2, r1
 810104e:	4603      	mov	r3, r0
 8101050:	6839      	ldr	r1, [r7, #0]
 8101052:	fb03 f001 	mul.w	r0, r3, r1
 8101056:	6879      	ldr	r1, [r7, #4]
 8101058:	fb02 f101 	mul.w	r1, r2, r1
 810105c:	4401      	add	r1, r0
 810105e:	6838      	ldr	r0, [r7, #0]
 8101060:	fba0 4502 	umull	r4, r5, r0, r2
 8101064:	194b      	adds	r3, r1, r5
 8101066:	461d      	mov	r5, r3
 8101068:	4a0d      	ldr	r2, [pc, #52]	@ (81010a0 <wait+0x64>)
 810106a:	f04f 0300 	mov.w	r3, #0
 810106e:	4620      	mov	r0, r4
 8101070:	4629      	mov	r1, r5
 8101072:	f7ff fc9f 	bl	81009b4 <__aeabi_uldivmod>
 8101076:	4602      	mov	r2, r0
 8101078:	460b      	mov	r3, r1
 810107a:	4613      	mov	r3, r2
 810107c:	60fb      	str	r3, [r7, #12]
  uint32_t volatile current = 0; //Quantos se passaram
 810107e:	2300      	movs	r3, #0
 8101080:	60bb      	str	r3, [r7, #8]
  while (current <= cycles) {
 8101082:	e002      	b.n	810108a <wait+0x4e>
    current++;
 8101084:	68bb      	ldr	r3, [r7, #8]
 8101086:	3301      	adds	r3, #1
 8101088:	60bb      	str	r3, [r7, #8]
  while (current <= cycles) {
 810108a:	68ba      	ldr	r2, [r7, #8]
 810108c:	68fb      	ldr	r3, [r7, #12]
 810108e:	429a      	cmp	r2, r3
 8101090:	d9f8      	bls.n	8101084 <wait+0x48>
  }
}
 8101092:	bf00      	nop
 8101094:	bf00      	nop
 8101096:	3710      	adds	r7, #16
 8101098:	46bd      	mov	sp, r7
 810109a:	bdb0      	pop	{r4, r5, r7, pc}
 810109c:	10000068 	.word	0x10000068
 81010a0:	000f4240 	.word	0x000f4240

081010a4 <NRF_SendCommand>:

/* Funções Para enviar e receber do NRFL01 em "Baixo" Nível */

//Função para enviar um comando para o NRF
NRF_Status NRF_SendCommand(uint8_t cmd) {
 81010a4:	b580      	push	{r7, lr}
 81010a6:	b086      	sub	sp, #24
 81010a8:	af02      	add	r7, sp, #8
 81010aa:	4603      	mov	r3, r0
 81010ac:	71fb      	strb	r3, [r7, #7]
  NRF_Status ret = NRF_OK;
 81010ae:	2300      	movs	r3, #0
 81010b0:	73fb      	strb	r3, [r7, #15]
  uint8_t status;

  csn_reset(); //Seleciona o dispositivo
 81010b2:	f7ff ff93 	bl	8100fdc <csn_reset>
  ret = (NRF_Status)HAL_SPI_TransmitReceive(HSPI, &cmd, &status, 1, NRF_SPI_TIMEOUT_DUR); //Envia o comando e retorna o status
 81010b6:	4b0c      	ldr	r3, [pc, #48]	@ (81010e8 <NRF_SendCommand+0x44>)
 81010b8:	6818      	ldr	r0, [r3, #0]
 81010ba:	f107 020e 	add.w	r2, r7, #14
 81010be:	1df9      	adds	r1, r7, #7
 81010c0:	230a      	movs	r3, #10
 81010c2:	9300      	str	r3, [sp, #0]
 81010c4:	2301      	movs	r3, #1
 81010c6:	f001 ff17 	bl	8102ef8 <HAL_SPI_TransmitReceive>
 81010ca:	4603      	mov	r3, r0
 81010cc:	73fb      	strb	r3, [r7, #15]
  if (ret != NRF_OK) { //Verifica se o comando foi enviado corretamente
 81010ce:	7bfb      	ldrb	r3, [r7, #15]
 81010d0:	2b00      	cmp	r3, #0
 81010d2:	d001      	beq.n	81010d8 <NRF_SendCommand+0x34>
    return ret;
 81010d4:	7bfb      	ldrb	r3, [r7, #15]
 81010d6:	e002      	b.n	81010de <NRF_SendCommand+0x3a>
  }
  csn_set(); //Desseleciona o dispositivo
 81010d8:	f7ff ff70 	bl	8100fbc <csn_set>

  return ret;
 81010dc:	7bfb      	ldrb	r3, [r7, #15]
}
 81010de:	4618      	mov	r0, r3
 81010e0:	3710      	adds	r7, #16
 81010e2:	46bd      	mov	sp, r7
 81010e4:	bd80      	pop	{r7, pc}
 81010e6:	bf00      	nop
 81010e8:	10000054 	.word	0x10000054

081010ec <NRF_SendWriteCommand>:

/* Função para enviar um comando de escrita*/
NRF_Status NRF_SendWriteCommand(uint8_t cmd, uint8_t *write, uint8_t length) {
 81010ec:	b580      	push	{r7, lr}
 81010ee:	b086      	sub	sp, #24
 81010f0:	af02      	add	r7, sp, #8
 81010f2:	4603      	mov	r3, r0
 81010f4:	6039      	str	r1, [r7, #0]
 81010f6:	71fb      	strb	r3, [r7, #7]
 81010f8:	4613      	mov	r3, r2
 81010fa:	71bb      	strb	r3, [r7, #6]
  NRF_Status ret = NRF_OK;
 81010fc:	2300      	movs	r3, #0
 81010fe:	73fb      	strb	r3, [r7, #15]
  uint8_t status;

  csn_reset(); //Seleciona o dispositivo
 8101100:	f7ff ff6c 	bl	8100fdc <csn_reset>
  ret = (NRF_Status)HAL_SPI_TransmitReceive(HSPI, &cmd, &status, 1, NRF_SPI_TIMEOUT_DUR); //Manda pro NRF o comando de escrita
 8101104:	4b13      	ldr	r3, [pc, #76]	@ (8101154 <NRF_SendWriteCommand+0x68>)
 8101106:	6818      	ldr	r0, [r3, #0]
 8101108:	f107 020e 	add.w	r2, r7, #14
 810110c:	1df9      	adds	r1, r7, #7
 810110e:	230a      	movs	r3, #10
 8101110:	9300      	str	r3, [sp, #0]
 8101112:	2301      	movs	r3, #1
 8101114:	f001 fef0 	bl	8102ef8 <HAL_SPI_TransmitReceive>
 8101118:	4603      	mov	r3, r0
 810111a:	73fb      	strb	r3, [r7, #15]
  if (ret != NRF_OK) { //Verifica se está ok para escrever
 810111c:	7bfb      	ldrb	r3, [r7, #15]
 810111e:	2b00      	cmp	r3, #0
 8101120:	d001      	beq.n	8101126 <NRF_SendWriteCommand+0x3a>
	//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
    return ret;
 8101122:	7bfb      	ldrb	r3, [r7, #15]
 8101124:	e011      	b.n	810114a <NRF_SendWriteCommand+0x5e>
  }
  ret = (NRF_Status)HAL_SPI_Transmit(HSPI, write, length, NRF_SPI_TIMEOUT_DUR); //Manda  o que será escrito no registro
 8101126:	4b0b      	ldr	r3, [pc, #44]	@ (8101154 <NRF_SendWriteCommand+0x68>)
 8101128:	6818      	ldr	r0, [r3, #0]
 810112a:	79bb      	ldrb	r3, [r7, #6]
 810112c:	b29a      	uxth	r2, r3
 810112e:	230a      	movs	r3, #10
 8101130:	6839      	ldr	r1, [r7, #0]
 8101132:	f001 fa85 	bl	8102640 <HAL_SPI_Transmit>
 8101136:	4603      	mov	r3, r0
 8101138:	73fb      	strb	r3, [r7, #15]
  if (ret != NRF_OK) {//Verifica se o processo foi um sucesso
 810113a:	7bfb      	ldrb	r3, [r7, #15]
 810113c:	2b00      	cmp	r3, #0
 810113e:	d001      	beq.n	8101144 <NRF_SendWriteCommand+0x58>
    return ret;
 8101140:	7bfb      	ldrb	r3, [r7, #15]
 8101142:	e002      	b.n	810114a <NRF_SendWriteCommand+0x5e>
  }
  csn_set(); //Desseleciona o dispositivo
 8101144:	f7ff ff3a 	bl	8100fbc <csn_set>

  return ret; //Retorna o Resultado
 8101148:	7bfb      	ldrb	r3, [r7, #15]
}
 810114a:	4618      	mov	r0, r3
 810114c:	3710      	adds	r7, #16
 810114e:	46bd      	mov	sp, r7
 8101150:	bd80      	pop	{r7, pc}
 8101152:	bf00      	nop
 8101154:	10000054 	.word	0x10000054

08101158 <NRF_SendReadCommand>:

//Função para enviar um comando de leitura
NRF_Status NRF_SendReadCommand(uint8_t cmd, uint8_t *read, uint8_t length) {
 8101158:	b580      	push	{r7, lr}
 810115a:	b086      	sub	sp, #24
 810115c:	af02      	add	r7, sp, #8
 810115e:	4603      	mov	r3, r0
 8101160:	6039      	str	r1, [r7, #0]
 8101162:	71fb      	strb	r3, [r7, #7]
 8101164:	4613      	mov	r3, r2
 8101166:	71bb      	strb	r3, [r7, #6]
  NRF_Status ret = NRF_OK;
 8101168:	2300      	movs	r3, #0
 810116a:	73fb      	strb	r3, [r7, #15]
  uint8_t status;

  csn_reset(); //Seleciona o dispositivo
 810116c:	f7ff ff36 	bl	8100fdc <csn_reset>
  ret = (NRF_Status)HAL_SPI_TransmitReceive(HSPI, &cmd, &status, 1, NRF_SPI_TIMEOUT_DUR);//Manda pro NRF o comando de Leitura
 8101170:	4b13      	ldr	r3, [pc, #76]	@ (81011c0 <NRF_SendReadCommand+0x68>)
 8101172:	6818      	ldr	r0, [r3, #0]
 8101174:	f107 020e 	add.w	r2, r7, #14
 8101178:	1df9      	adds	r1, r7, #7
 810117a:	230a      	movs	r3, #10
 810117c:	9300      	str	r3, [sp, #0]
 810117e:	2301      	movs	r3, #1
 8101180:	f001 feba 	bl	8102ef8 <HAL_SPI_TransmitReceive>
 8101184:	4603      	mov	r3, r0
 8101186:	73fb      	strb	r3, [r7, #15]
  if(ret != NRF_OK) { //Verifica se o processo foi um sucesso
 8101188:	7bfb      	ldrb	r3, [r7, #15]
 810118a:	2b00      	cmp	r3, #0
 810118c:	d001      	beq.n	8101192 <NRF_SendReadCommand+0x3a>
    return ret;
 810118e:	7bfb      	ldrb	r3, [r7, #15]
 8101190:	e011      	b.n	81011b6 <NRF_SendReadCommand+0x5e>
  }
  ret = (NRF_Status)HAL_SPI_Receive(HSPI, read, length, NRF_SPI_TIMEOUT_DUR);//Recebe o que se deseja ler do NRF
 8101192:	4b0b      	ldr	r3, [pc, #44]	@ (81011c0 <NRF_SendReadCommand+0x68>)
 8101194:	6818      	ldr	r0, [r3, #0]
 8101196:	79bb      	ldrb	r3, [r7, #6]
 8101198:	b29a      	uxth	r2, r3
 810119a:	230a      	movs	r3, #10
 810119c:	6839      	ldr	r1, [r7, #0]
 810119e:	f001 fc3a 	bl	8102a16 <HAL_SPI_Receive>
 81011a2:	4603      	mov	r3, r0
 81011a4:	73fb      	strb	r3, [r7, #15]
  if(ret != NRF_OK) {
 81011a6:	7bfb      	ldrb	r3, [r7, #15]
 81011a8:	2b00      	cmp	r3, #0
 81011aa:	d001      	beq.n	81011b0 <NRF_SendReadCommand+0x58>
    return ret;
 81011ac:	7bfb      	ldrb	r3, [r7, #15]
 81011ae:	e002      	b.n	81011b6 <NRF_SendReadCommand+0x5e>
  }
  csn_set();//Desseleciona o dispositvo
 81011b0:	f7ff ff04 	bl	8100fbc <csn_set>

  return ret;//Retorna o resultado
 81011b4:	7bfb      	ldrb	r3, [r7, #15]
}
 81011b6:	4618      	mov	r0, r3
 81011b8:	3710      	adds	r7, #16
 81011ba:	46bd      	mov	sp, r7
 81011bc:	bd80      	pop	{r7, pc}
 81011be:	bf00      	nop
 81011c0:	10000054 	.word	0x10000054

081011c4 <NRF_WriteRegister>:
/* Escreve no Registro do NRF
 * Param - Registro a ser escrito
 * Param - O que será escrito
 * Param - O tamanho (em bytes)
 *  							*/
NRF_Status NRF_WriteRegister(uint8_t reg, uint8_t *write, uint8_t length) {
 81011c4:	b580      	push	{r7, lr}
 81011c6:	b082      	sub	sp, #8
 81011c8:	af00      	add	r7, sp, #0
 81011ca:	4603      	mov	r3, r0
 81011cc:	6039      	str	r1, [r7, #0]
 81011ce:	71fb      	strb	r3, [r7, #7]
 81011d0:	4613      	mov	r3, r2
 81011d2:	71bb      	strb	r3, [r7, #6]
  return NRF_SendWriteCommand(NRF_CMD_W_REGISTER | reg, write, length);
 81011d4:	79fb      	ldrb	r3, [r7, #7]
 81011d6:	f043 0320 	orr.w	r3, r3, #32
 81011da:	b2db      	uxtb	r3, r3
 81011dc:	79ba      	ldrb	r2, [r7, #6]
 81011de:	6839      	ldr	r1, [r7, #0]
 81011e0:	4618      	mov	r0, r3
 81011e2:	f7ff ff83 	bl	81010ec <NRF_SendWriteCommand>
 81011e6:	4603      	mov	r3, r0
}
 81011e8:	4618      	mov	r0, r3
 81011ea:	3708      	adds	r7, #8
 81011ec:	46bd      	mov	sp, r7
 81011ee:	bd80      	pop	{r7, pc}

081011f0 <NRF_WriteRegisterByte>:

/* Escreve em um byte da Memória do NRF
 * Param - Registro a ser escrito
 * Param - O que será escrito
 *  							*/
NRF_Status NRF_WriteRegisterByte(uint8_t reg, uint8_t byte) {
 81011f0:	b580      	push	{r7, lr}
 81011f2:	b084      	sub	sp, #16
 81011f4:	af00      	add	r7, sp, #0
 81011f6:	4603      	mov	r3, r0
 81011f8:	460a      	mov	r2, r1
 81011fa:	71fb      	strb	r3, [r7, #7]
 81011fc:	4613      	mov	r3, r2
 81011fe:	71bb      	strb	r3, [r7, #6]
  uint8_t write = byte;
 8101200:	79bb      	ldrb	r3, [r7, #6]
 8101202:	73fb      	strb	r3, [r7, #15]
  return NRF_WriteRegister(reg, &write, 1);
 8101204:	f107 010f 	add.w	r1, r7, #15
 8101208:	79fb      	ldrb	r3, [r7, #7]
 810120a:	2201      	movs	r2, #1
 810120c:	4618      	mov	r0, r3
 810120e:	f7ff ffd9 	bl	81011c4 <NRF_WriteRegister>
 8101212:	4603      	mov	r3, r0
}
 8101214:	4618      	mov	r0, r3
 8101216:	3710      	adds	r7, #16
 8101218:	46bd      	mov	sp, r7
 810121a:	bd80      	pop	{r7, pc}

0810121c <NRF_ReadRegister>:
/* Lê no Registro do NRF
 * Param - Registro a ser lido
 * Param - Ponteiro para variável onde será salvo
 * Param - O tamanho (em bytes)
 *  							*/
NRF_Status NRF_ReadRegister(uint8_t reg, uint8_t *read, uint8_t length) {
 810121c:	b580      	push	{r7, lr}
 810121e:	b082      	sub	sp, #8
 8101220:	af00      	add	r7, sp, #0
 8101222:	4603      	mov	r3, r0
 8101224:	6039      	str	r1, [r7, #0]
 8101226:	71fb      	strb	r3, [r7, #7]
 8101228:	4613      	mov	r3, r2
 810122a:	71bb      	strb	r3, [r7, #6]
  return NRF_SendReadCommand(NRF_CMD_R_REGISTER | reg, read, length);
 810122c:	79ba      	ldrb	r2, [r7, #6]
 810122e:	79fb      	ldrb	r3, [r7, #7]
 8101230:	6839      	ldr	r1, [r7, #0]
 8101232:	4618      	mov	r0, r3
 8101234:	f7ff ff90 	bl	8101158 <NRF_SendReadCommand>
 8101238:	4603      	mov	r3, r0
}
 810123a:	4618      	mov	r0, r3
 810123c:	3708      	adds	r7, #8
 810123e:	46bd      	mov	sp, r7
 8101240:	bd80      	pop	{r7, pc}
	...

08101244 <NRF_ReadStatus>:
  NRF_SendReadCommand(NRF_CMD_R_REGISTER | reg, &read, 1);
  return read;
}

//Lê o Status do NRF
uint8_t NRF_ReadStatus() {
 8101244:	b580      	push	{r7, lr}
 8101246:	b084      	sub	sp, #16
 8101248:	af02      	add	r7, sp, #8
  uint8_t status = 0x00;
 810124a:	2300      	movs	r3, #0
 810124c:	71fb      	strb	r3, [r7, #7]
  uint8_t cmd = NRF_CMD_NOP;
 810124e:	23ff      	movs	r3, #255	@ 0xff
 8101250:	71bb      	strb	r3, [r7, #6]

  csn_reset();
 8101252:	f7ff fec3 	bl	8100fdc <csn_reset>
  HAL_SPI_TransmitReceive(HSPI, &cmd, &status, 1, NRF_SPI_TIMEOUT_DUR);
 8101256:	4b08      	ldr	r3, [pc, #32]	@ (8101278 <NRF_ReadStatus+0x34>)
 8101258:	6818      	ldr	r0, [r3, #0]
 810125a:	1dfa      	adds	r2, r7, #7
 810125c:	1db9      	adds	r1, r7, #6
 810125e:	230a      	movs	r3, #10
 8101260:	9300      	str	r3, [sp, #0]
 8101262:	2301      	movs	r3, #1
 8101264:	f001 fe48 	bl	8102ef8 <HAL_SPI_TransmitReceive>
  csn_set();
 8101268:	f7ff fea8 	bl	8100fbc <csn_set>

  return status;
 810126c:	79fb      	ldrb	r3, [r7, #7]
}
 810126e:	4618      	mov	r0, r3
 8101270:	3708      	adds	r7, #8
 8101272:	46bd      	mov	sp, r7
 8101274:	bd80      	pop	{r7, pc}
 8101276:	bf00      	nop
 8101278:	10000054 	.word	0x10000054

0810127c <NRF_SetRegisterBit>:

/* Seta um Bit específico de um Registro para 1
 * Param - Registro a ser escrito
 * Param - Qual bit será alterado para 1
 *  											*/
NRF_Status NRF_SetRegisterBit(uint8_t reg, uint8_t bit) {
 810127c:	b580      	push	{r7, lr}
 810127e:	b084      	sub	sp, #16
 8101280:	af00      	add	r7, sp, #0
 8101282:	4603      	mov	r3, r0
 8101284:	460a      	mov	r2, r1
 8101286:	71fb      	strb	r3, [r7, #7]
 8101288:	4613      	mov	r3, r2
 810128a:	71bb      	strb	r3, [r7, #6]
  NRF_Status ret = NRF_OK;
 810128c:	2300      	movs	r3, #0
 810128e:	73fb      	strb	r3, [r7, #15]
  uint8_t cfg = 0x00;
 8101290:	2300      	movs	r3, #0
 8101292:	73bb      	strb	r3, [r7, #14]

  ret = NRF_ReadRegister(reg, &cfg, 1); //Pega a informação do byte do registro
 8101294:	f107 010e 	add.w	r1, r7, #14
 8101298:	79fb      	ldrb	r3, [r7, #7]
 810129a:	2201      	movs	r2, #1
 810129c:	4618      	mov	r0, r3
 810129e:	f7ff ffbd 	bl	810121c <NRF_ReadRegister>
 81012a2:	4603      	mov	r3, r0
 81012a4:	73fb      	strb	r3, [r7, #15]
  if (ret != NRF_OK) {
 81012a6:	7bfb      	ldrb	r3, [r7, #15]
 81012a8:	2b00      	cmp	r3, #0
 81012aa:	d001      	beq.n	81012b0 <NRF_SetRegisterBit+0x34>
    return ret;
 81012ac:	7bfb      	ldrb	r3, [r7, #15]
 81012ae:	e012      	b.n	81012d6 <NRF_SetRegisterBit+0x5a>
  }

  cfg = cfg | (1 << bit); //Altera o bit por meio de um OU binário
 81012b0:	79bb      	ldrb	r3, [r7, #6]
 81012b2:	2201      	movs	r2, #1
 81012b4:	fa02 f303 	lsl.w	r3, r2, r3
 81012b8:	b25a      	sxtb	r2, r3
 81012ba:	7bbb      	ldrb	r3, [r7, #14]
 81012bc:	b25b      	sxtb	r3, r3
 81012be:	4313      	orrs	r3, r2
 81012c0:	b25b      	sxtb	r3, r3
 81012c2:	b2db      	uxtb	r3, r3
 81012c4:	73bb      	strb	r3, [r7, #14]
  return NRF_WriteRegister(reg, &cfg, 1); //Escreve o registro de volta
 81012c6:	f107 010e 	add.w	r1, r7, #14
 81012ca:	79fb      	ldrb	r3, [r7, #7]
 81012cc:	2201      	movs	r2, #1
 81012ce:	4618      	mov	r0, r3
 81012d0:	f7ff ff78 	bl	81011c4 <NRF_WriteRegister>
 81012d4:	4603      	mov	r3, r0
}
 81012d6:	4618      	mov	r0, r3
 81012d8:	3710      	adds	r7, #16
 81012da:	46bd      	mov	sp, r7
 81012dc:	bd80      	pop	{r7, pc}

081012de <NRF_ResetRegisterBit>:

/* Seta um Bit específico de um Registro para 0
 * Param - Registro a ser escrito
 * Param - Qual bit será alterado para 1
 *  											*/
NRF_Status NRF_ResetRegisterBit(uint8_t reg, uint8_t bit) {
 81012de:	b580      	push	{r7, lr}
 81012e0:	b084      	sub	sp, #16
 81012e2:	af00      	add	r7, sp, #0
 81012e4:	4603      	mov	r3, r0
 81012e6:	460a      	mov	r2, r1
 81012e8:	71fb      	strb	r3, [r7, #7]
 81012ea:	4613      	mov	r3, r2
 81012ec:	71bb      	strb	r3, [r7, #6]
  NRF_Status ret = NRF_OK;
 81012ee:	2300      	movs	r3, #0
 81012f0:	73fb      	strb	r3, [r7, #15]
  uint8_t cfg = 0x00;
 81012f2:	2300      	movs	r3, #0
 81012f4:	73bb      	strb	r3, [r7, #14]

  ret = NRF_ReadRegister(reg, &cfg, 1);//Pega a informação do byte do registro
 81012f6:	f107 010e 	add.w	r1, r7, #14
 81012fa:	79fb      	ldrb	r3, [r7, #7]
 81012fc:	2201      	movs	r2, #1
 81012fe:	4618      	mov	r0, r3
 8101300:	f7ff ff8c 	bl	810121c <NRF_ReadRegister>
 8101304:	4603      	mov	r3, r0
 8101306:	73fb      	strb	r3, [r7, #15]
  if (ret != NRF_OK) {
 8101308:	7bfb      	ldrb	r3, [r7, #15]
 810130a:	2b00      	cmp	r3, #0
 810130c:	d001      	beq.n	8101312 <NRF_ResetRegisterBit+0x34>
    return ret;
 810130e:	7bfb      	ldrb	r3, [r7, #15]
 8101310:	e014      	b.n	810133c <NRF_ResetRegisterBit+0x5e>
  }

  cfg = cfg & ~(1 << bit);//Altera o bit por meio de um E binário
 8101312:	79bb      	ldrb	r3, [r7, #6]
 8101314:	2201      	movs	r2, #1
 8101316:	fa02 f303 	lsl.w	r3, r2, r3
 810131a:	b25b      	sxtb	r3, r3
 810131c:	43db      	mvns	r3, r3
 810131e:	b25a      	sxtb	r2, r3
 8101320:	7bbb      	ldrb	r3, [r7, #14]
 8101322:	b25b      	sxtb	r3, r3
 8101324:	4013      	ands	r3, r2
 8101326:	b25b      	sxtb	r3, r3
 8101328:	b2db      	uxtb	r3, r3
 810132a:	73bb      	strb	r3, [r7, #14]
  return NRF_WriteRegister(reg, &cfg, 1);//Escreve o registro de volta
 810132c:	f107 010e 	add.w	r1, r7, #14
 8101330:	79fb      	ldrb	r3, [r7, #7]
 8101332:	2201      	movs	r2, #1
 8101334:	4618      	mov	r0, r3
 8101336:	f7ff ff45 	bl	81011c4 <NRF_WriteRegister>
 810133a:	4603      	mov	r3, r0
}
 810133c:	4618      	mov	r0, r3
 810133e:	3710      	adds	r7, #16
 8101340:	46bd      	mov	sp, r7
 8101342:	bd80      	pop	{r7, pc}

08101344 <NRF_EnterMode>:
 * NRF_MODE_STANDBY1 - Standby
 * NRF_MODE_RX - Modo de Recepção
 * NRF_MODE_Tx - Modo de Transmissão
 * Retorno: Status
 *  								*/
NRF_Status NRF_EnterMode(uint8_t mode) {
 8101344:	b580      	push	{r7, lr}
 8101346:	b084      	sub	sp, #16
 8101348:	af00      	add	r7, sp, #0
 810134a:	4603      	mov	r3, r0
 810134c:	71fb      	strb	r3, [r7, #7]
  NRF_Status ret = NRF_OK;
 810134e:	2300      	movs	r3, #0
 8101350:	73fb      	strb	r3, [r7, #15]

  switch(mode) {
 8101352:	79fb      	ldrb	r3, [r7, #7]
 8101354:	2b03      	cmp	r3, #3
 8101356:	d859      	bhi.n	810140c <NRF_EnterMode+0xc8>
 8101358:	a201      	add	r2, pc, #4	@ (adr r2, 8101360 <NRF_EnterMode+0x1c>)
 810135a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810135e:	bf00      	nop
 8101360:	08101371 	.word	0x08101371
 8101364:	08101387 	.word	0x08101387
 8101368:	081013d1 	.word	0x081013d1
 810136c:	081013ef 	.word	0x081013ef
    case NRF_MODE_POWERDOWN:
      csn_set();
 8101370:	f7ff fe24 	bl	8100fbc <csn_set>
      ce_reset();
 8101374:	f7ff fe52 	bl	810101c <ce_reset>
      ret = NRF_ResetRegisterBit(NRF_REG_CONFIG, CFG_BIT_PWR_UP); //Seta o bit de Power up em 0
 8101378:	2101      	movs	r1, #1
 810137a:	2000      	movs	r0, #0
 810137c:	f7ff ffaf 	bl	81012de <NRF_ResetRegisterBit>
 8101380:	4603      	mov	r3, r0
 8101382:	73fb      	strb	r3, [r7, #15]
      break;
 8101384:	e046      	b.n	8101414 <NRF_EnterMode+0xd0>
    case NRF_MODE_STANDBY1:
      if (current_mode == NRF_MODE_POWERDOWN) {
 8101386:	4b29      	ldr	r3, [pc, #164]	@ (810142c <NRF_EnterMode+0xe8>)
 8101388:	681b      	ldr	r3, [r3, #0]
 810138a:	2b00      	cmp	r3, #0
 810138c:	d10c      	bne.n	81013a8 <NRF_EnterMode+0x64>
        ret = NRF_SetRegisterBit(NRF_REG_CONFIG, CFG_BIT_PWR_UP); //Seta o bit de Power up em 1
 810138e:	2101      	movs	r1, #1
 8101390:	2000      	movs	r0, #0
 8101392:	f7ff ff73 	bl	810127c <NRF_SetRegisterBit>
 8101396:	4603      	mov	r3, r0
 8101398:	73fb      	strb	r3, [r7, #15]
        wait(1500);
 810139a:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 810139e:	f04f 0100 	mov.w	r1, #0
 81013a2:	f7ff fe4b 	bl	810103c <wait>
        ret = NRF_ResetRegisterBit(NRF_REG_CONFIG, CFG_BIT_PRIM_RX);
        ce_reset();
      } else if (current_mode == NRF_MODE_TX) {
        ce_reset();
      }
      break;
 81013a6:	e034      	b.n	8101412 <NRF_EnterMode+0xce>
      } else if (current_mode == NRF_MODE_RX) {
 81013a8:	4b20      	ldr	r3, [pc, #128]	@ (810142c <NRF_EnterMode+0xe8>)
 81013aa:	681b      	ldr	r3, [r3, #0]
 81013ac:	2b02      	cmp	r3, #2
 81013ae:	d108      	bne.n	81013c2 <NRF_EnterMode+0x7e>
        ret = NRF_ResetRegisterBit(NRF_REG_CONFIG, CFG_BIT_PRIM_RX);
 81013b0:	2100      	movs	r1, #0
 81013b2:	2000      	movs	r0, #0
 81013b4:	f7ff ff93 	bl	81012de <NRF_ResetRegisterBit>
 81013b8:	4603      	mov	r3, r0
 81013ba:	73fb      	strb	r3, [r7, #15]
        ce_reset();
 81013bc:	f7ff fe2e 	bl	810101c <ce_reset>
      break;
 81013c0:	e027      	b.n	8101412 <NRF_EnterMode+0xce>
      } else if (current_mode == NRF_MODE_TX) {
 81013c2:	4b1a      	ldr	r3, [pc, #104]	@ (810142c <NRF_EnterMode+0xe8>)
 81013c4:	681b      	ldr	r3, [r3, #0]
 81013c6:	2b03      	cmp	r3, #3
 81013c8:	d123      	bne.n	8101412 <NRF_EnterMode+0xce>
        ce_reset();
 81013ca:	f7ff fe27 	bl	810101c <ce_reset>
      break;
 81013ce:	e020      	b.n	8101412 <NRF_EnterMode+0xce>
    case NRF_MODE_RX:
      if (current_mode != NRF_MODE_STANDBY1) { //O dispositivo deve estar em standby para passar para o modo Rx
 81013d0:	4b16      	ldr	r3, [pc, #88]	@ (810142c <NRF_EnterMode+0xe8>)
 81013d2:	681b      	ldr	r3, [r3, #0]
 81013d4:	2b01      	cmp	r3, #1
 81013d6:	d001      	beq.n	81013dc <NRF_EnterMode+0x98>
        return NRF_BAD_TRANSITION;
 81013d8:	2306      	movs	r3, #6
 81013da:	e022      	b.n	8101422 <NRF_EnterMode+0xde>
      }
      ret = NRF_SetRegisterBit(NRF_REG_CONFIG, CFG_BIT_PRIM_RX); // 1 = Rx
 81013dc:	2100      	movs	r1, #0
 81013de:	2000      	movs	r0, #0
 81013e0:	f7ff ff4c 	bl	810127c <NRF_SetRegisterBit>
 81013e4:	4603      	mov	r3, r0
 81013e6:	73fb      	strb	r3, [r7, #15]
      ce_set();
 81013e8:	f7ff fe08 	bl	8100ffc <ce_set>
      break;
 81013ec:	e012      	b.n	8101414 <NRF_EnterMode+0xd0>
    case NRF_MODE_TX:
      if (current_mode != NRF_MODE_STANDBY1) {
 81013ee:	4b0f      	ldr	r3, [pc, #60]	@ (810142c <NRF_EnterMode+0xe8>)
 81013f0:	681b      	ldr	r3, [r3, #0]
 81013f2:	2b01      	cmp	r3, #1
 81013f4:	d001      	beq.n	81013fa <NRF_EnterMode+0xb6>
        return NRF_BAD_TRANSITION;
 81013f6:	2306      	movs	r3, #6
 81013f8:	e013      	b.n	8101422 <NRF_EnterMode+0xde>
      }
      ret = NRF_ResetRegisterBit(NRF_REG_CONFIG, CFG_BIT_PRIM_RX); // 0 = Tx
 81013fa:	2100      	movs	r1, #0
 81013fc:	2000      	movs	r0, #0
 81013fe:	f7ff ff6e 	bl	81012de <NRF_ResetRegisterBit>
 8101402:	4603      	mov	r3, r0
 8101404:	73fb      	strb	r3, [r7, #15]
      ce_set();
 8101406:	f7ff fdf9 	bl	8100ffc <ce_set>
      break;
 810140a:	e003      	b.n	8101414 <NRF_EnterMode+0xd0>
    default:
      ret = NRF_ERROR;
 810140c:	2304      	movs	r3, #4
 810140e:	73fb      	strb	r3, [r7, #15]
      break;
 8101410:	e000      	b.n	8101414 <NRF_EnterMode+0xd0>
      break;
 8101412:	bf00      	nop
  }

  if (ret == NRF_OK) {
 8101414:	7bfb      	ldrb	r3, [r7, #15]
 8101416:	2b00      	cmp	r3, #0
 8101418:	d102      	bne.n	8101420 <NRF_EnterMode+0xdc>
    current_mode = mode;
 810141a:	79fb      	ldrb	r3, [r7, #7]
 810141c:	4a03      	ldr	r2, [pc, #12]	@ (810142c <NRF_EnterMode+0xe8>)
 810141e:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8101420:	7bfb      	ldrb	r3, [r7, #15]
}
 8101422:	4618      	mov	r0, r3
 8101424:	3710      	adds	r7, #16
 8101426:	46bd      	mov	sp, r7
 8101428:	bd80      	pop	{r7, pc}
 810142a:	bf00      	nop
 810142c:	1000006c 	.word	0x1000006c

08101430 <NRF_Init>:
 * Param - Pino Chip Select
 * Param - Porta Chip Enable
 * Param - Pino Chip Enable
 * Retorno: Status
 *  								*/
NRF_Status NRF_Init(SPI_HandleTypeDef *handle, GPIO_TypeDef *PortCSN, uint16_t PinCSN, GPIO_TypeDef *PortCE, uint16_t PinCE) {
 8101430:	b580      	push	{r7, lr}
 8101432:	b084      	sub	sp, #16
 8101434:	af00      	add	r7, sp, #0
 8101436:	60f8      	str	r0, [r7, #12]
 8101438:	60b9      	str	r1, [r7, #8]
 810143a:	603b      	str	r3, [r7, #0]
 810143c:	4613      	mov	r3, r2
 810143e:	80fb      	strh	r3, [r7, #6]
  HSPI = handle;
 8101440:	4a13      	ldr	r2, [pc, #76]	@ (8101490 <NRF_Init+0x60>)
 8101442:	68fb      	ldr	r3, [r7, #12]
 8101444:	6013      	str	r3, [r2, #0]
  NRF_CSN_Port = PortCSN;
 8101446:	4a13      	ldr	r2, [pc, #76]	@ (8101494 <NRF_Init+0x64>)
 8101448:	68bb      	ldr	r3, [r7, #8]
 810144a:	6013      	str	r3, [r2, #0]
  NRF_CSN_Pin = PinCSN;
 810144c:	4a12      	ldr	r2, [pc, #72]	@ (8101498 <NRF_Init+0x68>)
 810144e:	88fb      	ldrh	r3, [r7, #6]
 8101450:	8013      	strh	r3, [r2, #0]
  NRF_CE_Port = PortCE;
 8101452:	4a12      	ldr	r2, [pc, #72]	@ (810149c <NRF_Init+0x6c>)
 8101454:	683b      	ldr	r3, [r7, #0]
 8101456:	6013      	str	r3, [r2, #0]
  NRF_CE_Pin = PinCE;
 8101458:	4a11      	ldr	r2, [pc, #68]	@ (81014a0 <NRF_Init+0x70>)
 810145a:	8b3b      	ldrh	r3, [r7, #24]
 810145c:	8013      	strh	r3, [r2, #0]

  CPU_Freq = HAL_RCC_GetSysClockFreq();
 810145e:	f000 fe51 	bl	8102104 <HAL_RCC_GetSysClockFreq>
 8101462:	4603      	mov	r3, r0
 8101464:	4a0f      	ldr	r2, [pc, #60]	@ (81014a4 <NRF_Init+0x74>)
 8101466:	6013      	str	r3, [r2, #0]
  if (CPU_Freq == 0x00) {
 8101468:	4b0e      	ldr	r3, [pc, #56]	@ (81014a4 <NRF_Init+0x74>)
 810146a:	681b      	ldr	r3, [r3, #0]
 810146c:	2b00      	cmp	r3, #0
 810146e:	d101      	bne.n	8101474 <NRF_Init+0x44>
    return NRF_ERROR;
 8101470:	2304      	movs	r3, #4
 8101472:	e008      	b.n	8101486 <NRF_Init+0x56>
  }

  // Make sure CSN is pulled high
  csn_set();
 8101474:	f7ff fda2 	bl	8100fbc <csn_set>

  // Takes ~100ms from power on to start up
  HAL_Delay(100);
 8101478:	2064      	movs	r0, #100	@ 0x64
 810147a:	f000 faa9 	bl	81019d0 <HAL_Delay>

  return NRF_EnterMode(NRF_MODE_STANDBY1);
 810147e:	2001      	movs	r0, #1
 8101480:	f7ff ff60 	bl	8101344 <NRF_EnterMode>
 8101484:	4603      	mov	r3, r0
}
 8101486:	4618      	mov	r0, r3
 8101488:	3710      	adds	r7, #16
 810148a:	46bd      	mov	sp, r7
 810148c:	bd80      	pop	{r7, pc}
 810148e:	bf00      	nop
 8101490:	10000054 	.word	0x10000054
 8101494:	10000058 	.word	0x10000058
 8101498:	1000005c 	.word	0x1000005c
 810149c:	10000060 	.word	0x10000060
 81014a0:	10000064 	.word	0x10000064
 81014a4:	10000068 	.word	0x10000068

081014a8 <NRF_Reset>:


//Reseta o NRF  o mantendo em stanby
void NRF_Reset() {
 81014a8:	b580      	push	{r7, lr}
 81014aa:	b084      	sub	sp, #16
 81014ac:	af00      	add	r7, sp, #0
  NRF_EnterMode(NRF_MODE_POWERDOWN);
 81014ae:	2000      	movs	r0, #0
 81014b0:	f7ff ff48 	bl	8101344 <NRF_EnterMode>
  NRF_EnterMode(NRF_MODE_STANDBY1);
 81014b4:	2001      	movs	r0, #1
 81014b6:	f7ff ff45 	bl	8101344 <NRF_EnterMode>

  // Flush FIFOs
  NRF_EnterMode(NRF_MODE_TX);
 81014ba:	2003      	movs	r0, #3
 81014bc:	f7ff ff42 	bl	8101344 <NRF_EnterMode>
  NRF_SendCommand(NRF_CMD_FLUSH_TX);
 81014c0:	20e1      	movs	r0, #225	@ 0xe1
 81014c2:	f7ff fdef 	bl	81010a4 <NRF_SendCommand>
  NRF_EnterMode(NRF_MODE_STANDBY1);
 81014c6:	2001      	movs	r0, #1
 81014c8:	f7ff ff3c 	bl	8101344 <NRF_EnterMode>
  NRF_EnterMode(NRF_MODE_RX);
 81014cc:	2002      	movs	r0, #2
 81014ce:	f7ff ff39 	bl	8101344 <NRF_EnterMode>
  NRF_SendCommand(NRF_CMD_FLUSH_RX);
 81014d2:	20e2      	movs	r0, #226	@ 0xe2
 81014d4:	f7ff fde6 	bl	81010a4 <NRF_SendCommand>
  NRF_EnterMode(NRF_MODE_STANDBY1);
 81014d8:	2001      	movs	r0, #1
 81014da:	f7ff ff33 	bl	8101344 <NRF_EnterMode>

  // Flush register -> LER DATASHEET!!!!!!!!!!!!!!
  NRF_WriteRegisterByte(NRF_REG_CONFIG,       0x0A);// 00001010
 81014de:	210a      	movs	r1, #10
 81014e0:	2000      	movs	r0, #0
 81014e2:	f7ff fe85 	bl	81011f0 <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_EN_AA,        0x00);// 00000000 = AutoAcknologment desligado em todos os Pipes
 81014e6:	2100      	movs	r1, #0
 81014e8:	2001      	movs	r0, #1
 81014ea:	f7ff fe81 	bl	81011f0 <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_EN_RXADDR,    0x03);//00000011 -> Pipes 0 e 1 no Rx
 81014ee:	2103      	movs	r1, #3
 81014f0:	2002      	movs	r0, #2
 81014f2:	f7ff fe7d 	bl	81011f0 <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_SETUP_AW,     0x03);//00000011 -> 5 bytes no adresss
 81014f6:	2103      	movs	r1, #3
 81014f8:	2003      	movs	r0, #3
 81014fa:	f7ff fe79 	bl	81011f0 <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_SETUP_RETR,   0x03);//00000000 -> re-transmit desabilitado
 81014fe:	2103      	movs	r1, #3
 8101500:	2004      	movs	r0, #4
 8101502:	f7ff fe75 	bl	81011f0 <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_RF_CH,        0x02);//00000010 -> Canal 3
 8101506:	2102      	movs	r1, #2
 8101508:	2005      	movs	r0, #5
 810150a:	f7ff fe71 	bl	81011f0 <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_RF_SETUP,     0x0e);//00001110 -> LNA desligado, 0dBm, 2MBs
 810150e:	210e      	movs	r1, #14
 8101510:	2006      	movs	r0, #6
 8101512:	f7ff fe6d 	bl	81011f0 <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_STATUS,       0x70); // clear flags
 8101516:	2170      	movs	r1, #112	@ 0x70
 8101518:	2007      	movs	r0, #7
 810151a:	f7ff fe69 	bl	81011f0 <NRF_WriteRegisterByte>

  uint8_t address[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 810151e:	4a2d      	ldr	r2, [pc, #180]	@ (81015d4 <NRF_Reset+0x12c>)
 8101520:	f107 0308 	add.w	r3, r7, #8
 8101524:	e892 0003 	ldmia.w	r2, {r0, r1}
 8101528:	6018      	str	r0, [r3, #0]
 810152a:	3304      	adds	r3, #4
 810152c:	7019      	strb	r1, [r3, #0]
  uint8_t address2[5] = {0xC2, 0xC2, 0xC2, 0xC2, 0xC2};
 810152e:	4a2a      	ldr	r2, [pc, #168]	@ (81015d8 <NRF_Reset+0x130>)
 8101530:	463b      	mov	r3, r7
 8101532:	e892 0003 	ldmia.w	r2, {r0, r1}
 8101536:	6018      	str	r0, [r3, #0]
 8101538:	3304      	adds	r3, #4
 810153a:	7019      	strb	r1, [r3, #0]
  NRF_WriteRegister(NRF_REG_RX_ADDR_P0, address, 5); //Adress do pipe 0
 810153c:	f107 0308 	add.w	r3, r7, #8
 8101540:	2205      	movs	r2, #5
 8101542:	4619      	mov	r1, r3
 8101544:	200a      	movs	r0, #10
 8101546:	f7ff fe3d 	bl	81011c4 <NRF_WriteRegister>
  NRF_WriteRegister(NRF_REG_RX_ADDR_P1, address2, 5); //Adress pipe 1
 810154a:	463b      	mov	r3, r7
 810154c:	2205      	movs	r2, #5
 810154e:	4619      	mov	r1, r3
 8101550:	200b      	movs	r0, #11
 8101552:	f7ff fe37 	bl	81011c4 <NRF_WriteRegister>
  NRF_WriteRegisterByte(NRF_REG_RX_ADDR_P2,   0xC3);
 8101556:	21c3      	movs	r1, #195	@ 0xc3
 8101558:	200c      	movs	r0, #12
 810155a:	f7ff fe49 	bl	81011f0 <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_RX_ADDR_P3,   0xC4);
 810155e:	21c4      	movs	r1, #196	@ 0xc4
 8101560:	200d      	movs	r0, #13
 8101562:	f7ff fe45 	bl	81011f0 <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_RX_ADDR_P4,   0xC5);
 8101566:	21c5      	movs	r1, #197	@ 0xc5
 8101568:	200e      	movs	r0, #14
 810156a:	f7ff fe41 	bl	81011f0 <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_RX_ADDR_P5,   0xC6);
 810156e:	21c6      	movs	r1, #198	@ 0xc6
 8101570:	200f      	movs	r0, #15
 8101572:	f7ff fe3d 	bl	81011f0 <NRF_WriteRegisterByte>
  NRF_WriteRegister(NRF_REG_TX_ADDR, address, 5);
 8101576:	f107 0308 	add.w	r3, r7, #8
 810157a:	2205      	movs	r2, #5
 810157c:	4619      	mov	r1, r3
 810157e:	2010      	movs	r0, #16
 8101580:	f7ff fe20 	bl	81011c4 <NRF_WriteRegister>
  NRF_WriteRegisterByte(NRF_REG_RX_PW_P0,     0x00);
 8101584:	2100      	movs	r1, #0
 8101586:	2011      	movs	r0, #17
 8101588:	f7ff fe32 	bl	81011f0 <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_RX_PW_P1,     0x00);
 810158c:	2100      	movs	r1, #0
 810158e:	2012      	movs	r0, #18
 8101590:	f7ff fe2e 	bl	81011f0 <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_RX_PW_P2,     0x00);
 8101594:	2100      	movs	r1, #0
 8101596:	2013      	movs	r0, #19
 8101598:	f7ff fe2a 	bl	81011f0 <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_RX_PW_P3,     0x00);
 810159c:	2100      	movs	r1, #0
 810159e:	2014      	movs	r0, #20
 81015a0:	f7ff fe26 	bl	81011f0 <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_RX_PW_P4,     0x00);
 81015a4:	2100      	movs	r1, #0
 81015a6:	2015      	movs	r0, #21
 81015a8:	f7ff fe22 	bl	81011f0 <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_RX_PW_P5,     0x00);
 81015ac:	2100      	movs	r1, #0
 81015ae:	2016      	movs	r0, #22
 81015b0:	f7ff fe1e 	bl	81011f0 <NRF_WriteRegisterByte>

  NRF_WriteRegisterByte(NRF_REG_FIFO_STATUS,  0x00);
 81015b4:	2100      	movs	r1, #0
 81015b6:	2017      	movs	r0, #23
 81015b8:	f7ff fe1a 	bl	81011f0 <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_DYNPD,        0x00);
 81015bc:	2100      	movs	r1, #0
 81015be:	201c      	movs	r0, #28
 81015c0:	f7ff fe16 	bl	81011f0 <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_FEATURE,      0x00);
 81015c4:	2100      	movs	r1, #0
 81015c6:	201d      	movs	r0, #29
 81015c8:	f7ff fe12 	bl	81011f0 <NRF_WriteRegisterByte>
}
 81015cc:	bf00      	nop
 81015ce:	3710      	adds	r7, #16
 81015d0:	46bd      	mov	sp, r7
 81015d2:	bd80      	pop	{r7, pc}
 81015d4:	0810379c 	.word	0x0810379c
 81015d8:	081037a4 	.word	0x081037a4

081015dc <NRF_ReadPayload>:

NRF_Status NRF_WriteAckPayload(uint8_t pipe, uint8_t *payload, uint8_t length) {
  return NRF_SendWriteCommand(NRF_CMD_W_ACK_PAYLOAD | pipe, payload, length);
}

NRF_Status NRF_ReadPayload(uint8_t *read, uint8_t length) {
 81015dc:	b580      	push	{r7, lr}
 81015de:	b082      	sub	sp, #8
 81015e0:	af00      	add	r7, sp, #0
 81015e2:	6078      	str	r0, [r7, #4]
 81015e4:	460b      	mov	r3, r1
 81015e6:	70fb      	strb	r3, [r7, #3]
  return NRF_SendReadCommand(NRF_CMD_R_RX_PAYLOAD, read, length);
 81015e8:	78fb      	ldrb	r3, [r7, #3]
 81015ea:	461a      	mov	r2, r3
 81015ec:	6879      	ldr	r1, [r7, #4]
 81015ee:	2061      	movs	r0, #97	@ 0x61
 81015f0:	f7ff fdb2 	bl	8101158 <NRF_SendReadCommand>
 81015f4:	4603      	mov	r3, r0
}
 81015f6:	4618      	mov	r0, r3
 81015f8:	3708      	adds	r7, #8
 81015fa:	46bd      	mov	sp, r7
 81015fc:	bd80      	pop	{r7, pc}
	...

08101600 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8101600:	b580      	push	{r7, lr}
 8101602:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8101604:	4b27      	ldr	r3, [pc, #156]	@ (81016a4 <MX_SPI1_Init+0xa4>)
 8101606:	4a28      	ldr	r2, [pc, #160]	@ (81016a8 <MX_SPI1_Init+0xa8>)
 8101608:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 810160a:	4b26      	ldr	r3, [pc, #152]	@ (81016a4 <MX_SPI1_Init+0xa4>)
 810160c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8101610:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8101612:	4b24      	ldr	r3, [pc, #144]	@ (81016a4 <MX_SPI1_Init+0xa4>)
 8101614:	2200      	movs	r2, #0
 8101616:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8101618:	4b22      	ldr	r3, [pc, #136]	@ (81016a4 <MX_SPI1_Init+0xa4>)
 810161a:	2207      	movs	r2, #7
 810161c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 810161e:	4b21      	ldr	r3, [pc, #132]	@ (81016a4 <MX_SPI1_Init+0xa4>)
 8101620:	2200      	movs	r2, #0
 8101622:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8101624:	4b1f      	ldr	r3, [pc, #124]	@ (81016a4 <MX_SPI1_Init+0xa4>)
 8101626:	2200      	movs	r2, #0
 8101628:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 810162a:	4b1e      	ldr	r3, [pc, #120]	@ (81016a4 <MX_SPI1_Init+0xa4>)
 810162c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8101630:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8101632:	4b1c      	ldr	r3, [pc, #112]	@ (81016a4 <MX_SPI1_Init+0xa4>)
 8101634:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8101638:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 810163a:	4b1a      	ldr	r3, [pc, #104]	@ (81016a4 <MX_SPI1_Init+0xa4>)
 810163c:	2200      	movs	r2, #0
 810163e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8101640:	4b18      	ldr	r3, [pc, #96]	@ (81016a4 <MX_SPI1_Init+0xa4>)
 8101642:	2200      	movs	r2, #0
 8101644:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8101646:	4b17      	ldr	r3, [pc, #92]	@ (81016a4 <MX_SPI1_Init+0xa4>)
 8101648:	2200      	movs	r2, #0
 810164a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 810164c:	4b15      	ldr	r3, [pc, #84]	@ (81016a4 <MX_SPI1_Init+0xa4>)
 810164e:	2200      	movs	r2, #0
 8101650:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8101652:	4b14      	ldr	r3, [pc, #80]	@ (81016a4 <MX_SPI1_Init+0xa4>)
 8101654:	2200      	movs	r2, #0
 8101656:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8101658:	4b12      	ldr	r3, [pc, #72]	@ (81016a4 <MX_SPI1_Init+0xa4>)
 810165a:	2200      	movs	r2, #0
 810165c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 810165e:	4b11      	ldr	r3, [pc, #68]	@ (81016a4 <MX_SPI1_Init+0xa4>)
 8101660:	2200      	movs	r2, #0
 8101662:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8101664:	4b0f      	ldr	r3, [pc, #60]	@ (81016a4 <MX_SPI1_Init+0xa4>)
 8101666:	2200      	movs	r2, #0
 8101668:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 810166a:	4b0e      	ldr	r3, [pc, #56]	@ (81016a4 <MX_SPI1_Init+0xa4>)
 810166c:	2200      	movs	r2, #0
 810166e:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8101670:	4b0c      	ldr	r3, [pc, #48]	@ (81016a4 <MX_SPI1_Init+0xa4>)
 8101672:	2200      	movs	r2, #0
 8101674:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8101676:	4b0b      	ldr	r3, [pc, #44]	@ (81016a4 <MX_SPI1_Init+0xa4>)
 8101678:	2200      	movs	r2, #0
 810167a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 810167c:	4b09      	ldr	r3, [pc, #36]	@ (81016a4 <MX_SPI1_Init+0xa4>)
 810167e:	2200      	movs	r2, #0
 8101680:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_ENABLE;
 8101682:	4b08      	ldr	r3, [pc, #32]	@ (81016a4 <MX_SPI1_Init+0xa4>)
 8101684:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8101688:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 810168a:	4b06      	ldr	r3, [pc, #24]	@ (81016a4 <MX_SPI1_Init+0xa4>)
 810168c:	2200      	movs	r2, #0
 810168e:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8101690:	4804      	ldr	r0, [pc, #16]	@ (81016a4 <MX_SPI1_Init+0xa4>)
 8101692:	f000 feb1 	bl	81023f8 <HAL_SPI_Init>
 8101696:	4603      	mov	r3, r0
 8101698:	2b00      	cmp	r3, #0
 810169a:	d001      	beq.n	81016a0 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 810169c:	f7ff fc88 	bl	8100fb0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 81016a0:	bf00      	nop
 81016a2:	bd80      	pop	{r7, pc}
 81016a4:	10000070 	.word	0x10000070
 81016a8:	40013000 	.word	0x40013000

081016ac <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 81016ac:	b580      	push	{r7, lr}
 81016ae:	b08a      	sub	sp, #40	@ 0x28
 81016b0:	af00      	add	r7, sp, #0
 81016b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81016b4:	f107 0314 	add.w	r3, r7, #20
 81016b8:	2200      	movs	r2, #0
 81016ba:	601a      	str	r2, [r3, #0]
 81016bc:	605a      	str	r2, [r3, #4]
 81016be:	609a      	str	r2, [r3, #8]
 81016c0:	60da      	str	r2, [r3, #12]
 81016c2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 81016c4:	687b      	ldr	r3, [r7, #4]
 81016c6:	681b      	ldr	r3, [r3, #0]
 81016c8:	4a29      	ldr	r2, [pc, #164]	@ (8101770 <HAL_SPI_MspInit+0xc4>)
 81016ca:	4293      	cmp	r3, r2
 81016cc:	d14c      	bne.n	8101768 <HAL_SPI_MspInit+0xbc>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 81016ce:	4b29      	ldr	r3, [pc, #164]	@ (8101774 <HAL_SPI_MspInit+0xc8>)
 81016d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 81016d4:	4a27      	ldr	r2, [pc, #156]	@ (8101774 <HAL_SPI_MspInit+0xc8>)
 81016d6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 81016da:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 81016de:	4b25      	ldr	r3, [pc, #148]	@ (8101774 <HAL_SPI_MspInit+0xc8>)
 81016e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 81016e4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 81016e8:	613b      	str	r3, [r7, #16]
 81016ea:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 81016ec:	4b21      	ldr	r3, [pc, #132]	@ (8101774 <HAL_SPI_MspInit+0xc8>)
 81016ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81016f2:	4a20      	ldr	r2, [pc, #128]	@ (8101774 <HAL_SPI_MspInit+0xc8>)
 81016f4:	f043 0301 	orr.w	r3, r3, #1
 81016f8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81016fc:	4b1d      	ldr	r3, [pc, #116]	@ (8101774 <HAL_SPI_MspInit+0xc8>)
 81016fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101702:	f003 0301 	and.w	r3, r3, #1
 8101706:	60fb      	str	r3, [r7, #12]
 8101708:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 810170a:	4b1a      	ldr	r3, [pc, #104]	@ (8101774 <HAL_SPI_MspInit+0xc8>)
 810170c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101710:	4a18      	ldr	r2, [pc, #96]	@ (8101774 <HAL_SPI_MspInit+0xc8>)
 8101712:	f043 0308 	orr.w	r3, r3, #8
 8101716:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810171a:	4b16      	ldr	r3, [pc, #88]	@ (8101774 <HAL_SPI_MspInit+0xc8>)
 810171c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101720:	f003 0308 	and.w	r3, r3, #8
 8101724:	60bb      	str	r3, [r7, #8]
 8101726:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PD7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8101728:	2360      	movs	r3, #96	@ 0x60
 810172a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810172c:	2302      	movs	r3, #2
 810172e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101730:	2300      	movs	r3, #0
 8101732:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101734:	2300      	movs	r3, #0
 8101736:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8101738:	2305      	movs	r3, #5
 810173a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 810173c:	f107 0314 	add.w	r3, r7, #20
 8101740:	4619      	mov	r1, r3
 8101742:	480d      	ldr	r0, [pc, #52]	@ (8101778 <HAL_SPI_MspInit+0xcc>)
 8101744:	f000 fa60 	bl	8101c08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8101748:	2380      	movs	r3, #128	@ 0x80
 810174a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810174c:	2302      	movs	r3, #2
 810174e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101750:	2300      	movs	r3, #0
 8101752:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101754:	2300      	movs	r3, #0
 8101756:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8101758:	2305      	movs	r3, #5
 810175a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 810175c:	f107 0314 	add.w	r3, r7, #20
 8101760:	4619      	mov	r1, r3
 8101762:	4806      	ldr	r0, [pc, #24]	@ (810177c <HAL_SPI_MspInit+0xd0>)
 8101764:	f000 fa50 	bl	8101c08 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8101768:	bf00      	nop
 810176a:	3728      	adds	r7, #40	@ 0x28
 810176c:	46bd      	mov	sp, r7
 810176e:	bd80      	pop	{r7, pc}
 8101770:	40013000 	.word	0x40013000
 8101774:	58024400 	.word	0x58024400
 8101778:	58020000 	.word	0x58020000
 810177c:	58020c00 	.word	0x58020c00

08101780 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8101780:	b480      	push	{r7}
 8101782:	b083      	sub	sp, #12
 8101784:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8101786:	4b0a      	ldr	r3, [pc, #40]	@ (81017b0 <HAL_MspInit+0x30>)
 8101788:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 810178c:	4a08      	ldr	r2, [pc, #32]	@ (81017b0 <HAL_MspInit+0x30>)
 810178e:	f043 0302 	orr.w	r3, r3, #2
 8101792:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8101796:	4b06      	ldr	r3, [pc, #24]	@ (81017b0 <HAL_MspInit+0x30>)
 8101798:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 810179c:	f003 0302 	and.w	r3, r3, #2
 81017a0:	607b      	str	r3, [r7, #4]
 81017a2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 81017a4:	bf00      	nop
 81017a6:	370c      	adds	r7, #12
 81017a8:	46bd      	mov	sp, r7
 81017aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 81017ae:	4770      	bx	lr
 81017b0:	58024400 	.word	0x58024400

081017b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 81017b4:	b480      	push	{r7}
 81017b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 81017b8:	bf00      	nop
 81017ba:	e7fd      	b.n	81017b8 <NMI_Handler+0x4>

081017bc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 81017bc:	b480      	push	{r7}
 81017be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 81017c0:	bf00      	nop
 81017c2:	e7fd      	b.n	81017c0 <HardFault_Handler+0x4>

081017c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 81017c4:	b480      	push	{r7}
 81017c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 81017c8:	bf00      	nop
 81017ca:	e7fd      	b.n	81017c8 <MemManage_Handler+0x4>

081017cc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 81017cc:	b480      	push	{r7}
 81017ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 81017d0:	bf00      	nop
 81017d2:	e7fd      	b.n	81017d0 <BusFault_Handler+0x4>

081017d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 81017d4:	b480      	push	{r7}
 81017d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 81017d8:	bf00      	nop
 81017da:	e7fd      	b.n	81017d8 <UsageFault_Handler+0x4>

081017dc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 81017dc:	b480      	push	{r7}
 81017de:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 81017e0:	bf00      	nop
 81017e2:	46bd      	mov	sp, r7
 81017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81017e8:	4770      	bx	lr

081017ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 81017ea:	b480      	push	{r7}
 81017ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 81017ee:	bf00      	nop
 81017f0:	46bd      	mov	sp, r7
 81017f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81017f6:	4770      	bx	lr

081017f8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 81017f8:	b480      	push	{r7}
 81017fa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 81017fc:	bf00      	nop
 81017fe:	46bd      	mov	sp, r7
 8101800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101804:	4770      	bx	lr

08101806 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8101806:	b580      	push	{r7, lr}
 8101808:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 810180a:	f000 f8c1 	bl	8101990 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 810180e:	bf00      	nop
 8101810:	bd80      	pop	{r7, pc}
	...

08101814 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8101814:	f8df d034 	ldr.w	sp, [pc, #52]	@ 810184c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8101818:	f7ff fa44 	bl	8100ca4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 810181c:	480c      	ldr	r0, [pc, #48]	@ (8101850 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 810181e:	490d      	ldr	r1, [pc, #52]	@ (8101854 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8101820:	4a0d      	ldr	r2, [pc, #52]	@ (8101858 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8101822:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8101824:	e002      	b.n	810182c <LoopCopyDataInit>

08101826 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8101826:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8101828:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 810182a:	3304      	adds	r3, #4

0810182c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 810182c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 810182e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8101830:	d3f9      	bcc.n	8101826 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8101832:	4a0a      	ldr	r2, [pc, #40]	@ (810185c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8101834:	4c0a      	ldr	r4, [pc, #40]	@ (8101860 <LoopFillZerobss+0x22>)
  movs r3, #0
 8101836:	2300      	movs	r3, #0
  b LoopFillZerobss
 8101838:	e001      	b.n	810183e <LoopFillZerobss>

0810183a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 810183a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 810183c:	3204      	adds	r2, #4

0810183e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 810183e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8101840:	d3fb      	bcc.n	810183a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8101842:	f001 ff7b 	bl	810373c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8101846:	f7ff fb07 	bl	8100e58 <main>
  bx  lr
 810184a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 810184c:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 8101850:	10000000 	.word	0x10000000
  ldr r1, =_edata
 8101854:	10000018 	.word	0x10000018
  ldr r2, =_sidata
 8101858:	081037cc 	.word	0x081037cc
  ldr r2, =_sbss
 810185c:	10000018 	.word	0x10000018
  ldr r4, =_ebss
 8101860:	100000fc 	.word	0x100000fc

08101864 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8101864:	e7fe      	b.n	8101864 <ADC3_IRQHandler>
	...

08101868 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8101868:	b580      	push	{r7, lr}
 810186a:	b082      	sub	sp, #8
 810186c:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 810186e:	4b28      	ldr	r3, [pc, #160]	@ (8101910 <HAL_Init+0xa8>)
 8101870:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8101874:	4a26      	ldr	r2, [pc, #152]	@ (8101910 <HAL_Init+0xa8>)
 8101876:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 810187a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 810187e:	4b24      	ldr	r3, [pc, #144]	@ (8101910 <HAL_Init+0xa8>)
 8101880:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8101884:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8101888:	603b      	str	r3, [r7, #0]
 810188a:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 810188c:	4b21      	ldr	r3, [pc, #132]	@ (8101914 <HAL_Init+0xac>)
 810188e:	681b      	ldr	r3, [r3, #0]
 8101890:	f423 237f 	bic.w	r3, r3, #1044480	@ 0xff000
 8101894:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8101898:	4a1e      	ldr	r2, [pc, #120]	@ (8101914 <HAL_Init+0xac>)
 810189a:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 810189e:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 81018a0:	4b1c      	ldr	r3, [pc, #112]	@ (8101914 <HAL_Init+0xac>)
 81018a2:	681b      	ldr	r3, [r3, #0]
 81018a4:	4a1b      	ldr	r2, [pc, #108]	@ (8101914 <HAL_Init+0xac>)
 81018a6:	f043 0301 	orr.w	r3, r3, #1
 81018aa:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 81018ac:	2003      	movs	r0, #3
 81018ae:	f000 f965 	bl	8101b7c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 81018b2:	f000 fc27 	bl	8102104 <HAL_RCC_GetSysClockFreq>
 81018b6:	4602      	mov	r2, r0
 81018b8:	4b15      	ldr	r3, [pc, #84]	@ (8101910 <HAL_Init+0xa8>)
 81018ba:	699b      	ldr	r3, [r3, #24]
 81018bc:	0a1b      	lsrs	r3, r3, #8
 81018be:	f003 030f 	and.w	r3, r3, #15
 81018c2:	4915      	ldr	r1, [pc, #84]	@ (8101918 <HAL_Init+0xb0>)
 81018c4:	5ccb      	ldrb	r3, [r1, r3]
 81018c6:	f003 031f 	and.w	r3, r3, #31
 81018ca:	fa22 f303 	lsr.w	r3, r2, r3
 81018ce:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 81018d0:	4b0f      	ldr	r3, [pc, #60]	@ (8101910 <HAL_Init+0xa8>)
 81018d2:	699b      	ldr	r3, [r3, #24]
 81018d4:	f003 030f 	and.w	r3, r3, #15
 81018d8:	4a0f      	ldr	r2, [pc, #60]	@ (8101918 <HAL_Init+0xb0>)
 81018da:	5cd3      	ldrb	r3, [r2, r3]
 81018dc:	f003 031f 	and.w	r3, r3, #31
 81018e0:	687a      	ldr	r2, [r7, #4]
 81018e2:	fa22 f303 	lsr.w	r3, r2, r3
 81018e6:	4a0d      	ldr	r2, [pc, #52]	@ (810191c <HAL_Init+0xb4>)
 81018e8:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 81018ea:	4b0c      	ldr	r3, [pc, #48]	@ (810191c <HAL_Init+0xb4>)
 81018ec:	681b      	ldr	r3, [r3, #0]
 81018ee:	4a0c      	ldr	r2, [pc, #48]	@ (8101920 <HAL_Init+0xb8>)
 81018f0:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 81018f2:	2000      	movs	r0, #0
 81018f4:	f000 f816 	bl	8101924 <HAL_InitTick>
 81018f8:	4603      	mov	r3, r0
 81018fa:	2b00      	cmp	r3, #0
 81018fc:	d001      	beq.n	8101902 <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 81018fe:	2301      	movs	r3, #1
 8101900:	e002      	b.n	8101908 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8101902:	f7ff ff3d 	bl	8101780 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8101906:	2300      	movs	r3, #0
}
 8101908:	4618      	mov	r0, r3
 810190a:	3708      	adds	r7, #8
 810190c:	46bd      	mov	sp, r7
 810190e:	bd80      	pop	{r7, pc}
 8101910:	58024400 	.word	0x58024400
 8101914:	40024400 	.word	0x40024400
 8101918:	081037ac 	.word	0x081037ac
 810191c:	10000004 	.word	0x10000004
 8101920:	10000000 	.word	0x10000000

08101924 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8101924:	b580      	push	{r7, lr}
 8101926:	b082      	sub	sp, #8
 8101928:	af00      	add	r7, sp, #0
 810192a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 810192c:	4b15      	ldr	r3, [pc, #84]	@ (8101984 <HAL_InitTick+0x60>)
 810192e:	781b      	ldrb	r3, [r3, #0]
 8101930:	2b00      	cmp	r3, #0
 8101932:	d101      	bne.n	8101938 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8101934:	2301      	movs	r3, #1
 8101936:	e021      	b.n	810197c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8101938:	4b13      	ldr	r3, [pc, #76]	@ (8101988 <HAL_InitTick+0x64>)
 810193a:	681a      	ldr	r2, [r3, #0]
 810193c:	4b11      	ldr	r3, [pc, #68]	@ (8101984 <HAL_InitTick+0x60>)
 810193e:	781b      	ldrb	r3, [r3, #0]
 8101940:	4619      	mov	r1, r3
 8101942:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8101946:	fbb3 f3f1 	udiv	r3, r3, r1
 810194a:	fbb2 f3f3 	udiv	r3, r2, r3
 810194e:	4618      	mov	r0, r3
 8101950:	f000 f939 	bl	8101bc6 <HAL_SYSTICK_Config>
 8101954:	4603      	mov	r3, r0
 8101956:	2b00      	cmp	r3, #0
 8101958:	d001      	beq.n	810195e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 810195a:	2301      	movs	r3, #1
 810195c:	e00e      	b.n	810197c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 810195e:	687b      	ldr	r3, [r7, #4]
 8101960:	2b0f      	cmp	r3, #15
 8101962:	d80a      	bhi.n	810197a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8101964:	2200      	movs	r2, #0
 8101966:	6879      	ldr	r1, [r7, #4]
 8101968:	f04f 30ff 	mov.w	r0, #4294967295
 810196c:	f000 f911 	bl	8101b92 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8101970:	4a06      	ldr	r2, [pc, #24]	@ (810198c <HAL_InitTick+0x68>)
 8101972:	687b      	ldr	r3, [r7, #4]
 8101974:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8101976:	2300      	movs	r3, #0
 8101978:	e000      	b.n	810197c <HAL_InitTick+0x58>
    return HAL_ERROR;
 810197a:	2301      	movs	r3, #1
}
 810197c:	4618      	mov	r0, r3
 810197e:	3708      	adds	r7, #8
 8101980:	46bd      	mov	sp, r7
 8101982:	bd80      	pop	{r7, pc}
 8101984:	10000014 	.word	0x10000014
 8101988:	10000000 	.word	0x10000000
 810198c:	10000010 	.word	0x10000010

08101990 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8101990:	b480      	push	{r7}
 8101992:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8101994:	4b06      	ldr	r3, [pc, #24]	@ (81019b0 <HAL_IncTick+0x20>)
 8101996:	781b      	ldrb	r3, [r3, #0]
 8101998:	461a      	mov	r2, r3
 810199a:	4b06      	ldr	r3, [pc, #24]	@ (81019b4 <HAL_IncTick+0x24>)
 810199c:	681b      	ldr	r3, [r3, #0]
 810199e:	4413      	add	r3, r2
 81019a0:	4a04      	ldr	r2, [pc, #16]	@ (81019b4 <HAL_IncTick+0x24>)
 81019a2:	6013      	str	r3, [r2, #0]
}
 81019a4:	bf00      	nop
 81019a6:	46bd      	mov	sp, r7
 81019a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81019ac:	4770      	bx	lr
 81019ae:	bf00      	nop
 81019b0:	10000014 	.word	0x10000014
 81019b4:	100000f8 	.word	0x100000f8

081019b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 81019b8:	b480      	push	{r7}
 81019ba:	af00      	add	r7, sp, #0
  return uwTick;
 81019bc:	4b03      	ldr	r3, [pc, #12]	@ (81019cc <HAL_GetTick+0x14>)
 81019be:	681b      	ldr	r3, [r3, #0]
}
 81019c0:	4618      	mov	r0, r3
 81019c2:	46bd      	mov	sp, r7
 81019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81019c8:	4770      	bx	lr
 81019ca:	bf00      	nop
 81019cc:	100000f8 	.word	0x100000f8

081019d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 81019d0:	b580      	push	{r7, lr}
 81019d2:	b084      	sub	sp, #16
 81019d4:	af00      	add	r7, sp, #0
 81019d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 81019d8:	f7ff ffee 	bl	81019b8 <HAL_GetTick>
 81019dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 81019de:	687b      	ldr	r3, [r7, #4]
 81019e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 81019e2:	68fb      	ldr	r3, [r7, #12]
 81019e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 81019e8:	d005      	beq.n	81019f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 81019ea:	4b0a      	ldr	r3, [pc, #40]	@ (8101a14 <HAL_Delay+0x44>)
 81019ec:	781b      	ldrb	r3, [r3, #0]
 81019ee:	461a      	mov	r2, r3
 81019f0:	68fb      	ldr	r3, [r7, #12]
 81019f2:	4413      	add	r3, r2
 81019f4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 81019f6:	bf00      	nop
 81019f8:	f7ff ffde 	bl	81019b8 <HAL_GetTick>
 81019fc:	4602      	mov	r2, r0
 81019fe:	68bb      	ldr	r3, [r7, #8]
 8101a00:	1ad3      	subs	r3, r2, r3
 8101a02:	68fa      	ldr	r2, [r7, #12]
 8101a04:	429a      	cmp	r2, r3
 8101a06:	d8f7      	bhi.n	81019f8 <HAL_Delay+0x28>
  {
  }
}
 8101a08:	bf00      	nop
 8101a0a:	bf00      	nop
 8101a0c:	3710      	adds	r7, #16
 8101a0e:	46bd      	mov	sp, r7
 8101a10:	bd80      	pop	{r7, pc}
 8101a12:	bf00      	nop
 8101a14:	10000014 	.word	0x10000014

08101a18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8101a18:	b480      	push	{r7}
 8101a1a:	b085      	sub	sp, #20
 8101a1c:	af00      	add	r7, sp, #0
 8101a1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8101a20:	687b      	ldr	r3, [r7, #4]
 8101a22:	f003 0307 	and.w	r3, r3, #7
 8101a26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8101a28:	4b0c      	ldr	r3, [pc, #48]	@ (8101a5c <__NVIC_SetPriorityGrouping+0x44>)
 8101a2a:	68db      	ldr	r3, [r3, #12]
 8101a2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8101a2e:	68ba      	ldr	r2, [r7, #8]
 8101a30:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8101a34:	4013      	ands	r3, r2
 8101a36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8101a38:	68fb      	ldr	r3, [r7, #12]
 8101a3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8101a3c:	68bb      	ldr	r3, [r7, #8]
 8101a3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8101a40:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8101a44:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8101a48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8101a4a:	4a04      	ldr	r2, [pc, #16]	@ (8101a5c <__NVIC_SetPriorityGrouping+0x44>)
 8101a4c:	68bb      	ldr	r3, [r7, #8]
 8101a4e:	60d3      	str	r3, [r2, #12]
}
 8101a50:	bf00      	nop
 8101a52:	3714      	adds	r7, #20
 8101a54:	46bd      	mov	sp, r7
 8101a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101a5a:	4770      	bx	lr
 8101a5c:	e000ed00 	.word	0xe000ed00

08101a60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8101a60:	b480      	push	{r7}
 8101a62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8101a64:	4b04      	ldr	r3, [pc, #16]	@ (8101a78 <__NVIC_GetPriorityGrouping+0x18>)
 8101a66:	68db      	ldr	r3, [r3, #12]
 8101a68:	0a1b      	lsrs	r3, r3, #8
 8101a6a:	f003 0307 	and.w	r3, r3, #7
}
 8101a6e:	4618      	mov	r0, r3
 8101a70:	46bd      	mov	sp, r7
 8101a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101a76:	4770      	bx	lr
 8101a78:	e000ed00 	.word	0xe000ed00

08101a7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8101a7c:	b480      	push	{r7}
 8101a7e:	b083      	sub	sp, #12
 8101a80:	af00      	add	r7, sp, #0
 8101a82:	4603      	mov	r3, r0
 8101a84:	6039      	str	r1, [r7, #0]
 8101a86:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8101a88:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101a8c:	2b00      	cmp	r3, #0
 8101a8e:	db0a      	blt.n	8101aa6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8101a90:	683b      	ldr	r3, [r7, #0]
 8101a92:	b2da      	uxtb	r2, r3
 8101a94:	490c      	ldr	r1, [pc, #48]	@ (8101ac8 <__NVIC_SetPriority+0x4c>)
 8101a96:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101a9a:	0112      	lsls	r2, r2, #4
 8101a9c:	b2d2      	uxtb	r2, r2
 8101a9e:	440b      	add	r3, r1
 8101aa0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8101aa4:	e00a      	b.n	8101abc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8101aa6:	683b      	ldr	r3, [r7, #0]
 8101aa8:	b2da      	uxtb	r2, r3
 8101aaa:	4908      	ldr	r1, [pc, #32]	@ (8101acc <__NVIC_SetPriority+0x50>)
 8101aac:	88fb      	ldrh	r3, [r7, #6]
 8101aae:	f003 030f 	and.w	r3, r3, #15
 8101ab2:	3b04      	subs	r3, #4
 8101ab4:	0112      	lsls	r2, r2, #4
 8101ab6:	b2d2      	uxtb	r2, r2
 8101ab8:	440b      	add	r3, r1
 8101aba:	761a      	strb	r2, [r3, #24]
}
 8101abc:	bf00      	nop
 8101abe:	370c      	adds	r7, #12
 8101ac0:	46bd      	mov	sp, r7
 8101ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101ac6:	4770      	bx	lr
 8101ac8:	e000e100 	.word	0xe000e100
 8101acc:	e000ed00 	.word	0xe000ed00

08101ad0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8101ad0:	b480      	push	{r7}
 8101ad2:	b089      	sub	sp, #36	@ 0x24
 8101ad4:	af00      	add	r7, sp, #0
 8101ad6:	60f8      	str	r0, [r7, #12]
 8101ad8:	60b9      	str	r1, [r7, #8]
 8101ada:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8101adc:	68fb      	ldr	r3, [r7, #12]
 8101ade:	f003 0307 	and.w	r3, r3, #7
 8101ae2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8101ae4:	69fb      	ldr	r3, [r7, #28]
 8101ae6:	f1c3 0307 	rsb	r3, r3, #7
 8101aea:	2b04      	cmp	r3, #4
 8101aec:	bf28      	it	cs
 8101aee:	2304      	movcs	r3, #4
 8101af0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8101af2:	69fb      	ldr	r3, [r7, #28]
 8101af4:	3304      	adds	r3, #4
 8101af6:	2b06      	cmp	r3, #6
 8101af8:	d902      	bls.n	8101b00 <NVIC_EncodePriority+0x30>
 8101afa:	69fb      	ldr	r3, [r7, #28]
 8101afc:	3b03      	subs	r3, #3
 8101afe:	e000      	b.n	8101b02 <NVIC_EncodePriority+0x32>
 8101b00:	2300      	movs	r3, #0
 8101b02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8101b04:	f04f 32ff 	mov.w	r2, #4294967295
 8101b08:	69bb      	ldr	r3, [r7, #24]
 8101b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8101b0e:	43da      	mvns	r2, r3
 8101b10:	68bb      	ldr	r3, [r7, #8]
 8101b12:	401a      	ands	r2, r3
 8101b14:	697b      	ldr	r3, [r7, #20]
 8101b16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8101b18:	f04f 31ff 	mov.w	r1, #4294967295
 8101b1c:	697b      	ldr	r3, [r7, #20]
 8101b1e:	fa01 f303 	lsl.w	r3, r1, r3
 8101b22:	43d9      	mvns	r1, r3
 8101b24:	687b      	ldr	r3, [r7, #4]
 8101b26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8101b28:	4313      	orrs	r3, r2
         );
}
 8101b2a:	4618      	mov	r0, r3
 8101b2c:	3724      	adds	r7, #36	@ 0x24
 8101b2e:	46bd      	mov	sp, r7
 8101b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101b34:	4770      	bx	lr
	...

08101b38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8101b38:	b580      	push	{r7, lr}
 8101b3a:	b082      	sub	sp, #8
 8101b3c:	af00      	add	r7, sp, #0
 8101b3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8101b40:	687b      	ldr	r3, [r7, #4]
 8101b42:	3b01      	subs	r3, #1
 8101b44:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8101b48:	d301      	bcc.n	8101b4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8101b4a:	2301      	movs	r3, #1
 8101b4c:	e00f      	b.n	8101b6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8101b4e:	4a0a      	ldr	r2, [pc, #40]	@ (8101b78 <SysTick_Config+0x40>)
 8101b50:	687b      	ldr	r3, [r7, #4]
 8101b52:	3b01      	subs	r3, #1
 8101b54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8101b56:	210f      	movs	r1, #15
 8101b58:	f04f 30ff 	mov.w	r0, #4294967295
 8101b5c:	f7ff ff8e 	bl	8101a7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8101b60:	4b05      	ldr	r3, [pc, #20]	@ (8101b78 <SysTick_Config+0x40>)
 8101b62:	2200      	movs	r2, #0
 8101b64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8101b66:	4b04      	ldr	r3, [pc, #16]	@ (8101b78 <SysTick_Config+0x40>)
 8101b68:	2207      	movs	r2, #7
 8101b6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8101b6c:	2300      	movs	r3, #0
}
 8101b6e:	4618      	mov	r0, r3
 8101b70:	3708      	adds	r7, #8
 8101b72:	46bd      	mov	sp, r7
 8101b74:	bd80      	pop	{r7, pc}
 8101b76:	bf00      	nop
 8101b78:	e000e010 	.word	0xe000e010

08101b7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8101b7c:	b580      	push	{r7, lr}
 8101b7e:	b082      	sub	sp, #8
 8101b80:	af00      	add	r7, sp, #0
 8101b82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8101b84:	6878      	ldr	r0, [r7, #4]
 8101b86:	f7ff ff47 	bl	8101a18 <__NVIC_SetPriorityGrouping>
}
 8101b8a:	bf00      	nop
 8101b8c:	3708      	adds	r7, #8
 8101b8e:	46bd      	mov	sp, r7
 8101b90:	bd80      	pop	{r7, pc}

08101b92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8101b92:	b580      	push	{r7, lr}
 8101b94:	b086      	sub	sp, #24
 8101b96:	af00      	add	r7, sp, #0
 8101b98:	4603      	mov	r3, r0
 8101b9a:	60b9      	str	r1, [r7, #8]
 8101b9c:	607a      	str	r2, [r7, #4]
 8101b9e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8101ba0:	f7ff ff5e 	bl	8101a60 <__NVIC_GetPriorityGrouping>
 8101ba4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8101ba6:	687a      	ldr	r2, [r7, #4]
 8101ba8:	68b9      	ldr	r1, [r7, #8]
 8101baa:	6978      	ldr	r0, [r7, #20]
 8101bac:	f7ff ff90 	bl	8101ad0 <NVIC_EncodePriority>
 8101bb0:	4602      	mov	r2, r0
 8101bb2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8101bb6:	4611      	mov	r1, r2
 8101bb8:	4618      	mov	r0, r3
 8101bba:	f7ff ff5f 	bl	8101a7c <__NVIC_SetPriority>
}
 8101bbe:	bf00      	nop
 8101bc0:	3718      	adds	r7, #24
 8101bc2:	46bd      	mov	sp, r7
 8101bc4:	bd80      	pop	{r7, pc}

08101bc6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8101bc6:	b580      	push	{r7, lr}
 8101bc8:	b082      	sub	sp, #8
 8101bca:	af00      	add	r7, sp, #0
 8101bcc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8101bce:	6878      	ldr	r0, [r7, #4]
 8101bd0:	f7ff ffb2 	bl	8101b38 <SysTick_Config>
 8101bd4:	4603      	mov	r3, r0
}
 8101bd6:	4618      	mov	r0, r3
 8101bd8:	3708      	adds	r7, #8
 8101bda:	46bd      	mov	sp, r7
 8101bdc:	bd80      	pop	{r7, pc}
	...

08101be0 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8101be0:	b480      	push	{r7}
 8101be2:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8101be4:	4b07      	ldr	r3, [pc, #28]	@ (8101c04 <HAL_GetCurrentCPUID+0x24>)
 8101be6:	681b      	ldr	r3, [r3, #0]
 8101be8:	091b      	lsrs	r3, r3, #4
 8101bea:	f003 030f 	and.w	r3, r3, #15
 8101bee:	2b07      	cmp	r3, #7
 8101bf0:	d101      	bne.n	8101bf6 <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 8101bf2:	2303      	movs	r3, #3
 8101bf4:	e000      	b.n	8101bf8 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 8101bf6:	2301      	movs	r3, #1
  }
}
 8101bf8:	4618      	mov	r0, r3
 8101bfa:	46bd      	mov	sp, r7
 8101bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101c00:	4770      	bx	lr
 8101c02:	bf00      	nop
 8101c04:	e000ed00 	.word	0xe000ed00

08101c08 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8101c08:	b480      	push	{r7}
 8101c0a:	b089      	sub	sp, #36	@ 0x24
 8101c0c:	af00      	add	r7, sp, #0
 8101c0e:	6078      	str	r0, [r7, #4]
 8101c10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8101c12:	2300      	movs	r3, #0
 8101c14:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 8101c16:	4b89      	ldr	r3, [pc, #548]	@ (8101e3c <HAL_GPIO_Init+0x234>)
 8101c18:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8101c1a:	e194      	b.n	8101f46 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8101c1c:	683b      	ldr	r3, [r7, #0]
 8101c1e:	681a      	ldr	r2, [r3, #0]
 8101c20:	2101      	movs	r1, #1
 8101c22:	69fb      	ldr	r3, [r7, #28]
 8101c24:	fa01 f303 	lsl.w	r3, r1, r3
 8101c28:	4013      	ands	r3, r2
 8101c2a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8101c2c:	693b      	ldr	r3, [r7, #16]
 8101c2e:	2b00      	cmp	r3, #0
 8101c30:	f000 8186 	beq.w	8101f40 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8101c34:	683b      	ldr	r3, [r7, #0]
 8101c36:	685b      	ldr	r3, [r3, #4]
 8101c38:	f003 0303 	and.w	r3, r3, #3
 8101c3c:	2b01      	cmp	r3, #1
 8101c3e:	d005      	beq.n	8101c4c <HAL_GPIO_Init+0x44>
 8101c40:	683b      	ldr	r3, [r7, #0]
 8101c42:	685b      	ldr	r3, [r3, #4]
 8101c44:	f003 0303 	and.w	r3, r3, #3
 8101c48:	2b02      	cmp	r3, #2
 8101c4a:	d130      	bne.n	8101cae <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8101c4c:	687b      	ldr	r3, [r7, #4]
 8101c4e:	689b      	ldr	r3, [r3, #8]
 8101c50:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8101c52:	69fb      	ldr	r3, [r7, #28]
 8101c54:	005b      	lsls	r3, r3, #1
 8101c56:	2203      	movs	r2, #3
 8101c58:	fa02 f303 	lsl.w	r3, r2, r3
 8101c5c:	43db      	mvns	r3, r3
 8101c5e:	69ba      	ldr	r2, [r7, #24]
 8101c60:	4013      	ands	r3, r2
 8101c62:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8101c64:	683b      	ldr	r3, [r7, #0]
 8101c66:	68da      	ldr	r2, [r3, #12]
 8101c68:	69fb      	ldr	r3, [r7, #28]
 8101c6a:	005b      	lsls	r3, r3, #1
 8101c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8101c70:	69ba      	ldr	r2, [r7, #24]
 8101c72:	4313      	orrs	r3, r2
 8101c74:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8101c76:	687b      	ldr	r3, [r7, #4]
 8101c78:	69ba      	ldr	r2, [r7, #24]
 8101c7a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8101c7c:	687b      	ldr	r3, [r7, #4]
 8101c7e:	685b      	ldr	r3, [r3, #4]
 8101c80:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8101c82:	2201      	movs	r2, #1
 8101c84:	69fb      	ldr	r3, [r7, #28]
 8101c86:	fa02 f303 	lsl.w	r3, r2, r3
 8101c8a:	43db      	mvns	r3, r3
 8101c8c:	69ba      	ldr	r2, [r7, #24]
 8101c8e:	4013      	ands	r3, r2
 8101c90:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8101c92:	683b      	ldr	r3, [r7, #0]
 8101c94:	685b      	ldr	r3, [r3, #4]
 8101c96:	091b      	lsrs	r3, r3, #4
 8101c98:	f003 0201 	and.w	r2, r3, #1
 8101c9c:	69fb      	ldr	r3, [r7, #28]
 8101c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8101ca2:	69ba      	ldr	r2, [r7, #24]
 8101ca4:	4313      	orrs	r3, r2
 8101ca6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8101ca8:	687b      	ldr	r3, [r7, #4]
 8101caa:	69ba      	ldr	r2, [r7, #24]
 8101cac:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8101cae:	683b      	ldr	r3, [r7, #0]
 8101cb0:	685b      	ldr	r3, [r3, #4]
 8101cb2:	f003 0303 	and.w	r3, r3, #3
 8101cb6:	2b03      	cmp	r3, #3
 8101cb8:	d017      	beq.n	8101cea <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8101cba:	687b      	ldr	r3, [r7, #4]
 8101cbc:	68db      	ldr	r3, [r3, #12]
 8101cbe:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8101cc0:	69fb      	ldr	r3, [r7, #28]
 8101cc2:	005b      	lsls	r3, r3, #1
 8101cc4:	2203      	movs	r2, #3
 8101cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8101cca:	43db      	mvns	r3, r3
 8101ccc:	69ba      	ldr	r2, [r7, #24]
 8101cce:	4013      	ands	r3, r2
 8101cd0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8101cd2:	683b      	ldr	r3, [r7, #0]
 8101cd4:	689a      	ldr	r2, [r3, #8]
 8101cd6:	69fb      	ldr	r3, [r7, #28]
 8101cd8:	005b      	lsls	r3, r3, #1
 8101cda:	fa02 f303 	lsl.w	r3, r2, r3
 8101cde:	69ba      	ldr	r2, [r7, #24]
 8101ce0:	4313      	orrs	r3, r2
 8101ce2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8101ce4:	687b      	ldr	r3, [r7, #4]
 8101ce6:	69ba      	ldr	r2, [r7, #24]
 8101ce8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8101cea:	683b      	ldr	r3, [r7, #0]
 8101cec:	685b      	ldr	r3, [r3, #4]
 8101cee:	f003 0303 	and.w	r3, r3, #3
 8101cf2:	2b02      	cmp	r3, #2
 8101cf4:	d123      	bne.n	8101d3e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8101cf6:	69fb      	ldr	r3, [r7, #28]
 8101cf8:	08da      	lsrs	r2, r3, #3
 8101cfa:	687b      	ldr	r3, [r7, #4]
 8101cfc:	3208      	adds	r2, #8
 8101cfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8101d02:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8101d04:	69fb      	ldr	r3, [r7, #28]
 8101d06:	f003 0307 	and.w	r3, r3, #7
 8101d0a:	009b      	lsls	r3, r3, #2
 8101d0c:	220f      	movs	r2, #15
 8101d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8101d12:	43db      	mvns	r3, r3
 8101d14:	69ba      	ldr	r2, [r7, #24]
 8101d16:	4013      	ands	r3, r2
 8101d18:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8101d1a:	683b      	ldr	r3, [r7, #0]
 8101d1c:	691a      	ldr	r2, [r3, #16]
 8101d1e:	69fb      	ldr	r3, [r7, #28]
 8101d20:	f003 0307 	and.w	r3, r3, #7
 8101d24:	009b      	lsls	r3, r3, #2
 8101d26:	fa02 f303 	lsl.w	r3, r2, r3
 8101d2a:	69ba      	ldr	r2, [r7, #24]
 8101d2c:	4313      	orrs	r3, r2
 8101d2e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8101d30:	69fb      	ldr	r3, [r7, #28]
 8101d32:	08da      	lsrs	r2, r3, #3
 8101d34:	687b      	ldr	r3, [r7, #4]
 8101d36:	3208      	adds	r2, #8
 8101d38:	69b9      	ldr	r1, [r7, #24]
 8101d3a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8101d3e:	687b      	ldr	r3, [r7, #4]
 8101d40:	681b      	ldr	r3, [r3, #0]
 8101d42:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8101d44:	69fb      	ldr	r3, [r7, #28]
 8101d46:	005b      	lsls	r3, r3, #1
 8101d48:	2203      	movs	r2, #3
 8101d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8101d4e:	43db      	mvns	r3, r3
 8101d50:	69ba      	ldr	r2, [r7, #24]
 8101d52:	4013      	ands	r3, r2
 8101d54:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8101d56:	683b      	ldr	r3, [r7, #0]
 8101d58:	685b      	ldr	r3, [r3, #4]
 8101d5a:	f003 0203 	and.w	r2, r3, #3
 8101d5e:	69fb      	ldr	r3, [r7, #28]
 8101d60:	005b      	lsls	r3, r3, #1
 8101d62:	fa02 f303 	lsl.w	r3, r2, r3
 8101d66:	69ba      	ldr	r2, [r7, #24]
 8101d68:	4313      	orrs	r3, r2
 8101d6a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8101d6c:	687b      	ldr	r3, [r7, #4]
 8101d6e:	69ba      	ldr	r2, [r7, #24]
 8101d70:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8101d72:	683b      	ldr	r3, [r7, #0]
 8101d74:	685b      	ldr	r3, [r3, #4]
 8101d76:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8101d7a:	2b00      	cmp	r3, #0
 8101d7c:	f000 80e0 	beq.w	8101f40 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8101d80:	4b2f      	ldr	r3, [pc, #188]	@ (8101e40 <HAL_GPIO_Init+0x238>)
 8101d82:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8101d86:	4a2e      	ldr	r2, [pc, #184]	@ (8101e40 <HAL_GPIO_Init+0x238>)
 8101d88:	f043 0302 	orr.w	r3, r3, #2
 8101d8c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8101d90:	4b2b      	ldr	r3, [pc, #172]	@ (8101e40 <HAL_GPIO_Init+0x238>)
 8101d92:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8101d96:	f003 0302 	and.w	r3, r3, #2
 8101d9a:	60fb      	str	r3, [r7, #12]
 8101d9c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8101d9e:	4a29      	ldr	r2, [pc, #164]	@ (8101e44 <HAL_GPIO_Init+0x23c>)
 8101da0:	69fb      	ldr	r3, [r7, #28]
 8101da2:	089b      	lsrs	r3, r3, #2
 8101da4:	3302      	adds	r3, #2
 8101da6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8101daa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8101dac:	69fb      	ldr	r3, [r7, #28]
 8101dae:	f003 0303 	and.w	r3, r3, #3
 8101db2:	009b      	lsls	r3, r3, #2
 8101db4:	220f      	movs	r2, #15
 8101db6:	fa02 f303 	lsl.w	r3, r2, r3
 8101dba:	43db      	mvns	r3, r3
 8101dbc:	69ba      	ldr	r2, [r7, #24]
 8101dbe:	4013      	ands	r3, r2
 8101dc0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8101dc2:	687b      	ldr	r3, [r7, #4]
 8101dc4:	4a20      	ldr	r2, [pc, #128]	@ (8101e48 <HAL_GPIO_Init+0x240>)
 8101dc6:	4293      	cmp	r3, r2
 8101dc8:	d052      	beq.n	8101e70 <HAL_GPIO_Init+0x268>
 8101dca:	687b      	ldr	r3, [r7, #4]
 8101dcc:	4a1f      	ldr	r2, [pc, #124]	@ (8101e4c <HAL_GPIO_Init+0x244>)
 8101dce:	4293      	cmp	r3, r2
 8101dd0:	d031      	beq.n	8101e36 <HAL_GPIO_Init+0x22e>
 8101dd2:	687b      	ldr	r3, [r7, #4]
 8101dd4:	4a1e      	ldr	r2, [pc, #120]	@ (8101e50 <HAL_GPIO_Init+0x248>)
 8101dd6:	4293      	cmp	r3, r2
 8101dd8:	d02b      	beq.n	8101e32 <HAL_GPIO_Init+0x22a>
 8101dda:	687b      	ldr	r3, [r7, #4]
 8101ddc:	4a1d      	ldr	r2, [pc, #116]	@ (8101e54 <HAL_GPIO_Init+0x24c>)
 8101dde:	4293      	cmp	r3, r2
 8101de0:	d025      	beq.n	8101e2e <HAL_GPIO_Init+0x226>
 8101de2:	687b      	ldr	r3, [r7, #4]
 8101de4:	4a1c      	ldr	r2, [pc, #112]	@ (8101e58 <HAL_GPIO_Init+0x250>)
 8101de6:	4293      	cmp	r3, r2
 8101de8:	d01f      	beq.n	8101e2a <HAL_GPIO_Init+0x222>
 8101dea:	687b      	ldr	r3, [r7, #4]
 8101dec:	4a1b      	ldr	r2, [pc, #108]	@ (8101e5c <HAL_GPIO_Init+0x254>)
 8101dee:	4293      	cmp	r3, r2
 8101df0:	d019      	beq.n	8101e26 <HAL_GPIO_Init+0x21e>
 8101df2:	687b      	ldr	r3, [r7, #4]
 8101df4:	4a1a      	ldr	r2, [pc, #104]	@ (8101e60 <HAL_GPIO_Init+0x258>)
 8101df6:	4293      	cmp	r3, r2
 8101df8:	d013      	beq.n	8101e22 <HAL_GPIO_Init+0x21a>
 8101dfa:	687b      	ldr	r3, [r7, #4]
 8101dfc:	4a19      	ldr	r2, [pc, #100]	@ (8101e64 <HAL_GPIO_Init+0x25c>)
 8101dfe:	4293      	cmp	r3, r2
 8101e00:	d00d      	beq.n	8101e1e <HAL_GPIO_Init+0x216>
 8101e02:	687b      	ldr	r3, [r7, #4]
 8101e04:	4a18      	ldr	r2, [pc, #96]	@ (8101e68 <HAL_GPIO_Init+0x260>)
 8101e06:	4293      	cmp	r3, r2
 8101e08:	d007      	beq.n	8101e1a <HAL_GPIO_Init+0x212>
 8101e0a:	687b      	ldr	r3, [r7, #4]
 8101e0c:	4a17      	ldr	r2, [pc, #92]	@ (8101e6c <HAL_GPIO_Init+0x264>)
 8101e0e:	4293      	cmp	r3, r2
 8101e10:	d101      	bne.n	8101e16 <HAL_GPIO_Init+0x20e>
 8101e12:	2309      	movs	r3, #9
 8101e14:	e02d      	b.n	8101e72 <HAL_GPIO_Init+0x26a>
 8101e16:	230a      	movs	r3, #10
 8101e18:	e02b      	b.n	8101e72 <HAL_GPIO_Init+0x26a>
 8101e1a:	2308      	movs	r3, #8
 8101e1c:	e029      	b.n	8101e72 <HAL_GPIO_Init+0x26a>
 8101e1e:	2307      	movs	r3, #7
 8101e20:	e027      	b.n	8101e72 <HAL_GPIO_Init+0x26a>
 8101e22:	2306      	movs	r3, #6
 8101e24:	e025      	b.n	8101e72 <HAL_GPIO_Init+0x26a>
 8101e26:	2305      	movs	r3, #5
 8101e28:	e023      	b.n	8101e72 <HAL_GPIO_Init+0x26a>
 8101e2a:	2304      	movs	r3, #4
 8101e2c:	e021      	b.n	8101e72 <HAL_GPIO_Init+0x26a>
 8101e2e:	2303      	movs	r3, #3
 8101e30:	e01f      	b.n	8101e72 <HAL_GPIO_Init+0x26a>
 8101e32:	2302      	movs	r3, #2
 8101e34:	e01d      	b.n	8101e72 <HAL_GPIO_Init+0x26a>
 8101e36:	2301      	movs	r3, #1
 8101e38:	e01b      	b.n	8101e72 <HAL_GPIO_Init+0x26a>
 8101e3a:	bf00      	nop
 8101e3c:	580000c0 	.word	0x580000c0
 8101e40:	58024400 	.word	0x58024400
 8101e44:	58000400 	.word	0x58000400
 8101e48:	58020000 	.word	0x58020000
 8101e4c:	58020400 	.word	0x58020400
 8101e50:	58020800 	.word	0x58020800
 8101e54:	58020c00 	.word	0x58020c00
 8101e58:	58021000 	.word	0x58021000
 8101e5c:	58021400 	.word	0x58021400
 8101e60:	58021800 	.word	0x58021800
 8101e64:	58021c00 	.word	0x58021c00
 8101e68:	58022000 	.word	0x58022000
 8101e6c:	58022400 	.word	0x58022400
 8101e70:	2300      	movs	r3, #0
 8101e72:	69fa      	ldr	r2, [r7, #28]
 8101e74:	f002 0203 	and.w	r2, r2, #3
 8101e78:	0092      	lsls	r2, r2, #2
 8101e7a:	4093      	lsls	r3, r2
 8101e7c:	69ba      	ldr	r2, [r7, #24]
 8101e7e:	4313      	orrs	r3, r2
 8101e80:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8101e82:	4938      	ldr	r1, [pc, #224]	@ (8101f64 <HAL_GPIO_Init+0x35c>)
 8101e84:	69fb      	ldr	r3, [r7, #28]
 8101e86:	089b      	lsrs	r3, r3, #2
 8101e88:	3302      	adds	r3, #2
 8101e8a:	69ba      	ldr	r2, [r7, #24]
 8101e8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8101e90:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8101e94:	681b      	ldr	r3, [r3, #0]
 8101e96:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8101e98:	693b      	ldr	r3, [r7, #16]
 8101e9a:	43db      	mvns	r3, r3
 8101e9c:	69ba      	ldr	r2, [r7, #24]
 8101e9e:	4013      	ands	r3, r2
 8101ea0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8101ea2:	683b      	ldr	r3, [r7, #0]
 8101ea4:	685b      	ldr	r3, [r3, #4]
 8101ea6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8101eaa:	2b00      	cmp	r3, #0
 8101eac:	d003      	beq.n	8101eb6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8101eae:	69ba      	ldr	r2, [r7, #24]
 8101eb0:	693b      	ldr	r3, [r7, #16]
 8101eb2:	4313      	orrs	r3, r2
 8101eb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8101eb6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8101eba:	69bb      	ldr	r3, [r7, #24]
 8101ebc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8101ebe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8101ec2:	685b      	ldr	r3, [r3, #4]
 8101ec4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8101ec6:	693b      	ldr	r3, [r7, #16]
 8101ec8:	43db      	mvns	r3, r3
 8101eca:	69ba      	ldr	r2, [r7, #24]
 8101ecc:	4013      	ands	r3, r2
 8101ece:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8101ed0:	683b      	ldr	r3, [r7, #0]
 8101ed2:	685b      	ldr	r3, [r3, #4]
 8101ed4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8101ed8:	2b00      	cmp	r3, #0
 8101eda:	d003      	beq.n	8101ee4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8101edc:	69ba      	ldr	r2, [r7, #24]
 8101ede:	693b      	ldr	r3, [r7, #16]
 8101ee0:	4313      	orrs	r3, r2
 8101ee2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8101ee4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8101ee8:	69bb      	ldr	r3, [r7, #24]
 8101eea:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8101eec:	697b      	ldr	r3, [r7, #20]
 8101eee:	685b      	ldr	r3, [r3, #4]
 8101ef0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8101ef2:	693b      	ldr	r3, [r7, #16]
 8101ef4:	43db      	mvns	r3, r3
 8101ef6:	69ba      	ldr	r2, [r7, #24]
 8101ef8:	4013      	ands	r3, r2
 8101efa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8101efc:	683b      	ldr	r3, [r7, #0]
 8101efe:	685b      	ldr	r3, [r3, #4]
 8101f00:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8101f04:	2b00      	cmp	r3, #0
 8101f06:	d003      	beq.n	8101f10 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8101f08:	69ba      	ldr	r2, [r7, #24]
 8101f0a:	693b      	ldr	r3, [r7, #16]
 8101f0c:	4313      	orrs	r3, r2
 8101f0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8101f10:	697b      	ldr	r3, [r7, #20]
 8101f12:	69ba      	ldr	r2, [r7, #24]
 8101f14:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8101f16:	697b      	ldr	r3, [r7, #20]
 8101f18:	681b      	ldr	r3, [r3, #0]
 8101f1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8101f1c:	693b      	ldr	r3, [r7, #16]
 8101f1e:	43db      	mvns	r3, r3
 8101f20:	69ba      	ldr	r2, [r7, #24]
 8101f22:	4013      	ands	r3, r2
 8101f24:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8101f26:	683b      	ldr	r3, [r7, #0]
 8101f28:	685b      	ldr	r3, [r3, #4]
 8101f2a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8101f2e:	2b00      	cmp	r3, #0
 8101f30:	d003      	beq.n	8101f3a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8101f32:	69ba      	ldr	r2, [r7, #24]
 8101f34:	693b      	ldr	r3, [r7, #16]
 8101f36:	4313      	orrs	r3, r2
 8101f38:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8101f3a:	697b      	ldr	r3, [r7, #20]
 8101f3c:	69ba      	ldr	r2, [r7, #24]
 8101f3e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8101f40:	69fb      	ldr	r3, [r7, #28]
 8101f42:	3301      	adds	r3, #1
 8101f44:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8101f46:	683b      	ldr	r3, [r7, #0]
 8101f48:	681a      	ldr	r2, [r3, #0]
 8101f4a:	69fb      	ldr	r3, [r7, #28]
 8101f4c:	fa22 f303 	lsr.w	r3, r2, r3
 8101f50:	2b00      	cmp	r3, #0
 8101f52:	f47f ae63 	bne.w	8101c1c <HAL_GPIO_Init+0x14>
  }
}
 8101f56:	bf00      	nop
 8101f58:	bf00      	nop
 8101f5a:	3724      	adds	r7, #36	@ 0x24
 8101f5c:	46bd      	mov	sp, r7
 8101f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101f62:	4770      	bx	lr
 8101f64:	58000400 	.word	0x58000400

08101f68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8101f68:	b480      	push	{r7}
 8101f6a:	b083      	sub	sp, #12
 8101f6c:	af00      	add	r7, sp, #0
 8101f6e:	6078      	str	r0, [r7, #4]
 8101f70:	460b      	mov	r3, r1
 8101f72:	807b      	strh	r3, [r7, #2]
 8101f74:	4613      	mov	r3, r2
 8101f76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8101f78:	787b      	ldrb	r3, [r7, #1]
 8101f7a:	2b00      	cmp	r3, #0
 8101f7c:	d003      	beq.n	8101f86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8101f7e:	887a      	ldrh	r2, [r7, #2]
 8101f80:	687b      	ldr	r3, [r7, #4]
 8101f82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8101f84:	e003      	b.n	8101f8e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8101f86:	887b      	ldrh	r3, [r7, #2]
 8101f88:	041a      	lsls	r2, r3, #16
 8101f8a:	687b      	ldr	r3, [r7, #4]
 8101f8c:	619a      	str	r2, [r3, #24]
}
 8101f8e:	bf00      	nop
 8101f90:	370c      	adds	r7, #12
 8101f92:	46bd      	mov	sp, r7
 8101f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101f98:	4770      	bx	lr

08101f9a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8101f9a:	b480      	push	{r7}
 8101f9c:	b085      	sub	sp, #20
 8101f9e:	af00      	add	r7, sp, #0
 8101fa0:	6078      	str	r0, [r7, #4]
 8101fa2:	460b      	mov	r3, r1
 8101fa4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8101fa6:	687b      	ldr	r3, [r7, #4]
 8101fa8:	695b      	ldr	r3, [r3, #20]
 8101faa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8101fac:	887a      	ldrh	r2, [r7, #2]
 8101fae:	68fb      	ldr	r3, [r7, #12]
 8101fb0:	4013      	ands	r3, r2
 8101fb2:	041a      	lsls	r2, r3, #16
 8101fb4:	68fb      	ldr	r3, [r7, #12]
 8101fb6:	43d9      	mvns	r1, r3
 8101fb8:	887b      	ldrh	r3, [r7, #2]
 8101fba:	400b      	ands	r3, r1
 8101fbc:	431a      	orrs	r2, r3
 8101fbe:	687b      	ldr	r3, [r7, #4]
 8101fc0:	619a      	str	r2, [r3, #24]
}
 8101fc2:	bf00      	nop
 8101fc4:	3714      	adds	r7, #20
 8101fc6:	46bd      	mov	sp, r7
 8101fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101fcc:	4770      	bx	lr
	...

08101fd0 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 8101fd0:	b480      	push	{r7}
 8101fd2:	b083      	sub	sp, #12
 8101fd4:	af00      	add	r7, sp, #0
 8101fd6:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 8101fd8:	4b05      	ldr	r3, [pc, #20]	@ (8101ff0 <HAL_HSEM_ActivateNotification+0x20>)
 8101fda:	681a      	ldr	r2, [r3, #0]
 8101fdc:	4904      	ldr	r1, [pc, #16]	@ (8101ff0 <HAL_HSEM_ActivateNotification+0x20>)
 8101fde:	687b      	ldr	r3, [r7, #4]
 8101fe0:	4313      	orrs	r3, r2
 8101fe2:	600b      	str	r3, [r1, #0]
#endif
}
 8101fe4:	bf00      	nop
 8101fe6:	370c      	adds	r7, #12
 8101fe8:	46bd      	mov	sp, r7
 8101fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101fee:	4770      	bx	lr
 8101ff0:	58026510 	.word	0x58026510

08101ff4 <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 8101ff4:	b580      	push	{r7, lr}
 8101ff6:	b084      	sub	sp, #16
 8101ff8:	af00      	add	r7, sp, #0
 8101ffa:	60f8      	str	r0, [r7, #12]
 8101ffc:	460b      	mov	r3, r1
 8101ffe:	607a      	str	r2, [r7, #4]
 8102000:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8102002:	4b37      	ldr	r3, [pc, #220]	@ (81020e0 <HAL_PWREx_EnterSTOPMode+0xec>)
 8102004:	681b      	ldr	r3, [r3, #0]
 8102006:	f023 0201 	bic.w	r2, r3, #1
 810200a:	4935      	ldr	r1, [pc, #212]	@ (81020e0 <HAL_PWREx_EnterSTOPMode+0xec>)
 810200c:	68fb      	ldr	r3, [r7, #12]
 810200e:	4313      	orrs	r3, r2
 8102010:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 8102012:	687b      	ldr	r3, [r7, #4]
 8102014:	2b00      	cmp	r3, #0
 8102016:	d123      	bne.n	8102060 <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 8102018:	f7ff fde2 	bl	8101be0 <HAL_GetCurrentCPUID>
 810201c:	4603      	mov	r3, r0
 810201e:	2b03      	cmp	r3, #3
 8102020:	d158      	bne.n	81020d4 <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 8102022:	4b2f      	ldr	r3, [pc, #188]	@ (81020e0 <HAL_PWREx_EnterSTOPMode+0xec>)
 8102024:	691b      	ldr	r3, [r3, #16]
 8102026:	4a2e      	ldr	r2, [pc, #184]	@ (81020e0 <HAL_PWREx_EnterSTOPMode+0xec>)
 8102028:	f023 0301 	bic.w	r3, r3, #1
 810202c:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 810202e:	4b2d      	ldr	r3, [pc, #180]	@ (81020e4 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8102030:	691b      	ldr	r3, [r3, #16]
 8102032:	4a2c      	ldr	r2, [pc, #176]	@ (81020e4 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8102034:	f043 0304 	orr.w	r3, r3, #4
 8102038:	6113      	str	r3, [r2, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 810203a:	f3bf 8f4f 	dsb	sy
}
 810203e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8102040:	f3bf 8f6f 	isb	sy
}
 8102044:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8102046:	7afb      	ldrb	r3, [r7, #11]
 8102048:	2b01      	cmp	r3, #1
 810204a:	d101      	bne.n	8102050 <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 810204c:	bf30      	wfi
 810204e:	e000      	b.n	8102052 <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8102050:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8102052:	4b24      	ldr	r3, [pc, #144]	@ (81020e4 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8102054:	691b      	ldr	r3, [r3, #16]
 8102056:	4a23      	ldr	r2, [pc, #140]	@ (81020e4 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8102058:	f023 0304 	bic.w	r3, r3, #4
 810205c:	6113      	str	r3, [r2, #16]
 810205e:	e03c      	b.n	81020da <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 8102060:	687b      	ldr	r3, [r7, #4]
 8102062:	2b01      	cmp	r3, #1
 8102064:	d123      	bne.n	81020ae <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 8102066:	f7ff fdbb 	bl	8101be0 <HAL_GetCurrentCPUID>
 810206a:	4603      	mov	r3, r0
 810206c:	2b01      	cmp	r3, #1
 810206e:	d133      	bne.n	81020d8 <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 8102070:	4b1b      	ldr	r3, [pc, #108]	@ (81020e0 <HAL_PWREx_EnterSTOPMode+0xec>)
 8102072:	695b      	ldr	r3, [r3, #20]
 8102074:	4a1a      	ldr	r2, [pc, #104]	@ (81020e0 <HAL_PWREx_EnterSTOPMode+0xec>)
 8102076:	f023 0302 	bic.w	r3, r3, #2
 810207a:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 810207c:	4b19      	ldr	r3, [pc, #100]	@ (81020e4 <HAL_PWREx_EnterSTOPMode+0xf0>)
 810207e:	691b      	ldr	r3, [r3, #16]
 8102080:	4a18      	ldr	r2, [pc, #96]	@ (81020e4 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8102082:	f043 0304 	orr.w	r3, r3, #4
 8102086:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8102088:	f3bf 8f4f 	dsb	sy
}
 810208c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 810208e:	f3bf 8f6f 	isb	sy
}
 8102092:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8102094:	7afb      	ldrb	r3, [r7, #11]
 8102096:	2b01      	cmp	r3, #1
 8102098:	d101      	bne.n	810209e <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 810209a:	bf30      	wfi
 810209c:	e000      	b.n	81020a0 <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 810209e:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81020a0:	4b10      	ldr	r3, [pc, #64]	@ (81020e4 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81020a2:	691b      	ldr	r3, [r3, #16]
 81020a4:	4a0f      	ldr	r2, [pc, #60]	@ (81020e4 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81020a6:	f023 0304 	bic.w	r3, r3, #4
 81020aa:	6113      	str	r3, [r2, #16]
 81020ac:	e015      	b.n	81020da <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 81020ae:	f7ff fd97 	bl	8101be0 <HAL_GetCurrentCPUID>
 81020b2:	4603      	mov	r3, r0
 81020b4:	2b03      	cmp	r3, #3
 81020b6:	d106      	bne.n	81020c6 <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 81020b8:	4b09      	ldr	r3, [pc, #36]	@ (81020e0 <HAL_PWREx_EnterSTOPMode+0xec>)
 81020ba:	691b      	ldr	r3, [r3, #16]
 81020bc:	4a08      	ldr	r2, [pc, #32]	@ (81020e0 <HAL_PWREx_EnterSTOPMode+0xec>)
 81020be:	f023 0304 	bic.w	r3, r3, #4
 81020c2:	6113      	str	r3, [r2, #16]
 81020c4:	e009      	b.n	81020da <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 81020c6:	4b06      	ldr	r3, [pc, #24]	@ (81020e0 <HAL_PWREx_EnterSTOPMode+0xec>)
 81020c8:	695b      	ldr	r3, [r3, #20]
 81020ca:	4a05      	ldr	r2, [pc, #20]	@ (81020e0 <HAL_PWREx_EnterSTOPMode+0xec>)
 81020cc:	f023 0304 	bic.w	r3, r3, #4
 81020d0:	6153      	str	r3, [r2, #20]
 81020d2:	e002      	b.n	81020da <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 81020d4:	bf00      	nop
 81020d6:	e000      	b.n	81020da <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 81020d8:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 81020da:	3710      	adds	r7, #16
 81020dc:	46bd      	mov	sp, r7
 81020de:	bd80      	pop	{r7, pc}
 81020e0:	58024800 	.word	0x58024800
 81020e4:	e000ed00 	.word	0xe000ed00

081020e8 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 81020e8:	b580      	push	{r7, lr}
 81020ea:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 81020ec:	f7ff fd78 	bl	8101be0 <HAL_GetCurrentCPUID>
 81020f0:	4603      	mov	r3, r0
 81020f2:	2b03      	cmp	r3, #3
 81020f4:	d101      	bne.n	81020fa <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 81020f6:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 81020f8:	e001      	b.n	81020fe <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 81020fa:	bf40      	sev
    __WFE ();
 81020fc:	bf20      	wfe
}
 81020fe:	bf00      	nop
 8102100:	bd80      	pop	{r7, pc}
	...

08102104 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8102104:	b480      	push	{r7}
 8102106:	b089      	sub	sp, #36	@ 0x24
 8102108:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 810210a:	4bb3      	ldr	r3, [pc, #716]	@ (81023d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810210c:	691b      	ldr	r3, [r3, #16]
 810210e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8102112:	2b18      	cmp	r3, #24
 8102114:	f200 8155 	bhi.w	81023c2 <HAL_RCC_GetSysClockFreq+0x2be>
 8102118:	a201      	add	r2, pc, #4	@ (adr r2, 8102120 <HAL_RCC_GetSysClockFreq+0x1c>)
 810211a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810211e:	bf00      	nop
 8102120:	08102185 	.word	0x08102185
 8102124:	081023c3 	.word	0x081023c3
 8102128:	081023c3 	.word	0x081023c3
 810212c:	081023c3 	.word	0x081023c3
 8102130:	081023c3 	.word	0x081023c3
 8102134:	081023c3 	.word	0x081023c3
 8102138:	081023c3 	.word	0x081023c3
 810213c:	081023c3 	.word	0x081023c3
 8102140:	081021ab 	.word	0x081021ab
 8102144:	081023c3 	.word	0x081023c3
 8102148:	081023c3 	.word	0x081023c3
 810214c:	081023c3 	.word	0x081023c3
 8102150:	081023c3 	.word	0x081023c3
 8102154:	081023c3 	.word	0x081023c3
 8102158:	081023c3 	.word	0x081023c3
 810215c:	081023c3 	.word	0x081023c3
 8102160:	081021b1 	.word	0x081021b1
 8102164:	081023c3 	.word	0x081023c3
 8102168:	081023c3 	.word	0x081023c3
 810216c:	081023c3 	.word	0x081023c3
 8102170:	081023c3 	.word	0x081023c3
 8102174:	081023c3 	.word	0x081023c3
 8102178:	081023c3 	.word	0x081023c3
 810217c:	081023c3 	.word	0x081023c3
 8102180:	081021b7 	.word	0x081021b7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8102184:	4b94      	ldr	r3, [pc, #592]	@ (81023d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102186:	681b      	ldr	r3, [r3, #0]
 8102188:	f003 0320 	and.w	r3, r3, #32
 810218c:	2b00      	cmp	r3, #0
 810218e:	d009      	beq.n	81021a4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8102190:	4b91      	ldr	r3, [pc, #580]	@ (81023d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102192:	681b      	ldr	r3, [r3, #0]
 8102194:	08db      	lsrs	r3, r3, #3
 8102196:	f003 0303 	and.w	r3, r3, #3
 810219a:	4a90      	ldr	r2, [pc, #576]	@ (81023dc <HAL_RCC_GetSysClockFreq+0x2d8>)
 810219c:	fa22 f303 	lsr.w	r3, r2, r3
 81021a0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 81021a2:	e111      	b.n	81023c8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 81021a4:	4b8d      	ldr	r3, [pc, #564]	@ (81023dc <HAL_RCC_GetSysClockFreq+0x2d8>)
 81021a6:	61bb      	str	r3, [r7, #24]
      break;
 81021a8:	e10e      	b.n	81023c8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 81021aa:	4b8d      	ldr	r3, [pc, #564]	@ (81023e0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 81021ac:	61bb      	str	r3, [r7, #24]
      break;
 81021ae:	e10b      	b.n	81023c8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 81021b0:	4b8c      	ldr	r3, [pc, #560]	@ (81023e4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 81021b2:	61bb      	str	r3, [r7, #24]
      break;
 81021b4:	e108      	b.n	81023c8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 81021b6:	4b88      	ldr	r3, [pc, #544]	@ (81023d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81021b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81021ba:	f003 0303 	and.w	r3, r3, #3
 81021be:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 81021c0:	4b85      	ldr	r3, [pc, #532]	@ (81023d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81021c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81021c4:	091b      	lsrs	r3, r3, #4
 81021c6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 81021ca:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 81021cc:	4b82      	ldr	r3, [pc, #520]	@ (81023d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81021ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81021d0:	f003 0301 	and.w	r3, r3, #1
 81021d4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 81021d6:	4b80      	ldr	r3, [pc, #512]	@ (81023d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81021d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 81021da:	08db      	lsrs	r3, r3, #3
 81021dc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 81021e0:	68fa      	ldr	r2, [r7, #12]
 81021e2:	fb02 f303 	mul.w	r3, r2, r3
 81021e6:	ee07 3a90 	vmov	s15, r3
 81021ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81021ee:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 81021f2:	693b      	ldr	r3, [r7, #16]
 81021f4:	2b00      	cmp	r3, #0
 81021f6:	f000 80e1 	beq.w	81023bc <HAL_RCC_GetSysClockFreq+0x2b8>
 81021fa:	697b      	ldr	r3, [r7, #20]
 81021fc:	2b02      	cmp	r3, #2
 81021fe:	f000 8083 	beq.w	8102308 <HAL_RCC_GetSysClockFreq+0x204>
 8102202:	697b      	ldr	r3, [r7, #20]
 8102204:	2b02      	cmp	r3, #2
 8102206:	f200 80a1 	bhi.w	810234c <HAL_RCC_GetSysClockFreq+0x248>
 810220a:	697b      	ldr	r3, [r7, #20]
 810220c:	2b00      	cmp	r3, #0
 810220e:	d003      	beq.n	8102218 <HAL_RCC_GetSysClockFreq+0x114>
 8102210:	697b      	ldr	r3, [r7, #20]
 8102212:	2b01      	cmp	r3, #1
 8102214:	d056      	beq.n	81022c4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8102216:	e099      	b.n	810234c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8102218:	4b6f      	ldr	r3, [pc, #444]	@ (81023d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810221a:	681b      	ldr	r3, [r3, #0]
 810221c:	f003 0320 	and.w	r3, r3, #32
 8102220:	2b00      	cmp	r3, #0
 8102222:	d02d      	beq.n	8102280 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8102224:	4b6c      	ldr	r3, [pc, #432]	@ (81023d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102226:	681b      	ldr	r3, [r3, #0]
 8102228:	08db      	lsrs	r3, r3, #3
 810222a:	f003 0303 	and.w	r3, r3, #3
 810222e:	4a6b      	ldr	r2, [pc, #428]	@ (81023dc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8102230:	fa22 f303 	lsr.w	r3, r2, r3
 8102234:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8102236:	687b      	ldr	r3, [r7, #4]
 8102238:	ee07 3a90 	vmov	s15, r3
 810223c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102240:	693b      	ldr	r3, [r7, #16]
 8102242:	ee07 3a90 	vmov	s15, r3
 8102246:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810224a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810224e:	4b62      	ldr	r3, [pc, #392]	@ (81023d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102250:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8102252:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8102256:	ee07 3a90 	vmov	s15, r3
 810225a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810225e:	ed97 6a02 	vldr	s12, [r7, #8]
 8102262:	eddf 5a61 	vldr	s11, [pc, #388]	@ 81023e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8102266:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810226a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810226e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8102272:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8102276:	ee67 7a27 	vmul.f32	s15, s14, s15
 810227a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 810227e:	e087      	b.n	8102390 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8102280:	693b      	ldr	r3, [r7, #16]
 8102282:	ee07 3a90 	vmov	s15, r3
 8102286:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810228a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 81023ec <HAL_RCC_GetSysClockFreq+0x2e8>
 810228e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8102292:	4b51      	ldr	r3, [pc, #324]	@ (81023d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102294:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8102296:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810229a:	ee07 3a90 	vmov	s15, r3
 810229e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81022a2:	ed97 6a02 	vldr	s12, [r7, #8]
 81022a6:	eddf 5a50 	vldr	s11, [pc, #320]	@ 81023e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 81022aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81022ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81022b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81022b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81022ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 81022be:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 81022c2:	e065      	b.n	8102390 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81022c4:	693b      	ldr	r3, [r7, #16]
 81022c6:	ee07 3a90 	vmov	s15, r3
 81022ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81022ce:	eddf 6a48 	vldr	s13, [pc, #288]	@ 81023f0 <HAL_RCC_GetSysClockFreq+0x2ec>
 81022d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81022d6:	4b40      	ldr	r3, [pc, #256]	@ (81023d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81022d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81022da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81022de:	ee07 3a90 	vmov	s15, r3
 81022e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81022e6:	ed97 6a02 	vldr	s12, [r7, #8]
 81022ea:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 81023e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 81022ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81022f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81022f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81022fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81022fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102302:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8102306:	e043      	b.n	8102390 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8102308:	693b      	ldr	r3, [r7, #16]
 810230a:	ee07 3a90 	vmov	s15, r3
 810230e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102312:	eddf 6a38 	vldr	s13, [pc, #224]	@ 81023f4 <HAL_RCC_GetSysClockFreq+0x2f0>
 8102316:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810231a:	4b2f      	ldr	r3, [pc, #188]	@ (81023d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810231c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810231e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8102322:	ee07 3a90 	vmov	s15, r3
 8102326:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810232a:	ed97 6a02 	vldr	s12, [r7, #8]
 810232e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 81023e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8102332:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8102336:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810233a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810233e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8102342:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102346:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 810234a:	e021      	b.n	8102390 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 810234c:	693b      	ldr	r3, [r7, #16]
 810234e:	ee07 3a90 	vmov	s15, r3
 8102352:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102356:	eddf 6a26 	vldr	s13, [pc, #152]	@ 81023f0 <HAL_RCC_GetSysClockFreq+0x2ec>
 810235a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810235e:	4b1e      	ldr	r3, [pc, #120]	@ (81023d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102360:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8102362:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8102366:	ee07 3a90 	vmov	s15, r3
 810236a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810236e:	ed97 6a02 	vldr	s12, [r7, #8]
 8102372:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 81023e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8102376:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810237a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810237e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8102382:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8102386:	ee67 7a27 	vmul.f32	s15, s14, s15
 810238a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 810238e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8102390:	4b11      	ldr	r3, [pc, #68]	@ (81023d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102392:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8102394:	0a5b      	lsrs	r3, r3, #9
 8102396:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 810239a:	3301      	adds	r3, #1
 810239c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 810239e:	683b      	ldr	r3, [r7, #0]
 81023a0:	ee07 3a90 	vmov	s15, r3
 81023a4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 81023a8:	edd7 6a07 	vldr	s13, [r7, #28]
 81023ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81023b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81023b4:	ee17 3a90 	vmov	r3, s15
 81023b8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 81023ba:	e005      	b.n	81023c8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 81023bc:	2300      	movs	r3, #0
 81023be:	61bb      	str	r3, [r7, #24]
      break;
 81023c0:	e002      	b.n	81023c8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 81023c2:	4b07      	ldr	r3, [pc, #28]	@ (81023e0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 81023c4:	61bb      	str	r3, [r7, #24]
      break;
 81023c6:	bf00      	nop
  }

  return sysclockfreq;
 81023c8:	69bb      	ldr	r3, [r7, #24]
}
 81023ca:	4618      	mov	r0, r3
 81023cc:	3724      	adds	r7, #36	@ 0x24
 81023ce:	46bd      	mov	sp, r7
 81023d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81023d4:	4770      	bx	lr
 81023d6:	bf00      	nop
 81023d8:	58024400 	.word	0x58024400
 81023dc:	03d09000 	.word	0x03d09000
 81023e0:	003d0900 	.word	0x003d0900
 81023e4:	017d7840 	.word	0x017d7840
 81023e8:	46000000 	.word	0x46000000
 81023ec:	4c742400 	.word	0x4c742400
 81023f0:	4a742400 	.word	0x4a742400
 81023f4:	4bbebc20 	.word	0x4bbebc20

081023f8 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 81023f8:	b580      	push	{r7, lr}
 81023fa:	b084      	sub	sp, #16
 81023fc:	af00      	add	r7, sp, #0
 81023fe:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8102400:	687b      	ldr	r3, [r7, #4]
 8102402:	2b00      	cmp	r3, #0
 8102404:	d101      	bne.n	810240a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8102406:	2301      	movs	r3, #1
 8102408:	e10f      	b.n	810262a <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 810240a:	687b      	ldr	r3, [r7, #4]
 810240c:	2200      	movs	r2, #0
 810240e:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8102410:	687b      	ldr	r3, [r7, #4]
 8102412:	681b      	ldr	r3, [r3, #0]
 8102414:	4a87      	ldr	r2, [pc, #540]	@ (8102634 <HAL_SPI_Init+0x23c>)
 8102416:	4293      	cmp	r3, r2
 8102418:	d00f      	beq.n	810243a <HAL_SPI_Init+0x42>
 810241a:	687b      	ldr	r3, [r7, #4]
 810241c:	681b      	ldr	r3, [r3, #0]
 810241e:	4a86      	ldr	r2, [pc, #536]	@ (8102638 <HAL_SPI_Init+0x240>)
 8102420:	4293      	cmp	r3, r2
 8102422:	d00a      	beq.n	810243a <HAL_SPI_Init+0x42>
 8102424:	687b      	ldr	r3, [r7, #4]
 8102426:	681b      	ldr	r3, [r3, #0]
 8102428:	4a84      	ldr	r2, [pc, #528]	@ (810263c <HAL_SPI_Init+0x244>)
 810242a:	4293      	cmp	r3, r2
 810242c:	d005      	beq.n	810243a <HAL_SPI_Init+0x42>
 810242e:	687b      	ldr	r3, [r7, #4]
 8102430:	68db      	ldr	r3, [r3, #12]
 8102432:	2b0f      	cmp	r3, #15
 8102434:	d901      	bls.n	810243a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8102436:	2301      	movs	r3, #1
 8102438:	e0f7      	b.n	810262a <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 810243a:	6878      	ldr	r0, [r7, #4]
 810243c:	f001 f962 	bl	8103704 <SPI_GetPacketSize>
 8102440:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8102442:	687b      	ldr	r3, [r7, #4]
 8102444:	681b      	ldr	r3, [r3, #0]
 8102446:	4a7b      	ldr	r2, [pc, #492]	@ (8102634 <HAL_SPI_Init+0x23c>)
 8102448:	4293      	cmp	r3, r2
 810244a:	d00c      	beq.n	8102466 <HAL_SPI_Init+0x6e>
 810244c:	687b      	ldr	r3, [r7, #4]
 810244e:	681b      	ldr	r3, [r3, #0]
 8102450:	4a79      	ldr	r2, [pc, #484]	@ (8102638 <HAL_SPI_Init+0x240>)
 8102452:	4293      	cmp	r3, r2
 8102454:	d007      	beq.n	8102466 <HAL_SPI_Init+0x6e>
 8102456:	687b      	ldr	r3, [r7, #4]
 8102458:	681b      	ldr	r3, [r3, #0]
 810245a:	4a78      	ldr	r2, [pc, #480]	@ (810263c <HAL_SPI_Init+0x244>)
 810245c:	4293      	cmp	r3, r2
 810245e:	d002      	beq.n	8102466 <HAL_SPI_Init+0x6e>
 8102460:	68fb      	ldr	r3, [r7, #12]
 8102462:	2b08      	cmp	r3, #8
 8102464:	d811      	bhi.n	810248a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8102466:	687b      	ldr	r3, [r7, #4]
 8102468:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 810246a:	4a72      	ldr	r2, [pc, #456]	@ (8102634 <HAL_SPI_Init+0x23c>)
 810246c:	4293      	cmp	r3, r2
 810246e:	d009      	beq.n	8102484 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8102470:	687b      	ldr	r3, [r7, #4]
 8102472:	681b      	ldr	r3, [r3, #0]
 8102474:	4a70      	ldr	r2, [pc, #448]	@ (8102638 <HAL_SPI_Init+0x240>)
 8102476:	4293      	cmp	r3, r2
 8102478:	d004      	beq.n	8102484 <HAL_SPI_Init+0x8c>
 810247a:	687b      	ldr	r3, [r7, #4]
 810247c:	681b      	ldr	r3, [r3, #0]
 810247e:	4a6f      	ldr	r2, [pc, #444]	@ (810263c <HAL_SPI_Init+0x244>)
 8102480:	4293      	cmp	r3, r2
 8102482:	d104      	bne.n	810248e <HAL_SPI_Init+0x96>
 8102484:	68fb      	ldr	r3, [r7, #12]
 8102486:	2b10      	cmp	r3, #16
 8102488:	d901      	bls.n	810248e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 810248a:	2301      	movs	r3, #1
 810248c:	e0cd      	b.n	810262a <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 810248e:	687b      	ldr	r3, [r7, #4]
 8102490:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8102494:	b2db      	uxtb	r3, r3
 8102496:	2b00      	cmp	r3, #0
 8102498:	d106      	bne.n	81024a8 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 810249a:	687b      	ldr	r3, [r7, #4]
 810249c:	2200      	movs	r2, #0
 810249e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 81024a2:	6878      	ldr	r0, [r7, #4]
 81024a4:	f7ff f902 	bl	81016ac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 81024a8:	687b      	ldr	r3, [r7, #4]
 81024aa:	2202      	movs	r2, #2
 81024ac:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 81024b0:	687b      	ldr	r3, [r7, #4]
 81024b2:	681b      	ldr	r3, [r3, #0]
 81024b4:	681a      	ldr	r2, [r3, #0]
 81024b6:	687b      	ldr	r3, [r7, #4]
 81024b8:	681b      	ldr	r3, [r3, #0]
 81024ba:	f022 0201 	bic.w	r2, r2, #1
 81024be:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 81024c0:	687b      	ldr	r3, [r7, #4]
 81024c2:	681b      	ldr	r3, [r3, #0]
 81024c4:	689b      	ldr	r3, [r3, #8]
 81024c6:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 81024ca:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 81024cc:	687b      	ldr	r3, [r7, #4]
 81024ce:	699b      	ldr	r3, [r3, #24]
 81024d0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 81024d4:	d119      	bne.n	810250a <HAL_SPI_Init+0x112>
 81024d6:	687b      	ldr	r3, [r7, #4]
 81024d8:	685b      	ldr	r3, [r3, #4]
 81024da:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 81024de:	d103      	bne.n	81024e8 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 81024e0:	687b      	ldr	r3, [r7, #4]
 81024e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 81024e4:	2b00      	cmp	r3, #0
 81024e6:	d008      	beq.n	81024fa <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 81024e8:	687b      	ldr	r3, [r7, #4]
 81024ea:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 81024ec:	2b00      	cmp	r3, #0
 81024ee:	d10c      	bne.n	810250a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 81024f0:	687b      	ldr	r3, [r7, #4]
 81024f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 81024f4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 81024f8:	d107      	bne.n	810250a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 81024fa:	687b      	ldr	r3, [r7, #4]
 81024fc:	681b      	ldr	r3, [r3, #0]
 81024fe:	681a      	ldr	r2, [r3, #0]
 8102500:	687b      	ldr	r3, [r7, #4]
 8102502:	681b      	ldr	r3, [r3, #0]
 8102504:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8102508:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 810250a:	687b      	ldr	r3, [r7, #4]
 810250c:	685b      	ldr	r3, [r3, #4]
 810250e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8102512:	2b00      	cmp	r3, #0
 8102514:	d00f      	beq.n	8102536 <HAL_SPI_Init+0x13e>
 8102516:	687b      	ldr	r3, [r7, #4]
 8102518:	68db      	ldr	r3, [r3, #12]
 810251a:	2b06      	cmp	r3, #6
 810251c:	d90b      	bls.n	8102536 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 810251e:	687b      	ldr	r3, [r7, #4]
 8102520:	681b      	ldr	r3, [r3, #0]
 8102522:	681b      	ldr	r3, [r3, #0]
 8102524:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8102528:	687b      	ldr	r3, [r7, #4]
 810252a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 810252c:	687b      	ldr	r3, [r7, #4]
 810252e:	681b      	ldr	r3, [r3, #0]
 8102530:	430a      	orrs	r2, r1
 8102532:	601a      	str	r2, [r3, #0]
 8102534:	e007      	b.n	8102546 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8102536:	687b      	ldr	r3, [r7, #4]
 8102538:	681b      	ldr	r3, [r3, #0]
 810253a:	681a      	ldr	r2, [r3, #0]
 810253c:	687b      	ldr	r3, [r7, #4]
 810253e:	681b      	ldr	r3, [r3, #0]
 8102540:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8102544:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8102546:	687b      	ldr	r3, [r7, #4]
 8102548:	69da      	ldr	r2, [r3, #28]
 810254a:	687b      	ldr	r3, [r7, #4]
 810254c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810254e:	431a      	orrs	r2, r3
 8102550:	68bb      	ldr	r3, [r7, #8]
 8102552:	431a      	orrs	r2, r3
 8102554:	687b      	ldr	r3, [r7, #4]
 8102556:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8102558:	ea42 0103 	orr.w	r1, r2, r3
 810255c:	687b      	ldr	r3, [r7, #4]
 810255e:	68da      	ldr	r2, [r3, #12]
 8102560:	687b      	ldr	r3, [r7, #4]
 8102562:	681b      	ldr	r3, [r3, #0]
 8102564:	430a      	orrs	r2, r1
 8102566:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8102568:	687b      	ldr	r3, [r7, #4]
 810256a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 810256c:	687b      	ldr	r3, [r7, #4]
 810256e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8102570:	431a      	orrs	r2, r3
 8102572:	687b      	ldr	r3, [r7, #4]
 8102574:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8102576:	431a      	orrs	r2, r3
 8102578:	687b      	ldr	r3, [r7, #4]
 810257a:	699b      	ldr	r3, [r3, #24]
 810257c:	431a      	orrs	r2, r3
 810257e:	687b      	ldr	r3, [r7, #4]
 8102580:	691b      	ldr	r3, [r3, #16]
 8102582:	431a      	orrs	r2, r3
 8102584:	687b      	ldr	r3, [r7, #4]
 8102586:	695b      	ldr	r3, [r3, #20]
 8102588:	431a      	orrs	r2, r3
 810258a:	687b      	ldr	r3, [r7, #4]
 810258c:	6a1b      	ldr	r3, [r3, #32]
 810258e:	431a      	orrs	r2, r3
 8102590:	687b      	ldr	r3, [r7, #4]
 8102592:	685b      	ldr	r3, [r3, #4]
 8102594:	431a      	orrs	r2, r3
 8102596:	687b      	ldr	r3, [r7, #4]
 8102598:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810259a:	431a      	orrs	r2, r3
 810259c:	687b      	ldr	r3, [r7, #4]
 810259e:	689b      	ldr	r3, [r3, #8]
 81025a0:	431a      	orrs	r2, r3
 81025a2:	687b      	ldr	r3, [r7, #4]
 81025a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 81025a6:	ea42 0103 	orr.w	r1, r2, r3
 81025aa:	687b      	ldr	r3, [r7, #4]
 81025ac:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 81025ae:	687b      	ldr	r3, [r7, #4]
 81025b0:	681b      	ldr	r3, [r3, #0]
 81025b2:	430a      	orrs	r2, r1
 81025b4:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 81025b6:	687b      	ldr	r3, [r7, #4]
 81025b8:	685b      	ldr	r3, [r3, #4]
 81025ba:	2b00      	cmp	r3, #0
 81025bc:	d113      	bne.n	81025e6 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 81025be:	687b      	ldr	r3, [r7, #4]
 81025c0:	681b      	ldr	r3, [r3, #0]
 81025c2:	689b      	ldr	r3, [r3, #8]
 81025c4:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 81025c8:	687b      	ldr	r3, [r7, #4]
 81025ca:	681b      	ldr	r3, [r3, #0]
 81025cc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 81025d0:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 81025d2:	687b      	ldr	r3, [r7, #4]
 81025d4:	681b      	ldr	r3, [r3, #0]
 81025d6:	689b      	ldr	r3, [r3, #8]
 81025d8:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 81025dc:	687b      	ldr	r3, [r7, #4]
 81025de:	681b      	ldr	r3, [r3, #0]
 81025e0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 81025e4:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 81025e6:	687b      	ldr	r3, [r7, #4]
 81025e8:	681b      	ldr	r3, [r3, #0]
 81025ea:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 81025ec:	687b      	ldr	r3, [r7, #4]
 81025ee:	681b      	ldr	r3, [r3, #0]
 81025f0:	f022 0201 	bic.w	r2, r2, #1
 81025f4:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 81025f6:	687b      	ldr	r3, [r7, #4]
 81025f8:	685b      	ldr	r3, [r3, #4]
 81025fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 81025fe:	2b00      	cmp	r3, #0
 8102600:	d00a      	beq.n	8102618 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8102602:	687b      	ldr	r3, [r7, #4]
 8102604:	681b      	ldr	r3, [r3, #0]
 8102606:	68db      	ldr	r3, [r3, #12]
 8102608:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 810260c:	687b      	ldr	r3, [r7, #4]
 810260e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8102610:	687b      	ldr	r3, [r7, #4]
 8102612:	681b      	ldr	r3, [r3, #0]
 8102614:	430a      	orrs	r2, r1
 8102616:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8102618:	687b      	ldr	r3, [r7, #4]
 810261a:	2200      	movs	r2, #0
 810261c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8102620:	687b      	ldr	r3, [r7, #4]
 8102622:	2201      	movs	r2, #1
 8102624:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8102628:	2300      	movs	r3, #0
}
 810262a:	4618      	mov	r0, r3
 810262c:	3710      	adds	r7, #16
 810262e:	46bd      	mov	sp, r7
 8102630:	bd80      	pop	{r7, pc}
 8102632:	bf00      	nop
 8102634:	40013000 	.word	0x40013000
 8102638:	40003800 	.word	0x40003800
 810263c:	40003c00 	.word	0x40003c00

08102640 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8102640:	b580      	push	{r7, lr}
 8102642:	b088      	sub	sp, #32
 8102644:	af02      	add	r7, sp, #8
 8102646:	60f8      	str	r0, [r7, #12]
 8102648:	60b9      	str	r1, [r7, #8]
 810264a:	603b      	str	r3, [r7, #0]
 810264c:	4613      	mov	r3, r2
 810264e:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8102650:	68fb      	ldr	r3, [r7, #12]
 8102652:	681b      	ldr	r3, [r3, #0]
 8102654:	3320      	adds	r3, #32
 8102656:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8102658:	f7ff f9ae 	bl	81019b8 <HAL_GetTick>
 810265c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 810265e:	68fb      	ldr	r3, [r7, #12]
 8102660:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8102664:	b2db      	uxtb	r3, r3
 8102666:	2b01      	cmp	r3, #1
 8102668:	d001      	beq.n	810266e <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 810266a:	2302      	movs	r3, #2
 810266c:	e1cf      	b.n	8102a0e <HAL_SPI_Transmit+0x3ce>
  }

  if ((pData == NULL) || (Size == 0UL))
 810266e:	68bb      	ldr	r3, [r7, #8]
 8102670:	2b00      	cmp	r3, #0
 8102672:	d002      	beq.n	810267a <HAL_SPI_Transmit+0x3a>
 8102674:	88fb      	ldrh	r3, [r7, #6]
 8102676:	2b00      	cmp	r3, #0
 8102678:	d101      	bne.n	810267e <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 810267a:	2301      	movs	r3, #1
 810267c:	e1c7      	b.n	8102a0e <HAL_SPI_Transmit+0x3ce>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 810267e:	68fb      	ldr	r3, [r7, #12]
 8102680:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8102684:	2b01      	cmp	r3, #1
 8102686:	d101      	bne.n	810268c <HAL_SPI_Transmit+0x4c>
 8102688:	2302      	movs	r3, #2
 810268a:	e1c0      	b.n	8102a0e <HAL_SPI_Transmit+0x3ce>
 810268c:	68fb      	ldr	r3, [r7, #12]
 810268e:	2201      	movs	r2, #1
 8102690:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8102694:	68fb      	ldr	r3, [r7, #12]
 8102696:	2203      	movs	r2, #3
 8102698:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 810269c:	68fb      	ldr	r3, [r7, #12]
 810269e:	2200      	movs	r2, #0
 81026a0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 81026a4:	68fb      	ldr	r3, [r7, #12]
 81026a6:	68ba      	ldr	r2, [r7, #8]
 81026a8:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 81026aa:	68fb      	ldr	r3, [r7, #12]
 81026ac:	88fa      	ldrh	r2, [r7, #6]
 81026ae:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 81026b2:	68fb      	ldr	r3, [r7, #12]
 81026b4:	88fa      	ldrh	r2, [r7, #6]
 81026b6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 81026ba:	68fb      	ldr	r3, [r7, #12]
 81026bc:	2200      	movs	r2, #0
 81026be:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 81026c0:	68fb      	ldr	r3, [r7, #12]
 81026c2:	2200      	movs	r2, #0
 81026c4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 81026c8:	68fb      	ldr	r3, [r7, #12]
 81026ca:	2200      	movs	r2, #0
 81026cc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 81026d0:	68fb      	ldr	r3, [r7, #12]
 81026d2:	2200      	movs	r2, #0
 81026d4:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 81026d6:	68fb      	ldr	r3, [r7, #12]
 81026d8:	2200      	movs	r2, #0
 81026da:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 81026dc:	68fb      	ldr	r3, [r7, #12]
 81026de:	689b      	ldr	r3, [r3, #8]
 81026e0:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 81026e4:	d108      	bne.n	81026f8 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 81026e6:	68fb      	ldr	r3, [r7, #12]
 81026e8:	681b      	ldr	r3, [r3, #0]
 81026ea:	681a      	ldr	r2, [r3, #0]
 81026ec:	68fb      	ldr	r3, [r7, #12]
 81026ee:	681b      	ldr	r3, [r3, #0]
 81026f0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 81026f4:	601a      	str	r2, [r3, #0]
 81026f6:	e009      	b.n	810270c <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 81026f8:	68fb      	ldr	r3, [r7, #12]
 81026fa:	681b      	ldr	r3, [r3, #0]
 81026fc:	68db      	ldr	r3, [r3, #12]
 81026fe:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8102702:	68fb      	ldr	r3, [r7, #12]
 8102704:	681b      	ldr	r3, [r3, #0]
 8102706:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 810270a:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 810270c:	68fb      	ldr	r3, [r7, #12]
 810270e:	681b      	ldr	r3, [r3, #0]
 8102710:	685b      	ldr	r3, [r3, #4]
 8102712:	0c1b      	lsrs	r3, r3, #16
 8102714:	041b      	lsls	r3, r3, #16
 8102716:	88f9      	ldrh	r1, [r7, #6]
 8102718:	68fa      	ldr	r2, [r7, #12]
 810271a:	6812      	ldr	r2, [r2, #0]
 810271c:	430b      	orrs	r3, r1
 810271e:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8102720:	68fb      	ldr	r3, [r7, #12]
 8102722:	681b      	ldr	r3, [r3, #0]
 8102724:	681a      	ldr	r2, [r3, #0]
 8102726:	68fb      	ldr	r3, [r7, #12]
 8102728:	681b      	ldr	r3, [r3, #0]
 810272a:	f042 0201 	orr.w	r2, r2, #1
 810272e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8102730:	68fb      	ldr	r3, [r7, #12]
 8102732:	685b      	ldr	r3, [r3, #4]
 8102734:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8102738:	d107      	bne.n	810274a <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 810273a:	68fb      	ldr	r3, [r7, #12]
 810273c:	681b      	ldr	r3, [r3, #0]
 810273e:	681a      	ldr	r2, [r3, #0]
 8102740:	68fb      	ldr	r3, [r7, #12]
 8102742:	681b      	ldr	r3, [r3, #0]
 8102744:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8102748:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 810274a:	68fb      	ldr	r3, [r7, #12]
 810274c:	68db      	ldr	r3, [r3, #12]
 810274e:	2b0f      	cmp	r3, #15
 8102750:	d947      	bls.n	81027e2 <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8102752:	e03f      	b.n	81027d4 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8102754:	68fb      	ldr	r3, [r7, #12]
 8102756:	681b      	ldr	r3, [r3, #0]
 8102758:	695b      	ldr	r3, [r3, #20]
 810275a:	f003 0302 	and.w	r3, r3, #2
 810275e:	2b02      	cmp	r3, #2
 8102760:	d114      	bne.n	810278c <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8102762:	68fb      	ldr	r3, [r7, #12]
 8102764:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8102766:	68fb      	ldr	r3, [r7, #12]
 8102768:	681b      	ldr	r3, [r3, #0]
 810276a:	6812      	ldr	r2, [r2, #0]
 810276c:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 810276e:	68fb      	ldr	r3, [r7, #12]
 8102770:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8102772:	1d1a      	adds	r2, r3, #4
 8102774:	68fb      	ldr	r3, [r7, #12]
 8102776:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8102778:	68fb      	ldr	r3, [r7, #12]
 810277a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 810277e:	b29b      	uxth	r3, r3
 8102780:	3b01      	subs	r3, #1
 8102782:	b29a      	uxth	r2, r3
 8102784:	68fb      	ldr	r3, [r7, #12]
 8102786:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 810278a:	e023      	b.n	81027d4 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 810278c:	f7ff f914 	bl	81019b8 <HAL_GetTick>
 8102790:	4602      	mov	r2, r0
 8102792:	693b      	ldr	r3, [r7, #16]
 8102794:	1ad3      	subs	r3, r2, r3
 8102796:	683a      	ldr	r2, [r7, #0]
 8102798:	429a      	cmp	r2, r3
 810279a:	d803      	bhi.n	81027a4 <HAL_SPI_Transmit+0x164>
 810279c:	683b      	ldr	r3, [r7, #0]
 810279e:	f1b3 3fff 	cmp.w	r3, #4294967295
 81027a2:	d102      	bne.n	81027aa <HAL_SPI_Transmit+0x16a>
 81027a4:	683b      	ldr	r3, [r7, #0]
 81027a6:	2b00      	cmp	r3, #0
 81027a8:	d114      	bne.n	81027d4 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 81027aa:	68f8      	ldr	r0, [r7, #12]
 81027ac:	f000 fedc 	bl	8103568 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 81027b0:	68fb      	ldr	r3, [r7, #12]
 81027b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 81027b6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 81027ba:	68fb      	ldr	r3, [r7, #12]
 81027bc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 81027c0:	68fb      	ldr	r3, [r7, #12]
 81027c2:	2201      	movs	r2, #1
 81027c4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 81027c8:	68fb      	ldr	r3, [r7, #12]
 81027ca:	2200      	movs	r2, #0
 81027cc:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 81027d0:	2303      	movs	r3, #3
 81027d2:	e11c      	b.n	8102a0e <HAL_SPI_Transmit+0x3ce>
    while (hspi->TxXferCount > 0UL)
 81027d4:	68fb      	ldr	r3, [r7, #12]
 81027d6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 81027da:	b29b      	uxth	r3, r3
 81027dc:	2b00      	cmp	r3, #0
 81027de:	d1b9      	bne.n	8102754 <HAL_SPI_Transmit+0x114>
 81027e0:	e0ef      	b.n	81029c2 <HAL_SPI_Transmit+0x382>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 81027e2:	68fb      	ldr	r3, [r7, #12]
 81027e4:	68db      	ldr	r3, [r3, #12]
 81027e6:	2b07      	cmp	r3, #7
 81027e8:	f240 80e4 	bls.w	81029b4 <HAL_SPI_Transmit+0x374>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 81027ec:	e05d      	b.n	81028aa <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 81027ee:	68fb      	ldr	r3, [r7, #12]
 81027f0:	681b      	ldr	r3, [r3, #0]
 81027f2:	695b      	ldr	r3, [r3, #20]
 81027f4:	f003 0302 	and.w	r3, r3, #2
 81027f8:	2b02      	cmp	r3, #2
 81027fa:	d132      	bne.n	8102862 <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 81027fc:	68fb      	ldr	r3, [r7, #12]
 81027fe:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8102802:	b29b      	uxth	r3, r3
 8102804:	2b01      	cmp	r3, #1
 8102806:	d918      	bls.n	810283a <HAL_SPI_Transmit+0x1fa>
 8102808:	68fb      	ldr	r3, [r7, #12]
 810280a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810280c:	2b00      	cmp	r3, #0
 810280e:	d014      	beq.n	810283a <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8102810:	68fb      	ldr	r3, [r7, #12]
 8102812:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8102814:	68fb      	ldr	r3, [r7, #12]
 8102816:	681b      	ldr	r3, [r3, #0]
 8102818:	6812      	ldr	r2, [r2, #0]
 810281a:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 810281c:	68fb      	ldr	r3, [r7, #12]
 810281e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8102820:	1d1a      	adds	r2, r3, #4
 8102822:	68fb      	ldr	r3, [r7, #12]
 8102824:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8102826:	68fb      	ldr	r3, [r7, #12]
 8102828:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 810282c:	b29b      	uxth	r3, r3
 810282e:	3b02      	subs	r3, #2
 8102830:	b29a      	uxth	r2, r3
 8102832:	68fb      	ldr	r3, [r7, #12]
 8102834:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8102838:	e037      	b.n	81028aa <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 810283a:	68fb      	ldr	r3, [r7, #12]
 810283c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 810283e:	881a      	ldrh	r2, [r3, #0]
 8102840:	697b      	ldr	r3, [r7, #20]
 8102842:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8102844:	68fb      	ldr	r3, [r7, #12]
 8102846:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8102848:	1c9a      	adds	r2, r3, #2
 810284a:	68fb      	ldr	r3, [r7, #12]
 810284c:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 810284e:	68fb      	ldr	r3, [r7, #12]
 8102850:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8102854:	b29b      	uxth	r3, r3
 8102856:	3b01      	subs	r3, #1
 8102858:	b29a      	uxth	r2, r3
 810285a:	68fb      	ldr	r3, [r7, #12]
 810285c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8102860:	e023      	b.n	81028aa <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8102862:	f7ff f8a9 	bl	81019b8 <HAL_GetTick>
 8102866:	4602      	mov	r2, r0
 8102868:	693b      	ldr	r3, [r7, #16]
 810286a:	1ad3      	subs	r3, r2, r3
 810286c:	683a      	ldr	r2, [r7, #0]
 810286e:	429a      	cmp	r2, r3
 8102870:	d803      	bhi.n	810287a <HAL_SPI_Transmit+0x23a>
 8102872:	683b      	ldr	r3, [r7, #0]
 8102874:	f1b3 3fff 	cmp.w	r3, #4294967295
 8102878:	d102      	bne.n	8102880 <HAL_SPI_Transmit+0x240>
 810287a:	683b      	ldr	r3, [r7, #0]
 810287c:	2b00      	cmp	r3, #0
 810287e:	d114      	bne.n	81028aa <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8102880:	68f8      	ldr	r0, [r7, #12]
 8102882:	f000 fe71 	bl	8103568 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8102886:	68fb      	ldr	r3, [r7, #12]
 8102888:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 810288c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8102890:	68fb      	ldr	r3, [r7, #12]
 8102892:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8102896:	68fb      	ldr	r3, [r7, #12]
 8102898:	2201      	movs	r2, #1
 810289a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 810289e:	68fb      	ldr	r3, [r7, #12]
 81028a0:	2200      	movs	r2, #0
 81028a2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 81028a6:	2303      	movs	r3, #3
 81028a8:	e0b1      	b.n	8102a0e <HAL_SPI_Transmit+0x3ce>
    while (hspi->TxXferCount > 0UL)
 81028aa:	68fb      	ldr	r3, [r7, #12]
 81028ac:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 81028b0:	b29b      	uxth	r3, r3
 81028b2:	2b00      	cmp	r3, #0
 81028b4:	d19b      	bne.n	81027ee <HAL_SPI_Transmit+0x1ae>
 81028b6:	e084      	b.n	81029c2 <HAL_SPI_Transmit+0x382>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 81028b8:	68fb      	ldr	r3, [r7, #12]
 81028ba:	681b      	ldr	r3, [r3, #0]
 81028bc:	695b      	ldr	r3, [r3, #20]
 81028be:	f003 0302 	and.w	r3, r3, #2
 81028c2:	2b02      	cmp	r3, #2
 81028c4:	d152      	bne.n	810296c <HAL_SPI_Transmit+0x32c>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 81028c6:	68fb      	ldr	r3, [r7, #12]
 81028c8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 81028cc:	b29b      	uxth	r3, r3
 81028ce:	2b03      	cmp	r3, #3
 81028d0:	d918      	bls.n	8102904 <HAL_SPI_Transmit+0x2c4>
 81028d2:	68fb      	ldr	r3, [r7, #12]
 81028d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 81028d6:	2b40      	cmp	r3, #64	@ 0x40
 81028d8:	d914      	bls.n	8102904 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 81028da:	68fb      	ldr	r3, [r7, #12]
 81028dc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 81028de:	68fb      	ldr	r3, [r7, #12]
 81028e0:	681b      	ldr	r3, [r3, #0]
 81028e2:	6812      	ldr	r2, [r2, #0]
 81028e4:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 81028e6:	68fb      	ldr	r3, [r7, #12]
 81028e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 81028ea:	1d1a      	adds	r2, r3, #4
 81028ec:	68fb      	ldr	r3, [r7, #12]
 81028ee:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 81028f0:	68fb      	ldr	r3, [r7, #12]
 81028f2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 81028f6:	b29b      	uxth	r3, r3
 81028f8:	3b04      	subs	r3, #4
 81028fa:	b29a      	uxth	r2, r3
 81028fc:	68fb      	ldr	r3, [r7, #12]
 81028fe:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8102902:	e057      	b.n	81029b4 <HAL_SPI_Transmit+0x374>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8102904:	68fb      	ldr	r3, [r7, #12]
 8102906:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 810290a:	b29b      	uxth	r3, r3
 810290c:	2b01      	cmp	r3, #1
 810290e:	d917      	bls.n	8102940 <HAL_SPI_Transmit+0x300>
 8102910:	68fb      	ldr	r3, [r7, #12]
 8102912:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8102914:	2b00      	cmp	r3, #0
 8102916:	d013      	beq.n	8102940 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8102918:	68fb      	ldr	r3, [r7, #12]
 810291a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 810291c:	881a      	ldrh	r2, [r3, #0]
 810291e:	697b      	ldr	r3, [r7, #20]
 8102920:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8102922:	68fb      	ldr	r3, [r7, #12]
 8102924:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8102926:	1c9a      	adds	r2, r3, #2
 8102928:	68fb      	ldr	r3, [r7, #12]
 810292a:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 810292c:	68fb      	ldr	r3, [r7, #12]
 810292e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8102932:	b29b      	uxth	r3, r3
 8102934:	3b02      	subs	r3, #2
 8102936:	b29a      	uxth	r2, r3
 8102938:	68fb      	ldr	r3, [r7, #12]
 810293a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 810293e:	e039      	b.n	81029b4 <HAL_SPI_Transmit+0x374>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8102940:	68fb      	ldr	r3, [r7, #12]
 8102942:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8102944:	68fb      	ldr	r3, [r7, #12]
 8102946:	681b      	ldr	r3, [r3, #0]
 8102948:	3320      	adds	r3, #32
 810294a:	7812      	ldrb	r2, [r2, #0]
 810294c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 810294e:	68fb      	ldr	r3, [r7, #12]
 8102950:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8102952:	1c5a      	adds	r2, r3, #1
 8102954:	68fb      	ldr	r3, [r7, #12]
 8102956:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8102958:	68fb      	ldr	r3, [r7, #12]
 810295a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 810295e:	b29b      	uxth	r3, r3
 8102960:	3b01      	subs	r3, #1
 8102962:	b29a      	uxth	r2, r3
 8102964:	68fb      	ldr	r3, [r7, #12]
 8102966:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 810296a:	e023      	b.n	81029b4 <HAL_SPI_Transmit+0x374>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 810296c:	f7ff f824 	bl	81019b8 <HAL_GetTick>
 8102970:	4602      	mov	r2, r0
 8102972:	693b      	ldr	r3, [r7, #16]
 8102974:	1ad3      	subs	r3, r2, r3
 8102976:	683a      	ldr	r2, [r7, #0]
 8102978:	429a      	cmp	r2, r3
 810297a:	d803      	bhi.n	8102984 <HAL_SPI_Transmit+0x344>
 810297c:	683b      	ldr	r3, [r7, #0]
 810297e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8102982:	d102      	bne.n	810298a <HAL_SPI_Transmit+0x34a>
 8102984:	683b      	ldr	r3, [r7, #0]
 8102986:	2b00      	cmp	r3, #0
 8102988:	d114      	bne.n	81029b4 <HAL_SPI_Transmit+0x374>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 810298a:	68f8      	ldr	r0, [r7, #12]
 810298c:	f000 fdec 	bl	8103568 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8102990:	68fb      	ldr	r3, [r7, #12]
 8102992:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8102996:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 810299a:	68fb      	ldr	r3, [r7, #12]
 810299c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 81029a0:	68fb      	ldr	r3, [r7, #12]
 81029a2:	2201      	movs	r2, #1
 81029a4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 81029a8:	68fb      	ldr	r3, [r7, #12]
 81029aa:	2200      	movs	r2, #0
 81029ac:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 81029b0:	2303      	movs	r3, #3
 81029b2:	e02c      	b.n	8102a0e <HAL_SPI_Transmit+0x3ce>
    while (hspi->TxXferCount > 0UL)
 81029b4:	68fb      	ldr	r3, [r7, #12]
 81029b6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 81029ba:	b29b      	uxth	r3, r3
 81029bc:	2b00      	cmp	r3, #0
 81029be:	f47f af7b 	bne.w	81028b8 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 81029c2:	693b      	ldr	r3, [r7, #16]
 81029c4:	9300      	str	r3, [sp, #0]
 81029c6:	683b      	ldr	r3, [r7, #0]
 81029c8:	2200      	movs	r2, #0
 81029ca:	2108      	movs	r1, #8
 81029cc:	68f8      	ldr	r0, [r7, #12]
 81029ce:	f000 fe6b 	bl	81036a8 <SPI_WaitOnFlagUntilTimeout>
 81029d2:	4603      	mov	r3, r0
 81029d4:	2b00      	cmp	r3, #0
 81029d6:	d007      	beq.n	81029e8 <HAL_SPI_Transmit+0x3a8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 81029d8:	68fb      	ldr	r3, [r7, #12]
 81029da:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 81029de:	f043 0220 	orr.w	r2, r3, #32
 81029e2:	68fb      	ldr	r3, [r7, #12]
 81029e4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 81029e8:	68f8      	ldr	r0, [r7, #12]
 81029ea:	f000 fdbd 	bl	8103568 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 81029ee:	68fb      	ldr	r3, [r7, #12]
 81029f0:	2201      	movs	r2, #1
 81029f2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 81029f6:	68fb      	ldr	r3, [r7, #12]
 81029f8:	2200      	movs	r2, #0
 81029fa:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 81029fe:	68fb      	ldr	r3, [r7, #12]
 8102a00:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8102a04:	2b00      	cmp	r3, #0
 8102a06:	d001      	beq.n	8102a0c <HAL_SPI_Transmit+0x3cc>
  {
    return HAL_ERROR;
 8102a08:	2301      	movs	r3, #1
 8102a0a:	e000      	b.n	8102a0e <HAL_SPI_Transmit+0x3ce>
  }
  else
  {
    return HAL_OK;
 8102a0c:	2300      	movs	r3, #0
  }
}
 8102a0e:	4618      	mov	r0, r3
 8102a10:	3718      	adds	r7, #24
 8102a12:	46bd      	mov	sp, r7
 8102a14:	bd80      	pop	{r7, pc}

08102a16 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8102a16:	b580      	push	{r7, lr}
 8102a18:	b088      	sub	sp, #32
 8102a1a:	af00      	add	r7, sp, #0
 8102a1c:	60f8      	str	r0, [r7, #12]
 8102a1e:	60b9      	str	r1, [r7, #8]
 8102a20:	603b      	str	r3, [r7, #0]
 8102a22:	4613      	mov	r3, r2
 8102a24:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 8102a26:	68fb      	ldr	r3, [r7, #12]
 8102a28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8102a2a:	095b      	lsrs	r3, r3, #5
 8102a2c:	b29b      	uxth	r3, r3
 8102a2e:	3301      	adds	r3, #1
 8102a30:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8102a32:	68fb      	ldr	r3, [r7, #12]
 8102a34:	681b      	ldr	r3, [r3, #0]
 8102a36:	3330      	adds	r3, #48	@ 0x30
 8102a38:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8102a3a:	f7fe ffbd 	bl	81019b8 <HAL_GetTick>
 8102a3e:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8102a40:	68fb      	ldr	r3, [r7, #12]
 8102a42:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8102a46:	b2db      	uxtb	r3, r3
 8102a48:	2b01      	cmp	r3, #1
 8102a4a:	d001      	beq.n	8102a50 <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 8102a4c:	2302      	movs	r3, #2
 8102a4e:	e24e      	b.n	8102eee <HAL_SPI_Receive+0x4d8>
  }

  if ((pData == NULL) || (Size == 0UL))
 8102a50:	68bb      	ldr	r3, [r7, #8]
 8102a52:	2b00      	cmp	r3, #0
 8102a54:	d002      	beq.n	8102a5c <HAL_SPI_Receive+0x46>
 8102a56:	88fb      	ldrh	r3, [r7, #6]
 8102a58:	2b00      	cmp	r3, #0
 8102a5a:	d101      	bne.n	8102a60 <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 8102a5c:	2301      	movs	r3, #1
 8102a5e:	e246      	b.n	8102eee <HAL_SPI_Receive+0x4d8>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8102a60:	68fb      	ldr	r3, [r7, #12]
 8102a62:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8102a66:	2b01      	cmp	r3, #1
 8102a68:	d101      	bne.n	8102a6e <HAL_SPI_Receive+0x58>
 8102a6a:	2302      	movs	r3, #2
 8102a6c:	e23f      	b.n	8102eee <HAL_SPI_Receive+0x4d8>
 8102a6e:	68fb      	ldr	r3, [r7, #12]
 8102a70:	2201      	movs	r2, #1
 8102a72:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8102a76:	68fb      	ldr	r3, [r7, #12]
 8102a78:	2204      	movs	r2, #4
 8102a7a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8102a7e:	68fb      	ldr	r3, [r7, #12]
 8102a80:	2200      	movs	r2, #0
 8102a82:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8102a86:	68fb      	ldr	r3, [r7, #12]
 8102a88:	68ba      	ldr	r2, [r7, #8]
 8102a8a:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 8102a8c:	68fb      	ldr	r3, [r7, #12]
 8102a8e:	88fa      	ldrh	r2, [r7, #6]
 8102a90:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 8102a94:	68fb      	ldr	r3, [r7, #12]
 8102a96:	88fa      	ldrh	r2, [r7, #6]
 8102a98:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 8102a9c:	68fb      	ldr	r3, [r7, #12]
 8102a9e:	2200      	movs	r2, #0
 8102aa0:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 8102aa2:	68fb      	ldr	r3, [r7, #12]
 8102aa4:	2200      	movs	r2, #0
 8102aa6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8102aaa:	68fb      	ldr	r3, [r7, #12]
 8102aac:	2200      	movs	r2, #0
 8102aae:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 8102ab2:	68fb      	ldr	r3, [r7, #12]
 8102ab4:	2200      	movs	r2, #0
 8102ab6:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 8102ab8:	68fb      	ldr	r3, [r7, #12]
 8102aba:	2200      	movs	r2, #0
 8102abc:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8102abe:	68fb      	ldr	r3, [r7, #12]
 8102ac0:	689b      	ldr	r3, [r3, #8]
 8102ac2:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8102ac6:	d108      	bne.n	8102ada <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 8102ac8:	68fb      	ldr	r3, [r7, #12]
 8102aca:	681b      	ldr	r3, [r3, #0]
 8102acc:	681a      	ldr	r2, [r3, #0]
 8102ace:	68fb      	ldr	r3, [r7, #12]
 8102ad0:	681b      	ldr	r3, [r3, #0]
 8102ad2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8102ad6:	601a      	str	r2, [r3, #0]
 8102ad8:	e009      	b.n	8102aee <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 8102ada:	68fb      	ldr	r3, [r7, #12]
 8102adc:	681b      	ldr	r3, [r3, #0]
 8102ade:	68db      	ldr	r3, [r3, #12]
 8102ae0:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8102ae4:	68fb      	ldr	r3, [r7, #12]
 8102ae6:	681b      	ldr	r3, [r3, #0]
 8102ae8:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8102aec:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8102aee:	68fb      	ldr	r3, [r7, #12]
 8102af0:	681b      	ldr	r3, [r3, #0]
 8102af2:	685b      	ldr	r3, [r3, #4]
 8102af4:	0c1b      	lsrs	r3, r3, #16
 8102af6:	041b      	lsls	r3, r3, #16
 8102af8:	88f9      	ldrh	r1, [r7, #6]
 8102afa:	68fa      	ldr	r2, [r7, #12]
 8102afc:	6812      	ldr	r2, [r2, #0]
 8102afe:	430b      	orrs	r3, r1
 8102b00:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8102b02:	68fb      	ldr	r3, [r7, #12]
 8102b04:	681b      	ldr	r3, [r3, #0]
 8102b06:	681a      	ldr	r2, [r3, #0]
 8102b08:	68fb      	ldr	r3, [r7, #12]
 8102b0a:	681b      	ldr	r3, [r3, #0]
 8102b0c:	f042 0201 	orr.w	r2, r2, #1
 8102b10:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8102b12:	68fb      	ldr	r3, [r7, #12]
 8102b14:	685b      	ldr	r3, [r3, #4]
 8102b16:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8102b1a:	d107      	bne.n	8102b2c <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8102b1c:	68fb      	ldr	r3, [r7, #12]
 8102b1e:	681b      	ldr	r3, [r3, #0]
 8102b20:	681a      	ldr	r2, [r3, #0]
 8102b22:	68fb      	ldr	r3, [r7, #12]
 8102b24:	681b      	ldr	r3, [r3, #0]
 8102b26:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8102b2a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8102b2c:	68fb      	ldr	r3, [r7, #12]
 8102b2e:	68db      	ldr	r3, [r3, #12]
 8102b30:	2b0f      	cmp	r3, #15
 8102b32:	d96c      	bls.n	8102c0e <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8102b34:	e064      	b.n	8102c00 <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8102b36:	68fb      	ldr	r3, [r7, #12]
 8102b38:	681b      	ldr	r3, [r3, #0]
 8102b3a:	695b      	ldr	r3, [r3, #20]
 8102b3c:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8102b3e:	68fb      	ldr	r3, [r7, #12]
 8102b40:	681b      	ldr	r3, [r3, #0]
 8102b42:	695b      	ldr	r3, [r3, #20]
 8102b44:	f003 0301 	and.w	r3, r3, #1
 8102b48:	2b01      	cmp	r3, #1
 8102b4a:	d114      	bne.n	8102b76 <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8102b4c:	68fb      	ldr	r3, [r7, #12]
 8102b4e:	681a      	ldr	r2, [r3, #0]
 8102b50:	68fb      	ldr	r3, [r7, #12]
 8102b52:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8102b54:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8102b56:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8102b58:	68fb      	ldr	r3, [r7, #12]
 8102b5a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8102b5c:	1d1a      	adds	r2, r3, #4
 8102b5e:	68fb      	ldr	r3, [r7, #12]
 8102b60:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8102b62:	68fb      	ldr	r3, [r7, #12]
 8102b64:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8102b68:	b29b      	uxth	r3, r3
 8102b6a:	3b01      	subs	r3, #1
 8102b6c:	b29a      	uxth	r2, r3
 8102b6e:	68fb      	ldr	r3, [r7, #12]
 8102b70:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8102b74:	e044      	b.n	8102c00 <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8102b76:	68fb      	ldr	r3, [r7, #12]
 8102b78:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8102b7c:	b29b      	uxth	r3, r3
 8102b7e:	8bfa      	ldrh	r2, [r7, #30]
 8102b80:	429a      	cmp	r2, r3
 8102b82:	d919      	bls.n	8102bb8 <HAL_SPI_Receive+0x1a2>
 8102b84:	693b      	ldr	r3, [r7, #16]
 8102b86:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8102b8a:	2b00      	cmp	r3, #0
 8102b8c:	d014      	beq.n	8102bb8 <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8102b8e:	68fb      	ldr	r3, [r7, #12]
 8102b90:	681a      	ldr	r2, [r3, #0]
 8102b92:	68fb      	ldr	r3, [r7, #12]
 8102b94:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8102b96:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8102b98:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8102b9a:	68fb      	ldr	r3, [r7, #12]
 8102b9c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8102b9e:	1d1a      	adds	r2, r3, #4
 8102ba0:	68fb      	ldr	r3, [r7, #12]
 8102ba2:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8102ba4:	68fb      	ldr	r3, [r7, #12]
 8102ba6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8102baa:	b29b      	uxth	r3, r3
 8102bac:	3b01      	subs	r3, #1
 8102bae:	b29a      	uxth	r2, r3
 8102bb0:	68fb      	ldr	r3, [r7, #12]
 8102bb2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8102bb6:	e023      	b.n	8102c00 <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8102bb8:	f7fe fefe 	bl	81019b8 <HAL_GetTick>
 8102bbc:	4602      	mov	r2, r0
 8102bbe:	697b      	ldr	r3, [r7, #20]
 8102bc0:	1ad3      	subs	r3, r2, r3
 8102bc2:	683a      	ldr	r2, [r7, #0]
 8102bc4:	429a      	cmp	r2, r3
 8102bc6:	d803      	bhi.n	8102bd0 <HAL_SPI_Receive+0x1ba>
 8102bc8:	683b      	ldr	r3, [r7, #0]
 8102bca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8102bce:	d102      	bne.n	8102bd6 <HAL_SPI_Receive+0x1c0>
 8102bd0:	683b      	ldr	r3, [r7, #0]
 8102bd2:	2b00      	cmp	r3, #0
 8102bd4:	d114      	bne.n	8102c00 <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8102bd6:	68f8      	ldr	r0, [r7, #12]
 8102bd8:	f000 fcc6 	bl	8103568 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8102bdc:	68fb      	ldr	r3, [r7, #12]
 8102bde:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8102be2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8102be6:	68fb      	ldr	r3, [r7, #12]
 8102be8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8102bec:	68fb      	ldr	r3, [r7, #12]
 8102bee:	2201      	movs	r2, #1
 8102bf0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8102bf4:	68fb      	ldr	r3, [r7, #12]
 8102bf6:	2200      	movs	r2, #0
 8102bf8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8102bfc:	2303      	movs	r3, #3
 8102bfe:	e176      	b.n	8102eee <HAL_SPI_Receive+0x4d8>
    while (hspi->RxXferCount > 0UL)
 8102c00:	68fb      	ldr	r3, [r7, #12]
 8102c02:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8102c06:	b29b      	uxth	r3, r3
 8102c08:	2b00      	cmp	r3, #0
 8102c0a:	d194      	bne.n	8102b36 <HAL_SPI_Receive+0x120>
 8102c0c:	e15c      	b.n	8102ec8 <HAL_SPI_Receive+0x4b2>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8102c0e:	68fb      	ldr	r3, [r7, #12]
 8102c10:	68db      	ldr	r3, [r3, #12]
 8102c12:	2b07      	cmp	r3, #7
 8102c14:	f240 8151 	bls.w	8102eba <HAL_SPI_Receive+0x4a4>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8102c18:	e08f      	b.n	8102d3a <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8102c1a:	68fb      	ldr	r3, [r7, #12]
 8102c1c:	681b      	ldr	r3, [r3, #0]
 8102c1e:	695b      	ldr	r3, [r3, #20]
 8102c20:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8102c22:	68fb      	ldr	r3, [r7, #12]
 8102c24:	681b      	ldr	r3, [r3, #0]
 8102c26:	695b      	ldr	r3, [r3, #20]
 8102c28:	f003 0301 	and.w	r3, r3, #1
 8102c2c:	2b01      	cmp	r3, #1
 8102c2e:	d114      	bne.n	8102c5a <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8102c30:	68fb      	ldr	r3, [r7, #12]
 8102c32:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8102c34:	69ba      	ldr	r2, [r7, #24]
 8102c36:	8812      	ldrh	r2, [r2, #0]
 8102c38:	b292      	uxth	r2, r2
 8102c3a:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8102c3c:	68fb      	ldr	r3, [r7, #12]
 8102c3e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8102c40:	1c9a      	adds	r2, r3, #2
 8102c42:	68fb      	ldr	r3, [r7, #12]
 8102c44:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8102c46:	68fb      	ldr	r3, [r7, #12]
 8102c48:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8102c4c:	b29b      	uxth	r3, r3
 8102c4e:	3b01      	subs	r3, #1
 8102c50:	b29a      	uxth	r2, r3
 8102c52:	68fb      	ldr	r3, [r7, #12]
 8102c54:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8102c58:	e06f      	b.n	8102d3a <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8102c5a:	68fb      	ldr	r3, [r7, #12]
 8102c5c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8102c60:	b29b      	uxth	r3, r3
 8102c62:	8bfa      	ldrh	r2, [r7, #30]
 8102c64:	429a      	cmp	r2, r3
 8102c66:	d924      	bls.n	8102cb2 <HAL_SPI_Receive+0x29c>
 8102c68:	693b      	ldr	r3, [r7, #16]
 8102c6a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8102c6e:	2b00      	cmp	r3, #0
 8102c70:	d01f      	beq.n	8102cb2 <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8102c72:	68fb      	ldr	r3, [r7, #12]
 8102c74:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8102c76:	69ba      	ldr	r2, [r7, #24]
 8102c78:	8812      	ldrh	r2, [r2, #0]
 8102c7a:	b292      	uxth	r2, r2
 8102c7c:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8102c7e:	68fb      	ldr	r3, [r7, #12]
 8102c80:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8102c82:	1c9a      	adds	r2, r3, #2
 8102c84:	68fb      	ldr	r3, [r7, #12]
 8102c86:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8102c88:	68fb      	ldr	r3, [r7, #12]
 8102c8a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8102c8c:	69ba      	ldr	r2, [r7, #24]
 8102c8e:	8812      	ldrh	r2, [r2, #0]
 8102c90:	b292      	uxth	r2, r2
 8102c92:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8102c94:	68fb      	ldr	r3, [r7, #12]
 8102c96:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8102c98:	1c9a      	adds	r2, r3, #2
 8102c9a:	68fb      	ldr	r3, [r7, #12]
 8102c9c:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 8102c9e:	68fb      	ldr	r3, [r7, #12]
 8102ca0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8102ca4:	b29b      	uxth	r3, r3
 8102ca6:	3b02      	subs	r3, #2
 8102ca8:	b29a      	uxth	r2, r3
 8102caa:	68fb      	ldr	r3, [r7, #12]
 8102cac:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8102cb0:	e043      	b.n	8102d3a <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 8102cb2:	68fb      	ldr	r3, [r7, #12]
 8102cb4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8102cb8:	b29b      	uxth	r3, r3
 8102cba:	2b01      	cmp	r3, #1
 8102cbc:	d119      	bne.n	8102cf2 <HAL_SPI_Receive+0x2dc>
 8102cbe:	693b      	ldr	r3, [r7, #16]
 8102cc0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8102cc4:	2b00      	cmp	r3, #0
 8102cc6:	d014      	beq.n	8102cf2 <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8102cc8:	68fb      	ldr	r3, [r7, #12]
 8102cca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8102ccc:	69ba      	ldr	r2, [r7, #24]
 8102cce:	8812      	ldrh	r2, [r2, #0]
 8102cd0:	b292      	uxth	r2, r2
 8102cd2:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8102cd4:	68fb      	ldr	r3, [r7, #12]
 8102cd6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8102cd8:	1c9a      	adds	r2, r3, #2
 8102cda:	68fb      	ldr	r3, [r7, #12]
 8102cdc:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8102cde:	68fb      	ldr	r3, [r7, #12]
 8102ce0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8102ce4:	b29b      	uxth	r3, r3
 8102ce6:	3b01      	subs	r3, #1
 8102ce8:	b29a      	uxth	r2, r3
 8102cea:	68fb      	ldr	r3, [r7, #12]
 8102cec:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8102cf0:	e023      	b.n	8102d3a <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8102cf2:	f7fe fe61 	bl	81019b8 <HAL_GetTick>
 8102cf6:	4602      	mov	r2, r0
 8102cf8:	697b      	ldr	r3, [r7, #20]
 8102cfa:	1ad3      	subs	r3, r2, r3
 8102cfc:	683a      	ldr	r2, [r7, #0]
 8102cfe:	429a      	cmp	r2, r3
 8102d00:	d803      	bhi.n	8102d0a <HAL_SPI_Receive+0x2f4>
 8102d02:	683b      	ldr	r3, [r7, #0]
 8102d04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8102d08:	d102      	bne.n	8102d10 <HAL_SPI_Receive+0x2fa>
 8102d0a:	683b      	ldr	r3, [r7, #0]
 8102d0c:	2b00      	cmp	r3, #0
 8102d0e:	d114      	bne.n	8102d3a <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8102d10:	68f8      	ldr	r0, [r7, #12]
 8102d12:	f000 fc29 	bl	8103568 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8102d16:	68fb      	ldr	r3, [r7, #12]
 8102d18:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8102d1c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8102d20:	68fb      	ldr	r3, [r7, #12]
 8102d22:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8102d26:	68fb      	ldr	r3, [r7, #12]
 8102d28:	2201      	movs	r2, #1
 8102d2a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8102d2e:	68fb      	ldr	r3, [r7, #12]
 8102d30:	2200      	movs	r2, #0
 8102d32:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8102d36:	2303      	movs	r3, #3
 8102d38:	e0d9      	b.n	8102eee <HAL_SPI_Receive+0x4d8>
    while (hspi->RxXferCount > 0UL)
 8102d3a:	68fb      	ldr	r3, [r7, #12]
 8102d3c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8102d40:	b29b      	uxth	r3, r3
 8102d42:	2b00      	cmp	r3, #0
 8102d44:	f47f af69 	bne.w	8102c1a <HAL_SPI_Receive+0x204>
 8102d48:	e0be      	b.n	8102ec8 <HAL_SPI_Receive+0x4b2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8102d4a:	68fb      	ldr	r3, [r7, #12]
 8102d4c:	681b      	ldr	r3, [r3, #0]
 8102d4e:	695b      	ldr	r3, [r3, #20]
 8102d50:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8102d52:	68fb      	ldr	r3, [r7, #12]
 8102d54:	681b      	ldr	r3, [r3, #0]
 8102d56:	695b      	ldr	r3, [r3, #20]
 8102d58:	f003 0301 	and.w	r3, r3, #1
 8102d5c:	2b01      	cmp	r3, #1
 8102d5e:	d117      	bne.n	8102d90 <HAL_SPI_Receive+0x37a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8102d60:	68fb      	ldr	r3, [r7, #12]
 8102d62:	681b      	ldr	r3, [r3, #0]
 8102d64:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8102d68:	68fb      	ldr	r3, [r7, #12]
 8102d6a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8102d6c:	7812      	ldrb	r2, [r2, #0]
 8102d6e:	b2d2      	uxtb	r2, r2
 8102d70:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8102d72:	68fb      	ldr	r3, [r7, #12]
 8102d74:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8102d76:	1c5a      	adds	r2, r3, #1
 8102d78:	68fb      	ldr	r3, [r7, #12]
 8102d7a:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8102d7c:	68fb      	ldr	r3, [r7, #12]
 8102d7e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8102d82:	b29b      	uxth	r3, r3
 8102d84:	3b01      	subs	r3, #1
 8102d86:	b29a      	uxth	r2, r3
 8102d88:	68fb      	ldr	r3, [r7, #12]
 8102d8a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8102d8e:	e094      	b.n	8102eba <HAL_SPI_Receive+0x4a4>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8102d90:	68fb      	ldr	r3, [r7, #12]
 8102d92:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8102d96:	b29b      	uxth	r3, r3
 8102d98:	8bfa      	ldrh	r2, [r7, #30]
 8102d9a:	429a      	cmp	r2, r3
 8102d9c:	d946      	bls.n	8102e2c <HAL_SPI_Receive+0x416>
 8102d9e:	693b      	ldr	r3, [r7, #16]
 8102da0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8102da4:	2b00      	cmp	r3, #0
 8102da6:	d041      	beq.n	8102e2c <HAL_SPI_Receive+0x416>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8102da8:	68fb      	ldr	r3, [r7, #12]
 8102daa:	681b      	ldr	r3, [r3, #0]
 8102dac:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8102db0:	68fb      	ldr	r3, [r7, #12]
 8102db2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8102db4:	7812      	ldrb	r2, [r2, #0]
 8102db6:	b2d2      	uxtb	r2, r2
 8102db8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8102dba:	68fb      	ldr	r3, [r7, #12]
 8102dbc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8102dbe:	1c5a      	adds	r2, r3, #1
 8102dc0:	68fb      	ldr	r3, [r7, #12]
 8102dc2:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8102dc4:	68fb      	ldr	r3, [r7, #12]
 8102dc6:	681b      	ldr	r3, [r3, #0]
 8102dc8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8102dcc:	68fb      	ldr	r3, [r7, #12]
 8102dce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8102dd0:	7812      	ldrb	r2, [r2, #0]
 8102dd2:	b2d2      	uxtb	r2, r2
 8102dd4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8102dd6:	68fb      	ldr	r3, [r7, #12]
 8102dd8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8102dda:	1c5a      	adds	r2, r3, #1
 8102ddc:	68fb      	ldr	r3, [r7, #12]
 8102dde:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8102de0:	68fb      	ldr	r3, [r7, #12]
 8102de2:	681b      	ldr	r3, [r3, #0]
 8102de4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8102de8:	68fb      	ldr	r3, [r7, #12]
 8102dea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8102dec:	7812      	ldrb	r2, [r2, #0]
 8102dee:	b2d2      	uxtb	r2, r2
 8102df0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8102df2:	68fb      	ldr	r3, [r7, #12]
 8102df4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8102df6:	1c5a      	adds	r2, r3, #1
 8102df8:	68fb      	ldr	r3, [r7, #12]
 8102dfa:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8102dfc:	68fb      	ldr	r3, [r7, #12]
 8102dfe:	681b      	ldr	r3, [r3, #0]
 8102e00:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8102e04:	68fb      	ldr	r3, [r7, #12]
 8102e06:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8102e08:	7812      	ldrb	r2, [r2, #0]
 8102e0a:	b2d2      	uxtb	r2, r2
 8102e0c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8102e0e:	68fb      	ldr	r3, [r7, #12]
 8102e10:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8102e12:	1c5a      	adds	r2, r3, #1
 8102e14:	68fb      	ldr	r3, [r7, #12]
 8102e16:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 8102e18:	68fb      	ldr	r3, [r7, #12]
 8102e1a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8102e1e:	b29b      	uxth	r3, r3
 8102e20:	3b04      	subs	r3, #4
 8102e22:	b29a      	uxth	r2, r3
 8102e24:	68fb      	ldr	r3, [r7, #12]
 8102e26:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8102e2a:	e046      	b.n	8102eba <HAL_SPI_Receive+0x4a4>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 8102e2c:	68fb      	ldr	r3, [r7, #12]
 8102e2e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8102e32:	b29b      	uxth	r3, r3
 8102e34:	2b03      	cmp	r3, #3
 8102e36:	d81c      	bhi.n	8102e72 <HAL_SPI_Receive+0x45c>
 8102e38:	693b      	ldr	r3, [r7, #16]
 8102e3a:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 8102e3e:	2b00      	cmp	r3, #0
 8102e40:	d017      	beq.n	8102e72 <HAL_SPI_Receive+0x45c>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8102e42:	68fb      	ldr	r3, [r7, #12]
 8102e44:	681b      	ldr	r3, [r3, #0]
 8102e46:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8102e4a:	68fb      	ldr	r3, [r7, #12]
 8102e4c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8102e4e:	7812      	ldrb	r2, [r2, #0]
 8102e50:	b2d2      	uxtb	r2, r2
 8102e52:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8102e54:	68fb      	ldr	r3, [r7, #12]
 8102e56:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8102e58:	1c5a      	adds	r2, r3, #1
 8102e5a:	68fb      	ldr	r3, [r7, #12]
 8102e5c:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8102e5e:	68fb      	ldr	r3, [r7, #12]
 8102e60:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8102e64:	b29b      	uxth	r3, r3
 8102e66:	3b01      	subs	r3, #1
 8102e68:	b29a      	uxth	r2, r3
 8102e6a:	68fb      	ldr	r3, [r7, #12]
 8102e6c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8102e70:	e023      	b.n	8102eba <HAL_SPI_Receive+0x4a4>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8102e72:	f7fe fda1 	bl	81019b8 <HAL_GetTick>
 8102e76:	4602      	mov	r2, r0
 8102e78:	697b      	ldr	r3, [r7, #20]
 8102e7a:	1ad3      	subs	r3, r2, r3
 8102e7c:	683a      	ldr	r2, [r7, #0]
 8102e7e:	429a      	cmp	r2, r3
 8102e80:	d803      	bhi.n	8102e8a <HAL_SPI_Receive+0x474>
 8102e82:	683b      	ldr	r3, [r7, #0]
 8102e84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8102e88:	d102      	bne.n	8102e90 <HAL_SPI_Receive+0x47a>
 8102e8a:	683b      	ldr	r3, [r7, #0]
 8102e8c:	2b00      	cmp	r3, #0
 8102e8e:	d114      	bne.n	8102eba <HAL_SPI_Receive+0x4a4>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8102e90:	68f8      	ldr	r0, [r7, #12]
 8102e92:	f000 fb69 	bl	8103568 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8102e96:	68fb      	ldr	r3, [r7, #12]
 8102e98:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8102e9c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8102ea0:	68fb      	ldr	r3, [r7, #12]
 8102ea2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8102ea6:	68fb      	ldr	r3, [r7, #12]
 8102ea8:	2201      	movs	r2, #1
 8102eaa:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8102eae:	68fb      	ldr	r3, [r7, #12]
 8102eb0:	2200      	movs	r2, #0
 8102eb2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8102eb6:	2303      	movs	r3, #3
 8102eb8:	e019      	b.n	8102eee <HAL_SPI_Receive+0x4d8>
    while (hspi->RxXferCount > 0UL)
 8102eba:	68fb      	ldr	r3, [r7, #12]
 8102ebc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8102ec0:	b29b      	uxth	r3, r3
 8102ec2:	2b00      	cmp	r3, #0
 8102ec4:	f47f af41 	bne.w	8102d4a <HAL_SPI_Receive+0x334>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8102ec8:	68f8      	ldr	r0, [r7, #12]
 8102eca:	f000 fb4d 	bl	8103568 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8102ece:	68fb      	ldr	r3, [r7, #12]
 8102ed0:	2201      	movs	r2, #1
 8102ed2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8102ed6:	68fb      	ldr	r3, [r7, #12]
 8102ed8:	2200      	movs	r2, #0
 8102eda:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8102ede:	68fb      	ldr	r3, [r7, #12]
 8102ee0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8102ee4:	2b00      	cmp	r3, #0
 8102ee6:	d001      	beq.n	8102eec <HAL_SPI_Receive+0x4d6>
  {
    return HAL_ERROR;
 8102ee8:	2301      	movs	r3, #1
 8102eea:	e000      	b.n	8102eee <HAL_SPI_Receive+0x4d8>
  }
  else
  {
    return HAL_OK;
 8102eec:	2300      	movs	r3, #0
  }
}
 8102eee:	4618      	mov	r0, r3
 8102ef0:	3720      	adds	r7, #32
 8102ef2:	46bd      	mov	sp, r7
 8102ef4:	bd80      	pop	{r7, pc}
	...

08102ef8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8102ef8:	b580      	push	{r7, lr}
 8102efa:	b08e      	sub	sp, #56	@ 0x38
 8102efc:	af02      	add	r7, sp, #8
 8102efe:	60f8      	str	r0, [r7, #12]
 8102f00:	60b9      	str	r1, [r7, #8]
 8102f02:	607a      	str	r2, [r7, #4]
 8102f04:	807b      	strh	r3, [r7, #2]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8102f06:	68fb      	ldr	r3, [r7, #12]
 8102f08:	681b      	ldr	r3, [r3, #0]
 8102f0a:	3320      	adds	r3, #32
 8102f0c:	627b      	str	r3, [r7, #36]	@ 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8102f0e:	68fb      	ldr	r3, [r7, #12]
 8102f10:	681b      	ldr	r3, [r3, #0]
 8102f12:	3330      	adds	r3, #48	@ 0x30
 8102f14:	623b      	str	r3, [r7, #32]
  uint32_t   fifo_length;
  uint32_t   temp_sr_reg;
  uint16_t   initial_TxXferCount;
  uint16_t   initial_RxXferCount;
  uint16_t   init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 8102f16:	68fb      	ldr	r3, [r7, #12]
 8102f18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8102f1a:	095b      	lsrs	r3, r3, #5
 8102f1c:	b29b      	uxth	r3, r3
 8102f1e:	3301      	adds	r3, #1
 8102f20:	83fb      	strh	r3, [r7, #30]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8102f22:	f7fe fd49 	bl	81019b8 <HAL_GetTick>
 8102f26:	61b8      	str	r0, [r7, #24]

  initial_TxXferCount = Size;
 8102f28:	887b      	ldrh	r3, [r7, #2]
 8102f2a:	857b      	strh	r3, [r7, #42]	@ 0x2a
  initial_RxXferCount = Size;
 8102f2c:	887b      	ldrh	r3, [r7, #2]
 8102f2e:	853b      	strh	r3, [r7, #40]	@ 0x28

  if (hspi->State != HAL_SPI_STATE_READY)
 8102f30:	68fb      	ldr	r3, [r7, #12]
 8102f32:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8102f36:	b2db      	uxtb	r3, r3
 8102f38:	2b01      	cmp	r3, #1
 8102f3a:	d001      	beq.n	8102f40 <HAL_SPI_TransmitReceive+0x48>
  {
    return HAL_BUSY;
 8102f3c:	2302      	movs	r3, #2
 8102f3e:	e30e      	b.n	810355e <HAL_SPI_TransmitReceive+0x666>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8102f40:	68bb      	ldr	r3, [r7, #8]
 8102f42:	2b00      	cmp	r3, #0
 8102f44:	d005      	beq.n	8102f52 <HAL_SPI_TransmitReceive+0x5a>
 8102f46:	687b      	ldr	r3, [r7, #4]
 8102f48:	2b00      	cmp	r3, #0
 8102f4a:	d002      	beq.n	8102f52 <HAL_SPI_TransmitReceive+0x5a>
 8102f4c:	887b      	ldrh	r3, [r7, #2]
 8102f4e:	2b00      	cmp	r3, #0
 8102f50:	d101      	bne.n	8102f56 <HAL_SPI_TransmitReceive+0x5e>
  {
    return HAL_ERROR;
 8102f52:	2301      	movs	r3, #1
 8102f54:	e303      	b.n	810355e <HAL_SPI_TransmitReceive+0x666>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8102f56:	68fb      	ldr	r3, [r7, #12]
 8102f58:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8102f5c:	2b01      	cmp	r3, #1
 8102f5e:	d101      	bne.n	8102f64 <HAL_SPI_TransmitReceive+0x6c>
 8102f60:	2302      	movs	r3, #2
 8102f62:	e2fc      	b.n	810355e <HAL_SPI_TransmitReceive+0x666>
 8102f64:	68fb      	ldr	r3, [r7, #12]
 8102f66:	2201      	movs	r2, #1
 8102f68:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 8102f6c:	68fb      	ldr	r3, [r7, #12]
 8102f6e:	2205      	movs	r2, #5
 8102f70:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8102f74:	68fb      	ldr	r3, [r7, #12]
 8102f76:	2200      	movs	r2, #0
 8102f78:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8102f7c:	68fb      	ldr	r3, [r7, #12]
 8102f7e:	687a      	ldr	r2, [r7, #4]
 8102f80:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount = Size;
 8102f82:	68fb      	ldr	r3, [r7, #12]
 8102f84:	887a      	ldrh	r2, [r7, #2]
 8102f86:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferSize  = Size;
 8102f8a:	68fb      	ldr	r3, [r7, #12]
 8102f8c:	887a      	ldrh	r2, [r7, #2]
 8102f8e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8102f92:	68fb      	ldr	r3, [r7, #12]
 8102f94:	68ba      	ldr	r2, [r7, #8]
 8102f96:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount = Size;
 8102f98:	68fb      	ldr	r3, [r7, #12]
 8102f9a:	887a      	ldrh	r2, [r7, #2]
 8102f9c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->TxXferSize  = Size;
 8102fa0:	68fb      	ldr	r3, [r7, #12]
 8102fa2:	887a      	ldrh	r2, [r7, #2]
 8102fa4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8102fa8:	68fb      	ldr	r3, [r7, #12]
 8102faa:	2200      	movs	r2, #0
 8102fac:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 8102fae:	68fb      	ldr	r3, [r7, #12]
 8102fb0:	2200      	movs	r2, #0
 8102fb2:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 8102fb4:	68fb      	ldr	r3, [r7, #12]
 8102fb6:	681b      	ldr	r3, [r3, #0]
 8102fb8:	68da      	ldr	r2, [r3, #12]
 8102fba:	68fb      	ldr	r3, [r7, #12]
 8102fbc:	681b      	ldr	r3, [r3, #0]
 8102fbe:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 8102fc2:	60da      	str	r2, [r3, #12]

  /* Initialize FIFO length */
  if (IS_SPI_HIGHEND_INSTANCE(hspi->Instance))
 8102fc4:	68fb      	ldr	r3, [r7, #12]
 8102fc6:	681b      	ldr	r3, [r3, #0]
 8102fc8:	4a70      	ldr	r2, [pc, #448]	@ (810318c <HAL_SPI_TransmitReceive+0x294>)
 8102fca:	4293      	cmp	r3, r2
 8102fcc:	d009      	beq.n	8102fe2 <HAL_SPI_TransmitReceive+0xea>
 8102fce:	68fb      	ldr	r3, [r7, #12]
 8102fd0:	681b      	ldr	r3, [r3, #0]
 8102fd2:	4a6f      	ldr	r2, [pc, #444]	@ (8103190 <HAL_SPI_TransmitReceive+0x298>)
 8102fd4:	4293      	cmp	r3, r2
 8102fd6:	d004      	beq.n	8102fe2 <HAL_SPI_TransmitReceive+0xea>
 8102fd8:	68fb      	ldr	r3, [r7, #12]
 8102fda:	681b      	ldr	r3, [r3, #0]
 8102fdc:	4a6d      	ldr	r2, [pc, #436]	@ (8103194 <HAL_SPI_TransmitReceive+0x29c>)
 8102fde:	4293      	cmp	r3, r2
 8102fe0:	d102      	bne.n	8102fe8 <HAL_SPI_TransmitReceive+0xf0>
  {
    fifo_length = SPI_HIGHEND_FIFO_SIZE;
 8102fe2:	2310      	movs	r3, #16
 8102fe4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8102fe6:	e001      	b.n	8102fec <HAL_SPI_TransmitReceive+0xf4>
  }
  else
  {
    fifo_length = SPI_LOWEND_FIFO_SIZE;
 8102fe8:	2308      	movs	r3, #8
 8102fea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8102fec:	68fb      	ldr	r3, [r7, #12]
 8102fee:	681b      	ldr	r3, [r3, #0]
 8102ff0:	685b      	ldr	r3, [r3, #4]
 8102ff2:	0c1b      	lsrs	r3, r3, #16
 8102ff4:	041b      	lsls	r3, r3, #16
 8102ff6:	8879      	ldrh	r1, [r7, #2]
 8102ff8:	68fa      	ldr	r2, [r7, #12]
 8102ffa:	6812      	ldr	r2, [r2, #0]
 8102ffc:	430b      	orrs	r3, r1
 8102ffe:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 8103000:	68fb      	ldr	r3, [r7, #12]
 8103002:	681b      	ldr	r3, [r3, #0]
 8103004:	681a      	ldr	r2, [r3, #0]
 8103006:	68fb      	ldr	r3, [r7, #12]
 8103008:	681b      	ldr	r3, [r3, #0]
 810300a:	f042 0201 	orr.w	r2, r2, #1
 810300e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8103010:	68fb      	ldr	r3, [r7, #12]
 8103012:	685b      	ldr	r3, [r3, #4]
 8103014:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8103018:	d107      	bne.n	810302a <HAL_SPI_TransmitReceive+0x132>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 810301a:	68fb      	ldr	r3, [r7, #12]
 810301c:	681b      	ldr	r3, [r3, #0]
 810301e:	681a      	ldr	r2, [r3, #0]
 8103020:	68fb      	ldr	r3, [r7, #12]
 8103022:	681b      	ldr	r3, [r3, #0]
 8103024:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8103028:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 810302a:	68fb      	ldr	r3, [r7, #12]
 810302c:	68db      	ldr	r3, [r3, #12]
 810302e:	2b0f      	cmp	r3, #15
 8103030:	f240 80a2 	bls.w	8103178 <HAL_SPI_TransmitReceive+0x280>
  {
    /* Adapt fifo length to 32bits data width */
    fifo_length = (fifo_length / 4UL);
 8103034:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8103036:	089b      	lsrs	r3, r3, #2
 8103038:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 810303a:	e094      	b.n	8103166 <HAL_SPI_TransmitReceive+0x26e>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 810303c:	68fb      	ldr	r3, [r7, #12]
 810303e:	681b      	ldr	r3, [r3, #0]
 8103040:	695b      	ldr	r3, [r3, #20]
 8103042:	f003 0302 	and.w	r3, r3, #2
 8103046:	2b02      	cmp	r3, #2
 8103048:	d120      	bne.n	810308c <HAL_SPI_TransmitReceive+0x194>
 810304a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 810304c:	2b00      	cmp	r3, #0
 810304e:	d01d      	beq.n	810308c <HAL_SPI_TransmitReceive+0x194>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8103050:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8103052:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8103054:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8103056:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8103058:	429a      	cmp	r2, r3
 810305a:	d217      	bcs.n	810308c <HAL_SPI_TransmitReceive+0x194>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 810305c:	68fb      	ldr	r3, [r7, #12]
 810305e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8103060:	68fb      	ldr	r3, [r7, #12]
 8103062:	681b      	ldr	r3, [r3, #0]
 8103064:	6812      	ldr	r2, [r2, #0]
 8103066:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8103068:	68fb      	ldr	r3, [r7, #12]
 810306a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 810306c:	1d1a      	adds	r2, r3, #4
 810306e:	68fb      	ldr	r3, [r7, #12]
 8103070:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount --;
 8103072:	68fb      	ldr	r3, [r7, #12]
 8103074:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8103078:	b29b      	uxth	r3, r3
 810307a:	3b01      	subs	r3, #1
 810307c:	b29a      	uxth	r2, r3
 810307e:	68fb      	ldr	r3, [r7, #12]
 8103080:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8103084:	68fb      	ldr	r3, [r7, #12]
 8103086:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 810308a:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 810308c:	68fb      	ldr	r3, [r7, #12]
 810308e:	681b      	ldr	r3, [r3, #0]
 8103090:	695b      	ldr	r3, [r3, #20]
 8103092:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8103094:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8103096:	2b00      	cmp	r3, #0
 8103098:	d065      	beq.n	8103166 <HAL_SPI_TransmitReceive+0x26e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 810309a:	68fb      	ldr	r3, [r7, #12]
 810309c:	681b      	ldr	r3, [r3, #0]
 810309e:	695b      	ldr	r3, [r3, #20]
 81030a0:	f003 0301 	and.w	r3, r3, #1
 81030a4:	2b01      	cmp	r3, #1
 81030a6:	d118      	bne.n	81030da <HAL_SPI_TransmitReceive+0x1e2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 81030a8:	68fb      	ldr	r3, [r7, #12]
 81030aa:	681a      	ldr	r2, [r3, #0]
 81030ac:	68fb      	ldr	r3, [r7, #12]
 81030ae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 81030b0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 81030b2:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 81030b4:	68fb      	ldr	r3, [r7, #12]
 81030b6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 81030b8:	1d1a      	adds	r2, r3, #4
 81030ba:	68fb      	ldr	r3, [r7, #12]
 81030bc:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 81030be:	68fb      	ldr	r3, [r7, #12]
 81030c0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 81030c4:	b29b      	uxth	r3, r3
 81030c6:	3b01      	subs	r3, #1
 81030c8:	b29a      	uxth	r2, r3
 81030ca:	68fb      	ldr	r3, [r7, #12]
 81030cc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 81030d0:	68fb      	ldr	r3, [r7, #12]
 81030d2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 81030d6:	853b      	strh	r3, [r7, #40]	@ 0x28
 81030d8:	e045      	b.n	8103166 <HAL_SPI_TransmitReceive+0x26e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 81030da:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 81030dc:	8bfb      	ldrh	r3, [r7, #30]
 81030de:	429a      	cmp	r2, r3
 81030e0:	d21d      	bcs.n	810311e <HAL_SPI_TransmitReceive+0x226>
 81030e2:	697b      	ldr	r3, [r7, #20]
 81030e4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 81030e8:	2b00      	cmp	r3, #0
 81030ea:	d018      	beq.n	810311e <HAL_SPI_TransmitReceive+0x226>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 81030ec:	68fb      	ldr	r3, [r7, #12]
 81030ee:	681a      	ldr	r2, [r3, #0]
 81030f0:	68fb      	ldr	r3, [r7, #12]
 81030f2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 81030f4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 81030f6:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 81030f8:	68fb      	ldr	r3, [r7, #12]
 81030fa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 81030fc:	1d1a      	adds	r2, r3, #4
 81030fe:	68fb      	ldr	r3, [r7, #12]
 8103100:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8103102:	68fb      	ldr	r3, [r7, #12]
 8103104:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8103108:	b29b      	uxth	r3, r3
 810310a:	3b01      	subs	r3, #1
 810310c:	b29a      	uxth	r2, r3
 810310e:	68fb      	ldr	r3, [r7, #12]
 8103110:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8103114:	68fb      	ldr	r3, [r7, #12]
 8103116:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 810311a:	853b      	strh	r3, [r7, #40]	@ 0x28
 810311c:	e023      	b.n	8103166 <HAL_SPI_TransmitReceive+0x26e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 810311e:	f7fe fc4b 	bl	81019b8 <HAL_GetTick>
 8103122:	4602      	mov	r2, r0
 8103124:	69bb      	ldr	r3, [r7, #24]
 8103126:	1ad3      	subs	r3, r2, r3
 8103128:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 810312a:	429a      	cmp	r2, r3
 810312c:	d803      	bhi.n	8103136 <HAL_SPI_TransmitReceive+0x23e>
 810312e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8103130:	f1b3 3fff 	cmp.w	r3, #4294967295
 8103134:	d102      	bne.n	810313c <HAL_SPI_TransmitReceive+0x244>
 8103136:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8103138:	2b00      	cmp	r3, #0
 810313a:	d114      	bne.n	8103166 <HAL_SPI_TransmitReceive+0x26e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 810313c:	68f8      	ldr	r0, [r7, #12]
 810313e:	f000 fa13 	bl	8103568 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8103142:	68fb      	ldr	r3, [r7, #12]
 8103144:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8103148:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 810314c:	68fb      	ldr	r3, [r7, #12]
 810314e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 8103152:	68fb      	ldr	r3, [r7, #12]
 8103154:	2201      	movs	r2, #1
 8103156:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 810315a:	68fb      	ldr	r3, [r7, #12]
 810315c:	2200      	movs	r2, #0
 810315e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 8103162:	2303      	movs	r3, #3
 8103164:	e1fb      	b.n	810355e <HAL_SPI_TransmitReceive+0x666>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8103166:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8103168:	2b00      	cmp	r3, #0
 810316a:	f47f af67 	bne.w	810303c <HAL_SPI_TransmitReceive+0x144>
 810316e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8103170:	2b00      	cmp	r3, #0
 8103172:	f47f af63 	bne.w	810303c <HAL_SPI_TransmitReceive+0x144>
 8103176:	e1cc      	b.n	8103512 <HAL_SPI_TransmitReceive+0x61a>
        }
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8103178:	68fb      	ldr	r3, [r7, #12]
 810317a:	68db      	ldr	r3, [r3, #12]
 810317c:	2b07      	cmp	r3, #7
 810317e:	f240 81c0 	bls.w	8103502 <HAL_SPI_TransmitReceive+0x60a>
  {
    /* Adapt fifo length to 16bits data width */
    fifo_length = (fifo_length / 2UL);
 8103182:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8103184:	085b      	lsrs	r3, r3, #1
 8103186:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8103188:	e0c7      	b.n	810331a <HAL_SPI_TransmitReceive+0x422>
 810318a:	bf00      	nop
 810318c:	40013000 	.word	0x40013000
 8103190:	40003800 	.word	0x40003800
 8103194:	40003c00 	.word	0x40003c00
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8103198:	68fb      	ldr	r3, [r7, #12]
 810319a:	681b      	ldr	r3, [r3, #0]
 810319c:	695b      	ldr	r3, [r3, #20]
 810319e:	f003 0302 	and.w	r3, r3, #2
 81031a2:	2b02      	cmp	r3, #2
 81031a4:	d11f      	bne.n	81031e6 <HAL_SPI_TransmitReceive+0x2ee>
 81031a6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 81031a8:	2b00      	cmp	r3, #0
 81031aa:	d01c      	beq.n	81031e6 <HAL_SPI_TransmitReceive+0x2ee>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 81031ac:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 81031ae:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 81031b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81031b2:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 81031b4:	429a      	cmp	r2, r3
 81031b6:	d216      	bcs.n	81031e6 <HAL_SPI_TransmitReceive+0x2ee>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 81031b8:	68fb      	ldr	r3, [r7, #12]
 81031ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 81031bc:	881a      	ldrh	r2, [r3, #0]
 81031be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81031c0:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 81031c2:	68fb      	ldr	r3, [r7, #12]
 81031c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 81031c6:	1c9a      	adds	r2, r3, #2
 81031c8:	68fb      	ldr	r3, [r7, #12]
 81031ca:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 81031cc:	68fb      	ldr	r3, [r7, #12]
 81031ce:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 81031d2:	b29b      	uxth	r3, r3
 81031d4:	3b01      	subs	r3, #1
 81031d6:	b29a      	uxth	r2, r3
 81031d8:	68fb      	ldr	r3, [r7, #12]
 81031da:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 81031de:	68fb      	ldr	r3, [r7, #12]
 81031e0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 81031e4:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 81031e6:	68fb      	ldr	r3, [r7, #12]
 81031e8:	681b      	ldr	r3, [r3, #0]
 81031ea:	695b      	ldr	r3, [r3, #20]
 81031ec:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 81031ee:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 81031f0:	2b00      	cmp	r3, #0
 81031f2:	f000 8092 	beq.w	810331a <HAL_SPI_TransmitReceive+0x422>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 81031f6:	68fb      	ldr	r3, [r7, #12]
 81031f8:	681b      	ldr	r3, [r3, #0]
 81031fa:	695b      	ldr	r3, [r3, #20]
 81031fc:	f003 0301 	and.w	r3, r3, #1
 8103200:	2b01      	cmp	r3, #1
 8103202:	d118      	bne.n	8103236 <HAL_SPI_TransmitReceive+0x33e>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8103204:	68fb      	ldr	r3, [r7, #12]
 8103206:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8103208:	6a3a      	ldr	r2, [r7, #32]
 810320a:	8812      	ldrh	r2, [r2, #0]
 810320c:	b292      	uxth	r2, r2
 810320e:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8103210:	68fb      	ldr	r3, [r7, #12]
 8103212:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8103214:	1c9a      	adds	r2, r3, #2
 8103216:	68fb      	ldr	r3, [r7, #12]
 8103218:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 810321a:	68fb      	ldr	r3, [r7, #12]
 810321c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8103220:	b29b      	uxth	r3, r3
 8103222:	3b01      	subs	r3, #1
 8103224:	b29a      	uxth	r2, r3
 8103226:	68fb      	ldr	r3, [r7, #12]
 8103228:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 810322c:	68fb      	ldr	r3, [r7, #12]
 810322e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8103232:	853b      	strh	r3, [r7, #40]	@ 0x28
 8103234:	e071      	b.n	810331a <HAL_SPI_TransmitReceive+0x422>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8103236:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8103238:	8bfb      	ldrh	r3, [r7, #30]
 810323a:	429a      	cmp	r2, r3
 810323c:	d228      	bcs.n	8103290 <HAL_SPI_TransmitReceive+0x398>
 810323e:	697b      	ldr	r3, [r7, #20]
 8103240:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8103244:	2b00      	cmp	r3, #0
 8103246:	d023      	beq.n	8103290 <HAL_SPI_TransmitReceive+0x398>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8103248:	68fb      	ldr	r3, [r7, #12]
 810324a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 810324c:	6a3a      	ldr	r2, [r7, #32]
 810324e:	8812      	ldrh	r2, [r2, #0]
 8103250:	b292      	uxth	r2, r2
 8103252:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8103254:	68fb      	ldr	r3, [r7, #12]
 8103256:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8103258:	1c9a      	adds	r2, r3, #2
 810325a:	68fb      	ldr	r3, [r7, #12]
 810325c:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 810325e:	68fb      	ldr	r3, [r7, #12]
 8103260:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8103262:	6a3a      	ldr	r2, [r7, #32]
 8103264:	8812      	ldrh	r2, [r2, #0]
 8103266:	b292      	uxth	r2, r2
 8103268:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 810326a:	68fb      	ldr	r3, [r7, #12]
 810326c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 810326e:	1c9a      	adds	r2, r3, #2
 8103270:	68fb      	ldr	r3, [r7, #12]
 8103272:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8103274:	68fb      	ldr	r3, [r7, #12]
 8103276:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 810327a:	b29b      	uxth	r3, r3
 810327c:	3b02      	subs	r3, #2
 810327e:	b29a      	uxth	r2, r3
 8103280:	68fb      	ldr	r3, [r7, #12]
 8103282:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8103286:	68fb      	ldr	r3, [r7, #12]
 8103288:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 810328c:	853b      	strh	r3, [r7, #40]	@ 0x28
 810328e:	e044      	b.n	810331a <HAL_SPI_TransmitReceive+0x422>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 8103290:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8103292:	2b01      	cmp	r3, #1
 8103294:	d11d      	bne.n	81032d2 <HAL_SPI_TransmitReceive+0x3da>
 8103296:	697b      	ldr	r3, [r7, #20]
 8103298:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 810329c:	2b00      	cmp	r3, #0
 810329e:	d018      	beq.n	81032d2 <HAL_SPI_TransmitReceive+0x3da>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 81032a0:	68fb      	ldr	r3, [r7, #12]
 81032a2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 81032a4:	6a3a      	ldr	r2, [r7, #32]
 81032a6:	8812      	ldrh	r2, [r2, #0]
 81032a8:	b292      	uxth	r2, r2
 81032aa:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 81032ac:	68fb      	ldr	r3, [r7, #12]
 81032ae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 81032b0:	1c9a      	adds	r2, r3, #2
 81032b2:	68fb      	ldr	r3, [r7, #12]
 81032b4:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 81032b6:	68fb      	ldr	r3, [r7, #12]
 81032b8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 81032bc:	b29b      	uxth	r3, r3
 81032be:	3b01      	subs	r3, #1
 81032c0:	b29a      	uxth	r2, r3
 81032c2:	68fb      	ldr	r3, [r7, #12]
 81032c4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 81032c8:	68fb      	ldr	r3, [r7, #12]
 81032ca:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 81032ce:	853b      	strh	r3, [r7, #40]	@ 0x28
 81032d0:	e023      	b.n	810331a <HAL_SPI_TransmitReceive+0x422>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 81032d2:	f7fe fb71 	bl	81019b8 <HAL_GetTick>
 81032d6:	4602      	mov	r2, r0
 81032d8:	69bb      	ldr	r3, [r7, #24]
 81032da:	1ad3      	subs	r3, r2, r3
 81032dc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 81032de:	429a      	cmp	r2, r3
 81032e0:	d803      	bhi.n	81032ea <HAL_SPI_TransmitReceive+0x3f2>
 81032e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81032e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 81032e8:	d102      	bne.n	81032f0 <HAL_SPI_TransmitReceive+0x3f8>
 81032ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81032ec:	2b00      	cmp	r3, #0
 81032ee:	d114      	bne.n	810331a <HAL_SPI_TransmitReceive+0x422>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 81032f0:	68f8      	ldr	r0, [r7, #12]
 81032f2:	f000 f939 	bl	8103568 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 81032f6:	68fb      	ldr	r3, [r7, #12]
 81032f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 81032fc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8103300:	68fb      	ldr	r3, [r7, #12]
 8103302:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 8103306:	68fb      	ldr	r3, [r7, #12]
 8103308:	2201      	movs	r2, #1
 810330a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 810330e:	68fb      	ldr	r3, [r7, #12]
 8103310:	2200      	movs	r2, #0
 8103312:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 8103316:	2303      	movs	r3, #3
 8103318:	e121      	b.n	810355e <HAL_SPI_TransmitReceive+0x666>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 810331a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 810331c:	2b00      	cmp	r3, #0
 810331e:	f47f af3b 	bne.w	8103198 <HAL_SPI_TransmitReceive+0x2a0>
 8103322:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8103324:	2b00      	cmp	r3, #0
 8103326:	f47f af37 	bne.w	8103198 <HAL_SPI_TransmitReceive+0x2a0>
 810332a:	e0f2      	b.n	8103512 <HAL_SPI_TransmitReceive+0x61a>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 810332c:	68fb      	ldr	r3, [r7, #12]
 810332e:	681b      	ldr	r3, [r3, #0]
 8103330:	695b      	ldr	r3, [r3, #20]
 8103332:	f003 0302 	and.w	r3, r3, #2
 8103336:	2b02      	cmp	r3, #2
 8103338:	d121      	bne.n	810337e <HAL_SPI_TransmitReceive+0x486>
 810333a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 810333c:	2b00      	cmp	r3, #0
 810333e:	d01e      	beq.n	810337e <HAL_SPI_TransmitReceive+0x486>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8103340:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8103342:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8103344:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8103346:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8103348:	429a      	cmp	r2, r3
 810334a:	d218      	bcs.n	810337e <HAL_SPI_TransmitReceive+0x486>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 810334c:	68fb      	ldr	r3, [r7, #12]
 810334e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8103350:	68fb      	ldr	r3, [r7, #12]
 8103352:	681b      	ldr	r3, [r3, #0]
 8103354:	3320      	adds	r3, #32
 8103356:	7812      	ldrb	r2, [r2, #0]
 8103358:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 810335a:	68fb      	ldr	r3, [r7, #12]
 810335c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 810335e:	1c5a      	adds	r2, r3, #1
 8103360:	68fb      	ldr	r3, [r7, #12]
 8103362:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8103364:	68fb      	ldr	r3, [r7, #12]
 8103366:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 810336a:	b29b      	uxth	r3, r3
 810336c:	3b01      	subs	r3, #1
 810336e:	b29a      	uxth	r2, r3
 8103370:	68fb      	ldr	r3, [r7, #12]
 8103372:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8103376:	68fb      	ldr	r3, [r7, #12]
 8103378:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 810337c:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 810337e:	68fb      	ldr	r3, [r7, #12]
 8103380:	681b      	ldr	r3, [r3, #0]
 8103382:	695b      	ldr	r3, [r3, #20]
 8103384:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8103386:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8103388:	2b00      	cmp	r3, #0
 810338a:	f000 80ba 	beq.w	8103502 <HAL_SPI_TransmitReceive+0x60a>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 810338e:	68fb      	ldr	r3, [r7, #12]
 8103390:	681b      	ldr	r3, [r3, #0]
 8103392:	695b      	ldr	r3, [r3, #20]
 8103394:	f003 0301 	and.w	r3, r3, #1
 8103398:	2b01      	cmp	r3, #1
 810339a:	d11b      	bne.n	81033d4 <HAL_SPI_TransmitReceive+0x4dc>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 810339c:	68fb      	ldr	r3, [r7, #12]
 810339e:	681b      	ldr	r3, [r3, #0]
 81033a0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 81033a4:	68fb      	ldr	r3, [r7, #12]
 81033a6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 81033a8:	7812      	ldrb	r2, [r2, #0]
 81033aa:	b2d2      	uxtb	r2, r2
 81033ac:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 81033ae:	68fb      	ldr	r3, [r7, #12]
 81033b0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 81033b2:	1c5a      	adds	r2, r3, #1
 81033b4:	68fb      	ldr	r3, [r7, #12]
 81033b6:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 81033b8:	68fb      	ldr	r3, [r7, #12]
 81033ba:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 81033be:	b29b      	uxth	r3, r3
 81033c0:	3b01      	subs	r3, #1
 81033c2:	b29a      	uxth	r2, r3
 81033c4:	68fb      	ldr	r3, [r7, #12]
 81033c6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 81033ca:	68fb      	ldr	r3, [r7, #12]
 81033cc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 81033d0:	853b      	strh	r3, [r7, #40]	@ 0x28
 81033d2:	e096      	b.n	8103502 <HAL_SPI_TransmitReceive+0x60a>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 81033d4:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 81033d6:	8bfb      	ldrh	r3, [r7, #30]
 81033d8:	429a      	cmp	r2, r3
 81033da:	d24a      	bcs.n	8103472 <HAL_SPI_TransmitReceive+0x57a>
 81033dc:	697b      	ldr	r3, [r7, #20]
 81033de:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 81033e2:	2b00      	cmp	r3, #0
 81033e4:	d045      	beq.n	8103472 <HAL_SPI_TransmitReceive+0x57a>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 81033e6:	68fb      	ldr	r3, [r7, #12]
 81033e8:	681b      	ldr	r3, [r3, #0]
 81033ea:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 81033ee:	68fb      	ldr	r3, [r7, #12]
 81033f0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 81033f2:	7812      	ldrb	r2, [r2, #0]
 81033f4:	b2d2      	uxtb	r2, r2
 81033f6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 81033f8:	68fb      	ldr	r3, [r7, #12]
 81033fa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 81033fc:	1c5a      	adds	r2, r3, #1
 81033fe:	68fb      	ldr	r3, [r7, #12]
 8103400:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8103402:	68fb      	ldr	r3, [r7, #12]
 8103404:	681b      	ldr	r3, [r3, #0]
 8103406:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 810340a:	68fb      	ldr	r3, [r7, #12]
 810340c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 810340e:	7812      	ldrb	r2, [r2, #0]
 8103410:	b2d2      	uxtb	r2, r2
 8103412:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8103414:	68fb      	ldr	r3, [r7, #12]
 8103416:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8103418:	1c5a      	adds	r2, r3, #1
 810341a:	68fb      	ldr	r3, [r7, #12]
 810341c:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 810341e:	68fb      	ldr	r3, [r7, #12]
 8103420:	681b      	ldr	r3, [r3, #0]
 8103422:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8103426:	68fb      	ldr	r3, [r7, #12]
 8103428:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 810342a:	7812      	ldrb	r2, [r2, #0]
 810342c:	b2d2      	uxtb	r2, r2
 810342e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8103430:	68fb      	ldr	r3, [r7, #12]
 8103432:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8103434:	1c5a      	adds	r2, r3, #1
 8103436:	68fb      	ldr	r3, [r7, #12]
 8103438:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 810343a:	68fb      	ldr	r3, [r7, #12]
 810343c:	681b      	ldr	r3, [r3, #0]
 810343e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8103442:	68fb      	ldr	r3, [r7, #12]
 8103444:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8103446:	7812      	ldrb	r2, [r2, #0]
 8103448:	b2d2      	uxtb	r2, r2
 810344a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 810344c:	68fb      	ldr	r3, [r7, #12]
 810344e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8103450:	1c5a      	adds	r2, r3, #1
 8103452:	68fb      	ldr	r3, [r7, #12]
 8103454:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 8103456:	68fb      	ldr	r3, [r7, #12]
 8103458:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 810345c:	b29b      	uxth	r3, r3
 810345e:	3b04      	subs	r3, #4
 8103460:	b29a      	uxth	r2, r3
 8103462:	68fb      	ldr	r3, [r7, #12]
 8103464:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8103468:	68fb      	ldr	r3, [r7, #12]
 810346a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 810346e:	853b      	strh	r3, [r7, #40]	@ 0x28
 8103470:	e047      	b.n	8103502 <HAL_SPI_TransmitReceive+0x60a>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 8103472:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8103474:	2b03      	cmp	r3, #3
 8103476:	d820      	bhi.n	81034ba <HAL_SPI_TransmitReceive+0x5c2>
 8103478:	697b      	ldr	r3, [r7, #20]
 810347a:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 810347e:	2b00      	cmp	r3, #0
 8103480:	d01b      	beq.n	81034ba <HAL_SPI_TransmitReceive+0x5c2>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8103482:	68fb      	ldr	r3, [r7, #12]
 8103484:	681b      	ldr	r3, [r3, #0]
 8103486:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 810348a:	68fb      	ldr	r3, [r7, #12]
 810348c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 810348e:	7812      	ldrb	r2, [r2, #0]
 8103490:	b2d2      	uxtb	r2, r2
 8103492:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8103494:	68fb      	ldr	r3, [r7, #12]
 8103496:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8103498:	1c5a      	adds	r2, r3, #1
 810349a:	68fb      	ldr	r3, [r7, #12]
 810349c:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 810349e:	68fb      	ldr	r3, [r7, #12]
 81034a0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 81034a4:	b29b      	uxth	r3, r3
 81034a6:	3b01      	subs	r3, #1
 81034a8:	b29a      	uxth	r2, r3
 81034aa:	68fb      	ldr	r3, [r7, #12]
 81034ac:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 81034b0:	68fb      	ldr	r3, [r7, #12]
 81034b2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 81034b6:	853b      	strh	r3, [r7, #40]	@ 0x28
 81034b8:	e023      	b.n	8103502 <HAL_SPI_TransmitReceive+0x60a>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 81034ba:	f7fe fa7d 	bl	81019b8 <HAL_GetTick>
 81034be:	4602      	mov	r2, r0
 81034c0:	69bb      	ldr	r3, [r7, #24]
 81034c2:	1ad3      	subs	r3, r2, r3
 81034c4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 81034c6:	429a      	cmp	r2, r3
 81034c8:	d803      	bhi.n	81034d2 <HAL_SPI_TransmitReceive+0x5da>
 81034ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81034cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 81034d0:	d102      	bne.n	81034d8 <HAL_SPI_TransmitReceive+0x5e0>
 81034d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81034d4:	2b00      	cmp	r3, #0
 81034d6:	d114      	bne.n	8103502 <HAL_SPI_TransmitReceive+0x60a>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 81034d8:	68f8      	ldr	r0, [r7, #12]
 81034da:	f000 f845 	bl	8103568 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 81034de:	68fb      	ldr	r3, [r7, #12]
 81034e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 81034e4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 81034e8:	68fb      	ldr	r3, [r7, #12]
 81034ea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 81034ee:	68fb      	ldr	r3, [r7, #12]
 81034f0:	2201      	movs	r2, #1
 81034f2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 81034f6:	68fb      	ldr	r3, [r7, #12]
 81034f8:	2200      	movs	r2, #0
 81034fa:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 81034fe:	2303      	movs	r3, #3
 8103500:	e02d      	b.n	810355e <HAL_SPI_TransmitReceive+0x666>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8103502:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8103504:	2b00      	cmp	r3, #0
 8103506:	f47f af11 	bne.w	810332c <HAL_SPI_TransmitReceive+0x434>
 810350a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 810350c:	2b00      	cmp	r3, #0
 810350e:	f47f af0d 	bne.w	810332c <HAL_SPI_TransmitReceive+0x434>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8103512:	69bb      	ldr	r3, [r7, #24]
 8103514:	9300      	str	r3, [sp, #0]
 8103516:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8103518:	2200      	movs	r2, #0
 810351a:	2108      	movs	r1, #8
 810351c:	68f8      	ldr	r0, [r7, #12]
 810351e:	f000 f8c3 	bl	81036a8 <SPI_WaitOnFlagUntilTimeout>
 8103522:	4603      	mov	r3, r0
 8103524:	2b00      	cmp	r3, #0
 8103526:	d007      	beq.n	8103538 <HAL_SPI_TransmitReceive+0x640>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8103528:	68fb      	ldr	r3, [r7, #12]
 810352a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 810352e:	f043 0220 	orr.w	r2, r3, #32
 8103532:	68fb      	ldr	r3, [r7, #12]
 8103534:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8103538:	68f8      	ldr	r0, [r7, #12]
 810353a:	f000 f815 	bl	8103568 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 810353e:	68fb      	ldr	r3, [r7, #12]
 8103540:	2201      	movs	r2, #1
 8103542:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8103546:	68fb      	ldr	r3, [r7, #12]
 8103548:	2200      	movs	r2, #0
 810354a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 810354e:	68fb      	ldr	r3, [r7, #12]
 8103550:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8103554:	2b00      	cmp	r3, #0
 8103556:	d001      	beq.n	810355c <HAL_SPI_TransmitReceive+0x664>
  {
    return HAL_ERROR;
 8103558:	2301      	movs	r3, #1
 810355a:	e000      	b.n	810355e <HAL_SPI_TransmitReceive+0x666>
  }
  else
  {
    return HAL_OK;
 810355c:	2300      	movs	r3, #0
  }
}
 810355e:	4618      	mov	r0, r3
 8103560:	3730      	adds	r7, #48	@ 0x30
 8103562:	46bd      	mov	sp, r7
 8103564:	bd80      	pop	{r7, pc}
 8103566:	bf00      	nop

08103568 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8103568:	b480      	push	{r7}
 810356a:	b085      	sub	sp, #20
 810356c:	af00      	add	r7, sp, #0
 810356e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8103570:	687b      	ldr	r3, [r7, #4]
 8103572:	681b      	ldr	r3, [r3, #0]
 8103574:	695b      	ldr	r3, [r3, #20]
 8103576:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8103578:	687b      	ldr	r3, [r7, #4]
 810357a:	681b      	ldr	r3, [r3, #0]
 810357c:	699a      	ldr	r2, [r3, #24]
 810357e:	687b      	ldr	r3, [r7, #4]
 8103580:	681b      	ldr	r3, [r3, #0]
 8103582:	f042 0208 	orr.w	r2, r2, #8
 8103586:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8103588:	687b      	ldr	r3, [r7, #4]
 810358a:	681b      	ldr	r3, [r3, #0]
 810358c:	699a      	ldr	r2, [r3, #24]
 810358e:	687b      	ldr	r3, [r7, #4]
 8103590:	681b      	ldr	r3, [r3, #0]
 8103592:	f042 0210 	orr.w	r2, r2, #16
 8103596:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8103598:	687b      	ldr	r3, [r7, #4]
 810359a:	681b      	ldr	r3, [r3, #0]
 810359c:	681a      	ldr	r2, [r3, #0]
 810359e:	687b      	ldr	r3, [r7, #4]
 81035a0:	681b      	ldr	r3, [r3, #0]
 81035a2:	f022 0201 	bic.w	r2, r2, #1
 81035a6:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 81035a8:	687b      	ldr	r3, [r7, #4]
 81035aa:	681b      	ldr	r3, [r3, #0]
 81035ac:	691b      	ldr	r3, [r3, #16]
 81035ae:	687a      	ldr	r2, [r7, #4]
 81035b0:	6812      	ldr	r2, [r2, #0]
 81035b2:	f423 735b 	bic.w	r3, r3, #876	@ 0x36c
 81035b6:	f023 0303 	bic.w	r3, r3, #3
 81035ba:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 81035bc:	687b      	ldr	r3, [r7, #4]
 81035be:	681b      	ldr	r3, [r3, #0]
 81035c0:	689a      	ldr	r2, [r3, #8]
 81035c2:	687b      	ldr	r3, [r7, #4]
 81035c4:	681b      	ldr	r3, [r3, #0]
 81035c6:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 81035ca:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 81035cc:	687b      	ldr	r3, [r7, #4]
 81035ce:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 81035d2:	b2db      	uxtb	r3, r3
 81035d4:	2b04      	cmp	r3, #4
 81035d6:	d014      	beq.n	8103602 <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 81035d8:	68fb      	ldr	r3, [r7, #12]
 81035da:	f003 0320 	and.w	r3, r3, #32
 81035de:	2b00      	cmp	r3, #0
 81035e0:	d00f      	beq.n	8103602 <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 81035e2:	687b      	ldr	r3, [r7, #4]
 81035e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 81035e8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 81035ec:	687b      	ldr	r3, [r7, #4]
 81035ee:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 81035f2:	687b      	ldr	r3, [r7, #4]
 81035f4:	681b      	ldr	r3, [r3, #0]
 81035f6:	699a      	ldr	r2, [r3, #24]
 81035f8:	687b      	ldr	r3, [r7, #4]
 81035fa:	681b      	ldr	r3, [r3, #0]
 81035fc:	f042 0220 	orr.w	r2, r2, #32
 8103600:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8103602:	687b      	ldr	r3, [r7, #4]
 8103604:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8103608:	b2db      	uxtb	r3, r3
 810360a:	2b03      	cmp	r3, #3
 810360c:	d014      	beq.n	8103638 <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 810360e:	68fb      	ldr	r3, [r7, #12]
 8103610:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8103614:	2b00      	cmp	r3, #0
 8103616:	d00f      	beq.n	8103638 <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8103618:	687b      	ldr	r3, [r7, #4]
 810361a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 810361e:	f043 0204 	orr.w	r2, r3, #4
 8103622:	687b      	ldr	r3, [r7, #4]
 8103624:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8103628:	687b      	ldr	r3, [r7, #4]
 810362a:	681b      	ldr	r3, [r3, #0]
 810362c:	699a      	ldr	r2, [r3, #24]
 810362e:	687b      	ldr	r3, [r7, #4]
 8103630:	681b      	ldr	r3, [r3, #0]
 8103632:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8103636:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8103638:	68fb      	ldr	r3, [r7, #12]
 810363a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 810363e:	2b00      	cmp	r3, #0
 8103640:	d00f      	beq.n	8103662 <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8103642:	687b      	ldr	r3, [r7, #4]
 8103644:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8103648:	f043 0201 	orr.w	r2, r3, #1
 810364c:	687b      	ldr	r3, [r7, #4]
 810364e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8103652:	687b      	ldr	r3, [r7, #4]
 8103654:	681b      	ldr	r3, [r3, #0]
 8103656:	699a      	ldr	r2, [r3, #24]
 8103658:	687b      	ldr	r3, [r7, #4]
 810365a:	681b      	ldr	r3, [r3, #0]
 810365c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8103660:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8103662:	68fb      	ldr	r3, [r7, #12]
 8103664:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8103668:	2b00      	cmp	r3, #0
 810366a:	d00f      	beq.n	810368c <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 810366c:	687b      	ldr	r3, [r7, #4]
 810366e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8103672:	f043 0208 	orr.w	r2, r3, #8
 8103676:	687b      	ldr	r3, [r7, #4]
 8103678:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 810367c:	687b      	ldr	r3, [r7, #4]
 810367e:	681b      	ldr	r3, [r3, #0]
 8103680:	699a      	ldr	r2, [r3, #24]
 8103682:	687b      	ldr	r3, [r7, #4]
 8103684:	681b      	ldr	r3, [r3, #0]
 8103686:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 810368a:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 810368c:	687b      	ldr	r3, [r7, #4]
 810368e:	2200      	movs	r2, #0
 8103690:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8103694:	687b      	ldr	r3, [r7, #4]
 8103696:	2200      	movs	r2, #0
 8103698:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 810369c:	bf00      	nop
 810369e:	3714      	adds	r7, #20
 81036a0:	46bd      	mov	sp, r7
 81036a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81036a6:	4770      	bx	lr

081036a8 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 81036a8:	b580      	push	{r7, lr}
 81036aa:	b084      	sub	sp, #16
 81036ac:	af00      	add	r7, sp, #0
 81036ae:	60f8      	str	r0, [r7, #12]
 81036b0:	60b9      	str	r1, [r7, #8]
 81036b2:	603b      	str	r3, [r7, #0]
 81036b4:	4613      	mov	r3, r2
 81036b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 81036b8:	e010      	b.n	81036dc <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 81036ba:	f7fe f97d 	bl	81019b8 <HAL_GetTick>
 81036be:	4602      	mov	r2, r0
 81036c0:	69bb      	ldr	r3, [r7, #24]
 81036c2:	1ad3      	subs	r3, r2, r3
 81036c4:	683a      	ldr	r2, [r7, #0]
 81036c6:	429a      	cmp	r2, r3
 81036c8:	d803      	bhi.n	81036d2 <SPI_WaitOnFlagUntilTimeout+0x2a>
 81036ca:	683b      	ldr	r3, [r7, #0]
 81036cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 81036d0:	d102      	bne.n	81036d8 <SPI_WaitOnFlagUntilTimeout+0x30>
 81036d2:	683b      	ldr	r3, [r7, #0]
 81036d4:	2b00      	cmp	r3, #0
 81036d6:	d101      	bne.n	81036dc <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 81036d8:	2303      	movs	r3, #3
 81036da:	e00f      	b.n	81036fc <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 81036dc:	68fb      	ldr	r3, [r7, #12]
 81036de:	681b      	ldr	r3, [r3, #0]
 81036e0:	695a      	ldr	r2, [r3, #20]
 81036e2:	68bb      	ldr	r3, [r7, #8]
 81036e4:	4013      	ands	r3, r2
 81036e6:	68ba      	ldr	r2, [r7, #8]
 81036e8:	429a      	cmp	r2, r3
 81036ea:	bf0c      	ite	eq
 81036ec:	2301      	moveq	r3, #1
 81036ee:	2300      	movne	r3, #0
 81036f0:	b2db      	uxtb	r3, r3
 81036f2:	461a      	mov	r2, r3
 81036f4:	79fb      	ldrb	r3, [r7, #7]
 81036f6:	429a      	cmp	r2, r3
 81036f8:	d0df      	beq.n	81036ba <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 81036fa:	2300      	movs	r3, #0
}
 81036fc:	4618      	mov	r0, r3
 81036fe:	3710      	adds	r7, #16
 8103700:	46bd      	mov	sp, r7
 8103702:	bd80      	pop	{r7, pc}

08103704 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8103704:	b480      	push	{r7}
 8103706:	b085      	sub	sp, #20
 8103708:	af00      	add	r7, sp, #0
 810370a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 810370c:	687b      	ldr	r3, [r7, #4]
 810370e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8103710:	095b      	lsrs	r3, r3, #5
 8103712:	3301      	adds	r3, #1
 8103714:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8103716:	687b      	ldr	r3, [r7, #4]
 8103718:	68db      	ldr	r3, [r3, #12]
 810371a:	3301      	adds	r3, #1
 810371c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 810371e:	68bb      	ldr	r3, [r7, #8]
 8103720:	3307      	adds	r3, #7
 8103722:	08db      	lsrs	r3, r3, #3
 8103724:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8103726:	68bb      	ldr	r3, [r7, #8]
 8103728:	68fa      	ldr	r2, [r7, #12]
 810372a:	fb02 f303 	mul.w	r3, r2, r3
}
 810372e:	4618      	mov	r0, r3
 8103730:	3714      	adds	r7, #20
 8103732:	46bd      	mov	sp, r7
 8103734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103738:	4770      	bx	lr
	...

0810373c <__libc_init_array>:
 810373c:	b570      	push	{r4, r5, r6, lr}
 810373e:	4d0d      	ldr	r5, [pc, #52]	@ (8103774 <__libc_init_array+0x38>)
 8103740:	4c0d      	ldr	r4, [pc, #52]	@ (8103778 <__libc_init_array+0x3c>)
 8103742:	1b64      	subs	r4, r4, r5
 8103744:	10a4      	asrs	r4, r4, #2
 8103746:	2600      	movs	r6, #0
 8103748:	42a6      	cmp	r6, r4
 810374a:	d109      	bne.n	8103760 <__libc_init_array+0x24>
 810374c:	4d0b      	ldr	r5, [pc, #44]	@ (810377c <__libc_init_array+0x40>)
 810374e:	4c0c      	ldr	r4, [pc, #48]	@ (8103780 <__libc_init_array+0x44>)
 8103750:	f000 f818 	bl	8103784 <_init>
 8103754:	1b64      	subs	r4, r4, r5
 8103756:	10a4      	asrs	r4, r4, #2
 8103758:	2600      	movs	r6, #0
 810375a:	42a6      	cmp	r6, r4
 810375c:	d105      	bne.n	810376a <__libc_init_array+0x2e>
 810375e:	bd70      	pop	{r4, r5, r6, pc}
 8103760:	f855 3b04 	ldr.w	r3, [r5], #4
 8103764:	4798      	blx	r3
 8103766:	3601      	adds	r6, #1
 8103768:	e7ee      	b.n	8103748 <__libc_init_array+0xc>
 810376a:	f855 3b04 	ldr.w	r3, [r5], #4
 810376e:	4798      	blx	r3
 8103770:	3601      	adds	r6, #1
 8103772:	e7f2      	b.n	810375a <__libc_init_array+0x1e>
 8103774:	081037c4 	.word	0x081037c4
 8103778:	081037c4 	.word	0x081037c4
 810377c:	081037c4 	.word	0x081037c4
 8103780:	081037c8 	.word	0x081037c8

08103784 <_init>:
 8103784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8103786:	bf00      	nop
 8103788:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810378a:	bc08      	pop	{r3}
 810378c:	469e      	mov	lr, r3
 810378e:	4770      	bx	lr

08103790 <_fini>:
 8103790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8103792:	bf00      	nop
 8103794:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8103796:	bc08      	pop	{r3}
 8103798:	469e      	mov	lr, r3
 810379a:	4770      	bx	lr
