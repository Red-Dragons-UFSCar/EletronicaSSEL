
TransmissionBluePill.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000975c  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  08009868  08009868  0000a868  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009944  08009944  0000b1ec  2**0
                  CONTENTS
  4 .ARM          00000008  08009944  08009944  0000a944  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800994c  0800994c  0000b1ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800994c  0800994c  0000a94c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009950  08009950  0000a950  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001ec  20000000  08009954  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000013a0  200001ec  08009b40  0000b1ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000158c  08009b40  0000b58c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000b1ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ef8a  00000000  00000000  0000b215  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003112  00000000  00000000  0001a19f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d88  00000000  00000000  0001d2b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009f7  00000000  00000000  0001e040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019c84  00000000  00000000  0001ea37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000115af  00000000  00000000  000386bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086ffc  00000000  00000000  00049c6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d0c66  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a94  00000000  00000000  000d0cac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  000d4740  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001ec 	.word	0x200001ec
 8000128:	00000000 	.word	0x00000000
 800012c:	08009850 	.word	0x08009850

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001f0 	.word	0x200001f0
 8000148:	08009850 	.word	0x08009850

0800014c <__aeabi_uldivmod>:
 800014c:	b953      	cbnz	r3, 8000164 <__aeabi_uldivmod+0x18>
 800014e:	b94a      	cbnz	r2, 8000164 <__aeabi_uldivmod+0x18>
 8000150:	2900      	cmp	r1, #0
 8000152:	bf08      	it	eq
 8000154:	2800      	cmpeq	r0, #0
 8000156:	bf1c      	itt	ne
 8000158:	f04f 31ff 	movne.w	r1, #4294967295
 800015c:	f04f 30ff 	movne.w	r0, #4294967295
 8000160:	f000 b968 	b.w	8000434 <__aeabi_idiv0>
 8000164:	f1ad 0c08 	sub.w	ip, sp, #8
 8000168:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800016c:	f000 f806 	bl	800017c <__udivmoddi4>
 8000170:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000174:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000178:	b004      	add	sp, #16
 800017a:	4770      	bx	lr

0800017c <__udivmoddi4>:
 800017c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000180:	9d08      	ldr	r5, [sp, #32]
 8000182:	460c      	mov	r4, r1
 8000184:	2b00      	cmp	r3, #0
 8000186:	d14e      	bne.n	8000226 <__udivmoddi4+0xaa>
 8000188:	4694      	mov	ip, r2
 800018a:	458c      	cmp	ip, r1
 800018c:	4686      	mov	lr, r0
 800018e:	fab2 f282 	clz	r2, r2
 8000192:	d962      	bls.n	800025a <__udivmoddi4+0xde>
 8000194:	b14a      	cbz	r2, 80001aa <__udivmoddi4+0x2e>
 8000196:	f1c2 0320 	rsb	r3, r2, #32
 800019a:	4091      	lsls	r1, r2
 800019c:	fa20 f303 	lsr.w	r3, r0, r3
 80001a0:	fa0c fc02 	lsl.w	ip, ip, r2
 80001a4:	4319      	orrs	r1, r3
 80001a6:	fa00 fe02 	lsl.w	lr, r0, r2
 80001aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80001ae:	fbb1 f4f7 	udiv	r4, r1, r7
 80001b2:	fb07 1114 	mls	r1, r7, r4, r1
 80001b6:	fa1f f68c 	uxth.w	r6, ip
 80001ba:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80001be:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80001c2:	fb04 f106 	mul.w	r1, r4, r6
 80001c6:	4299      	cmp	r1, r3
 80001c8:	d90a      	bls.n	80001e0 <__udivmoddi4+0x64>
 80001ca:	eb1c 0303 	adds.w	r3, ip, r3
 80001ce:	f104 30ff 	add.w	r0, r4, #4294967295
 80001d2:	f080 8110 	bcs.w	80003f6 <__udivmoddi4+0x27a>
 80001d6:	4299      	cmp	r1, r3
 80001d8:	f240 810d 	bls.w	80003f6 <__udivmoddi4+0x27a>
 80001dc:	3c02      	subs	r4, #2
 80001de:	4463      	add	r3, ip
 80001e0:	1a59      	subs	r1, r3, r1
 80001e2:	fbb1 f0f7 	udiv	r0, r1, r7
 80001e6:	fb07 1110 	mls	r1, r7, r0, r1
 80001ea:	fb00 f606 	mul.w	r6, r0, r6
 80001ee:	fa1f f38e 	uxth.w	r3, lr
 80001f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80001f6:	429e      	cmp	r6, r3
 80001f8:	d90a      	bls.n	8000210 <__udivmoddi4+0x94>
 80001fa:	eb1c 0303 	adds.w	r3, ip, r3
 80001fe:	f100 31ff 	add.w	r1, r0, #4294967295
 8000202:	f080 80fa 	bcs.w	80003fa <__udivmoddi4+0x27e>
 8000206:	429e      	cmp	r6, r3
 8000208:	f240 80f7 	bls.w	80003fa <__udivmoddi4+0x27e>
 800020c:	4463      	add	r3, ip
 800020e:	3802      	subs	r0, #2
 8000210:	2100      	movs	r1, #0
 8000212:	1b9b      	subs	r3, r3, r6
 8000214:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000218:	b11d      	cbz	r5, 8000222 <__udivmoddi4+0xa6>
 800021a:	40d3      	lsrs	r3, r2
 800021c:	2200      	movs	r2, #0
 800021e:	e9c5 3200 	strd	r3, r2, [r5]
 8000222:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000226:	428b      	cmp	r3, r1
 8000228:	d905      	bls.n	8000236 <__udivmoddi4+0xba>
 800022a:	b10d      	cbz	r5, 8000230 <__udivmoddi4+0xb4>
 800022c:	e9c5 0100 	strd	r0, r1, [r5]
 8000230:	2100      	movs	r1, #0
 8000232:	4608      	mov	r0, r1
 8000234:	e7f5      	b.n	8000222 <__udivmoddi4+0xa6>
 8000236:	fab3 f183 	clz	r1, r3
 800023a:	2900      	cmp	r1, #0
 800023c:	d146      	bne.n	80002cc <__udivmoddi4+0x150>
 800023e:	42a3      	cmp	r3, r4
 8000240:	d302      	bcc.n	8000248 <__udivmoddi4+0xcc>
 8000242:	4290      	cmp	r0, r2
 8000244:	f0c0 80ee 	bcc.w	8000424 <__udivmoddi4+0x2a8>
 8000248:	1a86      	subs	r6, r0, r2
 800024a:	eb64 0303 	sbc.w	r3, r4, r3
 800024e:	2001      	movs	r0, #1
 8000250:	2d00      	cmp	r5, #0
 8000252:	d0e6      	beq.n	8000222 <__udivmoddi4+0xa6>
 8000254:	e9c5 6300 	strd	r6, r3, [r5]
 8000258:	e7e3      	b.n	8000222 <__udivmoddi4+0xa6>
 800025a:	2a00      	cmp	r2, #0
 800025c:	f040 808f 	bne.w	800037e <__udivmoddi4+0x202>
 8000260:	eba1 040c 	sub.w	r4, r1, ip
 8000264:	2101      	movs	r1, #1
 8000266:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800026a:	fa1f f78c 	uxth.w	r7, ip
 800026e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000272:	fb08 4416 	mls	r4, r8, r6, r4
 8000276:	fb07 f006 	mul.w	r0, r7, r6
 800027a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800027e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000282:	4298      	cmp	r0, r3
 8000284:	d908      	bls.n	8000298 <__udivmoddi4+0x11c>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f106 34ff 	add.w	r4, r6, #4294967295
 800028e:	d202      	bcs.n	8000296 <__udivmoddi4+0x11a>
 8000290:	4298      	cmp	r0, r3
 8000292:	f200 80cb 	bhi.w	800042c <__udivmoddi4+0x2b0>
 8000296:	4626      	mov	r6, r4
 8000298:	1a1c      	subs	r4, r3, r0
 800029a:	fbb4 f0f8 	udiv	r0, r4, r8
 800029e:	fb08 4410 	mls	r4, r8, r0, r4
 80002a2:	fb00 f707 	mul.w	r7, r0, r7
 80002a6:	fa1f f38e 	uxth.w	r3, lr
 80002aa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002ae:	429f      	cmp	r7, r3
 80002b0:	d908      	bls.n	80002c4 <__udivmoddi4+0x148>
 80002b2:	eb1c 0303 	adds.w	r3, ip, r3
 80002b6:	f100 34ff 	add.w	r4, r0, #4294967295
 80002ba:	d202      	bcs.n	80002c2 <__udivmoddi4+0x146>
 80002bc:	429f      	cmp	r7, r3
 80002be:	f200 80ae 	bhi.w	800041e <__udivmoddi4+0x2a2>
 80002c2:	4620      	mov	r0, r4
 80002c4:	1bdb      	subs	r3, r3, r7
 80002c6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ca:	e7a5      	b.n	8000218 <__udivmoddi4+0x9c>
 80002cc:	f1c1 0720 	rsb	r7, r1, #32
 80002d0:	408b      	lsls	r3, r1
 80002d2:	fa22 fc07 	lsr.w	ip, r2, r7
 80002d6:	ea4c 0c03 	orr.w	ip, ip, r3
 80002da:	fa24 f607 	lsr.w	r6, r4, r7
 80002de:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80002e2:	fbb6 f8f9 	udiv	r8, r6, r9
 80002e6:	fa1f fe8c 	uxth.w	lr, ip
 80002ea:	fb09 6618 	mls	r6, r9, r8, r6
 80002ee:	fa20 f307 	lsr.w	r3, r0, r7
 80002f2:	408c      	lsls	r4, r1
 80002f4:	fa00 fa01 	lsl.w	sl, r0, r1
 80002f8:	fb08 f00e 	mul.w	r0, r8, lr
 80002fc:	431c      	orrs	r4, r3
 80002fe:	0c23      	lsrs	r3, r4, #16
 8000300:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000304:	4298      	cmp	r0, r3
 8000306:	fa02 f201 	lsl.w	r2, r2, r1
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x1a6>
 800030c:	eb1c 0303 	adds.w	r3, ip, r3
 8000310:	f108 36ff 	add.w	r6, r8, #4294967295
 8000314:	f080 8081 	bcs.w	800041a <__udivmoddi4+0x29e>
 8000318:	4298      	cmp	r0, r3
 800031a:	d97e      	bls.n	800041a <__udivmoddi4+0x29e>
 800031c:	f1a8 0802 	sub.w	r8, r8, #2
 8000320:	4463      	add	r3, ip
 8000322:	1a1e      	subs	r6, r3, r0
 8000324:	fbb6 f3f9 	udiv	r3, r6, r9
 8000328:	fb09 6613 	mls	r6, r9, r3, r6
 800032c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000330:	b2a4      	uxth	r4, r4
 8000332:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 8000336:	45a6      	cmp	lr, r4
 8000338:	d908      	bls.n	800034c <__udivmoddi4+0x1d0>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f103 30ff 	add.w	r0, r3, #4294967295
 8000342:	d266      	bcs.n	8000412 <__udivmoddi4+0x296>
 8000344:	45a6      	cmp	lr, r4
 8000346:	d964      	bls.n	8000412 <__udivmoddi4+0x296>
 8000348:	3b02      	subs	r3, #2
 800034a:	4464      	add	r4, ip
 800034c:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8000350:	fba0 8302 	umull	r8, r3, r0, r2
 8000354:	eba4 040e 	sub.w	r4, r4, lr
 8000358:	429c      	cmp	r4, r3
 800035a:	46c6      	mov	lr, r8
 800035c:	461e      	mov	r6, r3
 800035e:	d350      	bcc.n	8000402 <__udivmoddi4+0x286>
 8000360:	d04d      	beq.n	80003fe <__udivmoddi4+0x282>
 8000362:	b155      	cbz	r5, 800037a <__udivmoddi4+0x1fe>
 8000364:	ebba 030e 	subs.w	r3, sl, lr
 8000368:	eb64 0406 	sbc.w	r4, r4, r6
 800036c:	fa04 f707 	lsl.w	r7, r4, r7
 8000370:	40cb      	lsrs	r3, r1
 8000372:	431f      	orrs	r7, r3
 8000374:	40cc      	lsrs	r4, r1
 8000376:	e9c5 7400 	strd	r7, r4, [r5]
 800037a:	2100      	movs	r1, #0
 800037c:	e751      	b.n	8000222 <__udivmoddi4+0xa6>
 800037e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000382:	f1c2 0320 	rsb	r3, r2, #32
 8000386:	40d9      	lsrs	r1, r3
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa20 f303 	lsr.w	r3, r0, r3
 8000390:	fa00 fe02 	lsl.w	lr, r0, r2
 8000394:	fbb1 f0f8 	udiv	r0, r1, r8
 8000398:	fb08 1110 	mls	r1, r8, r0, r1
 800039c:	4094      	lsls	r4, r2
 800039e:	431c      	orrs	r4, r3
 80003a0:	fa1f f78c 	uxth.w	r7, ip
 80003a4:	0c23      	lsrs	r3, r4, #16
 80003a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003aa:	fb00 f107 	mul.w	r1, r0, r7
 80003ae:	4299      	cmp	r1, r3
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x248>
 80003b2:	eb1c 0303 	adds.w	r3, ip, r3
 80003b6:	f100 36ff 	add.w	r6, r0, #4294967295
 80003ba:	d22c      	bcs.n	8000416 <__udivmoddi4+0x29a>
 80003bc:	4299      	cmp	r1, r3
 80003be:	d92a      	bls.n	8000416 <__udivmoddi4+0x29a>
 80003c0:	3802      	subs	r0, #2
 80003c2:	4463      	add	r3, ip
 80003c4:	1a5b      	subs	r3, r3, r1
 80003c6:	fbb3 f1f8 	udiv	r1, r3, r8
 80003ca:	fb08 3311 	mls	r3, r8, r1, r3
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003d4:	fb01 f307 	mul.w	r3, r1, r7
 80003d8:	42a3      	cmp	r3, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x272>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f101 36ff 	add.w	r6, r1, #4294967295
 80003e4:	d213      	bcs.n	800040e <__udivmoddi4+0x292>
 80003e6:	42a3      	cmp	r3, r4
 80003e8:	d911      	bls.n	800040e <__udivmoddi4+0x292>
 80003ea:	3902      	subs	r1, #2
 80003ec:	4464      	add	r4, ip
 80003ee:	1ae4      	subs	r4, r4, r3
 80003f0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80003f4:	e73b      	b.n	800026e <__udivmoddi4+0xf2>
 80003f6:	4604      	mov	r4, r0
 80003f8:	e6f2      	b.n	80001e0 <__udivmoddi4+0x64>
 80003fa:	4608      	mov	r0, r1
 80003fc:	e708      	b.n	8000210 <__udivmoddi4+0x94>
 80003fe:	45c2      	cmp	sl, r8
 8000400:	d2af      	bcs.n	8000362 <__udivmoddi4+0x1e6>
 8000402:	ebb8 0e02 	subs.w	lr, r8, r2
 8000406:	eb63 060c 	sbc.w	r6, r3, ip
 800040a:	3801      	subs	r0, #1
 800040c:	e7a9      	b.n	8000362 <__udivmoddi4+0x1e6>
 800040e:	4631      	mov	r1, r6
 8000410:	e7ed      	b.n	80003ee <__udivmoddi4+0x272>
 8000412:	4603      	mov	r3, r0
 8000414:	e79a      	b.n	800034c <__udivmoddi4+0x1d0>
 8000416:	4630      	mov	r0, r6
 8000418:	e7d4      	b.n	80003c4 <__udivmoddi4+0x248>
 800041a:	46b0      	mov	r8, r6
 800041c:	e781      	b.n	8000322 <__udivmoddi4+0x1a6>
 800041e:	4463      	add	r3, ip
 8000420:	3802      	subs	r0, #2
 8000422:	e74f      	b.n	80002c4 <__udivmoddi4+0x148>
 8000424:	4606      	mov	r6, r0
 8000426:	4623      	mov	r3, r4
 8000428:	4608      	mov	r0, r1
 800042a:	e711      	b.n	8000250 <__udivmoddi4+0xd4>
 800042c:	3e02      	subs	r6, #2
 800042e:	4463      	add	r3, ip
 8000430:	e732      	b.n	8000298 <__udivmoddi4+0x11c>
 8000432:	bf00      	nop

08000434 <__aeabi_idiv0>:
 8000434:	4770      	bx	lr
 8000436:	bf00      	nop

08000438 <Tx_mode>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void Tx_mode(uint8_t Adress[5]){
 8000438:	b580      	push	{r7, lr}
 800043a:	b084      	sub	sp, #16
 800043c:	af02      	add	r7, sp, #8
 800043e:	6078      	str	r0, [r7, #4]

	if(NRF_Init(&hspi1, GPIOA, GPIO_PIN_3, GPIOA, GPIO_PIN_4) != NRF_OK){
 8000440:	2310      	movs	r3, #16
 8000442:	9300      	str	r3, [sp, #0]
 8000444:	4b0d      	ldr	r3, [pc, #52]	@ (800047c <Tx_mode+0x44>)
 8000446:	2208      	movs	r2, #8
 8000448:	490c      	ldr	r1, [pc, #48]	@ (800047c <Tx_mode+0x44>)
 800044a:	480d      	ldr	r0, [pc, #52]	@ (8000480 <Tx_mode+0x48>)
 800044c:	f000 fcac 	bl	8000da8 <NRF_Init>
 8000450:	4603      	mov	r3, r0
 8000452:	2b00      	cmp	r3, #0
 8000454:	d001      	beq.n	800045a <Tx_mode+0x22>
		Error_Handler();
 8000456:	f000 fa4b 	bl	80008f0 <Error_Handler>
	}

	NRF_Reset();
 800045a:	f000 fce1 	bl	8000e20 <NRF_Reset>
	NRF_WriteRegister(NRF_REG_TX_ADDR,Adress,5);
 800045e:	2205      	movs	r2, #5
 8000460:	6879      	ldr	r1, [r7, #4]
 8000462:	2010      	movs	r0, #16
 8000464:	f000 fb4e 	bl	8000b04 <NRF_WriteRegister>
	//Para enviar a mensagem usar função transmitandwait
	NRF_WriteRegister(NRF_REG_RX_ADDR_P0, Adress, 5);
 8000468:	2205      	movs	r2, #5
 800046a:	6879      	ldr	r1, [r7, #4]
 800046c:	200a      	movs	r0, #10
 800046e:	f000 fb49 	bl	8000b04 <NRF_WriteRegister>
}
 8000472:	bf00      	nop
 8000474:	3708      	adds	r7, #8
 8000476:	46bd      	mov	sp, r7
 8000478:	bd80      	pop	{r7, pc}
 800047a:	bf00      	nop
 800047c:	40010800 	.word	0x40010800
 8000480:	20000208 	.word	0x20000208

08000484 <changeChannel>:

void changeChannel(uint8_t n){
 8000484:	b580      	push	{r7, lr}
 8000486:	b082      	sub	sp, #8
 8000488:	af00      	add	r7, sp, #0
 800048a:	4603      	mov	r3, r0
 800048c:	71fb      	strb	r3, [r7, #7]
	NRF_EnterMode(NRF_MODE_STANDBY1);
 800048e:	2001      	movs	r0, #1
 8000490:	f000 fc14 	bl	8000cbc <NRF_EnterMode>
	if(n==0){
 8000494:	79fb      	ldrb	r3, [r7, #7]
 8000496:	2b00      	cmp	r3, #0
 8000498:	d103      	bne.n	80004a2 <changeChannel+0x1e>
		NRF_WriteRegisterByte(NRF_REG_RF_CH,0x02); //Canal 3
 800049a:	2102      	movs	r1, #2
 800049c:	2005      	movs	r0, #5
 800049e:	f000 fb47 	bl	8000b30 <NRF_WriteRegisterByte>
	}
	if(n==1){
 80004a2:	79fb      	ldrb	r3, [r7, #7]
 80004a4:	2b01      	cmp	r3, #1
 80004a6:	d103      	bne.n	80004b0 <changeChannel+0x2c>
		NRF_WriteRegisterByte(NRF_REG_RF_CH,0x03); //Canal 4
 80004a8:	2103      	movs	r1, #3
 80004aa:	2005      	movs	r0, #5
 80004ac:	f000 fb40 	bl	8000b30 <NRF_WriteRegisterByte>
	}
	if(n==2){
 80004b0:	79fb      	ldrb	r3, [r7, #7]
 80004b2:	2b02      	cmp	r3, #2
 80004b4:	d103      	bne.n	80004be <changeChannel+0x3a>
		NRF_WriteRegisterByte(NRF_REG_RF_CH,0x04); //Canal 5
 80004b6:	2104      	movs	r1, #4
 80004b8:	2005      	movs	r0, #5
 80004ba:	f000 fb39 	bl	8000b30 <NRF_WriteRegisterByte>
	}
	NRF_EnterMode(NRF_MODE_TX);
 80004be:	2003      	movs	r0, #3
 80004c0:	f000 fbfc 	bl	8000cbc <NRF_EnterMode>
}
 80004c4:	bf00      	nop
 80004c6:	3708      	adds	r7, #8
 80004c8:	46bd      	mov	sp, r7
 80004ca:	bd80      	pop	{r7, pc}

080004cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004ce:	b0c3      	sub	sp, #268	@ 0x10c
 80004d0:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d2:	f000 fe9d 	bl	8001210 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d6:	f000 f919 	bl	800070c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004da:	f000 f9a9 	bl	8000830 <MX_GPIO_Init>
  MX_SPI1_Init();
 80004de:	f000 f971 	bl	80007c4 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 80004e2:	f008 f869 	bl	80085b8 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  Tx_mode(TxAdress0);
 80004e6:	4883      	ldr	r0, [pc, #524]	@ (80006f4 <main+0x228>)
 80004e8:	f7ff ffa6 	bl	8000438 <Tx_mode>

  NRF_Status ret = NRF_OK;
 80004ec:	2300      	movs	r3, #0
 80004ee:	f887 30e5 	strb.w	r3, [r7, #229]	@ 0xe5
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int Valores[12] = {0,0,0,0,0,0,0,0,0,0,0,0};
 80004f2:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80004f6:	2230      	movs	r2, #48	@ 0x30
 80004f8:	2100      	movs	r1, #0
 80004fa:	4618      	mov	r0, r3
 80004fc:	f008 fd18 	bl	8008f30 <memset>
  int Returns[9]={0,0,0,0,0,0,0,0,0};
 8000500:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8000504:	2224      	movs	r2, #36	@ 0x24
 8000506:	2100      	movs	r1, #0
 8000508:	4618      	mov	r0, r3
 800050a:	f008 fd11 	bl	8008f30 <memset>
  uint32_t acumulador[3] = {1,1,1};
 800050e:	4a7a      	ldr	r2, [pc, #488]	@ (80006f8 <main+0x22c>)
 8000510:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8000514:	ca07      	ldmia	r2, {r0, r1, r2}
 8000516:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  char message[100] = {'\0'};
 800051a:	2300      	movs	r3, #0
 800051c:	613b      	str	r3, [r7, #16]
 800051e:	f107 0314 	add.w	r3, r7, #20
 8000522:	2260      	movs	r2, #96	@ 0x60
 8000524:	2100      	movs	r1, #0
 8000526:	4618      	mov	r0, r3
 8000528:	f008 fd02 	bl	8008f30 <memset>

  while (1)
  {
	 	 	//Loop entre Robos
	 	 	 for(uint8_t i=0; i<3;i++){
 800052c:	2300      	movs	r3, #0
 800052e:	f887 30e7 	strb.w	r3, [r7, #231]	@ 0xe7
 8000532:	e09f      	b.n	8000674 <main+0x1a8>
	 	 		 changeChannel(i); //Troca o canal para o  do robo especifico
 8000534:	f897 30e7 	ldrb.w	r3, [r7, #231]	@ 0xe7
 8000538:	4618      	mov	r0, r3
 800053a:	f7ff ffa3 	bl	8000484 <changeChannel>
	 	 		 //Salva a variável para envio em seu respectivo vetor
	 	 		 for(uint8_t n=0; n<4;n++){
 800053e:	2300      	movs	r3, #0
 8000540:	f887 30e6 	strb.w	r3, [r7, #230]	@ 0xe6
 8000544:	e017      	b.n	8000576 <main+0xaa>
	 	 			 TxData[n+1] = Valores[n+4*i];
 8000546:	f897 20e6 	ldrb.w	r2, [r7, #230]	@ 0xe6
 800054a:	f897 30e7 	ldrb.w	r3, [r7, #231]	@ 0xe7
 800054e:	009b      	lsls	r3, r3, #2
 8000550:	4413      	add	r3, r2
 8000552:	f897 20e6 	ldrb.w	r2, [r7, #230]	@ 0xe6
 8000556:	3201      	adds	r2, #1
 8000558:	009b      	lsls	r3, r3, #2
 800055a:	33d8      	adds	r3, #216	@ 0xd8
 800055c:	f107 0110 	add.w	r1, r7, #16
 8000560:	440b      	add	r3, r1
 8000562:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8000566:	4965      	ldr	r1, [pc, #404]	@ (80006fc <main+0x230>)
 8000568:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
	 	 		 for(uint8_t n=0; n<4;n++){
 800056c:	f897 30e6 	ldrb.w	r3, [r7, #230]	@ 0xe6
 8000570:	3301      	adds	r3, #1
 8000572:	f887 30e6 	strb.w	r3, [r7, #230]	@ 0xe6
 8000576:	f897 30e6 	ldrb.w	r3, [r7, #230]	@ 0xe6
 800057a:	2b03      	cmp	r3, #3
 800057c:	d9e3      	bls.n	8000546 <main+0x7a>
	 	 		 }

	 	 		 /*  				Retorno	 para software			*/
	 	 		 uint32_t Start = HAL_GetTick(); //Tempo de início de transmissão
 800057e:	f000 fe9f 	bl	80012c0 <HAL_GetTick>
 8000582:	f8c7 00e0 	str.w	r0, [r7, #224]	@ 0xe0
	 	 		 ret = NRF_TransmitAndWait(TxData, sizeof(TxData)); //Transmissão da mensagem
 8000586:	2118      	movs	r1, #24
 8000588:	485c      	ldr	r0, [pc, #368]	@ (80006fc <main+0x230>)
 800058a:	f000 fcf4 	bl	8000f76 <NRF_TransmitAndWait>
 800058e:	4603      	mov	r3, r0
 8000590:	f887 30e5 	strb.w	r3, [r7, #229]	@ 0xe5
	 	 		 uint32_t End = HAL_GetTick(); //Tempo de fim de transmissão
 8000594:	f000 fe94 	bl	80012c0 <HAL_GetTick>
 8000598:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
	 	 		 acumulador[i]+= End - Start; //Acumulador de tempo de latência
 800059c:	f897 30e7 	ldrb.w	r3, [r7, #231]	@ 0xe7
 80005a0:	009b      	lsls	r3, r3, #2
 80005a2:	33d8      	adds	r3, #216	@ 0xd8
 80005a4:	f107 0210 	add.w	r2, r7, #16
 80005a8:	4413      	add	r3, r2
 80005aa:	f853 1c74 	ldr.w	r1, [r3, #-116]
 80005ae:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80005b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80005b6:	1ad2      	subs	r2, r2, r3
 80005b8:	f897 30e7 	ldrb.w	r3, [r7, #231]	@ 0xe7
 80005bc:	440a      	add	r2, r1
 80005be:	009b      	lsls	r3, r3, #2
 80005c0:	33d8      	adds	r3, #216	@ 0xd8
 80005c2:	f107 0110 	add.w	r1, r7, #16
 80005c6:	440b      	add	r3, r1
 80005c8:	f843 2c74 	str.w	r2, [r3, #-116]
	 	 		 uint8_t ploss = NRF_ReadPacketLoss();//Leitura da perda de pacotes
 80005cc:	f000 fad9 	bl	8000b82 <NRF_ReadPacketLoss>
 80005d0:	4603      	mov	r3, r0
 80005d2:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
	 	 		 Returns[i+3] = acumulador[i];
 80005d6:	f897 30e7 	ldrb.w	r3, [r7, #231]	@ 0xe7
 80005da:	009b      	lsls	r3, r3, #2
 80005dc:	33d8      	adds	r3, #216	@ 0xd8
 80005de:	f107 0210 	add.w	r2, r7, #16
 80005e2:	4413      	add	r3, r2
 80005e4:	f853 2c74 	ldr.w	r2, [r3, #-116]
 80005e8:	f897 30e7 	ldrb.w	r3, [r7, #231]	@ 0xe7
 80005ec:	3303      	adds	r3, #3
 80005ee:	009b      	lsls	r3, r3, #2
 80005f0:	33d8      	adds	r3, #216	@ 0xd8
 80005f2:	f107 0110 	add.w	r1, r7, #16
 80005f6:	440b      	add	r3, r1
 80005f8:	f843 2c68 	str.w	r2, [r3, #-104]
	 	 		 if(ret == NRF_OK){
 80005fc:	f897 30e5 	ldrb.w	r3, [r7, #229]	@ 0xe5
 8000600:	2b00      	cmp	r3, #0
 8000602:	d129      	bne.n	8000658 <main+0x18c>
	 	 			 //Pino de confirmação
	 	 			 HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8000604:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000608:	483d      	ldr	r0, [pc, #244]	@ (8000700 <main+0x234>)
 800060a:	f001 f931 	bl	8001870 <HAL_GPIO_TogglePin>
	 	 			 int retorno = 0;
 800060e:	2300      	movs	r3, #0
 8000610:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
	 	 			 Returns[i] = retorno;
 8000614:	f897 30e7 	ldrb.w	r3, [r7, #231]	@ 0xe7
 8000618:	009b      	lsls	r3, r3, #2
 800061a:	33d8      	adds	r3, #216	@ 0xd8
 800061c:	f107 0210 	add.w	r2, r7, #16
 8000620:	4413      	add	r3, r2
 8000622:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8000626:	f843 2c68 	str.w	r2, [r3, #-104]
	 	 			 Returns[i+6] = ploss;
 800062a:	f897 30e7 	ldrb.w	r3, [r7, #231]	@ 0xe7
 800062e:	3306      	adds	r3, #6
 8000630:	f897 20db 	ldrb.w	r2, [r7, #219]	@ 0xdb
 8000634:	009b      	lsls	r3, r3, #2
 8000636:	33d8      	adds	r3, #216	@ 0xd8
 8000638:	f107 0110 	add.w	r1, r7, #16
 800063c:	440b      	add	r3, r1
 800063e:	f843 2c68 	str.w	r2, [r3, #-104]
	 	 			 acumulador[i] = 0;
 8000642:	f897 30e7 	ldrb.w	r3, [r7, #231]	@ 0xe7
 8000646:	009b      	lsls	r3, r3, #2
 8000648:	33d8      	adds	r3, #216	@ 0xd8
 800064a:	f107 0210 	add.w	r2, r7, #16
 800064e:	4413      	add	r3, r2
 8000650:	2200      	movs	r2, #0
 8000652:	f843 2c74 	str.w	r2, [r3, #-116]
 8000656:	e008      	b.n	800066a <main+0x19e>
	 	 		 } else if(ret == NRF_MAX_RT) {
 8000658:	f897 30e5 	ldrb.w	r3, [r7, #229]	@ 0xe5
 800065c:	2b05      	cmp	r3, #5
 800065e:	d104      	bne.n	800066a <main+0x19e>
	 	 			 HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000660:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000664:	4827      	ldr	r0, [pc, #156]	@ (8000704 <main+0x238>)
 8000666:	f001 f903 	bl	8001870 <HAL_GPIO_TogglePin>
	 	 	 for(uint8_t i=0; i<3;i++){
 800066a:	f897 30e7 	ldrb.w	r3, [r7, #231]	@ 0xe7
 800066e:	3301      	adds	r3, #1
 8000670:	f887 30e7 	strb.w	r3, [r7, #231]	@ 0xe7
 8000674:	f897 30e7 	ldrb.w	r3, [r7, #231]	@ 0xe7
 8000678:	2b02      	cmp	r3, #2
 800067a:	f67f af5b 	bls.w	8000534 <main+0x68>
	 	 		 } else {
	 	 			 //HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
	 	 		 }
	 	 	 }

	 	 	CDC_Receive_FS(Valores,sizeof(Valores));
 800067e:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000682:	2130      	movs	r1, #48	@ 0x30
 8000684:	4618      	mov	r0, r3
 8000686:	f008 f841 	bl	800870c <CDC_Receive_FS>
	 	 	sprintf(message, "oi %d %d %d %d %d %d %d %d %d\n",Valores[0],Returns[1],Returns[2],Returns[3],Returns[4],Returns[5],Returns[6],Returns[7],Returns[8],Returns[9]);
 800068a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800068e:	60fb      	str	r3, [r7, #12]
 8000690:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 8000694:	60b9      	str	r1, [r7, #8]
 8000696:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800069a:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 800069e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80006a2:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 80006a6:	f8d7 4098 	ldr.w	r4, [r7, #152]	@ 0x98
 80006aa:	f8d7 509c 	ldr.w	r5, [r7, #156]	@ 0x9c
 80006ae:	f8d7 60a0 	ldr.w	r6, [r7, #160]	@ 0xa0
 80006b2:	f8d7 c0a4 	ldr.w	ip, [r7, #164]	@ 0xa4
 80006b6:	f8c7 c004 	str.w	ip, [r7, #4]
 80006ba:	f107 0c10 	add.w	ip, r7, #16
 80006be:	f8d7 e004 	ldr.w	lr, [r7, #4]
 80006c2:	f8cd e01c 	str.w	lr, [sp, #28]
 80006c6:	9606      	str	r6, [sp, #24]
 80006c8:	9505      	str	r5, [sp, #20]
 80006ca:	9404      	str	r4, [sp, #16]
 80006cc:	9003      	str	r0, [sp, #12]
 80006ce:	9102      	str	r1, [sp, #8]
 80006d0:	9201      	str	r2, [sp, #4]
 80006d2:	9300      	str	r3, [sp, #0]
 80006d4:	68bb      	ldr	r3, [r7, #8]
 80006d6:	68fa      	ldr	r2, [r7, #12]
 80006d8:	490b      	ldr	r1, [pc, #44]	@ (8000708 <main+0x23c>)
 80006da:	4660      	mov	r0, ip
 80006dc:	f008 fc08 	bl	8008ef0 <siprintf>
	 	 	CDC_Transmit_FS(message,sizeof(message));
 80006e0:	f107 0310 	add.w	r3, r7, #16
 80006e4:	2164      	movs	r1, #100	@ 0x64
 80006e6:	4618      	mov	r0, r3
 80006e8:	f008 f824 	bl	8008734 <CDC_Transmit_FS>

	 	 	HAL_Delay(1);
 80006ec:	2001      	movs	r0, #1
 80006ee:	f000 fdf1 	bl	80012d4 <HAL_Delay>
	 	 	 for(uint8_t i=0; i<3;i++){
 80006f2:	e71b      	b.n	800052c <main+0x60>
 80006f4:	20000000 	.word	0x20000000
 80006f8:	08009888 	.word	0x08009888
 80006fc:	20000008 	.word	0x20000008
 8000700:	40010c00 	.word	0x40010c00
 8000704:	40011000 	.word	0x40011000
 8000708:	08009868 	.word	0x08009868

0800070c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b094      	sub	sp, #80	@ 0x50
 8000710:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000712:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000716:	2228      	movs	r2, #40	@ 0x28
 8000718:	2100      	movs	r1, #0
 800071a:	4618      	mov	r0, r3
 800071c:	f008 fc08 	bl	8008f30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000720:	f107 0314 	add.w	r3, r7, #20
 8000724:	2200      	movs	r2, #0
 8000726:	601a      	str	r2, [r3, #0]
 8000728:	605a      	str	r2, [r3, #4]
 800072a:	609a      	str	r2, [r3, #8]
 800072c:	60da      	str	r2, [r3, #12]
 800072e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000730:	1d3b      	adds	r3, r7, #4
 8000732:	2200      	movs	r2, #0
 8000734:	601a      	str	r2, [r3, #0]
 8000736:	605a      	str	r2, [r3, #4]
 8000738:	609a      	str	r2, [r3, #8]
 800073a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800073c:	2301      	movs	r3, #1
 800073e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000740:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000744:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000746:	2300      	movs	r3, #0
 8000748:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800074a:	2301      	movs	r3, #1
 800074c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800074e:	2302      	movs	r3, #2
 8000750:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000752:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000756:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000758:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800075c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800075e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000762:	4618      	mov	r0, r3
 8000764:	f002 fdfe 	bl	8003364 <HAL_RCC_OscConfig>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800076e:	f000 f8bf 	bl	80008f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000772:	230f      	movs	r3, #15
 8000774:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000776:	2302      	movs	r3, #2
 8000778:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800077a:	2300      	movs	r3, #0
 800077c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800077e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000782:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000784:	2300      	movs	r3, #0
 8000786:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000788:	f107 0314 	add.w	r3, r7, #20
 800078c:	2101      	movs	r1, #1
 800078e:	4618      	mov	r0, r3
 8000790:	f003 f86a 	bl	8003868 <HAL_RCC_ClockConfig>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800079a:	f000 f8a9 	bl	80008f0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800079e:	2310      	movs	r3, #16
 80007a0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80007a2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80007a6:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007a8:	1d3b      	adds	r3, r7, #4
 80007aa:	4618      	mov	r0, r3
 80007ac:	f003 f9b8 	bl	8003b20 <HAL_RCCEx_PeriphCLKConfig>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <SystemClock_Config+0xae>
  {
    Error_Handler();
 80007b6:	f000 f89b 	bl	80008f0 <Error_Handler>
  }
}
 80007ba:	bf00      	nop
 80007bc:	3750      	adds	r7, #80	@ 0x50
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
	...

080007c4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80007c8:	4b17      	ldr	r3, [pc, #92]	@ (8000828 <MX_SPI1_Init+0x64>)
 80007ca:	4a18      	ldr	r2, [pc, #96]	@ (800082c <MX_SPI1_Init+0x68>)
 80007cc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007ce:	4b16      	ldr	r3, [pc, #88]	@ (8000828 <MX_SPI1_Init+0x64>)
 80007d0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80007d4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007d6:	4b14      	ldr	r3, [pc, #80]	@ (8000828 <MX_SPI1_Init+0x64>)
 80007d8:	2200      	movs	r2, #0
 80007da:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80007dc:	4b12      	ldr	r3, [pc, #72]	@ (8000828 <MX_SPI1_Init+0x64>)
 80007de:	2200      	movs	r2, #0
 80007e0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007e2:	4b11      	ldr	r3, [pc, #68]	@ (8000828 <MX_SPI1_Init+0x64>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007e8:	4b0f      	ldr	r3, [pc, #60]	@ (8000828 <MX_SPI1_Init+0x64>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80007ee:	4b0e      	ldr	r3, [pc, #56]	@ (8000828 <MX_SPI1_Init+0x64>)
 80007f0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80007f4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80007f6:	4b0c      	ldr	r3, [pc, #48]	@ (8000828 <MX_SPI1_Init+0x64>)
 80007f8:	2218      	movs	r2, #24
 80007fa:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007fc:	4b0a      	ldr	r3, [pc, #40]	@ (8000828 <MX_SPI1_Init+0x64>)
 80007fe:	2200      	movs	r2, #0
 8000800:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000802:	4b09      	ldr	r3, [pc, #36]	@ (8000828 <MX_SPI1_Init+0x64>)
 8000804:	2200      	movs	r2, #0
 8000806:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000808:	4b07      	ldr	r3, [pc, #28]	@ (8000828 <MX_SPI1_Init+0x64>)
 800080a:	2200      	movs	r2, #0
 800080c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800080e:	4b06      	ldr	r3, [pc, #24]	@ (8000828 <MX_SPI1_Init+0x64>)
 8000810:	220a      	movs	r2, #10
 8000812:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000814:	4804      	ldr	r0, [pc, #16]	@ (8000828 <MX_SPI1_Init+0x64>)
 8000816:	f003 fa39 	bl	8003c8c <HAL_SPI_Init>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d001      	beq.n	8000824 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000820:	f000 f866 	bl	80008f0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000824:	bf00      	nop
 8000826:	bd80      	pop	{r7, pc}
 8000828:	20000208 	.word	0x20000208
 800082c:	40013000 	.word	0x40013000

08000830 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b088      	sub	sp, #32
 8000834:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000836:	f107 0310 	add.w	r3, r7, #16
 800083a:	2200      	movs	r2, #0
 800083c:	601a      	str	r2, [r3, #0]
 800083e:	605a      	str	r2, [r3, #4]
 8000840:	609a      	str	r2, [r3, #8]
 8000842:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000844:	4b27      	ldr	r3, [pc, #156]	@ (80008e4 <MX_GPIO_Init+0xb4>)
 8000846:	699b      	ldr	r3, [r3, #24]
 8000848:	4a26      	ldr	r2, [pc, #152]	@ (80008e4 <MX_GPIO_Init+0xb4>)
 800084a:	f043 0310 	orr.w	r3, r3, #16
 800084e:	6193      	str	r3, [r2, #24]
 8000850:	4b24      	ldr	r3, [pc, #144]	@ (80008e4 <MX_GPIO_Init+0xb4>)
 8000852:	699b      	ldr	r3, [r3, #24]
 8000854:	f003 0310 	and.w	r3, r3, #16
 8000858:	60fb      	str	r3, [r7, #12]
 800085a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800085c:	4b21      	ldr	r3, [pc, #132]	@ (80008e4 <MX_GPIO_Init+0xb4>)
 800085e:	699b      	ldr	r3, [r3, #24]
 8000860:	4a20      	ldr	r2, [pc, #128]	@ (80008e4 <MX_GPIO_Init+0xb4>)
 8000862:	f043 0320 	orr.w	r3, r3, #32
 8000866:	6193      	str	r3, [r2, #24]
 8000868:	4b1e      	ldr	r3, [pc, #120]	@ (80008e4 <MX_GPIO_Init+0xb4>)
 800086a:	699b      	ldr	r3, [r3, #24]
 800086c:	f003 0320 	and.w	r3, r3, #32
 8000870:	60bb      	str	r3, [r7, #8]
 8000872:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000874:	4b1b      	ldr	r3, [pc, #108]	@ (80008e4 <MX_GPIO_Init+0xb4>)
 8000876:	699b      	ldr	r3, [r3, #24]
 8000878:	4a1a      	ldr	r2, [pc, #104]	@ (80008e4 <MX_GPIO_Init+0xb4>)
 800087a:	f043 0304 	orr.w	r3, r3, #4
 800087e:	6193      	str	r3, [r2, #24]
 8000880:	4b18      	ldr	r3, [pc, #96]	@ (80008e4 <MX_GPIO_Init+0xb4>)
 8000882:	699b      	ldr	r3, [r3, #24]
 8000884:	f003 0304 	and.w	r3, r3, #4
 8000888:	607b      	str	r3, [r7, #4]
 800088a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800088c:	2200      	movs	r2, #0
 800088e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000892:	4815      	ldr	r0, [pc, #84]	@ (80008e8 <MX_GPIO_Init+0xb8>)
 8000894:	f000 ffd4 	bl	8001840 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 8000898:	2200      	movs	r2, #0
 800089a:	2118      	movs	r1, #24
 800089c:	4813      	ldr	r0, [pc, #76]	@ (80008ec <MX_GPIO_Init+0xbc>)
 800089e:	f000 ffcf 	bl	8001840 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80008a2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a8:	2301      	movs	r3, #1
 80008aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ac:	2300      	movs	r3, #0
 80008ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b0:	2302      	movs	r3, #2
 80008b2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008b4:	f107 0310 	add.w	r3, r7, #16
 80008b8:	4619      	mov	r1, r3
 80008ba:	480b      	ldr	r0, [pc, #44]	@ (80008e8 <MX_GPIO_Init+0xb8>)
 80008bc:	f000 fe3c 	bl	8001538 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 80008c0:	2318      	movs	r3, #24
 80008c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008c4:	2301      	movs	r3, #1
 80008c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c8:	2300      	movs	r3, #0
 80008ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008cc:	2302      	movs	r3, #2
 80008ce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008d0:	f107 0310 	add.w	r3, r7, #16
 80008d4:	4619      	mov	r1, r3
 80008d6:	4805      	ldr	r0, [pc, #20]	@ (80008ec <MX_GPIO_Init+0xbc>)
 80008d8:	f000 fe2e 	bl	8001538 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008dc:	bf00      	nop
 80008de:	3720      	adds	r7, #32
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	40021000 	.word	0x40021000
 80008e8:	40011000 	.word	0x40011000
 80008ec:	40010800 	.word	0x40010800

080008f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008f4:	b672      	cpsid	i
}
 80008f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008f8:	bf00      	nop
 80008fa:	e7fd      	b.n	80008f8 <Error_Handler+0x8>

080008fc <csn_set>:
int current_mode = NRF_MODE_POWERDOWN; // Modo atual do NRF

/* Funções de Pinagem do NRF*/

//Pino CS em Alto (Dispositivo não está conversando com o uC)
void csn_set() {
 80008fc:	b580      	push	{r7, lr}
 80008fe:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(NRF_CSN_Port, NRF_CSN_Pin, GPIO_PIN_SET);
 8000900:	4b04      	ldr	r3, [pc, #16]	@ (8000914 <csn_set+0x18>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	4a04      	ldr	r2, [pc, #16]	@ (8000918 <csn_set+0x1c>)
 8000906:	8811      	ldrh	r1, [r2, #0]
 8000908:	2201      	movs	r2, #1
 800090a:	4618      	mov	r0, r3
 800090c:	f000 ff98 	bl	8001840 <HAL_GPIO_WritePin>
}
 8000910:	bf00      	nop
 8000912:	bd80      	pop	{r7, pc}
 8000914:	20000264 	.word	0x20000264
 8000918:	20000268 	.word	0x20000268

0800091c <csn_reset>:

//Pino CS em Baixo (Dispositivo  está conversando com o uC)
void csn_reset() {
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(NRF_CSN_Port, NRF_CSN_Pin, GPIO_PIN_RESET);
 8000920:	4b04      	ldr	r3, [pc, #16]	@ (8000934 <csn_reset+0x18>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	4a04      	ldr	r2, [pc, #16]	@ (8000938 <csn_reset+0x1c>)
 8000926:	8811      	ldrh	r1, [r2, #0]
 8000928:	2200      	movs	r2, #0
 800092a:	4618      	mov	r0, r3
 800092c:	f000 ff88 	bl	8001840 <HAL_GPIO_WritePin>
}
 8000930:	bf00      	nop
 8000932:	bd80      	pop	{r7, pc}
 8000934:	20000264 	.word	0x20000264
 8000938:	20000268 	.word	0x20000268

0800093c <ce_set>:

//Pino CE em Alto (Dispositivo está em funcionamento,Tx ou Rx)
void ce_set() {
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(NRF_CE_Port, NRF_CE_Pin, GPIO_PIN_SET);
 8000940:	4b04      	ldr	r3, [pc, #16]	@ (8000954 <ce_set+0x18>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	4a04      	ldr	r2, [pc, #16]	@ (8000958 <ce_set+0x1c>)
 8000946:	8811      	ldrh	r1, [r2, #0]
 8000948:	2201      	movs	r2, #1
 800094a:	4618      	mov	r0, r3
 800094c:	f000 ff78 	bl	8001840 <HAL_GPIO_WritePin>
}
 8000950:	bf00      	nop
 8000952:	bd80      	pop	{r7, pc}
 8000954:	2000026c 	.word	0x2000026c
 8000958:	20000270 	.word	0x20000270

0800095c <ce_reset>:

//Pino CE em Baixo (Dispositivo está em standby)
void ce_reset() {
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(NRF_CE_Port, NRF_CE_Pin, GPIO_PIN_RESET);
 8000960:	4b04      	ldr	r3, [pc, #16]	@ (8000974 <ce_reset+0x18>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	4a04      	ldr	r2, [pc, #16]	@ (8000978 <ce_reset+0x1c>)
 8000966:	8811      	ldrh	r1, [r2, #0]
 8000968:	2200      	movs	r2, #0
 800096a:	4618      	mov	r0, r3
 800096c:	f000 ff68 	bl	8001840 <HAL_GPIO_WritePin>
}
 8000970:	bf00      	nop
 8000972:	bd80      	pop	{r7, pc}
 8000974:	2000026c 	.word	0x2000026c
 8000978:	20000270 	.word	0x20000270

0800097c <wait>:
uint8_t read_ce() {
  return HAL_GPIO_ReadPin(NRF_CE_Port, NRF_CE_Pin);
}

//Função de "Esperar" em us
void wait(uint64_t us) {
 800097c:	b5b0      	push	{r4, r5, r7, lr}
 800097e:	b084      	sub	sp, #16
 8000980:	af00      	add	r7, sp, #0
 8000982:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t volatile cycles = CPU_Freq * us / 1000000; //Quantos ciclos de CPU deverão ser esperados para alcancar tal tempo
 8000986:	4915      	ldr	r1, [pc, #84]	@ (80009dc <wait+0x60>)
 8000988:	6809      	ldr	r1, [r1, #0]
 800098a:	2000      	movs	r0, #0
 800098c:	460a      	mov	r2, r1
 800098e:	4603      	mov	r3, r0
 8000990:	6839      	ldr	r1, [r7, #0]
 8000992:	fb03 f001 	mul.w	r0, r3, r1
 8000996:	6879      	ldr	r1, [r7, #4]
 8000998:	fb02 f101 	mul.w	r1, r2, r1
 800099c:	4401      	add	r1, r0
 800099e:	6838      	ldr	r0, [r7, #0]
 80009a0:	fba0 4502 	umull	r4, r5, r0, r2
 80009a4:	194b      	adds	r3, r1, r5
 80009a6:	461d      	mov	r5, r3
 80009a8:	4a0d      	ldr	r2, [pc, #52]	@ (80009e0 <wait+0x64>)
 80009aa:	f04f 0300 	mov.w	r3, #0
 80009ae:	4620      	mov	r0, r4
 80009b0:	4629      	mov	r1, r5
 80009b2:	f7ff fbcb 	bl	800014c <__aeabi_uldivmod>
 80009b6:	4602      	mov	r2, r0
 80009b8:	460b      	mov	r3, r1
 80009ba:	4613      	mov	r3, r2
 80009bc:	60fb      	str	r3, [r7, #12]
  uint32_t volatile current = 0; //Quantos se passaram
 80009be:	2300      	movs	r3, #0
 80009c0:	60bb      	str	r3, [r7, #8]
  while (current <= cycles) {
 80009c2:	e002      	b.n	80009ca <wait+0x4e>
    current++;
 80009c4:	68bb      	ldr	r3, [r7, #8]
 80009c6:	3301      	adds	r3, #1
 80009c8:	60bb      	str	r3, [r7, #8]
  while (current <= cycles) {
 80009ca:	68ba      	ldr	r2, [r7, #8]
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	429a      	cmp	r2, r3
 80009d0:	d9f8      	bls.n	80009c4 <wait+0x48>
  }
}
 80009d2:	bf00      	nop
 80009d4:	bf00      	nop
 80009d6:	3710      	adds	r7, #16
 80009d8:	46bd      	mov	sp, r7
 80009da:	bdb0      	pop	{r4, r5, r7, pc}
 80009dc:	20000274 	.word	0x20000274
 80009e0:	000f4240 	.word	0x000f4240

080009e4 <NRF_SendCommand>:

/* Funções Para enviar e receber do NRFL01 em "Baixo" Nível */

//Função para enviar um comando para o NRF
NRF_Status NRF_SendCommand(uint8_t cmd) {
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b086      	sub	sp, #24
 80009e8:	af02      	add	r7, sp, #8
 80009ea:	4603      	mov	r3, r0
 80009ec:	71fb      	strb	r3, [r7, #7]
  NRF_Status ret = NRF_OK;
 80009ee:	2300      	movs	r3, #0
 80009f0:	73fb      	strb	r3, [r7, #15]
  uint8_t status;

  csn_reset(); //Seleciona o dispositivo
 80009f2:	f7ff ff93 	bl	800091c <csn_reset>
  ret = (NRF_Status)HAL_SPI_TransmitReceive(HSPI, &cmd, &status, 1, NRF_SPI_TIMEOUT_DUR); //Envia o comando e retorna o status
 80009f6:	4b0c      	ldr	r3, [pc, #48]	@ (8000a28 <NRF_SendCommand+0x44>)
 80009f8:	6818      	ldr	r0, [r3, #0]
 80009fa:	f107 020e 	add.w	r2, r7, #14
 80009fe:	1df9      	adds	r1, r7, #7
 8000a00:	230a      	movs	r3, #10
 8000a02:	9300      	str	r3, [sp, #0]
 8000a04:	2301      	movs	r3, #1
 8000a06:	f003 fc22 	bl	800424e <HAL_SPI_TransmitReceive>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	73fb      	strb	r3, [r7, #15]
  if (ret != NRF_OK) { //Verifica se o comando foi enviado corretamente
 8000a0e:	7bfb      	ldrb	r3, [r7, #15]
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d001      	beq.n	8000a18 <NRF_SendCommand+0x34>
    return ret;
 8000a14:	7bfb      	ldrb	r3, [r7, #15]
 8000a16:	e002      	b.n	8000a1e <NRF_SendCommand+0x3a>
  }
  csn_set(); //Desseleciona o dispositivo
 8000a18:	f7ff ff70 	bl	80008fc <csn_set>

  return ret;
 8000a1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a1e:	4618      	mov	r0, r3
 8000a20:	3710      	adds	r7, #16
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	20000260 	.word	0x20000260

08000a2c <NRF_SendWriteCommand>:

/* Função para enviar um comando de escrita*/
NRF_Status NRF_SendWriteCommand(uint8_t cmd, uint8_t *write, uint8_t length) {
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b086      	sub	sp, #24
 8000a30:	af02      	add	r7, sp, #8
 8000a32:	4603      	mov	r3, r0
 8000a34:	6039      	str	r1, [r7, #0]
 8000a36:	71fb      	strb	r3, [r7, #7]
 8000a38:	4613      	mov	r3, r2
 8000a3a:	71bb      	strb	r3, [r7, #6]
  NRF_Status ret = NRF_OK;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	73fb      	strb	r3, [r7, #15]
  uint8_t status;

  csn_reset(); //Seleciona o dispositivo
 8000a40:	f7ff ff6c 	bl	800091c <csn_reset>
  ret = (NRF_Status)HAL_SPI_TransmitReceive(HSPI, &cmd, &status, 1, NRF_SPI_TIMEOUT_DUR); //Manda pro NRF o comando de escrita
 8000a44:	4b13      	ldr	r3, [pc, #76]	@ (8000a94 <NRF_SendWriteCommand+0x68>)
 8000a46:	6818      	ldr	r0, [r3, #0]
 8000a48:	f107 020e 	add.w	r2, r7, #14
 8000a4c:	1df9      	adds	r1, r7, #7
 8000a4e:	230a      	movs	r3, #10
 8000a50:	9300      	str	r3, [sp, #0]
 8000a52:	2301      	movs	r3, #1
 8000a54:	f003 fbfb 	bl	800424e <HAL_SPI_TransmitReceive>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	73fb      	strb	r3, [r7, #15]
  if (ret != NRF_OK) { //Verifica se está ok para escrever
 8000a5c:	7bfb      	ldrb	r3, [r7, #15]
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d001      	beq.n	8000a66 <NRF_SendWriteCommand+0x3a>
	//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
    return ret;
 8000a62:	7bfb      	ldrb	r3, [r7, #15]
 8000a64:	e011      	b.n	8000a8a <NRF_SendWriteCommand+0x5e>
  }
  ret = (NRF_Status)HAL_SPI_Transmit(HSPI, write, length, NRF_SPI_TIMEOUT_DUR); //Manda  o que será escrito no registro
 8000a66:	4b0b      	ldr	r3, [pc, #44]	@ (8000a94 <NRF_SendWriteCommand+0x68>)
 8000a68:	6818      	ldr	r0, [r3, #0]
 8000a6a:	79bb      	ldrb	r3, [r7, #6]
 8000a6c:	b29a      	uxth	r2, r3
 8000a6e:	230a      	movs	r3, #10
 8000a70:	6839      	ldr	r1, [r7, #0]
 8000a72:	f003 f98f 	bl	8003d94 <HAL_SPI_Transmit>
 8000a76:	4603      	mov	r3, r0
 8000a78:	73fb      	strb	r3, [r7, #15]
  if (ret != NRF_OK) {//Verifica se o processo foi um sucesso
 8000a7a:	7bfb      	ldrb	r3, [r7, #15]
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <NRF_SendWriteCommand+0x58>
    return ret;
 8000a80:	7bfb      	ldrb	r3, [r7, #15]
 8000a82:	e002      	b.n	8000a8a <NRF_SendWriteCommand+0x5e>
  }
  csn_set(); //Desseleciona o dispositivo
 8000a84:	f7ff ff3a 	bl	80008fc <csn_set>

  return ret; //Retorna o Resultado
 8000a88:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	3710      	adds	r7, #16
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	20000260 	.word	0x20000260

08000a98 <NRF_SendReadCommand>:

//Função para enviar um comando de leitura
NRF_Status NRF_SendReadCommand(uint8_t cmd, uint8_t *read, uint8_t length) {
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b086      	sub	sp, #24
 8000a9c:	af02      	add	r7, sp, #8
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	6039      	str	r1, [r7, #0]
 8000aa2:	71fb      	strb	r3, [r7, #7]
 8000aa4:	4613      	mov	r3, r2
 8000aa6:	71bb      	strb	r3, [r7, #6]
  NRF_Status ret = NRF_OK;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	73fb      	strb	r3, [r7, #15]
  uint8_t status;

  csn_reset(); //Seleciona o dispositivo
 8000aac:	f7ff ff36 	bl	800091c <csn_reset>
  ret = (NRF_Status)HAL_SPI_TransmitReceive(HSPI, &cmd, &status, 1, NRF_SPI_TIMEOUT_DUR);//Manda pro NRF o comando de Leitura
 8000ab0:	4b13      	ldr	r3, [pc, #76]	@ (8000b00 <NRF_SendReadCommand+0x68>)
 8000ab2:	6818      	ldr	r0, [r3, #0]
 8000ab4:	f107 020e 	add.w	r2, r7, #14
 8000ab8:	1df9      	adds	r1, r7, #7
 8000aba:	230a      	movs	r3, #10
 8000abc:	9300      	str	r3, [sp, #0]
 8000abe:	2301      	movs	r3, #1
 8000ac0:	f003 fbc5 	bl	800424e <HAL_SPI_TransmitReceive>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	73fb      	strb	r3, [r7, #15]
  if(ret != NRF_OK) { //Verifica se o processo foi um sucesso
 8000ac8:	7bfb      	ldrb	r3, [r7, #15]
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d001      	beq.n	8000ad2 <NRF_SendReadCommand+0x3a>
    return ret;
 8000ace:	7bfb      	ldrb	r3, [r7, #15]
 8000ad0:	e011      	b.n	8000af6 <NRF_SendReadCommand+0x5e>
  }
  ret = (NRF_Status)HAL_SPI_Receive(HSPI, read, length, NRF_SPI_TIMEOUT_DUR);//Recebe o que se deseja ler do NRF
 8000ad2:	4b0b      	ldr	r3, [pc, #44]	@ (8000b00 <NRF_SendReadCommand+0x68>)
 8000ad4:	6818      	ldr	r0, [r3, #0]
 8000ad6:	79bb      	ldrb	r3, [r7, #6]
 8000ad8:	b29a      	uxth	r2, r3
 8000ada:	230a      	movs	r3, #10
 8000adc:	6839      	ldr	r1, [r7, #0]
 8000ade:	f003 fa9d 	bl	800401c <HAL_SPI_Receive>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	73fb      	strb	r3, [r7, #15]
  if(ret != NRF_OK) {
 8000ae6:	7bfb      	ldrb	r3, [r7, #15]
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d001      	beq.n	8000af0 <NRF_SendReadCommand+0x58>
    return ret;
 8000aec:	7bfb      	ldrb	r3, [r7, #15]
 8000aee:	e002      	b.n	8000af6 <NRF_SendReadCommand+0x5e>
  }
  csn_set();//Desseleciona o dispositvo
 8000af0:	f7ff ff04 	bl	80008fc <csn_set>

  return ret;//Retorna o resultado
 8000af4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000af6:	4618      	mov	r0, r3
 8000af8:	3710      	adds	r7, #16
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	20000260 	.word	0x20000260

08000b04 <NRF_WriteRegister>:
/* Escreve no Registro do NRF
 * Param - Registro a ser escrito
 * Param - O que será escrito
 * Param - O tamanho (em bytes)
 *  							*/
NRF_Status NRF_WriteRegister(uint8_t reg, uint8_t *write, uint8_t length) {
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b082      	sub	sp, #8
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	6039      	str	r1, [r7, #0]
 8000b0e:	71fb      	strb	r3, [r7, #7]
 8000b10:	4613      	mov	r3, r2
 8000b12:	71bb      	strb	r3, [r7, #6]
  return NRF_SendWriteCommand(NRF_CMD_W_REGISTER | reg, write, length);
 8000b14:	79fb      	ldrb	r3, [r7, #7]
 8000b16:	f043 0320 	orr.w	r3, r3, #32
 8000b1a:	b2db      	uxtb	r3, r3
 8000b1c:	79ba      	ldrb	r2, [r7, #6]
 8000b1e:	6839      	ldr	r1, [r7, #0]
 8000b20:	4618      	mov	r0, r3
 8000b22:	f7ff ff83 	bl	8000a2c <NRF_SendWriteCommand>
 8000b26:	4603      	mov	r3, r0
}
 8000b28:	4618      	mov	r0, r3
 8000b2a:	3708      	adds	r7, #8
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}

08000b30 <NRF_WriteRegisterByte>:

/* Escreve em um byte da Memória do NRF
 * Param - Registro a ser escrito
 * Param - O que será escrito
 *  							*/
NRF_Status NRF_WriteRegisterByte(uint8_t reg, uint8_t byte) {
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b084      	sub	sp, #16
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	4603      	mov	r3, r0
 8000b38:	460a      	mov	r2, r1
 8000b3a:	71fb      	strb	r3, [r7, #7]
 8000b3c:	4613      	mov	r3, r2
 8000b3e:	71bb      	strb	r3, [r7, #6]
  uint8_t write = byte;
 8000b40:	79bb      	ldrb	r3, [r7, #6]
 8000b42:	73fb      	strb	r3, [r7, #15]
  return NRF_WriteRegister(reg, &write, 1);
 8000b44:	f107 010f 	add.w	r1, r7, #15
 8000b48:	79fb      	ldrb	r3, [r7, #7]
 8000b4a:	2201      	movs	r2, #1
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f7ff ffd9 	bl	8000b04 <NRF_WriteRegister>
 8000b52:	4603      	mov	r3, r0
}
 8000b54:	4618      	mov	r0, r3
 8000b56:	3710      	adds	r7, #16
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}

08000b5c <NRF_ReadRegister>:
/* Lê no Registro do NRF
 * Param - Registro a ser lido
 * Param - Ponteiro para variável onde será salvo
 * Param - O tamanho (em bytes)
 *  							*/
NRF_Status NRF_ReadRegister(uint8_t reg, uint8_t *read, uint8_t length) {
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b082      	sub	sp, #8
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	4603      	mov	r3, r0
 8000b64:	6039      	str	r1, [r7, #0]
 8000b66:	71fb      	strb	r3, [r7, #7]
 8000b68:	4613      	mov	r3, r2
 8000b6a:	71bb      	strb	r3, [r7, #6]
  return NRF_SendReadCommand(NRF_CMD_R_REGISTER | reg, read, length);
 8000b6c:	79ba      	ldrb	r2, [r7, #6]
 8000b6e:	79fb      	ldrb	r3, [r7, #7]
 8000b70:	6839      	ldr	r1, [r7, #0]
 8000b72:	4618      	mov	r0, r3
 8000b74:	f7ff ff90 	bl	8000a98 <NRF_SendReadCommand>
 8000b78:	4603      	mov	r3, r0
}
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	3708      	adds	r7, #8
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}

08000b82 <NRF_ReadPacketLoss>:

uint8_t NRF_ReadPacketLoss(){
 8000b82:	b580      	push	{r7, lr}
 8000b84:	b082      	sub	sp, #8
 8000b86:	af00      	add	r7, sp, #0
	NRF_Status ret = NRF_OK;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	71fb      	strb	r3, [r7, #7]
	uint8_t Dados= 0;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	71bb      	strb	r3, [r7, #6]
	ret = NRF_SendReadCommand(NRF_REG_OBSERVE_TX, &Dados, 1);
 8000b90:	1dbb      	adds	r3, r7, #6
 8000b92:	2201      	movs	r2, #1
 8000b94:	4619      	mov	r1, r3
 8000b96:	2008      	movs	r0, #8
 8000b98:	f7ff ff7e 	bl	8000a98 <NRF_SendReadCommand>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	71fb      	strb	r3, [r7, #7]
	if(ret != NRF_OK){
 8000ba0:	79fb      	ldrb	r3, [r7, #7]
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d001      	beq.n	8000baa <NRF_ReadPacketLoss+0x28>
		return 0;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	e004      	b.n	8000bb4 <NRF_ReadPacketLoss+0x32>
	} else{
		Dados = Dados>>4; //10101111 -> 00001010
 8000baa:	79bb      	ldrb	r3, [r7, #6]
 8000bac:	091b      	lsrs	r3, r3, #4
 8000bae:	b2db      	uxtb	r3, r3
 8000bb0:	71bb      	strb	r3, [r7, #6]
		return Dados;
 8000bb2:	79bb      	ldrb	r3, [r7, #6]
	}
	return 0;
}
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	3708      	adds	r7, #8
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}

08000bbc <NRF_ReadStatus>:
  NRF_SendReadCommand(NRF_CMD_R_REGISTER | reg, &read, 1);
  return read;
}

//Lê o Status do NRF
uint8_t NRF_ReadStatus() {
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b084      	sub	sp, #16
 8000bc0:	af02      	add	r7, sp, #8
  uint8_t status = 0x00;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	71fb      	strb	r3, [r7, #7]
  uint8_t cmd = NRF_CMD_NOP;
 8000bc6:	23ff      	movs	r3, #255	@ 0xff
 8000bc8:	71bb      	strb	r3, [r7, #6]

  csn_reset();
 8000bca:	f7ff fea7 	bl	800091c <csn_reset>
  HAL_SPI_TransmitReceive(HSPI, &cmd, &status, 1, NRF_SPI_TIMEOUT_DUR);
 8000bce:	4b08      	ldr	r3, [pc, #32]	@ (8000bf0 <NRF_ReadStatus+0x34>)
 8000bd0:	6818      	ldr	r0, [r3, #0]
 8000bd2:	1dfa      	adds	r2, r7, #7
 8000bd4:	1db9      	adds	r1, r7, #6
 8000bd6:	230a      	movs	r3, #10
 8000bd8:	9300      	str	r3, [sp, #0]
 8000bda:	2301      	movs	r3, #1
 8000bdc:	f003 fb37 	bl	800424e <HAL_SPI_TransmitReceive>
  csn_set();
 8000be0:	f7ff fe8c 	bl	80008fc <csn_set>

  return status;
 8000be4:	79fb      	ldrb	r3, [r7, #7]
}
 8000be6:	4618      	mov	r0, r3
 8000be8:	3708      	adds	r7, #8
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	20000260 	.word	0x20000260

08000bf4 <NRF_SetRegisterBit>:

/* Seta um Bit específico de um Registro para 1
 * Param - Registro a ser escrito
 * Param - Qual bit será alterado para 1
 *  											*/
NRF_Status NRF_SetRegisterBit(uint8_t reg, uint8_t bit) {
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b084      	sub	sp, #16
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	460a      	mov	r2, r1
 8000bfe:	71fb      	strb	r3, [r7, #7]
 8000c00:	4613      	mov	r3, r2
 8000c02:	71bb      	strb	r3, [r7, #6]
  NRF_Status ret = NRF_OK;
 8000c04:	2300      	movs	r3, #0
 8000c06:	73fb      	strb	r3, [r7, #15]
  uint8_t cfg = 0x00;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	73bb      	strb	r3, [r7, #14]

  ret = NRF_ReadRegister(reg, &cfg, 1); //Pega a informação do byte do registro
 8000c0c:	f107 010e 	add.w	r1, r7, #14
 8000c10:	79fb      	ldrb	r3, [r7, #7]
 8000c12:	2201      	movs	r2, #1
 8000c14:	4618      	mov	r0, r3
 8000c16:	f7ff ffa1 	bl	8000b5c <NRF_ReadRegister>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	73fb      	strb	r3, [r7, #15]
  if (ret != NRF_OK) {
 8000c1e:	7bfb      	ldrb	r3, [r7, #15]
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d001      	beq.n	8000c28 <NRF_SetRegisterBit+0x34>
    return ret;
 8000c24:	7bfb      	ldrb	r3, [r7, #15]
 8000c26:	e012      	b.n	8000c4e <NRF_SetRegisterBit+0x5a>
  }

  cfg = cfg | (1 << bit); //Altera o bit por meio de um OU binário
 8000c28:	79bb      	ldrb	r3, [r7, #6]
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c30:	b25a      	sxtb	r2, r3
 8000c32:	7bbb      	ldrb	r3, [r7, #14]
 8000c34:	b25b      	sxtb	r3, r3
 8000c36:	4313      	orrs	r3, r2
 8000c38:	b25b      	sxtb	r3, r3
 8000c3a:	b2db      	uxtb	r3, r3
 8000c3c:	73bb      	strb	r3, [r7, #14]
  return NRF_WriteRegister(reg, &cfg, 1); //Escreve o registro de volta
 8000c3e:	f107 010e 	add.w	r1, r7, #14
 8000c42:	79fb      	ldrb	r3, [r7, #7]
 8000c44:	2201      	movs	r2, #1
 8000c46:	4618      	mov	r0, r3
 8000c48:	f7ff ff5c 	bl	8000b04 <NRF_WriteRegister>
 8000c4c:	4603      	mov	r3, r0
}
 8000c4e:	4618      	mov	r0, r3
 8000c50:	3710      	adds	r7, #16
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}

08000c56 <NRF_ResetRegisterBit>:

/* Seta um Bit específico de um Registro para 0
 * Param - Registro a ser escrito
 * Param - Qual bit será alterado para 1
 *  											*/
NRF_Status NRF_ResetRegisterBit(uint8_t reg, uint8_t bit) {
 8000c56:	b580      	push	{r7, lr}
 8000c58:	b084      	sub	sp, #16
 8000c5a:	af00      	add	r7, sp, #0
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	460a      	mov	r2, r1
 8000c60:	71fb      	strb	r3, [r7, #7]
 8000c62:	4613      	mov	r3, r2
 8000c64:	71bb      	strb	r3, [r7, #6]
  NRF_Status ret = NRF_OK;
 8000c66:	2300      	movs	r3, #0
 8000c68:	73fb      	strb	r3, [r7, #15]
  uint8_t cfg = 0x00;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	73bb      	strb	r3, [r7, #14]

  ret = NRF_ReadRegister(reg, &cfg, 1);//Pega a informação do byte do registro
 8000c6e:	f107 010e 	add.w	r1, r7, #14
 8000c72:	79fb      	ldrb	r3, [r7, #7]
 8000c74:	2201      	movs	r2, #1
 8000c76:	4618      	mov	r0, r3
 8000c78:	f7ff ff70 	bl	8000b5c <NRF_ReadRegister>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	73fb      	strb	r3, [r7, #15]
  if (ret != NRF_OK) {
 8000c80:	7bfb      	ldrb	r3, [r7, #15]
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d001      	beq.n	8000c8a <NRF_ResetRegisterBit+0x34>
    return ret;
 8000c86:	7bfb      	ldrb	r3, [r7, #15]
 8000c88:	e014      	b.n	8000cb4 <NRF_ResetRegisterBit+0x5e>
  }

  cfg = cfg & ~(1 << bit);//Altera o bit por meio de um E binário
 8000c8a:	79bb      	ldrb	r3, [r7, #6]
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c92:	b25b      	sxtb	r3, r3
 8000c94:	43db      	mvns	r3, r3
 8000c96:	b25a      	sxtb	r2, r3
 8000c98:	7bbb      	ldrb	r3, [r7, #14]
 8000c9a:	b25b      	sxtb	r3, r3
 8000c9c:	4013      	ands	r3, r2
 8000c9e:	b25b      	sxtb	r3, r3
 8000ca0:	b2db      	uxtb	r3, r3
 8000ca2:	73bb      	strb	r3, [r7, #14]
  return NRF_WriteRegister(reg, &cfg, 1);//Escreve o registro de volta
 8000ca4:	f107 010e 	add.w	r1, r7, #14
 8000ca8:	79fb      	ldrb	r3, [r7, #7]
 8000caa:	2201      	movs	r2, #1
 8000cac:	4618      	mov	r0, r3
 8000cae:	f7ff ff29 	bl	8000b04 <NRF_WriteRegister>
 8000cb2:	4603      	mov	r3, r0
}
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	3710      	adds	r7, #16
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}

08000cbc <NRF_EnterMode>:
 * NRF_MODE_STANDBY1 - Standby
 * NRF_MODE_RX - Modo de Recepção
 * NRF_MODE_Tx - Modo de Transmissão
 * Retorno: Status
 *  								*/
NRF_Status NRF_EnterMode(uint8_t mode) {
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b084      	sub	sp, #16
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	71fb      	strb	r3, [r7, #7]
  NRF_Status ret = NRF_OK;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	73fb      	strb	r3, [r7, #15]

  switch(mode) {
 8000cca:	79fb      	ldrb	r3, [r7, #7]
 8000ccc:	2b03      	cmp	r3, #3
 8000cce:	d859      	bhi.n	8000d84 <NRF_EnterMode+0xc8>
 8000cd0:	a201      	add	r2, pc, #4	@ (adr r2, 8000cd8 <NRF_EnterMode+0x1c>)
 8000cd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cd6:	bf00      	nop
 8000cd8:	08000ce9 	.word	0x08000ce9
 8000cdc:	08000cff 	.word	0x08000cff
 8000ce0:	08000d49 	.word	0x08000d49
 8000ce4:	08000d67 	.word	0x08000d67
    case NRF_MODE_POWERDOWN:
      csn_set();
 8000ce8:	f7ff fe08 	bl	80008fc <csn_set>
      ce_reset();
 8000cec:	f7ff fe36 	bl	800095c <ce_reset>
      ret = NRF_ResetRegisterBit(NRF_REG_CONFIG, CFG_BIT_PWR_UP); //Seta o bit de Power up em 0
 8000cf0:	2101      	movs	r1, #1
 8000cf2:	2000      	movs	r0, #0
 8000cf4:	f7ff ffaf 	bl	8000c56 <NRF_ResetRegisterBit>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	73fb      	strb	r3, [r7, #15]
      break;
 8000cfc:	e046      	b.n	8000d8c <NRF_EnterMode+0xd0>
    case NRF_MODE_STANDBY1:
      if (current_mode == NRF_MODE_POWERDOWN) {
 8000cfe:	4b29      	ldr	r3, [pc, #164]	@ (8000da4 <NRF_EnterMode+0xe8>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d10c      	bne.n	8000d20 <NRF_EnterMode+0x64>
        ret = NRF_SetRegisterBit(NRF_REG_CONFIG, CFG_BIT_PWR_UP); //Seta o bit de Power up em 1
 8000d06:	2101      	movs	r1, #1
 8000d08:	2000      	movs	r0, #0
 8000d0a:	f7ff ff73 	bl	8000bf4 <NRF_SetRegisterBit>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	73fb      	strb	r3, [r7, #15]
        wait(1500);
 8000d12:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8000d16:	f04f 0100 	mov.w	r1, #0
 8000d1a:	f7ff fe2f 	bl	800097c <wait>
        ret = NRF_ResetRegisterBit(NRF_REG_CONFIG, CFG_BIT_PRIM_RX);
        ce_reset();
      } else if (current_mode == NRF_MODE_TX) {
        ce_reset();
      }
      break;
 8000d1e:	e034      	b.n	8000d8a <NRF_EnterMode+0xce>
      } else if (current_mode == NRF_MODE_RX) {
 8000d20:	4b20      	ldr	r3, [pc, #128]	@ (8000da4 <NRF_EnterMode+0xe8>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	2b02      	cmp	r3, #2
 8000d26:	d108      	bne.n	8000d3a <NRF_EnterMode+0x7e>
        ret = NRF_ResetRegisterBit(NRF_REG_CONFIG, CFG_BIT_PRIM_RX);
 8000d28:	2100      	movs	r1, #0
 8000d2a:	2000      	movs	r0, #0
 8000d2c:	f7ff ff93 	bl	8000c56 <NRF_ResetRegisterBit>
 8000d30:	4603      	mov	r3, r0
 8000d32:	73fb      	strb	r3, [r7, #15]
        ce_reset();
 8000d34:	f7ff fe12 	bl	800095c <ce_reset>
      break;
 8000d38:	e027      	b.n	8000d8a <NRF_EnterMode+0xce>
      } else if (current_mode == NRF_MODE_TX) {
 8000d3a:	4b1a      	ldr	r3, [pc, #104]	@ (8000da4 <NRF_EnterMode+0xe8>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	2b03      	cmp	r3, #3
 8000d40:	d123      	bne.n	8000d8a <NRF_EnterMode+0xce>
        ce_reset();
 8000d42:	f7ff fe0b 	bl	800095c <ce_reset>
      break;
 8000d46:	e020      	b.n	8000d8a <NRF_EnterMode+0xce>
    case NRF_MODE_RX:
      if (current_mode != NRF_MODE_STANDBY1) { //O dispositivo deve estar em standby para passar para o modo Rx
 8000d48:	4b16      	ldr	r3, [pc, #88]	@ (8000da4 <NRF_EnterMode+0xe8>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	2b01      	cmp	r3, #1
 8000d4e:	d001      	beq.n	8000d54 <NRF_EnterMode+0x98>
        return NRF_BAD_TRANSITION;
 8000d50:	2306      	movs	r3, #6
 8000d52:	e022      	b.n	8000d9a <NRF_EnterMode+0xde>
      }
      ret = NRF_SetRegisterBit(NRF_REG_CONFIG, CFG_BIT_PRIM_RX); // 1 = Rx
 8000d54:	2100      	movs	r1, #0
 8000d56:	2000      	movs	r0, #0
 8000d58:	f7ff ff4c 	bl	8000bf4 <NRF_SetRegisterBit>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	73fb      	strb	r3, [r7, #15]
      ce_set();
 8000d60:	f7ff fdec 	bl	800093c <ce_set>
      break;
 8000d64:	e012      	b.n	8000d8c <NRF_EnterMode+0xd0>
    case NRF_MODE_TX:
      if (current_mode != NRF_MODE_STANDBY1) {
 8000d66:	4b0f      	ldr	r3, [pc, #60]	@ (8000da4 <NRF_EnterMode+0xe8>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	2b01      	cmp	r3, #1
 8000d6c:	d001      	beq.n	8000d72 <NRF_EnterMode+0xb6>
        return NRF_BAD_TRANSITION;
 8000d6e:	2306      	movs	r3, #6
 8000d70:	e013      	b.n	8000d9a <NRF_EnterMode+0xde>
      }
      ret = NRF_ResetRegisterBit(NRF_REG_CONFIG, CFG_BIT_PRIM_RX); // 0 = Tx
 8000d72:	2100      	movs	r1, #0
 8000d74:	2000      	movs	r0, #0
 8000d76:	f7ff ff6e 	bl	8000c56 <NRF_ResetRegisterBit>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	73fb      	strb	r3, [r7, #15]
      ce_set();
 8000d7e:	f7ff fddd 	bl	800093c <ce_set>
      break;
 8000d82:	e003      	b.n	8000d8c <NRF_EnterMode+0xd0>
    default:
      ret = NRF_ERROR;
 8000d84:	2304      	movs	r3, #4
 8000d86:	73fb      	strb	r3, [r7, #15]
      break;
 8000d88:	e000      	b.n	8000d8c <NRF_EnterMode+0xd0>
      break;
 8000d8a:	bf00      	nop
  }

  if (ret == NRF_OK) {
 8000d8c:	7bfb      	ldrb	r3, [r7, #15]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d102      	bne.n	8000d98 <NRF_EnterMode+0xdc>
    current_mode = mode;
 8000d92:	79fb      	ldrb	r3, [r7, #7]
 8000d94:	4a03      	ldr	r2, [pc, #12]	@ (8000da4 <NRF_EnterMode+0xe8>)
 8000d96:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8000d98:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	3710      	adds	r7, #16
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	20000278 	.word	0x20000278

08000da8 <NRF_Init>:
 * Param - Pino Chip Select
 * Param - Porta Chip Enable
 * Param - Pino Chip Enable
 * Retorno: Status
 *  								*/
NRF_Status NRF_Init(SPI_HandleTypeDef *handle, GPIO_TypeDef *PortCSN, uint16_t PinCSN, GPIO_TypeDef *PortCE, uint16_t PinCE) {
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b084      	sub	sp, #16
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	60f8      	str	r0, [r7, #12]
 8000db0:	60b9      	str	r1, [r7, #8]
 8000db2:	603b      	str	r3, [r7, #0]
 8000db4:	4613      	mov	r3, r2
 8000db6:	80fb      	strh	r3, [r7, #6]
  HSPI = handle;
 8000db8:	4a13      	ldr	r2, [pc, #76]	@ (8000e08 <NRF_Init+0x60>)
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	6013      	str	r3, [r2, #0]
  NRF_CSN_Port = PortCSN;
 8000dbe:	4a13      	ldr	r2, [pc, #76]	@ (8000e0c <NRF_Init+0x64>)
 8000dc0:	68bb      	ldr	r3, [r7, #8]
 8000dc2:	6013      	str	r3, [r2, #0]
  NRF_CSN_Pin = PinCSN;
 8000dc4:	4a12      	ldr	r2, [pc, #72]	@ (8000e10 <NRF_Init+0x68>)
 8000dc6:	88fb      	ldrh	r3, [r7, #6]
 8000dc8:	8013      	strh	r3, [r2, #0]
  NRF_CE_Port = PortCE;
 8000dca:	4a12      	ldr	r2, [pc, #72]	@ (8000e14 <NRF_Init+0x6c>)
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	6013      	str	r3, [r2, #0]
  NRF_CE_Pin = PinCE;
 8000dd0:	4a11      	ldr	r2, [pc, #68]	@ (8000e18 <NRF_Init+0x70>)
 8000dd2:	8b3b      	ldrh	r3, [r7, #24]
 8000dd4:	8013      	strh	r3, [r2, #0]

  CPU_Freq = HAL_RCC_GetSysClockFreq();
 8000dd6:	f002 fe31 	bl	8003a3c <HAL_RCC_GetSysClockFreq>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	4a0f      	ldr	r2, [pc, #60]	@ (8000e1c <NRF_Init+0x74>)
 8000dde:	6013      	str	r3, [r2, #0]
  if (CPU_Freq == 0x00) {
 8000de0:	4b0e      	ldr	r3, [pc, #56]	@ (8000e1c <NRF_Init+0x74>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d101      	bne.n	8000dec <NRF_Init+0x44>
    return NRF_ERROR;
 8000de8:	2304      	movs	r3, #4
 8000dea:	e008      	b.n	8000dfe <NRF_Init+0x56>
  }

  // Make sure CSN is pulled high
  csn_set();
 8000dec:	f7ff fd86 	bl	80008fc <csn_set>

  // Takes ~100ms from power on to start up
  HAL_Delay(100);
 8000df0:	2064      	movs	r0, #100	@ 0x64
 8000df2:	f000 fa6f 	bl	80012d4 <HAL_Delay>

  return NRF_EnterMode(NRF_MODE_STANDBY1);
 8000df6:	2001      	movs	r0, #1
 8000df8:	f7ff ff60 	bl	8000cbc <NRF_EnterMode>
 8000dfc:	4603      	mov	r3, r0
}
 8000dfe:	4618      	mov	r0, r3
 8000e00:	3710      	adds	r7, #16
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	20000260 	.word	0x20000260
 8000e0c:	20000264 	.word	0x20000264
 8000e10:	20000268 	.word	0x20000268
 8000e14:	2000026c 	.word	0x2000026c
 8000e18:	20000270 	.word	0x20000270
 8000e1c:	20000274 	.word	0x20000274

08000e20 <NRF_Reset>:


//Reseta o NRF  o mantendo em stanby
void NRF_Reset() {
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b084      	sub	sp, #16
 8000e24:	af00      	add	r7, sp, #0
  NRF_EnterMode(NRF_MODE_POWERDOWN);
 8000e26:	2000      	movs	r0, #0
 8000e28:	f7ff ff48 	bl	8000cbc <NRF_EnterMode>
  NRF_EnterMode(NRF_MODE_STANDBY1);
 8000e2c:	2001      	movs	r0, #1
 8000e2e:	f7ff ff45 	bl	8000cbc <NRF_EnterMode>

  // Flush FIFOs
  NRF_EnterMode(NRF_MODE_TX);
 8000e32:	2003      	movs	r0, #3
 8000e34:	f7ff ff42 	bl	8000cbc <NRF_EnterMode>
  NRF_SendCommand(NRF_CMD_FLUSH_TX);
 8000e38:	20e1      	movs	r0, #225	@ 0xe1
 8000e3a:	f7ff fdd3 	bl	80009e4 <NRF_SendCommand>
  NRF_EnterMode(NRF_MODE_STANDBY1);
 8000e3e:	2001      	movs	r0, #1
 8000e40:	f7ff ff3c 	bl	8000cbc <NRF_EnterMode>
  NRF_EnterMode(NRF_MODE_RX);
 8000e44:	2002      	movs	r0, #2
 8000e46:	f7ff ff39 	bl	8000cbc <NRF_EnterMode>
  NRF_SendCommand(NRF_CMD_FLUSH_RX);
 8000e4a:	20e2      	movs	r0, #226	@ 0xe2
 8000e4c:	f7ff fdca 	bl	80009e4 <NRF_SendCommand>
  NRF_EnterMode(NRF_MODE_STANDBY1);
 8000e50:	2001      	movs	r0, #1
 8000e52:	f7ff ff33 	bl	8000cbc <NRF_EnterMode>

  // Flush register -> LER DATASHEET!!!!!!!!!!!!!!
  NRF_WriteRegisterByte(NRF_REG_CONFIG,       0x0A);// 00001010
 8000e56:	210a      	movs	r1, #10
 8000e58:	2000      	movs	r0, #0
 8000e5a:	f7ff fe69 	bl	8000b30 <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_EN_AA,        0x3F);// 00000001 = AutoAcknologment ativado no primeiro PIPE
 8000e5e:	213f      	movs	r1, #63	@ 0x3f
 8000e60:	2001      	movs	r0, #1
 8000e62:	f7ff fe65 	bl	8000b30 <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_EN_RXADDR,    0x03);//00000011 -> Pipes 0 e 1 no Rx
 8000e66:	2103      	movs	r1, #3
 8000e68:	2002      	movs	r0, #2
 8000e6a:	f7ff fe61 	bl	8000b30 <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_SETUP_AW,     0x03);//00000011 -> 5 bytes no adresss
 8000e6e:	2103      	movs	r1, #3
 8000e70:	2003      	movs	r0, #3
 8000e72:	f7ff fe5d 	bl	8000b30 <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_SETUP_RETR,   0x03);//00001111 -> re-transmit habilitado. bits 7-4 -> delay de retransmit (250us). bits 3-0 qtd de retransmit (15).
 8000e76:	2103      	movs	r1, #3
 8000e78:	2004      	movs	r0, #4
 8000e7a:	f7ff fe59 	bl	8000b30 <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_RF_CH,        0x02);//00000010 -> Canal 3
 8000e7e:	2102      	movs	r1, #2
 8000e80:	2005      	movs	r0, #5
 8000e82:	f7ff fe55 	bl	8000b30 <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_RF_SETUP,     0x0E);//00001110 -> LNA desligado, 0dBm, 2MBs
 8000e86:	210e      	movs	r1, #14
 8000e88:	2006      	movs	r0, #6
 8000e8a:	f7ff fe51 	bl	8000b30 <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_STATUS,       0x70); // clear flags
 8000e8e:	2170      	movs	r1, #112	@ 0x70
 8000e90:	2007      	movs	r0, #7
 8000e92:	f7ff fe4d 	bl	8000b30 <NRF_WriteRegisterByte>

  uint8_t address[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 8000e96:	4a2d      	ldr	r2, [pc, #180]	@ (8000f4c <NRF_Reset+0x12c>)
 8000e98:	f107 0308 	add.w	r3, r7, #8
 8000e9c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ea0:	6018      	str	r0, [r3, #0]
 8000ea2:	3304      	adds	r3, #4
 8000ea4:	7019      	strb	r1, [r3, #0]
  uint8_t address2[5] = {0xC2, 0xC2, 0xC2, 0xC2, 0xC2};
 8000ea6:	4a2a      	ldr	r2, [pc, #168]	@ (8000f50 <NRF_Reset+0x130>)
 8000ea8:	463b      	mov	r3, r7
 8000eaa:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000eae:	6018      	str	r0, [r3, #0]
 8000eb0:	3304      	adds	r3, #4
 8000eb2:	7019      	strb	r1, [r3, #0]
  NRF_WriteRegister(NRF_REG_RX_ADDR_P0, address, 5); //Adress do pipe 0
 8000eb4:	f107 0308 	add.w	r3, r7, #8
 8000eb8:	2205      	movs	r2, #5
 8000eba:	4619      	mov	r1, r3
 8000ebc:	200a      	movs	r0, #10
 8000ebe:	f7ff fe21 	bl	8000b04 <NRF_WriteRegister>
  NRF_WriteRegister(NRF_REG_RX_ADDR_P1, address2, 5); //Adress pipe 1
 8000ec2:	463b      	mov	r3, r7
 8000ec4:	2205      	movs	r2, #5
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	200b      	movs	r0, #11
 8000eca:	f7ff fe1b 	bl	8000b04 <NRF_WriteRegister>
  NRF_WriteRegisterByte(NRF_REG_RX_ADDR_P2,   0xC3);
 8000ece:	21c3      	movs	r1, #195	@ 0xc3
 8000ed0:	200c      	movs	r0, #12
 8000ed2:	f7ff fe2d 	bl	8000b30 <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_RX_ADDR_P3,   0xC4);
 8000ed6:	21c4      	movs	r1, #196	@ 0xc4
 8000ed8:	200d      	movs	r0, #13
 8000eda:	f7ff fe29 	bl	8000b30 <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_RX_ADDR_P4,   0xC5);
 8000ede:	21c5      	movs	r1, #197	@ 0xc5
 8000ee0:	200e      	movs	r0, #14
 8000ee2:	f7ff fe25 	bl	8000b30 <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_RX_ADDR_P5,   0xC6);
 8000ee6:	21c6      	movs	r1, #198	@ 0xc6
 8000ee8:	200f      	movs	r0, #15
 8000eea:	f7ff fe21 	bl	8000b30 <NRF_WriteRegisterByte>
  NRF_WriteRegister(NRF_REG_TX_ADDR, address, 5);
 8000eee:	f107 0308 	add.w	r3, r7, #8
 8000ef2:	2205      	movs	r2, #5
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	2010      	movs	r0, #16
 8000ef8:	f7ff fe04 	bl	8000b04 <NRF_WriteRegister>
  NRF_WriteRegisterByte(NRF_REG_RX_PW_P0,     0x00);
 8000efc:	2100      	movs	r1, #0
 8000efe:	2011      	movs	r0, #17
 8000f00:	f7ff fe16 	bl	8000b30 <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_RX_PW_P1,     0x00);
 8000f04:	2100      	movs	r1, #0
 8000f06:	2012      	movs	r0, #18
 8000f08:	f7ff fe12 	bl	8000b30 <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_RX_PW_P2,     0x00);
 8000f0c:	2100      	movs	r1, #0
 8000f0e:	2013      	movs	r0, #19
 8000f10:	f7ff fe0e 	bl	8000b30 <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_RX_PW_P3,     0x00);
 8000f14:	2100      	movs	r1, #0
 8000f16:	2014      	movs	r0, #20
 8000f18:	f7ff fe0a 	bl	8000b30 <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_RX_PW_P4,     0x00);
 8000f1c:	2100      	movs	r1, #0
 8000f1e:	2015      	movs	r0, #21
 8000f20:	f7ff fe06 	bl	8000b30 <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_RX_PW_P5,     0x00);
 8000f24:	2100      	movs	r1, #0
 8000f26:	2016      	movs	r0, #22
 8000f28:	f7ff fe02 	bl	8000b30 <NRF_WriteRegisterByte>

  NRF_WriteRegisterByte(NRF_REG_FIFO_STATUS,  0x00);
 8000f2c:	2100      	movs	r1, #0
 8000f2e:	2017      	movs	r0, #23
 8000f30:	f7ff fdfe 	bl	8000b30 <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_DYNPD,        0x00);
 8000f34:	2100      	movs	r1, #0
 8000f36:	201c      	movs	r0, #28
 8000f38:	f7ff fdfa 	bl	8000b30 <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_FEATURE,      0x00);
 8000f3c:	2100      	movs	r1, #0
 8000f3e:	201d      	movs	r0, #29
 8000f40:	f7ff fdf6 	bl	8000b30 <NRF_WriteRegisterByte>
}
 8000f44:	bf00      	nop
 8000f46:	3710      	adds	r7, #16
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	08009894 	.word	0x08009894
 8000f50:	0800989c 	.word	0x0800989c

08000f54 <NRF_WritePayload>:

NRF_Status NRF_WritePayload(uint8_t *payload, uint8_t length) {
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b082      	sub	sp, #8
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
 8000f5c:	460b      	mov	r3, r1
 8000f5e:	70fb      	strb	r3, [r7, #3]
  return NRF_SendWriteCommand(NRF_CMD_W_TX_PAYLOAD, payload, length);
 8000f60:	78fb      	ldrb	r3, [r7, #3]
 8000f62:	461a      	mov	r2, r3
 8000f64:	6879      	ldr	r1, [r7, #4]
 8000f66:	20a0      	movs	r0, #160	@ 0xa0
 8000f68:	f7ff fd60 	bl	8000a2c <NRF_SendWriteCommand>
 8000f6c:	4603      	mov	r3, r0
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	3708      	adds	r7, #8
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}

08000f76 <NRF_TransmitAndWait>:
  ce_set();
  wait(10);
  ce_reset();
}

NRF_Status NRF_TransmitAndWait(uint8_t *payload, uint8_t length) {
 8000f76:	b580      	push	{r7, lr}
 8000f78:	b084      	sub	sp, #16
 8000f7a:	af00      	add	r7, sp, #0
 8000f7c:	6078      	str	r0, [r7, #4]
 8000f7e:	460b      	mov	r3, r1
 8000f80:	70fb      	strb	r3, [r7, #3]
  NRF_Status ret = NRF_OK;
 8000f82:	2300      	movs	r3, #0
 8000f84:	73fb      	strb	r3, [r7, #15]

  ret = NRF_WritePayload(payload, length);
 8000f86:	78fb      	ldrb	r3, [r7, #3]
 8000f88:	4619      	mov	r1, r3
 8000f8a:	6878      	ldr	r0, [r7, #4]
 8000f8c:	f7ff ffe2 	bl	8000f54 <NRF_WritePayload>
 8000f90:	4603      	mov	r3, r0
 8000f92:	73fb      	strb	r3, [r7, #15]
  if (ret != NRF_OK) {
 8000f94:	7bfb      	ldrb	r3, [r7, #15]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d001      	beq.n	8000f9e <NRF_TransmitAndWait+0x28>

    return ret;
 8000f9a:	7bfb      	ldrb	r3, [r7, #15]
 8000f9c:	e01f      	b.n	8000fde <NRF_TransmitAndWait+0x68>
  }

  // Transmit
  ce_set();
 8000f9e:	f7ff fccd 	bl	800093c <ce_set>

  // Wait for status update
  uint8_t status;
  for (;;) {
    status = NRF_ReadStatus();
 8000fa2:	f7ff fe0b 	bl	8000bbc <NRF_ReadStatus>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	73bb      	strb	r3, [r7, #14]
    if (status & (1<<STATUS_BIT_TX_DS)) {
 8000faa:	7bbb      	ldrb	r3, [r7, #14]
 8000fac:	f003 0320 	and.w	r3, r3, #32
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d006      	beq.n	8000fc2 <NRF_TransmitAndWait+0x4c>
      // Packet transmitted
      ret = NRF_SetRegisterBit(NRF_REG_STATUS, STATUS_BIT_TX_DS); // clear flag
 8000fb4:	2105      	movs	r1, #5
 8000fb6:	2007      	movs	r0, #7
 8000fb8:	f7ff fe1c 	bl	8000bf4 <NRF_SetRegisterBit>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	73fb      	strb	r3, [r7, #15]
      break;
 8000fc0:	e00a      	b.n	8000fd8 <NRF_TransmitAndWait+0x62>
    } else if (status & (1<<STATUS_BIT_MAX_RT)) {
 8000fc2:	7bbb      	ldrb	r3, [r7, #14]
 8000fc4:	f003 0310 	and.w	r3, r3, #16
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d0ea      	beq.n	8000fa2 <NRF_TransmitAndWait+0x2c>
      // Max retransmits reached
      NRF_SetRegisterBit(NRF_REG_STATUS, STATUS_BIT_MAX_RT); // clear flag
 8000fcc:	2104      	movs	r1, #4
 8000fce:	2007      	movs	r0, #7
 8000fd0:	f7ff fe10 	bl	8000bf4 <NRF_SetRegisterBit>
      ret = NRF_MAX_RT;
 8000fd4:	2305      	movs	r3, #5
 8000fd6:	73fb      	strb	r3, [r7, #15]
      break;
    }
  }
  ce_reset();
 8000fd8:	f7ff fcc0 	bl	800095c <ce_reset>

  return ret;
 8000fdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fde:	4618      	mov	r0, r3
 8000fe0:	3710      	adds	r7, #16
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
	...

08000fe8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b085      	sub	sp, #20
 8000fec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000fee:	4b15      	ldr	r3, [pc, #84]	@ (8001044 <HAL_MspInit+0x5c>)
 8000ff0:	699b      	ldr	r3, [r3, #24]
 8000ff2:	4a14      	ldr	r2, [pc, #80]	@ (8001044 <HAL_MspInit+0x5c>)
 8000ff4:	f043 0301 	orr.w	r3, r3, #1
 8000ff8:	6193      	str	r3, [r2, #24]
 8000ffa:	4b12      	ldr	r3, [pc, #72]	@ (8001044 <HAL_MspInit+0x5c>)
 8000ffc:	699b      	ldr	r3, [r3, #24]
 8000ffe:	f003 0301 	and.w	r3, r3, #1
 8001002:	60bb      	str	r3, [r7, #8]
 8001004:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001006:	4b0f      	ldr	r3, [pc, #60]	@ (8001044 <HAL_MspInit+0x5c>)
 8001008:	69db      	ldr	r3, [r3, #28]
 800100a:	4a0e      	ldr	r2, [pc, #56]	@ (8001044 <HAL_MspInit+0x5c>)
 800100c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001010:	61d3      	str	r3, [r2, #28]
 8001012:	4b0c      	ldr	r3, [pc, #48]	@ (8001044 <HAL_MspInit+0x5c>)
 8001014:	69db      	ldr	r3, [r3, #28]
 8001016:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800101a:	607b      	str	r3, [r7, #4]
 800101c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800101e:	4b0a      	ldr	r3, [pc, #40]	@ (8001048 <HAL_MspInit+0x60>)
 8001020:	685b      	ldr	r3, [r3, #4]
 8001022:	60fb      	str	r3, [r7, #12]
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800102a:	60fb      	str	r3, [r7, #12]
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001032:	60fb      	str	r3, [r7, #12]
 8001034:	4a04      	ldr	r2, [pc, #16]	@ (8001048 <HAL_MspInit+0x60>)
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800103a:	bf00      	nop
 800103c:	3714      	adds	r7, #20
 800103e:	46bd      	mov	sp, r7
 8001040:	bc80      	pop	{r7}
 8001042:	4770      	bx	lr
 8001044:	40021000 	.word	0x40021000
 8001048:	40010000 	.word	0x40010000

0800104c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b088      	sub	sp, #32
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001054:	f107 0310 	add.w	r3, r7, #16
 8001058:	2200      	movs	r2, #0
 800105a:	601a      	str	r2, [r3, #0]
 800105c:	605a      	str	r2, [r3, #4]
 800105e:	609a      	str	r2, [r3, #8]
 8001060:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	4a1b      	ldr	r2, [pc, #108]	@ (80010d4 <HAL_SPI_MspInit+0x88>)
 8001068:	4293      	cmp	r3, r2
 800106a:	d12f      	bne.n	80010cc <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800106c:	4b1a      	ldr	r3, [pc, #104]	@ (80010d8 <HAL_SPI_MspInit+0x8c>)
 800106e:	699b      	ldr	r3, [r3, #24]
 8001070:	4a19      	ldr	r2, [pc, #100]	@ (80010d8 <HAL_SPI_MspInit+0x8c>)
 8001072:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001076:	6193      	str	r3, [r2, #24]
 8001078:	4b17      	ldr	r3, [pc, #92]	@ (80010d8 <HAL_SPI_MspInit+0x8c>)
 800107a:	699b      	ldr	r3, [r3, #24]
 800107c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001080:	60fb      	str	r3, [r7, #12]
 8001082:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001084:	4b14      	ldr	r3, [pc, #80]	@ (80010d8 <HAL_SPI_MspInit+0x8c>)
 8001086:	699b      	ldr	r3, [r3, #24]
 8001088:	4a13      	ldr	r2, [pc, #76]	@ (80010d8 <HAL_SPI_MspInit+0x8c>)
 800108a:	f043 0304 	orr.w	r3, r3, #4
 800108e:	6193      	str	r3, [r2, #24]
 8001090:	4b11      	ldr	r3, [pc, #68]	@ (80010d8 <HAL_SPI_MspInit+0x8c>)
 8001092:	699b      	ldr	r3, [r3, #24]
 8001094:	f003 0304 	and.w	r3, r3, #4
 8001098:	60bb      	str	r3, [r7, #8]
 800109a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800109c:	23a0      	movs	r3, #160	@ 0xa0
 800109e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a0:	2302      	movs	r3, #2
 80010a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010a4:	2303      	movs	r3, #3
 80010a6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010a8:	f107 0310 	add.w	r3, r7, #16
 80010ac:	4619      	mov	r1, r3
 80010ae:	480b      	ldr	r0, [pc, #44]	@ (80010dc <HAL_SPI_MspInit+0x90>)
 80010b0:	f000 fa42 	bl	8001538 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80010b4:	2340      	movs	r3, #64	@ 0x40
 80010b6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010b8:	2300      	movs	r3, #0
 80010ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010bc:	2300      	movs	r3, #0
 80010be:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010c0:	f107 0310 	add.w	r3, r7, #16
 80010c4:	4619      	mov	r1, r3
 80010c6:	4805      	ldr	r0, [pc, #20]	@ (80010dc <HAL_SPI_MspInit+0x90>)
 80010c8:	f000 fa36 	bl	8001538 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80010cc:	bf00      	nop
 80010ce:	3720      	adds	r7, #32
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	40013000 	.word	0x40013000
 80010d8:	40021000 	.word	0x40021000
 80010dc:	40010800 	.word	0x40010800

080010e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80010e4:	bf00      	nop
 80010e6:	e7fd      	b.n	80010e4 <NMI_Handler+0x4>

080010e8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010ec:	bf00      	nop
 80010ee:	e7fd      	b.n	80010ec <HardFault_Handler+0x4>

080010f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010f4:	bf00      	nop
 80010f6:	e7fd      	b.n	80010f4 <MemManage_Handler+0x4>

080010f8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010fc:	bf00      	nop
 80010fe:	e7fd      	b.n	80010fc <BusFault_Handler+0x4>

08001100 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001104:	bf00      	nop
 8001106:	e7fd      	b.n	8001104 <UsageFault_Handler+0x4>

08001108 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800110c:	bf00      	nop
 800110e:	46bd      	mov	sp, r7
 8001110:	bc80      	pop	{r7}
 8001112:	4770      	bx	lr

08001114 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001118:	bf00      	nop
 800111a:	46bd      	mov	sp, r7
 800111c:	bc80      	pop	{r7}
 800111e:	4770      	bx	lr

08001120 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001124:	bf00      	nop
 8001126:	46bd      	mov	sp, r7
 8001128:	bc80      	pop	{r7}
 800112a:	4770      	bx	lr

0800112c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001130:	f000 f8b4 	bl	800129c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001134:	bf00      	nop
 8001136:	bd80      	pop	{r7, pc}

08001138 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800113c:	4802      	ldr	r0, [pc, #8]	@ (8001148 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800113e:	f000 fccc 	bl	8001ada <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8001142:	bf00      	nop
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	20000f4c 	.word	0x20000f4c

0800114c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b086      	sub	sp, #24
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001154:	4a14      	ldr	r2, [pc, #80]	@ (80011a8 <_sbrk+0x5c>)
 8001156:	4b15      	ldr	r3, [pc, #84]	@ (80011ac <_sbrk+0x60>)
 8001158:	1ad3      	subs	r3, r2, r3
 800115a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800115c:	697b      	ldr	r3, [r7, #20]
 800115e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001160:	4b13      	ldr	r3, [pc, #76]	@ (80011b0 <_sbrk+0x64>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d102      	bne.n	800116e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001168:	4b11      	ldr	r3, [pc, #68]	@ (80011b0 <_sbrk+0x64>)
 800116a:	4a12      	ldr	r2, [pc, #72]	@ (80011b4 <_sbrk+0x68>)
 800116c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800116e:	4b10      	ldr	r3, [pc, #64]	@ (80011b0 <_sbrk+0x64>)
 8001170:	681a      	ldr	r2, [r3, #0]
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	4413      	add	r3, r2
 8001176:	693a      	ldr	r2, [r7, #16]
 8001178:	429a      	cmp	r2, r3
 800117a:	d207      	bcs.n	800118c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800117c:	f007 fee0 	bl	8008f40 <__errno>
 8001180:	4603      	mov	r3, r0
 8001182:	220c      	movs	r2, #12
 8001184:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001186:	f04f 33ff 	mov.w	r3, #4294967295
 800118a:	e009      	b.n	80011a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800118c:	4b08      	ldr	r3, [pc, #32]	@ (80011b0 <_sbrk+0x64>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001192:	4b07      	ldr	r3, [pc, #28]	@ (80011b0 <_sbrk+0x64>)
 8001194:	681a      	ldr	r2, [r3, #0]
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	4413      	add	r3, r2
 800119a:	4a05      	ldr	r2, [pc, #20]	@ (80011b0 <_sbrk+0x64>)
 800119c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800119e:	68fb      	ldr	r3, [r7, #12]
}
 80011a0:	4618      	mov	r0, r3
 80011a2:	3718      	adds	r7, #24
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	20005000 	.word	0x20005000
 80011ac:	00000400 	.word	0x00000400
 80011b0:	2000027c 	.word	0x2000027c
 80011b4:	20001590 	.word	0x20001590

080011b8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011bc:	bf00      	nop
 80011be:	46bd      	mov	sp, r7
 80011c0:	bc80      	pop	{r7}
 80011c2:	4770      	bx	lr

080011c4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80011c4:	f7ff fff8 	bl	80011b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011c8:	480b      	ldr	r0, [pc, #44]	@ (80011f8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80011ca:	490c      	ldr	r1, [pc, #48]	@ (80011fc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80011cc:	4a0c      	ldr	r2, [pc, #48]	@ (8001200 <LoopFillZerobss+0x16>)
  movs r3, #0
 80011ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011d0:	e002      	b.n	80011d8 <LoopCopyDataInit>

080011d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011d6:	3304      	adds	r3, #4

080011d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011dc:	d3f9      	bcc.n	80011d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011de:	4a09      	ldr	r2, [pc, #36]	@ (8001204 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80011e0:	4c09      	ldr	r4, [pc, #36]	@ (8001208 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80011e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011e4:	e001      	b.n	80011ea <LoopFillZerobss>

080011e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011e8:	3204      	adds	r2, #4

080011ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011ec:	d3fb      	bcc.n	80011e6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011ee:	f007 fead 	bl	8008f4c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80011f2:	f7ff f96b 	bl	80004cc <main>
  bx lr
 80011f6:	4770      	bx	lr
  ldr r0, =_sdata
 80011f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011fc:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8001200:	08009954 	.word	0x08009954
  ldr r2, =_sbss
 8001204:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 8001208:	2000158c 	.word	0x2000158c

0800120c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800120c:	e7fe      	b.n	800120c <ADC1_2_IRQHandler>
	...

08001210 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001214:	4b08      	ldr	r3, [pc, #32]	@ (8001238 <HAL_Init+0x28>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a07      	ldr	r2, [pc, #28]	@ (8001238 <HAL_Init+0x28>)
 800121a:	f043 0310 	orr.w	r3, r3, #16
 800121e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001220:	2003      	movs	r0, #3
 8001222:	f000 f947 	bl	80014b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001226:	200f      	movs	r0, #15
 8001228:	f000 f808 	bl	800123c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800122c:	f7ff fedc 	bl	8000fe8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001230:	2300      	movs	r3, #0
}
 8001232:	4618      	mov	r0, r3
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	40022000 	.word	0x40022000

0800123c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001244:	4b12      	ldr	r3, [pc, #72]	@ (8001290 <HAL_InitTick+0x54>)
 8001246:	681a      	ldr	r2, [r3, #0]
 8001248:	4b12      	ldr	r3, [pc, #72]	@ (8001294 <HAL_InitTick+0x58>)
 800124a:	781b      	ldrb	r3, [r3, #0]
 800124c:	4619      	mov	r1, r3
 800124e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001252:	fbb3 f3f1 	udiv	r3, r3, r1
 8001256:	fbb2 f3f3 	udiv	r3, r2, r3
 800125a:	4618      	mov	r0, r3
 800125c:	f000 f95f 	bl	800151e <HAL_SYSTICK_Config>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001266:	2301      	movs	r3, #1
 8001268:	e00e      	b.n	8001288 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	2b0f      	cmp	r3, #15
 800126e:	d80a      	bhi.n	8001286 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001270:	2200      	movs	r2, #0
 8001272:	6879      	ldr	r1, [r7, #4]
 8001274:	f04f 30ff 	mov.w	r0, #4294967295
 8001278:	f000 f927 	bl	80014ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800127c:	4a06      	ldr	r2, [pc, #24]	@ (8001298 <HAL_InitTick+0x5c>)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001282:	2300      	movs	r3, #0
 8001284:	e000      	b.n	8001288 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001286:	2301      	movs	r3, #1
}
 8001288:	4618      	mov	r0, r3
 800128a:	3708      	adds	r7, #8
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
 8001290:	20000020 	.word	0x20000020
 8001294:	20000028 	.word	0x20000028
 8001298:	20000024 	.word	0x20000024

0800129c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012a0:	4b05      	ldr	r3, [pc, #20]	@ (80012b8 <HAL_IncTick+0x1c>)
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	461a      	mov	r2, r3
 80012a6:	4b05      	ldr	r3, [pc, #20]	@ (80012bc <HAL_IncTick+0x20>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4413      	add	r3, r2
 80012ac:	4a03      	ldr	r2, [pc, #12]	@ (80012bc <HAL_IncTick+0x20>)
 80012ae:	6013      	str	r3, [r2, #0]
}
 80012b0:	bf00      	nop
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bc80      	pop	{r7}
 80012b6:	4770      	bx	lr
 80012b8:	20000028 	.word	0x20000028
 80012bc:	20000280 	.word	0x20000280

080012c0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
  return uwTick;
 80012c4:	4b02      	ldr	r3, [pc, #8]	@ (80012d0 <HAL_GetTick+0x10>)
 80012c6:	681b      	ldr	r3, [r3, #0]
}
 80012c8:	4618      	mov	r0, r3
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bc80      	pop	{r7}
 80012ce:	4770      	bx	lr
 80012d0:	20000280 	.word	0x20000280

080012d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b084      	sub	sp, #16
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012dc:	f7ff fff0 	bl	80012c0 <HAL_GetTick>
 80012e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012ec:	d005      	beq.n	80012fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012ee:	4b0a      	ldr	r3, [pc, #40]	@ (8001318 <HAL_Delay+0x44>)
 80012f0:	781b      	ldrb	r3, [r3, #0]
 80012f2:	461a      	mov	r2, r3
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	4413      	add	r3, r2
 80012f8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012fa:	bf00      	nop
 80012fc:	f7ff ffe0 	bl	80012c0 <HAL_GetTick>
 8001300:	4602      	mov	r2, r0
 8001302:	68bb      	ldr	r3, [r7, #8]
 8001304:	1ad3      	subs	r3, r2, r3
 8001306:	68fa      	ldr	r2, [r7, #12]
 8001308:	429a      	cmp	r2, r3
 800130a:	d8f7      	bhi.n	80012fc <HAL_Delay+0x28>
  {
  }
}
 800130c:	bf00      	nop
 800130e:	bf00      	nop
 8001310:	3710      	adds	r7, #16
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	20000028 	.word	0x20000028

0800131c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800131c:	b480      	push	{r7}
 800131e:	b085      	sub	sp, #20
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	f003 0307 	and.w	r3, r3, #7
 800132a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800132c:	4b0c      	ldr	r3, [pc, #48]	@ (8001360 <__NVIC_SetPriorityGrouping+0x44>)
 800132e:	68db      	ldr	r3, [r3, #12]
 8001330:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001332:	68ba      	ldr	r2, [r7, #8]
 8001334:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001338:	4013      	ands	r3, r2
 800133a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001340:	68bb      	ldr	r3, [r7, #8]
 8001342:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001344:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001348:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800134c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800134e:	4a04      	ldr	r2, [pc, #16]	@ (8001360 <__NVIC_SetPriorityGrouping+0x44>)
 8001350:	68bb      	ldr	r3, [r7, #8]
 8001352:	60d3      	str	r3, [r2, #12]
}
 8001354:	bf00      	nop
 8001356:	3714      	adds	r7, #20
 8001358:	46bd      	mov	sp, r7
 800135a:	bc80      	pop	{r7}
 800135c:	4770      	bx	lr
 800135e:	bf00      	nop
 8001360:	e000ed00 	.word	0xe000ed00

08001364 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001368:	4b04      	ldr	r3, [pc, #16]	@ (800137c <__NVIC_GetPriorityGrouping+0x18>)
 800136a:	68db      	ldr	r3, [r3, #12]
 800136c:	0a1b      	lsrs	r3, r3, #8
 800136e:	f003 0307 	and.w	r3, r3, #7
}
 8001372:	4618      	mov	r0, r3
 8001374:	46bd      	mov	sp, r7
 8001376:	bc80      	pop	{r7}
 8001378:	4770      	bx	lr
 800137a:	bf00      	nop
 800137c:	e000ed00 	.word	0xe000ed00

08001380 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001380:	b480      	push	{r7}
 8001382:	b083      	sub	sp, #12
 8001384:	af00      	add	r7, sp, #0
 8001386:	4603      	mov	r3, r0
 8001388:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800138a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800138e:	2b00      	cmp	r3, #0
 8001390:	db0b      	blt.n	80013aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001392:	79fb      	ldrb	r3, [r7, #7]
 8001394:	f003 021f 	and.w	r2, r3, #31
 8001398:	4906      	ldr	r1, [pc, #24]	@ (80013b4 <__NVIC_EnableIRQ+0x34>)
 800139a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800139e:	095b      	lsrs	r3, r3, #5
 80013a0:	2001      	movs	r0, #1
 80013a2:	fa00 f202 	lsl.w	r2, r0, r2
 80013a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80013aa:	bf00      	nop
 80013ac:	370c      	adds	r7, #12
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bc80      	pop	{r7}
 80013b2:	4770      	bx	lr
 80013b4:	e000e100 	.word	0xe000e100

080013b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b083      	sub	sp, #12
 80013bc:	af00      	add	r7, sp, #0
 80013be:	4603      	mov	r3, r0
 80013c0:	6039      	str	r1, [r7, #0]
 80013c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	db0a      	blt.n	80013e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	b2da      	uxtb	r2, r3
 80013d0:	490c      	ldr	r1, [pc, #48]	@ (8001404 <__NVIC_SetPriority+0x4c>)
 80013d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013d6:	0112      	lsls	r2, r2, #4
 80013d8:	b2d2      	uxtb	r2, r2
 80013da:	440b      	add	r3, r1
 80013dc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013e0:	e00a      	b.n	80013f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	b2da      	uxtb	r2, r3
 80013e6:	4908      	ldr	r1, [pc, #32]	@ (8001408 <__NVIC_SetPriority+0x50>)
 80013e8:	79fb      	ldrb	r3, [r7, #7]
 80013ea:	f003 030f 	and.w	r3, r3, #15
 80013ee:	3b04      	subs	r3, #4
 80013f0:	0112      	lsls	r2, r2, #4
 80013f2:	b2d2      	uxtb	r2, r2
 80013f4:	440b      	add	r3, r1
 80013f6:	761a      	strb	r2, [r3, #24]
}
 80013f8:	bf00      	nop
 80013fa:	370c      	adds	r7, #12
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bc80      	pop	{r7}
 8001400:	4770      	bx	lr
 8001402:	bf00      	nop
 8001404:	e000e100 	.word	0xe000e100
 8001408:	e000ed00 	.word	0xe000ed00

0800140c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800140c:	b480      	push	{r7}
 800140e:	b089      	sub	sp, #36	@ 0x24
 8001410:	af00      	add	r7, sp, #0
 8001412:	60f8      	str	r0, [r7, #12]
 8001414:	60b9      	str	r1, [r7, #8]
 8001416:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	f003 0307 	and.w	r3, r3, #7
 800141e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001420:	69fb      	ldr	r3, [r7, #28]
 8001422:	f1c3 0307 	rsb	r3, r3, #7
 8001426:	2b04      	cmp	r3, #4
 8001428:	bf28      	it	cs
 800142a:	2304      	movcs	r3, #4
 800142c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800142e:	69fb      	ldr	r3, [r7, #28]
 8001430:	3304      	adds	r3, #4
 8001432:	2b06      	cmp	r3, #6
 8001434:	d902      	bls.n	800143c <NVIC_EncodePriority+0x30>
 8001436:	69fb      	ldr	r3, [r7, #28]
 8001438:	3b03      	subs	r3, #3
 800143a:	e000      	b.n	800143e <NVIC_EncodePriority+0x32>
 800143c:	2300      	movs	r3, #0
 800143e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001440:	f04f 32ff 	mov.w	r2, #4294967295
 8001444:	69bb      	ldr	r3, [r7, #24]
 8001446:	fa02 f303 	lsl.w	r3, r2, r3
 800144a:	43da      	mvns	r2, r3
 800144c:	68bb      	ldr	r3, [r7, #8]
 800144e:	401a      	ands	r2, r3
 8001450:	697b      	ldr	r3, [r7, #20]
 8001452:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001454:	f04f 31ff 	mov.w	r1, #4294967295
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	fa01 f303 	lsl.w	r3, r1, r3
 800145e:	43d9      	mvns	r1, r3
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001464:	4313      	orrs	r3, r2
         );
}
 8001466:	4618      	mov	r0, r3
 8001468:	3724      	adds	r7, #36	@ 0x24
 800146a:	46bd      	mov	sp, r7
 800146c:	bc80      	pop	{r7}
 800146e:	4770      	bx	lr

08001470 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	3b01      	subs	r3, #1
 800147c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001480:	d301      	bcc.n	8001486 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001482:	2301      	movs	r3, #1
 8001484:	e00f      	b.n	80014a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001486:	4a0a      	ldr	r2, [pc, #40]	@ (80014b0 <SysTick_Config+0x40>)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	3b01      	subs	r3, #1
 800148c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800148e:	210f      	movs	r1, #15
 8001490:	f04f 30ff 	mov.w	r0, #4294967295
 8001494:	f7ff ff90 	bl	80013b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001498:	4b05      	ldr	r3, [pc, #20]	@ (80014b0 <SysTick_Config+0x40>)
 800149a:	2200      	movs	r2, #0
 800149c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800149e:	4b04      	ldr	r3, [pc, #16]	@ (80014b0 <SysTick_Config+0x40>)
 80014a0:	2207      	movs	r2, #7
 80014a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014a4:	2300      	movs	r3, #0
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	3708      	adds	r7, #8
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	e000e010 	.word	0xe000e010

080014b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b082      	sub	sp, #8
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014bc:	6878      	ldr	r0, [r7, #4]
 80014be:	f7ff ff2d 	bl	800131c <__NVIC_SetPriorityGrouping>
}
 80014c2:	bf00      	nop
 80014c4:	3708      	adds	r7, #8
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}

080014ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014ca:	b580      	push	{r7, lr}
 80014cc:	b086      	sub	sp, #24
 80014ce:	af00      	add	r7, sp, #0
 80014d0:	4603      	mov	r3, r0
 80014d2:	60b9      	str	r1, [r7, #8]
 80014d4:	607a      	str	r2, [r7, #4]
 80014d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014d8:	2300      	movs	r3, #0
 80014da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014dc:	f7ff ff42 	bl	8001364 <__NVIC_GetPriorityGrouping>
 80014e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014e2:	687a      	ldr	r2, [r7, #4]
 80014e4:	68b9      	ldr	r1, [r7, #8]
 80014e6:	6978      	ldr	r0, [r7, #20]
 80014e8:	f7ff ff90 	bl	800140c <NVIC_EncodePriority>
 80014ec:	4602      	mov	r2, r0
 80014ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014f2:	4611      	mov	r1, r2
 80014f4:	4618      	mov	r0, r3
 80014f6:	f7ff ff5f 	bl	80013b8 <__NVIC_SetPriority>
}
 80014fa:	bf00      	nop
 80014fc:	3718      	adds	r7, #24
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}

08001502 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001502:	b580      	push	{r7, lr}
 8001504:	b082      	sub	sp, #8
 8001506:	af00      	add	r7, sp, #0
 8001508:	4603      	mov	r3, r0
 800150a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800150c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001510:	4618      	mov	r0, r3
 8001512:	f7ff ff35 	bl	8001380 <__NVIC_EnableIRQ>
}
 8001516:	bf00      	nop
 8001518:	3708      	adds	r7, #8
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}

0800151e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800151e:	b580      	push	{r7, lr}
 8001520:	b082      	sub	sp, #8
 8001522:	af00      	add	r7, sp, #0
 8001524:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001526:	6878      	ldr	r0, [r7, #4]
 8001528:	f7ff ffa2 	bl	8001470 <SysTick_Config>
 800152c:	4603      	mov	r3, r0
}
 800152e:	4618      	mov	r0, r3
 8001530:	3708      	adds	r7, #8
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
	...

08001538 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001538:	b480      	push	{r7}
 800153a:	b08b      	sub	sp, #44	@ 0x2c
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
 8001540:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001542:	2300      	movs	r3, #0
 8001544:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001546:	2300      	movs	r3, #0
 8001548:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800154a:	e169      	b.n	8001820 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800154c:	2201      	movs	r2, #1
 800154e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001550:	fa02 f303 	lsl.w	r3, r2, r3
 8001554:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	69fa      	ldr	r2, [r7, #28]
 800155c:	4013      	ands	r3, r2
 800155e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001560:	69ba      	ldr	r2, [r7, #24]
 8001562:	69fb      	ldr	r3, [r7, #28]
 8001564:	429a      	cmp	r2, r3
 8001566:	f040 8158 	bne.w	800181a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	4a9a      	ldr	r2, [pc, #616]	@ (80017d8 <HAL_GPIO_Init+0x2a0>)
 8001570:	4293      	cmp	r3, r2
 8001572:	d05e      	beq.n	8001632 <HAL_GPIO_Init+0xfa>
 8001574:	4a98      	ldr	r2, [pc, #608]	@ (80017d8 <HAL_GPIO_Init+0x2a0>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d875      	bhi.n	8001666 <HAL_GPIO_Init+0x12e>
 800157a:	4a98      	ldr	r2, [pc, #608]	@ (80017dc <HAL_GPIO_Init+0x2a4>)
 800157c:	4293      	cmp	r3, r2
 800157e:	d058      	beq.n	8001632 <HAL_GPIO_Init+0xfa>
 8001580:	4a96      	ldr	r2, [pc, #600]	@ (80017dc <HAL_GPIO_Init+0x2a4>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d86f      	bhi.n	8001666 <HAL_GPIO_Init+0x12e>
 8001586:	4a96      	ldr	r2, [pc, #600]	@ (80017e0 <HAL_GPIO_Init+0x2a8>)
 8001588:	4293      	cmp	r3, r2
 800158a:	d052      	beq.n	8001632 <HAL_GPIO_Init+0xfa>
 800158c:	4a94      	ldr	r2, [pc, #592]	@ (80017e0 <HAL_GPIO_Init+0x2a8>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d869      	bhi.n	8001666 <HAL_GPIO_Init+0x12e>
 8001592:	4a94      	ldr	r2, [pc, #592]	@ (80017e4 <HAL_GPIO_Init+0x2ac>)
 8001594:	4293      	cmp	r3, r2
 8001596:	d04c      	beq.n	8001632 <HAL_GPIO_Init+0xfa>
 8001598:	4a92      	ldr	r2, [pc, #584]	@ (80017e4 <HAL_GPIO_Init+0x2ac>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d863      	bhi.n	8001666 <HAL_GPIO_Init+0x12e>
 800159e:	4a92      	ldr	r2, [pc, #584]	@ (80017e8 <HAL_GPIO_Init+0x2b0>)
 80015a0:	4293      	cmp	r3, r2
 80015a2:	d046      	beq.n	8001632 <HAL_GPIO_Init+0xfa>
 80015a4:	4a90      	ldr	r2, [pc, #576]	@ (80017e8 <HAL_GPIO_Init+0x2b0>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d85d      	bhi.n	8001666 <HAL_GPIO_Init+0x12e>
 80015aa:	2b12      	cmp	r3, #18
 80015ac:	d82a      	bhi.n	8001604 <HAL_GPIO_Init+0xcc>
 80015ae:	2b12      	cmp	r3, #18
 80015b0:	d859      	bhi.n	8001666 <HAL_GPIO_Init+0x12e>
 80015b2:	a201      	add	r2, pc, #4	@ (adr r2, 80015b8 <HAL_GPIO_Init+0x80>)
 80015b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015b8:	08001633 	.word	0x08001633
 80015bc:	0800160d 	.word	0x0800160d
 80015c0:	0800161f 	.word	0x0800161f
 80015c4:	08001661 	.word	0x08001661
 80015c8:	08001667 	.word	0x08001667
 80015cc:	08001667 	.word	0x08001667
 80015d0:	08001667 	.word	0x08001667
 80015d4:	08001667 	.word	0x08001667
 80015d8:	08001667 	.word	0x08001667
 80015dc:	08001667 	.word	0x08001667
 80015e0:	08001667 	.word	0x08001667
 80015e4:	08001667 	.word	0x08001667
 80015e8:	08001667 	.word	0x08001667
 80015ec:	08001667 	.word	0x08001667
 80015f0:	08001667 	.word	0x08001667
 80015f4:	08001667 	.word	0x08001667
 80015f8:	08001667 	.word	0x08001667
 80015fc:	08001615 	.word	0x08001615
 8001600:	08001629 	.word	0x08001629
 8001604:	4a79      	ldr	r2, [pc, #484]	@ (80017ec <HAL_GPIO_Init+0x2b4>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d013      	beq.n	8001632 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800160a:	e02c      	b.n	8001666 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	68db      	ldr	r3, [r3, #12]
 8001610:	623b      	str	r3, [r7, #32]
          break;
 8001612:	e029      	b.n	8001668 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	68db      	ldr	r3, [r3, #12]
 8001618:	3304      	adds	r3, #4
 800161a:	623b      	str	r3, [r7, #32]
          break;
 800161c:	e024      	b.n	8001668 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	68db      	ldr	r3, [r3, #12]
 8001622:	3308      	adds	r3, #8
 8001624:	623b      	str	r3, [r7, #32]
          break;
 8001626:	e01f      	b.n	8001668 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	68db      	ldr	r3, [r3, #12]
 800162c:	330c      	adds	r3, #12
 800162e:	623b      	str	r3, [r7, #32]
          break;
 8001630:	e01a      	b.n	8001668 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	689b      	ldr	r3, [r3, #8]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d102      	bne.n	8001640 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800163a:	2304      	movs	r3, #4
 800163c:	623b      	str	r3, [r7, #32]
          break;
 800163e:	e013      	b.n	8001668 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	689b      	ldr	r3, [r3, #8]
 8001644:	2b01      	cmp	r3, #1
 8001646:	d105      	bne.n	8001654 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001648:	2308      	movs	r3, #8
 800164a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	69fa      	ldr	r2, [r7, #28]
 8001650:	611a      	str	r2, [r3, #16]
          break;
 8001652:	e009      	b.n	8001668 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001654:	2308      	movs	r3, #8
 8001656:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	69fa      	ldr	r2, [r7, #28]
 800165c:	615a      	str	r2, [r3, #20]
          break;
 800165e:	e003      	b.n	8001668 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001660:	2300      	movs	r3, #0
 8001662:	623b      	str	r3, [r7, #32]
          break;
 8001664:	e000      	b.n	8001668 <HAL_GPIO_Init+0x130>
          break;
 8001666:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001668:	69bb      	ldr	r3, [r7, #24]
 800166a:	2bff      	cmp	r3, #255	@ 0xff
 800166c:	d801      	bhi.n	8001672 <HAL_GPIO_Init+0x13a>
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	e001      	b.n	8001676 <HAL_GPIO_Init+0x13e>
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	3304      	adds	r3, #4
 8001676:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001678:	69bb      	ldr	r3, [r7, #24]
 800167a:	2bff      	cmp	r3, #255	@ 0xff
 800167c:	d802      	bhi.n	8001684 <HAL_GPIO_Init+0x14c>
 800167e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001680:	009b      	lsls	r3, r3, #2
 8001682:	e002      	b.n	800168a <HAL_GPIO_Init+0x152>
 8001684:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001686:	3b08      	subs	r3, #8
 8001688:	009b      	lsls	r3, r3, #2
 800168a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	681a      	ldr	r2, [r3, #0]
 8001690:	210f      	movs	r1, #15
 8001692:	693b      	ldr	r3, [r7, #16]
 8001694:	fa01 f303 	lsl.w	r3, r1, r3
 8001698:	43db      	mvns	r3, r3
 800169a:	401a      	ands	r2, r3
 800169c:	6a39      	ldr	r1, [r7, #32]
 800169e:	693b      	ldr	r3, [r7, #16]
 80016a0:	fa01 f303 	lsl.w	r3, r1, r3
 80016a4:	431a      	orrs	r2, r3
 80016a6:	697b      	ldr	r3, [r7, #20]
 80016a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	f000 80b1 	beq.w	800181a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80016b8:	4b4d      	ldr	r3, [pc, #308]	@ (80017f0 <HAL_GPIO_Init+0x2b8>)
 80016ba:	699b      	ldr	r3, [r3, #24]
 80016bc:	4a4c      	ldr	r2, [pc, #304]	@ (80017f0 <HAL_GPIO_Init+0x2b8>)
 80016be:	f043 0301 	orr.w	r3, r3, #1
 80016c2:	6193      	str	r3, [r2, #24]
 80016c4:	4b4a      	ldr	r3, [pc, #296]	@ (80017f0 <HAL_GPIO_Init+0x2b8>)
 80016c6:	699b      	ldr	r3, [r3, #24]
 80016c8:	f003 0301 	and.w	r3, r3, #1
 80016cc:	60bb      	str	r3, [r7, #8]
 80016ce:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80016d0:	4a48      	ldr	r2, [pc, #288]	@ (80017f4 <HAL_GPIO_Init+0x2bc>)
 80016d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016d4:	089b      	lsrs	r3, r3, #2
 80016d6:	3302      	adds	r3, #2
 80016d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016dc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80016de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016e0:	f003 0303 	and.w	r3, r3, #3
 80016e4:	009b      	lsls	r3, r3, #2
 80016e6:	220f      	movs	r2, #15
 80016e8:	fa02 f303 	lsl.w	r3, r2, r3
 80016ec:	43db      	mvns	r3, r3
 80016ee:	68fa      	ldr	r2, [r7, #12]
 80016f0:	4013      	ands	r3, r2
 80016f2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	4a40      	ldr	r2, [pc, #256]	@ (80017f8 <HAL_GPIO_Init+0x2c0>)
 80016f8:	4293      	cmp	r3, r2
 80016fa:	d013      	beq.n	8001724 <HAL_GPIO_Init+0x1ec>
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	4a3f      	ldr	r2, [pc, #252]	@ (80017fc <HAL_GPIO_Init+0x2c4>)
 8001700:	4293      	cmp	r3, r2
 8001702:	d00d      	beq.n	8001720 <HAL_GPIO_Init+0x1e8>
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	4a3e      	ldr	r2, [pc, #248]	@ (8001800 <HAL_GPIO_Init+0x2c8>)
 8001708:	4293      	cmp	r3, r2
 800170a:	d007      	beq.n	800171c <HAL_GPIO_Init+0x1e4>
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	4a3d      	ldr	r2, [pc, #244]	@ (8001804 <HAL_GPIO_Init+0x2cc>)
 8001710:	4293      	cmp	r3, r2
 8001712:	d101      	bne.n	8001718 <HAL_GPIO_Init+0x1e0>
 8001714:	2303      	movs	r3, #3
 8001716:	e006      	b.n	8001726 <HAL_GPIO_Init+0x1ee>
 8001718:	2304      	movs	r3, #4
 800171a:	e004      	b.n	8001726 <HAL_GPIO_Init+0x1ee>
 800171c:	2302      	movs	r3, #2
 800171e:	e002      	b.n	8001726 <HAL_GPIO_Init+0x1ee>
 8001720:	2301      	movs	r3, #1
 8001722:	e000      	b.n	8001726 <HAL_GPIO_Init+0x1ee>
 8001724:	2300      	movs	r3, #0
 8001726:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001728:	f002 0203 	and.w	r2, r2, #3
 800172c:	0092      	lsls	r2, r2, #2
 800172e:	4093      	lsls	r3, r2
 8001730:	68fa      	ldr	r2, [r7, #12]
 8001732:	4313      	orrs	r3, r2
 8001734:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001736:	492f      	ldr	r1, [pc, #188]	@ (80017f4 <HAL_GPIO_Init+0x2bc>)
 8001738:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800173a:	089b      	lsrs	r3, r3, #2
 800173c:	3302      	adds	r3, #2
 800173e:	68fa      	ldr	r2, [r7, #12]
 8001740:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800174c:	2b00      	cmp	r3, #0
 800174e:	d006      	beq.n	800175e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001750:	4b2d      	ldr	r3, [pc, #180]	@ (8001808 <HAL_GPIO_Init+0x2d0>)
 8001752:	689a      	ldr	r2, [r3, #8]
 8001754:	492c      	ldr	r1, [pc, #176]	@ (8001808 <HAL_GPIO_Init+0x2d0>)
 8001756:	69bb      	ldr	r3, [r7, #24]
 8001758:	4313      	orrs	r3, r2
 800175a:	608b      	str	r3, [r1, #8]
 800175c:	e006      	b.n	800176c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800175e:	4b2a      	ldr	r3, [pc, #168]	@ (8001808 <HAL_GPIO_Init+0x2d0>)
 8001760:	689a      	ldr	r2, [r3, #8]
 8001762:	69bb      	ldr	r3, [r7, #24]
 8001764:	43db      	mvns	r3, r3
 8001766:	4928      	ldr	r1, [pc, #160]	@ (8001808 <HAL_GPIO_Init+0x2d0>)
 8001768:	4013      	ands	r3, r2
 800176a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001774:	2b00      	cmp	r3, #0
 8001776:	d006      	beq.n	8001786 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001778:	4b23      	ldr	r3, [pc, #140]	@ (8001808 <HAL_GPIO_Init+0x2d0>)
 800177a:	68da      	ldr	r2, [r3, #12]
 800177c:	4922      	ldr	r1, [pc, #136]	@ (8001808 <HAL_GPIO_Init+0x2d0>)
 800177e:	69bb      	ldr	r3, [r7, #24]
 8001780:	4313      	orrs	r3, r2
 8001782:	60cb      	str	r3, [r1, #12]
 8001784:	e006      	b.n	8001794 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001786:	4b20      	ldr	r3, [pc, #128]	@ (8001808 <HAL_GPIO_Init+0x2d0>)
 8001788:	68da      	ldr	r2, [r3, #12]
 800178a:	69bb      	ldr	r3, [r7, #24]
 800178c:	43db      	mvns	r3, r3
 800178e:	491e      	ldr	r1, [pc, #120]	@ (8001808 <HAL_GPIO_Init+0x2d0>)
 8001790:	4013      	ands	r3, r2
 8001792:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800179c:	2b00      	cmp	r3, #0
 800179e:	d006      	beq.n	80017ae <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80017a0:	4b19      	ldr	r3, [pc, #100]	@ (8001808 <HAL_GPIO_Init+0x2d0>)
 80017a2:	685a      	ldr	r2, [r3, #4]
 80017a4:	4918      	ldr	r1, [pc, #96]	@ (8001808 <HAL_GPIO_Init+0x2d0>)
 80017a6:	69bb      	ldr	r3, [r7, #24]
 80017a8:	4313      	orrs	r3, r2
 80017aa:	604b      	str	r3, [r1, #4]
 80017ac:	e006      	b.n	80017bc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80017ae:	4b16      	ldr	r3, [pc, #88]	@ (8001808 <HAL_GPIO_Init+0x2d0>)
 80017b0:	685a      	ldr	r2, [r3, #4]
 80017b2:	69bb      	ldr	r3, [r7, #24]
 80017b4:	43db      	mvns	r3, r3
 80017b6:	4914      	ldr	r1, [pc, #80]	@ (8001808 <HAL_GPIO_Init+0x2d0>)
 80017b8:	4013      	ands	r3, r2
 80017ba:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d021      	beq.n	800180c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80017c8:	4b0f      	ldr	r3, [pc, #60]	@ (8001808 <HAL_GPIO_Init+0x2d0>)
 80017ca:	681a      	ldr	r2, [r3, #0]
 80017cc:	490e      	ldr	r1, [pc, #56]	@ (8001808 <HAL_GPIO_Init+0x2d0>)
 80017ce:	69bb      	ldr	r3, [r7, #24]
 80017d0:	4313      	orrs	r3, r2
 80017d2:	600b      	str	r3, [r1, #0]
 80017d4:	e021      	b.n	800181a <HAL_GPIO_Init+0x2e2>
 80017d6:	bf00      	nop
 80017d8:	10320000 	.word	0x10320000
 80017dc:	10310000 	.word	0x10310000
 80017e0:	10220000 	.word	0x10220000
 80017e4:	10210000 	.word	0x10210000
 80017e8:	10120000 	.word	0x10120000
 80017ec:	10110000 	.word	0x10110000
 80017f0:	40021000 	.word	0x40021000
 80017f4:	40010000 	.word	0x40010000
 80017f8:	40010800 	.word	0x40010800
 80017fc:	40010c00 	.word	0x40010c00
 8001800:	40011000 	.word	0x40011000
 8001804:	40011400 	.word	0x40011400
 8001808:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800180c:	4b0b      	ldr	r3, [pc, #44]	@ (800183c <HAL_GPIO_Init+0x304>)
 800180e:	681a      	ldr	r2, [r3, #0]
 8001810:	69bb      	ldr	r3, [r7, #24]
 8001812:	43db      	mvns	r3, r3
 8001814:	4909      	ldr	r1, [pc, #36]	@ (800183c <HAL_GPIO_Init+0x304>)
 8001816:	4013      	ands	r3, r2
 8001818:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800181a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800181c:	3301      	adds	r3, #1
 800181e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	681a      	ldr	r2, [r3, #0]
 8001824:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001826:	fa22 f303 	lsr.w	r3, r2, r3
 800182a:	2b00      	cmp	r3, #0
 800182c:	f47f ae8e 	bne.w	800154c <HAL_GPIO_Init+0x14>
  }
}
 8001830:	bf00      	nop
 8001832:	bf00      	nop
 8001834:	372c      	adds	r7, #44	@ 0x2c
 8001836:	46bd      	mov	sp, r7
 8001838:	bc80      	pop	{r7}
 800183a:	4770      	bx	lr
 800183c:	40010400 	.word	0x40010400

08001840 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001840:	b480      	push	{r7}
 8001842:	b083      	sub	sp, #12
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
 8001848:	460b      	mov	r3, r1
 800184a:	807b      	strh	r3, [r7, #2]
 800184c:	4613      	mov	r3, r2
 800184e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001850:	787b      	ldrb	r3, [r7, #1]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d003      	beq.n	800185e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001856:	887a      	ldrh	r2, [r7, #2]
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800185c:	e003      	b.n	8001866 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800185e:	887b      	ldrh	r3, [r7, #2]
 8001860:	041a      	lsls	r2, r3, #16
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	611a      	str	r2, [r3, #16]
}
 8001866:	bf00      	nop
 8001868:	370c      	adds	r7, #12
 800186a:	46bd      	mov	sp, r7
 800186c:	bc80      	pop	{r7}
 800186e:	4770      	bx	lr

08001870 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001870:	b480      	push	{r7}
 8001872:	b085      	sub	sp, #20
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
 8001878:	460b      	mov	r3, r1
 800187a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	68db      	ldr	r3, [r3, #12]
 8001880:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001882:	887a      	ldrh	r2, [r7, #2]
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	4013      	ands	r3, r2
 8001888:	041a      	lsls	r2, r3, #16
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	43d9      	mvns	r1, r3
 800188e:	887b      	ldrh	r3, [r7, #2]
 8001890:	400b      	ands	r3, r1
 8001892:	431a      	orrs	r2, r3
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	611a      	str	r2, [r3, #16]
}
 8001898:	bf00      	nop
 800189a:	3714      	adds	r7, #20
 800189c:	46bd      	mov	sp, r7
 800189e:	bc80      	pop	{r7}
 80018a0:	4770      	bx	lr

080018a2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80018a2:	b580      	push	{r7, lr}
 80018a4:	b084      	sub	sp, #16
 80018a6:	af00      	add	r7, sp, #0
 80018a8:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d101      	bne.n	80018b4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80018b0:	2301      	movs	r3, #1
 80018b2:	e0e8      	b.n	8001a86 <HAL_PCD_Init+0x1e4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 80018ba:	b2db      	uxtb	r3, r3
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d106      	bne.n	80018ce <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2200      	movs	r2, #0
 80018c4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80018c8:	6878      	ldr	r0, [r7, #4]
 80018ca:	f007 f867 	bl	800899c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2203      	movs	r2, #3
 80018d2:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2200      	movs	r2, #0
 80018da:	715a      	strb	r2, [r3, #5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4618      	mov	r0, r3
 80018e2:	f002 ff8b 	bl	80047fc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6818      	ldr	r0, [r3, #0]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	3304      	adds	r3, #4
 80018ee:	cb0e      	ldmia	r3, {r1, r2, r3}
 80018f0:	f002 ff61 	bl	80047b6 <USB_CoreInit>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d005      	beq.n	8001906 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2202      	movs	r2, #2
 80018fe:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8001902:	2301      	movs	r3, #1
 8001904:	e0bf      	b.n	8001a86 <HAL_PCD_Init+0x1e4>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	2100      	movs	r1, #0
 800190c:	4618      	mov	r0, r3
 800190e:	f002 ff8f 	bl	8004830 <USB_SetCurrentMode>
 8001912:	4603      	mov	r3, r0
 8001914:	2b00      	cmp	r3, #0
 8001916:	d005      	beq.n	8001924 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2202      	movs	r2, #2
 800191c:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8001920:	2301      	movs	r3, #1
 8001922:	e0b0      	b.n	8001a86 <HAL_PCD_Init+0x1e4>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001924:	2300      	movs	r3, #0
 8001926:	73fb      	strb	r3, [r7, #15]
 8001928:	e03e      	b.n	80019a8 <HAL_PCD_Init+0x106>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800192a:	7bfa      	ldrb	r2, [r7, #15]
 800192c:	6879      	ldr	r1, [r7, #4]
 800192e:	4613      	mov	r3, r2
 8001930:	009b      	lsls	r3, r3, #2
 8001932:	4413      	add	r3, r2
 8001934:	00db      	lsls	r3, r3, #3
 8001936:	440b      	add	r3, r1
 8001938:	3311      	adds	r3, #17
 800193a:	2201      	movs	r2, #1
 800193c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800193e:	7bfa      	ldrb	r2, [r7, #15]
 8001940:	6879      	ldr	r1, [r7, #4]
 8001942:	4613      	mov	r3, r2
 8001944:	009b      	lsls	r3, r3, #2
 8001946:	4413      	add	r3, r2
 8001948:	00db      	lsls	r3, r3, #3
 800194a:	440b      	add	r3, r1
 800194c:	3310      	adds	r3, #16
 800194e:	7bfa      	ldrb	r2, [r7, #15]
 8001950:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001952:	7bfa      	ldrb	r2, [r7, #15]
 8001954:	6879      	ldr	r1, [r7, #4]
 8001956:	4613      	mov	r3, r2
 8001958:	009b      	lsls	r3, r3, #2
 800195a:	4413      	add	r3, r2
 800195c:	00db      	lsls	r3, r3, #3
 800195e:	440b      	add	r3, r1
 8001960:	3313      	adds	r3, #19
 8001962:	2200      	movs	r2, #0
 8001964:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001966:	7bfa      	ldrb	r2, [r7, #15]
 8001968:	6879      	ldr	r1, [r7, #4]
 800196a:	4613      	mov	r3, r2
 800196c:	009b      	lsls	r3, r3, #2
 800196e:	4413      	add	r3, r2
 8001970:	00db      	lsls	r3, r3, #3
 8001972:	440b      	add	r3, r1
 8001974:	3320      	adds	r3, #32
 8001976:	2200      	movs	r2, #0
 8001978:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800197a:	7bfa      	ldrb	r2, [r7, #15]
 800197c:	6879      	ldr	r1, [r7, #4]
 800197e:	4613      	mov	r3, r2
 8001980:	009b      	lsls	r3, r3, #2
 8001982:	4413      	add	r3, r2
 8001984:	00db      	lsls	r3, r3, #3
 8001986:	440b      	add	r3, r1
 8001988:	3324      	adds	r3, #36	@ 0x24
 800198a:	2200      	movs	r2, #0
 800198c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800198e:	7bfb      	ldrb	r3, [r7, #15]
 8001990:	6879      	ldr	r1, [r7, #4]
 8001992:	1c5a      	adds	r2, r3, #1
 8001994:	4613      	mov	r3, r2
 8001996:	009b      	lsls	r3, r3, #2
 8001998:	4413      	add	r3, r2
 800199a:	00db      	lsls	r3, r3, #3
 800199c:	440b      	add	r3, r1
 800199e:	2200      	movs	r2, #0
 80019a0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80019a2:	7bfb      	ldrb	r3, [r7, #15]
 80019a4:	3301      	adds	r3, #1
 80019a6:	73fb      	strb	r3, [r7, #15]
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	791b      	ldrb	r3, [r3, #4]
 80019ac:	7bfa      	ldrb	r2, [r7, #15]
 80019ae:	429a      	cmp	r2, r3
 80019b0:	d3bb      	bcc.n	800192a <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80019b2:	2300      	movs	r3, #0
 80019b4:	73fb      	strb	r3, [r7, #15]
 80019b6:	e044      	b.n	8001a42 <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80019b8:	7bfa      	ldrb	r2, [r7, #15]
 80019ba:	6879      	ldr	r1, [r7, #4]
 80019bc:	4613      	mov	r3, r2
 80019be:	009b      	lsls	r3, r3, #2
 80019c0:	4413      	add	r3, r2
 80019c2:	00db      	lsls	r3, r3, #3
 80019c4:	440b      	add	r3, r1
 80019c6:	f203 1351 	addw	r3, r3, #337	@ 0x151
 80019ca:	2200      	movs	r2, #0
 80019cc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80019ce:	7bfa      	ldrb	r2, [r7, #15]
 80019d0:	6879      	ldr	r1, [r7, #4]
 80019d2:	4613      	mov	r3, r2
 80019d4:	009b      	lsls	r3, r3, #2
 80019d6:	4413      	add	r3, r2
 80019d8:	00db      	lsls	r3, r3, #3
 80019da:	440b      	add	r3, r1
 80019dc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80019e0:	7bfa      	ldrb	r2, [r7, #15]
 80019e2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80019e4:	7bfa      	ldrb	r2, [r7, #15]
 80019e6:	6879      	ldr	r1, [r7, #4]
 80019e8:	4613      	mov	r3, r2
 80019ea:	009b      	lsls	r3, r3, #2
 80019ec:	4413      	add	r3, r2
 80019ee:	00db      	lsls	r3, r3, #3
 80019f0:	440b      	add	r3, r1
 80019f2:	f203 1353 	addw	r3, r3, #339	@ 0x153
 80019f6:	2200      	movs	r2, #0
 80019f8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80019fa:	7bfa      	ldrb	r2, [r7, #15]
 80019fc:	6879      	ldr	r1, [r7, #4]
 80019fe:	4613      	mov	r3, r2
 8001a00:	009b      	lsls	r3, r3, #2
 8001a02:	4413      	add	r3, r2
 8001a04:	00db      	lsls	r3, r3, #3
 8001a06:	440b      	add	r3, r1
 8001a08:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001a10:	7bfa      	ldrb	r2, [r7, #15]
 8001a12:	6879      	ldr	r1, [r7, #4]
 8001a14:	4613      	mov	r3, r2
 8001a16:	009b      	lsls	r3, r3, #2
 8001a18:	4413      	add	r3, r2
 8001a1a:	00db      	lsls	r3, r3, #3
 8001a1c:	440b      	add	r3, r1
 8001a1e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8001a22:	2200      	movs	r2, #0
 8001a24:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001a26:	7bfa      	ldrb	r2, [r7, #15]
 8001a28:	6879      	ldr	r1, [r7, #4]
 8001a2a:	4613      	mov	r3, r2
 8001a2c:	009b      	lsls	r3, r3, #2
 8001a2e:	4413      	add	r3, r2
 8001a30:	00db      	lsls	r3, r3, #3
 8001a32:	440b      	add	r3, r1
 8001a34:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001a38:	2200      	movs	r2, #0
 8001a3a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a3c:	7bfb      	ldrb	r3, [r7, #15]
 8001a3e:	3301      	adds	r3, #1
 8001a40:	73fb      	strb	r3, [r7, #15]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	791b      	ldrb	r3, [r3, #4]
 8001a46:	7bfa      	ldrb	r2, [r7, #15]
 8001a48:	429a      	cmp	r2, r3
 8001a4a:	d3b5      	bcc.n	80019b8 <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6818      	ldr	r0, [r3, #0]
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	3304      	adds	r3, #4
 8001a54:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a56:	f002 fef7 	bl	8004848 <USB_DevInit>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d005      	beq.n	8001a6c <HAL_PCD_Init+0x1ca>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2202      	movs	r2, #2
 8001a64:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	e00c      	b.n	8001a86 <HAL_PCD_Init+0x1e4>
  }

  hpcd->USB_Address = 0U;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2200      	movs	r2, #0
 8001a70:	735a      	strb	r2, [r3, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2201      	movs	r2, #1
 8001a76:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f005 f977 	bl	8006d72 <USB_DevDisconnect>

  return HAL_OK;
 8001a84:	2300      	movs	r3, #0
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	3710      	adds	r7, #16
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}

08001a8e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001a8e:	b580      	push	{r7, lr}
 8001a90:	b082      	sub	sp, #8
 8001a92:	af00      	add	r7, sp, #0
 8001a94:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001a9c:	2b01      	cmp	r3, #1
 8001a9e:	d101      	bne.n	8001aa4 <HAL_PCD_Start+0x16>
 8001aa0:	2302      	movs	r3, #2
 8001aa2:	e016      	b.n	8001ad2 <HAL_PCD_Start+0x44>
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f002 fe8d 	bl	80047d0 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001ab6:	2101      	movs	r1, #1
 8001ab8:	6878      	ldr	r0, [r7, #4]
 8001aba:	f007 f9e2 	bl	8008e82 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f005 f94b 	bl	8006d5e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2200      	movs	r2, #0
 8001acc:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8001ad0:	2300      	movs	r3, #0
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	3708      	adds	r7, #8
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}

08001ada <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001ada:	b580      	push	{r7, lr}
 8001adc:	b088      	sub	sp, #32
 8001ade:	af00      	add	r7, sp, #0
 8001ae0:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f005 f94d 	bl	8006d86 <USB_ReadInterrupts>
 8001aec:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8001aee:	69bb      	ldr	r3, [r7, #24]
 8001af0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d003      	beq.n	8001b00 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001af8:	6878      	ldr	r0, [r7, #4]
 8001afa:	f000 fb1a 	bl	8002132 <PCD_EP_ISR_Handler>

    return;
 8001afe:	e119      	b.n	8001d34 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8001b00:	69bb      	ldr	r3, [r7, #24]
 8001b02:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d013      	beq.n	8001b32 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001b12:	b29a      	uxth	r2, r3
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001b1c:	b292      	uxth	r2, r2
 8001b1e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001b22:	6878      	ldr	r0, [r7, #4]
 8001b24:	f006 ffb5 	bl	8008a92 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001b28:	2100      	movs	r1, #0
 8001b2a:	6878      	ldr	r0, [r7, #4]
 8001b2c:	f000 f905 	bl	8001d3a <HAL_PCD_SetAddress>

    return;
 8001b30:	e100      	b.n	8001d34 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8001b32:	69bb      	ldr	r3, [r7, #24]
 8001b34:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d00c      	beq.n	8001b56 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001b44:	b29a      	uxth	r2, r3
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8001b4e:	b292      	uxth	r2, r2
 8001b50:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001b54:	e0ee      	b.n	8001d34 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8001b56:	69bb      	ldr	r3, [r7, #24]
 8001b58:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d00c      	beq.n	8001b7a <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001b68:	b29a      	uxth	r2, r3
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001b72:	b292      	uxth	r2, r2
 8001b74:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001b78:	e0dc      	b.n	8001d34 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8001b7a:	69bb      	ldr	r3, [r7, #24]
 8001b7c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d027      	beq.n	8001bd4 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001b8c:	b29a      	uxth	r2, r3
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f022 0204 	bic.w	r2, r2, #4
 8001b96:	b292      	uxth	r2, r2
 8001b98:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001ba4:	b29a      	uxth	r2, r3
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f022 0208 	bic.w	r2, r2, #8
 8001bae:	b292      	uxth	r2, r2
 8001bb0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001bb4:	6878      	ldr	r0, [r7, #4]
 8001bb6:	f006 ffa5 	bl	8008b04 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001bc2:	b29a      	uxth	r2, r3
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001bcc:	b292      	uxth	r2, r2
 8001bce:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001bd2:	e0af      	b.n	8001d34 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8001bd4:	69bb      	ldr	r3, [r7, #24]
 8001bd6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	f000 8083 	beq.w	8001ce6 <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8001be0:	2300      	movs	r3, #0
 8001be2:	77fb      	strb	r3, [r7, #31]
 8001be4:	e010      	b.n	8001c08 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	461a      	mov	r2, r3
 8001bec:	7ffb      	ldrb	r3, [r7, #31]
 8001bee:	009b      	lsls	r3, r3, #2
 8001bf0:	441a      	add	r2, r3
 8001bf2:	7ffb      	ldrb	r3, [r7, #31]
 8001bf4:	8812      	ldrh	r2, [r2, #0]
 8001bf6:	b292      	uxth	r2, r2
 8001bf8:	005b      	lsls	r3, r3, #1
 8001bfa:	3320      	adds	r3, #32
 8001bfc:	443b      	add	r3, r7
 8001bfe:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8001c02:	7ffb      	ldrb	r3, [r7, #31]
 8001c04:	3301      	adds	r3, #1
 8001c06:	77fb      	strb	r3, [r7, #31]
 8001c08:	7ffb      	ldrb	r3, [r7, #31]
 8001c0a:	2b07      	cmp	r3, #7
 8001c0c:	d9eb      	bls.n	8001be6 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001c16:	b29a      	uxth	r2, r3
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f042 0201 	orr.w	r2, r2, #1
 8001c20:	b292      	uxth	r2, r2
 8001c22:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001c2e:	b29a      	uxth	r2, r3
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f022 0201 	bic.w	r2, r2, #1
 8001c38:	b292      	uxth	r2, r2
 8001c3a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8001c3e:	bf00      	nop
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001c48:	b29b      	uxth	r3, r3
 8001c4a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d0f6      	beq.n	8001c40 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001c5a:	b29a      	uxth	r2, r3
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001c64:	b292      	uxth	r2, r2
 8001c66:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	77fb      	strb	r3, [r7, #31]
 8001c6e:	e00f      	b.n	8001c90 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8001c70:	7ffb      	ldrb	r3, [r7, #31]
 8001c72:	687a      	ldr	r2, [r7, #4]
 8001c74:	6812      	ldr	r2, [r2, #0]
 8001c76:	4611      	mov	r1, r2
 8001c78:	7ffa      	ldrb	r2, [r7, #31]
 8001c7a:	0092      	lsls	r2, r2, #2
 8001c7c:	440a      	add	r2, r1
 8001c7e:	005b      	lsls	r3, r3, #1
 8001c80:	3320      	adds	r3, #32
 8001c82:	443b      	add	r3, r7
 8001c84:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8001c88:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8001c8a:	7ffb      	ldrb	r3, [r7, #31]
 8001c8c:	3301      	adds	r3, #1
 8001c8e:	77fb      	strb	r3, [r7, #31]
 8001c90:	7ffb      	ldrb	r3, [r7, #31]
 8001c92:	2b07      	cmp	r3, #7
 8001c94:	d9ec      	bls.n	8001c70 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001c9e:	b29a      	uxth	r2, r3
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f042 0208 	orr.w	r2, r2, #8
 8001ca8:	b292      	uxth	r2, r2
 8001caa:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001cb6:	b29a      	uxth	r2, r3
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001cc0:	b292      	uxth	r2, r2
 8001cc2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001cce:	b29a      	uxth	r2, r3
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f042 0204 	orr.w	r2, r2, #4
 8001cd8:	b292      	uxth	r2, r2
 8001cda:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001cde:	6878      	ldr	r0, [r7, #4]
 8001ce0:	f006 fef6 	bl	8008ad0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001ce4:	e026      	b.n	8001d34 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8001ce6:	69bb      	ldr	r3, [r7, #24]
 8001ce8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d00f      	beq.n	8001d10 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001cf8:	b29a      	uxth	r2, r3
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001d02:	b292      	uxth	r2, r2
 8001d04:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001d08:	6878      	ldr	r0, [r7, #4]
 8001d0a:	f006 feb4 	bl	8008a76 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001d0e:	e011      	b.n	8001d34 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8001d10:	69bb      	ldr	r3, [r7, #24]
 8001d12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d00c      	beq.n	8001d34 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001d22:	b29a      	uxth	r2, r3
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001d2c:	b292      	uxth	r2, r2
 8001d2e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001d32:	bf00      	nop
  }
}
 8001d34:	3720      	adds	r7, #32
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}

08001d3a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001d3a:	b580      	push	{r7, lr}
 8001d3c:	b082      	sub	sp, #8
 8001d3e:	af00      	add	r7, sp, #0
 8001d40:	6078      	str	r0, [r7, #4]
 8001d42:	460b      	mov	r3, r1
 8001d44:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001d4c:	2b01      	cmp	r3, #1
 8001d4e:	d101      	bne.n	8001d54 <HAL_PCD_SetAddress+0x1a>
 8001d50:	2302      	movs	r3, #2
 8001d52:	e012      	b.n	8001d7a <HAL_PCD_SetAddress+0x40>
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2201      	movs	r2, #1
 8001d58:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	78fa      	ldrb	r2, [r7, #3]
 8001d60:	735a      	strb	r2, [r3, #13]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	78fa      	ldrb	r2, [r7, #3]
 8001d68:	4611      	mov	r1, r2
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f004 ffe4 	bl	8006d38 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2200      	movs	r2, #0
 8001d74:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8001d78:	2300      	movs	r3, #0
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	3708      	adds	r7, #8
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}

08001d82 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001d82:	b580      	push	{r7, lr}
 8001d84:	b084      	sub	sp, #16
 8001d86:	af00      	add	r7, sp, #0
 8001d88:	6078      	str	r0, [r7, #4]
 8001d8a:	4608      	mov	r0, r1
 8001d8c:	4611      	mov	r1, r2
 8001d8e:	461a      	mov	r2, r3
 8001d90:	4603      	mov	r3, r0
 8001d92:	70fb      	strb	r3, [r7, #3]
 8001d94:	460b      	mov	r3, r1
 8001d96:	803b      	strh	r3, [r7, #0]
 8001d98:	4613      	mov	r3, r2
 8001d9a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001da0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	da0e      	bge.n	8001dc6 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001da8:	78fb      	ldrb	r3, [r7, #3]
 8001daa:	f003 0207 	and.w	r2, r3, #7
 8001dae:	4613      	mov	r3, r2
 8001db0:	009b      	lsls	r3, r3, #2
 8001db2:	4413      	add	r3, r2
 8001db4:	00db      	lsls	r3, r3, #3
 8001db6:	3310      	adds	r3, #16
 8001db8:	687a      	ldr	r2, [r7, #4]
 8001dba:	4413      	add	r3, r2
 8001dbc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	705a      	strb	r2, [r3, #1]
 8001dc4:	e00e      	b.n	8001de4 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001dc6:	78fb      	ldrb	r3, [r7, #3]
 8001dc8:	f003 0207 	and.w	r2, r3, #7
 8001dcc:	4613      	mov	r3, r2
 8001dce:	009b      	lsls	r3, r3, #2
 8001dd0:	4413      	add	r3, r2
 8001dd2:	00db      	lsls	r3, r3, #3
 8001dd4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001dd8:	687a      	ldr	r2, [r7, #4]
 8001dda:	4413      	add	r3, r2
 8001ddc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	2200      	movs	r2, #0
 8001de2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001de4:	78fb      	ldrb	r3, [r7, #3]
 8001de6:	f003 0307 	and.w	r3, r3, #7
 8001dea:	b2da      	uxtb	r2, r3
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001df0:	883a      	ldrh	r2, [r7, #0]
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	78ba      	ldrb	r2, [r7, #2]
 8001dfa:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001dfc:	78bb      	ldrb	r3, [r7, #2]
 8001dfe:	2b02      	cmp	r3, #2
 8001e00:	d102      	bne.n	8001e08 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	2200      	movs	r2, #0
 8001e06:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001e0e:	2b01      	cmp	r3, #1
 8001e10:	d101      	bne.n	8001e16 <HAL_PCD_EP_Open+0x94>
 8001e12:	2302      	movs	r3, #2
 8001e14:	e00e      	b.n	8001e34 <HAL_PCD_EP_Open+0xb2>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2201      	movs	r2, #1
 8001e1a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	68f9      	ldr	r1, [r7, #12]
 8001e24:	4618      	mov	r0, r3
 8001e26:	f002 fd2d 	bl	8004884 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8001e32:	7afb      	ldrb	r3, [r7, #11]
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	3710      	adds	r7, #16
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}

08001e3c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b084      	sub	sp, #16
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
 8001e44:	460b      	mov	r3, r1
 8001e46:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001e48:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	da0e      	bge.n	8001e6e <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e50:	78fb      	ldrb	r3, [r7, #3]
 8001e52:	f003 0207 	and.w	r2, r3, #7
 8001e56:	4613      	mov	r3, r2
 8001e58:	009b      	lsls	r3, r3, #2
 8001e5a:	4413      	add	r3, r2
 8001e5c:	00db      	lsls	r3, r3, #3
 8001e5e:	3310      	adds	r3, #16
 8001e60:	687a      	ldr	r2, [r7, #4]
 8001e62:	4413      	add	r3, r2
 8001e64:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	2201      	movs	r2, #1
 8001e6a:	705a      	strb	r2, [r3, #1]
 8001e6c:	e00e      	b.n	8001e8c <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e6e:	78fb      	ldrb	r3, [r7, #3]
 8001e70:	f003 0207 	and.w	r2, r3, #7
 8001e74:	4613      	mov	r3, r2
 8001e76:	009b      	lsls	r3, r3, #2
 8001e78:	4413      	add	r3, r2
 8001e7a:	00db      	lsls	r3, r3, #3
 8001e7c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001e80:	687a      	ldr	r2, [r7, #4]
 8001e82:	4413      	add	r3, r2
 8001e84:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	2200      	movs	r2, #0
 8001e8a:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e8c:	78fb      	ldrb	r3, [r7, #3]
 8001e8e:	f003 0307 	and.w	r3, r3, #7
 8001e92:	b2da      	uxtb	r2, r3
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001e9e:	2b01      	cmp	r3, #1
 8001ea0:	d101      	bne.n	8001ea6 <HAL_PCD_EP_Close+0x6a>
 8001ea2:	2302      	movs	r3, #2
 8001ea4:	e00e      	b.n	8001ec4 <HAL_PCD_EP_Close+0x88>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2201      	movs	r2, #1
 8001eaa:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	68f9      	ldr	r1, [r7, #12]
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f003 f8a5 	bl	8005004 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8001ec2:	2300      	movs	r3, #0
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	3710      	adds	r7, #16
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}

08001ecc <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b086      	sub	sp, #24
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	60f8      	str	r0, [r7, #12]
 8001ed4:	607a      	str	r2, [r7, #4]
 8001ed6:	603b      	str	r3, [r7, #0]
 8001ed8:	460b      	mov	r3, r1
 8001eda:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001edc:	7afb      	ldrb	r3, [r7, #11]
 8001ede:	f003 0207 	and.w	r2, r3, #7
 8001ee2:	4613      	mov	r3, r2
 8001ee4:	009b      	lsls	r3, r3, #2
 8001ee6:	4413      	add	r3, r2
 8001ee8:	00db      	lsls	r3, r3, #3
 8001eea:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001eee:	68fa      	ldr	r2, [r7, #12]
 8001ef0:	4413      	add	r3, r2
 8001ef2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	687a      	ldr	r2, [r7, #4]
 8001ef8:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001efa:	697b      	ldr	r3, [r7, #20]
 8001efc:	683a      	ldr	r2, [r7, #0]
 8001efe:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	2200      	movs	r2, #0
 8001f04:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	2200      	movs	r2, #0
 8001f0a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f0c:	7afb      	ldrb	r3, [r7, #11]
 8001f0e:	f003 0307 	and.w	r3, r3, #7
 8001f12:	b2da      	uxtb	r2, r3
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	6979      	ldr	r1, [r7, #20]
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f003 fa5c 	bl	80053dc <USB_EPStartXfer>

  return HAL_OK;
 8001f24:	2300      	movs	r3, #0
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	3718      	adds	r7, #24
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}

08001f2e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8001f2e:	b480      	push	{r7}
 8001f30:	b083      	sub	sp, #12
 8001f32:	af00      	add	r7, sp, #0
 8001f34:	6078      	str	r0, [r7, #4]
 8001f36:	460b      	mov	r3, r1
 8001f38:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001f3a:	78fb      	ldrb	r3, [r7, #3]
 8001f3c:	f003 0207 	and.w	r2, r3, #7
 8001f40:	6879      	ldr	r1, [r7, #4]
 8001f42:	4613      	mov	r3, r2
 8001f44:	009b      	lsls	r3, r3, #2
 8001f46:	4413      	add	r3, r2
 8001f48:	00db      	lsls	r3, r3, #3
 8001f4a:	440b      	add	r3, r1
 8001f4c:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8001f50:	681b      	ldr	r3, [r3, #0]
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	370c      	adds	r7, #12
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bc80      	pop	{r7}
 8001f5a:	4770      	bx	lr

08001f5c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b086      	sub	sp, #24
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	60f8      	str	r0, [r7, #12]
 8001f64:	607a      	str	r2, [r7, #4]
 8001f66:	603b      	str	r3, [r7, #0]
 8001f68:	460b      	mov	r3, r1
 8001f6a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f6c:	7afb      	ldrb	r3, [r7, #11]
 8001f6e:	f003 0207 	and.w	r2, r3, #7
 8001f72:	4613      	mov	r3, r2
 8001f74:	009b      	lsls	r3, r3, #2
 8001f76:	4413      	add	r3, r2
 8001f78:	00db      	lsls	r3, r3, #3
 8001f7a:	3310      	adds	r3, #16
 8001f7c:	68fa      	ldr	r2, [r7, #12]
 8001f7e:	4413      	add	r3, r2
 8001f80:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001f82:	697b      	ldr	r3, [r7, #20]
 8001f84:	687a      	ldr	r2, [r7, #4]
 8001f86:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	683a      	ldr	r2, [r7, #0]
 8001f8c:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	2201      	movs	r2, #1
 8001f92:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8001f96:	697b      	ldr	r3, [r7, #20]
 8001f98:	683a      	ldr	r2, [r7, #0]
 8001f9a:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001fa8:	7afb      	ldrb	r3, [r7, #11]
 8001faa:	f003 0307 	and.w	r3, r3, #7
 8001fae:	b2da      	uxtb	r2, r3
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	6979      	ldr	r1, [r7, #20]
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f003 fa0e 	bl	80053dc <USB_EPStartXfer>

  return HAL_OK;
 8001fc0:	2300      	movs	r3, #0
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	3718      	adds	r7, #24
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}

08001fca <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001fca:	b580      	push	{r7, lr}
 8001fcc:	b084      	sub	sp, #16
 8001fce:	af00      	add	r7, sp, #0
 8001fd0:	6078      	str	r0, [r7, #4]
 8001fd2:	460b      	mov	r3, r1
 8001fd4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001fd6:	78fb      	ldrb	r3, [r7, #3]
 8001fd8:	f003 0307 	and.w	r3, r3, #7
 8001fdc:	687a      	ldr	r2, [r7, #4]
 8001fde:	7912      	ldrb	r2, [r2, #4]
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d901      	bls.n	8001fe8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	e04c      	b.n	8002082 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001fe8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	da0e      	bge.n	800200e <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ff0:	78fb      	ldrb	r3, [r7, #3]
 8001ff2:	f003 0207 	and.w	r2, r3, #7
 8001ff6:	4613      	mov	r3, r2
 8001ff8:	009b      	lsls	r3, r3, #2
 8001ffa:	4413      	add	r3, r2
 8001ffc:	00db      	lsls	r3, r3, #3
 8001ffe:	3310      	adds	r3, #16
 8002000:	687a      	ldr	r2, [r7, #4]
 8002002:	4413      	add	r3, r2
 8002004:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	2201      	movs	r2, #1
 800200a:	705a      	strb	r2, [r3, #1]
 800200c:	e00c      	b.n	8002028 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800200e:	78fa      	ldrb	r2, [r7, #3]
 8002010:	4613      	mov	r3, r2
 8002012:	009b      	lsls	r3, r3, #2
 8002014:	4413      	add	r3, r2
 8002016:	00db      	lsls	r3, r3, #3
 8002018:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800201c:	687a      	ldr	r2, [r7, #4]
 800201e:	4413      	add	r3, r2
 8002020:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	2200      	movs	r2, #0
 8002026:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	2201      	movs	r2, #1
 800202c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800202e:	78fb      	ldrb	r3, [r7, #3]
 8002030:	f003 0307 	and.w	r3, r3, #7
 8002034:	b2da      	uxtb	r2, r3
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002040:	2b01      	cmp	r3, #1
 8002042:	d101      	bne.n	8002048 <HAL_PCD_EP_SetStall+0x7e>
 8002044:	2302      	movs	r3, #2
 8002046:	e01c      	b.n	8002082 <HAL_PCD_EP_SetStall+0xb8>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2201      	movs	r2, #1
 800204c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	68f9      	ldr	r1, [r7, #12]
 8002056:	4618      	mov	r0, r3
 8002058:	f004 fd71 	bl	8006b3e <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800205c:	78fb      	ldrb	r3, [r7, #3]
 800205e:	f003 0307 	and.w	r3, r3, #7
 8002062:	2b00      	cmp	r3, #0
 8002064:	d108      	bne.n	8002078 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681a      	ldr	r2, [r3, #0]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8002070:	4619      	mov	r1, r3
 8002072:	4610      	mov	r0, r2
 8002074:	f004 fe96 	bl	8006da4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2200      	movs	r2, #0
 800207c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002080:	2300      	movs	r3, #0
}
 8002082:	4618      	mov	r0, r3
 8002084:	3710      	adds	r7, #16
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}

0800208a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800208a:	b580      	push	{r7, lr}
 800208c:	b084      	sub	sp, #16
 800208e:	af00      	add	r7, sp, #0
 8002090:	6078      	str	r0, [r7, #4]
 8002092:	460b      	mov	r3, r1
 8002094:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002096:	78fb      	ldrb	r3, [r7, #3]
 8002098:	f003 030f 	and.w	r3, r3, #15
 800209c:	687a      	ldr	r2, [r7, #4]
 800209e:	7912      	ldrb	r2, [r2, #4]
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d901      	bls.n	80020a8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80020a4:	2301      	movs	r3, #1
 80020a6:	e040      	b.n	800212a <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80020a8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	da0e      	bge.n	80020ce <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80020b0:	78fb      	ldrb	r3, [r7, #3]
 80020b2:	f003 0207 	and.w	r2, r3, #7
 80020b6:	4613      	mov	r3, r2
 80020b8:	009b      	lsls	r3, r3, #2
 80020ba:	4413      	add	r3, r2
 80020bc:	00db      	lsls	r3, r3, #3
 80020be:	3310      	adds	r3, #16
 80020c0:	687a      	ldr	r2, [r7, #4]
 80020c2:	4413      	add	r3, r2
 80020c4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	2201      	movs	r2, #1
 80020ca:	705a      	strb	r2, [r3, #1]
 80020cc:	e00e      	b.n	80020ec <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80020ce:	78fb      	ldrb	r3, [r7, #3]
 80020d0:	f003 0207 	and.w	r2, r3, #7
 80020d4:	4613      	mov	r3, r2
 80020d6:	009b      	lsls	r3, r3, #2
 80020d8:	4413      	add	r3, r2
 80020da:	00db      	lsls	r3, r3, #3
 80020dc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80020e0:	687a      	ldr	r2, [r7, #4]
 80020e2:	4413      	add	r3, r2
 80020e4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	2200      	movs	r2, #0
 80020ea:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	2200      	movs	r2, #0
 80020f0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80020f2:	78fb      	ldrb	r3, [r7, #3]
 80020f4:	f003 0307 	and.w	r3, r3, #7
 80020f8:	b2da      	uxtb	r2, r3
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002104:	2b01      	cmp	r3, #1
 8002106:	d101      	bne.n	800210c <HAL_PCD_EP_ClrStall+0x82>
 8002108:	2302      	movs	r3, #2
 800210a:	e00e      	b.n	800212a <HAL_PCD_EP_ClrStall+0xa0>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2201      	movs	r2, #1
 8002110:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	68f9      	ldr	r1, [r7, #12]
 800211a:	4618      	mov	r0, r3
 800211c:	f004 fd5f 	bl	8006bde <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2200      	movs	r2, #0
 8002124:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002128:	2300      	movs	r3, #0
}
 800212a:	4618      	mov	r0, r3
 800212c:	3710      	adds	r7, #16
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}

08002132 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002132:	b580      	push	{r7, lr}
 8002134:	b096      	sub	sp, #88	@ 0x58
 8002136:	af00      	add	r7, sp, #0
 8002138:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800213a:	e3bb      	b.n	80028b4 <PCD_EP_ISR_Handler+0x782>
  {
    wIstr = hpcd->Instance->ISTR;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002144:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002148:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800214c:	b2db      	uxtb	r3, r3
 800214e:	f003 030f 	and.w	r3, r3, #15
 8002152:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 8002156:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800215a:	2b00      	cmp	r3, #0
 800215c:	f040 8175 	bne.w	800244a <PCD_EP_ISR_Handler+0x318>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002160:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8002164:	f003 0310 	and.w	r3, r3, #16
 8002168:	2b00      	cmp	r3, #0
 800216a:	d14e      	bne.n	800220a <PCD_EP_ISR_Handler+0xd8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	881b      	ldrh	r3, [r3, #0]
 8002172:	b29b      	uxth	r3, r3
 8002174:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8002178:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800217c:	81fb      	strh	r3, [r7, #14]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681a      	ldr	r2, [r3, #0]
 8002182:	89fb      	ldrh	r3, [r7, #14]
 8002184:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002188:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800218c:	b29b      	uxth	r3, r3
 800218e:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	3310      	adds	r3, #16
 8002194:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800219e:	b29b      	uxth	r3, r3
 80021a0:	461a      	mov	r2, r3
 80021a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80021a4:	781b      	ldrb	r3, [r3, #0]
 80021a6:	00db      	lsls	r3, r3, #3
 80021a8:	4413      	add	r3, r2
 80021aa:	3302      	adds	r3, #2
 80021ac:	005b      	lsls	r3, r3, #1
 80021ae:	687a      	ldr	r2, [r7, #4]
 80021b0:	6812      	ldr	r2, [r2, #0]
 80021b2:	4413      	add	r3, r2
 80021b4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80021b8:	881b      	ldrh	r3, [r3, #0]
 80021ba:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80021be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80021c0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80021c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80021c4:	695a      	ldr	r2, [r3, #20]
 80021c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80021c8:	69db      	ldr	r3, [r3, #28]
 80021ca:	441a      	add	r2, r3
 80021cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80021ce:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80021d0:	2100      	movs	r1, #0
 80021d2:	6878      	ldr	r0, [r7, #4]
 80021d4:	f006 fc35 	bl	8008a42 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	7b5b      	ldrb	r3, [r3, #13]
 80021dc:	b2db      	uxtb	r3, r3
 80021de:	2b00      	cmp	r3, #0
 80021e0:	f000 8368 	beq.w	80028b4 <PCD_EP_ISR_Handler+0x782>
 80021e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80021e6:	699b      	ldr	r3, [r3, #24]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	f040 8363 	bne.w	80028b4 <PCD_EP_ISR_Handler+0x782>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	7b5b      	ldrb	r3, [r3, #13]
 80021f2:	b2db      	uxtb	r3, r3
 80021f4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80021f8:	b2da      	uxtb	r2, r3
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2200      	movs	r2, #0
 8002206:	735a      	strb	r2, [r3, #13]
 8002208:	e354      	b.n	80028b4 <PCD_EP_ISR_Handler+0x782>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002210:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	881b      	ldrh	r3, [r3, #0]
 8002218:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800221c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002220:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002224:	2b00      	cmp	r3, #0
 8002226:	d034      	beq.n	8002292 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002230:	b29b      	uxth	r3, r3
 8002232:	461a      	mov	r2, r3
 8002234:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002236:	781b      	ldrb	r3, [r3, #0]
 8002238:	00db      	lsls	r3, r3, #3
 800223a:	4413      	add	r3, r2
 800223c:	3306      	adds	r3, #6
 800223e:	005b      	lsls	r3, r3, #1
 8002240:	687a      	ldr	r2, [r7, #4]
 8002242:	6812      	ldr	r2, [r2, #0]
 8002244:	4413      	add	r3, r2
 8002246:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800224a:	881b      	ldrh	r3, [r3, #0]
 800224c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002250:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002252:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6818      	ldr	r0, [r3, #0]
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 800225e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002260:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002262:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002264:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002266:	b29b      	uxth	r3, r3
 8002268:	f004 fdec 	bl	8006e44 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	881b      	ldrh	r3, [r3, #0]
 8002272:	b29a      	uxth	r2, r3
 8002274:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8002278:	4013      	ands	r3, r2
 800227a:	823b      	strh	r3, [r7, #16]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	8a3a      	ldrh	r2, [r7, #16]
 8002282:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002286:	b292      	uxth	r2, r2
 8002288:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800228a:	6878      	ldr	r0, [r7, #4]
 800228c:	f006 fbac 	bl	80089e8 <HAL_PCD_SetupStageCallback>
 8002290:	e310      	b.n	80028b4 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002292:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8002296:	2b00      	cmp	r3, #0
 8002298:	f280 830c 	bge.w	80028b4 <PCD_EP_ISR_Handler+0x782>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	881b      	ldrh	r3, [r3, #0]
 80022a2:	b29a      	uxth	r2, r3
 80022a4:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80022a8:	4013      	ands	r3, r2
 80022aa:	83fb      	strh	r3, [r7, #30]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	8bfa      	ldrh	r2, [r7, #30]
 80022b2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80022b6:	b292      	uxth	r2, r2
 80022b8:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80022c2:	b29b      	uxth	r3, r3
 80022c4:	461a      	mov	r2, r3
 80022c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80022c8:	781b      	ldrb	r3, [r3, #0]
 80022ca:	00db      	lsls	r3, r3, #3
 80022cc:	4413      	add	r3, r2
 80022ce:	3306      	adds	r3, #6
 80022d0:	005b      	lsls	r3, r3, #1
 80022d2:	687a      	ldr	r2, [r7, #4]
 80022d4:	6812      	ldr	r2, [r2, #0]
 80022d6:	4413      	add	r3, r2
 80022d8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80022dc:	881b      	ldrh	r3, [r3, #0]
 80022de:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80022e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80022e4:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80022e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80022e8:	69db      	ldr	r3, [r3, #28]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d019      	beq.n	8002322 <PCD_EP_ISR_Handler+0x1f0>
 80022ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80022f0:	695b      	ldr	r3, [r3, #20]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d015      	beq.n	8002322 <PCD_EP_ISR_Handler+0x1f0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6818      	ldr	r0, [r3, #0]
 80022fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80022fc:	6959      	ldr	r1, [r3, #20]
 80022fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002300:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002302:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002304:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002306:	b29b      	uxth	r3, r3
 8002308:	f004 fd9c 	bl	8006e44 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800230c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800230e:	695a      	ldr	r2, [r3, #20]
 8002310:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002312:	69db      	ldr	r3, [r3, #28]
 8002314:	441a      	add	r2, r3
 8002316:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002318:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800231a:	2100      	movs	r1, #0
 800231c:	6878      	ldr	r0, [r7, #4]
 800231e:	f006 fb75 	bl	8008a0c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	881b      	ldrh	r3, [r3, #0]
 8002328:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800232c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002330:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002334:	2b00      	cmp	r3, #0
 8002336:	f040 82bd 	bne.w	80028b4 <PCD_EP_ISR_Handler+0x782>
 800233a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800233e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8002342:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002346:	f000 82b5 	beq.w	80028b4 <PCD_EP_ISR_Handler+0x782>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	61bb      	str	r3, [r7, #24]
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002358:	b29b      	uxth	r3, r3
 800235a:	461a      	mov	r2, r3
 800235c:	69bb      	ldr	r3, [r7, #24]
 800235e:	4413      	add	r3, r2
 8002360:	61bb      	str	r3, [r7, #24]
 8002362:	69bb      	ldr	r3, [r7, #24]
 8002364:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002368:	617b      	str	r3, [r7, #20]
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	881b      	ldrh	r3, [r3, #0]
 800236e:	b29b      	uxth	r3, r3
 8002370:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002374:	b29a      	uxth	r2, r3
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	801a      	strh	r2, [r3, #0]
 800237a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800237c:	691b      	ldr	r3, [r3, #16]
 800237e:	2b3e      	cmp	r3, #62	@ 0x3e
 8002380:	d91d      	bls.n	80023be <PCD_EP_ISR_Handler+0x28c>
 8002382:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002384:	691b      	ldr	r3, [r3, #16]
 8002386:	095b      	lsrs	r3, r3, #5
 8002388:	647b      	str	r3, [r7, #68]	@ 0x44
 800238a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800238c:	691b      	ldr	r3, [r3, #16]
 800238e:	f003 031f 	and.w	r3, r3, #31
 8002392:	2b00      	cmp	r3, #0
 8002394:	d102      	bne.n	800239c <PCD_EP_ISR_Handler+0x26a>
 8002396:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002398:	3b01      	subs	r3, #1
 800239a:	647b      	str	r3, [r7, #68]	@ 0x44
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	881b      	ldrh	r3, [r3, #0]
 80023a0:	b29a      	uxth	r2, r3
 80023a2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80023a4:	b29b      	uxth	r3, r3
 80023a6:	029b      	lsls	r3, r3, #10
 80023a8:	b29b      	uxth	r3, r3
 80023aa:	4313      	orrs	r3, r2
 80023ac:	b29b      	uxth	r3, r3
 80023ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80023b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80023b6:	b29a      	uxth	r2, r3
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	801a      	strh	r2, [r3, #0]
 80023bc:	e026      	b.n	800240c <PCD_EP_ISR_Handler+0x2da>
 80023be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80023c0:	691b      	ldr	r3, [r3, #16]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d10a      	bne.n	80023dc <PCD_EP_ISR_Handler+0x2aa>
 80023c6:	697b      	ldr	r3, [r7, #20]
 80023c8:	881b      	ldrh	r3, [r3, #0]
 80023ca:	b29b      	uxth	r3, r3
 80023cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80023d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80023d4:	b29a      	uxth	r2, r3
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	801a      	strh	r2, [r3, #0]
 80023da:	e017      	b.n	800240c <PCD_EP_ISR_Handler+0x2da>
 80023dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80023de:	691b      	ldr	r3, [r3, #16]
 80023e0:	085b      	lsrs	r3, r3, #1
 80023e2:	647b      	str	r3, [r7, #68]	@ 0x44
 80023e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80023e6:	691b      	ldr	r3, [r3, #16]
 80023e8:	f003 0301 	and.w	r3, r3, #1
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d002      	beq.n	80023f6 <PCD_EP_ISR_Handler+0x2c4>
 80023f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80023f2:	3301      	adds	r3, #1
 80023f4:	647b      	str	r3, [r7, #68]	@ 0x44
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	881b      	ldrh	r3, [r3, #0]
 80023fa:	b29a      	uxth	r2, r3
 80023fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80023fe:	b29b      	uxth	r3, r3
 8002400:	029b      	lsls	r3, r3, #10
 8002402:	b29b      	uxth	r3, r3
 8002404:	4313      	orrs	r3, r2
 8002406:	b29a      	uxth	r2, r3
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	881b      	ldrh	r3, [r3, #0]
 8002412:	b29b      	uxth	r3, r3
 8002414:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002418:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800241c:	827b      	strh	r3, [r7, #18]
 800241e:	8a7b      	ldrh	r3, [r7, #18]
 8002420:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8002424:	827b      	strh	r3, [r7, #18]
 8002426:	8a7b      	ldrh	r3, [r7, #18]
 8002428:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800242c:	827b      	strh	r3, [r7, #18]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681a      	ldr	r2, [r3, #0]
 8002432:	8a7b      	ldrh	r3, [r7, #18]
 8002434:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002438:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800243c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002440:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002444:	b29b      	uxth	r3, r3
 8002446:	8013      	strh	r3, [r2, #0]
 8002448:	e234      	b.n	80028b4 <PCD_EP_ISR_Handler+0x782>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	461a      	mov	r2, r3
 8002450:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002454:	009b      	lsls	r3, r3, #2
 8002456:	4413      	add	r3, r2
 8002458:	881b      	ldrh	r3, [r3, #0]
 800245a:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800245e:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8002462:	2b00      	cmp	r3, #0
 8002464:	f280 80fc 	bge.w	8002660 <PCD_EP_ISR_Handler+0x52e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	461a      	mov	r2, r3
 800246e:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002472:	009b      	lsls	r3, r3, #2
 8002474:	4413      	add	r3, r2
 8002476:	881b      	ldrh	r3, [r3, #0]
 8002478:	b29a      	uxth	r2, r3
 800247a:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800247e:	4013      	ands	r3, r2
 8002480:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	461a      	mov	r2, r3
 800248a:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800248e:	009b      	lsls	r3, r3, #2
 8002490:	4413      	add	r3, r2
 8002492:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8002496:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800249a:	b292      	uxth	r2, r2
 800249c:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800249e:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 80024a2:	4613      	mov	r3, r2
 80024a4:	009b      	lsls	r3, r3, #2
 80024a6:	4413      	add	r3, r2
 80024a8:	00db      	lsls	r3, r3, #3
 80024aa:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80024ae:	687a      	ldr	r2, [r7, #4]
 80024b0:	4413      	add	r3, r2
 80024b2:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80024b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80024b6:	7b1b      	ldrb	r3, [r3, #12]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d125      	bne.n	8002508 <PCD_EP_ISR_Handler+0x3d6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80024c4:	b29b      	uxth	r3, r3
 80024c6:	461a      	mov	r2, r3
 80024c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80024ca:	781b      	ldrb	r3, [r3, #0]
 80024cc:	00db      	lsls	r3, r3, #3
 80024ce:	4413      	add	r3, r2
 80024d0:	3306      	adds	r3, #6
 80024d2:	005b      	lsls	r3, r3, #1
 80024d4:	687a      	ldr	r2, [r7, #4]
 80024d6:	6812      	ldr	r2, [r2, #0]
 80024d8:	4413      	add	r3, r2
 80024da:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80024de:	881b      	ldrh	r3, [r3, #0]
 80024e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80024e4:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 80024e8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	f000 8092 	beq.w	8002616 <PCD_EP_ISR_Handler+0x4e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6818      	ldr	r0, [r3, #0]
 80024f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80024f8:	6959      	ldr	r1, [r3, #20]
 80024fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80024fc:	88da      	ldrh	r2, [r3, #6]
 80024fe:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002502:	f004 fc9f 	bl	8006e44 <USB_ReadPMA>
 8002506:	e086      	b.n	8002616 <PCD_EP_ISR_Handler+0x4e4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002508:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800250a:	78db      	ldrb	r3, [r3, #3]
 800250c:	2b02      	cmp	r3, #2
 800250e:	d10a      	bne.n	8002526 <PCD_EP_ISR_Handler+0x3f4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002510:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002514:	461a      	mov	r2, r3
 8002516:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002518:	6878      	ldr	r0, [r7, #4]
 800251a:	f000 f9d9 	bl	80028d0 <HAL_PCD_EP_DB_Receive>
 800251e:	4603      	mov	r3, r0
 8002520:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8002524:	e077      	b.n	8002616 <PCD_EP_ISR_Handler+0x4e4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	461a      	mov	r2, r3
 800252c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800252e:	781b      	ldrb	r3, [r3, #0]
 8002530:	009b      	lsls	r3, r3, #2
 8002532:	4413      	add	r3, r2
 8002534:	881b      	ldrh	r3, [r3, #0]
 8002536:	b29b      	uxth	r3, r3
 8002538:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800253c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002540:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	461a      	mov	r2, r3
 800254a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800254c:	781b      	ldrb	r3, [r3, #0]
 800254e:	009b      	lsls	r3, r3, #2
 8002550:	441a      	add	r2, r3
 8002552:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8002556:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800255a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800255e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002562:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002566:	b29b      	uxth	r3, r3
 8002568:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	461a      	mov	r2, r3
 8002570:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002572:	781b      	ldrb	r3, [r3, #0]
 8002574:	009b      	lsls	r3, r3, #2
 8002576:	4413      	add	r3, r2
 8002578:	881b      	ldrh	r3, [r3, #0]
 800257a:	b29b      	uxth	r3, r3
 800257c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002580:	2b00      	cmp	r3, #0
 8002582:	d024      	beq.n	80025ce <PCD_EP_ISR_Handler+0x49c>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800258c:	b29b      	uxth	r3, r3
 800258e:	461a      	mov	r2, r3
 8002590:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002592:	781b      	ldrb	r3, [r3, #0]
 8002594:	00db      	lsls	r3, r3, #3
 8002596:	4413      	add	r3, r2
 8002598:	3302      	adds	r3, #2
 800259a:	005b      	lsls	r3, r3, #1
 800259c:	687a      	ldr	r2, [r7, #4]
 800259e:	6812      	ldr	r2, [r2, #0]
 80025a0:	4413      	add	r3, r2
 80025a2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80025a6:	881b      	ldrh	r3, [r3, #0]
 80025a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80025ac:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 80025b0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d02e      	beq.n	8002616 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6818      	ldr	r0, [r3, #0]
 80025bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80025be:	6959      	ldr	r1, [r3, #20]
 80025c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80025c2:	891a      	ldrh	r2, [r3, #8]
 80025c4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80025c8:	f004 fc3c 	bl	8006e44 <USB_ReadPMA>
 80025cc:	e023      	b.n	8002616 <PCD_EP_ISR_Handler+0x4e4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80025d6:	b29b      	uxth	r3, r3
 80025d8:	461a      	mov	r2, r3
 80025da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80025dc:	781b      	ldrb	r3, [r3, #0]
 80025de:	00db      	lsls	r3, r3, #3
 80025e0:	4413      	add	r3, r2
 80025e2:	3306      	adds	r3, #6
 80025e4:	005b      	lsls	r3, r3, #1
 80025e6:	687a      	ldr	r2, [r7, #4]
 80025e8:	6812      	ldr	r2, [r2, #0]
 80025ea:	4413      	add	r3, r2
 80025ec:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80025f0:	881b      	ldrh	r3, [r3, #0]
 80025f2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80025f6:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 80025fa:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d009      	beq.n	8002616 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6818      	ldr	r0, [r3, #0]
 8002606:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002608:	6959      	ldr	r1, [r3, #20]
 800260a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800260c:	895a      	ldrh	r2, [r3, #10]
 800260e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002612:	f004 fc17 	bl	8006e44 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002616:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002618:	69da      	ldr	r2, [r3, #28]
 800261a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800261e:	441a      	add	r2, r3
 8002620:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002622:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002624:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002626:	695a      	ldr	r2, [r3, #20]
 8002628:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800262c:	441a      	add	r2, r3
 800262e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002630:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002632:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002634:	699b      	ldr	r3, [r3, #24]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d005      	beq.n	8002646 <PCD_EP_ISR_Handler+0x514>
 800263a:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 800263e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002640:	691b      	ldr	r3, [r3, #16]
 8002642:	429a      	cmp	r2, r3
 8002644:	d206      	bcs.n	8002654 <PCD_EP_ISR_Handler+0x522>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002646:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002648:	781b      	ldrb	r3, [r3, #0]
 800264a:	4619      	mov	r1, r3
 800264c:	6878      	ldr	r0, [r7, #4]
 800264e:	f006 f9dd 	bl	8008a0c <HAL_PCD_DataOutStageCallback>
 8002652:	e005      	b.n	8002660 <PCD_EP_ISR_Handler+0x52e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800265a:	4618      	mov	r0, r3
 800265c:	f002 febe 	bl	80053dc <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002660:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002664:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002668:	2b00      	cmp	r3, #0
 800266a:	f000 8123 	beq.w	80028b4 <PCD_EP_ISR_Handler+0x782>
      {
        ep = &hpcd->IN_ep[epindex];
 800266e:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8002672:	4613      	mov	r3, r2
 8002674:	009b      	lsls	r3, r3, #2
 8002676:	4413      	add	r3, r2
 8002678:	00db      	lsls	r3, r3, #3
 800267a:	3310      	adds	r3, #16
 800267c:	687a      	ldr	r2, [r7, #4]
 800267e:	4413      	add	r3, r2
 8002680:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	461a      	mov	r2, r3
 8002688:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800268c:	009b      	lsls	r3, r3, #2
 800268e:	4413      	add	r3, r2
 8002690:	881b      	ldrh	r3, [r3, #0]
 8002692:	b29b      	uxth	r3, r3
 8002694:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8002698:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800269c:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	461a      	mov	r2, r3
 80026a6:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80026aa:	009b      	lsls	r3, r3, #2
 80026ac:	441a      	add	r2, r3
 80026ae:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80026b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80026b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80026ba:	b29b      	uxth	r3, r3
 80026bc:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 80026be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80026c0:	78db      	ldrb	r3, [r3, #3]
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	f040 80a2 	bne.w	800280c <PCD_EP_ISR_Handler+0x6da>
        {
          ep->xfer_len = 0U;
 80026c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80026ca:	2200      	movs	r2, #0
 80026cc:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80026ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80026d0:	7b1b      	ldrb	r3, [r3, #12]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	f000 8093 	beq.w	80027fe <PCD_EP_ISR_Handler+0x6cc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80026d8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80026dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d046      	beq.n	8002772 <PCD_EP_ISR_Handler+0x640>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80026e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80026e6:	785b      	ldrb	r3, [r3, #1]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d126      	bne.n	800273a <PCD_EP_ISR_Handler+0x608>
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80026fa:	b29b      	uxth	r3, r3
 80026fc:	461a      	mov	r2, r3
 80026fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002700:	4413      	add	r3, r2
 8002702:	627b      	str	r3, [r7, #36]	@ 0x24
 8002704:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002706:	781b      	ldrb	r3, [r3, #0]
 8002708:	011a      	lsls	r2, r3, #4
 800270a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800270c:	4413      	add	r3, r2
 800270e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002712:	623b      	str	r3, [r7, #32]
 8002714:	6a3b      	ldr	r3, [r7, #32]
 8002716:	881b      	ldrh	r3, [r3, #0]
 8002718:	b29b      	uxth	r3, r3
 800271a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800271e:	b29a      	uxth	r2, r3
 8002720:	6a3b      	ldr	r3, [r7, #32]
 8002722:	801a      	strh	r2, [r3, #0]
 8002724:	6a3b      	ldr	r3, [r7, #32]
 8002726:	881b      	ldrh	r3, [r3, #0]
 8002728:	b29b      	uxth	r3, r3
 800272a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800272e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002732:	b29a      	uxth	r2, r3
 8002734:	6a3b      	ldr	r3, [r7, #32]
 8002736:	801a      	strh	r2, [r3, #0]
 8002738:	e061      	b.n	80027fe <PCD_EP_ISR_Handler+0x6cc>
 800273a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800273c:	785b      	ldrb	r3, [r3, #1]
 800273e:	2b01      	cmp	r3, #1
 8002740:	d15d      	bne.n	80027fe <PCD_EP_ISR_Handler+0x6cc>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002750:	b29b      	uxth	r3, r3
 8002752:	461a      	mov	r2, r3
 8002754:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002756:	4413      	add	r3, r2
 8002758:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800275a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800275c:	781b      	ldrb	r3, [r3, #0]
 800275e:	011a      	lsls	r2, r3, #4
 8002760:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002762:	4413      	add	r3, r2
 8002764:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002768:	62bb      	str	r3, [r7, #40]	@ 0x28
 800276a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800276c:	2200      	movs	r2, #0
 800276e:	801a      	strh	r2, [r3, #0]
 8002770:	e045      	b.n	80027fe <PCD_EP_ISR_Handler+0x6cc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002778:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800277a:	785b      	ldrb	r3, [r3, #1]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d126      	bne.n	80027ce <PCD_EP_ISR_Handler+0x69c>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	637b      	str	r3, [r7, #52]	@ 0x34
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800278e:	b29b      	uxth	r3, r3
 8002790:	461a      	mov	r2, r3
 8002792:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002794:	4413      	add	r3, r2
 8002796:	637b      	str	r3, [r7, #52]	@ 0x34
 8002798:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800279a:	781b      	ldrb	r3, [r3, #0]
 800279c:	011a      	lsls	r2, r3, #4
 800279e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80027a0:	4413      	add	r3, r2
 80027a2:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80027a6:	633b      	str	r3, [r7, #48]	@ 0x30
 80027a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027aa:	881b      	ldrh	r3, [r3, #0]
 80027ac:	b29b      	uxth	r3, r3
 80027ae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80027b2:	b29a      	uxth	r2, r3
 80027b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027b6:	801a      	strh	r2, [r3, #0]
 80027b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027ba:	881b      	ldrh	r3, [r3, #0]
 80027bc:	b29b      	uxth	r3, r3
 80027be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80027c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80027c6:	b29a      	uxth	r2, r3
 80027c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027ca:	801a      	strh	r2, [r3, #0]
 80027cc:	e017      	b.n	80027fe <PCD_EP_ISR_Handler+0x6cc>
 80027ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80027d0:	785b      	ldrb	r3, [r3, #1]
 80027d2:	2b01      	cmp	r3, #1
 80027d4:	d113      	bne.n	80027fe <PCD_EP_ISR_Handler+0x6cc>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80027de:	b29b      	uxth	r3, r3
 80027e0:	461a      	mov	r2, r3
 80027e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80027e4:	4413      	add	r3, r2
 80027e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80027e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80027ea:	781b      	ldrb	r3, [r3, #0]
 80027ec:	011a      	lsls	r2, r3, #4
 80027ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80027f0:	4413      	add	r3, r2
 80027f2:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80027f6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80027f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027fa:	2200      	movs	r2, #0
 80027fc:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80027fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002800:	781b      	ldrb	r3, [r3, #0]
 8002802:	4619      	mov	r1, r3
 8002804:	6878      	ldr	r0, [r7, #4]
 8002806:	f006 f91c 	bl	8008a42 <HAL_PCD_DataInStageCallback>
 800280a:	e053      	b.n	80028b4 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800280c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002810:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002814:	2b00      	cmp	r3, #0
 8002816:	d146      	bne.n	80028a6 <PCD_EP_ISR_Handler+0x774>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002820:	b29b      	uxth	r3, r3
 8002822:	461a      	mov	r2, r3
 8002824:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002826:	781b      	ldrb	r3, [r3, #0]
 8002828:	00db      	lsls	r3, r3, #3
 800282a:	4413      	add	r3, r2
 800282c:	3302      	adds	r3, #2
 800282e:	005b      	lsls	r3, r3, #1
 8002830:	687a      	ldr	r2, [r7, #4]
 8002832:	6812      	ldr	r2, [r2, #0]
 8002834:	4413      	add	r3, r2
 8002836:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800283a:	881b      	ldrh	r3, [r3, #0]
 800283c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002840:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8002844:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002846:	699a      	ldr	r2, [r3, #24]
 8002848:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800284c:	429a      	cmp	r2, r3
 800284e:	d907      	bls.n	8002860 <PCD_EP_ISR_Handler+0x72e>
            {
              ep->xfer_len -= TxPctSize;
 8002850:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002852:	699a      	ldr	r2, [r3, #24]
 8002854:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002858:	1ad2      	subs	r2, r2, r3
 800285a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800285c:	619a      	str	r2, [r3, #24]
 800285e:	e002      	b.n	8002866 <PCD_EP_ISR_Handler+0x734>
            }
            else
            {
              ep->xfer_len = 0U;
 8002860:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002862:	2200      	movs	r2, #0
 8002864:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8002866:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002868:	699b      	ldr	r3, [r3, #24]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d106      	bne.n	800287c <PCD_EP_ISR_Handler+0x74a>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800286e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002870:	781b      	ldrb	r3, [r3, #0]
 8002872:	4619      	mov	r1, r3
 8002874:	6878      	ldr	r0, [r7, #4]
 8002876:	f006 f8e4 	bl	8008a42 <HAL_PCD_DataInStageCallback>
 800287a:	e01b      	b.n	80028b4 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800287c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800287e:	695a      	ldr	r2, [r3, #20]
 8002880:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002884:	441a      	add	r2, r3
 8002886:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002888:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800288a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800288c:	69da      	ldr	r2, [r3, #28]
 800288e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002892:	441a      	add	r2, r3
 8002894:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002896:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800289e:	4618      	mov	r0, r3
 80028a0:	f002 fd9c 	bl	80053dc <USB_EPStartXfer>
 80028a4:	e006      	b.n	80028b4 <PCD_EP_ISR_Handler+0x782>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80028a6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80028aa:	461a      	mov	r2, r3
 80028ac:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80028ae:	6878      	ldr	r0, [r7, #4]
 80028b0:	f000 f91b 	bl	8002aea <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80028bc:	b29b      	uxth	r3, r3
 80028be:	b21b      	sxth	r3, r3
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	f6ff ac3b 	blt.w	800213c <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80028c6:	2300      	movs	r3, #0
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	3758      	adds	r7, #88	@ 0x58
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}

080028d0 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b088      	sub	sp, #32
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	60f8      	str	r0, [r7, #12]
 80028d8:	60b9      	str	r1, [r7, #8]
 80028da:	4613      	mov	r3, r2
 80028dc:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80028de:	88fb      	ldrh	r3, [r7, #6]
 80028e0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d07e      	beq.n	80029e6 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80028f0:	b29b      	uxth	r3, r3
 80028f2:	461a      	mov	r2, r3
 80028f4:	68bb      	ldr	r3, [r7, #8]
 80028f6:	781b      	ldrb	r3, [r3, #0]
 80028f8:	00db      	lsls	r3, r3, #3
 80028fa:	4413      	add	r3, r2
 80028fc:	3302      	adds	r3, #2
 80028fe:	005b      	lsls	r3, r3, #1
 8002900:	68fa      	ldr	r2, [r7, #12]
 8002902:	6812      	ldr	r2, [r2, #0]
 8002904:	4413      	add	r3, r2
 8002906:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800290a:	881b      	ldrh	r3, [r3, #0]
 800290c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002910:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002912:	68bb      	ldr	r3, [r7, #8]
 8002914:	699a      	ldr	r2, [r3, #24]
 8002916:	8b7b      	ldrh	r3, [r7, #26]
 8002918:	429a      	cmp	r2, r3
 800291a:	d306      	bcc.n	800292a <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	699a      	ldr	r2, [r3, #24]
 8002920:	8b7b      	ldrh	r3, [r7, #26]
 8002922:	1ad2      	subs	r2, r2, r3
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	619a      	str	r2, [r3, #24]
 8002928:	e002      	b.n	8002930 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 800292a:	68bb      	ldr	r3, [r7, #8]
 800292c:	2200      	movs	r2, #0
 800292e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002930:	68bb      	ldr	r3, [r7, #8]
 8002932:	699b      	ldr	r3, [r3, #24]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d123      	bne.n	8002980 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	461a      	mov	r2, r3
 800293e:	68bb      	ldr	r3, [r7, #8]
 8002940:	781b      	ldrb	r3, [r3, #0]
 8002942:	009b      	lsls	r3, r3, #2
 8002944:	4413      	add	r3, r2
 8002946:	881b      	ldrh	r3, [r3, #0]
 8002948:	b29b      	uxth	r3, r3
 800294a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800294e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002952:	833b      	strh	r3, [r7, #24]
 8002954:	8b3b      	ldrh	r3, [r7, #24]
 8002956:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800295a:	833b      	strh	r3, [r7, #24]
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	461a      	mov	r2, r3
 8002962:	68bb      	ldr	r3, [r7, #8]
 8002964:	781b      	ldrb	r3, [r3, #0]
 8002966:	009b      	lsls	r3, r3, #2
 8002968:	441a      	add	r2, r3
 800296a:	8b3b      	ldrh	r3, [r7, #24]
 800296c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002970:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002974:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002978:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800297c:	b29b      	uxth	r3, r3
 800297e:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002980:	88fb      	ldrh	r3, [r7, #6]
 8002982:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002986:	2b00      	cmp	r3, #0
 8002988:	d01f      	beq.n	80029ca <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	461a      	mov	r2, r3
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	781b      	ldrb	r3, [r3, #0]
 8002994:	009b      	lsls	r3, r3, #2
 8002996:	4413      	add	r3, r2
 8002998:	881b      	ldrh	r3, [r3, #0]
 800299a:	b29b      	uxth	r3, r3
 800299c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80029a0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80029a4:	82fb      	strh	r3, [r7, #22]
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	461a      	mov	r2, r3
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	781b      	ldrb	r3, [r3, #0]
 80029b0:	009b      	lsls	r3, r3, #2
 80029b2:	441a      	add	r2, r3
 80029b4:	8afb      	ldrh	r3, [r7, #22]
 80029b6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80029ba:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80029be:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80029c2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80029c6:	b29b      	uxth	r3, r3
 80029c8:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80029ca:	8b7b      	ldrh	r3, [r7, #26]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	f000 8087 	beq.w	8002ae0 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	6818      	ldr	r0, [r3, #0]
 80029d6:	68bb      	ldr	r3, [r7, #8]
 80029d8:	6959      	ldr	r1, [r3, #20]
 80029da:	68bb      	ldr	r3, [r7, #8]
 80029dc:	891a      	ldrh	r2, [r3, #8]
 80029de:	8b7b      	ldrh	r3, [r7, #26]
 80029e0:	f004 fa30 	bl	8006e44 <USB_ReadPMA>
 80029e4:	e07c      	b.n	8002ae0 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80029ee:	b29b      	uxth	r3, r3
 80029f0:	461a      	mov	r2, r3
 80029f2:	68bb      	ldr	r3, [r7, #8]
 80029f4:	781b      	ldrb	r3, [r3, #0]
 80029f6:	00db      	lsls	r3, r3, #3
 80029f8:	4413      	add	r3, r2
 80029fa:	3306      	adds	r3, #6
 80029fc:	005b      	lsls	r3, r3, #1
 80029fe:	68fa      	ldr	r2, [r7, #12]
 8002a00:	6812      	ldr	r2, [r2, #0]
 8002a02:	4413      	add	r3, r2
 8002a04:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002a08:	881b      	ldrh	r3, [r3, #0]
 8002a0a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a0e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	699a      	ldr	r2, [r3, #24]
 8002a14:	8b7b      	ldrh	r3, [r7, #26]
 8002a16:	429a      	cmp	r2, r3
 8002a18:	d306      	bcc.n	8002a28 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8002a1a:	68bb      	ldr	r3, [r7, #8]
 8002a1c:	699a      	ldr	r2, [r3, #24]
 8002a1e:	8b7b      	ldrh	r3, [r7, #26]
 8002a20:	1ad2      	subs	r2, r2, r3
 8002a22:	68bb      	ldr	r3, [r7, #8]
 8002a24:	619a      	str	r2, [r3, #24]
 8002a26:	e002      	b.n	8002a2e <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	699b      	ldr	r3, [r3, #24]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d123      	bne.n	8002a7e <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	461a      	mov	r2, r3
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	781b      	ldrb	r3, [r3, #0]
 8002a40:	009b      	lsls	r3, r3, #2
 8002a42:	4413      	add	r3, r2
 8002a44:	881b      	ldrh	r3, [r3, #0]
 8002a46:	b29b      	uxth	r3, r3
 8002a48:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002a4c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002a50:	83fb      	strh	r3, [r7, #30]
 8002a52:	8bfb      	ldrh	r3, [r7, #30]
 8002a54:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8002a58:	83fb      	strh	r3, [r7, #30]
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	461a      	mov	r2, r3
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	781b      	ldrb	r3, [r3, #0]
 8002a64:	009b      	lsls	r3, r3, #2
 8002a66:	441a      	add	r2, r3
 8002a68:	8bfb      	ldrh	r3, [r7, #30]
 8002a6a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002a6e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002a72:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002a76:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002a7a:	b29b      	uxth	r3, r3
 8002a7c:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002a7e:	88fb      	ldrh	r3, [r7, #6]
 8002a80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d11f      	bne.n	8002ac8 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	461a      	mov	r2, r3
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	781b      	ldrb	r3, [r3, #0]
 8002a92:	009b      	lsls	r3, r3, #2
 8002a94:	4413      	add	r3, r2
 8002a96:	881b      	ldrh	r3, [r3, #0]
 8002a98:	b29b      	uxth	r3, r3
 8002a9a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002a9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002aa2:	83bb      	strh	r3, [r7, #28]
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	461a      	mov	r2, r3
 8002aaa:	68bb      	ldr	r3, [r7, #8]
 8002aac:	781b      	ldrb	r3, [r3, #0]
 8002aae:	009b      	lsls	r3, r3, #2
 8002ab0:	441a      	add	r2, r3
 8002ab2:	8bbb      	ldrh	r3, [r7, #28]
 8002ab4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002ab8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002abc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002ac0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002ac4:	b29b      	uxth	r3, r3
 8002ac6:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002ac8:	8b7b      	ldrh	r3, [r7, #26]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d008      	beq.n	8002ae0 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	6818      	ldr	r0, [r3, #0]
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	6959      	ldr	r1, [r3, #20]
 8002ad6:	68bb      	ldr	r3, [r7, #8]
 8002ad8:	895a      	ldrh	r2, [r3, #10]
 8002ada:	8b7b      	ldrh	r3, [r7, #26]
 8002adc:	f004 f9b2 	bl	8006e44 <USB_ReadPMA>
    }
  }

  return count;
 8002ae0:	8b7b      	ldrh	r3, [r7, #26]
}
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	3720      	adds	r7, #32
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}

08002aea <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002aea:	b580      	push	{r7, lr}
 8002aec:	b0a4      	sub	sp, #144	@ 0x90
 8002aee:	af00      	add	r7, sp, #0
 8002af0:	60f8      	str	r0, [r7, #12]
 8002af2:	60b9      	str	r1, [r7, #8]
 8002af4:	4613      	mov	r3, r2
 8002af6:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002af8:	88fb      	ldrh	r3, [r7, #6]
 8002afa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	f000 81dd 	beq.w	8002ebe <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002b0c:	b29b      	uxth	r3, r3
 8002b0e:	461a      	mov	r2, r3
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	781b      	ldrb	r3, [r3, #0]
 8002b14:	00db      	lsls	r3, r3, #3
 8002b16:	4413      	add	r3, r2
 8002b18:	3302      	adds	r3, #2
 8002b1a:	005b      	lsls	r3, r3, #1
 8002b1c:	68fa      	ldr	r2, [r7, #12]
 8002b1e:	6812      	ldr	r2, [r2, #0]
 8002b20:	4413      	add	r3, r2
 8002b22:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002b26:	881b      	ldrh	r3, [r3, #0]
 8002b28:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b2c:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	699a      	ldr	r2, [r3, #24]
 8002b34:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002b38:	429a      	cmp	r2, r3
 8002b3a:	d907      	bls.n	8002b4c <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	699a      	ldr	r2, [r3, #24]
 8002b40:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002b44:	1ad2      	subs	r2, r2, r3
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	619a      	str	r2, [r3, #24]
 8002b4a:	e002      	b.n	8002b52 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002b52:	68bb      	ldr	r3, [r7, #8]
 8002b54:	699b      	ldr	r3, [r3, #24]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	f040 80b9 	bne.w	8002cce <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002b5c:	68bb      	ldr	r3, [r7, #8]
 8002b5e:	785b      	ldrb	r3, [r3, #1]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d126      	bne.n	8002bb2 <HAL_PCD_EP_DB_Transmit+0xc8>
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002b72:	b29b      	uxth	r3, r3
 8002b74:	461a      	mov	r2, r3
 8002b76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b78:	4413      	add	r3, r2
 8002b7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	781b      	ldrb	r3, [r3, #0]
 8002b80:	011a      	lsls	r2, r3, #4
 8002b82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b84:	4413      	add	r3, r2
 8002b86:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002b8a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002b8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b8e:	881b      	ldrh	r3, [r3, #0]
 8002b90:	b29b      	uxth	r3, r3
 8002b92:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b96:	b29a      	uxth	r2, r3
 8002b98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b9a:	801a      	strh	r2, [r3, #0]
 8002b9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b9e:	881b      	ldrh	r3, [r3, #0]
 8002ba0:	b29b      	uxth	r3, r3
 8002ba2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002ba6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002baa:	b29a      	uxth	r2, r3
 8002bac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bae:	801a      	strh	r2, [r3, #0]
 8002bb0:	e01a      	b.n	8002be8 <HAL_PCD_EP_DB_Transmit+0xfe>
 8002bb2:	68bb      	ldr	r3, [r7, #8]
 8002bb4:	785b      	ldrb	r3, [r3, #1]
 8002bb6:	2b01      	cmp	r3, #1
 8002bb8:	d116      	bne.n	8002be8 <HAL_PCD_EP_DB_Transmit+0xfe>
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	637b      	str	r3, [r7, #52]	@ 0x34
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002bc8:	b29b      	uxth	r3, r3
 8002bca:	461a      	mov	r2, r3
 8002bcc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002bce:	4413      	add	r3, r2
 8002bd0:	637b      	str	r3, [r7, #52]	@ 0x34
 8002bd2:	68bb      	ldr	r3, [r7, #8]
 8002bd4:	781b      	ldrb	r3, [r3, #0]
 8002bd6:	011a      	lsls	r2, r3, #4
 8002bd8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002bda:	4413      	add	r3, r2
 8002bdc:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002be0:	633b      	str	r3, [r7, #48]	@ 0x30
 8002be2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002be4:	2200      	movs	r2, #0
 8002be6:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	627b      	str	r3, [r7, #36]	@ 0x24
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	785b      	ldrb	r3, [r3, #1]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d126      	bne.n	8002c44 <HAL_PCD_EP_DB_Transmit+0x15a>
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	61fb      	str	r3, [r7, #28]
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002c04:	b29b      	uxth	r3, r3
 8002c06:	461a      	mov	r2, r3
 8002c08:	69fb      	ldr	r3, [r7, #28]
 8002c0a:	4413      	add	r3, r2
 8002c0c:	61fb      	str	r3, [r7, #28]
 8002c0e:	68bb      	ldr	r3, [r7, #8]
 8002c10:	781b      	ldrb	r3, [r3, #0]
 8002c12:	011a      	lsls	r2, r3, #4
 8002c14:	69fb      	ldr	r3, [r7, #28]
 8002c16:	4413      	add	r3, r2
 8002c18:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002c1c:	61bb      	str	r3, [r7, #24]
 8002c1e:	69bb      	ldr	r3, [r7, #24]
 8002c20:	881b      	ldrh	r3, [r3, #0]
 8002c22:	b29b      	uxth	r3, r3
 8002c24:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c28:	b29a      	uxth	r2, r3
 8002c2a:	69bb      	ldr	r3, [r7, #24]
 8002c2c:	801a      	strh	r2, [r3, #0]
 8002c2e:	69bb      	ldr	r3, [r7, #24]
 8002c30:	881b      	ldrh	r3, [r3, #0]
 8002c32:	b29b      	uxth	r3, r3
 8002c34:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c38:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c3c:	b29a      	uxth	r2, r3
 8002c3e:	69bb      	ldr	r3, [r7, #24]
 8002c40:	801a      	strh	r2, [r3, #0]
 8002c42:	e017      	b.n	8002c74 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	785b      	ldrb	r3, [r3, #1]
 8002c48:	2b01      	cmp	r3, #1
 8002c4a:	d113      	bne.n	8002c74 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002c54:	b29b      	uxth	r3, r3
 8002c56:	461a      	mov	r2, r3
 8002c58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c5a:	4413      	add	r3, r2
 8002c5c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c5e:	68bb      	ldr	r3, [r7, #8]
 8002c60:	781b      	ldrb	r3, [r3, #0]
 8002c62:	011a      	lsls	r2, r3, #4
 8002c64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c66:	4413      	add	r3, r2
 8002c68:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002c6c:	623b      	str	r3, [r7, #32]
 8002c6e:	6a3b      	ldr	r3, [r7, #32]
 8002c70:	2200      	movs	r2, #0
 8002c72:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	781b      	ldrb	r3, [r3, #0]
 8002c78:	4619      	mov	r1, r3
 8002c7a:	68f8      	ldr	r0, [r7, #12]
 8002c7c:	f005 fee1 	bl	8008a42 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002c80:	88fb      	ldrh	r3, [r7, #6]
 8002c82:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	f000 82fc 	beq.w	8003284 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	461a      	mov	r2, r3
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	781b      	ldrb	r3, [r3, #0]
 8002c96:	009b      	lsls	r3, r3, #2
 8002c98:	4413      	add	r3, r2
 8002c9a:	881b      	ldrh	r3, [r3, #0]
 8002c9c:	b29b      	uxth	r3, r3
 8002c9e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002ca2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002ca6:	82fb      	strh	r3, [r7, #22]
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	461a      	mov	r2, r3
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	781b      	ldrb	r3, [r3, #0]
 8002cb2:	009b      	lsls	r3, r3, #2
 8002cb4:	441a      	add	r2, r3
 8002cb6:	8afb      	ldrh	r3, [r7, #22]
 8002cb8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002cbc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002cc0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002cc4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002cc8:	b29b      	uxth	r3, r3
 8002cca:	8013      	strh	r3, [r2, #0]
 8002ccc:	e2da      	b.n	8003284 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002cce:	88fb      	ldrh	r3, [r7, #6]
 8002cd0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d021      	beq.n	8002d1c <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	461a      	mov	r2, r3
 8002cde:	68bb      	ldr	r3, [r7, #8]
 8002ce0:	781b      	ldrb	r3, [r3, #0]
 8002ce2:	009b      	lsls	r3, r3, #2
 8002ce4:	4413      	add	r3, r2
 8002ce6:	881b      	ldrh	r3, [r3, #0]
 8002ce8:	b29b      	uxth	r3, r3
 8002cea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002cee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002cf2:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	461a      	mov	r2, r3
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	781b      	ldrb	r3, [r3, #0]
 8002d00:	009b      	lsls	r3, r3, #2
 8002d02:	441a      	add	r2, r3
 8002d04:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8002d08:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002d0c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002d10:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002d14:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002d18:	b29b      	uxth	r3, r3
 8002d1a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002d22:	2b01      	cmp	r3, #1
 8002d24:	f040 82ae 	bne.w	8003284 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8002d28:	68bb      	ldr	r3, [r7, #8]
 8002d2a:	695a      	ldr	r2, [r3, #20]
 8002d2c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002d30:	441a      	add	r2, r3
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002d36:	68bb      	ldr	r3, [r7, #8]
 8002d38:	69da      	ldr	r2, [r3, #28]
 8002d3a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002d3e:	441a      	add	r2, r3
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	6a1a      	ldr	r2, [r3, #32]
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	691b      	ldr	r3, [r3, #16]
 8002d4c:	429a      	cmp	r2, r3
 8002d4e:	d30b      	bcc.n	8002d68 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	691b      	ldr	r3, [r3, #16]
 8002d54:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	6a1a      	ldr	r2, [r3, #32]
 8002d5c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002d60:	1ad2      	subs	r2, r2, r3
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	621a      	str	r2, [r3, #32]
 8002d66:	e017      	b.n	8002d98 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8002d68:	68bb      	ldr	r3, [r7, #8]
 8002d6a:	6a1b      	ldr	r3, [r3, #32]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d108      	bne.n	8002d82 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8002d70:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002d74:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8002d80:	e00a      	b.n	8002d98 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002d82:	68bb      	ldr	r3, [r7, #8]
 8002d84:	2200      	movs	r2, #0
 8002d86:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8002d8a:	68bb      	ldr	r3, [r7, #8]
 8002d8c:	6a1b      	ldr	r3, [r3, #32]
 8002d8e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	2200      	movs	r2, #0
 8002d96:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	785b      	ldrb	r3, [r3, #1]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d165      	bne.n	8002e6c <HAL_PCD_EP_DB_Transmit+0x382>
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002dae:	b29b      	uxth	r3, r3
 8002db0:	461a      	mov	r2, r3
 8002db2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002db4:	4413      	add	r3, r2
 8002db6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002db8:	68bb      	ldr	r3, [r7, #8]
 8002dba:	781b      	ldrb	r3, [r3, #0]
 8002dbc:	011a      	lsls	r2, r3, #4
 8002dbe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002dc0:	4413      	add	r3, r2
 8002dc2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002dc6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002dc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002dca:	881b      	ldrh	r3, [r3, #0]
 8002dcc:	b29b      	uxth	r3, r3
 8002dce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002dd2:	b29a      	uxth	r2, r3
 8002dd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002dd6:	801a      	strh	r2, [r3, #0]
 8002dd8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002ddc:	2b3e      	cmp	r3, #62	@ 0x3e
 8002dde:	d91d      	bls.n	8002e1c <HAL_PCD_EP_DB_Transmit+0x332>
 8002de0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002de4:	095b      	lsrs	r3, r3, #5
 8002de6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002de8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002dec:	f003 031f 	and.w	r3, r3, #31
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d102      	bne.n	8002dfa <HAL_PCD_EP_DB_Transmit+0x310>
 8002df4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002df6:	3b01      	subs	r3, #1
 8002df8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002dfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002dfc:	881b      	ldrh	r3, [r3, #0]
 8002dfe:	b29a      	uxth	r2, r3
 8002e00:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002e02:	b29b      	uxth	r3, r3
 8002e04:	029b      	lsls	r3, r3, #10
 8002e06:	b29b      	uxth	r3, r3
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	b29b      	uxth	r3, r3
 8002e0c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e10:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e14:	b29a      	uxth	r2, r3
 8002e16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e18:	801a      	strh	r2, [r3, #0]
 8002e1a:	e044      	b.n	8002ea6 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002e1c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d10a      	bne.n	8002e3a <HAL_PCD_EP_DB_Transmit+0x350>
 8002e24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e26:	881b      	ldrh	r3, [r3, #0]
 8002e28:	b29b      	uxth	r3, r3
 8002e2a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e2e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e32:	b29a      	uxth	r2, r3
 8002e34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e36:	801a      	strh	r2, [r3, #0]
 8002e38:	e035      	b.n	8002ea6 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002e3a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002e3e:	085b      	lsrs	r3, r3, #1
 8002e40:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002e42:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002e46:	f003 0301 	and.w	r3, r3, #1
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d002      	beq.n	8002e54 <HAL_PCD_EP_DB_Transmit+0x36a>
 8002e4e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002e50:	3301      	adds	r3, #1
 8002e52:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002e54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e56:	881b      	ldrh	r3, [r3, #0]
 8002e58:	b29a      	uxth	r2, r3
 8002e5a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002e5c:	b29b      	uxth	r3, r3
 8002e5e:	029b      	lsls	r3, r3, #10
 8002e60:	b29b      	uxth	r3, r3
 8002e62:	4313      	orrs	r3, r2
 8002e64:	b29a      	uxth	r2, r3
 8002e66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e68:	801a      	strh	r2, [r3, #0]
 8002e6a:	e01c      	b.n	8002ea6 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	785b      	ldrb	r3, [r3, #1]
 8002e70:	2b01      	cmp	r3, #1
 8002e72:	d118      	bne.n	8002ea6 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	647b      	str	r3, [r7, #68]	@ 0x44
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002e82:	b29b      	uxth	r3, r3
 8002e84:	461a      	mov	r2, r3
 8002e86:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002e88:	4413      	add	r3, r2
 8002e8a:	647b      	str	r3, [r7, #68]	@ 0x44
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	781b      	ldrb	r3, [r3, #0]
 8002e90:	011a      	lsls	r2, r3, #4
 8002e92:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002e94:	4413      	add	r3, r2
 8002e96:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002e9a:	643b      	str	r3, [r7, #64]	@ 0x40
 8002e9c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002ea0:	b29a      	uxth	r2, r3
 8002ea2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002ea4:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	6818      	ldr	r0, [r3, #0]
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	6959      	ldr	r1, [r3, #20]
 8002eae:	68bb      	ldr	r3, [r7, #8]
 8002eb0:	891a      	ldrh	r2, [r3, #8]
 8002eb2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002eb6:	b29b      	uxth	r3, r3
 8002eb8:	f003 ff7f 	bl	8006dba <USB_WritePMA>
 8002ebc:	e1e2      	b.n	8003284 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002ec6:	b29b      	uxth	r3, r3
 8002ec8:	461a      	mov	r2, r3
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	781b      	ldrb	r3, [r3, #0]
 8002ece:	00db      	lsls	r3, r3, #3
 8002ed0:	4413      	add	r3, r2
 8002ed2:	3306      	adds	r3, #6
 8002ed4:	005b      	lsls	r3, r3, #1
 8002ed6:	68fa      	ldr	r2, [r7, #12]
 8002ed8:	6812      	ldr	r2, [r2, #0]
 8002eda:	4413      	add	r3, r2
 8002edc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002ee0:	881b      	ldrh	r3, [r3, #0]
 8002ee2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ee6:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 8002eea:	68bb      	ldr	r3, [r7, #8]
 8002eec:	699a      	ldr	r2, [r3, #24]
 8002eee:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002ef2:	429a      	cmp	r2, r3
 8002ef4:	d307      	bcc.n	8002f06 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8002ef6:	68bb      	ldr	r3, [r7, #8]
 8002ef8:	699a      	ldr	r2, [r3, #24]
 8002efa:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002efe:	1ad2      	subs	r2, r2, r3
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	619a      	str	r2, [r3, #24]
 8002f04:	e002      	b.n	8002f0c <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002f0c:	68bb      	ldr	r3, [r7, #8]
 8002f0e:	699b      	ldr	r3, [r3, #24]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	f040 80c0 	bne.w	8003096 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002f16:	68bb      	ldr	r3, [r7, #8]
 8002f18:	785b      	ldrb	r3, [r3, #1]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d126      	bne.n	8002f6c <HAL_PCD_EP_DB_Transmit+0x482>
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002f2c:	b29b      	uxth	r3, r3
 8002f2e:	461a      	mov	r2, r3
 8002f30:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002f32:	4413      	add	r3, r2
 8002f34:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002f36:	68bb      	ldr	r3, [r7, #8]
 8002f38:	781b      	ldrb	r3, [r3, #0]
 8002f3a:	011a      	lsls	r2, r3, #4
 8002f3c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002f3e:	4413      	add	r3, r2
 8002f40:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002f44:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002f46:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002f48:	881b      	ldrh	r3, [r3, #0]
 8002f4a:	b29b      	uxth	r3, r3
 8002f4c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f50:	b29a      	uxth	r2, r3
 8002f52:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002f54:	801a      	strh	r2, [r3, #0]
 8002f56:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002f58:	881b      	ldrh	r3, [r3, #0]
 8002f5a:	b29b      	uxth	r3, r3
 8002f5c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f60:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f64:	b29a      	uxth	r2, r3
 8002f66:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002f68:	801a      	strh	r2, [r3, #0]
 8002f6a:	e01a      	b.n	8002fa2 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	785b      	ldrb	r3, [r3, #1]
 8002f70:	2b01      	cmp	r3, #1
 8002f72:	d116      	bne.n	8002fa2 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	667b      	str	r3, [r7, #100]	@ 0x64
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002f82:	b29b      	uxth	r3, r3
 8002f84:	461a      	mov	r2, r3
 8002f86:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002f88:	4413      	add	r3, r2
 8002f8a:	667b      	str	r3, [r7, #100]	@ 0x64
 8002f8c:	68bb      	ldr	r3, [r7, #8]
 8002f8e:	781b      	ldrb	r3, [r3, #0]
 8002f90:	011a      	lsls	r2, r3, #4
 8002f92:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002f94:	4413      	add	r3, r2
 8002f96:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002f9a:	663b      	str	r3, [r7, #96]	@ 0x60
 8002f9c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	677b      	str	r3, [r7, #116]	@ 0x74
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	785b      	ldrb	r3, [r3, #1]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d12b      	bne.n	8003008 <HAL_PCD_EP_DB_Transmit+0x51e>
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002fbe:	b29b      	uxth	r3, r3
 8002fc0:	461a      	mov	r2, r3
 8002fc2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002fc4:	4413      	add	r3, r2
 8002fc6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002fc8:	68bb      	ldr	r3, [r7, #8]
 8002fca:	781b      	ldrb	r3, [r3, #0]
 8002fcc:	011a      	lsls	r2, r3, #4
 8002fce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002fd0:	4413      	add	r3, r2
 8002fd2:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002fd6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002fda:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002fde:	881b      	ldrh	r3, [r3, #0]
 8002fe0:	b29b      	uxth	r3, r3
 8002fe2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002fe6:	b29a      	uxth	r2, r3
 8002fe8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002fec:	801a      	strh	r2, [r3, #0]
 8002fee:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002ff2:	881b      	ldrh	r3, [r3, #0]
 8002ff4:	b29b      	uxth	r3, r3
 8002ff6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002ffa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ffe:	b29a      	uxth	r2, r3
 8003000:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003004:	801a      	strh	r2, [r3, #0]
 8003006:	e017      	b.n	8003038 <HAL_PCD_EP_DB_Transmit+0x54e>
 8003008:	68bb      	ldr	r3, [r7, #8]
 800300a:	785b      	ldrb	r3, [r3, #1]
 800300c:	2b01      	cmp	r3, #1
 800300e:	d113      	bne.n	8003038 <HAL_PCD_EP_DB_Transmit+0x54e>
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003018:	b29b      	uxth	r3, r3
 800301a:	461a      	mov	r2, r3
 800301c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800301e:	4413      	add	r3, r2
 8003020:	677b      	str	r3, [r7, #116]	@ 0x74
 8003022:	68bb      	ldr	r3, [r7, #8]
 8003024:	781b      	ldrb	r3, [r3, #0]
 8003026:	011a      	lsls	r2, r3, #4
 8003028:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800302a:	4413      	add	r3, r2
 800302c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003030:	673b      	str	r3, [r7, #112]	@ 0x70
 8003032:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003034:	2200      	movs	r2, #0
 8003036:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	781b      	ldrb	r3, [r3, #0]
 800303c:	4619      	mov	r1, r3
 800303e:	68f8      	ldr	r0, [r7, #12]
 8003040:	f005 fcff 	bl	8008a42 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003044:	88fb      	ldrh	r3, [r7, #6]
 8003046:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800304a:	2b00      	cmp	r3, #0
 800304c:	f040 811a 	bne.w	8003284 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	461a      	mov	r2, r3
 8003056:	68bb      	ldr	r3, [r7, #8]
 8003058:	781b      	ldrb	r3, [r3, #0]
 800305a:	009b      	lsls	r3, r3, #2
 800305c:	4413      	add	r3, r2
 800305e:	881b      	ldrh	r3, [r3, #0]
 8003060:	b29b      	uxth	r3, r3
 8003062:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003066:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800306a:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	461a      	mov	r2, r3
 8003074:	68bb      	ldr	r3, [r7, #8]
 8003076:	781b      	ldrb	r3, [r3, #0]
 8003078:	009b      	lsls	r3, r3, #2
 800307a:	441a      	add	r2, r3
 800307c:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8003080:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003084:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003088:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800308c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003090:	b29b      	uxth	r3, r3
 8003092:	8013      	strh	r3, [r2, #0]
 8003094:	e0f6      	b.n	8003284 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003096:	88fb      	ldrh	r3, [r7, #6]
 8003098:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800309c:	2b00      	cmp	r3, #0
 800309e:	d121      	bne.n	80030e4 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	461a      	mov	r2, r3
 80030a6:	68bb      	ldr	r3, [r7, #8]
 80030a8:	781b      	ldrb	r3, [r3, #0]
 80030aa:	009b      	lsls	r3, r3, #2
 80030ac:	4413      	add	r3, r2
 80030ae:	881b      	ldrh	r3, [r3, #0]
 80030b0:	b29b      	uxth	r3, r3
 80030b2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80030b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80030ba:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	461a      	mov	r2, r3
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	781b      	ldrb	r3, [r3, #0]
 80030c8:	009b      	lsls	r3, r3, #2
 80030ca:	441a      	add	r2, r3
 80030cc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80030d0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80030d4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80030d8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80030dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80030e0:	b29b      	uxth	r3, r3
 80030e2:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80030e4:	68bb      	ldr	r3, [r7, #8]
 80030e6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80030ea:	2b01      	cmp	r3, #1
 80030ec:	f040 80ca 	bne.w	8003284 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	695a      	ldr	r2, [r3, #20]
 80030f4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80030f8:	441a      	add	r2, r3
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	69da      	ldr	r2, [r3, #28]
 8003102:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003106:	441a      	add	r2, r3
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800310c:	68bb      	ldr	r3, [r7, #8]
 800310e:	6a1a      	ldr	r2, [r3, #32]
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	691b      	ldr	r3, [r3, #16]
 8003114:	429a      	cmp	r2, r3
 8003116:	d30b      	bcc.n	8003130 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	691b      	ldr	r3, [r3, #16]
 800311c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	6a1a      	ldr	r2, [r3, #32]
 8003124:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003128:	1ad2      	subs	r2, r2, r3
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	621a      	str	r2, [r3, #32]
 800312e:	e017      	b.n	8003160 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	6a1b      	ldr	r3, [r3, #32]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d108      	bne.n	800314a <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8003138:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800313c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8003140:	68bb      	ldr	r3, [r7, #8]
 8003142:	2200      	movs	r2, #0
 8003144:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003148:	e00a      	b.n	8003160 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 800314a:	68bb      	ldr	r3, [r7, #8]
 800314c:	6a1b      	ldr	r3, [r3, #32]
 800314e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8003152:	68bb      	ldr	r3, [r7, #8]
 8003154:	2200      	movs	r2, #0
 8003156:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003158:	68bb      	ldr	r3, [r7, #8]
 800315a:	2200      	movs	r2, #0
 800315c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	657b      	str	r3, [r7, #84]	@ 0x54
 8003166:	68bb      	ldr	r3, [r7, #8]
 8003168:	785b      	ldrb	r3, [r3, #1]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d165      	bne.n	800323a <HAL_PCD_EP_DB_Transmit+0x750>
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800317c:	b29b      	uxth	r3, r3
 800317e:	461a      	mov	r2, r3
 8003180:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003182:	4413      	add	r3, r2
 8003184:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	781b      	ldrb	r3, [r3, #0]
 800318a:	011a      	lsls	r2, r3, #4
 800318c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800318e:	4413      	add	r3, r2
 8003190:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003194:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003196:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003198:	881b      	ldrh	r3, [r3, #0]
 800319a:	b29b      	uxth	r3, r3
 800319c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80031a0:	b29a      	uxth	r2, r3
 80031a2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80031a4:	801a      	strh	r2, [r3, #0]
 80031a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80031aa:	2b3e      	cmp	r3, #62	@ 0x3e
 80031ac:	d91d      	bls.n	80031ea <HAL_PCD_EP_DB_Transmit+0x700>
 80031ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80031b2:	095b      	lsrs	r3, r3, #5
 80031b4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80031b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80031ba:	f003 031f 	and.w	r3, r3, #31
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d102      	bne.n	80031c8 <HAL_PCD_EP_DB_Transmit+0x6de>
 80031c2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80031c4:	3b01      	subs	r3, #1
 80031c6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80031c8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80031ca:	881b      	ldrh	r3, [r3, #0]
 80031cc:	b29a      	uxth	r2, r3
 80031ce:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80031d0:	b29b      	uxth	r3, r3
 80031d2:	029b      	lsls	r3, r3, #10
 80031d4:	b29b      	uxth	r3, r3
 80031d6:	4313      	orrs	r3, r2
 80031d8:	b29b      	uxth	r3, r3
 80031da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80031de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80031e2:	b29a      	uxth	r2, r3
 80031e4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80031e6:	801a      	strh	r2, [r3, #0]
 80031e8:	e041      	b.n	800326e <HAL_PCD_EP_DB_Transmit+0x784>
 80031ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d10a      	bne.n	8003208 <HAL_PCD_EP_DB_Transmit+0x71e>
 80031f2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80031f4:	881b      	ldrh	r3, [r3, #0]
 80031f6:	b29b      	uxth	r3, r3
 80031f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80031fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003200:	b29a      	uxth	r2, r3
 8003202:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003204:	801a      	strh	r2, [r3, #0]
 8003206:	e032      	b.n	800326e <HAL_PCD_EP_DB_Transmit+0x784>
 8003208:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800320c:	085b      	lsrs	r3, r3, #1
 800320e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003210:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003214:	f003 0301 	and.w	r3, r3, #1
 8003218:	2b00      	cmp	r3, #0
 800321a:	d002      	beq.n	8003222 <HAL_PCD_EP_DB_Transmit+0x738>
 800321c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800321e:	3301      	adds	r3, #1
 8003220:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003222:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003224:	881b      	ldrh	r3, [r3, #0]
 8003226:	b29a      	uxth	r2, r3
 8003228:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800322a:	b29b      	uxth	r3, r3
 800322c:	029b      	lsls	r3, r3, #10
 800322e:	b29b      	uxth	r3, r3
 8003230:	4313      	orrs	r3, r2
 8003232:	b29a      	uxth	r2, r3
 8003234:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003236:	801a      	strh	r2, [r3, #0]
 8003238:	e019      	b.n	800326e <HAL_PCD_EP_DB_Transmit+0x784>
 800323a:	68bb      	ldr	r3, [r7, #8]
 800323c:	785b      	ldrb	r3, [r3, #1]
 800323e:	2b01      	cmp	r3, #1
 8003240:	d115      	bne.n	800326e <HAL_PCD_EP_DB_Transmit+0x784>
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800324a:	b29b      	uxth	r3, r3
 800324c:	461a      	mov	r2, r3
 800324e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003250:	4413      	add	r3, r2
 8003252:	657b      	str	r3, [r7, #84]	@ 0x54
 8003254:	68bb      	ldr	r3, [r7, #8]
 8003256:	781b      	ldrb	r3, [r3, #0]
 8003258:	011a      	lsls	r2, r3, #4
 800325a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800325c:	4413      	add	r3, r2
 800325e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003262:	653b      	str	r3, [r7, #80]	@ 0x50
 8003264:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003268:	b29a      	uxth	r2, r3
 800326a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800326c:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	6818      	ldr	r0, [r3, #0]
 8003272:	68bb      	ldr	r3, [r7, #8]
 8003274:	6959      	ldr	r1, [r3, #20]
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	895a      	ldrh	r2, [r3, #10]
 800327a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800327e:	b29b      	uxth	r3, r3
 8003280:	f003 fd9b 	bl	8006dba <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	461a      	mov	r2, r3
 800328a:	68bb      	ldr	r3, [r7, #8]
 800328c:	781b      	ldrb	r3, [r3, #0]
 800328e:	009b      	lsls	r3, r3, #2
 8003290:	4413      	add	r3, r2
 8003292:	881b      	ldrh	r3, [r3, #0]
 8003294:	b29b      	uxth	r3, r3
 8003296:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800329a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800329e:	82bb      	strh	r3, [r7, #20]
 80032a0:	8abb      	ldrh	r3, [r7, #20]
 80032a2:	f083 0310 	eor.w	r3, r3, #16
 80032a6:	82bb      	strh	r3, [r7, #20]
 80032a8:	8abb      	ldrh	r3, [r7, #20]
 80032aa:	f083 0320 	eor.w	r3, r3, #32
 80032ae:	82bb      	strh	r3, [r7, #20]
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	461a      	mov	r2, r3
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	781b      	ldrb	r3, [r3, #0]
 80032ba:	009b      	lsls	r3, r3, #2
 80032bc:	441a      	add	r2, r3
 80032be:	8abb      	ldrh	r3, [r7, #20]
 80032c0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80032c4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80032c8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80032cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80032d0:	b29b      	uxth	r3, r3
 80032d2:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80032d4:	2300      	movs	r3, #0
}
 80032d6:	4618      	mov	r0, r3
 80032d8:	3790      	adds	r7, #144	@ 0x90
 80032da:	46bd      	mov	sp, r7
 80032dc:	bd80      	pop	{r7, pc}

080032de <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80032de:	b480      	push	{r7}
 80032e0:	b087      	sub	sp, #28
 80032e2:	af00      	add	r7, sp, #0
 80032e4:	60f8      	str	r0, [r7, #12]
 80032e6:	607b      	str	r3, [r7, #4]
 80032e8:	460b      	mov	r3, r1
 80032ea:	817b      	strh	r3, [r7, #10]
 80032ec:	4613      	mov	r3, r2
 80032ee:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80032f0:	897b      	ldrh	r3, [r7, #10]
 80032f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032f6:	b29b      	uxth	r3, r3
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d00b      	beq.n	8003314 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80032fc:	897b      	ldrh	r3, [r7, #10]
 80032fe:	f003 0207 	and.w	r2, r3, #7
 8003302:	4613      	mov	r3, r2
 8003304:	009b      	lsls	r3, r3, #2
 8003306:	4413      	add	r3, r2
 8003308:	00db      	lsls	r3, r3, #3
 800330a:	3310      	adds	r3, #16
 800330c:	68fa      	ldr	r2, [r7, #12]
 800330e:	4413      	add	r3, r2
 8003310:	617b      	str	r3, [r7, #20]
 8003312:	e009      	b.n	8003328 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003314:	897a      	ldrh	r2, [r7, #10]
 8003316:	4613      	mov	r3, r2
 8003318:	009b      	lsls	r3, r3, #2
 800331a:	4413      	add	r3, r2
 800331c:	00db      	lsls	r3, r3, #3
 800331e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003322:	68fa      	ldr	r2, [r7, #12]
 8003324:	4413      	add	r3, r2
 8003326:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003328:	893b      	ldrh	r3, [r7, #8]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d107      	bne.n	800333e <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	2200      	movs	r2, #0
 8003332:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	b29a      	uxth	r2, r3
 8003338:	697b      	ldr	r3, [r7, #20]
 800333a:	80da      	strh	r2, [r3, #6]
 800333c:	e00b      	b.n	8003356 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	2201      	movs	r2, #1
 8003342:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	b29a      	uxth	r2, r3
 8003348:	697b      	ldr	r3, [r7, #20]
 800334a:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	0c1b      	lsrs	r3, r3, #16
 8003350:	b29a      	uxth	r2, r3
 8003352:	697b      	ldr	r3, [r7, #20]
 8003354:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8003356:	2300      	movs	r3, #0
}
 8003358:	4618      	mov	r0, r3
 800335a:	371c      	adds	r7, #28
 800335c:	46bd      	mov	sp, r7
 800335e:	bc80      	pop	{r7}
 8003360:	4770      	bx	lr
	...

08003364 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b086      	sub	sp, #24
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d101      	bne.n	8003376 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	e272      	b.n	800385c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f003 0301 	and.w	r3, r3, #1
 800337e:	2b00      	cmp	r3, #0
 8003380:	f000 8087 	beq.w	8003492 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003384:	4b92      	ldr	r3, [pc, #584]	@ (80035d0 <HAL_RCC_OscConfig+0x26c>)
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	f003 030c 	and.w	r3, r3, #12
 800338c:	2b04      	cmp	r3, #4
 800338e:	d00c      	beq.n	80033aa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003390:	4b8f      	ldr	r3, [pc, #572]	@ (80035d0 <HAL_RCC_OscConfig+0x26c>)
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	f003 030c 	and.w	r3, r3, #12
 8003398:	2b08      	cmp	r3, #8
 800339a:	d112      	bne.n	80033c2 <HAL_RCC_OscConfig+0x5e>
 800339c:	4b8c      	ldr	r3, [pc, #560]	@ (80035d0 <HAL_RCC_OscConfig+0x26c>)
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80033a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80033a8:	d10b      	bne.n	80033c2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033aa:	4b89      	ldr	r3, [pc, #548]	@ (80035d0 <HAL_RCC_OscConfig+0x26c>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d06c      	beq.n	8003490 <HAL_RCC_OscConfig+0x12c>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d168      	bne.n	8003490 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80033be:	2301      	movs	r3, #1
 80033c0:	e24c      	b.n	800385c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80033ca:	d106      	bne.n	80033da <HAL_RCC_OscConfig+0x76>
 80033cc:	4b80      	ldr	r3, [pc, #512]	@ (80035d0 <HAL_RCC_OscConfig+0x26c>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a7f      	ldr	r2, [pc, #508]	@ (80035d0 <HAL_RCC_OscConfig+0x26c>)
 80033d2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033d6:	6013      	str	r3, [r2, #0]
 80033d8:	e02e      	b.n	8003438 <HAL_RCC_OscConfig+0xd4>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d10c      	bne.n	80033fc <HAL_RCC_OscConfig+0x98>
 80033e2:	4b7b      	ldr	r3, [pc, #492]	@ (80035d0 <HAL_RCC_OscConfig+0x26c>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a7a      	ldr	r2, [pc, #488]	@ (80035d0 <HAL_RCC_OscConfig+0x26c>)
 80033e8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80033ec:	6013      	str	r3, [r2, #0]
 80033ee:	4b78      	ldr	r3, [pc, #480]	@ (80035d0 <HAL_RCC_OscConfig+0x26c>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a77      	ldr	r2, [pc, #476]	@ (80035d0 <HAL_RCC_OscConfig+0x26c>)
 80033f4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80033f8:	6013      	str	r3, [r2, #0]
 80033fa:	e01d      	b.n	8003438 <HAL_RCC_OscConfig+0xd4>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003404:	d10c      	bne.n	8003420 <HAL_RCC_OscConfig+0xbc>
 8003406:	4b72      	ldr	r3, [pc, #456]	@ (80035d0 <HAL_RCC_OscConfig+0x26c>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a71      	ldr	r2, [pc, #452]	@ (80035d0 <HAL_RCC_OscConfig+0x26c>)
 800340c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003410:	6013      	str	r3, [r2, #0]
 8003412:	4b6f      	ldr	r3, [pc, #444]	@ (80035d0 <HAL_RCC_OscConfig+0x26c>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4a6e      	ldr	r2, [pc, #440]	@ (80035d0 <HAL_RCC_OscConfig+0x26c>)
 8003418:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800341c:	6013      	str	r3, [r2, #0]
 800341e:	e00b      	b.n	8003438 <HAL_RCC_OscConfig+0xd4>
 8003420:	4b6b      	ldr	r3, [pc, #428]	@ (80035d0 <HAL_RCC_OscConfig+0x26c>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a6a      	ldr	r2, [pc, #424]	@ (80035d0 <HAL_RCC_OscConfig+0x26c>)
 8003426:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800342a:	6013      	str	r3, [r2, #0]
 800342c:	4b68      	ldr	r3, [pc, #416]	@ (80035d0 <HAL_RCC_OscConfig+0x26c>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a67      	ldr	r2, [pc, #412]	@ (80035d0 <HAL_RCC_OscConfig+0x26c>)
 8003432:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003436:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d013      	beq.n	8003468 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003440:	f7fd ff3e 	bl	80012c0 <HAL_GetTick>
 8003444:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003446:	e008      	b.n	800345a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003448:	f7fd ff3a 	bl	80012c0 <HAL_GetTick>
 800344c:	4602      	mov	r2, r0
 800344e:	693b      	ldr	r3, [r7, #16]
 8003450:	1ad3      	subs	r3, r2, r3
 8003452:	2b64      	cmp	r3, #100	@ 0x64
 8003454:	d901      	bls.n	800345a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003456:	2303      	movs	r3, #3
 8003458:	e200      	b.n	800385c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800345a:	4b5d      	ldr	r3, [pc, #372]	@ (80035d0 <HAL_RCC_OscConfig+0x26c>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003462:	2b00      	cmp	r3, #0
 8003464:	d0f0      	beq.n	8003448 <HAL_RCC_OscConfig+0xe4>
 8003466:	e014      	b.n	8003492 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003468:	f7fd ff2a 	bl	80012c0 <HAL_GetTick>
 800346c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800346e:	e008      	b.n	8003482 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003470:	f7fd ff26 	bl	80012c0 <HAL_GetTick>
 8003474:	4602      	mov	r2, r0
 8003476:	693b      	ldr	r3, [r7, #16]
 8003478:	1ad3      	subs	r3, r2, r3
 800347a:	2b64      	cmp	r3, #100	@ 0x64
 800347c:	d901      	bls.n	8003482 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800347e:	2303      	movs	r3, #3
 8003480:	e1ec      	b.n	800385c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003482:	4b53      	ldr	r3, [pc, #332]	@ (80035d0 <HAL_RCC_OscConfig+0x26c>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800348a:	2b00      	cmp	r3, #0
 800348c:	d1f0      	bne.n	8003470 <HAL_RCC_OscConfig+0x10c>
 800348e:	e000      	b.n	8003492 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003490:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f003 0302 	and.w	r3, r3, #2
 800349a:	2b00      	cmp	r3, #0
 800349c:	d063      	beq.n	8003566 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800349e:	4b4c      	ldr	r3, [pc, #304]	@ (80035d0 <HAL_RCC_OscConfig+0x26c>)
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	f003 030c 	and.w	r3, r3, #12
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d00b      	beq.n	80034c2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80034aa:	4b49      	ldr	r3, [pc, #292]	@ (80035d0 <HAL_RCC_OscConfig+0x26c>)
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	f003 030c 	and.w	r3, r3, #12
 80034b2:	2b08      	cmp	r3, #8
 80034b4:	d11c      	bne.n	80034f0 <HAL_RCC_OscConfig+0x18c>
 80034b6:	4b46      	ldr	r3, [pc, #280]	@ (80035d0 <HAL_RCC_OscConfig+0x26c>)
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d116      	bne.n	80034f0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034c2:	4b43      	ldr	r3, [pc, #268]	@ (80035d0 <HAL_RCC_OscConfig+0x26c>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f003 0302 	and.w	r3, r3, #2
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d005      	beq.n	80034da <HAL_RCC_OscConfig+0x176>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	691b      	ldr	r3, [r3, #16]
 80034d2:	2b01      	cmp	r3, #1
 80034d4:	d001      	beq.n	80034da <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80034d6:	2301      	movs	r3, #1
 80034d8:	e1c0      	b.n	800385c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034da:	4b3d      	ldr	r3, [pc, #244]	@ (80035d0 <HAL_RCC_OscConfig+0x26c>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	695b      	ldr	r3, [r3, #20]
 80034e6:	00db      	lsls	r3, r3, #3
 80034e8:	4939      	ldr	r1, [pc, #228]	@ (80035d0 <HAL_RCC_OscConfig+0x26c>)
 80034ea:	4313      	orrs	r3, r2
 80034ec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034ee:	e03a      	b.n	8003566 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	691b      	ldr	r3, [r3, #16]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d020      	beq.n	800353a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034f8:	4b36      	ldr	r3, [pc, #216]	@ (80035d4 <HAL_RCC_OscConfig+0x270>)
 80034fa:	2201      	movs	r2, #1
 80034fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034fe:	f7fd fedf 	bl	80012c0 <HAL_GetTick>
 8003502:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003504:	e008      	b.n	8003518 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003506:	f7fd fedb 	bl	80012c0 <HAL_GetTick>
 800350a:	4602      	mov	r2, r0
 800350c:	693b      	ldr	r3, [r7, #16]
 800350e:	1ad3      	subs	r3, r2, r3
 8003510:	2b02      	cmp	r3, #2
 8003512:	d901      	bls.n	8003518 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003514:	2303      	movs	r3, #3
 8003516:	e1a1      	b.n	800385c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003518:	4b2d      	ldr	r3, [pc, #180]	@ (80035d0 <HAL_RCC_OscConfig+0x26c>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f003 0302 	and.w	r3, r3, #2
 8003520:	2b00      	cmp	r3, #0
 8003522:	d0f0      	beq.n	8003506 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003524:	4b2a      	ldr	r3, [pc, #168]	@ (80035d0 <HAL_RCC_OscConfig+0x26c>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	695b      	ldr	r3, [r3, #20]
 8003530:	00db      	lsls	r3, r3, #3
 8003532:	4927      	ldr	r1, [pc, #156]	@ (80035d0 <HAL_RCC_OscConfig+0x26c>)
 8003534:	4313      	orrs	r3, r2
 8003536:	600b      	str	r3, [r1, #0]
 8003538:	e015      	b.n	8003566 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800353a:	4b26      	ldr	r3, [pc, #152]	@ (80035d4 <HAL_RCC_OscConfig+0x270>)
 800353c:	2200      	movs	r2, #0
 800353e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003540:	f7fd febe 	bl	80012c0 <HAL_GetTick>
 8003544:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003546:	e008      	b.n	800355a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003548:	f7fd feba 	bl	80012c0 <HAL_GetTick>
 800354c:	4602      	mov	r2, r0
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	1ad3      	subs	r3, r2, r3
 8003552:	2b02      	cmp	r3, #2
 8003554:	d901      	bls.n	800355a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003556:	2303      	movs	r3, #3
 8003558:	e180      	b.n	800385c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800355a:	4b1d      	ldr	r3, [pc, #116]	@ (80035d0 <HAL_RCC_OscConfig+0x26c>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f003 0302 	and.w	r3, r3, #2
 8003562:	2b00      	cmp	r3, #0
 8003564:	d1f0      	bne.n	8003548 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f003 0308 	and.w	r3, r3, #8
 800356e:	2b00      	cmp	r3, #0
 8003570:	d03a      	beq.n	80035e8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	699b      	ldr	r3, [r3, #24]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d019      	beq.n	80035ae <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800357a:	4b17      	ldr	r3, [pc, #92]	@ (80035d8 <HAL_RCC_OscConfig+0x274>)
 800357c:	2201      	movs	r2, #1
 800357e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003580:	f7fd fe9e 	bl	80012c0 <HAL_GetTick>
 8003584:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003586:	e008      	b.n	800359a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003588:	f7fd fe9a 	bl	80012c0 <HAL_GetTick>
 800358c:	4602      	mov	r2, r0
 800358e:	693b      	ldr	r3, [r7, #16]
 8003590:	1ad3      	subs	r3, r2, r3
 8003592:	2b02      	cmp	r3, #2
 8003594:	d901      	bls.n	800359a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003596:	2303      	movs	r3, #3
 8003598:	e160      	b.n	800385c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800359a:	4b0d      	ldr	r3, [pc, #52]	@ (80035d0 <HAL_RCC_OscConfig+0x26c>)
 800359c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800359e:	f003 0302 	and.w	r3, r3, #2
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d0f0      	beq.n	8003588 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80035a6:	2001      	movs	r0, #1
 80035a8:	f000 fa9c 	bl	8003ae4 <RCC_Delay>
 80035ac:	e01c      	b.n	80035e8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035ae:	4b0a      	ldr	r3, [pc, #40]	@ (80035d8 <HAL_RCC_OscConfig+0x274>)
 80035b0:	2200      	movs	r2, #0
 80035b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035b4:	f7fd fe84 	bl	80012c0 <HAL_GetTick>
 80035b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035ba:	e00f      	b.n	80035dc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035bc:	f7fd fe80 	bl	80012c0 <HAL_GetTick>
 80035c0:	4602      	mov	r2, r0
 80035c2:	693b      	ldr	r3, [r7, #16]
 80035c4:	1ad3      	subs	r3, r2, r3
 80035c6:	2b02      	cmp	r3, #2
 80035c8:	d908      	bls.n	80035dc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80035ca:	2303      	movs	r3, #3
 80035cc:	e146      	b.n	800385c <HAL_RCC_OscConfig+0x4f8>
 80035ce:	bf00      	nop
 80035d0:	40021000 	.word	0x40021000
 80035d4:	42420000 	.word	0x42420000
 80035d8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035dc:	4b92      	ldr	r3, [pc, #584]	@ (8003828 <HAL_RCC_OscConfig+0x4c4>)
 80035de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035e0:	f003 0302 	and.w	r3, r3, #2
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d1e9      	bne.n	80035bc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f003 0304 	and.w	r3, r3, #4
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	f000 80a6 	beq.w	8003742 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035f6:	2300      	movs	r3, #0
 80035f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035fa:	4b8b      	ldr	r3, [pc, #556]	@ (8003828 <HAL_RCC_OscConfig+0x4c4>)
 80035fc:	69db      	ldr	r3, [r3, #28]
 80035fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003602:	2b00      	cmp	r3, #0
 8003604:	d10d      	bne.n	8003622 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003606:	4b88      	ldr	r3, [pc, #544]	@ (8003828 <HAL_RCC_OscConfig+0x4c4>)
 8003608:	69db      	ldr	r3, [r3, #28]
 800360a:	4a87      	ldr	r2, [pc, #540]	@ (8003828 <HAL_RCC_OscConfig+0x4c4>)
 800360c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003610:	61d3      	str	r3, [r2, #28]
 8003612:	4b85      	ldr	r3, [pc, #532]	@ (8003828 <HAL_RCC_OscConfig+0x4c4>)
 8003614:	69db      	ldr	r3, [r3, #28]
 8003616:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800361a:	60bb      	str	r3, [r7, #8]
 800361c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800361e:	2301      	movs	r3, #1
 8003620:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003622:	4b82      	ldr	r3, [pc, #520]	@ (800382c <HAL_RCC_OscConfig+0x4c8>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800362a:	2b00      	cmp	r3, #0
 800362c:	d118      	bne.n	8003660 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800362e:	4b7f      	ldr	r3, [pc, #508]	@ (800382c <HAL_RCC_OscConfig+0x4c8>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a7e      	ldr	r2, [pc, #504]	@ (800382c <HAL_RCC_OscConfig+0x4c8>)
 8003634:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003638:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800363a:	f7fd fe41 	bl	80012c0 <HAL_GetTick>
 800363e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003640:	e008      	b.n	8003654 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003642:	f7fd fe3d 	bl	80012c0 <HAL_GetTick>
 8003646:	4602      	mov	r2, r0
 8003648:	693b      	ldr	r3, [r7, #16]
 800364a:	1ad3      	subs	r3, r2, r3
 800364c:	2b64      	cmp	r3, #100	@ 0x64
 800364e:	d901      	bls.n	8003654 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003650:	2303      	movs	r3, #3
 8003652:	e103      	b.n	800385c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003654:	4b75      	ldr	r3, [pc, #468]	@ (800382c <HAL_RCC_OscConfig+0x4c8>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800365c:	2b00      	cmp	r3, #0
 800365e:	d0f0      	beq.n	8003642 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	68db      	ldr	r3, [r3, #12]
 8003664:	2b01      	cmp	r3, #1
 8003666:	d106      	bne.n	8003676 <HAL_RCC_OscConfig+0x312>
 8003668:	4b6f      	ldr	r3, [pc, #444]	@ (8003828 <HAL_RCC_OscConfig+0x4c4>)
 800366a:	6a1b      	ldr	r3, [r3, #32]
 800366c:	4a6e      	ldr	r2, [pc, #440]	@ (8003828 <HAL_RCC_OscConfig+0x4c4>)
 800366e:	f043 0301 	orr.w	r3, r3, #1
 8003672:	6213      	str	r3, [r2, #32]
 8003674:	e02d      	b.n	80036d2 <HAL_RCC_OscConfig+0x36e>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	68db      	ldr	r3, [r3, #12]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d10c      	bne.n	8003698 <HAL_RCC_OscConfig+0x334>
 800367e:	4b6a      	ldr	r3, [pc, #424]	@ (8003828 <HAL_RCC_OscConfig+0x4c4>)
 8003680:	6a1b      	ldr	r3, [r3, #32]
 8003682:	4a69      	ldr	r2, [pc, #420]	@ (8003828 <HAL_RCC_OscConfig+0x4c4>)
 8003684:	f023 0301 	bic.w	r3, r3, #1
 8003688:	6213      	str	r3, [r2, #32]
 800368a:	4b67      	ldr	r3, [pc, #412]	@ (8003828 <HAL_RCC_OscConfig+0x4c4>)
 800368c:	6a1b      	ldr	r3, [r3, #32]
 800368e:	4a66      	ldr	r2, [pc, #408]	@ (8003828 <HAL_RCC_OscConfig+0x4c4>)
 8003690:	f023 0304 	bic.w	r3, r3, #4
 8003694:	6213      	str	r3, [r2, #32]
 8003696:	e01c      	b.n	80036d2 <HAL_RCC_OscConfig+0x36e>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	68db      	ldr	r3, [r3, #12]
 800369c:	2b05      	cmp	r3, #5
 800369e:	d10c      	bne.n	80036ba <HAL_RCC_OscConfig+0x356>
 80036a0:	4b61      	ldr	r3, [pc, #388]	@ (8003828 <HAL_RCC_OscConfig+0x4c4>)
 80036a2:	6a1b      	ldr	r3, [r3, #32]
 80036a4:	4a60      	ldr	r2, [pc, #384]	@ (8003828 <HAL_RCC_OscConfig+0x4c4>)
 80036a6:	f043 0304 	orr.w	r3, r3, #4
 80036aa:	6213      	str	r3, [r2, #32]
 80036ac:	4b5e      	ldr	r3, [pc, #376]	@ (8003828 <HAL_RCC_OscConfig+0x4c4>)
 80036ae:	6a1b      	ldr	r3, [r3, #32]
 80036b0:	4a5d      	ldr	r2, [pc, #372]	@ (8003828 <HAL_RCC_OscConfig+0x4c4>)
 80036b2:	f043 0301 	orr.w	r3, r3, #1
 80036b6:	6213      	str	r3, [r2, #32]
 80036b8:	e00b      	b.n	80036d2 <HAL_RCC_OscConfig+0x36e>
 80036ba:	4b5b      	ldr	r3, [pc, #364]	@ (8003828 <HAL_RCC_OscConfig+0x4c4>)
 80036bc:	6a1b      	ldr	r3, [r3, #32]
 80036be:	4a5a      	ldr	r2, [pc, #360]	@ (8003828 <HAL_RCC_OscConfig+0x4c4>)
 80036c0:	f023 0301 	bic.w	r3, r3, #1
 80036c4:	6213      	str	r3, [r2, #32]
 80036c6:	4b58      	ldr	r3, [pc, #352]	@ (8003828 <HAL_RCC_OscConfig+0x4c4>)
 80036c8:	6a1b      	ldr	r3, [r3, #32]
 80036ca:	4a57      	ldr	r2, [pc, #348]	@ (8003828 <HAL_RCC_OscConfig+0x4c4>)
 80036cc:	f023 0304 	bic.w	r3, r3, #4
 80036d0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	68db      	ldr	r3, [r3, #12]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d015      	beq.n	8003706 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036da:	f7fd fdf1 	bl	80012c0 <HAL_GetTick>
 80036de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036e0:	e00a      	b.n	80036f8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036e2:	f7fd fded 	bl	80012c0 <HAL_GetTick>
 80036e6:	4602      	mov	r2, r0
 80036e8:	693b      	ldr	r3, [r7, #16]
 80036ea:	1ad3      	subs	r3, r2, r3
 80036ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d901      	bls.n	80036f8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80036f4:	2303      	movs	r3, #3
 80036f6:	e0b1      	b.n	800385c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036f8:	4b4b      	ldr	r3, [pc, #300]	@ (8003828 <HAL_RCC_OscConfig+0x4c4>)
 80036fa:	6a1b      	ldr	r3, [r3, #32]
 80036fc:	f003 0302 	and.w	r3, r3, #2
 8003700:	2b00      	cmp	r3, #0
 8003702:	d0ee      	beq.n	80036e2 <HAL_RCC_OscConfig+0x37e>
 8003704:	e014      	b.n	8003730 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003706:	f7fd fddb 	bl	80012c0 <HAL_GetTick>
 800370a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800370c:	e00a      	b.n	8003724 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800370e:	f7fd fdd7 	bl	80012c0 <HAL_GetTick>
 8003712:	4602      	mov	r2, r0
 8003714:	693b      	ldr	r3, [r7, #16]
 8003716:	1ad3      	subs	r3, r2, r3
 8003718:	f241 3288 	movw	r2, #5000	@ 0x1388
 800371c:	4293      	cmp	r3, r2
 800371e:	d901      	bls.n	8003724 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003720:	2303      	movs	r3, #3
 8003722:	e09b      	b.n	800385c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003724:	4b40      	ldr	r3, [pc, #256]	@ (8003828 <HAL_RCC_OscConfig+0x4c4>)
 8003726:	6a1b      	ldr	r3, [r3, #32]
 8003728:	f003 0302 	and.w	r3, r3, #2
 800372c:	2b00      	cmp	r3, #0
 800372e:	d1ee      	bne.n	800370e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003730:	7dfb      	ldrb	r3, [r7, #23]
 8003732:	2b01      	cmp	r3, #1
 8003734:	d105      	bne.n	8003742 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003736:	4b3c      	ldr	r3, [pc, #240]	@ (8003828 <HAL_RCC_OscConfig+0x4c4>)
 8003738:	69db      	ldr	r3, [r3, #28]
 800373a:	4a3b      	ldr	r2, [pc, #236]	@ (8003828 <HAL_RCC_OscConfig+0x4c4>)
 800373c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003740:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	69db      	ldr	r3, [r3, #28]
 8003746:	2b00      	cmp	r3, #0
 8003748:	f000 8087 	beq.w	800385a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800374c:	4b36      	ldr	r3, [pc, #216]	@ (8003828 <HAL_RCC_OscConfig+0x4c4>)
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	f003 030c 	and.w	r3, r3, #12
 8003754:	2b08      	cmp	r3, #8
 8003756:	d061      	beq.n	800381c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	69db      	ldr	r3, [r3, #28]
 800375c:	2b02      	cmp	r3, #2
 800375e:	d146      	bne.n	80037ee <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003760:	4b33      	ldr	r3, [pc, #204]	@ (8003830 <HAL_RCC_OscConfig+0x4cc>)
 8003762:	2200      	movs	r2, #0
 8003764:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003766:	f7fd fdab 	bl	80012c0 <HAL_GetTick>
 800376a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800376c:	e008      	b.n	8003780 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800376e:	f7fd fda7 	bl	80012c0 <HAL_GetTick>
 8003772:	4602      	mov	r2, r0
 8003774:	693b      	ldr	r3, [r7, #16]
 8003776:	1ad3      	subs	r3, r2, r3
 8003778:	2b02      	cmp	r3, #2
 800377a:	d901      	bls.n	8003780 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800377c:	2303      	movs	r3, #3
 800377e:	e06d      	b.n	800385c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003780:	4b29      	ldr	r3, [pc, #164]	@ (8003828 <HAL_RCC_OscConfig+0x4c4>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003788:	2b00      	cmp	r3, #0
 800378a:	d1f0      	bne.n	800376e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6a1b      	ldr	r3, [r3, #32]
 8003790:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003794:	d108      	bne.n	80037a8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003796:	4b24      	ldr	r3, [pc, #144]	@ (8003828 <HAL_RCC_OscConfig+0x4c4>)
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	689b      	ldr	r3, [r3, #8]
 80037a2:	4921      	ldr	r1, [pc, #132]	@ (8003828 <HAL_RCC_OscConfig+0x4c4>)
 80037a4:	4313      	orrs	r3, r2
 80037a6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80037a8:	4b1f      	ldr	r3, [pc, #124]	@ (8003828 <HAL_RCC_OscConfig+0x4c4>)
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6a19      	ldr	r1, [r3, #32]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037b8:	430b      	orrs	r3, r1
 80037ba:	491b      	ldr	r1, [pc, #108]	@ (8003828 <HAL_RCC_OscConfig+0x4c4>)
 80037bc:	4313      	orrs	r3, r2
 80037be:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037c0:	4b1b      	ldr	r3, [pc, #108]	@ (8003830 <HAL_RCC_OscConfig+0x4cc>)
 80037c2:	2201      	movs	r2, #1
 80037c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037c6:	f7fd fd7b 	bl	80012c0 <HAL_GetTick>
 80037ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80037cc:	e008      	b.n	80037e0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037ce:	f7fd fd77 	bl	80012c0 <HAL_GetTick>
 80037d2:	4602      	mov	r2, r0
 80037d4:	693b      	ldr	r3, [r7, #16]
 80037d6:	1ad3      	subs	r3, r2, r3
 80037d8:	2b02      	cmp	r3, #2
 80037da:	d901      	bls.n	80037e0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80037dc:	2303      	movs	r3, #3
 80037de:	e03d      	b.n	800385c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80037e0:	4b11      	ldr	r3, [pc, #68]	@ (8003828 <HAL_RCC_OscConfig+0x4c4>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d0f0      	beq.n	80037ce <HAL_RCC_OscConfig+0x46a>
 80037ec:	e035      	b.n	800385a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037ee:	4b10      	ldr	r3, [pc, #64]	@ (8003830 <HAL_RCC_OscConfig+0x4cc>)
 80037f0:	2200      	movs	r2, #0
 80037f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037f4:	f7fd fd64 	bl	80012c0 <HAL_GetTick>
 80037f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037fa:	e008      	b.n	800380e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037fc:	f7fd fd60 	bl	80012c0 <HAL_GetTick>
 8003800:	4602      	mov	r2, r0
 8003802:	693b      	ldr	r3, [r7, #16]
 8003804:	1ad3      	subs	r3, r2, r3
 8003806:	2b02      	cmp	r3, #2
 8003808:	d901      	bls.n	800380e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800380a:	2303      	movs	r3, #3
 800380c:	e026      	b.n	800385c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800380e:	4b06      	ldr	r3, [pc, #24]	@ (8003828 <HAL_RCC_OscConfig+0x4c4>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003816:	2b00      	cmp	r3, #0
 8003818:	d1f0      	bne.n	80037fc <HAL_RCC_OscConfig+0x498>
 800381a:	e01e      	b.n	800385a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	69db      	ldr	r3, [r3, #28]
 8003820:	2b01      	cmp	r3, #1
 8003822:	d107      	bne.n	8003834 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003824:	2301      	movs	r3, #1
 8003826:	e019      	b.n	800385c <HAL_RCC_OscConfig+0x4f8>
 8003828:	40021000 	.word	0x40021000
 800382c:	40007000 	.word	0x40007000
 8003830:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003834:	4b0b      	ldr	r3, [pc, #44]	@ (8003864 <HAL_RCC_OscConfig+0x500>)
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6a1b      	ldr	r3, [r3, #32]
 8003844:	429a      	cmp	r2, r3
 8003846:	d106      	bne.n	8003856 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003852:	429a      	cmp	r2, r3
 8003854:	d001      	beq.n	800385a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003856:	2301      	movs	r3, #1
 8003858:	e000      	b.n	800385c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800385a:	2300      	movs	r3, #0
}
 800385c:	4618      	mov	r0, r3
 800385e:	3718      	adds	r7, #24
 8003860:	46bd      	mov	sp, r7
 8003862:	bd80      	pop	{r7, pc}
 8003864:	40021000 	.word	0x40021000

08003868 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b084      	sub	sp, #16
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
 8003870:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d101      	bne.n	800387c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003878:	2301      	movs	r3, #1
 800387a:	e0d0      	b.n	8003a1e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800387c:	4b6a      	ldr	r3, [pc, #424]	@ (8003a28 <HAL_RCC_ClockConfig+0x1c0>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f003 0307 	and.w	r3, r3, #7
 8003884:	683a      	ldr	r2, [r7, #0]
 8003886:	429a      	cmp	r2, r3
 8003888:	d910      	bls.n	80038ac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800388a:	4b67      	ldr	r3, [pc, #412]	@ (8003a28 <HAL_RCC_ClockConfig+0x1c0>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f023 0207 	bic.w	r2, r3, #7
 8003892:	4965      	ldr	r1, [pc, #404]	@ (8003a28 <HAL_RCC_ClockConfig+0x1c0>)
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	4313      	orrs	r3, r2
 8003898:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800389a:	4b63      	ldr	r3, [pc, #396]	@ (8003a28 <HAL_RCC_ClockConfig+0x1c0>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f003 0307 	and.w	r3, r3, #7
 80038a2:	683a      	ldr	r2, [r7, #0]
 80038a4:	429a      	cmp	r2, r3
 80038a6:	d001      	beq.n	80038ac <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80038a8:	2301      	movs	r3, #1
 80038aa:	e0b8      	b.n	8003a1e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f003 0302 	and.w	r3, r3, #2
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d020      	beq.n	80038fa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f003 0304 	and.w	r3, r3, #4
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d005      	beq.n	80038d0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80038c4:	4b59      	ldr	r3, [pc, #356]	@ (8003a2c <HAL_RCC_ClockConfig+0x1c4>)
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	4a58      	ldr	r2, [pc, #352]	@ (8003a2c <HAL_RCC_ClockConfig+0x1c4>)
 80038ca:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80038ce:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f003 0308 	and.w	r3, r3, #8
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d005      	beq.n	80038e8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80038dc:	4b53      	ldr	r3, [pc, #332]	@ (8003a2c <HAL_RCC_ClockConfig+0x1c4>)
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	4a52      	ldr	r2, [pc, #328]	@ (8003a2c <HAL_RCC_ClockConfig+0x1c4>)
 80038e2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80038e6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038e8:	4b50      	ldr	r3, [pc, #320]	@ (8003a2c <HAL_RCC_ClockConfig+0x1c4>)
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	689b      	ldr	r3, [r3, #8]
 80038f4:	494d      	ldr	r1, [pc, #308]	@ (8003a2c <HAL_RCC_ClockConfig+0x1c4>)
 80038f6:	4313      	orrs	r3, r2
 80038f8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f003 0301 	and.w	r3, r3, #1
 8003902:	2b00      	cmp	r3, #0
 8003904:	d040      	beq.n	8003988 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	2b01      	cmp	r3, #1
 800390c:	d107      	bne.n	800391e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800390e:	4b47      	ldr	r3, [pc, #284]	@ (8003a2c <HAL_RCC_ClockConfig+0x1c4>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003916:	2b00      	cmp	r3, #0
 8003918:	d115      	bne.n	8003946 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800391a:	2301      	movs	r3, #1
 800391c:	e07f      	b.n	8003a1e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	2b02      	cmp	r3, #2
 8003924:	d107      	bne.n	8003936 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003926:	4b41      	ldr	r3, [pc, #260]	@ (8003a2c <HAL_RCC_ClockConfig+0x1c4>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800392e:	2b00      	cmp	r3, #0
 8003930:	d109      	bne.n	8003946 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003932:	2301      	movs	r3, #1
 8003934:	e073      	b.n	8003a1e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003936:	4b3d      	ldr	r3, [pc, #244]	@ (8003a2c <HAL_RCC_ClockConfig+0x1c4>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f003 0302 	and.w	r3, r3, #2
 800393e:	2b00      	cmp	r3, #0
 8003940:	d101      	bne.n	8003946 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	e06b      	b.n	8003a1e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003946:	4b39      	ldr	r3, [pc, #228]	@ (8003a2c <HAL_RCC_ClockConfig+0x1c4>)
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	f023 0203 	bic.w	r2, r3, #3
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	4936      	ldr	r1, [pc, #216]	@ (8003a2c <HAL_RCC_ClockConfig+0x1c4>)
 8003954:	4313      	orrs	r3, r2
 8003956:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003958:	f7fd fcb2 	bl	80012c0 <HAL_GetTick>
 800395c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800395e:	e00a      	b.n	8003976 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003960:	f7fd fcae 	bl	80012c0 <HAL_GetTick>
 8003964:	4602      	mov	r2, r0
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	1ad3      	subs	r3, r2, r3
 800396a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800396e:	4293      	cmp	r3, r2
 8003970:	d901      	bls.n	8003976 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003972:	2303      	movs	r3, #3
 8003974:	e053      	b.n	8003a1e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003976:	4b2d      	ldr	r3, [pc, #180]	@ (8003a2c <HAL_RCC_ClockConfig+0x1c4>)
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	f003 020c 	and.w	r2, r3, #12
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	009b      	lsls	r3, r3, #2
 8003984:	429a      	cmp	r2, r3
 8003986:	d1eb      	bne.n	8003960 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003988:	4b27      	ldr	r3, [pc, #156]	@ (8003a28 <HAL_RCC_ClockConfig+0x1c0>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f003 0307 	and.w	r3, r3, #7
 8003990:	683a      	ldr	r2, [r7, #0]
 8003992:	429a      	cmp	r2, r3
 8003994:	d210      	bcs.n	80039b8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003996:	4b24      	ldr	r3, [pc, #144]	@ (8003a28 <HAL_RCC_ClockConfig+0x1c0>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f023 0207 	bic.w	r2, r3, #7
 800399e:	4922      	ldr	r1, [pc, #136]	@ (8003a28 <HAL_RCC_ClockConfig+0x1c0>)
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	4313      	orrs	r3, r2
 80039a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039a6:	4b20      	ldr	r3, [pc, #128]	@ (8003a28 <HAL_RCC_ClockConfig+0x1c0>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f003 0307 	and.w	r3, r3, #7
 80039ae:	683a      	ldr	r2, [r7, #0]
 80039b0:	429a      	cmp	r2, r3
 80039b2:	d001      	beq.n	80039b8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80039b4:	2301      	movs	r3, #1
 80039b6:	e032      	b.n	8003a1e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f003 0304 	and.w	r3, r3, #4
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d008      	beq.n	80039d6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039c4:	4b19      	ldr	r3, [pc, #100]	@ (8003a2c <HAL_RCC_ClockConfig+0x1c4>)
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	68db      	ldr	r3, [r3, #12]
 80039d0:	4916      	ldr	r1, [pc, #88]	@ (8003a2c <HAL_RCC_ClockConfig+0x1c4>)
 80039d2:	4313      	orrs	r3, r2
 80039d4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f003 0308 	and.w	r3, r3, #8
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d009      	beq.n	80039f6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80039e2:	4b12      	ldr	r3, [pc, #72]	@ (8003a2c <HAL_RCC_ClockConfig+0x1c4>)
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	691b      	ldr	r3, [r3, #16]
 80039ee:	00db      	lsls	r3, r3, #3
 80039f0:	490e      	ldr	r1, [pc, #56]	@ (8003a2c <HAL_RCC_ClockConfig+0x1c4>)
 80039f2:	4313      	orrs	r3, r2
 80039f4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80039f6:	f000 f821 	bl	8003a3c <HAL_RCC_GetSysClockFreq>
 80039fa:	4602      	mov	r2, r0
 80039fc:	4b0b      	ldr	r3, [pc, #44]	@ (8003a2c <HAL_RCC_ClockConfig+0x1c4>)
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	091b      	lsrs	r3, r3, #4
 8003a02:	f003 030f 	and.w	r3, r3, #15
 8003a06:	490a      	ldr	r1, [pc, #40]	@ (8003a30 <HAL_RCC_ClockConfig+0x1c8>)
 8003a08:	5ccb      	ldrb	r3, [r1, r3]
 8003a0a:	fa22 f303 	lsr.w	r3, r2, r3
 8003a0e:	4a09      	ldr	r2, [pc, #36]	@ (8003a34 <HAL_RCC_ClockConfig+0x1cc>)
 8003a10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003a12:	4b09      	ldr	r3, [pc, #36]	@ (8003a38 <HAL_RCC_ClockConfig+0x1d0>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4618      	mov	r0, r3
 8003a18:	f7fd fc10 	bl	800123c <HAL_InitTick>

  return HAL_OK;
 8003a1c:	2300      	movs	r3, #0
}
 8003a1e:	4618      	mov	r0, r3
 8003a20:	3710      	adds	r7, #16
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bd80      	pop	{r7, pc}
 8003a26:	bf00      	nop
 8003a28:	40022000 	.word	0x40022000
 8003a2c:	40021000 	.word	0x40021000
 8003a30:	080098ec 	.word	0x080098ec
 8003a34:	20000020 	.word	0x20000020
 8003a38:	20000024 	.word	0x20000024

08003a3c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	b087      	sub	sp, #28
 8003a40:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003a42:	2300      	movs	r3, #0
 8003a44:	60fb      	str	r3, [r7, #12]
 8003a46:	2300      	movs	r3, #0
 8003a48:	60bb      	str	r3, [r7, #8]
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	617b      	str	r3, [r7, #20]
 8003a4e:	2300      	movs	r3, #0
 8003a50:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003a52:	2300      	movs	r3, #0
 8003a54:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003a56:	4b1e      	ldr	r3, [pc, #120]	@ (8003ad0 <HAL_RCC_GetSysClockFreq+0x94>)
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	f003 030c 	and.w	r3, r3, #12
 8003a62:	2b04      	cmp	r3, #4
 8003a64:	d002      	beq.n	8003a6c <HAL_RCC_GetSysClockFreq+0x30>
 8003a66:	2b08      	cmp	r3, #8
 8003a68:	d003      	beq.n	8003a72 <HAL_RCC_GetSysClockFreq+0x36>
 8003a6a:	e027      	b.n	8003abc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003a6c:	4b19      	ldr	r3, [pc, #100]	@ (8003ad4 <HAL_RCC_GetSysClockFreq+0x98>)
 8003a6e:	613b      	str	r3, [r7, #16]
      break;
 8003a70:	e027      	b.n	8003ac2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	0c9b      	lsrs	r3, r3, #18
 8003a76:	f003 030f 	and.w	r3, r3, #15
 8003a7a:	4a17      	ldr	r2, [pc, #92]	@ (8003ad8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003a7c:	5cd3      	ldrb	r3, [r2, r3]
 8003a7e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d010      	beq.n	8003aac <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003a8a:	4b11      	ldr	r3, [pc, #68]	@ (8003ad0 <HAL_RCC_GetSysClockFreq+0x94>)
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	0c5b      	lsrs	r3, r3, #17
 8003a90:	f003 0301 	and.w	r3, r3, #1
 8003a94:	4a11      	ldr	r2, [pc, #68]	@ (8003adc <HAL_RCC_GetSysClockFreq+0xa0>)
 8003a96:	5cd3      	ldrb	r3, [r2, r3]
 8003a98:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	4a0d      	ldr	r2, [pc, #52]	@ (8003ad4 <HAL_RCC_GetSysClockFreq+0x98>)
 8003a9e:	fb03 f202 	mul.w	r2, r3, r2
 8003aa2:	68bb      	ldr	r3, [r7, #8]
 8003aa4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003aa8:	617b      	str	r3, [r7, #20]
 8003aaa:	e004      	b.n	8003ab6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	4a0c      	ldr	r2, [pc, #48]	@ (8003ae0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003ab0:	fb02 f303 	mul.w	r3, r2, r3
 8003ab4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003ab6:	697b      	ldr	r3, [r7, #20]
 8003ab8:	613b      	str	r3, [r7, #16]
      break;
 8003aba:	e002      	b.n	8003ac2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003abc:	4b05      	ldr	r3, [pc, #20]	@ (8003ad4 <HAL_RCC_GetSysClockFreq+0x98>)
 8003abe:	613b      	str	r3, [r7, #16]
      break;
 8003ac0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ac2:	693b      	ldr	r3, [r7, #16]
}
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	371c      	adds	r7, #28
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bc80      	pop	{r7}
 8003acc:	4770      	bx	lr
 8003ace:	bf00      	nop
 8003ad0:	40021000 	.word	0x40021000
 8003ad4:	007a1200 	.word	0x007a1200
 8003ad8:	080098fc 	.word	0x080098fc
 8003adc:	0800990c 	.word	0x0800990c
 8003ae0:	003d0900 	.word	0x003d0900

08003ae4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b085      	sub	sp, #20
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003aec:	4b0a      	ldr	r3, [pc, #40]	@ (8003b18 <RCC_Delay+0x34>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a0a      	ldr	r2, [pc, #40]	@ (8003b1c <RCC_Delay+0x38>)
 8003af2:	fba2 2303 	umull	r2, r3, r2, r3
 8003af6:	0a5b      	lsrs	r3, r3, #9
 8003af8:	687a      	ldr	r2, [r7, #4]
 8003afa:	fb02 f303 	mul.w	r3, r2, r3
 8003afe:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003b00:	bf00      	nop
  }
  while (Delay --);
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	1e5a      	subs	r2, r3, #1
 8003b06:	60fa      	str	r2, [r7, #12]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d1f9      	bne.n	8003b00 <RCC_Delay+0x1c>
}
 8003b0c:	bf00      	nop
 8003b0e:	bf00      	nop
 8003b10:	3714      	adds	r7, #20
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bc80      	pop	{r7}
 8003b16:	4770      	bx	lr
 8003b18:	20000020 	.word	0x20000020
 8003b1c:	10624dd3 	.word	0x10624dd3

08003b20 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b086      	sub	sp, #24
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003b28:	2300      	movs	r3, #0
 8003b2a:	613b      	str	r3, [r7, #16]
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f003 0301 	and.w	r3, r3, #1
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d07d      	beq.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b40:	4b4f      	ldr	r3, [pc, #316]	@ (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b42:	69db      	ldr	r3, [r3, #28]
 8003b44:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d10d      	bne.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b4c:	4b4c      	ldr	r3, [pc, #304]	@ (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b4e:	69db      	ldr	r3, [r3, #28]
 8003b50:	4a4b      	ldr	r2, [pc, #300]	@ (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b52:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b56:	61d3      	str	r3, [r2, #28]
 8003b58:	4b49      	ldr	r3, [pc, #292]	@ (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b5a:	69db      	ldr	r3, [r3, #28]
 8003b5c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b60:	60bb      	str	r3, [r7, #8]
 8003b62:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b64:	2301      	movs	r3, #1
 8003b66:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b68:	4b46      	ldr	r3, [pc, #280]	@ (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d118      	bne.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b74:	4b43      	ldr	r3, [pc, #268]	@ (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a42      	ldr	r2, [pc, #264]	@ (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b7a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b7e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b80:	f7fd fb9e 	bl	80012c0 <HAL_GetTick>
 8003b84:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b86:	e008      	b.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b88:	f7fd fb9a 	bl	80012c0 <HAL_GetTick>
 8003b8c:	4602      	mov	r2, r0
 8003b8e:	693b      	ldr	r3, [r7, #16]
 8003b90:	1ad3      	subs	r3, r2, r3
 8003b92:	2b64      	cmp	r3, #100	@ 0x64
 8003b94:	d901      	bls.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003b96:	2303      	movs	r3, #3
 8003b98:	e06d      	b.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b9a:	4b3a      	ldr	r3, [pc, #232]	@ (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d0f0      	beq.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003ba6:	4b36      	ldr	r3, [pc, #216]	@ (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ba8:	6a1b      	ldr	r3, [r3, #32]
 8003baa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003bae:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d02e      	beq.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003bbe:	68fa      	ldr	r2, [r7, #12]
 8003bc0:	429a      	cmp	r2, r3
 8003bc2:	d027      	beq.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003bc4:	4b2e      	ldr	r3, [pc, #184]	@ (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bc6:	6a1b      	ldr	r3, [r3, #32]
 8003bc8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003bcc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003bce:	4b2e      	ldr	r3, [pc, #184]	@ (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003bd0:	2201      	movs	r2, #1
 8003bd2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003bd4:	4b2c      	ldr	r3, [pc, #176]	@ (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003bda:	4a29      	ldr	r2, [pc, #164]	@ (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	f003 0301 	and.w	r3, r3, #1
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d014      	beq.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bea:	f7fd fb69 	bl	80012c0 <HAL_GetTick>
 8003bee:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bf0:	e00a      	b.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bf2:	f7fd fb65 	bl	80012c0 <HAL_GetTick>
 8003bf6:	4602      	mov	r2, r0
 8003bf8:	693b      	ldr	r3, [r7, #16]
 8003bfa:	1ad3      	subs	r3, r2, r3
 8003bfc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d901      	bls.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003c04:	2303      	movs	r3, #3
 8003c06:	e036      	b.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c08:	4b1d      	ldr	r3, [pc, #116]	@ (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c0a:	6a1b      	ldr	r3, [r3, #32]
 8003c0c:	f003 0302 	and.w	r3, r3, #2
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d0ee      	beq.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c14:	4b1a      	ldr	r3, [pc, #104]	@ (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c16:	6a1b      	ldr	r3, [r3, #32]
 8003c18:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	4917      	ldr	r1, [pc, #92]	@ (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c22:	4313      	orrs	r3, r2
 8003c24:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003c26:	7dfb      	ldrb	r3, [r7, #23]
 8003c28:	2b01      	cmp	r3, #1
 8003c2a:	d105      	bne.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c2c:	4b14      	ldr	r3, [pc, #80]	@ (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c2e:	69db      	ldr	r3, [r3, #28]
 8003c30:	4a13      	ldr	r2, [pc, #76]	@ (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c32:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003c36:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f003 0302 	and.w	r3, r3, #2
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d008      	beq.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003c44:	4b0e      	ldr	r3, [pc, #56]	@ (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	689b      	ldr	r3, [r3, #8]
 8003c50:	490b      	ldr	r1, [pc, #44]	@ (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c52:	4313      	orrs	r3, r2
 8003c54:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f003 0310 	and.w	r3, r3, #16
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d008      	beq.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003c62:	4b07      	ldr	r3, [pc, #28]	@ (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	68db      	ldr	r3, [r3, #12]
 8003c6e:	4904      	ldr	r1, [pc, #16]	@ (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c70:	4313      	orrs	r3, r2
 8003c72:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003c74:	2300      	movs	r3, #0
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	3718      	adds	r7, #24
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}
 8003c7e:	bf00      	nop
 8003c80:	40021000 	.word	0x40021000
 8003c84:	40007000 	.word	0x40007000
 8003c88:	42420440 	.word	0x42420440

08003c8c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b082      	sub	sp, #8
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d101      	bne.n	8003c9e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	e076      	b.n	8003d8c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d108      	bne.n	8003cb8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003cae:	d009      	beq.n	8003cc4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	61da      	str	r2, [r3, #28]
 8003cb6:	e005      	b.n	8003cc4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003cd0:	b2db      	uxtb	r3, r3
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d106      	bne.n	8003ce4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003cde:	6878      	ldr	r0, [r7, #4]
 8003ce0:	f7fd f9b4 	bl	800104c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2202      	movs	r2, #2
 8003ce8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	681a      	ldr	r2, [r3, #0]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003cfa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	689b      	ldr	r3, [r3, #8]
 8003d08:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003d0c:	431a      	orrs	r2, r3
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	68db      	ldr	r3, [r3, #12]
 8003d12:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003d16:	431a      	orrs	r2, r3
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	691b      	ldr	r3, [r3, #16]
 8003d1c:	f003 0302 	and.w	r3, r3, #2
 8003d20:	431a      	orrs	r2, r3
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	695b      	ldr	r3, [r3, #20]
 8003d26:	f003 0301 	and.w	r3, r3, #1
 8003d2a:	431a      	orrs	r2, r3
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	699b      	ldr	r3, [r3, #24]
 8003d30:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003d34:	431a      	orrs	r2, r3
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	69db      	ldr	r3, [r3, #28]
 8003d3a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003d3e:	431a      	orrs	r2, r3
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6a1b      	ldr	r3, [r3, #32]
 8003d44:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d48:	ea42 0103 	orr.w	r1, r2, r3
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d50:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	430a      	orrs	r2, r1
 8003d5a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	699b      	ldr	r3, [r3, #24]
 8003d60:	0c1a      	lsrs	r2, r3, #16
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f002 0204 	and.w	r2, r2, #4
 8003d6a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	69da      	ldr	r2, [r3, #28]
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003d7a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2201      	movs	r2, #1
 8003d86:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003d8a:	2300      	movs	r3, #0
}
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	3708      	adds	r7, #8
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bd80      	pop	{r7, pc}

08003d94 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b088      	sub	sp, #32
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	60f8      	str	r0, [r7, #12]
 8003d9c:	60b9      	str	r1, [r7, #8]
 8003d9e:	603b      	str	r3, [r7, #0]
 8003da0:	4613      	mov	r3, r2
 8003da2:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003da4:	f7fd fa8c 	bl	80012c0 <HAL_GetTick>
 8003da8:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8003daa:	88fb      	ldrh	r3, [r7, #6]
 8003dac:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003db4:	b2db      	uxtb	r3, r3
 8003db6:	2b01      	cmp	r3, #1
 8003db8:	d001      	beq.n	8003dbe <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8003dba:	2302      	movs	r3, #2
 8003dbc:	e12a      	b.n	8004014 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d002      	beq.n	8003dca <HAL_SPI_Transmit+0x36>
 8003dc4:	88fb      	ldrh	r3, [r7, #6]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d101      	bne.n	8003dce <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	e122      	b.n	8004014 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003dd4:	2b01      	cmp	r3, #1
 8003dd6:	d101      	bne.n	8003ddc <HAL_SPI_Transmit+0x48>
 8003dd8:	2302      	movs	r3, #2
 8003dda:	e11b      	b.n	8004014 <HAL_SPI_Transmit+0x280>
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	2201      	movs	r2, #1
 8003de0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	2203      	movs	r2, #3
 8003de8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	2200      	movs	r2, #0
 8003df0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	68ba      	ldr	r2, [r7, #8]
 8003df6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	88fa      	ldrh	r2, [r7, #6]
 8003dfc:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	88fa      	ldrh	r2, [r7, #6]
 8003e02:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	2200      	movs	r2, #0
 8003e08:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	2200      	movs	r2, #0
 8003e14:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	689b      	ldr	r3, [r3, #8]
 8003e26:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e2a:	d10f      	bne.n	8003e4c <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	681a      	ldr	r2, [r3, #0]
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003e3a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	681a      	ldr	r2, [r3, #0]
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003e4a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e56:	2b40      	cmp	r3, #64	@ 0x40
 8003e58:	d007      	beq.n	8003e6a <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	681a      	ldr	r2, [r3, #0]
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003e68:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	68db      	ldr	r3, [r3, #12]
 8003e6e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003e72:	d152      	bne.n	8003f1a <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d002      	beq.n	8003e82 <HAL_SPI_Transmit+0xee>
 8003e7c:	8b7b      	ldrh	r3, [r7, #26]
 8003e7e:	2b01      	cmp	r3, #1
 8003e80:	d145      	bne.n	8003f0e <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e86:	881a      	ldrh	r2, [r3, #0]
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e92:	1c9a      	adds	r2, r3, #2
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003e9c:	b29b      	uxth	r3, r3
 8003e9e:	3b01      	subs	r3, #1
 8003ea0:	b29a      	uxth	r2, r3
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003ea6:	e032      	b.n	8003f0e <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	689b      	ldr	r3, [r3, #8]
 8003eae:	f003 0302 	and.w	r3, r3, #2
 8003eb2:	2b02      	cmp	r3, #2
 8003eb4:	d112      	bne.n	8003edc <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003eba:	881a      	ldrh	r2, [r3, #0]
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ec6:	1c9a      	adds	r2, r3, #2
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003ed0:	b29b      	uxth	r3, r3
 8003ed2:	3b01      	subs	r3, #1
 8003ed4:	b29a      	uxth	r2, r3
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003eda:	e018      	b.n	8003f0e <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003edc:	f7fd f9f0 	bl	80012c0 <HAL_GetTick>
 8003ee0:	4602      	mov	r2, r0
 8003ee2:	69fb      	ldr	r3, [r7, #28]
 8003ee4:	1ad3      	subs	r3, r2, r3
 8003ee6:	683a      	ldr	r2, [r7, #0]
 8003ee8:	429a      	cmp	r2, r3
 8003eea:	d803      	bhi.n	8003ef4 <HAL_SPI_Transmit+0x160>
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ef2:	d102      	bne.n	8003efa <HAL_SPI_Transmit+0x166>
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d109      	bne.n	8003f0e <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	2201      	movs	r2, #1
 8003efe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	2200      	movs	r2, #0
 8003f06:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003f0a:	2303      	movs	r3, #3
 8003f0c:	e082      	b.n	8004014 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003f12:	b29b      	uxth	r3, r3
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d1c7      	bne.n	8003ea8 <HAL_SPI_Transmit+0x114>
 8003f18:	e053      	b.n	8003fc2 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d002      	beq.n	8003f28 <HAL_SPI_Transmit+0x194>
 8003f22:	8b7b      	ldrh	r3, [r7, #26]
 8003f24:	2b01      	cmp	r3, #1
 8003f26:	d147      	bne.n	8003fb8 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	330c      	adds	r3, #12
 8003f32:	7812      	ldrb	r2, [r2, #0]
 8003f34:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f3a:	1c5a      	adds	r2, r3, #1
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003f44:	b29b      	uxth	r3, r3
 8003f46:	3b01      	subs	r3, #1
 8003f48:	b29a      	uxth	r2, r3
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003f4e:	e033      	b.n	8003fb8 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	689b      	ldr	r3, [r3, #8]
 8003f56:	f003 0302 	and.w	r3, r3, #2
 8003f5a:	2b02      	cmp	r3, #2
 8003f5c:	d113      	bne.n	8003f86 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	330c      	adds	r3, #12
 8003f68:	7812      	ldrb	r2, [r2, #0]
 8003f6a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f70:	1c5a      	adds	r2, r3, #1
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003f7a:	b29b      	uxth	r3, r3
 8003f7c:	3b01      	subs	r3, #1
 8003f7e:	b29a      	uxth	r2, r3
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003f84:	e018      	b.n	8003fb8 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003f86:	f7fd f99b 	bl	80012c0 <HAL_GetTick>
 8003f8a:	4602      	mov	r2, r0
 8003f8c:	69fb      	ldr	r3, [r7, #28]
 8003f8e:	1ad3      	subs	r3, r2, r3
 8003f90:	683a      	ldr	r2, [r7, #0]
 8003f92:	429a      	cmp	r2, r3
 8003f94:	d803      	bhi.n	8003f9e <HAL_SPI_Transmit+0x20a>
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f9c:	d102      	bne.n	8003fa4 <HAL_SPI_Transmit+0x210>
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d109      	bne.n	8003fb8 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	2201      	movs	r2, #1
 8003fa8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003fb4:	2303      	movs	r3, #3
 8003fb6:	e02d      	b.n	8004014 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003fbc:	b29b      	uxth	r3, r3
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d1c6      	bne.n	8003f50 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003fc2:	69fa      	ldr	r2, [r7, #28]
 8003fc4:	6839      	ldr	r1, [r7, #0]
 8003fc6:	68f8      	ldr	r0, [r7, #12]
 8003fc8:	f000 fbc4 	bl	8004754 <SPI_EndRxTxTransaction>
 8003fcc:	4603      	mov	r3, r0
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d002      	beq.n	8003fd8 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	2220      	movs	r2, #32
 8003fd6:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	689b      	ldr	r3, [r3, #8]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d10a      	bne.n	8003ff6 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	617b      	str	r3, [r7, #20]
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	68db      	ldr	r3, [r3, #12]
 8003fea:	617b      	str	r3, [r7, #20]
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	689b      	ldr	r3, [r3, #8]
 8003ff2:	617b      	str	r3, [r7, #20]
 8003ff4:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	2201      	movs	r2, #1
 8003ffa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	2200      	movs	r2, #0
 8004002:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800400a:	2b00      	cmp	r3, #0
 800400c:	d001      	beq.n	8004012 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 800400e:	2301      	movs	r3, #1
 8004010:	e000      	b.n	8004014 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8004012:	2300      	movs	r3, #0
  }
}
 8004014:	4618      	mov	r0, r3
 8004016:	3720      	adds	r7, #32
 8004018:	46bd      	mov	sp, r7
 800401a:	bd80      	pop	{r7, pc}

0800401c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b088      	sub	sp, #32
 8004020:	af02      	add	r7, sp, #8
 8004022:	60f8      	str	r0, [r7, #12]
 8004024:	60b9      	str	r1, [r7, #8]
 8004026:	603b      	str	r3, [r7, #0]
 8004028:	4613      	mov	r3, r2
 800402a:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004032:	b2db      	uxtb	r3, r3
 8004034:	2b01      	cmp	r3, #1
 8004036:	d001      	beq.n	800403c <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8004038:	2302      	movs	r3, #2
 800403a:	e104      	b.n	8004246 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004044:	d112      	bne.n	800406c <HAL_SPI_Receive+0x50>
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	689b      	ldr	r3, [r3, #8]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d10e      	bne.n	800406c <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	2204      	movs	r2, #4
 8004052:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004056:	88fa      	ldrh	r2, [r7, #6]
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	9300      	str	r3, [sp, #0]
 800405c:	4613      	mov	r3, r2
 800405e:	68ba      	ldr	r2, [r7, #8]
 8004060:	68b9      	ldr	r1, [r7, #8]
 8004062:	68f8      	ldr	r0, [r7, #12]
 8004064:	f000 f8f3 	bl	800424e <HAL_SPI_TransmitReceive>
 8004068:	4603      	mov	r3, r0
 800406a:	e0ec      	b.n	8004246 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800406c:	f7fd f928 	bl	80012c0 <HAL_GetTick>
 8004070:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8004072:	68bb      	ldr	r3, [r7, #8]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d002      	beq.n	800407e <HAL_SPI_Receive+0x62>
 8004078:	88fb      	ldrh	r3, [r7, #6]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d101      	bne.n	8004082 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 800407e:	2301      	movs	r3, #1
 8004080:	e0e1      	b.n	8004246 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004088:	2b01      	cmp	r3, #1
 800408a:	d101      	bne.n	8004090 <HAL_SPI_Receive+0x74>
 800408c:	2302      	movs	r3, #2
 800408e:	e0da      	b.n	8004246 <HAL_SPI_Receive+0x22a>
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	2201      	movs	r2, #1
 8004094:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	2204      	movs	r2, #4
 800409c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	2200      	movs	r2, #0
 80040a4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	68ba      	ldr	r2, [r7, #8]
 80040aa:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	88fa      	ldrh	r2, [r7, #6]
 80040b0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	88fa      	ldrh	r2, [r7, #6]
 80040b6:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	2200      	movs	r2, #0
 80040bc:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	2200      	movs	r2, #0
 80040c2:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	2200      	movs	r2, #0
 80040c8:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	2200      	movs	r2, #0
 80040ce:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	2200      	movs	r2, #0
 80040d4:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	689b      	ldr	r3, [r3, #8]
 80040da:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80040de:	d10f      	bne.n	8004100 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	681a      	ldr	r2, [r3, #0]
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80040ee:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	681a      	ldr	r2, [r3, #0]
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80040fe:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800410a:	2b40      	cmp	r3, #64	@ 0x40
 800410c:	d007      	beq.n	800411e <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	681a      	ldr	r2, [r3, #0]
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800411c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	68db      	ldr	r3, [r3, #12]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d170      	bne.n	8004208 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004126:	e035      	b.n	8004194 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	689b      	ldr	r3, [r3, #8]
 800412e:	f003 0301 	and.w	r3, r3, #1
 8004132:	2b01      	cmp	r3, #1
 8004134:	d115      	bne.n	8004162 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f103 020c 	add.w	r2, r3, #12
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004142:	7812      	ldrb	r2, [r2, #0]
 8004144:	b2d2      	uxtb	r2, r2
 8004146:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800414c:	1c5a      	adds	r2, r3, #1
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004156:	b29b      	uxth	r3, r3
 8004158:	3b01      	subs	r3, #1
 800415a:	b29a      	uxth	r2, r3
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004160:	e018      	b.n	8004194 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004162:	f7fd f8ad 	bl	80012c0 <HAL_GetTick>
 8004166:	4602      	mov	r2, r0
 8004168:	697b      	ldr	r3, [r7, #20]
 800416a:	1ad3      	subs	r3, r2, r3
 800416c:	683a      	ldr	r2, [r7, #0]
 800416e:	429a      	cmp	r2, r3
 8004170:	d803      	bhi.n	800417a <HAL_SPI_Receive+0x15e>
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004178:	d102      	bne.n	8004180 <HAL_SPI_Receive+0x164>
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d109      	bne.n	8004194 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	2201      	movs	r2, #1
 8004184:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	2200      	movs	r2, #0
 800418c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004190:	2303      	movs	r3, #3
 8004192:	e058      	b.n	8004246 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004198:	b29b      	uxth	r3, r3
 800419a:	2b00      	cmp	r3, #0
 800419c:	d1c4      	bne.n	8004128 <HAL_SPI_Receive+0x10c>
 800419e:	e038      	b.n	8004212 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	689b      	ldr	r3, [r3, #8]
 80041a6:	f003 0301 	and.w	r3, r3, #1
 80041aa:	2b01      	cmp	r3, #1
 80041ac:	d113      	bne.n	80041d6 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	68da      	ldr	r2, [r3, #12]
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041b8:	b292      	uxth	r2, r2
 80041ba:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041c0:	1c9a      	adds	r2, r3, #2
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80041ca:	b29b      	uxth	r3, r3
 80041cc:	3b01      	subs	r3, #1
 80041ce:	b29a      	uxth	r2, r3
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80041d4:	e018      	b.n	8004208 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80041d6:	f7fd f873 	bl	80012c0 <HAL_GetTick>
 80041da:	4602      	mov	r2, r0
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	1ad3      	subs	r3, r2, r3
 80041e0:	683a      	ldr	r2, [r7, #0]
 80041e2:	429a      	cmp	r2, r3
 80041e4:	d803      	bhi.n	80041ee <HAL_SPI_Receive+0x1d2>
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041ec:	d102      	bne.n	80041f4 <HAL_SPI_Receive+0x1d8>
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d109      	bne.n	8004208 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	2201      	movs	r2, #1
 80041f8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	2200      	movs	r2, #0
 8004200:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004204:	2303      	movs	r3, #3
 8004206:	e01e      	b.n	8004246 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800420c:	b29b      	uxth	r3, r3
 800420e:	2b00      	cmp	r3, #0
 8004210:	d1c6      	bne.n	80041a0 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004212:	697a      	ldr	r2, [r7, #20]
 8004214:	6839      	ldr	r1, [r7, #0]
 8004216:	68f8      	ldr	r0, [r7, #12]
 8004218:	f000 fa4a 	bl	80046b0 <SPI_EndRxTransaction>
 800421c:	4603      	mov	r3, r0
 800421e:	2b00      	cmp	r3, #0
 8004220:	d002      	beq.n	8004228 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	2220      	movs	r2, #32
 8004226:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	2201      	movs	r2, #1
 800422c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	2200      	movs	r2, #0
 8004234:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800423c:	2b00      	cmp	r3, #0
 800423e:	d001      	beq.n	8004244 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8004240:	2301      	movs	r3, #1
 8004242:	e000      	b.n	8004246 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8004244:	2300      	movs	r3, #0
  }
}
 8004246:	4618      	mov	r0, r3
 8004248:	3718      	adds	r7, #24
 800424a:	46bd      	mov	sp, r7
 800424c:	bd80      	pop	{r7, pc}

0800424e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800424e:	b580      	push	{r7, lr}
 8004250:	b08a      	sub	sp, #40	@ 0x28
 8004252:	af00      	add	r7, sp, #0
 8004254:	60f8      	str	r0, [r7, #12]
 8004256:	60b9      	str	r1, [r7, #8]
 8004258:	607a      	str	r2, [r7, #4]
 800425a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800425c:	2301      	movs	r3, #1
 800425e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004260:	f7fd f82e 	bl	80012c0 <HAL_GetTick>
 8004264:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800426c:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8004274:	887b      	ldrh	r3, [r7, #2]
 8004276:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004278:	7ffb      	ldrb	r3, [r7, #31]
 800427a:	2b01      	cmp	r3, #1
 800427c:	d00c      	beq.n	8004298 <HAL_SPI_TransmitReceive+0x4a>
 800427e:	69bb      	ldr	r3, [r7, #24]
 8004280:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004284:	d106      	bne.n	8004294 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	689b      	ldr	r3, [r3, #8]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d102      	bne.n	8004294 <HAL_SPI_TransmitReceive+0x46>
 800428e:	7ffb      	ldrb	r3, [r7, #31]
 8004290:	2b04      	cmp	r3, #4
 8004292:	d001      	beq.n	8004298 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8004294:	2302      	movs	r3, #2
 8004296:	e17f      	b.n	8004598 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d005      	beq.n	80042aa <HAL_SPI_TransmitReceive+0x5c>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d002      	beq.n	80042aa <HAL_SPI_TransmitReceive+0x5c>
 80042a4:	887b      	ldrh	r3, [r7, #2]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d101      	bne.n	80042ae <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80042aa:	2301      	movs	r3, #1
 80042ac:	e174      	b.n	8004598 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80042b4:	2b01      	cmp	r3, #1
 80042b6:	d101      	bne.n	80042bc <HAL_SPI_TransmitReceive+0x6e>
 80042b8:	2302      	movs	r3, #2
 80042ba:	e16d      	b.n	8004598 <HAL_SPI_TransmitReceive+0x34a>
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	2201      	movs	r2, #1
 80042c0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80042ca:	b2db      	uxtb	r3, r3
 80042cc:	2b04      	cmp	r3, #4
 80042ce:	d003      	beq.n	80042d8 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	2205      	movs	r2, #5
 80042d4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	2200      	movs	r2, #0
 80042dc:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	687a      	ldr	r2, [r7, #4]
 80042e2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	887a      	ldrh	r2, [r7, #2]
 80042e8:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	887a      	ldrh	r2, [r7, #2]
 80042ee:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	68ba      	ldr	r2, [r7, #8]
 80042f4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	887a      	ldrh	r2, [r7, #2]
 80042fa:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	887a      	ldrh	r2, [r7, #2]
 8004300:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	2200      	movs	r2, #0
 8004306:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	2200      	movs	r2, #0
 800430c:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004318:	2b40      	cmp	r3, #64	@ 0x40
 800431a:	d007      	beq.n	800432c <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	681a      	ldr	r2, [r3, #0]
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800432a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	68db      	ldr	r3, [r3, #12]
 8004330:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004334:	d17e      	bne.n	8004434 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d002      	beq.n	8004344 <HAL_SPI_TransmitReceive+0xf6>
 800433e:	8afb      	ldrh	r3, [r7, #22]
 8004340:	2b01      	cmp	r3, #1
 8004342:	d16c      	bne.n	800441e <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004348:	881a      	ldrh	r2, [r3, #0]
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004354:	1c9a      	adds	r2, r3, #2
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800435e:	b29b      	uxth	r3, r3
 8004360:	3b01      	subs	r3, #1
 8004362:	b29a      	uxth	r2, r3
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004368:	e059      	b.n	800441e <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	689b      	ldr	r3, [r3, #8]
 8004370:	f003 0302 	and.w	r3, r3, #2
 8004374:	2b02      	cmp	r3, #2
 8004376:	d11b      	bne.n	80043b0 <HAL_SPI_TransmitReceive+0x162>
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800437c:	b29b      	uxth	r3, r3
 800437e:	2b00      	cmp	r3, #0
 8004380:	d016      	beq.n	80043b0 <HAL_SPI_TransmitReceive+0x162>
 8004382:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004384:	2b01      	cmp	r3, #1
 8004386:	d113      	bne.n	80043b0 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800438c:	881a      	ldrh	r2, [r3, #0]
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004398:	1c9a      	adds	r2, r3, #2
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80043a2:	b29b      	uxth	r3, r3
 80043a4:	3b01      	subs	r3, #1
 80043a6:	b29a      	uxth	r2, r3
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80043ac:	2300      	movs	r3, #0
 80043ae:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	689b      	ldr	r3, [r3, #8]
 80043b6:	f003 0301 	and.w	r3, r3, #1
 80043ba:	2b01      	cmp	r3, #1
 80043bc:	d119      	bne.n	80043f2 <HAL_SPI_TransmitReceive+0x1a4>
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80043c2:	b29b      	uxth	r3, r3
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d014      	beq.n	80043f2 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	68da      	ldr	r2, [r3, #12]
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043d2:	b292      	uxth	r2, r2
 80043d4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043da:	1c9a      	adds	r2, r3, #2
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80043e4:	b29b      	uxth	r3, r3
 80043e6:	3b01      	subs	r3, #1
 80043e8:	b29a      	uxth	r2, r3
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80043ee:	2301      	movs	r3, #1
 80043f0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80043f2:	f7fc ff65 	bl	80012c0 <HAL_GetTick>
 80043f6:	4602      	mov	r2, r0
 80043f8:	6a3b      	ldr	r3, [r7, #32]
 80043fa:	1ad3      	subs	r3, r2, r3
 80043fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80043fe:	429a      	cmp	r2, r3
 8004400:	d80d      	bhi.n	800441e <HAL_SPI_TransmitReceive+0x1d0>
 8004402:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004404:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004408:	d009      	beq.n	800441e <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	2201      	movs	r2, #1
 800440e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	2200      	movs	r2, #0
 8004416:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800441a:	2303      	movs	r3, #3
 800441c:	e0bc      	b.n	8004598 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004422:	b29b      	uxth	r3, r3
 8004424:	2b00      	cmp	r3, #0
 8004426:	d1a0      	bne.n	800436a <HAL_SPI_TransmitReceive+0x11c>
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800442c:	b29b      	uxth	r3, r3
 800442e:	2b00      	cmp	r3, #0
 8004430:	d19b      	bne.n	800436a <HAL_SPI_TransmitReceive+0x11c>
 8004432:	e082      	b.n	800453a <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d002      	beq.n	8004442 <HAL_SPI_TransmitReceive+0x1f4>
 800443c:	8afb      	ldrh	r3, [r7, #22]
 800443e:	2b01      	cmp	r3, #1
 8004440:	d171      	bne.n	8004526 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	330c      	adds	r3, #12
 800444c:	7812      	ldrb	r2, [r2, #0]
 800444e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004454:	1c5a      	adds	r2, r3, #1
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800445e:	b29b      	uxth	r3, r3
 8004460:	3b01      	subs	r3, #1
 8004462:	b29a      	uxth	r2, r3
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004468:	e05d      	b.n	8004526 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	689b      	ldr	r3, [r3, #8]
 8004470:	f003 0302 	and.w	r3, r3, #2
 8004474:	2b02      	cmp	r3, #2
 8004476:	d11c      	bne.n	80044b2 <HAL_SPI_TransmitReceive+0x264>
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800447c:	b29b      	uxth	r3, r3
 800447e:	2b00      	cmp	r3, #0
 8004480:	d017      	beq.n	80044b2 <HAL_SPI_TransmitReceive+0x264>
 8004482:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004484:	2b01      	cmp	r3, #1
 8004486:	d114      	bne.n	80044b2 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	330c      	adds	r3, #12
 8004492:	7812      	ldrb	r2, [r2, #0]
 8004494:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800449a:	1c5a      	adds	r2, r3, #1
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80044a4:	b29b      	uxth	r3, r3
 80044a6:	3b01      	subs	r3, #1
 80044a8:	b29a      	uxth	r2, r3
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80044ae:	2300      	movs	r3, #0
 80044b0:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	689b      	ldr	r3, [r3, #8]
 80044b8:	f003 0301 	and.w	r3, r3, #1
 80044bc:	2b01      	cmp	r3, #1
 80044be:	d119      	bne.n	80044f4 <HAL_SPI_TransmitReceive+0x2a6>
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80044c4:	b29b      	uxth	r3, r3
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d014      	beq.n	80044f4 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	68da      	ldr	r2, [r3, #12]
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044d4:	b2d2      	uxtb	r2, r2
 80044d6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044dc:	1c5a      	adds	r2, r3, #1
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80044e6:	b29b      	uxth	r3, r3
 80044e8:	3b01      	subs	r3, #1
 80044ea:	b29a      	uxth	r2, r3
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80044f0:	2301      	movs	r3, #1
 80044f2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80044f4:	f7fc fee4 	bl	80012c0 <HAL_GetTick>
 80044f8:	4602      	mov	r2, r0
 80044fa:	6a3b      	ldr	r3, [r7, #32]
 80044fc:	1ad3      	subs	r3, r2, r3
 80044fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004500:	429a      	cmp	r2, r3
 8004502:	d803      	bhi.n	800450c <HAL_SPI_TransmitReceive+0x2be>
 8004504:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004506:	f1b3 3fff 	cmp.w	r3, #4294967295
 800450a:	d102      	bne.n	8004512 <HAL_SPI_TransmitReceive+0x2c4>
 800450c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800450e:	2b00      	cmp	r3, #0
 8004510:	d109      	bne.n	8004526 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	2201      	movs	r2, #1
 8004516:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	2200      	movs	r2, #0
 800451e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8004522:	2303      	movs	r3, #3
 8004524:	e038      	b.n	8004598 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800452a:	b29b      	uxth	r3, r3
 800452c:	2b00      	cmp	r3, #0
 800452e:	d19c      	bne.n	800446a <HAL_SPI_TransmitReceive+0x21c>
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004534:	b29b      	uxth	r3, r3
 8004536:	2b00      	cmp	r3, #0
 8004538:	d197      	bne.n	800446a <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800453a:	6a3a      	ldr	r2, [r7, #32]
 800453c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800453e:	68f8      	ldr	r0, [r7, #12]
 8004540:	f000 f908 	bl	8004754 <SPI_EndRxTxTransaction>
 8004544:	4603      	mov	r3, r0
 8004546:	2b00      	cmp	r3, #0
 8004548:	d008      	beq.n	800455c <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	2220      	movs	r2, #32
 800454e:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	2200      	movs	r2, #0
 8004554:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8004558:	2301      	movs	r3, #1
 800455a:	e01d      	b.n	8004598 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	689b      	ldr	r3, [r3, #8]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d10a      	bne.n	800457a <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004564:	2300      	movs	r3, #0
 8004566:	613b      	str	r3, [r7, #16]
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	68db      	ldr	r3, [r3, #12]
 800456e:	613b      	str	r3, [r7, #16]
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	689b      	ldr	r3, [r3, #8]
 8004576:	613b      	str	r3, [r7, #16]
 8004578:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	2201      	movs	r2, #1
 800457e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	2200      	movs	r2, #0
 8004586:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800458e:	2b00      	cmp	r3, #0
 8004590:	d001      	beq.n	8004596 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8004592:	2301      	movs	r3, #1
 8004594:	e000      	b.n	8004598 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8004596:	2300      	movs	r3, #0
  }
}
 8004598:	4618      	mov	r0, r3
 800459a:	3728      	adds	r7, #40	@ 0x28
 800459c:	46bd      	mov	sp, r7
 800459e:	bd80      	pop	{r7, pc}

080045a0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b088      	sub	sp, #32
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	60f8      	str	r0, [r7, #12]
 80045a8:	60b9      	str	r1, [r7, #8]
 80045aa:	603b      	str	r3, [r7, #0]
 80045ac:	4613      	mov	r3, r2
 80045ae:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80045b0:	f7fc fe86 	bl	80012c0 <HAL_GetTick>
 80045b4:	4602      	mov	r2, r0
 80045b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045b8:	1a9b      	subs	r3, r3, r2
 80045ba:	683a      	ldr	r2, [r7, #0]
 80045bc:	4413      	add	r3, r2
 80045be:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80045c0:	f7fc fe7e 	bl	80012c0 <HAL_GetTick>
 80045c4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80045c6:	4b39      	ldr	r3, [pc, #228]	@ (80046ac <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	015b      	lsls	r3, r3, #5
 80045cc:	0d1b      	lsrs	r3, r3, #20
 80045ce:	69fa      	ldr	r2, [r7, #28]
 80045d0:	fb02 f303 	mul.w	r3, r2, r3
 80045d4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80045d6:	e054      	b.n	8004682 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045de:	d050      	beq.n	8004682 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80045e0:	f7fc fe6e 	bl	80012c0 <HAL_GetTick>
 80045e4:	4602      	mov	r2, r0
 80045e6:	69bb      	ldr	r3, [r7, #24]
 80045e8:	1ad3      	subs	r3, r2, r3
 80045ea:	69fa      	ldr	r2, [r7, #28]
 80045ec:	429a      	cmp	r2, r3
 80045ee:	d902      	bls.n	80045f6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80045f0:	69fb      	ldr	r3, [r7, #28]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d13d      	bne.n	8004672 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	685a      	ldr	r2, [r3, #4]
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004604:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800460e:	d111      	bne.n	8004634 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	689b      	ldr	r3, [r3, #8]
 8004614:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004618:	d004      	beq.n	8004624 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	689b      	ldr	r3, [r3, #8]
 800461e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004622:	d107      	bne.n	8004634 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	681a      	ldr	r2, [r3, #0]
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004632:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004638:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800463c:	d10f      	bne.n	800465e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	681a      	ldr	r2, [r3, #0]
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800464c:	601a      	str	r2, [r3, #0]
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	681a      	ldr	r2, [r3, #0]
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800465c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	2201      	movs	r2, #1
 8004662:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	2200      	movs	r2, #0
 800466a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800466e:	2303      	movs	r3, #3
 8004670:	e017      	b.n	80046a2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004672:	697b      	ldr	r3, [r7, #20]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d101      	bne.n	800467c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004678:	2300      	movs	r3, #0
 800467a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800467c:	697b      	ldr	r3, [r7, #20]
 800467e:	3b01      	subs	r3, #1
 8004680:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	689a      	ldr	r2, [r3, #8]
 8004688:	68bb      	ldr	r3, [r7, #8]
 800468a:	4013      	ands	r3, r2
 800468c:	68ba      	ldr	r2, [r7, #8]
 800468e:	429a      	cmp	r2, r3
 8004690:	bf0c      	ite	eq
 8004692:	2301      	moveq	r3, #1
 8004694:	2300      	movne	r3, #0
 8004696:	b2db      	uxtb	r3, r3
 8004698:	461a      	mov	r2, r3
 800469a:	79fb      	ldrb	r3, [r7, #7]
 800469c:	429a      	cmp	r2, r3
 800469e:	d19b      	bne.n	80045d8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80046a0:	2300      	movs	r3, #0
}
 80046a2:	4618      	mov	r0, r3
 80046a4:	3720      	adds	r7, #32
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bd80      	pop	{r7, pc}
 80046aa:	bf00      	nop
 80046ac:	20000020 	.word	0x20000020

080046b0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b086      	sub	sp, #24
 80046b4:	af02      	add	r7, sp, #8
 80046b6:	60f8      	str	r0, [r7, #12]
 80046b8:	60b9      	str	r1, [r7, #8]
 80046ba:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80046c4:	d111      	bne.n	80046ea <SPI_EndRxTransaction+0x3a>
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	689b      	ldr	r3, [r3, #8]
 80046ca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80046ce:	d004      	beq.n	80046da <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	689b      	ldr	r3, [r3, #8]
 80046d4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80046d8:	d107      	bne.n	80046ea <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	681a      	ldr	r2, [r3, #0]
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80046e8:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80046f2:	d117      	bne.n	8004724 <SPI_EndRxTransaction+0x74>
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	689b      	ldr	r3, [r3, #8]
 80046f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80046fc:	d112      	bne.n	8004724 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	9300      	str	r3, [sp, #0]
 8004702:	68bb      	ldr	r3, [r7, #8]
 8004704:	2200      	movs	r2, #0
 8004706:	2101      	movs	r1, #1
 8004708:	68f8      	ldr	r0, [r7, #12]
 800470a:	f7ff ff49 	bl	80045a0 <SPI_WaitFlagStateUntilTimeout>
 800470e:	4603      	mov	r3, r0
 8004710:	2b00      	cmp	r3, #0
 8004712:	d01a      	beq.n	800474a <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004718:	f043 0220 	orr.w	r2, r3, #32
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004720:	2303      	movs	r3, #3
 8004722:	e013      	b.n	800474c <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	9300      	str	r3, [sp, #0]
 8004728:	68bb      	ldr	r3, [r7, #8]
 800472a:	2200      	movs	r2, #0
 800472c:	2180      	movs	r1, #128	@ 0x80
 800472e:	68f8      	ldr	r0, [r7, #12]
 8004730:	f7ff ff36 	bl	80045a0 <SPI_WaitFlagStateUntilTimeout>
 8004734:	4603      	mov	r3, r0
 8004736:	2b00      	cmp	r3, #0
 8004738:	d007      	beq.n	800474a <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800473e:	f043 0220 	orr.w	r2, r3, #32
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004746:	2303      	movs	r3, #3
 8004748:	e000      	b.n	800474c <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 800474a:	2300      	movs	r3, #0
}
 800474c:	4618      	mov	r0, r3
 800474e:	3710      	adds	r7, #16
 8004750:	46bd      	mov	sp, r7
 8004752:	bd80      	pop	{r7, pc}

08004754 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b086      	sub	sp, #24
 8004758:	af02      	add	r7, sp, #8
 800475a:	60f8      	str	r0, [r7, #12]
 800475c:	60b9      	str	r1, [r7, #8]
 800475e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	9300      	str	r3, [sp, #0]
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	2201      	movs	r2, #1
 8004768:	2102      	movs	r1, #2
 800476a:	68f8      	ldr	r0, [r7, #12]
 800476c:	f7ff ff18 	bl	80045a0 <SPI_WaitFlagStateUntilTimeout>
 8004770:	4603      	mov	r3, r0
 8004772:	2b00      	cmp	r3, #0
 8004774:	d007      	beq.n	8004786 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800477a:	f043 0220 	orr.w	r2, r3, #32
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8004782:	2303      	movs	r3, #3
 8004784:	e013      	b.n	80047ae <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	9300      	str	r3, [sp, #0]
 800478a:	68bb      	ldr	r3, [r7, #8]
 800478c:	2200      	movs	r2, #0
 800478e:	2180      	movs	r1, #128	@ 0x80
 8004790:	68f8      	ldr	r0, [r7, #12]
 8004792:	f7ff ff05 	bl	80045a0 <SPI_WaitFlagStateUntilTimeout>
 8004796:	4603      	mov	r3, r0
 8004798:	2b00      	cmp	r3, #0
 800479a:	d007      	beq.n	80047ac <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047a0:	f043 0220 	orr.w	r2, r3, #32
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80047a8:	2303      	movs	r3, #3
 80047aa:	e000      	b.n	80047ae <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 80047ac:	2300      	movs	r3, #0
}
 80047ae:	4618      	mov	r0, r3
 80047b0:	3710      	adds	r7, #16
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bd80      	pop	{r7, pc}

080047b6 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80047b6:	b480      	push	{r7}
 80047b8:	b085      	sub	sp, #20
 80047ba:	af00      	add	r7, sp, #0
 80047bc:	60f8      	str	r0, [r7, #12]
 80047be:	4638      	mov	r0, r7
 80047c0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80047c4:	2300      	movs	r3, #0
}
 80047c6:	4618      	mov	r0, r3
 80047c8:	3714      	adds	r7, #20
 80047ca:	46bd      	mov	sp, r7
 80047cc:	bc80      	pop	{r7}
 80047ce:	4770      	bx	lr

080047d0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80047d0:	b480      	push	{r7}
 80047d2:	b085      	sub	sp, #20
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2200      	movs	r2, #0
 80047dc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80047e0:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 80047e4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	b29a      	uxth	r2, r3
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80047f0:	2300      	movs	r3, #0
}
 80047f2:	4618      	mov	r0, r3
 80047f4:	3714      	adds	r7, #20
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bc80      	pop	{r7}
 80047fa:	4770      	bx	lr

080047fc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80047fc:	b480      	push	{r7}
 80047fe:	b085      	sub	sp, #20
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004804:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8004808:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004810:	b29a      	uxth	r2, r3
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	b29b      	uxth	r3, r3
 8004816:	43db      	mvns	r3, r3
 8004818:	b29b      	uxth	r3, r3
 800481a:	4013      	ands	r3, r2
 800481c:	b29a      	uxth	r2, r3
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004824:	2300      	movs	r3, #0
}
 8004826:	4618      	mov	r0, r3
 8004828:	3714      	adds	r7, #20
 800482a:	46bd      	mov	sp, r7
 800482c:	bc80      	pop	{r7}
 800482e:	4770      	bx	lr

08004830 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8004830:	b480      	push	{r7}
 8004832:	b083      	sub	sp, #12
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
 8004838:	460b      	mov	r3, r1
 800483a:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800483c:	2300      	movs	r3, #0
}
 800483e:	4618      	mov	r0, r3
 8004840:	370c      	adds	r7, #12
 8004842:	46bd      	mov	sp, r7
 8004844:	bc80      	pop	{r7}
 8004846:	4770      	bx	lr

08004848 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004848:	b480      	push	{r7}
 800484a:	b085      	sub	sp, #20
 800484c:	af00      	add	r7, sp, #0
 800484e:	60f8      	str	r0, [r7, #12]
 8004850:	4638      	mov	r0, r7
 8004852:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	2201      	movs	r2, #1
 800485a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	2200      	movs	r2, #0
 8004862:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	2200      	movs	r2, #0
 800486a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	2200      	movs	r2, #0
 8004872:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8004876:	2300      	movs	r3, #0
}
 8004878:	4618      	mov	r0, r3
 800487a:	3714      	adds	r7, #20
 800487c:	46bd      	mov	sp, r7
 800487e:	bc80      	pop	{r7}
 8004880:	4770      	bx	lr
	...

08004884 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004884:	b480      	push	{r7}
 8004886:	b09d      	sub	sp, #116	@ 0x74
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
 800488c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800488e:	2300      	movs	r3, #0
 8004890:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004894:	687a      	ldr	r2, [r7, #4]
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	781b      	ldrb	r3, [r3, #0]
 800489a:	009b      	lsls	r3, r3, #2
 800489c:	4413      	add	r3, r2
 800489e:	881b      	ldrh	r3, [r3, #0]
 80048a0:	b29b      	uxth	r3, r3
 80048a2:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 80048a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80048aa:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	78db      	ldrb	r3, [r3, #3]
 80048b2:	2b03      	cmp	r3, #3
 80048b4:	d81f      	bhi.n	80048f6 <USB_ActivateEndpoint+0x72>
 80048b6:	a201      	add	r2, pc, #4	@ (adr r2, 80048bc <USB_ActivateEndpoint+0x38>)
 80048b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048bc:	080048cd 	.word	0x080048cd
 80048c0:	080048e9 	.word	0x080048e9
 80048c4:	080048ff 	.word	0x080048ff
 80048c8:	080048db 	.word	0x080048db
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80048cc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80048d0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80048d4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80048d8:	e012      	b.n	8004900 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80048da:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80048de:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 80048e2:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80048e6:	e00b      	b.n	8004900 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80048e8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80048ec:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80048f0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80048f4:	e004      	b.n	8004900 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80048f6:	2301      	movs	r3, #1
 80048f8:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 80048fc:	e000      	b.n	8004900 <USB_ActivateEndpoint+0x7c>
      break;
 80048fe:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004900:	687a      	ldr	r2, [r7, #4]
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	781b      	ldrb	r3, [r3, #0]
 8004906:	009b      	lsls	r3, r3, #2
 8004908:	441a      	add	r2, r3
 800490a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800490e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004912:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004916:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800491a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800491e:	b29b      	uxth	r3, r3
 8004920:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004922:	687a      	ldr	r2, [r7, #4]
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	781b      	ldrb	r3, [r3, #0]
 8004928:	009b      	lsls	r3, r3, #2
 800492a:	4413      	add	r3, r2
 800492c:	881b      	ldrh	r3, [r3, #0]
 800492e:	b29b      	uxth	r3, r3
 8004930:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004934:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004938:	b29b      	uxth	r3, r3
 800493a:	683a      	ldr	r2, [r7, #0]
 800493c:	7812      	ldrb	r2, [r2, #0]
 800493e:	4313      	orrs	r3, r2
 8004940:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8004944:	687a      	ldr	r2, [r7, #4]
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	781b      	ldrb	r3, [r3, #0]
 800494a:	009b      	lsls	r3, r3, #2
 800494c:	441a      	add	r2, r3
 800494e:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8004952:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004956:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800495a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800495e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004962:	b29b      	uxth	r3, r3
 8004964:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	7b1b      	ldrb	r3, [r3, #12]
 800496a:	2b00      	cmp	r3, #0
 800496c:	f040 8178 	bne.w	8004c60 <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	785b      	ldrb	r3, [r3, #1]
 8004974:	2b00      	cmp	r3, #0
 8004976:	f000 8084 	beq.w	8004a82 <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	61bb      	str	r3, [r7, #24]
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004984:	b29b      	uxth	r3, r3
 8004986:	461a      	mov	r2, r3
 8004988:	69bb      	ldr	r3, [r7, #24]
 800498a:	4413      	add	r3, r2
 800498c:	61bb      	str	r3, [r7, #24]
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	781b      	ldrb	r3, [r3, #0]
 8004992:	011a      	lsls	r2, r3, #4
 8004994:	69bb      	ldr	r3, [r7, #24]
 8004996:	4413      	add	r3, r2
 8004998:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800499c:	617b      	str	r3, [r7, #20]
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	88db      	ldrh	r3, [r3, #6]
 80049a2:	085b      	lsrs	r3, r3, #1
 80049a4:	b29b      	uxth	r3, r3
 80049a6:	005b      	lsls	r3, r3, #1
 80049a8:	b29a      	uxth	r2, r3
 80049aa:	697b      	ldr	r3, [r7, #20]
 80049ac:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80049ae:	687a      	ldr	r2, [r7, #4]
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	781b      	ldrb	r3, [r3, #0]
 80049b4:	009b      	lsls	r3, r3, #2
 80049b6:	4413      	add	r3, r2
 80049b8:	881b      	ldrh	r3, [r3, #0]
 80049ba:	827b      	strh	r3, [r7, #18]
 80049bc:	8a7b      	ldrh	r3, [r7, #18]
 80049be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d01b      	beq.n	80049fe <USB_ActivateEndpoint+0x17a>
 80049c6:	687a      	ldr	r2, [r7, #4]
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	781b      	ldrb	r3, [r3, #0]
 80049cc:	009b      	lsls	r3, r3, #2
 80049ce:	4413      	add	r3, r2
 80049d0:	881b      	ldrh	r3, [r3, #0]
 80049d2:	b29b      	uxth	r3, r3
 80049d4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80049d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80049dc:	823b      	strh	r3, [r7, #16]
 80049de:	687a      	ldr	r2, [r7, #4]
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	781b      	ldrb	r3, [r3, #0]
 80049e4:	009b      	lsls	r3, r3, #2
 80049e6:	441a      	add	r2, r3
 80049e8:	8a3b      	ldrh	r3, [r7, #16]
 80049ea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80049ee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80049f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80049f6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80049fa:	b29b      	uxth	r3, r3
 80049fc:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	78db      	ldrb	r3, [r3, #3]
 8004a02:	2b01      	cmp	r3, #1
 8004a04:	d020      	beq.n	8004a48 <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004a06:	687a      	ldr	r2, [r7, #4]
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	781b      	ldrb	r3, [r3, #0]
 8004a0c:	009b      	lsls	r3, r3, #2
 8004a0e:	4413      	add	r3, r2
 8004a10:	881b      	ldrh	r3, [r3, #0]
 8004a12:	b29b      	uxth	r3, r3
 8004a14:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004a18:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004a1c:	81bb      	strh	r3, [r7, #12]
 8004a1e:	89bb      	ldrh	r3, [r7, #12]
 8004a20:	f083 0320 	eor.w	r3, r3, #32
 8004a24:	81bb      	strh	r3, [r7, #12]
 8004a26:	687a      	ldr	r2, [r7, #4]
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	781b      	ldrb	r3, [r3, #0]
 8004a2c:	009b      	lsls	r3, r3, #2
 8004a2e:	441a      	add	r2, r3
 8004a30:	89bb      	ldrh	r3, [r7, #12]
 8004a32:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004a36:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004a3a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004a3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004a42:	b29b      	uxth	r3, r3
 8004a44:	8013      	strh	r3, [r2, #0]
 8004a46:	e2d5      	b.n	8004ff4 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004a48:	687a      	ldr	r2, [r7, #4]
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	781b      	ldrb	r3, [r3, #0]
 8004a4e:	009b      	lsls	r3, r3, #2
 8004a50:	4413      	add	r3, r2
 8004a52:	881b      	ldrh	r3, [r3, #0]
 8004a54:	b29b      	uxth	r3, r3
 8004a56:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004a5a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004a5e:	81fb      	strh	r3, [r7, #14]
 8004a60:	687a      	ldr	r2, [r7, #4]
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	781b      	ldrb	r3, [r3, #0]
 8004a66:	009b      	lsls	r3, r3, #2
 8004a68:	441a      	add	r2, r3
 8004a6a:	89fb      	ldrh	r3, [r7, #14]
 8004a6c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004a70:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004a74:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004a78:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004a7c:	b29b      	uxth	r3, r3
 8004a7e:	8013      	strh	r3, [r2, #0]
 8004a80:	e2b8      	b.n	8004ff4 <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	633b      	str	r3, [r7, #48]	@ 0x30
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004a8c:	b29b      	uxth	r3, r3
 8004a8e:	461a      	mov	r2, r3
 8004a90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a92:	4413      	add	r3, r2
 8004a94:	633b      	str	r3, [r7, #48]	@ 0x30
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	781b      	ldrb	r3, [r3, #0]
 8004a9a:	011a      	lsls	r2, r3, #4
 8004a9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a9e:	4413      	add	r3, r2
 8004aa0:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8004aa4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	88db      	ldrh	r3, [r3, #6]
 8004aaa:	085b      	lsrs	r3, r3, #1
 8004aac:	b29b      	uxth	r3, r3
 8004aae:	005b      	lsls	r3, r3, #1
 8004ab0:	b29a      	uxth	r2, r3
 8004ab2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ab4:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004ac0:	b29b      	uxth	r3, r3
 8004ac2:	461a      	mov	r2, r3
 8004ac4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ac6:	4413      	add	r3, r2
 8004ac8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	781b      	ldrb	r3, [r3, #0]
 8004ace:	011a      	lsls	r2, r3, #4
 8004ad0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ad2:	4413      	add	r3, r2
 8004ad4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004ad8:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004adc:	881b      	ldrh	r3, [r3, #0]
 8004ade:	b29b      	uxth	r3, r3
 8004ae0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004ae4:	b29a      	uxth	r2, r3
 8004ae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ae8:	801a      	strh	r2, [r3, #0]
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	691b      	ldr	r3, [r3, #16]
 8004aee:	2b3e      	cmp	r3, #62	@ 0x3e
 8004af0:	d91d      	bls.n	8004b2e <USB_ActivateEndpoint+0x2aa>
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	691b      	ldr	r3, [r3, #16]
 8004af6:	095b      	lsrs	r3, r3, #5
 8004af8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	691b      	ldr	r3, [r3, #16]
 8004afe:	f003 031f 	and.w	r3, r3, #31
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d102      	bne.n	8004b0c <USB_ActivateEndpoint+0x288>
 8004b06:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004b08:	3b01      	subs	r3, #1
 8004b0a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004b0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b0e:	881b      	ldrh	r3, [r3, #0]
 8004b10:	b29a      	uxth	r2, r3
 8004b12:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004b14:	b29b      	uxth	r3, r3
 8004b16:	029b      	lsls	r3, r3, #10
 8004b18:	b29b      	uxth	r3, r3
 8004b1a:	4313      	orrs	r3, r2
 8004b1c:	b29b      	uxth	r3, r3
 8004b1e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b22:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b26:	b29a      	uxth	r2, r3
 8004b28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b2a:	801a      	strh	r2, [r3, #0]
 8004b2c:	e026      	b.n	8004b7c <USB_ActivateEndpoint+0x2f8>
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	691b      	ldr	r3, [r3, #16]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d10a      	bne.n	8004b4c <USB_ActivateEndpoint+0x2c8>
 8004b36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b38:	881b      	ldrh	r3, [r3, #0]
 8004b3a:	b29b      	uxth	r3, r3
 8004b3c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b40:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b44:	b29a      	uxth	r2, r3
 8004b46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b48:	801a      	strh	r2, [r3, #0]
 8004b4a:	e017      	b.n	8004b7c <USB_ActivateEndpoint+0x2f8>
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	691b      	ldr	r3, [r3, #16]
 8004b50:	085b      	lsrs	r3, r3, #1
 8004b52:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	691b      	ldr	r3, [r3, #16]
 8004b58:	f003 0301 	and.w	r3, r3, #1
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d002      	beq.n	8004b66 <USB_ActivateEndpoint+0x2e2>
 8004b60:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004b62:	3301      	adds	r3, #1
 8004b64:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004b66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b68:	881b      	ldrh	r3, [r3, #0]
 8004b6a:	b29a      	uxth	r2, r3
 8004b6c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004b6e:	b29b      	uxth	r3, r3
 8004b70:	029b      	lsls	r3, r3, #10
 8004b72:	b29b      	uxth	r3, r3
 8004b74:	4313      	orrs	r3, r2
 8004b76:	b29a      	uxth	r2, r3
 8004b78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b7a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004b7c:	687a      	ldr	r2, [r7, #4]
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	781b      	ldrb	r3, [r3, #0]
 8004b82:	009b      	lsls	r3, r3, #2
 8004b84:	4413      	add	r3, r2
 8004b86:	881b      	ldrh	r3, [r3, #0]
 8004b88:	847b      	strh	r3, [r7, #34]	@ 0x22
 8004b8a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8004b8c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d01b      	beq.n	8004bcc <USB_ActivateEndpoint+0x348>
 8004b94:	687a      	ldr	r2, [r7, #4]
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	781b      	ldrb	r3, [r3, #0]
 8004b9a:	009b      	lsls	r3, r3, #2
 8004b9c:	4413      	add	r3, r2
 8004b9e:	881b      	ldrh	r3, [r3, #0]
 8004ba0:	b29b      	uxth	r3, r3
 8004ba2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004ba6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004baa:	843b      	strh	r3, [r7, #32]
 8004bac:	687a      	ldr	r2, [r7, #4]
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	781b      	ldrb	r3, [r3, #0]
 8004bb2:	009b      	lsls	r3, r3, #2
 8004bb4:	441a      	add	r2, r3
 8004bb6:	8c3b      	ldrh	r3, [r7, #32]
 8004bb8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004bbc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004bc0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004bc4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004bc8:	b29b      	uxth	r3, r3
 8004bca:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	781b      	ldrb	r3, [r3, #0]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d124      	bne.n	8004c1e <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004bd4:	687a      	ldr	r2, [r7, #4]
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	781b      	ldrb	r3, [r3, #0]
 8004bda:	009b      	lsls	r3, r3, #2
 8004bdc:	4413      	add	r3, r2
 8004bde:	881b      	ldrh	r3, [r3, #0]
 8004be0:	b29b      	uxth	r3, r3
 8004be2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004be6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004bea:	83bb      	strh	r3, [r7, #28]
 8004bec:	8bbb      	ldrh	r3, [r7, #28]
 8004bee:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8004bf2:	83bb      	strh	r3, [r7, #28]
 8004bf4:	8bbb      	ldrh	r3, [r7, #28]
 8004bf6:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004bfa:	83bb      	strh	r3, [r7, #28]
 8004bfc:	687a      	ldr	r2, [r7, #4]
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	781b      	ldrb	r3, [r3, #0]
 8004c02:	009b      	lsls	r3, r3, #2
 8004c04:	441a      	add	r2, r3
 8004c06:	8bbb      	ldrh	r3, [r7, #28]
 8004c08:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004c0c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004c10:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004c14:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c18:	b29b      	uxth	r3, r3
 8004c1a:	8013      	strh	r3, [r2, #0]
 8004c1c:	e1ea      	b.n	8004ff4 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8004c1e:	687a      	ldr	r2, [r7, #4]
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	781b      	ldrb	r3, [r3, #0]
 8004c24:	009b      	lsls	r3, r3, #2
 8004c26:	4413      	add	r3, r2
 8004c28:	881b      	ldrh	r3, [r3, #0]
 8004c2a:	b29b      	uxth	r3, r3
 8004c2c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004c30:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c34:	83fb      	strh	r3, [r7, #30]
 8004c36:	8bfb      	ldrh	r3, [r7, #30]
 8004c38:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004c3c:	83fb      	strh	r3, [r7, #30]
 8004c3e:	687a      	ldr	r2, [r7, #4]
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	781b      	ldrb	r3, [r3, #0]
 8004c44:	009b      	lsls	r3, r3, #2
 8004c46:	441a      	add	r2, r3
 8004c48:	8bfb      	ldrh	r3, [r7, #30]
 8004c4a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004c4e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004c52:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004c56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c5a:	b29b      	uxth	r3, r3
 8004c5c:	8013      	strh	r3, [r2, #0]
 8004c5e:	e1c9      	b.n	8004ff4 <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	78db      	ldrb	r3, [r3, #3]
 8004c64:	2b02      	cmp	r3, #2
 8004c66:	d11e      	bne.n	8004ca6 <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004c68:	687a      	ldr	r2, [r7, #4]
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	781b      	ldrb	r3, [r3, #0]
 8004c6e:	009b      	lsls	r3, r3, #2
 8004c70:	4413      	add	r3, r2
 8004c72:	881b      	ldrh	r3, [r3, #0]
 8004c74:	b29b      	uxth	r3, r3
 8004c76:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004c7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c7e:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8004c82:	687a      	ldr	r2, [r7, #4]
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	781b      	ldrb	r3, [r3, #0]
 8004c88:	009b      	lsls	r3, r3, #2
 8004c8a:	441a      	add	r2, r3
 8004c8c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8004c90:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004c94:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004c98:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8004c9c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004ca0:	b29b      	uxth	r3, r3
 8004ca2:	8013      	strh	r3, [r2, #0]
 8004ca4:	e01d      	b.n	8004ce2 <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8004ca6:	687a      	ldr	r2, [r7, #4]
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	781b      	ldrb	r3, [r3, #0]
 8004cac:	009b      	lsls	r3, r3, #2
 8004cae:	4413      	add	r3, r2
 8004cb0:	881b      	ldrh	r3, [r3, #0]
 8004cb2:	b29b      	uxth	r3, r3
 8004cb4:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8004cb8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004cbc:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8004cc0:	687a      	ldr	r2, [r7, #4]
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	781b      	ldrb	r3, [r3, #0]
 8004cc6:	009b      	lsls	r3, r3, #2
 8004cc8:	441a      	add	r2, r3
 8004cca:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8004cce:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004cd2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004cd6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004cda:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004cde:	b29b      	uxth	r3, r3
 8004ce0:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004cec:	b29b      	uxth	r3, r3
 8004cee:	461a      	mov	r2, r3
 8004cf0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004cf2:	4413      	add	r3, r2
 8004cf4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	781b      	ldrb	r3, [r3, #0]
 8004cfa:	011a      	lsls	r2, r3, #4
 8004cfc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004cfe:	4413      	add	r3, r2
 8004d00:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004d04:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	891b      	ldrh	r3, [r3, #8]
 8004d0a:	085b      	lsrs	r3, r3, #1
 8004d0c:	b29b      	uxth	r3, r3
 8004d0e:	005b      	lsls	r3, r3, #1
 8004d10:	b29a      	uxth	r2, r3
 8004d12:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004d14:	801a      	strh	r2, [r3, #0]
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	657b      	str	r3, [r7, #84]	@ 0x54
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004d20:	b29b      	uxth	r3, r3
 8004d22:	461a      	mov	r2, r3
 8004d24:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004d26:	4413      	add	r3, r2
 8004d28:	657b      	str	r3, [r7, #84]	@ 0x54
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	781b      	ldrb	r3, [r3, #0]
 8004d2e:	011a      	lsls	r2, r3, #4
 8004d30:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004d32:	4413      	add	r3, r2
 8004d34:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8004d38:	653b      	str	r3, [r7, #80]	@ 0x50
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	895b      	ldrh	r3, [r3, #10]
 8004d3e:	085b      	lsrs	r3, r3, #1
 8004d40:	b29b      	uxth	r3, r3
 8004d42:	005b      	lsls	r3, r3, #1
 8004d44:	b29a      	uxth	r2, r3
 8004d46:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004d48:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	785b      	ldrb	r3, [r3, #1]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	f040 8093 	bne.w	8004e7a <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004d54:	687a      	ldr	r2, [r7, #4]
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	781b      	ldrb	r3, [r3, #0]
 8004d5a:	009b      	lsls	r3, r3, #2
 8004d5c:	4413      	add	r3, r2
 8004d5e:	881b      	ldrh	r3, [r3, #0]
 8004d60:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8004d64:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004d68:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d01b      	beq.n	8004da8 <USB_ActivateEndpoint+0x524>
 8004d70:	687a      	ldr	r2, [r7, #4]
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	781b      	ldrb	r3, [r3, #0]
 8004d76:	009b      	lsls	r3, r3, #2
 8004d78:	4413      	add	r3, r2
 8004d7a:	881b      	ldrh	r3, [r3, #0]
 8004d7c:	b29b      	uxth	r3, r3
 8004d7e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004d82:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d86:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8004d88:	687a      	ldr	r2, [r7, #4]
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	781b      	ldrb	r3, [r3, #0]
 8004d8e:	009b      	lsls	r3, r3, #2
 8004d90:	441a      	add	r2, r3
 8004d92:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8004d94:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004d98:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004d9c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004da0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004da4:	b29b      	uxth	r3, r3
 8004da6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004da8:	687a      	ldr	r2, [r7, #4]
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	781b      	ldrb	r3, [r3, #0]
 8004dae:	009b      	lsls	r3, r3, #2
 8004db0:	4413      	add	r3, r2
 8004db2:	881b      	ldrh	r3, [r3, #0]
 8004db4:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8004db6:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8004db8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d01b      	beq.n	8004df8 <USB_ActivateEndpoint+0x574>
 8004dc0:	687a      	ldr	r2, [r7, #4]
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	781b      	ldrb	r3, [r3, #0]
 8004dc6:	009b      	lsls	r3, r3, #2
 8004dc8:	4413      	add	r3, r2
 8004dca:	881b      	ldrh	r3, [r3, #0]
 8004dcc:	b29b      	uxth	r3, r3
 8004dce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004dd2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004dd6:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8004dd8:	687a      	ldr	r2, [r7, #4]
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	781b      	ldrb	r3, [r3, #0]
 8004dde:	009b      	lsls	r3, r3, #2
 8004de0:	441a      	add	r2, r3
 8004de2:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8004de4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004de8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004dec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004df0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004df4:	b29b      	uxth	r3, r3
 8004df6:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004df8:	687a      	ldr	r2, [r7, #4]
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	781b      	ldrb	r3, [r3, #0]
 8004dfe:	009b      	lsls	r3, r3, #2
 8004e00:	4413      	add	r3, r2
 8004e02:	881b      	ldrh	r3, [r3, #0]
 8004e04:	b29b      	uxth	r3, r3
 8004e06:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004e0a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e0e:	873b      	strh	r3, [r7, #56]	@ 0x38
 8004e10:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8004e12:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8004e16:	873b      	strh	r3, [r7, #56]	@ 0x38
 8004e18:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8004e1a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004e1e:	873b      	strh	r3, [r7, #56]	@ 0x38
 8004e20:	687a      	ldr	r2, [r7, #4]
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	781b      	ldrb	r3, [r3, #0]
 8004e26:	009b      	lsls	r3, r3, #2
 8004e28:	441a      	add	r2, r3
 8004e2a:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8004e2c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004e30:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004e34:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004e38:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e3c:	b29b      	uxth	r3, r3
 8004e3e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004e40:	687a      	ldr	r2, [r7, #4]
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	781b      	ldrb	r3, [r3, #0]
 8004e46:	009b      	lsls	r3, r3, #2
 8004e48:	4413      	add	r3, r2
 8004e4a:	881b      	ldrh	r3, [r3, #0]
 8004e4c:	b29b      	uxth	r3, r3
 8004e4e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004e52:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004e56:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8004e58:	687a      	ldr	r2, [r7, #4]
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	781b      	ldrb	r3, [r3, #0]
 8004e5e:	009b      	lsls	r3, r3, #2
 8004e60:	441a      	add	r2, r3
 8004e62:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8004e64:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004e68:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004e6c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004e70:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e74:	b29b      	uxth	r3, r3
 8004e76:	8013      	strh	r3, [r2, #0]
 8004e78:	e0bc      	b.n	8004ff4 <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004e7a:	687a      	ldr	r2, [r7, #4]
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	781b      	ldrb	r3, [r3, #0]
 8004e80:	009b      	lsls	r3, r3, #2
 8004e82:	4413      	add	r3, r2
 8004e84:	881b      	ldrh	r3, [r3, #0]
 8004e86:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8004e8a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8004e8e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d01d      	beq.n	8004ed2 <USB_ActivateEndpoint+0x64e>
 8004e96:	687a      	ldr	r2, [r7, #4]
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	781b      	ldrb	r3, [r3, #0]
 8004e9c:	009b      	lsls	r3, r3, #2
 8004e9e:	4413      	add	r3, r2
 8004ea0:	881b      	ldrh	r3, [r3, #0]
 8004ea2:	b29b      	uxth	r3, r3
 8004ea4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004ea8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004eac:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8004eb0:	687a      	ldr	r2, [r7, #4]
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	781b      	ldrb	r3, [r3, #0]
 8004eb6:	009b      	lsls	r3, r3, #2
 8004eb8:	441a      	add	r2, r3
 8004eba:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8004ebe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004ec2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004ec6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004eca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004ece:	b29b      	uxth	r3, r3
 8004ed0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004ed2:	687a      	ldr	r2, [r7, #4]
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	781b      	ldrb	r3, [r3, #0]
 8004ed8:	009b      	lsls	r3, r3, #2
 8004eda:	4413      	add	r3, r2
 8004edc:	881b      	ldrh	r3, [r3, #0]
 8004ede:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8004ee2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004ee6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d01d      	beq.n	8004f2a <USB_ActivateEndpoint+0x6a6>
 8004eee:	687a      	ldr	r2, [r7, #4]
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	781b      	ldrb	r3, [r3, #0]
 8004ef4:	009b      	lsls	r3, r3, #2
 8004ef6:	4413      	add	r3, r2
 8004ef8:	881b      	ldrh	r3, [r3, #0]
 8004efa:	b29b      	uxth	r3, r3
 8004efc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004f00:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f04:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8004f08:	687a      	ldr	r2, [r7, #4]
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	781b      	ldrb	r3, [r3, #0]
 8004f0e:	009b      	lsls	r3, r3, #2
 8004f10:	441a      	add	r2, r3
 8004f12:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8004f16:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004f1a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004f1e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004f22:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004f26:	b29b      	uxth	r3, r3
 8004f28:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	78db      	ldrb	r3, [r3, #3]
 8004f2e:	2b01      	cmp	r3, #1
 8004f30:	d024      	beq.n	8004f7c <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004f32:	687a      	ldr	r2, [r7, #4]
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	781b      	ldrb	r3, [r3, #0]
 8004f38:	009b      	lsls	r3, r3, #2
 8004f3a:	4413      	add	r3, r2
 8004f3c:	881b      	ldrh	r3, [r3, #0]
 8004f3e:	b29b      	uxth	r3, r3
 8004f40:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004f44:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004f48:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8004f4c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8004f50:	f083 0320 	eor.w	r3, r3, #32
 8004f54:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8004f58:	687a      	ldr	r2, [r7, #4]
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	781b      	ldrb	r3, [r3, #0]
 8004f5e:	009b      	lsls	r3, r3, #2
 8004f60:	441a      	add	r2, r3
 8004f62:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8004f66:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004f6a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004f6e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004f72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f76:	b29b      	uxth	r3, r3
 8004f78:	8013      	strh	r3, [r2, #0]
 8004f7a:	e01d      	b.n	8004fb8 <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004f7c:	687a      	ldr	r2, [r7, #4]
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	781b      	ldrb	r3, [r3, #0]
 8004f82:	009b      	lsls	r3, r3, #2
 8004f84:	4413      	add	r3, r2
 8004f86:	881b      	ldrh	r3, [r3, #0]
 8004f88:	b29b      	uxth	r3, r3
 8004f8a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004f8e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004f92:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8004f96:	687a      	ldr	r2, [r7, #4]
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	781b      	ldrb	r3, [r3, #0]
 8004f9c:	009b      	lsls	r3, r3, #2
 8004f9e:	441a      	add	r2, r3
 8004fa0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8004fa4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004fa8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004fac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004fb0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004fb4:	b29b      	uxth	r3, r3
 8004fb6:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004fb8:	687a      	ldr	r2, [r7, #4]
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	781b      	ldrb	r3, [r3, #0]
 8004fbe:	009b      	lsls	r3, r3, #2
 8004fc0:	4413      	add	r3, r2
 8004fc2:	881b      	ldrh	r3, [r3, #0]
 8004fc4:	b29b      	uxth	r3, r3
 8004fc6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004fca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004fce:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8004fd2:	687a      	ldr	r2, [r7, #4]
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	781b      	ldrb	r3, [r3, #0]
 8004fd8:	009b      	lsls	r3, r3, #2
 8004fda:	441a      	add	r2, r3
 8004fdc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8004fe0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004fe4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004fe8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004fec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004ff0:	b29b      	uxth	r3, r3
 8004ff2:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8004ff4:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	3774      	adds	r7, #116	@ 0x74
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	bc80      	pop	{r7}
 8005000:	4770      	bx	lr
 8005002:	bf00      	nop

08005004 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005004:	b480      	push	{r7}
 8005006:	b08d      	sub	sp, #52	@ 0x34
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
 800500c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	7b1b      	ldrb	r3, [r3, #12]
 8005012:	2b00      	cmp	r3, #0
 8005014:	f040 808e 	bne.w	8005134 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	785b      	ldrb	r3, [r3, #1]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d044      	beq.n	80050aa <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005020:	687a      	ldr	r2, [r7, #4]
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	781b      	ldrb	r3, [r3, #0]
 8005026:	009b      	lsls	r3, r3, #2
 8005028:	4413      	add	r3, r2
 800502a:	881b      	ldrh	r3, [r3, #0]
 800502c:	81bb      	strh	r3, [r7, #12]
 800502e:	89bb      	ldrh	r3, [r7, #12]
 8005030:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005034:	2b00      	cmp	r3, #0
 8005036:	d01b      	beq.n	8005070 <USB_DeactivateEndpoint+0x6c>
 8005038:	687a      	ldr	r2, [r7, #4]
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	781b      	ldrb	r3, [r3, #0]
 800503e:	009b      	lsls	r3, r3, #2
 8005040:	4413      	add	r3, r2
 8005042:	881b      	ldrh	r3, [r3, #0]
 8005044:	b29b      	uxth	r3, r3
 8005046:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800504a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800504e:	817b      	strh	r3, [r7, #10]
 8005050:	687a      	ldr	r2, [r7, #4]
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	781b      	ldrb	r3, [r3, #0]
 8005056:	009b      	lsls	r3, r3, #2
 8005058:	441a      	add	r2, r3
 800505a:	897b      	ldrh	r3, [r7, #10]
 800505c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005060:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005064:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005068:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800506c:	b29b      	uxth	r3, r3
 800506e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005070:	687a      	ldr	r2, [r7, #4]
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	781b      	ldrb	r3, [r3, #0]
 8005076:	009b      	lsls	r3, r3, #2
 8005078:	4413      	add	r3, r2
 800507a:	881b      	ldrh	r3, [r3, #0]
 800507c:	b29b      	uxth	r3, r3
 800507e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005082:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005086:	813b      	strh	r3, [r7, #8]
 8005088:	687a      	ldr	r2, [r7, #4]
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	781b      	ldrb	r3, [r3, #0]
 800508e:	009b      	lsls	r3, r3, #2
 8005090:	441a      	add	r2, r3
 8005092:	893b      	ldrh	r3, [r7, #8]
 8005094:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005098:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800509c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80050a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80050a4:	b29b      	uxth	r3, r3
 80050a6:	8013      	strh	r3, [r2, #0]
 80050a8:	e192      	b.n	80053d0 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80050aa:	687a      	ldr	r2, [r7, #4]
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	781b      	ldrb	r3, [r3, #0]
 80050b0:	009b      	lsls	r3, r3, #2
 80050b2:	4413      	add	r3, r2
 80050b4:	881b      	ldrh	r3, [r3, #0]
 80050b6:	827b      	strh	r3, [r7, #18]
 80050b8:	8a7b      	ldrh	r3, [r7, #18]
 80050ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d01b      	beq.n	80050fa <USB_DeactivateEndpoint+0xf6>
 80050c2:	687a      	ldr	r2, [r7, #4]
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	781b      	ldrb	r3, [r3, #0]
 80050c8:	009b      	lsls	r3, r3, #2
 80050ca:	4413      	add	r3, r2
 80050cc:	881b      	ldrh	r3, [r3, #0]
 80050ce:	b29b      	uxth	r3, r3
 80050d0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80050d4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050d8:	823b      	strh	r3, [r7, #16]
 80050da:	687a      	ldr	r2, [r7, #4]
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	781b      	ldrb	r3, [r3, #0]
 80050e0:	009b      	lsls	r3, r3, #2
 80050e2:	441a      	add	r2, r3
 80050e4:	8a3b      	ldrh	r3, [r7, #16]
 80050e6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80050ea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80050ee:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80050f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80050f6:	b29b      	uxth	r3, r3
 80050f8:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80050fa:	687a      	ldr	r2, [r7, #4]
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	781b      	ldrb	r3, [r3, #0]
 8005100:	009b      	lsls	r3, r3, #2
 8005102:	4413      	add	r3, r2
 8005104:	881b      	ldrh	r3, [r3, #0]
 8005106:	b29b      	uxth	r3, r3
 8005108:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800510c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005110:	81fb      	strh	r3, [r7, #14]
 8005112:	687a      	ldr	r2, [r7, #4]
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	781b      	ldrb	r3, [r3, #0]
 8005118:	009b      	lsls	r3, r3, #2
 800511a:	441a      	add	r2, r3
 800511c:	89fb      	ldrh	r3, [r7, #14]
 800511e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005122:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005126:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800512a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800512e:	b29b      	uxth	r3, r3
 8005130:	8013      	strh	r3, [r2, #0]
 8005132:	e14d      	b.n	80053d0 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	785b      	ldrb	r3, [r3, #1]
 8005138:	2b00      	cmp	r3, #0
 800513a:	f040 80a5 	bne.w	8005288 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800513e:	687a      	ldr	r2, [r7, #4]
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	781b      	ldrb	r3, [r3, #0]
 8005144:	009b      	lsls	r3, r3, #2
 8005146:	4413      	add	r3, r2
 8005148:	881b      	ldrh	r3, [r3, #0]
 800514a:	843b      	strh	r3, [r7, #32]
 800514c:	8c3b      	ldrh	r3, [r7, #32]
 800514e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005152:	2b00      	cmp	r3, #0
 8005154:	d01b      	beq.n	800518e <USB_DeactivateEndpoint+0x18a>
 8005156:	687a      	ldr	r2, [r7, #4]
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	781b      	ldrb	r3, [r3, #0]
 800515c:	009b      	lsls	r3, r3, #2
 800515e:	4413      	add	r3, r2
 8005160:	881b      	ldrh	r3, [r3, #0]
 8005162:	b29b      	uxth	r3, r3
 8005164:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005168:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800516c:	83fb      	strh	r3, [r7, #30]
 800516e:	687a      	ldr	r2, [r7, #4]
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	781b      	ldrb	r3, [r3, #0]
 8005174:	009b      	lsls	r3, r3, #2
 8005176:	441a      	add	r2, r3
 8005178:	8bfb      	ldrh	r3, [r7, #30]
 800517a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800517e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005182:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005186:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800518a:	b29b      	uxth	r3, r3
 800518c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800518e:	687a      	ldr	r2, [r7, #4]
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	781b      	ldrb	r3, [r3, #0]
 8005194:	009b      	lsls	r3, r3, #2
 8005196:	4413      	add	r3, r2
 8005198:	881b      	ldrh	r3, [r3, #0]
 800519a:	83bb      	strh	r3, [r7, #28]
 800519c:	8bbb      	ldrh	r3, [r7, #28]
 800519e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d01b      	beq.n	80051de <USB_DeactivateEndpoint+0x1da>
 80051a6:	687a      	ldr	r2, [r7, #4]
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	781b      	ldrb	r3, [r3, #0]
 80051ac:	009b      	lsls	r3, r3, #2
 80051ae:	4413      	add	r3, r2
 80051b0:	881b      	ldrh	r3, [r3, #0]
 80051b2:	b29b      	uxth	r3, r3
 80051b4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80051b8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80051bc:	837b      	strh	r3, [r7, #26]
 80051be:	687a      	ldr	r2, [r7, #4]
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	781b      	ldrb	r3, [r3, #0]
 80051c4:	009b      	lsls	r3, r3, #2
 80051c6:	441a      	add	r2, r3
 80051c8:	8b7b      	ldrh	r3, [r7, #26]
 80051ca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80051ce:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80051d2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80051d6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80051da:	b29b      	uxth	r3, r3
 80051dc:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80051de:	687a      	ldr	r2, [r7, #4]
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	781b      	ldrb	r3, [r3, #0]
 80051e4:	009b      	lsls	r3, r3, #2
 80051e6:	4413      	add	r3, r2
 80051e8:	881b      	ldrh	r3, [r3, #0]
 80051ea:	b29b      	uxth	r3, r3
 80051ec:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80051f0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80051f4:	833b      	strh	r3, [r7, #24]
 80051f6:	687a      	ldr	r2, [r7, #4]
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	781b      	ldrb	r3, [r3, #0]
 80051fc:	009b      	lsls	r3, r3, #2
 80051fe:	441a      	add	r2, r3
 8005200:	8b3b      	ldrh	r3, [r7, #24]
 8005202:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005206:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800520a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800520e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005212:	b29b      	uxth	r3, r3
 8005214:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005216:	687a      	ldr	r2, [r7, #4]
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	781b      	ldrb	r3, [r3, #0]
 800521c:	009b      	lsls	r3, r3, #2
 800521e:	4413      	add	r3, r2
 8005220:	881b      	ldrh	r3, [r3, #0]
 8005222:	b29b      	uxth	r3, r3
 8005224:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005228:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800522c:	82fb      	strh	r3, [r7, #22]
 800522e:	687a      	ldr	r2, [r7, #4]
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	781b      	ldrb	r3, [r3, #0]
 8005234:	009b      	lsls	r3, r3, #2
 8005236:	441a      	add	r2, r3
 8005238:	8afb      	ldrh	r3, [r7, #22]
 800523a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800523e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005242:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005246:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800524a:	b29b      	uxth	r3, r3
 800524c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800524e:	687a      	ldr	r2, [r7, #4]
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	781b      	ldrb	r3, [r3, #0]
 8005254:	009b      	lsls	r3, r3, #2
 8005256:	4413      	add	r3, r2
 8005258:	881b      	ldrh	r3, [r3, #0]
 800525a:	b29b      	uxth	r3, r3
 800525c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005260:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005264:	82bb      	strh	r3, [r7, #20]
 8005266:	687a      	ldr	r2, [r7, #4]
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	781b      	ldrb	r3, [r3, #0]
 800526c:	009b      	lsls	r3, r3, #2
 800526e:	441a      	add	r2, r3
 8005270:	8abb      	ldrh	r3, [r7, #20]
 8005272:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005276:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800527a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800527e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005282:	b29b      	uxth	r3, r3
 8005284:	8013      	strh	r3, [r2, #0]
 8005286:	e0a3      	b.n	80053d0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005288:	687a      	ldr	r2, [r7, #4]
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	781b      	ldrb	r3, [r3, #0]
 800528e:	009b      	lsls	r3, r3, #2
 8005290:	4413      	add	r3, r2
 8005292:	881b      	ldrh	r3, [r3, #0]
 8005294:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8005296:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8005298:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800529c:	2b00      	cmp	r3, #0
 800529e:	d01b      	beq.n	80052d8 <USB_DeactivateEndpoint+0x2d4>
 80052a0:	687a      	ldr	r2, [r7, #4]
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	781b      	ldrb	r3, [r3, #0]
 80052a6:	009b      	lsls	r3, r3, #2
 80052a8:	4413      	add	r3, r2
 80052aa:	881b      	ldrh	r3, [r3, #0]
 80052ac:	b29b      	uxth	r3, r3
 80052ae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80052b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80052b6:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 80052b8:	687a      	ldr	r2, [r7, #4]
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	781b      	ldrb	r3, [r3, #0]
 80052be:	009b      	lsls	r3, r3, #2
 80052c0:	441a      	add	r2, r3
 80052c2:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80052c4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80052c8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80052cc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80052d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80052d4:	b29b      	uxth	r3, r3
 80052d6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80052d8:	687a      	ldr	r2, [r7, #4]
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	781b      	ldrb	r3, [r3, #0]
 80052de:	009b      	lsls	r3, r3, #2
 80052e0:	4413      	add	r3, r2
 80052e2:	881b      	ldrh	r3, [r3, #0]
 80052e4:	857b      	strh	r3, [r7, #42]	@ 0x2a
 80052e6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80052e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d01b      	beq.n	8005328 <USB_DeactivateEndpoint+0x324>
 80052f0:	687a      	ldr	r2, [r7, #4]
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	781b      	ldrb	r3, [r3, #0]
 80052f6:	009b      	lsls	r3, r3, #2
 80052f8:	4413      	add	r3, r2
 80052fa:	881b      	ldrh	r3, [r3, #0]
 80052fc:	b29b      	uxth	r3, r3
 80052fe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005302:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005306:	853b      	strh	r3, [r7, #40]	@ 0x28
 8005308:	687a      	ldr	r2, [r7, #4]
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	781b      	ldrb	r3, [r3, #0]
 800530e:	009b      	lsls	r3, r3, #2
 8005310:	441a      	add	r2, r3
 8005312:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005314:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005318:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800531c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005320:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005324:	b29b      	uxth	r3, r3
 8005326:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005328:	687a      	ldr	r2, [r7, #4]
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	781b      	ldrb	r3, [r3, #0]
 800532e:	009b      	lsls	r3, r3, #2
 8005330:	4413      	add	r3, r2
 8005332:	881b      	ldrh	r3, [r3, #0]
 8005334:	b29b      	uxth	r3, r3
 8005336:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800533a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800533e:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8005340:	687a      	ldr	r2, [r7, #4]
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	781b      	ldrb	r3, [r3, #0]
 8005346:	009b      	lsls	r3, r3, #2
 8005348:	441a      	add	r2, r3
 800534a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800534c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005350:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005354:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005358:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800535c:	b29b      	uxth	r3, r3
 800535e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005360:	687a      	ldr	r2, [r7, #4]
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	781b      	ldrb	r3, [r3, #0]
 8005366:	009b      	lsls	r3, r3, #2
 8005368:	4413      	add	r3, r2
 800536a:	881b      	ldrh	r3, [r3, #0]
 800536c:	b29b      	uxth	r3, r3
 800536e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005372:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005376:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8005378:	687a      	ldr	r2, [r7, #4]
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	781b      	ldrb	r3, [r3, #0]
 800537e:	009b      	lsls	r3, r3, #2
 8005380:	441a      	add	r2, r3
 8005382:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005384:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005388:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800538c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005390:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005394:	b29b      	uxth	r3, r3
 8005396:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005398:	687a      	ldr	r2, [r7, #4]
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	781b      	ldrb	r3, [r3, #0]
 800539e:	009b      	lsls	r3, r3, #2
 80053a0:	4413      	add	r3, r2
 80053a2:	881b      	ldrh	r3, [r3, #0]
 80053a4:	b29b      	uxth	r3, r3
 80053a6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80053aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80053ae:	847b      	strh	r3, [r7, #34]	@ 0x22
 80053b0:	687a      	ldr	r2, [r7, #4]
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	781b      	ldrb	r3, [r3, #0]
 80053b6:	009b      	lsls	r3, r3, #2
 80053b8:	441a      	add	r2, r3
 80053ba:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80053bc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80053c0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80053c4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80053c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80053cc:	b29b      	uxth	r3, r3
 80053ce:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80053d0:	2300      	movs	r3, #0
}
 80053d2:	4618      	mov	r0, r3
 80053d4:	3734      	adds	r7, #52	@ 0x34
 80053d6:	46bd      	mov	sp, r7
 80053d8:	bc80      	pop	{r7}
 80053da:	4770      	bx	lr

080053dc <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b0c2      	sub	sp, #264	@ 0x108
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053e6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80053ea:	6018      	str	r0, [r3, #0]
 80053ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80053f4:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80053f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	785b      	ldrb	r3, [r3, #1]
 8005402:	2b01      	cmp	r3, #1
 8005404:	f040 86b7 	bne.w	8006176 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005408:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800540c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	699a      	ldr	r2, [r3, #24]
 8005414:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005418:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	691b      	ldr	r3, [r3, #16]
 8005420:	429a      	cmp	r2, r3
 8005422:	d908      	bls.n	8005436 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8005424:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005428:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	691b      	ldr	r3, [r3, #16]
 8005430:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8005434:	e007      	b.n	8005446 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8005436:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800543a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	699b      	ldr	r3, [r3, #24]
 8005442:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005446:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800544a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	7b1b      	ldrb	r3, [r3, #12]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d13a      	bne.n	80054cc <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005456:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800545a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	6959      	ldr	r1, [r3, #20]
 8005462:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005466:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	88da      	ldrh	r2, [r3, #6]
 800546e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005472:	b29b      	uxth	r3, r3
 8005474:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005478:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800547c:	6800      	ldr	r0, [r0, #0]
 800547e:	f001 fc9c 	bl	8006dba <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005482:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005486:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	613b      	str	r3, [r7, #16]
 800548e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005492:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800549c:	b29b      	uxth	r3, r3
 800549e:	461a      	mov	r2, r3
 80054a0:	693b      	ldr	r3, [r7, #16]
 80054a2:	4413      	add	r3, r2
 80054a4:	613b      	str	r3, [r7, #16]
 80054a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80054aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	781b      	ldrb	r3, [r3, #0]
 80054b2:	011a      	lsls	r2, r3, #4
 80054b4:	693b      	ldr	r3, [r7, #16]
 80054b6:	4413      	add	r3, r2
 80054b8:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80054bc:	60fb      	str	r3, [r7, #12]
 80054be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054c2:	b29a      	uxth	r2, r3
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	801a      	strh	r2, [r3, #0]
 80054c8:	f000 be1f 	b.w	800610a <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80054cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80054d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	78db      	ldrb	r3, [r3, #3]
 80054d8:	2b02      	cmp	r3, #2
 80054da:	f040 8462 	bne.w	8005da2 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80054de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80054e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	6a1a      	ldr	r2, [r3, #32]
 80054ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80054ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	691b      	ldr	r3, [r3, #16]
 80054f6:	429a      	cmp	r2, r3
 80054f8:	f240 83df 	bls.w	8005cba <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80054fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005500:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005504:	681a      	ldr	r2, [r3, #0]
 8005506:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800550a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	781b      	ldrb	r3, [r3, #0]
 8005512:	009b      	lsls	r3, r3, #2
 8005514:	4413      	add	r3, r2
 8005516:	881b      	ldrh	r3, [r3, #0]
 8005518:	b29b      	uxth	r3, r3
 800551a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800551e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005522:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8005526:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800552a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800552e:	681a      	ldr	r2, [r3, #0]
 8005530:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005534:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	781b      	ldrb	r3, [r3, #0]
 800553c:	009b      	lsls	r3, r3, #2
 800553e:	441a      	add	r2, r3
 8005540:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8005544:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005548:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800554c:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8005550:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005554:	b29b      	uxth	r3, r3
 8005556:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8005558:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800555c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	6a1a      	ldr	r2, [r3, #32]
 8005564:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005568:	1ad2      	subs	r2, r2, r3
 800556a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800556e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005576:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800557a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800557e:	681a      	ldr	r2, [r3, #0]
 8005580:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005584:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	781b      	ldrb	r3, [r3, #0]
 800558c:	009b      	lsls	r3, r3, #2
 800558e:	4413      	add	r3, r2
 8005590:	881b      	ldrh	r3, [r3, #0]
 8005592:	b29b      	uxth	r3, r3
 8005594:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005598:	2b00      	cmp	r3, #0
 800559a:	f000 81c7 	beq.w	800592c <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800559e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055a2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	633b      	str	r3, [r7, #48]	@ 0x30
 80055aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	785b      	ldrb	r3, [r3, #1]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d177      	bne.n	80056aa <USB_EPStartXfer+0x2ce>
 80055ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055be:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80055c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055ca:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80055d4:	b29b      	uxth	r3, r3
 80055d6:	461a      	mov	r2, r3
 80055d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055da:	4413      	add	r3, r2
 80055dc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80055de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	781b      	ldrb	r3, [r3, #0]
 80055ea:	011a      	lsls	r2, r3, #4
 80055ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055ee:	4413      	add	r3, r2
 80055f0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80055f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80055f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055f8:	881b      	ldrh	r3, [r3, #0]
 80055fa:	b29b      	uxth	r3, r3
 80055fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005600:	b29a      	uxth	r2, r3
 8005602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005604:	801a      	strh	r2, [r3, #0]
 8005606:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800560a:	2b3e      	cmp	r3, #62	@ 0x3e
 800560c:	d921      	bls.n	8005652 <USB_EPStartXfer+0x276>
 800560e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005612:	095b      	lsrs	r3, r3, #5
 8005614:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005618:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800561c:	f003 031f 	and.w	r3, r3, #31
 8005620:	2b00      	cmp	r3, #0
 8005622:	d104      	bne.n	800562e <USB_EPStartXfer+0x252>
 8005624:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8005628:	3b01      	subs	r3, #1
 800562a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800562e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005630:	881b      	ldrh	r3, [r3, #0]
 8005632:	b29a      	uxth	r2, r3
 8005634:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8005638:	b29b      	uxth	r3, r3
 800563a:	029b      	lsls	r3, r3, #10
 800563c:	b29b      	uxth	r3, r3
 800563e:	4313      	orrs	r3, r2
 8005640:	b29b      	uxth	r3, r3
 8005642:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005646:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800564a:	b29a      	uxth	r2, r3
 800564c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800564e:	801a      	strh	r2, [r3, #0]
 8005650:	e050      	b.n	80056f4 <USB_EPStartXfer+0x318>
 8005652:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005656:	2b00      	cmp	r3, #0
 8005658:	d10a      	bne.n	8005670 <USB_EPStartXfer+0x294>
 800565a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800565c:	881b      	ldrh	r3, [r3, #0]
 800565e:	b29b      	uxth	r3, r3
 8005660:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005664:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005668:	b29a      	uxth	r2, r3
 800566a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800566c:	801a      	strh	r2, [r3, #0]
 800566e:	e041      	b.n	80056f4 <USB_EPStartXfer+0x318>
 8005670:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005674:	085b      	lsrs	r3, r3, #1
 8005676:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800567a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800567e:	f003 0301 	and.w	r3, r3, #1
 8005682:	2b00      	cmp	r3, #0
 8005684:	d004      	beq.n	8005690 <USB_EPStartXfer+0x2b4>
 8005686:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800568a:	3301      	adds	r3, #1
 800568c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005690:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005692:	881b      	ldrh	r3, [r3, #0]
 8005694:	b29a      	uxth	r2, r3
 8005696:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800569a:	b29b      	uxth	r3, r3
 800569c:	029b      	lsls	r3, r3, #10
 800569e:	b29b      	uxth	r3, r3
 80056a0:	4313      	orrs	r3, r2
 80056a2:	b29a      	uxth	r2, r3
 80056a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056a6:	801a      	strh	r2, [r3, #0]
 80056a8:	e024      	b.n	80056f4 <USB_EPStartXfer+0x318>
 80056aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	785b      	ldrb	r3, [r3, #1]
 80056b6:	2b01      	cmp	r3, #1
 80056b8:	d11c      	bne.n	80056f4 <USB_EPStartXfer+0x318>
 80056ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056be:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80056c8:	b29b      	uxth	r3, r3
 80056ca:	461a      	mov	r2, r3
 80056cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056ce:	4413      	add	r3, r2
 80056d0:	633b      	str	r3, [r7, #48]	@ 0x30
 80056d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	781b      	ldrb	r3, [r3, #0]
 80056de:	011a      	lsls	r2, r3, #4
 80056e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056e2:	4413      	add	r3, r2
 80056e4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80056e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80056ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056ee:	b29a      	uxth	r2, r3
 80056f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056f2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80056f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	895b      	ldrh	r3, [r3, #10]
 8005700:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005704:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005708:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	6959      	ldr	r1, [r3, #20]
 8005710:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005714:	b29b      	uxth	r3, r3
 8005716:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800571a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800571e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005722:	6800      	ldr	r0, [r0, #0]
 8005724:	f001 fb49 	bl	8006dba <USB_WritePMA>
            ep->xfer_buff += len;
 8005728:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800572c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	695a      	ldr	r2, [r3, #20]
 8005734:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005738:	441a      	add	r2, r3
 800573a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800573e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005746:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800574a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	6a1a      	ldr	r2, [r3, #32]
 8005752:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005756:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	691b      	ldr	r3, [r3, #16]
 800575e:	429a      	cmp	r2, r3
 8005760:	d90f      	bls.n	8005782 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8005762:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005766:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	6a1a      	ldr	r2, [r3, #32]
 800576e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005772:	1ad2      	subs	r2, r2, r3
 8005774:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005778:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	621a      	str	r2, [r3, #32]
 8005780:	e00e      	b.n	80057a0 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8005782:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005786:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	6a1b      	ldr	r3, [r3, #32]
 800578e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8005792:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005796:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	2200      	movs	r2, #0
 800579e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80057a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	785b      	ldrb	r3, [r3, #1]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d177      	bne.n	80058a0 <USB_EPStartXfer+0x4c4>
 80057b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057b4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	61bb      	str	r3, [r7, #24]
 80057bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057c0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80057ca:	b29b      	uxth	r3, r3
 80057cc:	461a      	mov	r2, r3
 80057ce:	69bb      	ldr	r3, [r7, #24]
 80057d0:	4413      	add	r3, r2
 80057d2:	61bb      	str	r3, [r7, #24]
 80057d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	781b      	ldrb	r3, [r3, #0]
 80057e0:	011a      	lsls	r2, r3, #4
 80057e2:	69bb      	ldr	r3, [r7, #24]
 80057e4:	4413      	add	r3, r2
 80057e6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80057ea:	617b      	str	r3, [r7, #20]
 80057ec:	697b      	ldr	r3, [r7, #20]
 80057ee:	881b      	ldrh	r3, [r3, #0]
 80057f0:	b29b      	uxth	r3, r3
 80057f2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80057f6:	b29a      	uxth	r2, r3
 80057f8:	697b      	ldr	r3, [r7, #20]
 80057fa:	801a      	strh	r2, [r3, #0]
 80057fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005800:	2b3e      	cmp	r3, #62	@ 0x3e
 8005802:	d921      	bls.n	8005848 <USB_EPStartXfer+0x46c>
 8005804:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005808:	095b      	lsrs	r3, r3, #5
 800580a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800580e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005812:	f003 031f 	and.w	r3, r3, #31
 8005816:	2b00      	cmp	r3, #0
 8005818:	d104      	bne.n	8005824 <USB_EPStartXfer+0x448>
 800581a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800581e:	3b01      	subs	r3, #1
 8005820:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005824:	697b      	ldr	r3, [r7, #20]
 8005826:	881b      	ldrh	r3, [r3, #0]
 8005828:	b29a      	uxth	r2, r3
 800582a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800582e:	b29b      	uxth	r3, r3
 8005830:	029b      	lsls	r3, r3, #10
 8005832:	b29b      	uxth	r3, r3
 8005834:	4313      	orrs	r3, r2
 8005836:	b29b      	uxth	r3, r3
 8005838:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800583c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005840:	b29a      	uxth	r2, r3
 8005842:	697b      	ldr	r3, [r7, #20]
 8005844:	801a      	strh	r2, [r3, #0]
 8005846:	e056      	b.n	80058f6 <USB_EPStartXfer+0x51a>
 8005848:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800584c:	2b00      	cmp	r3, #0
 800584e:	d10a      	bne.n	8005866 <USB_EPStartXfer+0x48a>
 8005850:	697b      	ldr	r3, [r7, #20]
 8005852:	881b      	ldrh	r3, [r3, #0]
 8005854:	b29b      	uxth	r3, r3
 8005856:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800585a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800585e:	b29a      	uxth	r2, r3
 8005860:	697b      	ldr	r3, [r7, #20]
 8005862:	801a      	strh	r2, [r3, #0]
 8005864:	e047      	b.n	80058f6 <USB_EPStartXfer+0x51a>
 8005866:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800586a:	085b      	lsrs	r3, r3, #1
 800586c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005870:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005874:	f003 0301 	and.w	r3, r3, #1
 8005878:	2b00      	cmp	r3, #0
 800587a:	d004      	beq.n	8005886 <USB_EPStartXfer+0x4aa>
 800587c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005880:	3301      	adds	r3, #1
 8005882:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005886:	697b      	ldr	r3, [r7, #20]
 8005888:	881b      	ldrh	r3, [r3, #0]
 800588a:	b29a      	uxth	r2, r3
 800588c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005890:	b29b      	uxth	r3, r3
 8005892:	029b      	lsls	r3, r3, #10
 8005894:	b29b      	uxth	r3, r3
 8005896:	4313      	orrs	r3, r2
 8005898:	b29a      	uxth	r2, r3
 800589a:	697b      	ldr	r3, [r7, #20]
 800589c:	801a      	strh	r2, [r3, #0]
 800589e:	e02a      	b.n	80058f6 <USB_EPStartXfer+0x51a>
 80058a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	785b      	ldrb	r3, [r3, #1]
 80058ac:	2b01      	cmp	r3, #1
 80058ae:	d122      	bne.n	80058f6 <USB_EPStartXfer+0x51a>
 80058b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058b4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	623b      	str	r3, [r7, #32]
 80058bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058c0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80058ca:	b29b      	uxth	r3, r3
 80058cc:	461a      	mov	r2, r3
 80058ce:	6a3b      	ldr	r3, [r7, #32]
 80058d0:	4413      	add	r3, r2
 80058d2:	623b      	str	r3, [r7, #32]
 80058d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	781b      	ldrb	r3, [r3, #0]
 80058e0:	011a      	lsls	r2, r3, #4
 80058e2:	6a3b      	ldr	r3, [r7, #32]
 80058e4:	4413      	add	r3, r2
 80058e6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80058ea:	61fb      	str	r3, [r7, #28]
 80058ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058f0:	b29a      	uxth	r2, r3
 80058f2:	69fb      	ldr	r3, [r7, #28]
 80058f4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80058f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	891b      	ldrh	r3, [r3, #8]
 8005902:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005906:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800590a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	6959      	ldr	r1, [r3, #20]
 8005912:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005916:	b29b      	uxth	r3, r3
 8005918:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800591c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005920:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005924:	6800      	ldr	r0, [r0, #0]
 8005926:	f001 fa48 	bl	8006dba <USB_WritePMA>
 800592a:	e3ee      	b.n	800610a <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800592c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005930:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	785b      	ldrb	r3, [r3, #1]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d177      	bne.n	8005a2c <USB_EPStartXfer+0x650>
 800593c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005940:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005948:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800594c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005956:	b29b      	uxth	r3, r3
 8005958:	461a      	mov	r2, r3
 800595a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800595c:	4413      	add	r3, r2
 800595e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005960:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005964:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	781b      	ldrb	r3, [r3, #0]
 800596c:	011a      	lsls	r2, r3, #4
 800596e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005970:	4413      	add	r3, r2
 8005972:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005976:	647b      	str	r3, [r7, #68]	@ 0x44
 8005978:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800597a:	881b      	ldrh	r3, [r3, #0]
 800597c:	b29b      	uxth	r3, r3
 800597e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005982:	b29a      	uxth	r2, r3
 8005984:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005986:	801a      	strh	r2, [r3, #0]
 8005988:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800598c:	2b3e      	cmp	r3, #62	@ 0x3e
 800598e:	d921      	bls.n	80059d4 <USB_EPStartXfer+0x5f8>
 8005990:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005994:	095b      	lsrs	r3, r3, #5
 8005996:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800599a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800599e:	f003 031f 	and.w	r3, r3, #31
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d104      	bne.n	80059b0 <USB_EPStartXfer+0x5d4>
 80059a6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80059aa:	3b01      	subs	r3, #1
 80059ac:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80059b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80059b2:	881b      	ldrh	r3, [r3, #0]
 80059b4:	b29a      	uxth	r2, r3
 80059b6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80059ba:	b29b      	uxth	r3, r3
 80059bc:	029b      	lsls	r3, r3, #10
 80059be:	b29b      	uxth	r3, r3
 80059c0:	4313      	orrs	r3, r2
 80059c2:	b29b      	uxth	r3, r3
 80059c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059cc:	b29a      	uxth	r2, r3
 80059ce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80059d0:	801a      	strh	r2, [r3, #0]
 80059d2:	e056      	b.n	8005a82 <USB_EPStartXfer+0x6a6>
 80059d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d10a      	bne.n	80059f2 <USB_EPStartXfer+0x616>
 80059dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80059de:	881b      	ldrh	r3, [r3, #0]
 80059e0:	b29b      	uxth	r3, r3
 80059e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059ea:	b29a      	uxth	r2, r3
 80059ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80059ee:	801a      	strh	r2, [r3, #0]
 80059f0:	e047      	b.n	8005a82 <USB_EPStartXfer+0x6a6>
 80059f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059f6:	085b      	lsrs	r3, r3, #1
 80059f8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80059fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a00:	f003 0301 	and.w	r3, r3, #1
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d004      	beq.n	8005a12 <USB_EPStartXfer+0x636>
 8005a08:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005a0c:	3301      	adds	r3, #1
 8005a0e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005a12:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005a14:	881b      	ldrh	r3, [r3, #0]
 8005a16:	b29a      	uxth	r2, r3
 8005a18:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005a1c:	b29b      	uxth	r3, r3
 8005a1e:	029b      	lsls	r3, r3, #10
 8005a20:	b29b      	uxth	r3, r3
 8005a22:	4313      	orrs	r3, r2
 8005a24:	b29a      	uxth	r2, r3
 8005a26:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005a28:	801a      	strh	r2, [r3, #0]
 8005a2a:	e02a      	b.n	8005a82 <USB_EPStartXfer+0x6a6>
 8005a2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a30:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	785b      	ldrb	r3, [r3, #1]
 8005a38:	2b01      	cmp	r3, #1
 8005a3a:	d122      	bne.n	8005a82 <USB_EPStartXfer+0x6a6>
 8005a3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a40:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	653b      	str	r3, [r7, #80]	@ 0x50
 8005a48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a4c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005a56:	b29b      	uxth	r3, r3
 8005a58:	461a      	mov	r2, r3
 8005a5a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005a5c:	4413      	add	r3, r2
 8005a5e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005a60:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a64:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	781b      	ldrb	r3, [r3, #0]
 8005a6c:	011a      	lsls	r2, r3, #4
 8005a6e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005a70:	4413      	add	r3, r2
 8005a72:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005a76:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005a78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a7c:	b29a      	uxth	r2, r3
 8005a7e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005a80:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005a82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a86:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	891b      	ldrh	r3, [r3, #8]
 8005a8e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005a92:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a96:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	6959      	ldr	r1, [r3, #20]
 8005a9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005aa2:	b29b      	uxth	r3, r3
 8005aa4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005aa8:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005aac:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005ab0:	6800      	ldr	r0, [r0, #0]
 8005ab2:	f001 f982 	bl	8006dba <USB_WritePMA>
            ep->xfer_buff += len;
 8005ab6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005aba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	695a      	ldr	r2, [r3, #20]
 8005ac2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ac6:	441a      	add	r2, r3
 8005ac8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005acc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005ad4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ad8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	6a1a      	ldr	r2, [r3, #32]
 8005ae0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ae4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	691b      	ldr	r3, [r3, #16]
 8005aec:	429a      	cmp	r2, r3
 8005aee:	d90f      	bls.n	8005b10 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8005af0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005af4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	6a1a      	ldr	r2, [r3, #32]
 8005afc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b00:	1ad2      	subs	r2, r2, r3
 8005b02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b06:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	621a      	str	r2, [r3, #32]
 8005b0e:	e00e      	b.n	8005b2e <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8005b10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b14:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	6a1b      	ldr	r3, [r3, #32]
 8005b1c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8005b20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b24:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005b2e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b32:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	643b      	str	r3, [r7, #64]	@ 0x40
 8005b3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b3e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	785b      	ldrb	r3, [r3, #1]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d177      	bne.n	8005c3a <USB_EPStartXfer+0x85e>
 8005b4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b4e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005b56:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b5a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005b64:	b29b      	uxth	r3, r3
 8005b66:	461a      	mov	r2, r3
 8005b68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b6a:	4413      	add	r3, r2
 8005b6c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005b6e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b72:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	781b      	ldrb	r3, [r3, #0]
 8005b7a:	011a      	lsls	r2, r3, #4
 8005b7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b7e:	4413      	add	r3, r2
 8005b80:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005b84:	637b      	str	r3, [r7, #52]	@ 0x34
 8005b86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b88:	881b      	ldrh	r3, [r3, #0]
 8005b8a:	b29b      	uxth	r3, r3
 8005b8c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005b90:	b29a      	uxth	r2, r3
 8005b92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b94:	801a      	strh	r2, [r3, #0]
 8005b96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b9a:	2b3e      	cmp	r3, #62	@ 0x3e
 8005b9c:	d921      	bls.n	8005be2 <USB_EPStartXfer+0x806>
 8005b9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ba2:	095b      	lsrs	r3, r3, #5
 8005ba4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005ba8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005bac:	f003 031f 	and.w	r3, r3, #31
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d104      	bne.n	8005bbe <USB_EPStartXfer+0x7e2>
 8005bb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bb8:	3b01      	subs	r3, #1
 8005bba:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005bbe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005bc0:	881b      	ldrh	r3, [r3, #0]
 8005bc2:	b29a      	uxth	r2, r3
 8005bc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bc8:	b29b      	uxth	r3, r3
 8005bca:	029b      	lsls	r3, r3, #10
 8005bcc:	b29b      	uxth	r3, r3
 8005bce:	4313      	orrs	r3, r2
 8005bd0:	b29b      	uxth	r3, r3
 8005bd2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005bd6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005bda:	b29a      	uxth	r2, r3
 8005bdc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005bde:	801a      	strh	r2, [r3, #0]
 8005be0:	e050      	b.n	8005c84 <USB_EPStartXfer+0x8a8>
 8005be2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d10a      	bne.n	8005c00 <USB_EPStartXfer+0x824>
 8005bea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005bec:	881b      	ldrh	r3, [r3, #0]
 8005bee:	b29b      	uxth	r3, r3
 8005bf0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005bf4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005bf8:	b29a      	uxth	r2, r3
 8005bfa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005bfc:	801a      	strh	r2, [r3, #0]
 8005bfe:	e041      	b.n	8005c84 <USB_EPStartXfer+0x8a8>
 8005c00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c04:	085b      	lsrs	r3, r3, #1
 8005c06:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005c0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c0e:	f003 0301 	and.w	r3, r3, #1
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d004      	beq.n	8005c20 <USB_EPStartXfer+0x844>
 8005c16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c1a:	3301      	adds	r3, #1
 8005c1c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005c20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c22:	881b      	ldrh	r3, [r3, #0]
 8005c24:	b29a      	uxth	r2, r3
 8005c26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c2a:	b29b      	uxth	r3, r3
 8005c2c:	029b      	lsls	r3, r3, #10
 8005c2e:	b29b      	uxth	r3, r3
 8005c30:	4313      	orrs	r3, r2
 8005c32:	b29a      	uxth	r2, r3
 8005c34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c36:	801a      	strh	r2, [r3, #0]
 8005c38:	e024      	b.n	8005c84 <USB_EPStartXfer+0x8a8>
 8005c3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c3e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	785b      	ldrb	r3, [r3, #1]
 8005c46:	2b01      	cmp	r3, #1
 8005c48:	d11c      	bne.n	8005c84 <USB_EPStartXfer+0x8a8>
 8005c4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c4e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005c58:	b29b      	uxth	r3, r3
 8005c5a:	461a      	mov	r2, r3
 8005c5c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005c5e:	4413      	add	r3, r2
 8005c60:	643b      	str	r3, [r7, #64]	@ 0x40
 8005c62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c66:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	781b      	ldrb	r3, [r3, #0]
 8005c6e:	011a      	lsls	r2, r3, #4
 8005c70:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005c72:	4413      	add	r3, r2
 8005c74:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005c78:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005c7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c7e:	b29a      	uxth	r2, r3
 8005c80:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c82:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005c84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c88:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	895b      	ldrh	r3, [r3, #10]
 8005c90:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005c94:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c98:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	6959      	ldr	r1, [r3, #20]
 8005ca0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ca4:	b29b      	uxth	r3, r3
 8005ca6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005caa:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005cae:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005cb2:	6800      	ldr	r0, [r0, #0]
 8005cb4:	f001 f881 	bl	8006dba <USB_WritePMA>
 8005cb8:	e227      	b.n	800610a <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8005cba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cbe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	6a1b      	ldr	r3, [r3, #32]
 8005cc6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8005cca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cce:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005cd2:	681a      	ldr	r2, [r3, #0]
 8005cd4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cd8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	781b      	ldrb	r3, [r3, #0]
 8005ce0:	009b      	lsls	r3, r3, #2
 8005ce2:	4413      	add	r3, r2
 8005ce4:	881b      	ldrh	r3, [r3, #0]
 8005ce6:	b29b      	uxth	r3, r3
 8005ce8:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8005cec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005cf0:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8005cf4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cf8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005cfc:	681a      	ldr	r2, [r3, #0]
 8005cfe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d02:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	781b      	ldrb	r3, [r3, #0]
 8005d0a:	009b      	lsls	r3, r3, #2
 8005d0c:	441a      	add	r2, r3
 8005d0e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8005d12:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005d16:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005d1a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005d1e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005d22:	b29b      	uxth	r3, r3
 8005d24:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005d26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d2a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005d32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d36:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005d40:	b29b      	uxth	r3, r3
 8005d42:	461a      	mov	r2, r3
 8005d44:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005d46:	4413      	add	r3, r2
 8005d48:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005d4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d4e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	781b      	ldrb	r3, [r3, #0]
 8005d56:	011a      	lsls	r2, r3, #4
 8005d58:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005d5a:	4413      	add	r3, r2
 8005d5c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005d60:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005d62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d66:	b29a      	uxth	r2, r3
 8005d68:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005d6a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005d6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d70:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	891b      	ldrh	r3, [r3, #8]
 8005d78:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005d7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d80:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	6959      	ldr	r1, [r3, #20]
 8005d88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d8c:	b29b      	uxth	r3, r3
 8005d8e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005d92:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005d96:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005d9a:	6800      	ldr	r0, [r0, #0]
 8005d9c:	f001 f80d 	bl	8006dba <USB_WritePMA>
 8005da0:	e1b3      	b.n	800610a <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8005da2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005da6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	6a1a      	ldr	r2, [r3, #32]
 8005dae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005db2:	1ad2      	subs	r2, r2, r3
 8005db4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005db8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005dc0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005dc4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005dc8:	681a      	ldr	r2, [r3, #0]
 8005dca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005dce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	781b      	ldrb	r3, [r3, #0]
 8005dd6:	009b      	lsls	r3, r3, #2
 8005dd8:	4413      	add	r3, r2
 8005dda:	881b      	ldrh	r3, [r3, #0]
 8005ddc:	b29b      	uxth	r3, r3
 8005dde:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	f000 80c6 	beq.w	8005f74 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005de8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005dec:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	673b      	str	r3, [r7, #112]	@ 0x70
 8005df4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005df8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	785b      	ldrb	r3, [r3, #1]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d177      	bne.n	8005ef4 <USB_EPStartXfer+0xb18>
 8005e04:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e08:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005e10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e14:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005e1e:	b29b      	uxth	r3, r3
 8005e20:	461a      	mov	r2, r3
 8005e22:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005e24:	4413      	add	r3, r2
 8005e26:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005e28:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e2c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	781b      	ldrb	r3, [r3, #0]
 8005e34:	011a      	lsls	r2, r3, #4
 8005e36:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005e38:	4413      	add	r3, r2
 8005e3a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005e3e:	667b      	str	r3, [r7, #100]	@ 0x64
 8005e40:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005e42:	881b      	ldrh	r3, [r3, #0]
 8005e44:	b29b      	uxth	r3, r3
 8005e46:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005e4a:	b29a      	uxth	r2, r3
 8005e4c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005e4e:	801a      	strh	r2, [r3, #0]
 8005e50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e54:	2b3e      	cmp	r3, #62	@ 0x3e
 8005e56:	d921      	bls.n	8005e9c <USB_EPStartXfer+0xac0>
 8005e58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e5c:	095b      	lsrs	r3, r3, #5
 8005e5e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005e62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e66:	f003 031f 	and.w	r3, r3, #31
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d104      	bne.n	8005e78 <USB_EPStartXfer+0xa9c>
 8005e6e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005e72:	3b01      	subs	r3, #1
 8005e74:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005e78:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005e7a:	881b      	ldrh	r3, [r3, #0]
 8005e7c:	b29a      	uxth	r2, r3
 8005e7e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005e82:	b29b      	uxth	r3, r3
 8005e84:	029b      	lsls	r3, r3, #10
 8005e86:	b29b      	uxth	r3, r3
 8005e88:	4313      	orrs	r3, r2
 8005e8a:	b29b      	uxth	r3, r3
 8005e8c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e90:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e94:	b29a      	uxth	r2, r3
 8005e96:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005e98:	801a      	strh	r2, [r3, #0]
 8005e9a:	e050      	b.n	8005f3e <USB_EPStartXfer+0xb62>
 8005e9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d10a      	bne.n	8005eba <USB_EPStartXfer+0xade>
 8005ea4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005ea6:	881b      	ldrh	r3, [r3, #0]
 8005ea8:	b29b      	uxth	r3, r3
 8005eaa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005eae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005eb2:	b29a      	uxth	r2, r3
 8005eb4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005eb6:	801a      	strh	r2, [r3, #0]
 8005eb8:	e041      	b.n	8005f3e <USB_EPStartXfer+0xb62>
 8005eba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ebe:	085b      	lsrs	r3, r3, #1
 8005ec0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005ec4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ec8:	f003 0301 	and.w	r3, r3, #1
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d004      	beq.n	8005eda <USB_EPStartXfer+0xafe>
 8005ed0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005ed4:	3301      	adds	r3, #1
 8005ed6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005eda:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005edc:	881b      	ldrh	r3, [r3, #0]
 8005ede:	b29a      	uxth	r2, r3
 8005ee0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005ee4:	b29b      	uxth	r3, r3
 8005ee6:	029b      	lsls	r3, r3, #10
 8005ee8:	b29b      	uxth	r3, r3
 8005eea:	4313      	orrs	r3, r2
 8005eec:	b29a      	uxth	r2, r3
 8005eee:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005ef0:	801a      	strh	r2, [r3, #0]
 8005ef2:	e024      	b.n	8005f3e <USB_EPStartXfer+0xb62>
 8005ef4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ef8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	785b      	ldrb	r3, [r3, #1]
 8005f00:	2b01      	cmp	r3, #1
 8005f02:	d11c      	bne.n	8005f3e <USB_EPStartXfer+0xb62>
 8005f04:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f08:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005f12:	b29b      	uxth	r3, r3
 8005f14:	461a      	mov	r2, r3
 8005f16:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005f18:	4413      	add	r3, r2
 8005f1a:	673b      	str	r3, [r7, #112]	@ 0x70
 8005f1c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f20:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	781b      	ldrb	r3, [r3, #0]
 8005f28:	011a      	lsls	r2, r3, #4
 8005f2a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005f2c:	4413      	add	r3, r2
 8005f2e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005f32:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005f34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f38:	b29a      	uxth	r2, r3
 8005f3a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005f3c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8005f3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f42:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	895b      	ldrh	r3, [r3, #10]
 8005f4a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005f4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f52:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	6959      	ldr	r1, [r3, #20]
 8005f5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f5e:	b29b      	uxth	r3, r3
 8005f60:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005f64:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005f68:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005f6c:	6800      	ldr	r0, [r0, #0]
 8005f6e:	f000 ff24 	bl	8006dba <USB_WritePMA>
 8005f72:	e0ca      	b.n	800610a <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005f74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f78:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	785b      	ldrb	r3, [r3, #1]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d177      	bne.n	8006074 <USB_EPStartXfer+0xc98>
 8005f84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f88:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005f90:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f94:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005f9e:	b29b      	uxth	r3, r3
 8005fa0:	461a      	mov	r2, r3
 8005fa2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005fa4:	4413      	add	r3, r2
 8005fa6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005fa8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	781b      	ldrb	r3, [r3, #0]
 8005fb4:	011a      	lsls	r2, r3, #4
 8005fb6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005fb8:	4413      	add	r3, r2
 8005fba:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005fbe:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005fc0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005fc2:	881b      	ldrh	r3, [r3, #0]
 8005fc4:	b29b      	uxth	r3, r3
 8005fc6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005fca:	b29a      	uxth	r2, r3
 8005fcc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005fce:	801a      	strh	r2, [r3, #0]
 8005fd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fd4:	2b3e      	cmp	r3, #62	@ 0x3e
 8005fd6:	d921      	bls.n	800601c <USB_EPStartXfer+0xc40>
 8005fd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fdc:	095b      	lsrs	r3, r3, #5
 8005fde:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005fe2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fe6:	f003 031f 	and.w	r3, r3, #31
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d104      	bne.n	8005ff8 <USB_EPStartXfer+0xc1c>
 8005fee:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005ff2:	3b01      	subs	r3, #1
 8005ff4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005ff8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005ffa:	881b      	ldrh	r3, [r3, #0]
 8005ffc:	b29a      	uxth	r2, r3
 8005ffe:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006002:	b29b      	uxth	r3, r3
 8006004:	029b      	lsls	r3, r3, #10
 8006006:	b29b      	uxth	r3, r3
 8006008:	4313      	orrs	r3, r2
 800600a:	b29b      	uxth	r3, r3
 800600c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006010:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006014:	b29a      	uxth	r2, r3
 8006016:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006018:	801a      	strh	r2, [r3, #0]
 800601a:	e05c      	b.n	80060d6 <USB_EPStartXfer+0xcfa>
 800601c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006020:	2b00      	cmp	r3, #0
 8006022:	d10a      	bne.n	800603a <USB_EPStartXfer+0xc5e>
 8006024:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006026:	881b      	ldrh	r3, [r3, #0]
 8006028:	b29b      	uxth	r3, r3
 800602a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800602e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006032:	b29a      	uxth	r2, r3
 8006034:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006036:	801a      	strh	r2, [r3, #0]
 8006038:	e04d      	b.n	80060d6 <USB_EPStartXfer+0xcfa>
 800603a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800603e:	085b      	lsrs	r3, r3, #1
 8006040:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006044:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006048:	f003 0301 	and.w	r3, r3, #1
 800604c:	2b00      	cmp	r3, #0
 800604e:	d004      	beq.n	800605a <USB_EPStartXfer+0xc7e>
 8006050:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006054:	3301      	adds	r3, #1
 8006056:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800605a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800605c:	881b      	ldrh	r3, [r3, #0]
 800605e:	b29a      	uxth	r2, r3
 8006060:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006064:	b29b      	uxth	r3, r3
 8006066:	029b      	lsls	r3, r3, #10
 8006068:	b29b      	uxth	r3, r3
 800606a:	4313      	orrs	r3, r2
 800606c:	b29a      	uxth	r2, r3
 800606e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006070:	801a      	strh	r2, [r3, #0]
 8006072:	e030      	b.n	80060d6 <USB_EPStartXfer+0xcfa>
 8006074:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006078:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	785b      	ldrb	r3, [r3, #1]
 8006080:	2b01      	cmp	r3, #1
 8006082:	d128      	bne.n	80060d6 <USB_EPStartXfer+0xcfa>
 8006084:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006088:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006092:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006096:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80060a0:	b29b      	uxth	r3, r3
 80060a2:	461a      	mov	r2, r3
 80060a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80060a8:	4413      	add	r3, r2
 80060aa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80060ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	781b      	ldrb	r3, [r3, #0]
 80060ba:	011a      	lsls	r2, r3, #4
 80060bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80060c0:	4413      	add	r3, r2
 80060c2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80060c6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80060ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060ce:	b29a      	uxth	r2, r3
 80060d0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80060d4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80060d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	891b      	ldrh	r3, [r3, #8]
 80060e2:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80060e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	6959      	ldr	r1, [r3, #20]
 80060f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060f6:	b29b      	uxth	r3, r3
 80060f8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80060fc:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006100:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006104:	6800      	ldr	r0, [r0, #0]
 8006106:	f000 fe58 	bl	8006dba <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800610a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800610e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006112:	681a      	ldr	r2, [r3, #0]
 8006114:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006118:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	781b      	ldrb	r3, [r3, #0]
 8006120:	009b      	lsls	r3, r3, #2
 8006122:	4413      	add	r3, r2
 8006124:	881b      	ldrh	r3, [r3, #0]
 8006126:	b29b      	uxth	r3, r3
 8006128:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800612c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006130:	817b      	strh	r3, [r7, #10]
 8006132:	897b      	ldrh	r3, [r7, #10]
 8006134:	f083 0310 	eor.w	r3, r3, #16
 8006138:	817b      	strh	r3, [r7, #10]
 800613a:	897b      	ldrh	r3, [r7, #10]
 800613c:	f083 0320 	eor.w	r3, r3, #32
 8006140:	817b      	strh	r3, [r7, #10]
 8006142:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006146:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800614a:	681a      	ldr	r2, [r3, #0]
 800614c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006150:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	781b      	ldrb	r3, [r3, #0]
 8006158:	009b      	lsls	r3, r3, #2
 800615a:	441a      	add	r2, r3
 800615c:	897b      	ldrh	r3, [r7, #10]
 800615e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006162:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006166:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800616a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800616e:	b29b      	uxth	r3, r3
 8006170:	8013      	strh	r3, [r2, #0]
 8006172:	f000 bcde 	b.w	8006b32 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8006176:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800617a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	7b1b      	ldrb	r3, [r3, #12]
 8006182:	2b00      	cmp	r3, #0
 8006184:	f040 80bb 	bne.w	80062fe <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8006188:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800618c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	699a      	ldr	r2, [r3, #24]
 8006194:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006198:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	691b      	ldr	r3, [r3, #16]
 80061a0:	429a      	cmp	r2, r3
 80061a2:	d917      	bls.n	80061d4 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 80061a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	691b      	ldr	r3, [r3, #16]
 80061b0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 80061b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	699a      	ldr	r2, [r3, #24]
 80061c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061c4:	1ad2      	subs	r2, r2, r3
 80061c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	619a      	str	r2, [r3, #24]
 80061d2:	e00e      	b.n	80061f2 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 80061d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	699b      	ldr	r3, [r3, #24]
 80061e0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 80061e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	2200      	movs	r2, #0
 80061f0:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80061f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061f6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006200:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006204:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800620e:	b29b      	uxth	r3, r3
 8006210:	461a      	mov	r2, r3
 8006212:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006216:	4413      	add	r3, r2
 8006218:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800621c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006220:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	781b      	ldrb	r3, [r3, #0]
 8006228:	011a      	lsls	r2, r3, #4
 800622a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800622e:	4413      	add	r3, r2
 8006230:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006234:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006238:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800623c:	881b      	ldrh	r3, [r3, #0]
 800623e:	b29b      	uxth	r3, r3
 8006240:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006244:	b29a      	uxth	r2, r3
 8006246:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800624a:	801a      	strh	r2, [r3, #0]
 800624c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006250:	2b3e      	cmp	r3, #62	@ 0x3e
 8006252:	d924      	bls.n	800629e <USB_EPStartXfer+0xec2>
 8006254:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006258:	095b      	lsrs	r3, r3, #5
 800625a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800625e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006262:	f003 031f 	and.w	r3, r3, #31
 8006266:	2b00      	cmp	r3, #0
 8006268:	d104      	bne.n	8006274 <USB_EPStartXfer+0xe98>
 800626a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800626e:	3b01      	subs	r3, #1
 8006270:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006274:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006278:	881b      	ldrh	r3, [r3, #0]
 800627a:	b29a      	uxth	r2, r3
 800627c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8006280:	b29b      	uxth	r3, r3
 8006282:	029b      	lsls	r3, r3, #10
 8006284:	b29b      	uxth	r3, r3
 8006286:	4313      	orrs	r3, r2
 8006288:	b29b      	uxth	r3, r3
 800628a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800628e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006292:	b29a      	uxth	r2, r3
 8006294:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006298:	801a      	strh	r2, [r3, #0]
 800629a:	f000 bc10 	b.w	8006abe <USB_EPStartXfer+0x16e2>
 800629e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d10c      	bne.n	80062c0 <USB_EPStartXfer+0xee4>
 80062a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80062aa:	881b      	ldrh	r3, [r3, #0]
 80062ac:	b29b      	uxth	r3, r3
 80062ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062b6:	b29a      	uxth	r2, r3
 80062b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80062bc:	801a      	strh	r2, [r3, #0]
 80062be:	e3fe      	b.n	8006abe <USB_EPStartXfer+0x16e2>
 80062c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062c4:	085b      	lsrs	r3, r3, #1
 80062c6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80062ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062ce:	f003 0301 	and.w	r3, r3, #1
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d004      	beq.n	80062e0 <USB_EPStartXfer+0xf04>
 80062d6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80062da:	3301      	adds	r3, #1
 80062dc:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80062e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80062e4:	881b      	ldrh	r3, [r3, #0]
 80062e6:	b29a      	uxth	r2, r3
 80062e8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80062ec:	b29b      	uxth	r3, r3
 80062ee:	029b      	lsls	r3, r3, #10
 80062f0:	b29b      	uxth	r3, r3
 80062f2:	4313      	orrs	r3, r2
 80062f4:	b29a      	uxth	r2, r3
 80062f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80062fa:	801a      	strh	r2, [r3, #0]
 80062fc:	e3df      	b.n	8006abe <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80062fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006302:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	78db      	ldrb	r3, [r3, #3]
 800630a:	2b02      	cmp	r3, #2
 800630c:	f040 8218 	bne.w	8006740 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006310:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006314:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	785b      	ldrb	r3, [r3, #1]
 800631c:	2b00      	cmp	r3, #0
 800631e:	f040 809d 	bne.w	800645c <USB_EPStartXfer+0x1080>
 8006322:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006326:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006330:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006334:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800633e:	b29b      	uxth	r3, r3
 8006340:	461a      	mov	r2, r3
 8006342:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006346:	4413      	add	r3, r2
 8006348:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800634c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006350:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	781b      	ldrb	r3, [r3, #0]
 8006358:	011a      	lsls	r2, r3, #4
 800635a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800635e:	4413      	add	r3, r2
 8006360:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006364:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006368:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800636c:	881b      	ldrh	r3, [r3, #0]
 800636e:	b29b      	uxth	r3, r3
 8006370:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006374:	b29a      	uxth	r2, r3
 8006376:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800637a:	801a      	strh	r2, [r3, #0]
 800637c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006380:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	691b      	ldr	r3, [r3, #16]
 8006388:	2b3e      	cmp	r3, #62	@ 0x3e
 800638a:	d92b      	bls.n	80063e4 <USB_EPStartXfer+0x1008>
 800638c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006390:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	691b      	ldr	r3, [r3, #16]
 8006398:	095b      	lsrs	r3, r3, #5
 800639a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800639e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	691b      	ldr	r3, [r3, #16]
 80063aa:	f003 031f 	and.w	r3, r3, #31
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d104      	bne.n	80063bc <USB_EPStartXfer+0xfe0>
 80063b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80063b6:	3b01      	subs	r3, #1
 80063b8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80063bc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80063c0:	881b      	ldrh	r3, [r3, #0]
 80063c2:	b29a      	uxth	r2, r3
 80063c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80063c8:	b29b      	uxth	r3, r3
 80063ca:	029b      	lsls	r3, r3, #10
 80063cc:	b29b      	uxth	r3, r3
 80063ce:	4313      	orrs	r3, r2
 80063d0:	b29b      	uxth	r3, r3
 80063d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80063d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80063da:	b29a      	uxth	r2, r3
 80063dc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80063e0:	801a      	strh	r2, [r3, #0]
 80063e2:	e070      	b.n	80064c6 <USB_EPStartXfer+0x10ea>
 80063e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	691b      	ldr	r3, [r3, #16]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d10c      	bne.n	800640e <USB_EPStartXfer+0x1032>
 80063f4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80063f8:	881b      	ldrh	r3, [r3, #0]
 80063fa:	b29b      	uxth	r3, r3
 80063fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006400:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006404:	b29a      	uxth	r2, r3
 8006406:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800640a:	801a      	strh	r2, [r3, #0]
 800640c:	e05b      	b.n	80064c6 <USB_EPStartXfer+0x10ea>
 800640e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006412:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	691b      	ldr	r3, [r3, #16]
 800641a:	085b      	lsrs	r3, r3, #1
 800641c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006420:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006424:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	691b      	ldr	r3, [r3, #16]
 800642c:	f003 0301 	and.w	r3, r3, #1
 8006430:	2b00      	cmp	r3, #0
 8006432:	d004      	beq.n	800643e <USB_EPStartXfer+0x1062>
 8006434:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006438:	3301      	adds	r3, #1
 800643a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800643e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006442:	881b      	ldrh	r3, [r3, #0]
 8006444:	b29a      	uxth	r2, r3
 8006446:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800644a:	b29b      	uxth	r3, r3
 800644c:	029b      	lsls	r3, r3, #10
 800644e:	b29b      	uxth	r3, r3
 8006450:	4313      	orrs	r3, r2
 8006452:	b29a      	uxth	r2, r3
 8006454:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006458:	801a      	strh	r2, [r3, #0]
 800645a:	e034      	b.n	80064c6 <USB_EPStartXfer+0x10ea>
 800645c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006460:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	785b      	ldrb	r3, [r3, #1]
 8006468:	2b01      	cmp	r3, #1
 800646a:	d12c      	bne.n	80064c6 <USB_EPStartXfer+0x10ea>
 800646c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006470:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800647a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800647e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006488:	b29b      	uxth	r3, r3
 800648a:	461a      	mov	r2, r3
 800648c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006490:	4413      	add	r3, r2
 8006492:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006496:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800649a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	781b      	ldrb	r3, [r3, #0]
 80064a2:	011a      	lsls	r2, r3, #4
 80064a4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80064a8:	4413      	add	r3, r2
 80064aa:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80064ae:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80064b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	691b      	ldr	r3, [r3, #16]
 80064be:	b29a      	uxth	r2, r3
 80064c0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80064c4:	801a      	strh	r2, [r3, #0]
 80064c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064ca:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80064d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	785b      	ldrb	r3, [r3, #1]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	f040 809d 	bne.w	8006620 <USB_EPStartXfer+0x1244>
 80064e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064ea:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80064f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064f8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006502:	b29b      	uxth	r3, r3
 8006504:	461a      	mov	r2, r3
 8006506:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800650a:	4413      	add	r3, r2
 800650c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006510:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006514:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	781b      	ldrb	r3, [r3, #0]
 800651c:	011a      	lsls	r2, r3, #4
 800651e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006522:	4413      	add	r3, r2
 8006524:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006528:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800652c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006530:	881b      	ldrh	r3, [r3, #0]
 8006532:	b29b      	uxth	r3, r3
 8006534:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006538:	b29a      	uxth	r2, r3
 800653a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800653e:	801a      	strh	r2, [r3, #0]
 8006540:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006544:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	691b      	ldr	r3, [r3, #16]
 800654c:	2b3e      	cmp	r3, #62	@ 0x3e
 800654e:	d92b      	bls.n	80065a8 <USB_EPStartXfer+0x11cc>
 8006550:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006554:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	691b      	ldr	r3, [r3, #16]
 800655c:	095b      	lsrs	r3, r3, #5
 800655e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006562:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006566:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	691b      	ldr	r3, [r3, #16]
 800656e:	f003 031f 	and.w	r3, r3, #31
 8006572:	2b00      	cmp	r3, #0
 8006574:	d104      	bne.n	8006580 <USB_EPStartXfer+0x11a4>
 8006576:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800657a:	3b01      	subs	r3, #1
 800657c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006580:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006584:	881b      	ldrh	r3, [r3, #0]
 8006586:	b29a      	uxth	r2, r3
 8006588:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800658c:	b29b      	uxth	r3, r3
 800658e:	029b      	lsls	r3, r3, #10
 8006590:	b29b      	uxth	r3, r3
 8006592:	4313      	orrs	r3, r2
 8006594:	b29b      	uxth	r3, r3
 8006596:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800659a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800659e:	b29a      	uxth	r2, r3
 80065a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80065a4:	801a      	strh	r2, [r3, #0]
 80065a6:	e069      	b.n	800667c <USB_EPStartXfer+0x12a0>
 80065a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	691b      	ldr	r3, [r3, #16]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d10c      	bne.n	80065d2 <USB_EPStartXfer+0x11f6>
 80065b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80065bc:	881b      	ldrh	r3, [r3, #0]
 80065be:	b29b      	uxth	r3, r3
 80065c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065c8:	b29a      	uxth	r2, r3
 80065ca:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80065ce:	801a      	strh	r2, [r3, #0]
 80065d0:	e054      	b.n	800667c <USB_EPStartXfer+0x12a0>
 80065d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	691b      	ldr	r3, [r3, #16]
 80065de:	085b      	lsrs	r3, r3, #1
 80065e0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80065e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	691b      	ldr	r3, [r3, #16]
 80065f0:	f003 0301 	and.w	r3, r3, #1
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d004      	beq.n	8006602 <USB_EPStartXfer+0x1226>
 80065f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80065fc:	3301      	adds	r3, #1
 80065fe:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006602:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006606:	881b      	ldrh	r3, [r3, #0]
 8006608:	b29a      	uxth	r2, r3
 800660a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800660e:	b29b      	uxth	r3, r3
 8006610:	029b      	lsls	r3, r3, #10
 8006612:	b29b      	uxth	r3, r3
 8006614:	4313      	orrs	r3, r2
 8006616:	b29a      	uxth	r2, r3
 8006618:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800661c:	801a      	strh	r2, [r3, #0]
 800661e:	e02d      	b.n	800667c <USB_EPStartXfer+0x12a0>
 8006620:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006624:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	785b      	ldrb	r3, [r3, #1]
 800662c:	2b01      	cmp	r3, #1
 800662e:	d125      	bne.n	800667c <USB_EPStartXfer+0x12a0>
 8006630:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006634:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800663e:	b29b      	uxth	r3, r3
 8006640:	461a      	mov	r2, r3
 8006642:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006646:	4413      	add	r3, r2
 8006648:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800664c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006650:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	781b      	ldrb	r3, [r3, #0]
 8006658:	011a      	lsls	r2, r3, #4
 800665a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800665e:	4413      	add	r3, r2
 8006660:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006664:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006668:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800666c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	691b      	ldr	r3, [r3, #16]
 8006674:	b29a      	uxth	r2, r3
 8006676:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800667a:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800667c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006680:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	69db      	ldr	r3, [r3, #28]
 8006688:	2b00      	cmp	r3, #0
 800668a:	f000 8218 	beq.w	8006abe <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800668e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006692:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006696:	681a      	ldr	r2, [r3, #0]
 8006698:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800669c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	781b      	ldrb	r3, [r3, #0]
 80066a4:	009b      	lsls	r3, r3, #2
 80066a6:	4413      	add	r3, r2
 80066a8:	881b      	ldrh	r3, [r3, #0]
 80066aa:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80066ae:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80066b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d005      	beq.n	80066c6 <USB_EPStartXfer+0x12ea>
 80066ba:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80066be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d10d      	bne.n	80066e2 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80066c6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80066ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	f040 81f5 	bne.w	8006abe <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80066d4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80066d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066dc:	2b00      	cmp	r3, #0
 80066de:	f040 81ee 	bne.w	8006abe <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80066e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066e6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80066ea:	681a      	ldr	r2, [r3, #0]
 80066ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	781b      	ldrb	r3, [r3, #0]
 80066f8:	009b      	lsls	r3, r3, #2
 80066fa:	4413      	add	r3, r2
 80066fc:	881b      	ldrh	r3, [r3, #0]
 80066fe:	b29b      	uxth	r3, r3
 8006700:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006704:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006708:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 800670c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006710:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006714:	681a      	ldr	r2, [r3, #0]
 8006716:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800671a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	781b      	ldrb	r3, [r3, #0]
 8006722:	009b      	lsls	r3, r3, #2
 8006724:	441a      	add	r2, r3
 8006726:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800672a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800672e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006732:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006736:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800673a:	b29b      	uxth	r3, r3
 800673c:	8013      	strh	r3, [r2, #0]
 800673e:	e1be      	b.n	8006abe <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006740:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006744:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	78db      	ldrb	r3, [r3, #3]
 800674c:	2b01      	cmp	r3, #1
 800674e:	f040 81b4 	bne.w	8006aba <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8006752:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006756:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	699a      	ldr	r2, [r3, #24]
 800675e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006762:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	691b      	ldr	r3, [r3, #16]
 800676a:	429a      	cmp	r2, r3
 800676c:	d917      	bls.n	800679e <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800676e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006772:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	691b      	ldr	r3, [r3, #16]
 800677a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 800677e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006782:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	699a      	ldr	r2, [r3, #24]
 800678a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800678e:	1ad2      	subs	r2, r2, r3
 8006790:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006794:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	619a      	str	r2, [r3, #24]
 800679c:	e00e      	b.n	80067bc <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800679e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	699b      	ldr	r3, [r3, #24]
 80067aa:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 80067ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	2200      	movs	r2, #0
 80067ba:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80067bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	785b      	ldrb	r3, [r3, #1]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	f040 8085 	bne.w	80068d8 <USB_EPStartXfer+0x14fc>
 80067ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067d2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80067dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067e0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80067ea:	b29b      	uxth	r3, r3
 80067ec:	461a      	mov	r2, r3
 80067ee:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80067f2:	4413      	add	r3, r2
 80067f4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80067f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	781b      	ldrb	r3, [r3, #0]
 8006804:	011a      	lsls	r2, r3, #4
 8006806:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800680a:	4413      	add	r3, r2
 800680c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006810:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006814:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006818:	881b      	ldrh	r3, [r3, #0]
 800681a:	b29b      	uxth	r3, r3
 800681c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006820:	b29a      	uxth	r2, r3
 8006822:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006826:	801a      	strh	r2, [r3, #0]
 8006828:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800682c:	2b3e      	cmp	r3, #62	@ 0x3e
 800682e:	d923      	bls.n	8006878 <USB_EPStartXfer+0x149c>
 8006830:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006834:	095b      	lsrs	r3, r3, #5
 8006836:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800683a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800683e:	f003 031f 	and.w	r3, r3, #31
 8006842:	2b00      	cmp	r3, #0
 8006844:	d104      	bne.n	8006850 <USB_EPStartXfer+0x1474>
 8006846:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800684a:	3b01      	subs	r3, #1
 800684c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006850:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006854:	881b      	ldrh	r3, [r3, #0]
 8006856:	b29a      	uxth	r2, r3
 8006858:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800685c:	b29b      	uxth	r3, r3
 800685e:	029b      	lsls	r3, r3, #10
 8006860:	b29b      	uxth	r3, r3
 8006862:	4313      	orrs	r3, r2
 8006864:	b29b      	uxth	r3, r3
 8006866:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800686a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800686e:	b29a      	uxth	r2, r3
 8006870:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006874:	801a      	strh	r2, [r3, #0]
 8006876:	e060      	b.n	800693a <USB_EPStartXfer+0x155e>
 8006878:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800687c:	2b00      	cmp	r3, #0
 800687e:	d10c      	bne.n	800689a <USB_EPStartXfer+0x14be>
 8006880:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006884:	881b      	ldrh	r3, [r3, #0]
 8006886:	b29b      	uxth	r3, r3
 8006888:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800688c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006890:	b29a      	uxth	r2, r3
 8006892:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006896:	801a      	strh	r2, [r3, #0]
 8006898:	e04f      	b.n	800693a <USB_EPStartXfer+0x155e>
 800689a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800689e:	085b      	lsrs	r3, r3, #1
 80068a0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80068a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068a8:	f003 0301 	and.w	r3, r3, #1
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d004      	beq.n	80068ba <USB_EPStartXfer+0x14de>
 80068b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80068b4:	3301      	adds	r3, #1
 80068b6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80068ba:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80068be:	881b      	ldrh	r3, [r3, #0]
 80068c0:	b29a      	uxth	r2, r3
 80068c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80068c6:	b29b      	uxth	r3, r3
 80068c8:	029b      	lsls	r3, r3, #10
 80068ca:	b29b      	uxth	r3, r3
 80068cc:	4313      	orrs	r3, r2
 80068ce:	b29a      	uxth	r2, r3
 80068d0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80068d4:	801a      	strh	r2, [r3, #0]
 80068d6:	e030      	b.n	800693a <USB_EPStartXfer+0x155e>
 80068d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	785b      	ldrb	r3, [r3, #1]
 80068e4:	2b01      	cmp	r3, #1
 80068e6:	d128      	bne.n	800693a <USB_EPStartXfer+0x155e>
 80068e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068ec:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80068f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068fa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006904:	b29b      	uxth	r3, r3
 8006906:	461a      	mov	r2, r3
 8006908:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800690c:	4413      	add	r3, r2
 800690e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8006912:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006916:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	781b      	ldrb	r3, [r3, #0]
 800691e:	011a      	lsls	r2, r3, #4
 8006920:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006924:	4413      	add	r3, r2
 8006926:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800692a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800692e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006932:	b29a      	uxth	r2, r3
 8006934:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8006938:	801a      	strh	r2, [r3, #0]
 800693a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800693e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006948:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800694c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	785b      	ldrb	r3, [r3, #1]
 8006954:	2b00      	cmp	r3, #0
 8006956:	f040 8085 	bne.w	8006a64 <USB_EPStartXfer+0x1688>
 800695a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800695e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006968:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800696c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006976:	b29b      	uxth	r3, r3
 8006978:	461a      	mov	r2, r3
 800697a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800697e:	4413      	add	r3, r2
 8006980:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006984:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006988:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	781b      	ldrb	r3, [r3, #0]
 8006990:	011a      	lsls	r2, r3, #4
 8006992:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8006996:	4413      	add	r3, r2
 8006998:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800699c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80069a0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80069a4:	881b      	ldrh	r3, [r3, #0]
 80069a6:	b29b      	uxth	r3, r3
 80069a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80069ac:	b29a      	uxth	r2, r3
 80069ae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80069b2:	801a      	strh	r2, [r3, #0]
 80069b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069b8:	2b3e      	cmp	r3, #62	@ 0x3e
 80069ba:	d923      	bls.n	8006a04 <USB_EPStartXfer+0x1628>
 80069bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069c0:	095b      	lsrs	r3, r3, #5
 80069c2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80069c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069ca:	f003 031f 	and.w	r3, r3, #31
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d104      	bne.n	80069dc <USB_EPStartXfer+0x1600>
 80069d2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80069d6:	3b01      	subs	r3, #1
 80069d8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80069dc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80069e0:	881b      	ldrh	r3, [r3, #0]
 80069e2:	b29a      	uxth	r2, r3
 80069e4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80069e8:	b29b      	uxth	r3, r3
 80069ea:	029b      	lsls	r3, r3, #10
 80069ec:	b29b      	uxth	r3, r3
 80069ee:	4313      	orrs	r3, r2
 80069f0:	b29b      	uxth	r3, r3
 80069f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80069f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069fa:	b29a      	uxth	r2, r3
 80069fc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006a00:	801a      	strh	r2, [r3, #0]
 8006a02:	e05c      	b.n	8006abe <USB_EPStartXfer+0x16e2>
 8006a04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d10c      	bne.n	8006a26 <USB_EPStartXfer+0x164a>
 8006a0c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006a10:	881b      	ldrh	r3, [r3, #0]
 8006a12:	b29b      	uxth	r3, r3
 8006a14:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a18:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a1c:	b29a      	uxth	r2, r3
 8006a1e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006a22:	801a      	strh	r2, [r3, #0]
 8006a24:	e04b      	b.n	8006abe <USB_EPStartXfer+0x16e2>
 8006a26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a2a:	085b      	lsrs	r3, r3, #1
 8006a2c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006a30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a34:	f003 0301 	and.w	r3, r3, #1
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d004      	beq.n	8006a46 <USB_EPStartXfer+0x166a>
 8006a3c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006a40:	3301      	adds	r3, #1
 8006a42:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006a46:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006a4a:	881b      	ldrh	r3, [r3, #0]
 8006a4c:	b29a      	uxth	r2, r3
 8006a4e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006a52:	b29b      	uxth	r3, r3
 8006a54:	029b      	lsls	r3, r3, #10
 8006a56:	b29b      	uxth	r3, r3
 8006a58:	4313      	orrs	r3, r2
 8006a5a:	b29a      	uxth	r2, r3
 8006a5c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006a60:	801a      	strh	r2, [r3, #0]
 8006a62:	e02c      	b.n	8006abe <USB_EPStartXfer+0x16e2>
 8006a64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a68:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	785b      	ldrb	r3, [r3, #1]
 8006a70:	2b01      	cmp	r3, #1
 8006a72:	d124      	bne.n	8006abe <USB_EPStartXfer+0x16e2>
 8006a74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a78:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006a82:	b29b      	uxth	r3, r3
 8006a84:	461a      	mov	r2, r3
 8006a86:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006a8a:	4413      	add	r3, r2
 8006a8c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006a90:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a94:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	781b      	ldrb	r3, [r3, #0]
 8006a9c:	011a      	lsls	r2, r3, #4
 8006a9e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006aa2:	4413      	add	r3, r2
 8006aa4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006aa8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006aac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ab0:	b29a      	uxth	r2, r3
 8006ab2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006ab6:	801a      	strh	r2, [r3, #0]
 8006ab8:	e001      	b.n	8006abe <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8006aba:	2301      	movs	r3, #1
 8006abc:	e03a      	b.n	8006b34 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006abe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ac2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006ac6:	681a      	ldr	r2, [r3, #0]
 8006ac8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006acc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	781b      	ldrb	r3, [r3, #0]
 8006ad4:	009b      	lsls	r3, r3, #2
 8006ad6:	4413      	add	r3, r2
 8006ad8:	881b      	ldrh	r3, [r3, #0]
 8006ada:	b29b      	uxth	r3, r3
 8006adc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006ae0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ae4:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8006ae8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8006aec:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006af0:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8006af4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8006af8:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006afc:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8006b00:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b04:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006b08:	681a      	ldr	r2, [r3, #0]
 8006b0a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b0e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	781b      	ldrb	r3, [r3, #0]
 8006b16:	009b      	lsls	r3, r3, #2
 8006b18:	441a      	add	r2, r3
 8006b1a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8006b1e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006b22:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006b26:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006b2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b2e:	b29b      	uxth	r3, r3
 8006b30:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006b32:	2300      	movs	r3, #0
}
 8006b34:	4618      	mov	r0, r3
 8006b36:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	bd80      	pop	{r7, pc}

08006b3e <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006b3e:	b480      	push	{r7}
 8006b40:	b085      	sub	sp, #20
 8006b42:	af00      	add	r7, sp, #0
 8006b44:	6078      	str	r0, [r7, #4]
 8006b46:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	785b      	ldrb	r3, [r3, #1]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d020      	beq.n	8006b92 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006b50:	687a      	ldr	r2, [r7, #4]
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	781b      	ldrb	r3, [r3, #0]
 8006b56:	009b      	lsls	r3, r3, #2
 8006b58:	4413      	add	r3, r2
 8006b5a:	881b      	ldrh	r3, [r3, #0]
 8006b5c:	b29b      	uxth	r3, r3
 8006b5e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006b62:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006b66:	81bb      	strh	r3, [r7, #12]
 8006b68:	89bb      	ldrh	r3, [r7, #12]
 8006b6a:	f083 0310 	eor.w	r3, r3, #16
 8006b6e:	81bb      	strh	r3, [r7, #12]
 8006b70:	687a      	ldr	r2, [r7, #4]
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	781b      	ldrb	r3, [r3, #0]
 8006b76:	009b      	lsls	r3, r3, #2
 8006b78:	441a      	add	r2, r3
 8006b7a:	89bb      	ldrh	r3, [r7, #12]
 8006b7c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006b80:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006b84:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006b88:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b8c:	b29b      	uxth	r3, r3
 8006b8e:	8013      	strh	r3, [r2, #0]
 8006b90:	e01f      	b.n	8006bd2 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006b92:	687a      	ldr	r2, [r7, #4]
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	781b      	ldrb	r3, [r3, #0]
 8006b98:	009b      	lsls	r3, r3, #2
 8006b9a:	4413      	add	r3, r2
 8006b9c:	881b      	ldrh	r3, [r3, #0]
 8006b9e:	b29b      	uxth	r3, r3
 8006ba0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006ba4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ba8:	81fb      	strh	r3, [r7, #14]
 8006baa:	89fb      	ldrh	r3, [r7, #14]
 8006bac:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006bb0:	81fb      	strh	r3, [r7, #14]
 8006bb2:	687a      	ldr	r2, [r7, #4]
 8006bb4:	683b      	ldr	r3, [r7, #0]
 8006bb6:	781b      	ldrb	r3, [r3, #0]
 8006bb8:	009b      	lsls	r3, r3, #2
 8006bba:	441a      	add	r2, r3
 8006bbc:	89fb      	ldrh	r3, [r7, #14]
 8006bbe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006bc2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006bc6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006bca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006bce:	b29b      	uxth	r3, r3
 8006bd0:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006bd2:	2300      	movs	r3, #0
}
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	3714      	adds	r7, #20
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	bc80      	pop	{r7}
 8006bdc:	4770      	bx	lr

08006bde <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006bde:	b480      	push	{r7}
 8006be0:	b087      	sub	sp, #28
 8006be2:	af00      	add	r7, sp, #0
 8006be4:	6078      	str	r0, [r7, #4]
 8006be6:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006be8:	683b      	ldr	r3, [r7, #0]
 8006bea:	7b1b      	ldrb	r3, [r3, #12]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	f040 809d 	bne.w	8006d2c <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	785b      	ldrb	r3, [r3, #1]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d04c      	beq.n	8006c94 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006bfa:	687a      	ldr	r2, [r7, #4]
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	781b      	ldrb	r3, [r3, #0]
 8006c00:	009b      	lsls	r3, r3, #2
 8006c02:	4413      	add	r3, r2
 8006c04:	881b      	ldrh	r3, [r3, #0]
 8006c06:	823b      	strh	r3, [r7, #16]
 8006c08:	8a3b      	ldrh	r3, [r7, #16]
 8006c0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d01b      	beq.n	8006c4a <USB_EPClearStall+0x6c>
 8006c12:	687a      	ldr	r2, [r7, #4]
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	781b      	ldrb	r3, [r3, #0]
 8006c18:	009b      	lsls	r3, r3, #2
 8006c1a:	4413      	add	r3, r2
 8006c1c:	881b      	ldrh	r3, [r3, #0]
 8006c1e:	b29b      	uxth	r3, r3
 8006c20:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006c24:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c28:	81fb      	strh	r3, [r7, #14]
 8006c2a:	687a      	ldr	r2, [r7, #4]
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	781b      	ldrb	r3, [r3, #0]
 8006c30:	009b      	lsls	r3, r3, #2
 8006c32:	441a      	add	r2, r3
 8006c34:	89fb      	ldrh	r3, [r7, #14]
 8006c36:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006c3a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006c3e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006c42:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006c46:	b29b      	uxth	r3, r3
 8006c48:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006c4a:	683b      	ldr	r3, [r7, #0]
 8006c4c:	78db      	ldrb	r3, [r3, #3]
 8006c4e:	2b01      	cmp	r3, #1
 8006c50:	d06c      	beq.n	8006d2c <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006c52:	687a      	ldr	r2, [r7, #4]
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	781b      	ldrb	r3, [r3, #0]
 8006c58:	009b      	lsls	r3, r3, #2
 8006c5a:	4413      	add	r3, r2
 8006c5c:	881b      	ldrh	r3, [r3, #0]
 8006c5e:	b29b      	uxth	r3, r3
 8006c60:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006c64:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006c68:	81bb      	strh	r3, [r7, #12]
 8006c6a:	89bb      	ldrh	r3, [r7, #12]
 8006c6c:	f083 0320 	eor.w	r3, r3, #32
 8006c70:	81bb      	strh	r3, [r7, #12]
 8006c72:	687a      	ldr	r2, [r7, #4]
 8006c74:	683b      	ldr	r3, [r7, #0]
 8006c76:	781b      	ldrb	r3, [r3, #0]
 8006c78:	009b      	lsls	r3, r3, #2
 8006c7a:	441a      	add	r2, r3
 8006c7c:	89bb      	ldrh	r3, [r7, #12]
 8006c7e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006c82:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006c86:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006c8a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006c8e:	b29b      	uxth	r3, r3
 8006c90:	8013      	strh	r3, [r2, #0]
 8006c92:	e04b      	b.n	8006d2c <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006c94:	687a      	ldr	r2, [r7, #4]
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	781b      	ldrb	r3, [r3, #0]
 8006c9a:	009b      	lsls	r3, r3, #2
 8006c9c:	4413      	add	r3, r2
 8006c9e:	881b      	ldrh	r3, [r3, #0]
 8006ca0:	82fb      	strh	r3, [r7, #22]
 8006ca2:	8afb      	ldrh	r3, [r7, #22]
 8006ca4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d01b      	beq.n	8006ce4 <USB_EPClearStall+0x106>
 8006cac:	687a      	ldr	r2, [r7, #4]
 8006cae:	683b      	ldr	r3, [r7, #0]
 8006cb0:	781b      	ldrb	r3, [r3, #0]
 8006cb2:	009b      	lsls	r3, r3, #2
 8006cb4:	4413      	add	r3, r2
 8006cb6:	881b      	ldrh	r3, [r3, #0]
 8006cb8:	b29b      	uxth	r3, r3
 8006cba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006cbe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006cc2:	82bb      	strh	r3, [r7, #20]
 8006cc4:	687a      	ldr	r2, [r7, #4]
 8006cc6:	683b      	ldr	r3, [r7, #0]
 8006cc8:	781b      	ldrb	r3, [r3, #0]
 8006cca:	009b      	lsls	r3, r3, #2
 8006ccc:	441a      	add	r2, r3
 8006cce:	8abb      	ldrh	r3, [r7, #20]
 8006cd0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006cd4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006cd8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006cdc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006ce0:	b29b      	uxth	r3, r3
 8006ce2:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006ce4:	687a      	ldr	r2, [r7, #4]
 8006ce6:	683b      	ldr	r3, [r7, #0]
 8006ce8:	781b      	ldrb	r3, [r3, #0]
 8006cea:	009b      	lsls	r3, r3, #2
 8006cec:	4413      	add	r3, r2
 8006cee:	881b      	ldrh	r3, [r3, #0]
 8006cf0:	b29b      	uxth	r3, r3
 8006cf2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006cf6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006cfa:	827b      	strh	r3, [r7, #18]
 8006cfc:	8a7b      	ldrh	r3, [r7, #18]
 8006cfe:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006d02:	827b      	strh	r3, [r7, #18]
 8006d04:	8a7b      	ldrh	r3, [r7, #18]
 8006d06:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006d0a:	827b      	strh	r3, [r7, #18]
 8006d0c:	687a      	ldr	r2, [r7, #4]
 8006d0e:	683b      	ldr	r3, [r7, #0]
 8006d10:	781b      	ldrb	r3, [r3, #0]
 8006d12:	009b      	lsls	r3, r3, #2
 8006d14:	441a      	add	r2, r3
 8006d16:	8a7b      	ldrh	r3, [r7, #18]
 8006d18:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006d1c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006d20:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006d24:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006d28:	b29b      	uxth	r3, r3
 8006d2a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006d2c:	2300      	movs	r3, #0
}
 8006d2e:	4618      	mov	r0, r3
 8006d30:	371c      	adds	r7, #28
 8006d32:	46bd      	mov	sp, r7
 8006d34:	bc80      	pop	{r7}
 8006d36:	4770      	bx	lr

08006d38 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006d38:	b480      	push	{r7}
 8006d3a:	b083      	sub	sp, #12
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
 8006d40:	460b      	mov	r3, r1
 8006d42:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006d44:	78fb      	ldrb	r3, [r7, #3]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d103      	bne.n	8006d52 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	2280      	movs	r2, #128	@ 0x80
 8006d4e:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8006d52:	2300      	movs	r3, #0
}
 8006d54:	4618      	mov	r0, r3
 8006d56:	370c      	adds	r7, #12
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	bc80      	pop	{r7}
 8006d5c:	4770      	bx	lr

08006d5e <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006d5e:	b480      	push	{r7}
 8006d60:	b083      	sub	sp, #12
 8006d62:	af00      	add	r7, sp, #0
 8006d64:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006d66:	2300      	movs	r3, #0
}
 8006d68:	4618      	mov	r0, r3
 8006d6a:	370c      	adds	r7, #12
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	bc80      	pop	{r7}
 8006d70:	4770      	bx	lr

08006d72 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8006d72:	b480      	push	{r7}
 8006d74:	b083      	sub	sp, #12
 8006d76:	af00      	add	r7, sp, #0
 8006d78:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006d7a:	2300      	movs	r3, #0
}
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	370c      	adds	r7, #12
 8006d80:	46bd      	mov	sp, r7
 8006d82:	bc80      	pop	{r7}
 8006d84:	4770      	bx	lr

08006d86 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8006d86:	b480      	push	{r7}
 8006d88:	b085      	sub	sp, #20
 8006d8a:	af00      	add	r7, sp, #0
 8006d8c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006d94:	b29b      	uxth	r3, r3
 8006d96:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006d98:	68fb      	ldr	r3, [r7, #12]
}
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	3714      	adds	r7, #20
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	bc80      	pop	{r7}
 8006da2:	4770      	bx	lr

08006da4 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8006da4:	b480      	push	{r7}
 8006da6:	b083      	sub	sp, #12
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
 8006dac:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006dae:	2300      	movs	r3, #0
}
 8006db0:	4618      	mov	r0, r3
 8006db2:	370c      	adds	r7, #12
 8006db4:	46bd      	mov	sp, r7
 8006db6:	bc80      	pop	{r7}
 8006db8:	4770      	bx	lr

08006dba <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006dba:	b480      	push	{r7}
 8006dbc:	b08b      	sub	sp, #44	@ 0x2c
 8006dbe:	af00      	add	r7, sp, #0
 8006dc0:	60f8      	str	r0, [r7, #12]
 8006dc2:	60b9      	str	r1, [r7, #8]
 8006dc4:	4611      	mov	r1, r2
 8006dc6:	461a      	mov	r2, r3
 8006dc8:	460b      	mov	r3, r1
 8006dca:	80fb      	strh	r3, [r7, #6]
 8006dcc:	4613      	mov	r3, r2
 8006dce:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006dd0:	88bb      	ldrh	r3, [r7, #4]
 8006dd2:	3301      	adds	r3, #1
 8006dd4:	085b      	lsrs	r3, r3, #1
 8006dd6:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006ddc:	68bb      	ldr	r3, [r7, #8]
 8006dde:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006de0:	88fb      	ldrh	r3, [r7, #6]
 8006de2:	005a      	lsls	r2, r3, #1
 8006de4:	697b      	ldr	r3, [r7, #20]
 8006de6:	4413      	add	r3, r2
 8006de8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006dec:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8006dee:	69bb      	ldr	r3, [r7, #24]
 8006df0:	627b      	str	r3, [r7, #36]	@ 0x24
 8006df2:	e01e      	b.n	8006e32 <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 8006df4:	69fb      	ldr	r3, [r7, #28]
 8006df6:	781b      	ldrb	r3, [r3, #0]
 8006df8:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8006dfa:	69fb      	ldr	r3, [r7, #28]
 8006dfc:	3301      	adds	r3, #1
 8006dfe:	781b      	ldrb	r3, [r3, #0]
 8006e00:	021b      	lsls	r3, r3, #8
 8006e02:	b21a      	sxth	r2, r3
 8006e04:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006e08:	4313      	orrs	r3, r2
 8006e0a:	b21b      	sxth	r3, r3
 8006e0c:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8006e0e:	6a3b      	ldr	r3, [r7, #32]
 8006e10:	8a7a      	ldrh	r2, [r7, #18]
 8006e12:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006e14:	6a3b      	ldr	r3, [r7, #32]
 8006e16:	3302      	adds	r3, #2
 8006e18:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006e1a:	6a3b      	ldr	r3, [r7, #32]
 8006e1c:	3302      	adds	r3, #2
 8006e1e:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8006e20:	69fb      	ldr	r3, [r7, #28]
 8006e22:	3301      	adds	r3, #1
 8006e24:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8006e26:	69fb      	ldr	r3, [r7, #28]
 8006e28:	3301      	adds	r3, #1
 8006e2a:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8006e2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e2e:	3b01      	subs	r3, #1
 8006e30:	627b      	str	r3, [r7, #36]	@ 0x24
 8006e32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d1dd      	bne.n	8006df4 <USB_WritePMA+0x3a>
  }
}
 8006e38:	bf00      	nop
 8006e3a:	bf00      	nop
 8006e3c:	372c      	adds	r7, #44	@ 0x2c
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	bc80      	pop	{r7}
 8006e42:	4770      	bx	lr

08006e44 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006e44:	b480      	push	{r7}
 8006e46:	b08b      	sub	sp, #44	@ 0x2c
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	60f8      	str	r0, [r7, #12]
 8006e4c:	60b9      	str	r1, [r7, #8]
 8006e4e:	4611      	mov	r1, r2
 8006e50:	461a      	mov	r2, r3
 8006e52:	460b      	mov	r3, r1
 8006e54:	80fb      	strh	r3, [r7, #6]
 8006e56:	4613      	mov	r3, r2
 8006e58:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006e5a:	88bb      	ldrh	r3, [r7, #4]
 8006e5c:	085b      	lsrs	r3, r3, #1
 8006e5e:	b29b      	uxth	r3, r3
 8006e60:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006e66:	68bb      	ldr	r3, [r7, #8]
 8006e68:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006e6a:	88fb      	ldrh	r3, [r7, #6]
 8006e6c:	005a      	lsls	r2, r3, #1
 8006e6e:	697b      	ldr	r3, [r7, #20]
 8006e70:	4413      	add	r3, r2
 8006e72:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006e76:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8006e78:	69bb      	ldr	r3, [r7, #24]
 8006e7a:	627b      	str	r3, [r7, #36]	@ 0x24
 8006e7c:	e01b      	b.n	8006eb6 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8006e7e:	6a3b      	ldr	r3, [r7, #32]
 8006e80:	881b      	ldrh	r3, [r3, #0]
 8006e82:	b29b      	uxth	r3, r3
 8006e84:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006e86:	6a3b      	ldr	r3, [r7, #32]
 8006e88:	3302      	adds	r3, #2
 8006e8a:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8006e8c:	693b      	ldr	r3, [r7, #16]
 8006e8e:	b2da      	uxtb	r2, r3
 8006e90:	69fb      	ldr	r3, [r7, #28]
 8006e92:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006e94:	69fb      	ldr	r3, [r7, #28]
 8006e96:	3301      	adds	r3, #1
 8006e98:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8006e9a:	693b      	ldr	r3, [r7, #16]
 8006e9c:	0a1b      	lsrs	r3, r3, #8
 8006e9e:	b2da      	uxtb	r2, r3
 8006ea0:	69fb      	ldr	r3, [r7, #28]
 8006ea2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006ea4:	69fb      	ldr	r3, [r7, #28]
 8006ea6:	3301      	adds	r3, #1
 8006ea8:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006eaa:	6a3b      	ldr	r3, [r7, #32]
 8006eac:	3302      	adds	r3, #2
 8006eae:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8006eb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eb2:	3b01      	subs	r3, #1
 8006eb4:	627b      	str	r3, [r7, #36]	@ 0x24
 8006eb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d1e0      	bne.n	8006e7e <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8006ebc:	88bb      	ldrh	r3, [r7, #4]
 8006ebe:	f003 0301 	and.w	r3, r3, #1
 8006ec2:	b29b      	uxth	r3, r3
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d007      	beq.n	8006ed8 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8006ec8:	6a3b      	ldr	r3, [r7, #32]
 8006eca:	881b      	ldrh	r3, [r3, #0]
 8006ecc:	b29b      	uxth	r3, r3
 8006ece:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8006ed0:	693b      	ldr	r3, [r7, #16]
 8006ed2:	b2da      	uxtb	r2, r3
 8006ed4:	69fb      	ldr	r3, [r7, #28]
 8006ed6:	701a      	strb	r2, [r3, #0]
  }
}
 8006ed8:	bf00      	nop
 8006eda:	372c      	adds	r7, #44	@ 0x2c
 8006edc:	46bd      	mov	sp, r7
 8006ede:	bc80      	pop	{r7}
 8006ee0:	4770      	bx	lr

08006ee2 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006ee2:	b580      	push	{r7, lr}
 8006ee4:	b084      	sub	sp, #16
 8006ee6:	af00      	add	r7, sp, #0
 8006ee8:	6078      	str	r0, [r7, #4]
 8006eea:	460b      	mov	r3, r1
 8006eec:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006eee:	2300      	movs	r3, #0
 8006ef0:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	7c1b      	ldrb	r3, [r3, #16]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d115      	bne.n	8006f26 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006efa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006efe:	2202      	movs	r2, #2
 8006f00:	2181      	movs	r1, #129	@ 0x81
 8006f02:	6878      	ldr	r0, [r7, #4]
 8006f04:	f001 fe81 	bl	8008c0a <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2201      	movs	r2, #1
 8006f0c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006f0e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006f12:	2202      	movs	r2, #2
 8006f14:	2101      	movs	r1, #1
 8006f16:	6878      	ldr	r0, [r7, #4]
 8006f18:	f001 fe77 	bl	8008c0a <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2201      	movs	r2, #1
 8006f20:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 8006f24:	e012      	b.n	8006f4c <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006f26:	2340      	movs	r3, #64	@ 0x40
 8006f28:	2202      	movs	r2, #2
 8006f2a:	2181      	movs	r1, #129	@ 0x81
 8006f2c:	6878      	ldr	r0, [r7, #4]
 8006f2e:	f001 fe6c 	bl	8008c0a <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	2201      	movs	r2, #1
 8006f36:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006f38:	2340      	movs	r3, #64	@ 0x40
 8006f3a:	2202      	movs	r2, #2
 8006f3c:	2101      	movs	r1, #1
 8006f3e:	6878      	ldr	r0, [r7, #4]
 8006f40:	f001 fe63 	bl	8008c0a <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2201      	movs	r2, #1
 8006f48:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006f4c:	2308      	movs	r3, #8
 8006f4e:	2203      	movs	r2, #3
 8006f50:	2182      	movs	r1, #130	@ 0x82
 8006f52:	6878      	ldr	r0, [r7, #4]
 8006f54:	f001 fe59 	bl	8008c0a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2201      	movs	r2, #1
 8006f5c:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006f5e:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8006f62:	f001 ff79 	bl	8008e58 <USBD_static_malloc>
 8006f66:	4602      	mov	r2, r0
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d102      	bne.n	8006f7e <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8006f78:	2301      	movs	r3, #1
 8006f7a:	73fb      	strb	r3, [r7, #15]
 8006f7c:	e026      	b.n	8006fcc <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006f84:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8006f90:	68bb      	ldr	r3, [r7, #8]
 8006f92:	2200      	movs	r2, #0
 8006f94:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 8006f98:	68bb      	ldr	r3, [r7, #8]
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	7c1b      	ldrb	r3, [r3, #16]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d109      	bne.n	8006fbc <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006fa8:	68bb      	ldr	r3, [r7, #8]
 8006faa:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006fae:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006fb2:	2101      	movs	r1, #1
 8006fb4:	6878      	ldr	r0, [r7, #4]
 8006fb6:	f001 ff18 	bl	8008dea <USBD_LL_PrepareReceive>
 8006fba:	e007      	b.n	8006fcc <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006fbc:	68bb      	ldr	r3, [r7, #8]
 8006fbe:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006fc2:	2340      	movs	r3, #64	@ 0x40
 8006fc4:	2101      	movs	r1, #1
 8006fc6:	6878      	ldr	r0, [r7, #4]
 8006fc8:	f001 ff0f 	bl	8008dea <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8006fcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fce:	4618      	mov	r0, r3
 8006fd0:	3710      	adds	r7, #16
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	bd80      	pop	{r7, pc}

08006fd6 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006fd6:	b580      	push	{r7, lr}
 8006fd8:	b084      	sub	sp, #16
 8006fda:	af00      	add	r7, sp, #0
 8006fdc:	6078      	str	r0, [r7, #4]
 8006fde:	460b      	mov	r3, r1
 8006fe0:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006fe6:	2181      	movs	r1, #129	@ 0x81
 8006fe8:	6878      	ldr	r0, [r7, #4]
 8006fea:	f001 fe34 	bl	8008c56 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006ff4:	2101      	movs	r1, #1
 8006ff6:	6878      	ldr	r0, [r7, #4]
 8006ff8:	f001 fe2d 	bl	8008c56 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2200      	movs	r2, #0
 8007000:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007004:	2182      	movs	r1, #130	@ 0x82
 8007006:	6878      	ldr	r0, [r7, #4]
 8007008:	f001 fe25 	bl	8008c56 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2200      	movs	r2, #0
 8007010:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007018:	2b00      	cmp	r3, #0
 800701a:	d00e      	beq.n	800703a <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007022:	685b      	ldr	r3, [r3, #4]
 8007024:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800702c:	4618      	mov	r0, r3
 800702e:	f001 ff1f 	bl	8008e70 <USBD_static_free>
    pdev->pClassData = NULL;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	2200      	movs	r2, #0
 8007036:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return ret;
 800703a:	7bfb      	ldrb	r3, [r7, #15]
}
 800703c:	4618      	mov	r0, r3
 800703e:	3710      	adds	r7, #16
 8007040:	46bd      	mov	sp, r7
 8007042:	bd80      	pop	{r7, pc}

08007044 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007044:	b580      	push	{r7, lr}
 8007046:	b086      	sub	sp, #24
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
 800704c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007054:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8007056:	2300      	movs	r3, #0
 8007058:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800705a:	2300      	movs	r3, #0
 800705c:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800705e:	2300      	movs	r3, #0
 8007060:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	781b      	ldrb	r3, [r3, #0]
 8007066:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800706a:	2b00      	cmp	r3, #0
 800706c:	d039      	beq.n	80070e2 <USBD_CDC_Setup+0x9e>
 800706e:	2b20      	cmp	r3, #32
 8007070:	d17f      	bne.n	8007172 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8007072:	683b      	ldr	r3, [r7, #0]
 8007074:	88db      	ldrh	r3, [r3, #6]
 8007076:	2b00      	cmp	r3, #0
 8007078:	d029      	beq.n	80070ce <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	781b      	ldrb	r3, [r3, #0]
 800707e:	b25b      	sxtb	r3, r3
 8007080:	2b00      	cmp	r3, #0
 8007082:	da11      	bge.n	80070a8 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800708a:	689b      	ldr	r3, [r3, #8]
 800708c:	683a      	ldr	r2, [r7, #0]
 800708e:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8007090:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007092:	683a      	ldr	r2, [r7, #0]
 8007094:	88d2      	ldrh	r2, [r2, #6]
 8007096:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007098:	6939      	ldr	r1, [r7, #16]
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	88db      	ldrh	r3, [r3, #6]
 800709e:	461a      	mov	r2, r3
 80070a0:	6878      	ldr	r0, [r7, #4]
 80070a2:	f001 fa05 	bl	80084b0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 80070a6:	e06b      	b.n	8007180 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	785a      	ldrb	r2, [r3, #1]
 80070ac:	693b      	ldr	r3, [r7, #16]
 80070ae:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80070b2:	683b      	ldr	r3, [r7, #0]
 80070b4:	88db      	ldrh	r3, [r3, #6]
 80070b6:	b2da      	uxtb	r2, r3
 80070b8:	693b      	ldr	r3, [r7, #16]
 80070ba:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80070be:	6939      	ldr	r1, [r7, #16]
 80070c0:	683b      	ldr	r3, [r7, #0]
 80070c2:	88db      	ldrh	r3, [r3, #6]
 80070c4:	461a      	mov	r2, r3
 80070c6:	6878      	ldr	r0, [r7, #4]
 80070c8:	f001 fa20 	bl	800850c <USBD_CtlPrepareRx>
      break;
 80070cc:	e058      	b.n	8007180 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80070d4:	689b      	ldr	r3, [r3, #8]
 80070d6:	683a      	ldr	r2, [r7, #0]
 80070d8:	7850      	ldrb	r0, [r2, #1]
 80070da:	2200      	movs	r2, #0
 80070dc:	6839      	ldr	r1, [r7, #0]
 80070de:	4798      	blx	r3
      break;
 80070e0:	e04e      	b.n	8007180 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80070e2:	683b      	ldr	r3, [r7, #0]
 80070e4:	785b      	ldrb	r3, [r3, #1]
 80070e6:	2b0b      	cmp	r3, #11
 80070e8:	d02e      	beq.n	8007148 <USBD_CDC_Setup+0x104>
 80070ea:	2b0b      	cmp	r3, #11
 80070ec:	dc38      	bgt.n	8007160 <USBD_CDC_Setup+0x11c>
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d002      	beq.n	80070f8 <USBD_CDC_Setup+0xb4>
 80070f2:	2b0a      	cmp	r3, #10
 80070f4:	d014      	beq.n	8007120 <USBD_CDC_Setup+0xdc>
 80070f6:	e033      	b.n	8007160 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80070fe:	2b03      	cmp	r3, #3
 8007100:	d107      	bne.n	8007112 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8007102:	f107 030c 	add.w	r3, r7, #12
 8007106:	2202      	movs	r2, #2
 8007108:	4619      	mov	r1, r3
 800710a:	6878      	ldr	r0, [r7, #4]
 800710c:	f001 f9d0 	bl	80084b0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007110:	e02e      	b.n	8007170 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8007112:	6839      	ldr	r1, [r7, #0]
 8007114:	6878      	ldr	r0, [r7, #4]
 8007116:	f001 f961 	bl	80083dc <USBD_CtlError>
            ret = USBD_FAIL;
 800711a:	2302      	movs	r3, #2
 800711c:	75fb      	strb	r3, [r7, #23]
          break;
 800711e:	e027      	b.n	8007170 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007126:	2b03      	cmp	r3, #3
 8007128:	d107      	bne.n	800713a <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800712a:	f107 030f 	add.w	r3, r7, #15
 800712e:	2201      	movs	r2, #1
 8007130:	4619      	mov	r1, r3
 8007132:	6878      	ldr	r0, [r7, #4]
 8007134:	f001 f9bc 	bl	80084b0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007138:	e01a      	b.n	8007170 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800713a:	6839      	ldr	r1, [r7, #0]
 800713c:	6878      	ldr	r0, [r7, #4]
 800713e:	f001 f94d 	bl	80083dc <USBD_CtlError>
            ret = USBD_FAIL;
 8007142:	2302      	movs	r3, #2
 8007144:	75fb      	strb	r3, [r7, #23]
          break;
 8007146:	e013      	b.n	8007170 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800714e:	2b03      	cmp	r3, #3
 8007150:	d00d      	beq.n	800716e <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8007152:	6839      	ldr	r1, [r7, #0]
 8007154:	6878      	ldr	r0, [r7, #4]
 8007156:	f001 f941 	bl	80083dc <USBD_CtlError>
            ret = USBD_FAIL;
 800715a:	2302      	movs	r3, #2
 800715c:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800715e:	e006      	b.n	800716e <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8007160:	6839      	ldr	r1, [r7, #0]
 8007162:	6878      	ldr	r0, [r7, #4]
 8007164:	f001 f93a 	bl	80083dc <USBD_CtlError>
          ret = USBD_FAIL;
 8007168:	2302      	movs	r3, #2
 800716a:	75fb      	strb	r3, [r7, #23]
          break;
 800716c:	e000      	b.n	8007170 <USBD_CDC_Setup+0x12c>
          break;
 800716e:	bf00      	nop
      }
      break;
 8007170:	e006      	b.n	8007180 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8007172:	6839      	ldr	r1, [r7, #0]
 8007174:	6878      	ldr	r0, [r7, #4]
 8007176:	f001 f931 	bl	80083dc <USBD_CtlError>
      ret = USBD_FAIL;
 800717a:	2302      	movs	r3, #2
 800717c:	75fb      	strb	r3, [r7, #23]
      break;
 800717e:	bf00      	nop
  }

  return ret;
 8007180:	7dfb      	ldrb	r3, [r7, #23]
}
 8007182:	4618      	mov	r0, r3
 8007184:	3718      	adds	r7, #24
 8007186:	46bd      	mov	sp, r7
 8007188:	bd80      	pop	{r7, pc}

0800718a <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800718a:	b580      	push	{r7, lr}
 800718c:	b084      	sub	sp, #16
 800718e:	af00      	add	r7, sp, #0
 8007190:	6078      	str	r0, [r7, #4]
 8007192:	460b      	mov	r3, r1
 8007194:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800719c:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80071a4:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d03a      	beq.n	8007226 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80071b0:	78fa      	ldrb	r2, [r7, #3]
 80071b2:	6879      	ldr	r1, [r7, #4]
 80071b4:	4613      	mov	r3, r2
 80071b6:	009b      	lsls	r3, r3, #2
 80071b8:	4413      	add	r3, r2
 80071ba:	009b      	lsls	r3, r3, #2
 80071bc:	440b      	add	r3, r1
 80071be:	331c      	adds	r3, #28
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d029      	beq.n	800721a <USBD_CDC_DataIn+0x90>
 80071c6:	78fa      	ldrb	r2, [r7, #3]
 80071c8:	6879      	ldr	r1, [r7, #4]
 80071ca:	4613      	mov	r3, r2
 80071cc:	009b      	lsls	r3, r3, #2
 80071ce:	4413      	add	r3, r2
 80071d0:	009b      	lsls	r3, r3, #2
 80071d2:	440b      	add	r3, r1
 80071d4:	331c      	adds	r3, #28
 80071d6:	681a      	ldr	r2, [r3, #0]
 80071d8:	78f9      	ldrb	r1, [r7, #3]
 80071da:	68b8      	ldr	r0, [r7, #8]
 80071dc:	460b      	mov	r3, r1
 80071de:	009b      	lsls	r3, r3, #2
 80071e0:	440b      	add	r3, r1
 80071e2:	00db      	lsls	r3, r3, #3
 80071e4:	4403      	add	r3, r0
 80071e6:	3320      	adds	r3, #32
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	fbb2 f1f3 	udiv	r1, r2, r3
 80071ee:	fb01 f303 	mul.w	r3, r1, r3
 80071f2:	1ad3      	subs	r3, r2, r3
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d110      	bne.n	800721a <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 80071f8:	78fa      	ldrb	r2, [r7, #3]
 80071fa:	6879      	ldr	r1, [r7, #4]
 80071fc:	4613      	mov	r3, r2
 80071fe:	009b      	lsls	r3, r3, #2
 8007200:	4413      	add	r3, r2
 8007202:	009b      	lsls	r3, r3, #2
 8007204:	440b      	add	r3, r1
 8007206:	331c      	adds	r3, #28
 8007208:	2200      	movs	r2, #0
 800720a:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800720c:	78f9      	ldrb	r1, [r7, #3]
 800720e:	2300      	movs	r3, #0
 8007210:	2200      	movs	r2, #0
 8007212:	6878      	ldr	r0, [r7, #4]
 8007214:	f001 fdc6 	bl	8008da4 <USBD_LL_Transmit>
 8007218:	e003      	b.n	8007222 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	2200      	movs	r2, #0
 800721e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }
    return USBD_OK;
 8007222:	2300      	movs	r3, #0
 8007224:	e000      	b.n	8007228 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8007226:	2302      	movs	r3, #2
  }
}
 8007228:	4618      	mov	r0, r3
 800722a:	3710      	adds	r7, #16
 800722c:	46bd      	mov	sp, r7
 800722e:	bd80      	pop	{r7, pc}

08007230 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007230:	b580      	push	{r7, lr}
 8007232:	b084      	sub	sp, #16
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
 8007238:	460b      	mov	r3, r1
 800723a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007242:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007244:	78fb      	ldrb	r3, [r7, #3]
 8007246:	4619      	mov	r1, r3
 8007248:	6878      	ldr	r0, [r7, #4]
 800724a:	f001 fdf1 	bl	8008e30 <USBD_LL_GetRxDataSize>
 800724e:	4602      	mov	r2, r0
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800725c:	2b00      	cmp	r3, #0
 800725e:	d00d      	beq.n	800727c <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007266:	68db      	ldr	r3, [r3, #12]
 8007268:	68fa      	ldr	r2, [r7, #12]
 800726a:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800726e:	68fa      	ldr	r2, [r7, #12]
 8007270:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8007274:	4611      	mov	r1, r2
 8007276:	4798      	blx	r3

    return USBD_OK;
 8007278:	2300      	movs	r3, #0
 800727a:	e000      	b.n	800727e <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800727c:	2302      	movs	r3, #2
  }
}
 800727e:	4618      	mov	r0, r3
 8007280:	3710      	adds	r7, #16
 8007282:	46bd      	mov	sp, r7
 8007284:	bd80      	pop	{r7, pc}

08007286 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007286:	b580      	push	{r7, lr}
 8007288:	b084      	sub	sp, #16
 800728a:	af00      	add	r7, sp, #0
 800728c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007294:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800729c:	2b00      	cmp	r3, #0
 800729e:	d014      	beq.n	80072ca <USBD_CDC_EP0_RxReady+0x44>
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80072a6:	2bff      	cmp	r3, #255	@ 0xff
 80072a8:	d00f      	beq.n	80072ca <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80072b0:	689b      	ldr	r3, [r3, #8]
 80072b2:	68fa      	ldr	r2, [r7, #12]
 80072b4:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 80072b8:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80072ba:	68fa      	ldr	r2, [r7, #12]
 80072bc:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80072c0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	22ff      	movs	r2, #255	@ 0xff
 80072c6:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

  }
  return USBD_OK;
 80072ca:	2300      	movs	r3, #0
}
 80072cc:	4618      	mov	r0, r3
 80072ce:	3710      	adds	r7, #16
 80072d0:	46bd      	mov	sp, r7
 80072d2:	bd80      	pop	{r7, pc}

080072d4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80072d4:	b480      	push	{r7}
 80072d6:	b083      	sub	sp, #12
 80072d8:	af00      	add	r7, sp, #0
 80072da:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2243      	movs	r2, #67	@ 0x43
 80072e0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 80072e2:	4b03      	ldr	r3, [pc, #12]	@ (80072f0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80072e4:	4618      	mov	r0, r3
 80072e6:	370c      	adds	r7, #12
 80072e8:	46bd      	mov	sp, r7
 80072ea:	bc80      	pop	{r7}
 80072ec:	4770      	bx	lr
 80072ee:	bf00      	nop
 80072f0:	200000b4 	.word	0x200000b4

080072f4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80072f4:	b480      	push	{r7}
 80072f6:	b083      	sub	sp, #12
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2243      	movs	r2, #67	@ 0x43
 8007300:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8007302:	4b03      	ldr	r3, [pc, #12]	@ (8007310 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007304:	4618      	mov	r0, r3
 8007306:	370c      	adds	r7, #12
 8007308:	46bd      	mov	sp, r7
 800730a:	bc80      	pop	{r7}
 800730c:	4770      	bx	lr
 800730e:	bf00      	nop
 8007310:	20000070 	.word	0x20000070

08007314 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007314:	b480      	push	{r7}
 8007316:	b083      	sub	sp, #12
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	2243      	movs	r2, #67	@ 0x43
 8007320:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8007322:	4b03      	ldr	r3, [pc, #12]	@ (8007330 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007324:	4618      	mov	r0, r3
 8007326:	370c      	adds	r7, #12
 8007328:	46bd      	mov	sp, r7
 800732a:	bc80      	pop	{r7}
 800732c:	4770      	bx	lr
 800732e:	bf00      	nop
 8007330:	200000f8 	.word	0x200000f8

08007334 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007334:	b480      	push	{r7}
 8007336:	b083      	sub	sp, #12
 8007338:	af00      	add	r7, sp, #0
 800733a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	220a      	movs	r2, #10
 8007340:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8007342:	4b03      	ldr	r3, [pc, #12]	@ (8007350 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007344:	4618      	mov	r0, r3
 8007346:	370c      	adds	r7, #12
 8007348:	46bd      	mov	sp, r7
 800734a:	bc80      	pop	{r7}
 800734c:	4770      	bx	lr
 800734e:	bf00      	nop
 8007350:	2000002c 	.word	0x2000002c

08007354 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8007354:	b480      	push	{r7}
 8007356:	b085      	sub	sp, #20
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
 800735c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800735e:	2302      	movs	r3, #2
 8007360:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8007362:	683b      	ldr	r3, [r7, #0]
 8007364:	2b00      	cmp	r3, #0
 8007366:	d005      	beq.n	8007374 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	683a      	ldr	r2, [r7, #0]
 800736c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 8007370:	2300      	movs	r3, #0
 8007372:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007374:	7bfb      	ldrb	r3, [r7, #15]
}
 8007376:	4618      	mov	r0, r3
 8007378:	3714      	adds	r7, #20
 800737a:	46bd      	mov	sp, r7
 800737c:	bc80      	pop	{r7}
 800737e:	4770      	bx	lr

08007380 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8007380:	b480      	push	{r7}
 8007382:	b087      	sub	sp, #28
 8007384:	af00      	add	r7, sp, #0
 8007386:	60f8      	str	r0, [r7, #12]
 8007388:	60b9      	str	r1, [r7, #8]
 800738a:	4613      	mov	r3, r2
 800738c:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007394:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8007396:	697b      	ldr	r3, [r7, #20]
 8007398:	68ba      	ldr	r2, [r7, #8]
 800739a:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800739e:	88fa      	ldrh	r2, [r7, #6]
 80073a0:	697b      	ldr	r3, [r7, #20]
 80073a2:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 80073a6:	2300      	movs	r3, #0
}
 80073a8:	4618      	mov	r0, r3
 80073aa:	371c      	adds	r7, #28
 80073ac:	46bd      	mov	sp, r7
 80073ae:	bc80      	pop	{r7}
 80073b0:	4770      	bx	lr

080073b2 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 80073b2:	b480      	push	{r7}
 80073b4:	b085      	sub	sp, #20
 80073b6:	af00      	add	r7, sp, #0
 80073b8:	6078      	str	r0, [r7, #4]
 80073ba:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80073c2:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	683a      	ldr	r2, [r7, #0]
 80073c8:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 80073cc:	2300      	movs	r3, #0
}
 80073ce:	4618      	mov	r0, r3
 80073d0:	3714      	adds	r7, #20
 80073d2:	46bd      	mov	sp, r7
 80073d4:	bc80      	pop	{r7}
 80073d6:	4770      	bx	lr

080073d8 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	b084      	sub	sp, #16
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80073e6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d01c      	beq.n	800742c <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d115      	bne.n	8007428 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	2201      	movs	r2, #1
 8007400:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
                       (uint16_t)hcdc->TxLength);
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800741a:	b29b      	uxth	r3, r3
 800741c:	2181      	movs	r1, #129	@ 0x81
 800741e:	6878      	ldr	r0, [r7, #4]
 8007420:	f001 fcc0 	bl	8008da4 <USBD_LL_Transmit>

      return USBD_OK;
 8007424:	2300      	movs	r3, #0
 8007426:	e002      	b.n	800742e <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8007428:	2301      	movs	r3, #1
 800742a:	e000      	b.n	800742e <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800742c:	2302      	movs	r3, #2
  }
}
 800742e:	4618      	mov	r0, r3
 8007430:	3710      	adds	r7, #16
 8007432:	46bd      	mov	sp, r7
 8007434:	bd80      	pop	{r7, pc}

08007436 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007436:	b580      	push	{r7, lr}
 8007438:	b084      	sub	sp, #16
 800743a:	af00      	add	r7, sp, #0
 800743c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007444:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800744c:	2b00      	cmp	r3, #0
 800744e:	d017      	beq.n	8007480 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	7c1b      	ldrb	r3, [r3, #16]
 8007454:	2b00      	cmp	r3, #0
 8007456:	d109      	bne.n	800746c <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800745e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007462:	2101      	movs	r1, #1
 8007464:	6878      	ldr	r0, [r7, #4]
 8007466:	f001 fcc0 	bl	8008dea <USBD_LL_PrepareReceive>
 800746a:	e007      	b.n	800747c <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007472:	2340      	movs	r3, #64	@ 0x40
 8007474:	2101      	movs	r1, #1
 8007476:	6878      	ldr	r0, [r7, #4]
 8007478:	f001 fcb7 	bl	8008dea <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800747c:	2300      	movs	r3, #0
 800747e:	e000      	b.n	8007482 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8007480:	2302      	movs	r3, #2
  }
}
 8007482:	4618      	mov	r0, r3
 8007484:	3710      	adds	r7, #16
 8007486:	46bd      	mov	sp, r7
 8007488:	bd80      	pop	{r7, pc}

0800748a <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800748a:	b580      	push	{r7, lr}
 800748c:	b084      	sub	sp, #16
 800748e:	af00      	add	r7, sp, #0
 8007490:	60f8      	str	r0, [r7, #12]
 8007492:	60b9      	str	r1, [r7, #8]
 8007494:	4613      	mov	r3, r2
 8007496:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	2b00      	cmp	r3, #0
 800749c:	d101      	bne.n	80074a2 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800749e:	2302      	movs	r3, #2
 80074a0:	e01a      	b.n	80074d8 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d003      	beq.n	80074b4 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	2200      	movs	r2, #0
 80074b0:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80074b4:	68bb      	ldr	r3, [r7, #8]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d003      	beq.n	80074c2 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	68ba      	ldr	r2, [r7, #8]
 80074be:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	2201      	movs	r2, #1
 80074c6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	79fa      	ldrb	r2, [r7, #7]
 80074ce:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80074d0:	68f8      	ldr	r0, [r7, #12]
 80074d2:	f001 fb25 	bl	8008b20 <USBD_LL_Init>

  return USBD_OK;
 80074d6:	2300      	movs	r3, #0
}
 80074d8:	4618      	mov	r0, r3
 80074da:	3710      	adds	r7, #16
 80074dc:	46bd      	mov	sp, r7
 80074de:	bd80      	pop	{r7, pc}

080074e0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80074e0:	b480      	push	{r7}
 80074e2:	b085      	sub	sp, #20
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]
 80074e8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80074ea:	2300      	movs	r3, #0
 80074ec:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80074ee:	683b      	ldr	r3, [r7, #0]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d006      	beq.n	8007502 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	683a      	ldr	r2, [r7, #0]
 80074f8:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 80074fc:	2300      	movs	r3, #0
 80074fe:	73fb      	strb	r3, [r7, #15]
 8007500:	e001      	b.n	8007506 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8007502:	2302      	movs	r3, #2
 8007504:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007506:	7bfb      	ldrb	r3, [r7, #15]
}
 8007508:	4618      	mov	r0, r3
 800750a:	3714      	adds	r7, #20
 800750c:	46bd      	mov	sp, r7
 800750e:	bc80      	pop	{r7}
 8007510:	4770      	bx	lr

08007512 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007512:	b580      	push	{r7, lr}
 8007514:	b082      	sub	sp, #8
 8007516:	af00      	add	r7, sp, #0
 8007518:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800751a:	6878      	ldr	r0, [r7, #4]
 800751c:	f001 fb5a 	bl	8008bd4 <USBD_LL_Start>

  return USBD_OK;
 8007520:	2300      	movs	r3, #0
}
 8007522:	4618      	mov	r0, r3
 8007524:	3708      	adds	r7, #8
 8007526:	46bd      	mov	sp, r7
 8007528:	bd80      	pop	{r7, pc}

0800752a <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800752a:	b480      	push	{r7}
 800752c:	b083      	sub	sp, #12
 800752e:	af00      	add	r7, sp, #0
 8007530:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007532:	2300      	movs	r3, #0
}
 8007534:	4618      	mov	r0, r3
 8007536:	370c      	adds	r7, #12
 8007538:	46bd      	mov	sp, r7
 800753a:	bc80      	pop	{r7}
 800753c:	4770      	bx	lr

0800753e <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800753e:	b580      	push	{r7, lr}
 8007540:	b084      	sub	sp, #16
 8007542:	af00      	add	r7, sp, #0
 8007544:	6078      	str	r0, [r7, #4]
 8007546:	460b      	mov	r3, r1
 8007548:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800754a:	2302      	movs	r3, #2
 800754c:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007554:	2b00      	cmp	r3, #0
 8007556:	d00c      	beq.n	8007572 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	78fa      	ldrb	r2, [r7, #3]
 8007562:	4611      	mov	r1, r2
 8007564:	6878      	ldr	r0, [r7, #4]
 8007566:	4798      	blx	r3
 8007568:	4603      	mov	r3, r0
 800756a:	2b00      	cmp	r3, #0
 800756c:	d101      	bne.n	8007572 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800756e:	2300      	movs	r3, #0
 8007570:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8007572:	7bfb      	ldrb	r3, [r7, #15]
}
 8007574:	4618      	mov	r0, r3
 8007576:	3710      	adds	r7, #16
 8007578:	46bd      	mov	sp, r7
 800757a:	bd80      	pop	{r7, pc}

0800757c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800757c:	b580      	push	{r7, lr}
 800757e:	b082      	sub	sp, #8
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
 8007584:	460b      	mov	r3, r1
 8007586:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800758e:	685b      	ldr	r3, [r3, #4]
 8007590:	78fa      	ldrb	r2, [r7, #3]
 8007592:	4611      	mov	r1, r2
 8007594:	6878      	ldr	r0, [r7, #4]
 8007596:	4798      	blx	r3

  return USBD_OK;
 8007598:	2300      	movs	r3, #0
}
 800759a:	4618      	mov	r0, r3
 800759c:	3708      	adds	r7, #8
 800759e:	46bd      	mov	sp, r7
 80075a0:	bd80      	pop	{r7, pc}

080075a2 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80075a2:	b580      	push	{r7, lr}
 80075a4:	b082      	sub	sp, #8
 80075a6:	af00      	add	r7, sp, #0
 80075a8:	6078      	str	r0, [r7, #4]
 80075aa:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80075b2:	6839      	ldr	r1, [r7, #0]
 80075b4:	4618      	mov	r0, r3
 80075b6:	f000 fed8 	bl	800836a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	2201      	movs	r2, #1
 80075be:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80075c8:	461a      	mov	r2, r3
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 80075d6:	f003 031f 	and.w	r3, r3, #31
 80075da:	2b02      	cmp	r3, #2
 80075dc:	d016      	beq.n	800760c <USBD_LL_SetupStage+0x6a>
 80075de:	2b02      	cmp	r3, #2
 80075e0:	d81c      	bhi.n	800761c <USBD_LL_SetupStage+0x7a>
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d002      	beq.n	80075ec <USBD_LL_SetupStage+0x4a>
 80075e6:	2b01      	cmp	r3, #1
 80075e8:	d008      	beq.n	80075fc <USBD_LL_SetupStage+0x5a>
 80075ea:	e017      	b.n	800761c <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80075f2:	4619      	mov	r1, r3
 80075f4:	6878      	ldr	r0, [r7, #4]
 80075f6:	f000 f9cb 	bl	8007990 <USBD_StdDevReq>
      break;
 80075fa:	e01a      	b.n	8007632 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8007602:	4619      	mov	r1, r3
 8007604:	6878      	ldr	r0, [r7, #4]
 8007606:	f000 fa2d 	bl	8007a64 <USBD_StdItfReq>
      break;
 800760a:	e012      	b.n	8007632 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8007612:	4619      	mov	r1, r3
 8007614:	6878      	ldr	r0, [r7, #4]
 8007616:	f000 fa6d 	bl	8007af4 <USBD_StdEPReq>
      break;
 800761a:	e00a      	b.n	8007632 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8007622:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8007626:	b2db      	uxtb	r3, r3
 8007628:	4619      	mov	r1, r3
 800762a:	6878      	ldr	r0, [r7, #4]
 800762c:	f001 fb32 	bl	8008c94 <USBD_LL_StallEP>
      break;
 8007630:	bf00      	nop
  }

  return USBD_OK;
 8007632:	2300      	movs	r3, #0
}
 8007634:	4618      	mov	r0, r3
 8007636:	3708      	adds	r7, #8
 8007638:	46bd      	mov	sp, r7
 800763a:	bd80      	pop	{r7, pc}

0800763c <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800763c:	b580      	push	{r7, lr}
 800763e:	b086      	sub	sp, #24
 8007640:	af00      	add	r7, sp, #0
 8007642:	60f8      	str	r0, [r7, #12]
 8007644:	460b      	mov	r3, r1
 8007646:	607a      	str	r2, [r7, #4]
 8007648:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800764a:	7afb      	ldrb	r3, [r7, #11]
 800764c:	2b00      	cmp	r3, #0
 800764e:	d14b      	bne.n	80076e8 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8007656:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800765e:	2b03      	cmp	r3, #3
 8007660:	d134      	bne.n	80076cc <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8007662:	697b      	ldr	r3, [r7, #20]
 8007664:	68da      	ldr	r2, [r3, #12]
 8007666:	697b      	ldr	r3, [r7, #20]
 8007668:	691b      	ldr	r3, [r3, #16]
 800766a:	429a      	cmp	r2, r3
 800766c:	d919      	bls.n	80076a2 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800766e:	697b      	ldr	r3, [r7, #20]
 8007670:	68da      	ldr	r2, [r3, #12]
 8007672:	697b      	ldr	r3, [r7, #20]
 8007674:	691b      	ldr	r3, [r3, #16]
 8007676:	1ad2      	subs	r2, r2, r3
 8007678:	697b      	ldr	r3, [r7, #20]
 800767a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800767c:	697b      	ldr	r3, [r7, #20]
 800767e:	68da      	ldr	r2, [r3, #12]
 8007680:	697b      	ldr	r3, [r7, #20]
 8007682:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007684:	429a      	cmp	r2, r3
 8007686:	d203      	bcs.n	8007690 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007688:	697b      	ldr	r3, [r7, #20]
 800768a:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800768c:	b29b      	uxth	r3, r3
 800768e:	e002      	b.n	8007696 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007690:	697b      	ldr	r3, [r7, #20]
 8007692:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007694:	b29b      	uxth	r3, r3
 8007696:	461a      	mov	r2, r3
 8007698:	6879      	ldr	r1, [r7, #4]
 800769a:	68f8      	ldr	r0, [r7, #12]
 800769c:	f000 ff54 	bl	8008548 <USBD_CtlContinueRx>
 80076a0:	e038      	b.n	8007714 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80076a8:	691b      	ldr	r3, [r3, #16]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d00a      	beq.n	80076c4 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80076b4:	2b03      	cmp	r3, #3
 80076b6:	d105      	bne.n	80076c4 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80076be:	691b      	ldr	r3, [r3, #16]
 80076c0:	68f8      	ldr	r0, [r7, #12]
 80076c2:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80076c4:	68f8      	ldr	r0, [r7, #12]
 80076c6:	f000 ff51 	bl	800856c <USBD_CtlSendStatus>
 80076ca:	e023      	b.n	8007714 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80076d2:	2b05      	cmp	r3, #5
 80076d4:	d11e      	bne.n	8007714 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	2200      	movs	r2, #0
 80076da:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 80076de:	2100      	movs	r1, #0
 80076e0:	68f8      	ldr	r0, [r7, #12]
 80076e2:	f001 fad7 	bl	8008c94 <USBD_LL_StallEP>
 80076e6:	e015      	b.n	8007714 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80076ee:	699b      	ldr	r3, [r3, #24]
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d00d      	beq.n	8007710 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80076fa:	2b03      	cmp	r3, #3
 80076fc:	d108      	bne.n	8007710 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007704:	699b      	ldr	r3, [r3, #24]
 8007706:	7afa      	ldrb	r2, [r7, #11]
 8007708:	4611      	mov	r1, r2
 800770a:	68f8      	ldr	r0, [r7, #12]
 800770c:	4798      	blx	r3
 800770e:	e001      	b.n	8007714 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007710:	2302      	movs	r3, #2
 8007712:	e000      	b.n	8007716 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8007714:	2300      	movs	r3, #0
}
 8007716:	4618      	mov	r0, r3
 8007718:	3718      	adds	r7, #24
 800771a:	46bd      	mov	sp, r7
 800771c:	bd80      	pop	{r7, pc}

0800771e <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800771e:	b580      	push	{r7, lr}
 8007720:	b086      	sub	sp, #24
 8007722:	af00      	add	r7, sp, #0
 8007724:	60f8      	str	r0, [r7, #12]
 8007726:	460b      	mov	r3, r1
 8007728:	607a      	str	r2, [r7, #4]
 800772a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800772c:	7afb      	ldrb	r3, [r7, #11]
 800772e:	2b00      	cmp	r3, #0
 8007730:	d17f      	bne.n	8007832 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	3314      	adds	r3, #20
 8007736:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800773e:	2b02      	cmp	r3, #2
 8007740:	d15c      	bne.n	80077fc <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8007742:	697b      	ldr	r3, [r7, #20]
 8007744:	68da      	ldr	r2, [r3, #12]
 8007746:	697b      	ldr	r3, [r7, #20]
 8007748:	691b      	ldr	r3, [r3, #16]
 800774a:	429a      	cmp	r2, r3
 800774c:	d915      	bls.n	800777a <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800774e:	697b      	ldr	r3, [r7, #20]
 8007750:	68da      	ldr	r2, [r3, #12]
 8007752:	697b      	ldr	r3, [r7, #20]
 8007754:	691b      	ldr	r3, [r3, #16]
 8007756:	1ad2      	subs	r2, r2, r3
 8007758:	697b      	ldr	r3, [r7, #20]
 800775a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800775c:	697b      	ldr	r3, [r7, #20]
 800775e:	68db      	ldr	r3, [r3, #12]
 8007760:	b29b      	uxth	r3, r3
 8007762:	461a      	mov	r2, r3
 8007764:	6879      	ldr	r1, [r7, #4]
 8007766:	68f8      	ldr	r0, [r7, #12]
 8007768:	f000 febe 	bl	80084e8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800776c:	2300      	movs	r3, #0
 800776e:	2200      	movs	r2, #0
 8007770:	2100      	movs	r1, #0
 8007772:	68f8      	ldr	r0, [r7, #12]
 8007774:	f001 fb39 	bl	8008dea <USBD_LL_PrepareReceive>
 8007778:	e04e      	b.n	8007818 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800777a:	697b      	ldr	r3, [r7, #20]
 800777c:	689b      	ldr	r3, [r3, #8]
 800777e:	697a      	ldr	r2, [r7, #20]
 8007780:	6912      	ldr	r2, [r2, #16]
 8007782:	fbb3 f1f2 	udiv	r1, r3, r2
 8007786:	fb01 f202 	mul.w	r2, r1, r2
 800778a:	1a9b      	subs	r3, r3, r2
 800778c:	2b00      	cmp	r3, #0
 800778e:	d11c      	bne.n	80077ca <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8007790:	697b      	ldr	r3, [r7, #20]
 8007792:	689a      	ldr	r2, [r3, #8]
 8007794:	697b      	ldr	r3, [r7, #20]
 8007796:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007798:	429a      	cmp	r2, r3
 800779a:	d316      	bcc.n	80077ca <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800779c:	697b      	ldr	r3, [r7, #20]
 800779e:	689a      	ldr	r2, [r3, #8]
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80077a6:	429a      	cmp	r2, r3
 80077a8:	d20f      	bcs.n	80077ca <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80077aa:	2200      	movs	r2, #0
 80077ac:	2100      	movs	r1, #0
 80077ae:	68f8      	ldr	r0, [r7, #12]
 80077b0:	f000 fe9a 	bl	80084e8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	2200      	movs	r2, #0
 80077b8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80077bc:	2300      	movs	r3, #0
 80077be:	2200      	movs	r2, #0
 80077c0:	2100      	movs	r1, #0
 80077c2:	68f8      	ldr	r0, [r7, #12]
 80077c4:	f001 fb11 	bl	8008dea <USBD_LL_PrepareReceive>
 80077c8:	e026      	b.n	8007818 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80077d0:	68db      	ldr	r3, [r3, #12]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d00a      	beq.n	80077ec <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80077dc:	2b03      	cmp	r3, #3
 80077de:	d105      	bne.n	80077ec <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80077e6:	68db      	ldr	r3, [r3, #12]
 80077e8:	68f8      	ldr	r0, [r7, #12]
 80077ea:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80077ec:	2180      	movs	r1, #128	@ 0x80
 80077ee:	68f8      	ldr	r0, [r7, #12]
 80077f0:	f001 fa50 	bl	8008c94 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80077f4:	68f8      	ldr	r0, [r7, #12]
 80077f6:	f000 fecc 	bl	8008592 <USBD_CtlReceiveStatus>
 80077fa:	e00d      	b.n	8007818 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007802:	2b04      	cmp	r3, #4
 8007804:	d004      	beq.n	8007810 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800780c:	2b00      	cmp	r3, #0
 800780e:	d103      	bne.n	8007818 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8007810:	2180      	movs	r1, #128	@ 0x80
 8007812:	68f8      	ldr	r0, [r7, #12]
 8007814:	f001 fa3e 	bl	8008c94 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800781e:	2b01      	cmp	r3, #1
 8007820:	d11d      	bne.n	800785e <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8007822:	68f8      	ldr	r0, [r7, #12]
 8007824:	f7ff fe81 	bl	800752a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	2200      	movs	r2, #0
 800782c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8007830:	e015      	b.n	800785e <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007838:	695b      	ldr	r3, [r3, #20]
 800783a:	2b00      	cmp	r3, #0
 800783c:	d00d      	beq.n	800785a <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8007844:	2b03      	cmp	r3, #3
 8007846:	d108      	bne.n	800785a <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800784e:	695b      	ldr	r3, [r3, #20]
 8007850:	7afa      	ldrb	r2, [r7, #11]
 8007852:	4611      	mov	r1, r2
 8007854:	68f8      	ldr	r0, [r7, #12]
 8007856:	4798      	blx	r3
 8007858:	e001      	b.n	800785e <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800785a:	2302      	movs	r3, #2
 800785c:	e000      	b.n	8007860 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800785e:	2300      	movs	r3, #0
}
 8007860:	4618      	mov	r0, r3
 8007862:	3718      	adds	r7, #24
 8007864:	46bd      	mov	sp, r7
 8007866:	bd80      	pop	{r7, pc}

08007868 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007868:	b580      	push	{r7, lr}
 800786a:	b082      	sub	sp, #8
 800786c:	af00      	add	r7, sp, #0
 800786e:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007870:	2340      	movs	r3, #64	@ 0x40
 8007872:	2200      	movs	r2, #0
 8007874:	2100      	movs	r1, #0
 8007876:	6878      	ldr	r0, [r7, #4]
 8007878:	f001 f9c7 	bl	8008c0a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	2201      	movs	r2, #1
 8007880:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2240      	movs	r2, #64	@ 0x40
 8007888:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800788c:	2340      	movs	r3, #64	@ 0x40
 800788e:	2200      	movs	r2, #0
 8007890:	2180      	movs	r1, #128	@ 0x80
 8007892:	6878      	ldr	r0, [r7, #4]
 8007894:	f001 f9b9 	bl	8008c0a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	2201      	movs	r2, #1
 800789c:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	2240      	movs	r2, #64	@ 0x40
 80078a2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	2201      	movs	r2, #1
 80078a8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2200      	movs	r2, #0
 80078b0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2200      	movs	r2, #0
 80078b8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	2200      	movs	r2, #0
 80078be:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d009      	beq.n	80078e0 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80078d2:	685b      	ldr	r3, [r3, #4]
 80078d4:	687a      	ldr	r2, [r7, #4]
 80078d6:	6852      	ldr	r2, [r2, #4]
 80078d8:	b2d2      	uxtb	r2, r2
 80078da:	4611      	mov	r1, r2
 80078dc:	6878      	ldr	r0, [r7, #4]
 80078de:	4798      	blx	r3
  }

  return USBD_OK;
 80078e0:	2300      	movs	r3, #0
}
 80078e2:	4618      	mov	r0, r3
 80078e4:	3708      	adds	r7, #8
 80078e6:	46bd      	mov	sp, r7
 80078e8:	bd80      	pop	{r7, pc}

080078ea <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80078ea:	b480      	push	{r7}
 80078ec:	b083      	sub	sp, #12
 80078ee:	af00      	add	r7, sp, #0
 80078f0:	6078      	str	r0, [r7, #4]
 80078f2:	460b      	mov	r3, r1
 80078f4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	78fa      	ldrb	r2, [r7, #3]
 80078fa:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80078fc:	2300      	movs	r3, #0
}
 80078fe:	4618      	mov	r0, r3
 8007900:	370c      	adds	r7, #12
 8007902:	46bd      	mov	sp, r7
 8007904:	bc80      	pop	{r7}
 8007906:	4770      	bx	lr

08007908 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007908:	b480      	push	{r7}
 800790a:	b083      	sub	sp, #12
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	2204      	movs	r2, #4
 8007920:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8007924:	2300      	movs	r3, #0
}
 8007926:	4618      	mov	r0, r3
 8007928:	370c      	adds	r7, #12
 800792a:	46bd      	mov	sp, r7
 800792c:	bc80      	pop	{r7}
 800792e:	4770      	bx	lr

08007930 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007930:	b480      	push	{r7}
 8007932:	b083      	sub	sp, #12
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800793e:	2b04      	cmp	r3, #4
 8007940:	d105      	bne.n	800794e <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800794e:	2300      	movs	r3, #0
}
 8007950:	4618      	mov	r0, r3
 8007952:	370c      	adds	r7, #12
 8007954:	46bd      	mov	sp, r7
 8007956:	bc80      	pop	{r7}
 8007958:	4770      	bx	lr

0800795a <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800795a:	b580      	push	{r7, lr}
 800795c:	b082      	sub	sp, #8
 800795e:	af00      	add	r7, sp, #0
 8007960:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007968:	2b03      	cmp	r3, #3
 800796a:	d10b      	bne.n	8007984 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007972:	69db      	ldr	r3, [r3, #28]
 8007974:	2b00      	cmp	r3, #0
 8007976:	d005      	beq.n	8007984 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800797e:	69db      	ldr	r3, [r3, #28]
 8007980:	6878      	ldr	r0, [r7, #4]
 8007982:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007984:	2300      	movs	r3, #0
}
 8007986:	4618      	mov	r0, r3
 8007988:	3708      	adds	r7, #8
 800798a:	46bd      	mov	sp, r7
 800798c:	bd80      	pop	{r7, pc}
	...

08007990 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8007990:	b580      	push	{r7, lr}
 8007992:	b084      	sub	sp, #16
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]
 8007998:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800799a:	2300      	movs	r3, #0
 800799c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800799e:	683b      	ldr	r3, [r7, #0]
 80079a0:	781b      	ldrb	r3, [r3, #0]
 80079a2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80079a6:	2b40      	cmp	r3, #64	@ 0x40
 80079a8:	d005      	beq.n	80079b6 <USBD_StdDevReq+0x26>
 80079aa:	2b40      	cmp	r3, #64	@ 0x40
 80079ac:	d84f      	bhi.n	8007a4e <USBD_StdDevReq+0xbe>
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d009      	beq.n	80079c6 <USBD_StdDevReq+0x36>
 80079b2:	2b20      	cmp	r3, #32
 80079b4:	d14b      	bne.n	8007a4e <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80079bc:	689b      	ldr	r3, [r3, #8]
 80079be:	6839      	ldr	r1, [r7, #0]
 80079c0:	6878      	ldr	r0, [r7, #4]
 80079c2:	4798      	blx	r3
      break;
 80079c4:	e048      	b.n	8007a58 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80079c6:	683b      	ldr	r3, [r7, #0]
 80079c8:	785b      	ldrb	r3, [r3, #1]
 80079ca:	2b09      	cmp	r3, #9
 80079cc:	d839      	bhi.n	8007a42 <USBD_StdDevReq+0xb2>
 80079ce:	a201      	add	r2, pc, #4	@ (adr r2, 80079d4 <USBD_StdDevReq+0x44>)
 80079d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079d4:	08007a25 	.word	0x08007a25
 80079d8:	08007a39 	.word	0x08007a39
 80079dc:	08007a43 	.word	0x08007a43
 80079e0:	08007a2f 	.word	0x08007a2f
 80079e4:	08007a43 	.word	0x08007a43
 80079e8:	08007a07 	.word	0x08007a07
 80079ec:	080079fd 	.word	0x080079fd
 80079f0:	08007a43 	.word	0x08007a43
 80079f4:	08007a1b 	.word	0x08007a1b
 80079f8:	08007a11 	.word	0x08007a11
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80079fc:	6839      	ldr	r1, [r7, #0]
 80079fe:	6878      	ldr	r0, [r7, #4]
 8007a00:	f000 f9dc 	bl	8007dbc <USBD_GetDescriptor>
          break;
 8007a04:	e022      	b.n	8007a4c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007a06:	6839      	ldr	r1, [r7, #0]
 8007a08:	6878      	ldr	r0, [r7, #4]
 8007a0a:	f000 fb3f 	bl	800808c <USBD_SetAddress>
          break;
 8007a0e:	e01d      	b.n	8007a4c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8007a10:	6839      	ldr	r1, [r7, #0]
 8007a12:	6878      	ldr	r0, [r7, #4]
 8007a14:	f000 fb7e 	bl	8008114 <USBD_SetConfig>
          break;
 8007a18:	e018      	b.n	8007a4c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007a1a:	6839      	ldr	r1, [r7, #0]
 8007a1c:	6878      	ldr	r0, [r7, #4]
 8007a1e:	f000 fc07 	bl	8008230 <USBD_GetConfig>
          break;
 8007a22:	e013      	b.n	8007a4c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007a24:	6839      	ldr	r1, [r7, #0]
 8007a26:	6878      	ldr	r0, [r7, #4]
 8007a28:	f000 fc37 	bl	800829a <USBD_GetStatus>
          break;
 8007a2c:	e00e      	b.n	8007a4c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007a2e:	6839      	ldr	r1, [r7, #0]
 8007a30:	6878      	ldr	r0, [r7, #4]
 8007a32:	f000 fc65 	bl	8008300 <USBD_SetFeature>
          break;
 8007a36:	e009      	b.n	8007a4c <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007a38:	6839      	ldr	r1, [r7, #0]
 8007a3a:	6878      	ldr	r0, [r7, #4]
 8007a3c:	f000 fc74 	bl	8008328 <USBD_ClrFeature>
          break;
 8007a40:	e004      	b.n	8007a4c <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8007a42:	6839      	ldr	r1, [r7, #0]
 8007a44:	6878      	ldr	r0, [r7, #4]
 8007a46:	f000 fcc9 	bl	80083dc <USBD_CtlError>
          break;
 8007a4a:	bf00      	nop
      }
      break;
 8007a4c:	e004      	b.n	8007a58 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8007a4e:	6839      	ldr	r1, [r7, #0]
 8007a50:	6878      	ldr	r0, [r7, #4]
 8007a52:	f000 fcc3 	bl	80083dc <USBD_CtlError>
      break;
 8007a56:	bf00      	nop
  }

  return ret;
 8007a58:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a5a:	4618      	mov	r0, r3
 8007a5c:	3710      	adds	r7, #16
 8007a5e:	46bd      	mov	sp, r7
 8007a60:	bd80      	pop	{r7, pc}
 8007a62:	bf00      	nop

08007a64 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8007a64:	b580      	push	{r7, lr}
 8007a66:	b084      	sub	sp, #16
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	6078      	str	r0, [r7, #4]
 8007a6c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007a6e:	2300      	movs	r3, #0
 8007a70:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007a72:	683b      	ldr	r3, [r7, #0]
 8007a74:	781b      	ldrb	r3, [r3, #0]
 8007a76:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007a7a:	2b40      	cmp	r3, #64	@ 0x40
 8007a7c:	d005      	beq.n	8007a8a <USBD_StdItfReq+0x26>
 8007a7e:	2b40      	cmp	r3, #64	@ 0x40
 8007a80:	d82e      	bhi.n	8007ae0 <USBD_StdItfReq+0x7c>
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d001      	beq.n	8007a8a <USBD_StdItfReq+0x26>
 8007a86:	2b20      	cmp	r3, #32
 8007a88:	d12a      	bne.n	8007ae0 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007a90:	3b01      	subs	r3, #1
 8007a92:	2b02      	cmp	r3, #2
 8007a94:	d81d      	bhi.n	8007ad2 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007a96:	683b      	ldr	r3, [r7, #0]
 8007a98:	889b      	ldrh	r3, [r3, #4]
 8007a9a:	b2db      	uxtb	r3, r3
 8007a9c:	2b01      	cmp	r3, #1
 8007a9e:	d813      	bhi.n	8007ac8 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007aa6:	689b      	ldr	r3, [r3, #8]
 8007aa8:	6839      	ldr	r1, [r7, #0]
 8007aaa:	6878      	ldr	r0, [r7, #4]
 8007aac:	4798      	blx	r3
 8007aae:	4603      	mov	r3, r0
 8007ab0:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007ab2:	683b      	ldr	r3, [r7, #0]
 8007ab4:	88db      	ldrh	r3, [r3, #6]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d110      	bne.n	8007adc <USBD_StdItfReq+0x78>
 8007aba:	7bfb      	ldrb	r3, [r7, #15]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d10d      	bne.n	8007adc <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8007ac0:	6878      	ldr	r0, [r7, #4]
 8007ac2:	f000 fd53 	bl	800856c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007ac6:	e009      	b.n	8007adc <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8007ac8:	6839      	ldr	r1, [r7, #0]
 8007aca:	6878      	ldr	r0, [r7, #4]
 8007acc:	f000 fc86 	bl	80083dc <USBD_CtlError>
          break;
 8007ad0:	e004      	b.n	8007adc <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8007ad2:	6839      	ldr	r1, [r7, #0]
 8007ad4:	6878      	ldr	r0, [r7, #4]
 8007ad6:	f000 fc81 	bl	80083dc <USBD_CtlError>
          break;
 8007ada:	e000      	b.n	8007ade <USBD_StdItfReq+0x7a>
          break;
 8007adc:	bf00      	nop
      }
      break;
 8007ade:	e004      	b.n	8007aea <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8007ae0:	6839      	ldr	r1, [r7, #0]
 8007ae2:	6878      	ldr	r0, [r7, #4]
 8007ae4:	f000 fc7a 	bl	80083dc <USBD_CtlError>
      break;
 8007ae8:	bf00      	nop
  }

  return USBD_OK;
 8007aea:	2300      	movs	r3, #0
}
 8007aec:	4618      	mov	r0, r3
 8007aee:	3710      	adds	r7, #16
 8007af0:	46bd      	mov	sp, r7
 8007af2:	bd80      	pop	{r7, pc}

08007af4 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8007af4:	b580      	push	{r7, lr}
 8007af6:	b084      	sub	sp, #16
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	6078      	str	r0, [r7, #4]
 8007afc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007afe:	2300      	movs	r3, #0
 8007b00:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8007b02:	683b      	ldr	r3, [r7, #0]
 8007b04:	889b      	ldrh	r3, [r3, #4]
 8007b06:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007b08:	683b      	ldr	r3, [r7, #0]
 8007b0a:	781b      	ldrb	r3, [r3, #0]
 8007b0c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007b10:	2b40      	cmp	r3, #64	@ 0x40
 8007b12:	d007      	beq.n	8007b24 <USBD_StdEPReq+0x30>
 8007b14:	2b40      	cmp	r3, #64	@ 0x40
 8007b16:	f200 8146 	bhi.w	8007da6 <USBD_StdEPReq+0x2b2>
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d00a      	beq.n	8007b34 <USBD_StdEPReq+0x40>
 8007b1e:	2b20      	cmp	r3, #32
 8007b20:	f040 8141 	bne.w	8007da6 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007b2a:	689b      	ldr	r3, [r3, #8]
 8007b2c:	6839      	ldr	r1, [r7, #0]
 8007b2e:	6878      	ldr	r0, [r7, #4]
 8007b30:	4798      	blx	r3
      break;
 8007b32:	e13d      	b.n	8007db0 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8007b34:	683b      	ldr	r3, [r7, #0]
 8007b36:	781b      	ldrb	r3, [r3, #0]
 8007b38:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007b3c:	2b20      	cmp	r3, #32
 8007b3e:	d10a      	bne.n	8007b56 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007b46:	689b      	ldr	r3, [r3, #8]
 8007b48:	6839      	ldr	r1, [r7, #0]
 8007b4a:	6878      	ldr	r0, [r7, #4]
 8007b4c:	4798      	blx	r3
 8007b4e:	4603      	mov	r3, r0
 8007b50:	73fb      	strb	r3, [r7, #15]

        return ret;
 8007b52:	7bfb      	ldrb	r3, [r7, #15]
 8007b54:	e12d      	b.n	8007db2 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8007b56:	683b      	ldr	r3, [r7, #0]
 8007b58:	785b      	ldrb	r3, [r3, #1]
 8007b5a:	2b03      	cmp	r3, #3
 8007b5c:	d007      	beq.n	8007b6e <USBD_StdEPReq+0x7a>
 8007b5e:	2b03      	cmp	r3, #3
 8007b60:	f300 811b 	bgt.w	8007d9a <USBD_StdEPReq+0x2a6>
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d072      	beq.n	8007c4e <USBD_StdEPReq+0x15a>
 8007b68:	2b01      	cmp	r3, #1
 8007b6a:	d03a      	beq.n	8007be2 <USBD_StdEPReq+0xee>
 8007b6c:	e115      	b.n	8007d9a <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007b74:	2b02      	cmp	r3, #2
 8007b76:	d002      	beq.n	8007b7e <USBD_StdEPReq+0x8a>
 8007b78:	2b03      	cmp	r3, #3
 8007b7a:	d015      	beq.n	8007ba8 <USBD_StdEPReq+0xb4>
 8007b7c:	e02b      	b.n	8007bd6 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007b7e:	7bbb      	ldrb	r3, [r7, #14]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d00c      	beq.n	8007b9e <USBD_StdEPReq+0xaa>
 8007b84:	7bbb      	ldrb	r3, [r7, #14]
 8007b86:	2b80      	cmp	r3, #128	@ 0x80
 8007b88:	d009      	beq.n	8007b9e <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007b8a:	7bbb      	ldrb	r3, [r7, #14]
 8007b8c:	4619      	mov	r1, r3
 8007b8e:	6878      	ldr	r0, [r7, #4]
 8007b90:	f001 f880 	bl	8008c94 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007b94:	2180      	movs	r1, #128	@ 0x80
 8007b96:	6878      	ldr	r0, [r7, #4]
 8007b98:	f001 f87c 	bl	8008c94 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007b9c:	e020      	b.n	8007be0 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8007b9e:	6839      	ldr	r1, [r7, #0]
 8007ba0:	6878      	ldr	r0, [r7, #4]
 8007ba2:	f000 fc1b 	bl	80083dc <USBD_CtlError>
              break;
 8007ba6:	e01b      	b.n	8007be0 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007ba8:	683b      	ldr	r3, [r7, #0]
 8007baa:	885b      	ldrh	r3, [r3, #2]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d10e      	bne.n	8007bce <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8007bb0:	7bbb      	ldrb	r3, [r7, #14]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d00b      	beq.n	8007bce <USBD_StdEPReq+0xda>
 8007bb6:	7bbb      	ldrb	r3, [r7, #14]
 8007bb8:	2b80      	cmp	r3, #128	@ 0x80
 8007bba:	d008      	beq.n	8007bce <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007bbc:	683b      	ldr	r3, [r7, #0]
 8007bbe:	88db      	ldrh	r3, [r3, #6]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d104      	bne.n	8007bce <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8007bc4:	7bbb      	ldrb	r3, [r7, #14]
 8007bc6:	4619      	mov	r1, r3
 8007bc8:	6878      	ldr	r0, [r7, #4]
 8007bca:	f001 f863 	bl	8008c94 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8007bce:	6878      	ldr	r0, [r7, #4]
 8007bd0:	f000 fccc 	bl	800856c <USBD_CtlSendStatus>

              break;
 8007bd4:	e004      	b.n	8007be0 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8007bd6:	6839      	ldr	r1, [r7, #0]
 8007bd8:	6878      	ldr	r0, [r7, #4]
 8007bda:	f000 fbff 	bl	80083dc <USBD_CtlError>
              break;
 8007bde:	bf00      	nop
          }
          break;
 8007be0:	e0e0      	b.n	8007da4 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007be8:	2b02      	cmp	r3, #2
 8007bea:	d002      	beq.n	8007bf2 <USBD_StdEPReq+0xfe>
 8007bec:	2b03      	cmp	r3, #3
 8007bee:	d015      	beq.n	8007c1c <USBD_StdEPReq+0x128>
 8007bf0:	e026      	b.n	8007c40 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007bf2:	7bbb      	ldrb	r3, [r7, #14]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d00c      	beq.n	8007c12 <USBD_StdEPReq+0x11e>
 8007bf8:	7bbb      	ldrb	r3, [r7, #14]
 8007bfa:	2b80      	cmp	r3, #128	@ 0x80
 8007bfc:	d009      	beq.n	8007c12 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007bfe:	7bbb      	ldrb	r3, [r7, #14]
 8007c00:	4619      	mov	r1, r3
 8007c02:	6878      	ldr	r0, [r7, #4]
 8007c04:	f001 f846 	bl	8008c94 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007c08:	2180      	movs	r1, #128	@ 0x80
 8007c0a:	6878      	ldr	r0, [r7, #4]
 8007c0c:	f001 f842 	bl	8008c94 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007c10:	e01c      	b.n	8007c4c <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8007c12:	6839      	ldr	r1, [r7, #0]
 8007c14:	6878      	ldr	r0, [r7, #4]
 8007c16:	f000 fbe1 	bl	80083dc <USBD_CtlError>
              break;
 8007c1a:	e017      	b.n	8007c4c <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007c1c:	683b      	ldr	r3, [r7, #0]
 8007c1e:	885b      	ldrh	r3, [r3, #2]
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d112      	bne.n	8007c4a <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007c24:	7bbb      	ldrb	r3, [r7, #14]
 8007c26:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d004      	beq.n	8007c38 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8007c2e:	7bbb      	ldrb	r3, [r7, #14]
 8007c30:	4619      	mov	r1, r3
 8007c32:	6878      	ldr	r0, [r7, #4]
 8007c34:	f001 f84d 	bl	8008cd2 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8007c38:	6878      	ldr	r0, [r7, #4]
 8007c3a:	f000 fc97 	bl	800856c <USBD_CtlSendStatus>
              }
              break;
 8007c3e:	e004      	b.n	8007c4a <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8007c40:	6839      	ldr	r1, [r7, #0]
 8007c42:	6878      	ldr	r0, [r7, #4]
 8007c44:	f000 fbca 	bl	80083dc <USBD_CtlError>
              break;
 8007c48:	e000      	b.n	8007c4c <USBD_StdEPReq+0x158>
              break;
 8007c4a:	bf00      	nop
          }
          break;
 8007c4c:	e0aa      	b.n	8007da4 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007c54:	2b02      	cmp	r3, #2
 8007c56:	d002      	beq.n	8007c5e <USBD_StdEPReq+0x16a>
 8007c58:	2b03      	cmp	r3, #3
 8007c5a:	d032      	beq.n	8007cc2 <USBD_StdEPReq+0x1ce>
 8007c5c:	e097      	b.n	8007d8e <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007c5e:	7bbb      	ldrb	r3, [r7, #14]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d007      	beq.n	8007c74 <USBD_StdEPReq+0x180>
 8007c64:	7bbb      	ldrb	r3, [r7, #14]
 8007c66:	2b80      	cmp	r3, #128	@ 0x80
 8007c68:	d004      	beq.n	8007c74 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8007c6a:	6839      	ldr	r1, [r7, #0]
 8007c6c:	6878      	ldr	r0, [r7, #4]
 8007c6e:	f000 fbb5 	bl	80083dc <USBD_CtlError>
                break;
 8007c72:	e091      	b.n	8007d98 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007c74:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	da0b      	bge.n	8007c94 <USBD_StdEPReq+0x1a0>
 8007c7c:	7bbb      	ldrb	r3, [r7, #14]
 8007c7e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007c82:	4613      	mov	r3, r2
 8007c84:	009b      	lsls	r3, r3, #2
 8007c86:	4413      	add	r3, r2
 8007c88:	009b      	lsls	r3, r3, #2
 8007c8a:	3310      	adds	r3, #16
 8007c8c:	687a      	ldr	r2, [r7, #4]
 8007c8e:	4413      	add	r3, r2
 8007c90:	3304      	adds	r3, #4
 8007c92:	e00b      	b.n	8007cac <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007c94:	7bbb      	ldrb	r3, [r7, #14]
 8007c96:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007c9a:	4613      	mov	r3, r2
 8007c9c:	009b      	lsls	r3, r3, #2
 8007c9e:	4413      	add	r3, r2
 8007ca0:	009b      	lsls	r3, r3, #2
 8007ca2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007ca6:	687a      	ldr	r2, [r7, #4]
 8007ca8:	4413      	add	r3, r2
 8007caa:	3304      	adds	r3, #4
 8007cac:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007cae:	68bb      	ldr	r3, [r7, #8]
 8007cb0:	2200      	movs	r2, #0
 8007cb2:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007cb4:	68bb      	ldr	r3, [r7, #8]
 8007cb6:	2202      	movs	r2, #2
 8007cb8:	4619      	mov	r1, r3
 8007cba:	6878      	ldr	r0, [r7, #4]
 8007cbc:	f000 fbf8 	bl	80084b0 <USBD_CtlSendData>
              break;
 8007cc0:	e06a      	b.n	8007d98 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007cc2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	da11      	bge.n	8007cee <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007cca:	7bbb      	ldrb	r3, [r7, #14]
 8007ccc:	f003 020f 	and.w	r2, r3, #15
 8007cd0:	6879      	ldr	r1, [r7, #4]
 8007cd2:	4613      	mov	r3, r2
 8007cd4:	009b      	lsls	r3, r3, #2
 8007cd6:	4413      	add	r3, r2
 8007cd8:	009b      	lsls	r3, r3, #2
 8007cda:	440b      	add	r3, r1
 8007cdc:	3318      	adds	r3, #24
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d117      	bne.n	8007d14 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007ce4:	6839      	ldr	r1, [r7, #0]
 8007ce6:	6878      	ldr	r0, [r7, #4]
 8007ce8:	f000 fb78 	bl	80083dc <USBD_CtlError>
                  break;
 8007cec:	e054      	b.n	8007d98 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007cee:	7bbb      	ldrb	r3, [r7, #14]
 8007cf0:	f003 020f 	and.w	r2, r3, #15
 8007cf4:	6879      	ldr	r1, [r7, #4]
 8007cf6:	4613      	mov	r3, r2
 8007cf8:	009b      	lsls	r3, r3, #2
 8007cfa:	4413      	add	r3, r2
 8007cfc:	009b      	lsls	r3, r3, #2
 8007cfe:	440b      	add	r3, r1
 8007d00:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d104      	bne.n	8007d14 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007d0a:	6839      	ldr	r1, [r7, #0]
 8007d0c:	6878      	ldr	r0, [r7, #4]
 8007d0e:	f000 fb65 	bl	80083dc <USBD_CtlError>
                  break;
 8007d12:	e041      	b.n	8007d98 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007d14:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	da0b      	bge.n	8007d34 <USBD_StdEPReq+0x240>
 8007d1c:	7bbb      	ldrb	r3, [r7, #14]
 8007d1e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007d22:	4613      	mov	r3, r2
 8007d24:	009b      	lsls	r3, r3, #2
 8007d26:	4413      	add	r3, r2
 8007d28:	009b      	lsls	r3, r3, #2
 8007d2a:	3310      	adds	r3, #16
 8007d2c:	687a      	ldr	r2, [r7, #4]
 8007d2e:	4413      	add	r3, r2
 8007d30:	3304      	adds	r3, #4
 8007d32:	e00b      	b.n	8007d4c <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007d34:	7bbb      	ldrb	r3, [r7, #14]
 8007d36:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007d3a:	4613      	mov	r3, r2
 8007d3c:	009b      	lsls	r3, r3, #2
 8007d3e:	4413      	add	r3, r2
 8007d40:	009b      	lsls	r3, r3, #2
 8007d42:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007d46:	687a      	ldr	r2, [r7, #4]
 8007d48:	4413      	add	r3, r2
 8007d4a:	3304      	adds	r3, #4
 8007d4c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007d4e:	7bbb      	ldrb	r3, [r7, #14]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d002      	beq.n	8007d5a <USBD_StdEPReq+0x266>
 8007d54:	7bbb      	ldrb	r3, [r7, #14]
 8007d56:	2b80      	cmp	r3, #128	@ 0x80
 8007d58:	d103      	bne.n	8007d62 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8007d5a:	68bb      	ldr	r3, [r7, #8]
 8007d5c:	2200      	movs	r2, #0
 8007d5e:	601a      	str	r2, [r3, #0]
 8007d60:	e00e      	b.n	8007d80 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8007d62:	7bbb      	ldrb	r3, [r7, #14]
 8007d64:	4619      	mov	r1, r3
 8007d66:	6878      	ldr	r0, [r7, #4]
 8007d68:	f000 ffd2 	bl	8008d10 <USBD_LL_IsStallEP>
 8007d6c:	4603      	mov	r3, r0
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d003      	beq.n	8007d7a <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8007d72:	68bb      	ldr	r3, [r7, #8]
 8007d74:	2201      	movs	r2, #1
 8007d76:	601a      	str	r2, [r3, #0]
 8007d78:	e002      	b.n	8007d80 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8007d7a:	68bb      	ldr	r3, [r7, #8]
 8007d7c:	2200      	movs	r2, #0
 8007d7e:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007d80:	68bb      	ldr	r3, [r7, #8]
 8007d82:	2202      	movs	r2, #2
 8007d84:	4619      	mov	r1, r3
 8007d86:	6878      	ldr	r0, [r7, #4]
 8007d88:	f000 fb92 	bl	80084b0 <USBD_CtlSendData>
              break;
 8007d8c:	e004      	b.n	8007d98 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8007d8e:	6839      	ldr	r1, [r7, #0]
 8007d90:	6878      	ldr	r0, [r7, #4]
 8007d92:	f000 fb23 	bl	80083dc <USBD_CtlError>
              break;
 8007d96:	bf00      	nop
          }
          break;
 8007d98:	e004      	b.n	8007da4 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8007d9a:	6839      	ldr	r1, [r7, #0]
 8007d9c:	6878      	ldr	r0, [r7, #4]
 8007d9e:	f000 fb1d 	bl	80083dc <USBD_CtlError>
          break;
 8007da2:	bf00      	nop
      }
      break;
 8007da4:	e004      	b.n	8007db0 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8007da6:	6839      	ldr	r1, [r7, #0]
 8007da8:	6878      	ldr	r0, [r7, #4]
 8007daa:	f000 fb17 	bl	80083dc <USBD_CtlError>
      break;
 8007dae:	bf00      	nop
  }

  return ret;
 8007db0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007db2:	4618      	mov	r0, r3
 8007db4:	3710      	adds	r7, #16
 8007db6:	46bd      	mov	sp, r7
 8007db8:	bd80      	pop	{r7, pc}
	...

08007dbc <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	b084      	sub	sp, #16
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
 8007dc4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007dc6:	2300      	movs	r3, #0
 8007dc8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007dca:	2300      	movs	r3, #0
 8007dcc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007dce:	2300      	movs	r3, #0
 8007dd0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007dd2:	683b      	ldr	r3, [r7, #0]
 8007dd4:	885b      	ldrh	r3, [r3, #2]
 8007dd6:	0a1b      	lsrs	r3, r3, #8
 8007dd8:	b29b      	uxth	r3, r3
 8007dda:	3b01      	subs	r3, #1
 8007ddc:	2b06      	cmp	r3, #6
 8007dde:	f200 8128 	bhi.w	8008032 <USBD_GetDescriptor+0x276>
 8007de2:	a201      	add	r2, pc, #4	@ (adr r2, 8007de8 <USBD_GetDescriptor+0x2c>)
 8007de4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007de8:	08007e05 	.word	0x08007e05
 8007dec:	08007e1d 	.word	0x08007e1d
 8007df0:	08007e5d 	.word	0x08007e5d
 8007df4:	08008033 	.word	0x08008033
 8007df8:	08008033 	.word	0x08008033
 8007dfc:	08007fd3 	.word	0x08007fd3
 8007e00:	08007fff 	.word	0x08007fff
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	687a      	ldr	r2, [r7, #4]
 8007e0e:	7c12      	ldrb	r2, [r2, #16]
 8007e10:	f107 0108 	add.w	r1, r7, #8
 8007e14:	4610      	mov	r0, r2
 8007e16:	4798      	blx	r3
 8007e18:	60f8      	str	r0, [r7, #12]
      break;
 8007e1a:	e112      	b.n	8008042 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	7c1b      	ldrb	r3, [r3, #16]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d10d      	bne.n	8007e40 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007e2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e2c:	f107 0208 	add.w	r2, r7, #8
 8007e30:	4610      	mov	r0, r2
 8007e32:	4798      	blx	r3
 8007e34:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	3301      	adds	r3, #1
 8007e3a:	2202      	movs	r2, #2
 8007e3c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007e3e:	e100      	b.n	8008042 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007e46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e48:	f107 0208 	add.w	r2, r7, #8
 8007e4c:	4610      	mov	r0, r2
 8007e4e:	4798      	blx	r3
 8007e50:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	3301      	adds	r3, #1
 8007e56:	2202      	movs	r2, #2
 8007e58:	701a      	strb	r2, [r3, #0]
      break;
 8007e5a:	e0f2      	b.n	8008042 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007e5c:	683b      	ldr	r3, [r7, #0]
 8007e5e:	885b      	ldrh	r3, [r3, #2]
 8007e60:	b2db      	uxtb	r3, r3
 8007e62:	2b05      	cmp	r3, #5
 8007e64:	f200 80ac 	bhi.w	8007fc0 <USBD_GetDescriptor+0x204>
 8007e68:	a201      	add	r2, pc, #4	@ (adr r2, 8007e70 <USBD_GetDescriptor+0xb4>)
 8007e6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e6e:	bf00      	nop
 8007e70:	08007e89 	.word	0x08007e89
 8007e74:	08007ebd 	.word	0x08007ebd
 8007e78:	08007ef1 	.word	0x08007ef1
 8007e7c:	08007f25 	.word	0x08007f25
 8007e80:	08007f59 	.word	0x08007f59
 8007e84:	08007f8d 	.word	0x08007f8d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007e8e:	685b      	ldr	r3, [r3, #4]
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d00b      	beq.n	8007eac <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007e9a:	685b      	ldr	r3, [r3, #4]
 8007e9c:	687a      	ldr	r2, [r7, #4]
 8007e9e:	7c12      	ldrb	r2, [r2, #16]
 8007ea0:	f107 0108 	add.w	r1, r7, #8
 8007ea4:	4610      	mov	r0, r2
 8007ea6:	4798      	blx	r3
 8007ea8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007eaa:	e091      	b.n	8007fd0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007eac:	6839      	ldr	r1, [r7, #0]
 8007eae:	6878      	ldr	r0, [r7, #4]
 8007eb0:	f000 fa94 	bl	80083dc <USBD_CtlError>
            err++;
 8007eb4:	7afb      	ldrb	r3, [r7, #11]
 8007eb6:	3301      	adds	r3, #1
 8007eb8:	72fb      	strb	r3, [r7, #11]
          break;
 8007eba:	e089      	b.n	8007fd0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007ec2:	689b      	ldr	r3, [r3, #8]
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d00b      	beq.n	8007ee0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007ece:	689b      	ldr	r3, [r3, #8]
 8007ed0:	687a      	ldr	r2, [r7, #4]
 8007ed2:	7c12      	ldrb	r2, [r2, #16]
 8007ed4:	f107 0108 	add.w	r1, r7, #8
 8007ed8:	4610      	mov	r0, r2
 8007eda:	4798      	blx	r3
 8007edc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007ede:	e077      	b.n	8007fd0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007ee0:	6839      	ldr	r1, [r7, #0]
 8007ee2:	6878      	ldr	r0, [r7, #4]
 8007ee4:	f000 fa7a 	bl	80083dc <USBD_CtlError>
            err++;
 8007ee8:	7afb      	ldrb	r3, [r7, #11]
 8007eea:	3301      	adds	r3, #1
 8007eec:	72fb      	strb	r3, [r7, #11]
          break;
 8007eee:	e06f      	b.n	8007fd0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007ef6:	68db      	ldr	r3, [r3, #12]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d00b      	beq.n	8007f14 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007f02:	68db      	ldr	r3, [r3, #12]
 8007f04:	687a      	ldr	r2, [r7, #4]
 8007f06:	7c12      	ldrb	r2, [r2, #16]
 8007f08:	f107 0108 	add.w	r1, r7, #8
 8007f0c:	4610      	mov	r0, r2
 8007f0e:	4798      	blx	r3
 8007f10:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007f12:	e05d      	b.n	8007fd0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007f14:	6839      	ldr	r1, [r7, #0]
 8007f16:	6878      	ldr	r0, [r7, #4]
 8007f18:	f000 fa60 	bl	80083dc <USBD_CtlError>
            err++;
 8007f1c:	7afb      	ldrb	r3, [r7, #11]
 8007f1e:	3301      	adds	r3, #1
 8007f20:	72fb      	strb	r3, [r7, #11]
          break;
 8007f22:	e055      	b.n	8007fd0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007f2a:	691b      	ldr	r3, [r3, #16]
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d00b      	beq.n	8007f48 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007f36:	691b      	ldr	r3, [r3, #16]
 8007f38:	687a      	ldr	r2, [r7, #4]
 8007f3a:	7c12      	ldrb	r2, [r2, #16]
 8007f3c:	f107 0108 	add.w	r1, r7, #8
 8007f40:	4610      	mov	r0, r2
 8007f42:	4798      	blx	r3
 8007f44:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007f46:	e043      	b.n	8007fd0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007f48:	6839      	ldr	r1, [r7, #0]
 8007f4a:	6878      	ldr	r0, [r7, #4]
 8007f4c:	f000 fa46 	bl	80083dc <USBD_CtlError>
            err++;
 8007f50:	7afb      	ldrb	r3, [r7, #11]
 8007f52:	3301      	adds	r3, #1
 8007f54:	72fb      	strb	r3, [r7, #11]
          break;
 8007f56:	e03b      	b.n	8007fd0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007f5e:	695b      	ldr	r3, [r3, #20]
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d00b      	beq.n	8007f7c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007f6a:	695b      	ldr	r3, [r3, #20]
 8007f6c:	687a      	ldr	r2, [r7, #4]
 8007f6e:	7c12      	ldrb	r2, [r2, #16]
 8007f70:	f107 0108 	add.w	r1, r7, #8
 8007f74:	4610      	mov	r0, r2
 8007f76:	4798      	blx	r3
 8007f78:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007f7a:	e029      	b.n	8007fd0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007f7c:	6839      	ldr	r1, [r7, #0]
 8007f7e:	6878      	ldr	r0, [r7, #4]
 8007f80:	f000 fa2c 	bl	80083dc <USBD_CtlError>
            err++;
 8007f84:	7afb      	ldrb	r3, [r7, #11]
 8007f86:	3301      	adds	r3, #1
 8007f88:	72fb      	strb	r3, [r7, #11]
          break;
 8007f8a:	e021      	b.n	8007fd0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007f92:	699b      	ldr	r3, [r3, #24]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d00b      	beq.n	8007fb0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007f9e:	699b      	ldr	r3, [r3, #24]
 8007fa0:	687a      	ldr	r2, [r7, #4]
 8007fa2:	7c12      	ldrb	r2, [r2, #16]
 8007fa4:	f107 0108 	add.w	r1, r7, #8
 8007fa8:	4610      	mov	r0, r2
 8007faa:	4798      	blx	r3
 8007fac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007fae:	e00f      	b.n	8007fd0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007fb0:	6839      	ldr	r1, [r7, #0]
 8007fb2:	6878      	ldr	r0, [r7, #4]
 8007fb4:	f000 fa12 	bl	80083dc <USBD_CtlError>
            err++;
 8007fb8:	7afb      	ldrb	r3, [r7, #11]
 8007fba:	3301      	adds	r3, #1
 8007fbc:	72fb      	strb	r3, [r7, #11]
          break;
 8007fbe:	e007      	b.n	8007fd0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8007fc0:	6839      	ldr	r1, [r7, #0]
 8007fc2:	6878      	ldr	r0, [r7, #4]
 8007fc4:	f000 fa0a 	bl	80083dc <USBD_CtlError>
          err++;
 8007fc8:	7afb      	ldrb	r3, [r7, #11]
 8007fca:	3301      	adds	r3, #1
 8007fcc:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8007fce:	e038      	b.n	8008042 <USBD_GetDescriptor+0x286>
 8007fd0:	e037      	b.n	8008042 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	7c1b      	ldrb	r3, [r3, #16]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d109      	bne.n	8007fee <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007fe0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007fe2:	f107 0208 	add.w	r2, r7, #8
 8007fe6:	4610      	mov	r0, r2
 8007fe8:	4798      	blx	r3
 8007fea:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007fec:	e029      	b.n	8008042 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007fee:	6839      	ldr	r1, [r7, #0]
 8007ff0:	6878      	ldr	r0, [r7, #4]
 8007ff2:	f000 f9f3 	bl	80083dc <USBD_CtlError>
        err++;
 8007ff6:	7afb      	ldrb	r3, [r7, #11]
 8007ff8:	3301      	adds	r3, #1
 8007ffa:	72fb      	strb	r3, [r7, #11]
      break;
 8007ffc:	e021      	b.n	8008042 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	7c1b      	ldrb	r3, [r3, #16]
 8008002:	2b00      	cmp	r3, #0
 8008004:	d10d      	bne.n	8008022 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800800c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800800e:	f107 0208 	add.w	r2, r7, #8
 8008012:	4610      	mov	r0, r2
 8008014:	4798      	blx	r3
 8008016:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	3301      	adds	r3, #1
 800801c:	2207      	movs	r2, #7
 800801e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008020:	e00f      	b.n	8008042 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008022:	6839      	ldr	r1, [r7, #0]
 8008024:	6878      	ldr	r0, [r7, #4]
 8008026:	f000 f9d9 	bl	80083dc <USBD_CtlError>
        err++;
 800802a:	7afb      	ldrb	r3, [r7, #11]
 800802c:	3301      	adds	r3, #1
 800802e:	72fb      	strb	r3, [r7, #11]
      break;
 8008030:	e007      	b.n	8008042 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008032:	6839      	ldr	r1, [r7, #0]
 8008034:	6878      	ldr	r0, [r7, #4]
 8008036:	f000 f9d1 	bl	80083dc <USBD_CtlError>
      err++;
 800803a:	7afb      	ldrb	r3, [r7, #11]
 800803c:	3301      	adds	r3, #1
 800803e:	72fb      	strb	r3, [r7, #11]
      break;
 8008040:	bf00      	nop
  }

  if (err != 0U)
 8008042:	7afb      	ldrb	r3, [r7, #11]
 8008044:	2b00      	cmp	r3, #0
 8008046:	d11c      	bne.n	8008082 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8008048:	893b      	ldrh	r3, [r7, #8]
 800804a:	2b00      	cmp	r3, #0
 800804c:	d011      	beq.n	8008072 <USBD_GetDescriptor+0x2b6>
 800804e:	683b      	ldr	r3, [r7, #0]
 8008050:	88db      	ldrh	r3, [r3, #6]
 8008052:	2b00      	cmp	r3, #0
 8008054:	d00d      	beq.n	8008072 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8008056:	683b      	ldr	r3, [r7, #0]
 8008058:	88da      	ldrh	r2, [r3, #6]
 800805a:	893b      	ldrh	r3, [r7, #8]
 800805c:	4293      	cmp	r3, r2
 800805e:	bf28      	it	cs
 8008060:	4613      	movcs	r3, r2
 8008062:	b29b      	uxth	r3, r3
 8008064:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008066:	893b      	ldrh	r3, [r7, #8]
 8008068:	461a      	mov	r2, r3
 800806a:	68f9      	ldr	r1, [r7, #12]
 800806c:	6878      	ldr	r0, [r7, #4]
 800806e:	f000 fa1f 	bl	80084b0 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8008072:	683b      	ldr	r3, [r7, #0]
 8008074:	88db      	ldrh	r3, [r3, #6]
 8008076:	2b00      	cmp	r3, #0
 8008078:	d104      	bne.n	8008084 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800807a:	6878      	ldr	r0, [r7, #4]
 800807c:	f000 fa76 	bl	800856c <USBD_CtlSendStatus>
 8008080:	e000      	b.n	8008084 <USBD_GetDescriptor+0x2c8>
    return;
 8008082:	bf00      	nop
    }
  }
}
 8008084:	3710      	adds	r7, #16
 8008086:	46bd      	mov	sp, r7
 8008088:	bd80      	pop	{r7, pc}
 800808a:	bf00      	nop

0800808c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800808c:	b580      	push	{r7, lr}
 800808e:	b084      	sub	sp, #16
 8008090:	af00      	add	r7, sp, #0
 8008092:	6078      	str	r0, [r7, #4]
 8008094:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008096:	683b      	ldr	r3, [r7, #0]
 8008098:	889b      	ldrh	r3, [r3, #4]
 800809a:	2b00      	cmp	r3, #0
 800809c:	d130      	bne.n	8008100 <USBD_SetAddress+0x74>
 800809e:	683b      	ldr	r3, [r7, #0]
 80080a0:	88db      	ldrh	r3, [r3, #6]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d12c      	bne.n	8008100 <USBD_SetAddress+0x74>
 80080a6:	683b      	ldr	r3, [r7, #0]
 80080a8:	885b      	ldrh	r3, [r3, #2]
 80080aa:	2b7f      	cmp	r3, #127	@ 0x7f
 80080ac:	d828      	bhi.n	8008100 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80080ae:	683b      	ldr	r3, [r7, #0]
 80080b0:	885b      	ldrh	r3, [r3, #2]
 80080b2:	b2db      	uxtb	r3, r3
 80080b4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80080b8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80080c0:	2b03      	cmp	r3, #3
 80080c2:	d104      	bne.n	80080ce <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80080c4:	6839      	ldr	r1, [r7, #0]
 80080c6:	6878      	ldr	r0, [r7, #4]
 80080c8:	f000 f988 	bl	80083dc <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80080cc:	e01d      	b.n	800810a <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	7bfa      	ldrb	r2, [r7, #15]
 80080d2:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80080d6:	7bfb      	ldrb	r3, [r7, #15]
 80080d8:	4619      	mov	r1, r3
 80080da:	6878      	ldr	r0, [r7, #4]
 80080dc:	f000 fe43 	bl	8008d66 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80080e0:	6878      	ldr	r0, [r7, #4]
 80080e2:	f000 fa43 	bl	800856c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80080e6:	7bfb      	ldrb	r3, [r7, #15]
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d004      	beq.n	80080f6 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	2202      	movs	r2, #2
 80080f0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80080f4:	e009      	b.n	800810a <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	2201      	movs	r2, #1
 80080fa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80080fe:	e004      	b.n	800810a <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008100:	6839      	ldr	r1, [r7, #0]
 8008102:	6878      	ldr	r0, [r7, #4]
 8008104:	f000 f96a 	bl	80083dc <USBD_CtlError>
  }
}
 8008108:	bf00      	nop
 800810a:	bf00      	nop
 800810c:	3710      	adds	r7, #16
 800810e:	46bd      	mov	sp, r7
 8008110:	bd80      	pop	{r7, pc}
	...

08008114 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008114:	b580      	push	{r7, lr}
 8008116:	b082      	sub	sp, #8
 8008118:	af00      	add	r7, sp, #0
 800811a:	6078      	str	r0, [r7, #4]
 800811c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800811e:	683b      	ldr	r3, [r7, #0]
 8008120:	885b      	ldrh	r3, [r3, #2]
 8008122:	b2da      	uxtb	r2, r3
 8008124:	4b41      	ldr	r3, [pc, #260]	@ (800822c <USBD_SetConfig+0x118>)
 8008126:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008128:	4b40      	ldr	r3, [pc, #256]	@ (800822c <USBD_SetConfig+0x118>)
 800812a:	781b      	ldrb	r3, [r3, #0]
 800812c:	2b01      	cmp	r3, #1
 800812e:	d904      	bls.n	800813a <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8008130:	6839      	ldr	r1, [r7, #0]
 8008132:	6878      	ldr	r0, [r7, #4]
 8008134:	f000 f952 	bl	80083dc <USBD_CtlError>
 8008138:	e075      	b.n	8008226 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008140:	2b02      	cmp	r3, #2
 8008142:	d002      	beq.n	800814a <USBD_SetConfig+0x36>
 8008144:	2b03      	cmp	r3, #3
 8008146:	d023      	beq.n	8008190 <USBD_SetConfig+0x7c>
 8008148:	e062      	b.n	8008210 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800814a:	4b38      	ldr	r3, [pc, #224]	@ (800822c <USBD_SetConfig+0x118>)
 800814c:	781b      	ldrb	r3, [r3, #0]
 800814e:	2b00      	cmp	r3, #0
 8008150:	d01a      	beq.n	8008188 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8008152:	4b36      	ldr	r3, [pc, #216]	@ (800822c <USBD_SetConfig+0x118>)
 8008154:	781b      	ldrb	r3, [r3, #0]
 8008156:	461a      	mov	r2, r3
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	2203      	movs	r2, #3
 8008160:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008164:	4b31      	ldr	r3, [pc, #196]	@ (800822c <USBD_SetConfig+0x118>)
 8008166:	781b      	ldrb	r3, [r3, #0]
 8008168:	4619      	mov	r1, r3
 800816a:	6878      	ldr	r0, [r7, #4]
 800816c:	f7ff f9e7 	bl	800753e <USBD_SetClassConfig>
 8008170:	4603      	mov	r3, r0
 8008172:	2b02      	cmp	r3, #2
 8008174:	d104      	bne.n	8008180 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8008176:	6839      	ldr	r1, [r7, #0]
 8008178:	6878      	ldr	r0, [r7, #4]
 800817a:	f000 f92f 	bl	80083dc <USBD_CtlError>
            return;
 800817e:	e052      	b.n	8008226 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8008180:	6878      	ldr	r0, [r7, #4]
 8008182:	f000 f9f3 	bl	800856c <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008186:	e04e      	b.n	8008226 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008188:	6878      	ldr	r0, [r7, #4]
 800818a:	f000 f9ef 	bl	800856c <USBD_CtlSendStatus>
        break;
 800818e:	e04a      	b.n	8008226 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8008190:	4b26      	ldr	r3, [pc, #152]	@ (800822c <USBD_SetConfig+0x118>)
 8008192:	781b      	ldrb	r3, [r3, #0]
 8008194:	2b00      	cmp	r3, #0
 8008196:	d112      	bne.n	80081be <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	2202      	movs	r2, #2
 800819c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 80081a0:	4b22      	ldr	r3, [pc, #136]	@ (800822c <USBD_SetConfig+0x118>)
 80081a2:	781b      	ldrb	r3, [r3, #0]
 80081a4:	461a      	mov	r2, r3
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80081aa:	4b20      	ldr	r3, [pc, #128]	@ (800822c <USBD_SetConfig+0x118>)
 80081ac:	781b      	ldrb	r3, [r3, #0]
 80081ae:	4619      	mov	r1, r3
 80081b0:	6878      	ldr	r0, [r7, #4]
 80081b2:	f7ff f9e3 	bl	800757c <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80081b6:	6878      	ldr	r0, [r7, #4]
 80081b8:	f000 f9d8 	bl	800856c <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80081bc:	e033      	b.n	8008226 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 80081be:	4b1b      	ldr	r3, [pc, #108]	@ (800822c <USBD_SetConfig+0x118>)
 80081c0:	781b      	ldrb	r3, [r3, #0]
 80081c2:	461a      	mov	r2, r3
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	685b      	ldr	r3, [r3, #4]
 80081c8:	429a      	cmp	r2, r3
 80081ca:	d01d      	beq.n	8008208 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	685b      	ldr	r3, [r3, #4]
 80081d0:	b2db      	uxtb	r3, r3
 80081d2:	4619      	mov	r1, r3
 80081d4:	6878      	ldr	r0, [r7, #4]
 80081d6:	f7ff f9d1 	bl	800757c <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80081da:	4b14      	ldr	r3, [pc, #80]	@ (800822c <USBD_SetConfig+0x118>)
 80081dc:	781b      	ldrb	r3, [r3, #0]
 80081de:	461a      	mov	r2, r3
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80081e4:	4b11      	ldr	r3, [pc, #68]	@ (800822c <USBD_SetConfig+0x118>)
 80081e6:	781b      	ldrb	r3, [r3, #0]
 80081e8:	4619      	mov	r1, r3
 80081ea:	6878      	ldr	r0, [r7, #4]
 80081ec:	f7ff f9a7 	bl	800753e <USBD_SetClassConfig>
 80081f0:	4603      	mov	r3, r0
 80081f2:	2b02      	cmp	r3, #2
 80081f4:	d104      	bne.n	8008200 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 80081f6:	6839      	ldr	r1, [r7, #0]
 80081f8:	6878      	ldr	r0, [r7, #4]
 80081fa:	f000 f8ef 	bl	80083dc <USBD_CtlError>
            return;
 80081fe:	e012      	b.n	8008226 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008200:	6878      	ldr	r0, [r7, #4]
 8008202:	f000 f9b3 	bl	800856c <USBD_CtlSendStatus>
        break;
 8008206:	e00e      	b.n	8008226 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008208:	6878      	ldr	r0, [r7, #4]
 800820a:	f000 f9af 	bl	800856c <USBD_CtlSendStatus>
        break;
 800820e:	e00a      	b.n	8008226 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8008210:	6839      	ldr	r1, [r7, #0]
 8008212:	6878      	ldr	r0, [r7, #4]
 8008214:	f000 f8e2 	bl	80083dc <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8008218:	4b04      	ldr	r3, [pc, #16]	@ (800822c <USBD_SetConfig+0x118>)
 800821a:	781b      	ldrb	r3, [r3, #0]
 800821c:	4619      	mov	r1, r3
 800821e:	6878      	ldr	r0, [r7, #4]
 8008220:	f7ff f9ac 	bl	800757c <USBD_ClrClassConfig>
        break;
 8008224:	bf00      	nop
    }
  }
}
 8008226:	3708      	adds	r7, #8
 8008228:	46bd      	mov	sp, r7
 800822a:	bd80      	pop	{r7, pc}
 800822c:	20000284 	.word	0x20000284

08008230 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008230:	b580      	push	{r7, lr}
 8008232:	b082      	sub	sp, #8
 8008234:	af00      	add	r7, sp, #0
 8008236:	6078      	str	r0, [r7, #4]
 8008238:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800823a:	683b      	ldr	r3, [r7, #0]
 800823c:	88db      	ldrh	r3, [r3, #6]
 800823e:	2b01      	cmp	r3, #1
 8008240:	d004      	beq.n	800824c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008242:	6839      	ldr	r1, [r7, #0]
 8008244:	6878      	ldr	r0, [r7, #4]
 8008246:	f000 f8c9 	bl	80083dc <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800824a:	e022      	b.n	8008292 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008252:	2b02      	cmp	r3, #2
 8008254:	dc02      	bgt.n	800825c <USBD_GetConfig+0x2c>
 8008256:	2b00      	cmp	r3, #0
 8008258:	dc03      	bgt.n	8008262 <USBD_GetConfig+0x32>
 800825a:	e015      	b.n	8008288 <USBD_GetConfig+0x58>
 800825c:	2b03      	cmp	r3, #3
 800825e:	d00b      	beq.n	8008278 <USBD_GetConfig+0x48>
 8008260:	e012      	b.n	8008288 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	2200      	movs	r2, #0
 8008266:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	3308      	adds	r3, #8
 800826c:	2201      	movs	r2, #1
 800826e:	4619      	mov	r1, r3
 8008270:	6878      	ldr	r0, [r7, #4]
 8008272:	f000 f91d 	bl	80084b0 <USBD_CtlSendData>
        break;
 8008276:	e00c      	b.n	8008292 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	3304      	adds	r3, #4
 800827c:	2201      	movs	r2, #1
 800827e:	4619      	mov	r1, r3
 8008280:	6878      	ldr	r0, [r7, #4]
 8008282:	f000 f915 	bl	80084b0 <USBD_CtlSendData>
        break;
 8008286:	e004      	b.n	8008292 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8008288:	6839      	ldr	r1, [r7, #0]
 800828a:	6878      	ldr	r0, [r7, #4]
 800828c:	f000 f8a6 	bl	80083dc <USBD_CtlError>
        break;
 8008290:	bf00      	nop
}
 8008292:	bf00      	nop
 8008294:	3708      	adds	r7, #8
 8008296:	46bd      	mov	sp, r7
 8008298:	bd80      	pop	{r7, pc}

0800829a <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800829a:	b580      	push	{r7, lr}
 800829c:	b082      	sub	sp, #8
 800829e:	af00      	add	r7, sp, #0
 80082a0:	6078      	str	r0, [r7, #4]
 80082a2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80082aa:	3b01      	subs	r3, #1
 80082ac:	2b02      	cmp	r3, #2
 80082ae:	d81e      	bhi.n	80082ee <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80082b0:	683b      	ldr	r3, [r7, #0]
 80082b2:	88db      	ldrh	r3, [r3, #6]
 80082b4:	2b02      	cmp	r3, #2
 80082b6:	d004      	beq.n	80082c2 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 80082b8:	6839      	ldr	r1, [r7, #0]
 80082ba:	6878      	ldr	r0, [r7, #4]
 80082bc:	f000 f88e 	bl	80083dc <USBD_CtlError>
        break;
 80082c0:	e01a      	b.n	80082f8 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	2201      	movs	r2, #1
 80082c6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d005      	beq.n	80082de <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	68db      	ldr	r3, [r3, #12]
 80082d6:	f043 0202 	orr.w	r2, r3, #2
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	330c      	adds	r3, #12
 80082e2:	2202      	movs	r2, #2
 80082e4:	4619      	mov	r1, r3
 80082e6:	6878      	ldr	r0, [r7, #4]
 80082e8:	f000 f8e2 	bl	80084b0 <USBD_CtlSendData>
      break;
 80082ec:	e004      	b.n	80082f8 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 80082ee:	6839      	ldr	r1, [r7, #0]
 80082f0:	6878      	ldr	r0, [r7, #4]
 80082f2:	f000 f873 	bl	80083dc <USBD_CtlError>
      break;
 80082f6:	bf00      	nop
  }
}
 80082f8:	bf00      	nop
 80082fa:	3708      	adds	r7, #8
 80082fc:	46bd      	mov	sp, r7
 80082fe:	bd80      	pop	{r7, pc}

08008300 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008300:	b580      	push	{r7, lr}
 8008302:	b082      	sub	sp, #8
 8008304:	af00      	add	r7, sp, #0
 8008306:	6078      	str	r0, [r7, #4]
 8008308:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800830a:	683b      	ldr	r3, [r7, #0]
 800830c:	885b      	ldrh	r3, [r3, #2]
 800830e:	2b01      	cmp	r3, #1
 8008310:	d106      	bne.n	8008320 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	2201      	movs	r2, #1
 8008316:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 800831a:	6878      	ldr	r0, [r7, #4]
 800831c:	f000 f926 	bl	800856c <USBD_CtlSendStatus>
  }
}
 8008320:	bf00      	nop
 8008322:	3708      	adds	r7, #8
 8008324:	46bd      	mov	sp, r7
 8008326:	bd80      	pop	{r7, pc}

08008328 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008328:	b580      	push	{r7, lr}
 800832a:	b082      	sub	sp, #8
 800832c:	af00      	add	r7, sp, #0
 800832e:	6078      	str	r0, [r7, #4]
 8008330:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008338:	3b01      	subs	r3, #1
 800833a:	2b02      	cmp	r3, #2
 800833c:	d80b      	bhi.n	8008356 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800833e:	683b      	ldr	r3, [r7, #0]
 8008340:	885b      	ldrh	r3, [r3, #2]
 8008342:	2b01      	cmp	r3, #1
 8008344:	d10c      	bne.n	8008360 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	2200      	movs	r2, #0
 800834a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 800834e:	6878      	ldr	r0, [r7, #4]
 8008350:	f000 f90c 	bl	800856c <USBD_CtlSendStatus>
      }
      break;
 8008354:	e004      	b.n	8008360 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8008356:	6839      	ldr	r1, [r7, #0]
 8008358:	6878      	ldr	r0, [r7, #4]
 800835a:	f000 f83f 	bl	80083dc <USBD_CtlError>
      break;
 800835e:	e000      	b.n	8008362 <USBD_ClrFeature+0x3a>
      break;
 8008360:	bf00      	nop
  }
}
 8008362:	bf00      	nop
 8008364:	3708      	adds	r7, #8
 8008366:	46bd      	mov	sp, r7
 8008368:	bd80      	pop	{r7, pc}

0800836a <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800836a:	b480      	push	{r7}
 800836c:	b083      	sub	sp, #12
 800836e:	af00      	add	r7, sp, #0
 8008370:	6078      	str	r0, [r7, #4]
 8008372:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8008374:	683b      	ldr	r3, [r7, #0]
 8008376:	781a      	ldrb	r2, [r3, #0]
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800837c:	683b      	ldr	r3, [r7, #0]
 800837e:	785a      	ldrb	r2, [r3, #1]
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8008384:	683b      	ldr	r3, [r7, #0]
 8008386:	3302      	adds	r3, #2
 8008388:	781b      	ldrb	r3, [r3, #0]
 800838a:	461a      	mov	r2, r3
 800838c:	683b      	ldr	r3, [r7, #0]
 800838e:	3303      	adds	r3, #3
 8008390:	781b      	ldrb	r3, [r3, #0]
 8008392:	021b      	lsls	r3, r3, #8
 8008394:	b29b      	uxth	r3, r3
 8008396:	4413      	add	r3, r2
 8008398:	b29a      	uxth	r2, r3
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800839e:	683b      	ldr	r3, [r7, #0]
 80083a0:	3304      	adds	r3, #4
 80083a2:	781b      	ldrb	r3, [r3, #0]
 80083a4:	461a      	mov	r2, r3
 80083a6:	683b      	ldr	r3, [r7, #0]
 80083a8:	3305      	adds	r3, #5
 80083aa:	781b      	ldrb	r3, [r3, #0]
 80083ac:	021b      	lsls	r3, r3, #8
 80083ae:	b29b      	uxth	r3, r3
 80083b0:	4413      	add	r3, r2
 80083b2:	b29a      	uxth	r2, r3
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80083b8:	683b      	ldr	r3, [r7, #0]
 80083ba:	3306      	adds	r3, #6
 80083bc:	781b      	ldrb	r3, [r3, #0]
 80083be:	461a      	mov	r2, r3
 80083c0:	683b      	ldr	r3, [r7, #0]
 80083c2:	3307      	adds	r3, #7
 80083c4:	781b      	ldrb	r3, [r3, #0]
 80083c6:	021b      	lsls	r3, r3, #8
 80083c8:	b29b      	uxth	r3, r3
 80083ca:	4413      	add	r3, r2
 80083cc:	b29a      	uxth	r2, r3
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	80da      	strh	r2, [r3, #6]

}
 80083d2:	bf00      	nop
 80083d4:	370c      	adds	r7, #12
 80083d6:	46bd      	mov	sp, r7
 80083d8:	bc80      	pop	{r7}
 80083da:	4770      	bx	lr

080083dc <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 80083dc:	b580      	push	{r7, lr}
 80083de:	b082      	sub	sp, #8
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	6078      	str	r0, [r7, #4]
 80083e4:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 80083e6:	2180      	movs	r1, #128	@ 0x80
 80083e8:	6878      	ldr	r0, [r7, #4]
 80083ea:	f000 fc53 	bl	8008c94 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80083ee:	2100      	movs	r1, #0
 80083f0:	6878      	ldr	r0, [r7, #4]
 80083f2:	f000 fc4f 	bl	8008c94 <USBD_LL_StallEP>
}
 80083f6:	bf00      	nop
 80083f8:	3708      	adds	r7, #8
 80083fa:	46bd      	mov	sp, r7
 80083fc:	bd80      	pop	{r7, pc}

080083fe <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80083fe:	b580      	push	{r7, lr}
 8008400:	b086      	sub	sp, #24
 8008402:	af00      	add	r7, sp, #0
 8008404:	60f8      	str	r0, [r7, #12]
 8008406:	60b9      	str	r1, [r7, #8]
 8008408:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800840a:	2300      	movs	r3, #0
 800840c:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	2b00      	cmp	r3, #0
 8008412:	d032      	beq.n	800847a <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8008414:	68f8      	ldr	r0, [r7, #12]
 8008416:	f000 f834 	bl	8008482 <USBD_GetLen>
 800841a:	4603      	mov	r3, r0
 800841c:	3301      	adds	r3, #1
 800841e:	b29b      	uxth	r3, r3
 8008420:	005b      	lsls	r3, r3, #1
 8008422:	b29a      	uxth	r2, r3
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8008428:	7dfb      	ldrb	r3, [r7, #23]
 800842a:	1c5a      	adds	r2, r3, #1
 800842c:	75fa      	strb	r2, [r7, #23]
 800842e:	461a      	mov	r2, r3
 8008430:	68bb      	ldr	r3, [r7, #8]
 8008432:	4413      	add	r3, r2
 8008434:	687a      	ldr	r2, [r7, #4]
 8008436:	7812      	ldrb	r2, [r2, #0]
 8008438:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800843a:	7dfb      	ldrb	r3, [r7, #23]
 800843c:	1c5a      	adds	r2, r3, #1
 800843e:	75fa      	strb	r2, [r7, #23]
 8008440:	461a      	mov	r2, r3
 8008442:	68bb      	ldr	r3, [r7, #8]
 8008444:	4413      	add	r3, r2
 8008446:	2203      	movs	r2, #3
 8008448:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800844a:	e012      	b.n	8008472 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	1c5a      	adds	r2, r3, #1
 8008450:	60fa      	str	r2, [r7, #12]
 8008452:	7dfa      	ldrb	r2, [r7, #23]
 8008454:	1c51      	adds	r1, r2, #1
 8008456:	75f9      	strb	r1, [r7, #23]
 8008458:	4611      	mov	r1, r2
 800845a:	68ba      	ldr	r2, [r7, #8]
 800845c:	440a      	add	r2, r1
 800845e:	781b      	ldrb	r3, [r3, #0]
 8008460:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8008462:	7dfb      	ldrb	r3, [r7, #23]
 8008464:	1c5a      	adds	r2, r3, #1
 8008466:	75fa      	strb	r2, [r7, #23]
 8008468:	461a      	mov	r2, r3
 800846a:	68bb      	ldr	r3, [r7, #8]
 800846c:	4413      	add	r3, r2
 800846e:	2200      	movs	r2, #0
 8008470:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	781b      	ldrb	r3, [r3, #0]
 8008476:	2b00      	cmp	r3, #0
 8008478:	d1e8      	bne.n	800844c <USBD_GetString+0x4e>
    }
  }
}
 800847a:	bf00      	nop
 800847c:	3718      	adds	r7, #24
 800847e:	46bd      	mov	sp, r7
 8008480:	bd80      	pop	{r7, pc}

08008482 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008482:	b480      	push	{r7}
 8008484:	b085      	sub	sp, #20
 8008486:	af00      	add	r7, sp, #0
 8008488:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800848a:	2300      	movs	r3, #0
 800848c:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800848e:	e005      	b.n	800849c <USBD_GetLen+0x1a>
  {
    len++;
 8008490:	7bfb      	ldrb	r3, [r7, #15]
 8008492:	3301      	adds	r3, #1
 8008494:	73fb      	strb	r3, [r7, #15]
    buf++;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	3301      	adds	r3, #1
 800849a:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	781b      	ldrb	r3, [r3, #0]
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d1f5      	bne.n	8008490 <USBD_GetLen+0xe>
  }

  return len;
 80084a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80084a6:	4618      	mov	r0, r3
 80084a8:	3714      	adds	r7, #20
 80084aa:	46bd      	mov	sp, r7
 80084ac:	bc80      	pop	{r7}
 80084ae:	4770      	bx	lr

080084b0 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80084b0:	b580      	push	{r7, lr}
 80084b2:	b084      	sub	sp, #16
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	60f8      	str	r0, [r7, #12]
 80084b8:	60b9      	str	r1, [r7, #8]
 80084ba:	4613      	mov	r3, r2
 80084bc:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	2202      	movs	r2, #2
 80084c2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80084c6:	88fa      	ldrh	r2, [r7, #6]
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80084cc:	88fa      	ldrh	r2, [r7, #6]
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80084d2:	88fb      	ldrh	r3, [r7, #6]
 80084d4:	68ba      	ldr	r2, [r7, #8]
 80084d6:	2100      	movs	r1, #0
 80084d8:	68f8      	ldr	r0, [r7, #12]
 80084da:	f000 fc63 	bl	8008da4 <USBD_LL_Transmit>

  return USBD_OK;
 80084de:	2300      	movs	r3, #0
}
 80084e0:	4618      	mov	r0, r3
 80084e2:	3710      	adds	r7, #16
 80084e4:	46bd      	mov	sp, r7
 80084e6:	bd80      	pop	{r7, pc}

080084e8 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80084e8:	b580      	push	{r7, lr}
 80084ea:	b084      	sub	sp, #16
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	60f8      	str	r0, [r7, #12]
 80084f0:	60b9      	str	r1, [r7, #8]
 80084f2:	4613      	mov	r3, r2
 80084f4:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80084f6:	88fb      	ldrh	r3, [r7, #6]
 80084f8:	68ba      	ldr	r2, [r7, #8]
 80084fa:	2100      	movs	r1, #0
 80084fc:	68f8      	ldr	r0, [r7, #12]
 80084fe:	f000 fc51 	bl	8008da4 <USBD_LL_Transmit>

  return USBD_OK;
 8008502:	2300      	movs	r3, #0
}
 8008504:	4618      	mov	r0, r3
 8008506:	3710      	adds	r7, #16
 8008508:	46bd      	mov	sp, r7
 800850a:	bd80      	pop	{r7, pc}

0800850c <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800850c:	b580      	push	{r7, lr}
 800850e:	b084      	sub	sp, #16
 8008510:	af00      	add	r7, sp, #0
 8008512:	60f8      	str	r0, [r7, #12]
 8008514:	60b9      	str	r1, [r7, #8]
 8008516:	4613      	mov	r3, r2
 8008518:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	2203      	movs	r2, #3
 800851e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8008522:	88fa      	ldrh	r2, [r7, #6]
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 800852a:	88fa      	ldrh	r2, [r7, #6]
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008532:	88fb      	ldrh	r3, [r7, #6]
 8008534:	68ba      	ldr	r2, [r7, #8]
 8008536:	2100      	movs	r1, #0
 8008538:	68f8      	ldr	r0, [r7, #12]
 800853a:	f000 fc56 	bl	8008dea <USBD_LL_PrepareReceive>

  return USBD_OK;
 800853e:	2300      	movs	r3, #0
}
 8008540:	4618      	mov	r0, r3
 8008542:	3710      	adds	r7, #16
 8008544:	46bd      	mov	sp, r7
 8008546:	bd80      	pop	{r7, pc}

08008548 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8008548:	b580      	push	{r7, lr}
 800854a:	b084      	sub	sp, #16
 800854c:	af00      	add	r7, sp, #0
 800854e:	60f8      	str	r0, [r7, #12]
 8008550:	60b9      	str	r1, [r7, #8]
 8008552:	4613      	mov	r3, r2
 8008554:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008556:	88fb      	ldrh	r3, [r7, #6]
 8008558:	68ba      	ldr	r2, [r7, #8]
 800855a:	2100      	movs	r1, #0
 800855c:	68f8      	ldr	r0, [r7, #12]
 800855e:	f000 fc44 	bl	8008dea <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008562:	2300      	movs	r3, #0
}
 8008564:	4618      	mov	r0, r3
 8008566:	3710      	adds	r7, #16
 8008568:	46bd      	mov	sp, r7
 800856a:	bd80      	pop	{r7, pc}

0800856c <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800856c:	b580      	push	{r7, lr}
 800856e:	b082      	sub	sp, #8
 8008570:	af00      	add	r7, sp, #0
 8008572:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	2204      	movs	r2, #4
 8008578:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800857c:	2300      	movs	r3, #0
 800857e:	2200      	movs	r2, #0
 8008580:	2100      	movs	r1, #0
 8008582:	6878      	ldr	r0, [r7, #4]
 8008584:	f000 fc0e 	bl	8008da4 <USBD_LL_Transmit>

  return USBD_OK;
 8008588:	2300      	movs	r3, #0
}
 800858a:	4618      	mov	r0, r3
 800858c:	3708      	adds	r7, #8
 800858e:	46bd      	mov	sp, r7
 8008590:	bd80      	pop	{r7, pc}

08008592 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008592:	b580      	push	{r7, lr}
 8008594:	b082      	sub	sp, #8
 8008596:	af00      	add	r7, sp, #0
 8008598:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	2205      	movs	r2, #5
 800859e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80085a2:	2300      	movs	r3, #0
 80085a4:	2200      	movs	r2, #0
 80085a6:	2100      	movs	r1, #0
 80085a8:	6878      	ldr	r0, [r7, #4]
 80085aa:	f000 fc1e 	bl	8008dea <USBD_LL_PrepareReceive>

  return USBD_OK;
 80085ae:	2300      	movs	r3, #0
}
 80085b0:	4618      	mov	r0, r3
 80085b2:	3708      	adds	r7, #8
 80085b4:	46bd      	mov	sp, r7
 80085b6:	bd80      	pop	{r7, pc}

080085b8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80085b8:	b580      	push	{r7, lr}
 80085ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80085bc:	2200      	movs	r2, #0
 80085be:	4912      	ldr	r1, [pc, #72]	@ (8008608 <MX_USB_DEVICE_Init+0x50>)
 80085c0:	4812      	ldr	r0, [pc, #72]	@ (800860c <MX_USB_DEVICE_Init+0x54>)
 80085c2:	f7fe ff62 	bl	800748a <USBD_Init>
 80085c6:	4603      	mov	r3, r0
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d001      	beq.n	80085d0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80085cc:	f7f8 f990 	bl	80008f0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80085d0:	490f      	ldr	r1, [pc, #60]	@ (8008610 <MX_USB_DEVICE_Init+0x58>)
 80085d2:	480e      	ldr	r0, [pc, #56]	@ (800860c <MX_USB_DEVICE_Init+0x54>)
 80085d4:	f7fe ff84 	bl	80074e0 <USBD_RegisterClass>
 80085d8:	4603      	mov	r3, r0
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d001      	beq.n	80085e2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80085de:	f7f8 f987 	bl	80008f0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80085e2:	490c      	ldr	r1, [pc, #48]	@ (8008614 <MX_USB_DEVICE_Init+0x5c>)
 80085e4:	4809      	ldr	r0, [pc, #36]	@ (800860c <MX_USB_DEVICE_Init+0x54>)
 80085e6:	f7fe feb5 	bl	8007354 <USBD_CDC_RegisterInterface>
 80085ea:	4603      	mov	r3, r0
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d001      	beq.n	80085f4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80085f0:	f7f8 f97e 	bl	80008f0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80085f4:	4805      	ldr	r0, [pc, #20]	@ (800860c <MX_USB_DEVICE_Init+0x54>)
 80085f6:	f7fe ff8c 	bl	8007512 <USBD_Start>
 80085fa:	4603      	mov	r3, r0
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d001      	beq.n	8008604 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008600:	f7f8 f976 	bl	80008f0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008604:	bf00      	nop
 8008606:	bd80      	pop	{r7, pc}
 8008608:	2000014c 	.word	0x2000014c
 800860c:	20000288 	.word	0x20000288
 8008610:	20000038 	.word	0x20000038
 8008614:	2000013c 	.word	0x2000013c

08008618 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008618:	b580      	push	{r7, lr}
 800861a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800861c:	2200      	movs	r2, #0
 800861e:	4905      	ldr	r1, [pc, #20]	@ (8008634 <CDC_Init_FS+0x1c>)
 8008620:	4805      	ldr	r0, [pc, #20]	@ (8008638 <CDC_Init_FS+0x20>)
 8008622:	f7fe fead 	bl	8007380 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008626:	4905      	ldr	r1, [pc, #20]	@ (800863c <CDC_Init_FS+0x24>)
 8008628:	4803      	ldr	r0, [pc, #12]	@ (8008638 <CDC_Init_FS+0x20>)
 800862a:	f7fe fec2 	bl	80073b2 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800862e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008630:	4618      	mov	r0, r3
 8008632:	bd80      	pop	{r7, pc}
 8008634:	2000094c 	.word	0x2000094c
 8008638:	20000288 	.word	0x20000288
 800863c:	2000054c 	.word	0x2000054c

08008640 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008640:	b480      	push	{r7}
 8008642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008644:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008646:	4618      	mov	r0, r3
 8008648:	46bd      	mov	sp, r7
 800864a:	bc80      	pop	{r7}
 800864c:	4770      	bx	lr
	...

08008650 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008650:	b480      	push	{r7}
 8008652:	b083      	sub	sp, #12
 8008654:	af00      	add	r7, sp, #0
 8008656:	4603      	mov	r3, r0
 8008658:	6039      	str	r1, [r7, #0]
 800865a:	71fb      	strb	r3, [r7, #7]
 800865c:	4613      	mov	r3, r2
 800865e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008660:	79fb      	ldrb	r3, [r7, #7]
 8008662:	2b23      	cmp	r3, #35	@ 0x23
 8008664:	d84a      	bhi.n	80086fc <CDC_Control_FS+0xac>
 8008666:	a201      	add	r2, pc, #4	@ (adr r2, 800866c <CDC_Control_FS+0x1c>)
 8008668:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800866c:	080086fd 	.word	0x080086fd
 8008670:	080086fd 	.word	0x080086fd
 8008674:	080086fd 	.word	0x080086fd
 8008678:	080086fd 	.word	0x080086fd
 800867c:	080086fd 	.word	0x080086fd
 8008680:	080086fd 	.word	0x080086fd
 8008684:	080086fd 	.word	0x080086fd
 8008688:	080086fd 	.word	0x080086fd
 800868c:	080086fd 	.word	0x080086fd
 8008690:	080086fd 	.word	0x080086fd
 8008694:	080086fd 	.word	0x080086fd
 8008698:	080086fd 	.word	0x080086fd
 800869c:	080086fd 	.word	0x080086fd
 80086a0:	080086fd 	.word	0x080086fd
 80086a4:	080086fd 	.word	0x080086fd
 80086a8:	080086fd 	.word	0x080086fd
 80086ac:	080086fd 	.word	0x080086fd
 80086b0:	080086fd 	.word	0x080086fd
 80086b4:	080086fd 	.word	0x080086fd
 80086b8:	080086fd 	.word	0x080086fd
 80086bc:	080086fd 	.word	0x080086fd
 80086c0:	080086fd 	.word	0x080086fd
 80086c4:	080086fd 	.word	0x080086fd
 80086c8:	080086fd 	.word	0x080086fd
 80086cc:	080086fd 	.word	0x080086fd
 80086d0:	080086fd 	.word	0x080086fd
 80086d4:	080086fd 	.word	0x080086fd
 80086d8:	080086fd 	.word	0x080086fd
 80086dc:	080086fd 	.word	0x080086fd
 80086e0:	080086fd 	.word	0x080086fd
 80086e4:	080086fd 	.word	0x080086fd
 80086e8:	080086fd 	.word	0x080086fd
 80086ec:	080086fd 	.word	0x080086fd
 80086f0:	080086fd 	.word	0x080086fd
 80086f4:	080086fd 	.word	0x080086fd
 80086f8:	080086fd 	.word	0x080086fd
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80086fc:	bf00      	nop
  }

  return (USBD_OK);
 80086fe:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008700:	4618      	mov	r0, r3
 8008702:	370c      	adds	r7, #12
 8008704:	46bd      	mov	sp, r7
 8008706:	bc80      	pop	{r7}
 8008708:	4770      	bx	lr
 800870a:	bf00      	nop

0800870c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800870c:	b580      	push	{r7, lr}
 800870e:	b082      	sub	sp, #8
 8008710:	af00      	add	r7, sp, #0
 8008712:	6078      	str	r0, [r7, #4]
 8008714:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008716:	6879      	ldr	r1, [r7, #4]
 8008718:	4805      	ldr	r0, [pc, #20]	@ (8008730 <CDC_Receive_FS+0x24>)
 800871a:	f7fe fe4a 	bl	80073b2 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800871e:	4804      	ldr	r0, [pc, #16]	@ (8008730 <CDC_Receive_FS+0x24>)
 8008720:	f7fe fe89 	bl	8007436 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008724:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008726:	4618      	mov	r0, r3
 8008728:	3708      	adds	r7, #8
 800872a:	46bd      	mov	sp, r7
 800872c:	bd80      	pop	{r7, pc}
 800872e:	bf00      	nop
 8008730:	20000288 	.word	0x20000288

08008734 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008734:	b580      	push	{r7, lr}
 8008736:	b084      	sub	sp, #16
 8008738:	af00      	add	r7, sp, #0
 800873a:	6078      	str	r0, [r7, #4]
 800873c:	460b      	mov	r3, r1
 800873e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008740:	2300      	movs	r3, #0
 8008742:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008744:	4b0d      	ldr	r3, [pc, #52]	@ (800877c <CDC_Transmit_FS+0x48>)
 8008746:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800874a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800874c:	68bb      	ldr	r3, [r7, #8]
 800874e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008752:	2b00      	cmp	r3, #0
 8008754:	d001      	beq.n	800875a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008756:	2301      	movs	r3, #1
 8008758:	e00b      	b.n	8008772 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800875a:	887b      	ldrh	r3, [r7, #2]
 800875c:	461a      	mov	r2, r3
 800875e:	6879      	ldr	r1, [r7, #4]
 8008760:	4806      	ldr	r0, [pc, #24]	@ (800877c <CDC_Transmit_FS+0x48>)
 8008762:	f7fe fe0d 	bl	8007380 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008766:	4805      	ldr	r0, [pc, #20]	@ (800877c <CDC_Transmit_FS+0x48>)
 8008768:	f7fe fe36 	bl	80073d8 <USBD_CDC_TransmitPacket>
 800876c:	4603      	mov	r3, r0
 800876e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008770:	7bfb      	ldrb	r3, [r7, #15]
}
 8008772:	4618      	mov	r0, r3
 8008774:	3710      	adds	r7, #16
 8008776:	46bd      	mov	sp, r7
 8008778:	bd80      	pop	{r7, pc}
 800877a:	bf00      	nop
 800877c:	20000288 	.word	0x20000288

08008780 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008780:	b480      	push	{r7}
 8008782:	b083      	sub	sp, #12
 8008784:	af00      	add	r7, sp, #0
 8008786:	4603      	mov	r3, r0
 8008788:	6039      	str	r1, [r7, #0]
 800878a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800878c:	683b      	ldr	r3, [r7, #0]
 800878e:	2212      	movs	r2, #18
 8008790:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008792:	4b03      	ldr	r3, [pc, #12]	@ (80087a0 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008794:	4618      	mov	r0, r3
 8008796:	370c      	adds	r7, #12
 8008798:	46bd      	mov	sp, r7
 800879a:	bc80      	pop	{r7}
 800879c:	4770      	bx	lr
 800879e:	bf00      	nop
 80087a0:	20000168 	.word	0x20000168

080087a4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80087a4:	b480      	push	{r7}
 80087a6:	b083      	sub	sp, #12
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	4603      	mov	r3, r0
 80087ac:	6039      	str	r1, [r7, #0]
 80087ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80087b0:	683b      	ldr	r3, [r7, #0]
 80087b2:	2204      	movs	r2, #4
 80087b4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80087b6:	4b03      	ldr	r3, [pc, #12]	@ (80087c4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80087b8:	4618      	mov	r0, r3
 80087ba:	370c      	adds	r7, #12
 80087bc:	46bd      	mov	sp, r7
 80087be:	bc80      	pop	{r7}
 80087c0:	4770      	bx	lr
 80087c2:	bf00      	nop
 80087c4:	2000017c 	.word	0x2000017c

080087c8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80087c8:	b580      	push	{r7, lr}
 80087ca:	b082      	sub	sp, #8
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	4603      	mov	r3, r0
 80087d0:	6039      	str	r1, [r7, #0]
 80087d2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80087d4:	79fb      	ldrb	r3, [r7, #7]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d105      	bne.n	80087e6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80087da:	683a      	ldr	r2, [r7, #0]
 80087dc:	4907      	ldr	r1, [pc, #28]	@ (80087fc <USBD_FS_ProductStrDescriptor+0x34>)
 80087de:	4808      	ldr	r0, [pc, #32]	@ (8008800 <USBD_FS_ProductStrDescriptor+0x38>)
 80087e0:	f7ff fe0d 	bl	80083fe <USBD_GetString>
 80087e4:	e004      	b.n	80087f0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80087e6:	683a      	ldr	r2, [r7, #0]
 80087e8:	4904      	ldr	r1, [pc, #16]	@ (80087fc <USBD_FS_ProductStrDescriptor+0x34>)
 80087ea:	4805      	ldr	r0, [pc, #20]	@ (8008800 <USBD_FS_ProductStrDescriptor+0x38>)
 80087ec:	f7ff fe07 	bl	80083fe <USBD_GetString>
  }
  return USBD_StrDesc;
 80087f0:	4b02      	ldr	r3, [pc, #8]	@ (80087fc <USBD_FS_ProductStrDescriptor+0x34>)
}
 80087f2:	4618      	mov	r0, r3
 80087f4:	3708      	adds	r7, #8
 80087f6:	46bd      	mov	sp, r7
 80087f8:	bd80      	pop	{r7, pc}
 80087fa:	bf00      	nop
 80087fc:	20000d4c 	.word	0x20000d4c
 8008800:	080098a4 	.word	0x080098a4

08008804 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008804:	b580      	push	{r7, lr}
 8008806:	b082      	sub	sp, #8
 8008808:	af00      	add	r7, sp, #0
 800880a:	4603      	mov	r3, r0
 800880c:	6039      	str	r1, [r7, #0]
 800880e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008810:	683a      	ldr	r2, [r7, #0]
 8008812:	4904      	ldr	r1, [pc, #16]	@ (8008824 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008814:	4804      	ldr	r0, [pc, #16]	@ (8008828 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008816:	f7ff fdf2 	bl	80083fe <USBD_GetString>
  return USBD_StrDesc;
 800881a:	4b02      	ldr	r3, [pc, #8]	@ (8008824 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800881c:	4618      	mov	r0, r3
 800881e:	3708      	adds	r7, #8
 8008820:	46bd      	mov	sp, r7
 8008822:	bd80      	pop	{r7, pc}
 8008824:	20000d4c 	.word	0x20000d4c
 8008828:	080098bc 	.word	0x080098bc

0800882c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800882c:	b580      	push	{r7, lr}
 800882e:	b082      	sub	sp, #8
 8008830:	af00      	add	r7, sp, #0
 8008832:	4603      	mov	r3, r0
 8008834:	6039      	str	r1, [r7, #0]
 8008836:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008838:	683b      	ldr	r3, [r7, #0]
 800883a:	221a      	movs	r2, #26
 800883c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800883e:	f000 f843 	bl	80088c8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008842:	4b02      	ldr	r3, [pc, #8]	@ (800884c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008844:	4618      	mov	r0, r3
 8008846:	3708      	adds	r7, #8
 8008848:	46bd      	mov	sp, r7
 800884a:	bd80      	pop	{r7, pc}
 800884c:	20000180 	.word	0x20000180

08008850 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008850:	b580      	push	{r7, lr}
 8008852:	b082      	sub	sp, #8
 8008854:	af00      	add	r7, sp, #0
 8008856:	4603      	mov	r3, r0
 8008858:	6039      	str	r1, [r7, #0]
 800885a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800885c:	79fb      	ldrb	r3, [r7, #7]
 800885e:	2b00      	cmp	r3, #0
 8008860:	d105      	bne.n	800886e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008862:	683a      	ldr	r2, [r7, #0]
 8008864:	4907      	ldr	r1, [pc, #28]	@ (8008884 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008866:	4808      	ldr	r0, [pc, #32]	@ (8008888 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008868:	f7ff fdc9 	bl	80083fe <USBD_GetString>
 800886c:	e004      	b.n	8008878 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800886e:	683a      	ldr	r2, [r7, #0]
 8008870:	4904      	ldr	r1, [pc, #16]	@ (8008884 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008872:	4805      	ldr	r0, [pc, #20]	@ (8008888 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008874:	f7ff fdc3 	bl	80083fe <USBD_GetString>
  }
  return USBD_StrDesc;
 8008878:	4b02      	ldr	r3, [pc, #8]	@ (8008884 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800887a:	4618      	mov	r0, r3
 800887c:	3708      	adds	r7, #8
 800887e:	46bd      	mov	sp, r7
 8008880:	bd80      	pop	{r7, pc}
 8008882:	bf00      	nop
 8008884:	20000d4c 	.word	0x20000d4c
 8008888:	080098d0 	.word	0x080098d0

0800888c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800888c:	b580      	push	{r7, lr}
 800888e:	b082      	sub	sp, #8
 8008890:	af00      	add	r7, sp, #0
 8008892:	4603      	mov	r3, r0
 8008894:	6039      	str	r1, [r7, #0]
 8008896:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008898:	79fb      	ldrb	r3, [r7, #7]
 800889a:	2b00      	cmp	r3, #0
 800889c:	d105      	bne.n	80088aa <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800889e:	683a      	ldr	r2, [r7, #0]
 80088a0:	4907      	ldr	r1, [pc, #28]	@ (80088c0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80088a2:	4808      	ldr	r0, [pc, #32]	@ (80088c4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80088a4:	f7ff fdab 	bl	80083fe <USBD_GetString>
 80088a8:	e004      	b.n	80088b4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80088aa:	683a      	ldr	r2, [r7, #0]
 80088ac:	4904      	ldr	r1, [pc, #16]	@ (80088c0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80088ae:	4805      	ldr	r0, [pc, #20]	@ (80088c4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80088b0:	f7ff fda5 	bl	80083fe <USBD_GetString>
  }
  return USBD_StrDesc;
 80088b4:	4b02      	ldr	r3, [pc, #8]	@ (80088c0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80088b6:	4618      	mov	r0, r3
 80088b8:	3708      	adds	r7, #8
 80088ba:	46bd      	mov	sp, r7
 80088bc:	bd80      	pop	{r7, pc}
 80088be:	bf00      	nop
 80088c0:	20000d4c 	.word	0x20000d4c
 80088c4:	080098dc 	.word	0x080098dc

080088c8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80088c8:	b580      	push	{r7, lr}
 80088ca:	b084      	sub	sp, #16
 80088cc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80088ce:	4b0f      	ldr	r3, [pc, #60]	@ (800890c <Get_SerialNum+0x44>)
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80088d4:	4b0e      	ldr	r3, [pc, #56]	@ (8008910 <Get_SerialNum+0x48>)
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80088da:	4b0e      	ldr	r3, [pc, #56]	@ (8008914 <Get_SerialNum+0x4c>)
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80088e0:	68fa      	ldr	r2, [r7, #12]
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	4413      	add	r3, r2
 80088e6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d009      	beq.n	8008902 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80088ee:	2208      	movs	r2, #8
 80088f0:	4909      	ldr	r1, [pc, #36]	@ (8008918 <Get_SerialNum+0x50>)
 80088f2:	68f8      	ldr	r0, [r7, #12]
 80088f4:	f000 f814 	bl	8008920 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80088f8:	2204      	movs	r2, #4
 80088fa:	4908      	ldr	r1, [pc, #32]	@ (800891c <Get_SerialNum+0x54>)
 80088fc:	68b8      	ldr	r0, [r7, #8]
 80088fe:	f000 f80f 	bl	8008920 <IntToUnicode>
  }
}
 8008902:	bf00      	nop
 8008904:	3710      	adds	r7, #16
 8008906:	46bd      	mov	sp, r7
 8008908:	bd80      	pop	{r7, pc}
 800890a:	bf00      	nop
 800890c:	1ffff7e8 	.word	0x1ffff7e8
 8008910:	1ffff7ec 	.word	0x1ffff7ec
 8008914:	1ffff7f0 	.word	0x1ffff7f0
 8008918:	20000182 	.word	0x20000182
 800891c:	20000192 	.word	0x20000192

08008920 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008920:	b480      	push	{r7}
 8008922:	b087      	sub	sp, #28
 8008924:	af00      	add	r7, sp, #0
 8008926:	60f8      	str	r0, [r7, #12]
 8008928:	60b9      	str	r1, [r7, #8]
 800892a:	4613      	mov	r3, r2
 800892c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800892e:	2300      	movs	r3, #0
 8008930:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008932:	2300      	movs	r3, #0
 8008934:	75fb      	strb	r3, [r7, #23]
 8008936:	e027      	b.n	8008988 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	0f1b      	lsrs	r3, r3, #28
 800893c:	2b09      	cmp	r3, #9
 800893e:	d80b      	bhi.n	8008958 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	0f1b      	lsrs	r3, r3, #28
 8008944:	b2da      	uxtb	r2, r3
 8008946:	7dfb      	ldrb	r3, [r7, #23]
 8008948:	005b      	lsls	r3, r3, #1
 800894a:	4619      	mov	r1, r3
 800894c:	68bb      	ldr	r3, [r7, #8]
 800894e:	440b      	add	r3, r1
 8008950:	3230      	adds	r2, #48	@ 0x30
 8008952:	b2d2      	uxtb	r2, r2
 8008954:	701a      	strb	r2, [r3, #0]
 8008956:	e00a      	b.n	800896e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	0f1b      	lsrs	r3, r3, #28
 800895c:	b2da      	uxtb	r2, r3
 800895e:	7dfb      	ldrb	r3, [r7, #23]
 8008960:	005b      	lsls	r3, r3, #1
 8008962:	4619      	mov	r1, r3
 8008964:	68bb      	ldr	r3, [r7, #8]
 8008966:	440b      	add	r3, r1
 8008968:	3237      	adds	r2, #55	@ 0x37
 800896a:	b2d2      	uxtb	r2, r2
 800896c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	011b      	lsls	r3, r3, #4
 8008972:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008974:	7dfb      	ldrb	r3, [r7, #23]
 8008976:	005b      	lsls	r3, r3, #1
 8008978:	3301      	adds	r3, #1
 800897a:	68ba      	ldr	r2, [r7, #8]
 800897c:	4413      	add	r3, r2
 800897e:	2200      	movs	r2, #0
 8008980:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008982:	7dfb      	ldrb	r3, [r7, #23]
 8008984:	3301      	adds	r3, #1
 8008986:	75fb      	strb	r3, [r7, #23]
 8008988:	7dfa      	ldrb	r2, [r7, #23]
 800898a:	79fb      	ldrb	r3, [r7, #7]
 800898c:	429a      	cmp	r2, r3
 800898e:	d3d3      	bcc.n	8008938 <IntToUnicode+0x18>
  }
}
 8008990:	bf00      	nop
 8008992:	bf00      	nop
 8008994:	371c      	adds	r7, #28
 8008996:	46bd      	mov	sp, r7
 8008998:	bc80      	pop	{r7}
 800899a:	4770      	bx	lr

0800899c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800899c:	b580      	push	{r7, lr}
 800899e:	b084      	sub	sp, #16
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	4a0d      	ldr	r2, [pc, #52]	@ (80089e0 <HAL_PCD_MspInit+0x44>)
 80089aa:	4293      	cmp	r3, r2
 80089ac:	d113      	bne.n	80089d6 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80089ae:	4b0d      	ldr	r3, [pc, #52]	@ (80089e4 <HAL_PCD_MspInit+0x48>)
 80089b0:	69db      	ldr	r3, [r3, #28]
 80089b2:	4a0c      	ldr	r2, [pc, #48]	@ (80089e4 <HAL_PCD_MspInit+0x48>)
 80089b4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80089b8:	61d3      	str	r3, [r2, #28]
 80089ba:	4b0a      	ldr	r3, [pc, #40]	@ (80089e4 <HAL_PCD_MspInit+0x48>)
 80089bc:	69db      	ldr	r3, [r3, #28]
 80089be:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80089c2:	60fb      	str	r3, [r7, #12]
 80089c4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80089c6:	2200      	movs	r2, #0
 80089c8:	2100      	movs	r1, #0
 80089ca:	2014      	movs	r0, #20
 80089cc:	f7f8 fd7d 	bl	80014ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80089d0:	2014      	movs	r0, #20
 80089d2:	f7f8 fd96 	bl	8001502 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80089d6:	bf00      	nop
 80089d8:	3710      	adds	r7, #16
 80089da:	46bd      	mov	sp, r7
 80089dc:	bd80      	pop	{r7, pc}
 80089de:	bf00      	nop
 80089e0:	40005c00 	.word	0x40005c00
 80089e4:	40021000 	.word	0x40021000

080089e8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80089e8:	b580      	push	{r7, lr}
 80089ea:	b082      	sub	sp, #8
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 80089fc:	4619      	mov	r1, r3
 80089fe:	4610      	mov	r0, r2
 8008a00:	f7fe fdcf 	bl	80075a2 <USBD_LL_SetupStage>
}
 8008a04:	bf00      	nop
 8008a06:	3708      	adds	r7, #8
 8008a08:	46bd      	mov	sp, r7
 8008a0a:	bd80      	pop	{r7, pc}

08008a0c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a0c:	b580      	push	{r7, lr}
 8008a0e:	b082      	sub	sp, #8
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	6078      	str	r0, [r7, #4]
 8008a14:	460b      	mov	r3, r1
 8008a16:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 8008a1e:	78fa      	ldrb	r2, [r7, #3]
 8008a20:	6879      	ldr	r1, [r7, #4]
 8008a22:	4613      	mov	r3, r2
 8008a24:	009b      	lsls	r3, r3, #2
 8008a26:	4413      	add	r3, r2
 8008a28:	00db      	lsls	r3, r3, #3
 8008a2a:	440b      	add	r3, r1
 8008a2c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008a30:	681a      	ldr	r2, [r3, #0]
 8008a32:	78fb      	ldrb	r3, [r7, #3]
 8008a34:	4619      	mov	r1, r3
 8008a36:	f7fe fe01 	bl	800763c <USBD_LL_DataOutStage>
}
 8008a3a:	bf00      	nop
 8008a3c:	3708      	adds	r7, #8
 8008a3e:	46bd      	mov	sp, r7
 8008a40:	bd80      	pop	{r7, pc}

08008a42 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a42:	b580      	push	{r7, lr}
 8008a44:	b082      	sub	sp, #8
 8008a46:	af00      	add	r7, sp, #0
 8008a48:	6078      	str	r0, [r7, #4]
 8008a4a:	460b      	mov	r3, r1
 8008a4c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 8008a54:	78fa      	ldrb	r2, [r7, #3]
 8008a56:	6879      	ldr	r1, [r7, #4]
 8008a58:	4613      	mov	r3, r2
 8008a5a:	009b      	lsls	r3, r3, #2
 8008a5c:	4413      	add	r3, r2
 8008a5e:	00db      	lsls	r3, r3, #3
 8008a60:	440b      	add	r3, r1
 8008a62:	3324      	adds	r3, #36	@ 0x24
 8008a64:	681a      	ldr	r2, [r3, #0]
 8008a66:	78fb      	ldrb	r3, [r7, #3]
 8008a68:	4619      	mov	r1, r3
 8008a6a:	f7fe fe58 	bl	800771e <USBD_LL_DataInStage>
}
 8008a6e:	bf00      	nop
 8008a70:	3708      	adds	r7, #8
 8008a72:	46bd      	mov	sp, r7
 8008a74:	bd80      	pop	{r7, pc}

08008a76 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a76:	b580      	push	{r7, lr}
 8008a78:	b082      	sub	sp, #8
 8008a7a:	af00      	add	r7, sp, #0
 8008a7c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008a84:	4618      	mov	r0, r3
 8008a86:	f7fe ff68 	bl	800795a <USBD_LL_SOF>
}
 8008a8a:	bf00      	nop
 8008a8c:	3708      	adds	r7, #8
 8008a8e:	46bd      	mov	sp, r7
 8008a90:	bd80      	pop	{r7, pc}

08008a92 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a92:	b580      	push	{r7, lr}
 8008a94:	b084      	sub	sp, #16
 8008a96:	af00      	add	r7, sp, #0
 8008a98:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008a9a:	2301      	movs	r3, #1
 8008a9c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	799b      	ldrb	r3, [r3, #6]
 8008aa2:	2b02      	cmp	r3, #2
 8008aa4:	d001      	beq.n	8008aaa <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008aa6:	f7f7 ff23 	bl	80008f0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008ab0:	7bfa      	ldrb	r2, [r7, #15]
 8008ab2:	4611      	mov	r1, r2
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	f7fe ff18 	bl	80078ea <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008ac0:	4618      	mov	r0, r3
 8008ac2:	f7fe fed1 	bl	8007868 <USBD_LL_Reset>
}
 8008ac6:	bf00      	nop
 8008ac8:	3710      	adds	r7, #16
 8008aca:	46bd      	mov	sp, r7
 8008acc:	bd80      	pop	{r7, pc}
	...

08008ad0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ad0:	b580      	push	{r7, lr}
 8008ad2:	b082      	sub	sp, #8
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008ade:	4618      	mov	r0, r3
 8008ae0:	f7fe ff12 	bl	8007908 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	7a9b      	ldrb	r3, [r3, #10]
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d005      	beq.n	8008af8 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008aec:	4b04      	ldr	r3, [pc, #16]	@ (8008b00 <HAL_PCD_SuspendCallback+0x30>)
 8008aee:	691b      	ldr	r3, [r3, #16]
 8008af0:	4a03      	ldr	r2, [pc, #12]	@ (8008b00 <HAL_PCD_SuspendCallback+0x30>)
 8008af2:	f043 0306 	orr.w	r3, r3, #6
 8008af6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008af8:	bf00      	nop
 8008afa:	3708      	adds	r7, #8
 8008afc:	46bd      	mov	sp, r7
 8008afe:	bd80      	pop	{r7, pc}
 8008b00:	e000ed00 	.word	0xe000ed00

08008b04 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b04:	b580      	push	{r7, lr}
 8008b06:	b082      	sub	sp, #8
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008b12:	4618      	mov	r0, r3
 8008b14:	f7fe ff0c 	bl	8007930 <USBD_LL_Resume>
}
 8008b18:	bf00      	nop
 8008b1a:	3708      	adds	r7, #8
 8008b1c:	46bd      	mov	sp, r7
 8008b1e:	bd80      	pop	{r7, pc}

08008b20 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008b20:	b580      	push	{r7, lr}
 8008b22:	b082      	sub	sp, #8
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8008b28:	4a28      	ldr	r2, [pc, #160]	@ (8008bcc <USBD_LL_Init+0xac>)
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	f8c2 32d4 	str.w	r3, [r2, #724]	@ 0x2d4
  pdev->pData = &hpcd_USB_FS;
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	4a26      	ldr	r2, [pc, #152]	@ (8008bcc <USBD_LL_Init+0xac>)
 8008b34:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 8008b38:	4b24      	ldr	r3, [pc, #144]	@ (8008bcc <USBD_LL_Init+0xac>)
 8008b3a:	4a25      	ldr	r2, [pc, #148]	@ (8008bd0 <USBD_LL_Init+0xb0>)
 8008b3c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8008b3e:	4b23      	ldr	r3, [pc, #140]	@ (8008bcc <USBD_LL_Init+0xac>)
 8008b40:	2208      	movs	r2, #8
 8008b42:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8008b44:	4b21      	ldr	r3, [pc, #132]	@ (8008bcc <USBD_LL_Init+0xac>)
 8008b46:	2202      	movs	r2, #2
 8008b48:	719a      	strb	r2, [r3, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8008b4a:	4b20      	ldr	r3, [pc, #128]	@ (8008bcc <USBD_LL_Init+0xac>)
 8008b4c:	2200      	movs	r2, #0
 8008b4e:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8008b50:	4b1e      	ldr	r3, [pc, #120]	@ (8008bcc <USBD_LL_Init+0xac>)
 8008b52:	2200      	movs	r2, #0
 8008b54:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8008b56:	4b1d      	ldr	r3, [pc, #116]	@ (8008bcc <USBD_LL_Init+0xac>)
 8008b58:	2200      	movs	r2, #0
 8008b5a:	731a      	strb	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8008b5c:	481b      	ldr	r0, [pc, #108]	@ (8008bcc <USBD_LL_Init+0xac>)
 8008b5e:	f7f8 fea0 	bl	80018a2 <HAL_PCD_Init>
 8008b62:	4603      	mov	r3, r0
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d001      	beq.n	8008b6c <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8008b68:	f7f7 fec2 	bl	80008f0 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008b72:	2318      	movs	r3, #24
 8008b74:	2200      	movs	r2, #0
 8008b76:	2100      	movs	r1, #0
 8008b78:	f7fa fbb1 	bl	80032de <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008b82:	2358      	movs	r3, #88	@ 0x58
 8008b84:	2200      	movs	r2, #0
 8008b86:	2180      	movs	r1, #128	@ 0x80
 8008b88:	f7fa fba9 	bl	80032de <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008b92:	23c0      	movs	r3, #192	@ 0xc0
 8008b94:	2200      	movs	r2, #0
 8008b96:	2181      	movs	r1, #129	@ 0x81
 8008b98:	f7fa fba1 	bl	80032de <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008ba2:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8008ba6:	2200      	movs	r2, #0
 8008ba8:	2101      	movs	r1, #1
 8008baa:	f7fa fb98 	bl	80032de <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008bb4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008bb8:	2200      	movs	r2, #0
 8008bba:	2182      	movs	r1, #130	@ 0x82
 8008bbc:	f7fa fb8f 	bl	80032de <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8008bc0:	2300      	movs	r3, #0
}
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	3708      	adds	r7, #8
 8008bc6:	46bd      	mov	sp, r7
 8008bc8:	bd80      	pop	{r7, pc}
 8008bca:	bf00      	nop
 8008bcc:	20000f4c 	.word	0x20000f4c
 8008bd0:	40005c00 	.word	0x40005c00

08008bd4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008bd4:	b580      	push	{r7, lr}
 8008bd6:	b084      	sub	sp, #16
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008bdc:	2300      	movs	r3, #0
 8008bde:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008be0:	2300      	movs	r3, #0
 8008be2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008bea:	4618      	mov	r0, r3
 8008bec:	f7f8 ff4f 	bl	8001a8e <HAL_PCD_Start>
 8008bf0:	4603      	mov	r3, r0
 8008bf2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008bf4:	7bfb      	ldrb	r3, [r7, #15]
 8008bf6:	4618      	mov	r0, r3
 8008bf8:	f000 f94e 	bl	8008e98 <USBD_Get_USB_Status>
 8008bfc:	4603      	mov	r3, r0
 8008bfe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c00:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c02:	4618      	mov	r0, r3
 8008c04:	3710      	adds	r7, #16
 8008c06:	46bd      	mov	sp, r7
 8008c08:	bd80      	pop	{r7, pc}

08008c0a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008c0a:	b580      	push	{r7, lr}
 8008c0c:	b084      	sub	sp, #16
 8008c0e:	af00      	add	r7, sp, #0
 8008c10:	6078      	str	r0, [r7, #4]
 8008c12:	4608      	mov	r0, r1
 8008c14:	4611      	mov	r1, r2
 8008c16:	461a      	mov	r2, r3
 8008c18:	4603      	mov	r3, r0
 8008c1a:	70fb      	strb	r3, [r7, #3]
 8008c1c:	460b      	mov	r3, r1
 8008c1e:	70bb      	strb	r3, [r7, #2]
 8008c20:	4613      	mov	r3, r2
 8008c22:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c24:	2300      	movs	r3, #0
 8008c26:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c28:	2300      	movs	r3, #0
 8008c2a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008c32:	78bb      	ldrb	r3, [r7, #2]
 8008c34:	883a      	ldrh	r2, [r7, #0]
 8008c36:	78f9      	ldrb	r1, [r7, #3]
 8008c38:	f7f9 f8a3 	bl	8001d82 <HAL_PCD_EP_Open>
 8008c3c:	4603      	mov	r3, r0
 8008c3e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c40:	7bfb      	ldrb	r3, [r7, #15]
 8008c42:	4618      	mov	r0, r3
 8008c44:	f000 f928 	bl	8008e98 <USBD_Get_USB_Status>
 8008c48:	4603      	mov	r3, r0
 8008c4a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c4c:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c4e:	4618      	mov	r0, r3
 8008c50:	3710      	adds	r7, #16
 8008c52:	46bd      	mov	sp, r7
 8008c54:	bd80      	pop	{r7, pc}

08008c56 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008c56:	b580      	push	{r7, lr}
 8008c58:	b084      	sub	sp, #16
 8008c5a:	af00      	add	r7, sp, #0
 8008c5c:	6078      	str	r0, [r7, #4]
 8008c5e:	460b      	mov	r3, r1
 8008c60:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c62:	2300      	movs	r3, #0
 8008c64:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c66:	2300      	movs	r3, #0
 8008c68:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008c70:	78fa      	ldrb	r2, [r7, #3]
 8008c72:	4611      	mov	r1, r2
 8008c74:	4618      	mov	r0, r3
 8008c76:	f7f9 f8e1 	bl	8001e3c <HAL_PCD_EP_Close>
 8008c7a:	4603      	mov	r3, r0
 8008c7c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c7e:	7bfb      	ldrb	r3, [r7, #15]
 8008c80:	4618      	mov	r0, r3
 8008c82:	f000 f909 	bl	8008e98 <USBD_Get_USB_Status>
 8008c86:	4603      	mov	r3, r0
 8008c88:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c8a:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c8c:	4618      	mov	r0, r3
 8008c8e:	3710      	adds	r7, #16
 8008c90:	46bd      	mov	sp, r7
 8008c92:	bd80      	pop	{r7, pc}

08008c94 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008c94:	b580      	push	{r7, lr}
 8008c96:	b084      	sub	sp, #16
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	6078      	str	r0, [r7, #4]
 8008c9c:	460b      	mov	r3, r1
 8008c9e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ca0:	2300      	movs	r3, #0
 8008ca2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ca4:	2300      	movs	r3, #0
 8008ca6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008cae:	78fa      	ldrb	r2, [r7, #3]
 8008cb0:	4611      	mov	r1, r2
 8008cb2:	4618      	mov	r0, r3
 8008cb4:	f7f9 f989 	bl	8001fca <HAL_PCD_EP_SetStall>
 8008cb8:	4603      	mov	r3, r0
 8008cba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008cbc:	7bfb      	ldrb	r3, [r7, #15]
 8008cbe:	4618      	mov	r0, r3
 8008cc0:	f000 f8ea 	bl	8008e98 <USBD_Get_USB_Status>
 8008cc4:	4603      	mov	r3, r0
 8008cc6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008cc8:	7bbb      	ldrb	r3, [r7, #14]
}
 8008cca:	4618      	mov	r0, r3
 8008ccc:	3710      	adds	r7, #16
 8008cce:	46bd      	mov	sp, r7
 8008cd0:	bd80      	pop	{r7, pc}

08008cd2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008cd2:	b580      	push	{r7, lr}
 8008cd4:	b084      	sub	sp, #16
 8008cd6:	af00      	add	r7, sp, #0
 8008cd8:	6078      	str	r0, [r7, #4]
 8008cda:	460b      	mov	r3, r1
 8008cdc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008cde:	2300      	movs	r3, #0
 8008ce0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ce2:	2300      	movs	r3, #0
 8008ce4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008cec:	78fa      	ldrb	r2, [r7, #3]
 8008cee:	4611      	mov	r1, r2
 8008cf0:	4618      	mov	r0, r3
 8008cf2:	f7f9 f9ca 	bl	800208a <HAL_PCD_EP_ClrStall>
 8008cf6:	4603      	mov	r3, r0
 8008cf8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008cfa:	7bfb      	ldrb	r3, [r7, #15]
 8008cfc:	4618      	mov	r0, r3
 8008cfe:	f000 f8cb 	bl	8008e98 <USBD_Get_USB_Status>
 8008d02:	4603      	mov	r3, r0
 8008d04:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008d06:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d08:	4618      	mov	r0, r3
 8008d0a:	3710      	adds	r7, #16
 8008d0c:	46bd      	mov	sp, r7
 8008d0e:	bd80      	pop	{r7, pc}

08008d10 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008d10:	b480      	push	{r7}
 8008d12:	b085      	sub	sp, #20
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	6078      	str	r0, [r7, #4]
 8008d18:	460b      	mov	r3, r1
 8008d1a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008d22:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008d24:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	da0b      	bge.n	8008d44 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008d2c:	78fb      	ldrb	r3, [r7, #3]
 8008d2e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008d32:	68f9      	ldr	r1, [r7, #12]
 8008d34:	4613      	mov	r3, r2
 8008d36:	009b      	lsls	r3, r3, #2
 8008d38:	4413      	add	r3, r2
 8008d3a:	00db      	lsls	r3, r3, #3
 8008d3c:	440b      	add	r3, r1
 8008d3e:	3312      	adds	r3, #18
 8008d40:	781b      	ldrb	r3, [r3, #0]
 8008d42:	e00b      	b.n	8008d5c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008d44:	78fb      	ldrb	r3, [r7, #3]
 8008d46:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008d4a:	68f9      	ldr	r1, [r7, #12]
 8008d4c:	4613      	mov	r3, r2
 8008d4e:	009b      	lsls	r3, r3, #2
 8008d50:	4413      	add	r3, r2
 8008d52:	00db      	lsls	r3, r3, #3
 8008d54:	440b      	add	r3, r1
 8008d56:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 8008d5a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008d5c:	4618      	mov	r0, r3
 8008d5e:	3714      	adds	r7, #20
 8008d60:	46bd      	mov	sp, r7
 8008d62:	bc80      	pop	{r7}
 8008d64:	4770      	bx	lr

08008d66 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008d66:	b580      	push	{r7, lr}
 8008d68:	b084      	sub	sp, #16
 8008d6a:	af00      	add	r7, sp, #0
 8008d6c:	6078      	str	r0, [r7, #4]
 8008d6e:	460b      	mov	r3, r1
 8008d70:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d72:	2300      	movs	r3, #0
 8008d74:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d76:	2300      	movs	r3, #0
 8008d78:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008d80:	78fa      	ldrb	r2, [r7, #3]
 8008d82:	4611      	mov	r1, r2
 8008d84:	4618      	mov	r0, r3
 8008d86:	f7f8 ffd8 	bl	8001d3a <HAL_PCD_SetAddress>
 8008d8a:	4603      	mov	r3, r0
 8008d8c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d8e:	7bfb      	ldrb	r3, [r7, #15]
 8008d90:	4618      	mov	r0, r3
 8008d92:	f000 f881 	bl	8008e98 <USBD_Get_USB_Status>
 8008d96:	4603      	mov	r3, r0
 8008d98:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008d9a:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d9c:	4618      	mov	r0, r3
 8008d9e:	3710      	adds	r7, #16
 8008da0:	46bd      	mov	sp, r7
 8008da2:	bd80      	pop	{r7, pc}

08008da4 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008da4:	b580      	push	{r7, lr}
 8008da6:	b086      	sub	sp, #24
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	60f8      	str	r0, [r7, #12]
 8008dac:	607a      	str	r2, [r7, #4]
 8008dae:	461a      	mov	r2, r3
 8008db0:	460b      	mov	r3, r1
 8008db2:	72fb      	strb	r3, [r7, #11]
 8008db4:	4613      	mov	r3, r2
 8008db6:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008db8:	2300      	movs	r3, #0
 8008dba:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008dbc:	2300      	movs	r3, #0
 8008dbe:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008dc6:	893b      	ldrh	r3, [r7, #8]
 8008dc8:	7af9      	ldrb	r1, [r7, #11]
 8008dca:	687a      	ldr	r2, [r7, #4]
 8008dcc:	f7f9 f8c6 	bl	8001f5c <HAL_PCD_EP_Transmit>
 8008dd0:	4603      	mov	r3, r0
 8008dd2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008dd4:	7dfb      	ldrb	r3, [r7, #23]
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	f000 f85e 	bl	8008e98 <USBD_Get_USB_Status>
 8008ddc:	4603      	mov	r3, r0
 8008dde:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008de0:	7dbb      	ldrb	r3, [r7, #22]
}
 8008de2:	4618      	mov	r0, r3
 8008de4:	3718      	adds	r7, #24
 8008de6:	46bd      	mov	sp, r7
 8008de8:	bd80      	pop	{r7, pc}

08008dea <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008dea:	b580      	push	{r7, lr}
 8008dec:	b086      	sub	sp, #24
 8008dee:	af00      	add	r7, sp, #0
 8008df0:	60f8      	str	r0, [r7, #12]
 8008df2:	607a      	str	r2, [r7, #4]
 8008df4:	461a      	mov	r2, r3
 8008df6:	460b      	mov	r3, r1
 8008df8:	72fb      	strb	r3, [r7, #11]
 8008dfa:	4613      	mov	r3, r2
 8008dfc:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008dfe:	2300      	movs	r3, #0
 8008e00:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e02:	2300      	movs	r3, #0
 8008e04:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008e0c:	893b      	ldrh	r3, [r7, #8]
 8008e0e:	7af9      	ldrb	r1, [r7, #11]
 8008e10:	687a      	ldr	r2, [r7, #4]
 8008e12:	f7f9 f85b 	bl	8001ecc <HAL_PCD_EP_Receive>
 8008e16:	4603      	mov	r3, r0
 8008e18:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008e1a:	7dfb      	ldrb	r3, [r7, #23]
 8008e1c:	4618      	mov	r0, r3
 8008e1e:	f000 f83b 	bl	8008e98 <USBD_Get_USB_Status>
 8008e22:	4603      	mov	r3, r0
 8008e24:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008e26:	7dbb      	ldrb	r3, [r7, #22]
}
 8008e28:	4618      	mov	r0, r3
 8008e2a:	3718      	adds	r7, #24
 8008e2c:	46bd      	mov	sp, r7
 8008e2e:	bd80      	pop	{r7, pc}

08008e30 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008e30:	b580      	push	{r7, lr}
 8008e32:	b082      	sub	sp, #8
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	6078      	str	r0, [r7, #4]
 8008e38:	460b      	mov	r3, r1
 8008e3a:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008e42:	78fa      	ldrb	r2, [r7, #3]
 8008e44:	4611      	mov	r1, r2
 8008e46:	4618      	mov	r0, r3
 8008e48:	f7f9 f871 	bl	8001f2e <HAL_PCD_EP_GetRxCount>
 8008e4c:	4603      	mov	r3, r0
}
 8008e4e:	4618      	mov	r0, r3
 8008e50:	3708      	adds	r7, #8
 8008e52:	46bd      	mov	sp, r7
 8008e54:	bd80      	pop	{r7, pc}
	...

08008e58 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008e58:	b480      	push	{r7}
 8008e5a:	b083      	sub	sp, #12
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008e60:	4b02      	ldr	r3, [pc, #8]	@ (8008e6c <USBD_static_malloc+0x14>)
}
 8008e62:	4618      	mov	r0, r3
 8008e64:	370c      	adds	r7, #12
 8008e66:	46bd      	mov	sp, r7
 8008e68:	bc80      	pop	{r7}
 8008e6a:	4770      	bx	lr
 8008e6c:	20001224 	.word	0x20001224

08008e70 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008e70:	b480      	push	{r7}
 8008e72:	b083      	sub	sp, #12
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	6078      	str	r0, [r7, #4]

}
 8008e78:	bf00      	nop
 8008e7a:	370c      	adds	r7, #12
 8008e7c:	46bd      	mov	sp, r7
 8008e7e:	bc80      	pop	{r7}
 8008e80:	4770      	bx	lr

08008e82 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e82:	b480      	push	{r7}
 8008e84:	b083      	sub	sp, #12
 8008e86:	af00      	add	r7, sp, #0
 8008e88:	6078      	str	r0, [r7, #4]
 8008e8a:	460b      	mov	r3, r1
 8008e8c:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8008e8e:	bf00      	nop
 8008e90:	370c      	adds	r7, #12
 8008e92:	46bd      	mov	sp, r7
 8008e94:	bc80      	pop	{r7}
 8008e96:	4770      	bx	lr

08008e98 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008e98:	b480      	push	{r7}
 8008e9a:	b085      	sub	sp, #20
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	4603      	mov	r3, r0
 8008ea0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ea2:	2300      	movs	r3, #0
 8008ea4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008ea6:	79fb      	ldrb	r3, [r7, #7]
 8008ea8:	2b03      	cmp	r3, #3
 8008eaa:	d817      	bhi.n	8008edc <USBD_Get_USB_Status+0x44>
 8008eac:	a201      	add	r2, pc, #4	@ (adr r2, 8008eb4 <USBD_Get_USB_Status+0x1c>)
 8008eae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008eb2:	bf00      	nop
 8008eb4:	08008ec5 	.word	0x08008ec5
 8008eb8:	08008ecb 	.word	0x08008ecb
 8008ebc:	08008ed1 	.word	0x08008ed1
 8008ec0:	08008ed7 	.word	0x08008ed7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008ec4:	2300      	movs	r3, #0
 8008ec6:	73fb      	strb	r3, [r7, #15]
    break;
 8008ec8:	e00b      	b.n	8008ee2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008eca:	2302      	movs	r3, #2
 8008ecc:	73fb      	strb	r3, [r7, #15]
    break;
 8008ece:	e008      	b.n	8008ee2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008ed0:	2301      	movs	r3, #1
 8008ed2:	73fb      	strb	r3, [r7, #15]
    break;
 8008ed4:	e005      	b.n	8008ee2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008ed6:	2302      	movs	r3, #2
 8008ed8:	73fb      	strb	r3, [r7, #15]
    break;
 8008eda:	e002      	b.n	8008ee2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008edc:	2302      	movs	r3, #2
 8008ede:	73fb      	strb	r3, [r7, #15]
    break;
 8008ee0:	bf00      	nop
  }
  return usb_status;
 8008ee2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ee4:	4618      	mov	r0, r3
 8008ee6:	3714      	adds	r7, #20
 8008ee8:	46bd      	mov	sp, r7
 8008eea:	bc80      	pop	{r7}
 8008eec:	4770      	bx	lr
 8008eee:	bf00      	nop

08008ef0 <siprintf>:
 8008ef0:	b40e      	push	{r1, r2, r3}
 8008ef2:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008ef6:	b500      	push	{lr}
 8008ef8:	b09c      	sub	sp, #112	@ 0x70
 8008efa:	ab1d      	add	r3, sp, #116	@ 0x74
 8008efc:	9002      	str	r0, [sp, #8]
 8008efe:	9006      	str	r0, [sp, #24]
 8008f00:	9107      	str	r1, [sp, #28]
 8008f02:	9104      	str	r1, [sp, #16]
 8008f04:	4808      	ldr	r0, [pc, #32]	@ (8008f28 <siprintf+0x38>)
 8008f06:	4909      	ldr	r1, [pc, #36]	@ (8008f2c <siprintf+0x3c>)
 8008f08:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f0c:	9105      	str	r1, [sp, #20]
 8008f0e:	6800      	ldr	r0, [r0, #0]
 8008f10:	a902      	add	r1, sp, #8
 8008f12:	9301      	str	r3, [sp, #4]
 8008f14:	f000 f992 	bl	800923c <_svfiprintf_r>
 8008f18:	2200      	movs	r2, #0
 8008f1a:	9b02      	ldr	r3, [sp, #8]
 8008f1c:	701a      	strb	r2, [r3, #0]
 8008f1e:	b01c      	add	sp, #112	@ 0x70
 8008f20:	f85d eb04 	ldr.w	lr, [sp], #4
 8008f24:	b003      	add	sp, #12
 8008f26:	4770      	bx	lr
 8008f28:	2000019c 	.word	0x2000019c
 8008f2c:	ffff0208 	.word	0xffff0208

08008f30 <memset>:
 8008f30:	4603      	mov	r3, r0
 8008f32:	4402      	add	r2, r0
 8008f34:	4293      	cmp	r3, r2
 8008f36:	d100      	bne.n	8008f3a <memset+0xa>
 8008f38:	4770      	bx	lr
 8008f3a:	f803 1b01 	strb.w	r1, [r3], #1
 8008f3e:	e7f9      	b.n	8008f34 <memset+0x4>

08008f40 <__errno>:
 8008f40:	4b01      	ldr	r3, [pc, #4]	@ (8008f48 <__errno+0x8>)
 8008f42:	6818      	ldr	r0, [r3, #0]
 8008f44:	4770      	bx	lr
 8008f46:	bf00      	nop
 8008f48:	2000019c 	.word	0x2000019c

08008f4c <__libc_init_array>:
 8008f4c:	b570      	push	{r4, r5, r6, lr}
 8008f4e:	2600      	movs	r6, #0
 8008f50:	4d0c      	ldr	r5, [pc, #48]	@ (8008f84 <__libc_init_array+0x38>)
 8008f52:	4c0d      	ldr	r4, [pc, #52]	@ (8008f88 <__libc_init_array+0x3c>)
 8008f54:	1b64      	subs	r4, r4, r5
 8008f56:	10a4      	asrs	r4, r4, #2
 8008f58:	42a6      	cmp	r6, r4
 8008f5a:	d109      	bne.n	8008f70 <__libc_init_array+0x24>
 8008f5c:	f000 fc78 	bl	8009850 <_init>
 8008f60:	2600      	movs	r6, #0
 8008f62:	4d0a      	ldr	r5, [pc, #40]	@ (8008f8c <__libc_init_array+0x40>)
 8008f64:	4c0a      	ldr	r4, [pc, #40]	@ (8008f90 <__libc_init_array+0x44>)
 8008f66:	1b64      	subs	r4, r4, r5
 8008f68:	10a4      	asrs	r4, r4, #2
 8008f6a:	42a6      	cmp	r6, r4
 8008f6c:	d105      	bne.n	8008f7a <__libc_init_array+0x2e>
 8008f6e:	bd70      	pop	{r4, r5, r6, pc}
 8008f70:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f74:	4798      	blx	r3
 8008f76:	3601      	adds	r6, #1
 8008f78:	e7ee      	b.n	8008f58 <__libc_init_array+0xc>
 8008f7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f7e:	4798      	blx	r3
 8008f80:	3601      	adds	r6, #1
 8008f82:	e7f2      	b.n	8008f6a <__libc_init_array+0x1e>
 8008f84:	0800994c 	.word	0x0800994c
 8008f88:	0800994c 	.word	0x0800994c
 8008f8c:	0800994c 	.word	0x0800994c
 8008f90:	08009950 	.word	0x08009950

08008f94 <__retarget_lock_acquire_recursive>:
 8008f94:	4770      	bx	lr

08008f96 <__retarget_lock_release_recursive>:
 8008f96:	4770      	bx	lr

08008f98 <_free_r>:
 8008f98:	b538      	push	{r3, r4, r5, lr}
 8008f9a:	4605      	mov	r5, r0
 8008f9c:	2900      	cmp	r1, #0
 8008f9e:	d040      	beq.n	8009022 <_free_r+0x8a>
 8008fa0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008fa4:	1f0c      	subs	r4, r1, #4
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	bfb8      	it	lt
 8008faa:	18e4      	addlt	r4, r4, r3
 8008fac:	f000 f8de 	bl	800916c <__malloc_lock>
 8008fb0:	4a1c      	ldr	r2, [pc, #112]	@ (8009024 <_free_r+0x8c>)
 8008fb2:	6813      	ldr	r3, [r2, #0]
 8008fb4:	b933      	cbnz	r3, 8008fc4 <_free_r+0x2c>
 8008fb6:	6063      	str	r3, [r4, #4]
 8008fb8:	6014      	str	r4, [r2, #0]
 8008fba:	4628      	mov	r0, r5
 8008fbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008fc0:	f000 b8da 	b.w	8009178 <__malloc_unlock>
 8008fc4:	42a3      	cmp	r3, r4
 8008fc6:	d908      	bls.n	8008fda <_free_r+0x42>
 8008fc8:	6820      	ldr	r0, [r4, #0]
 8008fca:	1821      	adds	r1, r4, r0
 8008fcc:	428b      	cmp	r3, r1
 8008fce:	bf01      	itttt	eq
 8008fd0:	6819      	ldreq	r1, [r3, #0]
 8008fd2:	685b      	ldreq	r3, [r3, #4]
 8008fd4:	1809      	addeq	r1, r1, r0
 8008fd6:	6021      	streq	r1, [r4, #0]
 8008fd8:	e7ed      	b.n	8008fb6 <_free_r+0x1e>
 8008fda:	461a      	mov	r2, r3
 8008fdc:	685b      	ldr	r3, [r3, #4]
 8008fde:	b10b      	cbz	r3, 8008fe4 <_free_r+0x4c>
 8008fe0:	42a3      	cmp	r3, r4
 8008fe2:	d9fa      	bls.n	8008fda <_free_r+0x42>
 8008fe4:	6811      	ldr	r1, [r2, #0]
 8008fe6:	1850      	adds	r0, r2, r1
 8008fe8:	42a0      	cmp	r0, r4
 8008fea:	d10b      	bne.n	8009004 <_free_r+0x6c>
 8008fec:	6820      	ldr	r0, [r4, #0]
 8008fee:	4401      	add	r1, r0
 8008ff0:	1850      	adds	r0, r2, r1
 8008ff2:	4283      	cmp	r3, r0
 8008ff4:	6011      	str	r1, [r2, #0]
 8008ff6:	d1e0      	bne.n	8008fba <_free_r+0x22>
 8008ff8:	6818      	ldr	r0, [r3, #0]
 8008ffa:	685b      	ldr	r3, [r3, #4]
 8008ffc:	4408      	add	r0, r1
 8008ffe:	6010      	str	r0, [r2, #0]
 8009000:	6053      	str	r3, [r2, #4]
 8009002:	e7da      	b.n	8008fba <_free_r+0x22>
 8009004:	d902      	bls.n	800900c <_free_r+0x74>
 8009006:	230c      	movs	r3, #12
 8009008:	602b      	str	r3, [r5, #0]
 800900a:	e7d6      	b.n	8008fba <_free_r+0x22>
 800900c:	6820      	ldr	r0, [r4, #0]
 800900e:	1821      	adds	r1, r4, r0
 8009010:	428b      	cmp	r3, r1
 8009012:	bf01      	itttt	eq
 8009014:	6819      	ldreq	r1, [r3, #0]
 8009016:	685b      	ldreq	r3, [r3, #4]
 8009018:	1809      	addeq	r1, r1, r0
 800901a:	6021      	streq	r1, [r4, #0]
 800901c:	6063      	str	r3, [r4, #4]
 800901e:	6054      	str	r4, [r2, #4]
 8009020:	e7cb      	b.n	8008fba <_free_r+0x22>
 8009022:	bd38      	pop	{r3, r4, r5, pc}
 8009024:	20001588 	.word	0x20001588

08009028 <sbrk_aligned>:
 8009028:	b570      	push	{r4, r5, r6, lr}
 800902a:	4e0f      	ldr	r6, [pc, #60]	@ (8009068 <sbrk_aligned+0x40>)
 800902c:	460c      	mov	r4, r1
 800902e:	6831      	ldr	r1, [r6, #0]
 8009030:	4605      	mov	r5, r0
 8009032:	b911      	cbnz	r1, 800903a <sbrk_aligned+0x12>
 8009034:	f000 fbaa 	bl	800978c <_sbrk_r>
 8009038:	6030      	str	r0, [r6, #0]
 800903a:	4621      	mov	r1, r4
 800903c:	4628      	mov	r0, r5
 800903e:	f000 fba5 	bl	800978c <_sbrk_r>
 8009042:	1c43      	adds	r3, r0, #1
 8009044:	d103      	bne.n	800904e <sbrk_aligned+0x26>
 8009046:	f04f 34ff 	mov.w	r4, #4294967295
 800904a:	4620      	mov	r0, r4
 800904c:	bd70      	pop	{r4, r5, r6, pc}
 800904e:	1cc4      	adds	r4, r0, #3
 8009050:	f024 0403 	bic.w	r4, r4, #3
 8009054:	42a0      	cmp	r0, r4
 8009056:	d0f8      	beq.n	800904a <sbrk_aligned+0x22>
 8009058:	1a21      	subs	r1, r4, r0
 800905a:	4628      	mov	r0, r5
 800905c:	f000 fb96 	bl	800978c <_sbrk_r>
 8009060:	3001      	adds	r0, #1
 8009062:	d1f2      	bne.n	800904a <sbrk_aligned+0x22>
 8009064:	e7ef      	b.n	8009046 <sbrk_aligned+0x1e>
 8009066:	bf00      	nop
 8009068:	20001584 	.word	0x20001584

0800906c <_malloc_r>:
 800906c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009070:	1ccd      	adds	r5, r1, #3
 8009072:	f025 0503 	bic.w	r5, r5, #3
 8009076:	3508      	adds	r5, #8
 8009078:	2d0c      	cmp	r5, #12
 800907a:	bf38      	it	cc
 800907c:	250c      	movcc	r5, #12
 800907e:	2d00      	cmp	r5, #0
 8009080:	4606      	mov	r6, r0
 8009082:	db01      	blt.n	8009088 <_malloc_r+0x1c>
 8009084:	42a9      	cmp	r1, r5
 8009086:	d904      	bls.n	8009092 <_malloc_r+0x26>
 8009088:	230c      	movs	r3, #12
 800908a:	6033      	str	r3, [r6, #0]
 800908c:	2000      	movs	r0, #0
 800908e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009092:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009168 <_malloc_r+0xfc>
 8009096:	f000 f869 	bl	800916c <__malloc_lock>
 800909a:	f8d8 3000 	ldr.w	r3, [r8]
 800909e:	461c      	mov	r4, r3
 80090a0:	bb44      	cbnz	r4, 80090f4 <_malloc_r+0x88>
 80090a2:	4629      	mov	r1, r5
 80090a4:	4630      	mov	r0, r6
 80090a6:	f7ff ffbf 	bl	8009028 <sbrk_aligned>
 80090aa:	1c43      	adds	r3, r0, #1
 80090ac:	4604      	mov	r4, r0
 80090ae:	d158      	bne.n	8009162 <_malloc_r+0xf6>
 80090b0:	f8d8 4000 	ldr.w	r4, [r8]
 80090b4:	4627      	mov	r7, r4
 80090b6:	2f00      	cmp	r7, #0
 80090b8:	d143      	bne.n	8009142 <_malloc_r+0xd6>
 80090ba:	2c00      	cmp	r4, #0
 80090bc:	d04b      	beq.n	8009156 <_malloc_r+0xea>
 80090be:	6823      	ldr	r3, [r4, #0]
 80090c0:	4639      	mov	r1, r7
 80090c2:	4630      	mov	r0, r6
 80090c4:	eb04 0903 	add.w	r9, r4, r3
 80090c8:	f000 fb60 	bl	800978c <_sbrk_r>
 80090cc:	4581      	cmp	r9, r0
 80090ce:	d142      	bne.n	8009156 <_malloc_r+0xea>
 80090d0:	6821      	ldr	r1, [r4, #0]
 80090d2:	4630      	mov	r0, r6
 80090d4:	1a6d      	subs	r5, r5, r1
 80090d6:	4629      	mov	r1, r5
 80090d8:	f7ff ffa6 	bl	8009028 <sbrk_aligned>
 80090dc:	3001      	adds	r0, #1
 80090de:	d03a      	beq.n	8009156 <_malloc_r+0xea>
 80090e0:	6823      	ldr	r3, [r4, #0]
 80090e2:	442b      	add	r3, r5
 80090e4:	6023      	str	r3, [r4, #0]
 80090e6:	f8d8 3000 	ldr.w	r3, [r8]
 80090ea:	685a      	ldr	r2, [r3, #4]
 80090ec:	bb62      	cbnz	r2, 8009148 <_malloc_r+0xdc>
 80090ee:	f8c8 7000 	str.w	r7, [r8]
 80090f2:	e00f      	b.n	8009114 <_malloc_r+0xa8>
 80090f4:	6822      	ldr	r2, [r4, #0]
 80090f6:	1b52      	subs	r2, r2, r5
 80090f8:	d420      	bmi.n	800913c <_malloc_r+0xd0>
 80090fa:	2a0b      	cmp	r2, #11
 80090fc:	d917      	bls.n	800912e <_malloc_r+0xc2>
 80090fe:	1961      	adds	r1, r4, r5
 8009100:	42a3      	cmp	r3, r4
 8009102:	6025      	str	r5, [r4, #0]
 8009104:	bf18      	it	ne
 8009106:	6059      	strne	r1, [r3, #4]
 8009108:	6863      	ldr	r3, [r4, #4]
 800910a:	bf08      	it	eq
 800910c:	f8c8 1000 	streq.w	r1, [r8]
 8009110:	5162      	str	r2, [r4, r5]
 8009112:	604b      	str	r3, [r1, #4]
 8009114:	4630      	mov	r0, r6
 8009116:	f000 f82f 	bl	8009178 <__malloc_unlock>
 800911a:	f104 000b 	add.w	r0, r4, #11
 800911e:	1d23      	adds	r3, r4, #4
 8009120:	f020 0007 	bic.w	r0, r0, #7
 8009124:	1ac2      	subs	r2, r0, r3
 8009126:	bf1c      	itt	ne
 8009128:	1a1b      	subne	r3, r3, r0
 800912a:	50a3      	strne	r3, [r4, r2]
 800912c:	e7af      	b.n	800908e <_malloc_r+0x22>
 800912e:	6862      	ldr	r2, [r4, #4]
 8009130:	42a3      	cmp	r3, r4
 8009132:	bf0c      	ite	eq
 8009134:	f8c8 2000 	streq.w	r2, [r8]
 8009138:	605a      	strne	r2, [r3, #4]
 800913a:	e7eb      	b.n	8009114 <_malloc_r+0xa8>
 800913c:	4623      	mov	r3, r4
 800913e:	6864      	ldr	r4, [r4, #4]
 8009140:	e7ae      	b.n	80090a0 <_malloc_r+0x34>
 8009142:	463c      	mov	r4, r7
 8009144:	687f      	ldr	r7, [r7, #4]
 8009146:	e7b6      	b.n	80090b6 <_malloc_r+0x4a>
 8009148:	461a      	mov	r2, r3
 800914a:	685b      	ldr	r3, [r3, #4]
 800914c:	42a3      	cmp	r3, r4
 800914e:	d1fb      	bne.n	8009148 <_malloc_r+0xdc>
 8009150:	2300      	movs	r3, #0
 8009152:	6053      	str	r3, [r2, #4]
 8009154:	e7de      	b.n	8009114 <_malloc_r+0xa8>
 8009156:	230c      	movs	r3, #12
 8009158:	4630      	mov	r0, r6
 800915a:	6033      	str	r3, [r6, #0]
 800915c:	f000 f80c 	bl	8009178 <__malloc_unlock>
 8009160:	e794      	b.n	800908c <_malloc_r+0x20>
 8009162:	6005      	str	r5, [r0, #0]
 8009164:	e7d6      	b.n	8009114 <_malloc_r+0xa8>
 8009166:	bf00      	nop
 8009168:	20001588 	.word	0x20001588

0800916c <__malloc_lock>:
 800916c:	4801      	ldr	r0, [pc, #4]	@ (8009174 <__malloc_lock+0x8>)
 800916e:	f7ff bf11 	b.w	8008f94 <__retarget_lock_acquire_recursive>
 8009172:	bf00      	nop
 8009174:	20001580 	.word	0x20001580

08009178 <__malloc_unlock>:
 8009178:	4801      	ldr	r0, [pc, #4]	@ (8009180 <__malloc_unlock+0x8>)
 800917a:	f7ff bf0c 	b.w	8008f96 <__retarget_lock_release_recursive>
 800917e:	bf00      	nop
 8009180:	20001580 	.word	0x20001580

08009184 <__ssputs_r>:
 8009184:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009188:	461f      	mov	r7, r3
 800918a:	688e      	ldr	r6, [r1, #8]
 800918c:	4682      	mov	sl, r0
 800918e:	42be      	cmp	r6, r7
 8009190:	460c      	mov	r4, r1
 8009192:	4690      	mov	r8, r2
 8009194:	680b      	ldr	r3, [r1, #0]
 8009196:	d82d      	bhi.n	80091f4 <__ssputs_r+0x70>
 8009198:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800919c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80091a0:	d026      	beq.n	80091f0 <__ssputs_r+0x6c>
 80091a2:	6965      	ldr	r5, [r4, #20]
 80091a4:	6909      	ldr	r1, [r1, #16]
 80091a6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80091aa:	eba3 0901 	sub.w	r9, r3, r1
 80091ae:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80091b2:	1c7b      	adds	r3, r7, #1
 80091b4:	444b      	add	r3, r9
 80091b6:	106d      	asrs	r5, r5, #1
 80091b8:	429d      	cmp	r5, r3
 80091ba:	bf38      	it	cc
 80091bc:	461d      	movcc	r5, r3
 80091be:	0553      	lsls	r3, r2, #21
 80091c0:	d527      	bpl.n	8009212 <__ssputs_r+0x8e>
 80091c2:	4629      	mov	r1, r5
 80091c4:	f7ff ff52 	bl	800906c <_malloc_r>
 80091c8:	4606      	mov	r6, r0
 80091ca:	b360      	cbz	r0, 8009226 <__ssputs_r+0xa2>
 80091cc:	464a      	mov	r2, r9
 80091ce:	6921      	ldr	r1, [r4, #16]
 80091d0:	f000 fafa 	bl	80097c8 <memcpy>
 80091d4:	89a3      	ldrh	r3, [r4, #12]
 80091d6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80091da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80091de:	81a3      	strh	r3, [r4, #12]
 80091e0:	6126      	str	r6, [r4, #16]
 80091e2:	444e      	add	r6, r9
 80091e4:	6026      	str	r6, [r4, #0]
 80091e6:	463e      	mov	r6, r7
 80091e8:	6165      	str	r5, [r4, #20]
 80091ea:	eba5 0509 	sub.w	r5, r5, r9
 80091ee:	60a5      	str	r5, [r4, #8]
 80091f0:	42be      	cmp	r6, r7
 80091f2:	d900      	bls.n	80091f6 <__ssputs_r+0x72>
 80091f4:	463e      	mov	r6, r7
 80091f6:	4632      	mov	r2, r6
 80091f8:	4641      	mov	r1, r8
 80091fa:	6820      	ldr	r0, [r4, #0]
 80091fc:	f000 faac 	bl	8009758 <memmove>
 8009200:	2000      	movs	r0, #0
 8009202:	68a3      	ldr	r3, [r4, #8]
 8009204:	1b9b      	subs	r3, r3, r6
 8009206:	60a3      	str	r3, [r4, #8]
 8009208:	6823      	ldr	r3, [r4, #0]
 800920a:	4433      	add	r3, r6
 800920c:	6023      	str	r3, [r4, #0]
 800920e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009212:	462a      	mov	r2, r5
 8009214:	f000 fae6 	bl	80097e4 <_realloc_r>
 8009218:	4606      	mov	r6, r0
 800921a:	2800      	cmp	r0, #0
 800921c:	d1e0      	bne.n	80091e0 <__ssputs_r+0x5c>
 800921e:	4650      	mov	r0, sl
 8009220:	6921      	ldr	r1, [r4, #16]
 8009222:	f7ff feb9 	bl	8008f98 <_free_r>
 8009226:	230c      	movs	r3, #12
 8009228:	f8ca 3000 	str.w	r3, [sl]
 800922c:	89a3      	ldrh	r3, [r4, #12]
 800922e:	f04f 30ff 	mov.w	r0, #4294967295
 8009232:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009236:	81a3      	strh	r3, [r4, #12]
 8009238:	e7e9      	b.n	800920e <__ssputs_r+0x8a>
	...

0800923c <_svfiprintf_r>:
 800923c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009240:	4698      	mov	r8, r3
 8009242:	898b      	ldrh	r3, [r1, #12]
 8009244:	4607      	mov	r7, r0
 8009246:	061b      	lsls	r3, r3, #24
 8009248:	460d      	mov	r5, r1
 800924a:	4614      	mov	r4, r2
 800924c:	b09d      	sub	sp, #116	@ 0x74
 800924e:	d510      	bpl.n	8009272 <_svfiprintf_r+0x36>
 8009250:	690b      	ldr	r3, [r1, #16]
 8009252:	b973      	cbnz	r3, 8009272 <_svfiprintf_r+0x36>
 8009254:	2140      	movs	r1, #64	@ 0x40
 8009256:	f7ff ff09 	bl	800906c <_malloc_r>
 800925a:	6028      	str	r0, [r5, #0]
 800925c:	6128      	str	r0, [r5, #16]
 800925e:	b930      	cbnz	r0, 800926e <_svfiprintf_r+0x32>
 8009260:	230c      	movs	r3, #12
 8009262:	603b      	str	r3, [r7, #0]
 8009264:	f04f 30ff 	mov.w	r0, #4294967295
 8009268:	b01d      	add	sp, #116	@ 0x74
 800926a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800926e:	2340      	movs	r3, #64	@ 0x40
 8009270:	616b      	str	r3, [r5, #20]
 8009272:	2300      	movs	r3, #0
 8009274:	9309      	str	r3, [sp, #36]	@ 0x24
 8009276:	2320      	movs	r3, #32
 8009278:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800927c:	2330      	movs	r3, #48	@ 0x30
 800927e:	f04f 0901 	mov.w	r9, #1
 8009282:	f8cd 800c 	str.w	r8, [sp, #12]
 8009286:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8009420 <_svfiprintf_r+0x1e4>
 800928a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800928e:	4623      	mov	r3, r4
 8009290:	469a      	mov	sl, r3
 8009292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009296:	b10a      	cbz	r2, 800929c <_svfiprintf_r+0x60>
 8009298:	2a25      	cmp	r2, #37	@ 0x25
 800929a:	d1f9      	bne.n	8009290 <_svfiprintf_r+0x54>
 800929c:	ebba 0b04 	subs.w	fp, sl, r4
 80092a0:	d00b      	beq.n	80092ba <_svfiprintf_r+0x7e>
 80092a2:	465b      	mov	r3, fp
 80092a4:	4622      	mov	r2, r4
 80092a6:	4629      	mov	r1, r5
 80092a8:	4638      	mov	r0, r7
 80092aa:	f7ff ff6b 	bl	8009184 <__ssputs_r>
 80092ae:	3001      	adds	r0, #1
 80092b0:	f000 80a7 	beq.w	8009402 <_svfiprintf_r+0x1c6>
 80092b4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80092b6:	445a      	add	r2, fp
 80092b8:	9209      	str	r2, [sp, #36]	@ 0x24
 80092ba:	f89a 3000 	ldrb.w	r3, [sl]
 80092be:	2b00      	cmp	r3, #0
 80092c0:	f000 809f 	beq.w	8009402 <_svfiprintf_r+0x1c6>
 80092c4:	2300      	movs	r3, #0
 80092c6:	f04f 32ff 	mov.w	r2, #4294967295
 80092ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80092ce:	f10a 0a01 	add.w	sl, sl, #1
 80092d2:	9304      	str	r3, [sp, #16]
 80092d4:	9307      	str	r3, [sp, #28]
 80092d6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80092da:	931a      	str	r3, [sp, #104]	@ 0x68
 80092dc:	4654      	mov	r4, sl
 80092de:	2205      	movs	r2, #5
 80092e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80092e4:	484e      	ldr	r0, [pc, #312]	@ (8009420 <_svfiprintf_r+0x1e4>)
 80092e6:	f000 fa61 	bl	80097ac <memchr>
 80092ea:	9a04      	ldr	r2, [sp, #16]
 80092ec:	b9d8      	cbnz	r0, 8009326 <_svfiprintf_r+0xea>
 80092ee:	06d0      	lsls	r0, r2, #27
 80092f0:	bf44      	itt	mi
 80092f2:	2320      	movmi	r3, #32
 80092f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80092f8:	0711      	lsls	r1, r2, #28
 80092fa:	bf44      	itt	mi
 80092fc:	232b      	movmi	r3, #43	@ 0x2b
 80092fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009302:	f89a 3000 	ldrb.w	r3, [sl]
 8009306:	2b2a      	cmp	r3, #42	@ 0x2a
 8009308:	d015      	beq.n	8009336 <_svfiprintf_r+0xfa>
 800930a:	4654      	mov	r4, sl
 800930c:	2000      	movs	r0, #0
 800930e:	f04f 0c0a 	mov.w	ip, #10
 8009312:	9a07      	ldr	r2, [sp, #28]
 8009314:	4621      	mov	r1, r4
 8009316:	f811 3b01 	ldrb.w	r3, [r1], #1
 800931a:	3b30      	subs	r3, #48	@ 0x30
 800931c:	2b09      	cmp	r3, #9
 800931e:	d94b      	bls.n	80093b8 <_svfiprintf_r+0x17c>
 8009320:	b1b0      	cbz	r0, 8009350 <_svfiprintf_r+0x114>
 8009322:	9207      	str	r2, [sp, #28]
 8009324:	e014      	b.n	8009350 <_svfiprintf_r+0x114>
 8009326:	eba0 0308 	sub.w	r3, r0, r8
 800932a:	fa09 f303 	lsl.w	r3, r9, r3
 800932e:	4313      	orrs	r3, r2
 8009330:	46a2      	mov	sl, r4
 8009332:	9304      	str	r3, [sp, #16]
 8009334:	e7d2      	b.n	80092dc <_svfiprintf_r+0xa0>
 8009336:	9b03      	ldr	r3, [sp, #12]
 8009338:	1d19      	adds	r1, r3, #4
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	9103      	str	r1, [sp, #12]
 800933e:	2b00      	cmp	r3, #0
 8009340:	bfbb      	ittet	lt
 8009342:	425b      	neglt	r3, r3
 8009344:	f042 0202 	orrlt.w	r2, r2, #2
 8009348:	9307      	strge	r3, [sp, #28]
 800934a:	9307      	strlt	r3, [sp, #28]
 800934c:	bfb8      	it	lt
 800934e:	9204      	strlt	r2, [sp, #16]
 8009350:	7823      	ldrb	r3, [r4, #0]
 8009352:	2b2e      	cmp	r3, #46	@ 0x2e
 8009354:	d10a      	bne.n	800936c <_svfiprintf_r+0x130>
 8009356:	7863      	ldrb	r3, [r4, #1]
 8009358:	2b2a      	cmp	r3, #42	@ 0x2a
 800935a:	d132      	bne.n	80093c2 <_svfiprintf_r+0x186>
 800935c:	9b03      	ldr	r3, [sp, #12]
 800935e:	3402      	adds	r4, #2
 8009360:	1d1a      	adds	r2, r3, #4
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	9203      	str	r2, [sp, #12]
 8009366:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800936a:	9305      	str	r3, [sp, #20]
 800936c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8009424 <_svfiprintf_r+0x1e8>
 8009370:	2203      	movs	r2, #3
 8009372:	4650      	mov	r0, sl
 8009374:	7821      	ldrb	r1, [r4, #0]
 8009376:	f000 fa19 	bl	80097ac <memchr>
 800937a:	b138      	cbz	r0, 800938c <_svfiprintf_r+0x150>
 800937c:	2240      	movs	r2, #64	@ 0x40
 800937e:	9b04      	ldr	r3, [sp, #16]
 8009380:	eba0 000a 	sub.w	r0, r0, sl
 8009384:	4082      	lsls	r2, r0
 8009386:	4313      	orrs	r3, r2
 8009388:	3401      	adds	r4, #1
 800938a:	9304      	str	r3, [sp, #16]
 800938c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009390:	2206      	movs	r2, #6
 8009392:	4825      	ldr	r0, [pc, #148]	@ (8009428 <_svfiprintf_r+0x1ec>)
 8009394:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009398:	f000 fa08 	bl	80097ac <memchr>
 800939c:	2800      	cmp	r0, #0
 800939e:	d036      	beq.n	800940e <_svfiprintf_r+0x1d2>
 80093a0:	4b22      	ldr	r3, [pc, #136]	@ (800942c <_svfiprintf_r+0x1f0>)
 80093a2:	bb1b      	cbnz	r3, 80093ec <_svfiprintf_r+0x1b0>
 80093a4:	9b03      	ldr	r3, [sp, #12]
 80093a6:	3307      	adds	r3, #7
 80093a8:	f023 0307 	bic.w	r3, r3, #7
 80093ac:	3308      	adds	r3, #8
 80093ae:	9303      	str	r3, [sp, #12]
 80093b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80093b2:	4433      	add	r3, r6
 80093b4:	9309      	str	r3, [sp, #36]	@ 0x24
 80093b6:	e76a      	b.n	800928e <_svfiprintf_r+0x52>
 80093b8:	460c      	mov	r4, r1
 80093ba:	2001      	movs	r0, #1
 80093bc:	fb0c 3202 	mla	r2, ip, r2, r3
 80093c0:	e7a8      	b.n	8009314 <_svfiprintf_r+0xd8>
 80093c2:	2300      	movs	r3, #0
 80093c4:	f04f 0c0a 	mov.w	ip, #10
 80093c8:	4619      	mov	r1, r3
 80093ca:	3401      	adds	r4, #1
 80093cc:	9305      	str	r3, [sp, #20]
 80093ce:	4620      	mov	r0, r4
 80093d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80093d4:	3a30      	subs	r2, #48	@ 0x30
 80093d6:	2a09      	cmp	r2, #9
 80093d8:	d903      	bls.n	80093e2 <_svfiprintf_r+0x1a6>
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d0c6      	beq.n	800936c <_svfiprintf_r+0x130>
 80093de:	9105      	str	r1, [sp, #20]
 80093e0:	e7c4      	b.n	800936c <_svfiprintf_r+0x130>
 80093e2:	4604      	mov	r4, r0
 80093e4:	2301      	movs	r3, #1
 80093e6:	fb0c 2101 	mla	r1, ip, r1, r2
 80093ea:	e7f0      	b.n	80093ce <_svfiprintf_r+0x192>
 80093ec:	ab03      	add	r3, sp, #12
 80093ee:	9300      	str	r3, [sp, #0]
 80093f0:	462a      	mov	r2, r5
 80093f2:	4638      	mov	r0, r7
 80093f4:	4b0e      	ldr	r3, [pc, #56]	@ (8009430 <_svfiprintf_r+0x1f4>)
 80093f6:	a904      	add	r1, sp, #16
 80093f8:	f3af 8000 	nop.w
 80093fc:	1c42      	adds	r2, r0, #1
 80093fe:	4606      	mov	r6, r0
 8009400:	d1d6      	bne.n	80093b0 <_svfiprintf_r+0x174>
 8009402:	89ab      	ldrh	r3, [r5, #12]
 8009404:	065b      	lsls	r3, r3, #25
 8009406:	f53f af2d 	bmi.w	8009264 <_svfiprintf_r+0x28>
 800940a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800940c:	e72c      	b.n	8009268 <_svfiprintf_r+0x2c>
 800940e:	ab03      	add	r3, sp, #12
 8009410:	9300      	str	r3, [sp, #0]
 8009412:	462a      	mov	r2, r5
 8009414:	4638      	mov	r0, r7
 8009416:	4b06      	ldr	r3, [pc, #24]	@ (8009430 <_svfiprintf_r+0x1f4>)
 8009418:	a904      	add	r1, sp, #16
 800941a:	f000 f87d 	bl	8009518 <_printf_i>
 800941e:	e7ed      	b.n	80093fc <_svfiprintf_r+0x1c0>
 8009420:	0800990e 	.word	0x0800990e
 8009424:	08009914 	.word	0x08009914
 8009428:	08009918 	.word	0x08009918
 800942c:	00000000 	.word	0x00000000
 8009430:	08009185 	.word	0x08009185

08009434 <_printf_common>:
 8009434:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009438:	4616      	mov	r6, r2
 800943a:	4698      	mov	r8, r3
 800943c:	688a      	ldr	r2, [r1, #8]
 800943e:	690b      	ldr	r3, [r1, #16]
 8009440:	4607      	mov	r7, r0
 8009442:	4293      	cmp	r3, r2
 8009444:	bfb8      	it	lt
 8009446:	4613      	movlt	r3, r2
 8009448:	6033      	str	r3, [r6, #0]
 800944a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800944e:	460c      	mov	r4, r1
 8009450:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009454:	b10a      	cbz	r2, 800945a <_printf_common+0x26>
 8009456:	3301      	adds	r3, #1
 8009458:	6033      	str	r3, [r6, #0]
 800945a:	6823      	ldr	r3, [r4, #0]
 800945c:	0699      	lsls	r1, r3, #26
 800945e:	bf42      	ittt	mi
 8009460:	6833      	ldrmi	r3, [r6, #0]
 8009462:	3302      	addmi	r3, #2
 8009464:	6033      	strmi	r3, [r6, #0]
 8009466:	6825      	ldr	r5, [r4, #0]
 8009468:	f015 0506 	ands.w	r5, r5, #6
 800946c:	d106      	bne.n	800947c <_printf_common+0x48>
 800946e:	f104 0a19 	add.w	sl, r4, #25
 8009472:	68e3      	ldr	r3, [r4, #12]
 8009474:	6832      	ldr	r2, [r6, #0]
 8009476:	1a9b      	subs	r3, r3, r2
 8009478:	42ab      	cmp	r3, r5
 800947a:	dc2b      	bgt.n	80094d4 <_printf_common+0xa0>
 800947c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009480:	6822      	ldr	r2, [r4, #0]
 8009482:	3b00      	subs	r3, #0
 8009484:	bf18      	it	ne
 8009486:	2301      	movne	r3, #1
 8009488:	0692      	lsls	r2, r2, #26
 800948a:	d430      	bmi.n	80094ee <_printf_common+0xba>
 800948c:	4641      	mov	r1, r8
 800948e:	4638      	mov	r0, r7
 8009490:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009494:	47c8      	blx	r9
 8009496:	3001      	adds	r0, #1
 8009498:	d023      	beq.n	80094e2 <_printf_common+0xae>
 800949a:	6823      	ldr	r3, [r4, #0]
 800949c:	6922      	ldr	r2, [r4, #16]
 800949e:	f003 0306 	and.w	r3, r3, #6
 80094a2:	2b04      	cmp	r3, #4
 80094a4:	bf14      	ite	ne
 80094a6:	2500      	movne	r5, #0
 80094a8:	6833      	ldreq	r3, [r6, #0]
 80094aa:	f04f 0600 	mov.w	r6, #0
 80094ae:	bf08      	it	eq
 80094b0:	68e5      	ldreq	r5, [r4, #12]
 80094b2:	f104 041a 	add.w	r4, r4, #26
 80094b6:	bf08      	it	eq
 80094b8:	1aed      	subeq	r5, r5, r3
 80094ba:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80094be:	bf08      	it	eq
 80094c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80094c4:	4293      	cmp	r3, r2
 80094c6:	bfc4      	itt	gt
 80094c8:	1a9b      	subgt	r3, r3, r2
 80094ca:	18ed      	addgt	r5, r5, r3
 80094cc:	42b5      	cmp	r5, r6
 80094ce:	d11a      	bne.n	8009506 <_printf_common+0xd2>
 80094d0:	2000      	movs	r0, #0
 80094d2:	e008      	b.n	80094e6 <_printf_common+0xb2>
 80094d4:	2301      	movs	r3, #1
 80094d6:	4652      	mov	r2, sl
 80094d8:	4641      	mov	r1, r8
 80094da:	4638      	mov	r0, r7
 80094dc:	47c8      	blx	r9
 80094de:	3001      	adds	r0, #1
 80094e0:	d103      	bne.n	80094ea <_printf_common+0xb6>
 80094e2:	f04f 30ff 	mov.w	r0, #4294967295
 80094e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80094ea:	3501      	adds	r5, #1
 80094ec:	e7c1      	b.n	8009472 <_printf_common+0x3e>
 80094ee:	2030      	movs	r0, #48	@ 0x30
 80094f0:	18e1      	adds	r1, r4, r3
 80094f2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80094f6:	1c5a      	adds	r2, r3, #1
 80094f8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80094fc:	4422      	add	r2, r4
 80094fe:	3302      	adds	r3, #2
 8009500:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009504:	e7c2      	b.n	800948c <_printf_common+0x58>
 8009506:	2301      	movs	r3, #1
 8009508:	4622      	mov	r2, r4
 800950a:	4641      	mov	r1, r8
 800950c:	4638      	mov	r0, r7
 800950e:	47c8      	blx	r9
 8009510:	3001      	adds	r0, #1
 8009512:	d0e6      	beq.n	80094e2 <_printf_common+0xae>
 8009514:	3601      	adds	r6, #1
 8009516:	e7d9      	b.n	80094cc <_printf_common+0x98>

08009518 <_printf_i>:
 8009518:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800951c:	7e0f      	ldrb	r7, [r1, #24]
 800951e:	4691      	mov	r9, r2
 8009520:	2f78      	cmp	r7, #120	@ 0x78
 8009522:	4680      	mov	r8, r0
 8009524:	460c      	mov	r4, r1
 8009526:	469a      	mov	sl, r3
 8009528:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800952a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800952e:	d807      	bhi.n	8009540 <_printf_i+0x28>
 8009530:	2f62      	cmp	r7, #98	@ 0x62
 8009532:	d80a      	bhi.n	800954a <_printf_i+0x32>
 8009534:	2f00      	cmp	r7, #0
 8009536:	f000 80d3 	beq.w	80096e0 <_printf_i+0x1c8>
 800953a:	2f58      	cmp	r7, #88	@ 0x58
 800953c:	f000 80ba 	beq.w	80096b4 <_printf_i+0x19c>
 8009540:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009544:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009548:	e03a      	b.n	80095c0 <_printf_i+0xa8>
 800954a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800954e:	2b15      	cmp	r3, #21
 8009550:	d8f6      	bhi.n	8009540 <_printf_i+0x28>
 8009552:	a101      	add	r1, pc, #4	@ (adr r1, 8009558 <_printf_i+0x40>)
 8009554:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009558:	080095b1 	.word	0x080095b1
 800955c:	080095c5 	.word	0x080095c5
 8009560:	08009541 	.word	0x08009541
 8009564:	08009541 	.word	0x08009541
 8009568:	08009541 	.word	0x08009541
 800956c:	08009541 	.word	0x08009541
 8009570:	080095c5 	.word	0x080095c5
 8009574:	08009541 	.word	0x08009541
 8009578:	08009541 	.word	0x08009541
 800957c:	08009541 	.word	0x08009541
 8009580:	08009541 	.word	0x08009541
 8009584:	080096c7 	.word	0x080096c7
 8009588:	080095ef 	.word	0x080095ef
 800958c:	08009681 	.word	0x08009681
 8009590:	08009541 	.word	0x08009541
 8009594:	08009541 	.word	0x08009541
 8009598:	080096e9 	.word	0x080096e9
 800959c:	08009541 	.word	0x08009541
 80095a0:	080095ef 	.word	0x080095ef
 80095a4:	08009541 	.word	0x08009541
 80095a8:	08009541 	.word	0x08009541
 80095ac:	08009689 	.word	0x08009689
 80095b0:	6833      	ldr	r3, [r6, #0]
 80095b2:	1d1a      	adds	r2, r3, #4
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	6032      	str	r2, [r6, #0]
 80095b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80095bc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80095c0:	2301      	movs	r3, #1
 80095c2:	e09e      	b.n	8009702 <_printf_i+0x1ea>
 80095c4:	6833      	ldr	r3, [r6, #0]
 80095c6:	6820      	ldr	r0, [r4, #0]
 80095c8:	1d19      	adds	r1, r3, #4
 80095ca:	6031      	str	r1, [r6, #0]
 80095cc:	0606      	lsls	r6, r0, #24
 80095ce:	d501      	bpl.n	80095d4 <_printf_i+0xbc>
 80095d0:	681d      	ldr	r5, [r3, #0]
 80095d2:	e003      	b.n	80095dc <_printf_i+0xc4>
 80095d4:	0645      	lsls	r5, r0, #25
 80095d6:	d5fb      	bpl.n	80095d0 <_printf_i+0xb8>
 80095d8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80095dc:	2d00      	cmp	r5, #0
 80095de:	da03      	bge.n	80095e8 <_printf_i+0xd0>
 80095e0:	232d      	movs	r3, #45	@ 0x2d
 80095e2:	426d      	negs	r5, r5
 80095e4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80095e8:	230a      	movs	r3, #10
 80095ea:	4859      	ldr	r0, [pc, #356]	@ (8009750 <_printf_i+0x238>)
 80095ec:	e011      	b.n	8009612 <_printf_i+0xfa>
 80095ee:	6821      	ldr	r1, [r4, #0]
 80095f0:	6833      	ldr	r3, [r6, #0]
 80095f2:	0608      	lsls	r0, r1, #24
 80095f4:	f853 5b04 	ldr.w	r5, [r3], #4
 80095f8:	d402      	bmi.n	8009600 <_printf_i+0xe8>
 80095fa:	0649      	lsls	r1, r1, #25
 80095fc:	bf48      	it	mi
 80095fe:	b2ad      	uxthmi	r5, r5
 8009600:	2f6f      	cmp	r7, #111	@ 0x6f
 8009602:	6033      	str	r3, [r6, #0]
 8009604:	bf14      	ite	ne
 8009606:	230a      	movne	r3, #10
 8009608:	2308      	moveq	r3, #8
 800960a:	4851      	ldr	r0, [pc, #324]	@ (8009750 <_printf_i+0x238>)
 800960c:	2100      	movs	r1, #0
 800960e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009612:	6866      	ldr	r6, [r4, #4]
 8009614:	2e00      	cmp	r6, #0
 8009616:	bfa8      	it	ge
 8009618:	6821      	ldrge	r1, [r4, #0]
 800961a:	60a6      	str	r6, [r4, #8]
 800961c:	bfa4      	itt	ge
 800961e:	f021 0104 	bicge.w	r1, r1, #4
 8009622:	6021      	strge	r1, [r4, #0]
 8009624:	b90d      	cbnz	r5, 800962a <_printf_i+0x112>
 8009626:	2e00      	cmp	r6, #0
 8009628:	d04b      	beq.n	80096c2 <_printf_i+0x1aa>
 800962a:	4616      	mov	r6, r2
 800962c:	fbb5 f1f3 	udiv	r1, r5, r3
 8009630:	fb03 5711 	mls	r7, r3, r1, r5
 8009634:	5dc7      	ldrb	r7, [r0, r7]
 8009636:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800963a:	462f      	mov	r7, r5
 800963c:	42bb      	cmp	r3, r7
 800963e:	460d      	mov	r5, r1
 8009640:	d9f4      	bls.n	800962c <_printf_i+0x114>
 8009642:	2b08      	cmp	r3, #8
 8009644:	d10b      	bne.n	800965e <_printf_i+0x146>
 8009646:	6823      	ldr	r3, [r4, #0]
 8009648:	07df      	lsls	r7, r3, #31
 800964a:	d508      	bpl.n	800965e <_printf_i+0x146>
 800964c:	6923      	ldr	r3, [r4, #16]
 800964e:	6861      	ldr	r1, [r4, #4]
 8009650:	4299      	cmp	r1, r3
 8009652:	bfde      	ittt	le
 8009654:	2330      	movle	r3, #48	@ 0x30
 8009656:	f806 3c01 	strble.w	r3, [r6, #-1]
 800965a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800965e:	1b92      	subs	r2, r2, r6
 8009660:	6122      	str	r2, [r4, #16]
 8009662:	464b      	mov	r3, r9
 8009664:	4621      	mov	r1, r4
 8009666:	4640      	mov	r0, r8
 8009668:	f8cd a000 	str.w	sl, [sp]
 800966c:	aa03      	add	r2, sp, #12
 800966e:	f7ff fee1 	bl	8009434 <_printf_common>
 8009672:	3001      	adds	r0, #1
 8009674:	d14a      	bne.n	800970c <_printf_i+0x1f4>
 8009676:	f04f 30ff 	mov.w	r0, #4294967295
 800967a:	b004      	add	sp, #16
 800967c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009680:	6823      	ldr	r3, [r4, #0]
 8009682:	f043 0320 	orr.w	r3, r3, #32
 8009686:	6023      	str	r3, [r4, #0]
 8009688:	2778      	movs	r7, #120	@ 0x78
 800968a:	4832      	ldr	r0, [pc, #200]	@ (8009754 <_printf_i+0x23c>)
 800968c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009690:	6823      	ldr	r3, [r4, #0]
 8009692:	6831      	ldr	r1, [r6, #0]
 8009694:	061f      	lsls	r7, r3, #24
 8009696:	f851 5b04 	ldr.w	r5, [r1], #4
 800969a:	d402      	bmi.n	80096a2 <_printf_i+0x18a>
 800969c:	065f      	lsls	r7, r3, #25
 800969e:	bf48      	it	mi
 80096a0:	b2ad      	uxthmi	r5, r5
 80096a2:	6031      	str	r1, [r6, #0]
 80096a4:	07d9      	lsls	r1, r3, #31
 80096a6:	bf44      	itt	mi
 80096a8:	f043 0320 	orrmi.w	r3, r3, #32
 80096ac:	6023      	strmi	r3, [r4, #0]
 80096ae:	b11d      	cbz	r5, 80096b8 <_printf_i+0x1a0>
 80096b0:	2310      	movs	r3, #16
 80096b2:	e7ab      	b.n	800960c <_printf_i+0xf4>
 80096b4:	4826      	ldr	r0, [pc, #152]	@ (8009750 <_printf_i+0x238>)
 80096b6:	e7e9      	b.n	800968c <_printf_i+0x174>
 80096b8:	6823      	ldr	r3, [r4, #0]
 80096ba:	f023 0320 	bic.w	r3, r3, #32
 80096be:	6023      	str	r3, [r4, #0]
 80096c0:	e7f6      	b.n	80096b0 <_printf_i+0x198>
 80096c2:	4616      	mov	r6, r2
 80096c4:	e7bd      	b.n	8009642 <_printf_i+0x12a>
 80096c6:	6833      	ldr	r3, [r6, #0]
 80096c8:	6825      	ldr	r5, [r4, #0]
 80096ca:	1d18      	adds	r0, r3, #4
 80096cc:	6961      	ldr	r1, [r4, #20]
 80096ce:	6030      	str	r0, [r6, #0]
 80096d0:	062e      	lsls	r6, r5, #24
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	d501      	bpl.n	80096da <_printf_i+0x1c2>
 80096d6:	6019      	str	r1, [r3, #0]
 80096d8:	e002      	b.n	80096e0 <_printf_i+0x1c8>
 80096da:	0668      	lsls	r0, r5, #25
 80096dc:	d5fb      	bpl.n	80096d6 <_printf_i+0x1be>
 80096de:	8019      	strh	r1, [r3, #0]
 80096e0:	2300      	movs	r3, #0
 80096e2:	4616      	mov	r6, r2
 80096e4:	6123      	str	r3, [r4, #16]
 80096e6:	e7bc      	b.n	8009662 <_printf_i+0x14a>
 80096e8:	6833      	ldr	r3, [r6, #0]
 80096ea:	2100      	movs	r1, #0
 80096ec:	1d1a      	adds	r2, r3, #4
 80096ee:	6032      	str	r2, [r6, #0]
 80096f0:	681e      	ldr	r6, [r3, #0]
 80096f2:	6862      	ldr	r2, [r4, #4]
 80096f4:	4630      	mov	r0, r6
 80096f6:	f000 f859 	bl	80097ac <memchr>
 80096fa:	b108      	cbz	r0, 8009700 <_printf_i+0x1e8>
 80096fc:	1b80      	subs	r0, r0, r6
 80096fe:	6060      	str	r0, [r4, #4]
 8009700:	6863      	ldr	r3, [r4, #4]
 8009702:	6123      	str	r3, [r4, #16]
 8009704:	2300      	movs	r3, #0
 8009706:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800970a:	e7aa      	b.n	8009662 <_printf_i+0x14a>
 800970c:	4632      	mov	r2, r6
 800970e:	4649      	mov	r1, r9
 8009710:	4640      	mov	r0, r8
 8009712:	6923      	ldr	r3, [r4, #16]
 8009714:	47d0      	blx	sl
 8009716:	3001      	adds	r0, #1
 8009718:	d0ad      	beq.n	8009676 <_printf_i+0x15e>
 800971a:	6823      	ldr	r3, [r4, #0]
 800971c:	079b      	lsls	r3, r3, #30
 800971e:	d413      	bmi.n	8009748 <_printf_i+0x230>
 8009720:	68e0      	ldr	r0, [r4, #12]
 8009722:	9b03      	ldr	r3, [sp, #12]
 8009724:	4298      	cmp	r0, r3
 8009726:	bfb8      	it	lt
 8009728:	4618      	movlt	r0, r3
 800972a:	e7a6      	b.n	800967a <_printf_i+0x162>
 800972c:	2301      	movs	r3, #1
 800972e:	4632      	mov	r2, r6
 8009730:	4649      	mov	r1, r9
 8009732:	4640      	mov	r0, r8
 8009734:	47d0      	blx	sl
 8009736:	3001      	adds	r0, #1
 8009738:	d09d      	beq.n	8009676 <_printf_i+0x15e>
 800973a:	3501      	adds	r5, #1
 800973c:	68e3      	ldr	r3, [r4, #12]
 800973e:	9903      	ldr	r1, [sp, #12]
 8009740:	1a5b      	subs	r3, r3, r1
 8009742:	42ab      	cmp	r3, r5
 8009744:	dcf2      	bgt.n	800972c <_printf_i+0x214>
 8009746:	e7eb      	b.n	8009720 <_printf_i+0x208>
 8009748:	2500      	movs	r5, #0
 800974a:	f104 0619 	add.w	r6, r4, #25
 800974e:	e7f5      	b.n	800973c <_printf_i+0x224>
 8009750:	0800991f 	.word	0x0800991f
 8009754:	08009930 	.word	0x08009930

08009758 <memmove>:
 8009758:	4288      	cmp	r0, r1
 800975a:	b510      	push	{r4, lr}
 800975c:	eb01 0402 	add.w	r4, r1, r2
 8009760:	d902      	bls.n	8009768 <memmove+0x10>
 8009762:	4284      	cmp	r4, r0
 8009764:	4623      	mov	r3, r4
 8009766:	d807      	bhi.n	8009778 <memmove+0x20>
 8009768:	1e43      	subs	r3, r0, #1
 800976a:	42a1      	cmp	r1, r4
 800976c:	d008      	beq.n	8009780 <memmove+0x28>
 800976e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009772:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009776:	e7f8      	b.n	800976a <memmove+0x12>
 8009778:	4601      	mov	r1, r0
 800977a:	4402      	add	r2, r0
 800977c:	428a      	cmp	r2, r1
 800977e:	d100      	bne.n	8009782 <memmove+0x2a>
 8009780:	bd10      	pop	{r4, pc}
 8009782:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009786:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800978a:	e7f7      	b.n	800977c <memmove+0x24>

0800978c <_sbrk_r>:
 800978c:	b538      	push	{r3, r4, r5, lr}
 800978e:	2300      	movs	r3, #0
 8009790:	4d05      	ldr	r5, [pc, #20]	@ (80097a8 <_sbrk_r+0x1c>)
 8009792:	4604      	mov	r4, r0
 8009794:	4608      	mov	r0, r1
 8009796:	602b      	str	r3, [r5, #0]
 8009798:	f7f7 fcd8 	bl	800114c <_sbrk>
 800979c:	1c43      	adds	r3, r0, #1
 800979e:	d102      	bne.n	80097a6 <_sbrk_r+0x1a>
 80097a0:	682b      	ldr	r3, [r5, #0]
 80097a2:	b103      	cbz	r3, 80097a6 <_sbrk_r+0x1a>
 80097a4:	6023      	str	r3, [r4, #0]
 80097a6:	bd38      	pop	{r3, r4, r5, pc}
 80097a8:	2000157c 	.word	0x2000157c

080097ac <memchr>:
 80097ac:	4603      	mov	r3, r0
 80097ae:	b510      	push	{r4, lr}
 80097b0:	b2c9      	uxtb	r1, r1
 80097b2:	4402      	add	r2, r0
 80097b4:	4293      	cmp	r3, r2
 80097b6:	4618      	mov	r0, r3
 80097b8:	d101      	bne.n	80097be <memchr+0x12>
 80097ba:	2000      	movs	r0, #0
 80097bc:	e003      	b.n	80097c6 <memchr+0x1a>
 80097be:	7804      	ldrb	r4, [r0, #0]
 80097c0:	3301      	adds	r3, #1
 80097c2:	428c      	cmp	r4, r1
 80097c4:	d1f6      	bne.n	80097b4 <memchr+0x8>
 80097c6:	bd10      	pop	{r4, pc}

080097c8 <memcpy>:
 80097c8:	440a      	add	r2, r1
 80097ca:	4291      	cmp	r1, r2
 80097cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80097d0:	d100      	bne.n	80097d4 <memcpy+0xc>
 80097d2:	4770      	bx	lr
 80097d4:	b510      	push	{r4, lr}
 80097d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80097da:	4291      	cmp	r1, r2
 80097dc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80097e0:	d1f9      	bne.n	80097d6 <memcpy+0xe>
 80097e2:	bd10      	pop	{r4, pc}

080097e4 <_realloc_r>:
 80097e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80097e8:	4680      	mov	r8, r0
 80097ea:	4615      	mov	r5, r2
 80097ec:	460c      	mov	r4, r1
 80097ee:	b921      	cbnz	r1, 80097fa <_realloc_r+0x16>
 80097f0:	4611      	mov	r1, r2
 80097f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80097f6:	f7ff bc39 	b.w	800906c <_malloc_r>
 80097fa:	b92a      	cbnz	r2, 8009808 <_realloc_r+0x24>
 80097fc:	f7ff fbcc 	bl	8008f98 <_free_r>
 8009800:	2400      	movs	r4, #0
 8009802:	4620      	mov	r0, r4
 8009804:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009808:	f000 f81a 	bl	8009840 <_malloc_usable_size_r>
 800980c:	4285      	cmp	r5, r0
 800980e:	4606      	mov	r6, r0
 8009810:	d802      	bhi.n	8009818 <_realloc_r+0x34>
 8009812:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8009816:	d8f4      	bhi.n	8009802 <_realloc_r+0x1e>
 8009818:	4629      	mov	r1, r5
 800981a:	4640      	mov	r0, r8
 800981c:	f7ff fc26 	bl	800906c <_malloc_r>
 8009820:	4607      	mov	r7, r0
 8009822:	2800      	cmp	r0, #0
 8009824:	d0ec      	beq.n	8009800 <_realloc_r+0x1c>
 8009826:	42b5      	cmp	r5, r6
 8009828:	462a      	mov	r2, r5
 800982a:	4621      	mov	r1, r4
 800982c:	bf28      	it	cs
 800982e:	4632      	movcs	r2, r6
 8009830:	f7ff ffca 	bl	80097c8 <memcpy>
 8009834:	4621      	mov	r1, r4
 8009836:	4640      	mov	r0, r8
 8009838:	f7ff fbae 	bl	8008f98 <_free_r>
 800983c:	463c      	mov	r4, r7
 800983e:	e7e0      	b.n	8009802 <_realloc_r+0x1e>

08009840 <_malloc_usable_size_r>:
 8009840:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009844:	1f18      	subs	r0, r3, #4
 8009846:	2b00      	cmp	r3, #0
 8009848:	bfbc      	itt	lt
 800984a:	580b      	ldrlt	r3, [r1, r0]
 800984c:	18c0      	addlt	r0, r0, r3
 800984e:	4770      	bx	lr

08009850 <_init>:
 8009850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009852:	bf00      	nop
 8009854:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009856:	bc08      	pop	{r3}
 8009858:	469e      	mov	lr, r3
 800985a:	4770      	bx	lr

0800985c <_fini>:
 800985c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800985e:	bf00      	nop
 8009860:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009862:	bc08      	pop	{r3}
 8009864:	469e      	mov	lr, r3
 8009866:	4770      	bx	lr
