
Tx_M4_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000044ec  08100298  08100298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08104784  08104784  00005784  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  081047a4  081047a4  000057a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  081047ac  081047ac  000057ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  081047b0  081047b0  000057b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000028  10000000  081047b4  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000000c4  10000028  081047dc  00006028  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  100000ec  081047dc  000060ec  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00006028  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000ba6d  00000000  00000000  00006058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00001e10  00000000  00000000  00011ac5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000ab8  00000000  00000000  000138d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000007fd  00000000  00000000  00014390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000399b1  00000000  00000000  00014b8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0000d565  00000000  00000000  0004e53e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0017d137  00000000  00000000  0005baa3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001d8bda  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00002b48  00000000  00000000  001d8c20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000047  00000000  00000000  001db768  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08100298 <__do_global_dtors_aux>:
 8100298:	b510      	push	{r4, lr}
 810029a:	4c05      	ldr	r4, [pc, #20]	@ (81002b0 <__do_global_dtors_aux+0x18>)
 810029c:	7823      	ldrb	r3, [r4, #0]
 810029e:	b933      	cbnz	r3, 81002ae <__do_global_dtors_aux+0x16>
 81002a0:	4b04      	ldr	r3, [pc, #16]	@ (81002b4 <__do_global_dtors_aux+0x1c>)
 81002a2:	b113      	cbz	r3, 81002aa <__do_global_dtors_aux+0x12>
 81002a4:	4804      	ldr	r0, [pc, #16]	@ (81002b8 <__do_global_dtors_aux+0x20>)
 81002a6:	f3af 8000 	nop.w
 81002aa:	2301      	movs	r3, #1
 81002ac:	7023      	strb	r3, [r4, #0]
 81002ae:	bd10      	pop	{r4, pc}
 81002b0:	10000028 	.word	0x10000028
 81002b4:	00000000 	.word	0x00000000
 81002b8:	0810476c 	.word	0x0810476c

081002bc <frame_dummy>:
 81002bc:	b508      	push	{r3, lr}
 81002be:	4b03      	ldr	r3, [pc, #12]	@ (81002cc <frame_dummy+0x10>)
 81002c0:	b11b      	cbz	r3, 81002ca <frame_dummy+0xe>
 81002c2:	4903      	ldr	r1, [pc, #12]	@ (81002d0 <frame_dummy+0x14>)
 81002c4:	4803      	ldr	r0, [pc, #12]	@ (81002d4 <frame_dummy+0x18>)
 81002c6:	f3af 8000 	nop.w
 81002ca:	bd08      	pop	{r3, pc}
 81002cc:	00000000 	.word	0x00000000
 81002d0:	1000002c 	.word	0x1000002c
 81002d4:	0810476c 	.word	0x0810476c

081002d8 <__aeabi_uldivmod>:
 81002d8:	b953      	cbnz	r3, 81002f0 <__aeabi_uldivmod+0x18>
 81002da:	b94a      	cbnz	r2, 81002f0 <__aeabi_uldivmod+0x18>
 81002dc:	2900      	cmp	r1, #0
 81002de:	bf08      	it	eq
 81002e0:	2800      	cmpeq	r0, #0
 81002e2:	bf1c      	itt	ne
 81002e4:	f04f 31ff 	movne.w	r1, #4294967295
 81002e8:	f04f 30ff 	movne.w	r0, #4294967295
 81002ec:	f000 b96a 	b.w	81005c4 <__aeabi_idiv0>
 81002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 81002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 81002f8:	f000 f806 	bl	8100308 <__udivmoddi4>
 81002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8100304:	b004      	add	sp, #16
 8100306:	4770      	bx	lr

08100308 <__udivmoddi4>:
 8100308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810030c:	9d08      	ldr	r5, [sp, #32]
 810030e:	460c      	mov	r4, r1
 8100310:	2b00      	cmp	r3, #0
 8100312:	d14e      	bne.n	81003b2 <__udivmoddi4+0xaa>
 8100314:	4694      	mov	ip, r2
 8100316:	458c      	cmp	ip, r1
 8100318:	4686      	mov	lr, r0
 810031a:	fab2 f282 	clz	r2, r2
 810031e:	d962      	bls.n	81003e6 <__udivmoddi4+0xde>
 8100320:	b14a      	cbz	r2, 8100336 <__udivmoddi4+0x2e>
 8100322:	f1c2 0320 	rsb	r3, r2, #32
 8100326:	4091      	lsls	r1, r2
 8100328:	fa20 f303 	lsr.w	r3, r0, r3
 810032c:	fa0c fc02 	lsl.w	ip, ip, r2
 8100330:	4319      	orrs	r1, r3
 8100332:	fa00 fe02 	lsl.w	lr, r0, r2
 8100336:	ea4f 471c 	mov.w	r7, ip, lsr #16
 810033a:	fa1f f68c 	uxth.w	r6, ip
 810033e:	fbb1 f4f7 	udiv	r4, r1, r7
 8100342:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8100346:	fb07 1114 	mls	r1, r7, r4, r1
 810034a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 810034e:	fb04 f106 	mul.w	r1, r4, r6
 8100352:	4299      	cmp	r1, r3
 8100354:	d90a      	bls.n	810036c <__udivmoddi4+0x64>
 8100356:	eb1c 0303 	adds.w	r3, ip, r3
 810035a:	f104 30ff 	add.w	r0, r4, #4294967295
 810035e:	f080 8112 	bcs.w	8100586 <__udivmoddi4+0x27e>
 8100362:	4299      	cmp	r1, r3
 8100364:	f240 810f 	bls.w	8100586 <__udivmoddi4+0x27e>
 8100368:	3c02      	subs	r4, #2
 810036a:	4463      	add	r3, ip
 810036c:	1a59      	subs	r1, r3, r1
 810036e:	fa1f f38e 	uxth.w	r3, lr
 8100372:	fbb1 f0f7 	udiv	r0, r1, r7
 8100376:	fb07 1110 	mls	r1, r7, r0, r1
 810037a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 810037e:	fb00 f606 	mul.w	r6, r0, r6
 8100382:	429e      	cmp	r6, r3
 8100384:	d90a      	bls.n	810039c <__udivmoddi4+0x94>
 8100386:	eb1c 0303 	adds.w	r3, ip, r3
 810038a:	f100 31ff 	add.w	r1, r0, #4294967295
 810038e:	f080 80fc 	bcs.w	810058a <__udivmoddi4+0x282>
 8100392:	429e      	cmp	r6, r3
 8100394:	f240 80f9 	bls.w	810058a <__udivmoddi4+0x282>
 8100398:	4463      	add	r3, ip
 810039a:	3802      	subs	r0, #2
 810039c:	1b9b      	subs	r3, r3, r6
 810039e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 81003a2:	2100      	movs	r1, #0
 81003a4:	b11d      	cbz	r5, 81003ae <__udivmoddi4+0xa6>
 81003a6:	40d3      	lsrs	r3, r2
 81003a8:	2200      	movs	r2, #0
 81003aa:	e9c5 3200 	strd	r3, r2, [r5]
 81003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 81003b2:	428b      	cmp	r3, r1
 81003b4:	d905      	bls.n	81003c2 <__udivmoddi4+0xba>
 81003b6:	b10d      	cbz	r5, 81003bc <__udivmoddi4+0xb4>
 81003b8:	e9c5 0100 	strd	r0, r1, [r5]
 81003bc:	2100      	movs	r1, #0
 81003be:	4608      	mov	r0, r1
 81003c0:	e7f5      	b.n	81003ae <__udivmoddi4+0xa6>
 81003c2:	fab3 f183 	clz	r1, r3
 81003c6:	2900      	cmp	r1, #0
 81003c8:	d146      	bne.n	8100458 <__udivmoddi4+0x150>
 81003ca:	42a3      	cmp	r3, r4
 81003cc:	d302      	bcc.n	81003d4 <__udivmoddi4+0xcc>
 81003ce:	4290      	cmp	r0, r2
 81003d0:	f0c0 80f0 	bcc.w	81005b4 <__udivmoddi4+0x2ac>
 81003d4:	1a86      	subs	r6, r0, r2
 81003d6:	eb64 0303 	sbc.w	r3, r4, r3
 81003da:	2001      	movs	r0, #1
 81003dc:	2d00      	cmp	r5, #0
 81003de:	d0e6      	beq.n	81003ae <__udivmoddi4+0xa6>
 81003e0:	e9c5 6300 	strd	r6, r3, [r5]
 81003e4:	e7e3      	b.n	81003ae <__udivmoddi4+0xa6>
 81003e6:	2a00      	cmp	r2, #0
 81003e8:	f040 8090 	bne.w	810050c <__udivmoddi4+0x204>
 81003ec:	eba1 040c 	sub.w	r4, r1, ip
 81003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 81003f4:	fa1f f78c 	uxth.w	r7, ip
 81003f8:	2101      	movs	r1, #1
 81003fa:	fbb4 f6f8 	udiv	r6, r4, r8
 81003fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8100402:	fb08 4416 	mls	r4, r8, r6, r4
 8100406:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 810040a:	fb07 f006 	mul.w	r0, r7, r6
 810040e:	4298      	cmp	r0, r3
 8100410:	d908      	bls.n	8100424 <__udivmoddi4+0x11c>
 8100412:	eb1c 0303 	adds.w	r3, ip, r3
 8100416:	f106 34ff 	add.w	r4, r6, #4294967295
 810041a:	d202      	bcs.n	8100422 <__udivmoddi4+0x11a>
 810041c:	4298      	cmp	r0, r3
 810041e:	f200 80cd 	bhi.w	81005bc <__udivmoddi4+0x2b4>
 8100422:	4626      	mov	r6, r4
 8100424:	1a1c      	subs	r4, r3, r0
 8100426:	fa1f f38e 	uxth.w	r3, lr
 810042a:	fbb4 f0f8 	udiv	r0, r4, r8
 810042e:	fb08 4410 	mls	r4, r8, r0, r4
 8100432:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8100436:	fb00 f707 	mul.w	r7, r0, r7
 810043a:	429f      	cmp	r7, r3
 810043c:	d908      	bls.n	8100450 <__udivmoddi4+0x148>
 810043e:	eb1c 0303 	adds.w	r3, ip, r3
 8100442:	f100 34ff 	add.w	r4, r0, #4294967295
 8100446:	d202      	bcs.n	810044e <__udivmoddi4+0x146>
 8100448:	429f      	cmp	r7, r3
 810044a:	f200 80b0 	bhi.w	81005ae <__udivmoddi4+0x2a6>
 810044e:	4620      	mov	r0, r4
 8100450:	1bdb      	subs	r3, r3, r7
 8100452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8100456:	e7a5      	b.n	81003a4 <__udivmoddi4+0x9c>
 8100458:	f1c1 0620 	rsb	r6, r1, #32
 810045c:	408b      	lsls	r3, r1
 810045e:	fa22 f706 	lsr.w	r7, r2, r6
 8100462:	431f      	orrs	r7, r3
 8100464:	fa20 fc06 	lsr.w	ip, r0, r6
 8100468:	fa04 f301 	lsl.w	r3, r4, r1
 810046c:	ea43 030c 	orr.w	r3, r3, ip
 8100470:	40f4      	lsrs	r4, r6
 8100472:	fa00 f801 	lsl.w	r8, r0, r1
 8100476:	0c38      	lsrs	r0, r7, #16
 8100478:	ea4f 4913 	mov.w	r9, r3, lsr #16
 810047c:	fbb4 fef0 	udiv	lr, r4, r0
 8100480:	fa1f fc87 	uxth.w	ip, r7
 8100484:	fb00 441e 	mls	r4, r0, lr, r4
 8100488:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 810048c:	fb0e f90c 	mul.w	r9, lr, ip
 8100490:	45a1      	cmp	r9, r4
 8100492:	fa02 f201 	lsl.w	r2, r2, r1
 8100496:	d90a      	bls.n	81004ae <__udivmoddi4+0x1a6>
 8100498:	193c      	adds	r4, r7, r4
 810049a:	f10e 3aff 	add.w	sl, lr, #4294967295
 810049e:	f080 8084 	bcs.w	81005aa <__udivmoddi4+0x2a2>
 81004a2:	45a1      	cmp	r9, r4
 81004a4:	f240 8081 	bls.w	81005aa <__udivmoddi4+0x2a2>
 81004a8:	f1ae 0e02 	sub.w	lr, lr, #2
 81004ac:	443c      	add	r4, r7
 81004ae:	eba4 0409 	sub.w	r4, r4, r9
 81004b2:	fa1f f983 	uxth.w	r9, r3
 81004b6:	fbb4 f3f0 	udiv	r3, r4, r0
 81004ba:	fb00 4413 	mls	r4, r0, r3, r4
 81004be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 81004c2:	fb03 fc0c 	mul.w	ip, r3, ip
 81004c6:	45a4      	cmp	ip, r4
 81004c8:	d907      	bls.n	81004da <__udivmoddi4+0x1d2>
 81004ca:	193c      	adds	r4, r7, r4
 81004cc:	f103 30ff 	add.w	r0, r3, #4294967295
 81004d0:	d267      	bcs.n	81005a2 <__udivmoddi4+0x29a>
 81004d2:	45a4      	cmp	ip, r4
 81004d4:	d965      	bls.n	81005a2 <__udivmoddi4+0x29a>
 81004d6:	3b02      	subs	r3, #2
 81004d8:	443c      	add	r4, r7
 81004da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 81004de:	fba0 9302 	umull	r9, r3, r0, r2
 81004e2:	eba4 040c 	sub.w	r4, r4, ip
 81004e6:	429c      	cmp	r4, r3
 81004e8:	46ce      	mov	lr, r9
 81004ea:	469c      	mov	ip, r3
 81004ec:	d351      	bcc.n	8100592 <__udivmoddi4+0x28a>
 81004ee:	d04e      	beq.n	810058e <__udivmoddi4+0x286>
 81004f0:	b155      	cbz	r5, 8100508 <__udivmoddi4+0x200>
 81004f2:	ebb8 030e 	subs.w	r3, r8, lr
 81004f6:	eb64 040c 	sbc.w	r4, r4, ip
 81004fa:	fa04 f606 	lsl.w	r6, r4, r6
 81004fe:	40cb      	lsrs	r3, r1
 8100500:	431e      	orrs	r6, r3
 8100502:	40cc      	lsrs	r4, r1
 8100504:	e9c5 6400 	strd	r6, r4, [r5]
 8100508:	2100      	movs	r1, #0
 810050a:	e750      	b.n	81003ae <__udivmoddi4+0xa6>
 810050c:	f1c2 0320 	rsb	r3, r2, #32
 8100510:	fa20 f103 	lsr.w	r1, r0, r3
 8100514:	fa0c fc02 	lsl.w	ip, ip, r2
 8100518:	fa24 f303 	lsr.w	r3, r4, r3
 810051c:	4094      	lsls	r4, r2
 810051e:	430c      	orrs	r4, r1
 8100520:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8100524:	fa00 fe02 	lsl.w	lr, r0, r2
 8100528:	fa1f f78c 	uxth.w	r7, ip
 810052c:	fbb3 f0f8 	udiv	r0, r3, r8
 8100530:	fb08 3110 	mls	r1, r8, r0, r3
 8100534:	0c23      	lsrs	r3, r4, #16
 8100536:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 810053a:	fb00 f107 	mul.w	r1, r0, r7
 810053e:	4299      	cmp	r1, r3
 8100540:	d908      	bls.n	8100554 <__udivmoddi4+0x24c>
 8100542:	eb1c 0303 	adds.w	r3, ip, r3
 8100546:	f100 36ff 	add.w	r6, r0, #4294967295
 810054a:	d22c      	bcs.n	81005a6 <__udivmoddi4+0x29e>
 810054c:	4299      	cmp	r1, r3
 810054e:	d92a      	bls.n	81005a6 <__udivmoddi4+0x29e>
 8100550:	3802      	subs	r0, #2
 8100552:	4463      	add	r3, ip
 8100554:	1a5b      	subs	r3, r3, r1
 8100556:	b2a4      	uxth	r4, r4
 8100558:	fbb3 f1f8 	udiv	r1, r3, r8
 810055c:	fb08 3311 	mls	r3, r8, r1, r3
 8100560:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8100564:	fb01 f307 	mul.w	r3, r1, r7
 8100568:	42a3      	cmp	r3, r4
 810056a:	d908      	bls.n	810057e <__udivmoddi4+0x276>
 810056c:	eb1c 0404 	adds.w	r4, ip, r4
 8100570:	f101 36ff 	add.w	r6, r1, #4294967295
 8100574:	d213      	bcs.n	810059e <__udivmoddi4+0x296>
 8100576:	42a3      	cmp	r3, r4
 8100578:	d911      	bls.n	810059e <__udivmoddi4+0x296>
 810057a:	3902      	subs	r1, #2
 810057c:	4464      	add	r4, ip
 810057e:	1ae4      	subs	r4, r4, r3
 8100580:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8100584:	e739      	b.n	81003fa <__udivmoddi4+0xf2>
 8100586:	4604      	mov	r4, r0
 8100588:	e6f0      	b.n	810036c <__udivmoddi4+0x64>
 810058a:	4608      	mov	r0, r1
 810058c:	e706      	b.n	810039c <__udivmoddi4+0x94>
 810058e:	45c8      	cmp	r8, r9
 8100590:	d2ae      	bcs.n	81004f0 <__udivmoddi4+0x1e8>
 8100592:	ebb9 0e02 	subs.w	lr, r9, r2
 8100596:	eb63 0c07 	sbc.w	ip, r3, r7
 810059a:	3801      	subs	r0, #1
 810059c:	e7a8      	b.n	81004f0 <__udivmoddi4+0x1e8>
 810059e:	4631      	mov	r1, r6
 81005a0:	e7ed      	b.n	810057e <__udivmoddi4+0x276>
 81005a2:	4603      	mov	r3, r0
 81005a4:	e799      	b.n	81004da <__udivmoddi4+0x1d2>
 81005a6:	4630      	mov	r0, r6
 81005a8:	e7d4      	b.n	8100554 <__udivmoddi4+0x24c>
 81005aa:	46d6      	mov	lr, sl
 81005ac:	e77f      	b.n	81004ae <__udivmoddi4+0x1a6>
 81005ae:	4463      	add	r3, ip
 81005b0:	3802      	subs	r0, #2
 81005b2:	e74d      	b.n	8100450 <__udivmoddi4+0x148>
 81005b4:	4606      	mov	r6, r0
 81005b6:	4623      	mov	r3, r4
 81005b8:	4608      	mov	r0, r1
 81005ba:	e70f      	b.n	81003dc <__udivmoddi4+0xd4>
 81005bc:	3e02      	subs	r6, #2
 81005be:	4463      	add	r3, ip
 81005c0:	e730      	b.n	8100424 <__udivmoddi4+0x11c>
 81005c2:	bf00      	nop

081005c4 <__aeabi_idiv0>:
 81005c4:	4770      	bx	lr
 81005c6:	bf00      	nop

081005c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 81005c8:	b480      	push	{r7}
 81005ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 81005cc:	4b09      	ldr	r3, [pc, #36]	@ (81005f4 <SystemInit+0x2c>)
 81005ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 81005d2:	4a08      	ldr	r2, [pc, #32]	@ (81005f4 <SystemInit+0x2c>)
 81005d4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 81005d8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 81005dc:	4b05      	ldr	r3, [pc, #20]	@ (81005f4 <SystemInit+0x2c>)
 81005de:	691b      	ldr	r3, [r3, #16]
 81005e0:	4a04      	ldr	r2, [pc, #16]	@ (81005f4 <SystemInit+0x2c>)
 81005e2:	f043 0310 	orr.w	r3, r3, #16
 81005e6:	6113      	str	r3, [r2, #16]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 81005e8:	bf00      	nop
 81005ea:	46bd      	mov	sp, r7
 81005ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 81005f0:	4770      	bx	lr
 81005f2:	bf00      	nop
 81005f4:	e000ed00 	.word	0xe000ed00

081005f8 <Tx_mode>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void Tx_mode(uint8_t Adress[5]){
 81005f8:	b580      	push	{r7, lr}
 81005fa:	b084      	sub	sp, #16
 81005fc:	af02      	add	r7, sp, #8
 81005fe:	6078      	str	r0, [r7, #4]

	if(NRF_Init(&hspi1, GPIOG, GPIO_PIN_12, GPIOG, GPIO_PIN_14) != NRF_OK){
 8100600:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8100604:	9300      	str	r3, [sp, #0]
 8100606:	4b0b      	ldr	r3, [pc, #44]	@ (8100634 <Tx_mode+0x3c>)
 8100608:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 810060c:	4909      	ldr	r1, [pc, #36]	@ (8100634 <Tx_mode+0x3c>)
 810060e:	480a      	ldr	r0, [pc, #40]	@ (8100638 <Tx_mode+0x40>)
 8100610:	f000 fb8e 	bl	8100d30 <NRF_Init>
 8100614:	4603      	mov	r3, r0
 8100616:	2b00      	cmp	r3, #0
 8100618:	d001      	beq.n	810061e <Tx_mode+0x26>
		Error_Handler();
 810061a:	f000 f949 	bl	81008b0 <Error_Handler>
	}

	NRF_Reset();
 810061e:	f000 fbc3 	bl	8100da8 <NRF_Reset>
	NRF_WriteRegister(NRF_REG_TX_ADDR,Adress,5);
 8100622:	2205      	movs	r2, #5
 8100624:	6879      	ldr	r1, [r7, #4]
 8100626:	2010      	movs	r0, #16
 8100628:	f000 fa4c 	bl	8100ac4 <NRF_WriteRegister>
	//Para enviar a mensagem usar função transmitandwait
}
 810062c:	bf00      	nop
 810062e:	3708      	adds	r7, #8
 8100630:	46bd      	mov	sp, r7
 8100632:	bd80      	pop	{r7, pc}
 8100634:	58021800 	.word	0x58021800
 8100638:	10000044 	.word	0x10000044

0810063c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 810063c:	b580      	push	{r7, lr}
 810063e:	b084      	sub	sp, #16
 8100640:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 8100642:	4b40      	ldr	r3, [pc, #256]	@ (8100744 <main+0x108>)
 8100644:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100648:	4a3e      	ldr	r2, [pc, #248]	@ (8100744 <main+0x108>)
 810064a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 810064e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8100652:	4b3c      	ldr	r3, [pc, #240]	@ (8100744 <main+0x108>)
 8100654:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100658:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 810065c:	607b      	str	r3, [r7, #4]
 810065e:	687b      	ldr	r3, [r7, #4]
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8100660:	2001      	movs	r0, #1
 8100662:	f001 f933 	bl	81018cc <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 8100666:	f001 f9bd 	bl	81019e4 <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 810066a:	2201      	movs	r2, #1
 810066c:	2102      	movs	r1, #2
 810066e:	2000      	movs	r0, #0
 8100670:	f001 f93e 	bl	81018f0 <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8100674:	4b34      	ldr	r3, [pc, #208]	@ (8100748 <main+0x10c>)
 8100676:	681b      	ldr	r3, [r3, #0]
 8100678:	091b      	lsrs	r3, r3, #4
 810067a:	f003 030f 	and.w	r3, r3, #15
 810067e:	2b07      	cmp	r3, #7
 8100680:	d108      	bne.n	8100694 <main+0x58>
 8100682:	4b32      	ldr	r3, [pc, #200]	@ (810074c <main+0x110>)
 8100684:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8100688:	4a30      	ldr	r2, [pc, #192]	@ (810074c <main+0x110>)
 810068a:	f043 0301 	orr.w	r3, r3, #1
 810068e:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104
 8100692:	e007      	b.n	81006a4 <main+0x68>
 8100694:	4b2d      	ldr	r3, [pc, #180]	@ (810074c <main+0x110>)
 8100696:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 810069a:	4a2c      	ldr	r2, [pc, #176]	@ (810074c <main+0x110>)
 810069c:	f043 0301 	orr.w	r3, r3, #1
 81006a0:	f8c2 3114 	str.w	r3, [r2, #276]	@ 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 81006a4:	f000 fd78 	bl	8101198 <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 81006a8:	f000 f8ac 	bl	8100804 <MX_GPIO_Init>
  MX_SPI1_Init();
 81006ac:	f000 f854 	bl	8100758 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  Tx_mode(TxAdress);
 81006b0:	4827      	ldr	r0, [pc, #156]	@ (8100750 <main+0x114>)
 81006b2:	f7ff ffa1 	bl	81005f8 <Tx_mode>
  int count = 0;
 81006b6:	2300      	movs	r3, #0
 81006b8:	60fb      	str	r3, [r7, #12]
  NRF_Status ret = NRF_OK;
 81006ba:	2300      	movs	r3, #0
 81006bc:	723b      	strb	r3, [r7, #8]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 if(count<2000){
 81006be:	68fb      	ldr	r3, [r7, #12]
 81006c0:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 81006c4:	da0b      	bge.n	81006de <main+0xa2>
		 for(uint8_t n;n<4;n++){
 81006c6:	e006      	b.n	81006d6 <main+0x9a>
			 TxData[n]=0;
 81006c8:	7afb      	ldrb	r3, [r7, #11]
 81006ca:	4a22      	ldr	r2, [pc, #136]	@ (8100754 <main+0x118>)
 81006cc:	2100      	movs	r1, #0
 81006ce:	54d1      	strb	r1, [r2, r3]
		 for(uint8_t n;n<4;n++){
 81006d0:	7afb      	ldrb	r3, [r7, #11]
 81006d2:	3301      	adds	r3, #1
 81006d4:	72fb      	strb	r3, [r7, #11]
 81006d6:	7afb      	ldrb	r3, [r7, #11]
 81006d8:	2b03      	cmp	r3, #3
 81006da:	d9f5      	bls.n	81006c8 <main+0x8c>
 81006dc:	e024      	b.n	8100728 <main+0xec>
		 }
	 } else if(count>2000 && count<7000) {
 81006de:	68fb      	ldr	r3, [r7, #12]
 81006e0:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 81006e4:	dd10      	ble.n	8100708 <main+0xcc>
 81006e6:	68fb      	ldr	r3, [r7, #12]
 81006e8:	f641 3257 	movw	r2, #6999	@ 0x1b57
 81006ec:	4293      	cmp	r3, r2
 81006ee:	dc0b      	bgt.n	8100708 <main+0xcc>
		 for(uint8_t n;n<4;n++){
 81006f0:	e006      	b.n	8100700 <main+0xc4>
		 	TxData[n]=100;
 81006f2:	7abb      	ldrb	r3, [r7, #10]
 81006f4:	4a17      	ldr	r2, [pc, #92]	@ (8100754 <main+0x118>)
 81006f6:	2164      	movs	r1, #100	@ 0x64
 81006f8:	54d1      	strb	r1, [r2, r3]
		 for(uint8_t n;n<4;n++){
 81006fa:	7abb      	ldrb	r3, [r7, #10]
 81006fc:	3301      	adds	r3, #1
 81006fe:	72bb      	strb	r3, [r7, #10]
 8100700:	7abb      	ldrb	r3, [r7, #10]
 8100702:	2b03      	cmp	r3, #3
 8100704:	d9f5      	bls.n	81006f2 <main+0xb6>
 8100706:	e00f      	b.n	8100728 <main+0xec>
		 }
	 } else if(count>7000){
 8100708:	68fb      	ldr	r3, [r7, #12]
 810070a:	f641 3258 	movw	r2, #7000	@ 0x1b58
 810070e:	4293      	cmp	r3, r2
 8100710:	dd0a      	ble.n	8100728 <main+0xec>
		 for(uint8_t n;n<4;n++){
 8100712:	e006      	b.n	8100722 <main+0xe6>
		 		 	TxData[n]=220;
 8100714:	7a7b      	ldrb	r3, [r7, #9]
 8100716:	4a0f      	ldr	r2, [pc, #60]	@ (8100754 <main+0x118>)
 8100718:	21dc      	movs	r1, #220	@ 0xdc
 810071a:	54d1      	strb	r1, [r2, r3]
		 for(uint8_t n;n<4;n++){
 810071c:	7a7b      	ldrb	r3, [r7, #9]
 810071e:	3301      	adds	r3, #1
 8100720:	727b      	strb	r3, [r7, #9]
 8100722:	7a7b      	ldrb	r3, [r7, #9]
 8100724:	2b03      	cmp	r3, #3
 8100726:	d9f5      	bls.n	8100714 <main+0xd8>
		 		 }
	 }
	 ret = NRF_TransmitAndWait(TxData, 32);
 8100728:	2120      	movs	r1, #32
 810072a:	480a      	ldr	r0, [pc, #40]	@ (8100754 <main+0x118>)
 810072c:	f000 fbe7 	bl	8100efe <NRF_TransmitAndWait>
 8100730:	4603      	mov	r3, r0
 8100732:	723b      	strb	r3, [r7, #8]
	 count = count+2;
 8100734:	68fb      	ldr	r3, [r7, #12]
 8100736:	3302      	adds	r3, #2
 8100738:	60fb      	str	r3, [r7, #12]
	  HAL_Delay(2);
 810073a:	2002      	movs	r0, #2
 810073c:	f000 fde0 	bl	8101300 <HAL_Delay>
	 if(count<2000){
 8100740:	e7bd      	b.n	81006be <main+0x82>
 8100742:	bf00      	nop
 8100744:	58024400 	.word	0x58024400
 8100748:	e000ed00 	.word	0xe000ed00
 810074c:	58026400 	.word	0x58026400
 8100750:	10000008 	.word	0x10000008
 8100754:	10000010 	.word	0x10000010

08100758 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8100758:	b580      	push	{r7, lr}
 810075a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 810075c:	4b27      	ldr	r3, [pc, #156]	@ (81007fc <MX_SPI1_Init+0xa4>)
 810075e:	4a28      	ldr	r2, [pc, #160]	@ (8100800 <MX_SPI1_Init+0xa8>)
 8100760:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8100762:	4b26      	ldr	r3, [pc, #152]	@ (81007fc <MX_SPI1_Init+0xa4>)
 8100764:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8100768:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 810076a:	4b24      	ldr	r3, [pc, #144]	@ (81007fc <MX_SPI1_Init+0xa4>)
 810076c:	2200      	movs	r2, #0
 810076e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8100770:	4b22      	ldr	r3, [pc, #136]	@ (81007fc <MX_SPI1_Init+0xa4>)
 8100772:	2207      	movs	r2, #7
 8100774:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8100776:	4b21      	ldr	r3, [pc, #132]	@ (81007fc <MX_SPI1_Init+0xa4>)
 8100778:	2200      	movs	r2, #0
 810077a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 810077c:	4b1f      	ldr	r3, [pc, #124]	@ (81007fc <MX_SPI1_Init+0xa4>)
 810077e:	2200      	movs	r2, #0
 8100780:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8100782:	4b1e      	ldr	r3, [pc, #120]	@ (81007fc <MX_SPI1_Init+0xa4>)
 8100784:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8100788:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 810078a:	4b1c      	ldr	r3, [pc, #112]	@ (81007fc <MX_SPI1_Init+0xa4>)
 810078c:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 8100790:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8100792:	4b1a      	ldr	r3, [pc, #104]	@ (81007fc <MX_SPI1_Init+0xa4>)
 8100794:	2200      	movs	r2, #0
 8100796:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8100798:	4b18      	ldr	r3, [pc, #96]	@ (81007fc <MX_SPI1_Init+0xa4>)
 810079a:	2200      	movs	r2, #0
 810079c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 810079e:	4b17      	ldr	r3, [pc, #92]	@ (81007fc <MX_SPI1_Init+0xa4>)
 81007a0:	2200      	movs	r2, #0
 81007a2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 81007a4:	4b15      	ldr	r3, [pc, #84]	@ (81007fc <MX_SPI1_Init+0xa4>)
 81007a6:	2200      	movs	r2, #0
 81007a8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 81007aa:	4b14      	ldr	r3, [pc, #80]	@ (81007fc <MX_SPI1_Init+0xa4>)
 81007ac:	2200      	movs	r2, #0
 81007ae:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 81007b0:	4b12      	ldr	r3, [pc, #72]	@ (81007fc <MX_SPI1_Init+0xa4>)
 81007b2:	2200      	movs	r2, #0
 81007b4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 81007b6:	4b11      	ldr	r3, [pc, #68]	@ (81007fc <MX_SPI1_Init+0xa4>)
 81007b8:	2200      	movs	r2, #0
 81007ba:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 81007bc:	4b0f      	ldr	r3, [pc, #60]	@ (81007fc <MX_SPI1_Init+0xa4>)
 81007be:	2200      	movs	r2, #0
 81007c0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 81007c2:	4b0e      	ldr	r3, [pc, #56]	@ (81007fc <MX_SPI1_Init+0xa4>)
 81007c4:	2200      	movs	r2, #0
 81007c6:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 81007c8:	4b0c      	ldr	r3, [pc, #48]	@ (81007fc <MX_SPI1_Init+0xa4>)
 81007ca:	2200      	movs	r2, #0
 81007cc:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 81007ce:	4b0b      	ldr	r3, [pc, #44]	@ (81007fc <MX_SPI1_Init+0xa4>)
 81007d0:	2200      	movs	r2, #0
 81007d2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 81007d4:	4b09      	ldr	r3, [pc, #36]	@ (81007fc <MX_SPI1_Init+0xa4>)
 81007d6:	2200      	movs	r2, #0
 81007d8:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_ENABLE;
 81007da:	4b08      	ldr	r3, [pc, #32]	@ (81007fc <MX_SPI1_Init+0xa4>)
 81007dc:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 81007e0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 81007e2:	4b06      	ldr	r3, [pc, #24]	@ (81007fc <MX_SPI1_Init+0xa4>)
 81007e4:	2200      	movs	r2, #0
 81007e6:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 81007e8:	4804      	ldr	r0, [pc, #16]	@ (81007fc <MX_SPI1_Init+0xa4>)
 81007ea:	f002 fdf1 	bl	81033d0 <HAL_SPI_Init>
 81007ee:	4603      	mov	r3, r0
 81007f0:	2b00      	cmp	r3, #0
 81007f2:	d001      	beq.n	81007f8 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 81007f4:	f000 f85c 	bl	81008b0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 81007f8:	bf00      	nop
 81007fa:	bd80      	pop	{r7, pc}
 81007fc:	10000044 	.word	0x10000044
 8100800:	40013000 	.word	0x40013000

08100804 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8100804:	b580      	push	{r7, lr}
 8100806:	b088      	sub	sp, #32
 8100808:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 810080a:	f107 030c 	add.w	r3, r7, #12
 810080e:	2200      	movs	r2, #0
 8100810:	601a      	str	r2, [r3, #0]
 8100812:	605a      	str	r2, [r3, #4]
 8100814:	609a      	str	r2, [r3, #8]
 8100816:	60da      	str	r2, [r3, #12]
 8100818:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 810081a:	4b23      	ldr	r3, [pc, #140]	@ (81008a8 <MX_GPIO_Init+0xa4>)
 810081c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100820:	4a21      	ldr	r2, [pc, #132]	@ (81008a8 <MX_GPIO_Init+0xa4>)
 8100822:	f043 0301 	orr.w	r3, r3, #1
 8100826:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810082a:	4b1f      	ldr	r3, [pc, #124]	@ (81008a8 <MX_GPIO_Init+0xa4>)
 810082c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100830:	f003 0301 	and.w	r3, r3, #1
 8100834:	60bb      	str	r3, [r7, #8]
 8100836:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8100838:	4b1b      	ldr	r3, [pc, #108]	@ (81008a8 <MX_GPIO_Init+0xa4>)
 810083a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810083e:	4a1a      	ldr	r2, [pc, #104]	@ (81008a8 <MX_GPIO_Init+0xa4>)
 8100840:	f043 0308 	orr.w	r3, r3, #8
 8100844:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8100848:	4b17      	ldr	r3, [pc, #92]	@ (81008a8 <MX_GPIO_Init+0xa4>)
 810084a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810084e:	f003 0308 	and.w	r3, r3, #8
 8100852:	607b      	str	r3, [r7, #4]
 8100854:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8100856:	4b14      	ldr	r3, [pc, #80]	@ (81008a8 <MX_GPIO_Init+0xa4>)
 8100858:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810085c:	4a12      	ldr	r2, [pc, #72]	@ (81008a8 <MX_GPIO_Init+0xa4>)
 810085e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8100862:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8100866:	4b10      	ldr	r3, [pc, #64]	@ (81008a8 <MX_GPIO_Init+0xa4>)
 8100868:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810086c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8100870:	603b      	str	r3, [r7, #0]
 8100872:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, CS_Pin|CE_Pin, GPIO_PIN_RESET);
 8100874:	2200      	movs	r2, #0
 8100876:	f44f 41a0 	mov.w	r1, #20480	@ 0x5000
 810087a:	480c      	ldr	r0, [pc, #48]	@ (81008ac <MX_GPIO_Init+0xa8>)
 810087c:	f001 f80c 	bl	8101898 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CS_Pin CE_Pin */
  GPIO_InitStruct.Pin = CS_Pin|CE_Pin;
 8100880:	f44f 43a0 	mov.w	r3, #20480	@ 0x5000
 8100884:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8100886:	2301      	movs	r3, #1
 8100888:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 810088a:	2300      	movs	r3, #0
 810088c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 810088e:	2300      	movs	r3, #0
 8100890:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8100892:	f107 030c 	add.w	r3, r7, #12
 8100896:	4619      	mov	r1, r3
 8100898:	4804      	ldr	r0, [pc, #16]	@ (81008ac <MX_GPIO_Init+0xa8>)
 810089a:	f000 fe4d 	bl	8101538 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 810089e:	bf00      	nop
 81008a0:	3720      	adds	r7, #32
 81008a2:	46bd      	mov	sp, r7
 81008a4:	bd80      	pop	{r7, pc}
 81008a6:	bf00      	nop
 81008a8:	58024400 	.word	0x58024400
 81008ac:	58021800 	.word	0x58021800

081008b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 81008b0:	b480      	push	{r7}
 81008b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 81008b4:	b672      	cpsid	i
}
 81008b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 81008b8:	bf00      	nop
 81008ba:	e7fd      	b.n	81008b8 <Error_Handler+0x8>

081008bc <csn_set>:
int current_mode = NRF_MODE_POWERDOWN; // Modo atual do NRF

/* Funções de Pinagem do NRF*/

//Pino CS em Alto (Dispositivo não está conversando com o uC)
void csn_set() {
 81008bc:	b580      	push	{r7, lr}
 81008be:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(NRF_CSN_Port, NRF_CSN_Pin, GPIO_PIN_SET);
 81008c0:	4b04      	ldr	r3, [pc, #16]	@ (81008d4 <csn_set+0x18>)
 81008c2:	681b      	ldr	r3, [r3, #0]
 81008c4:	4a04      	ldr	r2, [pc, #16]	@ (81008d8 <csn_set+0x1c>)
 81008c6:	8811      	ldrh	r1, [r2, #0]
 81008c8:	2201      	movs	r2, #1
 81008ca:	4618      	mov	r0, r3
 81008cc:	f000 ffe4 	bl	8101898 <HAL_GPIO_WritePin>
}
 81008d0:	bf00      	nop
 81008d2:	bd80      	pop	{r7, pc}
 81008d4:	100000d0 	.word	0x100000d0
 81008d8:	100000d4 	.word	0x100000d4

081008dc <csn_reset>:

//Pino CS em Baixo (Dispositivo  está conversando com o uC)
void csn_reset() {
 81008dc:	b580      	push	{r7, lr}
 81008de:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(NRF_CSN_Port, NRF_CSN_Pin, GPIO_PIN_RESET);
 81008e0:	4b04      	ldr	r3, [pc, #16]	@ (81008f4 <csn_reset+0x18>)
 81008e2:	681b      	ldr	r3, [r3, #0]
 81008e4:	4a04      	ldr	r2, [pc, #16]	@ (81008f8 <csn_reset+0x1c>)
 81008e6:	8811      	ldrh	r1, [r2, #0]
 81008e8:	2200      	movs	r2, #0
 81008ea:	4618      	mov	r0, r3
 81008ec:	f000 ffd4 	bl	8101898 <HAL_GPIO_WritePin>
}
 81008f0:	bf00      	nop
 81008f2:	bd80      	pop	{r7, pc}
 81008f4:	100000d0 	.word	0x100000d0
 81008f8:	100000d4 	.word	0x100000d4

081008fc <ce_set>:

//Pino CE em Alto (Dispositivo está em funcionamento,Tx ou Rx)
void ce_set() {
 81008fc:	b580      	push	{r7, lr}
 81008fe:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(NRF_CE_Port, NRF_CE_Pin, GPIO_PIN_SET);
 8100900:	4b04      	ldr	r3, [pc, #16]	@ (8100914 <ce_set+0x18>)
 8100902:	681b      	ldr	r3, [r3, #0]
 8100904:	4a04      	ldr	r2, [pc, #16]	@ (8100918 <ce_set+0x1c>)
 8100906:	8811      	ldrh	r1, [r2, #0]
 8100908:	2201      	movs	r2, #1
 810090a:	4618      	mov	r0, r3
 810090c:	f000 ffc4 	bl	8101898 <HAL_GPIO_WritePin>
}
 8100910:	bf00      	nop
 8100912:	bd80      	pop	{r7, pc}
 8100914:	100000d8 	.word	0x100000d8
 8100918:	100000dc 	.word	0x100000dc

0810091c <ce_reset>:

//Pino CE em Baixo (Dispositivo está em standby)
void ce_reset() {
 810091c:	b580      	push	{r7, lr}
 810091e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(NRF_CE_Port, NRF_CE_Pin, GPIO_PIN_RESET);
 8100920:	4b04      	ldr	r3, [pc, #16]	@ (8100934 <ce_reset+0x18>)
 8100922:	681b      	ldr	r3, [r3, #0]
 8100924:	4a04      	ldr	r2, [pc, #16]	@ (8100938 <ce_reset+0x1c>)
 8100926:	8811      	ldrh	r1, [r2, #0]
 8100928:	2200      	movs	r2, #0
 810092a:	4618      	mov	r0, r3
 810092c:	f000 ffb4 	bl	8101898 <HAL_GPIO_WritePin>
}
 8100930:	bf00      	nop
 8100932:	bd80      	pop	{r7, pc}
 8100934:	100000d8 	.word	0x100000d8
 8100938:	100000dc 	.word	0x100000dc

0810093c <wait>:
uint8_t read_ce() {
  return HAL_GPIO_ReadPin(NRF_CE_Port, NRF_CE_Pin);
}

//Função de "Esperar" em us
void wait(uint64_t us) {
 810093c:	b5b0      	push	{r4, r5, r7, lr}
 810093e:	b084      	sub	sp, #16
 8100940:	af00      	add	r7, sp, #0
 8100942:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t volatile cycles = CPU_Freq * us / 1000000; //Quantos ciclos de CPU deverão ser esperados para alcancar tal tempo
 8100946:	4915      	ldr	r1, [pc, #84]	@ (810099c <wait+0x60>)
 8100948:	6809      	ldr	r1, [r1, #0]
 810094a:	2000      	movs	r0, #0
 810094c:	460a      	mov	r2, r1
 810094e:	4603      	mov	r3, r0
 8100950:	6839      	ldr	r1, [r7, #0]
 8100952:	fb03 f001 	mul.w	r0, r3, r1
 8100956:	6879      	ldr	r1, [r7, #4]
 8100958:	fb02 f101 	mul.w	r1, r2, r1
 810095c:	4401      	add	r1, r0
 810095e:	6838      	ldr	r0, [r7, #0]
 8100960:	fba0 4502 	umull	r4, r5, r0, r2
 8100964:	194b      	adds	r3, r1, r5
 8100966:	461d      	mov	r5, r3
 8100968:	4a0d      	ldr	r2, [pc, #52]	@ (81009a0 <wait+0x64>)
 810096a:	f04f 0300 	mov.w	r3, #0
 810096e:	4620      	mov	r0, r4
 8100970:	4629      	mov	r1, r5
 8100972:	f7ff fcb1 	bl	81002d8 <__aeabi_uldivmod>
 8100976:	4602      	mov	r2, r0
 8100978:	460b      	mov	r3, r1
 810097a:	4613      	mov	r3, r2
 810097c:	60fb      	str	r3, [r7, #12]
  uint32_t volatile current = 0; //Quantos se passaram
 810097e:	2300      	movs	r3, #0
 8100980:	60bb      	str	r3, [r7, #8]
  while (current <= cycles) {
 8100982:	e002      	b.n	810098a <wait+0x4e>
    current++;
 8100984:	68bb      	ldr	r3, [r7, #8]
 8100986:	3301      	adds	r3, #1
 8100988:	60bb      	str	r3, [r7, #8]
  while (current <= cycles) {
 810098a:	68ba      	ldr	r2, [r7, #8]
 810098c:	68fb      	ldr	r3, [r7, #12]
 810098e:	429a      	cmp	r2, r3
 8100990:	d9f8      	bls.n	8100984 <wait+0x48>
  }
}
 8100992:	bf00      	nop
 8100994:	bf00      	nop
 8100996:	3710      	adds	r7, #16
 8100998:	46bd      	mov	sp, r7
 810099a:	bdb0      	pop	{r4, r5, r7, pc}
 810099c:	100000e0 	.word	0x100000e0
 81009a0:	000f4240 	.word	0x000f4240

081009a4 <NRF_SendCommand>:

/* Funções Para enviar e receber do NRFL01 em "Baixo" Nível */

//Função para enviar um comando para o NRF
NRF_Status NRF_SendCommand(uint8_t cmd) {
 81009a4:	b580      	push	{r7, lr}
 81009a6:	b086      	sub	sp, #24
 81009a8:	af02      	add	r7, sp, #8
 81009aa:	4603      	mov	r3, r0
 81009ac:	71fb      	strb	r3, [r7, #7]
  NRF_Status ret = NRF_OK;
 81009ae:	2300      	movs	r3, #0
 81009b0:	73fb      	strb	r3, [r7, #15]
  uint8_t status;

  csn_reset(); //Seleciona o dispositivo
 81009b2:	f7ff ff93 	bl	81008dc <csn_reset>
  ret = (NRF_Status)HAL_SPI_TransmitReceive(HSPI, &cmd, &status, 1, NRF_SPI_TIMEOUT_DUR); //Envia o comando e retorna o status
 81009b6:	4b0c      	ldr	r3, [pc, #48]	@ (81009e8 <NRF_SendCommand+0x44>)
 81009b8:	6818      	ldr	r0, [r3, #0]
 81009ba:	f107 020e 	add.w	r2, r7, #14
 81009be:	1df9      	adds	r1, r7, #7
 81009c0:	230a      	movs	r3, #10
 81009c2:	9300      	str	r3, [sp, #0]
 81009c4:	2301      	movs	r3, #1
 81009c6:	f003 fa83 	bl	8103ed0 <HAL_SPI_TransmitReceive>
 81009ca:	4603      	mov	r3, r0
 81009cc:	73fb      	strb	r3, [r7, #15]
  if (ret != NRF_OK) { //Verifica se o comando foi enviado corretamente
 81009ce:	7bfb      	ldrb	r3, [r7, #15]
 81009d0:	2b00      	cmp	r3, #0
 81009d2:	d001      	beq.n	81009d8 <NRF_SendCommand+0x34>
    return ret;
 81009d4:	7bfb      	ldrb	r3, [r7, #15]
 81009d6:	e002      	b.n	81009de <NRF_SendCommand+0x3a>
  }
  csn_set(); //Desseleciona o dispositivo
 81009d8:	f7ff ff70 	bl	81008bc <csn_set>

  return ret;
 81009dc:	7bfb      	ldrb	r3, [r7, #15]
}
 81009de:	4618      	mov	r0, r3
 81009e0:	3710      	adds	r7, #16
 81009e2:	46bd      	mov	sp, r7
 81009e4:	bd80      	pop	{r7, pc}
 81009e6:	bf00      	nop
 81009e8:	100000cc 	.word	0x100000cc

081009ec <NRF_SendWriteCommand>:

/* Função para enviar um comando de escrita*/
NRF_Status NRF_SendWriteCommand(uint8_t cmd, uint8_t *write, uint8_t length) {
 81009ec:	b580      	push	{r7, lr}
 81009ee:	b086      	sub	sp, #24
 81009f0:	af02      	add	r7, sp, #8
 81009f2:	4603      	mov	r3, r0
 81009f4:	6039      	str	r1, [r7, #0]
 81009f6:	71fb      	strb	r3, [r7, #7]
 81009f8:	4613      	mov	r3, r2
 81009fa:	71bb      	strb	r3, [r7, #6]
  NRF_Status ret = NRF_OK;
 81009fc:	2300      	movs	r3, #0
 81009fe:	73fb      	strb	r3, [r7, #15]
  uint8_t status;

  csn_reset(); //Seleciona o dispositivo
 8100a00:	f7ff ff6c 	bl	81008dc <csn_reset>
  ret = (NRF_Status)HAL_SPI_TransmitReceive(HSPI, &cmd, &status, 1, NRF_SPI_TIMEOUT_DUR); //Manda pro NRF o comando de escrita
 8100a04:	4b13      	ldr	r3, [pc, #76]	@ (8100a54 <NRF_SendWriteCommand+0x68>)
 8100a06:	6818      	ldr	r0, [r3, #0]
 8100a08:	f107 020e 	add.w	r2, r7, #14
 8100a0c:	1df9      	adds	r1, r7, #7
 8100a0e:	230a      	movs	r3, #10
 8100a10:	9300      	str	r3, [sp, #0]
 8100a12:	2301      	movs	r3, #1
 8100a14:	f003 fa5c 	bl	8103ed0 <HAL_SPI_TransmitReceive>
 8100a18:	4603      	mov	r3, r0
 8100a1a:	73fb      	strb	r3, [r7, #15]
  if (ret != NRF_OK) { //Verifica se está ok para escrever
 8100a1c:	7bfb      	ldrb	r3, [r7, #15]
 8100a1e:	2b00      	cmp	r3, #0
 8100a20:	d001      	beq.n	8100a26 <NRF_SendWriteCommand+0x3a>
	//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
    return ret;
 8100a22:	7bfb      	ldrb	r3, [r7, #15]
 8100a24:	e011      	b.n	8100a4a <NRF_SendWriteCommand+0x5e>
  }
  ret = (NRF_Status)HAL_SPI_Transmit(HSPI, write, length, NRF_SPI_TIMEOUT_DUR); //Manda  o que será escrito no registro
 8100a26:	4b0b      	ldr	r3, [pc, #44]	@ (8100a54 <NRF_SendWriteCommand+0x68>)
 8100a28:	6818      	ldr	r0, [r3, #0]
 8100a2a:	79bb      	ldrb	r3, [r7, #6]
 8100a2c:	b29a      	uxth	r2, r3
 8100a2e:	230a      	movs	r3, #10
 8100a30:	6839      	ldr	r1, [r7, #0]
 8100a32:	f002 fdf1 	bl	8103618 <HAL_SPI_Transmit>
 8100a36:	4603      	mov	r3, r0
 8100a38:	73fb      	strb	r3, [r7, #15]
  if (ret != NRF_OK) {//Verifica se o processo foi um sucesso
 8100a3a:	7bfb      	ldrb	r3, [r7, #15]
 8100a3c:	2b00      	cmp	r3, #0
 8100a3e:	d001      	beq.n	8100a44 <NRF_SendWriteCommand+0x58>
    return ret;
 8100a40:	7bfb      	ldrb	r3, [r7, #15]
 8100a42:	e002      	b.n	8100a4a <NRF_SendWriteCommand+0x5e>
  }
  csn_set(); //Desseleciona o dispositivo
 8100a44:	f7ff ff3a 	bl	81008bc <csn_set>

  return ret; //Retorna o Resultado
 8100a48:	7bfb      	ldrb	r3, [r7, #15]
}
 8100a4a:	4618      	mov	r0, r3
 8100a4c:	3710      	adds	r7, #16
 8100a4e:	46bd      	mov	sp, r7
 8100a50:	bd80      	pop	{r7, pc}
 8100a52:	bf00      	nop
 8100a54:	100000cc 	.word	0x100000cc

08100a58 <NRF_SendReadCommand>:

//Função para enviar um comando de leitura
NRF_Status NRF_SendReadCommand(uint8_t cmd, uint8_t *read, uint8_t length) {
 8100a58:	b580      	push	{r7, lr}
 8100a5a:	b086      	sub	sp, #24
 8100a5c:	af02      	add	r7, sp, #8
 8100a5e:	4603      	mov	r3, r0
 8100a60:	6039      	str	r1, [r7, #0]
 8100a62:	71fb      	strb	r3, [r7, #7]
 8100a64:	4613      	mov	r3, r2
 8100a66:	71bb      	strb	r3, [r7, #6]
  NRF_Status ret = NRF_OK;
 8100a68:	2300      	movs	r3, #0
 8100a6a:	73fb      	strb	r3, [r7, #15]
  uint8_t status;

  csn_reset(); //Seleciona o dispositivo
 8100a6c:	f7ff ff36 	bl	81008dc <csn_reset>
  ret = (NRF_Status)HAL_SPI_TransmitReceive(HSPI, &cmd, &status, 1, NRF_SPI_TIMEOUT_DUR);//Manda pro NRF o comando de Leitura
 8100a70:	4b13      	ldr	r3, [pc, #76]	@ (8100ac0 <NRF_SendReadCommand+0x68>)
 8100a72:	6818      	ldr	r0, [r3, #0]
 8100a74:	f107 020e 	add.w	r2, r7, #14
 8100a78:	1df9      	adds	r1, r7, #7
 8100a7a:	230a      	movs	r3, #10
 8100a7c:	9300      	str	r3, [sp, #0]
 8100a7e:	2301      	movs	r3, #1
 8100a80:	f003 fa26 	bl	8103ed0 <HAL_SPI_TransmitReceive>
 8100a84:	4603      	mov	r3, r0
 8100a86:	73fb      	strb	r3, [r7, #15]
  if(ret != NRF_OK) { //Verifica se o processo foi um sucesso
 8100a88:	7bfb      	ldrb	r3, [r7, #15]
 8100a8a:	2b00      	cmp	r3, #0
 8100a8c:	d001      	beq.n	8100a92 <NRF_SendReadCommand+0x3a>
    return ret;
 8100a8e:	7bfb      	ldrb	r3, [r7, #15]
 8100a90:	e011      	b.n	8100ab6 <NRF_SendReadCommand+0x5e>
  }
  ret = (NRF_Status)HAL_SPI_Receive(HSPI, read, length, NRF_SPI_TIMEOUT_DUR);//Recebe o que se deseja ler do NRF
 8100a92:	4b0b      	ldr	r3, [pc, #44]	@ (8100ac0 <NRF_SendReadCommand+0x68>)
 8100a94:	6818      	ldr	r0, [r3, #0]
 8100a96:	79bb      	ldrb	r3, [r7, #6]
 8100a98:	b29a      	uxth	r2, r3
 8100a9a:	230a      	movs	r3, #10
 8100a9c:	6839      	ldr	r1, [r7, #0]
 8100a9e:	f002 ffa6 	bl	81039ee <HAL_SPI_Receive>
 8100aa2:	4603      	mov	r3, r0
 8100aa4:	73fb      	strb	r3, [r7, #15]
  if(ret != NRF_OK) {
 8100aa6:	7bfb      	ldrb	r3, [r7, #15]
 8100aa8:	2b00      	cmp	r3, #0
 8100aaa:	d001      	beq.n	8100ab0 <NRF_SendReadCommand+0x58>
    return ret;
 8100aac:	7bfb      	ldrb	r3, [r7, #15]
 8100aae:	e002      	b.n	8100ab6 <NRF_SendReadCommand+0x5e>
  }
  csn_set();//Desseleciona o dispositvo
 8100ab0:	f7ff ff04 	bl	81008bc <csn_set>

  return ret;//Retorna o resultado
 8100ab4:	7bfb      	ldrb	r3, [r7, #15]
}
 8100ab6:	4618      	mov	r0, r3
 8100ab8:	3710      	adds	r7, #16
 8100aba:	46bd      	mov	sp, r7
 8100abc:	bd80      	pop	{r7, pc}
 8100abe:	bf00      	nop
 8100ac0:	100000cc 	.word	0x100000cc

08100ac4 <NRF_WriteRegister>:
/* Escreve no Registro do NRF
 * Param - Registro a ser escrito
 * Param - O que será escrito
 * Param - O tamanho (em bytes)
 *  							*/
NRF_Status NRF_WriteRegister(uint8_t reg, uint8_t *write, uint8_t length) {
 8100ac4:	b580      	push	{r7, lr}
 8100ac6:	b082      	sub	sp, #8
 8100ac8:	af00      	add	r7, sp, #0
 8100aca:	4603      	mov	r3, r0
 8100acc:	6039      	str	r1, [r7, #0]
 8100ace:	71fb      	strb	r3, [r7, #7]
 8100ad0:	4613      	mov	r3, r2
 8100ad2:	71bb      	strb	r3, [r7, #6]
  return NRF_SendWriteCommand(NRF_CMD_W_REGISTER | reg, write, length);
 8100ad4:	79fb      	ldrb	r3, [r7, #7]
 8100ad6:	f043 0320 	orr.w	r3, r3, #32
 8100ada:	b2db      	uxtb	r3, r3
 8100adc:	79ba      	ldrb	r2, [r7, #6]
 8100ade:	6839      	ldr	r1, [r7, #0]
 8100ae0:	4618      	mov	r0, r3
 8100ae2:	f7ff ff83 	bl	81009ec <NRF_SendWriteCommand>
 8100ae6:	4603      	mov	r3, r0
}
 8100ae8:	4618      	mov	r0, r3
 8100aea:	3708      	adds	r7, #8
 8100aec:	46bd      	mov	sp, r7
 8100aee:	bd80      	pop	{r7, pc}

08100af0 <NRF_WriteRegisterByte>:

/* Escreve em um byte da Memória do NRF
 * Param - Registro a ser escrito
 * Param - O que será escrito
 *  							*/
NRF_Status NRF_WriteRegisterByte(uint8_t reg, uint8_t byte) {
 8100af0:	b580      	push	{r7, lr}
 8100af2:	b084      	sub	sp, #16
 8100af4:	af00      	add	r7, sp, #0
 8100af6:	4603      	mov	r3, r0
 8100af8:	460a      	mov	r2, r1
 8100afa:	71fb      	strb	r3, [r7, #7]
 8100afc:	4613      	mov	r3, r2
 8100afe:	71bb      	strb	r3, [r7, #6]
  uint8_t write = byte;
 8100b00:	79bb      	ldrb	r3, [r7, #6]
 8100b02:	73fb      	strb	r3, [r7, #15]
  return NRF_WriteRegister(reg, &write, 1);
 8100b04:	f107 010f 	add.w	r1, r7, #15
 8100b08:	79fb      	ldrb	r3, [r7, #7]
 8100b0a:	2201      	movs	r2, #1
 8100b0c:	4618      	mov	r0, r3
 8100b0e:	f7ff ffd9 	bl	8100ac4 <NRF_WriteRegister>
 8100b12:	4603      	mov	r3, r0
}
 8100b14:	4618      	mov	r0, r3
 8100b16:	3710      	adds	r7, #16
 8100b18:	46bd      	mov	sp, r7
 8100b1a:	bd80      	pop	{r7, pc}

08100b1c <NRF_ReadRegister>:
/* Lê no Registro do NRF
 * Param - Registro a ser lido
 * Param - Ponteiro para variável onde será salvo
 * Param - O tamanho (em bytes)
 *  							*/
NRF_Status NRF_ReadRegister(uint8_t reg, uint8_t *read, uint8_t length) {
 8100b1c:	b580      	push	{r7, lr}
 8100b1e:	b082      	sub	sp, #8
 8100b20:	af00      	add	r7, sp, #0
 8100b22:	4603      	mov	r3, r0
 8100b24:	6039      	str	r1, [r7, #0]
 8100b26:	71fb      	strb	r3, [r7, #7]
 8100b28:	4613      	mov	r3, r2
 8100b2a:	71bb      	strb	r3, [r7, #6]
  return NRF_SendReadCommand(NRF_CMD_R_REGISTER | reg, read, length);
 8100b2c:	79ba      	ldrb	r2, [r7, #6]
 8100b2e:	79fb      	ldrb	r3, [r7, #7]
 8100b30:	6839      	ldr	r1, [r7, #0]
 8100b32:	4618      	mov	r0, r3
 8100b34:	f7ff ff90 	bl	8100a58 <NRF_SendReadCommand>
 8100b38:	4603      	mov	r3, r0
}
 8100b3a:	4618      	mov	r0, r3
 8100b3c:	3708      	adds	r7, #8
 8100b3e:	46bd      	mov	sp, r7
 8100b40:	bd80      	pop	{r7, pc}
	...

08100b44 <NRF_ReadStatus>:
  NRF_SendReadCommand(NRF_CMD_R_REGISTER | reg, &read, 1);
  return read;
}

//Lê o Status do NRF
uint8_t NRF_ReadStatus() {
 8100b44:	b580      	push	{r7, lr}
 8100b46:	b084      	sub	sp, #16
 8100b48:	af02      	add	r7, sp, #8
  uint8_t status = 0x00;
 8100b4a:	2300      	movs	r3, #0
 8100b4c:	71fb      	strb	r3, [r7, #7]
  uint8_t cmd = NRF_CMD_NOP;
 8100b4e:	23ff      	movs	r3, #255	@ 0xff
 8100b50:	71bb      	strb	r3, [r7, #6]

  csn_reset();
 8100b52:	f7ff fec3 	bl	81008dc <csn_reset>
  HAL_SPI_TransmitReceive(HSPI, &cmd, &status, 1, NRF_SPI_TIMEOUT_DUR);
 8100b56:	4b08      	ldr	r3, [pc, #32]	@ (8100b78 <NRF_ReadStatus+0x34>)
 8100b58:	6818      	ldr	r0, [r3, #0]
 8100b5a:	1dfa      	adds	r2, r7, #7
 8100b5c:	1db9      	adds	r1, r7, #6
 8100b5e:	230a      	movs	r3, #10
 8100b60:	9300      	str	r3, [sp, #0]
 8100b62:	2301      	movs	r3, #1
 8100b64:	f003 f9b4 	bl	8103ed0 <HAL_SPI_TransmitReceive>
  csn_set();
 8100b68:	f7ff fea8 	bl	81008bc <csn_set>

  return status;
 8100b6c:	79fb      	ldrb	r3, [r7, #7]
}
 8100b6e:	4618      	mov	r0, r3
 8100b70:	3708      	adds	r7, #8
 8100b72:	46bd      	mov	sp, r7
 8100b74:	bd80      	pop	{r7, pc}
 8100b76:	bf00      	nop
 8100b78:	100000cc 	.word	0x100000cc

08100b7c <NRF_SetRegisterBit>:

/* Seta um Bit específico de um Registro para 1
 * Param - Registro a ser escrito
 * Param - Qual bit será alterado para 1
 *  											*/
NRF_Status NRF_SetRegisterBit(uint8_t reg, uint8_t bit) {
 8100b7c:	b580      	push	{r7, lr}
 8100b7e:	b084      	sub	sp, #16
 8100b80:	af00      	add	r7, sp, #0
 8100b82:	4603      	mov	r3, r0
 8100b84:	460a      	mov	r2, r1
 8100b86:	71fb      	strb	r3, [r7, #7]
 8100b88:	4613      	mov	r3, r2
 8100b8a:	71bb      	strb	r3, [r7, #6]
  NRF_Status ret = NRF_OK;
 8100b8c:	2300      	movs	r3, #0
 8100b8e:	73fb      	strb	r3, [r7, #15]
  uint8_t cfg = 0x00;
 8100b90:	2300      	movs	r3, #0
 8100b92:	73bb      	strb	r3, [r7, #14]

  ret = NRF_ReadRegister(reg, &cfg, 1); //Pega a informação do byte do registro
 8100b94:	f107 010e 	add.w	r1, r7, #14
 8100b98:	79fb      	ldrb	r3, [r7, #7]
 8100b9a:	2201      	movs	r2, #1
 8100b9c:	4618      	mov	r0, r3
 8100b9e:	f7ff ffbd 	bl	8100b1c <NRF_ReadRegister>
 8100ba2:	4603      	mov	r3, r0
 8100ba4:	73fb      	strb	r3, [r7, #15]
  if (ret != NRF_OK) {
 8100ba6:	7bfb      	ldrb	r3, [r7, #15]
 8100ba8:	2b00      	cmp	r3, #0
 8100baa:	d001      	beq.n	8100bb0 <NRF_SetRegisterBit+0x34>
    return ret;
 8100bac:	7bfb      	ldrb	r3, [r7, #15]
 8100bae:	e012      	b.n	8100bd6 <NRF_SetRegisterBit+0x5a>
  }

  cfg = cfg | (1 << bit); //Altera o bit por meio de um OU binário
 8100bb0:	79bb      	ldrb	r3, [r7, #6]
 8100bb2:	2201      	movs	r2, #1
 8100bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8100bb8:	b25a      	sxtb	r2, r3
 8100bba:	7bbb      	ldrb	r3, [r7, #14]
 8100bbc:	b25b      	sxtb	r3, r3
 8100bbe:	4313      	orrs	r3, r2
 8100bc0:	b25b      	sxtb	r3, r3
 8100bc2:	b2db      	uxtb	r3, r3
 8100bc4:	73bb      	strb	r3, [r7, #14]
  return NRF_WriteRegister(reg, &cfg, 1); //Escreve o registro de volta
 8100bc6:	f107 010e 	add.w	r1, r7, #14
 8100bca:	79fb      	ldrb	r3, [r7, #7]
 8100bcc:	2201      	movs	r2, #1
 8100bce:	4618      	mov	r0, r3
 8100bd0:	f7ff ff78 	bl	8100ac4 <NRF_WriteRegister>
 8100bd4:	4603      	mov	r3, r0
}
 8100bd6:	4618      	mov	r0, r3
 8100bd8:	3710      	adds	r7, #16
 8100bda:	46bd      	mov	sp, r7
 8100bdc:	bd80      	pop	{r7, pc}

08100bde <NRF_ResetRegisterBit>:

/* Seta um Bit específico de um Registro para 0
 * Param - Registro a ser escrito
 * Param - Qual bit será alterado para 1
 *  											*/
NRF_Status NRF_ResetRegisterBit(uint8_t reg, uint8_t bit) {
 8100bde:	b580      	push	{r7, lr}
 8100be0:	b084      	sub	sp, #16
 8100be2:	af00      	add	r7, sp, #0
 8100be4:	4603      	mov	r3, r0
 8100be6:	460a      	mov	r2, r1
 8100be8:	71fb      	strb	r3, [r7, #7]
 8100bea:	4613      	mov	r3, r2
 8100bec:	71bb      	strb	r3, [r7, #6]
  NRF_Status ret = NRF_OK;
 8100bee:	2300      	movs	r3, #0
 8100bf0:	73fb      	strb	r3, [r7, #15]
  uint8_t cfg = 0x00;
 8100bf2:	2300      	movs	r3, #0
 8100bf4:	73bb      	strb	r3, [r7, #14]

  ret = NRF_ReadRegister(reg, &cfg, 1);//Pega a informação do byte do registro
 8100bf6:	f107 010e 	add.w	r1, r7, #14
 8100bfa:	79fb      	ldrb	r3, [r7, #7]
 8100bfc:	2201      	movs	r2, #1
 8100bfe:	4618      	mov	r0, r3
 8100c00:	f7ff ff8c 	bl	8100b1c <NRF_ReadRegister>
 8100c04:	4603      	mov	r3, r0
 8100c06:	73fb      	strb	r3, [r7, #15]
  if (ret != NRF_OK) {
 8100c08:	7bfb      	ldrb	r3, [r7, #15]
 8100c0a:	2b00      	cmp	r3, #0
 8100c0c:	d001      	beq.n	8100c12 <NRF_ResetRegisterBit+0x34>
    return ret;
 8100c0e:	7bfb      	ldrb	r3, [r7, #15]
 8100c10:	e014      	b.n	8100c3c <NRF_ResetRegisterBit+0x5e>
  }

  cfg = cfg & ~(1 << bit);//Altera o bit por meio de um E binário
 8100c12:	79bb      	ldrb	r3, [r7, #6]
 8100c14:	2201      	movs	r2, #1
 8100c16:	fa02 f303 	lsl.w	r3, r2, r3
 8100c1a:	b25b      	sxtb	r3, r3
 8100c1c:	43db      	mvns	r3, r3
 8100c1e:	b25a      	sxtb	r2, r3
 8100c20:	7bbb      	ldrb	r3, [r7, #14]
 8100c22:	b25b      	sxtb	r3, r3
 8100c24:	4013      	ands	r3, r2
 8100c26:	b25b      	sxtb	r3, r3
 8100c28:	b2db      	uxtb	r3, r3
 8100c2a:	73bb      	strb	r3, [r7, #14]
  return NRF_WriteRegister(reg, &cfg, 1);//Escreve o registro de volta
 8100c2c:	f107 010e 	add.w	r1, r7, #14
 8100c30:	79fb      	ldrb	r3, [r7, #7]
 8100c32:	2201      	movs	r2, #1
 8100c34:	4618      	mov	r0, r3
 8100c36:	f7ff ff45 	bl	8100ac4 <NRF_WriteRegister>
 8100c3a:	4603      	mov	r3, r0
}
 8100c3c:	4618      	mov	r0, r3
 8100c3e:	3710      	adds	r7, #16
 8100c40:	46bd      	mov	sp, r7
 8100c42:	bd80      	pop	{r7, pc}

08100c44 <NRF_EnterMode>:
 * NRF_MODE_STANDBY1 - Standby
 * NRF_MODE_RX - Modo de Recepção
 * NRF_MODE_Tx - Modo de Transmissão
 * Retorno: Status
 *  								*/
NRF_Status NRF_EnterMode(uint8_t mode) {
 8100c44:	b580      	push	{r7, lr}
 8100c46:	b084      	sub	sp, #16
 8100c48:	af00      	add	r7, sp, #0
 8100c4a:	4603      	mov	r3, r0
 8100c4c:	71fb      	strb	r3, [r7, #7]
  NRF_Status ret = NRF_OK;
 8100c4e:	2300      	movs	r3, #0
 8100c50:	73fb      	strb	r3, [r7, #15]

  switch(mode) {
 8100c52:	79fb      	ldrb	r3, [r7, #7]
 8100c54:	2b03      	cmp	r3, #3
 8100c56:	d859      	bhi.n	8100d0c <NRF_EnterMode+0xc8>
 8100c58:	a201      	add	r2, pc, #4	@ (adr r2, 8100c60 <NRF_EnterMode+0x1c>)
 8100c5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8100c5e:	bf00      	nop
 8100c60:	08100c71 	.word	0x08100c71
 8100c64:	08100c87 	.word	0x08100c87
 8100c68:	08100cd1 	.word	0x08100cd1
 8100c6c:	08100cef 	.word	0x08100cef
    case NRF_MODE_POWERDOWN:
      csn_set();
 8100c70:	f7ff fe24 	bl	81008bc <csn_set>
      ce_reset();
 8100c74:	f7ff fe52 	bl	810091c <ce_reset>
      ret = NRF_ResetRegisterBit(NRF_REG_CONFIG, CFG_BIT_PWR_UP); //Seta o bit de Power up em 0
 8100c78:	2101      	movs	r1, #1
 8100c7a:	2000      	movs	r0, #0
 8100c7c:	f7ff ffaf 	bl	8100bde <NRF_ResetRegisterBit>
 8100c80:	4603      	mov	r3, r0
 8100c82:	73fb      	strb	r3, [r7, #15]
      break;
 8100c84:	e046      	b.n	8100d14 <NRF_EnterMode+0xd0>
    case NRF_MODE_STANDBY1:
      if (current_mode == NRF_MODE_POWERDOWN) {
 8100c86:	4b29      	ldr	r3, [pc, #164]	@ (8100d2c <NRF_EnterMode+0xe8>)
 8100c88:	681b      	ldr	r3, [r3, #0]
 8100c8a:	2b00      	cmp	r3, #0
 8100c8c:	d10c      	bne.n	8100ca8 <NRF_EnterMode+0x64>
        ret = NRF_SetRegisterBit(NRF_REG_CONFIG, CFG_BIT_PWR_UP); //Seta o bit de Power up em 1
 8100c8e:	2101      	movs	r1, #1
 8100c90:	2000      	movs	r0, #0
 8100c92:	f7ff ff73 	bl	8100b7c <NRF_SetRegisterBit>
 8100c96:	4603      	mov	r3, r0
 8100c98:	73fb      	strb	r3, [r7, #15]
        wait(1500);
 8100c9a:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8100c9e:	f04f 0100 	mov.w	r1, #0
 8100ca2:	f7ff fe4b 	bl	810093c <wait>
        ret = NRF_ResetRegisterBit(NRF_REG_CONFIG, CFG_BIT_PRIM_RX);
        ce_reset();
      } else if (current_mode == NRF_MODE_TX) {
        ce_reset();
      }
      break;
 8100ca6:	e034      	b.n	8100d12 <NRF_EnterMode+0xce>
      } else if (current_mode == NRF_MODE_RX) {
 8100ca8:	4b20      	ldr	r3, [pc, #128]	@ (8100d2c <NRF_EnterMode+0xe8>)
 8100caa:	681b      	ldr	r3, [r3, #0]
 8100cac:	2b02      	cmp	r3, #2
 8100cae:	d108      	bne.n	8100cc2 <NRF_EnterMode+0x7e>
        ret = NRF_ResetRegisterBit(NRF_REG_CONFIG, CFG_BIT_PRIM_RX);
 8100cb0:	2100      	movs	r1, #0
 8100cb2:	2000      	movs	r0, #0
 8100cb4:	f7ff ff93 	bl	8100bde <NRF_ResetRegisterBit>
 8100cb8:	4603      	mov	r3, r0
 8100cba:	73fb      	strb	r3, [r7, #15]
        ce_reset();
 8100cbc:	f7ff fe2e 	bl	810091c <ce_reset>
      break;
 8100cc0:	e027      	b.n	8100d12 <NRF_EnterMode+0xce>
      } else if (current_mode == NRF_MODE_TX) {
 8100cc2:	4b1a      	ldr	r3, [pc, #104]	@ (8100d2c <NRF_EnterMode+0xe8>)
 8100cc4:	681b      	ldr	r3, [r3, #0]
 8100cc6:	2b03      	cmp	r3, #3
 8100cc8:	d123      	bne.n	8100d12 <NRF_EnterMode+0xce>
        ce_reset();
 8100cca:	f7ff fe27 	bl	810091c <ce_reset>
      break;
 8100cce:	e020      	b.n	8100d12 <NRF_EnterMode+0xce>
    case NRF_MODE_RX:
      if (current_mode != NRF_MODE_STANDBY1) { //O dispositivo deve estar em standby para passar para o modo Rx
 8100cd0:	4b16      	ldr	r3, [pc, #88]	@ (8100d2c <NRF_EnterMode+0xe8>)
 8100cd2:	681b      	ldr	r3, [r3, #0]
 8100cd4:	2b01      	cmp	r3, #1
 8100cd6:	d001      	beq.n	8100cdc <NRF_EnterMode+0x98>
        return NRF_BAD_TRANSITION;
 8100cd8:	2306      	movs	r3, #6
 8100cda:	e022      	b.n	8100d22 <NRF_EnterMode+0xde>
      }
      ret = NRF_SetRegisterBit(NRF_REG_CONFIG, CFG_BIT_PRIM_RX); // 1 = Rx
 8100cdc:	2100      	movs	r1, #0
 8100cde:	2000      	movs	r0, #0
 8100ce0:	f7ff ff4c 	bl	8100b7c <NRF_SetRegisterBit>
 8100ce4:	4603      	mov	r3, r0
 8100ce6:	73fb      	strb	r3, [r7, #15]
      ce_set();
 8100ce8:	f7ff fe08 	bl	81008fc <ce_set>
      break;
 8100cec:	e012      	b.n	8100d14 <NRF_EnterMode+0xd0>
    case NRF_MODE_TX:
      if (current_mode != NRF_MODE_STANDBY1) {
 8100cee:	4b0f      	ldr	r3, [pc, #60]	@ (8100d2c <NRF_EnterMode+0xe8>)
 8100cf0:	681b      	ldr	r3, [r3, #0]
 8100cf2:	2b01      	cmp	r3, #1
 8100cf4:	d001      	beq.n	8100cfa <NRF_EnterMode+0xb6>
        return NRF_BAD_TRANSITION;
 8100cf6:	2306      	movs	r3, #6
 8100cf8:	e013      	b.n	8100d22 <NRF_EnterMode+0xde>
      }
      ret = NRF_ResetRegisterBit(NRF_REG_CONFIG, CFG_BIT_PRIM_RX); // 0 = Tx
 8100cfa:	2100      	movs	r1, #0
 8100cfc:	2000      	movs	r0, #0
 8100cfe:	f7ff ff6e 	bl	8100bde <NRF_ResetRegisterBit>
 8100d02:	4603      	mov	r3, r0
 8100d04:	73fb      	strb	r3, [r7, #15]
      ce_set();
 8100d06:	f7ff fdf9 	bl	81008fc <ce_set>
      break;
 8100d0a:	e003      	b.n	8100d14 <NRF_EnterMode+0xd0>
    default:
      ret = NRF_ERROR;
 8100d0c:	2304      	movs	r3, #4
 8100d0e:	73fb      	strb	r3, [r7, #15]
      break;
 8100d10:	e000      	b.n	8100d14 <NRF_EnterMode+0xd0>
      break;
 8100d12:	bf00      	nop
  }

  if (ret == NRF_OK) {
 8100d14:	7bfb      	ldrb	r3, [r7, #15]
 8100d16:	2b00      	cmp	r3, #0
 8100d18:	d102      	bne.n	8100d20 <NRF_EnterMode+0xdc>
    current_mode = mode;
 8100d1a:	79fb      	ldrb	r3, [r7, #7]
 8100d1c:	4a03      	ldr	r2, [pc, #12]	@ (8100d2c <NRF_EnterMode+0xe8>)
 8100d1e:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8100d20:	7bfb      	ldrb	r3, [r7, #15]
}
 8100d22:	4618      	mov	r0, r3
 8100d24:	3710      	adds	r7, #16
 8100d26:	46bd      	mov	sp, r7
 8100d28:	bd80      	pop	{r7, pc}
 8100d2a:	bf00      	nop
 8100d2c:	100000e4 	.word	0x100000e4

08100d30 <NRF_Init>:
 * Param - Pino Chip Select
 * Param - Porta Chip Enable
 * Param - Pino Chip Enable
 * Retorno: Status
 *  								*/
NRF_Status NRF_Init(SPI_HandleTypeDef *handle, GPIO_TypeDef *PortCSN, uint16_t PinCSN, GPIO_TypeDef *PortCE, uint16_t PinCE) {
 8100d30:	b580      	push	{r7, lr}
 8100d32:	b084      	sub	sp, #16
 8100d34:	af00      	add	r7, sp, #0
 8100d36:	60f8      	str	r0, [r7, #12]
 8100d38:	60b9      	str	r1, [r7, #8]
 8100d3a:	603b      	str	r3, [r7, #0]
 8100d3c:	4613      	mov	r3, r2
 8100d3e:	80fb      	strh	r3, [r7, #6]
  HSPI = handle;
 8100d40:	4a13      	ldr	r2, [pc, #76]	@ (8100d90 <NRF_Init+0x60>)
 8100d42:	68fb      	ldr	r3, [r7, #12]
 8100d44:	6013      	str	r3, [r2, #0]
  NRF_CSN_Port = PortCSN;
 8100d46:	4a13      	ldr	r2, [pc, #76]	@ (8100d94 <NRF_Init+0x64>)
 8100d48:	68bb      	ldr	r3, [r7, #8]
 8100d4a:	6013      	str	r3, [r2, #0]
  NRF_CSN_Pin = PinCSN;
 8100d4c:	4a12      	ldr	r2, [pc, #72]	@ (8100d98 <NRF_Init+0x68>)
 8100d4e:	88fb      	ldrh	r3, [r7, #6]
 8100d50:	8013      	strh	r3, [r2, #0]
  NRF_CE_Port = PortCE;
 8100d52:	4a12      	ldr	r2, [pc, #72]	@ (8100d9c <NRF_Init+0x6c>)
 8100d54:	683b      	ldr	r3, [r7, #0]
 8100d56:	6013      	str	r3, [r2, #0]
  NRF_CE_Pin = PinCE;
 8100d58:	4a11      	ldr	r2, [pc, #68]	@ (8100da0 <NRF_Init+0x70>)
 8100d5a:	8b3b      	ldrh	r3, [r7, #24]
 8100d5c:	8013      	strh	r3, [r2, #0]

  CPU_Freq = HAL_RCC_GetSysClockFreq();
 8100d5e:	f000 fe4f 	bl	8101a00 <HAL_RCC_GetSysClockFreq>
 8100d62:	4603      	mov	r3, r0
 8100d64:	4a0f      	ldr	r2, [pc, #60]	@ (8100da4 <NRF_Init+0x74>)
 8100d66:	6013      	str	r3, [r2, #0]
  if (CPU_Freq == 0x00) {
 8100d68:	4b0e      	ldr	r3, [pc, #56]	@ (8100da4 <NRF_Init+0x74>)
 8100d6a:	681b      	ldr	r3, [r3, #0]
 8100d6c:	2b00      	cmp	r3, #0
 8100d6e:	d101      	bne.n	8100d74 <NRF_Init+0x44>
    return NRF_ERROR;
 8100d70:	2304      	movs	r3, #4
 8100d72:	e008      	b.n	8100d86 <NRF_Init+0x56>
  }

  // Make sure CSN is pulled high
  csn_set();
 8100d74:	f7ff fda2 	bl	81008bc <csn_set>

  // Takes ~100ms from power on to start up
  HAL_Delay(100);
 8100d78:	2064      	movs	r0, #100	@ 0x64
 8100d7a:	f000 fac1 	bl	8101300 <HAL_Delay>

  return NRF_EnterMode(NRF_MODE_STANDBY1);
 8100d7e:	2001      	movs	r0, #1
 8100d80:	f7ff ff60 	bl	8100c44 <NRF_EnterMode>
 8100d84:	4603      	mov	r3, r0
}
 8100d86:	4618      	mov	r0, r3
 8100d88:	3710      	adds	r7, #16
 8100d8a:	46bd      	mov	sp, r7
 8100d8c:	bd80      	pop	{r7, pc}
 8100d8e:	bf00      	nop
 8100d90:	100000cc 	.word	0x100000cc
 8100d94:	100000d0 	.word	0x100000d0
 8100d98:	100000d4 	.word	0x100000d4
 8100d9c:	100000d8 	.word	0x100000d8
 8100da0:	100000dc 	.word	0x100000dc
 8100da4:	100000e0 	.word	0x100000e0

08100da8 <NRF_Reset>:


//Reseta o NRF  o mantendo em stanby
void NRF_Reset() {
 8100da8:	b580      	push	{r7, lr}
 8100daa:	b084      	sub	sp, #16
 8100dac:	af00      	add	r7, sp, #0
  NRF_EnterMode(NRF_MODE_POWERDOWN);
 8100dae:	2000      	movs	r0, #0
 8100db0:	f7ff ff48 	bl	8100c44 <NRF_EnterMode>
  NRF_EnterMode(NRF_MODE_STANDBY1);
 8100db4:	2001      	movs	r0, #1
 8100db6:	f7ff ff45 	bl	8100c44 <NRF_EnterMode>

  // Flush FIFOs
  NRF_EnterMode(NRF_MODE_TX);
 8100dba:	2003      	movs	r0, #3
 8100dbc:	f7ff ff42 	bl	8100c44 <NRF_EnterMode>
  NRF_SendCommand(NRF_CMD_FLUSH_TX);
 8100dc0:	20e1      	movs	r0, #225	@ 0xe1
 8100dc2:	f7ff fdef 	bl	81009a4 <NRF_SendCommand>
  NRF_EnterMode(NRF_MODE_STANDBY1);
 8100dc6:	2001      	movs	r0, #1
 8100dc8:	f7ff ff3c 	bl	8100c44 <NRF_EnterMode>
  NRF_EnterMode(NRF_MODE_RX);
 8100dcc:	2002      	movs	r0, #2
 8100dce:	f7ff ff39 	bl	8100c44 <NRF_EnterMode>
  NRF_SendCommand(NRF_CMD_FLUSH_RX);
 8100dd2:	20e2      	movs	r0, #226	@ 0xe2
 8100dd4:	f7ff fde6 	bl	81009a4 <NRF_SendCommand>
  NRF_EnterMode(NRF_MODE_STANDBY1);
 8100dd8:	2001      	movs	r0, #1
 8100dda:	f7ff ff33 	bl	8100c44 <NRF_EnterMode>

  // Flush register -> LER DATASHEET!!!!!!!!!!!!!!
  NRF_WriteRegisterByte(NRF_REG_CONFIG,       0x0A);// 00001010
 8100dde:	210a      	movs	r1, #10
 8100de0:	2000      	movs	r0, #0
 8100de2:	f7ff fe85 	bl	8100af0 <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_EN_AA,        0x00);// 00000000 = AutoAcknologment desligado em todos os Pipes
 8100de6:	2100      	movs	r1, #0
 8100de8:	2001      	movs	r0, #1
 8100dea:	f7ff fe81 	bl	8100af0 <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_EN_RXADDR,    0x03);//00000011 -> Pipes 0 e 1 no Rx
 8100dee:	2103      	movs	r1, #3
 8100df0:	2002      	movs	r0, #2
 8100df2:	f7ff fe7d 	bl	8100af0 <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_SETUP_AW,     0x03);//00000011 -> 5 bytes no adresss
 8100df6:	2103      	movs	r1, #3
 8100df8:	2003      	movs	r0, #3
 8100dfa:	f7ff fe79 	bl	8100af0 <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_SETUP_RETR,   0x03);//00000000 -> re-transmit desabilitado
 8100dfe:	2103      	movs	r1, #3
 8100e00:	2004      	movs	r0, #4
 8100e02:	f7ff fe75 	bl	8100af0 <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_RF_CH,        0x02);//00000010 -> Canal 3
 8100e06:	2102      	movs	r1, #2
 8100e08:	2005      	movs	r0, #5
 8100e0a:	f7ff fe71 	bl	8100af0 <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_RF_SETUP,     0x0e);//00001110 -> LNA desligado, 0dBm, 2MBs
 8100e0e:	210e      	movs	r1, #14
 8100e10:	2006      	movs	r0, #6
 8100e12:	f7ff fe6d 	bl	8100af0 <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_STATUS,       0x70); // clear flags
 8100e16:	2170      	movs	r1, #112	@ 0x70
 8100e18:	2007      	movs	r0, #7
 8100e1a:	f7ff fe69 	bl	8100af0 <NRF_WriteRegisterByte>

  uint8_t address[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 8100e1e:	4a2d      	ldr	r2, [pc, #180]	@ (8100ed4 <NRF_Reset+0x12c>)
 8100e20:	f107 0308 	add.w	r3, r7, #8
 8100e24:	e892 0003 	ldmia.w	r2, {r0, r1}
 8100e28:	6018      	str	r0, [r3, #0]
 8100e2a:	3304      	adds	r3, #4
 8100e2c:	7019      	strb	r1, [r3, #0]
  uint8_t address2[5] = {0xC2, 0xC2, 0xC2, 0xC2, 0xC2};
 8100e2e:	4a2a      	ldr	r2, [pc, #168]	@ (8100ed8 <NRF_Reset+0x130>)
 8100e30:	463b      	mov	r3, r7
 8100e32:	e892 0003 	ldmia.w	r2, {r0, r1}
 8100e36:	6018      	str	r0, [r3, #0]
 8100e38:	3304      	adds	r3, #4
 8100e3a:	7019      	strb	r1, [r3, #0]
  NRF_WriteRegister(NRF_REG_RX_ADDR_P0, address, 5); //Adress do pipe 0
 8100e3c:	f107 0308 	add.w	r3, r7, #8
 8100e40:	2205      	movs	r2, #5
 8100e42:	4619      	mov	r1, r3
 8100e44:	200a      	movs	r0, #10
 8100e46:	f7ff fe3d 	bl	8100ac4 <NRF_WriteRegister>
  NRF_WriteRegister(NRF_REG_RX_ADDR_P1, address2, 5); //Adress pipe 1
 8100e4a:	463b      	mov	r3, r7
 8100e4c:	2205      	movs	r2, #5
 8100e4e:	4619      	mov	r1, r3
 8100e50:	200b      	movs	r0, #11
 8100e52:	f7ff fe37 	bl	8100ac4 <NRF_WriteRegister>
  NRF_WriteRegisterByte(NRF_REG_RX_ADDR_P2,   0xC3);
 8100e56:	21c3      	movs	r1, #195	@ 0xc3
 8100e58:	200c      	movs	r0, #12
 8100e5a:	f7ff fe49 	bl	8100af0 <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_RX_ADDR_P3,   0xC4);
 8100e5e:	21c4      	movs	r1, #196	@ 0xc4
 8100e60:	200d      	movs	r0, #13
 8100e62:	f7ff fe45 	bl	8100af0 <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_RX_ADDR_P4,   0xC5);
 8100e66:	21c5      	movs	r1, #197	@ 0xc5
 8100e68:	200e      	movs	r0, #14
 8100e6a:	f7ff fe41 	bl	8100af0 <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_RX_ADDR_P5,   0xC6);
 8100e6e:	21c6      	movs	r1, #198	@ 0xc6
 8100e70:	200f      	movs	r0, #15
 8100e72:	f7ff fe3d 	bl	8100af0 <NRF_WriteRegisterByte>
  NRF_WriteRegister(NRF_REG_TX_ADDR, address, 5);
 8100e76:	f107 0308 	add.w	r3, r7, #8
 8100e7a:	2205      	movs	r2, #5
 8100e7c:	4619      	mov	r1, r3
 8100e7e:	2010      	movs	r0, #16
 8100e80:	f7ff fe20 	bl	8100ac4 <NRF_WriteRegister>
  NRF_WriteRegisterByte(NRF_REG_RX_PW_P0,     0x00);
 8100e84:	2100      	movs	r1, #0
 8100e86:	2011      	movs	r0, #17
 8100e88:	f7ff fe32 	bl	8100af0 <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_RX_PW_P1,     0x00);
 8100e8c:	2100      	movs	r1, #0
 8100e8e:	2012      	movs	r0, #18
 8100e90:	f7ff fe2e 	bl	8100af0 <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_RX_PW_P2,     0x00);
 8100e94:	2100      	movs	r1, #0
 8100e96:	2013      	movs	r0, #19
 8100e98:	f7ff fe2a 	bl	8100af0 <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_RX_PW_P3,     0x00);
 8100e9c:	2100      	movs	r1, #0
 8100e9e:	2014      	movs	r0, #20
 8100ea0:	f7ff fe26 	bl	8100af0 <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_RX_PW_P4,     0x00);
 8100ea4:	2100      	movs	r1, #0
 8100ea6:	2015      	movs	r0, #21
 8100ea8:	f7ff fe22 	bl	8100af0 <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_RX_PW_P5,     0x00);
 8100eac:	2100      	movs	r1, #0
 8100eae:	2016      	movs	r0, #22
 8100eb0:	f7ff fe1e 	bl	8100af0 <NRF_WriteRegisterByte>

  NRF_WriteRegisterByte(NRF_REG_FIFO_STATUS,  0x00);
 8100eb4:	2100      	movs	r1, #0
 8100eb6:	2017      	movs	r0, #23
 8100eb8:	f7ff fe1a 	bl	8100af0 <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_DYNPD,        0x00);
 8100ebc:	2100      	movs	r1, #0
 8100ebe:	201c      	movs	r0, #28
 8100ec0:	f7ff fe16 	bl	8100af0 <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_FEATURE,      0x00);
 8100ec4:	2100      	movs	r1, #0
 8100ec6:	201d      	movs	r0, #29
 8100ec8:	f7ff fe12 	bl	8100af0 <NRF_WriteRegisterByte>
}
 8100ecc:	bf00      	nop
 8100ece:	3710      	adds	r7, #16
 8100ed0:	46bd      	mov	sp, r7
 8100ed2:	bd80      	pop	{r7, pc}
 8100ed4:	08104784 	.word	0x08104784
 8100ed8:	0810478c 	.word	0x0810478c

08100edc <NRF_WritePayload>:

NRF_Status NRF_WritePayload(uint8_t *payload, uint8_t length) {
 8100edc:	b580      	push	{r7, lr}
 8100ede:	b082      	sub	sp, #8
 8100ee0:	af00      	add	r7, sp, #0
 8100ee2:	6078      	str	r0, [r7, #4]
 8100ee4:	460b      	mov	r3, r1
 8100ee6:	70fb      	strb	r3, [r7, #3]
  return NRF_SendWriteCommand(NRF_CMD_W_TX_PAYLOAD, payload, length);
 8100ee8:	78fb      	ldrb	r3, [r7, #3]
 8100eea:	461a      	mov	r2, r3
 8100eec:	6879      	ldr	r1, [r7, #4]
 8100eee:	20a0      	movs	r0, #160	@ 0xa0
 8100ef0:	f7ff fd7c 	bl	81009ec <NRF_SendWriteCommand>
 8100ef4:	4603      	mov	r3, r0
}
 8100ef6:	4618      	mov	r0, r3
 8100ef8:	3708      	adds	r7, #8
 8100efa:	46bd      	mov	sp, r7
 8100efc:	bd80      	pop	{r7, pc}

08100efe <NRF_TransmitAndWait>:
  ce_set();
  wait(10);
  ce_reset();
}

NRF_Status NRF_TransmitAndWait(uint8_t *payload, uint8_t length) {
 8100efe:	b580      	push	{r7, lr}
 8100f00:	b084      	sub	sp, #16
 8100f02:	af00      	add	r7, sp, #0
 8100f04:	6078      	str	r0, [r7, #4]
 8100f06:	460b      	mov	r3, r1
 8100f08:	70fb      	strb	r3, [r7, #3]
  NRF_Status ret = NRF_OK;
 8100f0a:	2300      	movs	r3, #0
 8100f0c:	73fb      	strb	r3, [r7, #15]

  ret = NRF_WritePayload(payload, length);
 8100f0e:	78fb      	ldrb	r3, [r7, #3]
 8100f10:	4619      	mov	r1, r3
 8100f12:	6878      	ldr	r0, [r7, #4]
 8100f14:	f7ff ffe2 	bl	8100edc <NRF_WritePayload>
 8100f18:	4603      	mov	r3, r0
 8100f1a:	73fb      	strb	r3, [r7, #15]
  if (ret != NRF_OK) {
 8100f1c:	7bfb      	ldrb	r3, [r7, #15]
 8100f1e:	2b00      	cmp	r3, #0
 8100f20:	d001      	beq.n	8100f26 <NRF_TransmitAndWait+0x28>

    return ret;
 8100f22:	7bfb      	ldrb	r3, [r7, #15]
 8100f24:	e01f      	b.n	8100f66 <NRF_TransmitAndWait+0x68>
  }

  // Transmit
  ce_set();
 8100f26:	f7ff fce9 	bl	81008fc <ce_set>

  // Wait for status update
  uint8_t status;
  for (;;) {
    status = NRF_ReadStatus();
 8100f2a:	f7ff fe0b 	bl	8100b44 <NRF_ReadStatus>
 8100f2e:	4603      	mov	r3, r0
 8100f30:	73bb      	strb	r3, [r7, #14]
    if (status & (1<<STATUS_BIT_TX_DS)) {
 8100f32:	7bbb      	ldrb	r3, [r7, #14]
 8100f34:	f003 0320 	and.w	r3, r3, #32
 8100f38:	2b00      	cmp	r3, #0
 8100f3a:	d006      	beq.n	8100f4a <NRF_TransmitAndWait+0x4c>
      // Packet transmitted
      ret = NRF_SetRegisterBit(NRF_REG_STATUS, STATUS_BIT_TX_DS); // clear flag
 8100f3c:	2105      	movs	r1, #5
 8100f3e:	2007      	movs	r0, #7
 8100f40:	f7ff fe1c 	bl	8100b7c <NRF_SetRegisterBit>
 8100f44:	4603      	mov	r3, r0
 8100f46:	73fb      	strb	r3, [r7, #15]
      break;
 8100f48:	e00a      	b.n	8100f60 <NRF_TransmitAndWait+0x62>
    } else if (status & (1<<STATUS_BIT_MAX_RT)) {
 8100f4a:	7bbb      	ldrb	r3, [r7, #14]
 8100f4c:	f003 0310 	and.w	r3, r3, #16
 8100f50:	2b00      	cmp	r3, #0
 8100f52:	d0ea      	beq.n	8100f2a <NRF_TransmitAndWait+0x2c>
      // Max retransmits reached
      NRF_SetRegisterBit(NRF_REG_STATUS, STATUS_BIT_MAX_RT); // clear flag
 8100f54:	2104      	movs	r1, #4
 8100f56:	2007      	movs	r0, #7
 8100f58:	f7ff fe10 	bl	8100b7c <NRF_SetRegisterBit>
      ret = NRF_MAX_RT;
 8100f5c:	2305      	movs	r3, #5
 8100f5e:	73fb      	strb	r3, [r7, #15]
      break;
    }
  }
  ce_reset();
 8100f60:	f7ff fcdc 	bl	810091c <ce_reset>

  return ret;
 8100f64:	7bfb      	ldrb	r3, [r7, #15]
}
 8100f66:	4618      	mov	r0, r3
 8100f68:	3710      	adds	r7, #16
 8100f6a:	46bd      	mov	sp, r7
 8100f6c:	bd80      	pop	{r7, pc}
	...

08100f70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8100f70:	b480      	push	{r7}
 8100f72:	b083      	sub	sp, #12
 8100f74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8100f76:	4b0a      	ldr	r3, [pc, #40]	@ (8100fa0 <HAL_MspInit+0x30>)
 8100f78:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8100f7c:	4a08      	ldr	r2, [pc, #32]	@ (8100fa0 <HAL_MspInit+0x30>)
 8100f7e:	f043 0302 	orr.w	r3, r3, #2
 8100f82:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8100f86:	4b06      	ldr	r3, [pc, #24]	@ (8100fa0 <HAL_MspInit+0x30>)
 8100f88:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8100f8c:	f003 0302 	and.w	r3, r3, #2
 8100f90:	607b      	str	r3, [r7, #4]
 8100f92:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8100f94:	bf00      	nop
 8100f96:	370c      	adds	r7, #12
 8100f98:	46bd      	mov	sp, r7
 8100f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100f9e:	4770      	bx	lr
 8100fa0:	58024400 	.word	0x58024400

08100fa4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8100fa4:	b580      	push	{r7, lr}
 8100fa6:	b0bc      	sub	sp, #240	@ 0xf0
 8100fa8:	af00      	add	r7, sp, #0
 8100faa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8100fac:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8100fb0:	2200      	movs	r2, #0
 8100fb2:	601a      	str	r2, [r3, #0]
 8100fb4:	605a      	str	r2, [r3, #4]
 8100fb6:	609a      	str	r2, [r3, #8]
 8100fb8:	60da      	str	r2, [r3, #12]
 8100fba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8100fbc:	f107 0318 	add.w	r3, r7, #24
 8100fc0:	22c0      	movs	r2, #192	@ 0xc0
 8100fc2:	2100      	movs	r1, #0
 8100fc4:	4618      	mov	r0, r3
 8100fc6:	f003 fba4 	bl	8104712 <memset>
  if(hspi->Instance==SPI1)
 8100fca:	687b      	ldr	r3, [r7, #4]
 8100fcc:	681b      	ldr	r3, [r3, #0]
 8100fce:	4a41      	ldr	r2, [pc, #260]	@ (81010d4 <HAL_SPI_MspInit+0x130>)
 8100fd0:	4293      	cmp	r3, r2
 8100fd2:	d17a      	bne.n	81010ca <HAL_SPI_MspInit+0x126>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8100fd4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8100fd8:	f04f 0300 	mov.w	r3, #0
 8100fdc:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2M = 4;
 8100fe0:	2304      	movs	r3, #4
 8100fe2:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2N = 9;
 8100fe4:	2309      	movs	r3, #9
 8100fe6:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8100fe8:	2302      	movs	r3, #2
 8100fea:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8100fec:	2302      	movs	r3, #2
 8100fee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8100ff0:	2302      	movs	r3, #2
 8100ff2:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8100ff4:	23c0      	movs	r3, #192	@ 0xc0
 8100ff6:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8100ff8:	2320      	movs	r3, #32
 8100ffa:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.PLL2.PLL2FRACN = 3072.0;
 8100ffc:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8101000:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 8101002:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8101006:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8101008:	f107 0318 	add.w	r3, r7, #24
 810100c:	4618      	mov	r0, r3
 810100e:	f000 fe71 	bl	8101cf4 <HAL_RCCEx_PeriphCLKConfig>
 8101012:	4603      	mov	r3, r0
 8101014:	2b00      	cmp	r3, #0
 8101016:	d001      	beq.n	810101c <HAL_SPI_MspInit+0x78>
    {
      Error_Handler();
 8101018:	f7ff fc4a 	bl	81008b0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 810101c:	4b2e      	ldr	r3, [pc, #184]	@ (81010d8 <HAL_SPI_MspInit+0x134>)
 810101e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8101022:	4a2d      	ldr	r2, [pc, #180]	@ (81010d8 <HAL_SPI_MspInit+0x134>)
 8101024:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8101028:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 810102c:	4b2a      	ldr	r3, [pc, #168]	@ (81010d8 <HAL_SPI_MspInit+0x134>)
 810102e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8101032:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8101036:	617b      	str	r3, [r7, #20]
 8101038:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 810103a:	4b27      	ldr	r3, [pc, #156]	@ (81010d8 <HAL_SPI_MspInit+0x134>)
 810103c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101040:	4a25      	ldr	r2, [pc, #148]	@ (81010d8 <HAL_SPI_MspInit+0x134>)
 8101042:	f043 0301 	orr.w	r3, r3, #1
 8101046:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810104a:	4b23      	ldr	r3, [pc, #140]	@ (81010d8 <HAL_SPI_MspInit+0x134>)
 810104c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101050:	f003 0301 	and.w	r3, r3, #1
 8101054:	613b      	str	r3, [r7, #16]
 8101056:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8101058:	4b1f      	ldr	r3, [pc, #124]	@ (81010d8 <HAL_SPI_MspInit+0x134>)
 810105a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810105e:	4a1e      	ldr	r2, [pc, #120]	@ (81010d8 <HAL_SPI_MspInit+0x134>)
 8101060:	f043 0308 	orr.w	r3, r3, #8
 8101064:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8101068:	4b1b      	ldr	r3, [pc, #108]	@ (81010d8 <HAL_SPI_MspInit+0x134>)
 810106a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810106e:	f003 0308 	and.w	r3, r3, #8
 8101072:	60fb      	str	r3, [r7, #12]
 8101074:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PD7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8101076:	2360      	movs	r3, #96	@ 0x60
 8101078:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810107c:	2302      	movs	r3, #2
 810107e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101082:	2300      	movs	r3, #0
 8101084:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101088:	2300      	movs	r3, #0
 810108a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 810108e:	2305      	movs	r3, #5
 8101090:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8101094:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8101098:	4619      	mov	r1, r3
 810109a:	4810      	ldr	r0, [pc, #64]	@ (81010dc <HAL_SPI_MspInit+0x138>)
 810109c:	f000 fa4c 	bl	8101538 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 81010a0:	2380      	movs	r3, #128	@ 0x80
 81010a2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81010a6:	2302      	movs	r3, #2
 81010a8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81010ac:	2300      	movs	r3, #0
 81010ae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81010b2:	2300      	movs	r3, #0
 81010b4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 81010b8:	2305      	movs	r3, #5
 81010ba:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 81010be:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 81010c2:	4619      	mov	r1, r3
 81010c4:	4806      	ldr	r0, [pc, #24]	@ (81010e0 <HAL_SPI_MspInit+0x13c>)
 81010c6:	f000 fa37 	bl	8101538 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 81010ca:	bf00      	nop
 81010cc:	37f0      	adds	r7, #240	@ 0xf0
 81010ce:	46bd      	mov	sp, r7
 81010d0:	bd80      	pop	{r7, pc}
 81010d2:	bf00      	nop
 81010d4:	40013000 	.word	0x40013000
 81010d8:	58024400 	.word	0x58024400
 81010dc:	58020000 	.word	0x58020000
 81010e0:	58020c00 	.word	0x58020c00

081010e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 81010e4:	b480      	push	{r7}
 81010e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 81010e8:	bf00      	nop
 81010ea:	e7fd      	b.n	81010e8 <NMI_Handler+0x4>

081010ec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 81010ec:	b480      	push	{r7}
 81010ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 81010f0:	bf00      	nop
 81010f2:	e7fd      	b.n	81010f0 <HardFault_Handler+0x4>

081010f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 81010f4:	b480      	push	{r7}
 81010f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 81010f8:	bf00      	nop
 81010fa:	e7fd      	b.n	81010f8 <MemManage_Handler+0x4>

081010fc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 81010fc:	b480      	push	{r7}
 81010fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8101100:	bf00      	nop
 8101102:	e7fd      	b.n	8101100 <BusFault_Handler+0x4>

08101104 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8101104:	b480      	push	{r7}
 8101106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8101108:	bf00      	nop
 810110a:	e7fd      	b.n	8101108 <UsageFault_Handler+0x4>

0810110c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 810110c:	b480      	push	{r7}
 810110e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8101110:	bf00      	nop
 8101112:	46bd      	mov	sp, r7
 8101114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101118:	4770      	bx	lr

0810111a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 810111a:	b480      	push	{r7}
 810111c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 810111e:	bf00      	nop
 8101120:	46bd      	mov	sp, r7
 8101122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101126:	4770      	bx	lr

08101128 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8101128:	b480      	push	{r7}
 810112a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 810112c:	bf00      	nop
 810112e:	46bd      	mov	sp, r7
 8101130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101134:	4770      	bx	lr

08101136 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8101136:	b580      	push	{r7, lr}
 8101138:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 810113a:	f000 f8c1 	bl	81012c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 810113e:	bf00      	nop
 8101140:	bd80      	pop	{r7, pc}
	...

08101144 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8101144:	f8df d034 	ldr.w	sp, [pc, #52]	@ 810117c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8101148:	f7ff fa3e 	bl	81005c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 810114c:	480c      	ldr	r0, [pc, #48]	@ (8101180 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 810114e:	490d      	ldr	r1, [pc, #52]	@ (8101184 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8101150:	4a0d      	ldr	r2, [pc, #52]	@ (8101188 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8101152:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8101154:	e002      	b.n	810115c <LoopCopyDataInit>

08101156 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8101156:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8101158:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 810115a:	3304      	adds	r3, #4

0810115c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 810115c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 810115e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8101160:	d3f9      	bcc.n	8101156 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8101162:	4a0a      	ldr	r2, [pc, #40]	@ (810118c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8101164:	4c0a      	ldr	r4, [pc, #40]	@ (8101190 <LoopFillZerobss+0x22>)
  movs r3, #0
 8101166:	2300      	movs	r3, #0
  b LoopFillZerobss
 8101168:	e001      	b.n	810116e <LoopFillZerobss>

0810116a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 810116a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 810116c:	3204      	adds	r2, #4

0810116e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 810116e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8101170:	d3fb      	bcc.n	810116a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8101172:	f003 fad7 	bl	8104724 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8101176:	f7ff fa61 	bl	810063c <main>
  bx  lr
 810117a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 810117c:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 8101180:	10000000 	.word	0x10000000
  ldr r1, =_edata
 8101184:	10000028 	.word	0x10000028
  ldr r2, =_sidata
 8101188:	081047b4 	.word	0x081047b4
  ldr r2, =_sbss
 810118c:	10000028 	.word	0x10000028
  ldr r4, =_ebss
 8101190:	100000ec 	.word	0x100000ec

08101194 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8101194:	e7fe      	b.n	8101194 <ADC3_IRQHandler>
	...

08101198 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8101198:	b580      	push	{r7, lr}
 810119a:	b082      	sub	sp, #8
 810119c:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 810119e:	4b28      	ldr	r3, [pc, #160]	@ (8101240 <HAL_Init+0xa8>)
 81011a0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 81011a4:	4a26      	ldr	r2, [pc, #152]	@ (8101240 <HAL_Init+0xa8>)
 81011a6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 81011aa:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 81011ae:	4b24      	ldr	r3, [pc, #144]	@ (8101240 <HAL_Init+0xa8>)
 81011b0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 81011b4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 81011b8:	603b      	str	r3, [r7, #0]
 81011ba:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 81011bc:	4b21      	ldr	r3, [pc, #132]	@ (8101244 <HAL_Init+0xac>)
 81011be:	681b      	ldr	r3, [r3, #0]
 81011c0:	f423 237f 	bic.w	r3, r3, #1044480	@ 0xff000
 81011c4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 81011c8:	4a1e      	ldr	r2, [pc, #120]	@ (8101244 <HAL_Init+0xac>)
 81011ca:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 81011ce:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 81011d0:	4b1c      	ldr	r3, [pc, #112]	@ (8101244 <HAL_Init+0xac>)
 81011d2:	681b      	ldr	r3, [r3, #0]
 81011d4:	4a1b      	ldr	r2, [pc, #108]	@ (8101244 <HAL_Init+0xac>)
 81011d6:	f043 0301 	orr.w	r3, r3, #1
 81011da:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 81011dc:	2003      	movs	r0, #3
 81011de:	f000 f965 	bl	81014ac <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 81011e2:	f000 fc0d 	bl	8101a00 <HAL_RCC_GetSysClockFreq>
 81011e6:	4602      	mov	r2, r0
 81011e8:	4b15      	ldr	r3, [pc, #84]	@ (8101240 <HAL_Init+0xa8>)
 81011ea:	699b      	ldr	r3, [r3, #24]
 81011ec:	0a1b      	lsrs	r3, r3, #8
 81011ee:	f003 030f 	and.w	r3, r3, #15
 81011f2:	4915      	ldr	r1, [pc, #84]	@ (8101248 <HAL_Init+0xb0>)
 81011f4:	5ccb      	ldrb	r3, [r1, r3]
 81011f6:	f003 031f 	and.w	r3, r3, #31
 81011fa:	fa22 f303 	lsr.w	r3, r2, r3
 81011fe:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8101200:	4b0f      	ldr	r3, [pc, #60]	@ (8101240 <HAL_Init+0xa8>)
 8101202:	699b      	ldr	r3, [r3, #24]
 8101204:	f003 030f 	and.w	r3, r3, #15
 8101208:	4a0f      	ldr	r2, [pc, #60]	@ (8101248 <HAL_Init+0xb0>)
 810120a:	5cd3      	ldrb	r3, [r2, r3]
 810120c:	f003 031f 	and.w	r3, r3, #31
 8101210:	687a      	ldr	r2, [r7, #4]
 8101212:	fa22 f303 	lsr.w	r3, r2, r3
 8101216:	4a0d      	ldr	r2, [pc, #52]	@ (810124c <HAL_Init+0xb4>)
 8101218:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 810121a:	4b0c      	ldr	r3, [pc, #48]	@ (810124c <HAL_Init+0xb4>)
 810121c:	681b      	ldr	r3, [r3, #0]
 810121e:	4a0c      	ldr	r2, [pc, #48]	@ (8101250 <HAL_Init+0xb8>)
 8101220:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8101222:	2000      	movs	r0, #0
 8101224:	f000 f816 	bl	8101254 <HAL_InitTick>
 8101228:	4603      	mov	r3, r0
 810122a:	2b00      	cmp	r3, #0
 810122c:	d001      	beq.n	8101232 <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 810122e:	2301      	movs	r3, #1
 8101230:	e002      	b.n	8101238 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8101232:	f7ff fe9d 	bl	8100f70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8101236:	2300      	movs	r3, #0
}
 8101238:	4618      	mov	r0, r3
 810123a:	3708      	adds	r7, #8
 810123c:	46bd      	mov	sp, r7
 810123e:	bd80      	pop	{r7, pc}
 8101240:	58024400 	.word	0x58024400
 8101244:	40024400 	.word	0x40024400
 8101248:	08104794 	.word	0x08104794
 810124c:	10000004 	.word	0x10000004
 8101250:	10000000 	.word	0x10000000

08101254 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8101254:	b580      	push	{r7, lr}
 8101256:	b082      	sub	sp, #8
 8101258:	af00      	add	r7, sp, #0
 810125a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 810125c:	4b15      	ldr	r3, [pc, #84]	@ (81012b4 <HAL_InitTick+0x60>)
 810125e:	781b      	ldrb	r3, [r3, #0]
 8101260:	2b00      	cmp	r3, #0
 8101262:	d101      	bne.n	8101268 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8101264:	2301      	movs	r3, #1
 8101266:	e021      	b.n	81012ac <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8101268:	4b13      	ldr	r3, [pc, #76]	@ (81012b8 <HAL_InitTick+0x64>)
 810126a:	681a      	ldr	r2, [r3, #0]
 810126c:	4b11      	ldr	r3, [pc, #68]	@ (81012b4 <HAL_InitTick+0x60>)
 810126e:	781b      	ldrb	r3, [r3, #0]
 8101270:	4619      	mov	r1, r3
 8101272:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8101276:	fbb3 f3f1 	udiv	r3, r3, r1
 810127a:	fbb2 f3f3 	udiv	r3, r2, r3
 810127e:	4618      	mov	r0, r3
 8101280:	f000 f939 	bl	81014f6 <HAL_SYSTICK_Config>
 8101284:	4603      	mov	r3, r0
 8101286:	2b00      	cmp	r3, #0
 8101288:	d001      	beq.n	810128e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 810128a:	2301      	movs	r3, #1
 810128c:	e00e      	b.n	81012ac <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 810128e:	687b      	ldr	r3, [r7, #4]
 8101290:	2b0f      	cmp	r3, #15
 8101292:	d80a      	bhi.n	81012aa <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8101294:	2200      	movs	r2, #0
 8101296:	6879      	ldr	r1, [r7, #4]
 8101298:	f04f 30ff 	mov.w	r0, #4294967295
 810129c:	f000 f911 	bl	81014c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 81012a0:	4a06      	ldr	r2, [pc, #24]	@ (81012bc <HAL_InitTick+0x68>)
 81012a2:	687b      	ldr	r3, [r7, #4]
 81012a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 81012a6:	2300      	movs	r3, #0
 81012a8:	e000      	b.n	81012ac <HAL_InitTick+0x58>
    return HAL_ERROR;
 81012aa:	2301      	movs	r3, #1
}
 81012ac:	4618      	mov	r0, r3
 81012ae:	3708      	adds	r7, #8
 81012b0:	46bd      	mov	sp, r7
 81012b2:	bd80      	pop	{r7, pc}
 81012b4:	10000024 	.word	0x10000024
 81012b8:	10000000 	.word	0x10000000
 81012bc:	10000020 	.word	0x10000020

081012c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 81012c0:	b480      	push	{r7}
 81012c2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 81012c4:	4b06      	ldr	r3, [pc, #24]	@ (81012e0 <HAL_IncTick+0x20>)
 81012c6:	781b      	ldrb	r3, [r3, #0]
 81012c8:	461a      	mov	r2, r3
 81012ca:	4b06      	ldr	r3, [pc, #24]	@ (81012e4 <HAL_IncTick+0x24>)
 81012cc:	681b      	ldr	r3, [r3, #0]
 81012ce:	4413      	add	r3, r2
 81012d0:	4a04      	ldr	r2, [pc, #16]	@ (81012e4 <HAL_IncTick+0x24>)
 81012d2:	6013      	str	r3, [r2, #0]
}
 81012d4:	bf00      	nop
 81012d6:	46bd      	mov	sp, r7
 81012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81012dc:	4770      	bx	lr
 81012de:	bf00      	nop
 81012e0:	10000024 	.word	0x10000024
 81012e4:	100000e8 	.word	0x100000e8

081012e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 81012e8:	b480      	push	{r7}
 81012ea:	af00      	add	r7, sp, #0
  return uwTick;
 81012ec:	4b03      	ldr	r3, [pc, #12]	@ (81012fc <HAL_GetTick+0x14>)
 81012ee:	681b      	ldr	r3, [r3, #0]
}
 81012f0:	4618      	mov	r0, r3
 81012f2:	46bd      	mov	sp, r7
 81012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81012f8:	4770      	bx	lr
 81012fa:	bf00      	nop
 81012fc:	100000e8 	.word	0x100000e8

08101300 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8101300:	b580      	push	{r7, lr}
 8101302:	b084      	sub	sp, #16
 8101304:	af00      	add	r7, sp, #0
 8101306:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8101308:	f7ff ffee 	bl	81012e8 <HAL_GetTick>
 810130c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 810130e:	687b      	ldr	r3, [r7, #4]
 8101310:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8101312:	68fb      	ldr	r3, [r7, #12]
 8101314:	f1b3 3fff 	cmp.w	r3, #4294967295
 8101318:	d005      	beq.n	8101326 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 810131a:	4b0a      	ldr	r3, [pc, #40]	@ (8101344 <HAL_Delay+0x44>)
 810131c:	781b      	ldrb	r3, [r3, #0]
 810131e:	461a      	mov	r2, r3
 8101320:	68fb      	ldr	r3, [r7, #12]
 8101322:	4413      	add	r3, r2
 8101324:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8101326:	bf00      	nop
 8101328:	f7ff ffde 	bl	81012e8 <HAL_GetTick>
 810132c:	4602      	mov	r2, r0
 810132e:	68bb      	ldr	r3, [r7, #8]
 8101330:	1ad3      	subs	r3, r2, r3
 8101332:	68fa      	ldr	r2, [r7, #12]
 8101334:	429a      	cmp	r2, r3
 8101336:	d8f7      	bhi.n	8101328 <HAL_Delay+0x28>
  {
  }
}
 8101338:	bf00      	nop
 810133a:	bf00      	nop
 810133c:	3710      	adds	r7, #16
 810133e:	46bd      	mov	sp, r7
 8101340:	bd80      	pop	{r7, pc}
 8101342:	bf00      	nop
 8101344:	10000024 	.word	0x10000024

08101348 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8101348:	b480      	push	{r7}
 810134a:	b085      	sub	sp, #20
 810134c:	af00      	add	r7, sp, #0
 810134e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8101350:	687b      	ldr	r3, [r7, #4]
 8101352:	f003 0307 	and.w	r3, r3, #7
 8101356:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8101358:	4b0c      	ldr	r3, [pc, #48]	@ (810138c <__NVIC_SetPriorityGrouping+0x44>)
 810135a:	68db      	ldr	r3, [r3, #12]
 810135c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 810135e:	68ba      	ldr	r2, [r7, #8]
 8101360:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8101364:	4013      	ands	r3, r2
 8101366:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8101368:	68fb      	ldr	r3, [r7, #12]
 810136a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 810136c:	68bb      	ldr	r3, [r7, #8]
 810136e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8101370:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8101374:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8101378:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 810137a:	4a04      	ldr	r2, [pc, #16]	@ (810138c <__NVIC_SetPriorityGrouping+0x44>)
 810137c:	68bb      	ldr	r3, [r7, #8]
 810137e:	60d3      	str	r3, [r2, #12]
}
 8101380:	bf00      	nop
 8101382:	3714      	adds	r7, #20
 8101384:	46bd      	mov	sp, r7
 8101386:	f85d 7b04 	ldr.w	r7, [sp], #4
 810138a:	4770      	bx	lr
 810138c:	e000ed00 	.word	0xe000ed00

08101390 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8101390:	b480      	push	{r7}
 8101392:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8101394:	4b04      	ldr	r3, [pc, #16]	@ (81013a8 <__NVIC_GetPriorityGrouping+0x18>)
 8101396:	68db      	ldr	r3, [r3, #12]
 8101398:	0a1b      	lsrs	r3, r3, #8
 810139a:	f003 0307 	and.w	r3, r3, #7
}
 810139e:	4618      	mov	r0, r3
 81013a0:	46bd      	mov	sp, r7
 81013a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81013a6:	4770      	bx	lr
 81013a8:	e000ed00 	.word	0xe000ed00

081013ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 81013ac:	b480      	push	{r7}
 81013ae:	b083      	sub	sp, #12
 81013b0:	af00      	add	r7, sp, #0
 81013b2:	4603      	mov	r3, r0
 81013b4:	6039      	str	r1, [r7, #0]
 81013b6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 81013b8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81013bc:	2b00      	cmp	r3, #0
 81013be:	db0a      	blt.n	81013d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 81013c0:	683b      	ldr	r3, [r7, #0]
 81013c2:	b2da      	uxtb	r2, r3
 81013c4:	490c      	ldr	r1, [pc, #48]	@ (81013f8 <__NVIC_SetPriority+0x4c>)
 81013c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81013ca:	0112      	lsls	r2, r2, #4
 81013cc:	b2d2      	uxtb	r2, r2
 81013ce:	440b      	add	r3, r1
 81013d0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 81013d4:	e00a      	b.n	81013ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 81013d6:	683b      	ldr	r3, [r7, #0]
 81013d8:	b2da      	uxtb	r2, r3
 81013da:	4908      	ldr	r1, [pc, #32]	@ (81013fc <__NVIC_SetPriority+0x50>)
 81013dc:	88fb      	ldrh	r3, [r7, #6]
 81013de:	f003 030f 	and.w	r3, r3, #15
 81013e2:	3b04      	subs	r3, #4
 81013e4:	0112      	lsls	r2, r2, #4
 81013e6:	b2d2      	uxtb	r2, r2
 81013e8:	440b      	add	r3, r1
 81013ea:	761a      	strb	r2, [r3, #24]
}
 81013ec:	bf00      	nop
 81013ee:	370c      	adds	r7, #12
 81013f0:	46bd      	mov	sp, r7
 81013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81013f6:	4770      	bx	lr
 81013f8:	e000e100 	.word	0xe000e100
 81013fc:	e000ed00 	.word	0xe000ed00

08101400 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8101400:	b480      	push	{r7}
 8101402:	b089      	sub	sp, #36	@ 0x24
 8101404:	af00      	add	r7, sp, #0
 8101406:	60f8      	str	r0, [r7, #12]
 8101408:	60b9      	str	r1, [r7, #8]
 810140a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 810140c:	68fb      	ldr	r3, [r7, #12]
 810140e:	f003 0307 	and.w	r3, r3, #7
 8101412:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8101414:	69fb      	ldr	r3, [r7, #28]
 8101416:	f1c3 0307 	rsb	r3, r3, #7
 810141a:	2b04      	cmp	r3, #4
 810141c:	bf28      	it	cs
 810141e:	2304      	movcs	r3, #4
 8101420:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8101422:	69fb      	ldr	r3, [r7, #28]
 8101424:	3304      	adds	r3, #4
 8101426:	2b06      	cmp	r3, #6
 8101428:	d902      	bls.n	8101430 <NVIC_EncodePriority+0x30>
 810142a:	69fb      	ldr	r3, [r7, #28]
 810142c:	3b03      	subs	r3, #3
 810142e:	e000      	b.n	8101432 <NVIC_EncodePriority+0x32>
 8101430:	2300      	movs	r3, #0
 8101432:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8101434:	f04f 32ff 	mov.w	r2, #4294967295
 8101438:	69bb      	ldr	r3, [r7, #24]
 810143a:	fa02 f303 	lsl.w	r3, r2, r3
 810143e:	43da      	mvns	r2, r3
 8101440:	68bb      	ldr	r3, [r7, #8]
 8101442:	401a      	ands	r2, r3
 8101444:	697b      	ldr	r3, [r7, #20]
 8101446:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8101448:	f04f 31ff 	mov.w	r1, #4294967295
 810144c:	697b      	ldr	r3, [r7, #20]
 810144e:	fa01 f303 	lsl.w	r3, r1, r3
 8101452:	43d9      	mvns	r1, r3
 8101454:	687b      	ldr	r3, [r7, #4]
 8101456:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8101458:	4313      	orrs	r3, r2
         );
}
 810145a:	4618      	mov	r0, r3
 810145c:	3724      	adds	r7, #36	@ 0x24
 810145e:	46bd      	mov	sp, r7
 8101460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101464:	4770      	bx	lr
	...

08101468 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8101468:	b580      	push	{r7, lr}
 810146a:	b082      	sub	sp, #8
 810146c:	af00      	add	r7, sp, #0
 810146e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8101470:	687b      	ldr	r3, [r7, #4]
 8101472:	3b01      	subs	r3, #1
 8101474:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8101478:	d301      	bcc.n	810147e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 810147a:	2301      	movs	r3, #1
 810147c:	e00f      	b.n	810149e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 810147e:	4a0a      	ldr	r2, [pc, #40]	@ (81014a8 <SysTick_Config+0x40>)
 8101480:	687b      	ldr	r3, [r7, #4]
 8101482:	3b01      	subs	r3, #1
 8101484:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8101486:	210f      	movs	r1, #15
 8101488:	f04f 30ff 	mov.w	r0, #4294967295
 810148c:	f7ff ff8e 	bl	81013ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8101490:	4b05      	ldr	r3, [pc, #20]	@ (81014a8 <SysTick_Config+0x40>)
 8101492:	2200      	movs	r2, #0
 8101494:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8101496:	4b04      	ldr	r3, [pc, #16]	@ (81014a8 <SysTick_Config+0x40>)
 8101498:	2207      	movs	r2, #7
 810149a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 810149c:	2300      	movs	r3, #0
}
 810149e:	4618      	mov	r0, r3
 81014a0:	3708      	adds	r7, #8
 81014a2:	46bd      	mov	sp, r7
 81014a4:	bd80      	pop	{r7, pc}
 81014a6:	bf00      	nop
 81014a8:	e000e010 	.word	0xe000e010

081014ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 81014ac:	b580      	push	{r7, lr}
 81014ae:	b082      	sub	sp, #8
 81014b0:	af00      	add	r7, sp, #0
 81014b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 81014b4:	6878      	ldr	r0, [r7, #4]
 81014b6:	f7ff ff47 	bl	8101348 <__NVIC_SetPriorityGrouping>
}
 81014ba:	bf00      	nop
 81014bc:	3708      	adds	r7, #8
 81014be:	46bd      	mov	sp, r7
 81014c0:	bd80      	pop	{r7, pc}

081014c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 81014c2:	b580      	push	{r7, lr}
 81014c4:	b086      	sub	sp, #24
 81014c6:	af00      	add	r7, sp, #0
 81014c8:	4603      	mov	r3, r0
 81014ca:	60b9      	str	r1, [r7, #8]
 81014cc:	607a      	str	r2, [r7, #4]
 81014ce:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 81014d0:	f7ff ff5e 	bl	8101390 <__NVIC_GetPriorityGrouping>
 81014d4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 81014d6:	687a      	ldr	r2, [r7, #4]
 81014d8:	68b9      	ldr	r1, [r7, #8]
 81014da:	6978      	ldr	r0, [r7, #20]
 81014dc:	f7ff ff90 	bl	8101400 <NVIC_EncodePriority>
 81014e0:	4602      	mov	r2, r0
 81014e2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 81014e6:	4611      	mov	r1, r2
 81014e8:	4618      	mov	r0, r3
 81014ea:	f7ff ff5f 	bl	81013ac <__NVIC_SetPriority>
}
 81014ee:	bf00      	nop
 81014f0:	3718      	adds	r7, #24
 81014f2:	46bd      	mov	sp, r7
 81014f4:	bd80      	pop	{r7, pc}

081014f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 81014f6:	b580      	push	{r7, lr}
 81014f8:	b082      	sub	sp, #8
 81014fa:	af00      	add	r7, sp, #0
 81014fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 81014fe:	6878      	ldr	r0, [r7, #4]
 8101500:	f7ff ffb2 	bl	8101468 <SysTick_Config>
 8101504:	4603      	mov	r3, r0
}
 8101506:	4618      	mov	r0, r3
 8101508:	3708      	adds	r7, #8
 810150a:	46bd      	mov	sp, r7
 810150c:	bd80      	pop	{r7, pc}
	...

08101510 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8101510:	b480      	push	{r7}
 8101512:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8101514:	4b07      	ldr	r3, [pc, #28]	@ (8101534 <HAL_GetCurrentCPUID+0x24>)
 8101516:	681b      	ldr	r3, [r3, #0]
 8101518:	091b      	lsrs	r3, r3, #4
 810151a:	f003 030f 	and.w	r3, r3, #15
 810151e:	2b07      	cmp	r3, #7
 8101520:	d101      	bne.n	8101526 <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 8101522:	2303      	movs	r3, #3
 8101524:	e000      	b.n	8101528 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 8101526:	2301      	movs	r3, #1
  }
}
 8101528:	4618      	mov	r0, r3
 810152a:	46bd      	mov	sp, r7
 810152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101530:	4770      	bx	lr
 8101532:	bf00      	nop
 8101534:	e000ed00 	.word	0xe000ed00

08101538 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8101538:	b480      	push	{r7}
 810153a:	b089      	sub	sp, #36	@ 0x24
 810153c:	af00      	add	r7, sp, #0
 810153e:	6078      	str	r0, [r7, #4]
 8101540:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8101542:	2300      	movs	r3, #0
 8101544:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 8101546:	4b89      	ldr	r3, [pc, #548]	@ (810176c <HAL_GPIO_Init+0x234>)
 8101548:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 810154a:	e194      	b.n	8101876 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 810154c:	683b      	ldr	r3, [r7, #0]
 810154e:	681a      	ldr	r2, [r3, #0]
 8101550:	2101      	movs	r1, #1
 8101552:	69fb      	ldr	r3, [r7, #28]
 8101554:	fa01 f303 	lsl.w	r3, r1, r3
 8101558:	4013      	ands	r3, r2
 810155a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 810155c:	693b      	ldr	r3, [r7, #16]
 810155e:	2b00      	cmp	r3, #0
 8101560:	f000 8186 	beq.w	8101870 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8101564:	683b      	ldr	r3, [r7, #0]
 8101566:	685b      	ldr	r3, [r3, #4]
 8101568:	f003 0303 	and.w	r3, r3, #3
 810156c:	2b01      	cmp	r3, #1
 810156e:	d005      	beq.n	810157c <HAL_GPIO_Init+0x44>
 8101570:	683b      	ldr	r3, [r7, #0]
 8101572:	685b      	ldr	r3, [r3, #4]
 8101574:	f003 0303 	and.w	r3, r3, #3
 8101578:	2b02      	cmp	r3, #2
 810157a:	d130      	bne.n	81015de <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 810157c:	687b      	ldr	r3, [r7, #4]
 810157e:	689b      	ldr	r3, [r3, #8]
 8101580:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8101582:	69fb      	ldr	r3, [r7, #28]
 8101584:	005b      	lsls	r3, r3, #1
 8101586:	2203      	movs	r2, #3
 8101588:	fa02 f303 	lsl.w	r3, r2, r3
 810158c:	43db      	mvns	r3, r3
 810158e:	69ba      	ldr	r2, [r7, #24]
 8101590:	4013      	ands	r3, r2
 8101592:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8101594:	683b      	ldr	r3, [r7, #0]
 8101596:	68da      	ldr	r2, [r3, #12]
 8101598:	69fb      	ldr	r3, [r7, #28]
 810159a:	005b      	lsls	r3, r3, #1
 810159c:	fa02 f303 	lsl.w	r3, r2, r3
 81015a0:	69ba      	ldr	r2, [r7, #24]
 81015a2:	4313      	orrs	r3, r2
 81015a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 81015a6:	687b      	ldr	r3, [r7, #4]
 81015a8:	69ba      	ldr	r2, [r7, #24]
 81015aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 81015ac:	687b      	ldr	r3, [r7, #4]
 81015ae:	685b      	ldr	r3, [r3, #4]
 81015b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 81015b2:	2201      	movs	r2, #1
 81015b4:	69fb      	ldr	r3, [r7, #28]
 81015b6:	fa02 f303 	lsl.w	r3, r2, r3
 81015ba:	43db      	mvns	r3, r3
 81015bc:	69ba      	ldr	r2, [r7, #24]
 81015be:	4013      	ands	r3, r2
 81015c0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 81015c2:	683b      	ldr	r3, [r7, #0]
 81015c4:	685b      	ldr	r3, [r3, #4]
 81015c6:	091b      	lsrs	r3, r3, #4
 81015c8:	f003 0201 	and.w	r2, r3, #1
 81015cc:	69fb      	ldr	r3, [r7, #28]
 81015ce:	fa02 f303 	lsl.w	r3, r2, r3
 81015d2:	69ba      	ldr	r2, [r7, #24]
 81015d4:	4313      	orrs	r3, r2
 81015d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 81015d8:	687b      	ldr	r3, [r7, #4]
 81015da:	69ba      	ldr	r2, [r7, #24]
 81015dc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 81015de:	683b      	ldr	r3, [r7, #0]
 81015e0:	685b      	ldr	r3, [r3, #4]
 81015e2:	f003 0303 	and.w	r3, r3, #3
 81015e6:	2b03      	cmp	r3, #3
 81015e8:	d017      	beq.n	810161a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 81015ea:	687b      	ldr	r3, [r7, #4]
 81015ec:	68db      	ldr	r3, [r3, #12]
 81015ee:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 81015f0:	69fb      	ldr	r3, [r7, #28]
 81015f2:	005b      	lsls	r3, r3, #1
 81015f4:	2203      	movs	r2, #3
 81015f6:	fa02 f303 	lsl.w	r3, r2, r3
 81015fa:	43db      	mvns	r3, r3
 81015fc:	69ba      	ldr	r2, [r7, #24]
 81015fe:	4013      	ands	r3, r2
 8101600:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8101602:	683b      	ldr	r3, [r7, #0]
 8101604:	689a      	ldr	r2, [r3, #8]
 8101606:	69fb      	ldr	r3, [r7, #28]
 8101608:	005b      	lsls	r3, r3, #1
 810160a:	fa02 f303 	lsl.w	r3, r2, r3
 810160e:	69ba      	ldr	r2, [r7, #24]
 8101610:	4313      	orrs	r3, r2
 8101612:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8101614:	687b      	ldr	r3, [r7, #4]
 8101616:	69ba      	ldr	r2, [r7, #24]
 8101618:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 810161a:	683b      	ldr	r3, [r7, #0]
 810161c:	685b      	ldr	r3, [r3, #4]
 810161e:	f003 0303 	and.w	r3, r3, #3
 8101622:	2b02      	cmp	r3, #2
 8101624:	d123      	bne.n	810166e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8101626:	69fb      	ldr	r3, [r7, #28]
 8101628:	08da      	lsrs	r2, r3, #3
 810162a:	687b      	ldr	r3, [r7, #4]
 810162c:	3208      	adds	r2, #8
 810162e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8101632:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8101634:	69fb      	ldr	r3, [r7, #28]
 8101636:	f003 0307 	and.w	r3, r3, #7
 810163a:	009b      	lsls	r3, r3, #2
 810163c:	220f      	movs	r2, #15
 810163e:	fa02 f303 	lsl.w	r3, r2, r3
 8101642:	43db      	mvns	r3, r3
 8101644:	69ba      	ldr	r2, [r7, #24]
 8101646:	4013      	ands	r3, r2
 8101648:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 810164a:	683b      	ldr	r3, [r7, #0]
 810164c:	691a      	ldr	r2, [r3, #16]
 810164e:	69fb      	ldr	r3, [r7, #28]
 8101650:	f003 0307 	and.w	r3, r3, #7
 8101654:	009b      	lsls	r3, r3, #2
 8101656:	fa02 f303 	lsl.w	r3, r2, r3
 810165a:	69ba      	ldr	r2, [r7, #24]
 810165c:	4313      	orrs	r3, r2
 810165e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8101660:	69fb      	ldr	r3, [r7, #28]
 8101662:	08da      	lsrs	r2, r3, #3
 8101664:	687b      	ldr	r3, [r7, #4]
 8101666:	3208      	adds	r2, #8
 8101668:	69b9      	ldr	r1, [r7, #24]
 810166a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 810166e:	687b      	ldr	r3, [r7, #4]
 8101670:	681b      	ldr	r3, [r3, #0]
 8101672:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8101674:	69fb      	ldr	r3, [r7, #28]
 8101676:	005b      	lsls	r3, r3, #1
 8101678:	2203      	movs	r2, #3
 810167a:	fa02 f303 	lsl.w	r3, r2, r3
 810167e:	43db      	mvns	r3, r3
 8101680:	69ba      	ldr	r2, [r7, #24]
 8101682:	4013      	ands	r3, r2
 8101684:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8101686:	683b      	ldr	r3, [r7, #0]
 8101688:	685b      	ldr	r3, [r3, #4]
 810168a:	f003 0203 	and.w	r2, r3, #3
 810168e:	69fb      	ldr	r3, [r7, #28]
 8101690:	005b      	lsls	r3, r3, #1
 8101692:	fa02 f303 	lsl.w	r3, r2, r3
 8101696:	69ba      	ldr	r2, [r7, #24]
 8101698:	4313      	orrs	r3, r2
 810169a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 810169c:	687b      	ldr	r3, [r7, #4]
 810169e:	69ba      	ldr	r2, [r7, #24]
 81016a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 81016a2:	683b      	ldr	r3, [r7, #0]
 81016a4:	685b      	ldr	r3, [r3, #4]
 81016a6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 81016aa:	2b00      	cmp	r3, #0
 81016ac:	f000 80e0 	beq.w	8101870 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 81016b0:	4b2f      	ldr	r3, [pc, #188]	@ (8101770 <HAL_GPIO_Init+0x238>)
 81016b2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 81016b6:	4a2e      	ldr	r2, [pc, #184]	@ (8101770 <HAL_GPIO_Init+0x238>)
 81016b8:	f043 0302 	orr.w	r3, r3, #2
 81016bc:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 81016c0:	4b2b      	ldr	r3, [pc, #172]	@ (8101770 <HAL_GPIO_Init+0x238>)
 81016c2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 81016c6:	f003 0302 	and.w	r3, r3, #2
 81016ca:	60fb      	str	r3, [r7, #12]
 81016cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 81016ce:	4a29      	ldr	r2, [pc, #164]	@ (8101774 <HAL_GPIO_Init+0x23c>)
 81016d0:	69fb      	ldr	r3, [r7, #28]
 81016d2:	089b      	lsrs	r3, r3, #2
 81016d4:	3302      	adds	r3, #2
 81016d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 81016da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 81016dc:	69fb      	ldr	r3, [r7, #28]
 81016de:	f003 0303 	and.w	r3, r3, #3
 81016e2:	009b      	lsls	r3, r3, #2
 81016e4:	220f      	movs	r2, #15
 81016e6:	fa02 f303 	lsl.w	r3, r2, r3
 81016ea:	43db      	mvns	r3, r3
 81016ec:	69ba      	ldr	r2, [r7, #24]
 81016ee:	4013      	ands	r3, r2
 81016f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 81016f2:	687b      	ldr	r3, [r7, #4]
 81016f4:	4a20      	ldr	r2, [pc, #128]	@ (8101778 <HAL_GPIO_Init+0x240>)
 81016f6:	4293      	cmp	r3, r2
 81016f8:	d052      	beq.n	81017a0 <HAL_GPIO_Init+0x268>
 81016fa:	687b      	ldr	r3, [r7, #4]
 81016fc:	4a1f      	ldr	r2, [pc, #124]	@ (810177c <HAL_GPIO_Init+0x244>)
 81016fe:	4293      	cmp	r3, r2
 8101700:	d031      	beq.n	8101766 <HAL_GPIO_Init+0x22e>
 8101702:	687b      	ldr	r3, [r7, #4]
 8101704:	4a1e      	ldr	r2, [pc, #120]	@ (8101780 <HAL_GPIO_Init+0x248>)
 8101706:	4293      	cmp	r3, r2
 8101708:	d02b      	beq.n	8101762 <HAL_GPIO_Init+0x22a>
 810170a:	687b      	ldr	r3, [r7, #4]
 810170c:	4a1d      	ldr	r2, [pc, #116]	@ (8101784 <HAL_GPIO_Init+0x24c>)
 810170e:	4293      	cmp	r3, r2
 8101710:	d025      	beq.n	810175e <HAL_GPIO_Init+0x226>
 8101712:	687b      	ldr	r3, [r7, #4]
 8101714:	4a1c      	ldr	r2, [pc, #112]	@ (8101788 <HAL_GPIO_Init+0x250>)
 8101716:	4293      	cmp	r3, r2
 8101718:	d01f      	beq.n	810175a <HAL_GPIO_Init+0x222>
 810171a:	687b      	ldr	r3, [r7, #4]
 810171c:	4a1b      	ldr	r2, [pc, #108]	@ (810178c <HAL_GPIO_Init+0x254>)
 810171e:	4293      	cmp	r3, r2
 8101720:	d019      	beq.n	8101756 <HAL_GPIO_Init+0x21e>
 8101722:	687b      	ldr	r3, [r7, #4]
 8101724:	4a1a      	ldr	r2, [pc, #104]	@ (8101790 <HAL_GPIO_Init+0x258>)
 8101726:	4293      	cmp	r3, r2
 8101728:	d013      	beq.n	8101752 <HAL_GPIO_Init+0x21a>
 810172a:	687b      	ldr	r3, [r7, #4]
 810172c:	4a19      	ldr	r2, [pc, #100]	@ (8101794 <HAL_GPIO_Init+0x25c>)
 810172e:	4293      	cmp	r3, r2
 8101730:	d00d      	beq.n	810174e <HAL_GPIO_Init+0x216>
 8101732:	687b      	ldr	r3, [r7, #4]
 8101734:	4a18      	ldr	r2, [pc, #96]	@ (8101798 <HAL_GPIO_Init+0x260>)
 8101736:	4293      	cmp	r3, r2
 8101738:	d007      	beq.n	810174a <HAL_GPIO_Init+0x212>
 810173a:	687b      	ldr	r3, [r7, #4]
 810173c:	4a17      	ldr	r2, [pc, #92]	@ (810179c <HAL_GPIO_Init+0x264>)
 810173e:	4293      	cmp	r3, r2
 8101740:	d101      	bne.n	8101746 <HAL_GPIO_Init+0x20e>
 8101742:	2309      	movs	r3, #9
 8101744:	e02d      	b.n	81017a2 <HAL_GPIO_Init+0x26a>
 8101746:	230a      	movs	r3, #10
 8101748:	e02b      	b.n	81017a2 <HAL_GPIO_Init+0x26a>
 810174a:	2308      	movs	r3, #8
 810174c:	e029      	b.n	81017a2 <HAL_GPIO_Init+0x26a>
 810174e:	2307      	movs	r3, #7
 8101750:	e027      	b.n	81017a2 <HAL_GPIO_Init+0x26a>
 8101752:	2306      	movs	r3, #6
 8101754:	e025      	b.n	81017a2 <HAL_GPIO_Init+0x26a>
 8101756:	2305      	movs	r3, #5
 8101758:	e023      	b.n	81017a2 <HAL_GPIO_Init+0x26a>
 810175a:	2304      	movs	r3, #4
 810175c:	e021      	b.n	81017a2 <HAL_GPIO_Init+0x26a>
 810175e:	2303      	movs	r3, #3
 8101760:	e01f      	b.n	81017a2 <HAL_GPIO_Init+0x26a>
 8101762:	2302      	movs	r3, #2
 8101764:	e01d      	b.n	81017a2 <HAL_GPIO_Init+0x26a>
 8101766:	2301      	movs	r3, #1
 8101768:	e01b      	b.n	81017a2 <HAL_GPIO_Init+0x26a>
 810176a:	bf00      	nop
 810176c:	580000c0 	.word	0x580000c0
 8101770:	58024400 	.word	0x58024400
 8101774:	58000400 	.word	0x58000400
 8101778:	58020000 	.word	0x58020000
 810177c:	58020400 	.word	0x58020400
 8101780:	58020800 	.word	0x58020800
 8101784:	58020c00 	.word	0x58020c00
 8101788:	58021000 	.word	0x58021000
 810178c:	58021400 	.word	0x58021400
 8101790:	58021800 	.word	0x58021800
 8101794:	58021c00 	.word	0x58021c00
 8101798:	58022000 	.word	0x58022000
 810179c:	58022400 	.word	0x58022400
 81017a0:	2300      	movs	r3, #0
 81017a2:	69fa      	ldr	r2, [r7, #28]
 81017a4:	f002 0203 	and.w	r2, r2, #3
 81017a8:	0092      	lsls	r2, r2, #2
 81017aa:	4093      	lsls	r3, r2
 81017ac:	69ba      	ldr	r2, [r7, #24]
 81017ae:	4313      	orrs	r3, r2
 81017b0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 81017b2:	4938      	ldr	r1, [pc, #224]	@ (8101894 <HAL_GPIO_Init+0x35c>)
 81017b4:	69fb      	ldr	r3, [r7, #28]
 81017b6:	089b      	lsrs	r3, r3, #2
 81017b8:	3302      	adds	r3, #2
 81017ba:	69ba      	ldr	r2, [r7, #24]
 81017bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 81017c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 81017c4:	681b      	ldr	r3, [r3, #0]
 81017c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 81017c8:	693b      	ldr	r3, [r7, #16]
 81017ca:	43db      	mvns	r3, r3
 81017cc:	69ba      	ldr	r2, [r7, #24]
 81017ce:	4013      	ands	r3, r2
 81017d0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 81017d2:	683b      	ldr	r3, [r7, #0]
 81017d4:	685b      	ldr	r3, [r3, #4]
 81017d6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 81017da:	2b00      	cmp	r3, #0
 81017dc:	d003      	beq.n	81017e6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 81017de:	69ba      	ldr	r2, [r7, #24]
 81017e0:	693b      	ldr	r3, [r7, #16]
 81017e2:	4313      	orrs	r3, r2
 81017e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 81017e6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 81017ea:	69bb      	ldr	r3, [r7, #24]
 81017ec:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 81017ee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 81017f2:	685b      	ldr	r3, [r3, #4]
 81017f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 81017f6:	693b      	ldr	r3, [r7, #16]
 81017f8:	43db      	mvns	r3, r3
 81017fa:	69ba      	ldr	r2, [r7, #24]
 81017fc:	4013      	ands	r3, r2
 81017fe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8101800:	683b      	ldr	r3, [r7, #0]
 8101802:	685b      	ldr	r3, [r3, #4]
 8101804:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8101808:	2b00      	cmp	r3, #0
 810180a:	d003      	beq.n	8101814 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 810180c:	69ba      	ldr	r2, [r7, #24]
 810180e:	693b      	ldr	r3, [r7, #16]
 8101810:	4313      	orrs	r3, r2
 8101812:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8101814:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8101818:	69bb      	ldr	r3, [r7, #24]
 810181a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 810181c:	697b      	ldr	r3, [r7, #20]
 810181e:	685b      	ldr	r3, [r3, #4]
 8101820:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8101822:	693b      	ldr	r3, [r7, #16]
 8101824:	43db      	mvns	r3, r3
 8101826:	69ba      	ldr	r2, [r7, #24]
 8101828:	4013      	ands	r3, r2
 810182a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 810182c:	683b      	ldr	r3, [r7, #0]
 810182e:	685b      	ldr	r3, [r3, #4]
 8101830:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8101834:	2b00      	cmp	r3, #0
 8101836:	d003      	beq.n	8101840 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8101838:	69ba      	ldr	r2, [r7, #24]
 810183a:	693b      	ldr	r3, [r7, #16]
 810183c:	4313      	orrs	r3, r2
 810183e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8101840:	697b      	ldr	r3, [r7, #20]
 8101842:	69ba      	ldr	r2, [r7, #24]
 8101844:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8101846:	697b      	ldr	r3, [r7, #20]
 8101848:	681b      	ldr	r3, [r3, #0]
 810184a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 810184c:	693b      	ldr	r3, [r7, #16]
 810184e:	43db      	mvns	r3, r3
 8101850:	69ba      	ldr	r2, [r7, #24]
 8101852:	4013      	ands	r3, r2
 8101854:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8101856:	683b      	ldr	r3, [r7, #0]
 8101858:	685b      	ldr	r3, [r3, #4]
 810185a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 810185e:	2b00      	cmp	r3, #0
 8101860:	d003      	beq.n	810186a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8101862:	69ba      	ldr	r2, [r7, #24]
 8101864:	693b      	ldr	r3, [r7, #16]
 8101866:	4313      	orrs	r3, r2
 8101868:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 810186a:	697b      	ldr	r3, [r7, #20]
 810186c:	69ba      	ldr	r2, [r7, #24]
 810186e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8101870:	69fb      	ldr	r3, [r7, #28]
 8101872:	3301      	adds	r3, #1
 8101874:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8101876:	683b      	ldr	r3, [r7, #0]
 8101878:	681a      	ldr	r2, [r3, #0]
 810187a:	69fb      	ldr	r3, [r7, #28]
 810187c:	fa22 f303 	lsr.w	r3, r2, r3
 8101880:	2b00      	cmp	r3, #0
 8101882:	f47f ae63 	bne.w	810154c <HAL_GPIO_Init+0x14>
  }
}
 8101886:	bf00      	nop
 8101888:	bf00      	nop
 810188a:	3724      	adds	r7, #36	@ 0x24
 810188c:	46bd      	mov	sp, r7
 810188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101892:	4770      	bx	lr
 8101894:	58000400 	.word	0x58000400

08101898 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8101898:	b480      	push	{r7}
 810189a:	b083      	sub	sp, #12
 810189c:	af00      	add	r7, sp, #0
 810189e:	6078      	str	r0, [r7, #4]
 81018a0:	460b      	mov	r3, r1
 81018a2:	807b      	strh	r3, [r7, #2]
 81018a4:	4613      	mov	r3, r2
 81018a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 81018a8:	787b      	ldrb	r3, [r7, #1]
 81018aa:	2b00      	cmp	r3, #0
 81018ac:	d003      	beq.n	81018b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 81018ae:	887a      	ldrh	r2, [r7, #2]
 81018b0:	687b      	ldr	r3, [r7, #4]
 81018b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 81018b4:	e003      	b.n	81018be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 81018b6:	887b      	ldrh	r3, [r7, #2]
 81018b8:	041a      	lsls	r2, r3, #16
 81018ba:	687b      	ldr	r3, [r7, #4]
 81018bc:	619a      	str	r2, [r3, #24]
}
 81018be:	bf00      	nop
 81018c0:	370c      	adds	r7, #12
 81018c2:	46bd      	mov	sp, r7
 81018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81018c8:	4770      	bx	lr
	...

081018cc <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 81018cc:	b480      	push	{r7}
 81018ce:	b083      	sub	sp, #12
 81018d0:	af00      	add	r7, sp, #0
 81018d2:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 81018d4:	4b05      	ldr	r3, [pc, #20]	@ (81018ec <HAL_HSEM_ActivateNotification+0x20>)
 81018d6:	681a      	ldr	r2, [r3, #0]
 81018d8:	4904      	ldr	r1, [pc, #16]	@ (81018ec <HAL_HSEM_ActivateNotification+0x20>)
 81018da:	687b      	ldr	r3, [r7, #4]
 81018dc:	4313      	orrs	r3, r2
 81018de:	600b      	str	r3, [r1, #0]
#endif
}
 81018e0:	bf00      	nop
 81018e2:	370c      	adds	r7, #12
 81018e4:	46bd      	mov	sp, r7
 81018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81018ea:	4770      	bx	lr
 81018ec:	58026510 	.word	0x58026510

081018f0 <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 81018f0:	b580      	push	{r7, lr}
 81018f2:	b084      	sub	sp, #16
 81018f4:	af00      	add	r7, sp, #0
 81018f6:	60f8      	str	r0, [r7, #12]
 81018f8:	460b      	mov	r3, r1
 81018fa:	607a      	str	r2, [r7, #4]
 81018fc:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 81018fe:	4b37      	ldr	r3, [pc, #220]	@ (81019dc <HAL_PWREx_EnterSTOPMode+0xec>)
 8101900:	681b      	ldr	r3, [r3, #0]
 8101902:	f023 0201 	bic.w	r2, r3, #1
 8101906:	4935      	ldr	r1, [pc, #212]	@ (81019dc <HAL_PWREx_EnterSTOPMode+0xec>)
 8101908:	68fb      	ldr	r3, [r7, #12]
 810190a:	4313      	orrs	r3, r2
 810190c:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 810190e:	687b      	ldr	r3, [r7, #4]
 8101910:	2b00      	cmp	r3, #0
 8101912:	d123      	bne.n	810195c <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 8101914:	f7ff fdfc 	bl	8101510 <HAL_GetCurrentCPUID>
 8101918:	4603      	mov	r3, r0
 810191a:	2b03      	cmp	r3, #3
 810191c:	d158      	bne.n	81019d0 <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 810191e:	4b2f      	ldr	r3, [pc, #188]	@ (81019dc <HAL_PWREx_EnterSTOPMode+0xec>)
 8101920:	691b      	ldr	r3, [r3, #16]
 8101922:	4a2e      	ldr	r2, [pc, #184]	@ (81019dc <HAL_PWREx_EnterSTOPMode+0xec>)
 8101924:	f023 0301 	bic.w	r3, r3, #1
 8101928:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 810192a:	4b2d      	ldr	r3, [pc, #180]	@ (81019e0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 810192c:	691b      	ldr	r3, [r3, #16]
 810192e:	4a2c      	ldr	r2, [pc, #176]	@ (81019e0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101930:	f043 0304 	orr.w	r3, r3, #4
 8101934:	6113      	str	r3, [r2, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8101936:	f3bf 8f4f 	dsb	sy
}
 810193a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 810193c:	f3bf 8f6f 	isb	sy
}
 8101940:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8101942:	7afb      	ldrb	r3, [r7, #11]
 8101944:	2b01      	cmp	r3, #1
 8101946:	d101      	bne.n	810194c <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8101948:	bf30      	wfi
 810194a:	e000      	b.n	810194e <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 810194c:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 810194e:	4b24      	ldr	r3, [pc, #144]	@ (81019e0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101950:	691b      	ldr	r3, [r3, #16]
 8101952:	4a23      	ldr	r2, [pc, #140]	@ (81019e0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101954:	f023 0304 	bic.w	r3, r3, #4
 8101958:	6113      	str	r3, [r2, #16]
 810195a:	e03c      	b.n	81019d6 <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 810195c:	687b      	ldr	r3, [r7, #4]
 810195e:	2b01      	cmp	r3, #1
 8101960:	d123      	bne.n	81019aa <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 8101962:	f7ff fdd5 	bl	8101510 <HAL_GetCurrentCPUID>
 8101966:	4603      	mov	r3, r0
 8101968:	2b01      	cmp	r3, #1
 810196a:	d133      	bne.n	81019d4 <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 810196c:	4b1b      	ldr	r3, [pc, #108]	@ (81019dc <HAL_PWREx_EnterSTOPMode+0xec>)
 810196e:	695b      	ldr	r3, [r3, #20]
 8101970:	4a1a      	ldr	r2, [pc, #104]	@ (81019dc <HAL_PWREx_EnterSTOPMode+0xec>)
 8101972:	f023 0302 	bic.w	r3, r3, #2
 8101976:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8101978:	4b19      	ldr	r3, [pc, #100]	@ (81019e0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 810197a:	691b      	ldr	r3, [r3, #16]
 810197c:	4a18      	ldr	r2, [pc, #96]	@ (81019e0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 810197e:	f043 0304 	orr.w	r3, r3, #4
 8101982:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8101984:	f3bf 8f4f 	dsb	sy
}
 8101988:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 810198a:	f3bf 8f6f 	isb	sy
}
 810198e:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8101990:	7afb      	ldrb	r3, [r7, #11]
 8101992:	2b01      	cmp	r3, #1
 8101994:	d101      	bne.n	810199a <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8101996:	bf30      	wfi
 8101998:	e000      	b.n	810199c <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 810199a:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 810199c:	4b10      	ldr	r3, [pc, #64]	@ (81019e0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 810199e:	691b      	ldr	r3, [r3, #16]
 81019a0:	4a0f      	ldr	r2, [pc, #60]	@ (81019e0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81019a2:	f023 0304 	bic.w	r3, r3, #4
 81019a6:	6113      	str	r3, [r2, #16]
 81019a8:	e015      	b.n	81019d6 <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 81019aa:	f7ff fdb1 	bl	8101510 <HAL_GetCurrentCPUID>
 81019ae:	4603      	mov	r3, r0
 81019b0:	2b03      	cmp	r3, #3
 81019b2:	d106      	bne.n	81019c2 <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 81019b4:	4b09      	ldr	r3, [pc, #36]	@ (81019dc <HAL_PWREx_EnterSTOPMode+0xec>)
 81019b6:	691b      	ldr	r3, [r3, #16]
 81019b8:	4a08      	ldr	r2, [pc, #32]	@ (81019dc <HAL_PWREx_EnterSTOPMode+0xec>)
 81019ba:	f023 0304 	bic.w	r3, r3, #4
 81019be:	6113      	str	r3, [r2, #16]
 81019c0:	e009      	b.n	81019d6 <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 81019c2:	4b06      	ldr	r3, [pc, #24]	@ (81019dc <HAL_PWREx_EnterSTOPMode+0xec>)
 81019c4:	695b      	ldr	r3, [r3, #20]
 81019c6:	4a05      	ldr	r2, [pc, #20]	@ (81019dc <HAL_PWREx_EnterSTOPMode+0xec>)
 81019c8:	f023 0304 	bic.w	r3, r3, #4
 81019cc:	6153      	str	r3, [r2, #20]
 81019ce:	e002      	b.n	81019d6 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 81019d0:	bf00      	nop
 81019d2:	e000      	b.n	81019d6 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 81019d4:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 81019d6:	3710      	adds	r7, #16
 81019d8:	46bd      	mov	sp, r7
 81019da:	bd80      	pop	{r7, pc}
 81019dc:	58024800 	.word	0x58024800
 81019e0:	e000ed00 	.word	0xe000ed00

081019e4 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 81019e4:	b580      	push	{r7, lr}
 81019e6:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 81019e8:	f7ff fd92 	bl	8101510 <HAL_GetCurrentCPUID>
 81019ec:	4603      	mov	r3, r0
 81019ee:	2b03      	cmp	r3, #3
 81019f0:	d101      	bne.n	81019f6 <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 81019f2:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 81019f4:	e001      	b.n	81019fa <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 81019f6:	bf40      	sev
    __WFE ();
 81019f8:	bf20      	wfe
}
 81019fa:	bf00      	nop
 81019fc:	bd80      	pop	{r7, pc}
	...

08101a00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8101a00:	b480      	push	{r7}
 8101a02:	b089      	sub	sp, #36	@ 0x24
 8101a04:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8101a06:	4bb3      	ldr	r3, [pc, #716]	@ (8101cd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101a08:	691b      	ldr	r3, [r3, #16]
 8101a0a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8101a0e:	2b18      	cmp	r3, #24
 8101a10:	f200 8155 	bhi.w	8101cbe <HAL_RCC_GetSysClockFreq+0x2be>
 8101a14:	a201      	add	r2, pc, #4	@ (adr r2, 8101a1c <HAL_RCC_GetSysClockFreq+0x1c>)
 8101a16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8101a1a:	bf00      	nop
 8101a1c:	08101a81 	.word	0x08101a81
 8101a20:	08101cbf 	.word	0x08101cbf
 8101a24:	08101cbf 	.word	0x08101cbf
 8101a28:	08101cbf 	.word	0x08101cbf
 8101a2c:	08101cbf 	.word	0x08101cbf
 8101a30:	08101cbf 	.word	0x08101cbf
 8101a34:	08101cbf 	.word	0x08101cbf
 8101a38:	08101cbf 	.word	0x08101cbf
 8101a3c:	08101aa7 	.word	0x08101aa7
 8101a40:	08101cbf 	.word	0x08101cbf
 8101a44:	08101cbf 	.word	0x08101cbf
 8101a48:	08101cbf 	.word	0x08101cbf
 8101a4c:	08101cbf 	.word	0x08101cbf
 8101a50:	08101cbf 	.word	0x08101cbf
 8101a54:	08101cbf 	.word	0x08101cbf
 8101a58:	08101cbf 	.word	0x08101cbf
 8101a5c:	08101aad 	.word	0x08101aad
 8101a60:	08101cbf 	.word	0x08101cbf
 8101a64:	08101cbf 	.word	0x08101cbf
 8101a68:	08101cbf 	.word	0x08101cbf
 8101a6c:	08101cbf 	.word	0x08101cbf
 8101a70:	08101cbf 	.word	0x08101cbf
 8101a74:	08101cbf 	.word	0x08101cbf
 8101a78:	08101cbf 	.word	0x08101cbf
 8101a7c:	08101ab3 	.word	0x08101ab3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8101a80:	4b94      	ldr	r3, [pc, #592]	@ (8101cd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101a82:	681b      	ldr	r3, [r3, #0]
 8101a84:	f003 0320 	and.w	r3, r3, #32
 8101a88:	2b00      	cmp	r3, #0
 8101a8a:	d009      	beq.n	8101aa0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8101a8c:	4b91      	ldr	r3, [pc, #580]	@ (8101cd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101a8e:	681b      	ldr	r3, [r3, #0]
 8101a90:	08db      	lsrs	r3, r3, #3
 8101a92:	f003 0303 	and.w	r3, r3, #3
 8101a96:	4a90      	ldr	r2, [pc, #576]	@ (8101cd8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8101a98:	fa22 f303 	lsr.w	r3, r2, r3
 8101a9c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8101a9e:	e111      	b.n	8101cc4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8101aa0:	4b8d      	ldr	r3, [pc, #564]	@ (8101cd8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8101aa2:	61bb      	str	r3, [r7, #24]
      break;
 8101aa4:	e10e      	b.n	8101cc4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8101aa6:	4b8d      	ldr	r3, [pc, #564]	@ (8101cdc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8101aa8:	61bb      	str	r3, [r7, #24]
      break;
 8101aaa:	e10b      	b.n	8101cc4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8101aac:	4b8c      	ldr	r3, [pc, #560]	@ (8101ce0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8101aae:	61bb      	str	r3, [r7, #24]
      break;
 8101ab0:	e108      	b.n	8101cc4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8101ab2:	4b88      	ldr	r3, [pc, #544]	@ (8101cd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101ab4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8101ab6:	f003 0303 	and.w	r3, r3, #3
 8101aba:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8101abc:	4b85      	ldr	r3, [pc, #532]	@ (8101cd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101abe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8101ac0:	091b      	lsrs	r3, r3, #4
 8101ac2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8101ac6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8101ac8:	4b82      	ldr	r3, [pc, #520]	@ (8101cd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101aca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8101acc:	f003 0301 	and.w	r3, r3, #1
 8101ad0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8101ad2:	4b80      	ldr	r3, [pc, #512]	@ (8101cd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101ad4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8101ad6:	08db      	lsrs	r3, r3, #3
 8101ad8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8101adc:	68fa      	ldr	r2, [r7, #12]
 8101ade:	fb02 f303 	mul.w	r3, r2, r3
 8101ae2:	ee07 3a90 	vmov	s15, r3
 8101ae6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101aea:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8101aee:	693b      	ldr	r3, [r7, #16]
 8101af0:	2b00      	cmp	r3, #0
 8101af2:	f000 80e1 	beq.w	8101cb8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8101af6:	697b      	ldr	r3, [r7, #20]
 8101af8:	2b02      	cmp	r3, #2
 8101afa:	f000 8083 	beq.w	8101c04 <HAL_RCC_GetSysClockFreq+0x204>
 8101afe:	697b      	ldr	r3, [r7, #20]
 8101b00:	2b02      	cmp	r3, #2
 8101b02:	f200 80a1 	bhi.w	8101c48 <HAL_RCC_GetSysClockFreq+0x248>
 8101b06:	697b      	ldr	r3, [r7, #20]
 8101b08:	2b00      	cmp	r3, #0
 8101b0a:	d003      	beq.n	8101b14 <HAL_RCC_GetSysClockFreq+0x114>
 8101b0c:	697b      	ldr	r3, [r7, #20]
 8101b0e:	2b01      	cmp	r3, #1
 8101b10:	d056      	beq.n	8101bc0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8101b12:	e099      	b.n	8101c48 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8101b14:	4b6f      	ldr	r3, [pc, #444]	@ (8101cd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101b16:	681b      	ldr	r3, [r3, #0]
 8101b18:	f003 0320 	and.w	r3, r3, #32
 8101b1c:	2b00      	cmp	r3, #0
 8101b1e:	d02d      	beq.n	8101b7c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8101b20:	4b6c      	ldr	r3, [pc, #432]	@ (8101cd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101b22:	681b      	ldr	r3, [r3, #0]
 8101b24:	08db      	lsrs	r3, r3, #3
 8101b26:	f003 0303 	and.w	r3, r3, #3
 8101b2a:	4a6b      	ldr	r2, [pc, #428]	@ (8101cd8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8101b2c:	fa22 f303 	lsr.w	r3, r2, r3
 8101b30:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8101b32:	687b      	ldr	r3, [r7, #4]
 8101b34:	ee07 3a90 	vmov	s15, r3
 8101b38:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8101b3c:	693b      	ldr	r3, [r7, #16]
 8101b3e:	ee07 3a90 	vmov	s15, r3
 8101b42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101b46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8101b4a:	4b62      	ldr	r3, [pc, #392]	@ (8101cd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101b4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8101b4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8101b52:	ee07 3a90 	vmov	s15, r3
 8101b56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8101b5a:	ed97 6a02 	vldr	s12, [r7, #8]
 8101b5e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8101ce4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8101b62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8101b66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8101b6a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8101b6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8101b72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101b76:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8101b7a:	e087      	b.n	8101c8c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8101b7c:	693b      	ldr	r3, [r7, #16]
 8101b7e:	ee07 3a90 	vmov	s15, r3
 8101b82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101b86:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8101ce8 <HAL_RCC_GetSysClockFreq+0x2e8>
 8101b8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8101b8e:	4b51      	ldr	r3, [pc, #324]	@ (8101cd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101b90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8101b92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8101b96:	ee07 3a90 	vmov	s15, r3
 8101b9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8101b9e:	ed97 6a02 	vldr	s12, [r7, #8]
 8101ba2:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8101ce4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8101ba6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8101baa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8101bae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8101bb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8101bb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101bba:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8101bbe:	e065      	b.n	8101c8c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8101bc0:	693b      	ldr	r3, [r7, #16]
 8101bc2:	ee07 3a90 	vmov	s15, r3
 8101bc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101bca:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8101cec <HAL_RCC_GetSysClockFreq+0x2ec>
 8101bce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8101bd2:	4b40      	ldr	r3, [pc, #256]	@ (8101cd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101bd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8101bd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8101bda:	ee07 3a90 	vmov	s15, r3
 8101bde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8101be2:	ed97 6a02 	vldr	s12, [r7, #8]
 8101be6:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8101ce4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8101bea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8101bee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8101bf2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8101bf6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8101bfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101bfe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8101c02:	e043      	b.n	8101c8c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8101c04:	693b      	ldr	r3, [r7, #16]
 8101c06:	ee07 3a90 	vmov	s15, r3
 8101c0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101c0e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8101cf0 <HAL_RCC_GetSysClockFreq+0x2f0>
 8101c12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8101c16:	4b2f      	ldr	r3, [pc, #188]	@ (8101cd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101c18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8101c1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8101c1e:	ee07 3a90 	vmov	s15, r3
 8101c22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8101c26:	ed97 6a02 	vldr	s12, [r7, #8]
 8101c2a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8101ce4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8101c2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8101c32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8101c36:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8101c3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8101c3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101c42:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8101c46:	e021      	b.n	8101c8c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8101c48:	693b      	ldr	r3, [r7, #16]
 8101c4a:	ee07 3a90 	vmov	s15, r3
 8101c4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101c52:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8101cec <HAL_RCC_GetSysClockFreq+0x2ec>
 8101c56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8101c5a:	4b1e      	ldr	r3, [pc, #120]	@ (8101cd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101c5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8101c5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8101c62:	ee07 3a90 	vmov	s15, r3
 8101c66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8101c6a:	ed97 6a02 	vldr	s12, [r7, #8]
 8101c6e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8101ce4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8101c72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8101c76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8101c7a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8101c7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8101c82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101c86:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8101c8a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8101c8c:	4b11      	ldr	r3, [pc, #68]	@ (8101cd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101c8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8101c90:	0a5b      	lsrs	r3, r3, #9
 8101c92:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8101c96:	3301      	adds	r3, #1
 8101c98:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8101c9a:	683b      	ldr	r3, [r7, #0]
 8101c9c:	ee07 3a90 	vmov	s15, r3
 8101ca0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8101ca4:	edd7 6a07 	vldr	s13, [r7, #28]
 8101ca8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8101cac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8101cb0:	ee17 3a90 	vmov	r3, s15
 8101cb4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8101cb6:	e005      	b.n	8101cc4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8101cb8:	2300      	movs	r3, #0
 8101cba:	61bb      	str	r3, [r7, #24]
      break;
 8101cbc:	e002      	b.n	8101cc4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8101cbe:	4b07      	ldr	r3, [pc, #28]	@ (8101cdc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8101cc0:	61bb      	str	r3, [r7, #24]
      break;
 8101cc2:	bf00      	nop
  }

  return sysclockfreq;
 8101cc4:	69bb      	ldr	r3, [r7, #24]
}
 8101cc6:	4618      	mov	r0, r3
 8101cc8:	3724      	adds	r7, #36	@ 0x24
 8101cca:	46bd      	mov	sp, r7
 8101ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101cd0:	4770      	bx	lr
 8101cd2:	bf00      	nop
 8101cd4:	58024400 	.word	0x58024400
 8101cd8:	03d09000 	.word	0x03d09000
 8101cdc:	003d0900 	.word	0x003d0900
 8101ce0:	017d7840 	.word	0x017d7840
 8101ce4:	46000000 	.word	0x46000000
 8101ce8:	4c742400 	.word	0x4c742400
 8101cec:	4a742400 	.word	0x4a742400
 8101cf0:	4bbebc20 	.word	0x4bbebc20

08101cf4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8101cf4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8101cf8:	b0ca      	sub	sp, #296	@ 0x128
 8101cfa:	af00      	add	r7, sp, #0
 8101cfc:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8101d00:	2300      	movs	r3, #0
 8101d02:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8101d06:	2300      	movs	r3, #0
 8101d08:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8101d0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101d14:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8101d18:	2500      	movs	r5, #0
 8101d1a:	ea54 0305 	orrs.w	r3, r4, r5
 8101d1e:	d049      	beq.n	8101db4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8101d20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101d24:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8101d26:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8101d2a:	d02f      	beq.n	8101d8c <HAL_RCCEx_PeriphCLKConfig+0x98>
 8101d2c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8101d30:	d828      	bhi.n	8101d84 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8101d32:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8101d36:	d01a      	beq.n	8101d6e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8101d38:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8101d3c:	d822      	bhi.n	8101d84 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8101d3e:	2b00      	cmp	r3, #0
 8101d40:	d003      	beq.n	8101d4a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8101d42:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8101d46:	d007      	beq.n	8101d58 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8101d48:	e01c      	b.n	8101d84 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8101d4a:	4bb8      	ldr	r3, [pc, #736]	@ (810202c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8101d4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8101d4e:	4ab7      	ldr	r2, [pc, #732]	@ (810202c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8101d50:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8101d54:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8101d56:	e01a      	b.n	8101d8e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8101d58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101d5c:	3308      	adds	r3, #8
 8101d5e:	2102      	movs	r1, #2
 8101d60:	4618      	mov	r0, r3
 8101d62:	f001 f9d1 	bl	8103108 <RCCEx_PLL2_Config>
 8101d66:	4603      	mov	r3, r0
 8101d68:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8101d6c:	e00f      	b.n	8101d8e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8101d6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101d72:	3328      	adds	r3, #40	@ 0x28
 8101d74:	2102      	movs	r1, #2
 8101d76:	4618      	mov	r0, r3
 8101d78:	f001 fa78 	bl	810326c <RCCEx_PLL3_Config>
 8101d7c:	4603      	mov	r3, r0
 8101d7e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8101d82:	e004      	b.n	8101d8e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8101d84:	2301      	movs	r3, #1
 8101d86:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8101d8a:	e000      	b.n	8101d8e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8101d8c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8101d8e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8101d92:	2b00      	cmp	r3, #0
 8101d94:	d10a      	bne.n	8101dac <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8101d96:	4ba5      	ldr	r3, [pc, #660]	@ (810202c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8101d98:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8101d9a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8101d9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101da2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8101da4:	4aa1      	ldr	r2, [pc, #644]	@ (810202c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8101da6:	430b      	orrs	r3, r1
 8101da8:	6513      	str	r3, [r2, #80]	@ 0x50
 8101daa:	e003      	b.n	8101db4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101dac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8101db0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8101db4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101db8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101dbc:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8101dc0:	f04f 0900 	mov.w	r9, #0
 8101dc4:	ea58 0309 	orrs.w	r3, r8, r9
 8101dc8:	d047      	beq.n	8101e5a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8101dca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101dce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8101dd0:	2b04      	cmp	r3, #4
 8101dd2:	d82a      	bhi.n	8101e2a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8101dd4:	a201      	add	r2, pc, #4	@ (adr r2, 8101ddc <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8101dd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8101dda:	bf00      	nop
 8101ddc:	08101df1 	.word	0x08101df1
 8101de0:	08101dff 	.word	0x08101dff
 8101de4:	08101e15 	.word	0x08101e15
 8101de8:	08101e33 	.word	0x08101e33
 8101dec:	08101e33 	.word	0x08101e33
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8101df0:	4b8e      	ldr	r3, [pc, #568]	@ (810202c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8101df2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8101df4:	4a8d      	ldr	r2, [pc, #564]	@ (810202c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8101df6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8101dfa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8101dfc:	e01a      	b.n	8101e34 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8101dfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101e02:	3308      	adds	r3, #8
 8101e04:	2100      	movs	r1, #0
 8101e06:	4618      	mov	r0, r3
 8101e08:	f001 f97e 	bl	8103108 <RCCEx_PLL2_Config>
 8101e0c:	4603      	mov	r3, r0
 8101e0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8101e12:	e00f      	b.n	8101e34 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8101e14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101e18:	3328      	adds	r3, #40	@ 0x28
 8101e1a:	2100      	movs	r1, #0
 8101e1c:	4618      	mov	r0, r3
 8101e1e:	f001 fa25 	bl	810326c <RCCEx_PLL3_Config>
 8101e22:	4603      	mov	r3, r0
 8101e24:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8101e28:	e004      	b.n	8101e34 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8101e2a:	2301      	movs	r3, #1
 8101e2c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8101e30:	e000      	b.n	8101e34 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8101e32:	bf00      	nop
    }

    if (ret == HAL_OK)
 8101e34:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8101e38:	2b00      	cmp	r3, #0
 8101e3a:	d10a      	bne.n	8101e52 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8101e3c:	4b7b      	ldr	r3, [pc, #492]	@ (810202c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8101e3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8101e40:	f023 0107 	bic.w	r1, r3, #7
 8101e44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101e48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8101e4a:	4a78      	ldr	r2, [pc, #480]	@ (810202c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8101e4c:	430b      	orrs	r3, r1
 8101e4e:	6513      	str	r3, [r2, #80]	@ 0x50
 8101e50:	e003      	b.n	8101e5a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101e52:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8101e56:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8101e5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101e62:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8101e66:	f04f 0b00 	mov.w	fp, #0
 8101e6a:	ea5a 030b 	orrs.w	r3, sl, fp
 8101e6e:	d04c      	beq.n	8101f0a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8101e70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101e74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8101e76:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8101e7a:	d030      	beq.n	8101ede <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8101e7c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8101e80:	d829      	bhi.n	8101ed6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8101e82:	2bc0      	cmp	r3, #192	@ 0xc0
 8101e84:	d02d      	beq.n	8101ee2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8101e86:	2bc0      	cmp	r3, #192	@ 0xc0
 8101e88:	d825      	bhi.n	8101ed6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8101e8a:	2b80      	cmp	r3, #128	@ 0x80
 8101e8c:	d018      	beq.n	8101ec0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8101e8e:	2b80      	cmp	r3, #128	@ 0x80
 8101e90:	d821      	bhi.n	8101ed6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8101e92:	2b00      	cmp	r3, #0
 8101e94:	d002      	beq.n	8101e9c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8101e96:	2b40      	cmp	r3, #64	@ 0x40
 8101e98:	d007      	beq.n	8101eaa <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8101e9a:	e01c      	b.n	8101ed6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8101e9c:	4b63      	ldr	r3, [pc, #396]	@ (810202c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8101e9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8101ea0:	4a62      	ldr	r2, [pc, #392]	@ (810202c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8101ea2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8101ea6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8101ea8:	e01c      	b.n	8101ee4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8101eaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101eae:	3308      	adds	r3, #8
 8101eb0:	2100      	movs	r1, #0
 8101eb2:	4618      	mov	r0, r3
 8101eb4:	f001 f928 	bl	8103108 <RCCEx_PLL2_Config>
 8101eb8:	4603      	mov	r3, r0
 8101eba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8101ebe:	e011      	b.n	8101ee4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8101ec0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101ec4:	3328      	adds	r3, #40	@ 0x28
 8101ec6:	2100      	movs	r1, #0
 8101ec8:	4618      	mov	r0, r3
 8101eca:	f001 f9cf 	bl	810326c <RCCEx_PLL3_Config>
 8101ece:	4603      	mov	r3, r0
 8101ed0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8101ed4:	e006      	b.n	8101ee4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8101ed6:	2301      	movs	r3, #1
 8101ed8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8101edc:	e002      	b.n	8101ee4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8101ede:	bf00      	nop
 8101ee0:	e000      	b.n	8101ee4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8101ee2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8101ee4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8101ee8:	2b00      	cmp	r3, #0
 8101eea:	d10a      	bne.n	8101f02 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8101eec:	4b4f      	ldr	r3, [pc, #316]	@ (810202c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8101eee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8101ef0:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8101ef4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101ef8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8101efa:	4a4c      	ldr	r2, [pc, #304]	@ (810202c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8101efc:	430b      	orrs	r3, r1
 8101efe:	6513      	str	r3, [r2, #80]	@ 0x50
 8101f00:	e003      	b.n	8101f0a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101f02:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8101f06:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8101f0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101f12:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8101f16:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8101f1a:	2300      	movs	r3, #0
 8101f1c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8101f20:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8101f24:	460b      	mov	r3, r1
 8101f26:	4313      	orrs	r3, r2
 8101f28:	d053      	beq.n	8101fd2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8101f2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101f2e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8101f32:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8101f36:	d035      	beq.n	8101fa4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8101f38:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8101f3c:	d82e      	bhi.n	8101f9c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8101f3e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8101f42:	d031      	beq.n	8101fa8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8101f44:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8101f48:	d828      	bhi.n	8101f9c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8101f4a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8101f4e:	d01a      	beq.n	8101f86 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8101f50:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8101f54:	d822      	bhi.n	8101f9c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8101f56:	2b00      	cmp	r3, #0
 8101f58:	d003      	beq.n	8101f62 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8101f5a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8101f5e:	d007      	beq.n	8101f70 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8101f60:	e01c      	b.n	8101f9c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8101f62:	4b32      	ldr	r3, [pc, #200]	@ (810202c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8101f64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8101f66:	4a31      	ldr	r2, [pc, #196]	@ (810202c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8101f68:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8101f6c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8101f6e:	e01c      	b.n	8101faa <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8101f70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101f74:	3308      	adds	r3, #8
 8101f76:	2100      	movs	r1, #0
 8101f78:	4618      	mov	r0, r3
 8101f7a:	f001 f8c5 	bl	8103108 <RCCEx_PLL2_Config>
 8101f7e:	4603      	mov	r3, r0
 8101f80:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8101f84:	e011      	b.n	8101faa <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8101f86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101f8a:	3328      	adds	r3, #40	@ 0x28
 8101f8c:	2100      	movs	r1, #0
 8101f8e:	4618      	mov	r0, r3
 8101f90:	f001 f96c 	bl	810326c <RCCEx_PLL3_Config>
 8101f94:	4603      	mov	r3, r0
 8101f96:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8101f9a:	e006      	b.n	8101faa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8101f9c:	2301      	movs	r3, #1
 8101f9e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8101fa2:	e002      	b.n	8101faa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8101fa4:	bf00      	nop
 8101fa6:	e000      	b.n	8101faa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8101fa8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8101faa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8101fae:	2b00      	cmp	r3, #0
 8101fb0:	d10b      	bne.n	8101fca <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8101fb2:	4b1e      	ldr	r3, [pc, #120]	@ (810202c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8101fb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8101fb6:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8101fba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101fbe:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8101fc2:	4a1a      	ldr	r2, [pc, #104]	@ (810202c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8101fc4:	430b      	orrs	r3, r1
 8101fc6:	6593      	str	r3, [r2, #88]	@ 0x58
 8101fc8:	e003      	b.n	8101fd2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101fca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8101fce:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8101fd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101fda:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8101fde:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8101fe2:	2300      	movs	r3, #0
 8101fe4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8101fe8:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8101fec:	460b      	mov	r3, r1
 8101fee:	4313      	orrs	r3, r2
 8101ff0:	d056      	beq.n	81020a0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8101ff2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101ff6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8101ffa:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8101ffe:	d038      	beq.n	8102072 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8102000:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8102004:	d831      	bhi.n	810206a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8102006:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 810200a:	d034      	beq.n	8102076 <HAL_RCCEx_PeriphCLKConfig+0x382>
 810200c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8102010:	d82b      	bhi.n	810206a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8102012:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8102016:	d01d      	beq.n	8102054 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8102018:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 810201c:	d825      	bhi.n	810206a <HAL_RCCEx_PeriphCLKConfig+0x376>
 810201e:	2b00      	cmp	r3, #0
 8102020:	d006      	beq.n	8102030 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8102022:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8102026:	d00a      	beq.n	810203e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8102028:	e01f      	b.n	810206a <HAL_RCCEx_PeriphCLKConfig+0x376>
 810202a:	bf00      	nop
 810202c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102030:	4ba2      	ldr	r3, [pc, #648]	@ (81022bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8102032:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8102034:	4aa1      	ldr	r2, [pc, #644]	@ (81022bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8102036:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810203a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 810203c:	e01c      	b.n	8102078 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810203e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102042:	3308      	adds	r3, #8
 8102044:	2100      	movs	r1, #0
 8102046:	4618      	mov	r0, r3
 8102048:	f001 f85e 	bl	8103108 <RCCEx_PLL2_Config>
 810204c:	4603      	mov	r3, r0
 810204e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8102052:	e011      	b.n	8102078 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8102054:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102058:	3328      	adds	r3, #40	@ 0x28
 810205a:	2100      	movs	r1, #0
 810205c:	4618      	mov	r0, r3
 810205e:	f001 f905 	bl	810326c <RCCEx_PLL3_Config>
 8102062:	4603      	mov	r3, r0
 8102064:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8102068:	e006      	b.n	8102078 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 810206a:	2301      	movs	r3, #1
 810206c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8102070:	e002      	b.n	8102078 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8102072:	bf00      	nop
 8102074:	e000      	b.n	8102078 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8102076:	bf00      	nop
    }

    if (ret == HAL_OK)
 8102078:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810207c:	2b00      	cmp	r3, #0
 810207e:	d10b      	bne.n	8102098 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8102080:	4b8e      	ldr	r3, [pc, #568]	@ (81022bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8102082:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8102084:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8102088:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810208c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8102090:	4a8a      	ldr	r2, [pc, #552]	@ (81022bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8102092:	430b      	orrs	r3, r1
 8102094:	6593      	str	r3, [r2, #88]	@ 0x58
 8102096:	e003      	b.n	81020a0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102098:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810209c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 81020a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81020a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 81020a8:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 81020ac:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 81020b0:	2300      	movs	r3, #0
 81020b2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 81020b6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 81020ba:	460b      	mov	r3, r1
 81020bc:	4313      	orrs	r3, r2
 81020be:	d03a      	beq.n	8102136 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 81020c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81020c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 81020c6:	2b30      	cmp	r3, #48	@ 0x30
 81020c8:	d01f      	beq.n	810210a <HAL_RCCEx_PeriphCLKConfig+0x416>
 81020ca:	2b30      	cmp	r3, #48	@ 0x30
 81020cc:	d819      	bhi.n	8102102 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 81020ce:	2b20      	cmp	r3, #32
 81020d0:	d00c      	beq.n	81020ec <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 81020d2:	2b20      	cmp	r3, #32
 81020d4:	d815      	bhi.n	8102102 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 81020d6:	2b00      	cmp	r3, #0
 81020d8:	d019      	beq.n	810210e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 81020da:	2b10      	cmp	r3, #16
 81020dc:	d111      	bne.n	8102102 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81020de:	4b77      	ldr	r3, [pc, #476]	@ (81022bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81020e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81020e2:	4a76      	ldr	r2, [pc, #472]	@ (81022bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81020e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81020e8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 81020ea:	e011      	b.n	8102110 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 81020ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81020f0:	3308      	adds	r3, #8
 81020f2:	2102      	movs	r1, #2
 81020f4:	4618      	mov	r0, r3
 81020f6:	f001 f807 	bl	8103108 <RCCEx_PLL2_Config>
 81020fa:	4603      	mov	r3, r0
 81020fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8102100:	e006      	b.n	8102110 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8102102:	2301      	movs	r3, #1
 8102104:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8102108:	e002      	b.n	8102110 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 810210a:	bf00      	nop
 810210c:	e000      	b.n	8102110 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 810210e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8102110:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102114:	2b00      	cmp	r3, #0
 8102116:	d10a      	bne.n	810212e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8102118:	4b68      	ldr	r3, [pc, #416]	@ (81022bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810211a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810211c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8102120:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102124:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8102126:	4a65      	ldr	r2, [pc, #404]	@ (81022bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8102128:	430b      	orrs	r3, r1
 810212a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 810212c:	e003      	b.n	8102136 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810212e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102132:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8102136:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810213a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810213e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8102142:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8102146:	2300      	movs	r3, #0
 8102148:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 810214c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8102150:	460b      	mov	r3, r1
 8102152:	4313      	orrs	r3, r2
 8102154:	d051      	beq.n	81021fa <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8102156:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810215a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 810215c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8102160:	d035      	beq.n	81021ce <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8102162:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8102166:	d82e      	bhi.n	81021c6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8102168:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 810216c:	d031      	beq.n	81021d2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 810216e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8102172:	d828      	bhi.n	81021c6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8102174:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8102178:	d01a      	beq.n	81021b0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 810217a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 810217e:	d822      	bhi.n	81021c6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8102180:	2b00      	cmp	r3, #0
 8102182:	d003      	beq.n	810218c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8102184:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8102188:	d007      	beq.n	810219a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 810218a:	e01c      	b.n	81021c6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810218c:	4b4b      	ldr	r3, [pc, #300]	@ (81022bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810218e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8102190:	4a4a      	ldr	r2, [pc, #296]	@ (81022bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8102192:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8102196:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8102198:	e01c      	b.n	81021d4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810219a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810219e:	3308      	adds	r3, #8
 81021a0:	2100      	movs	r1, #0
 81021a2:	4618      	mov	r0, r3
 81021a4:	f000 ffb0 	bl	8103108 <RCCEx_PLL2_Config>
 81021a8:	4603      	mov	r3, r0
 81021aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 81021ae:	e011      	b.n	81021d4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 81021b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81021b4:	3328      	adds	r3, #40	@ 0x28
 81021b6:	2100      	movs	r1, #0
 81021b8:	4618      	mov	r0, r3
 81021ba:	f001 f857 	bl	810326c <RCCEx_PLL3_Config>
 81021be:	4603      	mov	r3, r0
 81021c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 81021c4:	e006      	b.n	81021d4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81021c6:	2301      	movs	r3, #1
 81021c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81021cc:	e002      	b.n	81021d4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 81021ce:	bf00      	nop
 81021d0:	e000      	b.n	81021d4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 81021d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 81021d4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81021d8:	2b00      	cmp	r3, #0
 81021da:	d10a      	bne.n	81021f2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 81021dc:	4b37      	ldr	r3, [pc, #220]	@ (81022bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81021de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81021e0:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 81021e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81021e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 81021ea:	4a34      	ldr	r2, [pc, #208]	@ (81022bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81021ec:	430b      	orrs	r3, r1
 81021ee:	6513      	str	r3, [r2, #80]	@ 0x50
 81021f0:	e003      	b.n	81021fa <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81021f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81021f6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 81021fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81021fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102202:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8102206:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 810220a:	2300      	movs	r3, #0
 810220c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8102210:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8102214:	460b      	mov	r3, r1
 8102216:	4313      	orrs	r3, r2
 8102218:	d056      	beq.n	81022c8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 810221a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810221e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8102220:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8102224:	d033      	beq.n	810228e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8102226:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 810222a:	d82c      	bhi.n	8102286 <HAL_RCCEx_PeriphCLKConfig+0x592>
 810222c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8102230:	d02f      	beq.n	8102292 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8102232:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8102236:	d826      	bhi.n	8102286 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8102238:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 810223c:	d02b      	beq.n	8102296 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 810223e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8102242:	d820      	bhi.n	8102286 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8102244:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8102248:	d012      	beq.n	8102270 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 810224a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 810224e:	d81a      	bhi.n	8102286 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8102250:	2b00      	cmp	r3, #0
 8102252:	d022      	beq.n	810229a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8102254:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8102258:	d115      	bne.n	8102286 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 810225a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810225e:	3308      	adds	r3, #8
 8102260:	2101      	movs	r1, #1
 8102262:	4618      	mov	r0, r3
 8102264:	f000 ff50 	bl	8103108 <RCCEx_PLL2_Config>
 8102268:	4603      	mov	r3, r0
 810226a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 810226e:	e015      	b.n	810229c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8102270:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102274:	3328      	adds	r3, #40	@ 0x28
 8102276:	2101      	movs	r1, #1
 8102278:	4618      	mov	r0, r3
 810227a:	f000 fff7 	bl	810326c <RCCEx_PLL3_Config>
 810227e:	4603      	mov	r3, r0
 8102280:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8102284:	e00a      	b.n	810229c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8102286:	2301      	movs	r3, #1
 8102288:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810228c:	e006      	b.n	810229c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 810228e:	bf00      	nop
 8102290:	e004      	b.n	810229c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8102292:	bf00      	nop
 8102294:	e002      	b.n	810229c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8102296:	bf00      	nop
 8102298:	e000      	b.n	810229c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 810229a:	bf00      	nop
    }

    if (ret == HAL_OK)
 810229c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81022a0:	2b00      	cmp	r3, #0
 81022a2:	d10d      	bne.n	81022c0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 81022a4:	4b05      	ldr	r3, [pc, #20]	@ (81022bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81022a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81022a8:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 81022ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81022b0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 81022b2:	4a02      	ldr	r2, [pc, #8]	@ (81022bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81022b4:	430b      	orrs	r3, r1
 81022b6:	6513      	str	r3, [r2, #80]	@ 0x50
 81022b8:	e006      	b.n	81022c8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 81022ba:	bf00      	nop
 81022bc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 81022c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81022c4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 81022c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81022cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 81022d0:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 81022d4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 81022d8:	2300      	movs	r3, #0
 81022da:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 81022de:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 81022e2:	460b      	mov	r3, r1
 81022e4:	4313      	orrs	r3, r2
 81022e6:	d055      	beq.n	8102394 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 81022e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81022ec:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 81022f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 81022f4:	d033      	beq.n	810235e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 81022f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 81022fa:	d82c      	bhi.n	8102356 <HAL_RCCEx_PeriphCLKConfig+0x662>
 81022fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8102300:	d02f      	beq.n	8102362 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8102302:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8102306:	d826      	bhi.n	8102356 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8102308:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 810230c:	d02b      	beq.n	8102366 <HAL_RCCEx_PeriphCLKConfig+0x672>
 810230e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8102312:	d820      	bhi.n	8102356 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8102314:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8102318:	d012      	beq.n	8102340 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 810231a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810231e:	d81a      	bhi.n	8102356 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8102320:	2b00      	cmp	r3, #0
 8102322:	d022      	beq.n	810236a <HAL_RCCEx_PeriphCLKConfig+0x676>
 8102324:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8102328:	d115      	bne.n	8102356 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 810232a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810232e:	3308      	adds	r3, #8
 8102330:	2101      	movs	r1, #1
 8102332:	4618      	mov	r0, r3
 8102334:	f000 fee8 	bl	8103108 <RCCEx_PLL2_Config>
 8102338:	4603      	mov	r3, r0
 810233a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 810233e:	e015      	b.n	810236c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8102340:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102344:	3328      	adds	r3, #40	@ 0x28
 8102346:	2101      	movs	r1, #1
 8102348:	4618      	mov	r0, r3
 810234a:	f000 ff8f 	bl	810326c <RCCEx_PLL3_Config>
 810234e:	4603      	mov	r3, r0
 8102350:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8102354:	e00a      	b.n	810236c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8102356:	2301      	movs	r3, #1
 8102358:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810235c:	e006      	b.n	810236c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 810235e:	bf00      	nop
 8102360:	e004      	b.n	810236c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8102362:	bf00      	nop
 8102364:	e002      	b.n	810236c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8102366:	bf00      	nop
 8102368:	e000      	b.n	810236c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 810236a:	bf00      	nop
    }

    if (ret == HAL_OK)
 810236c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102370:	2b00      	cmp	r3, #0
 8102372:	d10b      	bne.n	810238c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8102374:	4ba4      	ldr	r3, [pc, #656]	@ (8102608 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8102376:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8102378:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 810237c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102380:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8102384:	4aa0      	ldr	r2, [pc, #640]	@ (8102608 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8102386:	430b      	orrs	r3, r1
 8102388:	6593      	str	r3, [r2, #88]	@ 0x58
 810238a:	e003      	b.n	8102394 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810238c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102390:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8102394:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102398:	e9d3 2300 	ldrd	r2, r3, [r3]
 810239c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 81023a0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 81023a4:	2300      	movs	r3, #0
 81023a6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 81023aa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 81023ae:	460b      	mov	r3, r1
 81023b0:	4313      	orrs	r3, r2
 81023b2:	d037      	beq.n	8102424 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 81023b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81023b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 81023ba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81023be:	d00e      	beq.n	81023de <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 81023c0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81023c4:	d816      	bhi.n	81023f4 <HAL_RCCEx_PeriphCLKConfig+0x700>
 81023c6:	2b00      	cmp	r3, #0
 81023c8:	d018      	beq.n	81023fc <HAL_RCCEx_PeriphCLKConfig+0x708>
 81023ca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 81023ce:	d111      	bne.n	81023f4 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81023d0:	4b8d      	ldr	r3, [pc, #564]	@ (8102608 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81023d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81023d4:	4a8c      	ldr	r2, [pc, #560]	@ (8102608 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81023d6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81023da:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 81023dc:	e00f      	b.n	81023fe <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 81023de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81023e2:	3308      	adds	r3, #8
 81023e4:	2101      	movs	r1, #1
 81023e6:	4618      	mov	r0, r3
 81023e8:	f000 fe8e 	bl	8103108 <RCCEx_PLL2_Config>
 81023ec:	4603      	mov	r3, r0
 81023ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 81023f2:	e004      	b.n	81023fe <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81023f4:	2301      	movs	r3, #1
 81023f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81023fa:	e000      	b.n	81023fe <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 81023fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 81023fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102402:	2b00      	cmp	r3, #0
 8102404:	d10a      	bne.n	810241c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8102406:	4b80      	ldr	r3, [pc, #512]	@ (8102608 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8102408:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810240a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 810240e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102412:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8102414:	4a7c      	ldr	r2, [pc, #496]	@ (8102608 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8102416:	430b      	orrs	r3, r1
 8102418:	6513      	str	r3, [r2, #80]	@ 0x50
 810241a:	e003      	b.n	8102424 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810241c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102420:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8102424:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102428:	e9d3 2300 	ldrd	r2, r3, [r3]
 810242c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8102430:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8102434:	2300      	movs	r3, #0
 8102436:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 810243a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 810243e:	460b      	mov	r3, r1
 8102440:	4313      	orrs	r3, r2
 8102442:	d039      	beq.n	81024b8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8102444:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102448:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 810244a:	2b03      	cmp	r3, #3
 810244c:	d81c      	bhi.n	8102488 <HAL_RCCEx_PeriphCLKConfig+0x794>
 810244e:	a201      	add	r2, pc, #4	@ (adr r2, 8102454 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8102450:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8102454:	08102491 	.word	0x08102491
 8102458:	08102465 	.word	0x08102465
 810245c:	08102473 	.word	0x08102473
 8102460:	08102491 	.word	0x08102491
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102464:	4b68      	ldr	r3, [pc, #416]	@ (8102608 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8102466:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8102468:	4a67      	ldr	r2, [pc, #412]	@ (8102608 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810246a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810246e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8102470:	e00f      	b.n	8102492 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8102472:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102476:	3308      	adds	r3, #8
 8102478:	2102      	movs	r1, #2
 810247a:	4618      	mov	r0, r3
 810247c:	f000 fe44 	bl	8103108 <RCCEx_PLL2_Config>
 8102480:	4603      	mov	r3, r0
 8102482:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8102486:	e004      	b.n	8102492 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8102488:	2301      	movs	r3, #1
 810248a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810248e:	e000      	b.n	8102492 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8102490:	bf00      	nop
    }

    if (ret == HAL_OK)
 8102492:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102496:	2b00      	cmp	r3, #0
 8102498:	d10a      	bne.n	81024b0 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 810249a:	4b5b      	ldr	r3, [pc, #364]	@ (8102608 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810249c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810249e:	f023 0103 	bic.w	r1, r3, #3
 81024a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81024a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 81024a8:	4a57      	ldr	r2, [pc, #348]	@ (8102608 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81024aa:	430b      	orrs	r3, r1
 81024ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 81024ae:	e003      	b.n	81024b8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81024b0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81024b4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 81024b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81024bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 81024c0:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 81024c4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 81024c8:	2300      	movs	r3, #0
 81024ca:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 81024ce:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 81024d2:	460b      	mov	r3, r1
 81024d4:	4313      	orrs	r3, r2
 81024d6:	f000 809f 	beq.w	8102618 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 81024da:	4b4c      	ldr	r3, [pc, #304]	@ (810260c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 81024dc:	681b      	ldr	r3, [r3, #0]
 81024de:	4a4b      	ldr	r2, [pc, #300]	@ (810260c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 81024e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 81024e4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 81024e6:	f7fe feff 	bl	81012e8 <HAL_GetTick>
 81024ea:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 81024ee:	e00b      	b.n	8102508 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 81024f0:	f7fe fefa 	bl	81012e8 <HAL_GetTick>
 81024f4:	4602      	mov	r2, r0
 81024f6:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 81024fa:	1ad3      	subs	r3, r2, r3
 81024fc:	2b64      	cmp	r3, #100	@ 0x64
 81024fe:	d903      	bls.n	8102508 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8102500:	2303      	movs	r3, #3
 8102502:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8102506:	e005      	b.n	8102514 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8102508:	4b40      	ldr	r3, [pc, #256]	@ (810260c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 810250a:	681b      	ldr	r3, [r3, #0]
 810250c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8102510:	2b00      	cmp	r3, #0
 8102512:	d0ed      	beq.n	81024f0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8102514:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102518:	2b00      	cmp	r3, #0
 810251a:	d179      	bne.n	8102610 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 810251c:	4b3a      	ldr	r3, [pc, #232]	@ (8102608 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810251e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8102520:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102524:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8102528:	4053      	eors	r3, r2
 810252a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 810252e:	2b00      	cmp	r3, #0
 8102530:	d015      	beq.n	810255e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8102532:	4b35      	ldr	r3, [pc, #212]	@ (8102608 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8102534:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8102536:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 810253a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 810253e:	4b32      	ldr	r3, [pc, #200]	@ (8102608 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8102540:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8102542:	4a31      	ldr	r2, [pc, #196]	@ (8102608 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8102544:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8102548:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 810254a:	4b2f      	ldr	r3, [pc, #188]	@ (8102608 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810254c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 810254e:	4a2e      	ldr	r2, [pc, #184]	@ (8102608 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8102550:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8102554:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8102556:	4a2c      	ldr	r2, [pc, #176]	@ (8102608 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8102558:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810255c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 810255e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102562:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8102566:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810256a:	d118      	bne.n	810259e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 810256c:	f7fe febc 	bl	81012e8 <HAL_GetTick>
 8102570:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8102574:	e00d      	b.n	8102592 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8102576:	f7fe feb7 	bl	81012e8 <HAL_GetTick>
 810257a:	4602      	mov	r2, r0
 810257c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8102580:	1ad2      	subs	r2, r2, r3
 8102582:	f241 3388 	movw	r3, #5000	@ 0x1388
 8102586:	429a      	cmp	r2, r3
 8102588:	d903      	bls.n	8102592 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 810258a:	2303      	movs	r3, #3
 810258c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8102590:	e005      	b.n	810259e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8102592:	4b1d      	ldr	r3, [pc, #116]	@ (8102608 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8102594:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8102596:	f003 0302 	and.w	r3, r3, #2
 810259a:	2b00      	cmp	r3, #0
 810259c:	d0eb      	beq.n	8102576 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 810259e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81025a2:	2b00      	cmp	r3, #0
 81025a4:	d12b      	bne.n	81025fe <HAL_RCCEx_PeriphCLKConfig+0x90a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 81025a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81025aa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 81025ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 81025b2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 81025b6:	d110      	bne.n	81025da <HAL_RCCEx_PeriphCLKConfig+0x8e6>
 81025b8:	4b13      	ldr	r3, [pc, #76]	@ (8102608 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81025ba:	691b      	ldr	r3, [r3, #16]
 81025bc:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 81025c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81025c4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 81025c8:	091b      	lsrs	r3, r3, #4
 81025ca:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 81025ce:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 81025d2:	4a0d      	ldr	r2, [pc, #52]	@ (8102608 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81025d4:	430b      	orrs	r3, r1
 81025d6:	6113      	str	r3, [r2, #16]
 81025d8:	e005      	b.n	81025e6 <HAL_RCCEx_PeriphCLKConfig+0x8f2>
 81025da:	4b0b      	ldr	r3, [pc, #44]	@ (8102608 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81025dc:	691b      	ldr	r3, [r3, #16]
 81025de:	4a0a      	ldr	r2, [pc, #40]	@ (8102608 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81025e0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 81025e4:	6113      	str	r3, [r2, #16]
 81025e6:	4b08      	ldr	r3, [pc, #32]	@ (8102608 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81025e8:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 81025ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81025ee:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 81025f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 81025f6:	4a04      	ldr	r2, [pc, #16]	@ (8102608 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81025f8:	430b      	orrs	r3, r1
 81025fa:	6713      	str	r3, [r2, #112]	@ 0x70
 81025fc:	e00c      	b.n	8102618 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 81025fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102602:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8102606:	e007      	b.n	8102618 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8102608:	58024400 	.word	0x58024400
 810260c:	58024800 	.word	0x58024800
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102610:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102614:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8102618:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810261c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102620:	f002 0301 	and.w	r3, r2, #1
 8102624:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8102628:	2300      	movs	r3, #0
 810262a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 810262e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8102632:	460b      	mov	r3, r1
 8102634:	4313      	orrs	r3, r2
 8102636:	f000 8089 	beq.w	810274c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 810263a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810263e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8102640:	2b28      	cmp	r3, #40	@ 0x28
 8102642:	d86b      	bhi.n	810271c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8102644:	a201      	add	r2, pc, #4	@ (adr r2, 810264c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8102646:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810264a:	bf00      	nop
 810264c:	08102725 	.word	0x08102725
 8102650:	0810271d 	.word	0x0810271d
 8102654:	0810271d 	.word	0x0810271d
 8102658:	0810271d 	.word	0x0810271d
 810265c:	0810271d 	.word	0x0810271d
 8102660:	0810271d 	.word	0x0810271d
 8102664:	0810271d 	.word	0x0810271d
 8102668:	0810271d 	.word	0x0810271d
 810266c:	081026f1 	.word	0x081026f1
 8102670:	0810271d 	.word	0x0810271d
 8102674:	0810271d 	.word	0x0810271d
 8102678:	0810271d 	.word	0x0810271d
 810267c:	0810271d 	.word	0x0810271d
 8102680:	0810271d 	.word	0x0810271d
 8102684:	0810271d 	.word	0x0810271d
 8102688:	0810271d 	.word	0x0810271d
 810268c:	08102707 	.word	0x08102707
 8102690:	0810271d 	.word	0x0810271d
 8102694:	0810271d 	.word	0x0810271d
 8102698:	0810271d 	.word	0x0810271d
 810269c:	0810271d 	.word	0x0810271d
 81026a0:	0810271d 	.word	0x0810271d
 81026a4:	0810271d 	.word	0x0810271d
 81026a8:	0810271d 	.word	0x0810271d
 81026ac:	08102725 	.word	0x08102725
 81026b0:	0810271d 	.word	0x0810271d
 81026b4:	0810271d 	.word	0x0810271d
 81026b8:	0810271d 	.word	0x0810271d
 81026bc:	0810271d 	.word	0x0810271d
 81026c0:	0810271d 	.word	0x0810271d
 81026c4:	0810271d 	.word	0x0810271d
 81026c8:	0810271d 	.word	0x0810271d
 81026cc:	08102725 	.word	0x08102725
 81026d0:	0810271d 	.word	0x0810271d
 81026d4:	0810271d 	.word	0x0810271d
 81026d8:	0810271d 	.word	0x0810271d
 81026dc:	0810271d 	.word	0x0810271d
 81026e0:	0810271d 	.word	0x0810271d
 81026e4:	0810271d 	.word	0x0810271d
 81026e8:	0810271d 	.word	0x0810271d
 81026ec:	08102725 	.word	0x08102725
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 81026f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81026f4:	3308      	adds	r3, #8
 81026f6:	2101      	movs	r1, #1
 81026f8:	4618      	mov	r0, r3
 81026fa:	f000 fd05 	bl	8103108 <RCCEx_PLL2_Config>
 81026fe:	4603      	mov	r3, r0
 8102700:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8102704:	e00f      	b.n	8102726 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8102706:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810270a:	3328      	adds	r3, #40	@ 0x28
 810270c:	2101      	movs	r1, #1
 810270e:	4618      	mov	r0, r3
 8102710:	f000 fdac 	bl	810326c <RCCEx_PLL3_Config>
 8102714:	4603      	mov	r3, r0
 8102716:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 810271a:	e004      	b.n	8102726 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810271c:	2301      	movs	r3, #1
 810271e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8102722:	e000      	b.n	8102726 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8102724:	bf00      	nop
    }

    if (ret == HAL_OK)
 8102726:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810272a:	2b00      	cmp	r3, #0
 810272c:	d10a      	bne.n	8102744 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 810272e:	4bbf      	ldr	r3, [pc, #764]	@ (8102a2c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8102730:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8102732:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8102736:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810273a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 810273c:	4abb      	ldr	r2, [pc, #748]	@ (8102a2c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 810273e:	430b      	orrs	r3, r1
 8102740:	6553      	str	r3, [r2, #84]	@ 0x54
 8102742:	e003      	b.n	810274c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102744:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102748:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 810274c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102750:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102754:	f002 0302 	and.w	r3, r2, #2
 8102758:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 810275c:	2300      	movs	r3, #0
 810275e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8102762:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8102766:	460b      	mov	r3, r1
 8102768:	4313      	orrs	r3, r2
 810276a:	d041      	beq.n	81027f0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 810276c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102770:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8102772:	2b05      	cmp	r3, #5
 8102774:	d824      	bhi.n	81027c0 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8102776:	a201      	add	r2, pc, #4	@ (adr r2, 810277c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8102778:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810277c:	081027c9 	.word	0x081027c9
 8102780:	08102795 	.word	0x08102795
 8102784:	081027ab 	.word	0x081027ab
 8102788:	081027c9 	.word	0x081027c9
 810278c:	081027c9 	.word	0x081027c9
 8102790:	081027c9 	.word	0x081027c9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8102794:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102798:	3308      	adds	r3, #8
 810279a:	2101      	movs	r1, #1
 810279c:	4618      	mov	r0, r3
 810279e:	f000 fcb3 	bl	8103108 <RCCEx_PLL2_Config>
 81027a2:	4603      	mov	r3, r0
 81027a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 81027a8:	e00f      	b.n	81027ca <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 81027aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81027ae:	3328      	adds	r3, #40	@ 0x28
 81027b0:	2101      	movs	r1, #1
 81027b2:	4618      	mov	r0, r3
 81027b4:	f000 fd5a 	bl	810326c <RCCEx_PLL3_Config>
 81027b8:	4603      	mov	r3, r0
 81027ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 81027be:	e004      	b.n	81027ca <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81027c0:	2301      	movs	r3, #1
 81027c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81027c6:	e000      	b.n	81027ca <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 81027c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 81027ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81027ce:	2b00      	cmp	r3, #0
 81027d0:	d10a      	bne.n	81027e8 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 81027d2:	4b96      	ldr	r3, [pc, #600]	@ (8102a2c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 81027d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81027d6:	f023 0107 	bic.w	r1, r3, #7
 81027da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81027de:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 81027e0:	4a92      	ldr	r2, [pc, #584]	@ (8102a2c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 81027e2:	430b      	orrs	r3, r1
 81027e4:	6553      	str	r3, [r2, #84]	@ 0x54
 81027e6:	e003      	b.n	81027f0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81027e8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81027ec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 81027f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81027f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 81027f8:	f002 0304 	and.w	r3, r2, #4
 81027fc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8102800:	2300      	movs	r3, #0
 8102802:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8102806:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 810280a:	460b      	mov	r3, r1
 810280c:	4313      	orrs	r3, r2
 810280e:	d044      	beq.n	810289a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8102810:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102814:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8102818:	2b05      	cmp	r3, #5
 810281a:	d825      	bhi.n	8102868 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 810281c:	a201      	add	r2, pc, #4	@ (adr r2, 8102824 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 810281e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8102822:	bf00      	nop
 8102824:	08102871 	.word	0x08102871
 8102828:	0810283d 	.word	0x0810283d
 810282c:	08102853 	.word	0x08102853
 8102830:	08102871 	.word	0x08102871
 8102834:	08102871 	.word	0x08102871
 8102838:	08102871 	.word	0x08102871
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 810283c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102840:	3308      	adds	r3, #8
 8102842:	2101      	movs	r1, #1
 8102844:	4618      	mov	r0, r3
 8102846:	f000 fc5f 	bl	8103108 <RCCEx_PLL2_Config>
 810284a:	4603      	mov	r3, r0
 810284c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8102850:	e00f      	b.n	8102872 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8102852:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102856:	3328      	adds	r3, #40	@ 0x28
 8102858:	2101      	movs	r1, #1
 810285a:	4618      	mov	r0, r3
 810285c:	f000 fd06 	bl	810326c <RCCEx_PLL3_Config>
 8102860:	4603      	mov	r3, r0
 8102862:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8102866:	e004      	b.n	8102872 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8102868:	2301      	movs	r3, #1
 810286a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810286e:	e000      	b.n	8102872 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8102870:	bf00      	nop
    }

    if (ret == HAL_OK)
 8102872:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102876:	2b00      	cmp	r3, #0
 8102878:	d10b      	bne.n	8102892 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 810287a:	4b6c      	ldr	r3, [pc, #432]	@ (8102a2c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 810287c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810287e:	f023 0107 	bic.w	r1, r3, #7
 8102882:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102886:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 810288a:	4a68      	ldr	r2, [pc, #416]	@ (8102a2c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 810288c:	430b      	orrs	r3, r1
 810288e:	6593      	str	r3, [r2, #88]	@ 0x58
 8102890:	e003      	b.n	810289a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102892:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102896:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 810289a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810289e:	e9d3 2300 	ldrd	r2, r3, [r3]
 81028a2:	f002 0320 	and.w	r3, r2, #32
 81028a6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 81028aa:	2300      	movs	r3, #0
 81028ac:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 81028b0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 81028b4:	460b      	mov	r3, r1
 81028b6:	4313      	orrs	r3, r2
 81028b8:	d055      	beq.n	8102966 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 81028ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81028be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 81028c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 81028c6:	d033      	beq.n	8102930 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 81028c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 81028cc:	d82c      	bhi.n	8102928 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 81028ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 81028d2:	d02f      	beq.n	8102934 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 81028d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 81028d8:	d826      	bhi.n	8102928 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 81028da:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 81028de:	d02b      	beq.n	8102938 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 81028e0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 81028e4:	d820      	bhi.n	8102928 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 81028e6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81028ea:	d012      	beq.n	8102912 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 81028ec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81028f0:	d81a      	bhi.n	8102928 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 81028f2:	2b00      	cmp	r3, #0
 81028f4:	d022      	beq.n	810293c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 81028f6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 81028fa:	d115      	bne.n	8102928 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81028fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102900:	3308      	adds	r3, #8
 8102902:	2100      	movs	r1, #0
 8102904:	4618      	mov	r0, r3
 8102906:	f000 fbff 	bl	8103108 <RCCEx_PLL2_Config>
 810290a:	4603      	mov	r3, r0
 810290c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8102910:	e015      	b.n	810293e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8102912:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102916:	3328      	adds	r3, #40	@ 0x28
 8102918:	2102      	movs	r1, #2
 810291a:	4618      	mov	r0, r3
 810291c:	f000 fca6 	bl	810326c <RCCEx_PLL3_Config>
 8102920:	4603      	mov	r3, r0
 8102922:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8102926:	e00a      	b.n	810293e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8102928:	2301      	movs	r3, #1
 810292a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810292e:	e006      	b.n	810293e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8102930:	bf00      	nop
 8102932:	e004      	b.n	810293e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8102934:	bf00      	nop
 8102936:	e002      	b.n	810293e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8102938:	bf00      	nop
 810293a:	e000      	b.n	810293e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 810293c:	bf00      	nop
    }

    if (ret == HAL_OK)
 810293e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102942:	2b00      	cmp	r3, #0
 8102944:	d10b      	bne.n	810295e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8102946:	4b39      	ldr	r3, [pc, #228]	@ (8102a2c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8102948:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810294a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 810294e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102952:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8102956:	4a35      	ldr	r2, [pc, #212]	@ (8102a2c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8102958:	430b      	orrs	r3, r1
 810295a:	6553      	str	r3, [r2, #84]	@ 0x54
 810295c:	e003      	b.n	8102966 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810295e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102962:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8102966:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810296a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810296e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8102972:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8102976:	2300      	movs	r3, #0
 8102978:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 810297c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8102980:	460b      	mov	r3, r1
 8102982:	4313      	orrs	r3, r2
 8102984:	d058      	beq.n	8102a38 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8102986:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810298a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 810298e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8102992:	d033      	beq.n	81029fc <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8102994:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8102998:	d82c      	bhi.n	81029f4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 810299a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 810299e:	d02f      	beq.n	8102a00 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 81029a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 81029a4:	d826      	bhi.n	81029f4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 81029a6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 81029aa:	d02b      	beq.n	8102a04 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 81029ac:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 81029b0:	d820      	bhi.n	81029f4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 81029b2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 81029b6:	d012      	beq.n	81029de <HAL_RCCEx_PeriphCLKConfig+0xcea>
 81029b8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 81029bc:	d81a      	bhi.n	81029f4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 81029be:	2b00      	cmp	r3, #0
 81029c0:	d022      	beq.n	8102a08 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 81029c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 81029c6:	d115      	bne.n	81029f4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81029c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81029cc:	3308      	adds	r3, #8
 81029ce:	2100      	movs	r1, #0
 81029d0:	4618      	mov	r0, r3
 81029d2:	f000 fb99 	bl	8103108 <RCCEx_PLL2_Config>
 81029d6:	4603      	mov	r3, r0
 81029d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 81029dc:	e015      	b.n	8102a0a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 81029de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81029e2:	3328      	adds	r3, #40	@ 0x28
 81029e4:	2102      	movs	r1, #2
 81029e6:	4618      	mov	r0, r3
 81029e8:	f000 fc40 	bl	810326c <RCCEx_PLL3_Config>
 81029ec:	4603      	mov	r3, r0
 81029ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 81029f2:	e00a      	b.n	8102a0a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81029f4:	2301      	movs	r3, #1
 81029f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81029fa:	e006      	b.n	8102a0a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 81029fc:	bf00      	nop
 81029fe:	e004      	b.n	8102a0a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8102a00:	bf00      	nop
 8102a02:	e002      	b.n	8102a0a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8102a04:	bf00      	nop
 8102a06:	e000      	b.n	8102a0a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8102a08:	bf00      	nop
    }

    if (ret == HAL_OK)
 8102a0a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102a0e:	2b00      	cmp	r3, #0
 8102a10:	d10e      	bne.n	8102a30 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8102a12:	4b06      	ldr	r3, [pc, #24]	@ (8102a2c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8102a14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8102a16:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8102a1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102a1e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8102a22:	4a02      	ldr	r2, [pc, #8]	@ (8102a2c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8102a24:	430b      	orrs	r3, r1
 8102a26:	6593      	str	r3, [r2, #88]	@ 0x58
 8102a28:	e006      	b.n	8102a38 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8102a2a:	bf00      	nop
 8102a2c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102a30:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102a34:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8102a38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102a40:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8102a44:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8102a48:	2300      	movs	r3, #0
 8102a4a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8102a4e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8102a52:	460b      	mov	r3, r1
 8102a54:	4313      	orrs	r3, r2
 8102a56:	d055      	beq.n	8102b04 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8102a58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102a5c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8102a60:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8102a64:	d033      	beq.n	8102ace <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8102a66:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8102a6a:	d82c      	bhi.n	8102ac6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8102a6c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8102a70:	d02f      	beq.n	8102ad2 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8102a72:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8102a76:	d826      	bhi.n	8102ac6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8102a78:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8102a7c:	d02b      	beq.n	8102ad6 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8102a7e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8102a82:	d820      	bhi.n	8102ac6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8102a84:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8102a88:	d012      	beq.n	8102ab0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8102a8a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8102a8e:	d81a      	bhi.n	8102ac6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8102a90:	2b00      	cmp	r3, #0
 8102a92:	d022      	beq.n	8102ada <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8102a94:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8102a98:	d115      	bne.n	8102ac6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8102a9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102a9e:	3308      	adds	r3, #8
 8102aa0:	2100      	movs	r1, #0
 8102aa2:	4618      	mov	r0, r3
 8102aa4:	f000 fb30 	bl	8103108 <RCCEx_PLL2_Config>
 8102aa8:	4603      	mov	r3, r0
 8102aaa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8102aae:	e015      	b.n	8102adc <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8102ab0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102ab4:	3328      	adds	r3, #40	@ 0x28
 8102ab6:	2102      	movs	r1, #2
 8102ab8:	4618      	mov	r0, r3
 8102aba:	f000 fbd7 	bl	810326c <RCCEx_PLL3_Config>
 8102abe:	4603      	mov	r3, r0
 8102ac0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8102ac4:	e00a      	b.n	8102adc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8102ac6:	2301      	movs	r3, #1
 8102ac8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8102acc:	e006      	b.n	8102adc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8102ace:	bf00      	nop
 8102ad0:	e004      	b.n	8102adc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8102ad2:	bf00      	nop
 8102ad4:	e002      	b.n	8102adc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8102ad6:	bf00      	nop
 8102ad8:	e000      	b.n	8102adc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8102ada:	bf00      	nop
    }

    if (ret == HAL_OK)
 8102adc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102ae0:	2b00      	cmp	r3, #0
 8102ae2:	d10b      	bne.n	8102afc <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8102ae4:	4ba1      	ldr	r3, [pc, #644]	@ (8102d6c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8102ae6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8102ae8:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8102aec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102af0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8102af4:	4a9d      	ldr	r2, [pc, #628]	@ (8102d6c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8102af6:	430b      	orrs	r3, r1
 8102af8:	6593      	str	r3, [r2, #88]	@ 0x58
 8102afa:	e003      	b.n	8102b04 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102afc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102b00:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8102b04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102b0c:	f002 0308 	and.w	r3, r2, #8
 8102b10:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8102b14:	2300      	movs	r3, #0
 8102b16:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8102b1a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8102b1e:	460b      	mov	r3, r1
 8102b20:	4313      	orrs	r3, r2
 8102b22:	d01e      	beq.n	8102b62 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8102b24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102b28:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8102b2c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8102b30:	d10c      	bne.n	8102b4c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8102b32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102b36:	3328      	adds	r3, #40	@ 0x28
 8102b38:	2102      	movs	r1, #2
 8102b3a:	4618      	mov	r0, r3
 8102b3c:	f000 fb96 	bl	810326c <RCCEx_PLL3_Config>
 8102b40:	4603      	mov	r3, r0
 8102b42:	2b00      	cmp	r3, #0
 8102b44:	d002      	beq.n	8102b4c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8102b46:	2301      	movs	r3, #1
 8102b48:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8102b4c:	4b87      	ldr	r3, [pc, #540]	@ (8102d6c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8102b4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8102b50:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8102b54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102b58:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8102b5c:	4a83      	ldr	r2, [pc, #524]	@ (8102d6c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8102b5e:	430b      	orrs	r3, r1
 8102b60:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8102b62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102b66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102b6a:	f002 0310 	and.w	r3, r2, #16
 8102b6e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8102b72:	2300      	movs	r3, #0
 8102b74:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8102b78:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8102b7c:	460b      	mov	r3, r1
 8102b7e:	4313      	orrs	r3, r2
 8102b80:	d01e      	beq.n	8102bc0 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8102b82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102b86:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8102b8a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8102b8e:	d10c      	bne.n	8102baa <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8102b90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102b94:	3328      	adds	r3, #40	@ 0x28
 8102b96:	2102      	movs	r1, #2
 8102b98:	4618      	mov	r0, r3
 8102b9a:	f000 fb67 	bl	810326c <RCCEx_PLL3_Config>
 8102b9e:	4603      	mov	r3, r0
 8102ba0:	2b00      	cmp	r3, #0
 8102ba2:	d002      	beq.n	8102baa <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8102ba4:	2301      	movs	r3, #1
 8102ba6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8102baa:	4b70      	ldr	r3, [pc, #448]	@ (8102d6c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8102bac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8102bae:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8102bb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102bb6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8102bba:	4a6c      	ldr	r2, [pc, #432]	@ (8102d6c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8102bbc:	430b      	orrs	r3, r1
 8102bbe:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8102bc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102bc8:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8102bcc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8102bd0:	2300      	movs	r3, #0
 8102bd2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8102bd6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8102bda:	460b      	mov	r3, r1
 8102bdc:	4313      	orrs	r3, r2
 8102bde:	d03e      	beq.n	8102c5e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8102be0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102be4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8102be8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8102bec:	d022      	beq.n	8102c34 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8102bee:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8102bf2:	d81b      	bhi.n	8102c2c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8102bf4:	2b00      	cmp	r3, #0
 8102bf6:	d003      	beq.n	8102c00 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8102bf8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8102bfc:	d00b      	beq.n	8102c16 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8102bfe:	e015      	b.n	8102c2c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8102c00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102c04:	3308      	adds	r3, #8
 8102c06:	2100      	movs	r1, #0
 8102c08:	4618      	mov	r0, r3
 8102c0a:	f000 fa7d 	bl	8103108 <RCCEx_PLL2_Config>
 8102c0e:	4603      	mov	r3, r0
 8102c10:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8102c14:	e00f      	b.n	8102c36 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8102c16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102c1a:	3328      	adds	r3, #40	@ 0x28
 8102c1c:	2102      	movs	r1, #2
 8102c1e:	4618      	mov	r0, r3
 8102c20:	f000 fb24 	bl	810326c <RCCEx_PLL3_Config>
 8102c24:	4603      	mov	r3, r0
 8102c26:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8102c2a:	e004      	b.n	8102c36 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8102c2c:	2301      	movs	r3, #1
 8102c2e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8102c32:	e000      	b.n	8102c36 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8102c34:	bf00      	nop
    }

    if (ret == HAL_OK)
 8102c36:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102c3a:	2b00      	cmp	r3, #0
 8102c3c:	d10b      	bne.n	8102c56 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8102c3e:	4b4b      	ldr	r3, [pc, #300]	@ (8102d6c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8102c40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8102c42:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8102c46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102c4a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8102c4e:	4a47      	ldr	r2, [pc, #284]	@ (8102d6c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8102c50:	430b      	orrs	r3, r1
 8102c52:	6593      	str	r3, [r2, #88]	@ 0x58
 8102c54:	e003      	b.n	8102c5e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102c56:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102c5a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8102c5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102c62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102c66:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8102c6a:	67bb      	str	r3, [r7, #120]	@ 0x78
 8102c6c:	2300      	movs	r3, #0
 8102c6e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8102c70:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8102c74:	460b      	mov	r3, r1
 8102c76:	4313      	orrs	r3, r2
 8102c78:	d03b      	beq.n	8102cf2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8102c7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102c7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8102c82:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8102c86:	d01f      	beq.n	8102cc8 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8102c88:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8102c8c:	d818      	bhi.n	8102cc0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8102c8e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8102c92:	d003      	beq.n	8102c9c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8102c94:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8102c98:	d007      	beq.n	8102caa <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8102c9a:	e011      	b.n	8102cc0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102c9c:	4b33      	ldr	r3, [pc, #204]	@ (8102d6c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8102c9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8102ca0:	4a32      	ldr	r2, [pc, #200]	@ (8102d6c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8102ca2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8102ca6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8102ca8:	e00f      	b.n	8102cca <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8102caa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102cae:	3328      	adds	r3, #40	@ 0x28
 8102cb0:	2101      	movs	r1, #1
 8102cb2:	4618      	mov	r0, r3
 8102cb4:	f000 fada 	bl	810326c <RCCEx_PLL3_Config>
 8102cb8:	4603      	mov	r3, r0
 8102cba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8102cbe:	e004      	b.n	8102cca <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8102cc0:	2301      	movs	r3, #1
 8102cc2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8102cc6:	e000      	b.n	8102cca <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8102cc8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8102cca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102cce:	2b00      	cmp	r3, #0
 8102cd0:	d10b      	bne.n	8102cea <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8102cd2:	4b26      	ldr	r3, [pc, #152]	@ (8102d6c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8102cd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8102cd6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8102cda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102cde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8102ce2:	4a22      	ldr	r2, [pc, #136]	@ (8102d6c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8102ce4:	430b      	orrs	r3, r1
 8102ce6:	6553      	str	r3, [r2, #84]	@ 0x54
 8102ce8:	e003      	b.n	8102cf2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102cea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102cee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8102cf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102cf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102cfa:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8102cfe:	673b      	str	r3, [r7, #112]	@ 0x70
 8102d00:	2300      	movs	r3, #0
 8102d02:	677b      	str	r3, [r7, #116]	@ 0x74
 8102d04:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8102d08:	460b      	mov	r3, r1
 8102d0a:	4313      	orrs	r3, r2
 8102d0c:	d034      	beq.n	8102d78 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8102d0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102d12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8102d14:	2b00      	cmp	r3, #0
 8102d16:	d003      	beq.n	8102d20 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8102d18:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8102d1c:	d007      	beq.n	8102d2e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8102d1e:	e011      	b.n	8102d44 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102d20:	4b12      	ldr	r3, [pc, #72]	@ (8102d6c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8102d22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8102d24:	4a11      	ldr	r2, [pc, #68]	@ (8102d6c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8102d26:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8102d2a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8102d2c:	e00e      	b.n	8102d4c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8102d2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102d32:	3308      	adds	r3, #8
 8102d34:	2102      	movs	r1, #2
 8102d36:	4618      	mov	r0, r3
 8102d38:	f000 f9e6 	bl	8103108 <RCCEx_PLL2_Config>
 8102d3c:	4603      	mov	r3, r0
 8102d3e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8102d42:	e003      	b.n	8102d4c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8102d44:	2301      	movs	r3, #1
 8102d46:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8102d4a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8102d4c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102d50:	2b00      	cmp	r3, #0
 8102d52:	d10d      	bne.n	8102d70 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8102d54:	4b05      	ldr	r3, [pc, #20]	@ (8102d6c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8102d56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8102d58:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8102d5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102d60:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8102d62:	4a02      	ldr	r2, [pc, #8]	@ (8102d6c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8102d64:	430b      	orrs	r3, r1
 8102d66:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8102d68:	e006      	b.n	8102d78 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8102d6a:	bf00      	nop
 8102d6c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102d70:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102d74:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8102d78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102d80:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8102d84:	66bb      	str	r3, [r7, #104]	@ 0x68
 8102d86:	2300      	movs	r3, #0
 8102d88:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8102d8a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8102d8e:	460b      	mov	r3, r1
 8102d90:	4313      	orrs	r3, r2
 8102d92:	d00c      	beq.n	8102dae <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8102d94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102d98:	3328      	adds	r3, #40	@ 0x28
 8102d9a:	2102      	movs	r1, #2
 8102d9c:	4618      	mov	r0, r3
 8102d9e:	f000 fa65 	bl	810326c <RCCEx_PLL3_Config>
 8102da2:	4603      	mov	r3, r0
 8102da4:	2b00      	cmp	r3, #0
 8102da6:	d002      	beq.n	8102dae <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8102da8:	2301      	movs	r3, #1
 8102daa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8102dae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102db2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102db6:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8102dba:	663b      	str	r3, [r7, #96]	@ 0x60
 8102dbc:	2300      	movs	r3, #0
 8102dbe:	667b      	str	r3, [r7, #100]	@ 0x64
 8102dc0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8102dc4:	460b      	mov	r3, r1
 8102dc6:	4313      	orrs	r3, r2
 8102dc8:	d038      	beq.n	8102e3c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8102dca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102dce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8102dd2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8102dd6:	d018      	beq.n	8102e0a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8102dd8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8102ddc:	d811      	bhi.n	8102e02 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8102dde:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8102de2:	d014      	beq.n	8102e0e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8102de4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8102de8:	d80b      	bhi.n	8102e02 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8102dea:	2b00      	cmp	r3, #0
 8102dec:	d011      	beq.n	8102e12 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8102dee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8102df2:	d106      	bne.n	8102e02 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102df4:	4bc3      	ldr	r3, [pc, #780]	@ (8103104 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8102df6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8102df8:	4ac2      	ldr	r2, [pc, #776]	@ (8103104 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8102dfa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8102dfe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8102e00:	e008      	b.n	8102e14 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8102e02:	2301      	movs	r3, #1
 8102e04:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8102e08:	e004      	b.n	8102e14 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8102e0a:	bf00      	nop
 8102e0c:	e002      	b.n	8102e14 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8102e0e:	bf00      	nop
 8102e10:	e000      	b.n	8102e14 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8102e12:	bf00      	nop
    }

    if (ret == HAL_OK)
 8102e14:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102e18:	2b00      	cmp	r3, #0
 8102e1a:	d10b      	bne.n	8102e34 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8102e1c:	4bb9      	ldr	r3, [pc, #740]	@ (8103104 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8102e1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8102e20:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8102e24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102e28:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8102e2c:	4ab5      	ldr	r2, [pc, #724]	@ (8103104 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8102e2e:	430b      	orrs	r3, r1
 8102e30:	6553      	str	r3, [r2, #84]	@ 0x54
 8102e32:	e003      	b.n	8102e3c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102e34:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102e38:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8102e3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102e44:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8102e48:	65bb      	str	r3, [r7, #88]	@ 0x58
 8102e4a:	2300      	movs	r3, #0
 8102e4c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8102e4e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8102e52:	460b      	mov	r3, r1
 8102e54:	4313      	orrs	r3, r2
 8102e56:	d009      	beq.n	8102e6c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8102e58:	4baa      	ldr	r3, [pc, #680]	@ (8103104 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8102e5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8102e5c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8102e60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102e64:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8102e66:	4aa7      	ldr	r2, [pc, #668]	@ (8103104 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8102e68:	430b      	orrs	r3, r1
 8102e6a:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8102e6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102e74:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8102e78:	653b      	str	r3, [r7, #80]	@ 0x50
 8102e7a:	2300      	movs	r3, #0
 8102e7c:	657b      	str	r3, [r7, #84]	@ 0x54
 8102e7e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8102e82:	460b      	mov	r3, r1
 8102e84:	4313      	orrs	r3, r2
 8102e86:	d00a      	beq.n	8102e9e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8102e88:	4b9e      	ldr	r3, [pc, #632]	@ (8103104 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8102e8a:	691b      	ldr	r3, [r3, #16]
 8102e8c:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8102e90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102e94:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8102e98:	4a9a      	ldr	r2, [pc, #616]	@ (8103104 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8102e9a:	430b      	orrs	r3, r1
 8102e9c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8102e9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102ea6:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8102eaa:	64bb      	str	r3, [r7, #72]	@ 0x48
 8102eac:	2300      	movs	r3, #0
 8102eae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8102eb0:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8102eb4:	460b      	mov	r3, r1
 8102eb6:	4313      	orrs	r3, r2
 8102eb8:	d009      	beq.n	8102ece <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8102eba:	4b92      	ldr	r3, [pc, #584]	@ (8103104 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8102ebc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8102ebe:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8102ec2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102ec6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8102ec8:	4a8e      	ldr	r2, [pc, #568]	@ (8103104 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8102eca:	430b      	orrs	r3, r1
 8102ecc:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8102ece:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102ed6:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8102eda:	643b      	str	r3, [r7, #64]	@ 0x40
 8102edc:	2300      	movs	r3, #0
 8102ede:	647b      	str	r3, [r7, #68]	@ 0x44
 8102ee0:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8102ee4:	460b      	mov	r3, r1
 8102ee6:	4313      	orrs	r3, r2
 8102ee8:	d00e      	beq.n	8102f08 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8102eea:	4b86      	ldr	r3, [pc, #536]	@ (8103104 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8102eec:	691b      	ldr	r3, [r3, #16]
 8102eee:	4a85      	ldr	r2, [pc, #532]	@ (8103104 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8102ef0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8102ef4:	6113      	str	r3, [r2, #16]
 8102ef6:	4b83      	ldr	r3, [pc, #524]	@ (8103104 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8102ef8:	6919      	ldr	r1, [r3, #16]
 8102efa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102efe:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8102f02:	4a80      	ldr	r2, [pc, #512]	@ (8103104 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8102f04:	430b      	orrs	r3, r1
 8102f06:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8102f08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102f0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102f10:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8102f14:	63bb      	str	r3, [r7, #56]	@ 0x38
 8102f16:	2300      	movs	r3, #0
 8102f18:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8102f1a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8102f1e:	460b      	mov	r3, r1
 8102f20:	4313      	orrs	r3, r2
 8102f22:	d009      	beq.n	8102f38 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8102f24:	4b77      	ldr	r3, [pc, #476]	@ (8103104 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8102f26:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8102f28:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8102f2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102f30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8102f32:	4a74      	ldr	r2, [pc, #464]	@ (8103104 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8102f34:	430b      	orrs	r3, r1
 8102f36:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8102f38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102f40:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8102f44:	633b      	str	r3, [r7, #48]	@ 0x30
 8102f46:	2300      	movs	r3, #0
 8102f48:	637b      	str	r3, [r7, #52]	@ 0x34
 8102f4a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8102f4e:	460b      	mov	r3, r1
 8102f50:	4313      	orrs	r3, r2
 8102f52:	d00a      	beq.n	8102f6a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8102f54:	4b6b      	ldr	r3, [pc, #428]	@ (8103104 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8102f56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8102f58:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8102f5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102f60:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8102f64:	4a67      	ldr	r2, [pc, #412]	@ (8103104 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8102f66:	430b      	orrs	r3, r1
 8102f68:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8102f6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102f72:	2100      	movs	r1, #0
 8102f74:	62b9      	str	r1, [r7, #40]	@ 0x28
 8102f76:	f003 0301 	and.w	r3, r3, #1
 8102f7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8102f7c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8102f80:	460b      	mov	r3, r1
 8102f82:	4313      	orrs	r3, r2
 8102f84:	d011      	beq.n	8102faa <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8102f86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102f8a:	3308      	adds	r3, #8
 8102f8c:	2100      	movs	r1, #0
 8102f8e:	4618      	mov	r0, r3
 8102f90:	f000 f8ba 	bl	8103108 <RCCEx_PLL2_Config>
 8102f94:	4603      	mov	r3, r0
 8102f96:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8102f9a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102f9e:	2b00      	cmp	r3, #0
 8102fa0:	d003      	beq.n	8102faa <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102fa2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102fa6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8102faa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102fb2:	2100      	movs	r1, #0
 8102fb4:	6239      	str	r1, [r7, #32]
 8102fb6:	f003 0302 	and.w	r3, r3, #2
 8102fba:	627b      	str	r3, [r7, #36]	@ 0x24
 8102fbc:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8102fc0:	460b      	mov	r3, r1
 8102fc2:	4313      	orrs	r3, r2
 8102fc4:	d011      	beq.n	8102fea <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8102fc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102fca:	3308      	adds	r3, #8
 8102fcc:	2101      	movs	r1, #1
 8102fce:	4618      	mov	r0, r3
 8102fd0:	f000 f89a 	bl	8103108 <RCCEx_PLL2_Config>
 8102fd4:	4603      	mov	r3, r0
 8102fd6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8102fda:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102fde:	2b00      	cmp	r3, #0
 8102fe0:	d003      	beq.n	8102fea <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102fe2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102fe6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8102fea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102fee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102ff2:	2100      	movs	r1, #0
 8102ff4:	61b9      	str	r1, [r7, #24]
 8102ff6:	f003 0304 	and.w	r3, r3, #4
 8102ffa:	61fb      	str	r3, [r7, #28]
 8102ffc:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8103000:	460b      	mov	r3, r1
 8103002:	4313      	orrs	r3, r2
 8103004:	d011      	beq.n	810302a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8103006:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810300a:	3308      	adds	r3, #8
 810300c:	2102      	movs	r1, #2
 810300e:	4618      	mov	r0, r3
 8103010:	f000 f87a 	bl	8103108 <RCCEx_PLL2_Config>
 8103014:	4603      	mov	r3, r0
 8103016:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 810301a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810301e:	2b00      	cmp	r3, #0
 8103020:	d003      	beq.n	810302a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103022:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103026:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 810302a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810302e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103032:	2100      	movs	r1, #0
 8103034:	6139      	str	r1, [r7, #16]
 8103036:	f003 0308 	and.w	r3, r3, #8
 810303a:	617b      	str	r3, [r7, #20]
 810303c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8103040:	460b      	mov	r3, r1
 8103042:	4313      	orrs	r3, r2
 8103044:	d011      	beq.n	810306a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8103046:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810304a:	3328      	adds	r3, #40	@ 0x28
 810304c:	2100      	movs	r1, #0
 810304e:	4618      	mov	r0, r3
 8103050:	f000 f90c 	bl	810326c <RCCEx_PLL3_Config>
 8103054:	4603      	mov	r3, r0
 8103056:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 810305a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810305e:	2b00      	cmp	r3, #0
 8103060:	d003      	beq.n	810306a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103062:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103066:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 810306a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810306e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103072:	2100      	movs	r1, #0
 8103074:	60b9      	str	r1, [r7, #8]
 8103076:	f003 0310 	and.w	r3, r3, #16
 810307a:	60fb      	str	r3, [r7, #12]
 810307c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8103080:	460b      	mov	r3, r1
 8103082:	4313      	orrs	r3, r2
 8103084:	d011      	beq.n	81030aa <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8103086:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810308a:	3328      	adds	r3, #40	@ 0x28
 810308c:	2101      	movs	r1, #1
 810308e:	4618      	mov	r0, r3
 8103090:	f000 f8ec 	bl	810326c <RCCEx_PLL3_Config>
 8103094:	4603      	mov	r3, r0
 8103096:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 810309a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810309e:	2b00      	cmp	r3, #0
 81030a0:	d003      	beq.n	81030aa <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 81030a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81030a6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 81030aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81030ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 81030b2:	2100      	movs	r1, #0
 81030b4:	6039      	str	r1, [r7, #0]
 81030b6:	f003 0320 	and.w	r3, r3, #32
 81030ba:	607b      	str	r3, [r7, #4]
 81030bc:	e9d7 1200 	ldrd	r1, r2, [r7]
 81030c0:	460b      	mov	r3, r1
 81030c2:	4313      	orrs	r3, r2
 81030c4:	d011      	beq.n	81030ea <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 81030c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81030ca:	3328      	adds	r3, #40	@ 0x28
 81030cc:	2102      	movs	r1, #2
 81030ce:	4618      	mov	r0, r3
 81030d0:	f000 f8cc 	bl	810326c <RCCEx_PLL3_Config>
 81030d4:	4603      	mov	r3, r0
 81030d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 81030da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81030de:	2b00      	cmp	r3, #0
 81030e0:	d003      	beq.n	81030ea <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 81030e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81030e6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 81030ea:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 81030ee:	2b00      	cmp	r3, #0
 81030f0:	d101      	bne.n	81030f6 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 81030f2:	2300      	movs	r3, #0
 81030f4:	e000      	b.n	81030f8 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 81030f6:	2301      	movs	r3, #1
}
 81030f8:	4618      	mov	r0, r3
 81030fa:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 81030fe:	46bd      	mov	sp, r7
 8103100:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8103104:	58024400 	.word	0x58024400

08103108 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8103108:	b580      	push	{r7, lr}
 810310a:	b084      	sub	sp, #16
 810310c:	af00      	add	r7, sp, #0
 810310e:	6078      	str	r0, [r7, #4]
 8103110:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8103112:	2300      	movs	r3, #0
 8103114:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8103116:	4b54      	ldr	r3, [pc, #336]	@ (8103268 <RCCEx_PLL2_Config+0x160>)
 8103118:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810311a:	f003 0303 	and.w	r3, r3, #3
 810311e:	2b03      	cmp	r3, #3
 8103120:	d101      	bne.n	8103126 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8103122:	2301      	movs	r3, #1
 8103124:	e09b      	b.n	810325e <RCCEx_PLL2_Config+0x156>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8103126:	4b50      	ldr	r3, [pc, #320]	@ (8103268 <RCCEx_PLL2_Config+0x160>)
 8103128:	681b      	ldr	r3, [r3, #0]
 810312a:	4a4f      	ldr	r2, [pc, #316]	@ (8103268 <RCCEx_PLL2_Config+0x160>)
 810312c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8103130:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8103132:	f7fe f8d9 	bl	81012e8 <HAL_GetTick>
 8103136:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8103138:	e008      	b.n	810314c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 810313a:	f7fe f8d5 	bl	81012e8 <HAL_GetTick>
 810313e:	4602      	mov	r2, r0
 8103140:	68bb      	ldr	r3, [r7, #8]
 8103142:	1ad3      	subs	r3, r2, r3
 8103144:	2b02      	cmp	r3, #2
 8103146:	d901      	bls.n	810314c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8103148:	2303      	movs	r3, #3
 810314a:	e088      	b.n	810325e <RCCEx_PLL2_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 810314c:	4b46      	ldr	r3, [pc, #280]	@ (8103268 <RCCEx_PLL2_Config+0x160>)
 810314e:	681b      	ldr	r3, [r3, #0]
 8103150:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8103154:	2b00      	cmp	r3, #0
 8103156:	d1f0      	bne.n	810313a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8103158:	4b43      	ldr	r3, [pc, #268]	@ (8103268 <RCCEx_PLL2_Config+0x160>)
 810315a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810315c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8103160:	687b      	ldr	r3, [r7, #4]
 8103162:	681b      	ldr	r3, [r3, #0]
 8103164:	031b      	lsls	r3, r3, #12
 8103166:	4940      	ldr	r1, [pc, #256]	@ (8103268 <RCCEx_PLL2_Config+0x160>)
 8103168:	4313      	orrs	r3, r2
 810316a:	628b      	str	r3, [r1, #40]	@ 0x28
 810316c:	687b      	ldr	r3, [r7, #4]
 810316e:	685b      	ldr	r3, [r3, #4]
 8103170:	3b01      	subs	r3, #1
 8103172:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8103176:	687b      	ldr	r3, [r7, #4]
 8103178:	689b      	ldr	r3, [r3, #8]
 810317a:	3b01      	subs	r3, #1
 810317c:	025b      	lsls	r3, r3, #9
 810317e:	b29b      	uxth	r3, r3
 8103180:	431a      	orrs	r2, r3
 8103182:	687b      	ldr	r3, [r7, #4]
 8103184:	68db      	ldr	r3, [r3, #12]
 8103186:	3b01      	subs	r3, #1
 8103188:	041b      	lsls	r3, r3, #16
 810318a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 810318e:	431a      	orrs	r2, r3
 8103190:	687b      	ldr	r3, [r7, #4]
 8103192:	691b      	ldr	r3, [r3, #16]
 8103194:	3b01      	subs	r3, #1
 8103196:	061b      	lsls	r3, r3, #24
 8103198:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 810319c:	4932      	ldr	r1, [pc, #200]	@ (8103268 <RCCEx_PLL2_Config+0x160>)
 810319e:	4313      	orrs	r3, r2
 81031a0:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 81031a2:	4b31      	ldr	r3, [pc, #196]	@ (8103268 <RCCEx_PLL2_Config+0x160>)
 81031a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81031a6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 81031aa:	687b      	ldr	r3, [r7, #4]
 81031ac:	695b      	ldr	r3, [r3, #20]
 81031ae:	492e      	ldr	r1, [pc, #184]	@ (8103268 <RCCEx_PLL2_Config+0x160>)
 81031b0:	4313      	orrs	r3, r2
 81031b2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 81031b4:	4b2c      	ldr	r3, [pc, #176]	@ (8103268 <RCCEx_PLL2_Config+0x160>)
 81031b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81031b8:	f023 0220 	bic.w	r2, r3, #32
 81031bc:	687b      	ldr	r3, [r7, #4]
 81031be:	699b      	ldr	r3, [r3, #24]
 81031c0:	4929      	ldr	r1, [pc, #164]	@ (8103268 <RCCEx_PLL2_Config+0x160>)
 81031c2:	4313      	orrs	r3, r2
 81031c4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 81031c6:	4b28      	ldr	r3, [pc, #160]	@ (8103268 <RCCEx_PLL2_Config+0x160>)
 81031c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81031ca:	4a27      	ldr	r2, [pc, #156]	@ (8103268 <RCCEx_PLL2_Config+0x160>)
 81031cc:	f023 0310 	bic.w	r3, r3, #16
 81031d0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 81031d2:	4b25      	ldr	r3, [pc, #148]	@ (8103268 <RCCEx_PLL2_Config+0x160>)
 81031d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 81031d6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 81031da:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 81031de:	687a      	ldr	r2, [r7, #4]
 81031e0:	69d2      	ldr	r2, [r2, #28]
 81031e2:	00d2      	lsls	r2, r2, #3
 81031e4:	4920      	ldr	r1, [pc, #128]	@ (8103268 <RCCEx_PLL2_Config+0x160>)
 81031e6:	4313      	orrs	r3, r2
 81031e8:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 81031ea:	4b1f      	ldr	r3, [pc, #124]	@ (8103268 <RCCEx_PLL2_Config+0x160>)
 81031ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81031ee:	4a1e      	ldr	r2, [pc, #120]	@ (8103268 <RCCEx_PLL2_Config+0x160>)
 81031f0:	f043 0310 	orr.w	r3, r3, #16
 81031f4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 81031f6:	683b      	ldr	r3, [r7, #0]
 81031f8:	2b00      	cmp	r3, #0
 81031fa:	d106      	bne.n	810320a <RCCEx_PLL2_Config+0x102>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 81031fc:	4b1a      	ldr	r3, [pc, #104]	@ (8103268 <RCCEx_PLL2_Config+0x160>)
 81031fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103200:	4a19      	ldr	r2, [pc, #100]	@ (8103268 <RCCEx_PLL2_Config+0x160>)
 8103202:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8103206:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8103208:	e00f      	b.n	810322a <RCCEx_PLL2_Config+0x122>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 810320a:	683b      	ldr	r3, [r7, #0]
 810320c:	2b01      	cmp	r3, #1
 810320e:	d106      	bne.n	810321e <RCCEx_PLL2_Config+0x116>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8103210:	4b15      	ldr	r3, [pc, #84]	@ (8103268 <RCCEx_PLL2_Config+0x160>)
 8103212:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103214:	4a14      	ldr	r2, [pc, #80]	@ (8103268 <RCCEx_PLL2_Config+0x160>)
 8103216:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 810321a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 810321c:	e005      	b.n	810322a <RCCEx_PLL2_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 810321e:	4b12      	ldr	r3, [pc, #72]	@ (8103268 <RCCEx_PLL2_Config+0x160>)
 8103220:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103222:	4a11      	ldr	r2, [pc, #68]	@ (8103268 <RCCEx_PLL2_Config+0x160>)
 8103224:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8103228:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 810322a:	4b0f      	ldr	r3, [pc, #60]	@ (8103268 <RCCEx_PLL2_Config+0x160>)
 810322c:	681b      	ldr	r3, [r3, #0]
 810322e:	4a0e      	ldr	r2, [pc, #56]	@ (8103268 <RCCEx_PLL2_Config+0x160>)
 8103230:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8103234:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8103236:	f7fe f857 	bl	81012e8 <HAL_GetTick>
 810323a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 810323c:	e008      	b.n	8103250 <RCCEx_PLL2_Config+0x148>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 810323e:	f7fe f853 	bl	81012e8 <HAL_GetTick>
 8103242:	4602      	mov	r2, r0
 8103244:	68bb      	ldr	r3, [r7, #8]
 8103246:	1ad3      	subs	r3, r2, r3
 8103248:	2b02      	cmp	r3, #2
 810324a:	d901      	bls.n	8103250 <RCCEx_PLL2_Config+0x148>
      {
        return HAL_TIMEOUT;
 810324c:	2303      	movs	r3, #3
 810324e:	e006      	b.n	810325e <RCCEx_PLL2_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8103250:	4b05      	ldr	r3, [pc, #20]	@ (8103268 <RCCEx_PLL2_Config+0x160>)
 8103252:	681b      	ldr	r3, [r3, #0]
 8103254:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8103258:	2b00      	cmp	r3, #0
 810325a:	d0f0      	beq.n	810323e <RCCEx_PLL2_Config+0x136>
    }

  }


  return status;
 810325c:	7bfb      	ldrb	r3, [r7, #15]
}
 810325e:	4618      	mov	r0, r3
 8103260:	3710      	adds	r7, #16
 8103262:	46bd      	mov	sp, r7
 8103264:	bd80      	pop	{r7, pc}
 8103266:	bf00      	nop
 8103268:	58024400 	.word	0x58024400

0810326c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 810326c:	b580      	push	{r7, lr}
 810326e:	b084      	sub	sp, #16
 8103270:	af00      	add	r7, sp, #0
 8103272:	6078      	str	r0, [r7, #4]
 8103274:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8103276:	2300      	movs	r3, #0
 8103278:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 810327a:	4b54      	ldr	r3, [pc, #336]	@ (81033cc <RCCEx_PLL3_Config+0x160>)
 810327c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810327e:	f003 0303 	and.w	r3, r3, #3
 8103282:	2b03      	cmp	r3, #3
 8103284:	d101      	bne.n	810328a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8103286:	2301      	movs	r3, #1
 8103288:	e09b      	b.n	81033c2 <RCCEx_PLL3_Config+0x156>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 810328a:	4b50      	ldr	r3, [pc, #320]	@ (81033cc <RCCEx_PLL3_Config+0x160>)
 810328c:	681b      	ldr	r3, [r3, #0]
 810328e:	4a4f      	ldr	r2, [pc, #316]	@ (81033cc <RCCEx_PLL3_Config+0x160>)
 8103290:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8103294:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8103296:	f7fe f827 	bl	81012e8 <HAL_GetTick>
 810329a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 810329c:	e008      	b.n	81032b0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 810329e:	f7fe f823 	bl	81012e8 <HAL_GetTick>
 81032a2:	4602      	mov	r2, r0
 81032a4:	68bb      	ldr	r3, [r7, #8]
 81032a6:	1ad3      	subs	r3, r2, r3
 81032a8:	2b02      	cmp	r3, #2
 81032aa:	d901      	bls.n	81032b0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 81032ac:	2303      	movs	r3, #3
 81032ae:	e088      	b.n	81033c2 <RCCEx_PLL3_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 81032b0:	4b46      	ldr	r3, [pc, #280]	@ (81033cc <RCCEx_PLL3_Config+0x160>)
 81032b2:	681b      	ldr	r3, [r3, #0]
 81032b4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 81032b8:	2b00      	cmp	r3, #0
 81032ba:	d1f0      	bne.n	810329e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 81032bc:	4b43      	ldr	r3, [pc, #268]	@ (81033cc <RCCEx_PLL3_Config+0x160>)
 81032be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81032c0:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 81032c4:	687b      	ldr	r3, [r7, #4]
 81032c6:	681b      	ldr	r3, [r3, #0]
 81032c8:	051b      	lsls	r3, r3, #20
 81032ca:	4940      	ldr	r1, [pc, #256]	@ (81033cc <RCCEx_PLL3_Config+0x160>)
 81032cc:	4313      	orrs	r3, r2
 81032ce:	628b      	str	r3, [r1, #40]	@ 0x28
 81032d0:	687b      	ldr	r3, [r7, #4]
 81032d2:	685b      	ldr	r3, [r3, #4]
 81032d4:	3b01      	subs	r3, #1
 81032d6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 81032da:	687b      	ldr	r3, [r7, #4]
 81032dc:	689b      	ldr	r3, [r3, #8]
 81032de:	3b01      	subs	r3, #1
 81032e0:	025b      	lsls	r3, r3, #9
 81032e2:	b29b      	uxth	r3, r3
 81032e4:	431a      	orrs	r2, r3
 81032e6:	687b      	ldr	r3, [r7, #4]
 81032e8:	68db      	ldr	r3, [r3, #12]
 81032ea:	3b01      	subs	r3, #1
 81032ec:	041b      	lsls	r3, r3, #16
 81032ee:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 81032f2:	431a      	orrs	r2, r3
 81032f4:	687b      	ldr	r3, [r7, #4]
 81032f6:	691b      	ldr	r3, [r3, #16]
 81032f8:	3b01      	subs	r3, #1
 81032fa:	061b      	lsls	r3, r3, #24
 81032fc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8103300:	4932      	ldr	r1, [pc, #200]	@ (81033cc <RCCEx_PLL3_Config+0x160>)
 8103302:	4313      	orrs	r3, r2
 8103304:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8103306:	4b31      	ldr	r3, [pc, #196]	@ (81033cc <RCCEx_PLL3_Config+0x160>)
 8103308:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810330a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 810330e:	687b      	ldr	r3, [r7, #4]
 8103310:	695b      	ldr	r3, [r3, #20]
 8103312:	492e      	ldr	r1, [pc, #184]	@ (81033cc <RCCEx_PLL3_Config+0x160>)
 8103314:	4313      	orrs	r3, r2
 8103316:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8103318:	4b2c      	ldr	r3, [pc, #176]	@ (81033cc <RCCEx_PLL3_Config+0x160>)
 810331a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810331c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8103320:	687b      	ldr	r3, [r7, #4]
 8103322:	699b      	ldr	r3, [r3, #24]
 8103324:	4929      	ldr	r1, [pc, #164]	@ (81033cc <RCCEx_PLL3_Config+0x160>)
 8103326:	4313      	orrs	r3, r2
 8103328:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 810332a:	4b28      	ldr	r3, [pc, #160]	@ (81033cc <RCCEx_PLL3_Config+0x160>)
 810332c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810332e:	4a27      	ldr	r2, [pc, #156]	@ (81033cc <RCCEx_PLL3_Config+0x160>)
 8103330:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8103334:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8103336:	4b25      	ldr	r3, [pc, #148]	@ (81033cc <RCCEx_PLL3_Config+0x160>)
 8103338:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 810333a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 810333e:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8103342:	687a      	ldr	r2, [r7, #4]
 8103344:	69d2      	ldr	r2, [r2, #28]
 8103346:	00d2      	lsls	r2, r2, #3
 8103348:	4920      	ldr	r1, [pc, #128]	@ (81033cc <RCCEx_PLL3_Config+0x160>)
 810334a:	4313      	orrs	r3, r2
 810334c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 810334e:	4b1f      	ldr	r3, [pc, #124]	@ (81033cc <RCCEx_PLL3_Config+0x160>)
 8103350:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103352:	4a1e      	ldr	r2, [pc, #120]	@ (81033cc <RCCEx_PLL3_Config+0x160>)
 8103354:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8103358:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 810335a:	683b      	ldr	r3, [r7, #0]
 810335c:	2b00      	cmp	r3, #0
 810335e:	d106      	bne.n	810336e <RCCEx_PLL3_Config+0x102>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8103360:	4b1a      	ldr	r3, [pc, #104]	@ (81033cc <RCCEx_PLL3_Config+0x160>)
 8103362:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103364:	4a19      	ldr	r2, [pc, #100]	@ (81033cc <RCCEx_PLL3_Config+0x160>)
 8103366:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 810336a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 810336c:	e00f      	b.n	810338e <RCCEx_PLL3_Config+0x122>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 810336e:	683b      	ldr	r3, [r7, #0]
 8103370:	2b01      	cmp	r3, #1
 8103372:	d106      	bne.n	8103382 <RCCEx_PLL3_Config+0x116>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8103374:	4b15      	ldr	r3, [pc, #84]	@ (81033cc <RCCEx_PLL3_Config+0x160>)
 8103376:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103378:	4a14      	ldr	r2, [pc, #80]	@ (81033cc <RCCEx_PLL3_Config+0x160>)
 810337a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 810337e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8103380:	e005      	b.n	810338e <RCCEx_PLL3_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8103382:	4b12      	ldr	r3, [pc, #72]	@ (81033cc <RCCEx_PLL3_Config+0x160>)
 8103384:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103386:	4a11      	ldr	r2, [pc, #68]	@ (81033cc <RCCEx_PLL3_Config+0x160>)
 8103388:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 810338c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 810338e:	4b0f      	ldr	r3, [pc, #60]	@ (81033cc <RCCEx_PLL3_Config+0x160>)
 8103390:	681b      	ldr	r3, [r3, #0]
 8103392:	4a0e      	ldr	r2, [pc, #56]	@ (81033cc <RCCEx_PLL3_Config+0x160>)
 8103394:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8103398:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810339a:	f7fd ffa5 	bl	81012e8 <HAL_GetTick>
 810339e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 81033a0:	e008      	b.n	81033b4 <RCCEx_PLL3_Config+0x148>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 81033a2:	f7fd ffa1 	bl	81012e8 <HAL_GetTick>
 81033a6:	4602      	mov	r2, r0
 81033a8:	68bb      	ldr	r3, [r7, #8]
 81033aa:	1ad3      	subs	r3, r2, r3
 81033ac:	2b02      	cmp	r3, #2
 81033ae:	d901      	bls.n	81033b4 <RCCEx_PLL3_Config+0x148>
      {
        return HAL_TIMEOUT;
 81033b0:	2303      	movs	r3, #3
 81033b2:	e006      	b.n	81033c2 <RCCEx_PLL3_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 81033b4:	4b05      	ldr	r3, [pc, #20]	@ (81033cc <RCCEx_PLL3_Config+0x160>)
 81033b6:	681b      	ldr	r3, [r3, #0]
 81033b8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 81033bc:	2b00      	cmp	r3, #0
 81033be:	d0f0      	beq.n	81033a2 <RCCEx_PLL3_Config+0x136>
    }

  }


  return status;
 81033c0:	7bfb      	ldrb	r3, [r7, #15]
}
 81033c2:	4618      	mov	r0, r3
 81033c4:	3710      	adds	r7, #16
 81033c6:	46bd      	mov	sp, r7
 81033c8:	bd80      	pop	{r7, pc}
 81033ca:	bf00      	nop
 81033cc:	58024400 	.word	0x58024400

081033d0 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 81033d0:	b580      	push	{r7, lr}
 81033d2:	b084      	sub	sp, #16
 81033d4:	af00      	add	r7, sp, #0
 81033d6:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 81033d8:	687b      	ldr	r3, [r7, #4]
 81033da:	2b00      	cmp	r3, #0
 81033dc:	d101      	bne.n	81033e2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 81033de:	2301      	movs	r3, #1
 81033e0:	e10f      	b.n	8103602 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 81033e2:	687b      	ldr	r3, [r7, #4]
 81033e4:	2200      	movs	r2, #0
 81033e6:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 81033e8:	687b      	ldr	r3, [r7, #4]
 81033ea:	681b      	ldr	r3, [r3, #0]
 81033ec:	4a87      	ldr	r2, [pc, #540]	@ (810360c <HAL_SPI_Init+0x23c>)
 81033ee:	4293      	cmp	r3, r2
 81033f0:	d00f      	beq.n	8103412 <HAL_SPI_Init+0x42>
 81033f2:	687b      	ldr	r3, [r7, #4]
 81033f4:	681b      	ldr	r3, [r3, #0]
 81033f6:	4a86      	ldr	r2, [pc, #536]	@ (8103610 <HAL_SPI_Init+0x240>)
 81033f8:	4293      	cmp	r3, r2
 81033fa:	d00a      	beq.n	8103412 <HAL_SPI_Init+0x42>
 81033fc:	687b      	ldr	r3, [r7, #4]
 81033fe:	681b      	ldr	r3, [r3, #0]
 8103400:	4a84      	ldr	r2, [pc, #528]	@ (8103614 <HAL_SPI_Init+0x244>)
 8103402:	4293      	cmp	r3, r2
 8103404:	d005      	beq.n	8103412 <HAL_SPI_Init+0x42>
 8103406:	687b      	ldr	r3, [r7, #4]
 8103408:	68db      	ldr	r3, [r3, #12]
 810340a:	2b0f      	cmp	r3, #15
 810340c:	d901      	bls.n	8103412 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 810340e:	2301      	movs	r3, #1
 8103410:	e0f7      	b.n	8103602 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8103412:	6878      	ldr	r0, [r7, #4]
 8103414:	f001 f962 	bl	81046dc <SPI_GetPacketSize>
 8103418:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 810341a:	687b      	ldr	r3, [r7, #4]
 810341c:	681b      	ldr	r3, [r3, #0]
 810341e:	4a7b      	ldr	r2, [pc, #492]	@ (810360c <HAL_SPI_Init+0x23c>)
 8103420:	4293      	cmp	r3, r2
 8103422:	d00c      	beq.n	810343e <HAL_SPI_Init+0x6e>
 8103424:	687b      	ldr	r3, [r7, #4]
 8103426:	681b      	ldr	r3, [r3, #0]
 8103428:	4a79      	ldr	r2, [pc, #484]	@ (8103610 <HAL_SPI_Init+0x240>)
 810342a:	4293      	cmp	r3, r2
 810342c:	d007      	beq.n	810343e <HAL_SPI_Init+0x6e>
 810342e:	687b      	ldr	r3, [r7, #4]
 8103430:	681b      	ldr	r3, [r3, #0]
 8103432:	4a78      	ldr	r2, [pc, #480]	@ (8103614 <HAL_SPI_Init+0x244>)
 8103434:	4293      	cmp	r3, r2
 8103436:	d002      	beq.n	810343e <HAL_SPI_Init+0x6e>
 8103438:	68fb      	ldr	r3, [r7, #12]
 810343a:	2b08      	cmp	r3, #8
 810343c:	d811      	bhi.n	8103462 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 810343e:	687b      	ldr	r3, [r7, #4]
 8103440:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8103442:	4a72      	ldr	r2, [pc, #456]	@ (810360c <HAL_SPI_Init+0x23c>)
 8103444:	4293      	cmp	r3, r2
 8103446:	d009      	beq.n	810345c <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8103448:	687b      	ldr	r3, [r7, #4]
 810344a:	681b      	ldr	r3, [r3, #0]
 810344c:	4a70      	ldr	r2, [pc, #448]	@ (8103610 <HAL_SPI_Init+0x240>)
 810344e:	4293      	cmp	r3, r2
 8103450:	d004      	beq.n	810345c <HAL_SPI_Init+0x8c>
 8103452:	687b      	ldr	r3, [r7, #4]
 8103454:	681b      	ldr	r3, [r3, #0]
 8103456:	4a6f      	ldr	r2, [pc, #444]	@ (8103614 <HAL_SPI_Init+0x244>)
 8103458:	4293      	cmp	r3, r2
 810345a:	d104      	bne.n	8103466 <HAL_SPI_Init+0x96>
 810345c:	68fb      	ldr	r3, [r7, #12]
 810345e:	2b10      	cmp	r3, #16
 8103460:	d901      	bls.n	8103466 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8103462:	2301      	movs	r3, #1
 8103464:	e0cd      	b.n	8103602 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8103466:	687b      	ldr	r3, [r7, #4]
 8103468:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 810346c:	b2db      	uxtb	r3, r3
 810346e:	2b00      	cmp	r3, #0
 8103470:	d106      	bne.n	8103480 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8103472:	687b      	ldr	r3, [r7, #4]
 8103474:	2200      	movs	r2, #0
 8103476:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 810347a:	6878      	ldr	r0, [r7, #4]
 810347c:	f7fd fd92 	bl	8100fa4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8103480:	687b      	ldr	r3, [r7, #4]
 8103482:	2202      	movs	r2, #2
 8103484:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8103488:	687b      	ldr	r3, [r7, #4]
 810348a:	681b      	ldr	r3, [r3, #0]
 810348c:	681a      	ldr	r2, [r3, #0]
 810348e:	687b      	ldr	r3, [r7, #4]
 8103490:	681b      	ldr	r3, [r3, #0]
 8103492:	f022 0201 	bic.w	r2, r2, #1
 8103496:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8103498:	687b      	ldr	r3, [r7, #4]
 810349a:	681b      	ldr	r3, [r3, #0]
 810349c:	689b      	ldr	r3, [r3, #8]
 810349e:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 81034a2:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 81034a4:	687b      	ldr	r3, [r7, #4]
 81034a6:	699b      	ldr	r3, [r3, #24]
 81034a8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 81034ac:	d119      	bne.n	81034e2 <HAL_SPI_Init+0x112>
 81034ae:	687b      	ldr	r3, [r7, #4]
 81034b0:	685b      	ldr	r3, [r3, #4]
 81034b2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 81034b6:	d103      	bne.n	81034c0 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 81034b8:	687b      	ldr	r3, [r7, #4]
 81034ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 81034bc:	2b00      	cmp	r3, #0
 81034be:	d008      	beq.n	81034d2 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 81034c0:	687b      	ldr	r3, [r7, #4]
 81034c2:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 81034c4:	2b00      	cmp	r3, #0
 81034c6:	d10c      	bne.n	81034e2 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 81034c8:	687b      	ldr	r3, [r7, #4]
 81034ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 81034cc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 81034d0:	d107      	bne.n	81034e2 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 81034d2:	687b      	ldr	r3, [r7, #4]
 81034d4:	681b      	ldr	r3, [r3, #0]
 81034d6:	681a      	ldr	r2, [r3, #0]
 81034d8:	687b      	ldr	r3, [r7, #4]
 81034da:	681b      	ldr	r3, [r3, #0]
 81034dc:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 81034e0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 81034e2:	687b      	ldr	r3, [r7, #4]
 81034e4:	685b      	ldr	r3, [r3, #4]
 81034e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 81034ea:	2b00      	cmp	r3, #0
 81034ec:	d00f      	beq.n	810350e <HAL_SPI_Init+0x13e>
 81034ee:	687b      	ldr	r3, [r7, #4]
 81034f0:	68db      	ldr	r3, [r3, #12]
 81034f2:	2b06      	cmp	r3, #6
 81034f4:	d90b      	bls.n	810350e <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 81034f6:	687b      	ldr	r3, [r7, #4]
 81034f8:	681b      	ldr	r3, [r3, #0]
 81034fa:	681b      	ldr	r3, [r3, #0]
 81034fc:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8103500:	687b      	ldr	r3, [r7, #4]
 8103502:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8103504:	687b      	ldr	r3, [r7, #4]
 8103506:	681b      	ldr	r3, [r3, #0]
 8103508:	430a      	orrs	r2, r1
 810350a:	601a      	str	r2, [r3, #0]
 810350c:	e007      	b.n	810351e <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 810350e:	687b      	ldr	r3, [r7, #4]
 8103510:	681b      	ldr	r3, [r3, #0]
 8103512:	681a      	ldr	r2, [r3, #0]
 8103514:	687b      	ldr	r3, [r7, #4]
 8103516:	681b      	ldr	r3, [r3, #0]
 8103518:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 810351c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 810351e:	687b      	ldr	r3, [r7, #4]
 8103520:	69da      	ldr	r2, [r3, #28]
 8103522:	687b      	ldr	r3, [r7, #4]
 8103524:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8103526:	431a      	orrs	r2, r3
 8103528:	68bb      	ldr	r3, [r7, #8]
 810352a:	431a      	orrs	r2, r3
 810352c:	687b      	ldr	r3, [r7, #4]
 810352e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8103530:	ea42 0103 	orr.w	r1, r2, r3
 8103534:	687b      	ldr	r3, [r7, #4]
 8103536:	68da      	ldr	r2, [r3, #12]
 8103538:	687b      	ldr	r3, [r7, #4]
 810353a:	681b      	ldr	r3, [r3, #0]
 810353c:	430a      	orrs	r2, r1
 810353e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8103540:	687b      	ldr	r3, [r7, #4]
 8103542:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8103544:	687b      	ldr	r3, [r7, #4]
 8103546:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8103548:	431a      	orrs	r2, r3
 810354a:	687b      	ldr	r3, [r7, #4]
 810354c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810354e:	431a      	orrs	r2, r3
 8103550:	687b      	ldr	r3, [r7, #4]
 8103552:	699b      	ldr	r3, [r3, #24]
 8103554:	431a      	orrs	r2, r3
 8103556:	687b      	ldr	r3, [r7, #4]
 8103558:	691b      	ldr	r3, [r3, #16]
 810355a:	431a      	orrs	r2, r3
 810355c:	687b      	ldr	r3, [r7, #4]
 810355e:	695b      	ldr	r3, [r3, #20]
 8103560:	431a      	orrs	r2, r3
 8103562:	687b      	ldr	r3, [r7, #4]
 8103564:	6a1b      	ldr	r3, [r3, #32]
 8103566:	431a      	orrs	r2, r3
 8103568:	687b      	ldr	r3, [r7, #4]
 810356a:	685b      	ldr	r3, [r3, #4]
 810356c:	431a      	orrs	r2, r3
 810356e:	687b      	ldr	r3, [r7, #4]
 8103570:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8103572:	431a      	orrs	r2, r3
 8103574:	687b      	ldr	r3, [r7, #4]
 8103576:	689b      	ldr	r3, [r3, #8]
 8103578:	431a      	orrs	r2, r3
 810357a:	687b      	ldr	r3, [r7, #4]
 810357c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 810357e:	ea42 0103 	orr.w	r1, r2, r3
 8103582:	687b      	ldr	r3, [r7, #4]
 8103584:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8103586:	687b      	ldr	r3, [r7, #4]
 8103588:	681b      	ldr	r3, [r3, #0]
 810358a:	430a      	orrs	r2, r1
 810358c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 810358e:	687b      	ldr	r3, [r7, #4]
 8103590:	685b      	ldr	r3, [r3, #4]
 8103592:	2b00      	cmp	r3, #0
 8103594:	d113      	bne.n	81035be <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8103596:	687b      	ldr	r3, [r7, #4]
 8103598:	681b      	ldr	r3, [r3, #0]
 810359a:	689b      	ldr	r3, [r3, #8]
 810359c:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 81035a0:	687b      	ldr	r3, [r7, #4]
 81035a2:	681b      	ldr	r3, [r3, #0]
 81035a4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 81035a8:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 81035aa:	687b      	ldr	r3, [r7, #4]
 81035ac:	681b      	ldr	r3, [r3, #0]
 81035ae:	689b      	ldr	r3, [r3, #8]
 81035b0:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 81035b4:	687b      	ldr	r3, [r7, #4]
 81035b6:	681b      	ldr	r3, [r3, #0]
 81035b8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 81035bc:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 81035be:	687b      	ldr	r3, [r7, #4]
 81035c0:	681b      	ldr	r3, [r3, #0]
 81035c2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 81035c4:	687b      	ldr	r3, [r7, #4]
 81035c6:	681b      	ldr	r3, [r3, #0]
 81035c8:	f022 0201 	bic.w	r2, r2, #1
 81035cc:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 81035ce:	687b      	ldr	r3, [r7, #4]
 81035d0:	685b      	ldr	r3, [r3, #4]
 81035d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 81035d6:	2b00      	cmp	r3, #0
 81035d8:	d00a      	beq.n	81035f0 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 81035da:	687b      	ldr	r3, [r7, #4]
 81035dc:	681b      	ldr	r3, [r3, #0]
 81035de:	68db      	ldr	r3, [r3, #12]
 81035e0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 81035e4:	687b      	ldr	r3, [r7, #4]
 81035e6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 81035e8:	687b      	ldr	r3, [r7, #4]
 81035ea:	681b      	ldr	r3, [r3, #0]
 81035ec:	430a      	orrs	r2, r1
 81035ee:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 81035f0:	687b      	ldr	r3, [r7, #4]
 81035f2:	2200      	movs	r2, #0
 81035f4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 81035f8:	687b      	ldr	r3, [r7, #4]
 81035fa:	2201      	movs	r2, #1
 81035fc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8103600:	2300      	movs	r3, #0
}
 8103602:	4618      	mov	r0, r3
 8103604:	3710      	adds	r7, #16
 8103606:	46bd      	mov	sp, r7
 8103608:	bd80      	pop	{r7, pc}
 810360a:	bf00      	nop
 810360c:	40013000 	.word	0x40013000
 8103610:	40003800 	.word	0x40003800
 8103614:	40003c00 	.word	0x40003c00

08103618 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8103618:	b580      	push	{r7, lr}
 810361a:	b088      	sub	sp, #32
 810361c:	af02      	add	r7, sp, #8
 810361e:	60f8      	str	r0, [r7, #12]
 8103620:	60b9      	str	r1, [r7, #8]
 8103622:	603b      	str	r3, [r7, #0]
 8103624:	4613      	mov	r3, r2
 8103626:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8103628:	68fb      	ldr	r3, [r7, #12]
 810362a:	681b      	ldr	r3, [r3, #0]
 810362c:	3320      	adds	r3, #32
 810362e:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8103630:	f7fd fe5a 	bl	81012e8 <HAL_GetTick>
 8103634:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8103636:	68fb      	ldr	r3, [r7, #12]
 8103638:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 810363c:	b2db      	uxtb	r3, r3
 810363e:	2b01      	cmp	r3, #1
 8103640:	d001      	beq.n	8103646 <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 8103642:	2302      	movs	r3, #2
 8103644:	e1cf      	b.n	81039e6 <HAL_SPI_Transmit+0x3ce>
  }

  if ((pData == NULL) || (Size == 0UL))
 8103646:	68bb      	ldr	r3, [r7, #8]
 8103648:	2b00      	cmp	r3, #0
 810364a:	d002      	beq.n	8103652 <HAL_SPI_Transmit+0x3a>
 810364c:	88fb      	ldrh	r3, [r7, #6]
 810364e:	2b00      	cmp	r3, #0
 8103650:	d101      	bne.n	8103656 <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 8103652:	2301      	movs	r3, #1
 8103654:	e1c7      	b.n	81039e6 <HAL_SPI_Transmit+0x3ce>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8103656:	68fb      	ldr	r3, [r7, #12]
 8103658:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 810365c:	2b01      	cmp	r3, #1
 810365e:	d101      	bne.n	8103664 <HAL_SPI_Transmit+0x4c>
 8103660:	2302      	movs	r3, #2
 8103662:	e1c0      	b.n	81039e6 <HAL_SPI_Transmit+0x3ce>
 8103664:	68fb      	ldr	r3, [r7, #12]
 8103666:	2201      	movs	r2, #1
 8103668:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 810366c:	68fb      	ldr	r3, [r7, #12]
 810366e:	2203      	movs	r2, #3
 8103670:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8103674:	68fb      	ldr	r3, [r7, #12]
 8103676:	2200      	movs	r2, #0
 8103678:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 810367c:	68fb      	ldr	r3, [r7, #12]
 810367e:	68ba      	ldr	r2, [r7, #8]
 8103680:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 8103682:	68fb      	ldr	r3, [r7, #12]
 8103684:	88fa      	ldrh	r2, [r7, #6]
 8103686:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 810368a:	68fb      	ldr	r3, [r7, #12]
 810368c:	88fa      	ldrh	r2, [r7, #6]
 810368e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8103692:	68fb      	ldr	r3, [r7, #12]
 8103694:	2200      	movs	r2, #0
 8103696:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8103698:	68fb      	ldr	r3, [r7, #12]
 810369a:	2200      	movs	r2, #0
 810369c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 81036a0:	68fb      	ldr	r3, [r7, #12]
 81036a2:	2200      	movs	r2, #0
 81036a4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 81036a8:	68fb      	ldr	r3, [r7, #12]
 81036aa:	2200      	movs	r2, #0
 81036ac:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 81036ae:	68fb      	ldr	r3, [r7, #12]
 81036b0:	2200      	movs	r2, #0
 81036b2:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 81036b4:	68fb      	ldr	r3, [r7, #12]
 81036b6:	689b      	ldr	r3, [r3, #8]
 81036b8:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 81036bc:	d108      	bne.n	81036d0 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 81036be:	68fb      	ldr	r3, [r7, #12]
 81036c0:	681b      	ldr	r3, [r3, #0]
 81036c2:	681a      	ldr	r2, [r3, #0]
 81036c4:	68fb      	ldr	r3, [r7, #12]
 81036c6:	681b      	ldr	r3, [r3, #0]
 81036c8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 81036cc:	601a      	str	r2, [r3, #0]
 81036ce:	e009      	b.n	81036e4 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 81036d0:	68fb      	ldr	r3, [r7, #12]
 81036d2:	681b      	ldr	r3, [r3, #0]
 81036d4:	68db      	ldr	r3, [r3, #12]
 81036d6:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 81036da:	68fb      	ldr	r3, [r7, #12]
 81036dc:	681b      	ldr	r3, [r3, #0]
 81036de:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 81036e2:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 81036e4:	68fb      	ldr	r3, [r7, #12]
 81036e6:	681b      	ldr	r3, [r3, #0]
 81036e8:	685b      	ldr	r3, [r3, #4]
 81036ea:	0c1b      	lsrs	r3, r3, #16
 81036ec:	041b      	lsls	r3, r3, #16
 81036ee:	88f9      	ldrh	r1, [r7, #6]
 81036f0:	68fa      	ldr	r2, [r7, #12]
 81036f2:	6812      	ldr	r2, [r2, #0]
 81036f4:	430b      	orrs	r3, r1
 81036f6:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 81036f8:	68fb      	ldr	r3, [r7, #12]
 81036fa:	681b      	ldr	r3, [r3, #0]
 81036fc:	681a      	ldr	r2, [r3, #0]
 81036fe:	68fb      	ldr	r3, [r7, #12]
 8103700:	681b      	ldr	r3, [r3, #0]
 8103702:	f042 0201 	orr.w	r2, r2, #1
 8103706:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8103708:	68fb      	ldr	r3, [r7, #12]
 810370a:	685b      	ldr	r3, [r3, #4]
 810370c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8103710:	d107      	bne.n	8103722 <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8103712:	68fb      	ldr	r3, [r7, #12]
 8103714:	681b      	ldr	r3, [r3, #0]
 8103716:	681a      	ldr	r2, [r3, #0]
 8103718:	68fb      	ldr	r3, [r7, #12]
 810371a:	681b      	ldr	r3, [r3, #0]
 810371c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8103720:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8103722:	68fb      	ldr	r3, [r7, #12]
 8103724:	68db      	ldr	r3, [r3, #12]
 8103726:	2b0f      	cmp	r3, #15
 8103728:	d947      	bls.n	81037ba <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 810372a:	e03f      	b.n	81037ac <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 810372c:	68fb      	ldr	r3, [r7, #12]
 810372e:	681b      	ldr	r3, [r3, #0]
 8103730:	695b      	ldr	r3, [r3, #20]
 8103732:	f003 0302 	and.w	r3, r3, #2
 8103736:	2b02      	cmp	r3, #2
 8103738:	d114      	bne.n	8103764 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 810373a:	68fb      	ldr	r3, [r7, #12]
 810373c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 810373e:	68fb      	ldr	r3, [r7, #12]
 8103740:	681b      	ldr	r3, [r3, #0]
 8103742:	6812      	ldr	r2, [r2, #0]
 8103744:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8103746:	68fb      	ldr	r3, [r7, #12]
 8103748:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 810374a:	1d1a      	adds	r2, r3, #4
 810374c:	68fb      	ldr	r3, [r7, #12]
 810374e:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8103750:	68fb      	ldr	r3, [r7, #12]
 8103752:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8103756:	b29b      	uxth	r3, r3
 8103758:	3b01      	subs	r3, #1
 810375a:	b29a      	uxth	r2, r3
 810375c:	68fb      	ldr	r3, [r7, #12]
 810375e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8103762:	e023      	b.n	81037ac <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8103764:	f7fd fdc0 	bl	81012e8 <HAL_GetTick>
 8103768:	4602      	mov	r2, r0
 810376a:	693b      	ldr	r3, [r7, #16]
 810376c:	1ad3      	subs	r3, r2, r3
 810376e:	683a      	ldr	r2, [r7, #0]
 8103770:	429a      	cmp	r2, r3
 8103772:	d803      	bhi.n	810377c <HAL_SPI_Transmit+0x164>
 8103774:	683b      	ldr	r3, [r7, #0]
 8103776:	f1b3 3fff 	cmp.w	r3, #4294967295
 810377a:	d102      	bne.n	8103782 <HAL_SPI_Transmit+0x16a>
 810377c:	683b      	ldr	r3, [r7, #0]
 810377e:	2b00      	cmp	r3, #0
 8103780:	d114      	bne.n	81037ac <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8103782:	68f8      	ldr	r0, [r7, #12]
 8103784:	f000 fedc 	bl	8104540 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8103788:	68fb      	ldr	r3, [r7, #12]
 810378a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 810378e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8103792:	68fb      	ldr	r3, [r7, #12]
 8103794:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8103798:	68fb      	ldr	r3, [r7, #12]
 810379a:	2201      	movs	r2, #1
 810379c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 81037a0:	68fb      	ldr	r3, [r7, #12]
 81037a2:	2200      	movs	r2, #0
 81037a4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 81037a8:	2303      	movs	r3, #3
 81037aa:	e11c      	b.n	81039e6 <HAL_SPI_Transmit+0x3ce>
    while (hspi->TxXferCount > 0UL)
 81037ac:	68fb      	ldr	r3, [r7, #12]
 81037ae:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 81037b2:	b29b      	uxth	r3, r3
 81037b4:	2b00      	cmp	r3, #0
 81037b6:	d1b9      	bne.n	810372c <HAL_SPI_Transmit+0x114>
 81037b8:	e0ef      	b.n	810399a <HAL_SPI_Transmit+0x382>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 81037ba:	68fb      	ldr	r3, [r7, #12]
 81037bc:	68db      	ldr	r3, [r3, #12]
 81037be:	2b07      	cmp	r3, #7
 81037c0:	f240 80e4 	bls.w	810398c <HAL_SPI_Transmit+0x374>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 81037c4:	e05d      	b.n	8103882 <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 81037c6:	68fb      	ldr	r3, [r7, #12]
 81037c8:	681b      	ldr	r3, [r3, #0]
 81037ca:	695b      	ldr	r3, [r3, #20]
 81037cc:	f003 0302 	and.w	r3, r3, #2
 81037d0:	2b02      	cmp	r3, #2
 81037d2:	d132      	bne.n	810383a <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 81037d4:	68fb      	ldr	r3, [r7, #12]
 81037d6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 81037da:	b29b      	uxth	r3, r3
 81037dc:	2b01      	cmp	r3, #1
 81037de:	d918      	bls.n	8103812 <HAL_SPI_Transmit+0x1fa>
 81037e0:	68fb      	ldr	r3, [r7, #12]
 81037e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 81037e4:	2b00      	cmp	r3, #0
 81037e6:	d014      	beq.n	8103812 <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 81037e8:	68fb      	ldr	r3, [r7, #12]
 81037ea:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 81037ec:	68fb      	ldr	r3, [r7, #12]
 81037ee:	681b      	ldr	r3, [r3, #0]
 81037f0:	6812      	ldr	r2, [r2, #0]
 81037f2:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 81037f4:	68fb      	ldr	r3, [r7, #12]
 81037f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 81037f8:	1d1a      	adds	r2, r3, #4
 81037fa:	68fb      	ldr	r3, [r7, #12]
 81037fc:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 81037fe:	68fb      	ldr	r3, [r7, #12]
 8103800:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8103804:	b29b      	uxth	r3, r3
 8103806:	3b02      	subs	r3, #2
 8103808:	b29a      	uxth	r2, r3
 810380a:	68fb      	ldr	r3, [r7, #12]
 810380c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8103810:	e037      	b.n	8103882 <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8103812:	68fb      	ldr	r3, [r7, #12]
 8103814:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8103816:	881a      	ldrh	r2, [r3, #0]
 8103818:	697b      	ldr	r3, [r7, #20]
 810381a:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 810381c:	68fb      	ldr	r3, [r7, #12]
 810381e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8103820:	1c9a      	adds	r2, r3, #2
 8103822:	68fb      	ldr	r3, [r7, #12]
 8103824:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8103826:	68fb      	ldr	r3, [r7, #12]
 8103828:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 810382c:	b29b      	uxth	r3, r3
 810382e:	3b01      	subs	r3, #1
 8103830:	b29a      	uxth	r2, r3
 8103832:	68fb      	ldr	r3, [r7, #12]
 8103834:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8103838:	e023      	b.n	8103882 <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 810383a:	f7fd fd55 	bl	81012e8 <HAL_GetTick>
 810383e:	4602      	mov	r2, r0
 8103840:	693b      	ldr	r3, [r7, #16]
 8103842:	1ad3      	subs	r3, r2, r3
 8103844:	683a      	ldr	r2, [r7, #0]
 8103846:	429a      	cmp	r2, r3
 8103848:	d803      	bhi.n	8103852 <HAL_SPI_Transmit+0x23a>
 810384a:	683b      	ldr	r3, [r7, #0]
 810384c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8103850:	d102      	bne.n	8103858 <HAL_SPI_Transmit+0x240>
 8103852:	683b      	ldr	r3, [r7, #0]
 8103854:	2b00      	cmp	r3, #0
 8103856:	d114      	bne.n	8103882 <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8103858:	68f8      	ldr	r0, [r7, #12]
 810385a:	f000 fe71 	bl	8104540 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 810385e:	68fb      	ldr	r3, [r7, #12]
 8103860:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8103864:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8103868:	68fb      	ldr	r3, [r7, #12]
 810386a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 810386e:	68fb      	ldr	r3, [r7, #12]
 8103870:	2201      	movs	r2, #1
 8103872:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8103876:	68fb      	ldr	r3, [r7, #12]
 8103878:	2200      	movs	r2, #0
 810387a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 810387e:	2303      	movs	r3, #3
 8103880:	e0b1      	b.n	81039e6 <HAL_SPI_Transmit+0x3ce>
    while (hspi->TxXferCount > 0UL)
 8103882:	68fb      	ldr	r3, [r7, #12]
 8103884:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8103888:	b29b      	uxth	r3, r3
 810388a:	2b00      	cmp	r3, #0
 810388c:	d19b      	bne.n	81037c6 <HAL_SPI_Transmit+0x1ae>
 810388e:	e084      	b.n	810399a <HAL_SPI_Transmit+0x382>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8103890:	68fb      	ldr	r3, [r7, #12]
 8103892:	681b      	ldr	r3, [r3, #0]
 8103894:	695b      	ldr	r3, [r3, #20]
 8103896:	f003 0302 	and.w	r3, r3, #2
 810389a:	2b02      	cmp	r3, #2
 810389c:	d152      	bne.n	8103944 <HAL_SPI_Transmit+0x32c>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 810389e:	68fb      	ldr	r3, [r7, #12]
 81038a0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 81038a4:	b29b      	uxth	r3, r3
 81038a6:	2b03      	cmp	r3, #3
 81038a8:	d918      	bls.n	81038dc <HAL_SPI_Transmit+0x2c4>
 81038aa:	68fb      	ldr	r3, [r7, #12]
 81038ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 81038ae:	2b40      	cmp	r3, #64	@ 0x40
 81038b0:	d914      	bls.n	81038dc <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 81038b2:	68fb      	ldr	r3, [r7, #12]
 81038b4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 81038b6:	68fb      	ldr	r3, [r7, #12]
 81038b8:	681b      	ldr	r3, [r3, #0]
 81038ba:	6812      	ldr	r2, [r2, #0]
 81038bc:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 81038be:	68fb      	ldr	r3, [r7, #12]
 81038c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 81038c2:	1d1a      	adds	r2, r3, #4
 81038c4:	68fb      	ldr	r3, [r7, #12]
 81038c6:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 81038c8:	68fb      	ldr	r3, [r7, #12]
 81038ca:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 81038ce:	b29b      	uxth	r3, r3
 81038d0:	3b04      	subs	r3, #4
 81038d2:	b29a      	uxth	r2, r3
 81038d4:	68fb      	ldr	r3, [r7, #12]
 81038d6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 81038da:	e057      	b.n	810398c <HAL_SPI_Transmit+0x374>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 81038dc:	68fb      	ldr	r3, [r7, #12]
 81038de:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 81038e2:	b29b      	uxth	r3, r3
 81038e4:	2b01      	cmp	r3, #1
 81038e6:	d917      	bls.n	8103918 <HAL_SPI_Transmit+0x300>
 81038e8:	68fb      	ldr	r3, [r7, #12]
 81038ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 81038ec:	2b00      	cmp	r3, #0
 81038ee:	d013      	beq.n	8103918 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 81038f0:	68fb      	ldr	r3, [r7, #12]
 81038f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 81038f4:	881a      	ldrh	r2, [r3, #0]
 81038f6:	697b      	ldr	r3, [r7, #20]
 81038f8:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 81038fa:	68fb      	ldr	r3, [r7, #12]
 81038fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 81038fe:	1c9a      	adds	r2, r3, #2
 8103900:	68fb      	ldr	r3, [r7, #12]
 8103902:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8103904:	68fb      	ldr	r3, [r7, #12]
 8103906:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 810390a:	b29b      	uxth	r3, r3
 810390c:	3b02      	subs	r3, #2
 810390e:	b29a      	uxth	r2, r3
 8103910:	68fb      	ldr	r3, [r7, #12]
 8103912:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8103916:	e039      	b.n	810398c <HAL_SPI_Transmit+0x374>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8103918:	68fb      	ldr	r3, [r7, #12]
 810391a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 810391c:	68fb      	ldr	r3, [r7, #12]
 810391e:	681b      	ldr	r3, [r3, #0]
 8103920:	3320      	adds	r3, #32
 8103922:	7812      	ldrb	r2, [r2, #0]
 8103924:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8103926:	68fb      	ldr	r3, [r7, #12]
 8103928:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 810392a:	1c5a      	adds	r2, r3, #1
 810392c:	68fb      	ldr	r3, [r7, #12]
 810392e:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8103930:	68fb      	ldr	r3, [r7, #12]
 8103932:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8103936:	b29b      	uxth	r3, r3
 8103938:	3b01      	subs	r3, #1
 810393a:	b29a      	uxth	r2, r3
 810393c:	68fb      	ldr	r3, [r7, #12]
 810393e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8103942:	e023      	b.n	810398c <HAL_SPI_Transmit+0x374>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8103944:	f7fd fcd0 	bl	81012e8 <HAL_GetTick>
 8103948:	4602      	mov	r2, r0
 810394a:	693b      	ldr	r3, [r7, #16]
 810394c:	1ad3      	subs	r3, r2, r3
 810394e:	683a      	ldr	r2, [r7, #0]
 8103950:	429a      	cmp	r2, r3
 8103952:	d803      	bhi.n	810395c <HAL_SPI_Transmit+0x344>
 8103954:	683b      	ldr	r3, [r7, #0]
 8103956:	f1b3 3fff 	cmp.w	r3, #4294967295
 810395a:	d102      	bne.n	8103962 <HAL_SPI_Transmit+0x34a>
 810395c:	683b      	ldr	r3, [r7, #0]
 810395e:	2b00      	cmp	r3, #0
 8103960:	d114      	bne.n	810398c <HAL_SPI_Transmit+0x374>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8103962:	68f8      	ldr	r0, [r7, #12]
 8103964:	f000 fdec 	bl	8104540 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8103968:	68fb      	ldr	r3, [r7, #12]
 810396a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 810396e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8103972:	68fb      	ldr	r3, [r7, #12]
 8103974:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8103978:	68fb      	ldr	r3, [r7, #12]
 810397a:	2201      	movs	r2, #1
 810397c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8103980:	68fb      	ldr	r3, [r7, #12]
 8103982:	2200      	movs	r2, #0
 8103984:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8103988:	2303      	movs	r3, #3
 810398a:	e02c      	b.n	81039e6 <HAL_SPI_Transmit+0x3ce>
    while (hspi->TxXferCount > 0UL)
 810398c:	68fb      	ldr	r3, [r7, #12]
 810398e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8103992:	b29b      	uxth	r3, r3
 8103994:	2b00      	cmp	r3, #0
 8103996:	f47f af7b 	bne.w	8103890 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 810399a:	693b      	ldr	r3, [r7, #16]
 810399c:	9300      	str	r3, [sp, #0]
 810399e:	683b      	ldr	r3, [r7, #0]
 81039a0:	2200      	movs	r2, #0
 81039a2:	2108      	movs	r1, #8
 81039a4:	68f8      	ldr	r0, [r7, #12]
 81039a6:	f000 fe6b 	bl	8104680 <SPI_WaitOnFlagUntilTimeout>
 81039aa:	4603      	mov	r3, r0
 81039ac:	2b00      	cmp	r3, #0
 81039ae:	d007      	beq.n	81039c0 <HAL_SPI_Transmit+0x3a8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 81039b0:	68fb      	ldr	r3, [r7, #12]
 81039b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 81039b6:	f043 0220 	orr.w	r2, r3, #32
 81039ba:	68fb      	ldr	r3, [r7, #12]
 81039bc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 81039c0:	68f8      	ldr	r0, [r7, #12]
 81039c2:	f000 fdbd 	bl	8104540 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 81039c6:	68fb      	ldr	r3, [r7, #12]
 81039c8:	2201      	movs	r2, #1
 81039ca:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 81039ce:	68fb      	ldr	r3, [r7, #12]
 81039d0:	2200      	movs	r2, #0
 81039d2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 81039d6:	68fb      	ldr	r3, [r7, #12]
 81039d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 81039dc:	2b00      	cmp	r3, #0
 81039de:	d001      	beq.n	81039e4 <HAL_SPI_Transmit+0x3cc>
  {
    return HAL_ERROR;
 81039e0:	2301      	movs	r3, #1
 81039e2:	e000      	b.n	81039e6 <HAL_SPI_Transmit+0x3ce>
  }
  else
  {
    return HAL_OK;
 81039e4:	2300      	movs	r3, #0
  }
}
 81039e6:	4618      	mov	r0, r3
 81039e8:	3718      	adds	r7, #24
 81039ea:	46bd      	mov	sp, r7
 81039ec:	bd80      	pop	{r7, pc}

081039ee <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 81039ee:	b580      	push	{r7, lr}
 81039f0:	b088      	sub	sp, #32
 81039f2:	af00      	add	r7, sp, #0
 81039f4:	60f8      	str	r0, [r7, #12]
 81039f6:	60b9      	str	r1, [r7, #8]
 81039f8:	603b      	str	r3, [r7, #0]
 81039fa:	4613      	mov	r3, r2
 81039fc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 81039fe:	68fb      	ldr	r3, [r7, #12]
 8103a00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8103a02:	095b      	lsrs	r3, r3, #5
 8103a04:	b29b      	uxth	r3, r3
 8103a06:	3301      	adds	r3, #1
 8103a08:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8103a0a:	68fb      	ldr	r3, [r7, #12]
 8103a0c:	681b      	ldr	r3, [r3, #0]
 8103a0e:	3330      	adds	r3, #48	@ 0x30
 8103a10:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8103a12:	f7fd fc69 	bl	81012e8 <HAL_GetTick>
 8103a16:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8103a18:	68fb      	ldr	r3, [r7, #12]
 8103a1a:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8103a1e:	b2db      	uxtb	r3, r3
 8103a20:	2b01      	cmp	r3, #1
 8103a22:	d001      	beq.n	8103a28 <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 8103a24:	2302      	movs	r3, #2
 8103a26:	e24e      	b.n	8103ec6 <HAL_SPI_Receive+0x4d8>
  }

  if ((pData == NULL) || (Size == 0UL))
 8103a28:	68bb      	ldr	r3, [r7, #8]
 8103a2a:	2b00      	cmp	r3, #0
 8103a2c:	d002      	beq.n	8103a34 <HAL_SPI_Receive+0x46>
 8103a2e:	88fb      	ldrh	r3, [r7, #6]
 8103a30:	2b00      	cmp	r3, #0
 8103a32:	d101      	bne.n	8103a38 <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 8103a34:	2301      	movs	r3, #1
 8103a36:	e246      	b.n	8103ec6 <HAL_SPI_Receive+0x4d8>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8103a38:	68fb      	ldr	r3, [r7, #12]
 8103a3a:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8103a3e:	2b01      	cmp	r3, #1
 8103a40:	d101      	bne.n	8103a46 <HAL_SPI_Receive+0x58>
 8103a42:	2302      	movs	r3, #2
 8103a44:	e23f      	b.n	8103ec6 <HAL_SPI_Receive+0x4d8>
 8103a46:	68fb      	ldr	r3, [r7, #12]
 8103a48:	2201      	movs	r2, #1
 8103a4a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8103a4e:	68fb      	ldr	r3, [r7, #12]
 8103a50:	2204      	movs	r2, #4
 8103a52:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8103a56:	68fb      	ldr	r3, [r7, #12]
 8103a58:	2200      	movs	r2, #0
 8103a5a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8103a5e:	68fb      	ldr	r3, [r7, #12]
 8103a60:	68ba      	ldr	r2, [r7, #8]
 8103a62:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 8103a64:	68fb      	ldr	r3, [r7, #12]
 8103a66:	88fa      	ldrh	r2, [r7, #6]
 8103a68:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 8103a6c:	68fb      	ldr	r3, [r7, #12]
 8103a6e:	88fa      	ldrh	r2, [r7, #6]
 8103a70:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 8103a74:	68fb      	ldr	r3, [r7, #12]
 8103a76:	2200      	movs	r2, #0
 8103a78:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 8103a7a:	68fb      	ldr	r3, [r7, #12]
 8103a7c:	2200      	movs	r2, #0
 8103a7e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8103a82:	68fb      	ldr	r3, [r7, #12]
 8103a84:	2200      	movs	r2, #0
 8103a86:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 8103a8a:	68fb      	ldr	r3, [r7, #12]
 8103a8c:	2200      	movs	r2, #0
 8103a8e:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 8103a90:	68fb      	ldr	r3, [r7, #12]
 8103a92:	2200      	movs	r2, #0
 8103a94:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8103a96:	68fb      	ldr	r3, [r7, #12]
 8103a98:	689b      	ldr	r3, [r3, #8]
 8103a9a:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8103a9e:	d108      	bne.n	8103ab2 <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 8103aa0:	68fb      	ldr	r3, [r7, #12]
 8103aa2:	681b      	ldr	r3, [r3, #0]
 8103aa4:	681a      	ldr	r2, [r3, #0]
 8103aa6:	68fb      	ldr	r3, [r7, #12]
 8103aa8:	681b      	ldr	r3, [r3, #0]
 8103aaa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8103aae:	601a      	str	r2, [r3, #0]
 8103ab0:	e009      	b.n	8103ac6 <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 8103ab2:	68fb      	ldr	r3, [r7, #12]
 8103ab4:	681b      	ldr	r3, [r3, #0]
 8103ab6:	68db      	ldr	r3, [r3, #12]
 8103ab8:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8103abc:	68fb      	ldr	r3, [r7, #12]
 8103abe:	681b      	ldr	r3, [r3, #0]
 8103ac0:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8103ac4:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8103ac6:	68fb      	ldr	r3, [r7, #12]
 8103ac8:	681b      	ldr	r3, [r3, #0]
 8103aca:	685b      	ldr	r3, [r3, #4]
 8103acc:	0c1b      	lsrs	r3, r3, #16
 8103ace:	041b      	lsls	r3, r3, #16
 8103ad0:	88f9      	ldrh	r1, [r7, #6]
 8103ad2:	68fa      	ldr	r2, [r7, #12]
 8103ad4:	6812      	ldr	r2, [r2, #0]
 8103ad6:	430b      	orrs	r3, r1
 8103ad8:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8103ada:	68fb      	ldr	r3, [r7, #12]
 8103adc:	681b      	ldr	r3, [r3, #0]
 8103ade:	681a      	ldr	r2, [r3, #0]
 8103ae0:	68fb      	ldr	r3, [r7, #12]
 8103ae2:	681b      	ldr	r3, [r3, #0]
 8103ae4:	f042 0201 	orr.w	r2, r2, #1
 8103ae8:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8103aea:	68fb      	ldr	r3, [r7, #12]
 8103aec:	685b      	ldr	r3, [r3, #4]
 8103aee:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8103af2:	d107      	bne.n	8103b04 <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8103af4:	68fb      	ldr	r3, [r7, #12]
 8103af6:	681b      	ldr	r3, [r3, #0]
 8103af8:	681a      	ldr	r2, [r3, #0]
 8103afa:	68fb      	ldr	r3, [r7, #12]
 8103afc:	681b      	ldr	r3, [r3, #0]
 8103afe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8103b02:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8103b04:	68fb      	ldr	r3, [r7, #12]
 8103b06:	68db      	ldr	r3, [r3, #12]
 8103b08:	2b0f      	cmp	r3, #15
 8103b0a:	d96c      	bls.n	8103be6 <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8103b0c:	e064      	b.n	8103bd8 <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8103b0e:	68fb      	ldr	r3, [r7, #12]
 8103b10:	681b      	ldr	r3, [r3, #0]
 8103b12:	695b      	ldr	r3, [r3, #20]
 8103b14:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8103b16:	68fb      	ldr	r3, [r7, #12]
 8103b18:	681b      	ldr	r3, [r3, #0]
 8103b1a:	695b      	ldr	r3, [r3, #20]
 8103b1c:	f003 0301 	and.w	r3, r3, #1
 8103b20:	2b01      	cmp	r3, #1
 8103b22:	d114      	bne.n	8103b4e <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8103b24:	68fb      	ldr	r3, [r7, #12]
 8103b26:	681a      	ldr	r2, [r3, #0]
 8103b28:	68fb      	ldr	r3, [r7, #12]
 8103b2a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8103b2c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8103b2e:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8103b30:	68fb      	ldr	r3, [r7, #12]
 8103b32:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8103b34:	1d1a      	adds	r2, r3, #4
 8103b36:	68fb      	ldr	r3, [r7, #12]
 8103b38:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8103b3a:	68fb      	ldr	r3, [r7, #12]
 8103b3c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8103b40:	b29b      	uxth	r3, r3
 8103b42:	3b01      	subs	r3, #1
 8103b44:	b29a      	uxth	r2, r3
 8103b46:	68fb      	ldr	r3, [r7, #12]
 8103b48:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8103b4c:	e044      	b.n	8103bd8 <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8103b4e:	68fb      	ldr	r3, [r7, #12]
 8103b50:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8103b54:	b29b      	uxth	r3, r3
 8103b56:	8bfa      	ldrh	r2, [r7, #30]
 8103b58:	429a      	cmp	r2, r3
 8103b5a:	d919      	bls.n	8103b90 <HAL_SPI_Receive+0x1a2>
 8103b5c:	693b      	ldr	r3, [r7, #16]
 8103b5e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8103b62:	2b00      	cmp	r3, #0
 8103b64:	d014      	beq.n	8103b90 <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8103b66:	68fb      	ldr	r3, [r7, #12]
 8103b68:	681a      	ldr	r2, [r3, #0]
 8103b6a:	68fb      	ldr	r3, [r7, #12]
 8103b6c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8103b6e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8103b70:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8103b72:	68fb      	ldr	r3, [r7, #12]
 8103b74:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8103b76:	1d1a      	adds	r2, r3, #4
 8103b78:	68fb      	ldr	r3, [r7, #12]
 8103b7a:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8103b7c:	68fb      	ldr	r3, [r7, #12]
 8103b7e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8103b82:	b29b      	uxth	r3, r3
 8103b84:	3b01      	subs	r3, #1
 8103b86:	b29a      	uxth	r2, r3
 8103b88:	68fb      	ldr	r3, [r7, #12]
 8103b8a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8103b8e:	e023      	b.n	8103bd8 <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8103b90:	f7fd fbaa 	bl	81012e8 <HAL_GetTick>
 8103b94:	4602      	mov	r2, r0
 8103b96:	697b      	ldr	r3, [r7, #20]
 8103b98:	1ad3      	subs	r3, r2, r3
 8103b9a:	683a      	ldr	r2, [r7, #0]
 8103b9c:	429a      	cmp	r2, r3
 8103b9e:	d803      	bhi.n	8103ba8 <HAL_SPI_Receive+0x1ba>
 8103ba0:	683b      	ldr	r3, [r7, #0]
 8103ba2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8103ba6:	d102      	bne.n	8103bae <HAL_SPI_Receive+0x1c0>
 8103ba8:	683b      	ldr	r3, [r7, #0]
 8103baa:	2b00      	cmp	r3, #0
 8103bac:	d114      	bne.n	8103bd8 <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8103bae:	68f8      	ldr	r0, [r7, #12]
 8103bb0:	f000 fcc6 	bl	8104540 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8103bb4:	68fb      	ldr	r3, [r7, #12]
 8103bb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8103bba:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8103bbe:	68fb      	ldr	r3, [r7, #12]
 8103bc0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8103bc4:	68fb      	ldr	r3, [r7, #12]
 8103bc6:	2201      	movs	r2, #1
 8103bc8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8103bcc:	68fb      	ldr	r3, [r7, #12]
 8103bce:	2200      	movs	r2, #0
 8103bd0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8103bd4:	2303      	movs	r3, #3
 8103bd6:	e176      	b.n	8103ec6 <HAL_SPI_Receive+0x4d8>
    while (hspi->RxXferCount > 0UL)
 8103bd8:	68fb      	ldr	r3, [r7, #12]
 8103bda:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8103bde:	b29b      	uxth	r3, r3
 8103be0:	2b00      	cmp	r3, #0
 8103be2:	d194      	bne.n	8103b0e <HAL_SPI_Receive+0x120>
 8103be4:	e15c      	b.n	8103ea0 <HAL_SPI_Receive+0x4b2>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8103be6:	68fb      	ldr	r3, [r7, #12]
 8103be8:	68db      	ldr	r3, [r3, #12]
 8103bea:	2b07      	cmp	r3, #7
 8103bec:	f240 8151 	bls.w	8103e92 <HAL_SPI_Receive+0x4a4>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8103bf0:	e08f      	b.n	8103d12 <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8103bf2:	68fb      	ldr	r3, [r7, #12]
 8103bf4:	681b      	ldr	r3, [r3, #0]
 8103bf6:	695b      	ldr	r3, [r3, #20]
 8103bf8:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8103bfa:	68fb      	ldr	r3, [r7, #12]
 8103bfc:	681b      	ldr	r3, [r3, #0]
 8103bfe:	695b      	ldr	r3, [r3, #20]
 8103c00:	f003 0301 	and.w	r3, r3, #1
 8103c04:	2b01      	cmp	r3, #1
 8103c06:	d114      	bne.n	8103c32 <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8103c08:	68fb      	ldr	r3, [r7, #12]
 8103c0a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8103c0c:	69ba      	ldr	r2, [r7, #24]
 8103c0e:	8812      	ldrh	r2, [r2, #0]
 8103c10:	b292      	uxth	r2, r2
 8103c12:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8103c14:	68fb      	ldr	r3, [r7, #12]
 8103c16:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8103c18:	1c9a      	adds	r2, r3, #2
 8103c1a:	68fb      	ldr	r3, [r7, #12]
 8103c1c:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8103c1e:	68fb      	ldr	r3, [r7, #12]
 8103c20:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8103c24:	b29b      	uxth	r3, r3
 8103c26:	3b01      	subs	r3, #1
 8103c28:	b29a      	uxth	r2, r3
 8103c2a:	68fb      	ldr	r3, [r7, #12]
 8103c2c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8103c30:	e06f      	b.n	8103d12 <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8103c32:	68fb      	ldr	r3, [r7, #12]
 8103c34:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8103c38:	b29b      	uxth	r3, r3
 8103c3a:	8bfa      	ldrh	r2, [r7, #30]
 8103c3c:	429a      	cmp	r2, r3
 8103c3e:	d924      	bls.n	8103c8a <HAL_SPI_Receive+0x29c>
 8103c40:	693b      	ldr	r3, [r7, #16]
 8103c42:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8103c46:	2b00      	cmp	r3, #0
 8103c48:	d01f      	beq.n	8103c8a <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8103c4a:	68fb      	ldr	r3, [r7, #12]
 8103c4c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8103c4e:	69ba      	ldr	r2, [r7, #24]
 8103c50:	8812      	ldrh	r2, [r2, #0]
 8103c52:	b292      	uxth	r2, r2
 8103c54:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8103c56:	68fb      	ldr	r3, [r7, #12]
 8103c58:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8103c5a:	1c9a      	adds	r2, r3, #2
 8103c5c:	68fb      	ldr	r3, [r7, #12]
 8103c5e:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8103c60:	68fb      	ldr	r3, [r7, #12]
 8103c62:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8103c64:	69ba      	ldr	r2, [r7, #24]
 8103c66:	8812      	ldrh	r2, [r2, #0]
 8103c68:	b292      	uxth	r2, r2
 8103c6a:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8103c6c:	68fb      	ldr	r3, [r7, #12]
 8103c6e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8103c70:	1c9a      	adds	r2, r3, #2
 8103c72:	68fb      	ldr	r3, [r7, #12]
 8103c74:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 8103c76:	68fb      	ldr	r3, [r7, #12]
 8103c78:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8103c7c:	b29b      	uxth	r3, r3
 8103c7e:	3b02      	subs	r3, #2
 8103c80:	b29a      	uxth	r2, r3
 8103c82:	68fb      	ldr	r3, [r7, #12]
 8103c84:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8103c88:	e043      	b.n	8103d12 <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 8103c8a:	68fb      	ldr	r3, [r7, #12]
 8103c8c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8103c90:	b29b      	uxth	r3, r3
 8103c92:	2b01      	cmp	r3, #1
 8103c94:	d119      	bne.n	8103cca <HAL_SPI_Receive+0x2dc>
 8103c96:	693b      	ldr	r3, [r7, #16]
 8103c98:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8103c9c:	2b00      	cmp	r3, #0
 8103c9e:	d014      	beq.n	8103cca <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8103ca0:	68fb      	ldr	r3, [r7, #12]
 8103ca2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8103ca4:	69ba      	ldr	r2, [r7, #24]
 8103ca6:	8812      	ldrh	r2, [r2, #0]
 8103ca8:	b292      	uxth	r2, r2
 8103caa:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8103cac:	68fb      	ldr	r3, [r7, #12]
 8103cae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8103cb0:	1c9a      	adds	r2, r3, #2
 8103cb2:	68fb      	ldr	r3, [r7, #12]
 8103cb4:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8103cb6:	68fb      	ldr	r3, [r7, #12]
 8103cb8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8103cbc:	b29b      	uxth	r3, r3
 8103cbe:	3b01      	subs	r3, #1
 8103cc0:	b29a      	uxth	r2, r3
 8103cc2:	68fb      	ldr	r3, [r7, #12]
 8103cc4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8103cc8:	e023      	b.n	8103d12 <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8103cca:	f7fd fb0d 	bl	81012e8 <HAL_GetTick>
 8103cce:	4602      	mov	r2, r0
 8103cd0:	697b      	ldr	r3, [r7, #20]
 8103cd2:	1ad3      	subs	r3, r2, r3
 8103cd4:	683a      	ldr	r2, [r7, #0]
 8103cd6:	429a      	cmp	r2, r3
 8103cd8:	d803      	bhi.n	8103ce2 <HAL_SPI_Receive+0x2f4>
 8103cda:	683b      	ldr	r3, [r7, #0]
 8103cdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8103ce0:	d102      	bne.n	8103ce8 <HAL_SPI_Receive+0x2fa>
 8103ce2:	683b      	ldr	r3, [r7, #0]
 8103ce4:	2b00      	cmp	r3, #0
 8103ce6:	d114      	bne.n	8103d12 <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8103ce8:	68f8      	ldr	r0, [r7, #12]
 8103cea:	f000 fc29 	bl	8104540 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8103cee:	68fb      	ldr	r3, [r7, #12]
 8103cf0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8103cf4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8103cf8:	68fb      	ldr	r3, [r7, #12]
 8103cfa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8103cfe:	68fb      	ldr	r3, [r7, #12]
 8103d00:	2201      	movs	r2, #1
 8103d02:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8103d06:	68fb      	ldr	r3, [r7, #12]
 8103d08:	2200      	movs	r2, #0
 8103d0a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8103d0e:	2303      	movs	r3, #3
 8103d10:	e0d9      	b.n	8103ec6 <HAL_SPI_Receive+0x4d8>
    while (hspi->RxXferCount > 0UL)
 8103d12:	68fb      	ldr	r3, [r7, #12]
 8103d14:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8103d18:	b29b      	uxth	r3, r3
 8103d1a:	2b00      	cmp	r3, #0
 8103d1c:	f47f af69 	bne.w	8103bf2 <HAL_SPI_Receive+0x204>
 8103d20:	e0be      	b.n	8103ea0 <HAL_SPI_Receive+0x4b2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8103d22:	68fb      	ldr	r3, [r7, #12]
 8103d24:	681b      	ldr	r3, [r3, #0]
 8103d26:	695b      	ldr	r3, [r3, #20]
 8103d28:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8103d2a:	68fb      	ldr	r3, [r7, #12]
 8103d2c:	681b      	ldr	r3, [r3, #0]
 8103d2e:	695b      	ldr	r3, [r3, #20]
 8103d30:	f003 0301 	and.w	r3, r3, #1
 8103d34:	2b01      	cmp	r3, #1
 8103d36:	d117      	bne.n	8103d68 <HAL_SPI_Receive+0x37a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8103d38:	68fb      	ldr	r3, [r7, #12]
 8103d3a:	681b      	ldr	r3, [r3, #0]
 8103d3c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8103d40:	68fb      	ldr	r3, [r7, #12]
 8103d42:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8103d44:	7812      	ldrb	r2, [r2, #0]
 8103d46:	b2d2      	uxtb	r2, r2
 8103d48:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8103d4a:	68fb      	ldr	r3, [r7, #12]
 8103d4c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8103d4e:	1c5a      	adds	r2, r3, #1
 8103d50:	68fb      	ldr	r3, [r7, #12]
 8103d52:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8103d54:	68fb      	ldr	r3, [r7, #12]
 8103d56:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8103d5a:	b29b      	uxth	r3, r3
 8103d5c:	3b01      	subs	r3, #1
 8103d5e:	b29a      	uxth	r2, r3
 8103d60:	68fb      	ldr	r3, [r7, #12]
 8103d62:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8103d66:	e094      	b.n	8103e92 <HAL_SPI_Receive+0x4a4>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8103d68:	68fb      	ldr	r3, [r7, #12]
 8103d6a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8103d6e:	b29b      	uxth	r3, r3
 8103d70:	8bfa      	ldrh	r2, [r7, #30]
 8103d72:	429a      	cmp	r2, r3
 8103d74:	d946      	bls.n	8103e04 <HAL_SPI_Receive+0x416>
 8103d76:	693b      	ldr	r3, [r7, #16]
 8103d78:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8103d7c:	2b00      	cmp	r3, #0
 8103d7e:	d041      	beq.n	8103e04 <HAL_SPI_Receive+0x416>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8103d80:	68fb      	ldr	r3, [r7, #12]
 8103d82:	681b      	ldr	r3, [r3, #0]
 8103d84:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8103d88:	68fb      	ldr	r3, [r7, #12]
 8103d8a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8103d8c:	7812      	ldrb	r2, [r2, #0]
 8103d8e:	b2d2      	uxtb	r2, r2
 8103d90:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8103d92:	68fb      	ldr	r3, [r7, #12]
 8103d94:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8103d96:	1c5a      	adds	r2, r3, #1
 8103d98:	68fb      	ldr	r3, [r7, #12]
 8103d9a:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8103d9c:	68fb      	ldr	r3, [r7, #12]
 8103d9e:	681b      	ldr	r3, [r3, #0]
 8103da0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8103da4:	68fb      	ldr	r3, [r7, #12]
 8103da6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8103da8:	7812      	ldrb	r2, [r2, #0]
 8103daa:	b2d2      	uxtb	r2, r2
 8103dac:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8103dae:	68fb      	ldr	r3, [r7, #12]
 8103db0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8103db2:	1c5a      	adds	r2, r3, #1
 8103db4:	68fb      	ldr	r3, [r7, #12]
 8103db6:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8103db8:	68fb      	ldr	r3, [r7, #12]
 8103dba:	681b      	ldr	r3, [r3, #0]
 8103dbc:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8103dc0:	68fb      	ldr	r3, [r7, #12]
 8103dc2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8103dc4:	7812      	ldrb	r2, [r2, #0]
 8103dc6:	b2d2      	uxtb	r2, r2
 8103dc8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8103dca:	68fb      	ldr	r3, [r7, #12]
 8103dcc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8103dce:	1c5a      	adds	r2, r3, #1
 8103dd0:	68fb      	ldr	r3, [r7, #12]
 8103dd2:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8103dd4:	68fb      	ldr	r3, [r7, #12]
 8103dd6:	681b      	ldr	r3, [r3, #0]
 8103dd8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8103ddc:	68fb      	ldr	r3, [r7, #12]
 8103dde:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8103de0:	7812      	ldrb	r2, [r2, #0]
 8103de2:	b2d2      	uxtb	r2, r2
 8103de4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8103de6:	68fb      	ldr	r3, [r7, #12]
 8103de8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8103dea:	1c5a      	adds	r2, r3, #1
 8103dec:	68fb      	ldr	r3, [r7, #12]
 8103dee:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 8103df0:	68fb      	ldr	r3, [r7, #12]
 8103df2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8103df6:	b29b      	uxth	r3, r3
 8103df8:	3b04      	subs	r3, #4
 8103dfa:	b29a      	uxth	r2, r3
 8103dfc:	68fb      	ldr	r3, [r7, #12]
 8103dfe:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8103e02:	e046      	b.n	8103e92 <HAL_SPI_Receive+0x4a4>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 8103e04:	68fb      	ldr	r3, [r7, #12]
 8103e06:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8103e0a:	b29b      	uxth	r3, r3
 8103e0c:	2b03      	cmp	r3, #3
 8103e0e:	d81c      	bhi.n	8103e4a <HAL_SPI_Receive+0x45c>
 8103e10:	693b      	ldr	r3, [r7, #16]
 8103e12:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 8103e16:	2b00      	cmp	r3, #0
 8103e18:	d017      	beq.n	8103e4a <HAL_SPI_Receive+0x45c>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8103e1a:	68fb      	ldr	r3, [r7, #12]
 8103e1c:	681b      	ldr	r3, [r3, #0]
 8103e1e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8103e22:	68fb      	ldr	r3, [r7, #12]
 8103e24:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8103e26:	7812      	ldrb	r2, [r2, #0]
 8103e28:	b2d2      	uxtb	r2, r2
 8103e2a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8103e2c:	68fb      	ldr	r3, [r7, #12]
 8103e2e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8103e30:	1c5a      	adds	r2, r3, #1
 8103e32:	68fb      	ldr	r3, [r7, #12]
 8103e34:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8103e36:	68fb      	ldr	r3, [r7, #12]
 8103e38:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8103e3c:	b29b      	uxth	r3, r3
 8103e3e:	3b01      	subs	r3, #1
 8103e40:	b29a      	uxth	r2, r3
 8103e42:	68fb      	ldr	r3, [r7, #12]
 8103e44:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8103e48:	e023      	b.n	8103e92 <HAL_SPI_Receive+0x4a4>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8103e4a:	f7fd fa4d 	bl	81012e8 <HAL_GetTick>
 8103e4e:	4602      	mov	r2, r0
 8103e50:	697b      	ldr	r3, [r7, #20]
 8103e52:	1ad3      	subs	r3, r2, r3
 8103e54:	683a      	ldr	r2, [r7, #0]
 8103e56:	429a      	cmp	r2, r3
 8103e58:	d803      	bhi.n	8103e62 <HAL_SPI_Receive+0x474>
 8103e5a:	683b      	ldr	r3, [r7, #0]
 8103e5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8103e60:	d102      	bne.n	8103e68 <HAL_SPI_Receive+0x47a>
 8103e62:	683b      	ldr	r3, [r7, #0]
 8103e64:	2b00      	cmp	r3, #0
 8103e66:	d114      	bne.n	8103e92 <HAL_SPI_Receive+0x4a4>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8103e68:	68f8      	ldr	r0, [r7, #12]
 8103e6a:	f000 fb69 	bl	8104540 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8103e6e:	68fb      	ldr	r3, [r7, #12]
 8103e70:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8103e74:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8103e78:	68fb      	ldr	r3, [r7, #12]
 8103e7a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8103e7e:	68fb      	ldr	r3, [r7, #12]
 8103e80:	2201      	movs	r2, #1
 8103e82:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8103e86:	68fb      	ldr	r3, [r7, #12]
 8103e88:	2200      	movs	r2, #0
 8103e8a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8103e8e:	2303      	movs	r3, #3
 8103e90:	e019      	b.n	8103ec6 <HAL_SPI_Receive+0x4d8>
    while (hspi->RxXferCount > 0UL)
 8103e92:	68fb      	ldr	r3, [r7, #12]
 8103e94:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8103e98:	b29b      	uxth	r3, r3
 8103e9a:	2b00      	cmp	r3, #0
 8103e9c:	f47f af41 	bne.w	8103d22 <HAL_SPI_Receive+0x334>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8103ea0:	68f8      	ldr	r0, [r7, #12]
 8103ea2:	f000 fb4d 	bl	8104540 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8103ea6:	68fb      	ldr	r3, [r7, #12]
 8103ea8:	2201      	movs	r2, #1
 8103eaa:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8103eae:	68fb      	ldr	r3, [r7, #12]
 8103eb0:	2200      	movs	r2, #0
 8103eb2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8103eb6:	68fb      	ldr	r3, [r7, #12]
 8103eb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8103ebc:	2b00      	cmp	r3, #0
 8103ebe:	d001      	beq.n	8103ec4 <HAL_SPI_Receive+0x4d6>
  {
    return HAL_ERROR;
 8103ec0:	2301      	movs	r3, #1
 8103ec2:	e000      	b.n	8103ec6 <HAL_SPI_Receive+0x4d8>
  }
  else
  {
    return HAL_OK;
 8103ec4:	2300      	movs	r3, #0
  }
}
 8103ec6:	4618      	mov	r0, r3
 8103ec8:	3720      	adds	r7, #32
 8103eca:	46bd      	mov	sp, r7
 8103ecc:	bd80      	pop	{r7, pc}
	...

08103ed0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8103ed0:	b580      	push	{r7, lr}
 8103ed2:	b08e      	sub	sp, #56	@ 0x38
 8103ed4:	af02      	add	r7, sp, #8
 8103ed6:	60f8      	str	r0, [r7, #12]
 8103ed8:	60b9      	str	r1, [r7, #8]
 8103eda:	607a      	str	r2, [r7, #4]
 8103edc:	807b      	strh	r3, [r7, #2]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8103ede:	68fb      	ldr	r3, [r7, #12]
 8103ee0:	681b      	ldr	r3, [r3, #0]
 8103ee2:	3320      	adds	r3, #32
 8103ee4:	627b      	str	r3, [r7, #36]	@ 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8103ee6:	68fb      	ldr	r3, [r7, #12]
 8103ee8:	681b      	ldr	r3, [r3, #0]
 8103eea:	3330      	adds	r3, #48	@ 0x30
 8103eec:	623b      	str	r3, [r7, #32]
  uint32_t   fifo_length;
  uint32_t   temp_sr_reg;
  uint16_t   initial_TxXferCount;
  uint16_t   initial_RxXferCount;
  uint16_t   init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 8103eee:	68fb      	ldr	r3, [r7, #12]
 8103ef0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8103ef2:	095b      	lsrs	r3, r3, #5
 8103ef4:	b29b      	uxth	r3, r3
 8103ef6:	3301      	adds	r3, #1
 8103ef8:	83fb      	strh	r3, [r7, #30]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8103efa:	f7fd f9f5 	bl	81012e8 <HAL_GetTick>
 8103efe:	61b8      	str	r0, [r7, #24]

  initial_TxXferCount = Size;
 8103f00:	887b      	ldrh	r3, [r7, #2]
 8103f02:	857b      	strh	r3, [r7, #42]	@ 0x2a
  initial_RxXferCount = Size;
 8103f04:	887b      	ldrh	r3, [r7, #2]
 8103f06:	853b      	strh	r3, [r7, #40]	@ 0x28

  if (hspi->State != HAL_SPI_STATE_READY)
 8103f08:	68fb      	ldr	r3, [r7, #12]
 8103f0a:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8103f0e:	b2db      	uxtb	r3, r3
 8103f10:	2b01      	cmp	r3, #1
 8103f12:	d001      	beq.n	8103f18 <HAL_SPI_TransmitReceive+0x48>
  {
    return HAL_BUSY;
 8103f14:	2302      	movs	r3, #2
 8103f16:	e30e      	b.n	8104536 <HAL_SPI_TransmitReceive+0x666>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8103f18:	68bb      	ldr	r3, [r7, #8]
 8103f1a:	2b00      	cmp	r3, #0
 8103f1c:	d005      	beq.n	8103f2a <HAL_SPI_TransmitReceive+0x5a>
 8103f1e:	687b      	ldr	r3, [r7, #4]
 8103f20:	2b00      	cmp	r3, #0
 8103f22:	d002      	beq.n	8103f2a <HAL_SPI_TransmitReceive+0x5a>
 8103f24:	887b      	ldrh	r3, [r7, #2]
 8103f26:	2b00      	cmp	r3, #0
 8103f28:	d101      	bne.n	8103f2e <HAL_SPI_TransmitReceive+0x5e>
  {
    return HAL_ERROR;
 8103f2a:	2301      	movs	r3, #1
 8103f2c:	e303      	b.n	8104536 <HAL_SPI_TransmitReceive+0x666>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8103f2e:	68fb      	ldr	r3, [r7, #12]
 8103f30:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8103f34:	2b01      	cmp	r3, #1
 8103f36:	d101      	bne.n	8103f3c <HAL_SPI_TransmitReceive+0x6c>
 8103f38:	2302      	movs	r3, #2
 8103f3a:	e2fc      	b.n	8104536 <HAL_SPI_TransmitReceive+0x666>
 8103f3c:	68fb      	ldr	r3, [r7, #12]
 8103f3e:	2201      	movs	r2, #1
 8103f40:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 8103f44:	68fb      	ldr	r3, [r7, #12]
 8103f46:	2205      	movs	r2, #5
 8103f48:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8103f4c:	68fb      	ldr	r3, [r7, #12]
 8103f4e:	2200      	movs	r2, #0
 8103f50:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8103f54:	68fb      	ldr	r3, [r7, #12]
 8103f56:	687a      	ldr	r2, [r7, #4]
 8103f58:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount = Size;
 8103f5a:	68fb      	ldr	r3, [r7, #12]
 8103f5c:	887a      	ldrh	r2, [r7, #2]
 8103f5e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferSize  = Size;
 8103f62:	68fb      	ldr	r3, [r7, #12]
 8103f64:	887a      	ldrh	r2, [r7, #2]
 8103f66:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8103f6a:	68fb      	ldr	r3, [r7, #12]
 8103f6c:	68ba      	ldr	r2, [r7, #8]
 8103f6e:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount = Size;
 8103f70:	68fb      	ldr	r3, [r7, #12]
 8103f72:	887a      	ldrh	r2, [r7, #2]
 8103f74:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->TxXferSize  = Size;
 8103f78:	68fb      	ldr	r3, [r7, #12]
 8103f7a:	887a      	ldrh	r2, [r7, #2]
 8103f7c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8103f80:	68fb      	ldr	r3, [r7, #12]
 8103f82:	2200      	movs	r2, #0
 8103f84:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 8103f86:	68fb      	ldr	r3, [r7, #12]
 8103f88:	2200      	movs	r2, #0
 8103f8a:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 8103f8c:	68fb      	ldr	r3, [r7, #12]
 8103f8e:	681b      	ldr	r3, [r3, #0]
 8103f90:	68da      	ldr	r2, [r3, #12]
 8103f92:	68fb      	ldr	r3, [r7, #12]
 8103f94:	681b      	ldr	r3, [r3, #0]
 8103f96:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 8103f9a:	60da      	str	r2, [r3, #12]

  /* Initialize FIFO length */
  if (IS_SPI_HIGHEND_INSTANCE(hspi->Instance))
 8103f9c:	68fb      	ldr	r3, [r7, #12]
 8103f9e:	681b      	ldr	r3, [r3, #0]
 8103fa0:	4a70      	ldr	r2, [pc, #448]	@ (8104164 <HAL_SPI_TransmitReceive+0x294>)
 8103fa2:	4293      	cmp	r3, r2
 8103fa4:	d009      	beq.n	8103fba <HAL_SPI_TransmitReceive+0xea>
 8103fa6:	68fb      	ldr	r3, [r7, #12]
 8103fa8:	681b      	ldr	r3, [r3, #0]
 8103faa:	4a6f      	ldr	r2, [pc, #444]	@ (8104168 <HAL_SPI_TransmitReceive+0x298>)
 8103fac:	4293      	cmp	r3, r2
 8103fae:	d004      	beq.n	8103fba <HAL_SPI_TransmitReceive+0xea>
 8103fb0:	68fb      	ldr	r3, [r7, #12]
 8103fb2:	681b      	ldr	r3, [r3, #0]
 8103fb4:	4a6d      	ldr	r2, [pc, #436]	@ (810416c <HAL_SPI_TransmitReceive+0x29c>)
 8103fb6:	4293      	cmp	r3, r2
 8103fb8:	d102      	bne.n	8103fc0 <HAL_SPI_TransmitReceive+0xf0>
  {
    fifo_length = SPI_HIGHEND_FIFO_SIZE;
 8103fba:	2310      	movs	r3, #16
 8103fbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8103fbe:	e001      	b.n	8103fc4 <HAL_SPI_TransmitReceive+0xf4>
  }
  else
  {
    fifo_length = SPI_LOWEND_FIFO_SIZE;
 8103fc0:	2308      	movs	r3, #8
 8103fc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8103fc4:	68fb      	ldr	r3, [r7, #12]
 8103fc6:	681b      	ldr	r3, [r3, #0]
 8103fc8:	685b      	ldr	r3, [r3, #4]
 8103fca:	0c1b      	lsrs	r3, r3, #16
 8103fcc:	041b      	lsls	r3, r3, #16
 8103fce:	8879      	ldrh	r1, [r7, #2]
 8103fd0:	68fa      	ldr	r2, [r7, #12]
 8103fd2:	6812      	ldr	r2, [r2, #0]
 8103fd4:	430b      	orrs	r3, r1
 8103fd6:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 8103fd8:	68fb      	ldr	r3, [r7, #12]
 8103fda:	681b      	ldr	r3, [r3, #0]
 8103fdc:	681a      	ldr	r2, [r3, #0]
 8103fde:	68fb      	ldr	r3, [r7, #12]
 8103fe0:	681b      	ldr	r3, [r3, #0]
 8103fe2:	f042 0201 	orr.w	r2, r2, #1
 8103fe6:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8103fe8:	68fb      	ldr	r3, [r7, #12]
 8103fea:	685b      	ldr	r3, [r3, #4]
 8103fec:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8103ff0:	d107      	bne.n	8104002 <HAL_SPI_TransmitReceive+0x132>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8103ff2:	68fb      	ldr	r3, [r7, #12]
 8103ff4:	681b      	ldr	r3, [r3, #0]
 8103ff6:	681a      	ldr	r2, [r3, #0]
 8103ff8:	68fb      	ldr	r3, [r7, #12]
 8103ffa:	681b      	ldr	r3, [r3, #0]
 8103ffc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8104000:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8104002:	68fb      	ldr	r3, [r7, #12]
 8104004:	68db      	ldr	r3, [r3, #12]
 8104006:	2b0f      	cmp	r3, #15
 8104008:	f240 80a2 	bls.w	8104150 <HAL_SPI_TransmitReceive+0x280>
  {
    /* Adapt fifo length to 32bits data width */
    fifo_length = (fifo_length / 4UL);
 810400c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810400e:	089b      	lsrs	r3, r3, #2
 8104010:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8104012:	e094      	b.n	810413e <HAL_SPI_TransmitReceive+0x26e>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8104014:	68fb      	ldr	r3, [r7, #12]
 8104016:	681b      	ldr	r3, [r3, #0]
 8104018:	695b      	ldr	r3, [r3, #20]
 810401a:	f003 0302 	and.w	r3, r3, #2
 810401e:	2b02      	cmp	r3, #2
 8104020:	d120      	bne.n	8104064 <HAL_SPI_TransmitReceive+0x194>
 8104022:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8104024:	2b00      	cmp	r3, #0
 8104026:	d01d      	beq.n	8104064 <HAL_SPI_TransmitReceive+0x194>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8104028:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 810402a:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 810402c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810402e:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8104030:	429a      	cmp	r2, r3
 8104032:	d217      	bcs.n	8104064 <HAL_SPI_TransmitReceive+0x194>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8104034:	68fb      	ldr	r3, [r7, #12]
 8104036:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8104038:	68fb      	ldr	r3, [r7, #12]
 810403a:	681b      	ldr	r3, [r3, #0]
 810403c:	6812      	ldr	r2, [r2, #0]
 810403e:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8104040:	68fb      	ldr	r3, [r7, #12]
 8104042:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8104044:	1d1a      	adds	r2, r3, #4
 8104046:	68fb      	ldr	r3, [r7, #12]
 8104048:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount --;
 810404a:	68fb      	ldr	r3, [r7, #12]
 810404c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8104050:	b29b      	uxth	r3, r3
 8104052:	3b01      	subs	r3, #1
 8104054:	b29a      	uxth	r2, r3
 8104056:	68fb      	ldr	r3, [r7, #12]
 8104058:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 810405c:	68fb      	ldr	r3, [r7, #12]
 810405e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8104062:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8104064:	68fb      	ldr	r3, [r7, #12]
 8104066:	681b      	ldr	r3, [r3, #0]
 8104068:	695b      	ldr	r3, [r3, #20]
 810406a:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 810406c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 810406e:	2b00      	cmp	r3, #0
 8104070:	d065      	beq.n	810413e <HAL_SPI_TransmitReceive+0x26e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8104072:	68fb      	ldr	r3, [r7, #12]
 8104074:	681b      	ldr	r3, [r3, #0]
 8104076:	695b      	ldr	r3, [r3, #20]
 8104078:	f003 0301 	and.w	r3, r3, #1
 810407c:	2b01      	cmp	r3, #1
 810407e:	d118      	bne.n	81040b2 <HAL_SPI_TransmitReceive+0x1e2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8104080:	68fb      	ldr	r3, [r7, #12]
 8104082:	681a      	ldr	r2, [r3, #0]
 8104084:	68fb      	ldr	r3, [r7, #12]
 8104086:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8104088:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 810408a:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 810408c:	68fb      	ldr	r3, [r7, #12]
 810408e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8104090:	1d1a      	adds	r2, r3, #4
 8104092:	68fb      	ldr	r3, [r7, #12]
 8104094:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8104096:	68fb      	ldr	r3, [r7, #12]
 8104098:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 810409c:	b29b      	uxth	r3, r3
 810409e:	3b01      	subs	r3, #1
 81040a0:	b29a      	uxth	r2, r3
 81040a2:	68fb      	ldr	r3, [r7, #12]
 81040a4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 81040a8:	68fb      	ldr	r3, [r7, #12]
 81040aa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 81040ae:	853b      	strh	r3, [r7, #40]	@ 0x28
 81040b0:	e045      	b.n	810413e <HAL_SPI_TransmitReceive+0x26e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 81040b2:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 81040b4:	8bfb      	ldrh	r3, [r7, #30]
 81040b6:	429a      	cmp	r2, r3
 81040b8:	d21d      	bcs.n	81040f6 <HAL_SPI_TransmitReceive+0x226>
 81040ba:	697b      	ldr	r3, [r7, #20]
 81040bc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 81040c0:	2b00      	cmp	r3, #0
 81040c2:	d018      	beq.n	81040f6 <HAL_SPI_TransmitReceive+0x226>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 81040c4:	68fb      	ldr	r3, [r7, #12]
 81040c6:	681a      	ldr	r2, [r3, #0]
 81040c8:	68fb      	ldr	r3, [r7, #12]
 81040ca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 81040cc:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 81040ce:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 81040d0:	68fb      	ldr	r3, [r7, #12]
 81040d2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 81040d4:	1d1a      	adds	r2, r3, #4
 81040d6:	68fb      	ldr	r3, [r7, #12]
 81040d8:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 81040da:	68fb      	ldr	r3, [r7, #12]
 81040dc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 81040e0:	b29b      	uxth	r3, r3
 81040e2:	3b01      	subs	r3, #1
 81040e4:	b29a      	uxth	r2, r3
 81040e6:	68fb      	ldr	r3, [r7, #12]
 81040e8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 81040ec:	68fb      	ldr	r3, [r7, #12]
 81040ee:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 81040f2:	853b      	strh	r3, [r7, #40]	@ 0x28
 81040f4:	e023      	b.n	810413e <HAL_SPI_TransmitReceive+0x26e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 81040f6:	f7fd f8f7 	bl	81012e8 <HAL_GetTick>
 81040fa:	4602      	mov	r2, r0
 81040fc:	69bb      	ldr	r3, [r7, #24]
 81040fe:	1ad3      	subs	r3, r2, r3
 8104100:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8104102:	429a      	cmp	r2, r3
 8104104:	d803      	bhi.n	810410e <HAL_SPI_TransmitReceive+0x23e>
 8104106:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8104108:	f1b3 3fff 	cmp.w	r3, #4294967295
 810410c:	d102      	bne.n	8104114 <HAL_SPI_TransmitReceive+0x244>
 810410e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8104110:	2b00      	cmp	r3, #0
 8104112:	d114      	bne.n	810413e <HAL_SPI_TransmitReceive+0x26e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8104114:	68f8      	ldr	r0, [r7, #12]
 8104116:	f000 fa13 	bl	8104540 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 810411a:	68fb      	ldr	r3, [r7, #12]
 810411c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8104120:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8104124:	68fb      	ldr	r3, [r7, #12]
 8104126:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 810412a:	68fb      	ldr	r3, [r7, #12]
 810412c:	2201      	movs	r2, #1
 810412e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 8104132:	68fb      	ldr	r3, [r7, #12]
 8104134:	2200      	movs	r2, #0
 8104136:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 810413a:	2303      	movs	r3, #3
 810413c:	e1fb      	b.n	8104536 <HAL_SPI_TransmitReceive+0x666>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 810413e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8104140:	2b00      	cmp	r3, #0
 8104142:	f47f af67 	bne.w	8104014 <HAL_SPI_TransmitReceive+0x144>
 8104146:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8104148:	2b00      	cmp	r3, #0
 810414a:	f47f af63 	bne.w	8104014 <HAL_SPI_TransmitReceive+0x144>
 810414e:	e1cc      	b.n	81044ea <HAL_SPI_TransmitReceive+0x61a>
        }
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8104150:	68fb      	ldr	r3, [r7, #12]
 8104152:	68db      	ldr	r3, [r3, #12]
 8104154:	2b07      	cmp	r3, #7
 8104156:	f240 81c0 	bls.w	81044da <HAL_SPI_TransmitReceive+0x60a>
  {
    /* Adapt fifo length to 16bits data width */
    fifo_length = (fifo_length / 2UL);
 810415a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810415c:	085b      	lsrs	r3, r3, #1
 810415e:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8104160:	e0c7      	b.n	81042f2 <HAL_SPI_TransmitReceive+0x422>
 8104162:	bf00      	nop
 8104164:	40013000 	.word	0x40013000
 8104168:	40003800 	.word	0x40003800
 810416c:	40003c00 	.word	0x40003c00
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8104170:	68fb      	ldr	r3, [r7, #12]
 8104172:	681b      	ldr	r3, [r3, #0]
 8104174:	695b      	ldr	r3, [r3, #20]
 8104176:	f003 0302 	and.w	r3, r3, #2
 810417a:	2b02      	cmp	r3, #2
 810417c:	d11f      	bne.n	81041be <HAL_SPI_TransmitReceive+0x2ee>
 810417e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8104180:	2b00      	cmp	r3, #0
 8104182:	d01c      	beq.n	81041be <HAL_SPI_TransmitReceive+0x2ee>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8104184:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8104186:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8104188:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810418a:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 810418c:	429a      	cmp	r2, r3
 810418e:	d216      	bcs.n	81041be <HAL_SPI_TransmitReceive+0x2ee>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8104190:	68fb      	ldr	r3, [r7, #12]
 8104192:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8104194:	881a      	ldrh	r2, [r3, #0]
 8104196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8104198:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 810419a:	68fb      	ldr	r3, [r7, #12]
 810419c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 810419e:	1c9a      	adds	r2, r3, #2
 81041a0:	68fb      	ldr	r3, [r7, #12]
 81041a2:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 81041a4:	68fb      	ldr	r3, [r7, #12]
 81041a6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 81041aa:	b29b      	uxth	r3, r3
 81041ac:	3b01      	subs	r3, #1
 81041ae:	b29a      	uxth	r2, r3
 81041b0:	68fb      	ldr	r3, [r7, #12]
 81041b2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 81041b6:	68fb      	ldr	r3, [r7, #12]
 81041b8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 81041bc:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 81041be:	68fb      	ldr	r3, [r7, #12]
 81041c0:	681b      	ldr	r3, [r3, #0]
 81041c2:	695b      	ldr	r3, [r3, #20]
 81041c4:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 81041c6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 81041c8:	2b00      	cmp	r3, #0
 81041ca:	f000 8092 	beq.w	81042f2 <HAL_SPI_TransmitReceive+0x422>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 81041ce:	68fb      	ldr	r3, [r7, #12]
 81041d0:	681b      	ldr	r3, [r3, #0]
 81041d2:	695b      	ldr	r3, [r3, #20]
 81041d4:	f003 0301 	and.w	r3, r3, #1
 81041d8:	2b01      	cmp	r3, #1
 81041da:	d118      	bne.n	810420e <HAL_SPI_TransmitReceive+0x33e>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 81041dc:	68fb      	ldr	r3, [r7, #12]
 81041de:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 81041e0:	6a3a      	ldr	r2, [r7, #32]
 81041e2:	8812      	ldrh	r2, [r2, #0]
 81041e4:	b292      	uxth	r2, r2
 81041e6:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 81041e8:	68fb      	ldr	r3, [r7, #12]
 81041ea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 81041ec:	1c9a      	adds	r2, r3, #2
 81041ee:	68fb      	ldr	r3, [r7, #12]
 81041f0:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 81041f2:	68fb      	ldr	r3, [r7, #12]
 81041f4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 81041f8:	b29b      	uxth	r3, r3
 81041fa:	3b01      	subs	r3, #1
 81041fc:	b29a      	uxth	r2, r3
 81041fe:	68fb      	ldr	r3, [r7, #12]
 8104200:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8104204:	68fb      	ldr	r3, [r7, #12]
 8104206:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 810420a:	853b      	strh	r3, [r7, #40]	@ 0x28
 810420c:	e071      	b.n	81042f2 <HAL_SPI_TransmitReceive+0x422>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 810420e:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8104210:	8bfb      	ldrh	r3, [r7, #30]
 8104212:	429a      	cmp	r2, r3
 8104214:	d228      	bcs.n	8104268 <HAL_SPI_TransmitReceive+0x398>
 8104216:	697b      	ldr	r3, [r7, #20]
 8104218:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 810421c:	2b00      	cmp	r3, #0
 810421e:	d023      	beq.n	8104268 <HAL_SPI_TransmitReceive+0x398>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8104220:	68fb      	ldr	r3, [r7, #12]
 8104222:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8104224:	6a3a      	ldr	r2, [r7, #32]
 8104226:	8812      	ldrh	r2, [r2, #0]
 8104228:	b292      	uxth	r2, r2
 810422a:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 810422c:	68fb      	ldr	r3, [r7, #12]
 810422e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8104230:	1c9a      	adds	r2, r3, #2
 8104232:	68fb      	ldr	r3, [r7, #12]
 8104234:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8104236:	68fb      	ldr	r3, [r7, #12]
 8104238:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 810423a:	6a3a      	ldr	r2, [r7, #32]
 810423c:	8812      	ldrh	r2, [r2, #0]
 810423e:	b292      	uxth	r2, r2
 8104240:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8104242:	68fb      	ldr	r3, [r7, #12]
 8104244:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8104246:	1c9a      	adds	r2, r3, #2
 8104248:	68fb      	ldr	r3, [r7, #12]
 810424a:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 810424c:	68fb      	ldr	r3, [r7, #12]
 810424e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8104252:	b29b      	uxth	r3, r3
 8104254:	3b02      	subs	r3, #2
 8104256:	b29a      	uxth	r2, r3
 8104258:	68fb      	ldr	r3, [r7, #12]
 810425a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 810425e:	68fb      	ldr	r3, [r7, #12]
 8104260:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8104264:	853b      	strh	r3, [r7, #40]	@ 0x28
 8104266:	e044      	b.n	81042f2 <HAL_SPI_TransmitReceive+0x422>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 8104268:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 810426a:	2b01      	cmp	r3, #1
 810426c:	d11d      	bne.n	81042aa <HAL_SPI_TransmitReceive+0x3da>
 810426e:	697b      	ldr	r3, [r7, #20]
 8104270:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8104274:	2b00      	cmp	r3, #0
 8104276:	d018      	beq.n	81042aa <HAL_SPI_TransmitReceive+0x3da>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8104278:	68fb      	ldr	r3, [r7, #12]
 810427a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 810427c:	6a3a      	ldr	r2, [r7, #32]
 810427e:	8812      	ldrh	r2, [r2, #0]
 8104280:	b292      	uxth	r2, r2
 8104282:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8104284:	68fb      	ldr	r3, [r7, #12]
 8104286:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8104288:	1c9a      	adds	r2, r3, #2
 810428a:	68fb      	ldr	r3, [r7, #12]
 810428c:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 810428e:	68fb      	ldr	r3, [r7, #12]
 8104290:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8104294:	b29b      	uxth	r3, r3
 8104296:	3b01      	subs	r3, #1
 8104298:	b29a      	uxth	r2, r3
 810429a:	68fb      	ldr	r3, [r7, #12]
 810429c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 81042a0:	68fb      	ldr	r3, [r7, #12]
 81042a2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 81042a6:	853b      	strh	r3, [r7, #40]	@ 0x28
 81042a8:	e023      	b.n	81042f2 <HAL_SPI_TransmitReceive+0x422>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 81042aa:	f7fd f81d 	bl	81012e8 <HAL_GetTick>
 81042ae:	4602      	mov	r2, r0
 81042b0:	69bb      	ldr	r3, [r7, #24]
 81042b2:	1ad3      	subs	r3, r2, r3
 81042b4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 81042b6:	429a      	cmp	r2, r3
 81042b8:	d803      	bhi.n	81042c2 <HAL_SPI_TransmitReceive+0x3f2>
 81042ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81042bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 81042c0:	d102      	bne.n	81042c8 <HAL_SPI_TransmitReceive+0x3f8>
 81042c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81042c4:	2b00      	cmp	r3, #0
 81042c6:	d114      	bne.n	81042f2 <HAL_SPI_TransmitReceive+0x422>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 81042c8:	68f8      	ldr	r0, [r7, #12]
 81042ca:	f000 f939 	bl	8104540 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 81042ce:	68fb      	ldr	r3, [r7, #12]
 81042d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 81042d4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 81042d8:	68fb      	ldr	r3, [r7, #12]
 81042da:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 81042de:	68fb      	ldr	r3, [r7, #12]
 81042e0:	2201      	movs	r2, #1
 81042e2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 81042e6:	68fb      	ldr	r3, [r7, #12]
 81042e8:	2200      	movs	r2, #0
 81042ea:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 81042ee:	2303      	movs	r3, #3
 81042f0:	e121      	b.n	8104536 <HAL_SPI_TransmitReceive+0x666>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 81042f2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 81042f4:	2b00      	cmp	r3, #0
 81042f6:	f47f af3b 	bne.w	8104170 <HAL_SPI_TransmitReceive+0x2a0>
 81042fa:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 81042fc:	2b00      	cmp	r3, #0
 81042fe:	f47f af37 	bne.w	8104170 <HAL_SPI_TransmitReceive+0x2a0>
 8104302:	e0f2      	b.n	81044ea <HAL_SPI_TransmitReceive+0x61a>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8104304:	68fb      	ldr	r3, [r7, #12]
 8104306:	681b      	ldr	r3, [r3, #0]
 8104308:	695b      	ldr	r3, [r3, #20]
 810430a:	f003 0302 	and.w	r3, r3, #2
 810430e:	2b02      	cmp	r3, #2
 8104310:	d121      	bne.n	8104356 <HAL_SPI_TransmitReceive+0x486>
 8104312:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8104314:	2b00      	cmp	r3, #0
 8104316:	d01e      	beq.n	8104356 <HAL_SPI_TransmitReceive+0x486>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8104318:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 810431a:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 810431c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810431e:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8104320:	429a      	cmp	r2, r3
 8104322:	d218      	bcs.n	8104356 <HAL_SPI_TransmitReceive+0x486>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8104324:	68fb      	ldr	r3, [r7, #12]
 8104326:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8104328:	68fb      	ldr	r3, [r7, #12]
 810432a:	681b      	ldr	r3, [r3, #0]
 810432c:	3320      	adds	r3, #32
 810432e:	7812      	ldrb	r2, [r2, #0]
 8104330:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8104332:	68fb      	ldr	r3, [r7, #12]
 8104334:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8104336:	1c5a      	adds	r2, r3, #1
 8104338:	68fb      	ldr	r3, [r7, #12]
 810433a:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 810433c:	68fb      	ldr	r3, [r7, #12]
 810433e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8104342:	b29b      	uxth	r3, r3
 8104344:	3b01      	subs	r3, #1
 8104346:	b29a      	uxth	r2, r3
 8104348:	68fb      	ldr	r3, [r7, #12]
 810434a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 810434e:	68fb      	ldr	r3, [r7, #12]
 8104350:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8104354:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8104356:	68fb      	ldr	r3, [r7, #12]
 8104358:	681b      	ldr	r3, [r3, #0]
 810435a:	695b      	ldr	r3, [r3, #20]
 810435c:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 810435e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8104360:	2b00      	cmp	r3, #0
 8104362:	f000 80ba 	beq.w	81044da <HAL_SPI_TransmitReceive+0x60a>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8104366:	68fb      	ldr	r3, [r7, #12]
 8104368:	681b      	ldr	r3, [r3, #0]
 810436a:	695b      	ldr	r3, [r3, #20]
 810436c:	f003 0301 	and.w	r3, r3, #1
 8104370:	2b01      	cmp	r3, #1
 8104372:	d11b      	bne.n	81043ac <HAL_SPI_TransmitReceive+0x4dc>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8104374:	68fb      	ldr	r3, [r7, #12]
 8104376:	681b      	ldr	r3, [r3, #0]
 8104378:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 810437c:	68fb      	ldr	r3, [r7, #12]
 810437e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8104380:	7812      	ldrb	r2, [r2, #0]
 8104382:	b2d2      	uxtb	r2, r2
 8104384:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8104386:	68fb      	ldr	r3, [r7, #12]
 8104388:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 810438a:	1c5a      	adds	r2, r3, #1
 810438c:	68fb      	ldr	r3, [r7, #12]
 810438e:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8104390:	68fb      	ldr	r3, [r7, #12]
 8104392:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8104396:	b29b      	uxth	r3, r3
 8104398:	3b01      	subs	r3, #1
 810439a:	b29a      	uxth	r2, r3
 810439c:	68fb      	ldr	r3, [r7, #12]
 810439e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 81043a2:	68fb      	ldr	r3, [r7, #12]
 81043a4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 81043a8:	853b      	strh	r3, [r7, #40]	@ 0x28
 81043aa:	e096      	b.n	81044da <HAL_SPI_TransmitReceive+0x60a>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 81043ac:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 81043ae:	8bfb      	ldrh	r3, [r7, #30]
 81043b0:	429a      	cmp	r2, r3
 81043b2:	d24a      	bcs.n	810444a <HAL_SPI_TransmitReceive+0x57a>
 81043b4:	697b      	ldr	r3, [r7, #20]
 81043b6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 81043ba:	2b00      	cmp	r3, #0
 81043bc:	d045      	beq.n	810444a <HAL_SPI_TransmitReceive+0x57a>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 81043be:	68fb      	ldr	r3, [r7, #12]
 81043c0:	681b      	ldr	r3, [r3, #0]
 81043c2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 81043c6:	68fb      	ldr	r3, [r7, #12]
 81043c8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 81043ca:	7812      	ldrb	r2, [r2, #0]
 81043cc:	b2d2      	uxtb	r2, r2
 81043ce:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 81043d0:	68fb      	ldr	r3, [r7, #12]
 81043d2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 81043d4:	1c5a      	adds	r2, r3, #1
 81043d6:	68fb      	ldr	r3, [r7, #12]
 81043d8:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 81043da:	68fb      	ldr	r3, [r7, #12]
 81043dc:	681b      	ldr	r3, [r3, #0]
 81043de:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 81043e2:	68fb      	ldr	r3, [r7, #12]
 81043e4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 81043e6:	7812      	ldrb	r2, [r2, #0]
 81043e8:	b2d2      	uxtb	r2, r2
 81043ea:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 81043ec:	68fb      	ldr	r3, [r7, #12]
 81043ee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 81043f0:	1c5a      	adds	r2, r3, #1
 81043f2:	68fb      	ldr	r3, [r7, #12]
 81043f4:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 81043f6:	68fb      	ldr	r3, [r7, #12]
 81043f8:	681b      	ldr	r3, [r3, #0]
 81043fa:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 81043fe:	68fb      	ldr	r3, [r7, #12]
 8104400:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8104402:	7812      	ldrb	r2, [r2, #0]
 8104404:	b2d2      	uxtb	r2, r2
 8104406:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8104408:	68fb      	ldr	r3, [r7, #12]
 810440a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 810440c:	1c5a      	adds	r2, r3, #1
 810440e:	68fb      	ldr	r3, [r7, #12]
 8104410:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8104412:	68fb      	ldr	r3, [r7, #12]
 8104414:	681b      	ldr	r3, [r3, #0]
 8104416:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 810441a:	68fb      	ldr	r3, [r7, #12]
 810441c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 810441e:	7812      	ldrb	r2, [r2, #0]
 8104420:	b2d2      	uxtb	r2, r2
 8104422:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8104424:	68fb      	ldr	r3, [r7, #12]
 8104426:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8104428:	1c5a      	adds	r2, r3, #1
 810442a:	68fb      	ldr	r3, [r7, #12]
 810442c:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 810442e:	68fb      	ldr	r3, [r7, #12]
 8104430:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8104434:	b29b      	uxth	r3, r3
 8104436:	3b04      	subs	r3, #4
 8104438:	b29a      	uxth	r2, r3
 810443a:	68fb      	ldr	r3, [r7, #12]
 810443c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8104440:	68fb      	ldr	r3, [r7, #12]
 8104442:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8104446:	853b      	strh	r3, [r7, #40]	@ 0x28
 8104448:	e047      	b.n	81044da <HAL_SPI_TransmitReceive+0x60a>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 810444a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 810444c:	2b03      	cmp	r3, #3
 810444e:	d820      	bhi.n	8104492 <HAL_SPI_TransmitReceive+0x5c2>
 8104450:	697b      	ldr	r3, [r7, #20]
 8104452:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 8104456:	2b00      	cmp	r3, #0
 8104458:	d01b      	beq.n	8104492 <HAL_SPI_TransmitReceive+0x5c2>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 810445a:	68fb      	ldr	r3, [r7, #12]
 810445c:	681b      	ldr	r3, [r3, #0]
 810445e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8104462:	68fb      	ldr	r3, [r7, #12]
 8104464:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8104466:	7812      	ldrb	r2, [r2, #0]
 8104468:	b2d2      	uxtb	r2, r2
 810446a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 810446c:	68fb      	ldr	r3, [r7, #12]
 810446e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8104470:	1c5a      	adds	r2, r3, #1
 8104472:	68fb      	ldr	r3, [r7, #12]
 8104474:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8104476:	68fb      	ldr	r3, [r7, #12]
 8104478:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 810447c:	b29b      	uxth	r3, r3
 810447e:	3b01      	subs	r3, #1
 8104480:	b29a      	uxth	r2, r3
 8104482:	68fb      	ldr	r3, [r7, #12]
 8104484:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8104488:	68fb      	ldr	r3, [r7, #12]
 810448a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 810448e:	853b      	strh	r3, [r7, #40]	@ 0x28
 8104490:	e023      	b.n	81044da <HAL_SPI_TransmitReceive+0x60a>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8104492:	f7fc ff29 	bl	81012e8 <HAL_GetTick>
 8104496:	4602      	mov	r2, r0
 8104498:	69bb      	ldr	r3, [r7, #24]
 810449a:	1ad3      	subs	r3, r2, r3
 810449c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 810449e:	429a      	cmp	r2, r3
 81044a0:	d803      	bhi.n	81044aa <HAL_SPI_TransmitReceive+0x5da>
 81044a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81044a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 81044a8:	d102      	bne.n	81044b0 <HAL_SPI_TransmitReceive+0x5e0>
 81044aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81044ac:	2b00      	cmp	r3, #0
 81044ae:	d114      	bne.n	81044da <HAL_SPI_TransmitReceive+0x60a>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 81044b0:	68f8      	ldr	r0, [r7, #12]
 81044b2:	f000 f845 	bl	8104540 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 81044b6:	68fb      	ldr	r3, [r7, #12]
 81044b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 81044bc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 81044c0:	68fb      	ldr	r3, [r7, #12]
 81044c2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 81044c6:	68fb      	ldr	r3, [r7, #12]
 81044c8:	2201      	movs	r2, #1
 81044ca:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 81044ce:	68fb      	ldr	r3, [r7, #12]
 81044d0:	2200      	movs	r2, #0
 81044d2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 81044d6:	2303      	movs	r3, #3
 81044d8:	e02d      	b.n	8104536 <HAL_SPI_TransmitReceive+0x666>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 81044da:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 81044dc:	2b00      	cmp	r3, #0
 81044de:	f47f af11 	bne.w	8104304 <HAL_SPI_TransmitReceive+0x434>
 81044e2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 81044e4:	2b00      	cmp	r3, #0
 81044e6:	f47f af0d 	bne.w	8104304 <HAL_SPI_TransmitReceive+0x434>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 81044ea:	69bb      	ldr	r3, [r7, #24]
 81044ec:	9300      	str	r3, [sp, #0]
 81044ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81044f0:	2200      	movs	r2, #0
 81044f2:	2108      	movs	r1, #8
 81044f4:	68f8      	ldr	r0, [r7, #12]
 81044f6:	f000 f8c3 	bl	8104680 <SPI_WaitOnFlagUntilTimeout>
 81044fa:	4603      	mov	r3, r0
 81044fc:	2b00      	cmp	r3, #0
 81044fe:	d007      	beq.n	8104510 <HAL_SPI_TransmitReceive+0x640>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8104500:	68fb      	ldr	r3, [r7, #12]
 8104502:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8104506:	f043 0220 	orr.w	r2, r3, #32
 810450a:	68fb      	ldr	r3, [r7, #12]
 810450c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8104510:	68f8      	ldr	r0, [r7, #12]
 8104512:	f000 f815 	bl	8104540 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8104516:	68fb      	ldr	r3, [r7, #12]
 8104518:	2201      	movs	r2, #1
 810451a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 810451e:	68fb      	ldr	r3, [r7, #12]
 8104520:	2200      	movs	r2, #0
 8104522:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8104526:	68fb      	ldr	r3, [r7, #12]
 8104528:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 810452c:	2b00      	cmp	r3, #0
 810452e:	d001      	beq.n	8104534 <HAL_SPI_TransmitReceive+0x664>
  {
    return HAL_ERROR;
 8104530:	2301      	movs	r3, #1
 8104532:	e000      	b.n	8104536 <HAL_SPI_TransmitReceive+0x666>
  }
  else
  {
    return HAL_OK;
 8104534:	2300      	movs	r3, #0
  }
}
 8104536:	4618      	mov	r0, r3
 8104538:	3730      	adds	r7, #48	@ 0x30
 810453a:	46bd      	mov	sp, r7
 810453c:	bd80      	pop	{r7, pc}
 810453e:	bf00      	nop

08104540 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8104540:	b480      	push	{r7}
 8104542:	b085      	sub	sp, #20
 8104544:	af00      	add	r7, sp, #0
 8104546:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8104548:	687b      	ldr	r3, [r7, #4]
 810454a:	681b      	ldr	r3, [r3, #0]
 810454c:	695b      	ldr	r3, [r3, #20]
 810454e:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8104550:	687b      	ldr	r3, [r7, #4]
 8104552:	681b      	ldr	r3, [r3, #0]
 8104554:	699a      	ldr	r2, [r3, #24]
 8104556:	687b      	ldr	r3, [r7, #4]
 8104558:	681b      	ldr	r3, [r3, #0]
 810455a:	f042 0208 	orr.w	r2, r2, #8
 810455e:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8104560:	687b      	ldr	r3, [r7, #4]
 8104562:	681b      	ldr	r3, [r3, #0]
 8104564:	699a      	ldr	r2, [r3, #24]
 8104566:	687b      	ldr	r3, [r7, #4]
 8104568:	681b      	ldr	r3, [r3, #0]
 810456a:	f042 0210 	orr.w	r2, r2, #16
 810456e:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8104570:	687b      	ldr	r3, [r7, #4]
 8104572:	681b      	ldr	r3, [r3, #0]
 8104574:	681a      	ldr	r2, [r3, #0]
 8104576:	687b      	ldr	r3, [r7, #4]
 8104578:	681b      	ldr	r3, [r3, #0]
 810457a:	f022 0201 	bic.w	r2, r2, #1
 810457e:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8104580:	687b      	ldr	r3, [r7, #4]
 8104582:	681b      	ldr	r3, [r3, #0]
 8104584:	691b      	ldr	r3, [r3, #16]
 8104586:	687a      	ldr	r2, [r7, #4]
 8104588:	6812      	ldr	r2, [r2, #0]
 810458a:	f423 735b 	bic.w	r3, r3, #876	@ 0x36c
 810458e:	f023 0303 	bic.w	r3, r3, #3
 8104592:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8104594:	687b      	ldr	r3, [r7, #4]
 8104596:	681b      	ldr	r3, [r3, #0]
 8104598:	689a      	ldr	r2, [r3, #8]
 810459a:	687b      	ldr	r3, [r7, #4]
 810459c:	681b      	ldr	r3, [r3, #0]
 810459e:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 81045a2:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 81045a4:	687b      	ldr	r3, [r7, #4]
 81045a6:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 81045aa:	b2db      	uxtb	r3, r3
 81045ac:	2b04      	cmp	r3, #4
 81045ae:	d014      	beq.n	81045da <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 81045b0:	68fb      	ldr	r3, [r7, #12]
 81045b2:	f003 0320 	and.w	r3, r3, #32
 81045b6:	2b00      	cmp	r3, #0
 81045b8:	d00f      	beq.n	81045da <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 81045ba:	687b      	ldr	r3, [r7, #4]
 81045bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 81045c0:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 81045c4:	687b      	ldr	r3, [r7, #4]
 81045c6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 81045ca:	687b      	ldr	r3, [r7, #4]
 81045cc:	681b      	ldr	r3, [r3, #0]
 81045ce:	699a      	ldr	r2, [r3, #24]
 81045d0:	687b      	ldr	r3, [r7, #4]
 81045d2:	681b      	ldr	r3, [r3, #0]
 81045d4:	f042 0220 	orr.w	r2, r2, #32
 81045d8:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 81045da:	687b      	ldr	r3, [r7, #4]
 81045dc:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 81045e0:	b2db      	uxtb	r3, r3
 81045e2:	2b03      	cmp	r3, #3
 81045e4:	d014      	beq.n	8104610 <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 81045e6:	68fb      	ldr	r3, [r7, #12]
 81045e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 81045ec:	2b00      	cmp	r3, #0
 81045ee:	d00f      	beq.n	8104610 <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 81045f0:	687b      	ldr	r3, [r7, #4]
 81045f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 81045f6:	f043 0204 	orr.w	r2, r3, #4
 81045fa:	687b      	ldr	r3, [r7, #4]
 81045fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8104600:	687b      	ldr	r3, [r7, #4]
 8104602:	681b      	ldr	r3, [r3, #0]
 8104604:	699a      	ldr	r2, [r3, #24]
 8104606:	687b      	ldr	r3, [r7, #4]
 8104608:	681b      	ldr	r3, [r3, #0]
 810460a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 810460e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8104610:	68fb      	ldr	r3, [r7, #12]
 8104612:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8104616:	2b00      	cmp	r3, #0
 8104618:	d00f      	beq.n	810463a <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 810461a:	687b      	ldr	r3, [r7, #4]
 810461c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8104620:	f043 0201 	orr.w	r2, r3, #1
 8104624:	687b      	ldr	r3, [r7, #4]
 8104626:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 810462a:	687b      	ldr	r3, [r7, #4]
 810462c:	681b      	ldr	r3, [r3, #0]
 810462e:	699a      	ldr	r2, [r3, #24]
 8104630:	687b      	ldr	r3, [r7, #4]
 8104632:	681b      	ldr	r3, [r3, #0]
 8104634:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8104638:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 810463a:	68fb      	ldr	r3, [r7, #12]
 810463c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8104640:	2b00      	cmp	r3, #0
 8104642:	d00f      	beq.n	8104664 <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8104644:	687b      	ldr	r3, [r7, #4]
 8104646:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 810464a:	f043 0208 	orr.w	r2, r3, #8
 810464e:	687b      	ldr	r3, [r7, #4]
 8104650:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8104654:	687b      	ldr	r3, [r7, #4]
 8104656:	681b      	ldr	r3, [r3, #0]
 8104658:	699a      	ldr	r2, [r3, #24]
 810465a:	687b      	ldr	r3, [r7, #4]
 810465c:	681b      	ldr	r3, [r3, #0]
 810465e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8104662:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8104664:	687b      	ldr	r3, [r7, #4]
 8104666:	2200      	movs	r2, #0
 8104668:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 810466c:	687b      	ldr	r3, [r7, #4]
 810466e:	2200      	movs	r2, #0
 8104670:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 8104674:	bf00      	nop
 8104676:	3714      	adds	r7, #20
 8104678:	46bd      	mov	sp, r7
 810467a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810467e:	4770      	bx	lr

08104680 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8104680:	b580      	push	{r7, lr}
 8104682:	b084      	sub	sp, #16
 8104684:	af00      	add	r7, sp, #0
 8104686:	60f8      	str	r0, [r7, #12]
 8104688:	60b9      	str	r1, [r7, #8]
 810468a:	603b      	str	r3, [r7, #0]
 810468c:	4613      	mov	r3, r2
 810468e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8104690:	e010      	b.n	81046b4 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8104692:	f7fc fe29 	bl	81012e8 <HAL_GetTick>
 8104696:	4602      	mov	r2, r0
 8104698:	69bb      	ldr	r3, [r7, #24]
 810469a:	1ad3      	subs	r3, r2, r3
 810469c:	683a      	ldr	r2, [r7, #0]
 810469e:	429a      	cmp	r2, r3
 81046a0:	d803      	bhi.n	81046aa <SPI_WaitOnFlagUntilTimeout+0x2a>
 81046a2:	683b      	ldr	r3, [r7, #0]
 81046a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 81046a8:	d102      	bne.n	81046b0 <SPI_WaitOnFlagUntilTimeout+0x30>
 81046aa:	683b      	ldr	r3, [r7, #0]
 81046ac:	2b00      	cmp	r3, #0
 81046ae:	d101      	bne.n	81046b4 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 81046b0:	2303      	movs	r3, #3
 81046b2:	e00f      	b.n	81046d4 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 81046b4:	68fb      	ldr	r3, [r7, #12]
 81046b6:	681b      	ldr	r3, [r3, #0]
 81046b8:	695a      	ldr	r2, [r3, #20]
 81046ba:	68bb      	ldr	r3, [r7, #8]
 81046bc:	4013      	ands	r3, r2
 81046be:	68ba      	ldr	r2, [r7, #8]
 81046c0:	429a      	cmp	r2, r3
 81046c2:	bf0c      	ite	eq
 81046c4:	2301      	moveq	r3, #1
 81046c6:	2300      	movne	r3, #0
 81046c8:	b2db      	uxtb	r3, r3
 81046ca:	461a      	mov	r2, r3
 81046cc:	79fb      	ldrb	r3, [r7, #7]
 81046ce:	429a      	cmp	r2, r3
 81046d0:	d0df      	beq.n	8104692 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 81046d2:	2300      	movs	r3, #0
}
 81046d4:	4618      	mov	r0, r3
 81046d6:	3710      	adds	r7, #16
 81046d8:	46bd      	mov	sp, r7
 81046da:	bd80      	pop	{r7, pc}

081046dc <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 81046dc:	b480      	push	{r7}
 81046de:	b085      	sub	sp, #20
 81046e0:	af00      	add	r7, sp, #0
 81046e2:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 81046e4:	687b      	ldr	r3, [r7, #4]
 81046e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 81046e8:	095b      	lsrs	r3, r3, #5
 81046ea:	3301      	adds	r3, #1
 81046ec:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 81046ee:	687b      	ldr	r3, [r7, #4]
 81046f0:	68db      	ldr	r3, [r3, #12]
 81046f2:	3301      	adds	r3, #1
 81046f4:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 81046f6:	68bb      	ldr	r3, [r7, #8]
 81046f8:	3307      	adds	r3, #7
 81046fa:	08db      	lsrs	r3, r3, #3
 81046fc:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 81046fe:	68bb      	ldr	r3, [r7, #8]
 8104700:	68fa      	ldr	r2, [r7, #12]
 8104702:	fb02 f303 	mul.w	r3, r2, r3
}
 8104706:	4618      	mov	r0, r3
 8104708:	3714      	adds	r7, #20
 810470a:	46bd      	mov	sp, r7
 810470c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104710:	4770      	bx	lr

08104712 <memset>:
 8104712:	4402      	add	r2, r0
 8104714:	4603      	mov	r3, r0
 8104716:	4293      	cmp	r3, r2
 8104718:	d100      	bne.n	810471c <memset+0xa>
 810471a:	4770      	bx	lr
 810471c:	f803 1b01 	strb.w	r1, [r3], #1
 8104720:	e7f9      	b.n	8104716 <memset+0x4>
	...

08104724 <__libc_init_array>:
 8104724:	b570      	push	{r4, r5, r6, lr}
 8104726:	4d0d      	ldr	r5, [pc, #52]	@ (810475c <__libc_init_array+0x38>)
 8104728:	4c0d      	ldr	r4, [pc, #52]	@ (8104760 <__libc_init_array+0x3c>)
 810472a:	1b64      	subs	r4, r4, r5
 810472c:	10a4      	asrs	r4, r4, #2
 810472e:	2600      	movs	r6, #0
 8104730:	42a6      	cmp	r6, r4
 8104732:	d109      	bne.n	8104748 <__libc_init_array+0x24>
 8104734:	4d0b      	ldr	r5, [pc, #44]	@ (8104764 <__libc_init_array+0x40>)
 8104736:	4c0c      	ldr	r4, [pc, #48]	@ (8104768 <__libc_init_array+0x44>)
 8104738:	f000 f818 	bl	810476c <_init>
 810473c:	1b64      	subs	r4, r4, r5
 810473e:	10a4      	asrs	r4, r4, #2
 8104740:	2600      	movs	r6, #0
 8104742:	42a6      	cmp	r6, r4
 8104744:	d105      	bne.n	8104752 <__libc_init_array+0x2e>
 8104746:	bd70      	pop	{r4, r5, r6, pc}
 8104748:	f855 3b04 	ldr.w	r3, [r5], #4
 810474c:	4798      	blx	r3
 810474e:	3601      	adds	r6, #1
 8104750:	e7ee      	b.n	8104730 <__libc_init_array+0xc>
 8104752:	f855 3b04 	ldr.w	r3, [r5], #4
 8104756:	4798      	blx	r3
 8104758:	3601      	adds	r6, #1
 810475a:	e7f2      	b.n	8104742 <__libc_init_array+0x1e>
 810475c:	081047ac 	.word	0x081047ac
 8104760:	081047ac 	.word	0x081047ac
 8104764:	081047ac 	.word	0x081047ac
 8104768:	081047b0 	.word	0x081047b0

0810476c <_init>:
 810476c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810476e:	bf00      	nop
 8104770:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8104772:	bc08      	pop	{r3}
 8104774:	469e      	mov	lr, r3
 8104776:	4770      	bx	lr

08104778 <_fini>:
 8104778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810477a:	bf00      	nop
 810477c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810477e:	bc08      	pop	{r3}
 8104780:	469e      	mov	lr, r3
 8104782:	4770      	bx	lr
