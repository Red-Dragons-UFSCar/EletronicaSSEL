
Tx_M4_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003aa4  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  08003d3c  08003d3c  00004d3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d70  08003d70  0000502c  2**0
                  CONTENTS
  4 .ARM          00000008  08003d70  08003d70  00004d70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003d78  08003d78  0000502c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003d78  08003d78  00004d78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003d7c  08003d7c  00004d7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000002c  24000000  08003d80  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000cc  2400002c  08003dac  0000502c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  240000f8  08003dac  000050f8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000502c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fd86  00000000  00000000  0000505a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fa2  00000000  00000000  00014de0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b60  00000000  00000000  00016d88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008b3  00000000  00000000  000178e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003959c  00000000  00000000  0001819b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fc04  00000000  00000000  00051737  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0017acaf  00000000  00000000  0006133b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001dbfea  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e40  00000000  00000000  001dc030  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000047  00000000  00000000  001dee70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	2400002c 	.word	0x2400002c
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08003d24 	.word	0x08003d24

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000030 	.word	0x24000030
 80002d4:	08003d24 	.word	0x08003d24

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96a 	b.w	80005c4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	460c      	mov	r4, r1
 8000310:	2b00      	cmp	r3, #0
 8000312:	d14e      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000314:	4694      	mov	ip, r2
 8000316:	458c      	cmp	ip, r1
 8000318:	4686      	mov	lr, r0
 800031a:	fab2 f282 	clz	r2, r2
 800031e:	d962      	bls.n	80003e6 <__udivmoddi4+0xde>
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0320 	rsb	r3, r2, #32
 8000326:	4091      	lsls	r1, r2
 8000328:	fa20 f303 	lsr.w	r3, r0, r3
 800032c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000330:	4319      	orrs	r1, r3
 8000332:	fa00 fe02 	lsl.w	lr, r0, r2
 8000336:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033a:	fa1f f68c 	uxth.w	r6, ip
 800033e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000342:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000346:	fb07 1114 	mls	r1, r7, r4, r1
 800034a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034e:	fb04 f106 	mul.w	r1, r4, r6
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f104 30ff 	add.w	r0, r4, #4294967295
 800035e:	f080 8112 	bcs.w	8000586 <__udivmoddi4+0x27e>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 810f 	bls.w	8000586 <__udivmoddi4+0x27e>
 8000368:	3c02      	subs	r4, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	fa1f f38e 	uxth.w	r3, lr
 8000372:	fbb1 f0f7 	udiv	r0, r1, r7
 8000376:	fb07 1110 	mls	r1, r7, r0, r1
 800037a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037e:	fb00 f606 	mul.w	r6, r0, r6
 8000382:	429e      	cmp	r6, r3
 8000384:	d90a      	bls.n	800039c <__udivmoddi4+0x94>
 8000386:	eb1c 0303 	adds.w	r3, ip, r3
 800038a:	f100 31ff 	add.w	r1, r0, #4294967295
 800038e:	f080 80fc 	bcs.w	800058a <__udivmoddi4+0x282>
 8000392:	429e      	cmp	r6, r3
 8000394:	f240 80f9 	bls.w	800058a <__udivmoddi4+0x282>
 8000398:	4463      	add	r3, ip
 800039a:	3802      	subs	r0, #2
 800039c:	1b9b      	subs	r3, r3, r6
 800039e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003a2:	2100      	movs	r1, #0
 80003a4:	b11d      	cbz	r5, 80003ae <__udivmoddi4+0xa6>
 80003a6:	40d3      	lsrs	r3, r2
 80003a8:	2200      	movs	r2, #0
 80003aa:	e9c5 3200 	strd	r3, r2, [r5]
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d905      	bls.n	80003c2 <__udivmoddi4+0xba>
 80003b6:	b10d      	cbz	r5, 80003bc <__udivmoddi4+0xb4>
 80003b8:	e9c5 0100 	strd	r0, r1, [r5]
 80003bc:	2100      	movs	r1, #0
 80003be:	4608      	mov	r0, r1
 80003c0:	e7f5      	b.n	80003ae <__udivmoddi4+0xa6>
 80003c2:	fab3 f183 	clz	r1, r3
 80003c6:	2900      	cmp	r1, #0
 80003c8:	d146      	bne.n	8000458 <__udivmoddi4+0x150>
 80003ca:	42a3      	cmp	r3, r4
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0xcc>
 80003ce:	4290      	cmp	r0, r2
 80003d0:	f0c0 80f0 	bcc.w	80005b4 <__udivmoddi4+0x2ac>
 80003d4:	1a86      	subs	r6, r0, r2
 80003d6:	eb64 0303 	sbc.w	r3, r4, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	2d00      	cmp	r5, #0
 80003de:	d0e6      	beq.n	80003ae <__udivmoddi4+0xa6>
 80003e0:	e9c5 6300 	strd	r6, r3, [r5]
 80003e4:	e7e3      	b.n	80003ae <__udivmoddi4+0xa6>
 80003e6:	2a00      	cmp	r2, #0
 80003e8:	f040 8090 	bne.w	800050c <__udivmoddi4+0x204>
 80003ec:	eba1 040c 	sub.w	r4, r1, ip
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	fa1f f78c 	uxth.w	r7, ip
 80003f8:	2101      	movs	r1, #1
 80003fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80003fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000402:	fb08 4416 	mls	r4, r8, r6, r4
 8000406:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040a:	fb07 f006 	mul.w	r0, r7, r6
 800040e:	4298      	cmp	r0, r3
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x11c>
 8000412:	eb1c 0303 	adds.w	r3, ip, r3
 8000416:	f106 34ff 	add.w	r4, r6, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x11a>
 800041c:	4298      	cmp	r0, r3
 800041e:	f200 80cd 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 8000422:	4626      	mov	r6, r4
 8000424:	1a1c      	subs	r4, r3, r0
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb4 f0f8 	udiv	r0, r4, r8
 800042e:	fb08 4410 	mls	r4, r8, r0, r4
 8000432:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000436:	fb00 f707 	mul.w	r7, r0, r7
 800043a:	429f      	cmp	r7, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x148>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 34ff 	add.w	r4, r0, #4294967295
 8000446:	d202      	bcs.n	800044e <__udivmoddi4+0x146>
 8000448:	429f      	cmp	r7, r3
 800044a:	f200 80b0 	bhi.w	80005ae <__udivmoddi4+0x2a6>
 800044e:	4620      	mov	r0, r4
 8000450:	1bdb      	subs	r3, r3, r7
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	e7a5      	b.n	80003a4 <__udivmoddi4+0x9c>
 8000458:	f1c1 0620 	rsb	r6, r1, #32
 800045c:	408b      	lsls	r3, r1
 800045e:	fa22 f706 	lsr.w	r7, r2, r6
 8000462:	431f      	orrs	r7, r3
 8000464:	fa20 fc06 	lsr.w	ip, r0, r6
 8000468:	fa04 f301 	lsl.w	r3, r4, r1
 800046c:	ea43 030c 	orr.w	r3, r3, ip
 8000470:	40f4      	lsrs	r4, r6
 8000472:	fa00 f801 	lsl.w	r8, r0, r1
 8000476:	0c38      	lsrs	r0, r7, #16
 8000478:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800047c:	fbb4 fef0 	udiv	lr, r4, r0
 8000480:	fa1f fc87 	uxth.w	ip, r7
 8000484:	fb00 441e 	mls	r4, r0, lr, r4
 8000488:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048c:	fb0e f90c 	mul.w	r9, lr, ip
 8000490:	45a1      	cmp	r9, r4
 8000492:	fa02 f201 	lsl.w	r2, r2, r1
 8000496:	d90a      	bls.n	80004ae <__udivmoddi4+0x1a6>
 8000498:	193c      	adds	r4, r7, r4
 800049a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800049e:	f080 8084 	bcs.w	80005aa <__udivmoddi4+0x2a2>
 80004a2:	45a1      	cmp	r9, r4
 80004a4:	f240 8081 	bls.w	80005aa <__udivmoddi4+0x2a2>
 80004a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	eba4 0409 	sub.w	r4, r4, r9
 80004b2:	fa1f f983 	uxth.w	r9, r3
 80004b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ba:	fb00 4413 	mls	r4, r0, r3, r4
 80004be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c6:	45a4      	cmp	ip, r4
 80004c8:	d907      	bls.n	80004da <__udivmoddi4+0x1d2>
 80004ca:	193c      	adds	r4, r7, r4
 80004cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80004d0:	d267      	bcs.n	80005a2 <__udivmoddi4+0x29a>
 80004d2:	45a4      	cmp	ip, r4
 80004d4:	d965      	bls.n	80005a2 <__udivmoddi4+0x29a>
 80004d6:	3b02      	subs	r3, #2
 80004d8:	443c      	add	r4, r7
 80004da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004de:	fba0 9302 	umull	r9, r3, r0, r2
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	429c      	cmp	r4, r3
 80004e8:	46ce      	mov	lr, r9
 80004ea:	469c      	mov	ip, r3
 80004ec:	d351      	bcc.n	8000592 <__udivmoddi4+0x28a>
 80004ee:	d04e      	beq.n	800058e <__udivmoddi4+0x286>
 80004f0:	b155      	cbz	r5, 8000508 <__udivmoddi4+0x200>
 80004f2:	ebb8 030e 	subs.w	r3, r8, lr
 80004f6:	eb64 040c 	sbc.w	r4, r4, ip
 80004fa:	fa04 f606 	lsl.w	r6, r4, r6
 80004fe:	40cb      	lsrs	r3, r1
 8000500:	431e      	orrs	r6, r3
 8000502:	40cc      	lsrs	r4, r1
 8000504:	e9c5 6400 	strd	r6, r4, [r5]
 8000508:	2100      	movs	r1, #0
 800050a:	e750      	b.n	80003ae <__udivmoddi4+0xa6>
 800050c:	f1c2 0320 	rsb	r3, r2, #32
 8000510:	fa20 f103 	lsr.w	r1, r0, r3
 8000514:	fa0c fc02 	lsl.w	ip, ip, r2
 8000518:	fa24 f303 	lsr.w	r3, r4, r3
 800051c:	4094      	lsls	r4, r2
 800051e:	430c      	orrs	r4, r1
 8000520:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000524:	fa00 fe02 	lsl.w	lr, r0, r2
 8000528:	fa1f f78c 	uxth.w	r7, ip
 800052c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000530:	fb08 3110 	mls	r1, r8, r0, r3
 8000534:	0c23      	lsrs	r3, r4, #16
 8000536:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053a:	fb00 f107 	mul.w	r1, r0, r7
 800053e:	4299      	cmp	r1, r3
 8000540:	d908      	bls.n	8000554 <__udivmoddi4+0x24c>
 8000542:	eb1c 0303 	adds.w	r3, ip, r3
 8000546:	f100 36ff 	add.w	r6, r0, #4294967295
 800054a:	d22c      	bcs.n	80005a6 <__udivmoddi4+0x29e>
 800054c:	4299      	cmp	r1, r3
 800054e:	d92a      	bls.n	80005a6 <__udivmoddi4+0x29e>
 8000550:	3802      	subs	r0, #2
 8000552:	4463      	add	r3, ip
 8000554:	1a5b      	subs	r3, r3, r1
 8000556:	b2a4      	uxth	r4, r4
 8000558:	fbb3 f1f8 	udiv	r1, r3, r8
 800055c:	fb08 3311 	mls	r3, r8, r1, r3
 8000560:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000564:	fb01 f307 	mul.w	r3, r1, r7
 8000568:	42a3      	cmp	r3, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x276>
 800056c:	eb1c 0404 	adds.w	r4, ip, r4
 8000570:	f101 36ff 	add.w	r6, r1, #4294967295
 8000574:	d213      	bcs.n	800059e <__udivmoddi4+0x296>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d911      	bls.n	800059e <__udivmoddi4+0x296>
 800057a:	3902      	subs	r1, #2
 800057c:	4464      	add	r4, ip
 800057e:	1ae4      	subs	r4, r4, r3
 8000580:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000584:	e739      	b.n	80003fa <__udivmoddi4+0xf2>
 8000586:	4604      	mov	r4, r0
 8000588:	e6f0      	b.n	800036c <__udivmoddi4+0x64>
 800058a:	4608      	mov	r0, r1
 800058c:	e706      	b.n	800039c <__udivmoddi4+0x94>
 800058e:	45c8      	cmp	r8, r9
 8000590:	d2ae      	bcs.n	80004f0 <__udivmoddi4+0x1e8>
 8000592:	ebb9 0e02 	subs.w	lr, r9, r2
 8000596:	eb63 0c07 	sbc.w	ip, r3, r7
 800059a:	3801      	subs	r0, #1
 800059c:	e7a8      	b.n	80004f0 <__udivmoddi4+0x1e8>
 800059e:	4631      	mov	r1, r6
 80005a0:	e7ed      	b.n	800057e <__udivmoddi4+0x276>
 80005a2:	4603      	mov	r3, r0
 80005a4:	e799      	b.n	80004da <__udivmoddi4+0x1d2>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e7d4      	b.n	8000554 <__udivmoddi4+0x24c>
 80005aa:	46d6      	mov	lr, sl
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1a6>
 80005ae:	4463      	add	r3, ip
 80005b0:	3802      	subs	r0, #2
 80005b2:	e74d      	b.n	8000450 <__udivmoddi4+0x148>
 80005b4:	4606      	mov	r6, r0
 80005b6:	4623      	mov	r3, r4
 80005b8:	4608      	mov	r0, r1
 80005ba:	e70f      	b.n	80003dc <__udivmoddi4+0xd4>
 80005bc:	3e02      	subs	r6, #2
 80005be:	4463      	add	r3, ip
 80005c0:	e730      	b.n	8000424 <__udivmoddi4+0x11c>
 80005c2:	bf00      	nop

080005c4 <__aeabi_idiv0>:
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop

080005c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005cc:	4b3d      	ldr	r3, [pc, #244]	@ (80006c4 <SystemInit+0xfc>)
 80005ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80005d2:	4a3c      	ldr	r2, [pc, #240]	@ (80006c4 <SystemInit+0xfc>)
 80005d4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80005d8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005dc:	4b39      	ldr	r3, [pc, #228]	@ (80006c4 <SystemInit+0xfc>)
 80005de:	691b      	ldr	r3, [r3, #16]
 80005e0:	4a38      	ldr	r2, [pc, #224]	@ (80006c4 <SystemInit+0xfc>)
 80005e2:	f043 0310 	orr.w	r3, r3, #16
 80005e6:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005e8:	4b37      	ldr	r3, [pc, #220]	@ (80006c8 <SystemInit+0x100>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	f003 030f 	and.w	r3, r3, #15
 80005f0:	2b06      	cmp	r3, #6
 80005f2:	d807      	bhi.n	8000604 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80005f4:	4b34      	ldr	r3, [pc, #208]	@ (80006c8 <SystemInit+0x100>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	f023 030f 	bic.w	r3, r3, #15
 80005fc:	4a32      	ldr	r2, [pc, #200]	@ (80006c8 <SystemInit+0x100>)
 80005fe:	f043 0307 	orr.w	r3, r3, #7
 8000602:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000604:	4b31      	ldr	r3, [pc, #196]	@ (80006cc <SystemInit+0x104>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4a30      	ldr	r2, [pc, #192]	@ (80006cc <SystemInit+0x104>)
 800060a:	f043 0301 	orr.w	r3, r3, #1
 800060e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000610:	4b2e      	ldr	r3, [pc, #184]	@ (80006cc <SystemInit+0x104>)
 8000612:	2200      	movs	r2, #0
 8000614:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000616:	4b2d      	ldr	r3, [pc, #180]	@ (80006cc <SystemInit+0x104>)
 8000618:	681a      	ldr	r2, [r3, #0]
 800061a:	492c      	ldr	r1, [pc, #176]	@ (80006cc <SystemInit+0x104>)
 800061c:	4b2c      	ldr	r3, [pc, #176]	@ (80006d0 <SystemInit+0x108>)
 800061e:	4013      	ands	r3, r2
 8000620:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000622:	4b29      	ldr	r3, [pc, #164]	@ (80006c8 <SystemInit+0x100>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	f003 0308 	and.w	r3, r3, #8
 800062a:	2b00      	cmp	r3, #0
 800062c:	d007      	beq.n	800063e <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800062e:	4b26      	ldr	r3, [pc, #152]	@ (80006c8 <SystemInit+0x100>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	f023 030f 	bic.w	r3, r3, #15
 8000636:	4a24      	ldr	r2, [pc, #144]	@ (80006c8 <SystemInit+0x100>)
 8000638:	f043 0307 	orr.w	r3, r3, #7
 800063c:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800063e:	4b23      	ldr	r3, [pc, #140]	@ (80006cc <SystemInit+0x104>)
 8000640:	2200      	movs	r2, #0
 8000642:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000644:	4b21      	ldr	r3, [pc, #132]	@ (80006cc <SystemInit+0x104>)
 8000646:	2200      	movs	r2, #0
 8000648:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800064a:	4b20      	ldr	r3, [pc, #128]	@ (80006cc <SystemInit+0x104>)
 800064c:	2200      	movs	r2, #0
 800064e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000650:	4b1e      	ldr	r3, [pc, #120]	@ (80006cc <SystemInit+0x104>)
 8000652:	4a20      	ldr	r2, [pc, #128]	@ (80006d4 <SystemInit+0x10c>)
 8000654:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000656:	4b1d      	ldr	r3, [pc, #116]	@ (80006cc <SystemInit+0x104>)
 8000658:	4a1f      	ldr	r2, [pc, #124]	@ (80006d8 <SystemInit+0x110>)
 800065a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800065c:	4b1b      	ldr	r3, [pc, #108]	@ (80006cc <SystemInit+0x104>)
 800065e:	4a1f      	ldr	r2, [pc, #124]	@ (80006dc <SystemInit+0x114>)
 8000660:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000662:	4b1a      	ldr	r3, [pc, #104]	@ (80006cc <SystemInit+0x104>)
 8000664:	2200      	movs	r2, #0
 8000666:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000668:	4b18      	ldr	r3, [pc, #96]	@ (80006cc <SystemInit+0x104>)
 800066a:	4a1c      	ldr	r2, [pc, #112]	@ (80006dc <SystemInit+0x114>)
 800066c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800066e:	4b17      	ldr	r3, [pc, #92]	@ (80006cc <SystemInit+0x104>)
 8000670:	2200      	movs	r2, #0
 8000672:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000674:	4b15      	ldr	r3, [pc, #84]	@ (80006cc <SystemInit+0x104>)
 8000676:	4a19      	ldr	r2, [pc, #100]	@ (80006dc <SystemInit+0x114>)
 8000678:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800067a:	4b14      	ldr	r3, [pc, #80]	@ (80006cc <SystemInit+0x104>)
 800067c:	2200      	movs	r2, #0
 800067e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000680:	4b12      	ldr	r3, [pc, #72]	@ (80006cc <SystemInit+0x104>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	4a11      	ldr	r2, [pc, #68]	@ (80006cc <SystemInit+0x104>)
 8000686:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800068a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800068c:	4b0f      	ldr	r3, [pc, #60]	@ (80006cc <SystemInit+0x104>)
 800068e:	2200      	movs	r2, #0
 8000690:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000692:	4b13      	ldr	r3, [pc, #76]	@ (80006e0 <SystemInit+0x118>)
 8000694:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000696:	4a12      	ldr	r2, [pc, #72]	@ (80006e0 <SystemInit+0x118>)
 8000698:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800069c:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800069e:	4b11      	ldr	r3, [pc, #68]	@ (80006e4 <SystemInit+0x11c>)
 80006a0:	681a      	ldr	r2, [r3, #0]
 80006a2:	4b11      	ldr	r3, [pc, #68]	@ (80006e8 <SystemInit+0x120>)
 80006a4:	4013      	ands	r3, r2
 80006a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80006aa:	d202      	bcs.n	80006b2 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006ac:	4b0f      	ldr	r3, [pc, #60]	@ (80006ec <SystemInit+0x124>)
 80006ae:	2201      	movs	r2, #1
 80006b0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006b2:	4b0f      	ldr	r3, [pc, #60]	@ (80006f0 <SystemInit+0x128>)
 80006b4:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80006b8:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80006ba:	bf00      	nop
 80006bc:	46bd      	mov	sp, r7
 80006be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c2:	4770      	bx	lr
 80006c4:	e000ed00 	.word	0xe000ed00
 80006c8:	52002000 	.word	0x52002000
 80006cc:	58024400 	.word	0x58024400
 80006d0:	eaf6ed7f 	.word	0xeaf6ed7f
 80006d4:	02020200 	.word	0x02020200
 80006d8:	01ff0000 	.word	0x01ff0000
 80006dc:	01010280 	.word	0x01010280
 80006e0:	580000c0 	.word	0x580000c0
 80006e4:	5c001000 	.word	0x5c001000
 80006e8:	ffff0000 	.word	0xffff0000
 80006ec:	51008108 	.word	0x51008108
 80006f0:	52004000 	.word	0x52004000

080006f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b082      	sub	sp, #8
 80006f8:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 80006fa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80006fe:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000700:	bf00      	nop
 8000702:	4b34      	ldr	r3, [pc, #208]	@ (80007d4 <main+0xe0>)
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800070a:	2b00      	cmp	r3, #0
 800070c:	d004      	beq.n	8000718 <main+0x24>
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	1e5a      	subs	r2, r3, #1
 8000712:	607a      	str	r2, [r7, #4]
 8000714:	2b00      	cmp	r3, #0
 8000716:	dcf4      	bgt.n	8000702 <main+0xe>
  if ( timeout < 0 )
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	2b00      	cmp	r3, #0
 800071c:	da01      	bge.n	8000722 <main+0x2e>
  {
  Error_Handler();
 800071e:	f000 f983 	bl	8000a28 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000722:	f000 fbc9 	bl	8000eb8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000726:	f000 f859 	bl	80007dc <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 800072a:	4b2a      	ldr	r3, [pc, #168]	@ (80007d4 <main+0xe0>)
 800072c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000730:	4a28      	ldr	r2, [pc, #160]	@ (80007d4 <main+0xe0>)
 8000732:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000736:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800073a:	4b26      	ldr	r3, [pc, #152]	@ (80007d4 <main+0xe0>)
 800073c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000740:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000744:	603b      	str	r3, [r7, #0]
 8000746:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000748:	2000      	movs	r0, #0
 800074a:	f000 ffb1 	bl	80016b0 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 800074e:	2100      	movs	r1, #0
 8000750:	2000      	movs	r0, #0
 8000752:	f000 ffc7 	bl	80016e4 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000756:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800075a:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 800075c:	bf00      	nop
 800075e:	4b1d      	ldr	r3, [pc, #116]	@ (80007d4 <main+0xe0>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000766:	2b00      	cmp	r3, #0
 8000768:	d104      	bne.n	8000774 <main+0x80>
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	1e5a      	subs	r2, r3, #1
 800076e:	607a      	str	r2, [r7, #4]
 8000770:	2b00      	cmp	r3, #0
 8000772:	dcf4      	bgt.n	800075e <main+0x6a>
if ( timeout < 0 )
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	2b00      	cmp	r3, #0
 8000778:	da01      	bge.n	800077e <main+0x8a>
{
Error_Handler();
 800077a:	f000 f955 	bl	8000a28 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800077e:	f000 f8ab 	bl	80008d8 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 8000782:	2000      	movs	r0, #0
 8000784:	f000 f9d0 	bl	8000b28 <BSP_LED_Init>
  BSP_LED_Init(LED_YELLOW);
 8000788:	2001      	movs	r0, #1
 800078a:	f000 f9cd 	bl	8000b28 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 800078e:	2002      	movs	r0, #2
 8000790:	f000 f9ca 	bl	8000b28 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8000794:	2101      	movs	r1, #1
 8000796:	2000      	movs	r0, #0
 8000798:	f000 fa3c 	bl	8000c14 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 800079c:	4b0e      	ldr	r3, [pc, #56]	@ (80007d8 <main+0xe4>)
 800079e:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007a2:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 80007a4:	4b0c      	ldr	r3, [pc, #48]	@ (80007d8 <main+0xe4>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 80007aa:	4b0b      	ldr	r3, [pc, #44]	@ (80007d8 <main+0xe4>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 80007b0:	4b09      	ldr	r3, [pc, #36]	@ (80007d8 <main+0xe4>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 80007b6:	4b08      	ldr	r3, [pc, #32]	@ (80007d8 <main+0xe4>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 80007bc:	4906      	ldr	r1, [pc, #24]	@ (80007d8 <main+0xe4>)
 80007be:	2000      	movs	r0, #0
 80007c0:	f000 fab8 	bl	8000d34 <BSP_COM_Init>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d002      	beq.n	80007d0 <main+0xdc>
  {
    Error_Handler();
 80007ca:	f000 f92d 	bl	8000a28 <Error_Handler>
  }

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007ce:	bf00      	nop
 80007d0:	bf00      	nop
 80007d2:	e7fd      	b.n	80007d0 <main+0xdc>
 80007d4:	58024400 	.word	0x58024400
 80007d8:	24000048 	.word	0x24000048

080007dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b09c      	sub	sp, #112	@ 0x70
 80007e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007e2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007e6:	224c      	movs	r2, #76	@ 0x4c
 80007e8:	2100      	movs	r1, #0
 80007ea:	4618      	mov	r0, r3
 80007ec:	f003 fa6e 	bl	8003ccc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007f0:	1d3b      	adds	r3, r7, #4
 80007f2:	2220      	movs	r2, #32
 80007f4:	2100      	movs	r1, #0
 80007f6:	4618      	mov	r0, r3
 80007f8:	f003 fa68 	bl	8003ccc <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80007fc:	2004      	movs	r0, #4
 80007fe:	f000 ff85 	bl	800170c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000802:	2300      	movs	r3, #0
 8000804:	603b      	str	r3, [r7, #0]
 8000806:	4b32      	ldr	r3, [pc, #200]	@ (80008d0 <SystemClock_Config+0xf4>)
 8000808:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800080a:	4a31      	ldr	r2, [pc, #196]	@ (80008d0 <SystemClock_Config+0xf4>)
 800080c:	f023 0301 	bic.w	r3, r3, #1
 8000810:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000812:	4b2f      	ldr	r3, [pc, #188]	@ (80008d0 <SystemClock_Config+0xf4>)
 8000814:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000816:	f003 0301 	and.w	r3, r3, #1
 800081a:	603b      	str	r3, [r7, #0]
 800081c:	4b2d      	ldr	r3, [pc, #180]	@ (80008d4 <SystemClock_Config+0xf8>)
 800081e:	699b      	ldr	r3, [r3, #24]
 8000820:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000824:	4a2b      	ldr	r2, [pc, #172]	@ (80008d4 <SystemClock_Config+0xf8>)
 8000826:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800082a:	6193      	str	r3, [r2, #24]
 800082c:	4b29      	ldr	r3, [pc, #164]	@ (80008d4 <SystemClock_Config+0xf8>)
 800082e:	699b      	ldr	r3, [r3, #24]
 8000830:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000834:	603b      	str	r3, [r7, #0]
 8000836:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000838:	bf00      	nop
 800083a:	4b26      	ldr	r3, [pc, #152]	@ (80008d4 <SystemClock_Config+0xf8>)
 800083c:	699b      	ldr	r3, [r3, #24]
 800083e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000842:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000846:	d1f8      	bne.n	800083a <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000848:	2302      	movs	r3, #2
 800084a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800084c:	2301      	movs	r3, #1
 800084e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000850:	2340      	movs	r3, #64	@ 0x40
 8000852:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000854:	2302      	movs	r3, #2
 8000856:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000858:	2300      	movs	r3, #0
 800085a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800085c:	2304      	movs	r3, #4
 800085e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 25;
 8000860:	2319      	movs	r3, #25
 8000862:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000864:	2302      	movs	r3, #2
 8000866:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000868:	2305      	movs	r3, #5
 800086a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800086c:	2302      	movs	r3, #2
 800086e:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000870:	230c      	movs	r3, #12
 8000872:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000874:	2300      	movs	r3, #0
 8000876:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000878:	2300      	movs	r3, #0
 800087a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800087c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000880:	4618      	mov	r0, r3
 8000882:	f000 ff9d 	bl	80017c0 <HAL_RCC_OscConfig>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d001      	beq.n	8000890 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 800088c:	f000 f8cc 	bl	8000a28 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000890:	233f      	movs	r3, #63	@ 0x3f
 8000892:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000894:	2303      	movs	r3, #3
 8000896:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000898:	2300      	movs	r3, #0
 800089a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800089c:	2300      	movs	r3, #0
 800089e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80008a0:	2340      	movs	r3, #64	@ 0x40
 80008a2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80008a4:	2340      	movs	r3, #64	@ 0x40
 80008a6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80008a8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80008ac:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80008ae:	2340      	movs	r3, #64	@ 0x40
 80008b0:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80008b2:	1d3b      	adds	r3, r7, #4
 80008b4:	2104      	movs	r1, #4
 80008b6:	4618      	mov	r0, r3
 80008b8:	f001 fbdc 	bl	8002074 <HAL_RCC_ClockConfig>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d001      	beq.n	80008c6 <SystemClock_Config+0xea>
  {
    Error_Handler();
 80008c2:	f000 f8b1 	bl	8000a28 <Error_Handler>
  }
}
 80008c6:	bf00      	nop
 80008c8:	3770      	adds	r7, #112	@ 0x70
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	58000400 	.word	0x58000400
 80008d4:	58024800 	.word	0x58024800

080008d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b08a      	sub	sp, #40	@ 0x28
 80008dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008de:	f107 0314 	add.w	r3, r7, #20
 80008e2:	2200      	movs	r2, #0
 80008e4:	601a      	str	r2, [r3, #0]
 80008e6:	605a      	str	r2, [r3, #4]
 80008e8:	609a      	str	r2, [r3, #8]
 80008ea:	60da      	str	r2, [r3, #12]
 80008ec:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008ee:	4b49      	ldr	r3, [pc, #292]	@ (8000a14 <MX_GPIO_Init+0x13c>)
 80008f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008f4:	4a47      	ldr	r2, [pc, #284]	@ (8000a14 <MX_GPIO_Init+0x13c>)
 80008f6:	f043 0304 	orr.w	r3, r3, #4
 80008fa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80008fe:	4b45      	ldr	r3, [pc, #276]	@ (8000a14 <MX_GPIO_Init+0x13c>)
 8000900:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000904:	f003 0304 	and.w	r3, r3, #4
 8000908:	613b      	str	r3, [r7, #16]
 800090a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800090c:	4b41      	ldr	r3, [pc, #260]	@ (8000a14 <MX_GPIO_Init+0x13c>)
 800090e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000912:	4a40      	ldr	r2, [pc, #256]	@ (8000a14 <MX_GPIO_Init+0x13c>)
 8000914:	f043 0301 	orr.w	r3, r3, #1
 8000918:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800091c:	4b3d      	ldr	r3, [pc, #244]	@ (8000a14 <MX_GPIO_Init+0x13c>)
 800091e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000922:	f003 0301 	and.w	r3, r3, #1
 8000926:	60fb      	str	r3, [r7, #12]
 8000928:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800092a:	4b3a      	ldr	r3, [pc, #232]	@ (8000a14 <MX_GPIO_Init+0x13c>)
 800092c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000930:	4a38      	ldr	r2, [pc, #224]	@ (8000a14 <MX_GPIO_Init+0x13c>)
 8000932:	f043 0302 	orr.w	r3, r3, #2
 8000936:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800093a:	4b36      	ldr	r3, [pc, #216]	@ (8000a14 <MX_GPIO_Init+0x13c>)
 800093c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000940:	f003 0302 	and.w	r3, r3, #2
 8000944:	60bb      	str	r3, [r7, #8]
 8000946:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000948:	4b32      	ldr	r3, [pc, #200]	@ (8000a14 <MX_GPIO_Init+0x13c>)
 800094a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800094e:	4a31      	ldr	r2, [pc, #196]	@ (8000a14 <MX_GPIO_Init+0x13c>)
 8000950:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000954:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000958:	4b2e      	ldr	r3, [pc, #184]	@ (8000a14 <MX_GPIO_Init+0x13c>)
 800095a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800095e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000962:	607b      	str	r3, [r7, #4]
 8000964:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000966:	2332      	movs	r3, #50	@ 0x32
 8000968:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800096a:	2302      	movs	r3, #2
 800096c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096e:	2300      	movs	r3, #0
 8000970:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000972:	2300      	movs	r3, #0
 8000974:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000976:	230b      	movs	r3, #11
 8000978:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800097a:	f107 0314 	add.w	r3, r7, #20
 800097e:	4619      	mov	r1, r3
 8000980:	4825      	ldr	r0, [pc, #148]	@ (8000a18 <MX_GPIO_Init+0x140>)
 8000982:	f000 fccb 	bl	800131c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000986:	2386      	movs	r3, #134	@ 0x86
 8000988:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800098a:	2302      	movs	r3, #2
 800098c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098e:	2300      	movs	r3, #0
 8000990:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000992:	2300      	movs	r3, #0
 8000994:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000996:	230b      	movs	r3, #11
 8000998:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800099a:	f107 0314 	add.w	r3, r7, #20
 800099e:	4619      	mov	r1, r3
 80009a0:	481e      	ldr	r0, [pc, #120]	@ (8000a1c <MX_GPIO_Init+0x144>)
 80009a2:	f000 fcbb 	bl	800131c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80009a6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80009aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ac:	2302      	movs	r3, #2
 80009ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b0:	2300      	movs	r3, #0
 80009b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b4:	2300      	movs	r3, #0
 80009b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80009b8:	230b      	movs	r3, #11
 80009ba:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009bc:	f107 0314 	add.w	r3, r7, #20
 80009c0:	4619      	mov	r1, r3
 80009c2:	4817      	ldr	r0, [pc, #92]	@ (8000a20 <MX_GPIO_Init+0x148>)
 80009c4:	f000 fcaa 	bl	800131c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 80009c8:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 80009cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ce:	2302      	movs	r3, #2
 80009d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d2:	2300      	movs	r3, #0
 80009d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d6:	2300      	movs	r3, #0
 80009d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80009da:	230a      	movs	r3, #10
 80009dc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009de:	f107 0314 	add.w	r3, r7, #20
 80009e2:	4619      	mov	r1, r3
 80009e4:	480d      	ldr	r0, [pc, #52]	@ (8000a1c <MX_GPIO_Init+0x144>)
 80009e6:	f000 fc99 	bl	800131c <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 80009ea:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 80009ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f0:	2302      	movs	r3, #2
 80009f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f4:	2300      	movs	r3, #0
 80009f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f8:	2300      	movs	r3, #0
 80009fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80009fc:	230b      	movs	r3, #11
 80009fe:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a00:	f107 0314 	add.w	r3, r7, #20
 8000a04:	4619      	mov	r1, r3
 8000a06:	4807      	ldr	r0, [pc, #28]	@ (8000a24 <MX_GPIO_Init+0x14c>)
 8000a08:	f000 fc88 	bl	800131c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a0c:	bf00      	nop
 8000a0e:	3728      	adds	r7, #40	@ 0x28
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	58024400 	.word	0x58024400
 8000a18:	58020800 	.word	0x58020800
 8000a1c:	58020000 	.word	0x58020000
 8000a20:	58020400 	.word	0x58020400
 8000a24:	58021800 	.word	0x58021800

08000a28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a2c:	b672      	cpsid	i
}
 8000a2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a30:	bf00      	nop
 8000a32:	e7fd      	b.n	8000a30 <Error_Handler+0x8>

08000a34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	b083      	sub	sp, #12
 8000a38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a3a:	4b0a      	ldr	r3, [pc, #40]	@ (8000a64 <HAL_MspInit+0x30>)
 8000a3c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000a40:	4a08      	ldr	r2, [pc, #32]	@ (8000a64 <HAL_MspInit+0x30>)
 8000a42:	f043 0302 	orr.w	r3, r3, #2
 8000a46:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000a4a:	4b06      	ldr	r3, [pc, #24]	@ (8000a64 <HAL_MspInit+0x30>)
 8000a4c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000a50:	f003 0302 	and.w	r3, r3, #2
 8000a54:	607b      	str	r3, [r7, #4]
 8000a56:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a58:	bf00      	nop
 8000a5a:	370c      	adds	r7, #12
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a62:	4770      	bx	lr
 8000a64:	58024400 	.word	0x58024400

08000a68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a6c:	bf00      	nop
 8000a6e:	e7fd      	b.n	8000a6c <NMI_Handler+0x4>

08000a70 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a74:	bf00      	nop
 8000a76:	e7fd      	b.n	8000a74 <HardFault_Handler+0x4>

08000a78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a7c:	bf00      	nop
 8000a7e:	e7fd      	b.n	8000a7c <MemManage_Handler+0x4>

08000a80 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a84:	bf00      	nop
 8000a86:	e7fd      	b.n	8000a84 <BusFault_Handler+0x4>

08000a88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a8c:	bf00      	nop
 8000a8e:	e7fd      	b.n	8000a8c <UsageFault_Handler+0x4>

08000a90 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a94:	bf00      	nop
 8000a96:	46bd      	mov	sp, r7
 8000a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9c:	4770      	bx	lr

08000a9e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a9e:	b480      	push	{r7}
 8000aa0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000aa2:	bf00      	nop
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aaa:	4770      	bx	lr

08000aac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ab0:	bf00      	nop
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab8:	4770      	bx	lr

08000aba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000aba:	b580      	push	{r7, lr}
 8000abc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000abe:	f000 fa6d 	bl	8000f9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ac2:	bf00      	nop
 8000ac4:	bd80      	pop	{r7, pc}

08000ac6 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000ac6:	b580      	push	{r7, lr}
 8000ac8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 8000aca:	2000      	movs	r0, #0
 8000acc:	f000 f914 	bl	8000cf8 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000ad0:	bf00      	nop
 8000ad2:	bd80      	pop	{r7, pc}

08000ad4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000ad4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b0c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ad8:	f7ff fd76 	bl	80005c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000adc:	480c      	ldr	r0, [pc, #48]	@ (8000b10 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ade:	490d      	ldr	r1, [pc, #52]	@ (8000b14 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ae0:	4a0d      	ldr	r2, [pc, #52]	@ (8000b18 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ae2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ae4:	e002      	b.n	8000aec <LoopCopyDataInit>

08000ae6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ae6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ae8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000aea:	3304      	adds	r3, #4

08000aec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000aec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000aee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000af0:	d3f9      	bcc.n	8000ae6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000af2:	4a0a      	ldr	r2, [pc, #40]	@ (8000b1c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000af4:	4c0a      	ldr	r4, [pc, #40]	@ (8000b20 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000af6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000af8:	e001      	b.n	8000afe <LoopFillZerobss>

08000afa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000afa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000afc:	3204      	adds	r2, #4

08000afe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000afe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b00:	d3fb      	bcc.n	8000afa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b02:	f003 f8eb 	bl	8003cdc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b06:	f7ff fdf5 	bl	80006f4 <main>
  bx  lr
 8000b0a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000b0c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000b10:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000b14:	2400002c 	.word	0x2400002c
  ldr r2, =_sidata
 8000b18:	08003d80 	.word	0x08003d80
  ldr r2, =_sbss
 8000b1c:	2400002c 	.word	0x2400002c
  ldr r4, =_ebss
 8000b20:	240000f8 	.word	0x240000f8

08000b24 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b24:	e7fe      	b.n	8000b24 <ADC3_IRQHandler>
	...

08000b28 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b08c      	sub	sp, #48	@ 0x30
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	4603      	mov	r3, r0
 8000b30:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8000b32:	2300      	movs	r3, #0
 8000b34:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8000b36:	79fb      	ldrb	r3, [r7, #7]
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d009      	beq.n	8000b50 <BSP_LED_Init+0x28>
 8000b3c:	79fb      	ldrb	r3, [r7, #7]
 8000b3e:	2b01      	cmp	r3, #1
 8000b40:	d006      	beq.n	8000b50 <BSP_LED_Init+0x28>
 8000b42:	79fb      	ldrb	r3, [r7, #7]
 8000b44:	2b02      	cmp	r3, #2
 8000b46:	d003      	beq.n	8000b50 <BSP_LED_Init+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000b48:	f06f 0301 	mvn.w	r3, #1
 8000b4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000b4e:	e055      	b.n	8000bfc <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if(Led == LED1)
 8000b50:	79fb      	ldrb	r3, [r7, #7]
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d10f      	bne.n	8000b76 <BSP_LED_Init+0x4e>
    {
      LED1_GPIO_CLK_ENABLE();
 8000b56:	4b2c      	ldr	r3, [pc, #176]	@ (8000c08 <BSP_LED_Init+0xe0>)
 8000b58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b5c:	4a2a      	ldr	r2, [pc, #168]	@ (8000c08 <BSP_LED_Init+0xe0>)
 8000b5e:	f043 0302 	orr.w	r3, r3, #2
 8000b62:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b66:	4b28      	ldr	r3, [pc, #160]	@ (8000c08 <BSP_LED_Init+0xe0>)
 8000b68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b6c:	f003 0302 	and.w	r3, r3, #2
 8000b70:	617b      	str	r3, [r7, #20]
 8000b72:	697b      	ldr	r3, [r7, #20]
 8000b74:	e021      	b.n	8000bba <BSP_LED_Init+0x92>
    }
    else if(Led == LED2)
 8000b76:	79fb      	ldrb	r3, [r7, #7]
 8000b78:	2b01      	cmp	r3, #1
 8000b7a:	d10f      	bne.n	8000b9c <BSP_LED_Init+0x74>
    {
      LED2_GPIO_CLK_ENABLE();
 8000b7c:	4b22      	ldr	r3, [pc, #136]	@ (8000c08 <BSP_LED_Init+0xe0>)
 8000b7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b82:	4a21      	ldr	r2, [pc, #132]	@ (8000c08 <BSP_LED_Init+0xe0>)
 8000b84:	f043 0310 	orr.w	r3, r3, #16
 8000b88:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b8c:	4b1e      	ldr	r3, [pc, #120]	@ (8000c08 <BSP_LED_Init+0xe0>)
 8000b8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b92:	f003 0310 	and.w	r3, r3, #16
 8000b96:	613b      	str	r3, [r7, #16]
 8000b98:	693b      	ldr	r3, [r7, #16]
 8000b9a:	e00e      	b.n	8000bba <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 8000b9c:	4b1a      	ldr	r3, [pc, #104]	@ (8000c08 <BSP_LED_Init+0xe0>)
 8000b9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ba2:	4a19      	ldr	r2, [pc, #100]	@ (8000c08 <BSP_LED_Init+0xe0>)
 8000ba4:	f043 0302 	orr.w	r3, r3, #2
 8000ba8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000bac:	4b16      	ldr	r3, [pc, #88]	@ (8000c08 <BSP_LED_Init+0xe0>)
 8000bae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bb2:	f003 0302 	and.w	r3, r3, #2
 8000bb6:	60fb      	str	r3, [r7, #12]
 8000bb8:	68fb      	ldr	r3, [r7, #12]
    }
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 8000bba:	79fb      	ldrb	r3, [r7, #7]
 8000bbc:	4a13      	ldr	r2, [pc, #76]	@ (8000c0c <BSP_LED_Init+0xe4>)
 8000bbe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000bc2:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8000bc4:	2301      	movs	r3, #1
 8000bc6:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bcc:	2303      	movs	r3, #3
 8000bce:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8000bd0:	79fb      	ldrb	r3, [r7, #7]
 8000bd2:	4a0f      	ldr	r2, [pc, #60]	@ (8000c10 <BSP_LED_Init+0xe8>)
 8000bd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bd8:	f107 0218 	add.w	r2, r7, #24
 8000bdc:	4611      	mov	r1, r2
 8000bde:	4618      	mov	r0, r3
 8000be0:	f000 fb9c 	bl	800131c <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8000be4:	79fb      	ldrb	r3, [r7, #7]
 8000be6:	4a0a      	ldr	r2, [pc, #40]	@ (8000c10 <BSP_LED_Init+0xe8>)
 8000be8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000bec:	79fb      	ldrb	r3, [r7, #7]
 8000bee:	4a07      	ldr	r2, [pc, #28]	@ (8000c0c <BSP_LED_Init+0xe4>)
 8000bf0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	f000 fd40 	bl	800167c <HAL_GPIO_WritePin>
  }

  return ret;
 8000bfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8000bfe:	4618      	mov	r0, r3
 8000c00:	3730      	adds	r7, #48	@ 0x30
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	58024400 	.word	0x58024400
 8000c0c:	08003d4c 	.word	0x08003d4c
 8000c10:	2400000c 	.word	0x2400000c

08000c14 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b088      	sub	sp, #32
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	460a      	mov	r2, r1
 8000c1e:	71fb      	strb	r3, [r7, #7]
 8000c20:	4613      	mov	r3, r2
 8000c22:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 8000c24:	4b2e      	ldr	r3, [pc, #184]	@ (8000ce0 <BSP_PB_Init+0xcc>)
 8000c26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c2a:	4a2d      	ldr	r2, [pc, #180]	@ (8000ce0 <BSP_PB_Init+0xcc>)
 8000c2c:	f043 0304 	orr.w	r3, r3, #4
 8000c30:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c34:	4b2a      	ldr	r3, [pc, #168]	@ (8000ce0 <BSP_PB_Init+0xcc>)
 8000c36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c3a:	f003 0304 	and.w	r3, r3, #4
 8000c3e:	60bb      	str	r3, [r7, #8]
 8000c40:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 8000c42:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c46:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8000c48:	2302      	movs	r3, #2
 8000c4a:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c4c:	2302      	movs	r3, #2
 8000c4e:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 8000c50:	79bb      	ldrb	r3, [r7, #6]
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d10c      	bne.n	8000c70 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8000c56:	2300      	movs	r3, #0
 8000c58:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 8000c5a:	79fb      	ldrb	r3, [r7, #7]
 8000c5c:	4a21      	ldr	r2, [pc, #132]	@ (8000ce4 <BSP_PB_Init+0xd0>)
 8000c5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c62:	f107 020c 	add.w	r2, r7, #12
 8000c66:	4611      	mov	r1, r2
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f000 fb57 	bl	800131c <HAL_GPIO_Init>
 8000c6e:	e031      	b.n	8000cd4 <BSP_PB_Init+0xc0>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8000c70:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000c74:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8000c76:	79fb      	ldrb	r3, [r7, #7]
 8000c78:	4a1a      	ldr	r2, [pc, #104]	@ (8000ce4 <BSP_PB_Init+0xd0>)
 8000c7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c7e:	f107 020c 	add.w	r2, r7, #12
 8000c82:	4611      	mov	r1, r2
 8000c84:	4618      	mov	r0, r3
 8000c86:	f000 fb49 	bl	800131c <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8000c8a:	79fb      	ldrb	r3, [r7, #7]
 8000c8c:	00db      	lsls	r3, r3, #3
 8000c8e:	4a16      	ldr	r2, [pc, #88]	@ (8000ce8 <BSP_PB_Init+0xd4>)
 8000c90:	441a      	add	r2, r3
 8000c92:	79fb      	ldrb	r3, [r7, #7]
 8000c94:	4915      	ldr	r1, [pc, #84]	@ (8000cec <BSP_PB_Init+0xd8>)
 8000c96:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	4610      	mov	r0, r2
 8000c9e:	f000 faec 	bl	800127a <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8000ca2:	79fb      	ldrb	r3, [r7, #7]
 8000ca4:	00db      	lsls	r3, r3, #3
 8000ca6:	4a10      	ldr	r2, [pc, #64]	@ (8000ce8 <BSP_PB_Init+0xd4>)
 8000ca8:	1898      	adds	r0, r3, r2
 8000caa:	79fb      	ldrb	r3, [r7, #7]
 8000cac:	4a10      	ldr	r2, [pc, #64]	@ (8000cf0 <BSP_PB_Init+0xdc>)
 8000cae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cb2:	461a      	mov	r2, r3
 8000cb4:	2100      	movs	r1, #0
 8000cb6:	f000 fac1 	bl	800123c <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8000cba:	2028      	movs	r0, #40	@ 0x28
 8000cbc:	79fb      	ldrb	r3, [r7, #7]
 8000cbe:	4a0d      	ldr	r2, [pc, #52]	@ (8000cf4 <BSP_PB_Init+0xe0>)
 8000cc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	f000 fa6f 	bl	80011aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8000ccc:	2328      	movs	r3, #40	@ 0x28
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f000 fa85 	bl	80011de <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8000cd4:	2300      	movs	r3, #0
}
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	3720      	adds	r7, #32
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	58024400 	.word	0x58024400
 8000ce4:	24000018 	.word	0x24000018
 8000ce8:	24000058 	.word	0x24000058
 8000cec:	08003d54 	.word	0x08003d54
 8000cf0:	2400001c 	.word	0x2400001c
 8000cf4:	24000020 	.word	0x24000020

08000cf8 <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	4603      	mov	r3, r0
 8000d00:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8000d02:	79fb      	ldrb	r3, [r7, #7]
 8000d04:	00db      	lsls	r3, r3, #3
 8000d06:	4a04      	ldr	r2, [pc, #16]	@ (8000d18 <BSP_PB_IRQHandler+0x20>)
 8000d08:	4413      	add	r3, r2
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f000 faca 	bl	80012a4 <HAL_EXTI_IRQHandler>
}
 8000d10:	bf00      	nop
 8000d12:	3708      	adds	r7, #8
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	24000058 	.word	0x24000058

08000d1c <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b083      	sub	sp, #12
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	4603      	mov	r3, r0
 8000d24:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 8000d26:	bf00      	nop
 8000d28:	370c      	adds	r7, #12
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr
	...

08000d34 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b084      	sub	sp, #16
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	6039      	str	r1, [r7, #0]
 8000d3e:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8000d40:	2300      	movs	r3, #0
 8000d42:	60fb      	str	r3, [r7, #12]

  if(COM >= COMn)
 8000d44:	79fb      	ldrb	r3, [r7, #7]
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d003      	beq.n	8000d52 <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000d4a:	f06f 0301 	mvn.w	r3, #1
 8000d4e:	60fb      	str	r3, [r7, #12]
 8000d50:	e018      	b.n	8000d84 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 8000d52:	79fb      	ldrb	r3, [r7, #7]
 8000d54:	2294      	movs	r2, #148	@ 0x94
 8000d56:	fb02 f303 	mul.w	r3, r2, r3
 8000d5a:	4a0d      	ldr	r2, [pc, #52]	@ (8000d90 <BSP_COM_Init+0x5c>)
 8000d5c:	4413      	add	r3, r2
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f000 f852 	bl	8000e08 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_USART3_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8000d64:	79fb      	ldrb	r3, [r7, #7]
 8000d66:	2294      	movs	r2, #148	@ 0x94
 8000d68:	fb02 f303 	mul.w	r3, r2, r3
 8000d6c:	4a08      	ldr	r2, [pc, #32]	@ (8000d90 <BSP_COM_Init+0x5c>)
 8000d6e:	4413      	add	r3, r2
 8000d70:	6839      	ldr	r1, [r7, #0]
 8000d72:	4618      	mov	r0, r3
 8000d74:	f000 f80e 	bl	8000d94 <MX_USART3_Init>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d002      	beq.n	8000d84 <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8000d7e:	f06f 0303 	mvn.w	r3, #3
 8000d82:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8000d84:	68fb      	ldr	r3, [r7, #12]
}
 8000d86:	4618      	mov	r0, r3
 8000d88:	3710      	adds	r7, #16
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	24000060 	.word	0x24000060

08000d94 <MX_USART3_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART3_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
 8000d9c:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 8000d9e:	4b15      	ldr	r3, [pc, #84]	@ (8000df4 <MX_USART3_Init+0x60>)
 8000da0:	681a      	ldr	r2, [r3, #0]
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	681a      	ldr	r2, [r3, #0]
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	220c      	movs	r2, #12
 8000db2:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	895b      	ldrh	r3, [r3, #10]
 8000db8:	461a      	mov	r2, r3
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = (uint32_t)COM_Init->WordLength;
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	685a      	ldr	r2, [r3, #4]
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	891b      	ldrh	r3, [r3, #8]
 8000dca:	461a      	mov	r2, r3
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	899b      	ldrh	r3, [r3, #12]
 8000dd4:	461a      	mov	r2, r3
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000de0:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 8000de2:	6878      	ldr	r0, [r7, #4]
 8000de4:	f001 ff90 	bl	8002d08 <HAL_UART_Init>
 8000de8:	4603      	mov	r3, r0
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	3708      	adds	r7, #8
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	24000008 	.word	0x24000008

08000df8 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8000dfc:	2000      	movs	r0, #0
 8000dfe:	f7ff ff8d 	bl	8000d1c <BSP_PB_Callback>
}
 8000e02:	bf00      	nop
 8000e04:	bd80      	pop	{r7, pc}
	...

08000e08 <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b08a      	sub	sp, #40	@ 0x28
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8000e10:	4b27      	ldr	r3, [pc, #156]	@ (8000eb0 <COM1_MspInit+0xa8>)
 8000e12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e16:	4a26      	ldr	r2, [pc, #152]	@ (8000eb0 <COM1_MspInit+0xa8>)
 8000e18:	f043 0308 	orr.w	r3, r3, #8
 8000e1c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e20:	4b23      	ldr	r3, [pc, #140]	@ (8000eb0 <COM1_MspInit+0xa8>)
 8000e22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e26:	f003 0308 	and.w	r3, r3, #8
 8000e2a:	613b      	str	r3, [r7, #16]
 8000e2c:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 8000e2e:	4b20      	ldr	r3, [pc, #128]	@ (8000eb0 <COM1_MspInit+0xa8>)
 8000e30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e34:	4a1e      	ldr	r2, [pc, #120]	@ (8000eb0 <COM1_MspInit+0xa8>)
 8000e36:	f043 0308 	orr.w	r3, r3, #8
 8000e3a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e3e:	4b1c      	ldr	r3, [pc, #112]	@ (8000eb0 <COM1_MspInit+0xa8>)
 8000e40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e44:	f003 0308 	and.w	r3, r3, #8
 8000e48:	60fb      	str	r3, [r7, #12]
 8000e4a:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8000e4c:	4b18      	ldr	r3, [pc, #96]	@ (8000eb0 <COM1_MspInit+0xa8>)
 8000e4e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000e52:	4a17      	ldr	r2, [pc, #92]	@ (8000eb0 <COM1_MspInit+0xa8>)
 8000e54:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000e58:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000e5c:	4b14      	ldr	r3, [pc, #80]	@ (8000eb0 <COM1_MspInit+0xa8>)
 8000e5e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000e62:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000e66:	60bb      	str	r3, [r7, #8]
 8000e68:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin = COM1_TX_PIN;
 8000e6a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000e6e:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8000e70:	2302      	movs	r3, #2
 8000e72:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e74:	2302      	movs	r3, #2
 8000e76:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8000e78:	2301      	movs	r3, #1
 8000e7a:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8000e7c:	2307      	movs	r3, #7
 8000e7e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8000e80:	f107 0314 	add.w	r3, r7, #20
 8000e84:	4619      	mov	r1, r3
 8000e86:	480b      	ldr	r0, [pc, #44]	@ (8000eb4 <COM1_MspInit+0xac>)
 8000e88:	f000 fa48 	bl	800131c <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 8000e8c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000e90:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8000e92:	2302      	movs	r3, #2
 8000e94:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 8000e96:	2307      	movs	r3, #7
 8000e98:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 8000e9a:	f107 0314 	add.w	r3, r7, #20
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	4804      	ldr	r0, [pc, #16]	@ (8000eb4 <COM1_MspInit+0xac>)
 8000ea2:	f000 fa3b 	bl	800131c <HAL_GPIO_Init>
}
 8000ea6:	bf00      	nop
 8000ea8:	3728      	adds	r7, #40	@ 0x28
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	58024400 	.word	0x58024400
 8000eb4:	58020c00 	.word	0x58020c00

08000eb8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ebe:	2003      	movs	r0, #3
 8000ec0:	f000 f968 	bl	8001194 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000ec4:	f001 fa8c 	bl	80023e0 <HAL_RCC_GetSysClockFreq>
 8000ec8:	4602      	mov	r2, r0
 8000eca:	4b15      	ldr	r3, [pc, #84]	@ (8000f20 <HAL_Init+0x68>)
 8000ecc:	699b      	ldr	r3, [r3, #24]
 8000ece:	0a1b      	lsrs	r3, r3, #8
 8000ed0:	f003 030f 	and.w	r3, r3, #15
 8000ed4:	4913      	ldr	r1, [pc, #76]	@ (8000f24 <HAL_Init+0x6c>)
 8000ed6:	5ccb      	ldrb	r3, [r1, r3]
 8000ed8:	f003 031f 	and.w	r3, r3, #31
 8000edc:	fa22 f303 	lsr.w	r3, r2, r3
 8000ee0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000ee2:	4b0f      	ldr	r3, [pc, #60]	@ (8000f20 <HAL_Init+0x68>)
 8000ee4:	699b      	ldr	r3, [r3, #24]
 8000ee6:	f003 030f 	and.w	r3, r3, #15
 8000eea:	4a0e      	ldr	r2, [pc, #56]	@ (8000f24 <HAL_Init+0x6c>)
 8000eec:	5cd3      	ldrb	r3, [r2, r3]
 8000eee:	f003 031f 	and.w	r3, r3, #31
 8000ef2:	687a      	ldr	r2, [r7, #4]
 8000ef4:	fa22 f303 	lsr.w	r3, r2, r3
 8000ef8:	4a0b      	ldr	r2, [pc, #44]	@ (8000f28 <HAL_Init+0x70>)
 8000efa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000efc:	4a0b      	ldr	r2, [pc, #44]	@ (8000f2c <HAL_Init+0x74>)
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f02:	2000      	movs	r0, #0
 8000f04:	f000 f814 	bl	8000f30 <HAL_InitTick>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d001      	beq.n	8000f12 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000f0e:	2301      	movs	r3, #1
 8000f10:	e002      	b.n	8000f18 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000f12:	f7ff fd8f 	bl	8000a34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f16:	2300      	movs	r3, #0
}
 8000f18:	4618      	mov	r0, r3
 8000f1a:	3708      	adds	r7, #8
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	58024400 	.word	0x58024400
 8000f24:	08003d3c 	.word	0x08003d3c
 8000f28:	24000004 	.word	0x24000004
 8000f2c:	24000000 	.word	0x24000000

08000f30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b082      	sub	sp, #8
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000f38:	4b15      	ldr	r3, [pc, #84]	@ (8000f90 <HAL_InitTick+0x60>)
 8000f3a:	781b      	ldrb	r3, [r3, #0]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d101      	bne.n	8000f44 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000f40:	2301      	movs	r3, #1
 8000f42:	e021      	b.n	8000f88 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000f44:	4b13      	ldr	r3, [pc, #76]	@ (8000f94 <HAL_InitTick+0x64>)
 8000f46:	681a      	ldr	r2, [r3, #0]
 8000f48:	4b11      	ldr	r3, [pc, #68]	@ (8000f90 <HAL_InitTick+0x60>)
 8000f4a:	781b      	ldrb	r3, [r3, #0]
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f52:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f56:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f000 f94d 	bl	80011fa <HAL_SYSTICK_Config>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d001      	beq.n	8000f6a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000f66:	2301      	movs	r3, #1
 8000f68:	e00e      	b.n	8000f88 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	2b0f      	cmp	r3, #15
 8000f6e:	d80a      	bhi.n	8000f86 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f70:	2200      	movs	r2, #0
 8000f72:	6879      	ldr	r1, [r7, #4]
 8000f74:	f04f 30ff 	mov.w	r0, #4294967295
 8000f78:	f000 f917 	bl	80011aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f7c:	4a06      	ldr	r2, [pc, #24]	@ (8000f98 <HAL_InitTick+0x68>)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f82:	2300      	movs	r3, #0
 8000f84:	e000      	b.n	8000f88 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000f86:	2301      	movs	r3, #1
}
 8000f88:	4618      	mov	r0, r3
 8000f8a:	3708      	adds	r7, #8
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	24000028 	.word	0x24000028
 8000f94:	24000000 	.word	0x24000000
 8000f98:	24000024 	.word	0x24000024

08000f9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000fa0:	4b06      	ldr	r3, [pc, #24]	@ (8000fbc <HAL_IncTick+0x20>)
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	461a      	mov	r2, r3
 8000fa6:	4b06      	ldr	r3, [pc, #24]	@ (8000fc0 <HAL_IncTick+0x24>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	4413      	add	r3, r2
 8000fac:	4a04      	ldr	r2, [pc, #16]	@ (8000fc0 <HAL_IncTick+0x24>)
 8000fae:	6013      	str	r3, [r2, #0]
}
 8000fb0:	bf00      	nop
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr
 8000fba:	bf00      	nop
 8000fbc:	24000028 	.word	0x24000028
 8000fc0:	240000f4 	.word	0x240000f4

08000fc4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
  return uwTick;
 8000fc8:	4b03      	ldr	r3, [pc, #12]	@ (8000fd8 <HAL_GetTick+0x14>)
 8000fca:	681b      	ldr	r3, [r3, #0]
}
 8000fcc:	4618      	mov	r0, r3
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop
 8000fd8:	240000f4 	.word	0x240000f4

08000fdc <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000fe0:	4b03      	ldr	r3, [pc, #12]	@ (8000ff0 <HAL_GetREVID+0x14>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	0c1b      	lsrs	r3, r3, #16
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr
 8000ff0:	5c001000 	.word	0x5c001000

08000ff4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b085      	sub	sp, #20
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	f003 0307 	and.w	r3, r3, #7
 8001002:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001004:	4b0b      	ldr	r3, [pc, #44]	@ (8001034 <__NVIC_SetPriorityGrouping+0x40>)
 8001006:	68db      	ldr	r3, [r3, #12]
 8001008:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800100a:	68ba      	ldr	r2, [r7, #8]
 800100c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001010:	4013      	ands	r3, r2
 8001012:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001018:	68bb      	ldr	r3, [r7, #8]
 800101a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800101c:	4b06      	ldr	r3, [pc, #24]	@ (8001038 <__NVIC_SetPriorityGrouping+0x44>)
 800101e:	4313      	orrs	r3, r2
 8001020:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001022:	4a04      	ldr	r2, [pc, #16]	@ (8001034 <__NVIC_SetPriorityGrouping+0x40>)
 8001024:	68bb      	ldr	r3, [r7, #8]
 8001026:	60d3      	str	r3, [r2, #12]
}
 8001028:	bf00      	nop
 800102a:	3714      	adds	r7, #20
 800102c:	46bd      	mov	sp, r7
 800102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001032:	4770      	bx	lr
 8001034:	e000ed00 	.word	0xe000ed00
 8001038:	05fa0000 	.word	0x05fa0000

0800103c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001040:	4b04      	ldr	r3, [pc, #16]	@ (8001054 <__NVIC_GetPriorityGrouping+0x18>)
 8001042:	68db      	ldr	r3, [r3, #12]
 8001044:	0a1b      	lsrs	r3, r3, #8
 8001046:	f003 0307 	and.w	r3, r3, #7
}
 800104a:	4618      	mov	r0, r3
 800104c:	46bd      	mov	sp, r7
 800104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001052:	4770      	bx	lr
 8001054:	e000ed00 	.word	0xe000ed00

08001058 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001058:	b480      	push	{r7}
 800105a:	b083      	sub	sp, #12
 800105c:	af00      	add	r7, sp, #0
 800105e:	4603      	mov	r3, r0
 8001060:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001062:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001066:	2b00      	cmp	r3, #0
 8001068:	db0b      	blt.n	8001082 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800106a:	88fb      	ldrh	r3, [r7, #6]
 800106c:	f003 021f 	and.w	r2, r3, #31
 8001070:	4907      	ldr	r1, [pc, #28]	@ (8001090 <__NVIC_EnableIRQ+0x38>)
 8001072:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001076:	095b      	lsrs	r3, r3, #5
 8001078:	2001      	movs	r0, #1
 800107a:	fa00 f202 	lsl.w	r2, r0, r2
 800107e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001082:	bf00      	nop
 8001084:	370c      	adds	r7, #12
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr
 800108e:	bf00      	nop
 8001090:	e000e100 	.word	0xe000e100

08001094 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001094:	b480      	push	{r7}
 8001096:	b083      	sub	sp, #12
 8001098:	af00      	add	r7, sp, #0
 800109a:	4603      	mov	r3, r0
 800109c:	6039      	str	r1, [r7, #0]
 800109e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80010a0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	db0a      	blt.n	80010be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	b2da      	uxtb	r2, r3
 80010ac:	490c      	ldr	r1, [pc, #48]	@ (80010e0 <__NVIC_SetPriority+0x4c>)
 80010ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010b2:	0112      	lsls	r2, r2, #4
 80010b4:	b2d2      	uxtb	r2, r2
 80010b6:	440b      	add	r3, r1
 80010b8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010bc:	e00a      	b.n	80010d4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	b2da      	uxtb	r2, r3
 80010c2:	4908      	ldr	r1, [pc, #32]	@ (80010e4 <__NVIC_SetPriority+0x50>)
 80010c4:	88fb      	ldrh	r3, [r7, #6]
 80010c6:	f003 030f 	and.w	r3, r3, #15
 80010ca:	3b04      	subs	r3, #4
 80010cc:	0112      	lsls	r2, r2, #4
 80010ce:	b2d2      	uxtb	r2, r2
 80010d0:	440b      	add	r3, r1
 80010d2:	761a      	strb	r2, [r3, #24]
}
 80010d4:	bf00      	nop
 80010d6:	370c      	adds	r7, #12
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr
 80010e0:	e000e100 	.word	0xe000e100
 80010e4:	e000ed00 	.word	0xe000ed00

080010e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b089      	sub	sp, #36	@ 0x24
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	60f8      	str	r0, [r7, #12]
 80010f0:	60b9      	str	r1, [r7, #8]
 80010f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	f003 0307 	and.w	r3, r3, #7
 80010fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010fc:	69fb      	ldr	r3, [r7, #28]
 80010fe:	f1c3 0307 	rsb	r3, r3, #7
 8001102:	2b04      	cmp	r3, #4
 8001104:	bf28      	it	cs
 8001106:	2304      	movcs	r3, #4
 8001108:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800110a:	69fb      	ldr	r3, [r7, #28]
 800110c:	3304      	adds	r3, #4
 800110e:	2b06      	cmp	r3, #6
 8001110:	d902      	bls.n	8001118 <NVIC_EncodePriority+0x30>
 8001112:	69fb      	ldr	r3, [r7, #28]
 8001114:	3b03      	subs	r3, #3
 8001116:	e000      	b.n	800111a <NVIC_EncodePriority+0x32>
 8001118:	2300      	movs	r3, #0
 800111a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800111c:	f04f 32ff 	mov.w	r2, #4294967295
 8001120:	69bb      	ldr	r3, [r7, #24]
 8001122:	fa02 f303 	lsl.w	r3, r2, r3
 8001126:	43da      	mvns	r2, r3
 8001128:	68bb      	ldr	r3, [r7, #8]
 800112a:	401a      	ands	r2, r3
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001130:	f04f 31ff 	mov.w	r1, #4294967295
 8001134:	697b      	ldr	r3, [r7, #20]
 8001136:	fa01 f303 	lsl.w	r3, r1, r3
 800113a:	43d9      	mvns	r1, r3
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001140:	4313      	orrs	r3, r2
         );
}
 8001142:	4618      	mov	r0, r3
 8001144:	3724      	adds	r7, #36	@ 0x24
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr
	...

08001150 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	3b01      	subs	r3, #1
 800115c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001160:	d301      	bcc.n	8001166 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001162:	2301      	movs	r3, #1
 8001164:	e00f      	b.n	8001186 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001166:	4a0a      	ldr	r2, [pc, #40]	@ (8001190 <SysTick_Config+0x40>)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	3b01      	subs	r3, #1
 800116c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800116e:	210f      	movs	r1, #15
 8001170:	f04f 30ff 	mov.w	r0, #4294967295
 8001174:	f7ff ff8e 	bl	8001094 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001178:	4b05      	ldr	r3, [pc, #20]	@ (8001190 <SysTick_Config+0x40>)
 800117a:	2200      	movs	r2, #0
 800117c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800117e:	4b04      	ldr	r3, [pc, #16]	@ (8001190 <SysTick_Config+0x40>)
 8001180:	2207      	movs	r2, #7
 8001182:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001184:	2300      	movs	r3, #0
}
 8001186:	4618      	mov	r0, r3
 8001188:	3708      	adds	r7, #8
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	e000e010 	.word	0xe000e010

08001194 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800119c:	6878      	ldr	r0, [r7, #4]
 800119e:	f7ff ff29 	bl	8000ff4 <__NVIC_SetPriorityGrouping>
}
 80011a2:	bf00      	nop
 80011a4:	3708      	adds	r7, #8
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}

080011aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011aa:	b580      	push	{r7, lr}
 80011ac:	b086      	sub	sp, #24
 80011ae:	af00      	add	r7, sp, #0
 80011b0:	4603      	mov	r3, r0
 80011b2:	60b9      	str	r1, [r7, #8]
 80011b4:	607a      	str	r2, [r7, #4]
 80011b6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80011b8:	f7ff ff40 	bl	800103c <__NVIC_GetPriorityGrouping>
 80011bc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011be:	687a      	ldr	r2, [r7, #4]
 80011c0:	68b9      	ldr	r1, [r7, #8]
 80011c2:	6978      	ldr	r0, [r7, #20]
 80011c4:	f7ff ff90 	bl	80010e8 <NVIC_EncodePriority>
 80011c8:	4602      	mov	r2, r0
 80011ca:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80011ce:	4611      	mov	r1, r2
 80011d0:	4618      	mov	r0, r3
 80011d2:	f7ff ff5f 	bl	8001094 <__NVIC_SetPriority>
}
 80011d6:	bf00      	nop
 80011d8:	3718      	adds	r7, #24
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}

080011de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011de:	b580      	push	{r7, lr}
 80011e0:	b082      	sub	sp, #8
 80011e2:	af00      	add	r7, sp, #0
 80011e4:	4603      	mov	r3, r0
 80011e6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011e8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011ec:	4618      	mov	r0, r3
 80011ee:	f7ff ff33 	bl	8001058 <__NVIC_EnableIRQ>
}
 80011f2:	bf00      	nop
 80011f4:	3708      	adds	r7, #8
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}

080011fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011fa:	b580      	push	{r7, lr}
 80011fc:	b082      	sub	sp, #8
 80011fe:	af00      	add	r7, sp, #0
 8001200:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001202:	6878      	ldr	r0, [r7, #4]
 8001204:	f7ff ffa4 	bl	8001150 <SysTick_Config>
 8001208:	4603      	mov	r3, r0
}
 800120a:	4618      	mov	r0, r3
 800120c:	3708      	adds	r7, #8
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
	...

08001214 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8001218:	4b07      	ldr	r3, [pc, #28]	@ (8001238 <HAL_GetCurrentCPUID+0x24>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	091b      	lsrs	r3, r3, #4
 800121e:	f003 030f 	and.w	r3, r3, #15
 8001222:	2b07      	cmp	r3, #7
 8001224:	d101      	bne.n	800122a <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 8001226:	2303      	movs	r3, #3
 8001228:	e000      	b.n	800122c <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 800122a:	2301      	movs	r3, #1
  }
}
 800122c:	4618      	mov	r0, r3
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr
 8001236:	bf00      	nop
 8001238:	e000ed00 	.word	0xe000ed00

0800123c <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 800123c:	b480      	push	{r7}
 800123e:	b087      	sub	sp, #28
 8001240:	af00      	add	r7, sp, #0
 8001242:	60f8      	str	r0, [r7, #12]
 8001244:	460b      	mov	r3, r1
 8001246:	607a      	str	r2, [r7, #4]
 8001248:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800124a:	2300      	movs	r3, #0
 800124c:	75fb      	strb	r3, [r7, #23]

  /* Check null pointer */
  if (hexti == NULL)
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d101      	bne.n	8001258 <HAL_EXTI_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8001254:	2301      	movs	r3, #1
 8001256:	e00a      	b.n	800126e <HAL_EXTI_RegisterCallback+0x32>
  }

  switch (CallbackID)
 8001258:	7afb      	ldrb	r3, [r7, #11]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d103      	bne.n	8001266 <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	687a      	ldr	r2, [r7, #4]
 8001262:	605a      	str	r2, [r3, #4]
      break;
 8001264:	e002      	b.n	800126c <HAL_EXTI_RegisterCallback+0x30>

    default:
      status = HAL_ERROR;
 8001266:	2301      	movs	r3, #1
 8001268:	75fb      	strb	r3, [r7, #23]
      break;
 800126a:	bf00      	nop
  }

  return status;
 800126c:	7dfb      	ldrb	r3, [r7, #23]
}
 800126e:	4618      	mov	r0, r3
 8001270:	371c      	adds	r7, #28
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr

0800127a <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 800127a:	b480      	push	{r7}
 800127c:	b083      	sub	sp, #12
 800127e:	af00      	add	r7, sp, #0
 8001280:	6078      	str	r0, [r7, #4]
 8001282:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d101      	bne.n	800128e <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 800128a:	2301      	movs	r3, #1
 800128c:	e003      	b.n	8001296 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	683a      	ldr	r2, [r7, #0]
 8001292:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8001294:	2300      	movs	r3, #0
  }
}
 8001296:	4618      	mov	r0, r3
 8001298:	370c      	adds	r7, #12
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr
	...

080012a4 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b086      	sub	sp, #24
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	0c1b      	lsrs	r3, r3, #16
 80012b2:	f003 0303 	and.w	r3, r3, #3
 80012b6:	613b      	str	r3, [r7, #16]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f003 031f 	and.w	r3, r3, #31
 80012c0:	2201      	movs	r2, #1
 80012c2:	fa02 f303 	lsl.w	r3, r2, r3
 80012c6:	60fb      	str	r3, [r7, #12]

#if defined(DUAL_CORE)
  if (HAL_GetCurrentCPUID() == CM7_CPUID)
 80012c8:	f7ff ffa4 	bl	8001214 <HAL_GetCurrentCPUID>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b03      	cmp	r3, #3
 80012d0:	d105      	bne.n	80012de <HAL_EXTI_IRQHandler+0x3a>
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
 80012d2:	693b      	ldr	r3, [r7, #16]
 80012d4:	011a      	lsls	r2, r3, #4
 80012d6:	4b0f      	ldr	r3, [pc, #60]	@ (8001314 <HAL_EXTI_IRQHandler+0x70>)
 80012d8:	4413      	add	r3, r2
 80012da:	617b      	str	r3, [r7, #20]
 80012dc:	e004      	b.n	80012e8 <HAL_EXTI_IRQHandler+0x44>
  }
  else /* Cortex-M4*/
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->C2PR1 + (EXTI_MODE_OFFSET * offset));
 80012de:	693b      	ldr	r3, [r7, #16]
 80012e0:	011a      	lsls	r2, r3, #4
 80012e2:	4b0d      	ldr	r3, [pc, #52]	@ (8001318 <HAL_EXTI_IRQHandler+0x74>)
 80012e4:	4413      	add	r3, r2
 80012e6:	617b      	str	r3, [r7, #20]
#else
  regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
#endif /* DUAL_CORE */

  /* Get pending bit  */
  regval = (*regaddr & maskline);
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	68fa      	ldr	r2, [r7, #12]
 80012ee:	4013      	ands	r3, r2
 80012f0:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00U)
 80012f2:	68bb      	ldr	r3, [r7, #8]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d009      	beq.n	800130c <HAL_EXTI_IRQHandler+0x68>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 80012f8:	697b      	ldr	r3, [r7, #20]
 80012fa:	68fa      	ldr	r2, [r7, #12]
 80012fc:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d002      	beq.n	800130c <HAL_EXTI_IRQHandler+0x68>
    {
      hexti->PendingCallback();
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	4798      	blx	r3
    }
  }
}
 800130c:	bf00      	nop
 800130e:	3718      	adds	r7, #24
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}
 8001314:	58000088 	.word	0x58000088
 8001318:	580000c8 	.word	0x580000c8

0800131c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800131c:	b480      	push	{r7}
 800131e:	b089      	sub	sp, #36	@ 0x24
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
 8001324:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001326:	2300      	movs	r3, #0
 8001328:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800132a:	4b89      	ldr	r3, [pc, #548]	@ (8001550 <HAL_GPIO_Init+0x234>)
 800132c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800132e:	e194      	b.n	800165a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	681a      	ldr	r2, [r3, #0]
 8001334:	2101      	movs	r1, #1
 8001336:	69fb      	ldr	r3, [r7, #28]
 8001338:	fa01 f303 	lsl.w	r3, r1, r3
 800133c:	4013      	ands	r3, r2
 800133e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001340:	693b      	ldr	r3, [r7, #16]
 8001342:	2b00      	cmp	r3, #0
 8001344:	f000 8186 	beq.w	8001654 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	f003 0303 	and.w	r3, r3, #3
 8001350:	2b01      	cmp	r3, #1
 8001352:	d005      	beq.n	8001360 <HAL_GPIO_Init+0x44>
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	f003 0303 	and.w	r3, r3, #3
 800135c:	2b02      	cmp	r3, #2
 800135e:	d130      	bne.n	80013c2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	689b      	ldr	r3, [r3, #8]
 8001364:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001366:	69fb      	ldr	r3, [r7, #28]
 8001368:	005b      	lsls	r3, r3, #1
 800136a:	2203      	movs	r2, #3
 800136c:	fa02 f303 	lsl.w	r3, r2, r3
 8001370:	43db      	mvns	r3, r3
 8001372:	69ba      	ldr	r2, [r7, #24]
 8001374:	4013      	ands	r3, r2
 8001376:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	68da      	ldr	r2, [r3, #12]
 800137c:	69fb      	ldr	r3, [r7, #28]
 800137e:	005b      	lsls	r3, r3, #1
 8001380:	fa02 f303 	lsl.w	r3, r2, r3
 8001384:	69ba      	ldr	r2, [r7, #24]
 8001386:	4313      	orrs	r3, r2
 8001388:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	69ba      	ldr	r2, [r7, #24]
 800138e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001396:	2201      	movs	r2, #1
 8001398:	69fb      	ldr	r3, [r7, #28]
 800139a:	fa02 f303 	lsl.w	r3, r2, r3
 800139e:	43db      	mvns	r3, r3
 80013a0:	69ba      	ldr	r2, [r7, #24]
 80013a2:	4013      	ands	r3, r2
 80013a4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	091b      	lsrs	r3, r3, #4
 80013ac:	f003 0201 	and.w	r2, r3, #1
 80013b0:	69fb      	ldr	r3, [r7, #28]
 80013b2:	fa02 f303 	lsl.w	r3, r2, r3
 80013b6:	69ba      	ldr	r2, [r7, #24]
 80013b8:	4313      	orrs	r3, r2
 80013ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	69ba      	ldr	r2, [r7, #24]
 80013c0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	f003 0303 	and.w	r3, r3, #3
 80013ca:	2b03      	cmp	r3, #3
 80013cc:	d017      	beq.n	80013fe <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	68db      	ldr	r3, [r3, #12]
 80013d2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80013d4:	69fb      	ldr	r3, [r7, #28]
 80013d6:	005b      	lsls	r3, r3, #1
 80013d8:	2203      	movs	r2, #3
 80013da:	fa02 f303 	lsl.w	r3, r2, r3
 80013de:	43db      	mvns	r3, r3
 80013e0:	69ba      	ldr	r2, [r7, #24]
 80013e2:	4013      	ands	r3, r2
 80013e4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	689a      	ldr	r2, [r3, #8]
 80013ea:	69fb      	ldr	r3, [r7, #28]
 80013ec:	005b      	lsls	r3, r3, #1
 80013ee:	fa02 f303 	lsl.w	r3, r2, r3
 80013f2:	69ba      	ldr	r2, [r7, #24]
 80013f4:	4313      	orrs	r3, r2
 80013f6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	69ba      	ldr	r2, [r7, #24]
 80013fc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	f003 0303 	and.w	r3, r3, #3
 8001406:	2b02      	cmp	r3, #2
 8001408:	d123      	bne.n	8001452 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800140a:	69fb      	ldr	r3, [r7, #28]
 800140c:	08da      	lsrs	r2, r3, #3
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	3208      	adds	r2, #8
 8001412:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001416:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001418:	69fb      	ldr	r3, [r7, #28]
 800141a:	f003 0307 	and.w	r3, r3, #7
 800141e:	009b      	lsls	r3, r3, #2
 8001420:	220f      	movs	r2, #15
 8001422:	fa02 f303 	lsl.w	r3, r2, r3
 8001426:	43db      	mvns	r3, r3
 8001428:	69ba      	ldr	r2, [r7, #24]
 800142a:	4013      	ands	r3, r2
 800142c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	691a      	ldr	r2, [r3, #16]
 8001432:	69fb      	ldr	r3, [r7, #28]
 8001434:	f003 0307 	and.w	r3, r3, #7
 8001438:	009b      	lsls	r3, r3, #2
 800143a:	fa02 f303 	lsl.w	r3, r2, r3
 800143e:	69ba      	ldr	r2, [r7, #24]
 8001440:	4313      	orrs	r3, r2
 8001442:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001444:	69fb      	ldr	r3, [r7, #28]
 8001446:	08da      	lsrs	r2, r3, #3
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	3208      	adds	r2, #8
 800144c:	69b9      	ldr	r1, [r7, #24]
 800144e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001458:	69fb      	ldr	r3, [r7, #28]
 800145a:	005b      	lsls	r3, r3, #1
 800145c:	2203      	movs	r2, #3
 800145e:	fa02 f303 	lsl.w	r3, r2, r3
 8001462:	43db      	mvns	r3, r3
 8001464:	69ba      	ldr	r2, [r7, #24]
 8001466:	4013      	ands	r3, r2
 8001468:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	f003 0203 	and.w	r2, r3, #3
 8001472:	69fb      	ldr	r3, [r7, #28]
 8001474:	005b      	lsls	r3, r3, #1
 8001476:	fa02 f303 	lsl.w	r3, r2, r3
 800147a:	69ba      	ldr	r2, [r7, #24]
 800147c:	4313      	orrs	r3, r2
 800147e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	69ba      	ldr	r2, [r7, #24]
 8001484:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800148e:	2b00      	cmp	r3, #0
 8001490:	f000 80e0 	beq.w	8001654 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001494:	4b2f      	ldr	r3, [pc, #188]	@ (8001554 <HAL_GPIO_Init+0x238>)
 8001496:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800149a:	4a2e      	ldr	r2, [pc, #184]	@ (8001554 <HAL_GPIO_Init+0x238>)
 800149c:	f043 0302 	orr.w	r3, r3, #2
 80014a0:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80014a4:	4b2b      	ldr	r3, [pc, #172]	@ (8001554 <HAL_GPIO_Init+0x238>)
 80014a6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80014aa:	f003 0302 	and.w	r3, r3, #2
 80014ae:	60fb      	str	r3, [r7, #12]
 80014b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80014b2:	4a29      	ldr	r2, [pc, #164]	@ (8001558 <HAL_GPIO_Init+0x23c>)
 80014b4:	69fb      	ldr	r3, [r7, #28]
 80014b6:	089b      	lsrs	r3, r3, #2
 80014b8:	3302      	adds	r3, #2
 80014ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80014c0:	69fb      	ldr	r3, [r7, #28]
 80014c2:	f003 0303 	and.w	r3, r3, #3
 80014c6:	009b      	lsls	r3, r3, #2
 80014c8:	220f      	movs	r2, #15
 80014ca:	fa02 f303 	lsl.w	r3, r2, r3
 80014ce:	43db      	mvns	r3, r3
 80014d0:	69ba      	ldr	r2, [r7, #24]
 80014d2:	4013      	ands	r3, r2
 80014d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	4a20      	ldr	r2, [pc, #128]	@ (800155c <HAL_GPIO_Init+0x240>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d052      	beq.n	8001584 <HAL_GPIO_Init+0x268>
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	4a1f      	ldr	r2, [pc, #124]	@ (8001560 <HAL_GPIO_Init+0x244>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d031      	beq.n	800154a <HAL_GPIO_Init+0x22e>
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	4a1e      	ldr	r2, [pc, #120]	@ (8001564 <HAL_GPIO_Init+0x248>)
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d02b      	beq.n	8001546 <HAL_GPIO_Init+0x22a>
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	4a1d      	ldr	r2, [pc, #116]	@ (8001568 <HAL_GPIO_Init+0x24c>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d025      	beq.n	8001542 <HAL_GPIO_Init+0x226>
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	4a1c      	ldr	r2, [pc, #112]	@ (800156c <HAL_GPIO_Init+0x250>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d01f      	beq.n	800153e <HAL_GPIO_Init+0x222>
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	4a1b      	ldr	r2, [pc, #108]	@ (8001570 <HAL_GPIO_Init+0x254>)
 8001502:	4293      	cmp	r3, r2
 8001504:	d019      	beq.n	800153a <HAL_GPIO_Init+0x21e>
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	4a1a      	ldr	r2, [pc, #104]	@ (8001574 <HAL_GPIO_Init+0x258>)
 800150a:	4293      	cmp	r3, r2
 800150c:	d013      	beq.n	8001536 <HAL_GPIO_Init+0x21a>
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	4a19      	ldr	r2, [pc, #100]	@ (8001578 <HAL_GPIO_Init+0x25c>)
 8001512:	4293      	cmp	r3, r2
 8001514:	d00d      	beq.n	8001532 <HAL_GPIO_Init+0x216>
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	4a18      	ldr	r2, [pc, #96]	@ (800157c <HAL_GPIO_Init+0x260>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d007      	beq.n	800152e <HAL_GPIO_Init+0x212>
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	4a17      	ldr	r2, [pc, #92]	@ (8001580 <HAL_GPIO_Init+0x264>)
 8001522:	4293      	cmp	r3, r2
 8001524:	d101      	bne.n	800152a <HAL_GPIO_Init+0x20e>
 8001526:	2309      	movs	r3, #9
 8001528:	e02d      	b.n	8001586 <HAL_GPIO_Init+0x26a>
 800152a:	230a      	movs	r3, #10
 800152c:	e02b      	b.n	8001586 <HAL_GPIO_Init+0x26a>
 800152e:	2308      	movs	r3, #8
 8001530:	e029      	b.n	8001586 <HAL_GPIO_Init+0x26a>
 8001532:	2307      	movs	r3, #7
 8001534:	e027      	b.n	8001586 <HAL_GPIO_Init+0x26a>
 8001536:	2306      	movs	r3, #6
 8001538:	e025      	b.n	8001586 <HAL_GPIO_Init+0x26a>
 800153a:	2305      	movs	r3, #5
 800153c:	e023      	b.n	8001586 <HAL_GPIO_Init+0x26a>
 800153e:	2304      	movs	r3, #4
 8001540:	e021      	b.n	8001586 <HAL_GPIO_Init+0x26a>
 8001542:	2303      	movs	r3, #3
 8001544:	e01f      	b.n	8001586 <HAL_GPIO_Init+0x26a>
 8001546:	2302      	movs	r3, #2
 8001548:	e01d      	b.n	8001586 <HAL_GPIO_Init+0x26a>
 800154a:	2301      	movs	r3, #1
 800154c:	e01b      	b.n	8001586 <HAL_GPIO_Init+0x26a>
 800154e:	bf00      	nop
 8001550:	58000080 	.word	0x58000080
 8001554:	58024400 	.word	0x58024400
 8001558:	58000400 	.word	0x58000400
 800155c:	58020000 	.word	0x58020000
 8001560:	58020400 	.word	0x58020400
 8001564:	58020800 	.word	0x58020800
 8001568:	58020c00 	.word	0x58020c00
 800156c:	58021000 	.word	0x58021000
 8001570:	58021400 	.word	0x58021400
 8001574:	58021800 	.word	0x58021800
 8001578:	58021c00 	.word	0x58021c00
 800157c:	58022000 	.word	0x58022000
 8001580:	58022400 	.word	0x58022400
 8001584:	2300      	movs	r3, #0
 8001586:	69fa      	ldr	r2, [r7, #28]
 8001588:	f002 0203 	and.w	r2, r2, #3
 800158c:	0092      	lsls	r2, r2, #2
 800158e:	4093      	lsls	r3, r2
 8001590:	69ba      	ldr	r2, [r7, #24]
 8001592:	4313      	orrs	r3, r2
 8001594:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001596:	4938      	ldr	r1, [pc, #224]	@ (8001678 <HAL_GPIO_Init+0x35c>)
 8001598:	69fb      	ldr	r3, [r7, #28]
 800159a:	089b      	lsrs	r3, r3, #2
 800159c:	3302      	adds	r3, #2
 800159e:	69ba      	ldr	r2, [r7, #24]
 80015a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80015a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80015ac:	693b      	ldr	r3, [r7, #16]
 80015ae:	43db      	mvns	r3, r3
 80015b0:	69ba      	ldr	r2, [r7, #24]
 80015b2:	4013      	ands	r3, r2
 80015b4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d003      	beq.n	80015ca <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80015c2:	69ba      	ldr	r2, [r7, #24]
 80015c4:	693b      	ldr	r3, [r7, #16]
 80015c6:	4313      	orrs	r3, r2
 80015c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80015ca:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80015ce:	69bb      	ldr	r3, [r7, #24]
 80015d0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80015d2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80015da:	693b      	ldr	r3, [r7, #16]
 80015dc:	43db      	mvns	r3, r3
 80015de:	69ba      	ldr	r2, [r7, #24]
 80015e0:	4013      	ands	r3, r2
 80015e2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d003      	beq.n	80015f8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80015f0:	69ba      	ldr	r2, [r7, #24]
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	4313      	orrs	r3, r2
 80015f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80015f8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80015fc:	69bb      	ldr	r3, [r7, #24]
 80015fe:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001600:	697b      	ldr	r3, [r7, #20]
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001606:	693b      	ldr	r3, [r7, #16]
 8001608:	43db      	mvns	r3, r3
 800160a:	69ba      	ldr	r2, [r7, #24]
 800160c:	4013      	ands	r3, r2
 800160e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001618:	2b00      	cmp	r3, #0
 800161a:	d003      	beq.n	8001624 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800161c:	69ba      	ldr	r2, [r7, #24]
 800161e:	693b      	ldr	r3, [r7, #16]
 8001620:	4313      	orrs	r3, r2
 8001622:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001624:	697b      	ldr	r3, [r7, #20]
 8001626:	69ba      	ldr	r2, [r7, #24]
 8001628:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800162a:	697b      	ldr	r3, [r7, #20]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001630:	693b      	ldr	r3, [r7, #16]
 8001632:	43db      	mvns	r3, r3
 8001634:	69ba      	ldr	r2, [r7, #24]
 8001636:	4013      	ands	r3, r2
 8001638:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001642:	2b00      	cmp	r3, #0
 8001644:	d003      	beq.n	800164e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001646:	69ba      	ldr	r2, [r7, #24]
 8001648:	693b      	ldr	r3, [r7, #16]
 800164a:	4313      	orrs	r3, r2
 800164c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800164e:	697b      	ldr	r3, [r7, #20]
 8001650:	69ba      	ldr	r2, [r7, #24]
 8001652:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001654:	69fb      	ldr	r3, [r7, #28]
 8001656:	3301      	adds	r3, #1
 8001658:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	681a      	ldr	r2, [r3, #0]
 800165e:	69fb      	ldr	r3, [r7, #28]
 8001660:	fa22 f303 	lsr.w	r3, r2, r3
 8001664:	2b00      	cmp	r3, #0
 8001666:	f47f ae63 	bne.w	8001330 <HAL_GPIO_Init+0x14>
  }
}
 800166a:	bf00      	nop
 800166c:	bf00      	nop
 800166e:	3724      	adds	r7, #36	@ 0x24
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr
 8001678:	58000400 	.word	0x58000400

0800167c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800167c:	b480      	push	{r7}
 800167e:	b083      	sub	sp, #12
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
 8001684:	460b      	mov	r3, r1
 8001686:	807b      	strh	r3, [r7, #2]
 8001688:	4613      	mov	r3, r2
 800168a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800168c:	787b      	ldrb	r3, [r7, #1]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d003      	beq.n	800169a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001692:	887a      	ldrh	r2, [r7, #2]
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001698:	e003      	b.n	80016a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800169a:	887b      	ldrh	r3, [r7, #2]
 800169c:	041a      	lsls	r2, r3, #16
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	619a      	str	r2, [r3, #24]
}
 80016a2:	bf00      	nop
 80016a4:	370c      	adds	r7, #12
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	4770      	bx	lr
	...

080016b0 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b083      	sub	sp, #12
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 80016b8:	4a08      	ldr	r2, [pc, #32]	@ (80016dc <HAL_HSEM_FastTake+0x2c>)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	3320      	adds	r3, #32
 80016be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016c2:	4a07      	ldr	r2, [pc, #28]	@ (80016e0 <HAL_HSEM_FastTake+0x30>)
 80016c4:	4293      	cmp	r3, r2
 80016c6:	d101      	bne.n	80016cc <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 80016c8:	2300      	movs	r3, #0
 80016ca:	e000      	b.n	80016ce <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80016cc:	2301      	movs	r3, #1
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	370c      	adds	r7, #12
 80016d2:	46bd      	mov	sp, r7
 80016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d8:	4770      	bx	lr
 80016da:	bf00      	nop
 80016dc:	58026400 	.word	0x58026400
 80016e0:	80000300 	.word	0x80000300

080016e4 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b083      	sub	sp, #12
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
 80016ec:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80016ee:	4906      	ldr	r1, [pc, #24]	@ (8001708 <HAL_HSEM_Release+0x24>)
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80016fc:	bf00      	nop
 80016fe:	370c      	adds	r7, #12
 8001700:	46bd      	mov	sp, r7
 8001702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001706:	4770      	bx	lr
 8001708:	58026400 	.word	0x58026400

0800170c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b084      	sub	sp, #16
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001714:	4b29      	ldr	r3, [pc, #164]	@ (80017bc <HAL_PWREx_ConfigSupply+0xb0>)
 8001716:	68db      	ldr	r3, [r3, #12]
 8001718:	f003 0307 	and.w	r3, r3, #7
 800171c:	2b06      	cmp	r3, #6
 800171e:	d00a      	beq.n	8001736 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001720:	4b26      	ldr	r3, [pc, #152]	@ (80017bc <HAL_PWREx_ConfigSupply+0xb0>)
 8001722:	68db      	ldr	r3, [r3, #12]
 8001724:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001728:	687a      	ldr	r2, [r7, #4]
 800172a:	429a      	cmp	r2, r3
 800172c:	d001      	beq.n	8001732 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800172e:	2301      	movs	r3, #1
 8001730:	e040      	b.n	80017b4 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001732:	2300      	movs	r3, #0
 8001734:	e03e      	b.n	80017b4 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001736:	4b21      	ldr	r3, [pc, #132]	@ (80017bc <HAL_PWREx_ConfigSupply+0xb0>)
 8001738:	68db      	ldr	r3, [r3, #12]
 800173a:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 800173e:	491f      	ldr	r1, [pc, #124]	@ (80017bc <HAL_PWREx_ConfigSupply+0xb0>)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	4313      	orrs	r3, r2
 8001744:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001746:	f7ff fc3d 	bl	8000fc4 <HAL_GetTick>
 800174a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800174c:	e009      	b.n	8001762 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800174e:	f7ff fc39 	bl	8000fc4 <HAL_GetTick>
 8001752:	4602      	mov	r2, r0
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	1ad3      	subs	r3, r2, r3
 8001758:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800175c:	d901      	bls.n	8001762 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800175e:	2301      	movs	r3, #1
 8001760:	e028      	b.n	80017b4 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001762:	4b16      	ldr	r3, [pc, #88]	@ (80017bc <HAL_PWREx_ConfigSupply+0xb0>)
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800176a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800176e:	d1ee      	bne.n	800174e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2b1e      	cmp	r3, #30
 8001774:	d008      	beq.n	8001788 <HAL_PWREx_ConfigSupply+0x7c>
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	2b2e      	cmp	r3, #46	@ 0x2e
 800177a:	d005      	beq.n	8001788 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2b1d      	cmp	r3, #29
 8001780:	d002      	beq.n	8001788 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	2b2d      	cmp	r3, #45	@ 0x2d
 8001786:	d114      	bne.n	80017b2 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8001788:	f7ff fc1c 	bl	8000fc4 <HAL_GetTick>
 800178c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800178e:	e009      	b.n	80017a4 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001790:	f7ff fc18 	bl	8000fc4 <HAL_GetTick>
 8001794:	4602      	mov	r2, r0
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	1ad3      	subs	r3, r2, r3
 800179a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800179e:	d901      	bls.n	80017a4 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80017a0:	2301      	movs	r3, #1
 80017a2:	e007      	b.n	80017b4 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80017a4:	4b05      	ldr	r3, [pc, #20]	@ (80017bc <HAL_PWREx_ConfigSupply+0xb0>)
 80017a6:	68db      	ldr	r3, [r3, #12]
 80017a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80017ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80017b0:	d1ee      	bne.n	8001790 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80017b2:	2300      	movs	r3, #0
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	3710      	adds	r7, #16
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	58024800 	.word	0x58024800

080017c0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b08c      	sub	sp, #48	@ 0x30
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d102      	bne.n	80017d4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80017ce:	2301      	movs	r3, #1
 80017d0:	f000 bc48 	b.w	8002064 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f003 0301 	and.w	r3, r3, #1
 80017dc:	2b00      	cmp	r3, #0
 80017de:	f000 8088 	beq.w	80018f2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80017e2:	4b99      	ldr	r3, [pc, #612]	@ (8001a48 <HAL_RCC_OscConfig+0x288>)
 80017e4:	691b      	ldr	r3, [r3, #16]
 80017e6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80017ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80017ec:	4b96      	ldr	r3, [pc, #600]	@ (8001a48 <HAL_RCC_OscConfig+0x288>)
 80017ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017f0:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80017f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017f4:	2b10      	cmp	r3, #16
 80017f6:	d007      	beq.n	8001808 <HAL_RCC_OscConfig+0x48>
 80017f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017fa:	2b18      	cmp	r3, #24
 80017fc:	d111      	bne.n	8001822 <HAL_RCC_OscConfig+0x62>
 80017fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001800:	f003 0303 	and.w	r3, r3, #3
 8001804:	2b02      	cmp	r3, #2
 8001806:	d10c      	bne.n	8001822 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001808:	4b8f      	ldr	r3, [pc, #572]	@ (8001a48 <HAL_RCC_OscConfig+0x288>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001810:	2b00      	cmp	r3, #0
 8001812:	d06d      	beq.n	80018f0 <HAL_RCC_OscConfig+0x130>
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d169      	bne.n	80018f0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800181c:	2301      	movs	r3, #1
 800181e:	f000 bc21 	b.w	8002064 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800182a:	d106      	bne.n	800183a <HAL_RCC_OscConfig+0x7a>
 800182c:	4b86      	ldr	r3, [pc, #536]	@ (8001a48 <HAL_RCC_OscConfig+0x288>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a85      	ldr	r2, [pc, #532]	@ (8001a48 <HAL_RCC_OscConfig+0x288>)
 8001832:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001836:	6013      	str	r3, [r2, #0]
 8001838:	e02e      	b.n	8001898 <HAL_RCC_OscConfig+0xd8>
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d10c      	bne.n	800185c <HAL_RCC_OscConfig+0x9c>
 8001842:	4b81      	ldr	r3, [pc, #516]	@ (8001a48 <HAL_RCC_OscConfig+0x288>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	4a80      	ldr	r2, [pc, #512]	@ (8001a48 <HAL_RCC_OscConfig+0x288>)
 8001848:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800184c:	6013      	str	r3, [r2, #0]
 800184e:	4b7e      	ldr	r3, [pc, #504]	@ (8001a48 <HAL_RCC_OscConfig+0x288>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4a7d      	ldr	r2, [pc, #500]	@ (8001a48 <HAL_RCC_OscConfig+0x288>)
 8001854:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001858:	6013      	str	r3, [r2, #0]
 800185a:	e01d      	b.n	8001898 <HAL_RCC_OscConfig+0xd8>
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001864:	d10c      	bne.n	8001880 <HAL_RCC_OscConfig+0xc0>
 8001866:	4b78      	ldr	r3, [pc, #480]	@ (8001a48 <HAL_RCC_OscConfig+0x288>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4a77      	ldr	r2, [pc, #476]	@ (8001a48 <HAL_RCC_OscConfig+0x288>)
 800186c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001870:	6013      	str	r3, [r2, #0]
 8001872:	4b75      	ldr	r3, [pc, #468]	@ (8001a48 <HAL_RCC_OscConfig+0x288>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4a74      	ldr	r2, [pc, #464]	@ (8001a48 <HAL_RCC_OscConfig+0x288>)
 8001878:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800187c:	6013      	str	r3, [r2, #0]
 800187e:	e00b      	b.n	8001898 <HAL_RCC_OscConfig+0xd8>
 8001880:	4b71      	ldr	r3, [pc, #452]	@ (8001a48 <HAL_RCC_OscConfig+0x288>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a70      	ldr	r2, [pc, #448]	@ (8001a48 <HAL_RCC_OscConfig+0x288>)
 8001886:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800188a:	6013      	str	r3, [r2, #0]
 800188c:	4b6e      	ldr	r3, [pc, #440]	@ (8001a48 <HAL_RCC_OscConfig+0x288>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a6d      	ldr	r2, [pc, #436]	@ (8001a48 <HAL_RCC_OscConfig+0x288>)
 8001892:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001896:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d013      	beq.n	80018c8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018a0:	f7ff fb90 	bl	8000fc4 <HAL_GetTick>
 80018a4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80018a6:	e008      	b.n	80018ba <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018a8:	f7ff fb8c 	bl	8000fc4 <HAL_GetTick>
 80018ac:	4602      	mov	r2, r0
 80018ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018b0:	1ad3      	subs	r3, r2, r3
 80018b2:	2b64      	cmp	r3, #100	@ 0x64
 80018b4:	d901      	bls.n	80018ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80018b6:	2303      	movs	r3, #3
 80018b8:	e3d4      	b.n	8002064 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80018ba:	4b63      	ldr	r3, [pc, #396]	@ (8001a48 <HAL_RCC_OscConfig+0x288>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d0f0      	beq.n	80018a8 <HAL_RCC_OscConfig+0xe8>
 80018c6:	e014      	b.n	80018f2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018c8:	f7ff fb7c 	bl	8000fc4 <HAL_GetTick>
 80018cc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80018ce:	e008      	b.n	80018e2 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018d0:	f7ff fb78 	bl	8000fc4 <HAL_GetTick>
 80018d4:	4602      	mov	r2, r0
 80018d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018d8:	1ad3      	subs	r3, r2, r3
 80018da:	2b64      	cmp	r3, #100	@ 0x64
 80018dc:	d901      	bls.n	80018e2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80018de:	2303      	movs	r3, #3
 80018e0:	e3c0      	b.n	8002064 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80018e2:	4b59      	ldr	r3, [pc, #356]	@ (8001a48 <HAL_RCC_OscConfig+0x288>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d1f0      	bne.n	80018d0 <HAL_RCC_OscConfig+0x110>
 80018ee:	e000      	b.n	80018f2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f003 0302 	and.w	r3, r3, #2
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	f000 80ca 	beq.w	8001a94 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001900:	4b51      	ldr	r3, [pc, #324]	@ (8001a48 <HAL_RCC_OscConfig+0x288>)
 8001902:	691b      	ldr	r3, [r3, #16]
 8001904:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001908:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800190a:	4b4f      	ldr	r3, [pc, #316]	@ (8001a48 <HAL_RCC_OscConfig+0x288>)
 800190c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800190e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001910:	6a3b      	ldr	r3, [r7, #32]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d007      	beq.n	8001926 <HAL_RCC_OscConfig+0x166>
 8001916:	6a3b      	ldr	r3, [r7, #32]
 8001918:	2b18      	cmp	r3, #24
 800191a:	d156      	bne.n	80019ca <HAL_RCC_OscConfig+0x20a>
 800191c:	69fb      	ldr	r3, [r7, #28]
 800191e:	f003 0303 	and.w	r3, r3, #3
 8001922:	2b00      	cmp	r3, #0
 8001924:	d151      	bne.n	80019ca <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001926:	4b48      	ldr	r3, [pc, #288]	@ (8001a48 <HAL_RCC_OscConfig+0x288>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f003 0304 	and.w	r3, r3, #4
 800192e:	2b00      	cmp	r3, #0
 8001930:	d005      	beq.n	800193e <HAL_RCC_OscConfig+0x17e>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	68db      	ldr	r3, [r3, #12]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d101      	bne.n	800193e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800193a:	2301      	movs	r3, #1
 800193c:	e392      	b.n	8002064 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800193e:	4b42      	ldr	r3, [pc, #264]	@ (8001a48 <HAL_RCC_OscConfig+0x288>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f023 0219 	bic.w	r2, r3, #25
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	68db      	ldr	r3, [r3, #12]
 800194a:	493f      	ldr	r1, [pc, #252]	@ (8001a48 <HAL_RCC_OscConfig+0x288>)
 800194c:	4313      	orrs	r3, r2
 800194e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001950:	f7ff fb38 	bl	8000fc4 <HAL_GetTick>
 8001954:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001956:	e008      	b.n	800196a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001958:	f7ff fb34 	bl	8000fc4 <HAL_GetTick>
 800195c:	4602      	mov	r2, r0
 800195e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001960:	1ad3      	subs	r3, r2, r3
 8001962:	2b02      	cmp	r3, #2
 8001964:	d901      	bls.n	800196a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001966:	2303      	movs	r3, #3
 8001968:	e37c      	b.n	8002064 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800196a:	4b37      	ldr	r3, [pc, #220]	@ (8001a48 <HAL_RCC_OscConfig+0x288>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f003 0304 	and.w	r3, r3, #4
 8001972:	2b00      	cmp	r3, #0
 8001974:	d0f0      	beq.n	8001958 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001976:	f7ff fb31 	bl	8000fdc <HAL_GetREVID>
 800197a:	4603      	mov	r3, r0
 800197c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001980:	4293      	cmp	r3, r2
 8001982:	d817      	bhi.n	80019b4 <HAL_RCC_OscConfig+0x1f4>
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	691b      	ldr	r3, [r3, #16]
 8001988:	2b40      	cmp	r3, #64	@ 0x40
 800198a:	d108      	bne.n	800199e <HAL_RCC_OscConfig+0x1de>
 800198c:	4b2e      	ldr	r3, [pc, #184]	@ (8001a48 <HAL_RCC_OscConfig+0x288>)
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001994:	4a2c      	ldr	r2, [pc, #176]	@ (8001a48 <HAL_RCC_OscConfig+0x288>)
 8001996:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800199a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800199c:	e07a      	b.n	8001a94 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800199e:	4b2a      	ldr	r3, [pc, #168]	@ (8001a48 <HAL_RCC_OscConfig+0x288>)
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	691b      	ldr	r3, [r3, #16]
 80019aa:	031b      	lsls	r3, r3, #12
 80019ac:	4926      	ldr	r1, [pc, #152]	@ (8001a48 <HAL_RCC_OscConfig+0x288>)
 80019ae:	4313      	orrs	r3, r2
 80019b0:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80019b2:	e06f      	b.n	8001a94 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019b4:	4b24      	ldr	r3, [pc, #144]	@ (8001a48 <HAL_RCC_OscConfig+0x288>)
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	691b      	ldr	r3, [r3, #16]
 80019c0:	061b      	lsls	r3, r3, #24
 80019c2:	4921      	ldr	r1, [pc, #132]	@ (8001a48 <HAL_RCC_OscConfig+0x288>)
 80019c4:	4313      	orrs	r3, r2
 80019c6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80019c8:	e064      	b.n	8001a94 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	68db      	ldr	r3, [r3, #12]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d047      	beq.n	8001a62 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80019d2:	4b1d      	ldr	r3, [pc, #116]	@ (8001a48 <HAL_RCC_OscConfig+0x288>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f023 0219 	bic.w	r2, r3, #25
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	68db      	ldr	r3, [r3, #12]
 80019de:	491a      	ldr	r1, [pc, #104]	@ (8001a48 <HAL_RCC_OscConfig+0x288>)
 80019e0:	4313      	orrs	r3, r2
 80019e2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019e4:	f7ff faee 	bl	8000fc4 <HAL_GetTick>
 80019e8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80019ea:	e008      	b.n	80019fe <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019ec:	f7ff faea 	bl	8000fc4 <HAL_GetTick>
 80019f0:	4602      	mov	r2, r0
 80019f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019f4:	1ad3      	subs	r3, r2, r3
 80019f6:	2b02      	cmp	r3, #2
 80019f8:	d901      	bls.n	80019fe <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80019fa:	2303      	movs	r3, #3
 80019fc:	e332      	b.n	8002064 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80019fe:	4b12      	ldr	r3, [pc, #72]	@ (8001a48 <HAL_RCC_OscConfig+0x288>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f003 0304 	and.w	r3, r3, #4
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d0f0      	beq.n	80019ec <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a0a:	f7ff fae7 	bl	8000fdc <HAL_GetREVID>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001a14:	4293      	cmp	r3, r2
 8001a16:	d819      	bhi.n	8001a4c <HAL_RCC_OscConfig+0x28c>
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	691b      	ldr	r3, [r3, #16]
 8001a1c:	2b40      	cmp	r3, #64	@ 0x40
 8001a1e:	d108      	bne.n	8001a32 <HAL_RCC_OscConfig+0x272>
 8001a20:	4b09      	ldr	r3, [pc, #36]	@ (8001a48 <HAL_RCC_OscConfig+0x288>)
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001a28:	4a07      	ldr	r2, [pc, #28]	@ (8001a48 <HAL_RCC_OscConfig+0x288>)
 8001a2a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a2e:	6053      	str	r3, [r2, #4]
 8001a30:	e030      	b.n	8001a94 <HAL_RCC_OscConfig+0x2d4>
 8001a32:	4b05      	ldr	r3, [pc, #20]	@ (8001a48 <HAL_RCC_OscConfig+0x288>)
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	691b      	ldr	r3, [r3, #16]
 8001a3e:	031b      	lsls	r3, r3, #12
 8001a40:	4901      	ldr	r1, [pc, #4]	@ (8001a48 <HAL_RCC_OscConfig+0x288>)
 8001a42:	4313      	orrs	r3, r2
 8001a44:	604b      	str	r3, [r1, #4]
 8001a46:	e025      	b.n	8001a94 <HAL_RCC_OscConfig+0x2d4>
 8001a48:	58024400 	.word	0x58024400
 8001a4c:	4b9a      	ldr	r3, [pc, #616]	@ (8001cb8 <HAL_RCC_OscConfig+0x4f8>)
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	691b      	ldr	r3, [r3, #16]
 8001a58:	061b      	lsls	r3, r3, #24
 8001a5a:	4997      	ldr	r1, [pc, #604]	@ (8001cb8 <HAL_RCC_OscConfig+0x4f8>)
 8001a5c:	4313      	orrs	r3, r2
 8001a5e:	604b      	str	r3, [r1, #4]
 8001a60:	e018      	b.n	8001a94 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a62:	4b95      	ldr	r3, [pc, #596]	@ (8001cb8 <HAL_RCC_OscConfig+0x4f8>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4a94      	ldr	r2, [pc, #592]	@ (8001cb8 <HAL_RCC_OscConfig+0x4f8>)
 8001a68:	f023 0301 	bic.w	r3, r3, #1
 8001a6c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a6e:	f7ff faa9 	bl	8000fc4 <HAL_GetTick>
 8001a72:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001a74:	e008      	b.n	8001a88 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a76:	f7ff faa5 	bl	8000fc4 <HAL_GetTick>
 8001a7a:	4602      	mov	r2, r0
 8001a7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a7e:	1ad3      	subs	r3, r2, r3
 8001a80:	2b02      	cmp	r3, #2
 8001a82:	d901      	bls.n	8001a88 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8001a84:	2303      	movs	r3, #3
 8001a86:	e2ed      	b.n	8002064 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001a88:	4b8b      	ldr	r3, [pc, #556]	@ (8001cb8 <HAL_RCC_OscConfig+0x4f8>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f003 0304 	and.w	r3, r3, #4
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d1f0      	bne.n	8001a76 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f003 0310 	and.w	r3, r3, #16
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	f000 80a9 	beq.w	8001bf4 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001aa2:	4b85      	ldr	r3, [pc, #532]	@ (8001cb8 <HAL_RCC_OscConfig+0x4f8>)
 8001aa4:	691b      	ldr	r3, [r3, #16]
 8001aa6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001aaa:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001aac:	4b82      	ldr	r3, [pc, #520]	@ (8001cb8 <HAL_RCC_OscConfig+0x4f8>)
 8001aae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ab0:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001ab2:	69bb      	ldr	r3, [r7, #24]
 8001ab4:	2b08      	cmp	r3, #8
 8001ab6:	d007      	beq.n	8001ac8 <HAL_RCC_OscConfig+0x308>
 8001ab8:	69bb      	ldr	r3, [r7, #24]
 8001aba:	2b18      	cmp	r3, #24
 8001abc:	d13a      	bne.n	8001b34 <HAL_RCC_OscConfig+0x374>
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	f003 0303 	and.w	r3, r3, #3
 8001ac4:	2b01      	cmp	r3, #1
 8001ac6:	d135      	bne.n	8001b34 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001ac8:	4b7b      	ldr	r3, [pc, #492]	@ (8001cb8 <HAL_RCC_OscConfig+0x4f8>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d005      	beq.n	8001ae0 <HAL_RCC_OscConfig+0x320>
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	69db      	ldr	r3, [r3, #28]
 8001ad8:	2b80      	cmp	r3, #128	@ 0x80
 8001ada:	d001      	beq.n	8001ae0 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8001adc:	2301      	movs	r3, #1
 8001ade:	e2c1      	b.n	8002064 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001ae0:	f7ff fa7c 	bl	8000fdc <HAL_GetREVID>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d817      	bhi.n	8001b1e <HAL_RCC_OscConfig+0x35e>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6a1b      	ldr	r3, [r3, #32]
 8001af2:	2b20      	cmp	r3, #32
 8001af4:	d108      	bne.n	8001b08 <HAL_RCC_OscConfig+0x348>
 8001af6:	4b70      	ldr	r3, [pc, #448]	@ (8001cb8 <HAL_RCC_OscConfig+0x4f8>)
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8001afe:	4a6e      	ldr	r2, [pc, #440]	@ (8001cb8 <HAL_RCC_OscConfig+0x4f8>)
 8001b00:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001b04:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001b06:	e075      	b.n	8001bf4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001b08:	4b6b      	ldr	r3, [pc, #428]	@ (8001cb8 <HAL_RCC_OscConfig+0x4f8>)
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6a1b      	ldr	r3, [r3, #32]
 8001b14:	069b      	lsls	r3, r3, #26
 8001b16:	4968      	ldr	r1, [pc, #416]	@ (8001cb8 <HAL_RCC_OscConfig+0x4f8>)
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001b1c:	e06a      	b.n	8001bf4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001b1e:	4b66      	ldr	r3, [pc, #408]	@ (8001cb8 <HAL_RCC_OscConfig+0x4f8>)
 8001b20:	68db      	ldr	r3, [r3, #12]
 8001b22:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6a1b      	ldr	r3, [r3, #32]
 8001b2a:	061b      	lsls	r3, r3, #24
 8001b2c:	4962      	ldr	r1, [pc, #392]	@ (8001cb8 <HAL_RCC_OscConfig+0x4f8>)
 8001b2e:	4313      	orrs	r3, r2
 8001b30:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001b32:	e05f      	b.n	8001bf4 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	69db      	ldr	r3, [r3, #28]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d042      	beq.n	8001bc2 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001b3c:	4b5e      	ldr	r3, [pc, #376]	@ (8001cb8 <HAL_RCC_OscConfig+0x4f8>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a5d      	ldr	r2, [pc, #372]	@ (8001cb8 <HAL_RCC_OscConfig+0x4f8>)
 8001b42:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001b46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b48:	f7ff fa3c 	bl	8000fc4 <HAL_GetTick>
 8001b4c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001b4e:	e008      	b.n	8001b62 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001b50:	f7ff fa38 	bl	8000fc4 <HAL_GetTick>
 8001b54:	4602      	mov	r2, r0
 8001b56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b58:	1ad3      	subs	r3, r2, r3
 8001b5a:	2b02      	cmp	r3, #2
 8001b5c:	d901      	bls.n	8001b62 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8001b5e:	2303      	movs	r3, #3
 8001b60:	e280      	b.n	8002064 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001b62:	4b55      	ldr	r3, [pc, #340]	@ (8001cb8 <HAL_RCC_OscConfig+0x4f8>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d0f0      	beq.n	8001b50 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001b6e:	f7ff fa35 	bl	8000fdc <HAL_GetREVID>
 8001b72:	4603      	mov	r3, r0
 8001b74:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d817      	bhi.n	8001bac <HAL_RCC_OscConfig+0x3ec>
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6a1b      	ldr	r3, [r3, #32]
 8001b80:	2b20      	cmp	r3, #32
 8001b82:	d108      	bne.n	8001b96 <HAL_RCC_OscConfig+0x3d6>
 8001b84:	4b4c      	ldr	r3, [pc, #304]	@ (8001cb8 <HAL_RCC_OscConfig+0x4f8>)
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8001b8c:	4a4a      	ldr	r2, [pc, #296]	@ (8001cb8 <HAL_RCC_OscConfig+0x4f8>)
 8001b8e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001b92:	6053      	str	r3, [r2, #4]
 8001b94:	e02e      	b.n	8001bf4 <HAL_RCC_OscConfig+0x434>
 8001b96:	4b48      	ldr	r3, [pc, #288]	@ (8001cb8 <HAL_RCC_OscConfig+0x4f8>)
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6a1b      	ldr	r3, [r3, #32]
 8001ba2:	069b      	lsls	r3, r3, #26
 8001ba4:	4944      	ldr	r1, [pc, #272]	@ (8001cb8 <HAL_RCC_OscConfig+0x4f8>)
 8001ba6:	4313      	orrs	r3, r2
 8001ba8:	604b      	str	r3, [r1, #4]
 8001baa:	e023      	b.n	8001bf4 <HAL_RCC_OscConfig+0x434>
 8001bac:	4b42      	ldr	r3, [pc, #264]	@ (8001cb8 <HAL_RCC_OscConfig+0x4f8>)
 8001bae:	68db      	ldr	r3, [r3, #12]
 8001bb0:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6a1b      	ldr	r3, [r3, #32]
 8001bb8:	061b      	lsls	r3, r3, #24
 8001bba:	493f      	ldr	r1, [pc, #252]	@ (8001cb8 <HAL_RCC_OscConfig+0x4f8>)
 8001bbc:	4313      	orrs	r3, r2
 8001bbe:	60cb      	str	r3, [r1, #12]
 8001bc0:	e018      	b.n	8001bf4 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001bc2:	4b3d      	ldr	r3, [pc, #244]	@ (8001cb8 <HAL_RCC_OscConfig+0x4f8>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4a3c      	ldr	r2, [pc, #240]	@ (8001cb8 <HAL_RCC_OscConfig+0x4f8>)
 8001bc8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001bcc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bce:	f7ff f9f9 	bl	8000fc4 <HAL_GetTick>
 8001bd2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001bd4:	e008      	b.n	8001be8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001bd6:	f7ff f9f5 	bl	8000fc4 <HAL_GetTick>
 8001bda:	4602      	mov	r2, r0
 8001bdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bde:	1ad3      	subs	r3, r2, r3
 8001be0:	2b02      	cmp	r3, #2
 8001be2:	d901      	bls.n	8001be8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001be4:	2303      	movs	r3, #3
 8001be6:	e23d      	b.n	8002064 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001be8:	4b33      	ldr	r3, [pc, #204]	@ (8001cb8 <HAL_RCC_OscConfig+0x4f8>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d1f0      	bne.n	8001bd6 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f003 0308 	and.w	r3, r3, #8
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d036      	beq.n	8001c6e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	695b      	ldr	r3, [r3, #20]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d019      	beq.n	8001c3c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c08:	4b2b      	ldr	r3, [pc, #172]	@ (8001cb8 <HAL_RCC_OscConfig+0x4f8>)
 8001c0a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001c0c:	4a2a      	ldr	r2, [pc, #168]	@ (8001cb8 <HAL_RCC_OscConfig+0x4f8>)
 8001c0e:	f043 0301 	orr.w	r3, r3, #1
 8001c12:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c14:	f7ff f9d6 	bl	8000fc4 <HAL_GetTick>
 8001c18:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001c1a:	e008      	b.n	8001c2e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c1c:	f7ff f9d2 	bl	8000fc4 <HAL_GetTick>
 8001c20:	4602      	mov	r2, r0
 8001c22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c24:	1ad3      	subs	r3, r2, r3
 8001c26:	2b02      	cmp	r3, #2
 8001c28:	d901      	bls.n	8001c2e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8001c2a:	2303      	movs	r3, #3
 8001c2c:	e21a      	b.n	8002064 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001c2e:	4b22      	ldr	r3, [pc, #136]	@ (8001cb8 <HAL_RCC_OscConfig+0x4f8>)
 8001c30:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001c32:	f003 0302 	and.w	r3, r3, #2
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d0f0      	beq.n	8001c1c <HAL_RCC_OscConfig+0x45c>
 8001c3a:	e018      	b.n	8001c6e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c3c:	4b1e      	ldr	r3, [pc, #120]	@ (8001cb8 <HAL_RCC_OscConfig+0x4f8>)
 8001c3e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001c40:	4a1d      	ldr	r2, [pc, #116]	@ (8001cb8 <HAL_RCC_OscConfig+0x4f8>)
 8001c42:	f023 0301 	bic.w	r3, r3, #1
 8001c46:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c48:	f7ff f9bc 	bl	8000fc4 <HAL_GetTick>
 8001c4c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001c4e:	e008      	b.n	8001c62 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c50:	f7ff f9b8 	bl	8000fc4 <HAL_GetTick>
 8001c54:	4602      	mov	r2, r0
 8001c56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c58:	1ad3      	subs	r3, r2, r3
 8001c5a:	2b02      	cmp	r3, #2
 8001c5c:	d901      	bls.n	8001c62 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8001c5e:	2303      	movs	r3, #3
 8001c60:	e200      	b.n	8002064 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001c62:	4b15      	ldr	r3, [pc, #84]	@ (8001cb8 <HAL_RCC_OscConfig+0x4f8>)
 8001c64:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001c66:	f003 0302 	and.w	r3, r3, #2
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d1f0      	bne.n	8001c50 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f003 0320 	and.w	r3, r3, #32
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d039      	beq.n	8001cee <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	699b      	ldr	r3, [r3, #24]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d01c      	beq.n	8001cbc <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001c82:	4b0d      	ldr	r3, [pc, #52]	@ (8001cb8 <HAL_RCC_OscConfig+0x4f8>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4a0c      	ldr	r2, [pc, #48]	@ (8001cb8 <HAL_RCC_OscConfig+0x4f8>)
 8001c88:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001c8c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001c8e:	f7ff f999 	bl	8000fc4 <HAL_GetTick>
 8001c92:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001c94:	e008      	b.n	8001ca8 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c96:	f7ff f995 	bl	8000fc4 <HAL_GetTick>
 8001c9a:	4602      	mov	r2, r0
 8001c9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c9e:	1ad3      	subs	r3, r2, r3
 8001ca0:	2b02      	cmp	r3, #2
 8001ca2:	d901      	bls.n	8001ca8 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001ca4:	2303      	movs	r3, #3
 8001ca6:	e1dd      	b.n	8002064 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001ca8:	4b03      	ldr	r3, [pc, #12]	@ (8001cb8 <HAL_RCC_OscConfig+0x4f8>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d0f0      	beq.n	8001c96 <HAL_RCC_OscConfig+0x4d6>
 8001cb4:	e01b      	b.n	8001cee <HAL_RCC_OscConfig+0x52e>
 8001cb6:	bf00      	nop
 8001cb8:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001cbc:	4b9b      	ldr	r3, [pc, #620]	@ (8001f2c <HAL_RCC_OscConfig+0x76c>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a9a      	ldr	r2, [pc, #616]	@ (8001f2c <HAL_RCC_OscConfig+0x76c>)
 8001cc2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001cc6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001cc8:	f7ff f97c 	bl	8000fc4 <HAL_GetTick>
 8001ccc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001cce:	e008      	b.n	8001ce2 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001cd0:	f7ff f978 	bl	8000fc4 <HAL_GetTick>
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cd8:	1ad3      	subs	r3, r2, r3
 8001cda:	2b02      	cmp	r3, #2
 8001cdc:	d901      	bls.n	8001ce2 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8001cde:	2303      	movs	r3, #3
 8001ce0:	e1c0      	b.n	8002064 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001ce2:	4b92      	ldr	r3, [pc, #584]	@ (8001f2c <HAL_RCC_OscConfig+0x76c>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d1f0      	bne.n	8001cd0 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f003 0304 	and.w	r3, r3, #4
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	f000 8081 	beq.w	8001dfe <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001cfc:	4b8c      	ldr	r3, [pc, #560]	@ (8001f30 <HAL_RCC_OscConfig+0x770>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a8b      	ldr	r2, [pc, #556]	@ (8001f30 <HAL_RCC_OscConfig+0x770>)
 8001d02:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d06:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001d08:	f7ff f95c 	bl	8000fc4 <HAL_GetTick>
 8001d0c:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001d0e:	e008      	b.n	8001d22 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d10:	f7ff f958 	bl	8000fc4 <HAL_GetTick>
 8001d14:	4602      	mov	r2, r0
 8001d16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d18:	1ad3      	subs	r3, r2, r3
 8001d1a:	2b64      	cmp	r3, #100	@ 0x64
 8001d1c:	d901      	bls.n	8001d22 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8001d1e:	2303      	movs	r3, #3
 8001d20:	e1a0      	b.n	8002064 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001d22:	4b83      	ldr	r3, [pc, #524]	@ (8001f30 <HAL_RCC_OscConfig+0x770>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d0f0      	beq.n	8001d10 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	689b      	ldr	r3, [r3, #8]
 8001d32:	2b01      	cmp	r3, #1
 8001d34:	d106      	bne.n	8001d44 <HAL_RCC_OscConfig+0x584>
 8001d36:	4b7d      	ldr	r3, [pc, #500]	@ (8001f2c <HAL_RCC_OscConfig+0x76c>)
 8001d38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d3a:	4a7c      	ldr	r2, [pc, #496]	@ (8001f2c <HAL_RCC_OscConfig+0x76c>)
 8001d3c:	f043 0301 	orr.w	r3, r3, #1
 8001d40:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d42:	e02d      	b.n	8001da0 <HAL_RCC_OscConfig+0x5e0>
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	689b      	ldr	r3, [r3, #8]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d10c      	bne.n	8001d66 <HAL_RCC_OscConfig+0x5a6>
 8001d4c:	4b77      	ldr	r3, [pc, #476]	@ (8001f2c <HAL_RCC_OscConfig+0x76c>)
 8001d4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d50:	4a76      	ldr	r2, [pc, #472]	@ (8001f2c <HAL_RCC_OscConfig+0x76c>)
 8001d52:	f023 0301 	bic.w	r3, r3, #1
 8001d56:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d58:	4b74      	ldr	r3, [pc, #464]	@ (8001f2c <HAL_RCC_OscConfig+0x76c>)
 8001d5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d5c:	4a73      	ldr	r2, [pc, #460]	@ (8001f2c <HAL_RCC_OscConfig+0x76c>)
 8001d5e:	f023 0304 	bic.w	r3, r3, #4
 8001d62:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d64:	e01c      	b.n	8001da0 <HAL_RCC_OscConfig+0x5e0>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	689b      	ldr	r3, [r3, #8]
 8001d6a:	2b05      	cmp	r3, #5
 8001d6c:	d10c      	bne.n	8001d88 <HAL_RCC_OscConfig+0x5c8>
 8001d6e:	4b6f      	ldr	r3, [pc, #444]	@ (8001f2c <HAL_RCC_OscConfig+0x76c>)
 8001d70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d72:	4a6e      	ldr	r2, [pc, #440]	@ (8001f2c <HAL_RCC_OscConfig+0x76c>)
 8001d74:	f043 0304 	orr.w	r3, r3, #4
 8001d78:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d7a:	4b6c      	ldr	r3, [pc, #432]	@ (8001f2c <HAL_RCC_OscConfig+0x76c>)
 8001d7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d7e:	4a6b      	ldr	r2, [pc, #428]	@ (8001f2c <HAL_RCC_OscConfig+0x76c>)
 8001d80:	f043 0301 	orr.w	r3, r3, #1
 8001d84:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d86:	e00b      	b.n	8001da0 <HAL_RCC_OscConfig+0x5e0>
 8001d88:	4b68      	ldr	r3, [pc, #416]	@ (8001f2c <HAL_RCC_OscConfig+0x76c>)
 8001d8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d8c:	4a67      	ldr	r2, [pc, #412]	@ (8001f2c <HAL_RCC_OscConfig+0x76c>)
 8001d8e:	f023 0301 	bic.w	r3, r3, #1
 8001d92:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d94:	4b65      	ldr	r3, [pc, #404]	@ (8001f2c <HAL_RCC_OscConfig+0x76c>)
 8001d96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d98:	4a64      	ldr	r2, [pc, #400]	@ (8001f2c <HAL_RCC_OscConfig+0x76c>)
 8001d9a:	f023 0304 	bic.w	r3, r3, #4
 8001d9e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	689b      	ldr	r3, [r3, #8]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d015      	beq.n	8001dd4 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001da8:	f7ff f90c 	bl	8000fc4 <HAL_GetTick>
 8001dac:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001dae:	e00a      	b.n	8001dc6 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001db0:	f7ff f908 	bl	8000fc4 <HAL_GetTick>
 8001db4:	4602      	mov	r2, r0
 8001db6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001db8:	1ad3      	subs	r3, r2, r3
 8001dba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d901      	bls.n	8001dc6 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8001dc2:	2303      	movs	r3, #3
 8001dc4:	e14e      	b.n	8002064 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001dc6:	4b59      	ldr	r3, [pc, #356]	@ (8001f2c <HAL_RCC_OscConfig+0x76c>)
 8001dc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001dca:	f003 0302 	and.w	r3, r3, #2
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d0ee      	beq.n	8001db0 <HAL_RCC_OscConfig+0x5f0>
 8001dd2:	e014      	b.n	8001dfe <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dd4:	f7ff f8f6 	bl	8000fc4 <HAL_GetTick>
 8001dd8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001dda:	e00a      	b.n	8001df2 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ddc:	f7ff f8f2 	bl	8000fc4 <HAL_GetTick>
 8001de0:	4602      	mov	r2, r0
 8001de2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001de4:	1ad3      	subs	r3, r2, r3
 8001de6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d901      	bls.n	8001df2 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8001dee:	2303      	movs	r3, #3
 8001df0:	e138      	b.n	8002064 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001df2:	4b4e      	ldr	r3, [pc, #312]	@ (8001f2c <HAL_RCC_OscConfig+0x76c>)
 8001df4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001df6:	f003 0302 	and.w	r3, r3, #2
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d1ee      	bne.n	8001ddc <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	f000 812d 	beq.w	8002062 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001e08:	4b48      	ldr	r3, [pc, #288]	@ (8001f2c <HAL_RCC_OscConfig+0x76c>)
 8001e0a:	691b      	ldr	r3, [r3, #16]
 8001e0c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001e10:	2b18      	cmp	r3, #24
 8001e12:	f000 80bd 	beq.w	8001f90 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e1a:	2b02      	cmp	r3, #2
 8001e1c:	f040 809e 	bne.w	8001f5c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e20:	4b42      	ldr	r3, [pc, #264]	@ (8001f2c <HAL_RCC_OscConfig+0x76c>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a41      	ldr	r2, [pc, #260]	@ (8001f2c <HAL_RCC_OscConfig+0x76c>)
 8001e26:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001e2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e2c:	f7ff f8ca 	bl	8000fc4 <HAL_GetTick>
 8001e30:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001e32:	e008      	b.n	8001e46 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e34:	f7ff f8c6 	bl	8000fc4 <HAL_GetTick>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e3c:	1ad3      	subs	r3, r2, r3
 8001e3e:	2b02      	cmp	r3, #2
 8001e40:	d901      	bls.n	8001e46 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8001e42:	2303      	movs	r3, #3
 8001e44:	e10e      	b.n	8002064 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001e46:	4b39      	ldr	r3, [pc, #228]	@ (8001f2c <HAL_RCC_OscConfig+0x76c>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d1f0      	bne.n	8001e34 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e52:	4b36      	ldr	r3, [pc, #216]	@ (8001f2c <HAL_RCC_OscConfig+0x76c>)
 8001e54:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001e56:	4b37      	ldr	r3, [pc, #220]	@ (8001f34 <HAL_RCC_OscConfig+0x774>)
 8001e58:	4013      	ands	r3, r2
 8001e5a:	687a      	ldr	r2, [r7, #4]
 8001e5c:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8001e5e:	687a      	ldr	r2, [r7, #4]
 8001e60:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001e62:	0112      	lsls	r2, r2, #4
 8001e64:	430a      	orrs	r2, r1
 8001e66:	4931      	ldr	r1, [pc, #196]	@ (8001f2c <HAL_RCC_OscConfig+0x76c>)
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	628b      	str	r3, [r1, #40]	@ 0x28
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e70:	3b01      	subs	r3, #1
 8001e72:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e7a:	3b01      	subs	r3, #1
 8001e7c:	025b      	lsls	r3, r3, #9
 8001e7e:	b29b      	uxth	r3, r3
 8001e80:	431a      	orrs	r2, r3
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e86:	3b01      	subs	r3, #1
 8001e88:	041b      	lsls	r3, r3, #16
 8001e8a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8001e8e:	431a      	orrs	r2, r3
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e94:	3b01      	subs	r3, #1
 8001e96:	061b      	lsls	r3, r3, #24
 8001e98:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8001e9c:	4923      	ldr	r1, [pc, #140]	@ (8001f2c <HAL_RCC_OscConfig+0x76c>)
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8001ea2:	4b22      	ldr	r3, [pc, #136]	@ (8001f2c <HAL_RCC_OscConfig+0x76c>)
 8001ea4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ea6:	4a21      	ldr	r2, [pc, #132]	@ (8001f2c <HAL_RCC_OscConfig+0x76c>)
 8001ea8:	f023 0301 	bic.w	r3, r3, #1
 8001eac:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001eae:	4b1f      	ldr	r3, [pc, #124]	@ (8001f2c <HAL_RCC_OscConfig+0x76c>)
 8001eb0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001eb2:	4b21      	ldr	r3, [pc, #132]	@ (8001f38 <HAL_RCC_OscConfig+0x778>)
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	687a      	ldr	r2, [r7, #4]
 8001eb8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001eba:	00d2      	lsls	r2, r2, #3
 8001ebc:	491b      	ldr	r1, [pc, #108]	@ (8001f2c <HAL_RCC_OscConfig+0x76c>)
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001ec2:	4b1a      	ldr	r3, [pc, #104]	@ (8001f2c <HAL_RCC_OscConfig+0x76c>)
 8001ec4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ec6:	f023 020c 	bic.w	r2, r3, #12
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ece:	4917      	ldr	r1, [pc, #92]	@ (8001f2c <HAL_RCC_OscConfig+0x76c>)
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001ed4:	4b15      	ldr	r3, [pc, #84]	@ (8001f2c <HAL_RCC_OscConfig+0x76c>)
 8001ed6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ed8:	f023 0202 	bic.w	r2, r3, #2
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ee0:	4912      	ldr	r1, [pc, #72]	@ (8001f2c <HAL_RCC_OscConfig+0x76c>)
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001ee6:	4b11      	ldr	r3, [pc, #68]	@ (8001f2c <HAL_RCC_OscConfig+0x76c>)
 8001ee8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001eea:	4a10      	ldr	r2, [pc, #64]	@ (8001f2c <HAL_RCC_OscConfig+0x76c>)
 8001eec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ef0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001ef2:	4b0e      	ldr	r3, [pc, #56]	@ (8001f2c <HAL_RCC_OscConfig+0x76c>)
 8001ef4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ef6:	4a0d      	ldr	r2, [pc, #52]	@ (8001f2c <HAL_RCC_OscConfig+0x76c>)
 8001ef8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001efc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001efe:	4b0b      	ldr	r3, [pc, #44]	@ (8001f2c <HAL_RCC_OscConfig+0x76c>)
 8001f00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f02:	4a0a      	ldr	r2, [pc, #40]	@ (8001f2c <HAL_RCC_OscConfig+0x76c>)
 8001f04:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001f08:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8001f0a:	4b08      	ldr	r3, [pc, #32]	@ (8001f2c <HAL_RCC_OscConfig+0x76c>)
 8001f0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f0e:	4a07      	ldr	r2, [pc, #28]	@ (8001f2c <HAL_RCC_OscConfig+0x76c>)
 8001f10:	f043 0301 	orr.w	r3, r3, #1
 8001f14:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f16:	4b05      	ldr	r3, [pc, #20]	@ (8001f2c <HAL_RCC_OscConfig+0x76c>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4a04      	ldr	r2, [pc, #16]	@ (8001f2c <HAL_RCC_OscConfig+0x76c>)
 8001f1c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001f20:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f22:	f7ff f84f 	bl	8000fc4 <HAL_GetTick>
 8001f26:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001f28:	e011      	b.n	8001f4e <HAL_RCC_OscConfig+0x78e>
 8001f2a:	bf00      	nop
 8001f2c:	58024400 	.word	0x58024400
 8001f30:	58024800 	.word	0x58024800
 8001f34:	fffffc0c 	.word	0xfffffc0c
 8001f38:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f3c:	f7ff f842 	bl	8000fc4 <HAL_GetTick>
 8001f40:	4602      	mov	r2, r0
 8001f42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f44:	1ad3      	subs	r3, r2, r3
 8001f46:	2b02      	cmp	r3, #2
 8001f48:	d901      	bls.n	8001f4e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8001f4a:	2303      	movs	r3, #3
 8001f4c:	e08a      	b.n	8002064 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001f4e:	4b47      	ldr	r3, [pc, #284]	@ (800206c <HAL_RCC_OscConfig+0x8ac>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d0f0      	beq.n	8001f3c <HAL_RCC_OscConfig+0x77c>
 8001f5a:	e082      	b.n	8002062 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f5c:	4b43      	ldr	r3, [pc, #268]	@ (800206c <HAL_RCC_OscConfig+0x8ac>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a42      	ldr	r2, [pc, #264]	@ (800206c <HAL_RCC_OscConfig+0x8ac>)
 8001f62:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001f66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f68:	f7ff f82c 	bl	8000fc4 <HAL_GetTick>
 8001f6c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001f6e:	e008      	b.n	8001f82 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f70:	f7ff f828 	bl	8000fc4 <HAL_GetTick>
 8001f74:	4602      	mov	r2, r0
 8001f76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f78:	1ad3      	subs	r3, r2, r3
 8001f7a:	2b02      	cmp	r3, #2
 8001f7c:	d901      	bls.n	8001f82 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8001f7e:	2303      	movs	r3, #3
 8001f80:	e070      	b.n	8002064 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001f82:	4b3a      	ldr	r3, [pc, #232]	@ (800206c <HAL_RCC_OscConfig+0x8ac>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d1f0      	bne.n	8001f70 <HAL_RCC_OscConfig+0x7b0>
 8001f8e:	e068      	b.n	8002062 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001f90:	4b36      	ldr	r3, [pc, #216]	@ (800206c <HAL_RCC_OscConfig+0x8ac>)
 8001f92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f94:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001f96:	4b35      	ldr	r3, [pc, #212]	@ (800206c <HAL_RCC_OscConfig+0x8ac>)
 8001f98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f9a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fa0:	2b01      	cmp	r3, #1
 8001fa2:	d031      	beq.n	8002008 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	f003 0203 	and.w	r2, r3, #3
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001fae:	429a      	cmp	r2, r3
 8001fb0:	d12a      	bne.n	8002008 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001fb2:	693b      	ldr	r3, [r7, #16]
 8001fb4:	091b      	lsrs	r3, r3, #4
 8001fb6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fbe:	429a      	cmp	r2, r3
 8001fc0:	d122      	bne.n	8002008 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fcc:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001fce:	429a      	cmp	r2, r3
 8001fd0:	d11a      	bne.n	8002008 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	0a5b      	lsrs	r3, r3, #9
 8001fd6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001fde:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001fe0:	429a      	cmp	r2, r3
 8001fe2:	d111      	bne.n	8002008 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	0c1b      	lsrs	r3, r3, #16
 8001fe8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ff0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001ff2:	429a      	cmp	r2, r3
 8001ff4:	d108      	bne.n	8002008 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	0e1b      	lsrs	r3, r3, #24
 8001ffa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002002:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002004:	429a      	cmp	r2, r3
 8002006:	d001      	beq.n	800200c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002008:	2301      	movs	r3, #1
 800200a:	e02b      	b.n	8002064 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800200c:	4b17      	ldr	r3, [pc, #92]	@ (800206c <HAL_RCC_OscConfig+0x8ac>)
 800200e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002010:	08db      	lsrs	r3, r3, #3
 8002012:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002016:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800201c:	693a      	ldr	r2, [r7, #16]
 800201e:	429a      	cmp	r2, r3
 8002020:	d01f      	beq.n	8002062 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002022:	4b12      	ldr	r3, [pc, #72]	@ (800206c <HAL_RCC_OscConfig+0x8ac>)
 8002024:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002026:	4a11      	ldr	r2, [pc, #68]	@ (800206c <HAL_RCC_OscConfig+0x8ac>)
 8002028:	f023 0301 	bic.w	r3, r3, #1
 800202c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800202e:	f7fe ffc9 	bl	8000fc4 <HAL_GetTick>
 8002032:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002034:	bf00      	nop
 8002036:	f7fe ffc5 	bl	8000fc4 <HAL_GetTick>
 800203a:	4602      	mov	r2, r0
 800203c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800203e:	4293      	cmp	r3, r2
 8002040:	d0f9      	beq.n	8002036 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002042:	4b0a      	ldr	r3, [pc, #40]	@ (800206c <HAL_RCC_OscConfig+0x8ac>)
 8002044:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002046:	4b0a      	ldr	r3, [pc, #40]	@ (8002070 <HAL_RCC_OscConfig+0x8b0>)
 8002048:	4013      	ands	r3, r2
 800204a:	687a      	ldr	r2, [r7, #4]
 800204c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800204e:	00d2      	lsls	r2, r2, #3
 8002050:	4906      	ldr	r1, [pc, #24]	@ (800206c <HAL_RCC_OscConfig+0x8ac>)
 8002052:	4313      	orrs	r3, r2
 8002054:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002056:	4b05      	ldr	r3, [pc, #20]	@ (800206c <HAL_RCC_OscConfig+0x8ac>)
 8002058:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800205a:	4a04      	ldr	r2, [pc, #16]	@ (800206c <HAL_RCC_OscConfig+0x8ac>)
 800205c:	f043 0301 	orr.w	r3, r3, #1
 8002060:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002062:	2300      	movs	r3, #0
}
 8002064:	4618      	mov	r0, r3
 8002066:	3730      	adds	r7, #48	@ 0x30
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}
 800206c:	58024400 	.word	0x58024400
 8002070:	ffff0007 	.word	0xffff0007

08002074 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b086      	sub	sp, #24
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
 800207c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d101      	bne.n	8002088 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002084:	2301      	movs	r3, #1
 8002086:	e19c      	b.n	80023c2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002088:	4b8a      	ldr	r3, [pc, #552]	@ (80022b4 <HAL_RCC_ClockConfig+0x240>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f003 030f 	and.w	r3, r3, #15
 8002090:	683a      	ldr	r2, [r7, #0]
 8002092:	429a      	cmp	r2, r3
 8002094:	d910      	bls.n	80020b8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002096:	4b87      	ldr	r3, [pc, #540]	@ (80022b4 <HAL_RCC_ClockConfig+0x240>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f023 020f 	bic.w	r2, r3, #15
 800209e:	4985      	ldr	r1, [pc, #532]	@ (80022b4 <HAL_RCC_ClockConfig+0x240>)
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	4313      	orrs	r3, r2
 80020a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020a6:	4b83      	ldr	r3, [pc, #524]	@ (80022b4 <HAL_RCC_ClockConfig+0x240>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f003 030f 	and.w	r3, r3, #15
 80020ae:	683a      	ldr	r2, [r7, #0]
 80020b0:	429a      	cmp	r2, r3
 80020b2:	d001      	beq.n	80020b8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80020b4:	2301      	movs	r3, #1
 80020b6:	e184      	b.n	80023c2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f003 0304 	and.w	r3, r3, #4
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d010      	beq.n	80020e6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	691a      	ldr	r2, [r3, #16]
 80020c8:	4b7b      	ldr	r3, [pc, #492]	@ (80022b8 <HAL_RCC_ClockConfig+0x244>)
 80020ca:	699b      	ldr	r3, [r3, #24]
 80020cc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80020d0:	429a      	cmp	r2, r3
 80020d2:	d908      	bls.n	80020e6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80020d4:	4b78      	ldr	r3, [pc, #480]	@ (80022b8 <HAL_RCC_ClockConfig+0x244>)
 80020d6:	699b      	ldr	r3, [r3, #24]
 80020d8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	691b      	ldr	r3, [r3, #16]
 80020e0:	4975      	ldr	r1, [pc, #468]	@ (80022b8 <HAL_RCC_ClockConfig+0x244>)
 80020e2:	4313      	orrs	r3, r2
 80020e4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f003 0308 	and.w	r3, r3, #8
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d010      	beq.n	8002114 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	695a      	ldr	r2, [r3, #20]
 80020f6:	4b70      	ldr	r3, [pc, #448]	@ (80022b8 <HAL_RCC_ClockConfig+0x244>)
 80020f8:	69db      	ldr	r3, [r3, #28]
 80020fa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80020fe:	429a      	cmp	r2, r3
 8002100:	d908      	bls.n	8002114 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002102:	4b6d      	ldr	r3, [pc, #436]	@ (80022b8 <HAL_RCC_ClockConfig+0x244>)
 8002104:	69db      	ldr	r3, [r3, #28]
 8002106:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	695b      	ldr	r3, [r3, #20]
 800210e:	496a      	ldr	r1, [pc, #424]	@ (80022b8 <HAL_RCC_ClockConfig+0x244>)
 8002110:	4313      	orrs	r3, r2
 8002112:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f003 0310 	and.w	r3, r3, #16
 800211c:	2b00      	cmp	r3, #0
 800211e:	d010      	beq.n	8002142 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	699a      	ldr	r2, [r3, #24]
 8002124:	4b64      	ldr	r3, [pc, #400]	@ (80022b8 <HAL_RCC_ClockConfig+0x244>)
 8002126:	69db      	ldr	r3, [r3, #28]
 8002128:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800212c:	429a      	cmp	r2, r3
 800212e:	d908      	bls.n	8002142 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002130:	4b61      	ldr	r3, [pc, #388]	@ (80022b8 <HAL_RCC_ClockConfig+0x244>)
 8002132:	69db      	ldr	r3, [r3, #28]
 8002134:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	699b      	ldr	r3, [r3, #24]
 800213c:	495e      	ldr	r1, [pc, #376]	@ (80022b8 <HAL_RCC_ClockConfig+0x244>)
 800213e:	4313      	orrs	r3, r2
 8002140:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f003 0320 	and.w	r3, r3, #32
 800214a:	2b00      	cmp	r3, #0
 800214c:	d010      	beq.n	8002170 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	69da      	ldr	r2, [r3, #28]
 8002152:	4b59      	ldr	r3, [pc, #356]	@ (80022b8 <HAL_RCC_ClockConfig+0x244>)
 8002154:	6a1b      	ldr	r3, [r3, #32]
 8002156:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800215a:	429a      	cmp	r2, r3
 800215c:	d908      	bls.n	8002170 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800215e:	4b56      	ldr	r3, [pc, #344]	@ (80022b8 <HAL_RCC_ClockConfig+0x244>)
 8002160:	6a1b      	ldr	r3, [r3, #32]
 8002162:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	69db      	ldr	r3, [r3, #28]
 800216a:	4953      	ldr	r1, [pc, #332]	@ (80022b8 <HAL_RCC_ClockConfig+0x244>)
 800216c:	4313      	orrs	r3, r2
 800216e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f003 0302 	and.w	r3, r3, #2
 8002178:	2b00      	cmp	r3, #0
 800217a:	d010      	beq.n	800219e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	68da      	ldr	r2, [r3, #12]
 8002180:	4b4d      	ldr	r3, [pc, #308]	@ (80022b8 <HAL_RCC_ClockConfig+0x244>)
 8002182:	699b      	ldr	r3, [r3, #24]
 8002184:	f003 030f 	and.w	r3, r3, #15
 8002188:	429a      	cmp	r2, r3
 800218a:	d908      	bls.n	800219e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800218c:	4b4a      	ldr	r3, [pc, #296]	@ (80022b8 <HAL_RCC_ClockConfig+0x244>)
 800218e:	699b      	ldr	r3, [r3, #24]
 8002190:	f023 020f 	bic.w	r2, r3, #15
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	68db      	ldr	r3, [r3, #12]
 8002198:	4947      	ldr	r1, [pc, #284]	@ (80022b8 <HAL_RCC_ClockConfig+0x244>)
 800219a:	4313      	orrs	r3, r2
 800219c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 0301 	and.w	r3, r3, #1
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d055      	beq.n	8002256 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80021aa:	4b43      	ldr	r3, [pc, #268]	@ (80022b8 <HAL_RCC_ClockConfig+0x244>)
 80021ac:	699b      	ldr	r3, [r3, #24]
 80021ae:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	689b      	ldr	r3, [r3, #8]
 80021b6:	4940      	ldr	r1, [pc, #256]	@ (80022b8 <HAL_RCC_ClockConfig+0x244>)
 80021b8:	4313      	orrs	r3, r2
 80021ba:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	2b02      	cmp	r3, #2
 80021c2:	d107      	bne.n	80021d4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80021c4:	4b3c      	ldr	r3, [pc, #240]	@ (80022b8 <HAL_RCC_ClockConfig+0x244>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d121      	bne.n	8002214 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80021d0:	2301      	movs	r3, #1
 80021d2:	e0f6      	b.n	80023c2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	2b03      	cmp	r3, #3
 80021da:	d107      	bne.n	80021ec <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80021dc:	4b36      	ldr	r3, [pc, #216]	@ (80022b8 <HAL_RCC_ClockConfig+0x244>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d115      	bne.n	8002214 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80021e8:	2301      	movs	r3, #1
 80021ea:	e0ea      	b.n	80023c2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	2b01      	cmp	r3, #1
 80021f2:	d107      	bne.n	8002204 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80021f4:	4b30      	ldr	r3, [pc, #192]	@ (80022b8 <HAL_RCC_ClockConfig+0x244>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d109      	bne.n	8002214 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002200:	2301      	movs	r3, #1
 8002202:	e0de      	b.n	80023c2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002204:	4b2c      	ldr	r3, [pc, #176]	@ (80022b8 <HAL_RCC_ClockConfig+0x244>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f003 0304 	and.w	r3, r3, #4
 800220c:	2b00      	cmp	r3, #0
 800220e:	d101      	bne.n	8002214 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002210:	2301      	movs	r3, #1
 8002212:	e0d6      	b.n	80023c2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002214:	4b28      	ldr	r3, [pc, #160]	@ (80022b8 <HAL_RCC_ClockConfig+0x244>)
 8002216:	691b      	ldr	r3, [r3, #16]
 8002218:	f023 0207 	bic.w	r2, r3, #7
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	4925      	ldr	r1, [pc, #148]	@ (80022b8 <HAL_RCC_ClockConfig+0x244>)
 8002222:	4313      	orrs	r3, r2
 8002224:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002226:	f7fe fecd 	bl	8000fc4 <HAL_GetTick>
 800222a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800222c:	e00a      	b.n	8002244 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800222e:	f7fe fec9 	bl	8000fc4 <HAL_GetTick>
 8002232:	4602      	mov	r2, r0
 8002234:	697b      	ldr	r3, [r7, #20]
 8002236:	1ad3      	subs	r3, r2, r3
 8002238:	f241 3288 	movw	r2, #5000	@ 0x1388
 800223c:	4293      	cmp	r3, r2
 800223e:	d901      	bls.n	8002244 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002240:	2303      	movs	r3, #3
 8002242:	e0be      	b.n	80023c2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002244:	4b1c      	ldr	r3, [pc, #112]	@ (80022b8 <HAL_RCC_ClockConfig+0x244>)
 8002246:	691b      	ldr	r3, [r3, #16]
 8002248:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	00db      	lsls	r3, r3, #3
 8002252:	429a      	cmp	r2, r3
 8002254:	d1eb      	bne.n	800222e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f003 0302 	and.w	r3, r3, #2
 800225e:	2b00      	cmp	r3, #0
 8002260:	d010      	beq.n	8002284 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	68da      	ldr	r2, [r3, #12]
 8002266:	4b14      	ldr	r3, [pc, #80]	@ (80022b8 <HAL_RCC_ClockConfig+0x244>)
 8002268:	699b      	ldr	r3, [r3, #24]
 800226a:	f003 030f 	and.w	r3, r3, #15
 800226e:	429a      	cmp	r2, r3
 8002270:	d208      	bcs.n	8002284 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002272:	4b11      	ldr	r3, [pc, #68]	@ (80022b8 <HAL_RCC_ClockConfig+0x244>)
 8002274:	699b      	ldr	r3, [r3, #24]
 8002276:	f023 020f 	bic.w	r2, r3, #15
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	68db      	ldr	r3, [r3, #12]
 800227e:	490e      	ldr	r1, [pc, #56]	@ (80022b8 <HAL_RCC_ClockConfig+0x244>)
 8002280:	4313      	orrs	r3, r2
 8002282:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002284:	4b0b      	ldr	r3, [pc, #44]	@ (80022b4 <HAL_RCC_ClockConfig+0x240>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f003 030f 	and.w	r3, r3, #15
 800228c:	683a      	ldr	r2, [r7, #0]
 800228e:	429a      	cmp	r2, r3
 8002290:	d214      	bcs.n	80022bc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002292:	4b08      	ldr	r3, [pc, #32]	@ (80022b4 <HAL_RCC_ClockConfig+0x240>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f023 020f 	bic.w	r2, r3, #15
 800229a:	4906      	ldr	r1, [pc, #24]	@ (80022b4 <HAL_RCC_ClockConfig+0x240>)
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	4313      	orrs	r3, r2
 80022a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022a2:	4b04      	ldr	r3, [pc, #16]	@ (80022b4 <HAL_RCC_ClockConfig+0x240>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f003 030f 	and.w	r3, r3, #15
 80022aa:	683a      	ldr	r2, [r7, #0]
 80022ac:	429a      	cmp	r2, r3
 80022ae:	d005      	beq.n	80022bc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80022b0:	2301      	movs	r3, #1
 80022b2:	e086      	b.n	80023c2 <HAL_RCC_ClockConfig+0x34e>
 80022b4:	52002000 	.word	0x52002000
 80022b8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f003 0304 	and.w	r3, r3, #4
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d010      	beq.n	80022ea <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	691a      	ldr	r2, [r3, #16]
 80022cc:	4b3f      	ldr	r3, [pc, #252]	@ (80023cc <HAL_RCC_ClockConfig+0x358>)
 80022ce:	699b      	ldr	r3, [r3, #24]
 80022d0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80022d4:	429a      	cmp	r2, r3
 80022d6:	d208      	bcs.n	80022ea <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80022d8:	4b3c      	ldr	r3, [pc, #240]	@ (80023cc <HAL_RCC_ClockConfig+0x358>)
 80022da:	699b      	ldr	r3, [r3, #24]
 80022dc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	691b      	ldr	r3, [r3, #16]
 80022e4:	4939      	ldr	r1, [pc, #228]	@ (80023cc <HAL_RCC_ClockConfig+0x358>)
 80022e6:	4313      	orrs	r3, r2
 80022e8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f003 0308 	and.w	r3, r3, #8
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d010      	beq.n	8002318 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	695a      	ldr	r2, [r3, #20]
 80022fa:	4b34      	ldr	r3, [pc, #208]	@ (80023cc <HAL_RCC_ClockConfig+0x358>)
 80022fc:	69db      	ldr	r3, [r3, #28]
 80022fe:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002302:	429a      	cmp	r2, r3
 8002304:	d208      	bcs.n	8002318 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002306:	4b31      	ldr	r3, [pc, #196]	@ (80023cc <HAL_RCC_ClockConfig+0x358>)
 8002308:	69db      	ldr	r3, [r3, #28]
 800230a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	695b      	ldr	r3, [r3, #20]
 8002312:	492e      	ldr	r1, [pc, #184]	@ (80023cc <HAL_RCC_ClockConfig+0x358>)
 8002314:	4313      	orrs	r3, r2
 8002316:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f003 0310 	and.w	r3, r3, #16
 8002320:	2b00      	cmp	r3, #0
 8002322:	d010      	beq.n	8002346 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	699a      	ldr	r2, [r3, #24]
 8002328:	4b28      	ldr	r3, [pc, #160]	@ (80023cc <HAL_RCC_ClockConfig+0x358>)
 800232a:	69db      	ldr	r3, [r3, #28]
 800232c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002330:	429a      	cmp	r2, r3
 8002332:	d208      	bcs.n	8002346 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002334:	4b25      	ldr	r3, [pc, #148]	@ (80023cc <HAL_RCC_ClockConfig+0x358>)
 8002336:	69db      	ldr	r3, [r3, #28]
 8002338:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	699b      	ldr	r3, [r3, #24]
 8002340:	4922      	ldr	r1, [pc, #136]	@ (80023cc <HAL_RCC_ClockConfig+0x358>)
 8002342:	4313      	orrs	r3, r2
 8002344:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f003 0320 	and.w	r3, r3, #32
 800234e:	2b00      	cmp	r3, #0
 8002350:	d010      	beq.n	8002374 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	69da      	ldr	r2, [r3, #28]
 8002356:	4b1d      	ldr	r3, [pc, #116]	@ (80023cc <HAL_RCC_ClockConfig+0x358>)
 8002358:	6a1b      	ldr	r3, [r3, #32]
 800235a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800235e:	429a      	cmp	r2, r3
 8002360:	d208      	bcs.n	8002374 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002362:	4b1a      	ldr	r3, [pc, #104]	@ (80023cc <HAL_RCC_ClockConfig+0x358>)
 8002364:	6a1b      	ldr	r3, [r3, #32]
 8002366:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	69db      	ldr	r3, [r3, #28]
 800236e:	4917      	ldr	r1, [pc, #92]	@ (80023cc <HAL_RCC_ClockConfig+0x358>)
 8002370:	4313      	orrs	r3, r2
 8002372:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002374:	f000 f834 	bl	80023e0 <HAL_RCC_GetSysClockFreq>
 8002378:	4602      	mov	r2, r0
 800237a:	4b14      	ldr	r3, [pc, #80]	@ (80023cc <HAL_RCC_ClockConfig+0x358>)
 800237c:	699b      	ldr	r3, [r3, #24]
 800237e:	0a1b      	lsrs	r3, r3, #8
 8002380:	f003 030f 	and.w	r3, r3, #15
 8002384:	4912      	ldr	r1, [pc, #72]	@ (80023d0 <HAL_RCC_ClockConfig+0x35c>)
 8002386:	5ccb      	ldrb	r3, [r1, r3]
 8002388:	f003 031f 	and.w	r3, r3, #31
 800238c:	fa22 f303 	lsr.w	r3, r2, r3
 8002390:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002392:	4b0e      	ldr	r3, [pc, #56]	@ (80023cc <HAL_RCC_ClockConfig+0x358>)
 8002394:	699b      	ldr	r3, [r3, #24]
 8002396:	f003 030f 	and.w	r3, r3, #15
 800239a:	4a0d      	ldr	r2, [pc, #52]	@ (80023d0 <HAL_RCC_ClockConfig+0x35c>)
 800239c:	5cd3      	ldrb	r3, [r2, r3]
 800239e:	f003 031f 	and.w	r3, r3, #31
 80023a2:	693a      	ldr	r2, [r7, #16]
 80023a4:	fa22 f303 	lsr.w	r3, r2, r3
 80023a8:	4a0a      	ldr	r2, [pc, #40]	@ (80023d4 <HAL_RCC_ClockConfig+0x360>)
 80023aa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80023ac:	4a0a      	ldr	r2, [pc, #40]	@ (80023d8 <HAL_RCC_ClockConfig+0x364>)
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80023b2:	4b0a      	ldr	r3, [pc, #40]	@ (80023dc <HAL_RCC_ClockConfig+0x368>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4618      	mov	r0, r3
 80023b8:	f7fe fdba 	bl	8000f30 <HAL_InitTick>
 80023bc:	4603      	mov	r3, r0
 80023be:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80023c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	3718      	adds	r7, #24
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	bf00      	nop
 80023cc:	58024400 	.word	0x58024400
 80023d0:	08003d3c 	.word	0x08003d3c
 80023d4:	24000004 	.word	0x24000004
 80023d8:	24000000 	.word	0x24000000
 80023dc:	24000024 	.word	0x24000024

080023e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b089      	sub	sp, #36	@ 0x24
 80023e4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80023e6:	4bb3      	ldr	r3, [pc, #716]	@ (80026b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80023e8:	691b      	ldr	r3, [r3, #16]
 80023ea:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80023ee:	2b18      	cmp	r3, #24
 80023f0:	f200 8155 	bhi.w	800269e <HAL_RCC_GetSysClockFreq+0x2be>
 80023f4:	a201      	add	r2, pc, #4	@ (adr r2, 80023fc <HAL_RCC_GetSysClockFreq+0x1c>)
 80023f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023fa:	bf00      	nop
 80023fc:	08002461 	.word	0x08002461
 8002400:	0800269f 	.word	0x0800269f
 8002404:	0800269f 	.word	0x0800269f
 8002408:	0800269f 	.word	0x0800269f
 800240c:	0800269f 	.word	0x0800269f
 8002410:	0800269f 	.word	0x0800269f
 8002414:	0800269f 	.word	0x0800269f
 8002418:	0800269f 	.word	0x0800269f
 800241c:	08002487 	.word	0x08002487
 8002420:	0800269f 	.word	0x0800269f
 8002424:	0800269f 	.word	0x0800269f
 8002428:	0800269f 	.word	0x0800269f
 800242c:	0800269f 	.word	0x0800269f
 8002430:	0800269f 	.word	0x0800269f
 8002434:	0800269f 	.word	0x0800269f
 8002438:	0800269f 	.word	0x0800269f
 800243c:	0800248d 	.word	0x0800248d
 8002440:	0800269f 	.word	0x0800269f
 8002444:	0800269f 	.word	0x0800269f
 8002448:	0800269f 	.word	0x0800269f
 800244c:	0800269f 	.word	0x0800269f
 8002450:	0800269f 	.word	0x0800269f
 8002454:	0800269f 	.word	0x0800269f
 8002458:	0800269f 	.word	0x0800269f
 800245c:	08002493 	.word	0x08002493
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002460:	4b94      	ldr	r3, [pc, #592]	@ (80026b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f003 0320 	and.w	r3, r3, #32
 8002468:	2b00      	cmp	r3, #0
 800246a:	d009      	beq.n	8002480 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800246c:	4b91      	ldr	r3, [pc, #580]	@ (80026b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	08db      	lsrs	r3, r3, #3
 8002472:	f003 0303 	and.w	r3, r3, #3
 8002476:	4a90      	ldr	r2, [pc, #576]	@ (80026b8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002478:	fa22 f303 	lsr.w	r3, r2, r3
 800247c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800247e:	e111      	b.n	80026a4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002480:	4b8d      	ldr	r3, [pc, #564]	@ (80026b8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002482:	61bb      	str	r3, [r7, #24]
      break;
 8002484:	e10e      	b.n	80026a4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002486:	4b8d      	ldr	r3, [pc, #564]	@ (80026bc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002488:	61bb      	str	r3, [r7, #24]
      break;
 800248a:	e10b      	b.n	80026a4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800248c:	4b8c      	ldr	r3, [pc, #560]	@ (80026c0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800248e:	61bb      	str	r3, [r7, #24]
      break;
 8002490:	e108      	b.n	80026a4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002492:	4b88      	ldr	r3, [pc, #544]	@ (80026b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002494:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002496:	f003 0303 	and.w	r3, r3, #3
 800249a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800249c:	4b85      	ldr	r3, [pc, #532]	@ (80026b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800249e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024a0:	091b      	lsrs	r3, r3, #4
 80024a2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80024a6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80024a8:	4b82      	ldr	r3, [pc, #520]	@ (80026b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80024aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024ac:	f003 0301 	and.w	r3, r3, #1
 80024b0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80024b2:	4b80      	ldr	r3, [pc, #512]	@ (80026b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80024b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80024b6:	08db      	lsrs	r3, r3, #3
 80024b8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80024bc:	68fa      	ldr	r2, [r7, #12]
 80024be:	fb02 f303 	mul.w	r3, r2, r3
 80024c2:	ee07 3a90 	vmov	s15, r3
 80024c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024ca:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	f000 80e1 	beq.w	8002698 <HAL_RCC_GetSysClockFreq+0x2b8>
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	2b02      	cmp	r3, #2
 80024da:	f000 8083 	beq.w	80025e4 <HAL_RCC_GetSysClockFreq+0x204>
 80024de:	697b      	ldr	r3, [r7, #20]
 80024e0:	2b02      	cmp	r3, #2
 80024e2:	f200 80a1 	bhi.w	8002628 <HAL_RCC_GetSysClockFreq+0x248>
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d003      	beq.n	80024f4 <HAL_RCC_GetSysClockFreq+0x114>
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	2b01      	cmp	r3, #1
 80024f0:	d056      	beq.n	80025a0 <HAL_RCC_GetSysClockFreq+0x1c0>
 80024f2:	e099      	b.n	8002628 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80024f4:	4b6f      	ldr	r3, [pc, #444]	@ (80026b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f003 0320 	and.w	r3, r3, #32
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d02d      	beq.n	800255c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002500:	4b6c      	ldr	r3, [pc, #432]	@ (80026b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	08db      	lsrs	r3, r3, #3
 8002506:	f003 0303 	and.w	r3, r3, #3
 800250a:	4a6b      	ldr	r2, [pc, #428]	@ (80026b8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800250c:	fa22 f303 	lsr.w	r3, r2, r3
 8002510:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	ee07 3a90 	vmov	s15, r3
 8002518:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800251c:	693b      	ldr	r3, [r7, #16]
 800251e:	ee07 3a90 	vmov	s15, r3
 8002522:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002526:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800252a:	4b62      	ldr	r3, [pc, #392]	@ (80026b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800252c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800252e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002532:	ee07 3a90 	vmov	s15, r3
 8002536:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800253a:	ed97 6a02 	vldr	s12, [r7, #8]
 800253e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80026c4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002542:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002546:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800254a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800254e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002552:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002556:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800255a:	e087      	b.n	800266c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800255c:	693b      	ldr	r3, [r7, #16]
 800255e:	ee07 3a90 	vmov	s15, r3
 8002562:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002566:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80026c8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800256a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800256e:	4b51      	ldr	r3, [pc, #324]	@ (80026b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002570:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002572:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002576:	ee07 3a90 	vmov	s15, r3
 800257a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800257e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002582:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80026c4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002586:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800258a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800258e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002592:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002596:	ee67 7a27 	vmul.f32	s15, s14, s15
 800259a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800259e:	e065      	b.n	800266c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	ee07 3a90 	vmov	s15, r3
 80025a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80025aa:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80026cc <HAL_RCC_GetSysClockFreq+0x2ec>
 80025ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80025b2:	4b40      	ldr	r3, [pc, #256]	@ (80026b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80025b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025ba:	ee07 3a90 	vmov	s15, r3
 80025be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80025c2:	ed97 6a02 	vldr	s12, [r7, #8]
 80025c6:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80026c4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80025ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80025ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80025d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80025d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80025da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025de:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80025e2:	e043      	b.n	800266c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80025e4:	693b      	ldr	r3, [r7, #16]
 80025e6:	ee07 3a90 	vmov	s15, r3
 80025ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80025ee:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80026d0 <HAL_RCC_GetSysClockFreq+0x2f0>
 80025f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80025f6:	4b2f      	ldr	r3, [pc, #188]	@ (80026b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80025f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025fe:	ee07 3a90 	vmov	s15, r3
 8002602:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002606:	ed97 6a02 	vldr	s12, [r7, #8]
 800260a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80026c4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800260e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002612:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002616:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800261a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800261e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002622:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002626:	e021      	b.n	800266c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002628:	693b      	ldr	r3, [r7, #16]
 800262a:	ee07 3a90 	vmov	s15, r3
 800262e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002632:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80026cc <HAL_RCC_GetSysClockFreq+0x2ec>
 8002636:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800263a:	4b1e      	ldr	r3, [pc, #120]	@ (80026b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800263c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800263e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002642:	ee07 3a90 	vmov	s15, r3
 8002646:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800264a:	ed97 6a02 	vldr	s12, [r7, #8]
 800264e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80026c4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002652:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002656:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800265a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800265e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002662:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002666:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800266a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800266c:	4b11      	ldr	r3, [pc, #68]	@ (80026b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800266e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002670:	0a5b      	lsrs	r3, r3, #9
 8002672:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002676:	3301      	adds	r3, #1
 8002678:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	ee07 3a90 	vmov	s15, r3
 8002680:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002684:	edd7 6a07 	vldr	s13, [r7, #28]
 8002688:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800268c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002690:	ee17 3a90 	vmov	r3, s15
 8002694:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8002696:	e005      	b.n	80026a4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002698:	2300      	movs	r3, #0
 800269a:	61bb      	str	r3, [r7, #24]
      break;
 800269c:	e002      	b.n	80026a4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800269e:	4b07      	ldr	r3, [pc, #28]	@ (80026bc <HAL_RCC_GetSysClockFreq+0x2dc>)
 80026a0:	61bb      	str	r3, [r7, #24]
      break;
 80026a2:	bf00      	nop
  }

  return sysclockfreq;
 80026a4:	69bb      	ldr	r3, [r7, #24]
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	3724      	adds	r7, #36	@ 0x24
 80026aa:	46bd      	mov	sp, r7
 80026ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b0:	4770      	bx	lr
 80026b2:	bf00      	nop
 80026b4:	58024400 	.word	0x58024400
 80026b8:	03d09000 	.word	0x03d09000
 80026bc:	003d0900 	.word	0x003d0900
 80026c0:	017d7840 	.word	0x017d7840
 80026c4:	46000000 	.word	0x46000000
 80026c8:	4c742400 	.word	0x4c742400
 80026cc:	4a742400 	.word	0x4a742400
 80026d0:	4bbebc20 	.word	0x4bbebc20

080026d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b082      	sub	sp, #8
 80026d8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80026da:	f7ff fe81 	bl	80023e0 <HAL_RCC_GetSysClockFreq>
 80026de:	4602      	mov	r2, r0
 80026e0:	4b10      	ldr	r3, [pc, #64]	@ (8002724 <HAL_RCC_GetHCLKFreq+0x50>)
 80026e2:	699b      	ldr	r3, [r3, #24]
 80026e4:	0a1b      	lsrs	r3, r3, #8
 80026e6:	f003 030f 	and.w	r3, r3, #15
 80026ea:	490f      	ldr	r1, [pc, #60]	@ (8002728 <HAL_RCC_GetHCLKFreq+0x54>)
 80026ec:	5ccb      	ldrb	r3, [r1, r3]
 80026ee:	f003 031f 	and.w	r3, r3, #31
 80026f2:	fa22 f303 	lsr.w	r3, r2, r3
 80026f6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80026f8:	4b0a      	ldr	r3, [pc, #40]	@ (8002724 <HAL_RCC_GetHCLKFreq+0x50>)
 80026fa:	699b      	ldr	r3, [r3, #24]
 80026fc:	f003 030f 	and.w	r3, r3, #15
 8002700:	4a09      	ldr	r2, [pc, #36]	@ (8002728 <HAL_RCC_GetHCLKFreq+0x54>)
 8002702:	5cd3      	ldrb	r3, [r2, r3]
 8002704:	f003 031f 	and.w	r3, r3, #31
 8002708:	687a      	ldr	r2, [r7, #4]
 800270a:	fa22 f303 	lsr.w	r3, r2, r3
 800270e:	4a07      	ldr	r2, [pc, #28]	@ (800272c <HAL_RCC_GetHCLKFreq+0x58>)
 8002710:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002712:	4a07      	ldr	r2, [pc, #28]	@ (8002730 <HAL_RCC_GetHCLKFreq+0x5c>)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002718:	4b04      	ldr	r3, [pc, #16]	@ (800272c <HAL_RCC_GetHCLKFreq+0x58>)
 800271a:	681b      	ldr	r3, [r3, #0]
}
 800271c:	4618      	mov	r0, r3
 800271e:	3708      	adds	r7, #8
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}
 8002724:	58024400 	.word	0x58024400
 8002728:	08003d3c 	.word	0x08003d3c
 800272c:	24000004 	.word	0x24000004
 8002730:	24000000 	.word	0x24000000

08002734 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8002738:	f7ff ffcc 	bl	80026d4 <HAL_RCC_GetHCLKFreq>
 800273c:	4602      	mov	r2, r0
 800273e:	4b06      	ldr	r3, [pc, #24]	@ (8002758 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002740:	69db      	ldr	r3, [r3, #28]
 8002742:	091b      	lsrs	r3, r3, #4
 8002744:	f003 0307 	and.w	r3, r3, #7
 8002748:	4904      	ldr	r1, [pc, #16]	@ (800275c <HAL_RCC_GetPCLK1Freq+0x28>)
 800274a:	5ccb      	ldrb	r3, [r1, r3]
 800274c:	f003 031f 	and.w	r3, r3, #31
 8002750:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8002754:	4618      	mov	r0, r3
 8002756:	bd80      	pop	{r7, pc}
 8002758:	58024400 	.word	0x58024400
 800275c:	08003d3c 	.word	0x08003d3c

08002760 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8002764:	f7ff ffb6 	bl	80026d4 <HAL_RCC_GetHCLKFreq>
 8002768:	4602      	mov	r2, r0
 800276a:	4b06      	ldr	r3, [pc, #24]	@ (8002784 <HAL_RCC_GetPCLK2Freq+0x24>)
 800276c:	69db      	ldr	r3, [r3, #28]
 800276e:	0a1b      	lsrs	r3, r3, #8
 8002770:	f003 0307 	and.w	r3, r3, #7
 8002774:	4904      	ldr	r1, [pc, #16]	@ (8002788 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002776:	5ccb      	ldrb	r3, [r1, r3]
 8002778:	f003 031f 	and.w	r3, r3, #31
 800277c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8002780:	4618      	mov	r0, r3
 8002782:	bd80      	pop	{r7, pc}
 8002784:	58024400 	.word	0x58024400
 8002788:	08003d3c 	.word	0x08003d3c

0800278c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8002790:	f7ff ffa0 	bl	80026d4 <HAL_RCC_GetHCLKFreq>
 8002794:	4602      	mov	r2, r0
 8002796:	4b06      	ldr	r3, [pc, #24]	@ (80027b0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8002798:	6a1b      	ldr	r3, [r3, #32]
 800279a:	091b      	lsrs	r3, r3, #4
 800279c:	f003 0307 	and.w	r3, r3, #7
 80027a0:	4904      	ldr	r1, [pc, #16]	@ (80027b4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80027a2:	5ccb      	ldrb	r3, [r1, r3]
 80027a4:	f003 031f 	and.w	r3, r3, #31
 80027a8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	bd80      	pop	{r7, pc}
 80027b0:	58024400 	.word	0x58024400
 80027b4:	08003d3c 	.word	0x08003d3c

080027b8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80027b8:	b480      	push	{r7}
 80027ba:	b089      	sub	sp, #36	@ 0x24
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80027c0:	4ba1      	ldr	r3, [pc, #644]	@ (8002a48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80027c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027c4:	f003 0303 	and.w	r3, r3, #3
 80027c8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80027ca:	4b9f      	ldr	r3, [pc, #636]	@ (8002a48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80027cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027ce:	0b1b      	lsrs	r3, r3, #12
 80027d0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80027d4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80027d6:	4b9c      	ldr	r3, [pc, #624]	@ (8002a48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80027d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027da:	091b      	lsrs	r3, r3, #4
 80027dc:	f003 0301 	and.w	r3, r3, #1
 80027e0:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80027e2:	4b99      	ldr	r3, [pc, #612]	@ (8002a48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80027e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027e6:	08db      	lsrs	r3, r3, #3
 80027e8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80027ec:	693a      	ldr	r2, [r7, #16]
 80027ee:	fb02 f303 	mul.w	r3, r2, r3
 80027f2:	ee07 3a90 	vmov	s15, r3
 80027f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027fa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	2b00      	cmp	r3, #0
 8002802:	f000 8111 	beq.w	8002a28 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8002806:	69bb      	ldr	r3, [r7, #24]
 8002808:	2b02      	cmp	r3, #2
 800280a:	f000 8083 	beq.w	8002914 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800280e:	69bb      	ldr	r3, [r7, #24]
 8002810:	2b02      	cmp	r3, #2
 8002812:	f200 80a1 	bhi.w	8002958 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8002816:	69bb      	ldr	r3, [r7, #24]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d003      	beq.n	8002824 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800281c:	69bb      	ldr	r3, [r7, #24]
 800281e:	2b01      	cmp	r3, #1
 8002820:	d056      	beq.n	80028d0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8002822:	e099      	b.n	8002958 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002824:	4b88      	ldr	r3, [pc, #544]	@ (8002a48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f003 0320 	and.w	r3, r3, #32
 800282c:	2b00      	cmp	r3, #0
 800282e:	d02d      	beq.n	800288c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002830:	4b85      	ldr	r3, [pc, #532]	@ (8002a48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	08db      	lsrs	r3, r3, #3
 8002836:	f003 0303 	and.w	r3, r3, #3
 800283a:	4a84      	ldr	r2, [pc, #528]	@ (8002a4c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800283c:	fa22 f303 	lsr.w	r3, r2, r3
 8002840:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8002842:	68bb      	ldr	r3, [r7, #8]
 8002844:	ee07 3a90 	vmov	s15, r3
 8002848:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	ee07 3a90 	vmov	s15, r3
 8002852:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002856:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800285a:	4b7b      	ldr	r3, [pc, #492]	@ (8002a48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800285c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800285e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002862:	ee07 3a90 	vmov	s15, r3
 8002866:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800286a:	ed97 6a03 	vldr	s12, [r7, #12]
 800286e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8002a50 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8002872:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002876:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800287a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800287e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002882:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002886:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800288a:	e087      	b.n	800299c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	ee07 3a90 	vmov	s15, r3
 8002892:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002896:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8002a54 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800289a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800289e:	4b6a      	ldr	r3, [pc, #424]	@ (8002a48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80028a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028a6:	ee07 3a90 	vmov	s15, r3
 80028aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80028ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80028b2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8002a50 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80028b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80028ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80028be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80028c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80028c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80028ce:	e065      	b.n	800299c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	ee07 3a90 	vmov	s15, r3
 80028d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028da:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8002a58 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80028de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80028e2:	4b59      	ldr	r3, [pc, #356]	@ (8002a48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80028e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028ea:	ee07 3a90 	vmov	s15, r3
 80028ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80028f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80028f6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8002a50 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80028fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80028fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002902:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002906:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800290a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800290e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002912:	e043      	b.n	800299c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	ee07 3a90 	vmov	s15, r3
 800291a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800291e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8002a5c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8002922:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002926:	4b48      	ldr	r3, [pc, #288]	@ (8002a48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002928:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800292a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800292e:	ee07 3a90 	vmov	s15, r3
 8002932:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002936:	ed97 6a03 	vldr	s12, [r7, #12]
 800293a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8002a50 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800293e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002942:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002946:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800294a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800294e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002952:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002956:	e021      	b.n	800299c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	ee07 3a90 	vmov	s15, r3
 800295e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002962:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8002a58 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8002966:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800296a:	4b37      	ldr	r3, [pc, #220]	@ (8002a48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800296c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800296e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002972:	ee07 3a90 	vmov	s15, r3
 8002976:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800297a:	ed97 6a03 	vldr	s12, [r7, #12]
 800297e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8002a50 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8002982:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002986:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800298a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800298e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002992:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002996:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800299a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800299c:	4b2a      	ldr	r3, [pc, #168]	@ (8002a48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800299e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029a0:	0a5b      	lsrs	r3, r3, #9
 80029a2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80029a6:	ee07 3a90 	vmov	s15, r3
 80029aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029ae:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80029b2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80029b6:	edd7 6a07 	vldr	s13, [r7, #28]
 80029ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80029be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80029c2:	ee17 2a90 	vmov	r2, s15
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80029ca:	4b1f      	ldr	r3, [pc, #124]	@ (8002a48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80029cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029ce:	0c1b      	lsrs	r3, r3, #16
 80029d0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80029d4:	ee07 3a90 	vmov	s15, r3
 80029d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029dc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80029e0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80029e4:	edd7 6a07 	vldr	s13, [r7, #28]
 80029e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80029ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80029f0:	ee17 2a90 	vmov	r2, s15
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80029f8:	4b13      	ldr	r3, [pc, #76]	@ (8002a48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80029fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029fc:	0e1b      	lsrs	r3, r3, #24
 80029fe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002a02:	ee07 3a90 	vmov	s15, r3
 8002a06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a0a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002a0e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002a12:	edd7 6a07 	vldr	s13, [r7, #28]
 8002a16:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002a1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002a1e:	ee17 2a90 	vmov	r2, s15
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8002a26:	e008      	b.n	8002a3a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2200      	movs	r2, #0
 8002a32:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2200      	movs	r2, #0
 8002a38:	609a      	str	r2, [r3, #8]
}
 8002a3a:	bf00      	nop
 8002a3c:	3724      	adds	r7, #36	@ 0x24
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a44:	4770      	bx	lr
 8002a46:	bf00      	nop
 8002a48:	58024400 	.word	0x58024400
 8002a4c:	03d09000 	.word	0x03d09000
 8002a50:	46000000 	.word	0x46000000
 8002a54:	4c742400 	.word	0x4c742400
 8002a58:	4a742400 	.word	0x4a742400
 8002a5c:	4bbebc20 	.word	0x4bbebc20

08002a60 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b089      	sub	sp, #36	@ 0x24
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002a68:	4ba1      	ldr	r3, [pc, #644]	@ (8002cf0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002a6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a6c:	f003 0303 	and.w	r3, r3, #3
 8002a70:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8002a72:	4b9f      	ldr	r3, [pc, #636]	@ (8002cf0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002a74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a76:	0d1b      	lsrs	r3, r3, #20
 8002a78:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002a7c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8002a7e:	4b9c      	ldr	r3, [pc, #624]	@ (8002cf0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002a80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a82:	0a1b      	lsrs	r3, r3, #8
 8002a84:	f003 0301 	and.w	r3, r3, #1
 8002a88:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8002a8a:	4b99      	ldr	r3, [pc, #612]	@ (8002cf0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002a8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a8e:	08db      	lsrs	r3, r3, #3
 8002a90:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002a94:	693a      	ldr	r2, [r7, #16]
 8002a96:	fb02 f303 	mul.w	r3, r2, r3
 8002a9a:	ee07 3a90 	vmov	s15, r3
 8002a9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002aa2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	f000 8111 	beq.w	8002cd0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8002aae:	69bb      	ldr	r3, [r7, #24]
 8002ab0:	2b02      	cmp	r3, #2
 8002ab2:	f000 8083 	beq.w	8002bbc <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8002ab6:	69bb      	ldr	r3, [r7, #24]
 8002ab8:	2b02      	cmp	r3, #2
 8002aba:	f200 80a1 	bhi.w	8002c00 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8002abe:	69bb      	ldr	r3, [r7, #24]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d003      	beq.n	8002acc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8002ac4:	69bb      	ldr	r3, [r7, #24]
 8002ac6:	2b01      	cmp	r3, #1
 8002ac8:	d056      	beq.n	8002b78 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8002aca:	e099      	b.n	8002c00 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002acc:	4b88      	ldr	r3, [pc, #544]	@ (8002cf0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f003 0320 	and.w	r3, r3, #32
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d02d      	beq.n	8002b34 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002ad8:	4b85      	ldr	r3, [pc, #532]	@ (8002cf0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	08db      	lsrs	r3, r3, #3
 8002ade:	f003 0303 	and.w	r3, r3, #3
 8002ae2:	4a84      	ldr	r2, [pc, #528]	@ (8002cf4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8002ae4:	fa22 f303 	lsr.w	r3, r2, r3
 8002ae8:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	ee07 3a90 	vmov	s15, r3
 8002af0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	ee07 3a90 	vmov	s15, r3
 8002afa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002afe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002b02:	4b7b      	ldr	r3, [pc, #492]	@ (8002cf0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002b04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b0a:	ee07 3a90 	vmov	s15, r3
 8002b0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002b12:	ed97 6a03 	vldr	s12, [r7, #12]
 8002b16:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8002cf8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8002b1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002b1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002b22:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002b26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002b2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b2e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8002b32:	e087      	b.n	8002c44 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	ee07 3a90 	vmov	s15, r3
 8002b3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b3e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8002cfc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8002b42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002b46:	4b6a      	ldr	r3, [pc, #424]	@ (8002cf0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002b48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b4e:	ee07 3a90 	vmov	s15, r3
 8002b52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002b56:	ed97 6a03 	vldr	s12, [r7, #12]
 8002b5a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8002cf8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8002b5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002b62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002b66:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002b6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002b6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b72:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002b76:	e065      	b.n	8002c44 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	ee07 3a90 	vmov	s15, r3
 8002b7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b82:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8002d00 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8002b86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002b8a:	4b59      	ldr	r3, [pc, #356]	@ (8002cf0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002b8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b92:	ee07 3a90 	vmov	s15, r3
 8002b96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002b9a:	ed97 6a03 	vldr	s12, [r7, #12]
 8002b9e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8002cf8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8002ba2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002ba6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002baa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002bae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002bb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bb6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002bba:	e043      	b.n	8002c44 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	ee07 3a90 	vmov	s15, r3
 8002bc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002bc6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8002d04 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8002bca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002bce:	4b48      	ldr	r3, [pc, #288]	@ (8002cf0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002bd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002bd6:	ee07 3a90 	vmov	s15, r3
 8002bda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002bde:	ed97 6a03 	vldr	s12, [r7, #12]
 8002be2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8002cf8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8002be6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002bea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002bee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002bf2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002bf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bfa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002bfe:	e021      	b.n	8002c44 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8002c00:	697b      	ldr	r3, [r7, #20]
 8002c02:	ee07 3a90 	vmov	s15, r3
 8002c06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c0a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8002d00 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8002c0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002c12:	4b37      	ldr	r3, [pc, #220]	@ (8002cf0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002c14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c1a:	ee07 3a90 	vmov	s15, r3
 8002c1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002c22:	ed97 6a03 	vldr	s12, [r7, #12]
 8002c26:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8002cf8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8002c2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002c2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002c32:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002c36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002c3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c3e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002c42:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8002c44:	4b2a      	ldr	r3, [pc, #168]	@ (8002cf0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002c46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c48:	0a5b      	lsrs	r3, r3, #9
 8002c4a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002c4e:	ee07 3a90 	vmov	s15, r3
 8002c52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c56:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002c5a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002c5e:	edd7 6a07 	vldr	s13, [r7, #28]
 8002c62:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002c66:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002c6a:	ee17 2a90 	vmov	r2, s15
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8002c72:	4b1f      	ldr	r3, [pc, #124]	@ (8002cf0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002c74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c76:	0c1b      	lsrs	r3, r3, #16
 8002c78:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002c7c:	ee07 3a90 	vmov	s15, r3
 8002c80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c84:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002c88:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002c8c:	edd7 6a07 	vldr	s13, [r7, #28]
 8002c90:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002c94:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002c98:	ee17 2a90 	vmov	r2, s15
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8002ca0:	4b13      	ldr	r3, [pc, #76]	@ (8002cf0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002ca2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ca4:	0e1b      	lsrs	r3, r3, #24
 8002ca6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002caa:	ee07 3a90 	vmov	s15, r3
 8002cae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002cb2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002cb6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002cba:	edd7 6a07 	vldr	s13, [r7, #28]
 8002cbe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002cc2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002cc6:	ee17 2a90 	vmov	r2, s15
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8002cce:	e008      	b.n	8002ce2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	609a      	str	r2, [r3, #8]
}
 8002ce2:	bf00      	nop
 8002ce4:	3724      	adds	r7, #36	@ 0x24
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cec:	4770      	bx	lr
 8002cee:	bf00      	nop
 8002cf0:	58024400 	.word	0x58024400
 8002cf4:	03d09000 	.word	0x03d09000
 8002cf8:	46000000 	.word	0x46000000
 8002cfc:	4c742400 	.word	0x4c742400
 8002d00:	4a742400 	.word	0x4a742400
 8002d04:	4bbebc20 	.word	0x4bbebc20

08002d08 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b082      	sub	sp, #8
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d101      	bne.n	8002d1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	e042      	b.n	8002da0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d106      	bne.n	8002d32 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2200      	movs	r2, #0
 8002d28:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d2c:	6878      	ldr	r0, [r7, #4]
 8002d2e:	f000 f83b 	bl	8002da8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2224      	movs	r2, #36	@ 0x24
 8002d36:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	681a      	ldr	r2, [r3, #0]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f022 0201 	bic.w	r2, r2, #1
 8002d48:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d002      	beq.n	8002d58 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8002d52:	6878      	ldr	r0, [r7, #4]
 8002d54:	f000 fd9a 	bl	800388c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002d58:	6878      	ldr	r0, [r7, #4]
 8002d5a:	f000 f82f 	bl	8002dbc <UART_SetConfig>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	2b01      	cmp	r3, #1
 8002d62:	d101      	bne.n	8002d68 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8002d64:	2301      	movs	r3, #1
 8002d66:	e01b      	b.n	8002da0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	685a      	ldr	r2, [r3, #4]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002d76:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	689a      	ldr	r2, [r3, #8]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002d86:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	681a      	ldr	r2, [r3, #0]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f042 0201 	orr.w	r2, r2, #1
 8002d96:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002d98:	6878      	ldr	r0, [r7, #4]
 8002d9a:	f000 fe19 	bl	80039d0 <UART_CheckIdleState>
 8002d9e:	4603      	mov	r3, r0
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	3708      	adds	r7, #8
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bd80      	pop	{r7, pc}

08002da8 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b083      	sub	sp, #12
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8002db0:	bf00      	nop
 8002db2:	370c      	adds	r7, #12
 8002db4:	46bd      	mov	sp, r7
 8002db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dba:	4770      	bx	lr

08002dbc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002dbc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002dc0:	b092      	sub	sp, #72	@ 0x48
 8002dc2:	af00      	add	r7, sp, #0
 8002dc4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	689a      	ldr	r2, [r3, #8]
 8002dd0:	697b      	ldr	r3, [r7, #20]
 8002dd2:	691b      	ldr	r3, [r3, #16]
 8002dd4:	431a      	orrs	r2, r3
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	695b      	ldr	r3, [r3, #20]
 8002dda:	431a      	orrs	r2, r3
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	69db      	ldr	r3, [r3, #28]
 8002de0:	4313      	orrs	r3, r2
 8002de2:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	681a      	ldr	r2, [r3, #0]
 8002dea:	4bbe      	ldr	r3, [pc, #760]	@ (80030e4 <UART_SetConfig+0x328>)
 8002dec:	4013      	ands	r3, r2
 8002dee:	697a      	ldr	r2, [r7, #20]
 8002df0:	6812      	ldr	r2, [r2, #0]
 8002df2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8002df4:	430b      	orrs	r3, r1
 8002df6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002df8:	697b      	ldr	r3, [r7, #20]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	68da      	ldr	r2, [r3, #12]
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	430a      	orrs	r2, r1
 8002e0c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	699b      	ldr	r3, [r3, #24]
 8002e12:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4ab3      	ldr	r2, [pc, #716]	@ (80030e8 <UART_SetConfig+0x32c>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d004      	beq.n	8002e28 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002e1e:	697b      	ldr	r3, [r7, #20]
 8002e20:	6a1b      	ldr	r3, [r3, #32]
 8002e22:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002e24:	4313      	orrs	r3, r2
 8002e26:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002e28:	697b      	ldr	r3, [r7, #20]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	689a      	ldr	r2, [r3, #8]
 8002e2e:	4baf      	ldr	r3, [pc, #700]	@ (80030ec <UART_SetConfig+0x330>)
 8002e30:	4013      	ands	r3, r2
 8002e32:	697a      	ldr	r2, [r7, #20]
 8002e34:	6812      	ldr	r2, [r2, #0]
 8002e36:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8002e38:	430b      	orrs	r3, r1
 8002e3a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002e3c:	697b      	ldr	r3, [r7, #20]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e42:	f023 010f 	bic.w	r1, r3, #15
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	430a      	orrs	r2, r1
 8002e50:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4aa6      	ldr	r2, [pc, #664]	@ (80030f0 <UART_SetConfig+0x334>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d177      	bne.n	8002f4c <UART_SetConfig+0x190>
 8002e5c:	4ba5      	ldr	r3, [pc, #660]	@ (80030f4 <UART_SetConfig+0x338>)
 8002e5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e60:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002e64:	2b28      	cmp	r3, #40	@ 0x28
 8002e66:	d86d      	bhi.n	8002f44 <UART_SetConfig+0x188>
 8002e68:	a201      	add	r2, pc, #4	@ (adr r2, 8002e70 <UART_SetConfig+0xb4>)
 8002e6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e6e:	bf00      	nop
 8002e70:	08002f15 	.word	0x08002f15
 8002e74:	08002f45 	.word	0x08002f45
 8002e78:	08002f45 	.word	0x08002f45
 8002e7c:	08002f45 	.word	0x08002f45
 8002e80:	08002f45 	.word	0x08002f45
 8002e84:	08002f45 	.word	0x08002f45
 8002e88:	08002f45 	.word	0x08002f45
 8002e8c:	08002f45 	.word	0x08002f45
 8002e90:	08002f1d 	.word	0x08002f1d
 8002e94:	08002f45 	.word	0x08002f45
 8002e98:	08002f45 	.word	0x08002f45
 8002e9c:	08002f45 	.word	0x08002f45
 8002ea0:	08002f45 	.word	0x08002f45
 8002ea4:	08002f45 	.word	0x08002f45
 8002ea8:	08002f45 	.word	0x08002f45
 8002eac:	08002f45 	.word	0x08002f45
 8002eb0:	08002f25 	.word	0x08002f25
 8002eb4:	08002f45 	.word	0x08002f45
 8002eb8:	08002f45 	.word	0x08002f45
 8002ebc:	08002f45 	.word	0x08002f45
 8002ec0:	08002f45 	.word	0x08002f45
 8002ec4:	08002f45 	.word	0x08002f45
 8002ec8:	08002f45 	.word	0x08002f45
 8002ecc:	08002f45 	.word	0x08002f45
 8002ed0:	08002f2d 	.word	0x08002f2d
 8002ed4:	08002f45 	.word	0x08002f45
 8002ed8:	08002f45 	.word	0x08002f45
 8002edc:	08002f45 	.word	0x08002f45
 8002ee0:	08002f45 	.word	0x08002f45
 8002ee4:	08002f45 	.word	0x08002f45
 8002ee8:	08002f45 	.word	0x08002f45
 8002eec:	08002f45 	.word	0x08002f45
 8002ef0:	08002f35 	.word	0x08002f35
 8002ef4:	08002f45 	.word	0x08002f45
 8002ef8:	08002f45 	.word	0x08002f45
 8002efc:	08002f45 	.word	0x08002f45
 8002f00:	08002f45 	.word	0x08002f45
 8002f04:	08002f45 	.word	0x08002f45
 8002f08:	08002f45 	.word	0x08002f45
 8002f0c:	08002f45 	.word	0x08002f45
 8002f10:	08002f3d 	.word	0x08002f3d
 8002f14:	2301      	movs	r3, #1
 8002f16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8002f1a:	e222      	b.n	8003362 <UART_SetConfig+0x5a6>
 8002f1c:	2304      	movs	r3, #4
 8002f1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8002f22:	e21e      	b.n	8003362 <UART_SetConfig+0x5a6>
 8002f24:	2308      	movs	r3, #8
 8002f26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8002f2a:	e21a      	b.n	8003362 <UART_SetConfig+0x5a6>
 8002f2c:	2310      	movs	r3, #16
 8002f2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8002f32:	e216      	b.n	8003362 <UART_SetConfig+0x5a6>
 8002f34:	2320      	movs	r3, #32
 8002f36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8002f3a:	e212      	b.n	8003362 <UART_SetConfig+0x5a6>
 8002f3c:	2340      	movs	r3, #64	@ 0x40
 8002f3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8002f42:	e20e      	b.n	8003362 <UART_SetConfig+0x5a6>
 8002f44:	2380      	movs	r3, #128	@ 0x80
 8002f46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8002f4a:	e20a      	b.n	8003362 <UART_SetConfig+0x5a6>
 8002f4c:	697b      	ldr	r3, [r7, #20]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a69      	ldr	r2, [pc, #420]	@ (80030f8 <UART_SetConfig+0x33c>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d130      	bne.n	8002fb8 <UART_SetConfig+0x1fc>
 8002f56:	4b67      	ldr	r3, [pc, #412]	@ (80030f4 <UART_SetConfig+0x338>)
 8002f58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f5a:	f003 0307 	and.w	r3, r3, #7
 8002f5e:	2b05      	cmp	r3, #5
 8002f60:	d826      	bhi.n	8002fb0 <UART_SetConfig+0x1f4>
 8002f62:	a201      	add	r2, pc, #4	@ (adr r2, 8002f68 <UART_SetConfig+0x1ac>)
 8002f64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f68:	08002f81 	.word	0x08002f81
 8002f6c:	08002f89 	.word	0x08002f89
 8002f70:	08002f91 	.word	0x08002f91
 8002f74:	08002f99 	.word	0x08002f99
 8002f78:	08002fa1 	.word	0x08002fa1
 8002f7c:	08002fa9 	.word	0x08002fa9
 8002f80:	2300      	movs	r3, #0
 8002f82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8002f86:	e1ec      	b.n	8003362 <UART_SetConfig+0x5a6>
 8002f88:	2304      	movs	r3, #4
 8002f8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8002f8e:	e1e8      	b.n	8003362 <UART_SetConfig+0x5a6>
 8002f90:	2308      	movs	r3, #8
 8002f92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8002f96:	e1e4      	b.n	8003362 <UART_SetConfig+0x5a6>
 8002f98:	2310      	movs	r3, #16
 8002f9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8002f9e:	e1e0      	b.n	8003362 <UART_SetConfig+0x5a6>
 8002fa0:	2320      	movs	r3, #32
 8002fa2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8002fa6:	e1dc      	b.n	8003362 <UART_SetConfig+0x5a6>
 8002fa8:	2340      	movs	r3, #64	@ 0x40
 8002faa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8002fae:	e1d8      	b.n	8003362 <UART_SetConfig+0x5a6>
 8002fb0:	2380      	movs	r3, #128	@ 0x80
 8002fb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8002fb6:	e1d4      	b.n	8003362 <UART_SetConfig+0x5a6>
 8002fb8:	697b      	ldr	r3, [r7, #20]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a4f      	ldr	r2, [pc, #316]	@ (80030fc <UART_SetConfig+0x340>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d130      	bne.n	8003024 <UART_SetConfig+0x268>
 8002fc2:	4b4c      	ldr	r3, [pc, #304]	@ (80030f4 <UART_SetConfig+0x338>)
 8002fc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fc6:	f003 0307 	and.w	r3, r3, #7
 8002fca:	2b05      	cmp	r3, #5
 8002fcc:	d826      	bhi.n	800301c <UART_SetConfig+0x260>
 8002fce:	a201      	add	r2, pc, #4	@ (adr r2, 8002fd4 <UART_SetConfig+0x218>)
 8002fd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fd4:	08002fed 	.word	0x08002fed
 8002fd8:	08002ff5 	.word	0x08002ff5
 8002fdc:	08002ffd 	.word	0x08002ffd
 8002fe0:	08003005 	.word	0x08003005
 8002fe4:	0800300d 	.word	0x0800300d
 8002fe8:	08003015 	.word	0x08003015
 8002fec:	2300      	movs	r3, #0
 8002fee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8002ff2:	e1b6      	b.n	8003362 <UART_SetConfig+0x5a6>
 8002ff4:	2304      	movs	r3, #4
 8002ff6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8002ffa:	e1b2      	b.n	8003362 <UART_SetConfig+0x5a6>
 8002ffc:	2308      	movs	r3, #8
 8002ffe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003002:	e1ae      	b.n	8003362 <UART_SetConfig+0x5a6>
 8003004:	2310      	movs	r3, #16
 8003006:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800300a:	e1aa      	b.n	8003362 <UART_SetConfig+0x5a6>
 800300c:	2320      	movs	r3, #32
 800300e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003012:	e1a6      	b.n	8003362 <UART_SetConfig+0x5a6>
 8003014:	2340      	movs	r3, #64	@ 0x40
 8003016:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800301a:	e1a2      	b.n	8003362 <UART_SetConfig+0x5a6>
 800301c:	2380      	movs	r3, #128	@ 0x80
 800301e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003022:	e19e      	b.n	8003362 <UART_SetConfig+0x5a6>
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a35      	ldr	r2, [pc, #212]	@ (8003100 <UART_SetConfig+0x344>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d130      	bne.n	8003090 <UART_SetConfig+0x2d4>
 800302e:	4b31      	ldr	r3, [pc, #196]	@ (80030f4 <UART_SetConfig+0x338>)
 8003030:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003032:	f003 0307 	and.w	r3, r3, #7
 8003036:	2b05      	cmp	r3, #5
 8003038:	d826      	bhi.n	8003088 <UART_SetConfig+0x2cc>
 800303a:	a201      	add	r2, pc, #4	@ (adr r2, 8003040 <UART_SetConfig+0x284>)
 800303c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003040:	08003059 	.word	0x08003059
 8003044:	08003061 	.word	0x08003061
 8003048:	08003069 	.word	0x08003069
 800304c:	08003071 	.word	0x08003071
 8003050:	08003079 	.word	0x08003079
 8003054:	08003081 	.word	0x08003081
 8003058:	2300      	movs	r3, #0
 800305a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800305e:	e180      	b.n	8003362 <UART_SetConfig+0x5a6>
 8003060:	2304      	movs	r3, #4
 8003062:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003066:	e17c      	b.n	8003362 <UART_SetConfig+0x5a6>
 8003068:	2308      	movs	r3, #8
 800306a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800306e:	e178      	b.n	8003362 <UART_SetConfig+0x5a6>
 8003070:	2310      	movs	r3, #16
 8003072:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003076:	e174      	b.n	8003362 <UART_SetConfig+0x5a6>
 8003078:	2320      	movs	r3, #32
 800307a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800307e:	e170      	b.n	8003362 <UART_SetConfig+0x5a6>
 8003080:	2340      	movs	r3, #64	@ 0x40
 8003082:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003086:	e16c      	b.n	8003362 <UART_SetConfig+0x5a6>
 8003088:	2380      	movs	r3, #128	@ 0x80
 800308a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800308e:	e168      	b.n	8003362 <UART_SetConfig+0x5a6>
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a1b      	ldr	r2, [pc, #108]	@ (8003104 <UART_SetConfig+0x348>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d142      	bne.n	8003120 <UART_SetConfig+0x364>
 800309a:	4b16      	ldr	r3, [pc, #88]	@ (80030f4 <UART_SetConfig+0x338>)
 800309c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800309e:	f003 0307 	and.w	r3, r3, #7
 80030a2:	2b05      	cmp	r3, #5
 80030a4:	d838      	bhi.n	8003118 <UART_SetConfig+0x35c>
 80030a6:	a201      	add	r2, pc, #4	@ (adr r2, 80030ac <UART_SetConfig+0x2f0>)
 80030a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030ac:	080030c5 	.word	0x080030c5
 80030b0:	080030cd 	.word	0x080030cd
 80030b4:	080030d5 	.word	0x080030d5
 80030b8:	080030dd 	.word	0x080030dd
 80030bc:	08003109 	.word	0x08003109
 80030c0:	08003111 	.word	0x08003111
 80030c4:	2300      	movs	r3, #0
 80030c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80030ca:	e14a      	b.n	8003362 <UART_SetConfig+0x5a6>
 80030cc:	2304      	movs	r3, #4
 80030ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80030d2:	e146      	b.n	8003362 <UART_SetConfig+0x5a6>
 80030d4:	2308      	movs	r3, #8
 80030d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80030da:	e142      	b.n	8003362 <UART_SetConfig+0x5a6>
 80030dc:	2310      	movs	r3, #16
 80030de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80030e2:	e13e      	b.n	8003362 <UART_SetConfig+0x5a6>
 80030e4:	cfff69f3 	.word	0xcfff69f3
 80030e8:	58000c00 	.word	0x58000c00
 80030ec:	11fff4ff 	.word	0x11fff4ff
 80030f0:	40011000 	.word	0x40011000
 80030f4:	58024400 	.word	0x58024400
 80030f8:	40004400 	.word	0x40004400
 80030fc:	40004800 	.word	0x40004800
 8003100:	40004c00 	.word	0x40004c00
 8003104:	40005000 	.word	0x40005000
 8003108:	2320      	movs	r3, #32
 800310a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800310e:	e128      	b.n	8003362 <UART_SetConfig+0x5a6>
 8003110:	2340      	movs	r3, #64	@ 0x40
 8003112:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003116:	e124      	b.n	8003362 <UART_SetConfig+0x5a6>
 8003118:	2380      	movs	r3, #128	@ 0x80
 800311a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800311e:	e120      	b.n	8003362 <UART_SetConfig+0x5a6>
 8003120:	697b      	ldr	r3, [r7, #20]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4acb      	ldr	r2, [pc, #812]	@ (8003454 <UART_SetConfig+0x698>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d176      	bne.n	8003218 <UART_SetConfig+0x45c>
 800312a:	4bcb      	ldr	r3, [pc, #812]	@ (8003458 <UART_SetConfig+0x69c>)
 800312c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800312e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003132:	2b28      	cmp	r3, #40	@ 0x28
 8003134:	d86c      	bhi.n	8003210 <UART_SetConfig+0x454>
 8003136:	a201      	add	r2, pc, #4	@ (adr r2, 800313c <UART_SetConfig+0x380>)
 8003138:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800313c:	080031e1 	.word	0x080031e1
 8003140:	08003211 	.word	0x08003211
 8003144:	08003211 	.word	0x08003211
 8003148:	08003211 	.word	0x08003211
 800314c:	08003211 	.word	0x08003211
 8003150:	08003211 	.word	0x08003211
 8003154:	08003211 	.word	0x08003211
 8003158:	08003211 	.word	0x08003211
 800315c:	080031e9 	.word	0x080031e9
 8003160:	08003211 	.word	0x08003211
 8003164:	08003211 	.word	0x08003211
 8003168:	08003211 	.word	0x08003211
 800316c:	08003211 	.word	0x08003211
 8003170:	08003211 	.word	0x08003211
 8003174:	08003211 	.word	0x08003211
 8003178:	08003211 	.word	0x08003211
 800317c:	080031f1 	.word	0x080031f1
 8003180:	08003211 	.word	0x08003211
 8003184:	08003211 	.word	0x08003211
 8003188:	08003211 	.word	0x08003211
 800318c:	08003211 	.word	0x08003211
 8003190:	08003211 	.word	0x08003211
 8003194:	08003211 	.word	0x08003211
 8003198:	08003211 	.word	0x08003211
 800319c:	080031f9 	.word	0x080031f9
 80031a0:	08003211 	.word	0x08003211
 80031a4:	08003211 	.word	0x08003211
 80031a8:	08003211 	.word	0x08003211
 80031ac:	08003211 	.word	0x08003211
 80031b0:	08003211 	.word	0x08003211
 80031b4:	08003211 	.word	0x08003211
 80031b8:	08003211 	.word	0x08003211
 80031bc:	08003201 	.word	0x08003201
 80031c0:	08003211 	.word	0x08003211
 80031c4:	08003211 	.word	0x08003211
 80031c8:	08003211 	.word	0x08003211
 80031cc:	08003211 	.word	0x08003211
 80031d0:	08003211 	.word	0x08003211
 80031d4:	08003211 	.word	0x08003211
 80031d8:	08003211 	.word	0x08003211
 80031dc:	08003209 	.word	0x08003209
 80031e0:	2301      	movs	r3, #1
 80031e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80031e6:	e0bc      	b.n	8003362 <UART_SetConfig+0x5a6>
 80031e8:	2304      	movs	r3, #4
 80031ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80031ee:	e0b8      	b.n	8003362 <UART_SetConfig+0x5a6>
 80031f0:	2308      	movs	r3, #8
 80031f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80031f6:	e0b4      	b.n	8003362 <UART_SetConfig+0x5a6>
 80031f8:	2310      	movs	r3, #16
 80031fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80031fe:	e0b0      	b.n	8003362 <UART_SetConfig+0x5a6>
 8003200:	2320      	movs	r3, #32
 8003202:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003206:	e0ac      	b.n	8003362 <UART_SetConfig+0x5a6>
 8003208:	2340      	movs	r3, #64	@ 0x40
 800320a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800320e:	e0a8      	b.n	8003362 <UART_SetConfig+0x5a6>
 8003210:	2380      	movs	r3, #128	@ 0x80
 8003212:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003216:	e0a4      	b.n	8003362 <UART_SetConfig+0x5a6>
 8003218:	697b      	ldr	r3, [r7, #20]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a8f      	ldr	r2, [pc, #572]	@ (800345c <UART_SetConfig+0x6a0>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d130      	bne.n	8003284 <UART_SetConfig+0x4c8>
 8003222:	4b8d      	ldr	r3, [pc, #564]	@ (8003458 <UART_SetConfig+0x69c>)
 8003224:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003226:	f003 0307 	and.w	r3, r3, #7
 800322a:	2b05      	cmp	r3, #5
 800322c:	d826      	bhi.n	800327c <UART_SetConfig+0x4c0>
 800322e:	a201      	add	r2, pc, #4	@ (adr r2, 8003234 <UART_SetConfig+0x478>)
 8003230:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003234:	0800324d 	.word	0x0800324d
 8003238:	08003255 	.word	0x08003255
 800323c:	0800325d 	.word	0x0800325d
 8003240:	08003265 	.word	0x08003265
 8003244:	0800326d 	.word	0x0800326d
 8003248:	08003275 	.word	0x08003275
 800324c:	2300      	movs	r3, #0
 800324e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003252:	e086      	b.n	8003362 <UART_SetConfig+0x5a6>
 8003254:	2304      	movs	r3, #4
 8003256:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800325a:	e082      	b.n	8003362 <UART_SetConfig+0x5a6>
 800325c:	2308      	movs	r3, #8
 800325e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003262:	e07e      	b.n	8003362 <UART_SetConfig+0x5a6>
 8003264:	2310      	movs	r3, #16
 8003266:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800326a:	e07a      	b.n	8003362 <UART_SetConfig+0x5a6>
 800326c:	2320      	movs	r3, #32
 800326e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003272:	e076      	b.n	8003362 <UART_SetConfig+0x5a6>
 8003274:	2340      	movs	r3, #64	@ 0x40
 8003276:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800327a:	e072      	b.n	8003362 <UART_SetConfig+0x5a6>
 800327c:	2380      	movs	r3, #128	@ 0x80
 800327e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003282:	e06e      	b.n	8003362 <UART_SetConfig+0x5a6>
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a75      	ldr	r2, [pc, #468]	@ (8003460 <UART_SetConfig+0x6a4>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d130      	bne.n	80032f0 <UART_SetConfig+0x534>
 800328e:	4b72      	ldr	r3, [pc, #456]	@ (8003458 <UART_SetConfig+0x69c>)
 8003290:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003292:	f003 0307 	and.w	r3, r3, #7
 8003296:	2b05      	cmp	r3, #5
 8003298:	d826      	bhi.n	80032e8 <UART_SetConfig+0x52c>
 800329a:	a201      	add	r2, pc, #4	@ (adr r2, 80032a0 <UART_SetConfig+0x4e4>)
 800329c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032a0:	080032b9 	.word	0x080032b9
 80032a4:	080032c1 	.word	0x080032c1
 80032a8:	080032c9 	.word	0x080032c9
 80032ac:	080032d1 	.word	0x080032d1
 80032b0:	080032d9 	.word	0x080032d9
 80032b4:	080032e1 	.word	0x080032e1
 80032b8:	2300      	movs	r3, #0
 80032ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80032be:	e050      	b.n	8003362 <UART_SetConfig+0x5a6>
 80032c0:	2304      	movs	r3, #4
 80032c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80032c6:	e04c      	b.n	8003362 <UART_SetConfig+0x5a6>
 80032c8:	2308      	movs	r3, #8
 80032ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80032ce:	e048      	b.n	8003362 <UART_SetConfig+0x5a6>
 80032d0:	2310      	movs	r3, #16
 80032d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80032d6:	e044      	b.n	8003362 <UART_SetConfig+0x5a6>
 80032d8:	2320      	movs	r3, #32
 80032da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80032de:	e040      	b.n	8003362 <UART_SetConfig+0x5a6>
 80032e0:	2340      	movs	r3, #64	@ 0x40
 80032e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80032e6:	e03c      	b.n	8003362 <UART_SetConfig+0x5a6>
 80032e8:	2380      	movs	r3, #128	@ 0x80
 80032ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80032ee:	e038      	b.n	8003362 <UART_SetConfig+0x5a6>
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a5b      	ldr	r2, [pc, #364]	@ (8003464 <UART_SetConfig+0x6a8>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d130      	bne.n	800335c <UART_SetConfig+0x5a0>
 80032fa:	4b57      	ldr	r3, [pc, #348]	@ (8003458 <UART_SetConfig+0x69c>)
 80032fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032fe:	f003 0307 	and.w	r3, r3, #7
 8003302:	2b05      	cmp	r3, #5
 8003304:	d826      	bhi.n	8003354 <UART_SetConfig+0x598>
 8003306:	a201      	add	r2, pc, #4	@ (adr r2, 800330c <UART_SetConfig+0x550>)
 8003308:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800330c:	08003325 	.word	0x08003325
 8003310:	0800332d 	.word	0x0800332d
 8003314:	08003335 	.word	0x08003335
 8003318:	0800333d 	.word	0x0800333d
 800331c:	08003345 	.word	0x08003345
 8003320:	0800334d 	.word	0x0800334d
 8003324:	2302      	movs	r3, #2
 8003326:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800332a:	e01a      	b.n	8003362 <UART_SetConfig+0x5a6>
 800332c:	2304      	movs	r3, #4
 800332e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003332:	e016      	b.n	8003362 <UART_SetConfig+0x5a6>
 8003334:	2308      	movs	r3, #8
 8003336:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800333a:	e012      	b.n	8003362 <UART_SetConfig+0x5a6>
 800333c:	2310      	movs	r3, #16
 800333e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003342:	e00e      	b.n	8003362 <UART_SetConfig+0x5a6>
 8003344:	2320      	movs	r3, #32
 8003346:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800334a:	e00a      	b.n	8003362 <UART_SetConfig+0x5a6>
 800334c:	2340      	movs	r3, #64	@ 0x40
 800334e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003352:	e006      	b.n	8003362 <UART_SetConfig+0x5a6>
 8003354:	2380      	movs	r3, #128	@ 0x80
 8003356:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800335a:	e002      	b.n	8003362 <UART_SetConfig+0x5a6>
 800335c:	2380      	movs	r3, #128	@ 0x80
 800335e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003362:	697b      	ldr	r3, [r7, #20]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a3f      	ldr	r2, [pc, #252]	@ (8003464 <UART_SetConfig+0x6a8>)
 8003368:	4293      	cmp	r3, r2
 800336a:	f040 80f8 	bne.w	800355e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800336e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8003372:	2b20      	cmp	r3, #32
 8003374:	dc46      	bgt.n	8003404 <UART_SetConfig+0x648>
 8003376:	2b02      	cmp	r3, #2
 8003378:	f2c0 8082 	blt.w	8003480 <UART_SetConfig+0x6c4>
 800337c:	3b02      	subs	r3, #2
 800337e:	2b1e      	cmp	r3, #30
 8003380:	d87e      	bhi.n	8003480 <UART_SetConfig+0x6c4>
 8003382:	a201      	add	r2, pc, #4	@ (adr r2, 8003388 <UART_SetConfig+0x5cc>)
 8003384:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003388:	0800340b 	.word	0x0800340b
 800338c:	08003481 	.word	0x08003481
 8003390:	08003413 	.word	0x08003413
 8003394:	08003481 	.word	0x08003481
 8003398:	08003481 	.word	0x08003481
 800339c:	08003481 	.word	0x08003481
 80033a0:	08003423 	.word	0x08003423
 80033a4:	08003481 	.word	0x08003481
 80033a8:	08003481 	.word	0x08003481
 80033ac:	08003481 	.word	0x08003481
 80033b0:	08003481 	.word	0x08003481
 80033b4:	08003481 	.word	0x08003481
 80033b8:	08003481 	.word	0x08003481
 80033bc:	08003481 	.word	0x08003481
 80033c0:	08003433 	.word	0x08003433
 80033c4:	08003481 	.word	0x08003481
 80033c8:	08003481 	.word	0x08003481
 80033cc:	08003481 	.word	0x08003481
 80033d0:	08003481 	.word	0x08003481
 80033d4:	08003481 	.word	0x08003481
 80033d8:	08003481 	.word	0x08003481
 80033dc:	08003481 	.word	0x08003481
 80033e0:	08003481 	.word	0x08003481
 80033e4:	08003481 	.word	0x08003481
 80033e8:	08003481 	.word	0x08003481
 80033ec:	08003481 	.word	0x08003481
 80033f0:	08003481 	.word	0x08003481
 80033f4:	08003481 	.word	0x08003481
 80033f8:	08003481 	.word	0x08003481
 80033fc:	08003481 	.word	0x08003481
 8003400:	08003473 	.word	0x08003473
 8003404:	2b40      	cmp	r3, #64	@ 0x40
 8003406:	d037      	beq.n	8003478 <UART_SetConfig+0x6bc>
 8003408:	e03a      	b.n	8003480 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800340a:	f7ff f9bf 	bl	800278c <HAL_RCCEx_GetD3PCLK1Freq>
 800340e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8003410:	e03c      	b.n	800348c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003412:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003416:	4618      	mov	r0, r3
 8003418:	f7ff f9ce 	bl	80027b8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800341c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800341e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8003420:	e034      	b.n	800348c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003422:	f107 0318 	add.w	r3, r7, #24
 8003426:	4618      	mov	r0, r3
 8003428:	f7ff fb1a 	bl	8002a60 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800342c:	69fb      	ldr	r3, [r7, #28]
 800342e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8003430:	e02c      	b.n	800348c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003432:	4b09      	ldr	r3, [pc, #36]	@ (8003458 <UART_SetConfig+0x69c>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f003 0320 	and.w	r3, r3, #32
 800343a:	2b00      	cmp	r3, #0
 800343c:	d016      	beq.n	800346c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800343e:	4b06      	ldr	r3, [pc, #24]	@ (8003458 <UART_SetConfig+0x69c>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	08db      	lsrs	r3, r3, #3
 8003444:	f003 0303 	and.w	r3, r3, #3
 8003448:	4a07      	ldr	r2, [pc, #28]	@ (8003468 <UART_SetConfig+0x6ac>)
 800344a:	fa22 f303 	lsr.w	r3, r2, r3
 800344e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003450:	e01c      	b.n	800348c <UART_SetConfig+0x6d0>
 8003452:	bf00      	nop
 8003454:	40011400 	.word	0x40011400
 8003458:	58024400 	.word	0x58024400
 800345c:	40007800 	.word	0x40007800
 8003460:	40007c00 	.word	0x40007c00
 8003464:	58000c00 	.word	0x58000c00
 8003468:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800346c:	4b9d      	ldr	r3, [pc, #628]	@ (80036e4 <UART_SetConfig+0x928>)
 800346e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8003470:	e00c      	b.n	800348c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8003472:	4b9d      	ldr	r3, [pc, #628]	@ (80036e8 <UART_SetConfig+0x92c>)
 8003474:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8003476:	e009      	b.n	800348c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003478:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800347c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800347e:	e005      	b.n	800348c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8003480:	2300      	movs	r3, #0
 8003482:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8003484:	2301      	movs	r3, #1
 8003486:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800348a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800348c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800348e:	2b00      	cmp	r3, #0
 8003490:	f000 81de 	beq.w	8003850 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003494:	697b      	ldr	r3, [r7, #20]
 8003496:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003498:	4a94      	ldr	r2, [pc, #592]	@ (80036ec <UART_SetConfig+0x930>)
 800349a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800349e:	461a      	mov	r2, r3
 80034a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80034a2:	fbb3 f3f2 	udiv	r3, r3, r2
 80034a6:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	685a      	ldr	r2, [r3, #4]
 80034ac:	4613      	mov	r3, r2
 80034ae:	005b      	lsls	r3, r3, #1
 80034b0:	4413      	add	r3, r2
 80034b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80034b4:	429a      	cmp	r2, r3
 80034b6:	d305      	bcc.n	80034c4 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80034be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80034c0:	429a      	cmp	r2, r3
 80034c2:	d903      	bls.n	80034cc <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80034c4:	2301      	movs	r3, #1
 80034c6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80034ca:	e1c1      	b.n	8003850 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80034cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80034ce:	2200      	movs	r2, #0
 80034d0:	60bb      	str	r3, [r7, #8]
 80034d2:	60fa      	str	r2, [r7, #12]
 80034d4:	697b      	ldr	r3, [r7, #20]
 80034d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034d8:	4a84      	ldr	r2, [pc, #528]	@ (80036ec <UART_SetConfig+0x930>)
 80034da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80034de:	b29b      	uxth	r3, r3
 80034e0:	2200      	movs	r2, #0
 80034e2:	603b      	str	r3, [r7, #0]
 80034e4:	607a      	str	r2, [r7, #4]
 80034e6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80034ea:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80034ee:	f7fc fef3 	bl	80002d8 <__aeabi_uldivmod>
 80034f2:	4602      	mov	r2, r0
 80034f4:	460b      	mov	r3, r1
 80034f6:	4610      	mov	r0, r2
 80034f8:	4619      	mov	r1, r3
 80034fa:	f04f 0200 	mov.w	r2, #0
 80034fe:	f04f 0300 	mov.w	r3, #0
 8003502:	020b      	lsls	r3, r1, #8
 8003504:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003508:	0202      	lsls	r2, r0, #8
 800350a:	6979      	ldr	r1, [r7, #20]
 800350c:	6849      	ldr	r1, [r1, #4]
 800350e:	0849      	lsrs	r1, r1, #1
 8003510:	2000      	movs	r0, #0
 8003512:	460c      	mov	r4, r1
 8003514:	4605      	mov	r5, r0
 8003516:	eb12 0804 	adds.w	r8, r2, r4
 800351a:	eb43 0905 	adc.w	r9, r3, r5
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	2200      	movs	r2, #0
 8003524:	469a      	mov	sl, r3
 8003526:	4693      	mov	fp, r2
 8003528:	4652      	mov	r2, sl
 800352a:	465b      	mov	r3, fp
 800352c:	4640      	mov	r0, r8
 800352e:	4649      	mov	r1, r9
 8003530:	f7fc fed2 	bl	80002d8 <__aeabi_uldivmod>
 8003534:	4602      	mov	r2, r0
 8003536:	460b      	mov	r3, r1
 8003538:	4613      	mov	r3, r2
 800353a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800353c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800353e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003542:	d308      	bcc.n	8003556 <UART_SetConfig+0x79a>
 8003544:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003546:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800354a:	d204      	bcs.n	8003556 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003552:	60da      	str	r2, [r3, #12]
 8003554:	e17c      	b.n	8003850 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8003556:	2301      	movs	r3, #1
 8003558:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800355c:	e178      	b.n	8003850 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800355e:	697b      	ldr	r3, [r7, #20]
 8003560:	69db      	ldr	r3, [r3, #28]
 8003562:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003566:	f040 80c5 	bne.w	80036f4 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800356a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800356e:	2b20      	cmp	r3, #32
 8003570:	dc48      	bgt.n	8003604 <UART_SetConfig+0x848>
 8003572:	2b00      	cmp	r3, #0
 8003574:	db7b      	blt.n	800366e <UART_SetConfig+0x8b2>
 8003576:	2b20      	cmp	r3, #32
 8003578:	d879      	bhi.n	800366e <UART_SetConfig+0x8b2>
 800357a:	a201      	add	r2, pc, #4	@ (adr r2, 8003580 <UART_SetConfig+0x7c4>)
 800357c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003580:	0800360b 	.word	0x0800360b
 8003584:	08003613 	.word	0x08003613
 8003588:	0800366f 	.word	0x0800366f
 800358c:	0800366f 	.word	0x0800366f
 8003590:	0800361b 	.word	0x0800361b
 8003594:	0800366f 	.word	0x0800366f
 8003598:	0800366f 	.word	0x0800366f
 800359c:	0800366f 	.word	0x0800366f
 80035a0:	0800362b 	.word	0x0800362b
 80035a4:	0800366f 	.word	0x0800366f
 80035a8:	0800366f 	.word	0x0800366f
 80035ac:	0800366f 	.word	0x0800366f
 80035b0:	0800366f 	.word	0x0800366f
 80035b4:	0800366f 	.word	0x0800366f
 80035b8:	0800366f 	.word	0x0800366f
 80035bc:	0800366f 	.word	0x0800366f
 80035c0:	0800363b 	.word	0x0800363b
 80035c4:	0800366f 	.word	0x0800366f
 80035c8:	0800366f 	.word	0x0800366f
 80035cc:	0800366f 	.word	0x0800366f
 80035d0:	0800366f 	.word	0x0800366f
 80035d4:	0800366f 	.word	0x0800366f
 80035d8:	0800366f 	.word	0x0800366f
 80035dc:	0800366f 	.word	0x0800366f
 80035e0:	0800366f 	.word	0x0800366f
 80035e4:	0800366f 	.word	0x0800366f
 80035e8:	0800366f 	.word	0x0800366f
 80035ec:	0800366f 	.word	0x0800366f
 80035f0:	0800366f 	.word	0x0800366f
 80035f4:	0800366f 	.word	0x0800366f
 80035f8:	0800366f 	.word	0x0800366f
 80035fc:	0800366f 	.word	0x0800366f
 8003600:	08003661 	.word	0x08003661
 8003604:	2b40      	cmp	r3, #64	@ 0x40
 8003606:	d02e      	beq.n	8003666 <UART_SetConfig+0x8aa>
 8003608:	e031      	b.n	800366e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800360a:	f7ff f893 	bl	8002734 <HAL_RCC_GetPCLK1Freq>
 800360e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8003610:	e033      	b.n	800367a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003612:	f7ff f8a5 	bl	8002760 <HAL_RCC_GetPCLK2Freq>
 8003616:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8003618:	e02f      	b.n	800367a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800361a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800361e:	4618      	mov	r0, r3
 8003620:	f7ff f8ca 	bl	80027b8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8003624:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003626:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8003628:	e027      	b.n	800367a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800362a:	f107 0318 	add.w	r3, r7, #24
 800362e:	4618      	mov	r0, r3
 8003630:	f7ff fa16 	bl	8002a60 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8003634:	69fb      	ldr	r3, [r7, #28]
 8003636:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8003638:	e01f      	b.n	800367a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800363a:	4b2d      	ldr	r3, [pc, #180]	@ (80036f0 <UART_SetConfig+0x934>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f003 0320 	and.w	r3, r3, #32
 8003642:	2b00      	cmp	r3, #0
 8003644:	d009      	beq.n	800365a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8003646:	4b2a      	ldr	r3, [pc, #168]	@ (80036f0 <UART_SetConfig+0x934>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	08db      	lsrs	r3, r3, #3
 800364c:	f003 0303 	and.w	r3, r3, #3
 8003650:	4a24      	ldr	r2, [pc, #144]	@ (80036e4 <UART_SetConfig+0x928>)
 8003652:	fa22 f303 	lsr.w	r3, r2, r3
 8003656:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003658:	e00f      	b.n	800367a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800365a:	4b22      	ldr	r3, [pc, #136]	@ (80036e4 <UART_SetConfig+0x928>)
 800365c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800365e:	e00c      	b.n	800367a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8003660:	4b21      	ldr	r3, [pc, #132]	@ (80036e8 <UART_SetConfig+0x92c>)
 8003662:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8003664:	e009      	b.n	800367a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003666:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800366a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800366c:	e005      	b.n	800367a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800366e:	2300      	movs	r3, #0
 8003670:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8003672:	2301      	movs	r3, #1
 8003674:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8003678:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800367a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800367c:	2b00      	cmp	r3, #0
 800367e:	f000 80e7 	beq.w	8003850 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003682:	697b      	ldr	r3, [r7, #20]
 8003684:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003686:	4a19      	ldr	r2, [pc, #100]	@ (80036ec <UART_SetConfig+0x930>)
 8003688:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800368c:	461a      	mov	r2, r3
 800368e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003690:	fbb3 f3f2 	udiv	r3, r3, r2
 8003694:	005a      	lsls	r2, r3, #1
 8003696:	697b      	ldr	r3, [r7, #20]
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	085b      	lsrs	r3, r3, #1
 800369c:	441a      	add	r2, r3
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80036a6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80036a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036aa:	2b0f      	cmp	r3, #15
 80036ac:	d916      	bls.n	80036dc <UART_SetConfig+0x920>
 80036ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80036b4:	d212      	bcs.n	80036dc <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80036b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036b8:	b29b      	uxth	r3, r3
 80036ba:	f023 030f 	bic.w	r3, r3, #15
 80036be:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80036c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036c2:	085b      	lsrs	r3, r3, #1
 80036c4:	b29b      	uxth	r3, r3
 80036c6:	f003 0307 	and.w	r3, r3, #7
 80036ca:	b29a      	uxth	r2, r3
 80036cc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80036ce:	4313      	orrs	r3, r2
 80036d0:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80036d8:	60da      	str	r2, [r3, #12]
 80036da:	e0b9      	b.n	8003850 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80036dc:	2301      	movs	r3, #1
 80036de:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80036e2:	e0b5      	b.n	8003850 <UART_SetConfig+0xa94>
 80036e4:	03d09000 	.word	0x03d09000
 80036e8:	003d0900 	.word	0x003d0900
 80036ec:	08003d58 	.word	0x08003d58
 80036f0:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80036f4:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80036f8:	2b20      	cmp	r3, #32
 80036fa:	dc49      	bgt.n	8003790 <UART_SetConfig+0x9d4>
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	db7c      	blt.n	80037fa <UART_SetConfig+0xa3e>
 8003700:	2b20      	cmp	r3, #32
 8003702:	d87a      	bhi.n	80037fa <UART_SetConfig+0xa3e>
 8003704:	a201      	add	r2, pc, #4	@ (adr r2, 800370c <UART_SetConfig+0x950>)
 8003706:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800370a:	bf00      	nop
 800370c:	08003797 	.word	0x08003797
 8003710:	0800379f 	.word	0x0800379f
 8003714:	080037fb 	.word	0x080037fb
 8003718:	080037fb 	.word	0x080037fb
 800371c:	080037a7 	.word	0x080037a7
 8003720:	080037fb 	.word	0x080037fb
 8003724:	080037fb 	.word	0x080037fb
 8003728:	080037fb 	.word	0x080037fb
 800372c:	080037b7 	.word	0x080037b7
 8003730:	080037fb 	.word	0x080037fb
 8003734:	080037fb 	.word	0x080037fb
 8003738:	080037fb 	.word	0x080037fb
 800373c:	080037fb 	.word	0x080037fb
 8003740:	080037fb 	.word	0x080037fb
 8003744:	080037fb 	.word	0x080037fb
 8003748:	080037fb 	.word	0x080037fb
 800374c:	080037c7 	.word	0x080037c7
 8003750:	080037fb 	.word	0x080037fb
 8003754:	080037fb 	.word	0x080037fb
 8003758:	080037fb 	.word	0x080037fb
 800375c:	080037fb 	.word	0x080037fb
 8003760:	080037fb 	.word	0x080037fb
 8003764:	080037fb 	.word	0x080037fb
 8003768:	080037fb 	.word	0x080037fb
 800376c:	080037fb 	.word	0x080037fb
 8003770:	080037fb 	.word	0x080037fb
 8003774:	080037fb 	.word	0x080037fb
 8003778:	080037fb 	.word	0x080037fb
 800377c:	080037fb 	.word	0x080037fb
 8003780:	080037fb 	.word	0x080037fb
 8003784:	080037fb 	.word	0x080037fb
 8003788:	080037fb 	.word	0x080037fb
 800378c:	080037ed 	.word	0x080037ed
 8003790:	2b40      	cmp	r3, #64	@ 0x40
 8003792:	d02e      	beq.n	80037f2 <UART_SetConfig+0xa36>
 8003794:	e031      	b.n	80037fa <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003796:	f7fe ffcd 	bl	8002734 <HAL_RCC_GetPCLK1Freq>
 800379a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800379c:	e033      	b.n	8003806 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800379e:	f7fe ffdf 	bl	8002760 <HAL_RCC_GetPCLK2Freq>
 80037a2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80037a4:	e02f      	b.n	8003806 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80037a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80037aa:	4618      	mov	r0, r3
 80037ac:	f7ff f804 	bl	80027b8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80037b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80037b4:	e027      	b.n	8003806 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80037b6:	f107 0318 	add.w	r3, r7, #24
 80037ba:	4618      	mov	r0, r3
 80037bc:	f7ff f950 	bl	8002a60 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80037c0:	69fb      	ldr	r3, [r7, #28]
 80037c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80037c4:	e01f      	b.n	8003806 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80037c6:	4b2d      	ldr	r3, [pc, #180]	@ (800387c <UART_SetConfig+0xac0>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f003 0320 	and.w	r3, r3, #32
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d009      	beq.n	80037e6 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80037d2:	4b2a      	ldr	r3, [pc, #168]	@ (800387c <UART_SetConfig+0xac0>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	08db      	lsrs	r3, r3, #3
 80037d8:	f003 0303 	and.w	r3, r3, #3
 80037dc:	4a28      	ldr	r2, [pc, #160]	@ (8003880 <UART_SetConfig+0xac4>)
 80037de:	fa22 f303 	lsr.w	r3, r2, r3
 80037e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80037e4:	e00f      	b.n	8003806 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80037e6:	4b26      	ldr	r3, [pc, #152]	@ (8003880 <UART_SetConfig+0xac4>)
 80037e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80037ea:	e00c      	b.n	8003806 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80037ec:	4b25      	ldr	r3, [pc, #148]	@ (8003884 <UART_SetConfig+0xac8>)
 80037ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80037f0:	e009      	b.n	8003806 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80037f2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80037f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80037f8:	e005      	b.n	8003806 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80037fa:	2300      	movs	r3, #0
 80037fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80037fe:	2301      	movs	r3, #1
 8003800:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8003804:	bf00      	nop
    }

    if (pclk != 0U)
 8003806:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003808:	2b00      	cmp	r3, #0
 800380a:	d021      	beq.n	8003850 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800380c:	697b      	ldr	r3, [r7, #20]
 800380e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003810:	4a1d      	ldr	r2, [pc, #116]	@ (8003888 <UART_SetConfig+0xacc>)
 8003812:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003816:	461a      	mov	r2, r3
 8003818:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800381a:	fbb3 f2f2 	udiv	r2, r3, r2
 800381e:	697b      	ldr	r3, [r7, #20]
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	085b      	lsrs	r3, r3, #1
 8003824:	441a      	add	r2, r3
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	fbb2 f3f3 	udiv	r3, r2, r3
 800382e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003830:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003832:	2b0f      	cmp	r3, #15
 8003834:	d909      	bls.n	800384a <UART_SetConfig+0xa8e>
 8003836:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003838:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800383c:	d205      	bcs.n	800384a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800383e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003840:	b29a      	uxth	r2, r3
 8003842:	697b      	ldr	r3, [r7, #20]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	60da      	str	r2, [r3, #12]
 8003848:	e002      	b.n	8003850 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800384a:	2301      	movs	r3, #1
 800384c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	2201      	movs	r2, #1
 8003854:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8003858:	697b      	ldr	r3, [r7, #20]
 800385a:	2201      	movs	r2, #1
 800385c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	2200      	movs	r2, #0
 8003864:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8003866:	697b      	ldr	r3, [r7, #20]
 8003868:	2200      	movs	r2, #0
 800386a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800386c:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8003870:	4618      	mov	r0, r3
 8003872:	3748      	adds	r7, #72	@ 0x48
 8003874:	46bd      	mov	sp, r7
 8003876:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800387a:	bf00      	nop
 800387c:	58024400 	.word	0x58024400
 8003880:	03d09000 	.word	0x03d09000
 8003884:	003d0900 	.word	0x003d0900
 8003888:	08003d58 	.word	0x08003d58

0800388c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800388c:	b480      	push	{r7}
 800388e:	b083      	sub	sp, #12
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003898:	f003 0308 	and.w	r3, r3, #8
 800389c:	2b00      	cmp	r3, #0
 800389e:	d00a      	beq.n	80038b6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	430a      	orrs	r2, r1
 80038b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038ba:	f003 0301 	and.w	r3, r3, #1
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d00a      	beq.n	80038d8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	430a      	orrs	r2, r1
 80038d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038dc:	f003 0302 	and.w	r3, r3, #2
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d00a      	beq.n	80038fa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	430a      	orrs	r2, r1
 80038f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038fe:	f003 0304 	and.w	r3, r3, #4
 8003902:	2b00      	cmp	r3, #0
 8003904:	d00a      	beq.n	800391c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	430a      	orrs	r2, r1
 800391a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003920:	f003 0310 	and.w	r3, r3, #16
 8003924:	2b00      	cmp	r3, #0
 8003926:	d00a      	beq.n	800393e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	689b      	ldr	r3, [r3, #8]
 800392e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	430a      	orrs	r2, r1
 800393c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003942:	f003 0320 	and.w	r3, r3, #32
 8003946:	2b00      	cmp	r3, #0
 8003948:	d00a      	beq.n	8003960 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	689b      	ldr	r3, [r3, #8]
 8003950:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	430a      	orrs	r2, r1
 800395e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003964:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003968:	2b00      	cmp	r3, #0
 800396a:	d01a      	beq.n	80039a2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	430a      	orrs	r2, r1
 8003980:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003986:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800398a:	d10a      	bne.n	80039a2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	685b      	ldr	r3, [r3, #4]
 8003992:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	430a      	orrs	r2, r1
 80039a0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d00a      	beq.n	80039c4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	430a      	orrs	r2, r1
 80039c2:	605a      	str	r2, [r3, #4]
  }
}
 80039c4:	bf00      	nop
 80039c6:	370c      	adds	r7, #12
 80039c8:	46bd      	mov	sp, r7
 80039ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ce:	4770      	bx	lr

080039d0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b098      	sub	sp, #96	@ 0x60
 80039d4:	af02      	add	r7, sp, #8
 80039d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2200      	movs	r2, #0
 80039dc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80039e0:	f7fd faf0 	bl	8000fc4 <HAL_GetTick>
 80039e4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f003 0308 	and.w	r3, r3, #8
 80039f0:	2b08      	cmp	r3, #8
 80039f2:	d12f      	bne.n	8003a54 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80039f4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80039f8:	9300      	str	r3, [sp, #0]
 80039fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039fc:	2200      	movs	r2, #0
 80039fe:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003a02:	6878      	ldr	r0, [r7, #4]
 8003a04:	f000 f88e 	bl	8003b24 <UART_WaitOnFlagUntilTimeout>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d022      	beq.n	8003a54 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a16:	e853 3f00 	ldrex	r3, [r3]
 8003a1a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003a1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a1e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003a22:	653b      	str	r3, [r7, #80]	@ 0x50
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	461a      	mov	r2, r3
 8003a2a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003a2c:	647b      	str	r3, [r7, #68]	@ 0x44
 8003a2e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a30:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003a32:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003a34:	e841 2300 	strex	r3, r2, [r1]
 8003a38:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003a3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d1e6      	bne.n	8003a0e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2220      	movs	r2, #32
 8003a44:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003a50:	2303      	movs	r3, #3
 8003a52:	e063      	b.n	8003b1c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f003 0304 	and.w	r3, r3, #4
 8003a5e:	2b04      	cmp	r3, #4
 8003a60:	d149      	bne.n	8003af6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a62:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003a66:	9300      	str	r3, [sp, #0]
 8003a68:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003a70:	6878      	ldr	r0, [r7, #4]
 8003a72:	f000 f857 	bl	8003b24 <UART_WaitOnFlagUntilTimeout>
 8003a76:	4603      	mov	r3, r0
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d03c      	beq.n	8003af6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a84:	e853 3f00 	ldrex	r3, [r3]
 8003a88:	623b      	str	r3, [r7, #32]
   return(result);
 8003a8a:	6a3b      	ldr	r3, [r7, #32]
 8003a8c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003a90:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	461a      	mov	r2, r3
 8003a98:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003a9a:	633b      	str	r3, [r7, #48]	@ 0x30
 8003a9c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a9e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003aa0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003aa2:	e841 2300 	strex	r3, r2, [r1]
 8003aa6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003aa8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d1e6      	bne.n	8003a7c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	3308      	adds	r3, #8
 8003ab4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	e853 3f00 	ldrex	r3, [r3]
 8003abc:	60fb      	str	r3, [r7, #12]
   return(result);
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	f023 0301 	bic.w	r3, r3, #1
 8003ac4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	3308      	adds	r3, #8
 8003acc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003ace:	61fa      	str	r2, [r7, #28]
 8003ad0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ad2:	69b9      	ldr	r1, [r7, #24]
 8003ad4:	69fa      	ldr	r2, [r7, #28]
 8003ad6:	e841 2300 	strex	r3, r2, [r1]
 8003ada:	617b      	str	r3, [r7, #20]
   return(result);
 8003adc:	697b      	ldr	r3, [r7, #20]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d1e5      	bne.n	8003aae <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2220      	movs	r2, #32
 8003ae6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2200      	movs	r2, #0
 8003aee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003af2:	2303      	movs	r3, #3
 8003af4:	e012      	b.n	8003b1c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2220      	movs	r2, #32
 8003afa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2220      	movs	r2, #32
 8003b02:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2200      	movs	r2, #0
 8003b16:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003b1a:	2300      	movs	r3, #0
}
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	3758      	adds	r7, #88	@ 0x58
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bd80      	pop	{r7, pc}

08003b24 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b084      	sub	sp, #16
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	60f8      	str	r0, [r7, #12]
 8003b2c:	60b9      	str	r1, [r7, #8]
 8003b2e:	603b      	str	r3, [r7, #0]
 8003b30:	4613      	mov	r3, r2
 8003b32:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b34:	e04f      	b.n	8003bd6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b36:	69bb      	ldr	r3, [r7, #24]
 8003b38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b3c:	d04b      	beq.n	8003bd6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b3e:	f7fd fa41 	bl	8000fc4 <HAL_GetTick>
 8003b42:	4602      	mov	r2, r0
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	1ad3      	subs	r3, r2, r3
 8003b48:	69ba      	ldr	r2, [r7, #24]
 8003b4a:	429a      	cmp	r2, r3
 8003b4c:	d302      	bcc.n	8003b54 <UART_WaitOnFlagUntilTimeout+0x30>
 8003b4e:	69bb      	ldr	r3, [r7, #24]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d101      	bne.n	8003b58 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003b54:	2303      	movs	r3, #3
 8003b56:	e04e      	b.n	8003bf6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f003 0304 	and.w	r3, r3, #4
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d037      	beq.n	8003bd6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003b66:	68bb      	ldr	r3, [r7, #8]
 8003b68:	2b80      	cmp	r3, #128	@ 0x80
 8003b6a:	d034      	beq.n	8003bd6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	2b40      	cmp	r3, #64	@ 0x40
 8003b70:	d031      	beq.n	8003bd6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	69db      	ldr	r3, [r3, #28]
 8003b78:	f003 0308 	and.w	r3, r3, #8
 8003b7c:	2b08      	cmp	r3, #8
 8003b7e:	d110      	bne.n	8003ba2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	2208      	movs	r2, #8
 8003b86:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003b88:	68f8      	ldr	r0, [r7, #12]
 8003b8a:	f000 f839 	bl	8003c00 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	2208      	movs	r2, #8
 8003b92:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	e029      	b.n	8003bf6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	69db      	ldr	r3, [r3, #28]
 8003ba8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003bac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003bb0:	d111      	bne.n	8003bd6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003bba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003bbc:	68f8      	ldr	r0, [r7, #12]
 8003bbe:	f000 f81f 	bl	8003c00 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	2220      	movs	r2, #32
 8003bc6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	2200      	movs	r2, #0
 8003bce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8003bd2:	2303      	movs	r3, #3
 8003bd4:	e00f      	b.n	8003bf6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	69da      	ldr	r2, [r3, #28]
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	4013      	ands	r3, r2
 8003be0:	68ba      	ldr	r2, [r7, #8]
 8003be2:	429a      	cmp	r2, r3
 8003be4:	bf0c      	ite	eq
 8003be6:	2301      	moveq	r3, #1
 8003be8:	2300      	movne	r3, #0
 8003bea:	b2db      	uxtb	r3, r3
 8003bec:	461a      	mov	r2, r3
 8003bee:	79fb      	ldrb	r3, [r7, #7]
 8003bf0:	429a      	cmp	r2, r3
 8003bf2:	d0a0      	beq.n	8003b36 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003bf4:	2300      	movs	r3, #0
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	3710      	adds	r7, #16
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}
	...

08003c00 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b095      	sub	sp, #84	@ 0x54
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c10:	e853 3f00 	ldrex	r3, [r3]
 8003c14:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003c16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c18:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003c1c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	461a      	mov	r2, r3
 8003c24:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003c26:	643b      	str	r3, [r7, #64]	@ 0x40
 8003c28:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c2a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003c2c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003c2e:	e841 2300 	strex	r3, r2, [r1]
 8003c32:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003c34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d1e6      	bne.n	8003c08 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	3308      	adds	r3, #8
 8003c40:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c42:	6a3b      	ldr	r3, [r7, #32]
 8003c44:	e853 3f00 	ldrex	r3, [r3]
 8003c48:	61fb      	str	r3, [r7, #28]
   return(result);
 8003c4a:	69fa      	ldr	r2, [r7, #28]
 8003c4c:	4b1e      	ldr	r3, [pc, #120]	@ (8003cc8 <UART_EndRxTransfer+0xc8>)
 8003c4e:	4013      	ands	r3, r2
 8003c50:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	3308      	adds	r3, #8
 8003c58:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003c5a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003c5c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c5e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003c60:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003c62:	e841 2300 	strex	r3, r2, [r1]
 8003c66:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003c68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d1e5      	bne.n	8003c3a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003c72:	2b01      	cmp	r3, #1
 8003c74:	d118      	bne.n	8003ca8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	e853 3f00 	ldrex	r3, [r3]
 8003c82:	60bb      	str	r3, [r7, #8]
   return(result);
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	f023 0310 	bic.w	r3, r3, #16
 8003c8a:	647b      	str	r3, [r7, #68]	@ 0x44
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	461a      	mov	r2, r3
 8003c92:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003c94:	61bb      	str	r3, [r7, #24]
 8003c96:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c98:	6979      	ldr	r1, [r7, #20]
 8003c9a:	69ba      	ldr	r2, [r7, #24]
 8003c9c:	e841 2300 	strex	r3, r2, [r1]
 8003ca0:	613b      	str	r3, [r7, #16]
   return(result);
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d1e6      	bne.n	8003c76 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2220      	movs	r2, #32
 8003cac:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8003cbc:	bf00      	nop
 8003cbe:	3754      	adds	r7, #84	@ 0x54
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc6:	4770      	bx	lr
 8003cc8:	effffffe 	.word	0xeffffffe

08003ccc <memset>:
 8003ccc:	4402      	add	r2, r0
 8003cce:	4603      	mov	r3, r0
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d100      	bne.n	8003cd6 <memset+0xa>
 8003cd4:	4770      	bx	lr
 8003cd6:	f803 1b01 	strb.w	r1, [r3], #1
 8003cda:	e7f9      	b.n	8003cd0 <memset+0x4>

08003cdc <__libc_init_array>:
 8003cdc:	b570      	push	{r4, r5, r6, lr}
 8003cde:	4d0d      	ldr	r5, [pc, #52]	@ (8003d14 <__libc_init_array+0x38>)
 8003ce0:	4c0d      	ldr	r4, [pc, #52]	@ (8003d18 <__libc_init_array+0x3c>)
 8003ce2:	1b64      	subs	r4, r4, r5
 8003ce4:	10a4      	asrs	r4, r4, #2
 8003ce6:	2600      	movs	r6, #0
 8003ce8:	42a6      	cmp	r6, r4
 8003cea:	d109      	bne.n	8003d00 <__libc_init_array+0x24>
 8003cec:	4d0b      	ldr	r5, [pc, #44]	@ (8003d1c <__libc_init_array+0x40>)
 8003cee:	4c0c      	ldr	r4, [pc, #48]	@ (8003d20 <__libc_init_array+0x44>)
 8003cf0:	f000 f818 	bl	8003d24 <_init>
 8003cf4:	1b64      	subs	r4, r4, r5
 8003cf6:	10a4      	asrs	r4, r4, #2
 8003cf8:	2600      	movs	r6, #0
 8003cfa:	42a6      	cmp	r6, r4
 8003cfc:	d105      	bne.n	8003d0a <__libc_init_array+0x2e>
 8003cfe:	bd70      	pop	{r4, r5, r6, pc}
 8003d00:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d04:	4798      	blx	r3
 8003d06:	3601      	adds	r6, #1
 8003d08:	e7ee      	b.n	8003ce8 <__libc_init_array+0xc>
 8003d0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d0e:	4798      	blx	r3
 8003d10:	3601      	adds	r6, #1
 8003d12:	e7f2      	b.n	8003cfa <__libc_init_array+0x1e>
 8003d14:	08003d78 	.word	0x08003d78
 8003d18:	08003d78 	.word	0x08003d78
 8003d1c:	08003d78 	.word	0x08003d78
 8003d20:	08003d7c 	.word	0x08003d7c

08003d24 <_init>:
 8003d24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d26:	bf00      	nop
 8003d28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d2a:	bc08      	pop	{r3}
 8003d2c:	469e      	mov	lr, r3
 8003d2e:	4770      	bx	lr

08003d30 <_fini>:
 8003d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d32:	bf00      	nop
 8003d34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d36:	bc08      	pop	{r3}
 8003d38:	469e      	mov	lr, r3
 8003d3a:	4770      	bx	lr
